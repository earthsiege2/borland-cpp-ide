// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.0.1.3  $
// File generated on 1/24/2000 09:46:26 AM from Type Library described below.

// ************************************************************************ //
// Type Lib: d:\tlbgen\rampage\typelib\TypeLibraries\GRAPH9.olb (1)
// IID\LCID: {00020802-0000-0000-C000-000000000046}\0
// Helpfile: d:\tlbgen\rampage\typelib\TypeLibraries\VBAGRP9.CHM
// DepndLst: 
//   (1) v2.0 stdole, (D:\WINNT\System32\stdole2.tlb)
//   (2) v2.1 Office, (D:\msof2k\Office\mso9.dll)
//   (3) v4.0 StdVCL, (D:\tlbgen\rampage\typelib\typelibraries\testing\stdvcl40.tlb)
// ************************************************************************ //
#ifndef   __Graph_2K_h__
#define   __Graph_2K_h__

#pragma option push -b -w-inl

#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0500)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#include "Office_2K.h"


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Graph_2k
{

// *********************************************************************//
// HelpString: Microsoft Graph 9.0 Object Library
// Version:    1.3
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_Graph;
extern __declspec (package) const GUID GUID_Constants;
extern __declspec (package) const GUID GUID_XlCreator;
extern __declspec (package) const GUID GUID_XlChartGallery;
extern __declspec (package) const GUID GUID_XlColorIndex;
extern __declspec (package) const GUID GUID_XlEndStyleCap;
extern __declspec (package) const GUID GUID_XlRowCol;
extern __declspec (package) const GUID GUID_XlScaleType;
extern __declspec (package) const GUID GUID_XlDataSeriesType;
extern __declspec (package) const GUID GUID_XlAxisCrosses;
extern __declspec (package) const GUID GUID_XlAxisGroup;
extern __declspec (package) const GUID GUID_XlBackground;
extern __declspec (package) const GUID GUID_XlWindowState;
extern __declspec (package) const GUID GUID_XlAxisType;
extern __declspec (package) const GUID GUID_XlArrowHeadLength;
extern __declspec (package) const GUID GUID_XlVAlign;
extern __declspec (package) const GUID GUID_XlTickMark;
extern __declspec (package) const GUID GUID_XlErrorBarDirection;
extern __declspec (package) const GUID GUID_XlErrorBarInclude;
extern __declspec (package) const GUID GUID_XlDisplayBlanksAs;
extern __declspec (package) const GUID GUID_XlArrowHeadStyle;
extern __declspec (package) const GUID GUID_XlArrowHeadWidth;
extern __declspec (package) const GUID GUID_XlHAlign;
extern __declspec (package) const GUID GUID_XlTickLabelPosition;
extern __declspec (package) const GUID GUID_XlLegendPosition;
extern __declspec (package) const GUID GUID_XlChartPictureType;
extern __declspec (package) const GUID GUID_XlChartPicturePlacement;
extern __declspec (package) const GUID GUID_XlOrientation;
extern __declspec (package) const GUID GUID_XlTickLabelOrientation;
extern __declspec (package) const GUID GUID_XlBorderWeight;
extern __declspec (package) const GUID GUID_XlDataSeriesDate;
extern __declspec (package) const GUID GUID_XlUnderlineStyle;
extern __declspec (package) const GUID GUID_XlErrorBarType;
extern __declspec (package) const GUID GUID_XlTrendlineType;
extern __declspec (package) const GUID GUID_XlLineStyle;
extern __declspec (package) const GUID GUID_XlDataLabelsType;
extern __declspec (package) const GUID GUID_XlMarkerStyle;
extern __declspec (package) const GUID GUID_XlPictureConvertorType;
extern __declspec (package) const GUID GUID_XlPattern;
extern __declspec (package) const GUID GUID_XlChartSplitType;
extern __declspec (package) const GUID GUID_XlDisplayUnit;
extern __declspec (package) const GUID GUID_XlDataLabelPosition;
extern __declspec (package) const GUID GUID_XlTimeUnit;
extern __declspec (package) const GUID GUID_XlCategoryType;
extern __declspec (package) const GUID GUID_XlBarShape;
extern __declspec (package) const GUID GUID_XlChartType;
extern __declspec (package) const GUID GUID_XlChartItem;
extern __declspec (package) const GUID GUID_XlSizeRepresents;
extern __declspec (package) const GUID GUID_XlInsertShiftDirection;
extern __declspec (package) const GUID GUID_XlDeleteShiftDirection;
extern __declspec (package) const GUID GUID_XlDirection;
extern __declspec (package) const GUID GUID_XlConsolidationFunction;
extern __declspec (package) const GUID GUID_XlSheetType;
extern __declspec (package) const GUID GUID_XlLocationInTable;
extern __declspec (package) const GUID GUID_XlFindLookIn;
extern __declspec (package) const GUID GUID_XlWindowType;
extern __declspec (package) const GUID GUID_XlPivotFieldDataType;
extern __declspec (package) const GUID GUID_XlCopyPictureFormat;
extern __declspec (package) const GUID GUID_XlPivotTableSourceType;
extern __declspec (package) const GUID GUID_XlReferenceStyle;
extern __declspec (package) const GUID GUID_xlPivotFormatType;
extern __declspec (package) const GUID GUID_XlCmdType;
extern __declspec (package) const GUID GUID_xlColumnDataType;
extern __declspec (package) const GUID GUID_xlQueryType;
extern __declspec (package) const GUID GUID_xlWebSelectionType;
extern __declspec (package) const GUID GUID_XlCubeFieldType;
extern __declspec (package) const GUID GUID_xlWebFormatting;
extern __declspec (package) const GUID GUID_xlDisplayDrawingObjects;
extern __declspec (package) const GUID GUID_xLSubtototalLocationType;
extern __declspec (package) const GUID IID_GraphIFont;
extern __declspec (package) const GUID IID__IGlobal;
extern __declspec (package) const GUID IID_IChart;
extern __declspec (package) const GUID IID_IApplication;
extern __declspec (package) const GUID IID_IDataSheet;
extern __declspec (package) const GUID IID_IRange;
extern __declspec (package) const GUID IID_IAutoCorrect;
extern __declspec (package) const GUID IID_IBorder;
extern __declspec (package) const GUID IID_IInterior;
extern __declspec (package) const GUID IID_IChartFillFormat;
extern __declspec (package) const GUID IID_IChartColorFormat;
extern __declspec (package) const GUID IID_IAxis;
extern __declspec (package) const GUID IID_IChartTitle;
extern __declspec (package) const GUID IID_IAxisTitle;
extern __declspec (package) const GUID IID_IChartGroup;
extern __declspec (package) const GUID IID_IChartGroups;
extern __declspec (package) const GUID IID_IAxes;
extern __declspec (package) const GUID IID_IPoints;
extern __declspec (package) const GUID IID_IPoint;
extern __declspec (package) const GUID IID_ISeries;
extern __declspec (package) const GUID IID_ISeriesCollection;
extern __declspec (package) const GUID IID_IDataLabel;
extern __declspec (package) const GUID IID_IDataLabels;
extern __declspec (package) const GUID IID_ILegendEntry;
extern __declspec (package) const GUID IID_ILegendEntries;
extern __declspec (package) const GUID IID_ILegendKey;
extern __declspec (package) const GUID IID_ITrendlines;
extern __declspec (package) const GUID IID_ITrendline;
extern __declspec (package) const GUID IID_ICorners;
extern __declspec (package) const GUID IID_ISeriesLines;
extern __declspec (package) const GUID IID_IHiLoLines;
extern __declspec (package) const GUID IID_IGridlines;
extern __declspec (package) const GUID IID_IDropLines;
extern __declspec (package) const GUID IID_ILeaderLines;
extern __declspec (package) const GUID IID_IUpBars;
extern __declspec (package) const GUID IID_IDownBars;
extern __declspec (package) const GUID IID_IFloor;
extern __declspec (package) const GUID IID_IWalls;
extern __declspec (package) const GUID IID_ITickLabels;
extern __declspec (package) const GUID IID_IPlotArea;
extern __declspec (package) const GUID IID_IChartArea;
extern __declspec (package) const GUID IID_ILegend;
extern __declspec (package) const GUID IID_IErrorBars;
extern __declspec (package) const GUID IID_IDataTable;
extern __declspec (package) const GUID IID_IDisplayUnitLabel;
extern __declspec (package) const GUID DIID_Font;
extern __declspec (package) const GUID DIID__Global;
extern __declspec (package) const GUID DIID_Chart;
extern __declspec (package) const GUID DIID_GraphApplication;
extern __declspec (package) const GUID DIID_DataSheet;
extern __declspec (package) const GUID DIID_Range;
extern __declspec (package) const GUID DIID_AutoCorrect;
extern __declspec (package) const GUID DIID_Border;
extern __declspec (package) const GUID DIID_Interior;
extern __declspec (package) const GUID DIID_ChartFillFormat;
extern __declspec (package) const GUID DIID_ChartColorFormat;
extern __declspec (package) const GUID DIID_Axis;
extern __declspec (package) const GUID DIID_ChartTitle;
extern __declspec (package) const GUID DIID_AxisTitle;
extern __declspec (package) const GUID DIID_ChartGroup;
extern __declspec (package) const GUID DIID_ChartGroups;
extern __declspec (package) const GUID DIID_Axes;
extern __declspec (package) const GUID DIID_Points;
extern __declspec (package) const GUID DIID_Point;
extern __declspec (package) const GUID DIID_Series;
extern __declspec (package) const GUID DIID_SeriesCollection;
extern __declspec (package) const GUID DIID_DataLabel;
extern __declspec (package) const GUID DIID_DataLabels;
extern __declspec (package) const GUID DIID_LegendEntry;
extern __declspec (package) const GUID DIID_LegendEntries;
extern __declspec (package) const GUID DIID_LegendKey;
extern __declspec (package) const GUID DIID_Trendlines;
extern __declspec (package) const GUID DIID_Trendline;
extern __declspec (package) const GUID DIID_Corners;
extern __declspec (package) const GUID DIID_SeriesLines;
extern __declspec (package) const GUID DIID_HiLoLines;
extern __declspec (package) const GUID DIID_Gridlines;
extern __declspec (package) const GUID DIID_DropLines;
extern __declspec (package) const GUID DIID_LeaderLines;
extern __declspec (package) const GUID DIID_UpBars;
extern __declspec (package) const GUID DIID_DownBars;
extern __declspec (package) const GUID DIID_Floor;
extern __declspec (package) const GUID DIID_Walls;
extern __declspec (package) const GUID DIID_TickLabels;
extern __declspec (package) const GUID DIID_PlotArea;
extern __declspec (package) const GUID DIID_ChartArea;
extern __declspec (package) const GUID DIID_Legend;
extern __declspec (package) const GUID DIID_ErrorBars;
extern __declspec (package) const GUID DIID_DataTable;
extern __declspec (package) const GUID DIID_DisplayUnitLabel;
extern __declspec (package) const GUID IID_IShape;
extern __declspec (package) const GUID IID_IShapes;
extern __declspec (package) const GUID IID_IShapeRange;
extern __declspec (package) const GUID IID_IGroupShapes;
extern __declspec (package) const GUID IID_ITextFrame;
extern __declspec (package) const GUID IID_IConnectorFormat;
extern __declspec (package) const GUID IID_IFreeformBuilder;
extern __declspec (package) const GUID CLSID_Global;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
enum      Constants;
enum      XlCreator;
enum      XlChartGallery;
enum      XlColorIndex;
enum      XlEndStyleCap;
enum      XlRowCol;
enum      XlScaleType;
enum      XlDataSeriesType;
enum      XlAxisCrosses;
enum      XlAxisGroup;
enum      XlBackground;
enum      XlWindowState;
enum      XlAxisType;
enum      XlArrowHeadLength;
enum      XlVAlign;
enum      XlTickMark;
enum      XlErrorBarDirection;
enum      XlErrorBarInclude;
enum      XlDisplayBlanksAs;
enum      XlArrowHeadStyle;
enum      XlArrowHeadWidth;
enum      XlHAlign;
enum      XlTickLabelPosition;
enum      XlLegendPosition;
enum      XlChartPictureType;
enum      XlChartPicturePlacement;
enum      XlOrientation;
enum      XlTickLabelOrientation;
enum      XlBorderWeight;
enum      XlDataSeriesDate;
enum      XlUnderlineStyle;
enum      XlErrorBarType;
enum      XlTrendlineType;
enum      XlLineStyle;
enum      XlDataLabelsType;
enum      XlMarkerStyle;
enum      XlPictureConvertorType;
enum      XlPattern;
enum      XlChartSplitType;
enum      XlDisplayUnit;
enum      XlDataLabelPosition;
enum      XlTimeUnit;
enum      XlCategoryType;
enum      XlBarShape;
enum      XlChartType;
enum      XlChartItem;
enum      XlSizeRepresents;
enum      XlInsertShiftDirection;
enum      XlDeleteShiftDirection;
enum      XlDirection;
enum      XlConsolidationFunction;
enum      XlSheetType;
enum      XlLocationInTable;
enum      XlFindLookIn;
enum      XlWindowType;
enum      XlPivotFieldDataType;
enum      XlCopyPictureFormat;
enum      XlPivotTableSourceType;
enum      XlReferenceStyle;
enum      xlPivotFormatType;
enum      XlCmdType;
enum      xlColumnDataType;
enum      xlQueryType;
enum      xlWebSelectionType;
enum      XlCubeFieldType;
enum      xlWebFormatting;
enum      xlDisplayDrawingObjects;
enum      xLSubtototalLocationType;
interface DECLSPEC_UUID("{000208F3-0001-0000-C000-000000000046}") GraphIFont;
typedef TComInterface<GraphIFont, &IID_GraphIFont> GraphIFontPtr;
interface DECLSPEC_UUID("{000208FC-0001-0000-C000-000000000046}") _IGlobal;
typedef TComInterface<_IGlobal, &IID__IGlobal> _IGlobalPtr;
interface DECLSPEC_UUID("{000208FB-0001-0000-C000-000000000046}") IChart;
typedef TComInterface<IChart, &IID_IChart> IChartPtr;
interface DECLSPEC_UUID("{000208EC-0001-0000-C000-000000000046}") IApplication;
typedef TComInterface<IApplication, &IID_IApplication> IApplicationPtr;
interface DECLSPEC_UUID("{00024726-0001-0000-C000-000000000046}") IDataSheet;
typedef TComInterface<IDataSheet, &IID_IDataSheet> IDataSheetPtr;
interface DECLSPEC_UUID("{00024727-0001-0000-C000-000000000046}") IRange;
typedef TComInterface<IRange, &IID_IRange> IRangePtr;
interface DECLSPEC_UUID("{000208D4-0001-0000-C000-000000000046}") IAutoCorrect;
typedef TComInterface<IAutoCorrect, &IID_IAutoCorrect> IAutoCorrectPtr;
interface DECLSPEC_UUID("{000208EE-0001-0000-C000-000000000046}") IBorder;
typedef TComInterface<IBorder, &IID_IBorder> IBorderPtr;
interface DECLSPEC_UUID("{000208ED-0001-0000-C000-000000000046}") IInterior;
typedef TComInterface<IInterior, &IID_IInterior> IInteriorPtr;
interface DECLSPEC_UUID("{0002441C-0001-0000-C000-000000000046}") IChartFillFormat;
typedef TComInterface<IChartFillFormat, &IID_IChartFillFormat> IChartFillFormatPtr;
interface DECLSPEC_UUID("{0002441D-0001-0000-C000-000000000046}") IChartColorFormat;
typedef TComInterface<IChartColorFormat, &IID_IChartColorFormat> IChartColorFormatPtr;
interface DECLSPEC_UUID("{000208F9-0001-0000-C000-000000000046}") IAxis;
typedef TComInterface<IAxis, &IID_IAxis> IAxisPtr;
interface DECLSPEC_UUID("{000208F8-0001-0000-C000-000000000046}") IChartTitle;
typedef TComInterface<IChartTitle, &IID_IChartTitle> IChartTitlePtr;
interface DECLSPEC_UUID("{000208F7-0001-0000-C000-000000000046}") IAxisTitle;
typedef TComInterface<IAxisTitle, &IID_IAxisTitle> IAxisTitlePtr;
interface DECLSPEC_UUID("{000208F6-0001-0000-C000-000000000046}") IChartGroup;
typedef TComInterface<IChartGroup, &IID_IChartGroup> IChartGroupPtr;
interface DECLSPEC_UUID("{000208F5-0001-0000-C000-000000000046}") IChartGroups;
typedef TComInterface<IChartGroups, &IID_IChartGroups> IChartGroupsPtr;
interface DECLSPEC_UUID("{000208F4-0001-0000-C000-000000000046}") IAxes;
typedef TComInterface<IAxes, &IID_IAxes> IAxesPtr;
interface DECLSPEC_UUID("{000208F2-0001-0000-C000-000000000046}") IPoints;
typedef TComInterface<IPoints, &IID_IPoints> IPointsPtr;
interface DECLSPEC_UUID("{000208F1-0001-0000-C000-000000000046}") IPoint;
typedef TComInterface<IPoint, &IID_IPoint> IPointPtr;
interface DECLSPEC_UUID("{000208F0-0001-0000-C000-000000000046}") ISeries;
typedef TComInterface<ISeries, &IID_ISeries> ISeriesPtr;
interface DECLSPEC_UUID("{000208EF-0001-0000-C000-000000000046}") ISeriesCollection;
typedef TComInterface<ISeriesCollection, &IID_ISeriesCollection> ISeriesCollectionPtr;
interface DECLSPEC_UUID("{000208E9-0001-0000-C000-000000000046}") IDataLabel;
typedef TComInterface<IDataLabel, &IID_IDataLabel> IDataLabelPtr;
interface DECLSPEC_UUID("{000208E8-0001-0000-C000-000000000046}") IDataLabels;
typedef TComInterface<IDataLabels, &IID_IDataLabels> IDataLabelsPtr;
interface DECLSPEC_UUID("{000208E7-0001-0000-C000-000000000046}") ILegendEntry;
typedef TComInterface<ILegendEntry, &IID_ILegendEntry> ILegendEntryPtr;
interface DECLSPEC_UUID("{000208E6-0001-0000-C000-000000000046}") ILegendEntries;
typedef TComInterface<ILegendEntries, &IID_ILegendEntries> ILegendEntriesPtr;
interface DECLSPEC_UUID("{000208E5-0001-0000-C000-000000000046}") ILegendKey;
typedef TComInterface<ILegendKey, &IID_ILegendKey> ILegendKeyPtr;
interface DECLSPEC_UUID("{000208E4-0001-0000-C000-000000000046}") ITrendlines;
typedef TComInterface<ITrendlines, &IID_ITrendlines> ITrendlinesPtr;
interface DECLSPEC_UUID("{000208E3-0001-0000-C000-000000000046}") ITrendline;
typedef TComInterface<ITrendline, &IID_ITrendline> ITrendlinePtr;
interface DECLSPEC_UUID("{000208E2-0001-0000-C000-000000000046}") ICorners;
typedef TComInterface<ICorners, &IID_ICorners> ICornersPtr;
interface DECLSPEC_UUID("{000208E1-0001-0000-C000-000000000046}") ISeriesLines;
typedef TComInterface<ISeriesLines, &IID_ISeriesLines> ISeriesLinesPtr;
interface DECLSPEC_UUID("{000208E0-0001-0000-C000-000000000046}") IHiLoLines;
typedef TComInterface<IHiLoLines, &IID_IHiLoLines> IHiLoLinesPtr;
interface DECLSPEC_UUID("{00024700-0001-0000-C000-000000000046}") IGridlines;
typedef TComInterface<IGridlines, &IID_IGridlines> IGridlinesPtr;
interface DECLSPEC_UUID("{00024701-0001-0000-C000-000000000046}") IDropLines;
typedef TComInterface<IDropLines, &IID_IDropLines> IDropLinesPtr;
interface DECLSPEC_UUID("{0002441E-0001-0000-C000-000000000046}") ILeaderLines;
typedef TComInterface<ILeaderLines, &IID_ILeaderLines> ILeaderLinesPtr;
interface DECLSPEC_UUID("{00024702-0001-0000-C000-000000000046}") IUpBars;
typedef TComInterface<IUpBars, &IID_IUpBars> IUpBarsPtr;
interface DECLSPEC_UUID("{00024703-0001-0000-C000-000000000046}") IDownBars;
typedef TComInterface<IDownBars, &IID_IDownBars> IDownBarsPtr;
interface DECLSPEC_UUID("{00024704-0001-0000-C000-000000000046}") IFloor;
typedef TComInterface<IFloor, &IID_IFloor> IFloorPtr;
interface DECLSPEC_UUID("{00024705-0001-0000-C000-000000000046}") IWalls;
typedef TComInterface<IWalls, &IID_IWalls> IWallsPtr;
interface DECLSPEC_UUID("{00024706-0001-0000-C000-000000000046}") ITickLabels;
typedef TComInterface<ITickLabels, &IID_ITickLabels> ITickLabelsPtr;
interface DECLSPEC_UUID("{00024707-0001-0000-C000-000000000046}") IPlotArea;
typedef TComInterface<IPlotArea, &IID_IPlotArea> IPlotAreaPtr;
interface DECLSPEC_UUID("{00024708-0001-0000-C000-000000000046}") IChartArea;
typedef TComInterface<IChartArea, &IID_IChartArea> IChartAreaPtr;
interface DECLSPEC_UUID("{00024709-0001-0000-C000-000000000046}") ILegend;
typedef TComInterface<ILegend, &IID_ILegend> ILegendPtr;
interface DECLSPEC_UUID("{0002470A-0001-0000-C000-000000000046}") IErrorBars;
typedef TComInterface<IErrorBars, &IID_IErrorBars> IErrorBarsPtr;
interface DECLSPEC_UUID("{000208FA-0001-0000-C000-000000000046}") IDataTable;
typedef TComInterface<IDataTable, &IID_IDataTable> IDataTablePtr;
interface DECLSPEC_UUID("{000208D3-0001-0000-C000-000000000046}") IDisplayUnitLabel;
typedef TComInterface<IDisplayUnitLabel, &IID_IDisplayUnitLabel> IDisplayUnitLabelPtr;
interface DECLSPEC_UUID("{000208F3-0000-0000-C000-000000000046}") Font;
typedef TComInterface<Font, &DIID_Font> FontPtr;
interface DECLSPEC_UUID("{000208FC-0000-0000-C000-000000000046}") _Global;
typedef TComInterface<_Global, &DIID__Global> _GlobalPtr;
interface DECLSPEC_UUID("{000208FB-0000-0000-C000-000000000046}") Chart;
typedef TComInterface<Chart, &DIID_Chart> ChartPtr;
interface DECLSPEC_UUID("{000208EC-0000-0000-C000-000000000046}") GraphApplication;
typedef TComInterface<GraphApplication, &DIID_GraphApplication> GraphApplicationPtr;
interface DECLSPEC_UUID("{00024726-0000-0000-C000-000000000046}") DataSheet;
typedef TComInterface<DataSheet, &DIID_DataSheet> DataSheetPtr;
interface DECLSPEC_UUID("{00024727-0000-0000-C000-000000000046}") Range;
typedef TComInterface<Range, &DIID_Range> RangePtr;
interface DECLSPEC_UUID("{000208D4-0000-0000-C000-000000000046}") AutoCorrect;
typedef TComInterface<AutoCorrect, &DIID_AutoCorrect> AutoCorrectPtr;
interface DECLSPEC_UUID("{000208EE-0000-0000-C000-000000000046}") Border;
typedef TComInterface<Border, &DIID_Border> BorderPtr;
interface DECLSPEC_UUID("{000208ED-0000-0000-C000-000000000046}") Interior;
typedef TComInterface<Interior, &DIID_Interior> InteriorPtr;
interface DECLSPEC_UUID("{0002441C-0000-0000-C000-000000000046}") ChartFillFormat;
typedef TComInterface<ChartFillFormat, &DIID_ChartFillFormat> ChartFillFormatPtr;
interface DECLSPEC_UUID("{0002441D-0000-0000-C000-000000000046}") ChartColorFormat;
typedef TComInterface<ChartColorFormat, &DIID_ChartColorFormat> ChartColorFormatPtr;
interface DECLSPEC_UUID("{000208F9-0000-0000-C000-000000000046}") Axis;
typedef TComInterface<Axis, &DIID_Axis> AxisPtr;
interface DECLSPEC_UUID("{000208F8-0000-0000-C000-000000000046}") ChartTitle;
typedef TComInterface<ChartTitle, &DIID_ChartTitle> ChartTitlePtr;
interface DECLSPEC_UUID("{000208F7-0000-0000-C000-000000000046}") AxisTitle;
typedef TComInterface<AxisTitle, &DIID_AxisTitle> AxisTitlePtr;
interface DECLSPEC_UUID("{000208F6-0000-0000-C000-000000000046}") ChartGroup;
typedef TComInterface<ChartGroup, &DIID_ChartGroup> ChartGroupPtr;
interface DECLSPEC_UUID("{000208F5-0000-0000-C000-000000000046}") ChartGroups;
typedef TComInterface<ChartGroups, &DIID_ChartGroups> ChartGroupsPtr;
interface DECLSPEC_UUID("{000208F4-0000-0000-C000-000000000046}") Axes;
typedef TComInterface<Axes, &DIID_Axes> AxesPtr;
interface DECLSPEC_UUID("{000208F2-0000-0000-C000-000000000046}") Points;
typedef TComInterface<Points, &DIID_Points> PointsPtr;
interface DECLSPEC_UUID("{000208F1-0000-0000-C000-000000000046}") Point;
typedef TComInterface<Point, &DIID_Point> PointPtr;
interface DECLSPEC_UUID("{000208F0-0000-0000-C000-000000000046}") Series;
typedef TComInterface<Series, &DIID_Series> SeriesPtr;
interface DECLSPEC_UUID("{000208EF-0000-0000-C000-000000000046}") SeriesCollection;
typedef TComInterface<SeriesCollection, &DIID_SeriesCollection> SeriesCollectionPtr;
interface DECLSPEC_UUID("{000208E9-0000-0000-C000-000000000046}") DataLabel;
typedef TComInterface<DataLabel, &DIID_DataLabel> DataLabelPtr;
interface DECLSPEC_UUID("{000208E8-0000-0000-C000-000000000046}") DataLabels;
typedef TComInterface<DataLabels, &DIID_DataLabels> DataLabelsPtr;
interface DECLSPEC_UUID("{000208E7-0000-0000-C000-000000000046}") LegendEntry;
typedef TComInterface<LegendEntry, &DIID_LegendEntry> LegendEntryPtr;
interface DECLSPEC_UUID("{000208E6-0000-0000-C000-000000000046}") LegendEntries;
typedef TComInterface<LegendEntries, &DIID_LegendEntries> LegendEntriesPtr;
interface DECLSPEC_UUID("{000208E5-0000-0000-C000-000000000046}") LegendKey;
typedef TComInterface<LegendKey, &DIID_LegendKey> LegendKeyPtr;
interface DECLSPEC_UUID("{000208E4-0000-0000-C000-000000000046}") Trendlines;
typedef TComInterface<Trendlines, &DIID_Trendlines> TrendlinesPtr;
interface DECLSPEC_UUID("{000208E3-0000-0000-C000-000000000046}") Trendline;
typedef TComInterface<Trendline, &DIID_Trendline> TrendlinePtr;
interface DECLSPEC_UUID("{000208E2-0000-0000-C000-000000000046}") Corners;
typedef TComInterface<Corners, &DIID_Corners> CornersPtr;
interface DECLSPEC_UUID("{000208E1-0000-0000-C000-000000000046}") SeriesLines;
typedef TComInterface<SeriesLines, &DIID_SeriesLines> SeriesLinesPtr;
interface DECLSPEC_UUID("{000208E0-0000-0000-C000-000000000046}") HiLoLines;
typedef TComInterface<HiLoLines, &DIID_HiLoLines> HiLoLinesPtr;
interface DECLSPEC_UUID("{00024700-0000-0000-C000-000000000046}") Gridlines;
typedef TComInterface<Gridlines, &DIID_Gridlines> GridlinesPtr;
interface DECLSPEC_UUID("{00024701-0000-0000-C000-000000000046}") DropLines;
typedef TComInterface<DropLines, &DIID_DropLines> DropLinesPtr;
interface DECLSPEC_UUID("{0002441E-0000-0000-C000-000000000046}") LeaderLines;
typedef TComInterface<LeaderLines, &DIID_LeaderLines> LeaderLinesPtr;
interface DECLSPEC_UUID("{00024702-0000-0000-C000-000000000046}") UpBars;
typedef TComInterface<UpBars, &DIID_UpBars> UpBarsPtr;
interface DECLSPEC_UUID("{00024703-0000-0000-C000-000000000046}") DownBars;
typedef TComInterface<DownBars, &DIID_DownBars> DownBarsPtr;
interface DECLSPEC_UUID("{00024704-0000-0000-C000-000000000046}") Floor;
typedef TComInterface<Floor, &DIID_Floor> FloorPtr;
interface DECLSPEC_UUID("{00024705-0000-0000-C000-000000000046}") Walls;
typedef TComInterface<Walls, &DIID_Walls> WallsPtr;
interface DECLSPEC_UUID("{00024706-0000-0000-C000-000000000046}") TickLabels;
typedef TComInterface<TickLabels, &DIID_TickLabels> TickLabelsPtr;
interface DECLSPEC_UUID("{00024707-0000-0000-C000-000000000046}") PlotArea;
typedef TComInterface<PlotArea, &DIID_PlotArea> PlotAreaPtr;
interface DECLSPEC_UUID("{00024708-0000-0000-C000-000000000046}") ChartArea;
typedef TComInterface<ChartArea, &DIID_ChartArea> ChartAreaPtr;
interface DECLSPEC_UUID("{00024709-0000-0000-C000-000000000046}") Legend;
typedef TComInterface<Legend, &DIID_Legend> LegendPtr;
interface DECLSPEC_UUID("{0002470A-0000-0000-C000-000000000046}") ErrorBars;
typedef TComInterface<ErrorBars, &DIID_ErrorBars> ErrorBarsPtr;
interface DECLSPEC_UUID("{000208FA-0000-0000-C000-000000000046}") DataTable;
typedef TComInterface<DataTable, &DIID_DataTable> DataTablePtr;
interface DECLSPEC_UUID("{000208D3-0000-0000-C000-000000000046}") DisplayUnitLabel;
typedef TComInterface<DisplayUnitLabel, &DIID_DisplayUnitLabel> DisplayUnitLabelPtr;
interface DECLSPEC_UUID("{0002441F-0001-0000-C000-000000000046}") IShape;
typedef TComInterface<IShape, &IID_IShape> IShapePtr;
interface DECLSPEC_UUID("{00024420-0001-0000-C000-000000000046}") IShapes;
typedef TComInterface<IShapes, &IID_IShapes> IShapesPtr;
interface DECLSPEC_UUID("{00024421-0001-0000-C000-000000000046}") IShapeRange;
typedef TComInterface<IShapeRange, &IID_IShapeRange> IShapeRangePtr;
interface DECLSPEC_UUID("{00024422-0001-0000-C000-000000000046}") IGroupShapes;
typedef TComInterface<IGroupShapes, &IID_IGroupShapes> IGroupShapesPtr;
interface DECLSPEC_UUID("{00024423-0001-0000-C000-000000000046}") ITextFrame;
typedef TComInterface<ITextFrame, &IID_ITextFrame> ITextFramePtr;
interface DECLSPEC_UUID("{00024424-0001-0000-C000-000000000046}") IConnectorFormat;
typedef TComInterface<IConnectorFormat, &IID_IConnectorFormat> IConnectorFormatPtr;
interface DECLSPEC_UUID("{00024425-0001-0000-C000-000000000046}") IFreeformBuilder;
typedef TComInterface<IFreeformBuilder, &IID_IFreeformBuilder> IFreeformBuilderPtr;

// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef _Global Global;
typedef _GlobalPtr GlobalPtr;

#define LIBID_OF_Global (&LIBID_Graph)

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
typedef enum Constants
{
  xlAll = 0xFFFFEFF8, 
  xlAutomatic = 0xFFFFEFF7, 
  xlBoth = 1, 
  xlCenter = 0xFFFFEFF4, 
  xlChecker = 9, 
  xlCircle = 8, 
  xlCorner = 2, 
  xlCrissCross = 16, 
  xlCross = 4, 
  xlDiamond = 2, 
  xlDistributed = 0xFFFFEFEB, 
  xlDoubleAccounting = 5, 
  xlFixedValue = 1, 
  xlFormats = 0xFFFFEFE6, 
  xlGray16 = 17, 
  xlGray8 = 18, 
  xlGrid = 15, 
  xlHigh = 0xFFFFEFE1, 
  xlInside = 2, 
  xlJustify = 0xFFFFEFDE, 
  xlLightDown = 13, 
  xlLightHorizontal = 11, 
  xlLightUp = 14, 
  xlLightVertical = 12, 
  xlLow = 0xFFFFEFDA, 
  xlManual = 0xFFFFEFD9, 
  xlMinusValues = 3, 
  xlModule = 0xFFFFEFD3, 
  xlNextToAxis = 4, 
  xlNone = 0xFFFFEFD2, 
  xlNotes = 0xFFFFEFD0, 
  xlOff = 0xFFFFEFCE, 
  xlOn = 1, 
  xlPercent = 2, 
  xlPlus = 9, 
  xlPlusValues = 2, 
  xlSemiGray75 = 10, 
  xlShowLabel = 4, 
  xlShowLabelAndPercent = 5, 
  xlShowPercent = 3, 
  xlShowValue = 2, 
  xlSimple = 0xFFFFEFC6, 
  xlSingle = 2, 
  xlSingleAccounting = 4, 
  xlSolid = 1, 
  xlSquare = 1, 
  xlStar = 5, 
  xlStError = 4, 
  xlToolbarButton = 2, 
  xlTriangle = 3, 
  xlGray25 = 0xFFFFEFE4, 
  xlGray50 = 0xFFFFEFE3, 
  xlGray75 = 0xFFFFEFE2, 
  xlBottom = 0xFFFFEFF5, 
  xlLeft = 0xFFFFEFDD, 
  xlRight = 0xFFFFEFC8, 
  xlTop = 0xFFFFEFC0, 
  xl3DBar = 0xFFFFEFFD, 
  xl3DSurface = 0xFFFFEFF9, 
  xlBar = 2, 
  xlColumn = 3, 
  xlCombination = 0xFFFFEFF1, 
  xlCustom = 0xFFFFEFEE, 
  xlDefaultAutoFormat = 0xFFFFFFFF, 
  xlMaximum = 2, 
  xlMinimum = 4, 
  xlOpaque = 3, 
  xlTransparent = 2, 
  xlBidi = 0xFFFFEC78, 
  xlLatin = 0xFFFFEC77, 
  xlContext = 0xFFFFEC76, 
  xlLTR = 0xFFFFEC75, 
  xlRTL = 0xFFFFEC74, 
  xlFullScript = 1, 
  xlPartialScript = 2, 
  xlMixedScript = 3, 
  xlMixedAuthorizedScript = 4, 
  xlDefault = 0xFFFFEFD1, 
  xlVisualCursor = 2, 
  xlLogicalCursor = 1, 
  xlSystem = 1, 
  xlPartial = 3, 
  xlHindiNumerals = 3, 
  xlBidiCalendar = 3, 
  xlGregorian = 2, 
  xlComplete = 4, 
  xlScale = 3, 
  xlWizardDisplayAlways = 1, 
  xlWizardDisplayDefault = 0, 
  xlWizardDisplayNever = 2
} Constants;

typedef enum XlCreator
{
  xlCreatorCode = 1480803660
} XlCreator;

typedef enum XlChartGallery
{
  xlBuiltIn = 21, 
  xlUserDefined = 22, 
  xlAnyGallery = 23
} XlChartGallery;

typedef enum XlColorIndex
{
  xlColorIndexAutomatic = 0xFFFFEFF7, 
  xlColorIndexNone = 0xFFFFEFD2
} XlColorIndex;

typedef enum XlEndStyleCap
{
  xlCap = 1, 
  xlNoCap = 2
} XlEndStyleCap;

typedef enum XlRowCol
{
  xlColumns = 2, 
  xlRows = 1
} XlRowCol;

typedef enum XlScaleType
{
  xlScaleLinear = 0xFFFFEFDC, 
  xlScaleLogarithmic = 0xFFFFEFDB
} XlScaleType;

typedef enum XlDataSeriesType
{
  xlAutoFill = 4, 
  xlChronological = 3, 
  xlGrowth = 2, 
  xlDataSeriesLinear = 0xFFFFEFDC
} XlDataSeriesType;

typedef enum XlAxisCrosses
{
  xlAxisCrossesAutomatic = 0xFFFFEFF7, 
  xlAxisCrossesCustom = 0xFFFFEFEE, 
  xlAxisCrossesMaximum = 2, 
  xlAxisCrossesMinimum = 4
} XlAxisCrosses;

typedef enum XlAxisGroup
{
  xlPrimary = 1, 
  xlSecondary = 2
} XlAxisGroup;

typedef enum XlBackground
{
  xlBackgroundAutomatic = 0xFFFFEFF7, 
  xlBackgroundOpaque = 3, 
  xlBackgroundTransparent = 2
} XlBackground;

typedef enum XlWindowState
{
  xlMaximized = 0xFFFFEFD7, 
  xlMinimized = 0xFFFFEFD4, 
  xlNormal = 0xFFFFEFD1
} XlWindowState;

typedef enum XlAxisType
{
  xlCategory = 1, 
  xlSeriesAxis = 3, 
  xlValue = 2
} XlAxisType;

typedef enum XlArrowHeadLength
{
  xlArrowHeadLengthLong = 3, 
  xlArrowHeadLengthMedium = 0xFFFFEFD6, 
  xlArrowHeadLengthShort = 1
} XlArrowHeadLength;

typedef enum XlVAlign
{
  xlVAlignBottom = 0xFFFFEFF5, 
  xlVAlignCenter = 0xFFFFEFF4, 
  xlVAlignDistributed = 0xFFFFEFEB, 
  xlVAlignJustify = 0xFFFFEFDE, 
  xlVAlignTop = 0xFFFFEFC0
} XlVAlign;

typedef enum XlTickMark
{
  xlTickMarkCross = 4, 
  xlTickMarkInside = 2, 
  xlTickMarkNone = 0xFFFFEFD2, 
  xlTickMarkOutside = 3
} XlTickMark;

typedef enum XlErrorBarDirection
{
  xlX = 0xFFFFEFB8, 
  xlY = 1
} XlErrorBarDirection;

typedef enum XlErrorBarInclude
{
  xlErrorBarIncludeBoth = 1, 
  xlErrorBarIncludeMinusValues = 3, 
  xlErrorBarIncludeNone = 0xFFFFEFD2, 
  xlErrorBarIncludePlusValues = 2
} XlErrorBarInclude;

typedef enum XlDisplayBlanksAs
{
  xlInterpolated = 3, 
  xlNotPlotted = 1, 
  xlZero = 2
} XlDisplayBlanksAs;

typedef enum XlArrowHeadStyle
{
  xlArrowHeadStyleClosed = 3, 
  xlArrowHeadStyleDoubleClosed = 5, 
  xlArrowHeadStyleDoubleOpen = 4, 
  xlArrowHeadStyleNone = 0xFFFFEFD2, 
  xlArrowHeadStyleOpen = 2
} XlArrowHeadStyle;

typedef enum XlArrowHeadWidth
{
  xlArrowHeadWidthMedium = 0xFFFFEFD6, 
  xlArrowHeadWidthNarrow = 1, 
  xlArrowHeadWidthWide = 3
} XlArrowHeadWidth;

typedef enum XlHAlign
{
  xlHAlignCenter = 0xFFFFEFF4, 
  xlHAlignCenterAcrossSelection = 7, 
  xlHAlignDistributed = 0xFFFFEFEB, 
  xlHAlignFill = 5, 
  xlHAlignGeneral = 1, 
  xlHAlignJustify = 0xFFFFEFDE, 
  xlHAlignLeft = 0xFFFFEFDD, 
  xlHAlignRight = 0xFFFFEFC8
} XlHAlign;

typedef enum XlTickLabelPosition
{
  xlTickLabelPositionHigh = 0xFFFFEFE1, 
  xlTickLabelPositionLow = 0xFFFFEFDA, 
  xlTickLabelPositionNextToAxis = 4, 
  xlTickLabelPositionNone = 0xFFFFEFD2
} XlTickLabelPosition;

typedef enum XlLegendPosition
{
  xlLegendPositionBottom = 0xFFFFEFF5, 
  xlLegendPositionCorner = 2, 
  xlLegendPositionLeft = 0xFFFFEFDD, 
  xlLegendPositionRight = 0xFFFFEFC8, 
  xlLegendPositionTop = 0xFFFFEFC0
} XlLegendPosition;

typedef enum XlChartPictureType
{
  xlStackScale = 3, 
  xlStack = 2, 
  xlStretch = 1
} XlChartPictureType;

typedef enum XlChartPicturePlacement
{
  xlSides = 1, 
  xlEnd = 2, 
  xlEndSides = 3, 
  xlFront = 4, 
  xlFrontSides = 5, 
  xlFrontEnd = 6, 
  xlAllFaces = 7
} XlChartPicturePlacement;

typedef enum XlOrientation
{
  xlDownward = 0xFFFFEFB6, 
  xlHorizontal = 0xFFFFEFE0, 
  xlUpward = 0xFFFFEFB5, 
  xlVertical = 0xFFFFEFBA
} XlOrientation;

typedef enum XlTickLabelOrientation
{
  xlTickLabelOrientationAutomatic = 0xFFFFEFF7, 
  xlTickLabelOrientationDownward = 0xFFFFEFB6, 
  xlTickLabelOrientationHorizontal = 0xFFFFEFE0, 
  xlTickLabelOrientationUpward = 0xFFFFEFB5, 
  xlTickLabelOrientationVertical = 0xFFFFEFBA
} XlTickLabelOrientation;

typedef enum XlBorderWeight
{
  xlHairline = 1, 
  xlMedium = 0xFFFFEFD6, 
  xlThick = 4, 
  xlThin = 2
} XlBorderWeight;

typedef enum XlDataSeriesDate
{
  xlDay = 1, 
  xlMonth = 3, 
  xlWeekday = 2, 
  xlYear = 4
} XlDataSeriesDate;

typedef enum XlUnderlineStyle
{
  xlUnderlineStyleDouble = 0xFFFFEFE9, 
  xlUnderlineStyleDoubleAccounting = 5, 
  xlUnderlineStyleNone = 0xFFFFEFD2, 
  xlUnderlineStyleSingle = 2, 
  xlUnderlineStyleSingleAccounting = 4
} XlUnderlineStyle;

typedef enum XlErrorBarType
{
  xlErrorBarTypeCustom = 0xFFFFEFEE, 
  xlErrorBarTypeFixedValue = 1, 
  xlErrorBarTypePercent = 2, 
  xlErrorBarTypeStDev = 0xFFFFEFC5, 
  xlErrorBarTypeStError = 4
} XlErrorBarType;

typedef enum XlTrendlineType
{
  xlExponential = 5, 
  xlLinear = 0xFFFFEFDC, 
  xlLogarithmic = 0xFFFFEFDB, 
  xlMovingAvg = 6, 
  xlPolynomial = 3, 
  xlPower = 4
} XlTrendlineType;

typedef enum XlLineStyle
{
  xlContinuous = 1, 
  xlDash = 0xFFFFEFED, 
  xlDashDot = 4, 
  xlDashDotDot = 5, 
  xlDot = 0xFFFFEFEA, 
  xlDouble = 0xFFFFEFE9, 
  xlSlantDashDot = 13, 
  xlLineStyleNone = 0xFFFFEFD2
} XlLineStyle;

typedef enum XlDataLabelsType
{
  xlDataLabelsShowNone = 0xFFFFEFD2, 
  xlDataLabelsShowValue = 2, 
  xlDataLabelsShowPercent = 3, 
  xlDataLabelsShowLabel = 4, 
  xlDataLabelsShowLabelAndPercent = 5, 
  xlDataLabelsShowBubbleSizes = 6
} XlDataLabelsType;

typedef enum XlMarkerStyle
{
  xlMarkerStyleAutomatic = 0xFFFFEFF7, 
  xlMarkerStyleCircle = 8, 
  xlMarkerStyleDash = 0xFFFFEFED, 
  xlMarkerStyleDiamond = 2, 
  xlMarkerStyleDot = 0xFFFFEFEA, 
  xlMarkerStyleNone = 0xFFFFEFD2, 
  xlMarkerStylePicture = 0xFFFFEFCD, 
  xlMarkerStylePlus = 9, 
  xlMarkerStyleSquare = 1, 
  xlMarkerStyleStar = 5, 
  xlMarkerStyleTriangle = 3, 
  xlMarkerStyleX = 0xFFFFEFB8
} XlMarkerStyle;

typedef enum XlPictureConvertorType
{
  xlBMP = 1, 
  xlCGM = 7, 
  xlDRW = 4, 
  xlDXF = 5, 
  xlEPS = 8, 
  xlHGL = 6, 
  xlPCT = 13, 
  xlPCX = 10, 
  xlPIC = 11, 
  xlPLT = 12, 
  xlTIF = 9, 
  xlWMF = 2, 
  xlWPG = 3
} XlPictureConvertorType;

typedef enum XlPattern
{
  xlPatternAutomatic = 0xFFFFEFF7, 
  xlPatternChecker = 9, 
  xlPatternCrissCross = 16, 
  xlPatternDown = 0xFFFFEFE7, 
  xlPatternGray16 = 17, 
  xlPatternGray25 = 0xFFFFEFE4, 
  xlPatternGray50 = 0xFFFFEFE3, 
  xlPatternGray75 = 0xFFFFEFE2, 
  xlPatternGray8 = 18, 
  xlPatternGrid = 15, 
  xlPatternHorizontal = 0xFFFFEFE0, 
  xlPatternLightDown = 13, 
  xlPatternLightHorizontal = 11, 
  xlPatternLightUp = 14, 
  xlPatternLightVertical = 12, 
  xlPatternNone = 0xFFFFEFD2, 
  xlPatternSemiGray75 = 10, 
  xlPatternSolid = 1, 
  xlPatternUp = 0xFFFFEFBE, 
  xlPatternVertical = 0xFFFFEFBA
} XlPattern;

typedef enum XlChartSplitType
{
  xlSplitByPosition = 1, 
  xlSplitByPercentValue = 3, 
  xlSplitByCustomSplit = 4, 
  xlSplitByValue = 2
} XlChartSplitType;

typedef enum XlDisplayUnit
{
  xlHundreds = 0xFFFFFFFE, 
  xlThousands = 0xFFFFFFFD, 
  xlTenThousands = 0xFFFFFFFC, 
  xlHundredThousands = 0xFFFFFFFB, 
  xlMillions = 0xFFFFFFFA, 
  xlTenMillions = 0xFFFFFFF9, 
  xlHundredMillions = 0xFFFFFFF8, 
  xlThousandMillions = 0xFFFFFFF7, 
  xlMillionMillions = 0xFFFFFFF6
} XlDisplayUnit;

typedef enum XlDataLabelPosition
{
  xlLabelPositionCenter = 0xFFFFEFF4, 
  xlLabelPositionAbove = 0, 
  xlLabelPositionBelow = 1, 
  xlLabelPositionLeft = 0xFFFFEFDD, 
  xlLabelPositionRight = 0xFFFFEFC8, 
  xlLabelPositionOutsideEnd = 2, 
  xlLabelPositionInsideEnd = 3, 
  xlLabelPositionInsideBase = 4, 
  xlLabelPositionBestFit = 5, 
  xlLabelPositionMixed = 6, 
  xlLabelPositionCustom = 7
} XlDataLabelPosition;

typedef enum XlTimeUnit
{
  xlDays = 0, 
  xlMonths = 1, 
  xlYears = 2
} XlTimeUnit;

typedef enum XlCategoryType
{
  xlCategoryScale = 2, 
  xlTimeScale = 3, 
  xlAutomaticScale = 0xFFFFEFF7
} XlCategoryType;

typedef enum XlBarShape
{
  xlBox = 0, 
  xlPyramidToPoint = 1, 
  xlPyramidToMax = 2, 
  xlCylinder = 3, 
  xlConeToPoint = 4, 
  xlConeToMax = 5
} XlBarShape;

typedef enum XlChartType
{
  xlColumnClustered = 51, 
  xlColumnStacked = 52, 
  xlColumnStacked100 = 53, 
  xl3DColumnClustered = 54, 
  xl3DColumnStacked = 55, 
  xl3DColumnStacked100 = 56, 
  xlBarClustered = 57, 
  xlBarStacked = 58, 
  xlBarStacked100 = 59, 
  xl3DBarClustered = 60, 
  xl3DBarStacked = 61, 
  xl3DBarStacked100 = 62, 
  xlLineStacked = 63, 
  xlLineStacked100 = 64, 
  xlLineMarkers = 65, 
  xlLineMarkersStacked = 66, 
  xlLineMarkersStacked100 = 67, 
  xlPieOfPie = 68, 
  xlPieExploded = 69, 
  xl3DPieExploded = 70, 
  xlBarOfPie = 71, 
  xlXYScatterSmooth = 72, 
  xlXYScatterSmoothNoMarkers = 73, 
  xlXYScatterLines = 74, 
  xlXYScatterLinesNoMarkers = 75, 
  xlAreaStacked = 76, 
  xlAreaStacked100 = 77, 
  xl3DAreaStacked = 78, 
  xl3DAreaStacked100 = 79, 
  xlDoughnutExploded = 80, 
  xlRadarMarkers = 81, 
  xlRadarFilled = 82, 
  xlSurface = 83, 
  xlSurfaceWireframe = 84, 
  xlSurfaceTopView = 85, 
  xlSurfaceTopViewWireframe = 86, 
  xlBubble = 15, 
  xlBubble3DEffect = 87, 
  xlStockHLC = 88, 
  xlStockOHLC = 89, 
  xlStockVHLC = 90, 
  xlStockVOHLC = 91, 
  xlCylinderColClustered = 92, 
  xlCylinderColStacked = 93, 
  xlCylinderColStacked100 = 94, 
  xlCylinderBarClustered = 95, 
  xlCylinderBarStacked = 96, 
  xlCylinderBarStacked100 = 97, 
  xlCylinderCol = 98, 
  xlConeColClustered = 99, 
  xlConeColStacked = 100, 
  xlConeColStacked100 = 101, 
  xlConeBarClustered = 102, 
  xlConeBarStacked = 103, 
  xlConeBarStacked100 = 104, 
  xlConeCol = 105, 
  xlPyramidColClustered = 106, 
  xlPyramidColStacked = 107, 
  xlPyramidColStacked100 = 108, 
  xlPyramidBarClustered = 109, 
  xlPyramidBarStacked = 110, 
  xlPyramidBarStacked100 = 111, 
  xlPyramidCol = 112, 
  xl3DColumn = 0xFFFFEFFC, 
  xlLine = 4, 
  xl3DLine = 0xFFFFEFFB, 
  xl3DPie = 0xFFFFEFFA, 
  xlPie = 5, 
  xlXYScatter = 0xFFFFEFB7, 
  xl3DArea = 0xFFFFEFFE, 
  xlArea = 1, 
  xlDoughnut = 0xFFFFEFE8, 
  xlRadar = 0xFFFFEFC9
} XlChartType;

typedef enum XlChartItem
{
  xlDataLabel = 0, 
  xlChartArea = 2, 
  xlSeries = 3, 
  xlChartTitle = 4, 
  xlWalls = 5, 
  xlCorners = 6, 
  xlDataTable = 7, 
  xlTrendline = 8, 
  xlErrorBars = 9, 
  xlXErrorBars = 10, 
  xlYErrorBars = 11, 
  xlLegendEntry = 12, 
  xlLegendKey = 13, 
  xlShape = 14, 
  xlMajorGridlines = 15, 
  xlMinorGridlines = 16, 
  xlAxisTitle = 17, 
  xlUpBars = 18, 
  xlPlotArea = 19, 
  xlDownBars = 20, 
  xlAxis = 21, 
  xlSeriesLines = 22, 
  xlFloor = 23, 
  xlLegend = 24, 
  xlHiLoLines = 25, 
  xlDropLines = 26, 
  xlRadarAxisLabels = 27, 
  xlNothing = 28, 
  xlLeaderLines = 29, 
  xlDisplayUnitLabel = 30, 
  xlPivotChartFieldButton = 31, 
  xlPivotChartDropZone = 32
} XlChartItem;

typedef enum XlSizeRepresents
{
  xlSizeIsWidth = 2, 
  xlSizeIsArea = 1
} XlSizeRepresents;

typedef enum XlInsertShiftDirection
{
  xlShiftDown = 0xFFFFEFE7, 
  xlShiftToRight = 0xFFFFEFBF
} XlInsertShiftDirection;

typedef enum XlDeleteShiftDirection
{
  xlShiftToLeft = 0xFFFFEFC1, 
  xlShiftUp = 0xFFFFEFBE
} XlDeleteShiftDirection;

typedef enum XlDirection
{
  xlDown = 0xFFFFEFE7, 
  xlToLeft = 0xFFFFEFC1, 
  xlToRight = 0xFFFFEFBF, 
  xlUp = 0xFFFFEFBE
} XlDirection;

typedef enum XlConsolidationFunction
{
  xlAverage = 0xFFFFEFF6, 
  xlCount = 0xFFFFEFF0, 
  xlCountNums = 0xFFFFEFEF, 
  xlMax = 0xFFFFEFD8, 
  xlMin = 0xFFFFEFD5, 
  xlProduct = 0xFFFFEFCB, 
  xlStDev = 0xFFFFEFC5, 
  xlStDevP = 0xFFFFEFC4, 
  xlSum = 0xFFFFEFC3, 
  xlVar = 0xFFFFEFBC, 
  xlVarP = 0xFFFFEFBB, 
  xlUnknown = 1000
} XlConsolidationFunction;

typedef enum XlSheetType
{
  xlChart = 0xFFFFEFF3, 
  xlDialogSheet = 0xFFFFEFEC, 
  xlExcel4IntlMacroSheet = 4, 
  xlExcel4MacroSheet = 3, 
  xlWorksheet = 0xFFFFEFB9
} XlSheetType;

typedef enum XlLocationInTable
{
  xlColumnHeader = 0xFFFFEFF2, 
  xlColumnItem = 5, 
  xlDataHeader = 3, 
  xlDataItem = 7, 
  xlPageHeader = 2, 
  xlPageItem = 6, 
  xlRowHeader = 0xFFFFEFC7, 
  xlRowItem = 4, 
  xlTableBody = 8
} XlLocationInTable;

typedef enum XlFindLookIn
{
  xlFormulas = 0xFFFFEFE5, 
  xlComments = 0xFFFFEFD0, 
  xlValues = 0xFFFFEFBD
} XlFindLookIn;

typedef enum XlWindowType
{
  xlChartAsWindow = 5, 
  xlChartInPlace = 4, 
  xlClipboard = 3, 
  xlInfo = 0xFFFFEFDF, 
  xlWorkbook = 1
} XlWindowType;

typedef enum XlPivotFieldDataType
{
  xlDate = 2, 
  xlNumber = 0xFFFFEFCF, 
  xlText = 0xFFFFEFC2
} XlPivotFieldDataType;

typedef enum XlCopyPictureFormat
{
  xlBitmap = 2, 
  xlPicture = 0xFFFFEFCD
} XlCopyPictureFormat;

typedef enum XlPivotTableSourceType
{
  xlConsolidation = 3, 
  xlDatabase = 1, 
  xlExternal = 2, 
  xlPivotTable = 0xFFFFEFCC
} XlPivotTableSourceType;

typedef enum XlReferenceStyle
{
  xlA1 = 1, 
  xlR1C1 = 0xFFFFEFCA
} XlReferenceStyle;

typedef enum xlPivotFormatType
{
  xlReport1 = 0, 
  xlReport2 = 1, 
  xlReport3 = 2, 
  xlReport4 = 3, 
  xlReport5 = 4, 
  xlReport6 = 5, 
  xlReport7 = 6, 
  xlReport8 = 7, 
  xlReport9 = 8, 
  xlReport10 = 9, 
  xlTable1 = 10, 
  xlTable2 = 11, 
  xlTable3 = 12, 
  xlTable4 = 13, 
  xlTable5 = 14, 
  xlTable6 = 15, 
  xlTable7 = 16, 
  xlTable8 = 17, 
  xlTable9 = 18, 
  xlTable10 = 19, 
  xlPTClassic = 20, 
  xlPTNone = 21
} xlPivotFormatType;

typedef enum XlCmdType
{
  xlCmdCube = 1, 
  xlCmdSql = 2, 
  xlCmdTable = 3, 
  xlCmdDefault = 4
} XlCmdType;

typedef enum xlColumnDataType
{
  xlGeneralFormat = 1, 
  xlTextFormat = 2, 
  xlMDYFormat = 3, 
  xlDMYFormat = 4, 
  xlYMDFormat = 5, 
  xlMYDFormat = 6, 
  xlDYMFormat = 7, 
  xlYDMFormat = 8, 
  xlSkipColumn = 9, 
  xlEMDFormat = 10
} xlColumnDataType;

typedef enum xlQueryType
{
  xlODBCQuery = 1, 
  xlDAORecordSet = 2, 
  xlWebQuery = 4, 
  xlOLEDBQuery = 5, 
  xlTextImport = 6, 
  xlADORecordset = 7
} xlQueryType;

typedef enum xlWebSelectionType
{
  xlEntirePage = 1, 
  xlAllTables = 2, 
  xlSpecifiedTables = 3
} xlWebSelectionType;

typedef enum XlCubeFieldType
{
  xlHierarchy = 1, 
  xlMeasure = 2
} XlCubeFieldType;

typedef enum xlWebFormatting
{
  xlWebFormattingAll = 1, 
  xlWebFormattingRTF = 2, 
  xlWebFormattingNone = 3
} xlWebFormatting;

typedef enum xlDisplayDrawingObjects
{
  xlDisplayShapes = 0xFFFFEFF8, 
  xlHide = 3, 
  xlPlaceholders = 2
} xlDisplayDrawingObjects;

typedef enum xLSubtototalLocationType
{
  xlAtTop = 1, 
  xlAtBottom = 2
} xLSubtototalLocationType;

// *********************************************************************//
// Interface: GraphIFont
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208F3-0001-0000-C000-000000000046}
// *********************************************************************//
interface GraphIFont  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/); // [148]
   HRESULT STDMETHODCALLTYPE get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/); // [149]
   HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* RHS/*[out,retval]*/); // [150]
   HRESULT STDMETHODCALLTYPE get_Background(TVariant* RHS/*[out,retval]*/); // [180]
   HRESULT STDMETHODCALLTYPE set_Background(TVariantInParam RHS/*[in]*/); // [180]
   HRESULT STDMETHODCALLTYPE get_Bold(TVariant* RHS/*[out,retval]*/); // [96]
   HRESULT STDMETHODCALLTYPE set_Bold(TVariantInParam RHS/*[in]*/); // [96]
   HRESULT STDMETHODCALLTYPE get_Color(TVariant* RHS/*[out,retval]*/); // [99]
   HRESULT STDMETHODCALLTYPE set_Color(TVariantInParam RHS/*[in]*/); // [99]
   HRESULT STDMETHODCALLTYPE get_ColorIndex(TVariant* RHS/*[out,retval]*/); // [97]
   HRESULT STDMETHODCALLTYPE set_ColorIndex(TVariantInParam RHS/*[in]*/); // [97]
   HRESULT STDMETHODCALLTYPE get_FontStyle(TVariant* RHS/*[out,retval]*/); // [177]
   HRESULT STDMETHODCALLTYPE set_FontStyle(TVariantInParam RHS/*[in]*/); // [177]
   HRESULT STDMETHODCALLTYPE get_Italic(TVariant* RHS/*[out,retval]*/); // [101]
   HRESULT STDMETHODCALLTYPE set_Italic(TVariantInParam RHS/*[in]*/); // [101]
   HRESULT STDMETHODCALLTYPE get_Name(TVariant* RHS/*[out,retval]*/); // [110]
   HRESULT STDMETHODCALLTYPE set_Name(TVariantInParam RHS/*[in]*/); // [110]
   HRESULT STDMETHODCALLTYPE get_OutlineFont(TVariant* RHS/*[out,retval]*/); // [221]
   HRESULT STDMETHODCALLTYPE set_OutlineFont(TVariantInParam RHS/*[in]*/); // [221]
   HRESULT STDMETHODCALLTYPE get_Shadow(TVariant* RHS/*[out,retval]*/); // [103]
   HRESULT STDMETHODCALLTYPE set_Shadow(TVariantInParam RHS/*[in]*/); // [103]
   HRESULT STDMETHODCALLTYPE get_Size(TVariant* RHS/*[out,retval]*/); // [104]
   HRESULT STDMETHODCALLTYPE set_Size(TVariantInParam RHS/*[in]*/); // [104]
   HRESULT STDMETHODCALLTYPE get_Strikethrough(TVariant* RHS/*[out,retval]*/); // [105]
   HRESULT STDMETHODCALLTYPE set_Strikethrough(TVariantInParam RHS/*[in]*/); // [105]
   HRESULT STDMETHODCALLTYPE get_Subscript(TVariant* RHS/*[out,retval]*/); // [179]
   HRESULT STDMETHODCALLTYPE set_Subscript(TVariantInParam RHS/*[in]*/); // [179]
   HRESULT STDMETHODCALLTYPE get_Superscript(TVariant* RHS/*[out,retval]*/); // [178]
   HRESULT STDMETHODCALLTYPE set_Superscript(TVariantInParam RHS/*[in]*/); // [178]
   HRESULT STDMETHODCALLTYPE get_Underline(TVariant* RHS/*[out,retval]*/); // [106]
   HRESULT STDMETHODCALLTYPE set_Underline(TVariantInParam RHS/*[in]*/); // [106]
};

// *********************************************************************//
// Interface: _IGlobal
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208FC-0001-0000-C000-000000000046}
// *********************************************************************//
interface _IGlobal  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/); // [148]
   HRESULT STDMETHODCALLTYPE get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/); // [149]
   HRESULT STDMETHODCALLTYPE get_Parent(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/); // [150]
   HRESULT STDMETHODCALLTYPE get_CommandBars(Office_2k::CommandBarsPtr* RHS/*[out,retval]*/); // [1439]
};

// *********************************************************************//
// Interface: IChart
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208FB-0001-0000-C000-000000000046}
// *********************************************************************//
interface IChart  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/); // [148]
   HRESULT STDMETHODCALLTYPE get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/); // [149]
   HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* RHS/*[out,retval]*/); // [150]
   HRESULT STDMETHODCALLTYPE Activate(void); // [304]
   HRESULT STDMETHODCALLTYPE ApplyDataLabels(TVariantInParam Type/*[in,opt]*/= TNoParam(), 
                                             TVariantInParam LegendKey/*[in,opt]*/= TNoParam(), 
                                             TVariantInParam AutoText/*[in,opt]*/= TNoParam(), 
                                             TVariantInParam HasLeaderLines/*[in,opt]*/= TNoParam()); // [151]
   HRESULT STDMETHODCALLTYPE get_Area3DGroup(Graph_2k::ChartGroupPtr* RHS/*[out,retval]*/); // [17]
   HRESULT STDMETHODCALLTYPE AreaGroups(TVariantInParam Index/*[in,opt]*/, 
                                        LPDISPATCH* RHS/*[out,retval]*/); // [9]
   HRESULT STDMETHODCALLTYPE AutoFormat(long Gallery/*[in]*/, 
                                        TVariantInParam Format/*[in,opt]*/= TNoParam()); // [114]
   HRESULT STDMETHODCALLTYPE get_AutoScaling(TOLEBOOL* RHS/*[out,retval]*/); // [107]
   HRESULT STDMETHODCALLTYPE set_AutoScaling(TOLEBOOL RHS/*[in]*/); // [107]
   HRESULT STDMETHODCALLTYPE Axes(TVariantInParam Type/*[in,opt]*/, 
                                  TVariantInParam AxisGroup/*[in,opt]*/, 
                                  LPDISPATCH* RHS/*[out,retval]*/); // [23]
   HRESULT STDMETHODCALLTYPE get_Bar3DGroup(Graph_2k::ChartGroupPtr* RHS/*[out,retval]*/); // [18]
   HRESULT STDMETHODCALLTYPE BarGroups(TVariantInParam Index/*[in,opt]*/, 
                                       LPDISPATCH* RHS/*[out,retval]*/); // [10]
   HRESULT STDMETHODCALLTYPE get_ChartArea(Graph_2k::ChartAreaPtr* RHS/*[out,retval]*/); // [80]
   HRESULT STDMETHODCALLTYPE ChartGroups(TVariantInParam Index/*[in,opt]*/, 
                                         LPDISPATCH* RHS/*[out,retval]*/); // [8]
   HRESULT STDMETHODCALLTYPE get_ChartTitle(Graph_2k::ChartTitlePtr* RHS/*[out,retval]*/); // [81]
   HRESULT STDMETHODCALLTYPE get_Column3DGroup(Graph_2k::ChartGroupPtr* RHS/*[out,retval]*/); // [19]
   HRESULT STDMETHODCALLTYPE ColumnGroups(TVariantInParam Index/*[in,opt]*/, 
                                          LPDISPATCH* RHS/*[out,retval]*/); // [11]
   HRESULT STDMETHODCALLTYPE get_CommandBars(Office_2k::CommandBarsPtr* RHS/*[out,retval]*/); // [1439]
   HRESULT STDMETHODCALLTYPE get_Corners(Graph_2k::CornersPtr* RHS/*[out,retval]*/); // [79]
   HRESULT STDMETHODCALLTYPE get_DataTable(Graph_2k::DataTablePtr* RHS/*[out,retval]*/); // [1395]
   HRESULT STDMETHODCALLTYPE get_DepthPercent(long* RHS/*[out,retval]*/); // [48]
   HRESULT STDMETHODCALLTYPE set_DepthPercent(long RHS/*[in]*/); // [48]
   HRESULT STDMETHODCALLTYPE Deselect(void); // [1120]
   HRESULT STDMETHODCALLTYPE get_DisplayBlanksAs(Graph_2k::XlDisplayBlanksAs* RHS/*[out,retval]*/); // [93]
   HRESULT STDMETHODCALLTYPE set_DisplayBlanksAs(Graph_2k::XlDisplayBlanksAs RHS/*[in]*/); // [93]
   HRESULT STDMETHODCALLTYPE DoughnutGroups(TVariantInParam Index/*[in,opt]*/, 
                                            LPDISPATCH* RHS/*[out,retval]*/); // [14]
   HRESULT STDMETHODCALLTYPE get_Elevation(long* RHS/*[out,retval]*/); // [49]
   HRESULT STDMETHODCALLTYPE set_Elevation(long RHS/*[in]*/); // [49]
   HRESULT STDMETHODCALLTYPE get_Floor(Graph_2k::FloorPtr* RHS/*[out,retval]*/); // [83]
   HRESULT STDMETHODCALLTYPE get_GapDepth(long* RHS/*[out,retval]*/); // [50]
   HRESULT STDMETHODCALLTYPE set_GapDepth(long RHS/*[in]*/); // [50]
   HRESULT STDMETHODCALLTYPE get_HasAxis(TVariantInParam Index1/*[in,opt]*/, 
                                         TVariantInParam Index2/*[in,opt]*/, 
                                         TVariant* RHS/*[out,retval]*/); // [52]
   HRESULT STDMETHODCALLTYPE set_HasAxis(TVariantInParam Index1/*[in,opt]*/, 
                                         TVariantInParam Index2/*[in,opt]*/, 
                                         TVariantInParam RHS/*[in]*/); // [52]
   HRESULT STDMETHODCALLTYPE get_HasDataTable(TOLEBOOL* RHS/*[out,retval]*/); // [1396]
   HRESULT STDMETHODCALLTYPE set_HasDataTable(TOLEBOOL RHS/*[in]*/); // [1396]
   HRESULT STDMETHODCALLTYPE get_HasLegend(TOLEBOOL* RHS/*[out,retval]*/); // [53]
   HRESULT STDMETHODCALLTYPE set_HasLegend(TOLEBOOL RHS/*[in]*/); // [53]
   HRESULT STDMETHODCALLTYPE get_HasTitle(TOLEBOOL* RHS/*[out,retval]*/); // [54]
   HRESULT STDMETHODCALLTYPE set_HasTitle(TOLEBOOL RHS/*[in]*/); // [54]
   HRESULT STDMETHODCALLTYPE get_Height(TVariant* RHS/*[out,retval]*/); // [123]
   HRESULT STDMETHODCALLTYPE set_Height(TVariantInParam RHS/*[in]*/); // [123]
   HRESULT STDMETHODCALLTYPE get_HeightPercent(long* RHS/*[out,retval]*/); // [55]
   HRESULT STDMETHODCALLTYPE set_HeightPercent(long RHS/*[in]*/); // [55]
   HRESULT STDMETHODCALLTYPE get_Left(TVariant* RHS/*[out,retval]*/); // [127]
   HRESULT STDMETHODCALLTYPE set_Left(TVariantInParam RHS/*[in]*/); // [127]
   HRESULT STDMETHODCALLTYPE get_Legend(Graph_2k::LegendPtr* RHS/*[out,retval]*/); // [84]
   HRESULT STDMETHODCALLTYPE get_Line3DGroup(Graph_2k::ChartGroupPtr* RHS/*[out,retval]*/); // [20]
   HRESULT STDMETHODCALLTYPE LineGroups(TVariantInParam Index/*[in,opt]*/, 
                                        LPDISPATCH* RHS/*[out,retval]*/); // [12]
   HRESULT STDMETHODCALLTYPE get_Name(BSTR* RHS/*[out,retval]*/); // [110]
   HRESULT STDMETHODCALLTYPE OmitBackground(TVariant* RHS/*[out,retval]*/); // [1098]
   HRESULT STDMETHODCALLTYPE get_Perspective(long* RHS/*[out,retval]*/); // [57]
   HRESULT STDMETHODCALLTYPE set_Perspective(long RHS/*[in]*/); // [57]
   HRESULT STDMETHODCALLTYPE get_Pie3DGroup(Graph_2k::ChartGroupPtr* RHS/*[out,retval]*/); // [21]
   HRESULT STDMETHODCALLTYPE PieGroups(TVariantInParam Index/*[in,opt]*/, 
                                       LPDISPATCH* RHS/*[out,retval]*/); // [13]
   HRESULT STDMETHODCALLTYPE get_PlotArea(Graph_2k::PlotAreaPtr* RHS/*[out,retval]*/); // [85]
   void STDMETHODCALLTYPE _Dummy43(void); // [65579]
   HRESULT STDMETHODCALLTYPE RadarGroups(TVariantInParam Index/*[in,opt]*/, 
                                         LPDISPATCH* RHS/*[out,retval]*/); // [15]
   HRESULT STDMETHODCALLTYPE get_RightAngleAxes(TVariant* RHS/*[out,retval]*/); // [58]
   HRESULT STDMETHODCALLTYPE set_RightAngleAxes(TVariantInParam RHS/*[in]*/); // [58]
   HRESULT STDMETHODCALLTYPE get_Rotation(TVariant* RHS/*[out,retval]*/); // [59]
   HRESULT STDMETHODCALLTYPE set_Rotation(TVariantInParam RHS/*[in]*/); // [59]
   HRESULT STDMETHODCALLTYPE SeriesCollection(TVariantInParam Index/*[in,opt]*/, 
                                              LPDISPATCH* RHS/*[out,retval]*/); // [68]
   HRESULT STDMETHODCALLTYPE SetEchoOn(TVariantInParam EchoOn/*[in,opt]*/, 
                                       TVariant* RHS/*[out,retval]*/); // [1133]
   HRESULT STDMETHODCALLTYPE get_SubType(TVariant* RHS/*[out,retval]*/); // [109]
   HRESULT STDMETHODCALLTYPE set_SubType(TVariantInParam RHS/*[in]*/); // [109]
   HRESULT STDMETHODCALLTYPE get_SurfaceGroup(Graph_2k::ChartGroupPtr* RHS/*[out,retval]*/); // [22]
   HRESULT STDMETHODCALLTYPE get_Top(TVariant* RHS/*[out,retval]*/); // [126]
   HRESULT STDMETHODCALLTYPE set_Top(TVariantInParam RHS/*[in]*/); // [126]
   HRESULT STDMETHODCALLTYPE get_Type(long* RHS/*[out,retval]*/); // [108]
   HRESULT STDMETHODCALLTYPE set_Type(long RHS/*[in]*/); // [108]
   HRESULT STDMETHODCALLTYPE get_ChartType(Graph_2k::XlChartType* RHS/*[out,retval]*/); // [1400]
   HRESULT STDMETHODCALLTYPE set_ChartType(Graph_2k::XlChartType RHS/*[in]*/); // [1400]
   HRESULT STDMETHODCALLTYPE ApplyCustomType(Graph_2k::XlChartType ChartType/*[in]*/, 
                                             TVariantInParam TypeName/*[in,opt]*/= TNoParam()); // [1401]
   HRESULT STDMETHODCALLTYPE get_Walls(Graph_2k::WallsPtr* RHS/*[out,retval]*/); // [86]
   HRESULT STDMETHODCALLTYPE get_WallsAndGridlines2D(TOLEBOOL* RHS/*[out,retval]*/); // [210]
   HRESULT STDMETHODCALLTYPE set_WallsAndGridlines2D(TOLEBOOL RHS/*[in]*/); // [210]
   HRESULT STDMETHODCALLTYPE get_Width(TVariant* RHS/*[out,retval]*/); // [122]
   HRESULT STDMETHODCALLTYPE set_Width(TVariantInParam RHS/*[in]*/); // [122]
   HRESULT STDMETHODCALLTYPE XYGroups(TVariantInParam Index/*[in,opt]*/, 
                                      LPDISPATCH* RHS/*[out,retval]*/); // [16]
   HRESULT STDMETHODCALLTYPE get_BarShape(Graph_2k::XlBarShape* RHS/*[out,retval]*/); // [1403]
   HRESULT STDMETHODCALLTYPE set_BarShape(Graph_2k::XlBarShape RHS/*[in]*/); // [1403]
   HRESULT STDMETHODCALLTYPE Export(BSTR FileName/*[in]*/, TVariantInParam FilterName/*[in,opt]*/, 
                                    TVariantInParam Interactive/*[in,opt]*/, 
                                    TOLEBOOL* RHS/*[out,retval]*/); // [1414]
   HRESULT STDMETHODCALLTYPE Refresh(void); // [1417]
   HRESULT STDMETHODCALLTYPE get_PlotOnX(long* RHS/*[out,retval]*/); // [1775]
   HRESULT STDMETHODCALLTYPE set_PlotOnX(long RHS/*[in]*/); // [1775]
};

// *********************************************************************//
// Interface: IApplication
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208EC-0001-0000-C000-000000000046}
// *********************************************************************//
interface IApplication  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/); // [148]
   HRESULT STDMETHODCALLTYPE get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/); // [149]
   HRESULT STDMETHODCALLTYPE get_Parent(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/); // [150]
   HRESULT STDMETHODCALLTYPE get_CommandBars(Office_2k::CommandBarsPtr* RHS/*[out,retval]*/); // [1439]
   HRESULT STDMETHODCALLTYPE AddChartAutoFormat(BSTR Name/*[in]*/, 
                                                TVariantInParam Description/*[in,opt]*/= TNoParam()); // [216]
   HRESULT STDMETHODCALLTYPE get_CellDragAndDrop(TOLEBOOL* RHS/*[out,retval]*/); // [320]
   HRESULT STDMETHODCALLTYPE set_CellDragAndDrop(TOLEBOOL RHS/*[in]*/); // [320]
   HRESULT STDMETHODCALLTYPE Chart(Graph_2k::ChartPtr* RHS/*[out,retval]*/); // [7]
   HRESULT STDMETHODCALLTYPE get_ChartWizardDisplay(TVariant* RHS/*[out,retval]*/); // [1129]
   HRESULT STDMETHODCALLTYPE set_ChartWizardDisplay(TVariantInParam RHS/*[in]*/); // [1129]
   HRESULT STDMETHODCALLTYPE get_DataSheet(Graph_2k::DataSheetPtr* RHS/*[out,retval]*/); // [1101]
   HRESULT STDMETHODCALLTYPE _set_DataSheet(Graph_2k::DataSheetPtr RHS/*[in]*/); // [1101]
   HRESULT STDMETHODCALLTYPE DeleteChartAutoFormat(BSTR Name/*[in]*/); // [217]
   HRESULT STDMETHODCALLTYPE get_DisplayAlerts(TOLEBOOL* RHS/*[out,retval]*/); // [343]
   HRESULT STDMETHODCALLTYPE set_DisplayAlerts(TOLEBOOL RHS/*[in]*/); // [343]
   HRESULT STDMETHODCALLTYPE Evaluate(BSTR Name/*[in]*/, TVariant* RHS/*[out,retval]*/); // [1]
   HRESULT STDMETHODCALLTYPE FileImport(BSTR FileName/*[in]*/, 
                                        TVariantInParam Password/*[in,opt]*/= TNoParam(), 
                                        TVariantInParam ImportRange/*[in,opt]*/= TNoParam(), 
                                        TVariantInParam WorksheetName/*[in,opt]*/= TNoParam(), 
                                        TVariantInParam OverwriteCells/*[in,opt]*/= TNoParam()); // [1191]
   HRESULT STDMETHODCALLTYPE get_HasLinks(TOLEBOOL* RHS/*[out,retval]*/); // [1094]
   HRESULT STDMETHODCALLTYPE set_HasLinks(TOLEBOOL RHS/*[in]*/); // [1094]
   HRESULT STDMETHODCALLTYPE get_Height(double* RHS/*[out,retval]*/); // [123]
   HRESULT STDMETHODCALLTYPE set_Height(double RHS/*[in]*/); // [123]
   HRESULT STDMETHODCALLTYPE ImportChart(BSTR FileName/*[in]*/, 
                                         TVariantInParam Password/*[in,opt]*/= TNoParam(), 
                                         TVariantInParam ImportRange/*[in,opt]*/= TNoParam(), 
                                         TVariantInParam WorksheetName/*[in,opt]*/= TNoParam(), 
                                         TVariantInParam OverwriteCells/*[in,opt]*/= TNoParam()); // [1099]
   HRESULT STDMETHODCALLTYPE get_Left(double* RHS/*[out,retval]*/); // [127]
   HRESULT STDMETHODCALLTYPE set_Left(double RHS/*[in]*/); // [127]
   HRESULT STDMETHODCALLTYPE get_MoveAfterReturn(TOLEBOOL* RHS/*[out,retval]*/); // [374]
   HRESULT STDMETHODCALLTYPE set_MoveAfterReturn(TOLEBOOL RHS/*[in]*/); // [374]
   HRESULT STDMETHODCALLTYPE get_Name(BSTR* RHS/*[out,retval]*/); // [110]
   HRESULT STDMETHODCALLTYPE set_Name(BSTR RHS/*[in]*/); // [110]
   HRESULT STDMETHODCALLTYPE get_PlotBy(Graph_2k::XlRowCol* RHS/*[out,retval]*/); // [202]
   HRESULT STDMETHODCALLTYPE set_PlotBy(Graph_2k::XlRowCol RHS/*[in]*/); // [202]
   HRESULT STDMETHODCALLTYPE Quit(void); // [302]
   HRESULT STDMETHODCALLTYPE SaveAs(BSTR FileName/*[in]*/); // [284]
   HRESULT STDMETHODCALLTYPE SaveAsOldFileFormat(TVariantInParam MajorVersion/*[in,opt]*/= TNoParam(), 
                                                 TVariantInParam MinorVersion/*[in,opt]*/= TNoParam()); // [1091]
   HRESULT STDMETHODCALLTYPE SetDefaultChart(TVariantInParam FormatName/*[in,opt]*/= TNoParam(), 
                                             TVariantInParam Gallery/*[in,opt]*/= TNoParam()); // [219]
   HRESULT STDMETHODCALLTYPE get_ShowChartTipNames(TOLEBOOL* RHS/*[out,retval]*/); // [1207]
   HRESULT STDMETHODCALLTYPE set_ShowChartTipNames(TOLEBOOL RHS/*[in]*/); // [1207]
   HRESULT STDMETHODCALLTYPE get_ShowChartTipValues(TOLEBOOL* RHS/*[out,retval]*/); // [1208]
   HRESULT STDMETHODCALLTYPE set_ShowChartTipValues(TOLEBOOL RHS/*[in]*/); // [1208]
   HRESULT STDMETHODCALLTYPE get_Top(double* RHS/*[out,retval]*/); // [126]
   HRESULT STDMETHODCALLTYPE set_Top(double RHS/*[in]*/); // [126]
   HRESULT STDMETHODCALLTYPE _Update(void); // [680]
   HRESULT STDMETHODCALLTYPE get_Version(BSTR* RHS/*[out,retval]*/); // [392]
   HRESULT STDMETHODCALLTYPE get_Visible(TOLEBOOL* RHS/*[out,retval]*/); // [558]
   HRESULT STDMETHODCALLTYPE set_Visible(TOLEBOOL RHS/*[in]*/); // [558]
   HRESULT STDMETHODCALLTYPE get_Width(double* RHS/*[out,retval]*/); // [122]
   HRESULT STDMETHODCALLTYPE set_Width(double RHS/*[in]*/); // [122]
   HRESULT STDMETHODCALLTYPE get_WindowState(Graph_2k::XlWindowState* RHS/*[out,retval]*/); // [396]
   HRESULT STDMETHODCALLTYPE set_WindowState(Graph_2k::XlWindowState RHS/*[in]*/); // [396]
   HRESULT STDMETHODCALLTYPE get_AutoCorrect(Graph_2k::AutoCorrectPtr* RHS/*[out,retval]*/); // [1145]
};

// *********************************************************************//
// Interface: IDataSheet
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024726-0001-0000-C000-000000000046}
// *********************************************************************//
interface IDataSheet  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/); // [148]
   HRESULT STDMETHODCALLTYPE get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/); // [149]
   HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* RHS/*[out,retval]*/); // [150]
   HRESULT STDMETHODCALLTYPE Activate(void); // [304]
   HRESULT STDMETHODCALLTYPE get_Cells(Graph_2k::RangePtr* RHS/*[out,retval]*/); // [238]
   HRESULT STDMETHODCALLTYPE get_Columns(Graph_2k::RangePtr* RHS/*[out,retval]*/); // [241]
   HRESULT STDMETHODCALLTYPE get_Font(Graph_2k::FontPtr* RHS/*[out,retval]*/); // [146]
   HRESULT STDMETHODCALLTYPE _set_Font(Graph_2k::FontPtr RHS/*[in]*/); // [146]
   HRESULT STDMETHODCALLTYPE get_Height(double* RHS/*[out,retval]*/); // [123]
   HRESULT STDMETHODCALLTYPE set_Height(double RHS/*[in]*/); // [123]
   HRESULT STDMETHODCALLTYPE get_Left(double* RHS/*[out,retval]*/); // [127]
   HRESULT STDMETHODCALLTYPE set_Left(double RHS/*[in]*/); // [127]
   HRESULT STDMETHODCALLTYPE get_Range(TVariantInParam Range1/*[in]*/, 
                                       TVariantInParam Range2/*[in,opt]*/, 
                                       Graph_2k::RangePtr* RHS/*[out,retval]*/); // [197]
   HRESULT STDMETHODCALLTYPE get_Rows(Graph_2k::RangePtr* RHS/*[out,retval]*/); // [258]
   HRESULT STDMETHODCALLTYPE get_Top(double* RHS/*[out,retval]*/); // [126]
   HRESULT STDMETHODCALLTYPE set_Top(double RHS/*[in]*/); // [126]
   HRESULT STDMETHODCALLTYPE get_Width(double* RHS/*[out,retval]*/); // [122]
   HRESULT STDMETHODCALLTYPE set_Width(double RHS/*[in]*/); // [122]
};

// *********************************************************************//
// Interface: IRange
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024727-0001-0000-C000-000000000046}
// *********************************************************************//
interface IRange  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/); // [148]
   HRESULT STDMETHODCALLTYPE get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/); // [149]
   HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* RHS/*[out,retval]*/); // [150]
   HRESULT STDMETHODCALLTYPE AutoFit(void); // [237]
   HRESULT STDMETHODCALLTYPE get_Cells(Graph_2k::RangePtr* RHS/*[out,retval]*/); // [238]
   HRESULT STDMETHODCALLTYPE Clear(void); // [111]
   HRESULT STDMETHODCALLTYPE ClearContents(void); // [113]
   HRESULT STDMETHODCALLTYPE ClearFormats(void); // [112]
   HRESULT STDMETHODCALLTYPE get_Columns(Graph_2k::RangePtr* RHS/*[out,retval]*/); // [241]
   HRESULT STDMETHODCALLTYPE get_ColumnWidth(TVariant* RHS/*[out,retval]*/); // [242]
   HRESULT STDMETHODCALLTYPE set_ColumnWidth(TVariantInParam RHS/*[in]*/); // [242]
   HRESULT STDMETHODCALLTYPE Copy(TVariantInParam Destination/*[in,opt]*/= TNoParam()); // [551]
   HRESULT STDMETHODCALLTYPE Cut(TVariantInParam Destination/*[in,opt]*/= TNoParam()); // [565]
   HRESULT STDMETHODCALLTYPE Delete(TVariantInParam Shift/*[in,opt]*/= TNoParam()); // [117]
   HRESULT STDMETHODCALLTYPE ImportData(TVariantInParam FileName/*[in]*/, 
                                        TVariantInParam Range/*[in,opt]*/= TNoParam()); // [1100]
   HRESULT STDMETHODCALLTYPE get_Include(TVariant* RHS/*[out,retval]*/); // [165]
   HRESULT STDMETHODCALLTYPE set_Include(TVariantInParam RHS/*[in]*/); // [165]
   HRESULT STDMETHODCALLTYPE Insert(TVariantInParam Shift/*[in,opt]*/= TNoParam()); // [252]
   HRESULT STDMETHODCALLTYPE get_Item(TVariantInParam RowIndex/*[in,opt]*/, 
                                      TVariantInParam ColumnIndex/*[in,opt]*/, long lcid/*[in]*/, 
                                      TVariant* RHS/*[out,retval]*/); // [170]
   HRESULT STDMETHODCALLTYPE set_Item(TVariantInParam RowIndex/*[in,opt]*/, 
                                      TVariantInParam ColumnIndex/*[in,opt]*/, long lcid/*[in]*/, 
                                      TVariantInParam RHS/*[in]*/); // [170]
   HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* RHS/*[out,retval]*/); // [-4]
   HRESULT STDMETHODCALLTYPE get_NumberFormat(TVariant* RHS/*[out,retval]*/); // [193]
   HRESULT STDMETHODCALLTYPE set_NumberFormat(TVariantInParam RHS/*[in]*/); // [193]
   HRESULT STDMETHODCALLTYPE Paste(TVariantInParam Link/*[in,opt]*/= TNoParam()); // [211]
   HRESULT STDMETHODCALLTYPE get_Rows(Graph_2k::RangePtr* RHS/*[out,retval]*/); // [258]
   HRESULT STDMETHODCALLTYPE get_Value(long lcid/*[in]*/, TVariant* RHS/*[out,retval]*/); // [6]
   HRESULT STDMETHODCALLTYPE set_Value(long lcid/*[in]*/, TVariantInParam RHS/*[in]*/); // [6]
   HRESULT STDMETHODCALLTYPE get__Default(TVariantInParam RowIndex/*[in,opt]*/, 
                                          TVariantInParam ColumnIndex/*[in,opt]*/, long lcid/*[in]*/, 
                                          TVariant* RHS/*[out,retval]*/); // [0]
   HRESULT STDMETHODCALLTYPE set__Default(TVariantInParam RowIndex/*[in,opt]*/, 
                                          TVariantInParam ColumnIndex/*[in,opt]*/, long lcid/*[in]*/, 
                                          TVariantInParam RHS/*[in]*/); // [0]
};

// *********************************************************************//
// Interface: IAutoCorrect
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208D4-0001-0000-C000-000000000046}
// *********************************************************************//
interface IAutoCorrect  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/); // [148]
   HRESULT STDMETHODCALLTYPE get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/); // [149]
   HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* RHS/*[out,retval]*/); // [150]
   HRESULT STDMETHODCALLTYPE AddReplacement(BSTR What/*[in]*/, BSTR Replacement/*[in]*/, 
                                            TVariant* RHS/*[out,retval]*/); // [1146]
   HRESULT STDMETHODCALLTYPE get_CapitalizeNamesOfDays(TOLEBOOL* RHS/*[out,retval]*/); // [1150]
   HRESULT STDMETHODCALLTYPE set_CapitalizeNamesOfDays(TOLEBOOL RHS/*[in]*/); // [1150]
   HRESULT STDMETHODCALLTYPE DeleteReplacement(BSTR What/*[in]*/, TVariant* RHS/*[out,retval]*/); // [1147]
   HRESULT STDMETHODCALLTYPE get_ReplacementList(TVariantInParam Index/*[in,opt]*/, 
                                                 TVariant* RHS/*[out,retval]*/); // [1151]
   HRESULT STDMETHODCALLTYPE set_ReplacementList(TVariantInParam Index/*[in,opt]*/, 
                                                 TVariantInParam RHS/*[in]*/); // [1151]
   HRESULT STDMETHODCALLTYPE get_ReplaceText(TOLEBOOL* RHS/*[out,retval]*/); // [1148]
   HRESULT STDMETHODCALLTYPE set_ReplaceText(TOLEBOOL RHS/*[in]*/); // [1148]
   HRESULT STDMETHODCALLTYPE get_TwoInitialCapitals(TOLEBOOL* RHS/*[out,retval]*/); // [1149]
   HRESULT STDMETHODCALLTYPE set_TwoInitialCapitals(TOLEBOOL RHS/*[in]*/); // [1149]
   HRESULT STDMETHODCALLTYPE get_CorrectSentenceCap(TOLEBOOL* RHS/*[out,retval]*/); // [1619]
   HRESULT STDMETHODCALLTYPE set_CorrectSentenceCap(TOLEBOOL RHS/*[in]*/); // [1619]
   HRESULT STDMETHODCALLTYPE get_CorrectCapsLock(TOLEBOOL* RHS/*[out,retval]*/); // [1620]
   HRESULT STDMETHODCALLTYPE set_CorrectCapsLock(TOLEBOOL RHS/*[in]*/); // [1620]
};

// *********************************************************************//
// Interface: IBorder
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208EE-0001-0000-C000-000000000046}
// *********************************************************************//
interface IBorder  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/); // [148]
   HRESULT STDMETHODCALLTYPE get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/); // [149]
   HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* RHS/*[out,retval]*/); // [150]
   HRESULT STDMETHODCALLTYPE get_Color(TVariant* RHS/*[out,retval]*/); // [99]
   HRESULT STDMETHODCALLTYPE set_Color(TVariantInParam RHS/*[in]*/); // [99]
   HRESULT STDMETHODCALLTYPE get_ColorIndex(TVariant* RHS/*[out,retval]*/); // [97]
   HRESULT STDMETHODCALLTYPE set_ColorIndex(TVariantInParam RHS/*[in]*/); // [97]
   HRESULT STDMETHODCALLTYPE get_LineStyle(TVariant* RHS/*[out,retval]*/); // [119]
   HRESULT STDMETHODCALLTYPE set_LineStyle(TVariantInParam RHS/*[in]*/); // [119]
   HRESULT STDMETHODCALLTYPE get_Weight(TVariant* RHS/*[out,retval]*/); // [120]
   HRESULT STDMETHODCALLTYPE set_Weight(TVariantInParam RHS/*[in]*/); // [120]
};

// *********************************************************************//
// Interface: IInterior
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208ED-0001-0000-C000-000000000046}
// *********************************************************************//
interface IInterior  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/); // [148]
   HRESULT STDMETHODCALLTYPE get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/); // [149]
   HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* RHS/*[out,retval]*/); // [150]
   HRESULT STDMETHODCALLTYPE get_Color(TVariant* RHS/*[out,retval]*/); // [99]
   HRESULT STDMETHODCALLTYPE set_Color(TVariantInParam RHS/*[in]*/); // [99]
   HRESULT STDMETHODCALLTYPE get_ColorIndex(TVariant* RHS/*[out,retval]*/); // [97]
   HRESULT STDMETHODCALLTYPE set_ColorIndex(TVariantInParam RHS/*[in]*/); // [97]
   HRESULT STDMETHODCALLTYPE get_InvertIfNegative(TVariant* RHS/*[out,retval]*/); // [132]
   HRESULT STDMETHODCALLTYPE set_InvertIfNegative(TVariantInParam RHS/*[in]*/); // [132]
   HRESULT STDMETHODCALLTYPE get_Pattern(TVariant* RHS/*[out,retval]*/); // [95]
   HRESULT STDMETHODCALLTYPE set_Pattern(TVariantInParam RHS/*[in]*/); // [95]
   HRESULT STDMETHODCALLTYPE get_PatternColor(TVariant* RHS/*[out,retval]*/); // [100]
   HRESULT STDMETHODCALLTYPE set_PatternColor(TVariantInParam RHS/*[in]*/); // [100]
   HRESULT STDMETHODCALLTYPE get_PatternColorIndex(TVariant* RHS/*[out,retval]*/); // [98]
   HRESULT STDMETHODCALLTYPE set_PatternColorIndex(TVariantInParam RHS/*[in]*/); // [98]
};

// *********************************************************************//
// Interface: IChartFillFormat
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002441C-0001-0000-C000-000000000046}
// *********************************************************************//
interface IChartFillFormat  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/); // [148]
   HRESULT STDMETHODCALLTYPE get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/); // [149]
   HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* RHS/*[out,retval]*/); // [150]
   HRESULT STDMETHODCALLTYPE OneColorGradient(Office_2k::MsoGradientStyle Style/*[in]*/, 
                                              long Variant/*[in]*/, float Degree/*[in]*/); // [1621]
   HRESULT STDMETHODCALLTYPE TwoColorGradient(Office_2k::MsoGradientStyle Style/*[in]*/, 
                                              long Variant/*[in]*/); // [1624]
   HRESULT STDMETHODCALLTYPE PresetTextured(Office_2k::MsoPresetTexture PresetTexture/*[in]*/); // [1625]
   HRESULT STDMETHODCALLTYPE Solid(void); // [1627]
   HRESULT STDMETHODCALLTYPE Patterned(Office_2k::MsoPatternType Pattern/*[in]*/); // [1628]
   HRESULT STDMETHODCALLTYPE UserPicture(TVariantInParam PictureFile/*[in,opt]*/= TNoParam(), 
                                         TVariantInParam PictureFormat/*[in,opt]*/= TNoParam(), 
                                         TVariantInParam PictureStackUnit/*[in,opt]*/= TNoParam(), 
                                         TVariantInParam PicturePlacement/*[in,opt]*/= TNoParam()); // [1629]
   HRESULT STDMETHODCALLTYPE UserTextured(BSTR TextureFile/*[in]*/); // [1634]
   HRESULT STDMETHODCALLTYPE PresetGradient(Office_2k::MsoGradientStyle Style/*[in]*/, 
                                            long Variant/*[in]*/, 
                                            Office_2k::MsoPresetGradientType PresetGradientType/*[in]*/); // [1636]
   HRESULT STDMETHODCALLTYPE get_BackColor(Graph_2k::ChartColorFormatPtr* RHS/*[out,retval]*/); // [1638]
   HRESULT STDMETHODCALLTYPE get_ForeColor(Graph_2k::ChartColorFormatPtr* RHS/*[out,retval]*/); // [1639]
   HRESULT STDMETHODCALLTYPE get_GradientColorType(Office_2k::MsoGradientColorType* RHS/*[out,retval]*/); // [1640]
   HRESULT STDMETHODCALLTYPE get_GradientDegree(float* RHS/*[out,retval]*/); // [1641]
   HRESULT STDMETHODCALLTYPE get_GradientStyle(Office_2k::MsoGradientStyle* RHS/*[out,retval]*/); // [1642]
   HRESULT STDMETHODCALLTYPE get_GradientVariant(long* RHS/*[out,retval]*/); // [1643]
   HRESULT STDMETHODCALLTYPE get_Pattern(Office_2k::MsoPatternType* RHS/*[out,retval]*/); // [95]
   HRESULT STDMETHODCALLTYPE get_PresetGradientType(Office_2k::MsoPresetGradientType* RHS/*[out,retval]*/); // [1637]
   HRESULT STDMETHODCALLTYPE get_PresetTexture(Office_2k::MsoPresetTexture* RHS/*[out,retval]*/); // [1626]
   HRESULT STDMETHODCALLTYPE get_TextureName(BSTR* RHS/*[out,retval]*/); // [1644]
   HRESULT STDMETHODCALLTYPE get_TextureType(Office_2k::MsoTextureType* RHS/*[out,retval]*/); // [1645]
   HRESULT STDMETHODCALLTYPE get_Type(Office_2k::MsoFillType* RHS/*[out,retval]*/); // [108]
   HRESULT STDMETHODCALLTYPE get_Visible(Office_2k::MsoTriState* RHS/*[out,retval]*/); // [558]
   HRESULT STDMETHODCALLTYPE set_Visible(Office_2k::MsoTriState RHS/*[in]*/); // [558]
};

// *********************************************************************//
// Interface: IChartColorFormat
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002441D-0001-0000-C000-000000000046}
// *********************************************************************//
interface IChartColorFormat  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/); // [148]
   HRESULT STDMETHODCALLTYPE get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/); // [149]
   HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* RHS/*[out,retval]*/); // [150]
   HRESULT STDMETHODCALLTYPE get_SchemeColor(long* RHS/*[out,retval]*/); // [1646]
   HRESULT STDMETHODCALLTYPE set_SchemeColor(long RHS/*[in]*/); // [1646]
   HRESULT STDMETHODCALLTYPE get_rgb(long* RHS/*[out,retval]*/); // [1055]
   HRESULT STDMETHODCALLTYPE get__Default(long* RHS/*[out,retval]*/); // [0]
   HRESULT STDMETHODCALLTYPE get_Type(long* RHS/*[out,retval]*/); // [108]
};

// *********************************************************************//
// Interface: IAxis
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208F9-0001-0000-C000-000000000046}
// *********************************************************************//
interface IAxis  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/); // [148]
   HRESULT STDMETHODCALLTYPE get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/); // [149]
   HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* RHS/*[out,retval]*/); // [150]
   HRESULT STDMETHODCALLTYPE get_AxisBetweenCategories(TOLEBOOL* RHS/*[out,retval]*/); // [45]
   HRESULT STDMETHODCALLTYPE set_AxisBetweenCategories(TOLEBOOL RHS/*[in]*/); // [45]
   HRESULT STDMETHODCALLTYPE get_AxisGroup(Graph_2k::XlAxisGroup* RHS/*[out,retval]*/); // [47]
   HRESULT STDMETHODCALLTYPE get_AxisTitle(Graph_2k::AxisTitlePtr* RHS/*[out,retval]*/); // [82]
   HRESULT STDMETHODCALLTYPE get_Border(Graph_2k::BorderPtr* RHS/*[out,retval]*/); // [128]
   HRESULT STDMETHODCALLTYPE get_Crosses(Graph_2k::XlAxisCrosses* RHS/*[out,retval]*/); // [42]
   HRESULT STDMETHODCALLTYPE set_Crosses(Graph_2k::XlAxisCrosses RHS/*[in]*/); // [42]
   HRESULT STDMETHODCALLTYPE get_CrossesAt(double* RHS/*[out,retval]*/); // [43]
   HRESULT STDMETHODCALLTYPE set_CrossesAt(double RHS/*[in]*/); // [43]
   HRESULT STDMETHODCALLTYPE Delete(TVariant* RHS/*[out,retval]*/); // [117]
   HRESULT STDMETHODCALLTYPE get_HasMajorGridlines(TOLEBOOL* RHS/*[out,retval]*/); // [24]
   HRESULT STDMETHODCALLTYPE set_HasMajorGridlines(TOLEBOOL RHS/*[in]*/); // [24]
   HRESULT STDMETHODCALLTYPE get_HasMinorGridlines(TOLEBOOL* RHS/*[out,retval]*/); // [25]
   HRESULT STDMETHODCALLTYPE set_HasMinorGridlines(TOLEBOOL RHS/*[in]*/); // [25]
   HRESULT STDMETHODCALLTYPE get_HasTitle(TOLEBOOL* RHS/*[out,retval]*/); // [54]
   HRESULT STDMETHODCALLTYPE set_HasTitle(TOLEBOOL RHS/*[in]*/); // [54]
   HRESULT STDMETHODCALLTYPE get_MajorGridlines(Graph_2k::GridlinesPtr* RHS/*[out,retval]*/); // [89]
   HRESULT STDMETHODCALLTYPE get_MajorTickMark(Graph_2k::XlTickMark* RHS/*[out,retval]*/); // [26]
   HRESULT STDMETHODCALLTYPE set_MajorTickMark(Graph_2k::XlTickMark RHS/*[in]*/); // [26]
   HRESULT STDMETHODCALLTYPE get_MajorUnit(double* RHS/*[out,retval]*/); // [37]
   HRESULT STDMETHODCALLTYPE set_MajorUnit(double RHS/*[in]*/); // [37]
   HRESULT STDMETHODCALLTYPE get_MajorUnitIsAuto(TOLEBOOL* RHS/*[out,retval]*/); // [38]
   HRESULT STDMETHODCALLTYPE set_MajorUnitIsAuto(TOLEBOOL RHS/*[in]*/); // [38]
   HRESULT STDMETHODCALLTYPE get_MaximumScale(double* RHS/*[out,retval]*/); // [35]
   HRESULT STDMETHODCALLTYPE set_MaximumScale(double RHS/*[in]*/); // [35]
   HRESULT STDMETHODCALLTYPE get_MaximumScaleIsAuto(TOLEBOOL* RHS/*[out,retval]*/); // [36]
   HRESULT STDMETHODCALLTYPE set_MaximumScaleIsAuto(TOLEBOOL RHS/*[in]*/); // [36]
   HRESULT STDMETHODCALLTYPE get_MinimumScale(double* RHS/*[out,retval]*/); // [33]
   HRESULT STDMETHODCALLTYPE set_MinimumScale(double RHS/*[in]*/); // [33]
   HRESULT STDMETHODCALLTYPE get_MinimumScaleIsAuto(TOLEBOOL* RHS/*[out,retval]*/); // [34]
   HRESULT STDMETHODCALLTYPE set_MinimumScaleIsAuto(TOLEBOOL RHS/*[in]*/); // [34]
   HRESULT STDMETHODCALLTYPE get_MinorGridlines(Graph_2k::GridlinesPtr* RHS/*[out,retval]*/); // [90]
   HRESULT STDMETHODCALLTYPE get_MinorTickMark(Graph_2k::XlTickMark* RHS/*[out,retval]*/); // [27]
   HRESULT STDMETHODCALLTYPE set_MinorTickMark(Graph_2k::XlTickMark RHS/*[in]*/); // [27]
   HRESULT STDMETHODCALLTYPE get_MinorUnit(double* RHS/*[out,retval]*/); // [39]
   HRESULT STDMETHODCALLTYPE set_MinorUnit(double RHS/*[in]*/); // [39]
   HRESULT STDMETHODCALLTYPE get_MinorUnitIsAuto(TOLEBOOL* RHS/*[out,retval]*/); // [40]
   HRESULT STDMETHODCALLTYPE set_MinorUnitIsAuto(TOLEBOOL RHS/*[in]*/); // [40]
   HRESULT STDMETHODCALLTYPE get_ReversePlotOrder(TOLEBOOL* RHS/*[out,retval]*/); // [44]
   HRESULT STDMETHODCALLTYPE set_ReversePlotOrder(TOLEBOOL RHS/*[in]*/); // [44]
   HRESULT STDMETHODCALLTYPE get_ScaleType(Graph_2k::XlScaleType* RHS/*[out,retval]*/); // [41]
   HRESULT STDMETHODCALLTYPE set_ScaleType(Graph_2k::XlScaleType RHS/*[in]*/); // [41]
   HRESULT STDMETHODCALLTYPE get_TickLabelPosition(Graph_2k::XlTickLabelPosition* RHS/*[out,retval]*/); // [28]
   HRESULT STDMETHODCALLTYPE set_TickLabelPosition(Graph_2k::XlTickLabelPosition RHS/*[in]*/); // [28]
   HRESULT STDMETHODCALLTYPE get_TickLabels(Graph_2k::TickLabelsPtr* RHS/*[out,retval]*/); // [91]
   HRESULT STDMETHODCALLTYPE get_TickLabelSpacing(long* RHS/*[out,retval]*/); // [29]
   HRESULT STDMETHODCALLTYPE set_TickLabelSpacing(long RHS/*[in]*/); // [29]
   HRESULT STDMETHODCALLTYPE get_TickMarkSpacing(long* RHS/*[out,retval]*/); // [31]
   HRESULT STDMETHODCALLTYPE set_TickMarkSpacing(long RHS/*[in]*/); // [31]
   HRESULT STDMETHODCALLTYPE get_Type(Graph_2k::XlAxisType* RHS/*[out,retval]*/); // [108]
   HRESULT STDMETHODCALLTYPE set_Type(Graph_2k::XlAxisType RHS/*[in]*/); // [108]
   HRESULT STDMETHODCALLTYPE get_BaseUnit(Graph_2k::XlTimeUnit* RHS/*[out,retval]*/); // [1647]
   HRESULT STDMETHODCALLTYPE set_BaseUnit(Graph_2k::XlTimeUnit RHS/*[in]*/); // [1647]
   HRESULT STDMETHODCALLTYPE get_BaseUnitIsAuto(TOLEBOOL* RHS/*[out,retval]*/); // [1648]
   HRESULT STDMETHODCALLTYPE set_BaseUnitIsAuto(TOLEBOOL RHS/*[in]*/); // [1648]
   HRESULT STDMETHODCALLTYPE get_MajorUnitScale(Graph_2k::XlTimeUnit* RHS/*[out,retval]*/); // [1649]
   HRESULT STDMETHODCALLTYPE set_MajorUnitScale(Graph_2k::XlTimeUnit RHS/*[in]*/); // [1649]
   HRESULT STDMETHODCALLTYPE get_MinorUnitScale(Graph_2k::XlTimeUnit* RHS/*[out,retval]*/); // [1650]
   HRESULT STDMETHODCALLTYPE set_MinorUnitScale(Graph_2k::XlTimeUnit RHS/*[in]*/); // [1650]
   HRESULT STDMETHODCALLTYPE get_CategoryType(Graph_2k::XlCategoryType* RHS/*[out,retval]*/); // [1651]
   HRESULT STDMETHODCALLTYPE set_CategoryType(Graph_2k::XlCategoryType RHS/*[in]*/); // [1651]
   HRESULT STDMETHODCALLTYPE get_Left(double* RHS/*[out,retval]*/); // [127]
   HRESULT STDMETHODCALLTYPE get_Top(double* RHS/*[out,retval]*/); // [126]
   HRESULT STDMETHODCALLTYPE get_Width(double* RHS/*[out,retval]*/); // [122]
   HRESULT STDMETHODCALLTYPE get_Height(double* RHS/*[out,retval]*/); // [123]
   HRESULT STDMETHODCALLTYPE get_DisplayUnit(Graph_2k::XlDisplayUnit* RHS/*[out,retval]*/); // [1779]
   HRESULT STDMETHODCALLTYPE set_DisplayUnit(Graph_2k::XlDisplayUnit RHS/*[in]*/); // [1779]
   HRESULT STDMETHODCALLTYPE get_DisplayUnitCustom(double* RHS/*[out,retval]*/); // [1780]
   HRESULT STDMETHODCALLTYPE set_DisplayUnitCustom(double RHS/*[in]*/); // [1780]
   HRESULT STDMETHODCALLTYPE get_HasDisplayUnitLabel(TOLEBOOL* RHS/*[out,retval]*/); // [1781]
   HRESULT STDMETHODCALLTYPE set_HasDisplayUnitLabel(TOLEBOOL RHS/*[in]*/); // [1781]
   HRESULT STDMETHODCALLTYPE get_DisplayUnitLabel(Graph_2k::DisplayUnitLabelPtr* RHS/*[out,retval]*/); // [1782]
};

// *********************************************************************//
// Interface: IChartTitle
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208F8-0001-0000-C000-000000000046}
// *********************************************************************//
interface IChartTitle  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/); // [148]
   HRESULT STDMETHODCALLTYPE get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/); // [149]
   HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* RHS/*[out,retval]*/); // [150]
   HRESULT STDMETHODCALLTYPE get_Name(BSTR* RHS/*[out,retval]*/); // [110]
   HRESULT STDMETHODCALLTYPE get_Border(Graph_2k::BorderPtr* RHS/*[out,retval]*/); // [128]
   HRESULT STDMETHODCALLTYPE Delete(TVariant* RHS/*[out,retval]*/); // [117]
   HRESULT STDMETHODCALLTYPE get_Interior(Graph_2k::InteriorPtr* RHS/*[out,retval]*/); // [129]
   HRESULT STDMETHODCALLTYPE get_Fill(Graph_2k::ChartFillFormatPtr* RHS/*[out,retval]*/); // [1663]
   HRESULT STDMETHODCALLTYPE get_Caption(BSTR* RHS/*[out,retval]*/); // [139]
   HRESULT STDMETHODCALLTYPE set_Caption(BSTR RHS/*[in]*/); // [139]
   HRESULT STDMETHODCALLTYPE get_Font(Graph_2k::FontPtr* RHS/*[out,retval]*/); // [146]
   HRESULT STDMETHODCALLTYPE get_HorizontalAlignment(TVariant* RHS/*[out,retval]*/); // [136]
   HRESULT STDMETHODCALLTYPE set_HorizontalAlignment(TVariantInParam RHS/*[in]*/); // [136]
   HRESULT STDMETHODCALLTYPE get_Left(double* RHS/*[out,retval]*/); // [127]
   HRESULT STDMETHODCALLTYPE set_Left(double RHS/*[in]*/); // [127]
   HRESULT STDMETHODCALLTYPE get_Orientation(TVariant* RHS/*[out,retval]*/); // [134]
   HRESULT STDMETHODCALLTYPE set_Orientation(TVariantInParam RHS/*[in]*/); // [134]
   HRESULT STDMETHODCALLTYPE get_Shadow(TOLEBOOL* RHS/*[out,retval]*/); // [103]
   HRESULT STDMETHODCALLTYPE set_Shadow(TOLEBOOL RHS/*[in]*/); // [103]
   HRESULT STDMETHODCALLTYPE get_Text(BSTR* RHS/*[out,retval]*/); // [138]
   HRESULT STDMETHODCALLTYPE set_Text(BSTR RHS/*[in]*/); // [138]
   HRESULT STDMETHODCALLTYPE get_Top(double* RHS/*[out,retval]*/); // [126]
   HRESULT STDMETHODCALLTYPE set_Top(double RHS/*[in]*/); // [126]
   HRESULT STDMETHODCALLTYPE get_VerticalAlignment(TVariant* RHS/*[out,retval]*/); // [137]
   HRESULT STDMETHODCALLTYPE set_VerticalAlignment(TVariantInParam RHS/*[in]*/); // [137]
   HRESULT STDMETHODCALLTYPE get_ReadingOrder(long* RHS/*[out,retval]*/); // [975]
   HRESULT STDMETHODCALLTYPE set_ReadingOrder(long RHS/*[in]*/); // [975]
   HRESULT STDMETHODCALLTYPE get_AutoScaleFont(TVariant* RHS/*[out,retval]*/); // [1525]
   HRESULT STDMETHODCALLTYPE set_AutoScaleFont(TVariantInParam RHS/*[in]*/); // [1525]
};

// *********************************************************************//
// Interface: IAxisTitle
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208F7-0001-0000-C000-000000000046}
// *********************************************************************//
interface IAxisTitle  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/); // [148]
   HRESULT STDMETHODCALLTYPE get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/); // [149]
   HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* RHS/*[out,retval]*/); // [150]
   HRESULT STDMETHODCALLTYPE get_Name(BSTR* RHS/*[out,retval]*/); // [110]
   HRESULT STDMETHODCALLTYPE get_Border(Graph_2k::BorderPtr* RHS/*[out,retval]*/); // [128]
   HRESULT STDMETHODCALLTYPE Delete(TVariant* RHS/*[out,retval]*/); // [117]
   HRESULT STDMETHODCALLTYPE get_Interior(Graph_2k::InteriorPtr* RHS/*[out,retval]*/); // [129]
   HRESULT STDMETHODCALLTYPE get_Fill(Graph_2k::ChartFillFormatPtr* RHS/*[out,retval]*/); // [1663]
   HRESULT STDMETHODCALLTYPE get_Caption(BSTR* RHS/*[out,retval]*/); // [139]
   HRESULT STDMETHODCALLTYPE set_Caption(BSTR RHS/*[in]*/); // [139]
   HRESULT STDMETHODCALLTYPE get_Font(Graph_2k::FontPtr* RHS/*[out,retval]*/); // [146]
   HRESULT STDMETHODCALLTYPE get_HorizontalAlignment(TVariant* RHS/*[out,retval]*/); // [136]
   HRESULT STDMETHODCALLTYPE set_HorizontalAlignment(TVariantInParam RHS/*[in]*/); // [136]
   HRESULT STDMETHODCALLTYPE get_Left(double* RHS/*[out,retval]*/); // [127]
   HRESULT STDMETHODCALLTYPE set_Left(double RHS/*[in]*/); // [127]
   HRESULT STDMETHODCALLTYPE get_Orientation(TVariant* RHS/*[out,retval]*/); // [134]
   HRESULT STDMETHODCALLTYPE set_Orientation(TVariantInParam RHS/*[in]*/); // [134]
   HRESULT STDMETHODCALLTYPE get_Shadow(TOLEBOOL* RHS/*[out,retval]*/); // [103]
   HRESULT STDMETHODCALLTYPE set_Shadow(TOLEBOOL RHS/*[in]*/); // [103]
   HRESULT STDMETHODCALLTYPE get_Text(BSTR* RHS/*[out,retval]*/); // [138]
   HRESULT STDMETHODCALLTYPE set_Text(BSTR RHS/*[in]*/); // [138]
   HRESULT STDMETHODCALLTYPE get_Top(double* RHS/*[out,retval]*/); // [126]
   HRESULT STDMETHODCALLTYPE set_Top(double RHS/*[in]*/); // [126]
   HRESULT STDMETHODCALLTYPE get_VerticalAlignment(TVariant* RHS/*[out,retval]*/); // [137]
   HRESULT STDMETHODCALLTYPE set_VerticalAlignment(TVariantInParam RHS/*[in]*/); // [137]
   HRESULT STDMETHODCALLTYPE get_ReadingOrder(long* RHS/*[out,retval]*/); // [975]
   HRESULT STDMETHODCALLTYPE set_ReadingOrder(long RHS/*[in]*/); // [975]
   HRESULT STDMETHODCALLTYPE get_AutoScaleFont(TVariant* RHS/*[out,retval]*/); // [1525]
   HRESULT STDMETHODCALLTYPE set_AutoScaleFont(TVariantInParam RHS/*[in]*/); // [1525]
};

// *********************************************************************//
// Interface: IChartGroup
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208F6-0001-0000-C000-000000000046}
// *********************************************************************//
interface IChartGroup  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/); // [148]
   HRESULT STDMETHODCALLTYPE get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/); // [149]
   HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* RHS/*[out,retval]*/); // [150]
   HRESULT STDMETHODCALLTYPE get_AxisGroup(Graph_2k::XlAxisGroup* RHS/*[out,retval]*/); // [47]
   HRESULT STDMETHODCALLTYPE set_AxisGroup(Graph_2k::XlAxisGroup RHS/*[in]*/); // [47]
   HRESULT STDMETHODCALLTYPE get_DoughnutHoleSize(long* RHS/*[out,retval]*/); // [1126]
   HRESULT STDMETHODCALLTYPE set_DoughnutHoleSize(long RHS/*[in]*/); // [1126]
   HRESULT STDMETHODCALLTYPE get_DownBars(Graph_2k::DownBarsPtr* RHS/*[out,retval]*/); // [141]
   HRESULT STDMETHODCALLTYPE get_DropLines(Graph_2k::DropLinesPtr* RHS/*[out,retval]*/); // [142]
   HRESULT STDMETHODCALLTYPE get_FirstSliceAngle(long* RHS/*[out,retval]*/); // [63]
   HRESULT STDMETHODCALLTYPE set_FirstSliceAngle(long RHS/*[in]*/); // [63]
   HRESULT STDMETHODCALLTYPE get_GapWidth(long* RHS/*[out,retval]*/); // [51]
   HRESULT STDMETHODCALLTYPE set_GapWidth(long RHS/*[in]*/); // [51]
   HRESULT STDMETHODCALLTYPE get_HasDropLines(TOLEBOOL* RHS/*[out,retval]*/); // [61]
   HRESULT STDMETHODCALLTYPE set_HasDropLines(TOLEBOOL RHS/*[in]*/); // [61]
   HRESULT STDMETHODCALLTYPE get_HasHiLoLines(TOLEBOOL* RHS/*[out,retval]*/); // [62]
   HRESULT STDMETHODCALLTYPE set_HasHiLoLines(TOLEBOOL RHS/*[in]*/); // [62]
   HRESULT STDMETHODCALLTYPE get_HasRadarAxisLabels(TOLEBOOL* RHS/*[out,retval]*/); // [64]
   HRESULT STDMETHODCALLTYPE set_HasRadarAxisLabels(TOLEBOOL RHS/*[in]*/); // [64]
   HRESULT STDMETHODCALLTYPE get_HasSeriesLines(TOLEBOOL* RHS/*[out,retval]*/); // [65]
   HRESULT STDMETHODCALLTYPE set_HasSeriesLines(TOLEBOOL RHS/*[in]*/); // [65]
   HRESULT STDMETHODCALLTYPE get_HasUpDownBars(TOLEBOOL* RHS/*[out,retval]*/); // [66]
   HRESULT STDMETHODCALLTYPE set_HasUpDownBars(TOLEBOOL RHS/*[in]*/); // [66]
   HRESULT STDMETHODCALLTYPE get_HiLoLines(Graph_2k::HiLoLinesPtr* RHS/*[out,retval]*/); // [143]
   HRESULT STDMETHODCALLTYPE get_Index(long* RHS/*[out,retval]*/); // [486]
   HRESULT STDMETHODCALLTYPE get_Overlap(long* RHS/*[out,retval]*/); // [56]
   HRESULT STDMETHODCALLTYPE set_Overlap(long RHS/*[in]*/); // [56]
   HRESULT STDMETHODCALLTYPE get_RadarAxisLabels(Graph_2k::TickLabelsPtr* RHS/*[out,retval]*/); // [144]
   HRESULT STDMETHODCALLTYPE SeriesCollection(TVariantInParam Index/*[in,opt]*/, 
                                              LPDISPATCH* RHS/*[out,retval]*/); // [68]
   HRESULT STDMETHODCALLTYPE get_SeriesLines(Graph_2k::SeriesLinesPtr* RHS/*[out,retval]*/); // [145]
   HRESULT STDMETHODCALLTYPE get_SubType(long* RHS/*[out,retval]*/); // [109]
   HRESULT STDMETHODCALLTYPE set_SubType(long RHS/*[in]*/); // [109]
   HRESULT STDMETHODCALLTYPE get_Type(long* RHS/*[out,retval]*/); // [108]
   HRESULT STDMETHODCALLTYPE set_Type(long RHS/*[in]*/); // [108]
   HRESULT STDMETHODCALLTYPE get_UpBars(Graph_2k::UpBarsPtr* RHS/*[out,retval]*/); // [140]
   HRESULT STDMETHODCALLTYPE get_VaryByCategories(TOLEBOOL* RHS/*[out,retval]*/); // [60]
   HRESULT STDMETHODCALLTYPE set_VaryByCategories(TOLEBOOL RHS/*[in]*/); // [60]
   HRESULT STDMETHODCALLTYPE get_SizeRepresents(Graph_2k::XlSizeRepresents* RHS/*[out,retval]*/); // [1652]
   HRESULT STDMETHODCALLTYPE set_SizeRepresents(Graph_2k::XlSizeRepresents RHS/*[in]*/); // [1652]
   HRESULT STDMETHODCALLTYPE get_BubbleScale(long* RHS/*[out,retval]*/); // [1653]
   HRESULT STDMETHODCALLTYPE set_BubbleScale(long RHS/*[in]*/); // [1653]
   HRESULT STDMETHODCALLTYPE get_ShowNegativeBubbles(TOLEBOOL* RHS/*[out,retval]*/); // [1654]
   HRESULT STDMETHODCALLTYPE set_ShowNegativeBubbles(TOLEBOOL RHS/*[in]*/); // [1654]
   HRESULT STDMETHODCALLTYPE get_SplitType(Graph_2k::XlChartSplitType* RHS/*[out,retval]*/); // [1655]
   HRESULT STDMETHODCALLTYPE set_SplitType(Graph_2k::XlChartSplitType RHS/*[in]*/); // [1655]
   HRESULT STDMETHODCALLTYPE get_SplitValue(TVariant* RHS/*[out,retval]*/); // [1656]
   HRESULT STDMETHODCALLTYPE set_SplitValue(TVariantInParam RHS/*[in]*/); // [1656]
   HRESULT STDMETHODCALLTYPE get_SecondPlotSize(long* RHS/*[out,retval]*/); // [1657]
   HRESULT STDMETHODCALLTYPE set_SecondPlotSize(long RHS/*[in]*/); // [1657]
   HRESULT STDMETHODCALLTYPE get_Has3DShading(TOLEBOOL* RHS/*[out,retval]*/); // [1658]
   HRESULT STDMETHODCALLTYPE set_Has3DShading(TOLEBOOL RHS/*[in]*/); // [1658]
};

// *********************************************************************//
// Interface: IChartGroups
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208F5-0001-0000-C000-000000000046}
// *********************************************************************//
interface IChartGroups  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/); // [148]
   HRESULT STDMETHODCALLTYPE get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/); // [149]
   HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* RHS/*[out,retval]*/); // [150]
   HRESULT STDMETHODCALLTYPE get_Count(long* RHS/*[out,retval]*/); // [118]
   HRESULT STDMETHODCALLTYPE Item(TVariantInParam Index/*[in]*/, 
                                  Graph_2k::ChartGroupPtr* RHS/*[out,retval]*/); // [170]
   HRESULT STDMETHODCALLTYPE _NewEnum(LPUNKNOWN* RHS/*[out,retval]*/); // [-4]
};

// *********************************************************************//
// Interface: IAxes
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208F4-0001-0000-C000-000000000046}
// *********************************************************************//
interface IAxes  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/); // [148]
   HRESULT STDMETHODCALLTYPE get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/); // [149]
   HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* RHS/*[out,retval]*/); // [150]
   HRESULT STDMETHODCALLTYPE get_Count(long* RHS/*[out,retval]*/); // [118]
   HRESULT STDMETHODCALLTYPE Item(Graph_2k::XlAxisType Type/*[in]*/, 
                                  Graph_2k::XlAxisGroup AxisGroup/*[in,def,opt]*/, 
                                  Graph_2k::AxisPtr* RHS/*[out,retval]*/); // [170]
   HRESULT STDMETHODCALLTYPE _NewEnum(LPUNKNOWN* RHS/*[out,retval]*/); // [-4]
};

// *********************************************************************//
// Interface: IPoints
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208F2-0001-0000-C000-000000000046}
// *********************************************************************//
interface IPoints  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/); // [148]
   HRESULT STDMETHODCALLTYPE get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/); // [149]
   HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* RHS/*[out,retval]*/); // [150]
   HRESULT STDMETHODCALLTYPE get_Count(long* RHS/*[out,retval]*/); // [118]
   HRESULT STDMETHODCALLTYPE Item(long Index/*[in]*/, Graph_2k::PointPtr* RHS/*[out,retval]*/); // [170]
   HRESULT STDMETHODCALLTYPE _NewEnum(LPUNKNOWN* RHS/*[out,retval]*/); // [-4]
};

// *********************************************************************//
// Interface: IPoint
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208F1-0001-0000-C000-000000000046}
// *********************************************************************//
interface IPoint  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/); // [148]
   HRESULT STDMETHODCALLTYPE get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/); // [149]
   HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* RHS/*[out,retval]*/); // [150]
   HRESULT STDMETHODCALLTYPE ApplyDataLabels(Graph_2k::XlDataLabelsType Type/*[in,def,opt]*/, 
                                             TVariantInParam LegendKey/*[in,opt]*/, 
                                             TVariantInParam AutoText/*[in,opt]*/, 
                                             TVariant* RHS/*[out,retval]*/); // [151]
   HRESULT STDMETHODCALLTYPE get_Border(Graph_2k::BorderPtr* RHS/*[out,retval]*/); // [128]
   HRESULT STDMETHODCALLTYPE ClearFormats(TVariant* RHS/*[out,retval]*/); // [112]
   HRESULT STDMETHODCALLTYPE get_DataLabel(Graph_2k::DataLabelPtr* RHS/*[out,retval]*/); // [158]
   HRESULT STDMETHODCALLTYPE Delete(TVariant* RHS/*[out,retval]*/); // [117]
   HRESULT STDMETHODCALLTYPE get_Explosion(long* RHS/*[out,retval]*/); // [182]
   HRESULT STDMETHODCALLTYPE set_Explosion(long RHS/*[in]*/); // [182]
   HRESULT STDMETHODCALLTYPE get_HasDataLabel(TOLEBOOL* RHS/*[out,retval]*/); // [77]
   HRESULT STDMETHODCALLTYPE set_HasDataLabel(TOLEBOOL RHS/*[in]*/); // [77]
   HRESULT STDMETHODCALLTYPE get_Interior(Graph_2k::InteriorPtr* RHS/*[out,retval]*/); // [129]
   HRESULT STDMETHODCALLTYPE get_InvertIfNegative(TOLEBOOL* RHS/*[out,retval]*/); // [132]
   HRESULT STDMETHODCALLTYPE set_InvertIfNegative(TOLEBOOL RHS/*[in]*/); // [132]
   HRESULT STDMETHODCALLTYPE get_MarkerBackgroundColor(long* RHS/*[out,retval]*/); // [73]
   HRESULT STDMETHODCALLTYPE set_MarkerBackgroundColor(long RHS/*[in]*/); // [73]
   HRESULT STDMETHODCALLTYPE get_MarkerBackgroundColorIndex(Graph_2k::XlColorIndex* RHS/*[out,retval]*/); // [74]
   HRESULT STDMETHODCALLTYPE set_MarkerBackgroundColorIndex(Graph_2k::XlColorIndex RHS/*[in]*/); // [74]
   HRESULT STDMETHODCALLTYPE get_MarkerForegroundColor(long* RHS/*[out,retval]*/); // [75]
   HRESULT STDMETHODCALLTYPE set_MarkerForegroundColor(long RHS/*[in]*/); // [75]
   HRESULT STDMETHODCALLTYPE get_MarkerForegroundColorIndex(Graph_2k::XlColorIndex* RHS/*[out,retval]*/); // [76]
   HRESULT STDMETHODCALLTYPE set_MarkerForegroundColorIndex(Graph_2k::XlColorIndex RHS/*[in]*/); // [76]
   HRESULT STDMETHODCALLTYPE get_MarkerSize(long* RHS/*[out,retval]*/); // [231]
   HRESULT STDMETHODCALLTYPE set_MarkerSize(long RHS/*[in]*/); // [231]
   HRESULT STDMETHODCALLTYPE get_MarkerStyle(Graph_2k::XlMarkerStyle* RHS/*[out,retval]*/); // [72]
   HRESULT STDMETHODCALLTYPE set_MarkerStyle(Graph_2k::XlMarkerStyle RHS/*[in]*/); // [72]
   HRESULT STDMETHODCALLTYPE get_PictureType(Graph_2k::XlChartPictureType* RHS/*[out,retval]*/); // [161]
   HRESULT STDMETHODCALLTYPE set_PictureType(Graph_2k::XlChartPictureType RHS/*[in]*/); // [161]
   HRESULT STDMETHODCALLTYPE get_PictureUnit(long* RHS/*[out,retval]*/); // [162]
   HRESULT STDMETHODCALLTYPE set_PictureUnit(long RHS/*[in]*/); // [162]
   HRESULT STDMETHODCALLTYPE get_ApplyPictToSides(TOLEBOOL* RHS/*[out,retval]*/); // [1659]
   HRESULT STDMETHODCALLTYPE set_ApplyPictToSides(TOLEBOOL RHS/*[in]*/); // [1659]
   HRESULT STDMETHODCALLTYPE get_ApplyPictToFront(TOLEBOOL* RHS/*[out,retval]*/); // [1660]
   HRESULT STDMETHODCALLTYPE set_ApplyPictToFront(TOLEBOOL RHS/*[in]*/); // [1660]
   HRESULT STDMETHODCALLTYPE get_ApplyPictToEnd(TOLEBOOL* RHS/*[out,retval]*/); // [1661]
   HRESULT STDMETHODCALLTYPE set_ApplyPictToEnd(TOLEBOOL RHS/*[in]*/); // [1661]
   HRESULT STDMETHODCALLTYPE get_Shadow(TOLEBOOL* RHS/*[out,retval]*/); // [103]
   HRESULT STDMETHODCALLTYPE set_Shadow(TOLEBOOL RHS/*[in]*/); // [103]
   HRESULT STDMETHODCALLTYPE get_SecondaryPlot(TOLEBOOL* RHS/*[out,retval]*/); // [1662]
   HRESULT STDMETHODCALLTYPE set_SecondaryPlot(TOLEBOOL RHS/*[in]*/); // [1662]
   HRESULT STDMETHODCALLTYPE get_Fill(Graph_2k::ChartFillFormatPtr* RHS/*[out,retval]*/); // [1663]
};

// *********************************************************************//
// Interface: ISeries
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208F0-0001-0000-C000-000000000046}
// *********************************************************************//
interface ISeries  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/); // [148]
   HRESULT STDMETHODCALLTYPE get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/); // [149]
   HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* RHS/*[out,retval]*/); // [150]
   HRESULT STDMETHODCALLTYPE ApplyDataLabels(Graph_2k::XlDataLabelsType Type/*[in,def,opt]*/, 
                                             TVariantInParam LegendKey/*[in,opt]*/, 
                                             TVariantInParam AutoText/*[in,opt]*/, 
                                             TVariantInParam HasLeaderLines/*[in,opt]*/, 
                                             TVariant* RHS/*[out,retval]*/); // [151]
   HRESULT STDMETHODCALLTYPE get_AxisGroup(Graph_2k::XlAxisGroup* RHS/*[out,retval]*/); // [47]
   HRESULT STDMETHODCALLTYPE set_AxisGroup(Graph_2k::XlAxisGroup RHS/*[in]*/); // [47]
   HRESULT STDMETHODCALLTYPE get_Border(Graph_2k::BorderPtr* RHS/*[out,retval]*/); // [128]
   HRESULT STDMETHODCALLTYPE ClearFormats(TVariant* RHS/*[out,retval]*/); // [112]
   HRESULT STDMETHODCALLTYPE DataLabels(TVariantInParam Index/*[in,opt]*/, 
                                        LPDISPATCH* RHS/*[out,retval]*/); // [157]
   HRESULT STDMETHODCALLTYPE Delete(TVariant* RHS/*[out,retval]*/); // [117]
   HRESULT STDMETHODCALLTYPE ErrorBar(Graph_2k::XlErrorBarDirection Direction/*[in]*/, 
                                      Graph_2k::XlErrorBarInclude Include/*[in]*/, 
                                      Graph_2k::XlErrorBarType Type/*[in]*/, 
                                      TVariantInParam Amount/*[in,opt]*/, 
                                      TVariantInParam MinusValues/*[in,opt]*/, 
                                      TVariant* RHS/*[out,retval]*/); // [152]
   HRESULT STDMETHODCALLTYPE get_ErrorBars(Graph_2k::ErrorBarsPtr* RHS/*[out,retval]*/); // [159]
   HRESULT STDMETHODCALLTYPE get_Explosion(long* RHS/*[out,retval]*/); // [182]
   HRESULT STDMETHODCALLTYPE set_Explosion(long RHS/*[in]*/); // [182]
   HRESULT STDMETHODCALLTYPE get_HasDataLabels(TOLEBOOL* RHS/*[out,retval]*/); // [78]
   HRESULT STDMETHODCALLTYPE set_HasDataLabels(TOLEBOOL RHS/*[in]*/); // [78]
   HRESULT STDMETHODCALLTYPE get_HasErrorBars(TOLEBOOL* RHS/*[out,retval]*/); // [160]
   HRESULT STDMETHODCALLTYPE set_HasErrorBars(TOLEBOOL RHS/*[in]*/); // [160]
   HRESULT STDMETHODCALLTYPE get_Interior(Graph_2k::InteriorPtr* RHS/*[out,retval]*/); // [129]
   HRESULT STDMETHODCALLTYPE get_Fill(Graph_2k::ChartFillFormatPtr* RHS/*[out,retval]*/); // [1663]
   HRESULT STDMETHODCALLTYPE get_InvertIfNegative(TOLEBOOL* RHS/*[out,retval]*/); // [132]
   HRESULT STDMETHODCALLTYPE set_InvertIfNegative(TOLEBOOL RHS/*[in]*/); // [132]
   HRESULT STDMETHODCALLTYPE get_MarkerBackgroundColor(long* RHS/*[out,retval]*/); // [73]
   HRESULT STDMETHODCALLTYPE set_MarkerBackgroundColor(long RHS/*[in]*/); // [73]
   HRESULT STDMETHODCALLTYPE get_MarkerBackgroundColorIndex(Graph_2k::XlColorIndex* RHS/*[out,retval]*/); // [74]
   HRESULT STDMETHODCALLTYPE set_MarkerBackgroundColorIndex(Graph_2k::XlColorIndex RHS/*[in]*/); // [74]
   HRESULT STDMETHODCALLTYPE get_MarkerForegroundColor(long* RHS/*[out,retval]*/); // [75]
   HRESULT STDMETHODCALLTYPE set_MarkerForegroundColor(long RHS/*[in]*/); // [75]
   HRESULT STDMETHODCALLTYPE get_MarkerForegroundColorIndex(Graph_2k::XlColorIndex* RHS/*[out,retval]*/); // [76]
   HRESULT STDMETHODCALLTYPE set_MarkerForegroundColorIndex(Graph_2k::XlColorIndex RHS/*[in]*/); // [76]
   HRESULT STDMETHODCALLTYPE get_MarkerSize(long* RHS/*[out,retval]*/); // [231]
   HRESULT STDMETHODCALLTYPE set_MarkerSize(long RHS/*[in]*/); // [231]
   HRESULT STDMETHODCALLTYPE get_MarkerStyle(Graph_2k::XlMarkerStyle* RHS/*[out,retval]*/); // [72]
   HRESULT STDMETHODCALLTYPE set_MarkerStyle(Graph_2k::XlMarkerStyle RHS/*[in]*/); // [72]
   HRESULT STDMETHODCALLTYPE get_PictureType(Graph_2k::XlChartPictureType* RHS/*[out,retval]*/); // [161]
   HRESULT STDMETHODCALLTYPE set_PictureType(Graph_2k::XlChartPictureType RHS/*[in]*/); // [161]
   HRESULT STDMETHODCALLTYPE get_PictureUnit(long* RHS/*[out,retval]*/); // [162]
   HRESULT STDMETHODCALLTYPE set_PictureUnit(long RHS/*[in]*/); // [162]
   HRESULT STDMETHODCALLTYPE Points(TVariantInParam Index/*[in,opt]*/, 
                                    LPDISPATCH* RHS/*[out,retval]*/); // [70]
   HRESULT STDMETHODCALLTYPE get_Smooth(TOLEBOOL* RHS/*[out,retval]*/); // [163]
   HRESULT STDMETHODCALLTYPE set_Smooth(TOLEBOOL RHS/*[in]*/); // [163]
   HRESULT STDMETHODCALLTYPE Trendlines(TVariantInParam Index/*[in,opt]*/, 
                                        LPDISPATCH* RHS/*[out,retval]*/); // [154]
   HRESULT STDMETHODCALLTYPE get_Type(long* RHS/*[out,retval]*/); // [108]
   HRESULT STDMETHODCALLTYPE set_Type(long RHS/*[in]*/); // [108]
   HRESULT STDMETHODCALLTYPE get_ChartType(Graph_2k::XlChartType* RHS/*[out,retval]*/); // [1400]
   HRESULT STDMETHODCALLTYPE set_ChartType(Graph_2k::XlChartType RHS/*[in]*/); // [1400]
   HRESULT STDMETHODCALLTYPE ApplyCustomType(Graph_2k::XlChartType ChartType/*[in]*/); // [1401]
   HRESULT STDMETHODCALLTYPE get_BarShape(Graph_2k::XlBarShape* RHS/*[out,retval]*/); // [1403]
   HRESULT STDMETHODCALLTYPE set_BarShape(Graph_2k::XlBarShape RHS/*[in]*/); // [1403]
   HRESULT STDMETHODCALLTYPE get_ApplyPictToSides(TOLEBOOL* RHS/*[out,retval]*/); // [1659]
   HRESULT STDMETHODCALLTYPE set_ApplyPictToSides(TOLEBOOL RHS/*[in]*/); // [1659]
   HRESULT STDMETHODCALLTYPE get_ApplyPictToFront(TOLEBOOL* RHS/*[out,retval]*/); // [1660]
   HRESULT STDMETHODCALLTYPE set_ApplyPictToFront(TOLEBOOL RHS/*[in]*/); // [1660]
   HRESULT STDMETHODCALLTYPE get_ApplyPictToEnd(TOLEBOOL* RHS/*[out,retval]*/); // [1661]
   HRESULT STDMETHODCALLTYPE set_ApplyPictToEnd(TOLEBOOL RHS/*[in]*/); // [1661]
   HRESULT STDMETHODCALLTYPE get_Has3DEffect(TOLEBOOL* RHS/*[out,retval]*/); // [1665]
   HRESULT STDMETHODCALLTYPE set_Has3DEffect(TOLEBOOL RHS/*[in]*/); // [1665]
   HRESULT STDMETHODCALLTYPE get_Shadow(TOLEBOOL* RHS/*[out,retval]*/); // [103]
   HRESULT STDMETHODCALLTYPE set_Shadow(TOLEBOOL RHS/*[in]*/); // [103]
   HRESULT STDMETHODCALLTYPE get_HasLeaderLines(TOLEBOOL* RHS/*[out,retval]*/); // [1394]
   HRESULT STDMETHODCALLTYPE set_HasLeaderLines(TOLEBOOL RHS/*[in]*/); // [1394]
   HRESULT STDMETHODCALLTYPE get_LeaderLines(Graph_2k::LeaderLinesPtr* RHS/*[out,retval]*/); // [1666]
};

// *********************************************************************//
// Interface: ISeriesCollection
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208EF-0001-0000-C000-000000000046}
// *********************************************************************//
interface ISeriesCollection  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/); // [148]
   HRESULT STDMETHODCALLTYPE get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/); // [149]
   HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* RHS/*[out,retval]*/); // [150]
   HRESULT STDMETHODCALLTYPE get_Count(long* RHS/*[out,retval]*/); // [118]
   HRESULT STDMETHODCALLTYPE Item(TVariantInParam Index/*[in]*/, 
                                  Graph_2k::SeriesPtr* RHS/*[out,retval]*/); // [170]
   HRESULT STDMETHODCALLTYPE _NewEnum(LPUNKNOWN* RHS/*[out,retval]*/); // [-4]
};

// *********************************************************************//
// Interface: IDataLabel
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208E9-0001-0000-C000-000000000046}
// *********************************************************************//
interface IDataLabel  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/); // [148]
   HRESULT STDMETHODCALLTYPE get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/); // [149]
   HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* RHS/*[out,retval]*/); // [150]
   HRESULT STDMETHODCALLTYPE get_Name(BSTR* RHS/*[out,retval]*/); // [110]
   HRESULT STDMETHODCALLTYPE get_Border(Graph_2k::BorderPtr* RHS/*[out,retval]*/); // [128]
   HRESULT STDMETHODCALLTYPE Delete(TVariant* RHS/*[out,retval]*/); // [117]
   HRESULT STDMETHODCALLTYPE get_Interior(Graph_2k::InteriorPtr* RHS/*[out,retval]*/); // [129]
   HRESULT STDMETHODCALLTYPE get_Fill(Graph_2k::ChartFillFormatPtr* RHS/*[out,retval]*/); // [1663]
   HRESULT STDMETHODCALLTYPE get_Caption(BSTR* RHS/*[out,retval]*/); // [139]
   HRESULT STDMETHODCALLTYPE set_Caption(BSTR RHS/*[in]*/); // [139]
   HRESULT STDMETHODCALLTYPE get_Font(Graph_2k::FontPtr* RHS/*[out,retval]*/); // [146]
   HRESULT STDMETHODCALLTYPE get_HorizontalAlignment(TVariant* RHS/*[out,retval]*/); // [136]
   HRESULT STDMETHODCALLTYPE set_HorizontalAlignment(TVariantInParam RHS/*[in]*/); // [136]
   HRESULT STDMETHODCALLTYPE get_Left(double* RHS/*[out,retval]*/); // [127]
   HRESULT STDMETHODCALLTYPE set_Left(double RHS/*[in]*/); // [127]
   HRESULT STDMETHODCALLTYPE get_Orientation(TVariant* RHS/*[out,retval]*/); // [134]
   HRESULT STDMETHODCALLTYPE set_Orientation(TVariantInParam RHS/*[in]*/); // [134]
   HRESULT STDMETHODCALLTYPE get_Shadow(TOLEBOOL* RHS/*[out,retval]*/); // [103]
   HRESULT STDMETHODCALLTYPE set_Shadow(TOLEBOOL RHS/*[in]*/); // [103]
   HRESULT STDMETHODCALLTYPE get_Text(BSTR* RHS/*[out,retval]*/); // [138]
   HRESULT STDMETHODCALLTYPE set_Text(BSTR RHS/*[in]*/); // [138]
   HRESULT STDMETHODCALLTYPE get_Top(double* RHS/*[out,retval]*/); // [126]
   HRESULT STDMETHODCALLTYPE set_Top(double RHS/*[in]*/); // [126]
   HRESULT STDMETHODCALLTYPE get_VerticalAlignment(TVariant* RHS/*[out,retval]*/); // [137]
   HRESULT STDMETHODCALLTYPE set_VerticalAlignment(TVariantInParam RHS/*[in]*/); // [137]
   HRESULT STDMETHODCALLTYPE get_ReadingOrder(long* RHS/*[out,retval]*/); // [975]
   HRESULT STDMETHODCALLTYPE set_ReadingOrder(long RHS/*[in]*/); // [975]
   HRESULT STDMETHODCALLTYPE get_AutoScaleFont(TVariant* RHS/*[out,retval]*/); // [1525]
   HRESULT STDMETHODCALLTYPE set_AutoScaleFont(TVariantInParam RHS/*[in]*/); // [1525]
   HRESULT STDMETHODCALLTYPE get_AutoText(TOLEBOOL* RHS/*[out,retval]*/); // [135]
   HRESULT STDMETHODCALLTYPE set_AutoText(TOLEBOOL RHS/*[in]*/); // [135]
   HRESULT STDMETHODCALLTYPE get_NumberFormat(BSTR* RHS/*[out,retval]*/); // [193]
   HRESULT STDMETHODCALLTYPE set_NumberFormat(BSTR RHS/*[in]*/); // [193]
   HRESULT STDMETHODCALLTYPE get_NumberFormatLocal(TVariant* RHS/*[out,retval]*/); // [1097]
   HRESULT STDMETHODCALLTYPE set_NumberFormatLocal(TVariantInParam RHS/*[in]*/); // [1097]
   HRESULT STDMETHODCALLTYPE get_ShowLegendKey(TOLEBOOL* RHS/*[out,retval]*/); // [171]
   HRESULT STDMETHODCALLTYPE set_ShowLegendKey(TOLEBOOL RHS/*[in]*/); // [171]
   HRESULT STDMETHODCALLTYPE get_Type(TVariant* RHS/*[out,retval]*/); // [108]
   HRESULT STDMETHODCALLTYPE set_Type(TVariantInParam RHS/*[in]*/); // [108]
   HRESULT STDMETHODCALLTYPE get_Position(Graph_2k::XlDataLabelPosition* RHS/*[out,retval]*/); // [133]
   HRESULT STDMETHODCALLTYPE set_Position(Graph_2k::XlDataLabelPosition RHS/*[in]*/); // [133]
};

// *********************************************************************//
// Interface: IDataLabels
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208E8-0001-0000-C000-000000000046}
// *********************************************************************//
interface IDataLabels  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/); // [148]
   HRESULT STDMETHODCALLTYPE get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/); // [149]
   HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* RHS/*[out,retval]*/); // [150]
   HRESULT STDMETHODCALLTYPE get_Name(BSTR* RHS/*[out,retval]*/); // [110]
   HRESULT STDMETHODCALLTYPE get_Border(Graph_2k::BorderPtr* RHS/*[out,retval]*/); // [128]
   HRESULT STDMETHODCALLTYPE Delete(TVariant* RHS/*[out,retval]*/); // [117]
   HRESULT STDMETHODCALLTYPE get_Interior(Graph_2k::InteriorPtr* RHS/*[out,retval]*/); // [129]
   HRESULT STDMETHODCALLTYPE get_Fill(Graph_2k::ChartFillFormatPtr* RHS/*[out,retval]*/); // [1663]
   void STDMETHODCALLTYPE _Dummy8(void); // [65544]
   HRESULT STDMETHODCALLTYPE get_Font(Graph_2k::FontPtr* RHS/*[out,retval]*/); // [146]
   HRESULT STDMETHODCALLTYPE get_HorizontalAlignment(TVariant* RHS/*[out,retval]*/); // [136]
   HRESULT STDMETHODCALLTYPE set_HorizontalAlignment(TVariantInParam RHS/*[in]*/); // [136]
   void STDMETHODCALLTYPE _Dummy11(void); // [65547]
   HRESULT STDMETHODCALLTYPE get_Orientation(TVariant* RHS/*[out,retval]*/); // [134]
   HRESULT STDMETHODCALLTYPE set_Orientation(TVariantInParam RHS/*[in]*/); // [134]
   HRESULT STDMETHODCALLTYPE get_Shadow(TOLEBOOL* RHS/*[out,retval]*/); // [103]
   HRESULT STDMETHODCALLTYPE set_Shadow(TOLEBOOL RHS/*[in]*/); // [103]
   void STDMETHODCALLTYPE _Dummy14(void); // [65550]
   void STDMETHODCALLTYPE _Dummy15(void); // [65551]
   HRESULT STDMETHODCALLTYPE get_VerticalAlignment(TVariant* RHS/*[out,retval]*/); // [137]
   HRESULT STDMETHODCALLTYPE set_VerticalAlignment(TVariantInParam RHS/*[in]*/); // [137]
   HRESULT STDMETHODCALLTYPE get_ReadingOrder(long* RHS/*[out,retval]*/); // [975]
   HRESULT STDMETHODCALLTYPE set_ReadingOrder(long RHS/*[in]*/); // [975]
   HRESULT STDMETHODCALLTYPE get_AutoScaleFont(TVariant* RHS/*[out,retval]*/); // [1525]
   HRESULT STDMETHODCALLTYPE set_AutoScaleFont(TVariantInParam RHS/*[in]*/); // [1525]
   HRESULT STDMETHODCALLTYPE get_AutoText(TOLEBOOL* RHS/*[out,retval]*/); // [135]
   HRESULT STDMETHODCALLTYPE set_AutoText(TOLEBOOL RHS/*[in]*/); // [135]
   HRESULT STDMETHODCALLTYPE get_NumberFormat(BSTR* RHS/*[out,retval]*/); // [193]
   HRESULT STDMETHODCALLTYPE set_NumberFormat(BSTR RHS/*[in]*/); // [193]
   HRESULT STDMETHODCALLTYPE get_NumberFormatLocal(TVariant* RHS/*[out,retval]*/); // [1097]
   HRESULT STDMETHODCALLTYPE set_NumberFormatLocal(TVariantInParam RHS/*[in]*/); // [1097]
   HRESULT STDMETHODCALLTYPE get_ShowLegendKey(TOLEBOOL* RHS/*[out,retval]*/); // [171]
   HRESULT STDMETHODCALLTYPE set_ShowLegendKey(TOLEBOOL RHS/*[in]*/); // [171]
   HRESULT STDMETHODCALLTYPE get_Type(TVariant* RHS/*[out,retval]*/); // [108]
   HRESULT STDMETHODCALLTYPE set_Type(TVariantInParam RHS/*[in]*/); // [108]
   HRESULT STDMETHODCALLTYPE get_Position(Graph_2k::XlDataLabelPosition* RHS/*[out,retval]*/); // [133]
   HRESULT STDMETHODCALLTYPE set_Position(Graph_2k::XlDataLabelPosition RHS/*[in]*/); // [133]
   HRESULT STDMETHODCALLTYPE get_Count(long* RHS/*[out,retval]*/); // [118]
   HRESULT STDMETHODCALLTYPE Item(TVariantInParam Index/*[in]*/, 
                                  Graph_2k::DataLabelPtr* RHS/*[out,retval]*/); // [170]
   HRESULT STDMETHODCALLTYPE _NewEnum(LPUNKNOWN* RHS/*[out,retval]*/); // [-4]
   void STDMETHODCALLTYPE _Dummy28(void); // [65564]
};

// *********************************************************************//
// Interface: ILegendEntry
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208E7-0001-0000-C000-000000000046}
// *********************************************************************//
interface ILegendEntry  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/); // [148]
   HRESULT STDMETHODCALLTYPE get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/); // [149]
   HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* RHS/*[out,retval]*/); // [150]
   HRESULT STDMETHODCALLTYPE Delete(TVariant* RHS/*[out,retval]*/); // [117]
   HRESULT STDMETHODCALLTYPE get_Font(Graph_2k::FontPtr* RHS/*[out,retval]*/); // [146]
   HRESULT STDMETHODCALLTYPE get_Index(long* RHS/*[out,retval]*/); // [486]
   HRESULT STDMETHODCALLTYPE get_LegendKey(Graph_2k::LegendKeyPtr* RHS/*[out,retval]*/); // [174]
   HRESULT STDMETHODCALLTYPE get_AutoScaleFont(TVariant* RHS/*[out,retval]*/); // [1525]
   HRESULT STDMETHODCALLTYPE set_AutoScaleFont(TVariantInParam RHS/*[in]*/); // [1525]
   HRESULT STDMETHODCALLTYPE get_Left(double* RHS/*[out,retval]*/); // [127]
   HRESULT STDMETHODCALLTYPE get_Top(double* RHS/*[out,retval]*/); // [126]
   HRESULT STDMETHODCALLTYPE get_Width(double* RHS/*[out,retval]*/); // [122]
   HRESULT STDMETHODCALLTYPE get_Height(double* RHS/*[out,retval]*/); // [123]
};

// *********************************************************************//
// Interface: ILegendEntries
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208E6-0001-0000-C000-000000000046}
// *********************************************************************//
interface ILegendEntries  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/); // [148]
   HRESULT STDMETHODCALLTYPE get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/); // [149]
   HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* RHS/*[out,retval]*/); // [150]
   HRESULT STDMETHODCALLTYPE get_Count(long* RHS/*[out,retval]*/); // [118]
   HRESULT STDMETHODCALLTYPE Item(TVariantInParam Index/*[in]*/, 
                                  Graph_2k::LegendEntryPtr* RHS/*[out,retval]*/); // [170]
   HRESULT STDMETHODCALLTYPE _NewEnum(LPUNKNOWN* RHS/*[out,retval]*/); // [-4]
};

// *********************************************************************//
// Interface: ILegendKey
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208E5-0001-0000-C000-000000000046}
// *********************************************************************//
interface ILegendKey  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/); // [148]
   HRESULT STDMETHODCALLTYPE get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/); // [149]
   HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* RHS/*[out,retval]*/); // [150]
   HRESULT STDMETHODCALLTYPE get_Border(Graph_2k::BorderPtr* RHS/*[out,retval]*/); // [128]
   HRESULT STDMETHODCALLTYPE ClearFormats(TVariant* RHS/*[out,retval]*/); // [112]
   HRESULT STDMETHODCALLTYPE Delete(TVariant* RHS/*[out,retval]*/); // [117]
   HRESULT STDMETHODCALLTYPE get_Interior(Graph_2k::InteriorPtr* RHS/*[out,retval]*/); // [129]
   HRESULT STDMETHODCALLTYPE get_Fill(Graph_2k::ChartFillFormatPtr* RHS/*[out,retval]*/); // [1663]
   HRESULT STDMETHODCALLTYPE get_InvertIfNegative(TOLEBOOL* RHS/*[out,retval]*/); // [132]
   HRESULT STDMETHODCALLTYPE set_InvertIfNegative(TOLEBOOL RHS/*[in]*/); // [132]
   HRESULT STDMETHODCALLTYPE get_MarkerBackgroundColor(long* RHS/*[out,retval]*/); // [73]
   HRESULT STDMETHODCALLTYPE set_MarkerBackgroundColor(long RHS/*[in]*/); // [73]
   HRESULT STDMETHODCALLTYPE get_MarkerBackgroundColorIndex(Graph_2k::XlColorIndex* RHS/*[out,retval]*/); // [74]
   HRESULT STDMETHODCALLTYPE set_MarkerBackgroundColorIndex(Graph_2k::XlColorIndex RHS/*[in]*/); // [74]
   HRESULT STDMETHODCALLTYPE get_MarkerForegroundColor(long* RHS/*[out,retval]*/); // [75]
   HRESULT STDMETHODCALLTYPE set_MarkerForegroundColor(long RHS/*[in]*/); // [75]
   HRESULT STDMETHODCALLTYPE get_MarkerForegroundColorIndex(Graph_2k::XlColorIndex* RHS/*[out,retval]*/); // [76]
   HRESULT STDMETHODCALLTYPE set_MarkerForegroundColorIndex(Graph_2k::XlColorIndex RHS/*[in]*/); // [76]
   HRESULT STDMETHODCALLTYPE get_MarkerSize(long* RHS/*[out,retval]*/); // [231]
   HRESULT STDMETHODCALLTYPE set_MarkerSize(long RHS/*[in]*/); // [231]
   HRESULT STDMETHODCALLTYPE get_MarkerStyle(Graph_2k::XlMarkerStyle* RHS/*[out,retval]*/); // [72]
   HRESULT STDMETHODCALLTYPE set_MarkerStyle(Graph_2k::XlMarkerStyle RHS/*[in]*/); // [72]
   HRESULT STDMETHODCALLTYPE get_PictureType(long* RHS/*[out,retval]*/); // [161]
   HRESULT STDMETHODCALLTYPE set_PictureType(long RHS/*[in]*/); // [161]
   HRESULT STDMETHODCALLTYPE get_PictureUnit(long* RHS/*[out,retval]*/); // [162]
   HRESULT STDMETHODCALLTYPE set_PictureUnit(long RHS/*[in]*/); // [162]
   HRESULT STDMETHODCALLTYPE get_Smooth(TOLEBOOL* RHS/*[out,retval]*/); // [163]
   HRESULT STDMETHODCALLTYPE set_Smooth(TOLEBOOL RHS/*[in]*/); // [163]
   HRESULT STDMETHODCALLTYPE get_Left(double* RHS/*[out,retval]*/); // [127]
   HRESULT STDMETHODCALLTYPE get_Top(double* RHS/*[out,retval]*/); // [126]
   HRESULT STDMETHODCALLTYPE get_Width(double* RHS/*[out,retval]*/); // [122]
   HRESULT STDMETHODCALLTYPE get_Height(double* RHS/*[out,retval]*/); // [123]
   HRESULT STDMETHODCALLTYPE get_Shadow(TOLEBOOL* RHS/*[out,retval]*/); // [103]
   HRESULT STDMETHODCALLTYPE set_Shadow(TOLEBOOL RHS/*[in]*/); // [103]
};

// *********************************************************************//
// Interface: ITrendlines
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208E4-0001-0000-C000-000000000046}
// *********************************************************************//
interface ITrendlines  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/); // [148]
   HRESULT STDMETHODCALLTYPE get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/); // [149]
   HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* RHS/*[out,retval]*/); // [150]
   HRESULT STDMETHODCALLTYPE Add(Graph_2k::XlTrendlineType Type/*[in,def,opt]*/, 
                                 TVariantInParam Order/*[in,opt]*/, 
                                 TVariantInParam Period/*[in,opt]*/, 
                                 TVariantInParam Forward/*[in,opt]*/, 
                                 TVariantInParam Backward/*[in,opt]*/, 
                                 TVariantInParam Intercept/*[in,opt]*/, 
                                 TVariantInParam DisplayEquation/*[in,opt]*/, 
                                 TVariantInParam DisplayRSquared/*[in,opt]*/, 
                                 TVariantInParam Name/*[in,opt]*/, 
                                 Graph_2k::TrendlinePtr* RHS/*[out,retval]*/); // [181]
   HRESULT STDMETHODCALLTYPE get_Count(long* RHS/*[out,retval]*/); // [118]
   HRESULT STDMETHODCALLTYPE Item(TVariantInParam Index/*[in,opt]*/, 
                                  Graph_2k::TrendlinePtr* RHS/*[out,retval]*/); // [170]
   HRESULT STDMETHODCALLTYPE _NewEnum(LPUNKNOWN* RHS/*[out,retval]*/); // [-4]
};

// *********************************************************************//
// Interface: ITrendline
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208E3-0001-0000-C000-000000000046}
// *********************************************************************//
interface ITrendline  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/); // [148]
   HRESULT STDMETHODCALLTYPE get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/); // [149]
   HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* RHS/*[out,retval]*/); // [150]
   HRESULT STDMETHODCALLTYPE get_Backward(long* RHS/*[out,retval]*/); // [185]
   HRESULT STDMETHODCALLTYPE set_Backward(long RHS/*[in]*/); // [185]
   HRESULT STDMETHODCALLTYPE get_Border(Graph_2k::BorderPtr* RHS/*[out,retval]*/); // [128]
   HRESULT STDMETHODCALLTYPE ClearFormats(TVariant* RHS/*[out,retval]*/); // [112]
   HRESULT STDMETHODCALLTYPE get_DataLabel(Graph_2k::DataLabelPtr* RHS/*[out,retval]*/); // [158]
   HRESULT STDMETHODCALLTYPE Delete(TVariant* RHS/*[out,retval]*/); // [117]
   HRESULT STDMETHODCALLTYPE get_DisplayEquation(TOLEBOOL* RHS/*[out,retval]*/); // [190]
   HRESULT STDMETHODCALLTYPE set_DisplayEquation(TOLEBOOL RHS/*[in]*/); // [190]
   HRESULT STDMETHODCALLTYPE get_DisplayRSquared(TOLEBOOL* RHS/*[out,retval]*/); // [189]
   HRESULT STDMETHODCALLTYPE set_DisplayRSquared(TOLEBOOL RHS/*[in]*/); // [189]
   HRESULT STDMETHODCALLTYPE get_Forward(long* RHS/*[out,retval]*/); // [191]
   HRESULT STDMETHODCALLTYPE set_Forward(long RHS/*[in]*/); // [191]
   HRESULT STDMETHODCALLTYPE get_Index(long* RHS/*[out,retval]*/); // [486]
   HRESULT STDMETHODCALLTYPE get_Intercept(double* RHS/*[out,retval]*/); // [186]
   HRESULT STDMETHODCALLTYPE set_Intercept(double RHS/*[in]*/); // [186]
   HRESULT STDMETHODCALLTYPE get_InterceptIsAuto(TOLEBOOL* RHS/*[out,retval]*/); // [187]
   HRESULT STDMETHODCALLTYPE set_InterceptIsAuto(TOLEBOOL RHS/*[in]*/); // [187]
   HRESULT STDMETHODCALLTYPE get_Name(BSTR* RHS/*[out,retval]*/); // [110]
   HRESULT STDMETHODCALLTYPE set_Name(BSTR RHS/*[in]*/); // [110]
   HRESULT STDMETHODCALLTYPE get_NameIsAuto(TOLEBOOL* RHS/*[out,retval]*/); // [188]
   HRESULT STDMETHODCALLTYPE set_NameIsAuto(TOLEBOOL RHS/*[in]*/); // [188]
   HRESULT STDMETHODCALLTYPE get_Order(long* RHS/*[out,retval]*/); // [192]
   HRESULT STDMETHODCALLTYPE set_Order(long RHS/*[in]*/); // [192]
   HRESULT STDMETHODCALLTYPE get_Period(long* RHS/*[out,retval]*/); // [184]
   HRESULT STDMETHODCALLTYPE set_Period(long RHS/*[in]*/); // [184]
   HRESULT STDMETHODCALLTYPE get_Type(Graph_2k::XlTrendlineType* RHS/*[out,retval]*/); // [108]
   HRESULT STDMETHODCALLTYPE set_Type(Graph_2k::XlTrendlineType RHS/*[in]*/); // [108]
};

// *********************************************************************//
// Interface: ICorners
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208E2-0001-0000-C000-000000000046}
// *********************************************************************//
interface ICorners  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/); // [148]
   HRESULT STDMETHODCALLTYPE get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/); // [149]
   HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* RHS/*[out,retval]*/); // [150]
   HRESULT STDMETHODCALLTYPE get_Name(BSTR* RHS/*[out,retval]*/); // [110]
};

// *********************************************************************//
// Interface: ISeriesLines
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208E1-0001-0000-C000-000000000046}
// *********************************************************************//
interface ISeriesLines  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/); // [148]
   HRESULT STDMETHODCALLTYPE get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/); // [149]
   HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* RHS/*[out,retval]*/); // [150]
   HRESULT STDMETHODCALLTYPE get_Name(BSTR* RHS/*[out,retval]*/); // [110]
   HRESULT STDMETHODCALLTYPE get_Border(Graph_2k::BorderPtr* RHS/*[out,retval]*/); // [128]
   HRESULT STDMETHODCALLTYPE Delete(TVariant* RHS/*[out,retval]*/); // [117]
};

// *********************************************************************//
// Interface: IHiLoLines
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208E0-0001-0000-C000-000000000046}
// *********************************************************************//
interface IHiLoLines  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/); // [148]
   HRESULT STDMETHODCALLTYPE get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/); // [149]
   HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* RHS/*[out,retval]*/); // [150]
   HRESULT STDMETHODCALLTYPE get_Name(BSTR* RHS/*[out,retval]*/); // [110]
   HRESULT STDMETHODCALLTYPE get_Border(Graph_2k::BorderPtr* RHS/*[out,retval]*/); // [128]
   HRESULT STDMETHODCALLTYPE Delete(TVariant* RHS/*[out,retval]*/); // [117]
};

// *********************************************************************//
// Interface: IGridlines
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024700-0001-0000-C000-000000000046}
// *********************************************************************//
interface IGridlines  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/); // [148]
   HRESULT STDMETHODCALLTYPE get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/); // [149]
   HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* RHS/*[out,retval]*/); // [150]
   HRESULT STDMETHODCALLTYPE get_Name(BSTR* RHS/*[out,retval]*/); // [110]
   HRESULT STDMETHODCALLTYPE get_Border(Graph_2k::BorderPtr* RHS/*[out,retval]*/); // [128]
   HRESULT STDMETHODCALLTYPE Delete(TVariant* RHS/*[out,retval]*/); // [117]
};

// *********************************************************************//
// Interface: IDropLines
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024701-0001-0000-C000-000000000046}
// *********************************************************************//
interface IDropLines  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/); // [148]
   HRESULT STDMETHODCALLTYPE get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/); // [149]
   HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* RHS/*[out,retval]*/); // [150]
   HRESULT STDMETHODCALLTYPE get_Name(BSTR* RHS/*[out,retval]*/); // [110]
   HRESULT STDMETHODCALLTYPE get_Border(Graph_2k::BorderPtr* RHS/*[out,retval]*/); // [128]
   HRESULT STDMETHODCALLTYPE Delete(TVariant* RHS/*[out,retval]*/); // [117]
};

// *********************************************************************//
// Interface: ILeaderLines
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002441E-0001-0000-C000-000000000046}
// *********************************************************************//
interface ILeaderLines  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/); // [148]
   HRESULT STDMETHODCALLTYPE get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/); // [149]
   HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* RHS/*[out,retval]*/); // [150]
   HRESULT STDMETHODCALLTYPE get_Border(Graph_2k::BorderPtr* RHS/*[out,retval]*/); // [128]
   HRESULT STDMETHODCALLTYPE Delete(void); // [117]
};

// *********************************************************************//
// Interface: IUpBars
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024702-0001-0000-C000-000000000046}
// *********************************************************************//
interface IUpBars  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/); // [148]
   HRESULT STDMETHODCALLTYPE get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/); // [149]
   HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* RHS/*[out,retval]*/); // [150]
   HRESULT STDMETHODCALLTYPE get_Name(BSTR* RHS/*[out,retval]*/); // [110]
   HRESULT STDMETHODCALLTYPE get_Border(Graph_2k::BorderPtr* RHS/*[out,retval]*/); // [128]
   HRESULT STDMETHODCALLTYPE Delete(TVariant* RHS/*[out,retval]*/); // [117]
   HRESULT STDMETHODCALLTYPE get_Interior(Graph_2k::InteriorPtr* RHS/*[out,retval]*/); // [129]
   HRESULT STDMETHODCALLTYPE get_Fill(Graph_2k::ChartFillFormatPtr* RHS/*[out,retval]*/); // [1663]
};

// *********************************************************************//
// Interface: IDownBars
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024703-0001-0000-C000-000000000046}
// *********************************************************************//
interface IDownBars  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/); // [148]
   HRESULT STDMETHODCALLTYPE get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/); // [149]
   HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* RHS/*[out,retval]*/); // [150]
   HRESULT STDMETHODCALLTYPE get_Name(BSTR* RHS/*[out,retval]*/); // [110]
   HRESULT STDMETHODCALLTYPE get_Border(Graph_2k::BorderPtr* RHS/*[out,retval]*/); // [128]
   HRESULT STDMETHODCALLTYPE Delete(TVariant* RHS/*[out,retval]*/); // [117]
   HRESULT STDMETHODCALLTYPE get_Interior(Graph_2k::InteriorPtr* RHS/*[out,retval]*/); // [129]
   HRESULT STDMETHODCALLTYPE get_Fill(Graph_2k::ChartFillFormatPtr* RHS/*[out,retval]*/); // [1663]
};

// *********************************************************************//
// Interface: IFloor
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024704-0001-0000-C000-000000000046}
// *********************************************************************//
interface IFloor  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/); // [148]
   HRESULT STDMETHODCALLTYPE get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/); // [149]
   HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* RHS/*[out,retval]*/); // [150]
   HRESULT STDMETHODCALLTYPE get_Name(BSTR* RHS/*[out,retval]*/); // [110]
   HRESULT STDMETHODCALLTYPE get_Border(Graph_2k::BorderPtr* RHS/*[out,retval]*/); // [128]
   HRESULT STDMETHODCALLTYPE ClearFormats(TVariant* RHS/*[out,retval]*/); // [112]
   HRESULT STDMETHODCALLTYPE get_Interior(Graph_2k::InteriorPtr* RHS/*[out,retval]*/); // [129]
   HRESULT STDMETHODCALLTYPE get_Fill(Graph_2k::ChartFillFormatPtr* RHS/*[out,retval]*/); // [1663]
   HRESULT STDMETHODCALLTYPE get_PictureType(TVariant* RHS/*[out,retval]*/); // [161]
   HRESULT STDMETHODCALLTYPE set_PictureType(TVariantInParam RHS/*[in]*/); // [161]
};

// *********************************************************************//
// Interface: IWalls
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024705-0001-0000-C000-000000000046}
// *********************************************************************//
interface IWalls  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/); // [148]
   HRESULT STDMETHODCALLTYPE get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/); // [149]
   HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* RHS/*[out,retval]*/); // [150]
   HRESULT STDMETHODCALLTYPE get_Name(BSTR* RHS/*[out,retval]*/); // [110]
   HRESULT STDMETHODCALLTYPE get_Border(Graph_2k::BorderPtr* RHS/*[out,retval]*/); // [128]
   HRESULT STDMETHODCALLTYPE ClearFormats(TVariant* RHS/*[out,retval]*/); // [112]
   HRESULT STDMETHODCALLTYPE get_Interior(Graph_2k::InteriorPtr* RHS/*[out,retval]*/); // [129]
   HRESULT STDMETHODCALLTYPE get_Fill(Graph_2k::ChartFillFormatPtr* RHS/*[out,retval]*/); // [1663]
   HRESULT STDMETHODCALLTYPE get_PictureType(TVariant* RHS/*[out,retval]*/); // [161]
   HRESULT STDMETHODCALLTYPE set_PictureType(TVariantInParam RHS/*[in]*/); // [161]
   HRESULT STDMETHODCALLTYPE get_PictureUnit(TVariant* RHS/*[out,retval]*/); // [162]
   HRESULT STDMETHODCALLTYPE set_PictureUnit(TVariantInParam RHS/*[in]*/); // [162]
};

// *********************************************************************//
// Interface: ITickLabels
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024706-0001-0000-C000-000000000046}
// *********************************************************************//
interface ITickLabels  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/); // [148]
   HRESULT STDMETHODCALLTYPE get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/); // [149]
   HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* RHS/*[out,retval]*/); // [150]
   HRESULT STDMETHODCALLTYPE Delete(TVariant* RHS/*[out,retval]*/); // [117]
   HRESULT STDMETHODCALLTYPE get_Font(Graph_2k::FontPtr* RHS/*[out,retval]*/); // [146]
   HRESULT STDMETHODCALLTYPE get_Name(BSTR* RHS/*[out,retval]*/); // [110]
   HRESULT STDMETHODCALLTYPE get_NumberFormat(BSTR* RHS/*[out,retval]*/); // [193]
   HRESULT STDMETHODCALLTYPE set_NumberFormat(BSTR RHS/*[in]*/); // [193]
   HRESULT STDMETHODCALLTYPE get_NumberFormatLocal(TVariant* RHS/*[out,retval]*/); // [1097]
   HRESULT STDMETHODCALLTYPE set_NumberFormatLocal(TVariantInParam RHS/*[in]*/); // [1097]
   HRESULT STDMETHODCALLTYPE get_Orientation(Graph_2k::XlTickLabelOrientation* RHS/*[out,retval]*/); // [134]
   HRESULT STDMETHODCALLTYPE set_Orientation(Graph_2k::XlTickLabelOrientation RHS/*[in]*/); // [134]
   HRESULT STDMETHODCALLTYPE get_ReadingOrder(long* RHS/*[out,retval]*/); // [975]
   HRESULT STDMETHODCALLTYPE set_ReadingOrder(long RHS/*[in]*/); // [975]
   HRESULT STDMETHODCALLTYPE get_AutoScaleFont(TVariant* RHS/*[out,retval]*/); // [1525]
   HRESULT STDMETHODCALLTYPE set_AutoScaleFont(TVariantInParam RHS/*[in]*/); // [1525]
   HRESULT STDMETHODCALLTYPE get_Offset(long* RHS/*[out,retval]*/); // [254]
   HRESULT STDMETHODCALLTYPE set_Offset(long RHS/*[in]*/); // [254]
};

// *********************************************************************//
// Interface: IPlotArea
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024707-0001-0000-C000-000000000046}
// *********************************************************************//
interface IPlotArea  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/); // [148]
   HRESULT STDMETHODCALLTYPE get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/); // [149]
   HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* RHS/*[out,retval]*/); // [150]
   HRESULT STDMETHODCALLTYPE get_Name(BSTR* RHS/*[out,retval]*/); // [110]
   HRESULT STDMETHODCALLTYPE get_Border(Graph_2k::BorderPtr* RHS/*[out,retval]*/); // [128]
   HRESULT STDMETHODCALLTYPE ClearFormats(TVariant* RHS/*[out,retval]*/); // [112]
   HRESULT STDMETHODCALLTYPE get_Height(double* RHS/*[out,retval]*/); // [123]
   HRESULT STDMETHODCALLTYPE set_Height(double RHS/*[in]*/); // [123]
   HRESULT STDMETHODCALLTYPE get_Interior(Graph_2k::InteriorPtr* RHS/*[out,retval]*/); // [129]
   HRESULT STDMETHODCALLTYPE get_Fill(Graph_2k::ChartFillFormatPtr* RHS/*[out,retval]*/); // [1663]
   HRESULT STDMETHODCALLTYPE get_Left(double* RHS/*[out,retval]*/); // [127]
   HRESULT STDMETHODCALLTYPE set_Left(double RHS/*[in]*/); // [127]
   HRESULT STDMETHODCALLTYPE get_Top(double* RHS/*[out,retval]*/); // [126]
   HRESULT STDMETHODCALLTYPE set_Top(double RHS/*[in]*/); // [126]
   HRESULT STDMETHODCALLTYPE get_Width(double* RHS/*[out,retval]*/); // [122]
   HRESULT STDMETHODCALLTYPE set_Width(double RHS/*[in]*/); // [122]
   HRESULT STDMETHODCALLTYPE get_InsideLeft(double* RHS/*[out,retval]*/); // [1667]
   HRESULT STDMETHODCALLTYPE get_InsideTop(double* RHS/*[out,retval]*/); // [1668]
   HRESULT STDMETHODCALLTYPE get_InsideWidth(double* RHS/*[out,retval]*/); // [1669]
   HRESULT STDMETHODCALLTYPE get_InsideHeight(double* RHS/*[out,retval]*/); // [1670]
};

// *********************************************************************//
// Interface: IChartArea
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024708-0001-0000-C000-000000000046}
// *********************************************************************//
interface IChartArea  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/); // [148]
   HRESULT STDMETHODCALLTYPE get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/); // [149]
   HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* RHS/*[out,retval]*/); // [150]
   HRESULT STDMETHODCALLTYPE get_Name(BSTR* RHS/*[out,retval]*/); // [110]
   HRESULT STDMETHODCALLTYPE get_Border(Graph_2k::BorderPtr* RHS/*[out,retval]*/); // [128]
   HRESULT STDMETHODCALLTYPE Clear(TVariant* RHS/*[out,retval]*/); // [111]
   HRESULT STDMETHODCALLTYPE ClearContents(TVariant* RHS/*[out,retval]*/); // [113]
   HRESULT STDMETHODCALLTYPE Copy(TVariant* RHS/*[out,retval]*/); // [551]
   HRESULT STDMETHODCALLTYPE get_Font(Graph_2k::FontPtr* RHS/*[out,retval]*/); // [146]
   HRESULT STDMETHODCALLTYPE get_Shadow(TOLEBOOL* RHS/*[out,retval]*/); // [103]
   HRESULT STDMETHODCALLTYPE set_Shadow(TOLEBOOL RHS/*[in]*/); // [103]
   HRESULT STDMETHODCALLTYPE ClearFormats(TVariant* RHS/*[out,retval]*/); // [112]
   HRESULT STDMETHODCALLTYPE get_Height(double* RHS/*[out,retval]*/); // [123]
   HRESULT STDMETHODCALLTYPE set_Height(double RHS/*[in]*/); // [123]
   HRESULT STDMETHODCALLTYPE get_Interior(Graph_2k::InteriorPtr* RHS/*[out,retval]*/); // [129]
   HRESULT STDMETHODCALLTYPE get_Fill(Graph_2k::ChartFillFormatPtr* RHS/*[out,retval]*/); // [1663]
   HRESULT STDMETHODCALLTYPE get_Left(double* RHS/*[out,retval]*/); // [127]
   HRESULT STDMETHODCALLTYPE set_Left(double RHS/*[in]*/); // [127]
   HRESULT STDMETHODCALLTYPE get_Top(double* RHS/*[out,retval]*/); // [126]
   HRESULT STDMETHODCALLTYPE set_Top(double RHS/*[in]*/); // [126]
   HRESULT STDMETHODCALLTYPE get_Width(double* RHS/*[out,retval]*/); // [122]
   HRESULT STDMETHODCALLTYPE set_Width(double RHS/*[in]*/); // [122]
   HRESULT STDMETHODCALLTYPE get_AutoScaleFont(TVariant* RHS/*[out,retval]*/); // [1525]
   HRESULT STDMETHODCALLTYPE set_AutoScaleFont(TVariantInParam RHS/*[in]*/); // [1525]
};

// *********************************************************************//
// Interface: ILegend
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024709-0001-0000-C000-000000000046}
// *********************************************************************//
interface ILegend  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/); // [148]
   HRESULT STDMETHODCALLTYPE get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/); // [149]
   HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* RHS/*[out,retval]*/); // [150]
   HRESULT STDMETHODCALLTYPE get_Name(BSTR* RHS/*[out,retval]*/); // [110]
   HRESULT STDMETHODCALLTYPE get_Border(Graph_2k::BorderPtr* RHS/*[out,retval]*/); // [128]
   HRESULT STDMETHODCALLTYPE Delete(TVariant* RHS/*[out,retval]*/); // [117]
   HRESULT STDMETHODCALLTYPE get_Font(Graph_2k::FontPtr* RHS/*[out,retval]*/); // [146]
   HRESULT STDMETHODCALLTYPE LegendEntries(TVariantInParam Index/*[in,opt]*/, 
                                           LPDISPATCH* RHS/*[out,retval]*/); // [173]
   HRESULT STDMETHODCALLTYPE get_Position(Graph_2k::XlLegendPosition* RHS/*[out,retval]*/); // [133]
   HRESULT STDMETHODCALLTYPE set_Position(Graph_2k::XlLegendPosition RHS/*[in]*/); // [133]
   HRESULT STDMETHODCALLTYPE get_Shadow(TOLEBOOL* RHS/*[out,retval]*/); // [103]
   HRESULT STDMETHODCALLTYPE set_Shadow(TOLEBOOL RHS/*[in]*/); // [103]
   HRESULT STDMETHODCALLTYPE Clear(TVariant* RHS/*[out,retval]*/); // [111]
   HRESULT STDMETHODCALLTYPE get_Height(double* RHS/*[out,retval]*/); // [123]
   HRESULT STDMETHODCALLTYPE set_Height(double RHS/*[in]*/); // [123]
   HRESULT STDMETHODCALLTYPE get_Interior(Graph_2k::InteriorPtr* RHS/*[out,retval]*/); // [129]
   HRESULT STDMETHODCALLTYPE get_Fill(Graph_2k::ChartFillFormatPtr* RHS/*[out,retval]*/); // [1663]
   HRESULT STDMETHODCALLTYPE get_Left(double* RHS/*[out,retval]*/); // [127]
   HRESULT STDMETHODCALLTYPE set_Left(double RHS/*[in]*/); // [127]
   HRESULT STDMETHODCALLTYPE get_Top(double* RHS/*[out,retval]*/); // [126]
   HRESULT STDMETHODCALLTYPE set_Top(double RHS/*[in]*/); // [126]
   HRESULT STDMETHODCALLTYPE get_Width(double* RHS/*[out,retval]*/); // [122]
   HRESULT STDMETHODCALLTYPE set_Width(double RHS/*[in]*/); // [122]
   HRESULT STDMETHODCALLTYPE get_AutoScaleFont(TVariant* RHS/*[out,retval]*/); // [1525]
   HRESULT STDMETHODCALLTYPE set_AutoScaleFont(TVariantInParam RHS/*[in]*/); // [1525]
};

// *********************************************************************//
// Interface: IErrorBars
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002470A-0001-0000-C000-000000000046}
// *********************************************************************//
interface IErrorBars  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/); // [148]
   HRESULT STDMETHODCALLTYPE get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/); // [149]
   HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* RHS/*[out,retval]*/); // [150]
   HRESULT STDMETHODCALLTYPE get_Name(BSTR* RHS/*[out,retval]*/); // [110]
   HRESULT STDMETHODCALLTYPE get_Border(Graph_2k::BorderPtr* RHS/*[out,retval]*/); // [128]
   HRESULT STDMETHODCALLTYPE Delete(TVariant* RHS/*[out,retval]*/); // [117]
   HRESULT STDMETHODCALLTYPE ClearFormats(TVariant* RHS/*[out,retval]*/); // [112]
   HRESULT STDMETHODCALLTYPE get_EndStyle(Graph_2k::XlEndStyleCap* RHS/*[out,retval]*/); // [1124]
   HRESULT STDMETHODCALLTYPE set_EndStyle(Graph_2k::XlEndStyleCap RHS/*[in]*/); // [1124]
};

// *********************************************************************//
// Interface: IDataTable
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208FA-0001-0000-C000-000000000046}
// *********************************************************************//
interface IDataTable  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/); // [148]
   HRESULT STDMETHODCALLTYPE get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/); // [149]
   HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* RHS/*[out,retval]*/); // [150]
   HRESULT STDMETHODCALLTYPE get_ShowLegendKey(TOLEBOOL* RHS/*[out,retval]*/); // [171]
   HRESULT STDMETHODCALLTYPE set_ShowLegendKey(TOLEBOOL RHS/*[in]*/); // [171]
   HRESULT STDMETHODCALLTYPE get_HasBorderHorizontal(TOLEBOOL* RHS/*[out,retval]*/); // [1671]
   HRESULT STDMETHODCALLTYPE set_HasBorderHorizontal(TOLEBOOL RHS/*[in]*/); // [1671]
   HRESULT STDMETHODCALLTYPE get_HasBorderVertical(TOLEBOOL* RHS/*[out,retval]*/); // [1672]
   HRESULT STDMETHODCALLTYPE set_HasBorderVertical(TOLEBOOL RHS/*[in]*/); // [1672]
   HRESULT STDMETHODCALLTYPE get_HasBorderOutline(TOLEBOOL* RHS/*[out,retval]*/); // [1673]
   HRESULT STDMETHODCALLTYPE set_HasBorderOutline(TOLEBOOL RHS/*[in]*/); // [1673]
   HRESULT STDMETHODCALLTYPE get_Border(Graph_2k::BorderPtr* RHS/*[out,retval]*/); // [128]
   HRESULT STDMETHODCALLTYPE get_Font(Graph_2k::FontPtr* RHS/*[out,retval]*/); // [146]
   HRESULT STDMETHODCALLTYPE Delete(void); // [117]
   HRESULT STDMETHODCALLTYPE get_AutoScaleFont(TVariant* RHS/*[out,retval]*/); // [1525]
   HRESULT STDMETHODCALLTYPE set_AutoScaleFont(TVariantInParam RHS/*[in]*/); // [1525]
};

// *********************************************************************//
// Interface: IDisplayUnitLabel
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208D3-0001-0000-C000-000000000046}
// *********************************************************************//
interface IDisplayUnitLabel  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/); // [148]
   HRESULT STDMETHODCALLTYPE get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/); // [149]
   HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* RHS/*[out,retval]*/); // [150]
   HRESULT STDMETHODCALLTYPE get_Name(BSTR* RHS/*[out,retval]*/); // [110]
   HRESULT STDMETHODCALLTYPE get_Border(Graph_2k::BorderPtr* RHS/*[out,retval]*/); // [128]
   HRESULT STDMETHODCALLTYPE Delete(TVariant* RHS/*[out,retval]*/); // [117]
   HRESULT STDMETHODCALLTYPE get_Interior(Graph_2k::InteriorPtr* RHS/*[out,retval]*/); // [129]
   HRESULT STDMETHODCALLTYPE get_Fill(Graph_2k::ChartFillFormatPtr* RHS/*[out,retval]*/); // [1663]
   HRESULT STDMETHODCALLTYPE get_Caption(BSTR* RHS/*[out,retval]*/); // [139]
   HRESULT STDMETHODCALLTYPE set_Caption(BSTR RHS/*[in]*/); // [139]
   HRESULT STDMETHODCALLTYPE get_Font(Graph_2k::FontPtr* RHS/*[out,retval]*/); // [146]
   HRESULT STDMETHODCALLTYPE get_HorizontalAlignment(TVariant* RHS/*[out,retval]*/); // [136]
   HRESULT STDMETHODCALLTYPE set_HorizontalAlignment(TVariantInParam RHS/*[in]*/); // [136]
   HRESULT STDMETHODCALLTYPE get_Left(double* RHS/*[out,retval]*/); // [127]
   HRESULT STDMETHODCALLTYPE set_Left(double RHS/*[in]*/); // [127]
   HRESULT STDMETHODCALLTYPE get_Orientation(TVariant* RHS/*[out,retval]*/); // [134]
   HRESULT STDMETHODCALLTYPE set_Orientation(TVariantInParam RHS/*[in]*/); // [134]
   HRESULT STDMETHODCALLTYPE get_Shadow(TOLEBOOL* RHS/*[out,retval]*/); // [103]
   HRESULT STDMETHODCALLTYPE set_Shadow(TOLEBOOL RHS/*[in]*/); // [103]
   HRESULT STDMETHODCALLTYPE get_Text(BSTR* RHS/*[out,retval]*/); // [138]
   HRESULT STDMETHODCALLTYPE set_Text(BSTR RHS/*[in]*/); // [138]
   HRESULT STDMETHODCALLTYPE get_Top(double* RHS/*[out,retval]*/); // [126]
   HRESULT STDMETHODCALLTYPE set_Top(double RHS/*[in]*/); // [126]
   HRESULT STDMETHODCALLTYPE get_VerticalAlignment(TVariant* RHS/*[out,retval]*/); // [137]
   HRESULT STDMETHODCALLTYPE set_VerticalAlignment(TVariantInParam RHS/*[in]*/); // [137]
   HRESULT STDMETHODCALLTYPE get_ReadingOrder(long* RHS/*[out,retval]*/); // [975]
   HRESULT STDMETHODCALLTYPE set_ReadingOrder(long RHS/*[in]*/); // [975]
   HRESULT STDMETHODCALLTYPE get_AutoScaleFont(TVariant* RHS/*[out,retval]*/); // [1525]
   HRESULT STDMETHODCALLTYPE set_AutoScaleFont(TVariantInParam RHS/*[in]*/); // [1525]
};

// *********************************************************************//
// Interface: Font
// Flags:     (4096) Dispatchable
// GUID:      {000208F3-0000-0000-C000-000000000046}
// *********************************************************************//
interface Font : public TDispWrapper<IDispatch>
{
  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application()
  {
    _TDispID _dispid(/* Application */ DISPID(148));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator()
  {
    _TDispID _dispid(/* Creator */ DISPID(149));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent()
  {
    _TDispID _dispid(/* Parent */ DISPID(150));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Background()
  {
    _TDispID _dispid(/* Background */ DISPID(180));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Background(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* Background */ DISPID(180));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Bold()
  {
    _TDispID _dispid(/* Bold */ DISPID(96));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Bold(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* Bold */ DISPID(96));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Color()
  {
    _TDispID _dispid(/* Color */ DISPID(99));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Color(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* Color */ DISPID(99));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_ColorIndex()
  {
    _TDispID _dispid(/* ColorIndex */ DISPID(97));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_ColorIndex(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* ColorIndex */ DISPID(97));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_FontStyle()
  {
    _TDispID _dispid(/* FontStyle */ DISPID(177));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_FontStyle(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* FontStyle */ DISPID(177));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Italic()
  {
    _TDispID _dispid(/* Italic */ DISPID(101));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Italic(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* Italic */ DISPID(101));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Name()
  {
    _TDispID _dispid(/* Name */ DISPID(110));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Name(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* Name */ DISPID(110));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_OutlineFont()
  {
    _TDispID _dispid(/* OutlineFont */ DISPID(221));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_OutlineFont(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* OutlineFont */ DISPID(221));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Shadow()
  {
    _TDispID _dispid(/* Shadow */ DISPID(103));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Shadow(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* Shadow */ DISPID(103));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Size()
  {
    _TDispID _dispid(/* Size */ DISPID(104));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Size(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* Size */ DISPID(104));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Strikethrough()
  {
    _TDispID _dispid(/* Strikethrough */ DISPID(105));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Strikethrough(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* Strikethrough */ DISPID(105));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Subscript()
  {
    _TDispID _dispid(/* Subscript */ DISPID(179));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Subscript(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* Subscript */ DISPID(179));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Superscript()
  {
    _TDispID _dispid(/* Superscript */ DISPID(178));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Superscript(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* Superscript */ DISPID(178));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Underline()
  {
    _TDispID _dispid(/* Underline */ DISPID(106));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Underline(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* Underline */ DISPID(106));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }


  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
// *********************************************************************//
// Interface: _Global
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208FC-0000-0000-C000-000000000046}
// *********************************************************************//
interface _Global : public TDispWrapper<IDispatch>
{
  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application()
  {
    _TDispID _dispid(/* Application */ DISPID(148));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator()
  {
    _TDispID _dispid(/* Creator */ DISPID(149));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Parent()
  {
    _TDispID _dispid(/* Parent */ DISPID(150));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Office_2k::CommandBarsPtr /*[VT_USERDEFINED:1]*/ __fastcall get_CommandBars()
  {
    _TDispID _dispid(/* CommandBars */ DISPID(1439));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Office_2k::CommandBars* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }


  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   Graph_2k::GraphApplicationPtr Parent = {read = get_Parent};
  __property   Office_2k::CommandBarsPtr CommandBars = {read = get_CommandBars};
};
// *********************************************************************//
// Interface: Chart
// Flags:     (4096) Dispatchable
// GUID:      {000208FB-0000-0000-C000-000000000046}
// *********************************************************************//
interface Chart : public TDispWrapper<IDispatch>
{
  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application()
  {
    _TDispID _dispid(/* Application */ DISPID(148));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator()
  {
    _TDispID _dispid(/* Creator */ DISPID(149));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent()
  {
    _TDispID _dispid(/* Parent */ DISPID(150));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall Activate()
  {
    _TDispID _dispid(/* Activate */ DISPID(304));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall ApplyDataLabels(TVariantInParam Type/*[in,opt]*/= TNoParam(), 
                                                  TVariantInParam LegendKey/*[in,opt]*/= TNoParam()
                                                  , TVariantInParam AutoText/*[in,opt]*/= TNoParam()
                                                  , 
                                                  TVariantInParam HasLeaderLines/*[in,opt]*/= TNoParam())
  {
    _TDispID _dispid(/* ApplyDataLabels */ DISPID(151));
    TAutoArgs<4> _args;
    _args[1] = Type /*[VT_VARIANT:0]*/;
    _args[2] = LegendKey /*[VT_VARIANT:0]*/;
    _args[3] = AutoText /*[VT_VARIANT:0]*/;
    _args[4] = HasLeaderLines /*[VT_VARIANT:0]*/;
    OleProcedure(_dispid, _args);
  }

  Graph_2k::ChartGroupPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Area3DGroup()
  {
    _TDispID _dispid(/* Area3DGroup */ DISPID(17));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::ChartGroup* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall AreaGroups(TVariantInParam Index/*[in,opt]*/= TNoParam())
  {
    _TDispID _dispid(/* AreaGroups */ DISPID(9));
    TAutoArgs<1> _args;
    _args[1] = Index /*[VT_VARIANT:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall AutoFormat(long Gallery/*[in]*/, 
                                             TVariantInParam Format/*[in,opt]*/= TNoParam())
  {
    _TDispID _dispid(/* AutoFormat */ DISPID(114));
    TAutoArgs<2> _args;
    _args[1] = Gallery /*[VT_I4:0]*/;
    _args[2] = Format /*[VT_VARIANT:0]*/;
    OleProcedure(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_AutoScaling()
  {
    _TDispID _dispid(/* AutoScaling */ DISPID(107));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_AutoScaling(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* AutoScaling */ DISPID(107));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall Axes(TVariantInParam Type/*[in,opt]*/= TNoParam(), 
                                                 TVariantInParam AxisGroup/*[in,opt]*/= TNoParam())
  {
    _TDispID _dispid(/* Axes */ DISPID(23));
    TAutoArgs<2> _args;
    _args[1] = Type /*[VT_VARIANT:0]*/;
    _args[2] = AxisGroup /*[VT_VARIANT:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::ChartGroupPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Bar3DGroup()
  {
    _TDispID _dispid(/* Bar3DGroup */ DISPID(18));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::ChartGroup* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall BarGroups(TVariantInParam Index/*[in,opt]*/= TNoParam())
  {
    _TDispID _dispid(/* BarGroups */ DISPID(10));
    TAutoArgs<1> _args;
    _args[1] = Index /*[VT_VARIANT:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::ChartAreaPtr /*[VT_USERDEFINED:1]*/ __fastcall get_ChartArea()
  {
    _TDispID _dispid(/* ChartArea */ DISPID(80));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::ChartArea* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall ChartGroups(TVariantInParam Index/*[in,opt]*/= TNoParam())
  {
    _TDispID _dispid(/* ChartGroups */ DISPID(8));
    TAutoArgs<1> _args;
    _args[1] = Index /*[VT_VARIANT:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::ChartTitlePtr /*[VT_USERDEFINED:1]*/ __fastcall get_ChartTitle()
  {
    _TDispID _dispid(/* ChartTitle */ DISPID(81));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::ChartTitle* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::ChartGroupPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Column3DGroup()
  {
    _TDispID _dispid(/* Column3DGroup */ DISPID(19));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::ChartGroup* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall ColumnGroups(TVariantInParam Index/*[in,opt]*/= TNoParam())
  {
    _TDispID _dispid(/* ColumnGroups */ DISPID(11));
    TAutoArgs<1> _args;
    _args[1] = Index /*[VT_VARIANT:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  Office_2k::CommandBarsPtr /*[VT_USERDEFINED:1]*/ __fastcall get_CommandBars()
  {
    _TDispID _dispid(/* CommandBars */ DISPID(1439));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Office_2k::CommandBars* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::CornersPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Corners()
  {
    _TDispID _dispid(/* Corners */ DISPID(79));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Corners* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::DataTablePtr /*[VT_USERDEFINED:1]*/ __fastcall get_DataTable()
  {
    _TDispID _dispid(/* DataTable */ DISPID(1395));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::DataTable* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall get_DepthPercent()
  {
    _TDispID _dispid(/* DepthPercent */ DISPID(48));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_DepthPercent(long Param1/*[in]*/)
  {
    _TDispID _dispid(/* DepthPercent */ DISPID(48));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_I4:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Deselect()
  {
    _TDispID _dispid(/* Deselect */ DISPID(1120));
    OleProcedure(_dispid);
  }

  Graph_2k::XlDisplayBlanksAs /*[VT_USERDEFINED:0]*/ __fastcall get_DisplayBlanksAs()
  {
    _TDispID _dispid(/* DisplayBlanksAs */ DISPID(93));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlDisplayBlanksAs /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_DisplayBlanksAs(Graph_2k::XlDisplayBlanksAs Param1/*[in]*/)
  {
    _TDispID _dispid(/* DisplayBlanksAs */ DISPID(93));
    TAutoArgs<1> _args;
    _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall DoughnutGroups(TVariantInParam Index/*[in,opt]*/= TNoParam())
  {
    _TDispID _dispid(/* DoughnutGroups */ DISPID(14));
    TAutoArgs<1> _args;
    _args[1] = Index /*[VT_VARIANT:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall get_Elevation()
  {
    _TDispID _dispid(/* Elevation */ DISPID(49));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Elevation(long Param1/*[in]*/)
  {
    _TDispID _dispid(/* Elevation */ DISPID(49));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_I4:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::FloorPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Floor()
  {
    _TDispID _dispid(/* Floor */ DISPID(83));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Floor* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall get_GapDepth()
  {
    _TDispID _dispid(/* GapDepth */ DISPID(50));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_GapDepth(long Param1/*[in]*/)
  {
    _TDispID _dispid(/* GapDepth */ DISPID(50));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_I4:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_HasAxis(TVariantInParam Index1/*[in,opt]*/= TNoParam()
                                                     , 
                                                     TVariantInParam Index2/*[in,opt]*/= TNoParam())
  {
    _TDispID _dispid(/* HasAxis */ DISPID(52));
    TAutoArgs<2> _args;
    _args[1] = Index1 /*[VT_VARIANT:0]*/;
    _args[2] = Index2 /*[VT_VARIANT:0]*/;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_HasAxis(TVariantInParam Index1/*[in,opt]*/, 
                                              TVariantInParam Index2/*[in,opt]*/, 
                                              TVariantInParam Param3/*[in]*/)
  {
    _TDispID _dispid(/* HasAxis */ DISPID(52));
    TAutoArgs<3> _args;
    _args[1] = Index1 /*[VT_VARIANT:0]*/;
    _args[2] = Index2 /*[VT_VARIANT:0]*/;
    _args[3] = Param3 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_HasDataTable()
  {
    _TDispID _dispid(/* HasDataTable */ DISPID(1396));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_HasDataTable(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* HasDataTable */ DISPID(1396));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_HasLegend()
  {
    _TDispID _dispid(/* HasLegend */ DISPID(53));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_HasLegend(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* HasLegend */ DISPID(53));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_HasTitle()
  {
    _TDispID _dispid(/* HasTitle */ DISPID(54));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_HasTitle(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* HasTitle */ DISPID(54));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Height()
  {
    _TDispID _dispid(/* Height */ DISPID(123));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Height(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* Height */ DISPID(123));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_HeightPercent()
  {
    _TDispID _dispid(/* HeightPercent */ DISPID(55));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_HeightPercent(long Param1/*[in]*/)
  {
    _TDispID _dispid(/* HeightPercent */ DISPID(55));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_I4:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Left()
  {
    _TDispID _dispid(/* Left */ DISPID(127));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Left(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* Left */ DISPID(127));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::LegendPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Legend()
  {
    _TDispID _dispid(/* Legend */ DISPID(84));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Legend* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::ChartGroupPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Line3DGroup()
  {
    _TDispID _dispid(/* Line3DGroup */ DISPID(20));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::ChartGroup* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall LineGroups(TVariantInParam Index/*[in,opt]*/= TNoParam())
  {
    _TDispID _dispid(/* LineGroups */ DISPID(12));
    TAutoArgs<1> _args;
    _args[1] = Index /*[VT_VARIANT:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Name()
  {
    _TDispID _dispid(/* Name */ DISPID(110));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall OmitBackground()
  {
    _TDispID _dispid(/* OmitBackground */ DISPID(1098));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall get_Perspective()
  {
    _TDispID _dispid(/* Perspective */ DISPID(57));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Perspective(long Param1/*[in]*/)
  {
    _TDispID _dispid(/* Perspective */ DISPID(57));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_I4:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::ChartGroupPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Pie3DGroup()
  {
    _TDispID _dispid(/* Pie3DGroup */ DISPID(21));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::ChartGroup* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall PieGroups(TVariantInParam Index/*[in,opt]*/= TNoParam())
  {
    _TDispID _dispid(/* PieGroups */ DISPID(13));
    TAutoArgs<1> _args;
    _args[1] = Index /*[VT_VARIANT:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::PlotAreaPtr /*[VT_USERDEFINED:1]*/ __fastcall get_PlotArea()
  {
    _TDispID _dispid(/* PlotArea */ DISPID(85));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::PlotArea* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall _Dummy43()
  {
    _TDispID _dispid(/* _Dummy43 */ DISPID(65579));
    OleProcedure(_dispid);
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall RadarGroups(TVariantInParam Index/*[in,opt]*/= TNoParam())
  {
    _TDispID _dispid(/* RadarGroups */ DISPID(15));
    TAutoArgs<1> _args;
    _args[1] = Index /*[VT_VARIANT:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_RightAngleAxes()
  {
    _TDispID _dispid(/* RightAngleAxes */ DISPID(58));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_RightAngleAxes(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* RightAngleAxes */ DISPID(58));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Rotation()
  {
    _TDispID _dispid(/* Rotation */ DISPID(59));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Rotation(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* Rotation */ DISPID(59));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall SeriesCollection(TVariantInParam Index/*[in,opt]*/= TNoParam())
  {
    _TDispID _dispid(/* SeriesCollection */ DISPID(68));
    TAutoArgs<1> _args;
    _args[1] = Index /*[VT_VARIANT:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall SetEchoOn(TVariantInParam EchoOn/*[in,opt]*/= TNoParam())
  {
    _TDispID _dispid(/* SetEchoOn */ DISPID(1133));
    TAutoArgs<1> _args;
    _args[1] = EchoOn /*[VT_VARIANT:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_SubType()
  {
    _TDispID _dispid(/* SubType */ DISPID(109));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_SubType(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* SubType */ DISPID(109));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::ChartGroupPtr /*[VT_USERDEFINED:1]*/ __fastcall get_SurfaceGroup()
  {
    _TDispID _dispid(/* SurfaceGroup */ DISPID(22));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::ChartGroup* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Top()
  {
    _TDispID _dispid(/* Top */ DISPID(126));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Top(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* Top */ DISPID(126));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_Type()
  {
    _TDispID _dispid(/* Type */ DISPID(108));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Type(long Param1/*[in]*/)
  {
    _TDispID _dispid(/* Type */ DISPID(108));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_I4:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::XlChartType /*[VT_USERDEFINED:0]*/ __fastcall get_ChartType()
  {
    _TDispID _dispid(/* ChartType */ DISPID(1400));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlChartType /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_ChartType(Graph_2k::XlChartType Param1/*[in]*/)
  {
    _TDispID _dispid(/* ChartType */ DISPID(1400));
    TAutoArgs<1> _args;
    _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall ApplyCustomType(Graph_2k::XlChartType ChartType/*[in]*/, 
                                                  TVariantInParam TypeName/*[in,opt]*/= TNoParam())
  {
    _TDispID _dispid(/* ApplyCustomType */ DISPID(1401));
    TAutoArgs<2> _args;
    _args[1] = (int)ChartType /*[VT_USERDEFINED:0]*/;
    _args[2] = TypeName /*[VT_VARIANT:0]*/;
    OleProcedure(_dispid, _args);
  }

  Graph_2k::WallsPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Walls()
  {
    _TDispID _dispid(/* Walls */ DISPID(86));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Walls* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_WallsAndGridlines2D()
  {
    _TDispID _dispid(/* WallsAndGridlines2D */ DISPID(210));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_WallsAndGridlines2D(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* WallsAndGridlines2D */ DISPID(210));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Width()
  {
    _TDispID _dispid(/* Width */ DISPID(122));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Width(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* Width */ DISPID(122));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall XYGroups(TVariantInParam Index/*[in,opt]*/= TNoParam())
  {
    _TDispID _dispid(/* XYGroups */ DISPID(16));
    TAutoArgs<1> _args;
    _args[1] = Index /*[VT_VARIANT:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::XlBarShape /*[VT_USERDEFINED:0]*/ __fastcall get_BarShape()
  {
    _TDispID _dispid(/* BarShape */ DISPID(1403));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlBarShape /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_BarShape(Graph_2k::XlBarShape Param1/*[in]*/)
  {
    _TDispID _dispid(/* BarShape */ DISPID(1403));
    TAutoArgs<1> _args;
    _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall Export(BSTR FileName/*[in]*/, 
                                             TVariantInParam FilterName/*[in,opt]*/= TNoParam(), 
                                             TVariantInParam Interactive/*[in,opt]*/= TNoParam())
  {
    _TDispID _dispid(/* Export */ DISPID(1414));
    TAutoArgs<3> _args;
    _args[1] = FileName /*[VT_BSTR:0]*/;
    _args[2] = FilterName /*[VT_VARIANT:0]*/;
    _args[3] = Interactive /*[VT_VARIANT:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall Refresh()
  {
    _TDispID _dispid(/* Refresh */ DISPID(1417));
    OleProcedure(_dispid);
  }

  long /*[VT_I4:0]*/ __fastcall get_PlotOnX()
  {
    _TDispID _dispid(/* PlotOnX */ DISPID(1775));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_PlotOnX(long Param1/*[in]*/)
  {
    _TDispID _dispid(/* PlotOnX */ DISPID(1775));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_I4:0]*/;
    OlePropertyPut(_dispid, _args);
  }


  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Graph_2k::ChartGroupPtr Area3DGroup = {read = get_Area3DGroup};
  __property   TOLEBOOL        AutoScaling = {read = get_AutoScaling, write = set_AutoScaling};
  __property   Graph_2k::ChartGroupPtr Bar3DGroup = {read = get_Bar3DGroup};
  __property   Graph_2k::ChartAreaPtr ChartArea = {read = get_ChartArea};
  __property   Graph_2k::ChartTitlePtr ChartTitle = {read = get_ChartTitle};
  __property   Graph_2k::ChartGroupPtr Column3DGroup = {read = get_Column3DGroup};
  __property   Office_2k::CommandBarsPtr CommandBars = {read = get_CommandBars};
  __property   Graph_2k::CornersPtr Corners = {read = get_Corners};
  __property   Graph_2k::DataTablePtr DataTable = {read = get_DataTable};
  __property   long            DepthPercent = {read = get_DepthPercent, write = set_DepthPercent};
  __property   Graph_2k::XlDisplayBlanksAs DisplayBlanksAs = {read = get_DisplayBlanksAs, write = set_DisplayBlanksAs};
  __property   long            Elevation = {read = get_Elevation, write = set_Elevation};
  __property   Graph_2k::FloorPtr Floor = {read = get_Floor};
  __property   long            GapDepth = {read = get_GapDepth, write = set_GapDepth};
  __property   TOLEBOOL        HasDataTable = {read = get_HasDataTable, write = set_HasDataTable};
  __property   TOLEBOOL        HasLegend = {read = get_HasLegend, write = set_HasLegend};
  __property   TOLEBOOL        HasTitle = {read = get_HasTitle, write = set_HasTitle};
  __property   long            HeightPercent = {read = get_HeightPercent, write = set_HeightPercent};
  __property   Graph_2k::LegendPtr Legend = {read = get_Legend};
  __property   Graph_2k::ChartGroupPtr Line3DGroup = {read = get_Line3DGroup};
  __property   BSTR            Name = {read = get_Name};
  __property   long            Perspective = {read = get_Perspective, write = set_Perspective};
  __property   Graph_2k::ChartGroupPtr Pie3DGroup = {read = get_Pie3DGroup};
  __property   Graph_2k::PlotAreaPtr PlotArea = {read = get_PlotArea};
  __property   Graph_2k::ChartGroupPtr SurfaceGroup = {read = get_SurfaceGroup};
  __property   long            Type = {read = get_Type, write = set_Type};
  __property   Graph_2k::XlChartType ChartType = {read = get_ChartType, write = set_ChartType};
  __property   Graph_2k::WallsPtr Walls = {read = get_Walls};
  __property   TOLEBOOL        WallsAndGridlines2D = {read = get_WallsAndGridlines2D, write = set_WallsAndGridlines2D};
  __property   Graph_2k::XlBarShape BarShape = {read = get_BarShape, write = set_BarShape};
  __property   long            PlotOnX = {read = get_PlotOnX, write = set_PlotOnX};
};
// *********************************************************************//
// Interface: GraphApplication
// Flags:     (4096) Dispatchable
// GUID:      {000208EC-0000-0000-C000-000000000046}
// *********************************************************************//
interface GraphApplication : public TDispWrapper<IDispatch>
{
  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application()
  {
    _TDispID _dispid(/* Application */ DISPID(148));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator()
  {
    _TDispID _dispid(/* Creator */ DISPID(149));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Parent()
  {
    _TDispID _dispid(/* Parent */ DISPID(150));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Office_2k::CommandBarsPtr /*[VT_USERDEFINED:1]*/ __fastcall get_CommandBars()
  {
    _TDispID _dispid(/* CommandBars */ DISPID(1439));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Office_2k::CommandBars* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall AddChartAutoFormat(BSTR Name/*[in]*/, 
                                                     TVariantInParam Description/*[in,opt]*/= TNoParam())
  {
    _TDispID _dispid(/* AddChartAutoFormat */ DISPID(216));
    TAutoArgs<2> _args;
    _args[1] = Name /*[VT_BSTR:0]*/;
    _args[2] = Description /*[VT_VARIANT:0]*/;
    OleProcedure(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_CellDragAndDrop()
  {
    _TDispID _dispid(/* CellDragAndDrop */ DISPID(320));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_CellDragAndDrop(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* CellDragAndDrop */ DISPID(320));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::ChartPtr /*[VT_USERDEFINED:1]*/ __fastcall Chart()
  {
    _TDispID _dispid(/* Chart */ DISPID(7));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return (Graph_2k::Chart* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_ChartWizardDisplay()
  {
    _TDispID _dispid(/* ChartWizardDisplay */ DISPID(1129));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_ChartWizardDisplay(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* ChartWizardDisplay */ DISPID(1129));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::DataSheetPtr /*[VT_USERDEFINED:1]*/ __fastcall get_DataSheet()
  {
    _TDispID _dispid(/* DataSheet */ DISPID(1101));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::DataSheet* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall _set_DataSheet(Graph_2k::DataSheetPtr Param1/*[in]*/)
  {
    _TDispID _dispid(/* DataSheet */ DISPID(1101));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Graph_2k::DataSheet*)Param1 /*[VT_USERDEFINED:1]*/;
    OlePropertyPut(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall DeleteChartAutoFormat(BSTR Name/*[in]*/)
  {
    _TDispID _dispid(/* DeleteChartAutoFormat */ DISPID(217));
    TAutoArgs<1> _args;
    _args[1] = Name /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_DisplayAlerts()
  {
    _TDispID _dispid(/* DisplayAlerts */ DISPID(343));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_DisplayAlerts(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* DisplayAlerts */ DISPID(343));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall Evaluate(BSTR Name/*[in]*/)
  {
    _TDispID _dispid(/* Evaluate */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = Name /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall FileImport(BSTR FileName/*[in]*/, 
                                             TVariantInParam Password/*[in,opt]*/= TNoParam(), 
                                             TVariantInParam ImportRange/*[in,opt]*/= TNoParam(), 
                                             TVariantInParam WorksheetName/*[in,opt]*/= TNoParam(), 
                                             TVariantInParam OverwriteCells/*[in,opt]*/= TNoParam())
  {
    _TDispID _dispid(/* FileImport */ DISPID(1191));
    TAutoArgs<5> _args;
    _args[1] = FileName /*[VT_BSTR:0]*/;
    _args[2] = Password /*[VT_VARIANT:0]*/;
    _args[3] = ImportRange /*[VT_VARIANT:0]*/;
    _args[4] = WorksheetName /*[VT_VARIANT:0]*/;
    _args[5] = OverwriteCells /*[VT_VARIANT:0]*/;
    OleProcedure(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_HasLinks()
  {
    _TDispID _dispid(/* HasLinks */ DISPID(1094));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_HasLinks(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* HasLinks */ DISPID(1094));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  double /*[VT_R8:0]*/ __fastcall get_Height()
  {
    _TDispID _dispid(/* Height */ DISPID(123));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Height(double Param1/*[in]*/)
  {
    _TDispID _dispid(/* Height */ DISPID(123));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_R8:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall ImportChart(BSTR FileName/*[in]*/, 
                                              TVariantInParam Password/*[in,opt]*/= TNoParam(), 
                                              TVariantInParam ImportRange/*[in,opt]*/= TNoParam(), 
                                              TVariantInParam WorksheetName/*[in,opt]*/= TNoParam()
                                              , 
                                              TVariantInParam OverwriteCells/*[in,opt]*/= TNoParam())
  {
    _TDispID _dispid(/* ImportChart */ DISPID(1099));
    TAutoArgs<5> _args;
    _args[1] = FileName /*[VT_BSTR:0]*/;
    _args[2] = Password /*[VT_VARIANT:0]*/;
    _args[3] = ImportRange /*[VT_VARIANT:0]*/;
    _args[4] = WorksheetName /*[VT_VARIANT:0]*/;
    _args[5] = OverwriteCells /*[VT_VARIANT:0]*/;
    OleProcedure(_dispid, _args);
  }

  double /*[VT_R8:0]*/ __fastcall get_Left()
  {
    _TDispID _dispid(/* Left */ DISPID(127));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Left(double Param1/*[in]*/)
  {
    _TDispID _dispid(/* Left */ DISPID(127));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_R8:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_MoveAfterReturn()
  {
    _TDispID _dispid(/* MoveAfterReturn */ DISPID(374));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_MoveAfterReturn(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* MoveAfterReturn */ DISPID(374));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Name()
  {
    _TDispID _dispid(/* Name */ DISPID(110));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Name(BSTR Param1/*[in]*/)
  {
    _TDispID _dispid(/* Name */ DISPID(110));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BSTR:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::XlRowCol /*[VT_USERDEFINED:0]*/ __fastcall get_PlotBy()
  {
    _TDispID _dispid(/* PlotBy */ DISPID(202));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlRowCol /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_PlotBy(Graph_2k::XlRowCol Param1/*[in]*/)
  {
    _TDispID _dispid(/* PlotBy */ DISPID(202));
    TAutoArgs<1> _args;
    _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Quit()
  {
    _TDispID _dispid(/* Quit */ DISPID(302));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall SaveAs(BSTR FileName/*[in]*/)
  {
    _TDispID _dispid(/* SaveAs */ DISPID(284));
    TAutoArgs<1> _args;
    _args[1] = FileName /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall SaveAsOldFileFormat(TVariantInParam MajorVersion/*[in,opt]*/= TNoParam()
                                                      , 
                                                      TVariantInParam MinorVersion/*[in,opt]*/= TNoParam())
  {
    _TDispID _dispid(/* SaveAsOldFileFormat */ DISPID(1091));
    TAutoArgs<2> _args;
    _args[1] = MajorVersion /*[VT_VARIANT:0]*/;
    _args[2] = MinorVersion /*[VT_VARIANT:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall SetDefaultChart(TVariantInParam FormatName/*[in,opt]*/= TNoParam()
                                                  , TVariantInParam Gallery/*[in,opt]*/= TNoParam())
  {
    _TDispID _dispid(/* SetDefaultChart */ DISPID(219));
    TAutoArgs<2> _args;
    _args[1] = FormatName /*[VT_VARIANT:0]*/;
    _args[2] = Gallery /*[VT_VARIANT:0]*/;
    OleProcedure(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_ShowChartTipNames()
  {
    _TDispID _dispid(/* ShowChartTipNames */ DISPID(1207));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_ShowChartTipNames(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* ShowChartTipNames */ DISPID(1207));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_ShowChartTipValues()
  {
    _TDispID _dispid(/* ShowChartTipValues */ DISPID(1208));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_ShowChartTipValues(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* ShowChartTipValues */ DISPID(1208));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  double /*[VT_R8:0]*/ __fastcall get_Top()
  {
    _TDispID _dispid(/* Top */ DISPID(126));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Top(double Param1/*[in]*/)
  {
    _TDispID _dispid(/* Top */ DISPID(126));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_R8:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall _Update()
  {
    _TDispID _dispid(/* Update */ DISPID(680));
    OleProcedure(_dispid);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Version()
  {
    _TDispID _dispid(/* Version */ DISPID(392));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_Visible()
  {
    _TDispID _dispid(/* Visible */ DISPID(558));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Visible(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* Visible */ DISPID(558));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  double /*[VT_R8:0]*/ __fastcall get_Width()
  {
    _TDispID _dispid(/* Width */ DISPID(122));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Width(double Param1/*[in]*/)
  {
    _TDispID _dispid(/* Width */ DISPID(122));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_R8:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::XlWindowState /*[VT_USERDEFINED:0]*/ __fastcall get_WindowState()
  {
    _TDispID _dispid(/* WindowState */ DISPID(396));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlWindowState /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_WindowState(Graph_2k::XlWindowState Param1/*[in]*/)
  {
    _TDispID _dispid(/* WindowState */ DISPID(396));
    TAutoArgs<1> _args;
    _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::AutoCorrectPtr /*[VT_USERDEFINED:1]*/ __fastcall get_AutoCorrect()
  {
    _TDispID _dispid(/* AutoCorrect */ DISPID(1145));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::AutoCorrect* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }


  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   Graph_2k::GraphApplicationPtr Parent = {read = get_Parent};
  __property   Office_2k::CommandBarsPtr CommandBars = {read = get_CommandBars};
  __property   TOLEBOOL        CellDragAndDrop = {read = get_CellDragAndDrop, write = set_CellDragAndDrop};
  __property   Graph_2k::DataSheetPtr DataSheet = {read = get_DataSheet, write = _set_DataSheet};
  __property   TOLEBOOL        DisplayAlerts = {read = get_DisplayAlerts, write = set_DisplayAlerts};
  __property   TOLEBOOL        HasLinks = {read = get_HasLinks, write = set_HasLinks};
  __property   double          Height = {read = get_Height, write = set_Height};
  __property   double          Left = {read = get_Left, write = set_Left};
  __property   TOLEBOOL        MoveAfterReturn = {read = get_MoveAfterReturn, write = set_MoveAfterReturn};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   Graph_2k::XlRowCol PlotBy = {read = get_PlotBy, write = set_PlotBy};
  __property   TOLEBOOL        ShowChartTipNames = {read = get_ShowChartTipNames, write = set_ShowChartTipNames};
  __property   TOLEBOOL        ShowChartTipValues = {read = get_ShowChartTipValues, write = set_ShowChartTipValues};
  __property   double          Top = {read = get_Top, write = set_Top};
  __property   BSTR            Version = {read = get_Version};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   double          Width = {read = get_Width, write = set_Width};
  __property   Graph_2k::XlWindowState WindowState = {read = get_WindowState, write = set_WindowState};
  __property   Graph_2k::AutoCorrectPtr AutoCorrect = {read = get_AutoCorrect};
};
// *********************************************************************//
// Interface: DataSheet
// Flags:     (4096) Dispatchable
// GUID:      {00024726-0000-0000-C000-000000000046}
// *********************************************************************//
interface DataSheet : public TDispWrapper<IDispatch>
{
  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application()
  {
    _TDispID _dispid(/* Application */ DISPID(148));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator()
  {
    _TDispID _dispid(/* Creator */ DISPID(149));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent()
  {
    _TDispID _dispid(/* Parent */ DISPID(150));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall Activate()
  {
    _TDispID _dispid(/* Activate */ DISPID(304));
    OleProcedure(_dispid);
  }

  Graph_2k::RangePtr /*[VT_USERDEFINED:1]*/ __fastcall get_Cells()
  {
    _TDispID _dispid(/* Cells */ DISPID(238));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Range* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::RangePtr /*[VT_USERDEFINED:1]*/ __fastcall get_Columns()
  {
    _TDispID _dispid(/* Columns */ DISPID(241));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Range* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::FontPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Font()
  {
    _TDispID _dispid(/* Font */ DISPID(146));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Font* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall _set_Font(Graph_2k::FontPtr Param1/*[in]*/)
  {
    _TDispID _dispid(/* Font */ DISPID(146));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Graph_2k::Font*)Param1 /*[VT_USERDEFINED:1]*/;
    OlePropertyPut(_dispid, _args);
  }

  double /*[VT_R8:0]*/ __fastcall get_Height()
  {
    _TDispID _dispid(/* Height */ DISPID(123));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Height(double Param1/*[in]*/)
  {
    _TDispID _dispid(/* Height */ DISPID(123));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_R8:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  double /*[VT_R8:0]*/ __fastcall get_Left()
  {
    _TDispID _dispid(/* Left */ DISPID(127));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Left(double Param1/*[in]*/)
  {
    _TDispID _dispid(/* Left */ DISPID(127));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_R8:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::RangePtr /*[VT_USERDEFINED:1]*/ __fastcall get_Range(TVariantInParam Range1/*[in]*/, 
                                                                 TVariantInParam Range2/*[in,opt]*/= TNoParam())
  {
    _TDispID _dispid(/* Range */ DISPID(197));
    TAutoArgs<2> _args;
    _args[1] = Range1 /*[VT_VARIANT:0]*/;
    _args[2] = Range2 /*[VT_VARIANT:0]*/;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Range* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::RangePtr /*[VT_USERDEFINED:1]*/ __fastcall get_Rows()
  {
    _TDispID _dispid(/* Rows */ DISPID(258));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Range* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  double /*[VT_R8:0]*/ __fastcall get_Top()
  {
    _TDispID _dispid(/* Top */ DISPID(126));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Top(double Param1/*[in]*/)
  {
    _TDispID _dispid(/* Top */ DISPID(126));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_R8:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  double /*[VT_R8:0]*/ __fastcall get_Width()
  {
    _TDispID _dispid(/* Width */ DISPID(122));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Width(double Param1/*[in]*/)
  {
    _TDispID _dispid(/* Width */ DISPID(122));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_R8:0]*/;
    OlePropertyPut(_dispid, _args);
  }


  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Graph_2k::RangePtr Cells = {read = get_Cells};
  __property   Graph_2k::RangePtr Columns = {read = get_Columns};
  __property   Graph_2k::FontPtr Font = {read = get_Font, write = _set_Font};
  __property   double          Height = {read = get_Height, write = set_Height};
  __property   double          Left = {read = get_Left, write = set_Left};
  __property   Graph_2k::RangePtr Rows = {read = get_Rows};
  __property   double          Top = {read = get_Top, write = set_Top};
  __property   double          Width = {read = get_Width, write = set_Width};
};
// *********************************************************************//
// Interface: Range
// Flags:     (4096) Dispatchable
// GUID:      {00024727-0000-0000-C000-000000000046}
// *********************************************************************//
interface Range : public TDispWrapper<IDispatch>
{
  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application()
  {
    _TDispID _dispid(/* Application */ DISPID(148));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator()
  {
    _TDispID _dispid(/* Creator */ DISPID(149));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent()
  {
    _TDispID _dispid(/* Parent */ DISPID(150));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall AutoFit()
  {
    _TDispID _dispid(/* AutoFit */ DISPID(237));
    OleProcedure(_dispid);
  }

  Graph_2k::RangePtr /*[VT_USERDEFINED:1]*/ __fastcall get_Cells()
  {
    _TDispID _dispid(/* Cells */ DISPID(238));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Range* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall Clear()
  {
    _TDispID _dispid(/* Clear */ DISPID(111));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall ClearContents()
  {
    _TDispID _dispid(/* ClearContents */ DISPID(113));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall ClearFormats()
  {
    _TDispID _dispid(/* ClearFormats */ DISPID(112));
    OleProcedure(_dispid);
  }

  Graph_2k::RangePtr /*[VT_USERDEFINED:1]*/ __fastcall get_Columns()
  {
    _TDispID _dispid(/* Columns */ DISPID(241));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Range* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_ColumnWidth()
  {
    _TDispID _dispid(/* ColumnWidth */ DISPID(242));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_ColumnWidth(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* ColumnWidth */ DISPID(242));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Copy(TVariantInParam Destination/*[in,opt]*/= TNoParam())
  {
    _TDispID _dispid(/* Copy */ DISPID(551));
    TAutoArgs<1> _args;
    _args[1] = Destination /*[VT_VARIANT:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Cut(TVariantInParam Destination/*[in,opt]*/= TNoParam())
  {
    _TDispID _dispid(/* Cut */ DISPID(565));
    TAutoArgs<1> _args;
    _args[1] = Destination /*[VT_VARIANT:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Delete(TVariantInParam Shift/*[in,opt]*/= TNoParam())
  {
    _TDispID _dispid(/* Delete */ DISPID(117));
    TAutoArgs<1> _args;
    _args[1] = Shift /*[VT_VARIANT:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall ImportData(TVariantInParam FileName/*[in]*/, 
                                             TVariantInParam Range/*[in,opt]*/= TNoParam())
  {
    _TDispID _dispid(/* ImportData */ DISPID(1100));
    TAutoArgs<2> _args;
    _args[1] = FileName /*[VT_VARIANT:0]*/;
    _args[2] = Range /*[VT_VARIANT:0]*/;
    OleProcedure(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Include()
  {
    _TDispID _dispid(/* Include */ DISPID(165));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Include(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* Include */ DISPID(165));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Insert(TVariantInParam Shift/*[in,opt]*/= TNoParam())
  {
    _TDispID _dispid(/* Insert */ DISPID(252));
    TAutoArgs<1> _args;
    _args[1] = Shift /*[VT_VARIANT:0]*/;
    OleProcedure(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Item(TVariantInParam RowIndex/*[in,opt]*/= TNoParam(), 
                                                  TVariantInParam ColumnIndex/*[in,opt]*/= TNoParam())
  {
    _TDispID _dispid(/* Item */ DISPID(170));
    TAutoArgs<2> _args;
    _args[1] = RowIndex /*[VT_VARIANT:0]*/;
    _args[2] = ColumnIndex /*[VT_VARIANT:0]*/;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Item(TVariantInParam RowIndex/*[in,opt]*/, 
                                           TVariantInParam ColumnIndex/*[in,opt]*/, 
                                           TVariantInParam Param3/*[in]*/)
  {
    _TDispID _dispid(/* Item */ DISPID(170));
    TAutoArgs<3> _args;
    _args[1] = RowIndex /*[VT_VARIANT:0]*/;
    _args[2] = ColumnIndex /*[VT_VARIANT:0]*/;
    _args[3] = Param3 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  LPUNKNOWN /*[VT_UNKNOWN:0]*/ __fastcall get__NewEnum()
  {
    _TDispID _dispid(/* _NewEnum */ DISPID(-4));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_NumberFormat()
  {
    _TDispID _dispid(/* NumberFormat */ DISPID(193));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_NumberFormat(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* NumberFormat */ DISPID(193));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Paste(TVariantInParam Link/*[in,opt]*/= TNoParam())
  {
    _TDispID _dispid(/* Paste */ DISPID(211));
    TAutoArgs<1> _args;
    _args[1] = Link /*[VT_VARIANT:0]*/;
    OleProcedure(_dispid, _args);
  }

  Graph_2k::RangePtr /*[VT_USERDEFINED:1]*/ __fastcall get_Rows()
  {
    _TDispID _dispid(/* Rows */ DISPID(258));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Range* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Value()
  {
    _TDispID _dispid(/* Value */ DISPID(6));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Value(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* Value */ DISPID(6));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get__Default(TVariantInParam RowIndex/*[in,opt]*/= TNoParam()
                                                      , 
                                                      TVariantInParam ColumnIndex/*[in,opt]*/= TNoParam())
  {
    _TDispID _dispid(/* _Default */ DISPID(0));
    TAutoArgs<2> _args;
    _args[1] = RowIndex /*[VT_VARIANT:0]*/;
    _args[2] = ColumnIndex /*[VT_VARIANT:0]*/;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set__Default(TVariantInParam RowIndex/*[in,opt]*/, 
                                               TVariantInParam ColumnIndex/*[in,opt]*/, 
                                               TVariantInParam Param3/*[in]*/)
  {
    _TDispID _dispid(/* _Default */ DISPID(0));
    TAutoArgs<3> _args;
    _args[1] = RowIndex /*[VT_VARIANT:0]*/;
    _args[2] = ColumnIndex /*[VT_VARIANT:0]*/;
    _args[3] = Param3 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }


  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Graph_2k::RangePtr Cells = {read = get_Cells};
  __property   Graph_2k::RangePtr Columns = {read = get_Columns};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   Graph_2k::RangePtr Rows = {read = get_Rows};
};
// *********************************************************************//
// Interface: AutoCorrect
// Flags:     (4096) Dispatchable
// GUID:      {000208D4-0000-0000-C000-000000000046}
// *********************************************************************//
interface AutoCorrect : public TDispWrapper<IDispatch>
{
  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application()
  {
    _TDispID _dispid(/* Application */ DISPID(148));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator()
  {
    _TDispID _dispid(/* Creator */ DISPID(149));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent()
  {
    _TDispID _dispid(/* Parent */ DISPID(150));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall AddReplacement(BSTR What/*[in]*/, BSTR Replacement/*[in]*/)
  {
    _TDispID _dispid(/* AddReplacement */ DISPID(1146));
    TAutoArgs<2> _args;
    _args[1] = What /*[VT_BSTR:0]*/;
    _args[2] = Replacement /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_CapitalizeNamesOfDays()
  {
    _TDispID _dispid(/* CapitalizeNamesOfDays */ DISPID(1150));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_CapitalizeNamesOfDays(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* CapitalizeNamesOfDays */ DISPID(1150));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall DeleteReplacement(BSTR What/*[in]*/)
  {
    _TDispID _dispid(/* DeleteReplacement */ DISPID(1147));
    TAutoArgs<1> _args;
    _args[1] = What /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_ReplacementList(TVariantInParam Index/*[in,opt]*/= TNoParam())
  {
    _TDispID _dispid(/* ReplacementList */ DISPID(1151));
    TAutoArgs<1> _args;
    _args[1] = Index /*[VT_VARIANT:0]*/;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_ReplacementList(TVariantInParam Index/*[in,opt]*/, 
                                                      TVariantInParam Param2/*[in]*/)
  {
    _TDispID _dispid(/* ReplacementList */ DISPID(1151));
    TAutoArgs<2> _args;
    _args[1] = Index /*[VT_VARIANT:0]*/;
    _args[2] = Param2 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_ReplaceText()
  {
    _TDispID _dispid(/* ReplaceText */ DISPID(1148));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_ReplaceText(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* ReplaceText */ DISPID(1148));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_TwoInitialCapitals()
  {
    _TDispID _dispid(/* TwoInitialCapitals */ DISPID(1149));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_TwoInitialCapitals(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* TwoInitialCapitals */ DISPID(1149));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_CorrectSentenceCap()
  {
    _TDispID _dispid(/* CorrectSentenceCap */ DISPID(1619));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_CorrectSentenceCap(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* CorrectSentenceCap */ DISPID(1619));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_CorrectCapsLock()
  {
    _TDispID _dispid(/* CorrectCapsLock */ DISPID(1620));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_CorrectCapsLock(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* CorrectCapsLock */ DISPID(1620));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }


  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   TOLEBOOL        CapitalizeNamesOfDays = {read = get_CapitalizeNamesOfDays, write = set_CapitalizeNamesOfDays};
  __property   TOLEBOOL        ReplaceText = {read = get_ReplaceText, write = set_ReplaceText};
  __property   TOLEBOOL        TwoInitialCapitals = {read = get_TwoInitialCapitals, write = set_TwoInitialCapitals};
  __property   TOLEBOOL        CorrectSentenceCap = {read = get_CorrectSentenceCap, write = set_CorrectSentenceCap};
  __property   TOLEBOOL        CorrectCapsLock = {read = get_CorrectCapsLock, write = set_CorrectCapsLock};
};
// *********************************************************************//
// Interface: Border
// Flags:     (4096) Dispatchable
// GUID:      {000208EE-0000-0000-C000-000000000046}
// *********************************************************************//
interface Border : public TDispWrapper<IDispatch>
{
  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application()
  {
    _TDispID _dispid(/* Application */ DISPID(148));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator()
  {
    _TDispID _dispid(/* Creator */ DISPID(149));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent()
  {
    _TDispID _dispid(/* Parent */ DISPID(150));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Color()
  {
    _TDispID _dispid(/* Color */ DISPID(99));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Color(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* Color */ DISPID(99));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_ColorIndex()
  {
    _TDispID _dispid(/* ColorIndex */ DISPID(97));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_ColorIndex(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* ColorIndex */ DISPID(97));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_LineStyle()
  {
    _TDispID _dispid(/* LineStyle */ DISPID(119));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_LineStyle(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* LineStyle */ DISPID(119));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Weight()
  {
    _TDispID _dispid(/* Weight */ DISPID(120));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Weight(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* Weight */ DISPID(120));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }


  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
// *********************************************************************//
// Interface: Interior
// Flags:     (4096) Dispatchable
// GUID:      {000208ED-0000-0000-C000-000000000046}
// *********************************************************************//
interface Interior : public TDispWrapper<IDispatch>
{
  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application()
  {
    _TDispID _dispid(/* Application */ DISPID(148));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator()
  {
    _TDispID _dispid(/* Creator */ DISPID(149));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent()
  {
    _TDispID _dispid(/* Parent */ DISPID(150));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Color()
  {
    _TDispID _dispid(/* Color */ DISPID(99));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Color(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* Color */ DISPID(99));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_ColorIndex()
  {
    _TDispID _dispid(/* ColorIndex */ DISPID(97));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_ColorIndex(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* ColorIndex */ DISPID(97));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_InvertIfNegative()
  {
    _TDispID _dispid(/* InvertIfNegative */ DISPID(132));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_InvertIfNegative(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* InvertIfNegative */ DISPID(132));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Pattern()
  {
    _TDispID _dispid(/* Pattern */ DISPID(95));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Pattern(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* Pattern */ DISPID(95));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_PatternColor()
  {
    _TDispID _dispid(/* PatternColor */ DISPID(100));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_PatternColor(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* PatternColor */ DISPID(100));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_PatternColorIndex()
  {
    _TDispID _dispid(/* PatternColorIndex */ DISPID(98));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_PatternColorIndex(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* PatternColorIndex */ DISPID(98));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }


  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
// *********************************************************************//
// Interface: ChartFillFormat
// Flags:     (4096) Dispatchable
// GUID:      {0002441C-0000-0000-C000-000000000046}
// *********************************************************************//
interface ChartFillFormat : public TDispWrapper<IDispatch>
{
  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application()
  {
    _TDispID _dispid(/* Application */ DISPID(148));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator()
  {
    _TDispID _dispid(/* Creator */ DISPID(149));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent()
  {
    _TDispID _dispid(/* Parent */ DISPID(150));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall OneColorGradient(Office_2k::MsoGradientStyle Style/*[in]*/, 
                                                   long Variant/*[in]*/, float Degree/*[in]*/)
  {
    _TDispID _dispid(/* OneColorGradient */ DISPID(1621));
    TAutoArgs<3> _args;
    _args[1] = (int)Style /*[VT_USERDEFINED:0]*/;
    _args[2] = Variant /*[VT_I4:0]*/;
    _args[3] = Degree /*[VT_R4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall TwoColorGradient(Office_2k::MsoGradientStyle Style/*[in]*/, 
                                                   long Variant/*[in]*/)
  {
    _TDispID _dispid(/* TwoColorGradient */ DISPID(1624));
    TAutoArgs<2> _args;
    _args[1] = (int)Style /*[VT_USERDEFINED:0]*/;
    _args[2] = Variant /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall PresetTextured(Office_2k::MsoPresetTexture PresetTexture/*[in]*/)
  {
    _TDispID _dispid(/* PresetTextured */ DISPID(1625));
    TAutoArgs<1> _args;
    _args[1] = (int)PresetTexture /*[VT_USERDEFINED:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Solid()
  {
    _TDispID _dispid(/* Solid */ DISPID(1627));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall Patterned(Office_2k::MsoPatternType Pattern/*[in]*/)
  {
    _TDispID _dispid(/* Patterned */ DISPID(1628));
    TAutoArgs<1> _args;
    _args[1] = (int)Pattern /*[VT_USERDEFINED:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall UserPicture(TVariantInParam PictureFile/*[in,opt]*/= TNoParam(), 
                                              TVariantInParam PictureFormat/*[in,opt]*/= TNoParam()
                                              , 
                                              TVariantInParam PictureStackUnit/*[in,opt]*/= TNoParam()
                                              , 
                                              TVariantInParam PicturePlacement/*[in,opt]*/= TNoParam())
  {
    _TDispID _dispid(/* UserPicture */ DISPID(1629));
    TAutoArgs<4> _args;
    _args[1] = PictureFile /*[VT_VARIANT:0]*/;
    _args[2] = PictureFormat /*[VT_VARIANT:0]*/;
    _args[3] = PictureStackUnit /*[VT_VARIANT:0]*/;
    _args[4] = PicturePlacement /*[VT_VARIANT:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall UserTextured(BSTR TextureFile/*[in]*/)
  {
    _TDispID _dispid(/* UserTextured */ DISPID(1634));
    TAutoArgs<1> _args;
    _args[1] = TextureFile /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall PresetGradient(Office_2k::MsoGradientStyle Style/*[in]*/, 
                                                 long Variant/*[in]*/, 
                                                 Office_2k::MsoPresetGradientType PresetGradientType/*[in]*/)
  {
    _TDispID _dispid(/* PresetGradient */ DISPID(1636));
    TAutoArgs<3> _args;
    _args[1] = (int)Style /*[VT_USERDEFINED:0]*/;
    _args[2] = Variant /*[VT_I4:0]*/;
    _args[3] = (int)PresetGradientType /*[VT_USERDEFINED:0]*/;
    OleProcedure(_dispid, _args);
  }

  Graph_2k::ChartColorFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall get_BackColor()
  {
    _TDispID _dispid(/* BackColor */ DISPID(1638));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::ChartColorFormat* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::ChartColorFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall get_ForeColor()
  {
    _TDispID _dispid(/* ForeColor */ DISPID(1639));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::ChartColorFormat* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Office_2k::MsoGradientColorType /*[VT_USERDEFINED:0]*/ __fastcall get_GradientColorType()
  {
    _TDispID _dispid(/* GradientColorType */ DISPID(1640));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Office_2k::MsoGradientColorType /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  float /*[VT_R4:0]*/ __fastcall get_GradientDegree()
  {
    _TDispID _dispid(/* GradientDegree */ DISPID(1641));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  Office_2k::MsoGradientStyle /*[VT_USERDEFINED:0]*/ __fastcall get_GradientStyle()
  {
    _TDispID _dispid(/* GradientStyle */ DISPID(1642));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Office_2k::MsoGradientStyle /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall get_GradientVariant()
  {
    _TDispID _dispid(/* GradientVariant */ DISPID(1643));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  Office_2k::MsoPatternType /*[VT_USERDEFINED:0]*/ __fastcall get_Pattern()
  {
    _TDispID _dispid(/* Pattern */ DISPID(95));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Office_2k::MsoPatternType /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  Office_2k::MsoPresetGradientType /*[VT_USERDEFINED:0]*/ __fastcall get_PresetGradientType()
  {
    _TDispID _dispid(/* PresetGradientType */ DISPID(1637));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Office_2k::MsoPresetGradientType /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  Office_2k::MsoPresetTexture /*[VT_USERDEFINED:0]*/ __fastcall get_PresetTexture()
  {
    _TDispID _dispid(/* PresetTexture */ DISPID(1626));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Office_2k::MsoPresetTexture /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_TextureName()
  {
    _TDispID _dispid(/* TextureName */ DISPID(1644));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  Office_2k::MsoTextureType /*[VT_USERDEFINED:0]*/ __fastcall get_TextureType()
  {
    _TDispID _dispid(/* TextureType */ DISPID(1645));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Office_2k::MsoTextureType /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  Office_2k::MsoFillType /*[VT_USERDEFINED:0]*/ __fastcall get_Type()
  {
    _TDispID _dispid(/* Type */ DISPID(108));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Office_2k::MsoFillType /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  Office_2k::MsoTriState /*[VT_USERDEFINED:0]*/ __fastcall get_Visible()
  {
    _TDispID _dispid(/* Visible */ DISPID(558));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Office_2k::MsoTriState /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Visible(Office_2k::MsoTriState Param1/*[in]*/)
  {
    _TDispID _dispid(/* Visible */ DISPID(558));
    TAutoArgs<1> _args;
    _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
    OlePropertyPut(_dispid, _args);
  }


  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Graph_2k::ChartColorFormatPtr BackColor = {read = get_BackColor};
  __property   Graph_2k::ChartColorFormatPtr ForeColor = {read = get_ForeColor};
  __property   Office_2k::MsoGradientColorType GradientColorType = {read = get_GradientColorType};
  __property   float           GradientDegree = {read = get_GradientDegree};
  __property   Office_2k::MsoGradientStyle GradientStyle = {read = get_GradientStyle};
  __property   long            GradientVariant = {read = get_GradientVariant};
  __property   Office_2k::MsoPatternType Pattern = {read = get_Pattern};
  __property   Office_2k::MsoPresetGradientType PresetGradientType = {read = get_PresetGradientType};
  __property   Office_2k::MsoPresetTexture PresetTexture = {read = get_PresetTexture};
  __property   BSTR            TextureName = {read = get_TextureName};
  __property   Office_2k::MsoTextureType TextureType = {read = get_TextureType};
  __property   Office_2k::MsoFillType Type = {read = get_Type};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};
};
// *********************************************************************//
// Interface: ChartColorFormat
// Flags:     (4096) Dispatchable
// GUID:      {0002441D-0000-0000-C000-000000000046}
// *********************************************************************//
interface ChartColorFormat : public TDispWrapper<IDispatch>
{
  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application()
  {
    _TDispID _dispid(/* Application */ DISPID(148));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator()
  {
    _TDispID _dispid(/* Creator */ DISPID(149));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent()
  {
    _TDispID _dispid(/* Parent */ DISPID(150));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall get_SchemeColor()
  {
    _TDispID _dispid(/* SchemeColor */ DISPID(1646));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_SchemeColor(long Param1/*[in]*/)
  {
    _TDispID _dispid(/* SchemeColor */ DISPID(1646));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_I4:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_rgb()
  {
    _TDispID _dispid(/* RGB */ DISPID(1055));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall get__Default()
  {
    _TDispID _dispid(/* _Default */ DISPID(0));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall get_Type()
  {
    _TDispID _dispid(/* Type */ DISPID(108));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }


  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   long            SchemeColor = {read = get_SchemeColor, write = set_SchemeColor};
  __property   long            rgb = {read = get_rgb};
  __property   long            _Default = {read = get__Default};
  __property   long            Type = {read = get_Type};
};
// *********************************************************************//
// Interface: Axis
// Flags:     (4096) Dispatchable
// GUID:      {000208F9-0000-0000-C000-000000000046}
// *********************************************************************//
interface Axis : public TDispWrapper<IDispatch>
{
  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application()
  {
    _TDispID _dispid(/* Application */ DISPID(148));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator()
  {
    _TDispID _dispid(/* Creator */ DISPID(149));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent()
  {
    _TDispID _dispid(/* Parent */ DISPID(150));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_AxisBetweenCategories()
  {
    _TDispID _dispid(/* AxisBetweenCategories */ DISPID(45));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_AxisBetweenCategories(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* AxisBetweenCategories */ DISPID(45));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::XlAxisGroup /*[VT_USERDEFINED:0]*/ __fastcall get_AxisGroup()
  {
    _TDispID _dispid(/* AxisGroup */ DISPID(47));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlAxisGroup /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  Graph_2k::AxisTitlePtr /*[VT_USERDEFINED:1]*/ __fastcall get_AxisTitle()
  {
    _TDispID _dispid(/* AxisTitle */ DISPID(82));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::AxisTitle* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Border()
  {
    _TDispID _dispid(/* Border */ DISPID(128));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Border* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::XlAxisCrosses /*[VT_USERDEFINED:0]*/ __fastcall get_Crosses()
  {
    _TDispID _dispid(/* Crosses */ DISPID(42));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlAxisCrosses /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Crosses(Graph_2k::XlAxisCrosses Param1/*[in]*/)
  {
    _TDispID _dispid(/* Crosses */ DISPID(42));
    TAutoArgs<1> _args;
    _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  double /*[VT_R8:0]*/ __fastcall get_CrossesAt()
  {
    _TDispID _dispid(/* CrossesAt */ DISPID(43));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_CrossesAt(double Param1/*[in]*/)
  {
    _TDispID _dispid(/* CrossesAt */ DISPID(43));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_R8:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall Delete()
  {
    _TDispID _dispid(/* Delete */ DISPID(117));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_HasMajorGridlines()
  {
    _TDispID _dispid(/* HasMajorGridlines */ DISPID(24));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_HasMajorGridlines(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* HasMajorGridlines */ DISPID(24));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_HasMinorGridlines()
  {
    _TDispID _dispid(/* HasMinorGridlines */ DISPID(25));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_HasMinorGridlines(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* HasMinorGridlines */ DISPID(25));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_HasTitle()
  {
    _TDispID _dispid(/* HasTitle */ DISPID(54));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_HasTitle(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* HasTitle */ DISPID(54));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::GridlinesPtr /*[VT_USERDEFINED:1]*/ __fastcall get_MajorGridlines()
  {
    _TDispID _dispid(/* MajorGridlines */ DISPID(89));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Gridlines* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::XlTickMark /*[VT_USERDEFINED:0]*/ __fastcall get_MajorTickMark()
  {
    _TDispID _dispid(/* MajorTickMark */ DISPID(26));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlTickMark /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_MajorTickMark(Graph_2k::XlTickMark Param1/*[in]*/)
  {
    _TDispID _dispid(/* MajorTickMark */ DISPID(26));
    TAutoArgs<1> _args;
    _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  double /*[VT_R8:0]*/ __fastcall get_MajorUnit()
  {
    _TDispID _dispid(/* MajorUnit */ DISPID(37));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_MajorUnit(double Param1/*[in]*/)
  {
    _TDispID _dispid(/* MajorUnit */ DISPID(37));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_R8:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_MajorUnitIsAuto()
  {
    _TDispID _dispid(/* MajorUnitIsAuto */ DISPID(38));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_MajorUnitIsAuto(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* MajorUnitIsAuto */ DISPID(38));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  double /*[VT_R8:0]*/ __fastcall get_MaximumScale()
  {
    _TDispID _dispid(/* MaximumScale */ DISPID(35));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_MaximumScale(double Param1/*[in]*/)
  {
    _TDispID _dispid(/* MaximumScale */ DISPID(35));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_R8:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_MaximumScaleIsAuto()
  {
    _TDispID _dispid(/* MaximumScaleIsAuto */ DISPID(36));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_MaximumScaleIsAuto(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* MaximumScaleIsAuto */ DISPID(36));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  double /*[VT_R8:0]*/ __fastcall get_MinimumScale()
  {
    _TDispID _dispid(/* MinimumScale */ DISPID(33));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_MinimumScale(double Param1/*[in]*/)
  {
    _TDispID _dispid(/* MinimumScale */ DISPID(33));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_R8:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_MinimumScaleIsAuto()
  {
    _TDispID _dispid(/* MinimumScaleIsAuto */ DISPID(34));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_MinimumScaleIsAuto(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* MinimumScaleIsAuto */ DISPID(34));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::GridlinesPtr /*[VT_USERDEFINED:1]*/ __fastcall get_MinorGridlines()
  {
    _TDispID _dispid(/* MinorGridlines */ DISPID(90));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Gridlines* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::XlTickMark /*[VT_USERDEFINED:0]*/ __fastcall get_MinorTickMark()
  {
    _TDispID _dispid(/* MinorTickMark */ DISPID(27));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlTickMark /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_MinorTickMark(Graph_2k::XlTickMark Param1/*[in]*/)
  {
    _TDispID _dispid(/* MinorTickMark */ DISPID(27));
    TAutoArgs<1> _args;
    _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  double /*[VT_R8:0]*/ __fastcall get_MinorUnit()
  {
    _TDispID _dispid(/* MinorUnit */ DISPID(39));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_MinorUnit(double Param1/*[in]*/)
  {
    _TDispID _dispid(/* MinorUnit */ DISPID(39));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_R8:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_MinorUnitIsAuto()
  {
    _TDispID _dispid(/* MinorUnitIsAuto */ DISPID(40));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_MinorUnitIsAuto(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* MinorUnitIsAuto */ DISPID(40));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_ReversePlotOrder()
  {
    _TDispID _dispid(/* ReversePlotOrder */ DISPID(44));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_ReversePlotOrder(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* ReversePlotOrder */ DISPID(44));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::XlScaleType /*[VT_USERDEFINED:0]*/ __fastcall get_ScaleType()
  {
    _TDispID _dispid(/* ScaleType */ DISPID(41));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlScaleType /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_ScaleType(Graph_2k::XlScaleType Param1/*[in]*/)
  {
    _TDispID _dispid(/* ScaleType */ DISPID(41));
    TAutoArgs<1> _args;
    _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::XlTickLabelPosition /*[VT_USERDEFINED:0]*/ __fastcall get_TickLabelPosition()
  {
    _TDispID _dispid(/* TickLabelPosition */ DISPID(28));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlTickLabelPosition /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_TickLabelPosition(Graph_2k::XlTickLabelPosition Param1/*[in]*/)
  {
    _TDispID _dispid(/* TickLabelPosition */ DISPID(28));
    TAutoArgs<1> _args;
    _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::TickLabelsPtr /*[VT_USERDEFINED:1]*/ __fastcall get_TickLabels()
  {
    _TDispID _dispid(/* TickLabels */ DISPID(91));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::TickLabels* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall get_TickLabelSpacing()
  {
    _TDispID _dispid(/* TickLabelSpacing */ DISPID(29));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_TickLabelSpacing(long Param1/*[in]*/)
  {
    _TDispID _dispid(/* TickLabelSpacing */ DISPID(29));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_I4:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_TickMarkSpacing()
  {
    _TDispID _dispid(/* TickMarkSpacing */ DISPID(31));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_TickMarkSpacing(long Param1/*[in]*/)
  {
    _TDispID _dispid(/* TickMarkSpacing */ DISPID(31));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_I4:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::XlAxisType /*[VT_USERDEFINED:0]*/ __fastcall get_Type()
  {
    _TDispID _dispid(/* Type */ DISPID(108));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlAxisType /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Type(Graph_2k::XlAxisType Param1/*[in]*/)
  {
    _TDispID _dispid(/* Type */ DISPID(108));
    TAutoArgs<1> _args;
    _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::XlTimeUnit /*[VT_USERDEFINED:0]*/ __fastcall get_BaseUnit()
  {
    _TDispID _dispid(/* BaseUnit */ DISPID(1647));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlTimeUnit /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_BaseUnit(Graph_2k::XlTimeUnit Param1/*[in]*/)
  {
    _TDispID _dispid(/* BaseUnit */ DISPID(1647));
    TAutoArgs<1> _args;
    _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_BaseUnitIsAuto()
  {
    _TDispID _dispid(/* BaseUnitIsAuto */ DISPID(1648));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_BaseUnitIsAuto(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* BaseUnitIsAuto */ DISPID(1648));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::XlTimeUnit /*[VT_USERDEFINED:0]*/ __fastcall get_MajorUnitScale()
  {
    _TDispID _dispid(/* MajorUnitScale */ DISPID(1649));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlTimeUnit /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_MajorUnitScale(Graph_2k::XlTimeUnit Param1/*[in]*/)
  {
    _TDispID _dispid(/* MajorUnitScale */ DISPID(1649));
    TAutoArgs<1> _args;
    _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::XlTimeUnit /*[VT_USERDEFINED:0]*/ __fastcall get_MinorUnitScale()
  {
    _TDispID _dispid(/* MinorUnitScale */ DISPID(1650));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlTimeUnit /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_MinorUnitScale(Graph_2k::XlTimeUnit Param1/*[in]*/)
  {
    _TDispID _dispid(/* MinorUnitScale */ DISPID(1650));
    TAutoArgs<1> _args;
    _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::XlCategoryType /*[VT_USERDEFINED:0]*/ __fastcall get_CategoryType()
  {
    _TDispID _dispid(/* CategoryType */ DISPID(1651));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlCategoryType /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_CategoryType(Graph_2k::XlCategoryType Param1/*[in]*/)
  {
    _TDispID _dispid(/* CategoryType */ DISPID(1651));
    TAutoArgs<1> _args;
    _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  double /*[VT_R8:0]*/ __fastcall get_Left()
  {
    _TDispID _dispid(/* Left */ DISPID(127));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  double /*[VT_R8:0]*/ __fastcall get_Top()
  {
    _TDispID _dispid(/* Top */ DISPID(126));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  double /*[VT_R8:0]*/ __fastcall get_Width()
  {
    _TDispID _dispid(/* Width */ DISPID(122));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  double /*[VT_R8:0]*/ __fastcall get_Height()
  {
    _TDispID _dispid(/* Height */ DISPID(123));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::XlDisplayUnit /*[VT_USERDEFINED:0]*/ __fastcall get_DisplayUnit()
  {
    _TDispID _dispid(/* DisplayUnit */ DISPID(1779));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlDisplayUnit /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_DisplayUnit(Graph_2k::XlDisplayUnit Param1/*[in]*/)
  {
    _TDispID _dispid(/* DisplayUnit */ DISPID(1779));
    TAutoArgs<1> _args;
    _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  double /*[VT_R8:0]*/ __fastcall get_DisplayUnitCustom()
  {
    _TDispID _dispid(/* DisplayUnitCustom */ DISPID(1780));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_DisplayUnitCustom(double Param1/*[in]*/)
  {
    _TDispID _dispid(/* DisplayUnitCustom */ DISPID(1780));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_R8:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_HasDisplayUnitLabel()
  {
    _TDispID _dispid(/* HasDisplayUnitLabel */ DISPID(1781));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_HasDisplayUnitLabel(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* HasDisplayUnitLabel */ DISPID(1781));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::DisplayUnitLabelPtr /*[VT_USERDEFINED:1]*/ __fastcall get_DisplayUnitLabel()
  {
    _TDispID _dispid(/* DisplayUnitLabel */ DISPID(1782));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::DisplayUnitLabel* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }


  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   TOLEBOOL        AxisBetweenCategories = {read = get_AxisBetweenCategories, write = set_AxisBetweenCategories};
  __property   Graph_2k::XlAxisGroup AxisGroup = {read = get_AxisGroup};
  __property   Graph_2k::AxisTitlePtr AxisTitle = {read = get_AxisTitle};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::XlAxisCrosses Crosses = {read = get_Crosses, write = set_Crosses};
  __property   double          CrossesAt = {read = get_CrossesAt, write = set_CrossesAt};
  __property   TOLEBOOL        HasMajorGridlines = {read = get_HasMajorGridlines, write = set_HasMajorGridlines};
  __property   TOLEBOOL        HasMinorGridlines = {read = get_HasMinorGridlines, write = set_HasMinorGridlines};
  __property   TOLEBOOL        HasTitle = {read = get_HasTitle, write = set_HasTitle};
  __property   Graph_2k::GridlinesPtr MajorGridlines = {read = get_MajorGridlines};
  __property   Graph_2k::XlTickMark MajorTickMark = {read = get_MajorTickMark, write = set_MajorTickMark};
  __property   double          MajorUnit = {read = get_MajorUnit, write = set_MajorUnit};
  __property   TOLEBOOL        MajorUnitIsAuto = {read = get_MajorUnitIsAuto, write = set_MajorUnitIsAuto};
  __property   double          MaximumScale = {read = get_MaximumScale, write = set_MaximumScale};
  __property   TOLEBOOL        MaximumScaleIsAuto = {read = get_MaximumScaleIsAuto, write = set_MaximumScaleIsAuto};
  __property   double          MinimumScale = {read = get_MinimumScale, write = set_MinimumScale};
  __property   TOLEBOOL        MinimumScaleIsAuto = {read = get_MinimumScaleIsAuto, write = set_MinimumScaleIsAuto};
  __property   Graph_2k::GridlinesPtr MinorGridlines = {read = get_MinorGridlines};
  __property   Graph_2k::XlTickMark MinorTickMark = {read = get_MinorTickMark, write = set_MinorTickMark};
  __property   double          MinorUnit = {read = get_MinorUnit, write = set_MinorUnit};
  __property   TOLEBOOL        MinorUnitIsAuto = {read = get_MinorUnitIsAuto, write = set_MinorUnitIsAuto};
  __property   TOLEBOOL        ReversePlotOrder = {read = get_ReversePlotOrder, write = set_ReversePlotOrder};
  __property   Graph_2k::XlScaleType ScaleType = {read = get_ScaleType, write = set_ScaleType};
  __property   Graph_2k::XlTickLabelPosition TickLabelPosition = {read = get_TickLabelPosition, write = set_TickLabelPosition};
  __property   Graph_2k::TickLabelsPtr TickLabels = {read = get_TickLabels};
  __property   long            TickLabelSpacing = {read = get_TickLabelSpacing, write = set_TickLabelSpacing};
  __property   long            TickMarkSpacing = {read = get_TickMarkSpacing, write = set_TickMarkSpacing};
  __property   Graph_2k::XlAxisType Type = {read = get_Type, write = set_Type};
  __property   Graph_2k::XlTimeUnit BaseUnit = {read = get_BaseUnit, write = set_BaseUnit};
  __property   TOLEBOOL        BaseUnitIsAuto = {read = get_BaseUnitIsAuto, write = set_BaseUnitIsAuto};
  __property   Graph_2k::XlTimeUnit MajorUnitScale = {read = get_MajorUnitScale, write = set_MajorUnitScale};
  __property   Graph_2k::XlTimeUnit MinorUnitScale = {read = get_MinorUnitScale, write = set_MinorUnitScale};
  __property   Graph_2k::XlCategoryType CategoryType = {read = get_CategoryType, write = set_CategoryType};
  __property   double          Left = {read = get_Left};
  __property   double          Top = {read = get_Top};
  __property   double          Width = {read = get_Width};
  __property   double          Height = {read = get_Height};
  __property   Graph_2k::XlDisplayUnit DisplayUnit = {read = get_DisplayUnit, write = set_DisplayUnit};
  __property   double          DisplayUnitCustom = {read = get_DisplayUnitCustom, write = set_DisplayUnitCustom};
  __property   TOLEBOOL        HasDisplayUnitLabel = {read = get_HasDisplayUnitLabel, write = set_HasDisplayUnitLabel};
  __property   Graph_2k::DisplayUnitLabelPtr DisplayUnitLabel = {read = get_DisplayUnitLabel};
};
// *********************************************************************//
// Interface: ChartTitle
// Flags:     (4096) Dispatchable
// GUID:      {000208F8-0000-0000-C000-000000000046}
// *********************************************************************//
interface ChartTitle : public TDispWrapper<IDispatch>
{
  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application()
  {
    _TDispID _dispid(/* Application */ DISPID(148));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator()
  {
    _TDispID _dispid(/* Creator */ DISPID(149));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent()
  {
    _TDispID _dispid(/* Parent */ DISPID(150));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Name()
  {
    _TDispID _dispid(/* Name */ DISPID(110));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Border()
  {
    _TDispID _dispid(/* Border */ DISPID(128));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Border* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall Delete()
  {
    _TDispID _dispid(/* Delete */ DISPID(117));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::InteriorPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Interior()
  {
    _TDispID _dispid(/* Interior */ DISPID(129));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Interior* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::ChartFillFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Fill()
  {
    _TDispID _dispid(/* Fill */ DISPID(1663));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::ChartFillFormat* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Caption()
  {
    _TDispID _dispid(/* Caption */ DISPID(139));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Caption(BSTR Param1/*[in]*/)
  {
    _TDispID _dispid(/* Caption */ DISPID(139));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BSTR:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::FontPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Font()
  {
    _TDispID _dispid(/* Font */ DISPID(146));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Font* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_HorizontalAlignment()
  {
    _TDispID _dispid(/* HorizontalAlignment */ DISPID(136));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_HorizontalAlignment(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* HorizontalAlignment */ DISPID(136));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  double /*[VT_R8:0]*/ __fastcall get_Left()
  {
    _TDispID _dispid(/* Left */ DISPID(127));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Left(double Param1/*[in]*/)
  {
    _TDispID _dispid(/* Left */ DISPID(127));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_R8:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Orientation()
  {
    _TDispID _dispid(/* Orientation */ DISPID(134));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Orientation(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* Orientation */ DISPID(134));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_Shadow()
  {
    _TDispID _dispid(/* Shadow */ DISPID(103));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Shadow(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* Shadow */ DISPID(103));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Text()
  {
    _TDispID _dispid(/* Text */ DISPID(138));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Text(BSTR Param1/*[in]*/)
  {
    _TDispID _dispid(/* Text */ DISPID(138));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BSTR:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  double /*[VT_R8:0]*/ __fastcall get_Top()
  {
    _TDispID _dispid(/* Top */ DISPID(126));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Top(double Param1/*[in]*/)
  {
    _TDispID _dispid(/* Top */ DISPID(126));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_R8:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_VerticalAlignment()
  {
    _TDispID _dispid(/* VerticalAlignment */ DISPID(137));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_VerticalAlignment(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* VerticalAlignment */ DISPID(137));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_ReadingOrder()
  {
    _TDispID _dispid(/* ReadingOrder */ DISPID(975));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_ReadingOrder(long Param1/*[in]*/)
  {
    _TDispID _dispid(/* ReadingOrder */ DISPID(975));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_I4:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_AutoScaleFont()
  {
    _TDispID _dispid(/* AutoScaleFont */ DISPID(1525));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_AutoScaleFont(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* AutoScaleFont */ DISPID(1525));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }


  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::InteriorPtr Interior = {read = get_Interior};
  __property   Graph_2k::ChartFillFormatPtr Fill = {read = get_Fill};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   Graph_2k::FontPtr Font = {read = get_Font};
  __property   double          Left = {read = get_Left, write = set_Left};
  __property   TOLEBOOL        Shadow = {read = get_Shadow, write = set_Shadow};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   double          Top = {read = get_Top, write = set_Top};
  __property   long            ReadingOrder = {read = get_ReadingOrder, write = set_ReadingOrder};
};
// *********************************************************************//
// Interface: AxisTitle
// Flags:     (4096) Dispatchable
// GUID:      {000208F7-0000-0000-C000-000000000046}
// *********************************************************************//
interface AxisTitle : public TDispWrapper<IDispatch>
{
  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application()
  {
    _TDispID _dispid(/* Application */ DISPID(148));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator()
  {
    _TDispID _dispid(/* Creator */ DISPID(149));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent()
  {
    _TDispID _dispid(/* Parent */ DISPID(150));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Name()
  {
    _TDispID _dispid(/* Name */ DISPID(110));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Border()
  {
    _TDispID _dispid(/* Border */ DISPID(128));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Border* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall Delete()
  {
    _TDispID _dispid(/* Delete */ DISPID(117));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::InteriorPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Interior()
  {
    _TDispID _dispid(/* Interior */ DISPID(129));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Interior* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::ChartFillFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Fill()
  {
    _TDispID _dispid(/* Fill */ DISPID(1663));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::ChartFillFormat* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Caption()
  {
    _TDispID _dispid(/* Caption */ DISPID(139));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Caption(BSTR Param1/*[in]*/)
  {
    _TDispID _dispid(/* Caption */ DISPID(139));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BSTR:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::FontPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Font()
  {
    _TDispID _dispid(/* Font */ DISPID(146));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Font* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_HorizontalAlignment()
  {
    _TDispID _dispid(/* HorizontalAlignment */ DISPID(136));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_HorizontalAlignment(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* HorizontalAlignment */ DISPID(136));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  double /*[VT_R8:0]*/ __fastcall get_Left()
  {
    _TDispID _dispid(/* Left */ DISPID(127));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Left(double Param1/*[in]*/)
  {
    _TDispID _dispid(/* Left */ DISPID(127));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_R8:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Orientation()
  {
    _TDispID _dispid(/* Orientation */ DISPID(134));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Orientation(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* Orientation */ DISPID(134));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_Shadow()
  {
    _TDispID _dispid(/* Shadow */ DISPID(103));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Shadow(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* Shadow */ DISPID(103));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Text()
  {
    _TDispID _dispid(/* Text */ DISPID(138));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Text(BSTR Param1/*[in]*/)
  {
    _TDispID _dispid(/* Text */ DISPID(138));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BSTR:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  double /*[VT_R8:0]*/ __fastcall get_Top()
  {
    _TDispID _dispid(/* Top */ DISPID(126));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Top(double Param1/*[in]*/)
  {
    _TDispID _dispid(/* Top */ DISPID(126));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_R8:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_VerticalAlignment()
  {
    _TDispID _dispid(/* VerticalAlignment */ DISPID(137));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_VerticalAlignment(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* VerticalAlignment */ DISPID(137));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_ReadingOrder()
  {
    _TDispID _dispid(/* ReadingOrder */ DISPID(975));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_ReadingOrder(long Param1/*[in]*/)
  {
    _TDispID _dispid(/* ReadingOrder */ DISPID(975));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_I4:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_AutoScaleFont()
  {
    _TDispID _dispid(/* AutoScaleFont */ DISPID(1525));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_AutoScaleFont(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* AutoScaleFont */ DISPID(1525));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }


  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::InteriorPtr Interior = {read = get_Interior};
  __property   Graph_2k::ChartFillFormatPtr Fill = {read = get_Fill};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   Graph_2k::FontPtr Font = {read = get_Font};
  __property   double          Left = {read = get_Left, write = set_Left};
  __property   TOLEBOOL        Shadow = {read = get_Shadow, write = set_Shadow};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   double          Top = {read = get_Top, write = set_Top};
  __property   long            ReadingOrder = {read = get_ReadingOrder, write = set_ReadingOrder};
};
// *********************************************************************//
// Interface: ChartGroup
// Flags:     (4096) Dispatchable
// GUID:      {000208F6-0000-0000-C000-000000000046}
// *********************************************************************//
interface ChartGroup : public TDispWrapper<IDispatch>
{
  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application()
  {
    _TDispID _dispid(/* Application */ DISPID(148));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator()
  {
    _TDispID _dispid(/* Creator */ DISPID(149));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent()
  {
    _TDispID _dispid(/* Parent */ DISPID(150));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::XlAxisGroup /*[VT_USERDEFINED:0]*/ __fastcall get_AxisGroup()
  {
    _TDispID _dispid(/* AxisGroup */ DISPID(47));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlAxisGroup /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_AxisGroup(Graph_2k::XlAxisGroup Param1/*[in]*/)
  {
    _TDispID _dispid(/* AxisGroup */ DISPID(47));
    TAutoArgs<1> _args;
    _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_DoughnutHoleSize()
  {
    _TDispID _dispid(/* DoughnutHoleSize */ DISPID(1126));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_DoughnutHoleSize(long Param1/*[in]*/)
  {
    _TDispID _dispid(/* DoughnutHoleSize */ DISPID(1126));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_I4:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::DownBarsPtr /*[VT_USERDEFINED:1]*/ __fastcall get_DownBars()
  {
    _TDispID _dispid(/* DownBars */ DISPID(141));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::DownBars* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::DropLinesPtr /*[VT_USERDEFINED:1]*/ __fastcall get_DropLines()
  {
    _TDispID _dispid(/* DropLines */ DISPID(142));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::DropLines* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall get_FirstSliceAngle()
  {
    _TDispID _dispid(/* FirstSliceAngle */ DISPID(63));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_FirstSliceAngle(long Param1/*[in]*/)
  {
    _TDispID _dispid(/* FirstSliceAngle */ DISPID(63));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_I4:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_GapWidth()
  {
    _TDispID _dispid(/* GapWidth */ DISPID(51));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_GapWidth(long Param1/*[in]*/)
  {
    _TDispID _dispid(/* GapWidth */ DISPID(51));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_I4:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_HasDropLines()
  {
    _TDispID _dispid(/* HasDropLines */ DISPID(61));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_HasDropLines(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* HasDropLines */ DISPID(61));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_HasHiLoLines()
  {
    _TDispID _dispid(/* HasHiLoLines */ DISPID(62));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_HasHiLoLines(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* HasHiLoLines */ DISPID(62));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_HasRadarAxisLabels()
  {
    _TDispID _dispid(/* HasRadarAxisLabels */ DISPID(64));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_HasRadarAxisLabels(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* HasRadarAxisLabels */ DISPID(64));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_HasSeriesLines()
  {
    _TDispID _dispid(/* HasSeriesLines */ DISPID(65));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_HasSeriesLines(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* HasSeriesLines */ DISPID(65));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_HasUpDownBars()
  {
    _TDispID _dispid(/* HasUpDownBars */ DISPID(66));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_HasUpDownBars(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* HasUpDownBars */ DISPID(66));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::HiLoLinesPtr /*[VT_USERDEFINED:1]*/ __fastcall get_HiLoLines()
  {
    _TDispID _dispid(/* HiLoLines */ DISPID(143));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::HiLoLines* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall get_Index()
  {
    _TDispID _dispid(/* Index */ DISPID(486));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall get_Overlap()
  {
    _TDispID _dispid(/* Overlap */ DISPID(56));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Overlap(long Param1/*[in]*/)
  {
    _TDispID _dispid(/* Overlap */ DISPID(56));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_I4:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::TickLabelsPtr /*[VT_USERDEFINED:1]*/ __fastcall get_RadarAxisLabels()
  {
    _TDispID _dispid(/* RadarAxisLabels */ DISPID(144));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::TickLabels* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall SeriesCollection(TVariantInParam Index/*[in,opt]*/= TNoParam())
  {
    _TDispID _dispid(/* SeriesCollection */ DISPID(68));
    TAutoArgs<1> _args;
    _args[1] = Index /*[VT_VARIANT:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::SeriesLinesPtr /*[VT_USERDEFINED:1]*/ __fastcall get_SeriesLines()
  {
    _TDispID _dispid(/* SeriesLines */ DISPID(145));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::SeriesLines* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall get_SubType()
  {
    _TDispID _dispid(/* SubType */ DISPID(109));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_SubType(long Param1/*[in]*/)
  {
    _TDispID _dispid(/* SubType */ DISPID(109));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_I4:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_Type()
  {
    _TDispID _dispid(/* Type */ DISPID(108));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Type(long Param1/*[in]*/)
  {
    _TDispID _dispid(/* Type */ DISPID(108));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_I4:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::UpBarsPtr /*[VT_USERDEFINED:1]*/ __fastcall get_UpBars()
  {
    _TDispID _dispid(/* UpBars */ DISPID(140));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::UpBars* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_VaryByCategories()
  {
    _TDispID _dispid(/* VaryByCategories */ DISPID(60));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_VaryByCategories(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* VaryByCategories */ DISPID(60));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::XlSizeRepresents /*[VT_USERDEFINED:0]*/ __fastcall get_SizeRepresents()
  {
    _TDispID _dispid(/* SizeRepresents */ DISPID(1652));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlSizeRepresents /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_SizeRepresents(Graph_2k::XlSizeRepresents Param1/*[in]*/)
  {
    _TDispID _dispid(/* SizeRepresents */ DISPID(1652));
    TAutoArgs<1> _args;
    _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_BubbleScale()
  {
    _TDispID _dispid(/* BubbleScale */ DISPID(1653));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_BubbleScale(long Param1/*[in]*/)
  {
    _TDispID _dispid(/* BubbleScale */ DISPID(1653));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_I4:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_ShowNegativeBubbles()
  {
    _TDispID _dispid(/* ShowNegativeBubbles */ DISPID(1654));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_ShowNegativeBubbles(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* ShowNegativeBubbles */ DISPID(1654));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::XlChartSplitType /*[VT_USERDEFINED:0]*/ __fastcall get_SplitType()
  {
    _TDispID _dispid(/* SplitType */ DISPID(1655));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlChartSplitType /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_SplitType(Graph_2k::XlChartSplitType Param1/*[in]*/)
  {
    _TDispID _dispid(/* SplitType */ DISPID(1655));
    TAutoArgs<1> _args;
    _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_SplitValue()
  {
    _TDispID _dispid(/* SplitValue */ DISPID(1656));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_SplitValue(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* SplitValue */ DISPID(1656));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_SecondPlotSize()
  {
    _TDispID _dispid(/* SecondPlotSize */ DISPID(1657));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_SecondPlotSize(long Param1/*[in]*/)
  {
    _TDispID _dispid(/* SecondPlotSize */ DISPID(1657));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_I4:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_Has3DShading()
  {
    _TDispID _dispid(/* Has3DShading */ DISPID(1658));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Has3DShading(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* Has3DShading */ DISPID(1658));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }


  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Graph_2k::XlAxisGroup AxisGroup = {read = get_AxisGroup, write = set_AxisGroup};
  __property   long            DoughnutHoleSize = {read = get_DoughnutHoleSize, write = set_DoughnutHoleSize};
  __property   Graph_2k::DownBarsPtr DownBars = {read = get_DownBars};
  __property   Graph_2k::DropLinesPtr DropLines = {read = get_DropLines};
  __property   long            FirstSliceAngle = {read = get_FirstSliceAngle, write = set_FirstSliceAngle};
  __property   long            GapWidth = {read = get_GapWidth, write = set_GapWidth};
  __property   TOLEBOOL        HasDropLines = {read = get_HasDropLines, write = set_HasDropLines};
  __property   TOLEBOOL        HasHiLoLines = {read = get_HasHiLoLines, write = set_HasHiLoLines};
  __property   TOLEBOOL        HasRadarAxisLabels = {read = get_HasRadarAxisLabels, write = set_HasRadarAxisLabels};
  __property   TOLEBOOL        HasSeriesLines = {read = get_HasSeriesLines, write = set_HasSeriesLines};
  __property   TOLEBOOL        HasUpDownBars = {read = get_HasUpDownBars, write = set_HasUpDownBars};
  __property   Graph_2k::HiLoLinesPtr HiLoLines = {read = get_HiLoLines};
  __property   long            Index = {read = get_Index};
  __property   long            Overlap = {read = get_Overlap, write = set_Overlap};
  __property   Graph_2k::TickLabelsPtr RadarAxisLabels = {read = get_RadarAxisLabels};
  __property   Graph_2k::SeriesLinesPtr SeriesLines = {read = get_SeriesLines};
  __property   long            SubType = {read = get_SubType, write = set_SubType};
  __property   long            Type = {read = get_Type, write = set_Type};
  __property   Graph_2k::UpBarsPtr UpBars = {read = get_UpBars};
  __property   TOLEBOOL        VaryByCategories = {read = get_VaryByCategories, write = set_VaryByCategories};
  __property   Graph_2k::XlSizeRepresents SizeRepresents = {read = get_SizeRepresents, write = set_SizeRepresents};
  __property   long            BubbleScale = {read = get_BubbleScale, write = set_BubbleScale};
  __property   TOLEBOOL        ShowNegativeBubbles = {read = get_ShowNegativeBubbles, write = set_ShowNegativeBubbles};
  __property   Graph_2k::XlChartSplitType SplitType = {read = get_SplitType, write = set_SplitType};
  __property   long            SecondPlotSize = {read = get_SecondPlotSize, write = set_SecondPlotSize};
  __property   TOLEBOOL        Has3DShading = {read = get_Has3DShading, write = set_Has3DShading};
};
// *********************************************************************//
// Interface: ChartGroups
// Flags:     (4096) Dispatchable
// GUID:      {000208F5-0000-0000-C000-000000000046}
// *********************************************************************//
interface ChartGroups : public TDispWrapper<IDispatch>
{
  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application()
  {
    _TDispID _dispid(/* Application */ DISPID(148));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator()
  {
    _TDispID _dispid(/* Creator */ DISPID(149));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent()
  {
    _TDispID _dispid(/* Parent */ DISPID(150));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall get_Count()
  {
    _TDispID _dispid(/* Count */ DISPID(118));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::ChartGroupPtr /*[VT_USERDEFINED:1]*/ __fastcall Item(TVariantInParam Index/*[in]*/)
  {
    _TDispID _dispid(/* Item */ DISPID(170));
    TAutoArgs<1> _args;
    _args[1] = Index /*[VT_VARIANT:0]*/;
    OleFunction(_dispid, _args);
    return (Graph_2k::ChartGroup* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  LPUNKNOWN /*[VT_UNKNOWN:0]*/ __fastcall _NewEnum()
  {
    _TDispID _dispid(/* _NewEnum */ DISPID(-4));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }


  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};
};
// *********************************************************************//
// Interface: Axes
// Flags:     (4096) Dispatchable
// GUID:      {000208F4-0000-0000-C000-000000000046}
// *********************************************************************//
interface Axes : public TDispWrapper<IDispatch>
{
  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application()
  {
    _TDispID _dispid(/* Application */ DISPID(148));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator()
  {
    _TDispID _dispid(/* Creator */ DISPID(149));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent()
  {
    _TDispID _dispid(/* Parent */ DISPID(150));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall get_Count()
  {
    _TDispID _dispid(/* Count */ DISPID(118));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::AxisPtr /*[VT_USERDEFINED:1]*/ __fastcall Item(Graph_2k::XlAxisType Type/*[in]*/, 
                                                           Graph_2k::XlAxisGroup AxisGroup/*[in,def,opt]*/)
  {
    _TDispID _dispid(/* Item */ DISPID(170));
    TAutoArgs<2> _args;
    _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
    _args[2] = (int)AxisGroup /*[VT_USERDEFINED:0]*/;
    OleFunction(_dispid, _args);
    return (Graph_2k::Axis* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  LPUNKNOWN /*[VT_UNKNOWN:0]*/ __fastcall _NewEnum()
  {
    _TDispID _dispid(/* _NewEnum */ DISPID(-4));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }


  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};
};
// *********************************************************************//
// Interface: Points
// Flags:     (4096) Dispatchable
// GUID:      {000208F2-0000-0000-C000-000000000046}
// *********************************************************************//
interface Points : public TDispWrapper<IDispatch>
{
  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application()
  {
    _TDispID _dispid(/* Application */ DISPID(148));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator()
  {
    _TDispID _dispid(/* Creator */ DISPID(149));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent()
  {
    _TDispID _dispid(/* Parent */ DISPID(150));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall get_Count()
  {
    _TDispID _dispid(/* Count */ DISPID(118));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::PointPtr /*[VT_USERDEFINED:1]*/ __fastcall Item(long Index/*[in]*/)
  {
    _TDispID _dispid(/* Item */ DISPID(170));
    TAutoArgs<1> _args;
    _args[1] = Index /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return (Graph_2k::Point* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  LPUNKNOWN /*[VT_UNKNOWN:0]*/ __fastcall _NewEnum()
  {
    _TDispID _dispid(/* _NewEnum */ DISPID(-4));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }


  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};
};
// *********************************************************************//
// Interface: Point
// Flags:     (4096) Dispatchable
// GUID:      {000208F1-0000-0000-C000-000000000046}
// *********************************************************************//
interface Point : public TDispWrapper<IDispatch>
{
  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application()
  {
    _TDispID _dispid(/* Application */ DISPID(148));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator()
  {
    _TDispID _dispid(/* Creator */ DISPID(149));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent()
  {
    _TDispID _dispid(/* Parent */ DISPID(150));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall ApplyDataLabels(Graph_2k::XlDataLabelsType Type/*[in,def,opt]*/
                                                         , 
                                                         TVariantInParam LegendKey/*[in,opt]*/= TNoParam()
                                                         , 
                                                         TVariantInParam AutoText/*[in,opt]*/= TNoParam())
  {
    _TDispID _dispid(/* ApplyDataLabels */ DISPID(151));
    TAutoArgs<3> _args;
    _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
    _args[2] = LegendKey /*[VT_VARIANT:0]*/;
    _args[3] = AutoText /*[VT_VARIANT:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Border()
  {
    _TDispID _dispid(/* Border */ DISPID(128));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Border* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall ClearFormats()
  {
    _TDispID _dispid(/* ClearFormats */ DISPID(112));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::DataLabelPtr /*[VT_USERDEFINED:1]*/ __fastcall get_DataLabel()
  {
    _TDispID _dispid(/* DataLabel */ DISPID(158));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::DataLabel* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall Delete()
  {
    _TDispID _dispid(/* Delete */ DISPID(117));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall get_Explosion()
  {
    _TDispID _dispid(/* Explosion */ DISPID(182));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Explosion(long Param1/*[in]*/)
  {
    _TDispID _dispid(/* Explosion */ DISPID(182));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_I4:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_HasDataLabel()
  {
    _TDispID _dispid(/* HasDataLabel */ DISPID(77));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_HasDataLabel(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* HasDataLabel */ DISPID(77));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::InteriorPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Interior()
  {
    _TDispID _dispid(/* Interior */ DISPID(129));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Interior* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_InvertIfNegative()
  {
    _TDispID _dispid(/* InvertIfNegative */ DISPID(132));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_InvertIfNegative(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* InvertIfNegative */ DISPID(132));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_MarkerBackgroundColor()
  {
    _TDispID _dispid(/* MarkerBackgroundColor */ DISPID(73));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_MarkerBackgroundColor(long Param1/*[in]*/)
  {
    _TDispID _dispid(/* MarkerBackgroundColor */ DISPID(73));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_I4:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::XlColorIndex /*[VT_USERDEFINED:0]*/ __fastcall get_MarkerBackgroundColorIndex()
  {
    _TDispID _dispid(/* MarkerBackgroundColorIndex */ DISPID(74));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlColorIndex /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_MarkerBackgroundColorIndex(Graph_2k::XlColorIndex Param1/*[in]*/)
  {
    _TDispID _dispid(/* MarkerBackgroundColorIndex */ DISPID(74));
    TAutoArgs<1> _args;
    _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_MarkerForegroundColor()
  {
    _TDispID _dispid(/* MarkerForegroundColor */ DISPID(75));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_MarkerForegroundColor(long Param1/*[in]*/)
  {
    _TDispID _dispid(/* MarkerForegroundColor */ DISPID(75));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_I4:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::XlColorIndex /*[VT_USERDEFINED:0]*/ __fastcall get_MarkerForegroundColorIndex()
  {
    _TDispID _dispid(/* MarkerForegroundColorIndex */ DISPID(76));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlColorIndex /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_MarkerForegroundColorIndex(Graph_2k::XlColorIndex Param1/*[in]*/)
  {
    _TDispID _dispid(/* MarkerForegroundColorIndex */ DISPID(76));
    TAutoArgs<1> _args;
    _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_MarkerSize()
  {
    _TDispID _dispid(/* MarkerSize */ DISPID(231));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_MarkerSize(long Param1/*[in]*/)
  {
    _TDispID _dispid(/* MarkerSize */ DISPID(231));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_I4:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::XlMarkerStyle /*[VT_USERDEFINED:0]*/ __fastcall get_MarkerStyle()
  {
    _TDispID _dispid(/* MarkerStyle */ DISPID(72));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlMarkerStyle /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_MarkerStyle(Graph_2k::XlMarkerStyle Param1/*[in]*/)
  {
    _TDispID _dispid(/* MarkerStyle */ DISPID(72));
    TAutoArgs<1> _args;
    _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::XlChartPictureType /*[VT_USERDEFINED:0]*/ __fastcall get_PictureType()
  {
    _TDispID _dispid(/* PictureType */ DISPID(161));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlChartPictureType /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_PictureType(Graph_2k::XlChartPictureType Param1/*[in]*/)
  {
    _TDispID _dispid(/* PictureType */ DISPID(161));
    TAutoArgs<1> _args;
    _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_PictureUnit()
  {
    _TDispID _dispid(/* PictureUnit */ DISPID(162));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_PictureUnit(long Param1/*[in]*/)
  {
    _TDispID _dispid(/* PictureUnit */ DISPID(162));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_I4:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_ApplyPictToSides()
  {
    _TDispID _dispid(/* ApplyPictToSides */ DISPID(1659));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_ApplyPictToSides(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* ApplyPictToSides */ DISPID(1659));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_ApplyPictToFront()
  {
    _TDispID _dispid(/* ApplyPictToFront */ DISPID(1660));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_ApplyPictToFront(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* ApplyPictToFront */ DISPID(1660));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_ApplyPictToEnd()
  {
    _TDispID _dispid(/* ApplyPictToEnd */ DISPID(1661));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_ApplyPictToEnd(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* ApplyPictToEnd */ DISPID(1661));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_Shadow()
  {
    _TDispID _dispid(/* Shadow */ DISPID(103));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Shadow(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* Shadow */ DISPID(103));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_SecondaryPlot()
  {
    _TDispID _dispid(/* SecondaryPlot */ DISPID(1662));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_SecondaryPlot(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* SecondaryPlot */ DISPID(1662));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::ChartFillFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Fill()
  {
    _TDispID _dispid(/* Fill */ DISPID(1663));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::ChartFillFormat* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }


  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::DataLabelPtr DataLabel = {read = get_DataLabel};
  __property   long            Explosion = {read = get_Explosion, write = set_Explosion};
  __property   TOLEBOOL        HasDataLabel = {read = get_HasDataLabel, write = set_HasDataLabel};
  __property   Graph_2k::InteriorPtr Interior = {read = get_Interior};
  __property   TOLEBOOL        InvertIfNegative = {read = get_InvertIfNegative, write = set_InvertIfNegative};
  __property   long            MarkerBackgroundColor = {read = get_MarkerBackgroundColor, write = set_MarkerBackgroundColor};
  __property   Graph_2k::XlColorIndex MarkerBackgroundColorIndex = {read = get_MarkerBackgroundColorIndex, write = set_MarkerBackgroundColorIndex};
  __property   long            MarkerForegroundColor = {read = get_MarkerForegroundColor, write = set_MarkerForegroundColor};
  __property   Graph_2k::XlColorIndex MarkerForegroundColorIndex = {read = get_MarkerForegroundColorIndex, write = set_MarkerForegroundColorIndex};
  __property   long            MarkerSize = {read = get_MarkerSize, write = set_MarkerSize};
  __property   Graph_2k::XlMarkerStyle MarkerStyle = {read = get_MarkerStyle, write = set_MarkerStyle};
  __property   Graph_2k::XlChartPictureType PictureType = {read = get_PictureType, write = set_PictureType};
  __property   long            PictureUnit = {read = get_PictureUnit, write = set_PictureUnit};
  __property   TOLEBOOL        ApplyPictToSides = {read = get_ApplyPictToSides, write = set_ApplyPictToSides};
  __property   TOLEBOOL        ApplyPictToFront = {read = get_ApplyPictToFront, write = set_ApplyPictToFront};
  __property   TOLEBOOL        ApplyPictToEnd = {read = get_ApplyPictToEnd, write = set_ApplyPictToEnd};
  __property   TOLEBOOL        Shadow = {read = get_Shadow, write = set_Shadow};
  __property   TOLEBOOL        SecondaryPlot = {read = get_SecondaryPlot, write = set_SecondaryPlot};
  __property   Graph_2k::ChartFillFormatPtr Fill = {read = get_Fill};
};
// *********************************************************************//
// Interface: Series
// Flags:     (4096) Dispatchable
// GUID:      {000208F0-0000-0000-C000-000000000046}
// *********************************************************************//
interface Series : public TDispWrapper<IDispatch>
{
  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application()
  {
    _TDispID _dispid(/* Application */ DISPID(148));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator()
  {
    _TDispID _dispid(/* Creator */ DISPID(149));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent()
  {
    _TDispID _dispid(/* Parent */ DISPID(150));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall ApplyDataLabels(Graph_2k::XlDataLabelsType Type/*[in,def,opt]*/
                                                         , 
                                                         TVariantInParam LegendKey/*[in,opt]*/= TNoParam()
                                                         , 
                                                         TVariantInParam AutoText/*[in,opt]*/= TNoParam()
                                                         , 
                                                         TVariantInParam HasLeaderLines/*[in,opt]*/= TNoParam())
  {
    _TDispID _dispid(/* ApplyDataLabels */ DISPID(151));
    TAutoArgs<4> _args;
    _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
    _args[2] = LegendKey /*[VT_VARIANT:0]*/;
    _args[3] = AutoText /*[VT_VARIANT:0]*/;
    _args[4] = HasLeaderLines /*[VT_VARIANT:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::XlAxisGroup /*[VT_USERDEFINED:0]*/ __fastcall get_AxisGroup()
  {
    _TDispID _dispid(/* AxisGroup */ DISPID(47));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlAxisGroup /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_AxisGroup(Graph_2k::XlAxisGroup Param1/*[in]*/)
  {
    _TDispID _dispid(/* AxisGroup */ DISPID(47));
    TAutoArgs<1> _args;
    _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Border()
  {
    _TDispID _dispid(/* Border */ DISPID(128));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Border* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall ClearFormats()
  {
    _TDispID _dispid(/* ClearFormats */ DISPID(112));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall DataLabels(TVariantInParam Index/*[in,opt]*/= TNoParam())
  {
    _TDispID _dispid(/* DataLabels */ DISPID(157));
    TAutoArgs<1> _args;
    _args[1] = Index /*[VT_VARIANT:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall Delete()
  {
    _TDispID _dispid(/* Delete */ DISPID(117));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall ErrorBar(Graph_2k::XlErrorBarDirection Direction/*[in]*/, 
                                                  Graph_2k::XlErrorBarInclude Include/*[in]*/, 
                                                  Graph_2k::XlErrorBarType Type/*[in]*/, 
                                                  TVariantInParam Amount/*[in,opt]*/= TNoParam(), 
                                                  TVariantInParam MinusValues/*[in,opt]*/= TNoParam())
  {
    _TDispID _dispid(/* ErrorBar */ DISPID(152));
    TAutoArgs<5> _args;
    _args[1] = (int)Direction /*[VT_USERDEFINED:0]*/;
    _args[2] = (int)Include /*[VT_USERDEFINED:0]*/;
    _args[3] = (int)Type /*[VT_USERDEFINED:0]*/;
    _args[4] = Amount /*[VT_VARIANT:0]*/;
    _args[5] = MinusValues /*[VT_VARIANT:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::ErrorBarsPtr /*[VT_USERDEFINED:1]*/ __fastcall get_ErrorBars()
  {
    _TDispID _dispid(/* ErrorBars */ DISPID(159));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::ErrorBars* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall get_Explosion()
  {
    _TDispID _dispid(/* Explosion */ DISPID(182));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Explosion(long Param1/*[in]*/)
  {
    _TDispID _dispid(/* Explosion */ DISPID(182));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_I4:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_HasDataLabels()
  {
    _TDispID _dispid(/* HasDataLabels */ DISPID(78));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_HasDataLabels(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* HasDataLabels */ DISPID(78));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_HasErrorBars()
  {
    _TDispID _dispid(/* HasErrorBars */ DISPID(160));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_HasErrorBars(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* HasErrorBars */ DISPID(160));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::InteriorPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Interior()
  {
    _TDispID _dispid(/* Interior */ DISPID(129));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Interior* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::ChartFillFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Fill()
  {
    _TDispID _dispid(/* Fill */ DISPID(1663));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::ChartFillFormat* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_InvertIfNegative()
  {
    _TDispID _dispid(/* InvertIfNegative */ DISPID(132));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_InvertIfNegative(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* InvertIfNegative */ DISPID(132));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_MarkerBackgroundColor()
  {
    _TDispID _dispid(/* MarkerBackgroundColor */ DISPID(73));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_MarkerBackgroundColor(long Param1/*[in]*/)
  {
    _TDispID _dispid(/* MarkerBackgroundColor */ DISPID(73));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_I4:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::XlColorIndex /*[VT_USERDEFINED:0]*/ __fastcall get_MarkerBackgroundColorIndex()
  {
    _TDispID _dispid(/* MarkerBackgroundColorIndex */ DISPID(74));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlColorIndex /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_MarkerBackgroundColorIndex(Graph_2k::XlColorIndex Param1/*[in]*/)
  {
    _TDispID _dispid(/* MarkerBackgroundColorIndex */ DISPID(74));
    TAutoArgs<1> _args;
    _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_MarkerForegroundColor()
  {
    _TDispID _dispid(/* MarkerForegroundColor */ DISPID(75));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_MarkerForegroundColor(long Param1/*[in]*/)
  {
    _TDispID _dispid(/* MarkerForegroundColor */ DISPID(75));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_I4:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::XlColorIndex /*[VT_USERDEFINED:0]*/ __fastcall get_MarkerForegroundColorIndex()
  {
    _TDispID _dispid(/* MarkerForegroundColorIndex */ DISPID(76));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlColorIndex /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_MarkerForegroundColorIndex(Graph_2k::XlColorIndex Param1/*[in]*/)
  {
    _TDispID _dispid(/* MarkerForegroundColorIndex */ DISPID(76));
    TAutoArgs<1> _args;
    _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_MarkerSize()
  {
    _TDispID _dispid(/* MarkerSize */ DISPID(231));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_MarkerSize(long Param1/*[in]*/)
  {
    _TDispID _dispid(/* MarkerSize */ DISPID(231));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_I4:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::XlMarkerStyle /*[VT_USERDEFINED:0]*/ __fastcall get_MarkerStyle()
  {
    _TDispID _dispid(/* MarkerStyle */ DISPID(72));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlMarkerStyle /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_MarkerStyle(Graph_2k::XlMarkerStyle Param1/*[in]*/)
  {
    _TDispID _dispid(/* MarkerStyle */ DISPID(72));
    TAutoArgs<1> _args;
    _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::XlChartPictureType /*[VT_USERDEFINED:0]*/ __fastcall get_PictureType()
  {
    _TDispID _dispid(/* PictureType */ DISPID(161));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlChartPictureType /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_PictureType(Graph_2k::XlChartPictureType Param1/*[in]*/)
  {
    _TDispID _dispid(/* PictureType */ DISPID(161));
    TAutoArgs<1> _args;
    _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_PictureUnit()
  {
    _TDispID _dispid(/* PictureUnit */ DISPID(162));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_PictureUnit(long Param1/*[in]*/)
  {
    _TDispID _dispid(/* PictureUnit */ DISPID(162));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_I4:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall Points(TVariantInParam Index/*[in,opt]*/= TNoParam())
  {
    _TDispID _dispid(/* Points */ DISPID(70));
    TAutoArgs<1> _args;
    _args[1] = Index /*[VT_VARIANT:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_Smooth()
  {
    _TDispID _dispid(/* Smooth */ DISPID(163));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Smooth(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* Smooth */ DISPID(163));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall Trendlines(TVariantInParam Index/*[in,opt]*/= TNoParam())
  {
    _TDispID _dispid(/* Trendlines */ DISPID(154));
    TAutoArgs<1> _args;
    _args[1] = Index /*[VT_VARIANT:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall get_Type()
  {
    _TDispID _dispid(/* Type */ DISPID(108));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Type(long Param1/*[in]*/)
  {
    _TDispID _dispid(/* Type */ DISPID(108));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_I4:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::XlChartType /*[VT_USERDEFINED:0]*/ __fastcall get_ChartType()
  {
    _TDispID _dispid(/* ChartType */ DISPID(1400));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlChartType /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_ChartType(Graph_2k::XlChartType Param1/*[in]*/)
  {
    _TDispID _dispid(/* ChartType */ DISPID(1400));
    TAutoArgs<1> _args;
    _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall ApplyCustomType(Graph_2k::XlChartType ChartType/*[in]*/)
  {
    _TDispID _dispid(/* ApplyCustomType */ DISPID(1401));
    TAutoArgs<1> _args;
    _args[1] = (int)ChartType /*[VT_USERDEFINED:0]*/;
    OleProcedure(_dispid, _args);
  }

  Graph_2k::XlBarShape /*[VT_USERDEFINED:0]*/ __fastcall get_BarShape()
  {
    _TDispID _dispid(/* BarShape */ DISPID(1403));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlBarShape /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_BarShape(Graph_2k::XlBarShape Param1/*[in]*/)
  {
    _TDispID _dispid(/* BarShape */ DISPID(1403));
    TAutoArgs<1> _args;
    _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_ApplyPictToSides()
  {
    _TDispID _dispid(/* ApplyPictToSides */ DISPID(1659));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_ApplyPictToSides(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* ApplyPictToSides */ DISPID(1659));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_ApplyPictToFront()
  {
    _TDispID _dispid(/* ApplyPictToFront */ DISPID(1660));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_ApplyPictToFront(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* ApplyPictToFront */ DISPID(1660));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_ApplyPictToEnd()
  {
    _TDispID _dispid(/* ApplyPictToEnd */ DISPID(1661));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_ApplyPictToEnd(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* ApplyPictToEnd */ DISPID(1661));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_Has3DEffect()
  {
    _TDispID _dispid(/* Has3DEffect */ DISPID(1665));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Has3DEffect(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* Has3DEffect */ DISPID(1665));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_Shadow()
  {
    _TDispID _dispid(/* Shadow */ DISPID(103));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Shadow(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* Shadow */ DISPID(103));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_HasLeaderLines()
  {
    _TDispID _dispid(/* HasLeaderLines */ DISPID(1394));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_HasLeaderLines(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* HasLeaderLines */ DISPID(1394));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::LeaderLinesPtr /*[VT_USERDEFINED:1]*/ __fastcall get_LeaderLines()
  {
    _TDispID _dispid(/* LeaderLines */ DISPID(1666));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::LeaderLines* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }


  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Graph_2k::XlAxisGroup AxisGroup = {read = get_AxisGroup, write = set_AxisGroup};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::ErrorBarsPtr ErrorBars = {read = get_ErrorBars};
  __property   long            Explosion = {read = get_Explosion, write = set_Explosion};
  __property   TOLEBOOL        HasDataLabels = {read = get_HasDataLabels, write = set_HasDataLabels};
  __property   TOLEBOOL        HasErrorBars = {read = get_HasErrorBars, write = set_HasErrorBars};
  __property   Graph_2k::InteriorPtr Interior = {read = get_Interior};
  __property   Graph_2k::ChartFillFormatPtr Fill = {read = get_Fill};
  __property   TOLEBOOL        InvertIfNegative = {read = get_InvertIfNegative, write = set_InvertIfNegative};
  __property   long            MarkerBackgroundColor = {read = get_MarkerBackgroundColor, write = set_MarkerBackgroundColor};
  __property   Graph_2k::XlColorIndex MarkerBackgroundColorIndex = {read = get_MarkerBackgroundColorIndex, write = set_MarkerBackgroundColorIndex};
  __property   long            MarkerForegroundColor = {read = get_MarkerForegroundColor, write = set_MarkerForegroundColor};
  __property   Graph_2k::XlColorIndex MarkerForegroundColorIndex = {read = get_MarkerForegroundColorIndex, write = set_MarkerForegroundColorIndex};
  __property   long            MarkerSize = {read = get_MarkerSize, write = set_MarkerSize};
  __property   Graph_2k::XlMarkerStyle MarkerStyle = {read = get_MarkerStyle, write = set_MarkerStyle};
  __property   Graph_2k::XlChartPictureType PictureType = {read = get_PictureType, write = set_PictureType};
  __property   long            PictureUnit = {read = get_PictureUnit, write = set_PictureUnit};
  __property   TOLEBOOL        Smooth = {read = get_Smooth, write = set_Smooth};
  __property   long            Type = {read = get_Type, write = set_Type};
  __property   Graph_2k::XlChartType ChartType = {read = get_ChartType, write = set_ChartType};
  __property   Graph_2k::XlBarShape BarShape = {read = get_BarShape, write = set_BarShape};
  __property   TOLEBOOL        ApplyPictToSides = {read = get_ApplyPictToSides, write = set_ApplyPictToSides};
  __property   TOLEBOOL        ApplyPictToFront = {read = get_ApplyPictToFront, write = set_ApplyPictToFront};
  __property   TOLEBOOL        ApplyPictToEnd = {read = get_ApplyPictToEnd, write = set_ApplyPictToEnd};
  __property   TOLEBOOL        Has3DEffect = {read = get_Has3DEffect, write = set_Has3DEffect};
  __property   TOLEBOOL        Shadow = {read = get_Shadow, write = set_Shadow};
  __property   TOLEBOOL        HasLeaderLines = {read = get_HasLeaderLines, write = set_HasLeaderLines};
  __property   Graph_2k::LeaderLinesPtr LeaderLines = {read = get_LeaderLines};
};
// *********************************************************************//
// Interface: SeriesCollection
// Flags:     (4096) Dispatchable
// GUID:      {000208EF-0000-0000-C000-000000000046}
// *********************************************************************//
interface SeriesCollection : public TDispWrapper<IDispatch>
{
  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application()
  {
    _TDispID _dispid(/* Application */ DISPID(148));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator()
  {
    _TDispID _dispid(/* Creator */ DISPID(149));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent()
  {
    _TDispID _dispid(/* Parent */ DISPID(150));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall get_Count()
  {
    _TDispID _dispid(/* Count */ DISPID(118));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::SeriesPtr /*[VT_USERDEFINED:1]*/ __fastcall Item(TVariantInParam Index/*[in]*/)
  {
    _TDispID _dispid(/* Item */ DISPID(170));
    TAutoArgs<1> _args;
    _args[1] = Index /*[VT_VARIANT:0]*/;
    OleFunction(_dispid, _args);
    return (Graph_2k::Series* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  LPUNKNOWN /*[VT_UNKNOWN:0]*/ __fastcall _NewEnum()
  {
    _TDispID _dispid(/* _NewEnum */ DISPID(-4));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }


  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};
};
// *********************************************************************//
// Interface: DataLabel
// Flags:     (4096) Dispatchable
// GUID:      {000208E9-0000-0000-C000-000000000046}
// *********************************************************************//
interface DataLabel : public TDispWrapper<IDispatch>
{
  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application()
  {
    _TDispID _dispid(/* Application */ DISPID(148));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator()
  {
    _TDispID _dispid(/* Creator */ DISPID(149));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent()
  {
    _TDispID _dispid(/* Parent */ DISPID(150));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Name()
  {
    _TDispID _dispid(/* Name */ DISPID(110));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Border()
  {
    _TDispID _dispid(/* Border */ DISPID(128));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Border* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall Delete()
  {
    _TDispID _dispid(/* Delete */ DISPID(117));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::InteriorPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Interior()
  {
    _TDispID _dispid(/* Interior */ DISPID(129));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Interior* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::ChartFillFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Fill()
  {
    _TDispID _dispid(/* Fill */ DISPID(1663));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::ChartFillFormat* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Caption()
  {
    _TDispID _dispid(/* Caption */ DISPID(139));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Caption(BSTR Param1/*[in]*/)
  {
    _TDispID _dispid(/* Caption */ DISPID(139));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BSTR:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::FontPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Font()
  {
    _TDispID _dispid(/* Font */ DISPID(146));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Font* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_HorizontalAlignment()
  {
    _TDispID _dispid(/* HorizontalAlignment */ DISPID(136));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_HorizontalAlignment(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* HorizontalAlignment */ DISPID(136));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  double /*[VT_R8:0]*/ __fastcall get_Left()
  {
    _TDispID _dispid(/* Left */ DISPID(127));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Left(double Param1/*[in]*/)
  {
    _TDispID _dispid(/* Left */ DISPID(127));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_R8:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Orientation()
  {
    _TDispID _dispid(/* Orientation */ DISPID(134));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Orientation(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* Orientation */ DISPID(134));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_Shadow()
  {
    _TDispID _dispid(/* Shadow */ DISPID(103));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Shadow(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* Shadow */ DISPID(103));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Text()
  {
    _TDispID _dispid(/* Text */ DISPID(138));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Text(BSTR Param1/*[in]*/)
  {
    _TDispID _dispid(/* Text */ DISPID(138));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BSTR:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  double /*[VT_R8:0]*/ __fastcall get_Top()
  {
    _TDispID _dispid(/* Top */ DISPID(126));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Top(double Param1/*[in]*/)
  {
    _TDispID _dispid(/* Top */ DISPID(126));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_R8:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_VerticalAlignment()
  {
    _TDispID _dispid(/* VerticalAlignment */ DISPID(137));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_VerticalAlignment(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* VerticalAlignment */ DISPID(137));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_ReadingOrder()
  {
    _TDispID _dispid(/* ReadingOrder */ DISPID(975));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_ReadingOrder(long Param1/*[in]*/)
  {
    _TDispID _dispid(/* ReadingOrder */ DISPID(975));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_I4:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_AutoScaleFont()
  {
    _TDispID _dispid(/* AutoScaleFont */ DISPID(1525));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_AutoScaleFont(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* AutoScaleFont */ DISPID(1525));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_AutoText()
  {
    _TDispID _dispid(/* AutoText */ DISPID(135));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_AutoText(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* AutoText */ DISPID(135));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_NumberFormat()
  {
    _TDispID _dispid(/* NumberFormat */ DISPID(193));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_NumberFormat(BSTR Param1/*[in]*/)
  {
    _TDispID _dispid(/* NumberFormat */ DISPID(193));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BSTR:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_NumberFormatLocal()
  {
    _TDispID _dispid(/* NumberFormatLocal */ DISPID(1097));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_NumberFormatLocal(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* NumberFormatLocal */ DISPID(1097));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_ShowLegendKey()
  {
    _TDispID _dispid(/* ShowLegendKey */ DISPID(171));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_ShowLegendKey(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* ShowLegendKey */ DISPID(171));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Type()
  {
    _TDispID _dispid(/* Type */ DISPID(108));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Type(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* Type */ DISPID(108));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::XlDataLabelPosition /*[VT_USERDEFINED:0]*/ __fastcall get_Position()
  {
    _TDispID _dispid(/* Position */ DISPID(133));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlDataLabelPosition /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Position(Graph_2k::XlDataLabelPosition Param1/*[in]*/)
  {
    _TDispID _dispid(/* Position */ DISPID(133));
    TAutoArgs<1> _args;
    _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
    OlePropertyPut(_dispid, _args);
  }


  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::InteriorPtr Interior = {read = get_Interior};
  __property   Graph_2k::ChartFillFormatPtr Fill = {read = get_Fill};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   Graph_2k::FontPtr Font = {read = get_Font};
  __property   double          Left = {read = get_Left, write = set_Left};
  __property   TOLEBOOL        Shadow = {read = get_Shadow, write = set_Shadow};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   double          Top = {read = get_Top, write = set_Top};
  __property   long            ReadingOrder = {read = get_ReadingOrder, write = set_ReadingOrder};
  __property   TOLEBOOL        AutoText = {read = get_AutoText, write = set_AutoText};
  __property   BSTR            NumberFormat = {read = get_NumberFormat, write = set_NumberFormat};
  __property   TOLEBOOL        ShowLegendKey = {read = get_ShowLegendKey, write = set_ShowLegendKey};
  __property   Graph_2k::XlDataLabelPosition Position = {read = get_Position, write = set_Position};
};
// *********************************************************************//
// Interface: DataLabels
// Flags:     (4096) Dispatchable
// GUID:      {000208E8-0000-0000-C000-000000000046}
// *********************************************************************//
interface DataLabels : public TDispWrapper<IDispatch>
{
  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application()
  {
    _TDispID _dispid(/* Application */ DISPID(148));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator()
  {
    _TDispID _dispid(/* Creator */ DISPID(149));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent()
  {
    _TDispID _dispid(/* Parent */ DISPID(150));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Name()
  {
    _TDispID _dispid(/* Name */ DISPID(110));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Border()
  {
    _TDispID _dispid(/* Border */ DISPID(128));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Border* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall Delete()
  {
    _TDispID _dispid(/* Delete */ DISPID(117));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::InteriorPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Interior()
  {
    _TDispID _dispid(/* Interior */ DISPID(129));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Interior* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::ChartFillFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Fill()
  {
    _TDispID _dispid(/* Fill */ DISPID(1663));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::ChartFillFormat* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall _Dummy8()
  {
    _TDispID _dispid(/* _Dummy8 */ DISPID(65544));
    OleProcedure(_dispid);
  }

  Graph_2k::FontPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Font()
  {
    _TDispID _dispid(/* Font */ DISPID(146));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Font* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_HorizontalAlignment()
  {
    _TDispID _dispid(/* HorizontalAlignment */ DISPID(136));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_HorizontalAlignment(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* HorizontalAlignment */ DISPID(136));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall _Dummy11()
  {
    _TDispID _dispid(/* _Dummy11 */ DISPID(65547));
    OleProcedure(_dispid);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Orientation()
  {
    _TDispID _dispid(/* Orientation */ DISPID(134));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Orientation(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* Orientation */ DISPID(134));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_Shadow()
  {
    _TDispID _dispid(/* Shadow */ DISPID(103));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Shadow(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* Shadow */ DISPID(103));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall _Dummy14()
  {
    _TDispID _dispid(/* _Dummy14 */ DISPID(65550));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall _Dummy15()
  {
    _TDispID _dispid(/* _Dummy15 */ DISPID(65551));
    OleProcedure(_dispid);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_VerticalAlignment()
  {
    _TDispID _dispid(/* VerticalAlignment */ DISPID(137));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_VerticalAlignment(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* VerticalAlignment */ DISPID(137));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_ReadingOrder()
  {
    _TDispID _dispid(/* ReadingOrder */ DISPID(975));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_ReadingOrder(long Param1/*[in]*/)
  {
    _TDispID _dispid(/* ReadingOrder */ DISPID(975));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_I4:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_AutoScaleFont()
  {
    _TDispID _dispid(/* AutoScaleFont */ DISPID(1525));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_AutoScaleFont(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* AutoScaleFont */ DISPID(1525));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_AutoText()
  {
    _TDispID _dispid(/* AutoText */ DISPID(135));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_AutoText(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* AutoText */ DISPID(135));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_NumberFormat()
  {
    _TDispID _dispid(/* NumberFormat */ DISPID(193));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_NumberFormat(BSTR Param1/*[in]*/)
  {
    _TDispID _dispid(/* NumberFormat */ DISPID(193));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BSTR:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_NumberFormatLocal()
  {
    _TDispID _dispid(/* NumberFormatLocal */ DISPID(1097));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_NumberFormatLocal(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* NumberFormatLocal */ DISPID(1097));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_ShowLegendKey()
  {
    _TDispID _dispid(/* ShowLegendKey */ DISPID(171));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_ShowLegendKey(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* ShowLegendKey */ DISPID(171));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Type()
  {
    _TDispID _dispid(/* Type */ DISPID(108));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Type(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* Type */ DISPID(108));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::XlDataLabelPosition /*[VT_USERDEFINED:0]*/ __fastcall get_Position()
  {
    _TDispID _dispid(/* Position */ DISPID(133));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlDataLabelPosition /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Position(Graph_2k::XlDataLabelPosition Param1/*[in]*/)
  {
    _TDispID _dispid(/* Position */ DISPID(133));
    TAutoArgs<1> _args;
    _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_Count()
  {
    _TDispID _dispid(/* Count */ DISPID(118));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::DataLabelPtr /*[VT_USERDEFINED:1]*/ __fastcall Item(TVariantInParam Index/*[in]*/)
  {
    _TDispID _dispid(/* Item */ DISPID(170));
    TAutoArgs<1> _args;
    _args[1] = Index /*[VT_VARIANT:0]*/;
    OleFunction(_dispid, _args);
    return (Graph_2k::DataLabel* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  LPUNKNOWN /*[VT_UNKNOWN:0]*/ __fastcall _NewEnum()
  {
    _TDispID _dispid(/* _NewEnum */ DISPID(-4));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall _Dummy28()
  {
    _TDispID _dispid(/* _Dummy28 */ DISPID(65564));
    OleProcedure(_dispid);
  }


  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::InteriorPtr Interior = {read = get_Interior};
  __property   Graph_2k::ChartFillFormatPtr Fill = {read = get_Fill};
  __property   Graph_2k::FontPtr Font = {read = get_Font};
  __property   TOLEBOOL        Shadow = {read = get_Shadow, write = set_Shadow};
  __property   long            ReadingOrder = {read = get_ReadingOrder, write = set_ReadingOrder};
  __property   TOLEBOOL        AutoText = {read = get_AutoText, write = set_AutoText};
  __property   BSTR            NumberFormat = {read = get_NumberFormat, write = set_NumberFormat};
  __property   TOLEBOOL        ShowLegendKey = {read = get_ShowLegendKey, write = set_ShowLegendKey};
  __property   Graph_2k::XlDataLabelPosition Position = {read = get_Position, write = set_Position};
  __property   long            Count = {read = get_Count};
};
// *********************************************************************//
// Interface: LegendEntry
// Flags:     (4096) Dispatchable
// GUID:      {000208E7-0000-0000-C000-000000000046}
// *********************************************************************//
interface LegendEntry : public TDispWrapper<IDispatch>
{
  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application()
  {
    _TDispID _dispid(/* Application */ DISPID(148));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator()
  {
    _TDispID _dispid(/* Creator */ DISPID(149));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent()
  {
    _TDispID _dispid(/* Parent */ DISPID(150));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall Delete()
  {
    _TDispID _dispid(/* Delete */ DISPID(117));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::FontPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Font()
  {
    _TDispID _dispid(/* Font */ DISPID(146));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Font* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall get_Index()
  {
    _TDispID _dispid(/* Index */ DISPID(486));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::LegendKeyPtr /*[VT_USERDEFINED:1]*/ __fastcall get_LegendKey()
  {
    _TDispID _dispid(/* LegendKey */ DISPID(174));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::LegendKey* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_AutoScaleFont()
  {
    _TDispID _dispid(/* AutoScaleFont */ DISPID(1525));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_AutoScaleFont(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* AutoScaleFont */ DISPID(1525));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  double /*[VT_R8:0]*/ __fastcall get_Left()
  {
    _TDispID _dispid(/* Left */ DISPID(127));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  double /*[VT_R8:0]*/ __fastcall get_Top()
  {
    _TDispID _dispid(/* Top */ DISPID(126));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  double /*[VT_R8:0]*/ __fastcall get_Width()
  {
    _TDispID _dispid(/* Width */ DISPID(122));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  double /*[VT_R8:0]*/ __fastcall get_Height()
  {
    _TDispID _dispid(/* Height */ DISPID(123));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }


  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Graph_2k::FontPtr Font = {read = get_Font};
  __property   long            Index = {read = get_Index};
  __property   Graph_2k::LegendKeyPtr LegendKey = {read = get_LegendKey};
  __property   double          Left = {read = get_Left};
  __property   double          Top = {read = get_Top};
  __property   double          Width = {read = get_Width};
  __property   double          Height = {read = get_Height};
};
// *********************************************************************//
// Interface: LegendEntries
// Flags:     (4096) Dispatchable
// GUID:      {000208E6-0000-0000-C000-000000000046}
// *********************************************************************//
interface LegendEntries : public TDispWrapper<IDispatch>
{
  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application()
  {
    _TDispID _dispid(/* Application */ DISPID(148));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator()
  {
    _TDispID _dispid(/* Creator */ DISPID(149));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent()
  {
    _TDispID _dispid(/* Parent */ DISPID(150));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall get_Count()
  {
    _TDispID _dispid(/* Count */ DISPID(118));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::LegendEntryPtr /*[VT_USERDEFINED:1]*/ __fastcall Item(TVariantInParam Index/*[in]*/)
  {
    _TDispID _dispid(/* Item */ DISPID(170));
    TAutoArgs<1> _args;
    _args[1] = Index /*[VT_VARIANT:0]*/;
    OleFunction(_dispid, _args);
    return (Graph_2k::LegendEntry* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  LPUNKNOWN /*[VT_UNKNOWN:0]*/ __fastcall _NewEnum()
  {
    _TDispID _dispid(/* _NewEnum */ DISPID(-4));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }


  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};
};
// *********************************************************************//
// Interface: LegendKey
// Flags:     (4096) Dispatchable
// GUID:      {000208E5-0000-0000-C000-000000000046}
// *********************************************************************//
interface LegendKey : public TDispWrapper<IDispatch>
{
  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application()
  {
    _TDispID _dispid(/* Application */ DISPID(148));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator()
  {
    _TDispID _dispid(/* Creator */ DISPID(149));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent()
  {
    _TDispID _dispid(/* Parent */ DISPID(150));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Border()
  {
    _TDispID _dispid(/* Border */ DISPID(128));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Border* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall ClearFormats()
  {
    _TDispID _dispid(/* ClearFormats */ DISPID(112));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall Delete()
  {
    _TDispID _dispid(/* Delete */ DISPID(117));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::InteriorPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Interior()
  {
    _TDispID _dispid(/* Interior */ DISPID(129));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Interior* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::ChartFillFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Fill()
  {
    _TDispID _dispid(/* Fill */ DISPID(1663));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::ChartFillFormat* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_InvertIfNegative()
  {
    _TDispID _dispid(/* InvertIfNegative */ DISPID(132));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_InvertIfNegative(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* InvertIfNegative */ DISPID(132));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_MarkerBackgroundColor()
  {
    _TDispID _dispid(/* MarkerBackgroundColor */ DISPID(73));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_MarkerBackgroundColor(long Param1/*[in]*/)
  {
    _TDispID _dispid(/* MarkerBackgroundColor */ DISPID(73));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_I4:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::XlColorIndex /*[VT_USERDEFINED:0]*/ __fastcall get_MarkerBackgroundColorIndex()
  {
    _TDispID _dispid(/* MarkerBackgroundColorIndex */ DISPID(74));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlColorIndex /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_MarkerBackgroundColorIndex(Graph_2k::XlColorIndex Param1/*[in]*/)
  {
    _TDispID _dispid(/* MarkerBackgroundColorIndex */ DISPID(74));
    TAutoArgs<1> _args;
    _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_MarkerForegroundColor()
  {
    _TDispID _dispid(/* MarkerForegroundColor */ DISPID(75));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_MarkerForegroundColor(long Param1/*[in]*/)
  {
    _TDispID _dispid(/* MarkerForegroundColor */ DISPID(75));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_I4:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::XlColorIndex /*[VT_USERDEFINED:0]*/ __fastcall get_MarkerForegroundColorIndex()
  {
    _TDispID _dispid(/* MarkerForegroundColorIndex */ DISPID(76));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlColorIndex /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_MarkerForegroundColorIndex(Graph_2k::XlColorIndex Param1/*[in]*/)
  {
    _TDispID _dispid(/* MarkerForegroundColorIndex */ DISPID(76));
    TAutoArgs<1> _args;
    _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_MarkerSize()
  {
    _TDispID _dispid(/* MarkerSize */ DISPID(231));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_MarkerSize(long Param1/*[in]*/)
  {
    _TDispID _dispid(/* MarkerSize */ DISPID(231));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_I4:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::XlMarkerStyle /*[VT_USERDEFINED:0]*/ __fastcall get_MarkerStyle()
  {
    _TDispID _dispid(/* MarkerStyle */ DISPID(72));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlMarkerStyle /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_MarkerStyle(Graph_2k::XlMarkerStyle Param1/*[in]*/)
  {
    _TDispID _dispid(/* MarkerStyle */ DISPID(72));
    TAutoArgs<1> _args;
    _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_PictureType()
  {
    _TDispID _dispid(/* PictureType */ DISPID(161));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_PictureType(long Param1/*[in]*/)
  {
    _TDispID _dispid(/* PictureType */ DISPID(161));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_I4:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_PictureUnit()
  {
    _TDispID _dispid(/* PictureUnit */ DISPID(162));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_PictureUnit(long Param1/*[in]*/)
  {
    _TDispID _dispid(/* PictureUnit */ DISPID(162));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_I4:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_Smooth()
  {
    _TDispID _dispid(/* Smooth */ DISPID(163));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Smooth(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* Smooth */ DISPID(163));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  double /*[VT_R8:0]*/ __fastcall get_Left()
  {
    _TDispID _dispid(/* Left */ DISPID(127));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  double /*[VT_R8:0]*/ __fastcall get_Top()
  {
    _TDispID _dispid(/* Top */ DISPID(126));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  double /*[VT_R8:0]*/ __fastcall get_Width()
  {
    _TDispID _dispid(/* Width */ DISPID(122));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  double /*[VT_R8:0]*/ __fastcall get_Height()
  {
    _TDispID _dispid(/* Height */ DISPID(123));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_Shadow()
  {
    _TDispID _dispid(/* Shadow */ DISPID(103));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Shadow(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* Shadow */ DISPID(103));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }


  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::InteriorPtr Interior = {read = get_Interior};
  __property   Graph_2k::ChartFillFormatPtr Fill = {read = get_Fill};
  __property   TOLEBOOL        InvertIfNegative = {read = get_InvertIfNegative, write = set_InvertIfNegative};
  __property   long            MarkerBackgroundColor = {read = get_MarkerBackgroundColor, write = set_MarkerBackgroundColor};
  __property   Graph_2k::XlColorIndex MarkerBackgroundColorIndex = {read = get_MarkerBackgroundColorIndex, write = set_MarkerBackgroundColorIndex};
  __property   long            MarkerForegroundColor = {read = get_MarkerForegroundColor, write = set_MarkerForegroundColor};
  __property   Graph_2k::XlColorIndex MarkerForegroundColorIndex = {read = get_MarkerForegroundColorIndex, write = set_MarkerForegroundColorIndex};
  __property   long            MarkerSize = {read = get_MarkerSize, write = set_MarkerSize};
  __property   Graph_2k::XlMarkerStyle MarkerStyle = {read = get_MarkerStyle, write = set_MarkerStyle};
  __property   long            PictureType = {read = get_PictureType, write = set_PictureType};
  __property   long            PictureUnit = {read = get_PictureUnit, write = set_PictureUnit};
  __property   TOLEBOOL        Smooth = {read = get_Smooth, write = set_Smooth};
  __property   double          Left = {read = get_Left};
  __property   double          Top = {read = get_Top};
  __property   double          Width = {read = get_Width};
  __property   double          Height = {read = get_Height};
  __property   TOLEBOOL        Shadow = {read = get_Shadow, write = set_Shadow};
};
// *********************************************************************//
// Interface: Trendlines
// Flags:     (4096) Dispatchable
// GUID:      {000208E4-0000-0000-C000-000000000046}
// *********************************************************************//
interface Trendlines : public TDispWrapper<IDispatch>
{
  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application()
  {
    _TDispID _dispid(/* Application */ DISPID(148));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator()
  {
    _TDispID _dispid(/* Creator */ DISPID(149));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent()
  {
    _TDispID _dispid(/* Parent */ DISPID(150));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::TrendlinePtr /*[VT_USERDEFINED:1]*/ __fastcall Add(Graph_2k::XlTrendlineType Type/*[in,def,opt]*/
                                                               , 
                                                               TVariantInParam Order/*[in,opt]*/= TNoParam()
                                                               , 
                                                               TVariantInParam Period/*[in,opt]*/= TNoParam()
                                                               , 
                                                               TVariantInParam Forward/*[in,opt]*/= TNoParam()
                                                               , 
                                                               TVariantInParam Backward/*[in,opt]*/= TNoParam()
                                                               , 
                                                               TVariantInParam Intercept/*[in,opt]*/= TNoParam()
                                                               , 
                                                               TVariantInParam DisplayEquation/*[in,opt]*/= TNoParam()
                                                               , 
                                                               TVariantInParam DisplayRSquared/*[in,opt]*/= TNoParam()
                                                               , 
                                                               TVariantInParam Name/*[in,opt]*/= TNoParam())
  {
    _TDispID _dispid(/* Add */ DISPID(181));
    TAutoArgs<9> _args;
    _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
    _args[2] = Order /*[VT_VARIANT:0]*/;
    _args[3] = Period /*[VT_VARIANT:0]*/;
    _args[4] = Forward /*[VT_VARIANT:0]*/;
    _args[5] = Backward /*[VT_VARIANT:0]*/;
    _args[6] = Intercept /*[VT_VARIANT:0]*/;
    _args[7] = DisplayEquation /*[VT_VARIANT:0]*/;
    _args[8] = DisplayRSquared /*[VT_VARIANT:0]*/;
    _args[9] = Name /*[VT_VARIANT:0]*/;
    OleFunction(_dispid, _args);
    return (Graph_2k::Trendline* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall get_Count()
  {
    _TDispID _dispid(/* Count */ DISPID(118));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::TrendlinePtr /*[VT_USERDEFINED:1]*/ __fastcall Item(TVariantInParam Index/*[in,opt]*/= TNoParam())
  {
    _TDispID _dispid(/* Item */ DISPID(170));
    TAutoArgs<1> _args;
    _args[1] = Index /*[VT_VARIANT:0]*/;
    OleFunction(_dispid, _args);
    return (Graph_2k::Trendline* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  LPUNKNOWN /*[VT_UNKNOWN:0]*/ __fastcall _NewEnum()
  {
    _TDispID _dispid(/* _NewEnum */ DISPID(-4));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }


  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};
};
// *********************************************************************//
// Interface: Trendline
// Flags:     (4096) Dispatchable
// GUID:      {000208E3-0000-0000-C000-000000000046}
// *********************************************************************//
interface Trendline : public TDispWrapper<IDispatch>
{
  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application()
  {
    _TDispID _dispid(/* Application */ DISPID(148));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator()
  {
    _TDispID _dispid(/* Creator */ DISPID(149));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent()
  {
    _TDispID _dispid(/* Parent */ DISPID(150));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall get_Backward()
  {
    _TDispID _dispid(/* Backward */ DISPID(185));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Backward(long Param1/*[in]*/)
  {
    _TDispID _dispid(/* Backward */ DISPID(185));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_I4:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Border()
  {
    _TDispID _dispid(/* Border */ DISPID(128));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Border* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall ClearFormats()
  {
    _TDispID _dispid(/* ClearFormats */ DISPID(112));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::DataLabelPtr /*[VT_USERDEFINED:1]*/ __fastcall get_DataLabel()
  {
    _TDispID _dispid(/* DataLabel */ DISPID(158));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::DataLabel* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall Delete()
  {
    _TDispID _dispid(/* Delete */ DISPID(117));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_DisplayEquation()
  {
    _TDispID _dispid(/* DisplayEquation */ DISPID(190));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_DisplayEquation(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* DisplayEquation */ DISPID(190));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_DisplayRSquared()
  {
    _TDispID _dispid(/* DisplayRSquared */ DISPID(189));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_DisplayRSquared(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* DisplayRSquared */ DISPID(189));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_Forward()
  {
    _TDispID _dispid(/* Forward */ DISPID(191));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Forward(long Param1/*[in]*/)
  {
    _TDispID _dispid(/* Forward */ DISPID(191));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_I4:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_Index()
  {
    _TDispID _dispid(/* Index */ DISPID(486));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  double /*[VT_R8:0]*/ __fastcall get_Intercept()
  {
    _TDispID _dispid(/* Intercept */ DISPID(186));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Intercept(double Param1/*[in]*/)
  {
    _TDispID _dispid(/* Intercept */ DISPID(186));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_R8:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_InterceptIsAuto()
  {
    _TDispID _dispid(/* InterceptIsAuto */ DISPID(187));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_InterceptIsAuto(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* InterceptIsAuto */ DISPID(187));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Name()
  {
    _TDispID _dispid(/* Name */ DISPID(110));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Name(BSTR Param1/*[in]*/)
  {
    _TDispID _dispid(/* Name */ DISPID(110));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BSTR:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_NameIsAuto()
  {
    _TDispID _dispid(/* NameIsAuto */ DISPID(188));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_NameIsAuto(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* NameIsAuto */ DISPID(188));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_Order()
  {
    _TDispID _dispid(/* Order */ DISPID(192));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Order(long Param1/*[in]*/)
  {
    _TDispID _dispid(/* Order */ DISPID(192));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_I4:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_Period()
  {
    _TDispID _dispid(/* Period */ DISPID(184));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Period(long Param1/*[in]*/)
  {
    _TDispID _dispid(/* Period */ DISPID(184));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_I4:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::XlTrendlineType /*[VT_USERDEFINED:0]*/ __fastcall get_Type()
  {
    _TDispID _dispid(/* Type */ DISPID(108));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlTrendlineType /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Type(Graph_2k::XlTrendlineType Param1/*[in]*/)
  {
    _TDispID _dispid(/* Type */ DISPID(108));
    TAutoArgs<1> _args;
    _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
    OlePropertyPut(_dispid, _args);
  }


  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   long            Backward = {read = get_Backward, write = set_Backward};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::DataLabelPtr DataLabel = {read = get_DataLabel};
  __property   TOLEBOOL        DisplayEquation = {read = get_DisplayEquation, write = set_DisplayEquation};
  __property   TOLEBOOL        DisplayRSquared = {read = get_DisplayRSquared, write = set_DisplayRSquared};
  __property   long            Forward = {read = get_Forward, write = set_Forward};
  __property   long            Index = {read = get_Index};
  __property   double          Intercept = {read = get_Intercept, write = set_Intercept};
  __property   TOLEBOOL        InterceptIsAuto = {read = get_InterceptIsAuto, write = set_InterceptIsAuto};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   TOLEBOOL        NameIsAuto = {read = get_NameIsAuto, write = set_NameIsAuto};
  __property   long            Order = {read = get_Order, write = set_Order};
  __property   long            Period = {read = get_Period, write = set_Period};
  __property   Graph_2k::XlTrendlineType Type = {read = get_Type, write = set_Type};
};
// *********************************************************************//
// Interface: Corners
// Flags:     (4096) Dispatchable
// GUID:      {000208E2-0000-0000-C000-000000000046}
// *********************************************************************//
interface Corners : public TDispWrapper<IDispatch>
{
  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application()
  {
    _TDispID _dispid(/* Application */ DISPID(148));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator()
  {
    _TDispID _dispid(/* Creator */ DISPID(149));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent()
  {
    _TDispID _dispid(/* Parent */ DISPID(150));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Name()
  {
    _TDispID _dispid(/* Name */ DISPID(110));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }


  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
};
// *********************************************************************//
// Interface: SeriesLines
// Flags:     (4096) Dispatchable
// GUID:      {000208E1-0000-0000-C000-000000000046}
// *********************************************************************//
interface SeriesLines : public TDispWrapper<IDispatch>
{
  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application()
  {
    _TDispID _dispid(/* Application */ DISPID(148));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator()
  {
    _TDispID _dispid(/* Creator */ DISPID(149));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent()
  {
    _TDispID _dispid(/* Parent */ DISPID(150));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Name()
  {
    _TDispID _dispid(/* Name */ DISPID(110));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Border()
  {
    _TDispID _dispid(/* Border */ DISPID(128));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Border* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall Delete()
  {
    _TDispID _dispid(/* Delete */ DISPID(117));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }


  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
};
// *********************************************************************//
// Interface: HiLoLines
// Flags:     (4096) Dispatchable
// GUID:      {000208E0-0000-0000-C000-000000000046}
// *********************************************************************//
interface HiLoLines : public TDispWrapper<IDispatch>
{
  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application()
  {
    _TDispID _dispid(/* Application */ DISPID(148));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator()
  {
    _TDispID _dispid(/* Creator */ DISPID(149));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent()
  {
    _TDispID _dispid(/* Parent */ DISPID(150));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Name()
  {
    _TDispID _dispid(/* Name */ DISPID(110));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Border()
  {
    _TDispID _dispid(/* Border */ DISPID(128));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Border* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall Delete()
  {
    _TDispID _dispid(/* Delete */ DISPID(117));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }


  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
};
// *********************************************************************//
// Interface: Gridlines
// Flags:     (4096) Dispatchable
// GUID:      {00024700-0000-0000-C000-000000000046}
// *********************************************************************//
interface Gridlines : public TDispWrapper<IDispatch>
{
  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application()
  {
    _TDispID _dispid(/* Application */ DISPID(148));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator()
  {
    _TDispID _dispid(/* Creator */ DISPID(149));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent()
  {
    _TDispID _dispid(/* Parent */ DISPID(150));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Name()
  {
    _TDispID _dispid(/* Name */ DISPID(110));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Border()
  {
    _TDispID _dispid(/* Border */ DISPID(128));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Border* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall Delete()
  {
    _TDispID _dispid(/* Delete */ DISPID(117));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }


  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
};
// *********************************************************************//
// Interface: DropLines
// Flags:     (4096) Dispatchable
// GUID:      {00024701-0000-0000-C000-000000000046}
// *********************************************************************//
interface DropLines : public TDispWrapper<IDispatch>
{
  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application()
  {
    _TDispID _dispid(/* Application */ DISPID(148));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator()
  {
    _TDispID _dispid(/* Creator */ DISPID(149));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent()
  {
    _TDispID _dispid(/* Parent */ DISPID(150));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Name()
  {
    _TDispID _dispid(/* Name */ DISPID(110));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Border()
  {
    _TDispID _dispid(/* Border */ DISPID(128));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Border* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall Delete()
  {
    _TDispID _dispid(/* Delete */ DISPID(117));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }


  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
};
// *********************************************************************//
// Interface: LeaderLines
// Flags:     (4096) Dispatchable
// GUID:      {0002441E-0000-0000-C000-000000000046}
// *********************************************************************//
interface LeaderLines : public TDispWrapper<IDispatch>
{
  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application()
  {
    _TDispID _dispid(/* Application */ DISPID(148));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator()
  {
    _TDispID _dispid(/* Creator */ DISPID(149));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent()
  {
    _TDispID _dispid(/* Parent */ DISPID(150));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Border()
  {
    _TDispID _dispid(/* Border */ DISPID(128));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Border* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall Delete()
  {
    _TDispID _dispid(/* Delete */ DISPID(117));
    OleProcedure(_dispid);
  }


  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
};
// *********************************************************************//
// Interface: UpBars
// Flags:     (4096) Dispatchable
// GUID:      {00024702-0000-0000-C000-000000000046}
// *********************************************************************//
interface UpBars : public TDispWrapper<IDispatch>
{
  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application()
  {
    _TDispID _dispid(/* Application */ DISPID(148));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator()
  {
    _TDispID _dispid(/* Creator */ DISPID(149));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent()
  {
    _TDispID _dispid(/* Parent */ DISPID(150));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Name()
  {
    _TDispID _dispid(/* Name */ DISPID(110));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Border()
  {
    _TDispID _dispid(/* Border */ DISPID(128));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Border* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall Delete()
  {
    _TDispID _dispid(/* Delete */ DISPID(117));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::InteriorPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Interior()
  {
    _TDispID _dispid(/* Interior */ DISPID(129));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Interior* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::ChartFillFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Fill()
  {
    _TDispID _dispid(/* Fill */ DISPID(1663));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::ChartFillFormat* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }


  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::InteriorPtr Interior = {read = get_Interior};
  __property   Graph_2k::ChartFillFormatPtr Fill = {read = get_Fill};
};
// *********************************************************************//
// Interface: DownBars
// Flags:     (4096) Dispatchable
// GUID:      {00024703-0000-0000-C000-000000000046}
// *********************************************************************//
interface DownBars : public TDispWrapper<IDispatch>
{
  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application()
  {
    _TDispID _dispid(/* Application */ DISPID(148));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator()
  {
    _TDispID _dispid(/* Creator */ DISPID(149));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent()
  {
    _TDispID _dispid(/* Parent */ DISPID(150));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Name()
  {
    _TDispID _dispid(/* Name */ DISPID(110));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Border()
  {
    _TDispID _dispid(/* Border */ DISPID(128));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Border* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall Delete()
  {
    _TDispID _dispid(/* Delete */ DISPID(117));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::InteriorPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Interior()
  {
    _TDispID _dispid(/* Interior */ DISPID(129));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Interior* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::ChartFillFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Fill()
  {
    _TDispID _dispid(/* Fill */ DISPID(1663));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::ChartFillFormat* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }


  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::InteriorPtr Interior = {read = get_Interior};
  __property   Graph_2k::ChartFillFormatPtr Fill = {read = get_Fill};
};
// *********************************************************************//
// Interface: Floor
// Flags:     (4096) Dispatchable
// GUID:      {00024704-0000-0000-C000-000000000046}
// *********************************************************************//
interface Floor : public TDispWrapper<IDispatch>
{
  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application()
  {
    _TDispID _dispid(/* Application */ DISPID(148));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator()
  {
    _TDispID _dispid(/* Creator */ DISPID(149));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent()
  {
    _TDispID _dispid(/* Parent */ DISPID(150));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Name()
  {
    _TDispID _dispid(/* Name */ DISPID(110));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Border()
  {
    _TDispID _dispid(/* Border */ DISPID(128));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Border* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall ClearFormats()
  {
    _TDispID _dispid(/* ClearFormats */ DISPID(112));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::InteriorPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Interior()
  {
    _TDispID _dispid(/* Interior */ DISPID(129));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Interior* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::ChartFillFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Fill()
  {
    _TDispID _dispid(/* Fill */ DISPID(1663));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::ChartFillFormat* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_PictureType()
  {
    _TDispID _dispid(/* PictureType */ DISPID(161));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_PictureType(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* PictureType */ DISPID(161));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }


  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::InteriorPtr Interior = {read = get_Interior};
  __property   Graph_2k::ChartFillFormatPtr Fill = {read = get_Fill};
};
// *********************************************************************//
// Interface: Walls
// Flags:     (4096) Dispatchable
// GUID:      {00024705-0000-0000-C000-000000000046}
// *********************************************************************//
interface Walls : public TDispWrapper<IDispatch>
{
  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application()
  {
    _TDispID _dispid(/* Application */ DISPID(148));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator()
  {
    _TDispID _dispid(/* Creator */ DISPID(149));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent()
  {
    _TDispID _dispid(/* Parent */ DISPID(150));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Name()
  {
    _TDispID _dispid(/* Name */ DISPID(110));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Border()
  {
    _TDispID _dispid(/* Border */ DISPID(128));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Border* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall ClearFormats()
  {
    _TDispID _dispid(/* ClearFormats */ DISPID(112));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::InteriorPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Interior()
  {
    _TDispID _dispid(/* Interior */ DISPID(129));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Interior* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::ChartFillFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Fill()
  {
    _TDispID _dispid(/* Fill */ DISPID(1663));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::ChartFillFormat* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_PictureType()
  {
    _TDispID _dispid(/* PictureType */ DISPID(161));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_PictureType(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* PictureType */ DISPID(161));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_PictureUnit()
  {
    _TDispID _dispid(/* PictureUnit */ DISPID(162));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_PictureUnit(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* PictureUnit */ DISPID(162));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }


  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::InteriorPtr Interior = {read = get_Interior};
  __property   Graph_2k::ChartFillFormatPtr Fill = {read = get_Fill};
};
// *********************************************************************//
// Interface: TickLabels
// Flags:     (4096) Dispatchable
// GUID:      {00024706-0000-0000-C000-000000000046}
// *********************************************************************//
interface TickLabels : public TDispWrapper<IDispatch>
{
  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application()
  {
    _TDispID _dispid(/* Application */ DISPID(148));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator()
  {
    _TDispID _dispid(/* Creator */ DISPID(149));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent()
  {
    _TDispID _dispid(/* Parent */ DISPID(150));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall Delete()
  {
    _TDispID _dispid(/* Delete */ DISPID(117));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::FontPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Font()
  {
    _TDispID _dispid(/* Font */ DISPID(146));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Font* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Name()
  {
    _TDispID _dispid(/* Name */ DISPID(110));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_NumberFormat()
  {
    _TDispID _dispid(/* NumberFormat */ DISPID(193));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_NumberFormat(BSTR Param1/*[in]*/)
  {
    _TDispID _dispid(/* NumberFormat */ DISPID(193));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BSTR:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_NumberFormatLocal()
  {
    _TDispID _dispid(/* NumberFormatLocal */ DISPID(1097));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_NumberFormatLocal(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* NumberFormatLocal */ DISPID(1097));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::XlTickLabelOrientation /*[VT_USERDEFINED:0]*/ __fastcall get_Orientation()
  {
    _TDispID _dispid(/* Orientation */ DISPID(134));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlTickLabelOrientation /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Orientation(Graph_2k::XlTickLabelOrientation Param1/*[in]*/)
  {
    _TDispID _dispid(/* Orientation */ DISPID(134));
    TAutoArgs<1> _args;
    _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_ReadingOrder()
  {
    _TDispID _dispid(/* ReadingOrder */ DISPID(975));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_ReadingOrder(long Param1/*[in]*/)
  {
    _TDispID _dispid(/* ReadingOrder */ DISPID(975));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_I4:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_AutoScaleFont()
  {
    _TDispID _dispid(/* AutoScaleFont */ DISPID(1525));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_AutoScaleFont(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* AutoScaleFont */ DISPID(1525));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_Offset()
  {
    _TDispID _dispid(/* Offset */ DISPID(254));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Offset(long Param1/*[in]*/)
  {
    _TDispID _dispid(/* Offset */ DISPID(254));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_I4:0]*/;
    OlePropertyPut(_dispid, _args);
  }


  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Graph_2k::FontPtr Font = {read = get_Font};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            NumberFormat = {read = get_NumberFormat, write = set_NumberFormat};
  __property   Graph_2k::XlTickLabelOrientation Orientation = {read = get_Orientation, write = set_Orientation};
  __property   long            ReadingOrder = {read = get_ReadingOrder, write = set_ReadingOrder};
  __property   long            Offset = {read = get_Offset, write = set_Offset};
};
// *********************************************************************//
// Interface: PlotArea
// Flags:     (4096) Dispatchable
// GUID:      {00024707-0000-0000-C000-000000000046}
// *********************************************************************//
interface PlotArea : public TDispWrapper<IDispatch>
{
  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application()
  {
    _TDispID _dispid(/* Application */ DISPID(148));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator()
  {
    _TDispID _dispid(/* Creator */ DISPID(149));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent()
  {
    _TDispID _dispid(/* Parent */ DISPID(150));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Name()
  {
    _TDispID _dispid(/* Name */ DISPID(110));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Border()
  {
    _TDispID _dispid(/* Border */ DISPID(128));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Border* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall ClearFormats()
  {
    _TDispID _dispid(/* ClearFormats */ DISPID(112));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  double /*[VT_R8:0]*/ __fastcall get_Height()
  {
    _TDispID _dispid(/* Height */ DISPID(123));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Height(double Param1/*[in]*/)
  {
    _TDispID _dispid(/* Height */ DISPID(123));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_R8:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::InteriorPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Interior()
  {
    _TDispID _dispid(/* Interior */ DISPID(129));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Interior* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::ChartFillFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Fill()
  {
    _TDispID _dispid(/* Fill */ DISPID(1663));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::ChartFillFormat* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  double /*[VT_R8:0]*/ __fastcall get_Left()
  {
    _TDispID _dispid(/* Left */ DISPID(127));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Left(double Param1/*[in]*/)
  {
    _TDispID _dispid(/* Left */ DISPID(127));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_R8:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  double /*[VT_R8:0]*/ __fastcall get_Top()
  {
    _TDispID _dispid(/* Top */ DISPID(126));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Top(double Param1/*[in]*/)
  {
    _TDispID _dispid(/* Top */ DISPID(126));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_R8:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  double /*[VT_R8:0]*/ __fastcall get_Width()
  {
    _TDispID _dispid(/* Width */ DISPID(122));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Width(double Param1/*[in]*/)
  {
    _TDispID _dispid(/* Width */ DISPID(122));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_R8:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  double /*[VT_R8:0]*/ __fastcall get_InsideLeft()
  {
    _TDispID _dispid(/* InsideLeft */ DISPID(1667));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  double /*[VT_R8:0]*/ __fastcall get_InsideTop()
  {
    _TDispID _dispid(/* InsideTop */ DISPID(1668));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  double /*[VT_R8:0]*/ __fastcall get_InsideWidth()
  {
    _TDispID _dispid(/* InsideWidth */ DISPID(1669));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  double /*[VT_R8:0]*/ __fastcall get_InsideHeight()
  {
    _TDispID _dispid(/* InsideHeight */ DISPID(1670));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }


  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   double          Height = {read = get_Height, write = set_Height};
  __property   Graph_2k::InteriorPtr Interior = {read = get_Interior};
  __property   Graph_2k::ChartFillFormatPtr Fill = {read = get_Fill};
  __property   double          Left = {read = get_Left, write = set_Left};
  __property   double          Top = {read = get_Top, write = set_Top};
  __property   double          Width = {read = get_Width, write = set_Width};
  __property   double          InsideLeft = {read = get_InsideLeft};
  __property   double          InsideTop = {read = get_InsideTop};
  __property   double          InsideWidth = {read = get_InsideWidth};
  __property   double          InsideHeight = {read = get_InsideHeight};
};
// *********************************************************************//
// Interface: ChartArea
// Flags:     (4096) Dispatchable
// GUID:      {00024708-0000-0000-C000-000000000046}
// *********************************************************************//
interface ChartArea : public TDispWrapper<IDispatch>
{
  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application()
  {
    _TDispID _dispid(/* Application */ DISPID(148));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator()
  {
    _TDispID _dispid(/* Creator */ DISPID(149));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent()
  {
    _TDispID _dispid(/* Parent */ DISPID(150));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Name()
  {
    _TDispID _dispid(/* Name */ DISPID(110));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Border()
  {
    _TDispID _dispid(/* Border */ DISPID(128));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Border* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall Clear()
  {
    _TDispID _dispid(/* Clear */ DISPID(111));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall ClearContents()
  {
    _TDispID _dispid(/* ClearContents */ DISPID(113));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall Copy()
  {
    _TDispID _dispid(/* Copy */ DISPID(551));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::FontPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Font()
  {
    _TDispID _dispid(/* Font */ DISPID(146));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Font* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_Shadow()
  {
    _TDispID _dispid(/* Shadow */ DISPID(103));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Shadow(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* Shadow */ DISPID(103));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall ClearFormats()
  {
    _TDispID _dispid(/* ClearFormats */ DISPID(112));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  double /*[VT_R8:0]*/ __fastcall get_Height()
  {
    _TDispID _dispid(/* Height */ DISPID(123));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Height(double Param1/*[in]*/)
  {
    _TDispID _dispid(/* Height */ DISPID(123));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_R8:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::InteriorPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Interior()
  {
    _TDispID _dispid(/* Interior */ DISPID(129));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Interior* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::ChartFillFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Fill()
  {
    _TDispID _dispid(/* Fill */ DISPID(1663));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::ChartFillFormat* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  double /*[VT_R8:0]*/ __fastcall get_Left()
  {
    _TDispID _dispid(/* Left */ DISPID(127));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Left(double Param1/*[in]*/)
  {
    _TDispID _dispid(/* Left */ DISPID(127));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_R8:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  double /*[VT_R8:0]*/ __fastcall get_Top()
  {
    _TDispID _dispid(/* Top */ DISPID(126));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Top(double Param1/*[in]*/)
  {
    _TDispID _dispid(/* Top */ DISPID(126));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_R8:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  double /*[VT_R8:0]*/ __fastcall get_Width()
  {
    _TDispID _dispid(/* Width */ DISPID(122));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Width(double Param1/*[in]*/)
  {
    _TDispID _dispid(/* Width */ DISPID(122));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_R8:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_AutoScaleFont()
  {
    _TDispID _dispid(/* AutoScaleFont */ DISPID(1525));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_AutoScaleFont(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* AutoScaleFont */ DISPID(1525));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }


  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::FontPtr Font = {read = get_Font};
  __property   TOLEBOOL        Shadow = {read = get_Shadow, write = set_Shadow};
  __property   double          Height = {read = get_Height, write = set_Height};
  __property   Graph_2k::InteriorPtr Interior = {read = get_Interior};
  __property   Graph_2k::ChartFillFormatPtr Fill = {read = get_Fill};
  __property   double          Left = {read = get_Left, write = set_Left};
  __property   double          Top = {read = get_Top, write = set_Top};
  __property   double          Width = {read = get_Width, write = set_Width};
};
// *********************************************************************//
// Interface: Legend
// Flags:     (4096) Dispatchable
// GUID:      {00024709-0000-0000-C000-000000000046}
// *********************************************************************//
interface Legend : public TDispWrapper<IDispatch>
{
  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application()
  {
    _TDispID _dispid(/* Application */ DISPID(148));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator()
  {
    _TDispID _dispid(/* Creator */ DISPID(149));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent()
  {
    _TDispID _dispid(/* Parent */ DISPID(150));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Name()
  {
    _TDispID _dispid(/* Name */ DISPID(110));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Border()
  {
    _TDispID _dispid(/* Border */ DISPID(128));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Border* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall Delete()
  {
    _TDispID _dispid(/* Delete */ DISPID(117));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::FontPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Font()
  {
    _TDispID _dispid(/* Font */ DISPID(146));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Font* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall LegendEntries(TVariantInParam Index/*[in,opt]*/= TNoParam())
  {
    _TDispID _dispid(/* LegendEntries */ DISPID(173));
    TAutoArgs<1> _args;
    _args[1] = Index /*[VT_VARIANT:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::XlLegendPosition /*[VT_USERDEFINED:0]*/ __fastcall get_Position()
  {
    _TDispID _dispid(/* Position */ DISPID(133));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlLegendPosition /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Position(Graph_2k::XlLegendPosition Param1/*[in]*/)
  {
    _TDispID _dispid(/* Position */ DISPID(133));
    TAutoArgs<1> _args;
    _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_Shadow()
  {
    _TDispID _dispid(/* Shadow */ DISPID(103));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Shadow(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* Shadow */ DISPID(103));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall Clear()
  {
    _TDispID _dispid(/* Clear */ DISPID(111));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  double /*[VT_R8:0]*/ __fastcall get_Height()
  {
    _TDispID _dispid(/* Height */ DISPID(123));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Height(double Param1/*[in]*/)
  {
    _TDispID _dispid(/* Height */ DISPID(123));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_R8:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::InteriorPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Interior()
  {
    _TDispID _dispid(/* Interior */ DISPID(129));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Interior* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::ChartFillFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Fill()
  {
    _TDispID _dispid(/* Fill */ DISPID(1663));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::ChartFillFormat* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  double /*[VT_R8:0]*/ __fastcall get_Left()
  {
    _TDispID _dispid(/* Left */ DISPID(127));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Left(double Param1/*[in]*/)
  {
    _TDispID _dispid(/* Left */ DISPID(127));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_R8:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  double /*[VT_R8:0]*/ __fastcall get_Top()
  {
    _TDispID _dispid(/* Top */ DISPID(126));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Top(double Param1/*[in]*/)
  {
    _TDispID _dispid(/* Top */ DISPID(126));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_R8:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  double /*[VT_R8:0]*/ __fastcall get_Width()
  {
    _TDispID _dispid(/* Width */ DISPID(122));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Width(double Param1/*[in]*/)
  {
    _TDispID _dispid(/* Width */ DISPID(122));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_R8:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_AutoScaleFont()
  {
    _TDispID _dispid(/* AutoScaleFont */ DISPID(1525));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_AutoScaleFont(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* AutoScaleFont */ DISPID(1525));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }


  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::FontPtr Font = {read = get_Font};
  __property   Graph_2k::XlLegendPosition Position = {read = get_Position, write = set_Position};
  __property   TOLEBOOL        Shadow = {read = get_Shadow, write = set_Shadow};
  __property   double          Height = {read = get_Height, write = set_Height};
  __property   Graph_2k::InteriorPtr Interior = {read = get_Interior};
  __property   Graph_2k::ChartFillFormatPtr Fill = {read = get_Fill};
  __property   double          Left = {read = get_Left, write = set_Left};
  __property   double          Top = {read = get_Top, write = set_Top};
  __property   double          Width = {read = get_Width, write = set_Width};
};
// *********************************************************************//
// Interface: ErrorBars
// Flags:     (4096) Dispatchable
// GUID:      {0002470A-0000-0000-C000-000000000046}
// *********************************************************************//
interface ErrorBars : public TDispWrapper<IDispatch>
{
  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application()
  {
    _TDispID _dispid(/* Application */ DISPID(148));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator()
  {
    _TDispID _dispid(/* Creator */ DISPID(149));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent()
  {
    _TDispID _dispid(/* Parent */ DISPID(150));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Name()
  {
    _TDispID _dispid(/* Name */ DISPID(110));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Border()
  {
    _TDispID _dispid(/* Border */ DISPID(128));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Border* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall Delete()
  {
    _TDispID _dispid(/* Delete */ DISPID(117));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall ClearFormats()
  {
    _TDispID _dispid(/* ClearFormats */ DISPID(112));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::XlEndStyleCap /*[VT_USERDEFINED:0]*/ __fastcall get_EndStyle()
  {
    _TDispID _dispid(/* EndStyle */ DISPID(1124));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlEndStyleCap /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_EndStyle(Graph_2k::XlEndStyleCap Param1/*[in]*/)
  {
    _TDispID _dispid(/* EndStyle */ DISPID(1124));
    TAutoArgs<1> _args;
    _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
    OlePropertyPut(_dispid, _args);
  }


  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::XlEndStyleCap EndStyle = {read = get_EndStyle, write = set_EndStyle};
};
// *********************************************************************//
// Interface: DataTable
// Flags:     (4096) Dispatchable
// GUID:      {000208FA-0000-0000-C000-000000000046}
// *********************************************************************//
interface DataTable : public TDispWrapper<IDispatch>
{
  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application()
  {
    _TDispID _dispid(/* Application */ DISPID(148));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator()
  {
    _TDispID _dispid(/* Creator */ DISPID(149));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent()
  {
    _TDispID _dispid(/* Parent */ DISPID(150));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_ShowLegendKey()
  {
    _TDispID _dispid(/* ShowLegendKey */ DISPID(171));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_ShowLegendKey(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* ShowLegendKey */ DISPID(171));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_HasBorderHorizontal()
  {
    _TDispID _dispid(/* HasBorderHorizontal */ DISPID(1671));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_HasBorderHorizontal(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* HasBorderHorizontal */ DISPID(1671));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_HasBorderVertical()
  {
    _TDispID _dispid(/* HasBorderVertical */ DISPID(1672));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_HasBorderVertical(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* HasBorderVertical */ DISPID(1672));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_HasBorderOutline()
  {
    _TDispID _dispid(/* HasBorderOutline */ DISPID(1673));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_HasBorderOutline(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* HasBorderOutline */ DISPID(1673));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Border()
  {
    _TDispID _dispid(/* Border */ DISPID(128));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Border* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::FontPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Font()
  {
    _TDispID _dispid(/* Font */ DISPID(146));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Font* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall Delete()
  {
    _TDispID _dispid(/* Delete */ DISPID(117));
    OleProcedure(_dispid);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_AutoScaleFont()
  {
    _TDispID _dispid(/* AutoScaleFont */ DISPID(1525));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_AutoScaleFont(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* AutoScaleFont */ DISPID(1525));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }


  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   TOLEBOOL        ShowLegendKey = {read = get_ShowLegendKey, write = set_ShowLegendKey};
  __property   TOLEBOOL        HasBorderHorizontal = {read = get_HasBorderHorizontal, write = set_HasBorderHorizontal};
  __property   TOLEBOOL        HasBorderVertical = {read = get_HasBorderVertical, write = set_HasBorderVertical};
  __property   TOLEBOOL        HasBorderOutline = {read = get_HasBorderOutline, write = set_HasBorderOutline};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::FontPtr Font = {read = get_Font};
};
// *********************************************************************//
// Interface: DisplayUnitLabel
// Flags:     (4096) Dispatchable
// GUID:      {000208D3-0000-0000-C000-000000000046}
// *********************************************************************//
interface DisplayUnitLabel : public TDispWrapper<IDispatch>
{
  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application()
  {
    _TDispID _dispid(/* Application */ DISPID(148));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator()
  {
    _TDispID _dispid(/* Creator */ DISPID(149));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent()
  {
    _TDispID _dispid(/* Parent */ DISPID(150));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Name()
  {
    _TDispID _dispid(/* Name */ DISPID(110));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Border()
  {
    _TDispID _dispid(/* Border */ DISPID(128));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Border* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall Delete()
  {
    _TDispID _dispid(/* Delete */ DISPID(117));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  Graph_2k::InteriorPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Interior()
  {
    _TDispID _dispid(/* Interior */ DISPID(129));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Interior* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Graph_2k::ChartFillFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Fill()
  {
    _TDispID _dispid(/* Fill */ DISPID(1663));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::ChartFillFormat* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Caption()
  {
    _TDispID _dispid(/* Caption */ DISPID(139));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Caption(BSTR Param1/*[in]*/)
  {
    _TDispID _dispid(/* Caption */ DISPID(139));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BSTR:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  Graph_2k::FontPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Font()
  {
    _TDispID _dispid(/* Font */ DISPID(146));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Graph_2k::Font* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_HorizontalAlignment()
  {
    _TDispID _dispid(/* HorizontalAlignment */ DISPID(136));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_HorizontalAlignment(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* HorizontalAlignment */ DISPID(136));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  double /*[VT_R8:0]*/ __fastcall get_Left()
  {
    _TDispID _dispid(/* Left */ DISPID(127));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Left(double Param1/*[in]*/)
  {
    _TDispID _dispid(/* Left */ DISPID(127));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_R8:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Orientation()
  {
    _TDispID _dispid(/* Orientation */ DISPID(134));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Orientation(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* Orientation */ DISPID(134));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_Shadow()
  {
    _TDispID _dispid(/* Shadow */ DISPID(103));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Shadow(TOLEBOOL Param1/*[in]*/)
  {
    _TDispID _dispid(/* Shadow */ DISPID(103));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BOOL:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Text()
  {
    _TDispID _dispid(/* Text */ DISPID(138));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Text(BSTR Param1/*[in]*/)
  {
    _TDispID _dispid(/* Text */ DISPID(138));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_BSTR:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  double /*[VT_R8:0]*/ __fastcall get_Top()
  {
    _TDispID _dispid(/* Top */ DISPID(126));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_Top(double Param1/*[in]*/)
  {
    _TDispID _dispid(/* Top */ DISPID(126));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_R8:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_VerticalAlignment()
  {
    _TDispID _dispid(/* VerticalAlignment */ DISPID(137));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_VerticalAlignment(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* VerticalAlignment */ DISPID(137));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_ReadingOrder()
  {
    _TDispID _dispid(/* ReadingOrder */ DISPID(975));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_ReadingOrder(long Param1/*[in]*/)
  {
    _TDispID _dispid(/* ReadingOrder */ DISPID(975));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_I4:0]*/;
    OlePropertyPut(_dispid, _args);
  }

  TVariant /*[VT_VARIANT:0]*/ __fastcall get_AutoScaleFont()
  {
    _TDispID _dispid(/* AutoScaleFont */ DISPID(1525));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall set_AutoScaleFont(TVariantInParam Param1/*[in]*/)
  {
    _TDispID _dispid(/* AutoScaleFont */ DISPID(1525));
    TAutoArgs<1> _args;
    _args[1] = Param1 /*[VT_VARIANT:0]*/;
    OlePropertyPut(_dispid, _args);
  }


  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::InteriorPtr Interior = {read = get_Interior};
  __property   Graph_2k::ChartFillFormatPtr Fill = {read = get_Fill};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   Graph_2k::FontPtr Font = {read = get_Font};
  __property   double          Left = {read = get_Left, write = set_Left};
  __property   TOLEBOOL        Shadow = {read = get_Shadow, write = set_Shadow};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   double          Top = {read = get_Top, write = set_Top};
  __property   long            ReadingOrder = {read = get_ReadingOrder, write = set_ReadingOrder};
};
// *********************************************************************//
// Interface: IShape
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002441F-0001-0000-C000-000000000046}
// *********************************************************************//
interface IShape  : public IDispatch
{
public:
};

// *********************************************************************//
// Interface: IShapes
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024420-0001-0000-C000-000000000046}
// *********************************************************************//
interface IShapes  : public IDispatch
{
public:
};

// *********************************************************************//
// Interface: IShapeRange
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024421-0001-0000-C000-000000000046}
// *********************************************************************//
interface IShapeRange  : public IDispatch
{
public:
};

// *********************************************************************//
// Interface: IGroupShapes
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024422-0001-0000-C000-000000000046}
// *********************************************************************//
interface IGroupShapes  : public IDispatch
{
public:
};

// *********************************************************************//
// Interface: ITextFrame
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024423-0001-0000-C000-000000000046}
// *********************************************************************//
interface ITextFrame  : public IDispatch
{
public:
};

// *********************************************************************//
// Interface: IConnectorFormat
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024424-0001-0000-C000-000000000046}
// *********************************************************************//
interface IConnectorFormat  : public IDispatch
{
public:
};

// *********************************************************************//
// Interface: IFreeformBuilder
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024425-0001-0000-C000-000000000046}
// *********************************************************************//
interface IFreeformBuilder  : public IDispatch
{
public:
};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// DispIntf:  IFont
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208F3-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class GraphIFontDispT : public TAutoDriver<GraphIFont>
{
public:
  GraphIFontDispT(){}

  GraphIFontDispT(GraphIFont *pintf)
  {
    TAutoDriver<GraphIFont>::Bind(pintf, false);
  }

  GraphIFontDispT(GraphIFontPtr pintf)
  {
    TAutoDriver<GraphIFont>::Bind(pintf, true);
  }

  GraphIFontDispT& operator=(GraphIFont *pintf)
  {
    TAutoDriver<GraphIFont>::Bind(pintf, false);
    return *this;
  }

  GraphIFontDispT& operator=(GraphIFontPtr pintf)
  {
    TAutoDriver<GraphIFont>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/);
  Graph_2k::GraphApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/);
  Graph_2k::XlCreator __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Background(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_Background(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Background(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Bold(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_Bold(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Bold(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Color(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_Color(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Color(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColorIndex(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_ColorIndex(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColorIndex(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontStyle(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_FontStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontStyle(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Italic(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_Italic(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Italic(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OutlineFont(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_OutlineFont(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OutlineFont(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Shadow(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_Shadow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Shadow(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Size(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_Size(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Size(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Strikethrough(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_Strikethrough(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Strikethrough(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Subscript(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_Subscript(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Subscript(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Superscript(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_Superscript(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Superscript(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Underline(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_Underline(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Underline(TVariantInParam RHS/*[in]*/);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef GraphIFontDispT<GraphIFont> GraphIFontDisp;

// *********************************************************************//
// DispIntf:  _IGlobal
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208FC-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class _IGlobalDispT : public TAutoDriver<_IGlobal>
{
public:
  _IGlobalDispT(){}

  _IGlobalDispT(_IGlobal *pintf)
  {
    TAutoDriver<_IGlobal>::Bind(pintf, false);
  }

  _IGlobalDispT(_IGlobalPtr pintf)
  {
    TAutoDriver<_IGlobal>::Bind(pintf, true);
  }

  _IGlobalDispT& operator=(_IGlobal *pintf)
  {
    TAutoDriver<_IGlobal>::Bind(pintf, false);
    return *this;
  }

  _IGlobalDispT& operator=(_IGlobalPtr pintf)
  {
    TAutoDriver<_IGlobal>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/);
  Graph_2k::GraphApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/);
  Graph_2k::XlCreator __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/);
  Graph_2k::GraphApplicationPtr __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CommandBars(Office_2k::CommandBarsPtr* RHS/*[out,retval]*/);
  Office_2k::CommandBarsPtr __fastcall get_CommandBars(void);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   Graph_2k::GraphApplicationPtr Parent = {read = get_Parent};
  __property   Office_2k::CommandBarsPtr CommandBars = {read = get_CommandBars};
};
typedef _IGlobalDispT<_IGlobal> _IGlobalDisp;

// *********************************************************************//
// DispIntf:  IChart
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208FB-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class IChartDispT : public TAutoDriver<IChart>
{
public:
  IChartDispT(){}

  IChartDispT(IChart *pintf)
  {
    TAutoDriver<IChart>::Bind(pintf, false);
  }

  IChartDispT(IChartPtr pintf)
  {
    TAutoDriver<IChart>::Bind(pintf, true);
  }

  IChartDispT& operator=(IChart *pintf)
  {
    TAutoDriver<IChart>::Bind(pintf, false);
    return *this;
  }

  IChartDispT& operator=(IChartPtr pintf)
  {
    TAutoDriver<IChart>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/);
  Graph_2k::GraphApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/);
  Graph_2k::XlCreator __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Activate();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ApplyDataLabels(TVariantInParam Type/*[in,opt]*/= TNoParam()
                                                        , 
                                                        TVariantInParam LegendKey/*[in,opt]*/= TNoParam()
                                                        , 
                                                        TVariantInParam AutoText/*[in,opt]*/= TNoParam()
                                                        , 
                                                        TVariantInParam HasLeaderLines/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Area3DGroup(Graph_2k::ChartGroupPtr* RHS/*[out,retval]*/);
  Graph_2k::ChartGroupPtr __fastcall get_Area3DGroup(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AreaGroups(TVariantInParam Index/*[in,opt]*/, 
                                                   LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall AreaGroups(TVariantInParam Index/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AutoFormat(long Gallery/*[in]*/, 
                                                   TVariantInParam Format/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoScaling(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoScaling(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoScaling(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Axes(TVariantInParam Type/*[in,opt]*/, 
                                             TVariantInParam AxisGroup/*[in,opt]*/, 
                                             LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall Axes(TVariantInParam Type/*[in,opt]*/= TNoParam(), 
                                  TVariantInParam AxisGroup/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Bar3DGroup(Graph_2k::ChartGroupPtr* RHS/*[out,retval]*/);
  Graph_2k::ChartGroupPtr __fastcall get_Bar3DGroup(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall BarGroups(TVariantInParam Index/*[in,opt]*/, 
                                                  LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall BarGroups(TVariantInParam Index/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ChartArea(Graph_2k::ChartAreaPtr* RHS/*[out,retval]*/);
  Graph_2k::ChartAreaPtr __fastcall get_ChartArea(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ChartGroups(TVariantInParam Index/*[in,opt]*/, 
                                                    LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall ChartGroups(TVariantInParam Index/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ChartTitle(Graph_2k::ChartTitlePtr* RHS/*[out,retval]*/);
  Graph_2k::ChartTitlePtr __fastcall get_ChartTitle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Column3DGroup(Graph_2k::ChartGroupPtr* RHS/*[out,retval]*/);
  Graph_2k::ChartGroupPtr __fastcall get_Column3DGroup(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ColumnGroups(TVariantInParam Index/*[in,opt]*/, 
                                                     LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall ColumnGroups(TVariantInParam Index/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CommandBars(Office_2k::CommandBarsPtr* RHS/*[out,retval]*/);
  Office_2k::CommandBarsPtr __fastcall get_CommandBars(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Corners(Graph_2k::CornersPtr* RHS/*[out,retval]*/);
  Graph_2k::CornersPtr __fastcall get_Corners(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DataTable(Graph_2k::DataTablePtr* RHS/*[out,retval]*/);
  Graph_2k::DataTablePtr __fastcall get_DataTable(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DepthPercent(long* RHS/*[out,retval]*/);
  long            __fastcall get_DepthPercent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DepthPercent(long RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Deselect();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayBlanksAs(Graph_2k::XlDisplayBlanksAs* RHS/*[out,retval]*/);
  Graph_2k::XlDisplayBlanksAs __fastcall get_DisplayBlanksAs(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayBlanksAs(Graph_2k::XlDisplayBlanksAs RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DoughnutGroups(TVariantInParam Index/*[in,opt]*/, 
                                                       LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall DoughnutGroups(TVariantInParam Index/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Elevation(long* RHS/*[out,retval]*/);
  long            __fastcall get_Elevation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Elevation(long RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Floor(Graph_2k::FloorPtr* RHS/*[out,retval]*/);
  Graph_2k::FloorPtr __fastcall get_Floor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GapDepth(long* RHS/*[out,retval]*/);
  long            __fastcall get_GapDepth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GapDepth(long RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasAxis(TVariantInParam Index1/*[in,opt]*/, 
                                                    TVariantInParam Index2/*[in,opt]*/, 
                                                    TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_HasAxis(TVariantInParam Index1/*[in,opt]*/= TNoParam(), 
                                         TVariantInParam Index2/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasAxis(TVariantInParam Index1/*[in,opt]*/, 
                                                    TVariantInParam Index2/*[in,opt]*/, 
                                                    TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasDataTable(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HasDataTable(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasDataTable(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasLegend(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HasLegend(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasLegend(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasTitle(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HasTitle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasTitle(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HeightPercent(long* RHS/*[out,retval]*/);
  long            __fastcall get_HeightPercent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HeightPercent(long RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Legend(Graph_2k::LegendPtr* RHS/*[out,retval]*/);
  Graph_2k::LegendPtr __fastcall get_Legend(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Line3DGroup(Graph_2k::ChartGroupPtr* RHS/*[out,retval]*/);
  Graph_2k::ChartGroupPtr __fastcall get_Line3DGroup(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall LineGroups(TVariantInParam Index/*[in,opt]*/, 
                                                   LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall LineGroups(TVariantInParam Index/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* RHS/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall OmitBackground(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall OmitBackground(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Perspective(long* RHS/*[out,retval]*/);
  long            __fastcall get_Perspective(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Perspective(long RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Pie3DGroup(Graph_2k::ChartGroupPtr* RHS/*[out,retval]*/);
  Graph_2k::ChartGroupPtr __fastcall get_Pie3DGroup(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PieGroups(TVariantInParam Index/*[in,opt]*/, 
                                                  LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall PieGroups(TVariantInParam Index/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PlotArea(Graph_2k::PlotAreaPtr* RHS/*[out,retval]*/);
  Graph_2k::PlotAreaPtr __fastcall get_PlotArea(void);
  void /*[VT_VOID:0]*/ __fastcall _Dummy43();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RadarGroups(TVariantInParam Index/*[in,opt]*/, 
                                                    LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall RadarGroups(TVariantInParam Index/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RightAngleAxes(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_RightAngleAxes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RightAngleAxes(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Rotation(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_Rotation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Rotation(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SeriesCollection(TVariantInParam Index/*[in,opt]*/, 
                                                         LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall SeriesCollection(TVariantInParam Index/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetEchoOn(TVariantInParam EchoOn/*[in,opt]*/, 
                                                  TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall SetEchoOn(TVariantInParam EchoOn/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SubType(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_SubType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SubType(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SurfaceGroup(Graph_2k::ChartGroupPtr* RHS/*[out,retval]*/);
  Graph_2k::ChartGroupPtr __fastcall get_SurfaceGroup(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(long* RHS/*[out,retval]*/);
  long            __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Type(long RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ChartType(Graph_2k::XlChartType* RHS/*[out,retval]*/);
  Graph_2k::XlChartType __fastcall get_ChartType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ChartType(Graph_2k::XlChartType RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ApplyCustomType(Graph_2k::XlChartType ChartType/*[in]*/, 
                                                        TVariantInParam TypeName/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Walls(Graph_2k::WallsPtr* RHS/*[out,retval]*/);
  Graph_2k::WallsPtr __fastcall get_Walls(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_WallsAndGridlines2D(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_WallsAndGridlines2D(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_WallsAndGridlines2D(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall XYGroups(TVariantInParam Index/*[in,opt]*/, 
                                                 LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall XYGroups(TVariantInParam Index/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BarShape(Graph_2k::XlBarShape* RHS/*[out,retval]*/);
  Graph_2k::XlBarShape __fastcall get_BarShape(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BarShape(Graph_2k::XlBarShape RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Export(BSTR FileName/*[in]*/, 
                                               TVariantInParam FilterName/*[in,opt]*/, 
                                               TVariantInParam Interactive/*[in,opt]*/, 
                                               TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall Export(BSTR FileName/*[in]*/, 
                                    TVariantInParam FilterName/*[in,opt]*/= TNoParam(), 
                                    TVariantInParam Interactive/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Refresh();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PlotOnX(long* RHS/*[out,retval]*/);
  long            __fastcall get_PlotOnX(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PlotOnX(long RHS/*[in]*/);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Graph_2k::ChartGroupPtr Area3DGroup = {read = get_Area3DGroup};
  __property   TOLEBOOL        AutoScaling = {read = get_AutoScaling, write = set_AutoScaling};
  __property   Graph_2k::ChartGroupPtr Bar3DGroup = {read = get_Bar3DGroup};
  __property   Graph_2k::ChartAreaPtr ChartArea = {read = get_ChartArea};
  __property   Graph_2k::ChartTitlePtr ChartTitle = {read = get_ChartTitle};
  __property   Graph_2k::ChartGroupPtr Column3DGroup = {read = get_Column3DGroup};
  __property   Office_2k::CommandBarsPtr CommandBars = {read = get_CommandBars};
  __property   Graph_2k::CornersPtr Corners = {read = get_Corners};
  __property   Graph_2k::DataTablePtr DataTable = {read = get_DataTable};
  __property   long            DepthPercent = {read = get_DepthPercent, write = set_DepthPercent};
  __property   Graph_2k::XlDisplayBlanksAs DisplayBlanksAs = {read = get_DisplayBlanksAs, write = set_DisplayBlanksAs};
  __property   long            Elevation = {read = get_Elevation, write = set_Elevation};
  __property   Graph_2k::FloorPtr Floor = {read = get_Floor};
  __property   long            GapDepth = {read = get_GapDepth, write = set_GapDepth};
  __property   TOLEBOOL        HasDataTable = {read = get_HasDataTable, write = set_HasDataTable};
  __property   TOLEBOOL        HasLegend = {read = get_HasLegend, write = set_HasLegend};
  __property   TOLEBOOL        HasTitle = {read = get_HasTitle, write = set_HasTitle};
  __property   long            HeightPercent = {read = get_HeightPercent, write = set_HeightPercent};
  __property   Graph_2k::LegendPtr Legend = {read = get_Legend};
  __property   Graph_2k::ChartGroupPtr Line3DGroup = {read = get_Line3DGroup};
  __property   BSTR            Name = {read = get_Name};
  __property   long            Perspective = {read = get_Perspective, write = set_Perspective};
  __property   Graph_2k::ChartGroupPtr Pie3DGroup = {read = get_Pie3DGroup};
  __property   Graph_2k::PlotAreaPtr PlotArea = {read = get_PlotArea};
  __property   Graph_2k::ChartGroupPtr SurfaceGroup = {read = get_SurfaceGroup};
  __property   long            Type = {read = get_Type, write = set_Type};
  __property   Graph_2k::XlChartType ChartType = {read = get_ChartType, write = set_ChartType};
  __property   Graph_2k::WallsPtr Walls = {read = get_Walls};
  __property   TOLEBOOL        WallsAndGridlines2D = {read = get_WallsAndGridlines2D, write = set_WallsAndGridlines2D};
  __property   Graph_2k::XlBarShape BarShape = {read = get_BarShape, write = set_BarShape};
  __property   long            PlotOnX = {read = get_PlotOnX, write = set_PlotOnX};
};
typedef IChartDispT<IChart> IChartDisp;

// *********************************************************************//
// DispIntf:  IApplication
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208EC-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class IApplicationDispT : public TAutoDriver<IApplication>
{
public:
  IApplicationDispT(){}

  IApplicationDispT(IApplication *pintf)
  {
    TAutoDriver<IApplication>::Bind(pintf, false);
  }

  IApplicationDispT(IApplicationPtr pintf)
  {
    TAutoDriver<IApplication>::Bind(pintf, true);
  }

  IApplicationDispT& operator=(IApplication *pintf)
  {
    TAutoDriver<IApplication>::Bind(pintf, false);
    return *this;
  }

  IApplicationDispT& operator=(IApplicationPtr pintf)
  {
    TAutoDriver<IApplication>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/);
  Graph_2k::GraphApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/);
  Graph_2k::XlCreator __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/);
  Graph_2k::GraphApplicationPtr __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CommandBars(Office_2k::CommandBarsPtr* RHS/*[out,retval]*/);
  Office_2k::CommandBarsPtr __fastcall get_CommandBars(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddChartAutoFormat(BSTR Name/*[in]*/, 
                                                           TVariantInParam Description/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CellDragAndDrop(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_CellDragAndDrop(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CellDragAndDrop(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Chart(Graph_2k::ChartPtr* RHS/*[out,retval]*/);
  Graph_2k::ChartPtr __fastcall Chart(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ChartWizardDisplay(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_ChartWizardDisplay(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ChartWizardDisplay(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DataSheet(Graph_2k::DataSheetPtr* RHS/*[out,retval]*/);
  Graph_2k::DataSheetPtr __fastcall get_DataSheet(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_DataSheet(Graph_2k::DataSheetPtr RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DeleteChartAutoFormat(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayAlerts(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DisplayAlerts(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayAlerts(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Evaluate(BSTR Name/*[in]*/, TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall Evaluate(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall FileImport(BSTR FileName/*[in]*/, 
                                                   TVariantInParam Password/*[in,opt]*/= TNoParam()
                                                   , 
                                                   TVariantInParam ImportRange/*[in,opt]*/= TNoParam()
                                                   , 
                                                   TVariantInParam WorksheetName/*[in,opt]*/= TNoParam()
                                                   , 
                                                   TVariantInParam OverwriteCells/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasLinks(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HasLinks(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasLinks(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(double* RHS/*[out,retval]*/);
  double          __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(double RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ImportChart(BSTR FileName/*[in]*/, 
                                                    TVariantInParam Password/*[in,opt]*/= TNoParam()
                                                    , 
                                                    TVariantInParam ImportRange/*[in,opt]*/= TNoParam()
                                                    , 
                                                    TVariantInParam WorksheetName/*[in,opt]*/= TNoParam()
                                                    , 
                                                    TVariantInParam OverwriteCells/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(double* RHS/*[out,retval]*/);
  double          __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(double RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MoveAfterReturn(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_MoveAfterReturn(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MoveAfterReturn(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* RHS/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PlotBy(Graph_2k::XlRowCol* RHS/*[out,retval]*/);
  Graph_2k::XlRowCol __fastcall get_PlotBy(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PlotBy(Graph_2k::XlRowCol RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Quit();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SaveAs(BSTR FileName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SaveAsOldFileFormat(TVariantInParam MajorVersion/*[in,opt]*/= TNoParam()
                                                            , 
                                                            TVariantInParam MinorVersion/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetDefaultChart(TVariantInParam FormatName/*[in,opt]*/= TNoParam()
                                                        , 
                                                        TVariantInParam Gallery/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowChartTipNames(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ShowChartTipNames(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowChartTipNames(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowChartTipValues(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ShowChartTipValues(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowChartTipValues(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(double* RHS/*[out,retval]*/);
  double          __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(double RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Update();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Version(BSTR* RHS/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(double* RHS/*[out,retval]*/);
  double          __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(double RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_WindowState(Graph_2k::XlWindowState* RHS/*[out,retval]*/);
  Graph_2k::XlWindowState __fastcall get_WindowState(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_WindowState(Graph_2k::XlWindowState RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoCorrect(Graph_2k::AutoCorrectPtr* RHS/*[out,retval]*/);
  Graph_2k::AutoCorrectPtr __fastcall get_AutoCorrect(void);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   Graph_2k::GraphApplicationPtr Parent = {read = get_Parent};
  __property   Office_2k::CommandBarsPtr CommandBars = {read = get_CommandBars};
  __property   TOLEBOOL        CellDragAndDrop = {read = get_CellDragAndDrop, write = set_CellDragAndDrop};
  __property   Graph_2k::DataSheetPtr DataSheet = {read = get_DataSheet, write = _set_DataSheet};
  __property   TOLEBOOL        DisplayAlerts = {read = get_DisplayAlerts, write = set_DisplayAlerts};
  __property   TOLEBOOL        HasLinks = {read = get_HasLinks, write = set_HasLinks};
  __property   double          Height = {read = get_Height, write = set_Height};
  __property   double          Left = {read = get_Left, write = set_Left};
  __property   TOLEBOOL        MoveAfterReturn = {read = get_MoveAfterReturn, write = set_MoveAfterReturn};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   Graph_2k::XlRowCol PlotBy = {read = get_PlotBy, write = set_PlotBy};
  __property   TOLEBOOL        ShowChartTipNames = {read = get_ShowChartTipNames, write = set_ShowChartTipNames};
  __property   TOLEBOOL        ShowChartTipValues = {read = get_ShowChartTipValues, write = set_ShowChartTipValues};
  __property   double          Top = {read = get_Top, write = set_Top};
  __property   BSTR            Version = {read = get_Version};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   double          Width = {read = get_Width, write = set_Width};
  __property   Graph_2k::XlWindowState WindowState = {read = get_WindowState, write = set_WindowState};
  __property   Graph_2k::AutoCorrectPtr AutoCorrect = {read = get_AutoCorrect};
};
typedef IApplicationDispT<IApplication> IApplicationDisp;

// *********************************************************************//
// DispIntf:  IDataSheet
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024726-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class IDataSheetDispT : public TAutoDriver<IDataSheet>
{
public:
  IDataSheetDispT(){}

  IDataSheetDispT(IDataSheet *pintf)
  {
    TAutoDriver<IDataSheet>::Bind(pintf, false);
  }

  IDataSheetDispT(IDataSheetPtr pintf)
  {
    TAutoDriver<IDataSheet>::Bind(pintf, true);
  }

  IDataSheetDispT& operator=(IDataSheet *pintf)
  {
    TAutoDriver<IDataSheet>::Bind(pintf, false);
    return *this;
  }

  IDataSheetDispT& operator=(IDataSheetPtr pintf)
  {
    TAutoDriver<IDataSheet>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/);
  Graph_2k::GraphApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/);
  Graph_2k::XlCreator __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Activate();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Cells(Graph_2k::RangePtr* RHS/*[out,retval]*/);
  Graph_2k::RangePtr __fastcall get_Cells(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Columns(Graph_2k::RangePtr* RHS/*[out,retval]*/);
  Graph_2k::RangePtr __fastcall get_Columns(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Font(Graph_2k::FontPtr* RHS/*[out,retval]*/);
  Graph_2k::FontPtr __fastcall get_Font(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Font(Graph_2k::FontPtr RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(double* RHS/*[out,retval]*/);
  double          __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(double RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(double* RHS/*[out,retval]*/);
  double          __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(double RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Range(TVariantInParam Range1/*[in]*/, 
                                                  TVariantInParam Range2/*[in,opt]*/, 
                                                  Graph_2k::RangePtr* RHS/*[out,retval]*/);
  Graph_2k::RangePtr __fastcall get_Range(TVariantInParam Range1/*[in]*/, 
                                          TVariantInParam Range2/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Rows(Graph_2k::RangePtr* RHS/*[out,retval]*/);
  Graph_2k::RangePtr __fastcall get_Rows(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(double* RHS/*[out,retval]*/);
  double          __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(double RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(double* RHS/*[out,retval]*/);
  double          __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(double RHS/*[in]*/);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Graph_2k::RangePtr Cells = {read = get_Cells};
  __property   Graph_2k::RangePtr Columns = {read = get_Columns};
  __property   Graph_2k::FontPtr Font = {read = get_Font, write = _set_Font};
  __property   double          Height = {read = get_Height, write = set_Height};
  __property   double          Left = {read = get_Left, write = set_Left};
  __property   Graph_2k::RangePtr Rows = {read = get_Rows};
  __property   double          Top = {read = get_Top, write = set_Top};
  __property   double          Width = {read = get_Width, write = set_Width};
};
typedef IDataSheetDispT<IDataSheet> IDataSheetDisp;

// *********************************************************************//
// DispIntf:  IRange
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024727-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class IRangeDispT : public TAutoDriver<IRange>
{
public:
  IRangeDispT(){}

  IRangeDispT(IRange *pintf)
  {
    TAutoDriver<IRange>::Bind(pintf, false);
  }

  IRangeDispT(IRangePtr pintf)
  {
    TAutoDriver<IRange>::Bind(pintf, true);
  }

  IRangeDispT& operator=(IRange *pintf)
  {
    TAutoDriver<IRange>::Bind(pintf, false);
    return *this;
  }

  IRangeDispT& operator=(IRangePtr pintf)
  {
    TAutoDriver<IRange>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/);
  Graph_2k::GraphApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/);
  Graph_2k::XlCreator __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AutoFit();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Cells(Graph_2k::RangePtr* RHS/*[out,retval]*/);
  Graph_2k::RangePtr __fastcall get_Cells(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Clear();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ClearContents();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ClearFormats();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Columns(Graph_2k::RangePtr* RHS/*[out,retval]*/);
  Graph_2k::RangePtr __fastcall get_Columns(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnWidth(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_ColumnWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColumnWidth(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Copy(TVariantInParam Destination/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Cut(TVariantInParam Destination/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(TVariantInParam Shift/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ImportData(TVariantInParam FileName/*[in]*/, 
                                                   TVariantInParam Range/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Include(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_Include(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Include(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Insert(TVariantInParam Shift/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(TVariantInParam RowIndex/*[in,opt]*/, 
                                                 TVariantInParam ColumnIndex/*[in,opt]*/, 
                                                 TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_Item(TVariantInParam RowIndex/*[in,opt]*/= TNoParam(), 
                                      TVariantInParam ColumnIndex/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Item(TVariantInParam RowIndex/*[in,opt]*/, 
                                                 TVariantInParam ColumnIndex/*[in,opt]*/, 
                                                 TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* RHS/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NumberFormat(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_NumberFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_NumberFormat(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Paste(TVariantInParam Link/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Rows(Graph_2k::RangePtr* RHS/*[out,retval]*/);
  Graph_2k::RangePtr __fastcall get_Rows(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_Value();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__Default(TVariantInParam RowIndex/*[in,opt]*/, 
                                                     TVariantInParam ColumnIndex/*[in,opt]*/, 
                                                     TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get__Default(TVariantInParam RowIndex/*[in,opt]*/= TNoParam(), 
                                          TVariantInParam ColumnIndex/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set__Default(TVariantInParam RowIndex/*[in,opt]*/, 
                                                     TVariantInParam ColumnIndex/*[in,opt]*/, 
                                                     TVariantInParam RHS/*[in]*/);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Graph_2k::RangePtr Cells = {read = get_Cells};
  __property   Graph_2k::RangePtr Columns = {read = get_Columns};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   Graph_2k::RangePtr Rows = {read = get_Rows};
};
typedef IRangeDispT<IRange> IRangeDisp;

// *********************************************************************//
// DispIntf:  IAutoCorrect
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208D4-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class IAutoCorrectDispT : public TAutoDriver<IAutoCorrect>
{
public:
  IAutoCorrectDispT(){}

  IAutoCorrectDispT(IAutoCorrect *pintf)
  {
    TAutoDriver<IAutoCorrect>::Bind(pintf, false);
  }

  IAutoCorrectDispT(IAutoCorrectPtr pintf)
  {
    TAutoDriver<IAutoCorrect>::Bind(pintf, true);
  }

  IAutoCorrectDispT& operator=(IAutoCorrect *pintf)
  {
    TAutoDriver<IAutoCorrect>::Bind(pintf, false);
    return *this;
  }

  IAutoCorrectDispT& operator=(IAutoCorrectPtr pintf)
  {
    TAutoDriver<IAutoCorrect>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/);
  Graph_2k::GraphApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/);
  Graph_2k::XlCreator __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddReplacement(BSTR What/*[in]*/, BSTR Replacement/*[in]*/, 
                                                       TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall AddReplacement(BSTR What/*[in]*/, BSTR Replacement/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CapitalizeNamesOfDays(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_CapitalizeNamesOfDays(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CapitalizeNamesOfDays(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DeleteReplacement(BSTR What/*[in]*/, 
                                                          TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall DeleteReplacement(BSTR What/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ReplacementList(TVariantInParam Index/*[in,opt]*/, 
                                                            TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_ReplacementList(TVariantInParam Index/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ReplacementList(TVariantInParam Index/*[in,opt]*/, 
                                                            TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ReplaceText(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ReplaceText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ReplaceText(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TwoInitialCapitals(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TwoInitialCapitals(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TwoInitialCapitals(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CorrectSentenceCap(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_CorrectSentenceCap(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CorrectSentenceCap(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CorrectCapsLock(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_CorrectCapsLock(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CorrectCapsLock(TOLEBOOL RHS/*[in]*/);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   TOLEBOOL        CapitalizeNamesOfDays = {read = get_CapitalizeNamesOfDays, write = set_CapitalizeNamesOfDays};
  __property   TOLEBOOL        ReplaceText = {read = get_ReplaceText, write = set_ReplaceText};
  __property   TOLEBOOL        TwoInitialCapitals = {read = get_TwoInitialCapitals, write = set_TwoInitialCapitals};
  __property   TOLEBOOL        CorrectSentenceCap = {read = get_CorrectSentenceCap, write = set_CorrectSentenceCap};
  __property   TOLEBOOL        CorrectCapsLock = {read = get_CorrectCapsLock, write = set_CorrectCapsLock};
};
typedef IAutoCorrectDispT<IAutoCorrect> IAutoCorrectDisp;

// *********************************************************************//
// DispIntf:  IBorder
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208EE-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class IBorderDispT : public TAutoDriver<IBorder>
{
public:
  IBorderDispT(){}

  IBorderDispT(IBorder *pintf)
  {
    TAutoDriver<IBorder>::Bind(pintf, false);
  }

  IBorderDispT(IBorderPtr pintf)
  {
    TAutoDriver<IBorder>::Bind(pintf, true);
  }

  IBorderDispT& operator=(IBorder *pintf)
  {
    TAutoDriver<IBorder>::Bind(pintf, false);
    return *this;
  }

  IBorderDispT& operator=(IBorderPtr pintf)
  {
    TAutoDriver<IBorder>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/);
  Graph_2k::GraphApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/);
  Graph_2k::XlCreator __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Color(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_Color(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Color(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColorIndex(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_ColorIndex(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColorIndex(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LineStyle(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_LineStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LineStyle(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Weight(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_Weight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Weight(TVariantInParam RHS/*[in]*/);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef IBorderDispT<IBorder> IBorderDisp;

// *********************************************************************//
// DispIntf:  IInterior
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208ED-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class IInteriorDispT : public TAutoDriver<IInterior>
{
public:
  IInteriorDispT(){}

  IInteriorDispT(IInterior *pintf)
  {
    TAutoDriver<IInterior>::Bind(pintf, false);
  }

  IInteriorDispT(IInteriorPtr pintf)
  {
    TAutoDriver<IInterior>::Bind(pintf, true);
  }

  IInteriorDispT& operator=(IInterior *pintf)
  {
    TAutoDriver<IInterior>::Bind(pintf, false);
    return *this;
  }

  IInteriorDispT& operator=(IInteriorPtr pintf)
  {
    TAutoDriver<IInterior>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/);
  Graph_2k::GraphApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/);
  Graph_2k::XlCreator __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Color(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_Color(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Color(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColorIndex(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_ColorIndex(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColorIndex(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InvertIfNegative(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_InvertIfNegative(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_InvertIfNegative(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Pattern(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_Pattern(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Pattern(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PatternColor(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_PatternColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PatternColor(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PatternColorIndex(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_PatternColorIndex(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PatternColorIndex(TVariantInParam RHS/*[in]*/);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef IInteriorDispT<IInterior> IInteriorDisp;

// *********************************************************************//
// DispIntf:  IChartFillFormat
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002441C-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class IChartFillFormatDispT : public TAutoDriver<IChartFillFormat>
{
public:
  IChartFillFormatDispT(){}

  IChartFillFormatDispT(IChartFillFormat *pintf)
  {
    TAutoDriver<IChartFillFormat>::Bind(pintf, false);
  }

  IChartFillFormatDispT(IChartFillFormatPtr pintf)
  {
    TAutoDriver<IChartFillFormat>::Bind(pintf, true);
  }

  IChartFillFormatDispT& operator=(IChartFillFormat *pintf)
  {
    TAutoDriver<IChartFillFormat>::Bind(pintf, false);
    return *this;
  }

  IChartFillFormatDispT& operator=(IChartFillFormatPtr pintf)
  {
    TAutoDriver<IChartFillFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/);
  Graph_2k::GraphApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/);
  Graph_2k::XlCreator __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall OneColorGradient(Office_2k::MsoGradientStyle Style/*[in]*/, 
                                                         long Variant/*[in]*/, float Degree/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall TwoColorGradient(Office_2k::MsoGradientStyle Style/*[in]*/, 
                                                         long Variant/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PresetTextured(Office_2k::MsoPresetTexture PresetTexture/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Solid();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Patterned(Office_2k::MsoPatternType Pattern/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall UserPicture(TVariantInParam PictureFile/*[in,opt]*/= TNoParam()
                                                    , 
                                                    TVariantInParam PictureFormat/*[in,opt]*/= TNoParam()
                                                    , 
                                                    TVariantInParam PictureStackUnit/*[in,opt]*/= TNoParam()
                                                    , 
                                                    TVariantInParam PicturePlacement/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall UserTextured(BSTR TextureFile/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PresetGradient(Office_2k::MsoGradientStyle Style/*[in]*/, 
                                                       long Variant/*[in]*/, 
                                                       Office_2k::MsoPresetGradientType PresetGradientType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackColor(Graph_2k::ChartColorFormatPtr* RHS/*[out,retval]*/);
  Graph_2k::ChartColorFormatPtr __fastcall get_BackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ForeColor(Graph_2k::ChartColorFormatPtr* RHS/*[out,retval]*/);
  Graph_2k::ChartColorFormatPtr __fastcall get_ForeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GradientColorType(Office_2k::MsoGradientColorType* RHS/*[out,retval]*/);
  Office_2k::MsoGradientColorType __fastcall get_GradientColorType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GradientDegree(float* RHS/*[out,retval]*/);
  float           __fastcall get_GradientDegree(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GradientStyle(Office_2k::MsoGradientStyle* RHS/*[out,retval]*/);
  Office_2k::MsoGradientStyle __fastcall get_GradientStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GradientVariant(long* RHS/*[out,retval]*/);
  long            __fastcall get_GradientVariant(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Pattern(Office_2k::MsoPatternType* RHS/*[out,retval]*/);
  Office_2k::MsoPatternType __fastcall get_Pattern(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PresetGradientType(Office_2k::MsoPresetGradientType* RHS/*[out,retval]*/);
  Office_2k::MsoPresetGradientType __fastcall get_PresetGradientType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PresetTexture(Office_2k::MsoPresetTexture* RHS/*[out,retval]*/);
  Office_2k::MsoPresetTexture __fastcall get_PresetTexture(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextureName(BSTR* RHS/*[out,retval]*/);
  BSTR            __fastcall get_TextureName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextureType(Office_2k::MsoTextureType* RHS/*[out,retval]*/);
  Office_2k::MsoTextureType __fastcall get_TextureType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Office_2k::MsoFillType* RHS/*[out,retval]*/);
  Office_2k::MsoFillType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_2k::MsoTriState* RHS/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_2k::MsoTriState RHS/*[in]*/);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Graph_2k::ChartColorFormatPtr BackColor = {read = get_BackColor};
  __property   Graph_2k::ChartColorFormatPtr ForeColor = {read = get_ForeColor};
  __property   Office_2k::MsoGradientColorType GradientColorType = {read = get_GradientColorType};
  __property   float           GradientDegree = {read = get_GradientDegree};
  __property   Office_2k::MsoGradientStyle GradientStyle = {read = get_GradientStyle};
  __property   long            GradientVariant = {read = get_GradientVariant};
  __property   Office_2k::MsoPatternType Pattern = {read = get_Pattern};
  __property   Office_2k::MsoPresetGradientType PresetGradientType = {read = get_PresetGradientType};
  __property   Office_2k::MsoPresetTexture PresetTexture = {read = get_PresetTexture};
  __property   BSTR            TextureName = {read = get_TextureName};
  __property   Office_2k::MsoTextureType TextureType = {read = get_TextureType};
  __property   Office_2k::MsoFillType Type = {read = get_Type};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};
};
typedef IChartFillFormatDispT<IChartFillFormat> IChartFillFormatDisp;

// *********************************************************************//
// DispIntf:  IChartColorFormat
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002441D-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class IChartColorFormatDispT : public TAutoDriver<IChartColorFormat>
{
public:
  IChartColorFormatDispT(){}

  IChartColorFormatDispT(IChartColorFormat *pintf)
  {
    TAutoDriver<IChartColorFormat>::Bind(pintf, false);
  }

  IChartColorFormatDispT(IChartColorFormatPtr pintf)
  {
    TAutoDriver<IChartColorFormat>::Bind(pintf, true);
  }

  IChartColorFormatDispT& operator=(IChartColorFormat *pintf)
  {
    TAutoDriver<IChartColorFormat>::Bind(pintf, false);
    return *this;
  }

  IChartColorFormatDispT& operator=(IChartColorFormatPtr pintf)
  {
    TAutoDriver<IChartColorFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/);
  Graph_2k::GraphApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/);
  Graph_2k::XlCreator __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SchemeColor(long* RHS/*[out,retval]*/);
  long            __fastcall get_SchemeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SchemeColor(long RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_rgb(long* RHS/*[out,retval]*/);
  long            __fastcall get_rgb(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__Default(long* RHS/*[out,retval]*/);
  long            __fastcall get__Default(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(long* RHS/*[out,retval]*/);
  long            __fastcall get_Type(void);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   long            SchemeColor = {read = get_SchemeColor, write = set_SchemeColor};
  __property   long            rgb = {read = get_rgb};
  __property   long            _Default = {read = get__Default};
  __property   long            Type = {read = get_Type};
};
typedef IChartColorFormatDispT<IChartColorFormat> IChartColorFormatDisp;

// *********************************************************************//
// DispIntf:  IAxis
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208F9-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class IAxisDispT : public TAutoDriver<IAxis>
{
public:
  IAxisDispT(){}

  IAxisDispT(IAxis *pintf)
  {
    TAutoDriver<IAxis>::Bind(pintf, false);
  }

  IAxisDispT(IAxisPtr pintf)
  {
    TAutoDriver<IAxis>::Bind(pintf, true);
  }

  IAxisDispT& operator=(IAxis *pintf)
  {
    TAutoDriver<IAxis>::Bind(pintf, false);
    return *this;
  }

  IAxisDispT& operator=(IAxisPtr pintf)
  {
    TAutoDriver<IAxis>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/);
  Graph_2k::GraphApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/);
  Graph_2k::XlCreator __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AxisBetweenCategories(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AxisBetweenCategories(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AxisBetweenCategories(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AxisGroup(Graph_2k::XlAxisGroup* RHS/*[out,retval]*/);
  Graph_2k::XlAxisGroup __fastcall get_AxisGroup(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AxisTitle(Graph_2k::AxisTitlePtr* RHS/*[out,retval]*/);
  Graph_2k::AxisTitlePtr __fastcall get_AxisTitle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Border(Graph_2k::BorderPtr* RHS/*[out,retval]*/);
  Graph_2k::BorderPtr __fastcall get_Border(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Crosses(Graph_2k::XlAxisCrosses* RHS/*[out,retval]*/);
  Graph_2k::XlAxisCrosses __fastcall get_Crosses(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Crosses(Graph_2k::XlAxisCrosses RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CrossesAt(double* RHS/*[out,retval]*/);
  double          __fastcall get_CrossesAt(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CrossesAt(double RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall Delete(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasMajorGridlines(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HasMajorGridlines(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasMajorGridlines(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasMinorGridlines(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HasMinorGridlines(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasMinorGridlines(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasTitle(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HasTitle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasTitle(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MajorGridlines(Graph_2k::GridlinesPtr* RHS/*[out,retval]*/);
  Graph_2k::GridlinesPtr __fastcall get_MajorGridlines(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MajorTickMark(Graph_2k::XlTickMark* RHS/*[out,retval]*/);
  Graph_2k::XlTickMark __fastcall get_MajorTickMark(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MajorTickMark(Graph_2k::XlTickMark RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MajorUnit(double* RHS/*[out,retval]*/);
  double          __fastcall get_MajorUnit(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MajorUnit(double RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MajorUnitIsAuto(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_MajorUnitIsAuto(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MajorUnitIsAuto(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MaximumScale(double* RHS/*[out,retval]*/);
  double          __fastcall get_MaximumScale(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MaximumScale(double RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MaximumScaleIsAuto(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_MaximumScaleIsAuto(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MaximumScaleIsAuto(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MinimumScale(double* RHS/*[out,retval]*/);
  double          __fastcall get_MinimumScale(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MinimumScale(double RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MinimumScaleIsAuto(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_MinimumScaleIsAuto(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MinimumScaleIsAuto(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MinorGridlines(Graph_2k::GridlinesPtr* RHS/*[out,retval]*/);
  Graph_2k::GridlinesPtr __fastcall get_MinorGridlines(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MinorTickMark(Graph_2k::XlTickMark* RHS/*[out,retval]*/);
  Graph_2k::XlTickMark __fastcall get_MinorTickMark(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MinorTickMark(Graph_2k::XlTickMark RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MinorUnit(double* RHS/*[out,retval]*/);
  double          __fastcall get_MinorUnit(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MinorUnit(double RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MinorUnitIsAuto(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_MinorUnitIsAuto(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MinorUnitIsAuto(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ReversePlotOrder(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ReversePlotOrder(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ReversePlotOrder(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ScaleType(Graph_2k::XlScaleType* RHS/*[out,retval]*/);
  Graph_2k::XlScaleType __fastcall get_ScaleType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ScaleType(Graph_2k::XlScaleType RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TickLabelPosition(Graph_2k::XlTickLabelPosition* RHS/*[out,retval]*/);
  Graph_2k::XlTickLabelPosition __fastcall get_TickLabelPosition(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TickLabelPosition(Graph_2k::XlTickLabelPosition RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TickLabels(Graph_2k::TickLabelsPtr* RHS/*[out,retval]*/);
  Graph_2k::TickLabelsPtr __fastcall get_TickLabels(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TickLabelSpacing(long* RHS/*[out,retval]*/);
  long            __fastcall get_TickLabelSpacing(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TickLabelSpacing(long RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TickMarkSpacing(long* RHS/*[out,retval]*/);
  long            __fastcall get_TickMarkSpacing(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TickMarkSpacing(long RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Graph_2k::XlAxisType* RHS/*[out,retval]*/);
  Graph_2k::XlAxisType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Type(Graph_2k::XlAxisType RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BaseUnit(Graph_2k::XlTimeUnit* RHS/*[out,retval]*/);
  Graph_2k::XlTimeUnit __fastcall get_BaseUnit(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BaseUnit(Graph_2k::XlTimeUnit RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BaseUnitIsAuto(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_BaseUnitIsAuto(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BaseUnitIsAuto(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MajorUnitScale(Graph_2k::XlTimeUnit* RHS/*[out,retval]*/);
  Graph_2k::XlTimeUnit __fastcall get_MajorUnitScale(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MajorUnitScale(Graph_2k::XlTimeUnit RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MinorUnitScale(Graph_2k::XlTimeUnit* RHS/*[out,retval]*/);
  Graph_2k::XlTimeUnit __fastcall get_MinorUnitScale(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MinorUnitScale(Graph_2k::XlTimeUnit RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CategoryType(Graph_2k::XlCategoryType* RHS/*[out,retval]*/);
  Graph_2k::XlCategoryType __fastcall get_CategoryType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CategoryType(Graph_2k::XlCategoryType RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(double* RHS/*[out,retval]*/);
  double          __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(double* RHS/*[out,retval]*/);
  double          __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(double* RHS/*[out,retval]*/);
  double          __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(double* RHS/*[out,retval]*/);
  double          __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayUnit(Graph_2k::XlDisplayUnit* RHS/*[out,retval]*/);
  Graph_2k::XlDisplayUnit __fastcall get_DisplayUnit(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayUnit(Graph_2k::XlDisplayUnit RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayUnitCustom(double* RHS/*[out,retval]*/);
  double          __fastcall get_DisplayUnitCustom(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayUnitCustom(double RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasDisplayUnitLabel(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HasDisplayUnitLabel(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasDisplayUnitLabel(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayUnitLabel(Graph_2k::DisplayUnitLabelPtr* RHS/*[out,retval]*/);
  Graph_2k::DisplayUnitLabelPtr __fastcall get_DisplayUnitLabel(void);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   TOLEBOOL        AxisBetweenCategories = {read = get_AxisBetweenCategories, write = set_AxisBetweenCategories};
  __property   Graph_2k::XlAxisGroup AxisGroup = {read = get_AxisGroup};
  __property   Graph_2k::AxisTitlePtr AxisTitle = {read = get_AxisTitle};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::XlAxisCrosses Crosses = {read = get_Crosses, write = set_Crosses};
  __property   double          CrossesAt = {read = get_CrossesAt, write = set_CrossesAt};
  __property   TOLEBOOL        HasMajorGridlines = {read = get_HasMajorGridlines, write = set_HasMajorGridlines};
  __property   TOLEBOOL        HasMinorGridlines = {read = get_HasMinorGridlines, write = set_HasMinorGridlines};
  __property   TOLEBOOL        HasTitle = {read = get_HasTitle, write = set_HasTitle};
  __property   Graph_2k::GridlinesPtr MajorGridlines = {read = get_MajorGridlines};
  __property   Graph_2k::XlTickMark MajorTickMark = {read = get_MajorTickMark, write = set_MajorTickMark};
  __property   double          MajorUnit = {read = get_MajorUnit, write = set_MajorUnit};
  __property   TOLEBOOL        MajorUnitIsAuto = {read = get_MajorUnitIsAuto, write = set_MajorUnitIsAuto};
  __property   double          MaximumScale = {read = get_MaximumScale, write = set_MaximumScale};
  __property   TOLEBOOL        MaximumScaleIsAuto = {read = get_MaximumScaleIsAuto, write = set_MaximumScaleIsAuto};
  __property   double          MinimumScale = {read = get_MinimumScale, write = set_MinimumScale};
  __property   TOLEBOOL        MinimumScaleIsAuto = {read = get_MinimumScaleIsAuto, write = set_MinimumScaleIsAuto};
  __property   Graph_2k::GridlinesPtr MinorGridlines = {read = get_MinorGridlines};
  __property   Graph_2k::XlTickMark MinorTickMark = {read = get_MinorTickMark, write = set_MinorTickMark};
  __property   double          MinorUnit = {read = get_MinorUnit, write = set_MinorUnit};
  __property   TOLEBOOL        MinorUnitIsAuto = {read = get_MinorUnitIsAuto, write = set_MinorUnitIsAuto};
  __property   TOLEBOOL        ReversePlotOrder = {read = get_ReversePlotOrder, write = set_ReversePlotOrder};
  __property   Graph_2k::XlScaleType ScaleType = {read = get_ScaleType, write = set_ScaleType};
  __property   Graph_2k::XlTickLabelPosition TickLabelPosition = {read = get_TickLabelPosition, write = set_TickLabelPosition};
  __property   Graph_2k::TickLabelsPtr TickLabels = {read = get_TickLabels};
  __property   long            TickLabelSpacing = {read = get_TickLabelSpacing, write = set_TickLabelSpacing};
  __property   long            TickMarkSpacing = {read = get_TickMarkSpacing, write = set_TickMarkSpacing};
  __property   Graph_2k::XlAxisType Type = {read = get_Type, write = set_Type};
  __property   Graph_2k::XlTimeUnit BaseUnit = {read = get_BaseUnit, write = set_BaseUnit};
  __property   TOLEBOOL        BaseUnitIsAuto = {read = get_BaseUnitIsAuto, write = set_BaseUnitIsAuto};
  __property   Graph_2k::XlTimeUnit MajorUnitScale = {read = get_MajorUnitScale, write = set_MajorUnitScale};
  __property   Graph_2k::XlTimeUnit MinorUnitScale = {read = get_MinorUnitScale, write = set_MinorUnitScale};
  __property   Graph_2k::XlCategoryType CategoryType = {read = get_CategoryType, write = set_CategoryType};
  __property   double          Left = {read = get_Left};
  __property   double          Top = {read = get_Top};
  __property   double          Width = {read = get_Width};
  __property   double          Height = {read = get_Height};
  __property   Graph_2k::XlDisplayUnit DisplayUnit = {read = get_DisplayUnit, write = set_DisplayUnit};
  __property   double          DisplayUnitCustom = {read = get_DisplayUnitCustom, write = set_DisplayUnitCustom};
  __property   TOLEBOOL        HasDisplayUnitLabel = {read = get_HasDisplayUnitLabel, write = set_HasDisplayUnitLabel};
  __property   Graph_2k::DisplayUnitLabelPtr DisplayUnitLabel = {read = get_DisplayUnitLabel};
};
typedef IAxisDispT<IAxis> IAxisDisp;

// *********************************************************************//
// DispIntf:  IChartTitle
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208F8-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class IChartTitleDispT : public TAutoDriver<IChartTitle>
{
public:
  IChartTitleDispT(){}

  IChartTitleDispT(IChartTitle *pintf)
  {
    TAutoDriver<IChartTitle>::Bind(pintf, false);
  }

  IChartTitleDispT(IChartTitlePtr pintf)
  {
    TAutoDriver<IChartTitle>::Bind(pintf, true);
  }

  IChartTitleDispT& operator=(IChartTitle *pintf)
  {
    TAutoDriver<IChartTitle>::Bind(pintf, false);
    return *this;
  }

  IChartTitleDispT& operator=(IChartTitlePtr pintf)
  {
    TAutoDriver<IChartTitle>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/);
  Graph_2k::GraphApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/);
  Graph_2k::XlCreator __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* RHS/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Border(Graph_2k::BorderPtr* RHS/*[out,retval]*/);
  Graph_2k::BorderPtr __fastcall get_Border(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall Delete(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Interior(Graph_2k::InteriorPtr* RHS/*[out,retval]*/);
  Graph_2k::InteriorPtr __fastcall get_Interior(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Fill(Graph_2k::ChartFillFormatPtr* RHS/*[out,retval]*/);
  Graph_2k::ChartFillFormatPtr __fastcall get_Fill(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* RHS/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Caption(BSTR RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Font(Graph_2k::FontPtr* RHS/*[out,retval]*/);
  Graph_2k::FontPtr __fastcall get_Font(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HorizontalAlignment(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_HorizontalAlignment(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HorizontalAlignment(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(double* RHS/*[out,retval]*/);
  double          __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(double RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Orientation(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_Orientation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Orientation(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Shadow(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Shadow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Shadow(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Text(BSTR* RHS/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Text(BSTR RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(double* RHS/*[out,retval]*/);
  double          __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(double RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VerticalAlignment(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_VerticalAlignment(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_VerticalAlignment(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ReadingOrder(long* RHS/*[out,retval]*/);
  long            __fastcall get_ReadingOrder(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ReadingOrder(long RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoScaleFont(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_AutoScaleFont(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoScaleFont(TVariantInParam RHS/*[in]*/);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::InteriorPtr Interior = {read = get_Interior};
  __property   Graph_2k::ChartFillFormatPtr Fill = {read = get_Fill};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   Graph_2k::FontPtr Font = {read = get_Font};
  __property   double          Left = {read = get_Left, write = set_Left};
  __property   TOLEBOOL        Shadow = {read = get_Shadow, write = set_Shadow};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   double          Top = {read = get_Top, write = set_Top};
  __property   long            ReadingOrder = {read = get_ReadingOrder, write = set_ReadingOrder};
};
typedef IChartTitleDispT<IChartTitle> IChartTitleDisp;

// *********************************************************************//
// DispIntf:  IAxisTitle
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208F7-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class IAxisTitleDispT : public TAutoDriver<IAxisTitle>
{
public:
  IAxisTitleDispT(){}

  IAxisTitleDispT(IAxisTitle *pintf)
  {
    TAutoDriver<IAxisTitle>::Bind(pintf, false);
  }

  IAxisTitleDispT(IAxisTitlePtr pintf)
  {
    TAutoDriver<IAxisTitle>::Bind(pintf, true);
  }

  IAxisTitleDispT& operator=(IAxisTitle *pintf)
  {
    TAutoDriver<IAxisTitle>::Bind(pintf, false);
    return *this;
  }

  IAxisTitleDispT& operator=(IAxisTitlePtr pintf)
  {
    TAutoDriver<IAxisTitle>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/);
  Graph_2k::GraphApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/);
  Graph_2k::XlCreator __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* RHS/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Border(Graph_2k::BorderPtr* RHS/*[out,retval]*/);
  Graph_2k::BorderPtr __fastcall get_Border(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall Delete(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Interior(Graph_2k::InteriorPtr* RHS/*[out,retval]*/);
  Graph_2k::InteriorPtr __fastcall get_Interior(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Fill(Graph_2k::ChartFillFormatPtr* RHS/*[out,retval]*/);
  Graph_2k::ChartFillFormatPtr __fastcall get_Fill(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* RHS/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Caption(BSTR RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Font(Graph_2k::FontPtr* RHS/*[out,retval]*/);
  Graph_2k::FontPtr __fastcall get_Font(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HorizontalAlignment(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_HorizontalAlignment(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HorizontalAlignment(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(double* RHS/*[out,retval]*/);
  double          __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(double RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Orientation(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_Orientation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Orientation(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Shadow(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Shadow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Shadow(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Text(BSTR* RHS/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Text(BSTR RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(double* RHS/*[out,retval]*/);
  double          __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(double RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VerticalAlignment(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_VerticalAlignment(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_VerticalAlignment(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ReadingOrder(long* RHS/*[out,retval]*/);
  long            __fastcall get_ReadingOrder(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ReadingOrder(long RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoScaleFont(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_AutoScaleFont(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoScaleFont(TVariantInParam RHS/*[in]*/);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::InteriorPtr Interior = {read = get_Interior};
  __property   Graph_2k::ChartFillFormatPtr Fill = {read = get_Fill};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   Graph_2k::FontPtr Font = {read = get_Font};
  __property   double          Left = {read = get_Left, write = set_Left};
  __property   TOLEBOOL        Shadow = {read = get_Shadow, write = set_Shadow};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   double          Top = {read = get_Top, write = set_Top};
  __property   long            ReadingOrder = {read = get_ReadingOrder, write = set_ReadingOrder};
};
typedef IAxisTitleDispT<IAxisTitle> IAxisTitleDisp;

// *********************************************************************//
// DispIntf:  IChartGroup
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208F6-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class IChartGroupDispT : public TAutoDriver<IChartGroup>
{
public:
  IChartGroupDispT(){}

  IChartGroupDispT(IChartGroup *pintf)
  {
    TAutoDriver<IChartGroup>::Bind(pintf, false);
  }

  IChartGroupDispT(IChartGroupPtr pintf)
  {
    TAutoDriver<IChartGroup>::Bind(pintf, true);
  }

  IChartGroupDispT& operator=(IChartGroup *pintf)
  {
    TAutoDriver<IChartGroup>::Bind(pintf, false);
    return *this;
  }

  IChartGroupDispT& operator=(IChartGroupPtr pintf)
  {
    TAutoDriver<IChartGroup>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/);
  Graph_2k::GraphApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/);
  Graph_2k::XlCreator __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AxisGroup(Graph_2k::XlAxisGroup* RHS/*[out,retval]*/);
  Graph_2k::XlAxisGroup __fastcall get_AxisGroup(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AxisGroup(Graph_2k::XlAxisGroup RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DoughnutHoleSize(long* RHS/*[out,retval]*/);
  long            __fastcall get_DoughnutHoleSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DoughnutHoleSize(long RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DownBars(Graph_2k::DownBarsPtr* RHS/*[out,retval]*/);
  Graph_2k::DownBarsPtr __fastcall get_DownBars(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DropLines(Graph_2k::DropLinesPtr* RHS/*[out,retval]*/);
  Graph_2k::DropLinesPtr __fastcall get_DropLines(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FirstSliceAngle(long* RHS/*[out,retval]*/);
  long            __fastcall get_FirstSliceAngle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FirstSliceAngle(long RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GapWidth(long* RHS/*[out,retval]*/);
  long            __fastcall get_GapWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GapWidth(long RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasDropLines(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HasDropLines(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasDropLines(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasHiLoLines(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HasHiLoLines(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasHiLoLines(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasRadarAxisLabels(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HasRadarAxisLabels(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasRadarAxisLabels(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasSeriesLines(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HasSeriesLines(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasSeriesLines(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasUpDownBars(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HasUpDownBars(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasUpDownBars(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HiLoLines(Graph_2k::HiLoLinesPtr* RHS/*[out,retval]*/);
  Graph_2k::HiLoLinesPtr __fastcall get_HiLoLines(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Index(long* RHS/*[out,retval]*/);
  long            __fastcall get_Index(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Overlap(long* RHS/*[out,retval]*/);
  long            __fastcall get_Overlap(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Overlap(long RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RadarAxisLabels(Graph_2k::TickLabelsPtr* RHS/*[out,retval]*/);
  Graph_2k::TickLabelsPtr __fastcall get_RadarAxisLabels(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SeriesCollection(TVariantInParam Index/*[in,opt]*/, 
                                                         LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall SeriesCollection(TVariantInParam Index/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SeriesLines(Graph_2k::SeriesLinesPtr* RHS/*[out,retval]*/);
  Graph_2k::SeriesLinesPtr __fastcall get_SeriesLines(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SubType(long* RHS/*[out,retval]*/);
  long            __fastcall get_SubType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SubType(long RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(long* RHS/*[out,retval]*/);
  long            __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Type(long RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_UpBars(Graph_2k::UpBarsPtr* RHS/*[out,retval]*/);
  Graph_2k::UpBarsPtr __fastcall get_UpBars(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VaryByCategories(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_VaryByCategories(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_VaryByCategories(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SizeRepresents(Graph_2k::XlSizeRepresents* RHS/*[out,retval]*/);
  Graph_2k::XlSizeRepresents __fastcall get_SizeRepresents(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SizeRepresents(Graph_2k::XlSizeRepresents RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BubbleScale(long* RHS/*[out,retval]*/);
  long            __fastcall get_BubbleScale(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BubbleScale(long RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowNegativeBubbles(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ShowNegativeBubbles(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowNegativeBubbles(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SplitType(Graph_2k::XlChartSplitType* RHS/*[out,retval]*/);
  Graph_2k::XlChartSplitType __fastcall get_SplitType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SplitType(Graph_2k::XlChartSplitType RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SplitValue(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_SplitValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SplitValue(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SecondPlotSize(long* RHS/*[out,retval]*/);
  long            __fastcall get_SecondPlotSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SecondPlotSize(long RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Has3DShading(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Has3DShading(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Has3DShading(TOLEBOOL RHS/*[in]*/);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Graph_2k::XlAxisGroup AxisGroup = {read = get_AxisGroup, write = set_AxisGroup};
  __property   long            DoughnutHoleSize = {read = get_DoughnutHoleSize, write = set_DoughnutHoleSize};
  __property   Graph_2k::DownBarsPtr DownBars = {read = get_DownBars};
  __property   Graph_2k::DropLinesPtr DropLines = {read = get_DropLines};
  __property   long            FirstSliceAngle = {read = get_FirstSliceAngle, write = set_FirstSliceAngle};
  __property   long            GapWidth = {read = get_GapWidth, write = set_GapWidth};
  __property   TOLEBOOL        HasDropLines = {read = get_HasDropLines, write = set_HasDropLines};
  __property   TOLEBOOL        HasHiLoLines = {read = get_HasHiLoLines, write = set_HasHiLoLines};
  __property   TOLEBOOL        HasRadarAxisLabels = {read = get_HasRadarAxisLabels, write = set_HasRadarAxisLabels};
  __property   TOLEBOOL        HasSeriesLines = {read = get_HasSeriesLines, write = set_HasSeriesLines};
  __property   TOLEBOOL        HasUpDownBars = {read = get_HasUpDownBars, write = set_HasUpDownBars};
  __property   Graph_2k::HiLoLinesPtr HiLoLines = {read = get_HiLoLines};
  __property   long            Index = {read = get_Index};
  __property   long            Overlap = {read = get_Overlap, write = set_Overlap};
  __property   Graph_2k::TickLabelsPtr RadarAxisLabels = {read = get_RadarAxisLabels};
  __property   Graph_2k::SeriesLinesPtr SeriesLines = {read = get_SeriesLines};
  __property   long            SubType = {read = get_SubType, write = set_SubType};
  __property   long            Type = {read = get_Type, write = set_Type};
  __property   Graph_2k::UpBarsPtr UpBars = {read = get_UpBars};
  __property   TOLEBOOL        VaryByCategories = {read = get_VaryByCategories, write = set_VaryByCategories};
  __property   Graph_2k::XlSizeRepresents SizeRepresents = {read = get_SizeRepresents, write = set_SizeRepresents};
  __property   long            BubbleScale = {read = get_BubbleScale, write = set_BubbleScale};
  __property   TOLEBOOL        ShowNegativeBubbles = {read = get_ShowNegativeBubbles, write = set_ShowNegativeBubbles};
  __property   Graph_2k::XlChartSplitType SplitType = {read = get_SplitType, write = set_SplitType};
  __property   long            SecondPlotSize = {read = get_SecondPlotSize, write = set_SecondPlotSize};
  __property   TOLEBOOL        Has3DShading = {read = get_Has3DShading, write = set_Has3DShading};
};
typedef IChartGroupDispT<IChartGroup> IChartGroupDisp;

// *********************************************************************//
// DispIntf:  IChartGroups
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208F5-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class IChartGroupsDispT : public TAutoDriver<IChartGroups>
{
public:
  IChartGroupsDispT(){}

  IChartGroupsDispT(IChartGroups *pintf)
  {
    TAutoDriver<IChartGroups>::Bind(pintf, false);
  }

  IChartGroupsDispT(IChartGroupsPtr pintf)
  {
    TAutoDriver<IChartGroups>::Bind(pintf, true);
  }

  IChartGroupsDispT& operator=(IChartGroups *pintf)
  {
    TAutoDriver<IChartGroups>::Bind(pintf, false);
    return *this;
  }

  IChartGroupsDispT& operator=(IChartGroupsPtr pintf)
  {
    TAutoDriver<IChartGroups>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/);
  Graph_2k::GraphApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/);
  Graph_2k::XlCreator __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* RHS/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(TVariantInParam Index/*[in]*/, 
                                             Graph_2k::ChartGroupPtr* RHS/*[out,retval]*/);
  Graph_2k::ChartGroupPtr __fastcall Item(TVariantInParam Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _NewEnum(LPUNKNOWN* RHS/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};
};
typedef IChartGroupsDispT<IChartGroups> IChartGroupsDisp;

// *********************************************************************//
// DispIntf:  IAxes
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208F4-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class IAxesDispT : public TAutoDriver<IAxes>
{
public:
  IAxesDispT(){}

  IAxesDispT(IAxes *pintf)
  {
    TAutoDriver<IAxes>::Bind(pintf, false);
  }

  IAxesDispT(IAxesPtr pintf)
  {
    TAutoDriver<IAxes>::Bind(pintf, true);
  }

  IAxesDispT& operator=(IAxes *pintf)
  {
    TAutoDriver<IAxes>::Bind(pintf, false);
    return *this;
  }

  IAxesDispT& operator=(IAxesPtr pintf)
  {
    TAutoDriver<IAxes>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/);
  Graph_2k::GraphApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/);
  Graph_2k::XlCreator __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* RHS/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(Graph_2k::XlAxisType Type/*[in]*/, 
                                             Graph_2k::XlAxisGroup AxisGroup/*[in,def,opt]*/, 
                                             Graph_2k::AxisPtr* RHS/*[out,retval]*/);
  Graph_2k::AxisPtr __fastcall Item(Graph_2k::XlAxisType Type/*[in]*/, 
                                    Graph_2k::XlAxisGroup AxisGroup/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _NewEnum(LPUNKNOWN* RHS/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};
};
typedef IAxesDispT<IAxes> IAxesDisp;

// *********************************************************************//
// DispIntf:  IPoints
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208F2-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class IPointsDispT : public TAutoDriver<IPoints>
{
public:
  IPointsDispT(){}

  IPointsDispT(IPoints *pintf)
  {
    TAutoDriver<IPoints>::Bind(pintf, false);
  }

  IPointsDispT(IPointsPtr pintf)
  {
    TAutoDriver<IPoints>::Bind(pintf, true);
  }

  IPointsDispT& operator=(IPoints *pintf)
  {
    TAutoDriver<IPoints>::Bind(pintf, false);
    return *this;
  }

  IPointsDispT& operator=(IPointsPtr pintf)
  {
    TAutoDriver<IPoints>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/);
  Graph_2k::GraphApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/);
  Graph_2k::XlCreator __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* RHS/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(long Index/*[in]*/, 
                                             Graph_2k::PointPtr* RHS/*[out,retval]*/);
  Graph_2k::PointPtr __fastcall Item(long Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _NewEnum(LPUNKNOWN* RHS/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};
};
typedef IPointsDispT<IPoints> IPointsDisp;

// *********************************************************************//
// DispIntf:  IPoint
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208F1-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class IPointDispT : public TAutoDriver<IPoint>
{
public:
  IPointDispT(){}

  IPointDispT(IPoint *pintf)
  {
    TAutoDriver<IPoint>::Bind(pintf, false);
  }

  IPointDispT(IPointPtr pintf)
  {
    TAutoDriver<IPoint>::Bind(pintf, true);
  }

  IPointDispT& operator=(IPoint *pintf)
  {
    TAutoDriver<IPoint>::Bind(pintf, false);
    return *this;
  }

  IPointDispT& operator=(IPointPtr pintf)
  {
    TAutoDriver<IPoint>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/);
  Graph_2k::GraphApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/);
  Graph_2k::XlCreator __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ApplyDataLabels(Graph_2k::XlDataLabelsType Type/*[in,def,opt]*/
                                                        , TVariantInParam LegendKey/*[in,opt]*/, 
                                                        TVariantInParam AutoText/*[in,opt]*/, 
                                                        TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall ApplyDataLabels(Graph_2k::XlDataLabelsType Type/*[in,def,opt]*/, 
                                             TVariantInParam LegendKey/*[in,opt]*/= TNoParam(), 
                                             TVariantInParam AutoText/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Border(Graph_2k::BorderPtr* RHS/*[out,retval]*/);
  Graph_2k::BorderPtr __fastcall get_Border(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ClearFormats(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall ClearFormats(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DataLabel(Graph_2k::DataLabelPtr* RHS/*[out,retval]*/);
  Graph_2k::DataLabelPtr __fastcall get_DataLabel(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall Delete(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Explosion(long* RHS/*[out,retval]*/);
  long            __fastcall get_Explosion(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Explosion(long RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasDataLabel(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HasDataLabel(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasDataLabel(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Interior(Graph_2k::InteriorPtr* RHS/*[out,retval]*/);
  Graph_2k::InteriorPtr __fastcall get_Interior(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InvertIfNegative(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InvertIfNegative(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_InvertIfNegative(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MarkerBackgroundColor(long* RHS/*[out,retval]*/);
  long            __fastcall get_MarkerBackgroundColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MarkerBackgroundColor(long RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MarkerBackgroundColorIndex(Graph_2k::XlColorIndex* RHS/*[out,retval]*/);
  Graph_2k::XlColorIndex __fastcall get_MarkerBackgroundColorIndex(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MarkerBackgroundColorIndex(Graph_2k::XlColorIndex RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MarkerForegroundColor(long* RHS/*[out,retval]*/);
  long            __fastcall get_MarkerForegroundColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MarkerForegroundColor(long RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MarkerForegroundColorIndex(Graph_2k::XlColorIndex* RHS/*[out,retval]*/);
  Graph_2k::XlColorIndex __fastcall get_MarkerForegroundColorIndex(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MarkerForegroundColorIndex(Graph_2k::XlColorIndex RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MarkerSize(long* RHS/*[out,retval]*/);
  long            __fastcall get_MarkerSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MarkerSize(long RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MarkerStyle(Graph_2k::XlMarkerStyle* RHS/*[out,retval]*/);
  Graph_2k::XlMarkerStyle __fastcall get_MarkerStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MarkerStyle(Graph_2k::XlMarkerStyle RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureType(Graph_2k::XlChartPictureType* RHS/*[out,retval]*/);
  Graph_2k::XlChartPictureType __fastcall get_PictureType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PictureType(Graph_2k::XlChartPictureType RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureUnit(long* RHS/*[out,retval]*/);
  long            __fastcall get_PictureUnit(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PictureUnit(long RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ApplyPictToSides(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ApplyPictToSides(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ApplyPictToSides(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ApplyPictToFront(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ApplyPictToFront(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ApplyPictToFront(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ApplyPictToEnd(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ApplyPictToEnd(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ApplyPictToEnd(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Shadow(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Shadow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Shadow(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SecondaryPlot(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_SecondaryPlot(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SecondaryPlot(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Fill(Graph_2k::ChartFillFormatPtr* RHS/*[out,retval]*/);
  Graph_2k::ChartFillFormatPtr __fastcall get_Fill(void);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::DataLabelPtr DataLabel = {read = get_DataLabel};
  __property   long            Explosion = {read = get_Explosion, write = set_Explosion};
  __property   TOLEBOOL        HasDataLabel = {read = get_HasDataLabel, write = set_HasDataLabel};
  __property   Graph_2k::InteriorPtr Interior = {read = get_Interior};
  __property   TOLEBOOL        InvertIfNegative = {read = get_InvertIfNegative, write = set_InvertIfNegative};
  __property   long            MarkerBackgroundColor = {read = get_MarkerBackgroundColor, write = set_MarkerBackgroundColor};
  __property   Graph_2k::XlColorIndex MarkerBackgroundColorIndex = {read = get_MarkerBackgroundColorIndex, write = set_MarkerBackgroundColorIndex};
  __property   long            MarkerForegroundColor = {read = get_MarkerForegroundColor, write = set_MarkerForegroundColor};
  __property   Graph_2k::XlColorIndex MarkerForegroundColorIndex = {read = get_MarkerForegroundColorIndex, write = set_MarkerForegroundColorIndex};
  __property   long            MarkerSize = {read = get_MarkerSize, write = set_MarkerSize};
  __property   Graph_2k::XlMarkerStyle MarkerStyle = {read = get_MarkerStyle, write = set_MarkerStyle};
  __property   Graph_2k::XlChartPictureType PictureType = {read = get_PictureType, write = set_PictureType};
  __property   long            PictureUnit = {read = get_PictureUnit, write = set_PictureUnit};
  __property   TOLEBOOL        ApplyPictToSides = {read = get_ApplyPictToSides, write = set_ApplyPictToSides};
  __property   TOLEBOOL        ApplyPictToFront = {read = get_ApplyPictToFront, write = set_ApplyPictToFront};
  __property   TOLEBOOL        ApplyPictToEnd = {read = get_ApplyPictToEnd, write = set_ApplyPictToEnd};
  __property   TOLEBOOL        Shadow = {read = get_Shadow, write = set_Shadow};
  __property   TOLEBOOL        SecondaryPlot = {read = get_SecondaryPlot, write = set_SecondaryPlot};
  __property   Graph_2k::ChartFillFormatPtr Fill = {read = get_Fill};
};
typedef IPointDispT<IPoint> IPointDisp;

// *********************************************************************//
// DispIntf:  ISeries
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208F0-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class ISeriesDispT : public TAutoDriver<ISeries>
{
public:
  ISeriesDispT(){}

  ISeriesDispT(ISeries *pintf)
  {
    TAutoDriver<ISeries>::Bind(pintf, false);
  }

  ISeriesDispT(ISeriesPtr pintf)
  {
    TAutoDriver<ISeries>::Bind(pintf, true);
  }

  ISeriesDispT& operator=(ISeries *pintf)
  {
    TAutoDriver<ISeries>::Bind(pintf, false);
    return *this;
  }

  ISeriesDispT& operator=(ISeriesPtr pintf)
  {
    TAutoDriver<ISeries>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/);
  Graph_2k::GraphApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/);
  Graph_2k::XlCreator __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ApplyDataLabels(Graph_2k::XlDataLabelsType Type/*[in,def,opt]*/
                                                        , TVariantInParam LegendKey/*[in,opt]*/, 
                                                        TVariantInParam AutoText/*[in,opt]*/, 
                                                        TVariantInParam HasLeaderLines/*[in,opt]*/, 
                                                        TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall ApplyDataLabels(Graph_2k::XlDataLabelsType Type/*[in,def,opt]*/, 
                                             TVariantInParam LegendKey/*[in,opt]*/= TNoParam(), 
                                             TVariantInParam AutoText/*[in,opt]*/= TNoParam(), 
                                             TVariantInParam HasLeaderLines/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AxisGroup(Graph_2k::XlAxisGroup* RHS/*[out,retval]*/);
  Graph_2k::XlAxisGroup __fastcall get_AxisGroup(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AxisGroup(Graph_2k::XlAxisGroup RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Border(Graph_2k::BorderPtr* RHS/*[out,retval]*/);
  Graph_2k::BorderPtr __fastcall get_Border(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ClearFormats(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall ClearFormats(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DataLabels(TVariantInParam Index/*[in,opt]*/, 
                                                   LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall DataLabels(TVariantInParam Index/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall Delete(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ErrorBar(Graph_2k::XlErrorBarDirection Direction/*[in]*/, 
                                                 Graph_2k::XlErrorBarInclude Include/*[in]*/, 
                                                 Graph_2k::XlErrorBarType Type/*[in]*/, 
                                                 TVariantInParam Amount/*[in,opt]*/, 
                                                 TVariantInParam MinusValues/*[in,opt]*/, 
                                                 TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall ErrorBar(Graph_2k::XlErrorBarDirection Direction/*[in]*/, 
                                      Graph_2k::XlErrorBarInclude Include/*[in]*/, 
                                      Graph_2k::XlErrorBarType Type/*[in]*/, 
                                      TVariantInParam Amount/*[in,opt]*/= TNoParam(), 
                                      TVariantInParam MinusValues/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ErrorBars(Graph_2k::ErrorBarsPtr* RHS/*[out,retval]*/);
  Graph_2k::ErrorBarsPtr __fastcall get_ErrorBars(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Explosion(long* RHS/*[out,retval]*/);
  long            __fastcall get_Explosion(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Explosion(long RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasDataLabels(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HasDataLabels(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasDataLabels(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasErrorBars(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HasErrorBars(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasErrorBars(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Interior(Graph_2k::InteriorPtr* RHS/*[out,retval]*/);
  Graph_2k::InteriorPtr __fastcall get_Interior(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Fill(Graph_2k::ChartFillFormatPtr* RHS/*[out,retval]*/);
  Graph_2k::ChartFillFormatPtr __fastcall get_Fill(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InvertIfNegative(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InvertIfNegative(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_InvertIfNegative(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MarkerBackgroundColor(long* RHS/*[out,retval]*/);
  long            __fastcall get_MarkerBackgroundColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MarkerBackgroundColor(long RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MarkerBackgroundColorIndex(Graph_2k::XlColorIndex* RHS/*[out,retval]*/);
  Graph_2k::XlColorIndex __fastcall get_MarkerBackgroundColorIndex(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MarkerBackgroundColorIndex(Graph_2k::XlColorIndex RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MarkerForegroundColor(long* RHS/*[out,retval]*/);
  long            __fastcall get_MarkerForegroundColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MarkerForegroundColor(long RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MarkerForegroundColorIndex(Graph_2k::XlColorIndex* RHS/*[out,retval]*/);
  Graph_2k::XlColorIndex __fastcall get_MarkerForegroundColorIndex(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MarkerForegroundColorIndex(Graph_2k::XlColorIndex RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MarkerSize(long* RHS/*[out,retval]*/);
  long            __fastcall get_MarkerSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MarkerSize(long RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MarkerStyle(Graph_2k::XlMarkerStyle* RHS/*[out,retval]*/);
  Graph_2k::XlMarkerStyle __fastcall get_MarkerStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MarkerStyle(Graph_2k::XlMarkerStyle RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureType(Graph_2k::XlChartPictureType* RHS/*[out,retval]*/);
  Graph_2k::XlChartPictureType __fastcall get_PictureType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PictureType(Graph_2k::XlChartPictureType RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureUnit(long* RHS/*[out,retval]*/);
  long            __fastcall get_PictureUnit(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PictureUnit(long RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Points(TVariantInParam Index/*[in,opt]*/, 
                                               LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall Points(TVariantInParam Index/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Smooth(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Smooth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Smooth(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Trendlines(TVariantInParam Index/*[in,opt]*/, 
                                                   LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall Trendlines(TVariantInParam Index/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(long* RHS/*[out,retval]*/);
  long            __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Type(long RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ChartType(Graph_2k::XlChartType* RHS/*[out,retval]*/);
  Graph_2k::XlChartType __fastcall get_ChartType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ChartType(Graph_2k::XlChartType RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ApplyCustomType(Graph_2k::XlChartType ChartType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BarShape(Graph_2k::XlBarShape* RHS/*[out,retval]*/);
  Graph_2k::XlBarShape __fastcall get_BarShape(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BarShape(Graph_2k::XlBarShape RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ApplyPictToSides(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ApplyPictToSides(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ApplyPictToSides(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ApplyPictToFront(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ApplyPictToFront(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ApplyPictToFront(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ApplyPictToEnd(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ApplyPictToEnd(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ApplyPictToEnd(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Has3DEffect(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Has3DEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Has3DEffect(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Shadow(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Shadow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Shadow(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasLeaderLines(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HasLeaderLines(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasLeaderLines(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LeaderLines(Graph_2k::LeaderLinesPtr* RHS/*[out,retval]*/);
  Graph_2k::LeaderLinesPtr __fastcall get_LeaderLines(void);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Graph_2k::XlAxisGroup AxisGroup = {read = get_AxisGroup, write = set_AxisGroup};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::ErrorBarsPtr ErrorBars = {read = get_ErrorBars};
  __property   long            Explosion = {read = get_Explosion, write = set_Explosion};
  __property   TOLEBOOL        HasDataLabels = {read = get_HasDataLabels, write = set_HasDataLabels};
  __property   TOLEBOOL        HasErrorBars = {read = get_HasErrorBars, write = set_HasErrorBars};
  __property   Graph_2k::InteriorPtr Interior = {read = get_Interior};
  __property   Graph_2k::ChartFillFormatPtr Fill = {read = get_Fill};
  __property   TOLEBOOL        InvertIfNegative = {read = get_InvertIfNegative, write = set_InvertIfNegative};
  __property   long            MarkerBackgroundColor = {read = get_MarkerBackgroundColor, write = set_MarkerBackgroundColor};
  __property   Graph_2k::XlColorIndex MarkerBackgroundColorIndex = {read = get_MarkerBackgroundColorIndex, write = set_MarkerBackgroundColorIndex};
  __property   long            MarkerForegroundColor = {read = get_MarkerForegroundColor, write = set_MarkerForegroundColor};
  __property   Graph_2k::XlColorIndex MarkerForegroundColorIndex = {read = get_MarkerForegroundColorIndex, write = set_MarkerForegroundColorIndex};
  __property   long            MarkerSize = {read = get_MarkerSize, write = set_MarkerSize};
  __property   Graph_2k::XlMarkerStyle MarkerStyle = {read = get_MarkerStyle, write = set_MarkerStyle};
  __property   Graph_2k::XlChartPictureType PictureType = {read = get_PictureType, write = set_PictureType};
  __property   long            PictureUnit = {read = get_PictureUnit, write = set_PictureUnit};
  __property   TOLEBOOL        Smooth = {read = get_Smooth, write = set_Smooth};
  __property   long            Type = {read = get_Type, write = set_Type};
  __property   Graph_2k::XlChartType ChartType = {read = get_ChartType, write = set_ChartType};
  __property   Graph_2k::XlBarShape BarShape = {read = get_BarShape, write = set_BarShape};
  __property   TOLEBOOL        ApplyPictToSides = {read = get_ApplyPictToSides, write = set_ApplyPictToSides};
  __property   TOLEBOOL        ApplyPictToFront = {read = get_ApplyPictToFront, write = set_ApplyPictToFront};
  __property   TOLEBOOL        ApplyPictToEnd = {read = get_ApplyPictToEnd, write = set_ApplyPictToEnd};
  __property   TOLEBOOL        Has3DEffect = {read = get_Has3DEffect, write = set_Has3DEffect};
  __property   TOLEBOOL        Shadow = {read = get_Shadow, write = set_Shadow};
  __property   TOLEBOOL        HasLeaderLines = {read = get_HasLeaderLines, write = set_HasLeaderLines};
  __property   Graph_2k::LeaderLinesPtr LeaderLines = {read = get_LeaderLines};
};
typedef ISeriesDispT<ISeries> ISeriesDisp;

// *********************************************************************//
// DispIntf:  ISeriesCollection
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208EF-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class ISeriesCollectionDispT : public TAutoDriver<ISeriesCollection>
{
public:
  ISeriesCollectionDispT(){}

  ISeriesCollectionDispT(ISeriesCollection *pintf)
  {
    TAutoDriver<ISeriesCollection>::Bind(pintf, false);
  }

  ISeriesCollectionDispT(ISeriesCollectionPtr pintf)
  {
    TAutoDriver<ISeriesCollection>::Bind(pintf, true);
  }

  ISeriesCollectionDispT& operator=(ISeriesCollection *pintf)
  {
    TAutoDriver<ISeriesCollection>::Bind(pintf, false);
    return *this;
  }

  ISeriesCollectionDispT& operator=(ISeriesCollectionPtr pintf)
  {
    TAutoDriver<ISeriesCollection>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/);
  Graph_2k::GraphApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/);
  Graph_2k::XlCreator __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* RHS/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(TVariantInParam Index/*[in]*/, 
                                             Graph_2k::SeriesPtr* RHS/*[out,retval]*/);
  Graph_2k::SeriesPtr __fastcall Item(TVariantInParam Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _NewEnum(LPUNKNOWN* RHS/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};
};
typedef ISeriesCollectionDispT<ISeriesCollection> ISeriesCollectionDisp;

// *********************************************************************//
// DispIntf:  IDataLabel
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208E9-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class IDataLabelDispT : public TAutoDriver<IDataLabel>
{
public:
  IDataLabelDispT(){}

  IDataLabelDispT(IDataLabel *pintf)
  {
    TAutoDriver<IDataLabel>::Bind(pintf, false);
  }

  IDataLabelDispT(IDataLabelPtr pintf)
  {
    TAutoDriver<IDataLabel>::Bind(pintf, true);
  }

  IDataLabelDispT& operator=(IDataLabel *pintf)
  {
    TAutoDriver<IDataLabel>::Bind(pintf, false);
    return *this;
  }

  IDataLabelDispT& operator=(IDataLabelPtr pintf)
  {
    TAutoDriver<IDataLabel>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/);
  Graph_2k::GraphApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/);
  Graph_2k::XlCreator __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* RHS/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Border(Graph_2k::BorderPtr* RHS/*[out,retval]*/);
  Graph_2k::BorderPtr __fastcall get_Border(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall Delete(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Interior(Graph_2k::InteriorPtr* RHS/*[out,retval]*/);
  Graph_2k::InteriorPtr __fastcall get_Interior(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Fill(Graph_2k::ChartFillFormatPtr* RHS/*[out,retval]*/);
  Graph_2k::ChartFillFormatPtr __fastcall get_Fill(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* RHS/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Caption(BSTR RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Font(Graph_2k::FontPtr* RHS/*[out,retval]*/);
  Graph_2k::FontPtr __fastcall get_Font(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HorizontalAlignment(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_HorizontalAlignment(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HorizontalAlignment(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(double* RHS/*[out,retval]*/);
  double          __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(double RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Orientation(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_Orientation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Orientation(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Shadow(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Shadow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Shadow(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Text(BSTR* RHS/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Text(BSTR RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(double* RHS/*[out,retval]*/);
  double          __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(double RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VerticalAlignment(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_VerticalAlignment(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_VerticalAlignment(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ReadingOrder(long* RHS/*[out,retval]*/);
  long            __fastcall get_ReadingOrder(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ReadingOrder(long RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoScaleFont(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_AutoScaleFont(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoScaleFont(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoText(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoText(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NumberFormat(BSTR* RHS/*[out,retval]*/);
  BSTR            __fastcall get_NumberFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_NumberFormat(BSTR RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NumberFormatLocal(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_NumberFormatLocal(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_NumberFormatLocal(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowLegendKey(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ShowLegendKey(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowLegendKey(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Type(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Position(Graph_2k::XlDataLabelPosition* RHS/*[out,retval]*/);
  Graph_2k::XlDataLabelPosition __fastcall get_Position(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Position(Graph_2k::XlDataLabelPosition RHS/*[in]*/);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::InteriorPtr Interior = {read = get_Interior};
  __property   Graph_2k::ChartFillFormatPtr Fill = {read = get_Fill};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   Graph_2k::FontPtr Font = {read = get_Font};
  __property   double          Left = {read = get_Left, write = set_Left};
  __property   TOLEBOOL        Shadow = {read = get_Shadow, write = set_Shadow};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   double          Top = {read = get_Top, write = set_Top};
  __property   long            ReadingOrder = {read = get_ReadingOrder, write = set_ReadingOrder};
  __property   TOLEBOOL        AutoText = {read = get_AutoText, write = set_AutoText};
  __property   BSTR            NumberFormat = {read = get_NumberFormat, write = set_NumberFormat};
  __property   TOLEBOOL        ShowLegendKey = {read = get_ShowLegendKey, write = set_ShowLegendKey};
  __property   Graph_2k::XlDataLabelPosition Position = {read = get_Position, write = set_Position};
};
typedef IDataLabelDispT<IDataLabel> IDataLabelDisp;

// *********************************************************************//
// DispIntf:  IDataLabels
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208E8-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class IDataLabelsDispT : public TAutoDriver<IDataLabels>
{
public:
  IDataLabelsDispT(){}

  IDataLabelsDispT(IDataLabels *pintf)
  {
    TAutoDriver<IDataLabels>::Bind(pintf, false);
  }

  IDataLabelsDispT(IDataLabelsPtr pintf)
  {
    TAutoDriver<IDataLabels>::Bind(pintf, true);
  }

  IDataLabelsDispT& operator=(IDataLabels *pintf)
  {
    TAutoDriver<IDataLabels>::Bind(pintf, false);
    return *this;
  }

  IDataLabelsDispT& operator=(IDataLabelsPtr pintf)
  {
    TAutoDriver<IDataLabels>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/);
  Graph_2k::GraphApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/);
  Graph_2k::XlCreator __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* RHS/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Border(Graph_2k::BorderPtr* RHS/*[out,retval]*/);
  Graph_2k::BorderPtr __fastcall get_Border(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall Delete(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Interior(Graph_2k::InteriorPtr* RHS/*[out,retval]*/);
  Graph_2k::InteriorPtr __fastcall get_Interior(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Fill(Graph_2k::ChartFillFormatPtr* RHS/*[out,retval]*/);
  Graph_2k::ChartFillFormatPtr __fastcall get_Fill(void);
  void /*[VT_VOID:0]*/ __fastcall _Dummy8();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Font(Graph_2k::FontPtr* RHS/*[out,retval]*/);
  Graph_2k::FontPtr __fastcall get_Font(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HorizontalAlignment(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_HorizontalAlignment(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HorizontalAlignment(TVariantInParam RHS/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall _Dummy11();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Orientation(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_Orientation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Orientation(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Shadow(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Shadow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Shadow(TOLEBOOL RHS/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall _Dummy14();
  void /*[VT_VOID:0]*/ __fastcall _Dummy15();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VerticalAlignment(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_VerticalAlignment(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_VerticalAlignment(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ReadingOrder(long* RHS/*[out,retval]*/);
  long            __fastcall get_ReadingOrder(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ReadingOrder(long RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoScaleFont(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_AutoScaleFont(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoScaleFont(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoText(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoText(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NumberFormat(BSTR* RHS/*[out,retval]*/);
  BSTR            __fastcall get_NumberFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_NumberFormat(BSTR RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NumberFormatLocal(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_NumberFormatLocal(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_NumberFormatLocal(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowLegendKey(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ShowLegendKey(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowLegendKey(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Type(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Position(Graph_2k::XlDataLabelPosition* RHS/*[out,retval]*/);
  Graph_2k::XlDataLabelPosition __fastcall get_Position(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Position(Graph_2k::XlDataLabelPosition RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* RHS/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(TVariantInParam Index/*[in]*/, 
                                             Graph_2k::DataLabelPtr* RHS/*[out,retval]*/);
  Graph_2k::DataLabelPtr __fastcall Item(TVariantInParam Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _NewEnum(LPUNKNOWN* RHS/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);
  void /*[VT_VOID:0]*/ __fastcall _Dummy28();

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::InteriorPtr Interior = {read = get_Interior};
  __property   Graph_2k::ChartFillFormatPtr Fill = {read = get_Fill};
  __property   Graph_2k::FontPtr Font = {read = get_Font};
  __property   TOLEBOOL        Shadow = {read = get_Shadow, write = set_Shadow};
  __property   long            ReadingOrder = {read = get_ReadingOrder, write = set_ReadingOrder};
  __property   TOLEBOOL        AutoText = {read = get_AutoText, write = set_AutoText};
  __property   BSTR            NumberFormat = {read = get_NumberFormat, write = set_NumberFormat};
  __property   TOLEBOOL        ShowLegendKey = {read = get_ShowLegendKey, write = set_ShowLegendKey};
  __property   Graph_2k::XlDataLabelPosition Position = {read = get_Position, write = set_Position};
  __property   long            Count = {read = get_Count};
};
typedef IDataLabelsDispT<IDataLabels> IDataLabelsDisp;

// *********************************************************************//
// DispIntf:  ILegendEntry
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208E7-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class ILegendEntryDispT : public TAutoDriver<ILegendEntry>
{
public:
  ILegendEntryDispT(){}

  ILegendEntryDispT(ILegendEntry *pintf)
  {
    TAutoDriver<ILegendEntry>::Bind(pintf, false);
  }

  ILegendEntryDispT(ILegendEntryPtr pintf)
  {
    TAutoDriver<ILegendEntry>::Bind(pintf, true);
  }

  ILegendEntryDispT& operator=(ILegendEntry *pintf)
  {
    TAutoDriver<ILegendEntry>::Bind(pintf, false);
    return *this;
  }

  ILegendEntryDispT& operator=(ILegendEntryPtr pintf)
  {
    TAutoDriver<ILegendEntry>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/);
  Graph_2k::GraphApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/);
  Graph_2k::XlCreator __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall Delete(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Font(Graph_2k::FontPtr* RHS/*[out,retval]*/);
  Graph_2k::FontPtr __fastcall get_Font(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Index(long* RHS/*[out,retval]*/);
  long            __fastcall get_Index(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LegendKey(Graph_2k::LegendKeyPtr* RHS/*[out,retval]*/);
  Graph_2k::LegendKeyPtr __fastcall get_LegendKey(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoScaleFont(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_AutoScaleFont(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoScaleFont(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(double* RHS/*[out,retval]*/);
  double          __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(double* RHS/*[out,retval]*/);
  double          __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(double* RHS/*[out,retval]*/);
  double          __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(double* RHS/*[out,retval]*/);
  double          __fastcall get_Height(void);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Graph_2k::FontPtr Font = {read = get_Font};
  __property   long            Index = {read = get_Index};
  __property   Graph_2k::LegendKeyPtr LegendKey = {read = get_LegendKey};
  __property   double          Left = {read = get_Left};
  __property   double          Top = {read = get_Top};
  __property   double          Width = {read = get_Width};
  __property   double          Height = {read = get_Height};
};
typedef ILegendEntryDispT<ILegendEntry> ILegendEntryDisp;

// *********************************************************************//
// DispIntf:  ILegendEntries
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208E6-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class ILegendEntriesDispT : public TAutoDriver<ILegendEntries>
{
public:
  ILegendEntriesDispT(){}

  ILegendEntriesDispT(ILegendEntries *pintf)
  {
    TAutoDriver<ILegendEntries>::Bind(pintf, false);
  }

  ILegendEntriesDispT(ILegendEntriesPtr pintf)
  {
    TAutoDriver<ILegendEntries>::Bind(pintf, true);
  }

  ILegendEntriesDispT& operator=(ILegendEntries *pintf)
  {
    TAutoDriver<ILegendEntries>::Bind(pintf, false);
    return *this;
  }

  ILegendEntriesDispT& operator=(ILegendEntriesPtr pintf)
  {
    TAutoDriver<ILegendEntries>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/);
  Graph_2k::GraphApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/);
  Graph_2k::XlCreator __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* RHS/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(TVariantInParam Index/*[in]*/, 
                                             Graph_2k::LegendEntryPtr* RHS/*[out,retval]*/);
  Graph_2k::LegendEntryPtr __fastcall Item(TVariantInParam Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _NewEnum(LPUNKNOWN* RHS/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};
};
typedef ILegendEntriesDispT<ILegendEntries> ILegendEntriesDisp;

// *********************************************************************//
// DispIntf:  ILegendKey
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208E5-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class ILegendKeyDispT : public TAutoDriver<ILegendKey>
{
public:
  ILegendKeyDispT(){}

  ILegendKeyDispT(ILegendKey *pintf)
  {
    TAutoDriver<ILegendKey>::Bind(pintf, false);
  }

  ILegendKeyDispT(ILegendKeyPtr pintf)
  {
    TAutoDriver<ILegendKey>::Bind(pintf, true);
  }

  ILegendKeyDispT& operator=(ILegendKey *pintf)
  {
    TAutoDriver<ILegendKey>::Bind(pintf, false);
    return *this;
  }

  ILegendKeyDispT& operator=(ILegendKeyPtr pintf)
  {
    TAutoDriver<ILegendKey>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/);
  Graph_2k::GraphApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/);
  Graph_2k::XlCreator __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Border(Graph_2k::BorderPtr* RHS/*[out,retval]*/);
  Graph_2k::BorderPtr __fastcall get_Border(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ClearFormats(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall ClearFormats(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall Delete(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Interior(Graph_2k::InteriorPtr* RHS/*[out,retval]*/);
  Graph_2k::InteriorPtr __fastcall get_Interior(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Fill(Graph_2k::ChartFillFormatPtr* RHS/*[out,retval]*/);
  Graph_2k::ChartFillFormatPtr __fastcall get_Fill(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InvertIfNegative(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InvertIfNegative(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_InvertIfNegative(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MarkerBackgroundColor(long* RHS/*[out,retval]*/);
  long            __fastcall get_MarkerBackgroundColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MarkerBackgroundColor(long RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MarkerBackgroundColorIndex(Graph_2k::XlColorIndex* RHS/*[out,retval]*/);
  Graph_2k::XlColorIndex __fastcall get_MarkerBackgroundColorIndex(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MarkerBackgroundColorIndex(Graph_2k::XlColorIndex RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MarkerForegroundColor(long* RHS/*[out,retval]*/);
  long            __fastcall get_MarkerForegroundColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MarkerForegroundColor(long RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MarkerForegroundColorIndex(Graph_2k::XlColorIndex* RHS/*[out,retval]*/);
  Graph_2k::XlColorIndex __fastcall get_MarkerForegroundColorIndex(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MarkerForegroundColorIndex(Graph_2k::XlColorIndex RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MarkerSize(long* RHS/*[out,retval]*/);
  long            __fastcall get_MarkerSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MarkerSize(long RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MarkerStyle(Graph_2k::XlMarkerStyle* RHS/*[out,retval]*/);
  Graph_2k::XlMarkerStyle __fastcall get_MarkerStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MarkerStyle(Graph_2k::XlMarkerStyle RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureType(long* RHS/*[out,retval]*/);
  long            __fastcall get_PictureType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PictureType(long RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureUnit(long* RHS/*[out,retval]*/);
  long            __fastcall get_PictureUnit(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PictureUnit(long RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Smooth(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Smooth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Smooth(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(double* RHS/*[out,retval]*/);
  double          __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(double* RHS/*[out,retval]*/);
  double          __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(double* RHS/*[out,retval]*/);
  double          __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(double* RHS/*[out,retval]*/);
  double          __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Shadow(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Shadow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Shadow(TOLEBOOL RHS/*[in]*/);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::InteriorPtr Interior = {read = get_Interior};
  __property   Graph_2k::ChartFillFormatPtr Fill = {read = get_Fill};
  __property   TOLEBOOL        InvertIfNegative = {read = get_InvertIfNegative, write = set_InvertIfNegative};
  __property   long            MarkerBackgroundColor = {read = get_MarkerBackgroundColor, write = set_MarkerBackgroundColor};
  __property   Graph_2k::XlColorIndex MarkerBackgroundColorIndex = {read = get_MarkerBackgroundColorIndex, write = set_MarkerBackgroundColorIndex};
  __property   long            MarkerForegroundColor = {read = get_MarkerForegroundColor, write = set_MarkerForegroundColor};
  __property   Graph_2k::XlColorIndex MarkerForegroundColorIndex = {read = get_MarkerForegroundColorIndex, write = set_MarkerForegroundColorIndex};
  __property   long            MarkerSize = {read = get_MarkerSize, write = set_MarkerSize};
  __property   Graph_2k::XlMarkerStyle MarkerStyle = {read = get_MarkerStyle, write = set_MarkerStyle};
  __property   long            PictureType = {read = get_PictureType, write = set_PictureType};
  __property   long            PictureUnit = {read = get_PictureUnit, write = set_PictureUnit};
  __property   TOLEBOOL        Smooth = {read = get_Smooth, write = set_Smooth};
  __property   double          Left = {read = get_Left};
  __property   double          Top = {read = get_Top};
  __property   double          Width = {read = get_Width};
  __property   double          Height = {read = get_Height};
  __property   TOLEBOOL        Shadow = {read = get_Shadow, write = set_Shadow};
};
typedef ILegendKeyDispT<ILegendKey> ILegendKeyDisp;

// *********************************************************************//
// DispIntf:  ITrendlines
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208E4-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class ITrendlinesDispT : public TAutoDriver<ITrendlines>
{
public:
  ITrendlinesDispT(){}

  ITrendlinesDispT(ITrendlines *pintf)
  {
    TAutoDriver<ITrendlines>::Bind(pintf, false);
  }

  ITrendlinesDispT(ITrendlinesPtr pintf)
  {
    TAutoDriver<ITrendlines>::Bind(pintf, true);
  }

  ITrendlinesDispT& operator=(ITrendlines *pintf)
  {
    TAutoDriver<ITrendlines>::Bind(pintf, false);
    return *this;
  }

  ITrendlinesDispT& operator=(ITrendlinesPtr pintf)
  {
    TAutoDriver<ITrendlines>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/);
  Graph_2k::GraphApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/);
  Graph_2k::XlCreator __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(Graph_2k::XlTrendlineType Type/*[in,def,opt]*/, 
                                            TVariantInParam Order/*[in,opt]*/, 
                                            TVariantInParam Period/*[in,opt]*/, 
                                            TVariantInParam Forward/*[in,opt]*/, 
                                            TVariantInParam Backward/*[in,opt]*/, 
                                            TVariantInParam Intercept/*[in,opt]*/, 
                                            TVariantInParam DisplayEquation/*[in,opt]*/, 
                                            TVariantInParam DisplayRSquared/*[in,opt]*/, 
                                            TVariantInParam Name/*[in,opt]*/, 
                                            Graph_2k::TrendlinePtr* RHS/*[out,retval]*/);
  Graph_2k::TrendlinePtr __fastcall Add(Graph_2k::XlTrendlineType Type/*[in,def,opt]*/, 
                                        TVariantInParam Order/*[in,opt]*/= TNoParam(), 
                                        TVariantInParam Period/*[in,opt]*/= TNoParam(), 
                                        TVariantInParam Forward/*[in,opt]*/= TNoParam(), 
                                        TVariantInParam Backward/*[in,opt]*/= TNoParam(), 
                                        TVariantInParam Intercept/*[in,opt]*/= TNoParam(), 
                                        TVariantInParam DisplayEquation/*[in,opt]*/= TNoParam(), 
                                        TVariantInParam DisplayRSquared/*[in,opt]*/= TNoParam(), 
                                        TVariantInParam Name/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* RHS/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(TVariantInParam Index/*[in,opt]*/, 
                                             Graph_2k::TrendlinePtr* RHS/*[out,retval]*/);
  Graph_2k::TrendlinePtr __fastcall Item(TVariantInParam Index/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _NewEnum(LPUNKNOWN* RHS/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};
};
typedef ITrendlinesDispT<ITrendlines> ITrendlinesDisp;

// *********************************************************************//
// DispIntf:  ITrendline
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208E3-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class ITrendlineDispT : public TAutoDriver<ITrendline>
{
public:
  ITrendlineDispT(){}

  ITrendlineDispT(ITrendline *pintf)
  {
    TAutoDriver<ITrendline>::Bind(pintf, false);
  }

  ITrendlineDispT(ITrendlinePtr pintf)
  {
    TAutoDriver<ITrendline>::Bind(pintf, true);
  }

  ITrendlineDispT& operator=(ITrendline *pintf)
  {
    TAutoDriver<ITrendline>::Bind(pintf, false);
    return *this;
  }

  ITrendlineDispT& operator=(ITrendlinePtr pintf)
  {
    TAutoDriver<ITrendline>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/);
  Graph_2k::GraphApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/);
  Graph_2k::XlCreator __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Backward(long* RHS/*[out,retval]*/);
  long            __fastcall get_Backward(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Backward(long RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Border(Graph_2k::BorderPtr* RHS/*[out,retval]*/);
  Graph_2k::BorderPtr __fastcall get_Border(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ClearFormats(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall ClearFormats(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DataLabel(Graph_2k::DataLabelPtr* RHS/*[out,retval]*/);
  Graph_2k::DataLabelPtr __fastcall get_DataLabel(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall Delete(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayEquation(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DisplayEquation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayEquation(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayRSquared(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DisplayRSquared(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayRSquared(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Forward(long* RHS/*[out,retval]*/);
  long            __fastcall get_Forward(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Forward(long RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Index(long* RHS/*[out,retval]*/);
  long            __fastcall get_Index(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Intercept(double* RHS/*[out,retval]*/);
  double          __fastcall get_Intercept(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Intercept(double RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InterceptIsAuto(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InterceptIsAuto(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_InterceptIsAuto(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* RHS/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NameIsAuto(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_NameIsAuto(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_NameIsAuto(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Order(long* RHS/*[out,retval]*/);
  long            __fastcall get_Order(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Order(long RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Period(long* RHS/*[out,retval]*/);
  long            __fastcall get_Period(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Period(long RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Graph_2k::XlTrendlineType* RHS/*[out,retval]*/);
  Graph_2k::XlTrendlineType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Type(Graph_2k::XlTrendlineType RHS/*[in]*/);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   long            Backward = {read = get_Backward, write = set_Backward};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::DataLabelPtr DataLabel = {read = get_DataLabel};
  __property   TOLEBOOL        DisplayEquation = {read = get_DisplayEquation, write = set_DisplayEquation};
  __property   TOLEBOOL        DisplayRSquared = {read = get_DisplayRSquared, write = set_DisplayRSquared};
  __property   long            Forward = {read = get_Forward, write = set_Forward};
  __property   long            Index = {read = get_Index};
  __property   double          Intercept = {read = get_Intercept, write = set_Intercept};
  __property   TOLEBOOL        InterceptIsAuto = {read = get_InterceptIsAuto, write = set_InterceptIsAuto};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   TOLEBOOL        NameIsAuto = {read = get_NameIsAuto, write = set_NameIsAuto};
  __property   long            Order = {read = get_Order, write = set_Order};
  __property   long            Period = {read = get_Period, write = set_Period};
  __property   Graph_2k::XlTrendlineType Type = {read = get_Type, write = set_Type};
};
typedef ITrendlineDispT<ITrendline> ITrendlineDisp;

// *********************************************************************//
// DispIntf:  ICorners
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208E2-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class ICornersDispT : public TAutoDriver<ICorners>
{
public:
  ICornersDispT(){}

  ICornersDispT(ICorners *pintf)
  {
    TAutoDriver<ICorners>::Bind(pintf, false);
  }

  ICornersDispT(ICornersPtr pintf)
  {
    TAutoDriver<ICorners>::Bind(pintf, true);
  }

  ICornersDispT& operator=(ICorners *pintf)
  {
    TAutoDriver<ICorners>::Bind(pintf, false);
    return *this;
  }

  ICornersDispT& operator=(ICornersPtr pintf)
  {
    TAutoDriver<ICorners>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/);
  Graph_2k::GraphApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/);
  Graph_2k::XlCreator __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* RHS/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
};
typedef ICornersDispT<ICorners> ICornersDisp;

// *********************************************************************//
// DispIntf:  ISeriesLines
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208E1-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class ISeriesLinesDispT : public TAutoDriver<ISeriesLines>
{
public:
  ISeriesLinesDispT(){}

  ISeriesLinesDispT(ISeriesLines *pintf)
  {
    TAutoDriver<ISeriesLines>::Bind(pintf, false);
  }

  ISeriesLinesDispT(ISeriesLinesPtr pintf)
  {
    TAutoDriver<ISeriesLines>::Bind(pintf, true);
  }

  ISeriesLinesDispT& operator=(ISeriesLines *pintf)
  {
    TAutoDriver<ISeriesLines>::Bind(pintf, false);
    return *this;
  }

  ISeriesLinesDispT& operator=(ISeriesLinesPtr pintf)
  {
    TAutoDriver<ISeriesLines>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/);
  Graph_2k::GraphApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/);
  Graph_2k::XlCreator __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* RHS/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Border(Graph_2k::BorderPtr* RHS/*[out,retval]*/);
  Graph_2k::BorderPtr __fastcall get_Border(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall Delete(void);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
};
typedef ISeriesLinesDispT<ISeriesLines> ISeriesLinesDisp;

// *********************************************************************//
// DispIntf:  IHiLoLines
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208E0-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class IHiLoLinesDispT : public TAutoDriver<IHiLoLines>
{
public:
  IHiLoLinesDispT(){}

  IHiLoLinesDispT(IHiLoLines *pintf)
  {
    TAutoDriver<IHiLoLines>::Bind(pintf, false);
  }

  IHiLoLinesDispT(IHiLoLinesPtr pintf)
  {
    TAutoDriver<IHiLoLines>::Bind(pintf, true);
  }

  IHiLoLinesDispT& operator=(IHiLoLines *pintf)
  {
    TAutoDriver<IHiLoLines>::Bind(pintf, false);
    return *this;
  }

  IHiLoLinesDispT& operator=(IHiLoLinesPtr pintf)
  {
    TAutoDriver<IHiLoLines>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/);
  Graph_2k::GraphApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/);
  Graph_2k::XlCreator __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* RHS/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Border(Graph_2k::BorderPtr* RHS/*[out,retval]*/);
  Graph_2k::BorderPtr __fastcall get_Border(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall Delete(void);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
};
typedef IHiLoLinesDispT<IHiLoLines> IHiLoLinesDisp;

// *********************************************************************//
// DispIntf:  IGridlines
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024700-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class IGridlinesDispT : public TAutoDriver<IGridlines>
{
public:
  IGridlinesDispT(){}

  IGridlinesDispT(IGridlines *pintf)
  {
    TAutoDriver<IGridlines>::Bind(pintf, false);
  }

  IGridlinesDispT(IGridlinesPtr pintf)
  {
    TAutoDriver<IGridlines>::Bind(pintf, true);
  }

  IGridlinesDispT& operator=(IGridlines *pintf)
  {
    TAutoDriver<IGridlines>::Bind(pintf, false);
    return *this;
  }

  IGridlinesDispT& operator=(IGridlinesPtr pintf)
  {
    TAutoDriver<IGridlines>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/);
  Graph_2k::GraphApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/);
  Graph_2k::XlCreator __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* RHS/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Border(Graph_2k::BorderPtr* RHS/*[out,retval]*/);
  Graph_2k::BorderPtr __fastcall get_Border(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall Delete(void);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
};
typedef IGridlinesDispT<IGridlines> IGridlinesDisp;

// *********************************************************************//
// DispIntf:  IDropLines
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024701-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class IDropLinesDispT : public TAutoDriver<IDropLines>
{
public:
  IDropLinesDispT(){}

  IDropLinesDispT(IDropLines *pintf)
  {
    TAutoDriver<IDropLines>::Bind(pintf, false);
  }

  IDropLinesDispT(IDropLinesPtr pintf)
  {
    TAutoDriver<IDropLines>::Bind(pintf, true);
  }

  IDropLinesDispT& operator=(IDropLines *pintf)
  {
    TAutoDriver<IDropLines>::Bind(pintf, false);
    return *this;
  }

  IDropLinesDispT& operator=(IDropLinesPtr pintf)
  {
    TAutoDriver<IDropLines>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/);
  Graph_2k::GraphApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/);
  Graph_2k::XlCreator __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* RHS/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Border(Graph_2k::BorderPtr* RHS/*[out,retval]*/);
  Graph_2k::BorderPtr __fastcall get_Border(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall Delete(void);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
};
typedef IDropLinesDispT<IDropLines> IDropLinesDisp;

// *********************************************************************//
// DispIntf:  ILeaderLines
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002441E-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class ILeaderLinesDispT : public TAutoDriver<ILeaderLines>
{
public:
  ILeaderLinesDispT(){}

  ILeaderLinesDispT(ILeaderLines *pintf)
  {
    TAutoDriver<ILeaderLines>::Bind(pintf, false);
  }

  ILeaderLinesDispT(ILeaderLinesPtr pintf)
  {
    TAutoDriver<ILeaderLines>::Bind(pintf, true);
  }

  ILeaderLinesDispT& operator=(ILeaderLines *pintf)
  {
    TAutoDriver<ILeaderLines>::Bind(pintf, false);
    return *this;
  }

  ILeaderLinesDispT& operator=(ILeaderLinesPtr pintf)
  {
    TAutoDriver<ILeaderLines>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/);
  Graph_2k::GraphApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/);
  Graph_2k::XlCreator __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Border(Graph_2k::BorderPtr* RHS/*[out,retval]*/);
  Graph_2k::BorderPtr __fastcall get_Border(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
};
typedef ILeaderLinesDispT<ILeaderLines> ILeaderLinesDisp;

// *********************************************************************//
// DispIntf:  IUpBars
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024702-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class IUpBarsDispT : public TAutoDriver<IUpBars>
{
public:
  IUpBarsDispT(){}

  IUpBarsDispT(IUpBars *pintf)
  {
    TAutoDriver<IUpBars>::Bind(pintf, false);
  }

  IUpBarsDispT(IUpBarsPtr pintf)
  {
    TAutoDriver<IUpBars>::Bind(pintf, true);
  }

  IUpBarsDispT& operator=(IUpBars *pintf)
  {
    TAutoDriver<IUpBars>::Bind(pintf, false);
    return *this;
  }

  IUpBarsDispT& operator=(IUpBarsPtr pintf)
  {
    TAutoDriver<IUpBars>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/);
  Graph_2k::GraphApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/);
  Graph_2k::XlCreator __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* RHS/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Border(Graph_2k::BorderPtr* RHS/*[out,retval]*/);
  Graph_2k::BorderPtr __fastcall get_Border(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall Delete(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Interior(Graph_2k::InteriorPtr* RHS/*[out,retval]*/);
  Graph_2k::InteriorPtr __fastcall get_Interior(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Fill(Graph_2k::ChartFillFormatPtr* RHS/*[out,retval]*/);
  Graph_2k::ChartFillFormatPtr __fastcall get_Fill(void);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::InteriorPtr Interior = {read = get_Interior};
  __property   Graph_2k::ChartFillFormatPtr Fill = {read = get_Fill};
};
typedef IUpBarsDispT<IUpBars> IUpBarsDisp;

// *********************************************************************//
// DispIntf:  IDownBars
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024703-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class IDownBarsDispT : public TAutoDriver<IDownBars>
{
public:
  IDownBarsDispT(){}

  IDownBarsDispT(IDownBars *pintf)
  {
    TAutoDriver<IDownBars>::Bind(pintf, false);
  }

  IDownBarsDispT(IDownBarsPtr pintf)
  {
    TAutoDriver<IDownBars>::Bind(pintf, true);
  }

  IDownBarsDispT& operator=(IDownBars *pintf)
  {
    TAutoDriver<IDownBars>::Bind(pintf, false);
    return *this;
  }

  IDownBarsDispT& operator=(IDownBarsPtr pintf)
  {
    TAutoDriver<IDownBars>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/);
  Graph_2k::GraphApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/);
  Graph_2k::XlCreator __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* RHS/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Border(Graph_2k::BorderPtr* RHS/*[out,retval]*/);
  Graph_2k::BorderPtr __fastcall get_Border(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall Delete(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Interior(Graph_2k::InteriorPtr* RHS/*[out,retval]*/);
  Graph_2k::InteriorPtr __fastcall get_Interior(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Fill(Graph_2k::ChartFillFormatPtr* RHS/*[out,retval]*/);
  Graph_2k::ChartFillFormatPtr __fastcall get_Fill(void);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::InteriorPtr Interior = {read = get_Interior};
  __property   Graph_2k::ChartFillFormatPtr Fill = {read = get_Fill};
};
typedef IDownBarsDispT<IDownBars> IDownBarsDisp;

// *********************************************************************//
// DispIntf:  IFloor
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024704-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class IFloorDispT : public TAutoDriver<IFloor>
{
public:
  IFloorDispT(){}

  IFloorDispT(IFloor *pintf)
  {
    TAutoDriver<IFloor>::Bind(pintf, false);
  }

  IFloorDispT(IFloorPtr pintf)
  {
    TAutoDriver<IFloor>::Bind(pintf, true);
  }

  IFloorDispT& operator=(IFloor *pintf)
  {
    TAutoDriver<IFloor>::Bind(pintf, false);
    return *this;
  }

  IFloorDispT& operator=(IFloorPtr pintf)
  {
    TAutoDriver<IFloor>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/);
  Graph_2k::GraphApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/);
  Graph_2k::XlCreator __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* RHS/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Border(Graph_2k::BorderPtr* RHS/*[out,retval]*/);
  Graph_2k::BorderPtr __fastcall get_Border(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ClearFormats(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall ClearFormats(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Interior(Graph_2k::InteriorPtr* RHS/*[out,retval]*/);
  Graph_2k::InteriorPtr __fastcall get_Interior(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Fill(Graph_2k::ChartFillFormatPtr* RHS/*[out,retval]*/);
  Graph_2k::ChartFillFormatPtr __fastcall get_Fill(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureType(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_PictureType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PictureType(TVariantInParam RHS/*[in]*/);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::InteriorPtr Interior = {read = get_Interior};
  __property   Graph_2k::ChartFillFormatPtr Fill = {read = get_Fill};
};
typedef IFloorDispT<IFloor> IFloorDisp;

// *********************************************************************//
// DispIntf:  IWalls
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024705-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class IWallsDispT : public TAutoDriver<IWalls>
{
public:
  IWallsDispT(){}

  IWallsDispT(IWalls *pintf)
  {
    TAutoDriver<IWalls>::Bind(pintf, false);
  }

  IWallsDispT(IWallsPtr pintf)
  {
    TAutoDriver<IWalls>::Bind(pintf, true);
  }

  IWallsDispT& operator=(IWalls *pintf)
  {
    TAutoDriver<IWalls>::Bind(pintf, false);
    return *this;
  }

  IWallsDispT& operator=(IWallsPtr pintf)
  {
    TAutoDriver<IWalls>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/);
  Graph_2k::GraphApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/);
  Graph_2k::XlCreator __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* RHS/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Border(Graph_2k::BorderPtr* RHS/*[out,retval]*/);
  Graph_2k::BorderPtr __fastcall get_Border(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ClearFormats(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall ClearFormats(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Interior(Graph_2k::InteriorPtr* RHS/*[out,retval]*/);
  Graph_2k::InteriorPtr __fastcall get_Interior(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Fill(Graph_2k::ChartFillFormatPtr* RHS/*[out,retval]*/);
  Graph_2k::ChartFillFormatPtr __fastcall get_Fill(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureType(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_PictureType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PictureType(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureUnit(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_PictureUnit(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PictureUnit(TVariantInParam RHS/*[in]*/);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::InteriorPtr Interior = {read = get_Interior};
  __property   Graph_2k::ChartFillFormatPtr Fill = {read = get_Fill};
};
typedef IWallsDispT<IWalls> IWallsDisp;

// *********************************************************************//
// DispIntf:  ITickLabels
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024706-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class ITickLabelsDispT : public TAutoDriver<ITickLabels>
{
public:
  ITickLabelsDispT(){}

  ITickLabelsDispT(ITickLabels *pintf)
  {
    TAutoDriver<ITickLabels>::Bind(pintf, false);
  }

  ITickLabelsDispT(ITickLabelsPtr pintf)
  {
    TAutoDriver<ITickLabels>::Bind(pintf, true);
  }

  ITickLabelsDispT& operator=(ITickLabels *pintf)
  {
    TAutoDriver<ITickLabels>::Bind(pintf, false);
    return *this;
  }

  ITickLabelsDispT& operator=(ITickLabelsPtr pintf)
  {
    TAutoDriver<ITickLabels>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/);
  Graph_2k::GraphApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/);
  Graph_2k::XlCreator __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall Delete(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Font(Graph_2k::FontPtr* RHS/*[out,retval]*/);
  Graph_2k::FontPtr __fastcall get_Font(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* RHS/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NumberFormat(BSTR* RHS/*[out,retval]*/);
  BSTR            __fastcall get_NumberFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_NumberFormat(BSTR RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NumberFormatLocal(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_NumberFormatLocal(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_NumberFormatLocal(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Orientation(Graph_2k::XlTickLabelOrientation* RHS/*[out,retval]*/);
  Graph_2k::XlTickLabelOrientation __fastcall get_Orientation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Orientation(Graph_2k::XlTickLabelOrientation RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ReadingOrder(long* RHS/*[out,retval]*/);
  long            __fastcall get_ReadingOrder(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ReadingOrder(long RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoScaleFont(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_AutoScaleFont(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoScaleFont(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Offset(long* RHS/*[out,retval]*/);
  long            __fastcall get_Offset(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Offset(long RHS/*[in]*/);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Graph_2k::FontPtr Font = {read = get_Font};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            NumberFormat = {read = get_NumberFormat, write = set_NumberFormat};
  __property   Graph_2k::XlTickLabelOrientation Orientation = {read = get_Orientation, write = set_Orientation};
  __property   long            ReadingOrder = {read = get_ReadingOrder, write = set_ReadingOrder};
  __property   long            Offset = {read = get_Offset, write = set_Offset};
};
typedef ITickLabelsDispT<ITickLabels> ITickLabelsDisp;

// *********************************************************************//
// DispIntf:  IPlotArea
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024707-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class IPlotAreaDispT : public TAutoDriver<IPlotArea>
{
public:
  IPlotAreaDispT(){}

  IPlotAreaDispT(IPlotArea *pintf)
  {
    TAutoDriver<IPlotArea>::Bind(pintf, false);
  }

  IPlotAreaDispT(IPlotAreaPtr pintf)
  {
    TAutoDriver<IPlotArea>::Bind(pintf, true);
  }

  IPlotAreaDispT& operator=(IPlotArea *pintf)
  {
    TAutoDriver<IPlotArea>::Bind(pintf, false);
    return *this;
  }

  IPlotAreaDispT& operator=(IPlotAreaPtr pintf)
  {
    TAutoDriver<IPlotArea>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/);
  Graph_2k::GraphApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/);
  Graph_2k::XlCreator __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* RHS/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Border(Graph_2k::BorderPtr* RHS/*[out,retval]*/);
  Graph_2k::BorderPtr __fastcall get_Border(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ClearFormats(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall ClearFormats(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(double* RHS/*[out,retval]*/);
  double          __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(double RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Interior(Graph_2k::InteriorPtr* RHS/*[out,retval]*/);
  Graph_2k::InteriorPtr __fastcall get_Interior(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Fill(Graph_2k::ChartFillFormatPtr* RHS/*[out,retval]*/);
  Graph_2k::ChartFillFormatPtr __fastcall get_Fill(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(double* RHS/*[out,retval]*/);
  double          __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(double RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(double* RHS/*[out,retval]*/);
  double          __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(double RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(double* RHS/*[out,retval]*/);
  double          __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(double RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InsideLeft(double* RHS/*[out,retval]*/);
  double          __fastcall get_InsideLeft(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InsideTop(double* RHS/*[out,retval]*/);
  double          __fastcall get_InsideTop(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InsideWidth(double* RHS/*[out,retval]*/);
  double          __fastcall get_InsideWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InsideHeight(double* RHS/*[out,retval]*/);
  double          __fastcall get_InsideHeight(void);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   double          Height = {read = get_Height, write = set_Height};
  __property   Graph_2k::InteriorPtr Interior = {read = get_Interior};
  __property   Graph_2k::ChartFillFormatPtr Fill = {read = get_Fill};
  __property   double          Left = {read = get_Left, write = set_Left};
  __property   double          Top = {read = get_Top, write = set_Top};
  __property   double          Width = {read = get_Width, write = set_Width};
  __property   double          InsideLeft = {read = get_InsideLeft};
  __property   double          InsideTop = {read = get_InsideTop};
  __property   double          InsideWidth = {read = get_InsideWidth};
  __property   double          InsideHeight = {read = get_InsideHeight};
};
typedef IPlotAreaDispT<IPlotArea> IPlotAreaDisp;

// *********************************************************************//
// DispIntf:  IChartArea
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024708-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class IChartAreaDispT : public TAutoDriver<IChartArea>
{
public:
  IChartAreaDispT(){}

  IChartAreaDispT(IChartArea *pintf)
  {
    TAutoDriver<IChartArea>::Bind(pintf, false);
  }

  IChartAreaDispT(IChartAreaPtr pintf)
  {
    TAutoDriver<IChartArea>::Bind(pintf, true);
  }

  IChartAreaDispT& operator=(IChartArea *pintf)
  {
    TAutoDriver<IChartArea>::Bind(pintf, false);
    return *this;
  }

  IChartAreaDispT& operator=(IChartAreaPtr pintf)
  {
    TAutoDriver<IChartArea>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/);
  Graph_2k::GraphApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/);
  Graph_2k::XlCreator __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* RHS/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Border(Graph_2k::BorderPtr* RHS/*[out,retval]*/);
  Graph_2k::BorderPtr __fastcall get_Border(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Clear(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall Clear(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ClearContents(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall ClearContents(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Copy(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall Copy(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Font(Graph_2k::FontPtr* RHS/*[out,retval]*/);
  Graph_2k::FontPtr __fastcall get_Font(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Shadow(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Shadow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Shadow(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ClearFormats(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall ClearFormats(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(double* RHS/*[out,retval]*/);
  double          __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(double RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Interior(Graph_2k::InteriorPtr* RHS/*[out,retval]*/);
  Graph_2k::InteriorPtr __fastcall get_Interior(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Fill(Graph_2k::ChartFillFormatPtr* RHS/*[out,retval]*/);
  Graph_2k::ChartFillFormatPtr __fastcall get_Fill(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(double* RHS/*[out,retval]*/);
  double          __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(double RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(double* RHS/*[out,retval]*/);
  double          __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(double RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(double* RHS/*[out,retval]*/);
  double          __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(double RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoScaleFont(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_AutoScaleFont(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoScaleFont(TVariantInParam RHS/*[in]*/);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::FontPtr Font = {read = get_Font};
  __property   TOLEBOOL        Shadow = {read = get_Shadow, write = set_Shadow};
  __property   double          Height = {read = get_Height, write = set_Height};
  __property   Graph_2k::InteriorPtr Interior = {read = get_Interior};
  __property   Graph_2k::ChartFillFormatPtr Fill = {read = get_Fill};
  __property   double          Left = {read = get_Left, write = set_Left};
  __property   double          Top = {read = get_Top, write = set_Top};
  __property   double          Width = {read = get_Width, write = set_Width};
};
typedef IChartAreaDispT<IChartArea> IChartAreaDisp;

// *********************************************************************//
// DispIntf:  ILegend
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024709-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class ILegendDispT : public TAutoDriver<ILegend>
{
public:
  ILegendDispT(){}

  ILegendDispT(ILegend *pintf)
  {
    TAutoDriver<ILegend>::Bind(pintf, false);
  }

  ILegendDispT(ILegendPtr pintf)
  {
    TAutoDriver<ILegend>::Bind(pintf, true);
  }

  ILegendDispT& operator=(ILegend *pintf)
  {
    TAutoDriver<ILegend>::Bind(pintf, false);
    return *this;
  }

  ILegendDispT& operator=(ILegendPtr pintf)
  {
    TAutoDriver<ILegend>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/);
  Graph_2k::GraphApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/);
  Graph_2k::XlCreator __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* RHS/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Border(Graph_2k::BorderPtr* RHS/*[out,retval]*/);
  Graph_2k::BorderPtr __fastcall get_Border(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall Delete(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Font(Graph_2k::FontPtr* RHS/*[out,retval]*/);
  Graph_2k::FontPtr __fastcall get_Font(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall LegendEntries(TVariantInParam Index/*[in,opt]*/, 
                                                      LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall LegendEntries(TVariantInParam Index/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Position(Graph_2k::XlLegendPosition* RHS/*[out,retval]*/);
  Graph_2k::XlLegendPosition __fastcall get_Position(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Position(Graph_2k::XlLegendPosition RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Shadow(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Shadow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Shadow(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Clear(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall Clear(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(double* RHS/*[out,retval]*/);
  double          __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(double RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Interior(Graph_2k::InteriorPtr* RHS/*[out,retval]*/);
  Graph_2k::InteriorPtr __fastcall get_Interior(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Fill(Graph_2k::ChartFillFormatPtr* RHS/*[out,retval]*/);
  Graph_2k::ChartFillFormatPtr __fastcall get_Fill(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(double* RHS/*[out,retval]*/);
  double          __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(double RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(double* RHS/*[out,retval]*/);
  double          __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(double RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(double* RHS/*[out,retval]*/);
  double          __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(double RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoScaleFont(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_AutoScaleFont(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoScaleFont(TVariantInParam RHS/*[in]*/);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::FontPtr Font = {read = get_Font};
  __property   Graph_2k::XlLegendPosition Position = {read = get_Position, write = set_Position};
  __property   TOLEBOOL        Shadow = {read = get_Shadow, write = set_Shadow};
  __property   double          Height = {read = get_Height, write = set_Height};
  __property   Graph_2k::InteriorPtr Interior = {read = get_Interior};
  __property   Graph_2k::ChartFillFormatPtr Fill = {read = get_Fill};
  __property   double          Left = {read = get_Left, write = set_Left};
  __property   double          Top = {read = get_Top, write = set_Top};
  __property   double          Width = {read = get_Width, write = set_Width};
};
typedef ILegendDispT<ILegend> ILegendDisp;

// *********************************************************************//
// DispIntf:  IErrorBars
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002470A-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class IErrorBarsDispT : public TAutoDriver<IErrorBars>
{
public:
  IErrorBarsDispT(){}

  IErrorBarsDispT(IErrorBars *pintf)
  {
    TAutoDriver<IErrorBars>::Bind(pintf, false);
  }

  IErrorBarsDispT(IErrorBarsPtr pintf)
  {
    TAutoDriver<IErrorBars>::Bind(pintf, true);
  }

  IErrorBarsDispT& operator=(IErrorBars *pintf)
  {
    TAutoDriver<IErrorBars>::Bind(pintf, false);
    return *this;
  }

  IErrorBarsDispT& operator=(IErrorBarsPtr pintf)
  {
    TAutoDriver<IErrorBars>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/);
  Graph_2k::GraphApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/);
  Graph_2k::XlCreator __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* RHS/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Border(Graph_2k::BorderPtr* RHS/*[out,retval]*/);
  Graph_2k::BorderPtr __fastcall get_Border(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall Delete(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ClearFormats(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall ClearFormats(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EndStyle(Graph_2k::XlEndStyleCap* RHS/*[out,retval]*/);
  Graph_2k::XlEndStyleCap __fastcall get_EndStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EndStyle(Graph_2k::XlEndStyleCap RHS/*[in]*/);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::XlEndStyleCap EndStyle = {read = get_EndStyle, write = set_EndStyle};
};
typedef IErrorBarsDispT<IErrorBars> IErrorBarsDisp;

// *********************************************************************//
// DispIntf:  IDataTable
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208FA-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class IDataTableDispT : public TAutoDriver<IDataTable>
{
public:
  IDataTableDispT(){}

  IDataTableDispT(IDataTable *pintf)
  {
    TAutoDriver<IDataTable>::Bind(pintf, false);
  }

  IDataTableDispT(IDataTablePtr pintf)
  {
    TAutoDriver<IDataTable>::Bind(pintf, true);
  }

  IDataTableDispT& operator=(IDataTable *pintf)
  {
    TAutoDriver<IDataTable>::Bind(pintf, false);
    return *this;
  }

  IDataTableDispT& operator=(IDataTablePtr pintf)
  {
    TAutoDriver<IDataTable>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/);
  Graph_2k::GraphApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/);
  Graph_2k::XlCreator __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowLegendKey(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ShowLegendKey(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowLegendKey(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasBorderHorizontal(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HasBorderHorizontal(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasBorderHorizontal(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasBorderVertical(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HasBorderVertical(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasBorderVertical(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasBorderOutline(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HasBorderOutline(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasBorderOutline(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Border(Graph_2k::BorderPtr* RHS/*[out,retval]*/);
  Graph_2k::BorderPtr __fastcall get_Border(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Font(Graph_2k::FontPtr* RHS/*[out,retval]*/);
  Graph_2k::FontPtr __fastcall get_Font(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoScaleFont(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_AutoScaleFont(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoScaleFont(TVariantInParam RHS/*[in]*/);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   TOLEBOOL        ShowLegendKey = {read = get_ShowLegendKey, write = set_ShowLegendKey};
  __property   TOLEBOOL        HasBorderHorizontal = {read = get_HasBorderHorizontal, write = set_HasBorderHorizontal};
  __property   TOLEBOOL        HasBorderVertical = {read = get_HasBorderVertical, write = set_HasBorderVertical};
  __property   TOLEBOOL        HasBorderOutline = {read = get_HasBorderOutline, write = set_HasBorderOutline};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::FontPtr Font = {read = get_Font};
};
typedef IDataTableDispT<IDataTable> IDataTableDisp;

// *********************************************************************//
// DispIntf:  IDisplayUnitLabel
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208D3-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class IDisplayUnitLabelDispT : public TAutoDriver<IDisplayUnitLabel>
{
public:
  IDisplayUnitLabelDispT(){}

  IDisplayUnitLabelDispT(IDisplayUnitLabel *pintf)
  {
    TAutoDriver<IDisplayUnitLabel>::Bind(pintf, false);
  }

  IDisplayUnitLabelDispT(IDisplayUnitLabelPtr pintf)
  {
    TAutoDriver<IDisplayUnitLabel>::Bind(pintf, true);
  }

  IDisplayUnitLabelDispT& operator=(IDisplayUnitLabel *pintf)
  {
    TAutoDriver<IDisplayUnitLabel>::Bind(pintf, false);
    return *this;
  }

  IDisplayUnitLabelDispT& operator=(IDisplayUnitLabelPtr pintf)
  {
    TAutoDriver<IDisplayUnitLabel>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Graph_2k::GraphApplicationPtr* RHS/*[out,retval]*/);
  Graph_2k::GraphApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(Graph_2k::XlCreator* RHS/*[out,retval]*/);
  Graph_2k::XlCreator __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* RHS/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* RHS/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Border(Graph_2k::BorderPtr* RHS/*[out,retval]*/);
  Graph_2k::BorderPtr __fastcall get_Border(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall Delete(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Interior(Graph_2k::InteriorPtr* RHS/*[out,retval]*/);
  Graph_2k::InteriorPtr __fastcall get_Interior(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Fill(Graph_2k::ChartFillFormatPtr* RHS/*[out,retval]*/);
  Graph_2k::ChartFillFormatPtr __fastcall get_Fill(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* RHS/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Caption(BSTR RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Font(Graph_2k::FontPtr* RHS/*[out,retval]*/);
  Graph_2k::FontPtr __fastcall get_Font(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HorizontalAlignment(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_HorizontalAlignment(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HorizontalAlignment(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(double* RHS/*[out,retval]*/);
  double          __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(double RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Orientation(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_Orientation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Orientation(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Shadow(TOLEBOOL* RHS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Shadow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Shadow(TOLEBOOL RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Text(BSTR* RHS/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Text(BSTR RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(double* RHS/*[out,retval]*/);
  double          __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(double RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VerticalAlignment(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_VerticalAlignment(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_VerticalAlignment(TVariantInParam RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ReadingOrder(long* RHS/*[out,retval]*/);
  long            __fastcall get_ReadingOrder(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ReadingOrder(long RHS/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoScaleFont(TVariant* RHS/*[out,retval]*/);
  TVariant        __fastcall get_AutoScaleFont(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoScaleFont(TVariantInParam RHS/*[in]*/);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::InteriorPtr Interior = {read = get_Interior};
  __property   Graph_2k::ChartFillFormatPtr Fill = {read = get_Fill};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   Graph_2k::FontPtr Font = {read = get_Font};
  __property   double          Left = {read = get_Left, write = set_Left};
  __property   TOLEBOOL        Shadow = {read = get_Shadow, write = set_Shadow};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   double          Top = {read = get_Top, write = set_Top};
  __property   long            ReadingOrder = {read = get_ReadingOrder, write = set_ReadingOrder};
};
typedef IDisplayUnitLabelDispT<IDisplayUnitLabel> IDisplayUnitLabelDisp;

// *********************************************************************//
// DispIntf:  Font
// Flags:     (4096) Dispatchable
// GUID:      {000208F3-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class FontDispT : public TAutoDriver<Font>
{
public:
  FontDispT(){}

  FontDispT(Font *pintf)
  {
    TAutoDriver<Font>::Bind(pintf, false);
  }

  FontDispT(FontPtr pintf)
  {
    TAutoDriver<Font>::Bind(pintf, true);
  }

  FontDispT& operator=(Font *pintf)
  {
    TAutoDriver<Font>::Bind(pintf, false);
    return *this;
  }

  FontDispT& operator=(FontPtr pintf)
  {
    TAutoDriver<Font>::Bind(pintf, true);
    return *this;
  }

  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application();
  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent();
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Background();
  void /*[VT_VOID:0]*/ __fastcall set_Background(TVariantInParam Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Bold();
  void /*[VT_VOID:0]*/ __fastcall set_Bold(TVariantInParam Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Color();
  void /*[VT_VOID:0]*/ __fastcall set_Color(TVariantInParam Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_ColorIndex();
  void /*[VT_VOID:0]*/ __fastcall set_ColorIndex(TVariantInParam Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_FontStyle();
  void /*[VT_VOID:0]*/ __fastcall set_FontStyle(TVariantInParam Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Italic();
  void /*[VT_VOID:0]*/ __fastcall set_Italic(TVariantInParam Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Name();
  void /*[VT_VOID:0]*/ __fastcall set_Name(TVariantInParam Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_OutlineFont();
  void /*[VT_VOID:0]*/ __fastcall set_OutlineFont(TVariantInParam Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Shadow();
  void /*[VT_VOID:0]*/ __fastcall set_Shadow(TVariantInParam Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Size();
  void /*[VT_VOID:0]*/ __fastcall set_Size(TVariantInParam Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Strikethrough();
  void /*[VT_VOID:0]*/ __fastcall set_Strikethrough(TVariantInParam Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Subscript();
  void /*[VT_VOID:0]*/ __fastcall set_Subscript(TVariantInParam Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Superscript();
  void /*[VT_VOID:0]*/ __fastcall set_Superscript(TVariantInParam Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Underline();
  void /*[VT_VOID:0]*/ __fastcall set_Underline(TVariantInParam Param1/*[in]*/);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef FontDispT<Font> FontDisp;

// *********************************************************************//
// DispIntf:  _Global
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208FC-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class _GlobalDispT : public TAutoDriver<_Global>
{
public:
  _GlobalDispT(){}

  _GlobalDispT(_Global *pintf)
  {
    TAutoDriver<_Global>::Bind(pintf, false);
  }

  _GlobalDispT(_GlobalPtr pintf)
  {
    TAutoDriver<_Global>::Bind(pintf, true);
  }

  _GlobalDispT& operator=(_Global *pintf)
  {
    TAutoDriver<_Global>::Bind(pintf, false);
    return *this;
  }

  _GlobalDispT& operator=(_GlobalPtr pintf)
  {
    TAutoDriver<_Global>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Global));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Global);
  }

  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application();
  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator();
  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Parent();
  Office_2k::CommandBarsPtr /*[VT_USERDEFINED:1]*/ __fastcall get_CommandBars();

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   Graph_2k::GraphApplicationPtr Parent = {read = get_Parent};
  __property   Office_2k::CommandBarsPtr CommandBars = {read = get_CommandBars};
};
typedef _GlobalDispT<_Global> _GlobalDisp;

// *********************************************************************//
// DispIntf:  Chart
// Flags:     (4096) Dispatchable
// GUID:      {000208FB-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class ChartDispT : public TAutoDriver<Chart>
{
public:
  ChartDispT(){}

  ChartDispT(Chart *pintf)
  {
    TAutoDriver<Chart>::Bind(pintf, false);
  }

  ChartDispT(ChartPtr pintf)
  {
    TAutoDriver<Chart>::Bind(pintf, true);
  }

  ChartDispT& operator=(Chart *pintf)
  {
    TAutoDriver<Chart>::Bind(pintf, false);
    return *this;
  }

  ChartDispT& operator=(ChartPtr pintf)
  {
    TAutoDriver<Chart>::Bind(pintf, true);
    return *this;
  }

  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application();
  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent();
  void /*[VT_VOID:0]*/ __fastcall Activate();
  void /*[VT_VOID:0]*/ __fastcall ApplyDataLabels(TVariantInParam Type/*[in,opt]*/= TNoParam(), 
                                                  TVariantInParam LegendKey/*[in,opt]*/= TNoParam()
                                                  , TVariantInParam AutoText/*[in,opt]*/= TNoParam()
                                                  , 
                                                  TVariantInParam HasLeaderLines/*[in,opt]*/= TNoParam());
  Graph_2k::ChartGroupPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Area3DGroup();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall AreaGroups(TVariantInParam Index/*[in,opt]*/= TNoParam());
  void /*[VT_VOID:0]*/ __fastcall AutoFormat(long Gallery/*[in]*/, 
                                             TVariantInParam Format/*[in,opt]*/= TNoParam());
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_AutoScaling();
  void /*[VT_VOID:0]*/ __fastcall set_AutoScaling(TOLEBOOL Param1/*[in]*/);
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall Axes(TVariantInParam Type/*[in,opt]*/= TNoParam(), 
                                                 TVariantInParam AxisGroup/*[in,opt]*/= TNoParam());
  Graph_2k::ChartGroupPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Bar3DGroup();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall BarGroups(TVariantInParam Index/*[in,opt]*/= TNoParam());
  Graph_2k::ChartAreaPtr /*[VT_USERDEFINED:1]*/ __fastcall get_ChartArea();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall ChartGroups(TVariantInParam Index/*[in,opt]*/= TNoParam());
  Graph_2k::ChartTitlePtr /*[VT_USERDEFINED:1]*/ __fastcall get_ChartTitle();
  Graph_2k::ChartGroupPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Column3DGroup();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall ColumnGroups(TVariantInParam Index/*[in,opt]*/= TNoParam());
  Office_2k::CommandBarsPtr /*[VT_USERDEFINED:1]*/ __fastcall get_CommandBars();
  Graph_2k::CornersPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Corners();
  Graph_2k::DataTablePtr /*[VT_USERDEFINED:1]*/ __fastcall get_DataTable();
  long /*[VT_I4:0]*/ __fastcall get_DepthPercent();
  void /*[VT_VOID:0]*/ __fastcall set_DepthPercent(long Param1/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall Deselect();
  Graph_2k::XlDisplayBlanksAs /*[VT_USERDEFINED:0]*/ __fastcall get_DisplayBlanksAs();
  void /*[VT_VOID:0]*/ __fastcall set_DisplayBlanksAs(Graph_2k::XlDisplayBlanksAs Param1/*[in]*/);
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall DoughnutGroups(TVariantInParam Index/*[in,opt]*/= TNoParam());
  long /*[VT_I4:0]*/ __fastcall get_Elevation();
  void /*[VT_VOID:0]*/ __fastcall set_Elevation(long Param1/*[in]*/);
  Graph_2k::FloorPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Floor();
  long /*[VT_I4:0]*/ __fastcall get_GapDepth();
  void /*[VT_VOID:0]*/ __fastcall set_GapDepth(long Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_HasAxis(TVariantInParam Index1/*[in,opt]*/= TNoParam()
                                                     , 
                                                     TVariantInParam Index2/*[in,opt]*/= TNoParam());
  void /*[VT_VOID:0]*/ __fastcall set_HasAxis(TVariantInParam Index1/*[in,opt]*/, 
                                              TVariantInParam Index2/*[in,opt]*/, 
                                              TVariantInParam Param3/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_HasDataTable();
  void /*[VT_VOID:0]*/ __fastcall set_HasDataTable(TOLEBOOL Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_HasLegend();
  void /*[VT_VOID:0]*/ __fastcall set_HasLegend(TOLEBOOL Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_HasTitle();
  void /*[VT_VOID:0]*/ __fastcall set_HasTitle(TOLEBOOL Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Height();
  void /*[VT_VOID:0]*/ __fastcall set_Height(TVariantInParam Param1/*[in]*/);
  long /*[VT_I4:0]*/ __fastcall get_HeightPercent();
  void /*[VT_VOID:0]*/ __fastcall set_HeightPercent(long Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Left();
  void /*[VT_VOID:0]*/ __fastcall set_Left(TVariantInParam Param1/*[in]*/);
  Graph_2k::LegendPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Legend();
  Graph_2k::ChartGroupPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Line3DGroup();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall LineGroups(TVariantInParam Index/*[in,opt]*/= TNoParam());
  BSTR /*[VT_BSTR:0]*/ __fastcall get_Name();
  TVariant /*[VT_VARIANT:0]*/ __fastcall OmitBackground();
  long /*[VT_I4:0]*/ __fastcall get_Perspective();
  void /*[VT_VOID:0]*/ __fastcall set_Perspective(long Param1/*[in]*/);
  Graph_2k::ChartGroupPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Pie3DGroup();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall PieGroups(TVariantInParam Index/*[in,opt]*/= TNoParam());
  Graph_2k::PlotAreaPtr /*[VT_USERDEFINED:1]*/ __fastcall get_PlotArea();
  void /*[VT_VOID:0]*/ __fastcall _Dummy43();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall RadarGroups(TVariantInParam Index/*[in,opt]*/= TNoParam());
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_RightAngleAxes();
  void /*[VT_VOID:0]*/ __fastcall set_RightAngleAxes(TVariantInParam Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Rotation();
  void /*[VT_VOID:0]*/ __fastcall set_Rotation(TVariantInParam Param1/*[in]*/);
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall SeriesCollection(TVariantInParam Index/*[in,opt]*/= TNoParam());
  TVariant /*[VT_VARIANT:0]*/ __fastcall SetEchoOn(TVariantInParam EchoOn/*[in,opt]*/= TNoParam());
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_SubType();
  void /*[VT_VOID:0]*/ __fastcall set_SubType(TVariantInParam Param1/*[in]*/);
  Graph_2k::ChartGroupPtr /*[VT_USERDEFINED:1]*/ __fastcall get_SurfaceGroup();
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Top();
  void /*[VT_VOID:0]*/ __fastcall set_Top(TVariantInParam Param1/*[in]*/);
  long /*[VT_I4:0]*/ __fastcall get_Type();
  void /*[VT_VOID:0]*/ __fastcall set_Type(long Param1/*[in]*/);
  Graph_2k::XlChartType /*[VT_USERDEFINED:0]*/ __fastcall get_ChartType();
  void /*[VT_VOID:0]*/ __fastcall set_ChartType(Graph_2k::XlChartType Param1/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall ApplyCustomType(Graph_2k::XlChartType ChartType/*[in]*/, 
                                                  TVariantInParam TypeName/*[in,opt]*/= TNoParam());
  Graph_2k::WallsPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Walls();
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_WallsAndGridlines2D();
  void /*[VT_VOID:0]*/ __fastcall set_WallsAndGridlines2D(TOLEBOOL Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Width();
  void /*[VT_VOID:0]*/ __fastcall set_Width(TVariantInParam Param1/*[in]*/);
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall XYGroups(TVariantInParam Index/*[in,opt]*/= TNoParam());
  Graph_2k::XlBarShape /*[VT_USERDEFINED:0]*/ __fastcall get_BarShape();
  void /*[VT_VOID:0]*/ __fastcall set_BarShape(Graph_2k::XlBarShape Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall Export(BSTR FileName/*[in]*/, 
                                             TVariantInParam FilterName/*[in,opt]*/= TNoParam(), 
                                             TVariantInParam Interactive/*[in,opt]*/= TNoParam());
  void /*[VT_VOID:0]*/ __fastcall Refresh();
  long /*[VT_I4:0]*/ __fastcall get_PlotOnX();
  void /*[VT_VOID:0]*/ __fastcall set_PlotOnX(long Param1/*[in]*/);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Graph_2k::ChartGroupPtr Area3DGroup = {read = get_Area3DGroup};
  __property   TOLEBOOL        AutoScaling = {read = get_AutoScaling, write = set_AutoScaling};
  __property   Graph_2k::ChartGroupPtr Bar3DGroup = {read = get_Bar3DGroup};
  __property   Graph_2k::ChartAreaPtr ChartArea = {read = get_ChartArea};
  __property   Graph_2k::ChartTitlePtr ChartTitle = {read = get_ChartTitle};
  __property   Graph_2k::ChartGroupPtr Column3DGroup = {read = get_Column3DGroup};
  __property   Office_2k::CommandBarsPtr CommandBars = {read = get_CommandBars};
  __property   Graph_2k::CornersPtr Corners = {read = get_Corners};
  __property   Graph_2k::DataTablePtr DataTable = {read = get_DataTable};
  __property   long            DepthPercent = {read = get_DepthPercent, write = set_DepthPercent};
  __property   Graph_2k::XlDisplayBlanksAs DisplayBlanksAs = {read = get_DisplayBlanksAs, write = set_DisplayBlanksAs};
  __property   long            Elevation = {read = get_Elevation, write = set_Elevation};
  __property   Graph_2k::FloorPtr Floor = {read = get_Floor};
  __property   long            GapDepth = {read = get_GapDepth, write = set_GapDepth};
  __property   TOLEBOOL        HasDataTable = {read = get_HasDataTable, write = set_HasDataTable};
  __property   TOLEBOOL        HasLegend = {read = get_HasLegend, write = set_HasLegend};
  __property   TOLEBOOL        HasTitle = {read = get_HasTitle, write = set_HasTitle};
  __property   long            HeightPercent = {read = get_HeightPercent, write = set_HeightPercent};
  __property   Graph_2k::LegendPtr Legend = {read = get_Legend};
  __property   Graph_2k::ChartGroupPtr Line3DGroup = {read = get_Line3DGroup};
  __property   BSTR            Name = {read = get_Name};
  __property   long            Perspective = {read = get_Perspective, write = set_Perspective};
  __property   Graph_2k::ChartGroupPtr Pie3DGroup = {read = get_Pie3DGroup};
  __property   Graph_2k::PlotAreaPtr PlotArea = {read = get_PlotArea};
  __property   Graph_2k::ChartGroupPtr SurfaceGroup = {read = get_SurfaceGroup};
  __property   long            Type = {read = get_Type, write = set_Type};
  __property   Graph_2k::XlChartType ChartType = {read = get_ChartType, write = set_ChartType};
  __property   Graph_2k::WallsPtr Walls = {read = get_Walls};
  __property   TOLEBOOL        WallsAndGridlines2D = {read = get_WallsAndGridlines2D, write = set_WallsAndGridlines2D};
  __property   Graph_2k::XlBarShape BarShape = {read = get_BarShape, write = set_BarShape};
  __property   long            PlotOnX = {read = get_PlotOnX, write = set_PlotOnX};
};
typedef ChartDispT<Chart> ChartDisp;

// *********************************************************************//
// DispIntf:  Application
// Flags:     (4096) Dispatchable
// GUID:      {000208EC-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class GraphApplicationDispT : public TAutoDriver<GraphApplication>
{
public:
  GraphApplicationDispT(){}

  GraphApplicationDispT(GraphApplication *pintf)
  {
    TAutoDriver<GraphApplication>::Bind(pintf, false);
  }

  GraphApplicationDispT(GraphApplicationPtr pintf)
  {
    TAutoDriver<GraphApplication>::Bind(pintf, true);
  }

  GraphApplicationDispT& operator=(GraphApplication *pintf)
  {
    TAutoDriver<GraphApplication>::Bind(pintf, false);
    return *this;
  }

  GraphApplicationDispT& operator=(GraphApplicationPtr pintf)
  {
    TAutoDriver<GraphApplication>::Bind(pintf, true);
    return *this;
  }

  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application();
  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator();
  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Parent();
  Office_2k::CommandBarsPtr /*[VT_USERDEFINED:1]*/ __fastcall get_CommandBars();
  void /*[VT_VOID:0]*/ __fastcall AddChartAutoFormat(BSTR Name/*[in]*/, 
                                                     TVariantInParam Description/*[in,opt]*/= TNoParam());
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_CellDragAndDrop();
  void /*[VT_VOID:0]*/ __fastcall set_CellDragAndDrop(TOLEBOOL Param1/*[in]*/);
  Graph_2k::ChartPtr /*[VT_USERDEFINED:1]*/ __fastcall Chart();
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_ChartWizardDisplay();
  void /*[VT_VOID:0]*/ __fastcall set_ChartWizardDisplay(TVariantInParam Param1/*[in]*/);
  Graph_2k::DataSheetPtr /*[VT_USERDEFINED:1]*/ __fastcall get_DataSheet();
  void /*[VT_VOID:0]*/ __fastcall _set_DataSheet(Graph_2k::DataSheetPtr Param1/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall DeleteChartAutoFormat(BSTR Name/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_DisplayAlerts();
  void /*[VT_VOID:0]*/ __fastcall set_DisplayAlerts(TOLEBOOL Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall Evaluate(BSTR Name/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall FileImport(BSTR FileName/*[in]*/, 
                                             TVariantInParam Password/*[in,opt]*/= TNoParam(), 
                                             TVariantInParam ImportRange/*[in,opt]*/= TNoParam(), 
                                             TVariantInParam WorksheetName/*[in,opt]*/= TNoParam(), 
                                             TVariantInParam OverwriteCells/*[in,opt]*/= TNoParam());
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_HasLinks();
  void /*[VT_VOID:0]*/ __fastcall set_HasLinks(TOLEBOOL Param1/*[in]*/);
  double /*[VT_R8:0]*/ __fastcall get_Height();
  void /*[VT_VOID:0]*/ __fastcall set_Height(double Param1/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall ImportChart(BSTR FileName/*[in]*/, 
                                              TVariantInParam Password/*[in,opt]*/= TNoParam(), 
                                              TVariantInParam ImportRange/*[in,opt]*/= TNoParam(), 
                                              TVariantInParam WorksheetName/*[in,opt]*/= TNoParam()
                                              , 
                                              TVariantInParam OverwriteCells/*[in,opt]*/= TNoParam());
  double /*[VT_R8:0]*/ __fastcall get_Left();
  void /*[VT_VOID:0]*/ __fastcall set_Left(double Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_MoveAfterReturn();
  void /*[VT_VOID:0]*/ __fastcall set_MoveAfterReturn(TOLEBOOL Param1/*[in]*/);
  BSTR /*[VT_BSTR:0]*/ __fastcall get_Name();
  void /*[VT_VOID:0]*/ __fastcall set_Name(BSTR Param1/*[in]*/);
  Graph_2k::XlRowCol /*[VT_USERDEFINED:0]*/ __fastcall get_PlotBy();
  void /*[VT_VOID:0]*/ __fastcall set_PlotBy(Graph_2k::XlRowCol Param1/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall Quit();
  void /*[VT_VOID:0]*/ __fastcall SaveAs(BSTR FileName/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall SaveAsOldFileFormat(TVariantInParam MajorVersion/*[in,opt]*/= TNoParam()
                                                      , 
                                                      TVariantInParam MinorVersion/*[in,opt]*/= TNoParam());
  void /*[VT_VOID:0]*/ __fastcall SetDefaultChart(TVariantInParam FormatName/*[in,opt]*/= TNoParam()
                                                  , TVariantInParam Gallery/*[in,opt]*/= TNoParam());
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_ShowChartTipNames();
  void /*[VT_VOID:0]*/ __fastcall set_ShowChartTipNames(TOLEBOOL Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_ShowChartTipValues();
  void /*[VT_VOID:0]*/ __fastcall set_ShowChartTipValues(TOLEBOOL Param1/*[in]*/);
  double /*[VT_R8:0]*/ __fastcall get_Top();
  void /*[VT_VOID:0]*/ __fastcall set_Top(double Param1/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall _Update();
  BSTR /*[VT_BSTR:0]*/ __fastcall get_Version();
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_Visible();
  void /*[VT_VOID:0]*/ __fastcall set_Visible(TOLEBOOL Param1/*[in]*/);
  double /*[VT_R8:0]*/ __fastcall get_Width();
  void /*[VT_VOID:0]*/ __fastcall set_Width(double Param1/*[in]*/);
  Graph_2k::XlWindowState /*[VT_USERDEFINED:0]*/ __fastcall get_WindowState();
  void /*[VT_VOID:0]*/ __fastcall set_WindowState(Graph_2k::XlWindowState Param1/*[in]*/);
  Graph_2k::AutoCorrectPtr /*[VT_USERDEFINED:1]*/ __fastcall get_AutoCorrect();

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   Graph_2k::GraphApplicationPtr Parent = {read = get_Parent};
  __property   Office_2k::CommandBarsPtr CommandBars = {read = get_CommandBars};
  __property   TOLEBOOL        CellDragAndDrop = {read = get_CellDragAndDrop, write = set_CellDragAndDrop};
  __property   Graph_2k::DataSheetPtr DataSheet = {read = get_DataSheet, write = _set_DataSheet};
  __property   TOLEBOOL        DisplayAlerts = {read = get_DisplayAlerts, write = set_DisplayAlerts};
  __property   TOLEBOOL        HasLinks = {read = get_HasLinks, write = set_HasLinks};
  __property   double          Height = {read = get_Height, write = set_Height};
  __property   double          Left = {read = get_Left, write = set_Left};
  __property   TOLEBOOL        MoveAfterReturn = {read = get_MoveAfterReturn, write = set_MoveAfterReturn};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   Graph_2k::XlRowCol PlotBy = {read = get_PlotBy, write = set_PlotBy};
  __property   TOLEBOOL        ShowChartTipNames = {read = get_ShowChartTipNames, write = set_ShowChartTipNames};
  __property   TOLEBOOL        ShowChartTipValues = {read = get_ShowChartTipValues, write = set_ShowChartTipValues};
  __property   double          Top = {read = get_Top, write = set_Top};
  __property   BSTR            Version = {read = get_Version};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   double          Width = {read = get_Width, write = set_Width};
  __property   Graph_2k::XlWindowState WindowState = {read = get_WindowState, write = set_WindowState};
  __property   Graph_2k::AutoCorrectPtr AutoCorrect = {read = get_AutoCorrect};
};
typedef GraphApplicationDispT<GraphApplication> GraphApplicationDisp;

// *********************************************************************//
// DispIntf:  DataSheet
// Flags:     (4096) Dispatchable
// GUID:      {00024726-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class DataSheetDispT : public TAutoDriver<DataSheet>
{
public:
  DataSheetDispT(){}

  DataSheetDispT(DataSheet *pintf)
  {
    TAutoDriver<DataSheet>::Bind(pintf, false);
  }

  DataSheetDispT(DataSheetPtr pintf)
  {
    TAutoDriver<DataSheet>::Bind(pintf, true);
  }

  DataSheetDispT& operator=(DataSheet *pintf)
  {
    TAutoDriver<DataSheet>::Bind(pintf, false);
    return *this;
  }

  DataSheetDispT& operator=(DataSheetPtr pintf)
  {
    TAutoDriver<DataSheet>::Bind(pintf, true);
    return *this;
  }

  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application();
  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent();
  void /*[VT_VOID:0]*/ __fastcall Activate();
  Graph_2k::RangePtr /*[VT_USERDEFINED:1]*/ __fastcall get_Cells();
  Graph_2k::RangePtr /*[VT_USERDEFINED:1]*/ __fastcall get_Columns();
  Graph_2k::FontPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Font();
  void /*[VT_VOID:0]*/ __fastcall _set_Font(Graph_2k::FontPtr Param1/*[in]*/);
  double /*[VT_R8:0]*/ __fastcall get_Height();
  void /*[VT_VOID:0]*/ __fastcall set_Height(double Param1/*[in]*/);
  double /*[VT_R8:0]*/ __fastcall get_Left();
  void /*[VT_VOID:0]*/ __fastcall set_Left(double Param1/*[in]*/);
  Graph_2k::RangePtr /*[VT_USERDEFINED:1]*/ __fastcall get_Range(TVariantInParam Range1/*[in]*/, 
                                                                 TVariantInParam Range2/*[in,opt]*/= TNoParam());
  Graph_2k::RangePtr /*[VT_USERDEFINED:1]*/ __fastcall get_Rows();
  double /*[VT_R8:0]*/ __fastcall get_Top();
  void /*[VT_VOID:0]*/ __fastcall set_Top(double Param1/*[in]*/);
  double /*[VT_R8:0]*/ __fastcall get_Width();
  void /*[VT_VOID:0]*/ __fastcall set_Width(double Param1/*[in]*/);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Graph_2k::RangePtr Cells = {read = get_Cells};
  __property   Graph_2k::RangePtr Columns = {read = get_Columns};
  __property   Graph_2k::FontPtr Font = {read = get_Font, write = _set_Font};
  __property   double          Height = {read = get_Height, write = set_Height};
  __property   double          Left = {read = get_Left, write = set_Left};
  __property   Graph_2k::RangePtr Rows = {read = get_Rows};
  __property   double          Top = {read = get_Top, write = set_Top};
  __property   double          Width = {read = get_Width, write = set_Width};
};
typedef DataSheetDispT<DataSheet> DataSheetDisp;

// *********************************************************************//
// DispIntf:  Range
// Flags:     (4096) Dispatchable
// GUID:      {00024727-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class RangeDispT : public TAutoDriver<Range>
{
public:
  RangeDispT(){}

  RangeDispT(Range *pintf)
  {
    TAutoDriver<Range>::Bind(pintf, false);
  }

  RangeDispT(RangePtr pintf)
  {
    TAutoDriver<Range>::Bind(pintf, true);
  }

  RangeDispT& operator=(Range *pintf)
  {
    TAutoDriver<Range>::Bind(pintf, false);
    return *this;
  }

  RangeDispT& operator=(RangePtr pintf)
  {
    TAutoDriver<Range>::Bind(pintf, true);
    return *this;
  }

  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application();
  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent();
  void /*[VT_VOID:0]*/ __fastcall AutoFit();
  Graph_2k::RangePtr /*[VT_USERDEFINED:1]*/ __fastcall get_Cells();
  void /*[VT_VOID:0]*/ __fastcall Clear();
  void /*[VT_VOID:0]*/ __fastcall ClearContents();
  void /*[VT_VOID:0]*/ __fastcall ClearFormats();
  Graph_2k::RangePtr /*[VT_USERDEFINED:1]*/ __fastcall get_Columns();
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_ColumnWidth();
  void /*[VT_VOID:0]*/ __fastcall set_ColumnWidth(TVariantInParam Param1/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall Copy(TVariantInParam Destination/*[in,opt]*/= TNoParam());
  void /*[VT_VOID:0]*/ __fastcall Cut(TVariantInParam Destination/*[in,opt]*/= TNoParam());
  void /*[VT_VOID:0]*/ __fastcall Delete(TVariantInParam Shift/*[in,opt]*/= TNoParam());
  void /*[VT_VOID:0]*/ __fastcall ImportData(TVariantInParam FileName/*[in]*/, 
                                             TVariantInParam Range/*[in,opt]*/= TNoParam());
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Include();
  void /*[VT_VOID:0]*/ __fastcall set_Include(TVariantInParam Param1/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall Insert(TVariantInParam Shift/*[in,opt]*/= TNoParam());
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Item(TVariantInParam RowIndex/*[in,opt]*/= TNoParam(), 
                                                  TVariantInParam ColumnIndex/*[in,opt]*/= TNoParam());
  void /*[VT_VOID:0]*/ __fastcall set_Item(TVariantInParam RowIndex/*[in,opt]*/, 
                                           TVariantInParam ColumnIndex/*[in,opt]*/, 
                                           TVariantInParam Param3/*[in]*/);
  LPUNKNOWN /*[VT_UNKNOWN:0]*/ __fastcall get__NewEnum();
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_NumberFormat();
  void /*[VT_VOID:0]*/ __fastcall set_NumberFormat(TVariantInParam Param1/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall Paste(TVariantInParam Link/*[in,opt]*/= TNoParam());
  Graph_2k::RangePtr /*[VT_USERDEFINED:1]*/ __fastcall get_Rows();
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Value();
  void /*[VT_VOID:0]*/ __fastcall set_Value(TVariantInParam Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get__Default(TVariantInParam RowIndex/*[in,opt]*/= TNoParam()
                                                      , 
                                                      TVariantInParam ColumnIndex/*[in,opt]*/= TNoParam());
  void /*[VT_VOID:0]*/ __fastcall set__Default(TVariantInParam RowIndex/*[in,opt]*/, 
                                               TVariantInParam ColumnIndex/*[in,opt]*/, 
                                               TVariantInParam Param3/*[in]*/);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Graph_2k::RangePtr Cells = {read = get_Cells};
  __property   Graph_2k::RangePtr Columns = {read = get_Columns};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   Graph_2k::RangePtr Rows = {read = get_Rows};
};
typedef RangeDispT<Range> RangeDisp;

// *********************************************************************//
// DispIntf:  AutoCorrect
// Flags:     (4096) Dispatchable
// GUID:      {000208D4-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class AutoCorrectDispT : public TAutoDriver<AutoCorrect>
{
public:
  AutoCorrectDispT(){}

  AutoCorrectDispT(AutoCorrect *pintf)
  {
    TAutoDriver<AutoCorrect>::Bind(pintf, false);
  }

  AutoCorrectDispT(AutoCorrectPtr pintf)
  {
    TAutoDriver<AutoCorrect>::Bind(pintf, true);
  }

  AutoCorrectDispT& operator=(AutoCorrect *pintf)
  {
    TAutoDriver<AutoCorrect>::Bind(pintf, false);
    return *this;
  }

  AutoCorrectDispT& operator=(AutoCorrectPtr pintf)
  {
    TAutoDriver<AutoCorrect>::Bind(pintf, true);
    return *this;
  }

  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application();
  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent();
  TVariant /*[VT_VARIANT:0]*/ __fastcall AddReplacement(BSTR What/*[in]*/, BSTR Replacement/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_CapitalizeNamesOfDays();
  void /*[VT_VOID:0]*/ __fastcall set_CapitalizeNamesOfDays(TOLEBOOL Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall DeleteReplacement(BSTR What/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_ReplacementList(TVariantInParam Index/*[in,opt]*/= TNoParam());
  void /*[VT_VOID:0]*/ __fastcall set_ReplacementList(TVariantInParam Index/*[in,opt]*/, 
                                                      TVariantInParam Param2/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_ReplaceText();
  void /*[VT_VOID:0]*/ __fastcall set_ReplaceText(TOLEBOOL Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_TwoInitialCapitals();
  void /*[VT_VOID:0]*/ __fastcall set_TwoInitialCapitals(TOLEBOOL Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_CorrectSentenceCap();
  void /*[VT_VOID:0]*/ __fastcall set_CorrectSentenceCap(TOLEBOOL Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_CorrectCapsLock();
  void /*[VT_VOID:0]*/ __fastcall set_CorrectCapsLock(TOLEBOOL Param1/*[in]*/);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   TOLEBOOL        CapitalizeNamesOfDays = {read = get_CapitalizeNamesOfDays, write = set_CapitalizeNamesOfDays};
  __property   TOLEBOOL        ReplaceText = {read = get_ReplaceText, write = set_ReplaceText};
  __property   TOLEBOOL        TwoInitialCapitals = {read = get_TwoInitialCapitals, write = set_TwoInitialCapitals};
  __property   TOLEBOOL        CorrectSentenceCap = {read = get_CorrectSentenceCap, write = set_CorrectSentenceCap};
  __property   TOLEBOOL        CorrectCapsLock = {read = get_CorrectCapsLock, write = set_CorrectCapsLock};
};
typedef AutoCorrectDispT<AutoCorrect> AutoCorrectDisp;

// *********************************************************************//
// DispIntf:  Border
// Flags:     (4096) Dispatchable
// GUID:      {000208EE-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class BorderDispT : public TAutoDriver<Border>
{
public:
  BorderDispT(){}

  BorderDispT(Border *pintf)
  {
    TAutoDriver<Border>::Bind(pintf, false);
  }

  BorderDispT(BorderPtr pintf)
  {
    TAutoDriver<Border>::Bind(pintf, true);
  }

  BorderDispT& operator=(Border *pintf)
  {
    TAutoDriver<Border>::Bind(pintf, false);
    return *this;
  }

  BorderDispT& operator=(BorderPtr pintf)
  {
    TAutoDriver<Border>::Bind(pintf, true);
    return *this;
  }

  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application();
  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent();
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Color();
  void /*[VT_VOID:0]*/ __fastcall set_Color(TVariantInParam Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_ColorIndex();
  void /*[VT_VOID:0]*/ __fastcall set_ColorIndex(TVariantInParam Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_LineStyle();
  void /*[VT_VOID:0]*/ __fastcall set_LineStyle(TVariantInParam Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Weight();
  void /*[VT_VOID:0]*/ __fastcall set_Weight(TVariantInParam Param1/*[in]*/);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef BorderDispT<Border> BorderDisp;

// *********************************************************************//
// DispIntf:  Interior
// Flags:     (4096) Dispatchable
// GUID:      {000208ED-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class InteriorDispT : public TAutoDriver<Interior>
{
public:
  InteriorDispT(){}

  InteriorDispT(Interior *pintf)
  {
    TAutoDriver<Interior>::Bind(pintf, false);
  }

  InteriorDispT(InteriorPtr pintf)
  {
    TAutoDriver<Interior>::Bind(pintf, true);
  }

  InteriorDispT& operator=(Interior *pintf)
  {
    TAutoDriver<Interior>::Bind(pintf, false);
    return *this;
  }

  InteriorDispT& operator=(InteriorPtr pintf)
  {
    TAutoDriver<Interior>::Bind(pintf, true);
    return *this;
  }

  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application();
  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent();
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Color();
  void /*[VT_VOID:0]*/ __fastcall set_Color(TVariantInParam Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_ColorIndex();
  void /*[VT_VOID:0]*/ __fastcall set_ColorIndex(TVariantInParam Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_InvertIfNegative();
  void /*[VT_VOID:0]*/ __fastcall set_InvertIfNegative(TVariantInParam Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Pattern();
  void /*[VT_VOID:0]*/ __fastcall set_Pattern(TVariantInParam Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_PatternColor();
  void /*[VT_VOID:0]*/ __fastcall set_PatternColor(TVariantInParam Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_PatternColorIndex();
  void /*[VT_VOID:0]*/ __fastcall set_PatternColorIndex(TVariantInParam Param1/*[in]*/);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef InteriorDispT<Interior> InteriorDisp;

// *********************************************************************//
// DispIntf:  ChartFillFormat
// Flags:     (4096) Dispatchable
// GUID:      {0002441C-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class ChartFillFormatDispT : public TAutoDriver<ChartFillFormat>
{
public:
  ChartFillFormatDispT(){}

  ChartFillFormatDispT(ChartFillFormat *pintf)
  {
    TAutoDriver<ChartFillFormat>::Bind(pintf, false);
  }

  ChartFillFormatDispT(ChartFillFormatPtr pintf)
  {
    TAutoDriver<ChartFillFormat>::Bind(pintf, true);
  }

  ChartFillFormatDispT& operator=(ChartFillFormat *pintf)
  {
    TAutoDriver<ChartFillFormat>::Bind(pintf, false);
    return *this;
  }

  ChartFillFormatDispT& operator=(ChartFillFormatPtr pintf)
  {
    TAutoDriver<ChartFillFormat>::Bind(pintf, true);
    return *this;
  }

  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application();
  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent();
  void /*[VT_VOID:0]*/ __fastcall OneColorGradient(Office_2k::MsoGradientStyle Style/*[in]*/, 
                                                   long Variant/*[in]*/, float Degree/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall TwoColorGradient(Office_2k::MsoGradientStyle Style/*[in]*/, 
                                                   long Variant/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall PresetTextured(Office_2k::MsoPresetTexture PresetTexture/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall Solid();
  void /*[VT_VOID:0]*/ __fastcall Patterned(Office_2k::MsoPatternType Pattern/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall UserPicture(TVariantInParam PictureFile/*[in,opt]*/= TNoParam(), 
                                              TVariantInParam PictureFormat/*[in,opt]*/= TNoParam()
                                              , 
                                              TVariantInParam PictureStackUnit/*[in,opt]*/= TNoParam()
                                              , 
                                              TVariantInParam PicturePlacement/*[in,opt]*/= TNoParam());
  void /*[VT_VOID:0]*/ __fastcall UserTextured(BSTR TextureFile/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall PresetGradient(Office_2k::MsoGradientStyle Style/*[in]*/, 
                                                 long Variant/*[in]*/, 
                                                 Office_2k::MsoPresetGradientType PresetGradientType/*[in]*/);
  Graph_2k::ChartColorFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall get_BackColor();
  Graph_2k::ChartColorFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall get_ForeColor();
  Office_2k::MsoGradientColorType /*[VT_USERDEFINED:0]*/ __fastcall get_GradientColorType();
  float /*[VT_R4:0]*/ __fastcall get_GradientDegree();
  Office_2k::MsoGradientStyle /*[VT_USERDEFINED:0]*/ __fastcall get_GradientStyle();
  long /*[VT_I4:0]*/ __fastcall get_GradientVariant();
  Office_2k::MsoPatternType /*[VT_USERDEFINED:0]*/ __fastcall get_Pattern();
  Office_2k::MsoPresetGradientType /*[VT_USERDEFINED:0]*/ __fastcall get_PresetGradientType();
  Office_2k::MsoPresetTexture /*[VT_USERDEFINED:0]*/ __fastcall get_PresetTexture();
  BSTR /*[VT_BSTR:0]*/ __fastcall get_TextureName();
  Office_2k::MsoTextureType /*[VT_USERDEFINED:0]*/ __fastcall get_TextureType();
  Office_2k::MsoFillType /*[VT_USERDEFINED:0]*/ __fastcall get_Type();
  Office_2k::MsoTriState /*[VT_USERDEFINED:0]*/ __fastcall get_Visible();
  void /*[VT_VOID:0]*/ __fastcall set_Visible(Office_2k::MsoTriState Param1/*[in]*/);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Graph_2k::ChartColorFormatPtr BackColor = {read = get_BackColor};
  __property   Graph_2k::ChartColorFormatPtr ForeColor = {read = get_ForeColor};
  __property   Office_2k::MsoGradientColorType GradientColorType = {read = get_GradientColorType};
  __property   float           GradientDegree = {read = get_GradientDegree};
  __property   Office_2k::MsoGradientStyle GradientStyle = {read = get_GradientStyle};
  __property   long            GradientVariant = {read = get_GradientVariant};
  __property   Office_2k::MsoPatternType Pattern = {read = get_Pattern};
  __property   Office_2k::MsoPresetGradientType PresetGradientType = {read = get_PresetGradientType};
  __property   Office_2k::MsoPresetTexture PresetTexture = {read = get_PresetTexture};
  __property   BSTR            TextureName = {read = get_TextureName};
  __property   Office_2k::MsoTextureType TextureType = {read = get_TextureType};
  __property   Office_2k::MsoFillType Type = {read = get_Type};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};
};
typedef ChartFillFormatDispT<ChartFillFormat> ChartFillFormatDisp;

// *********************************************************************//
// DispIntf:  ChartColorFormat
// Flags:     (4096) Dispatchable
// GUID:      {0002441D-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class ChartColorFormatDispT : public TAutoDriver<ChartColorFormat>
{
public:
  ChartColorFormatDispT(){}

  ChartColorFormatDispT(ChartColorFormat *pintf)
  {
    TAutoDriver<ChartColorFormat>::Bind(pintf, false);
  }

  ChartColorFormatDispT(ChartColorFormatPtr pintf)
  {
    TAutoDriver<ChartColorFormat>::Bind(pintf, true);
  }

  ChartColorFormatDispT& operator=(ChartColorFormat *pintf)
  {
    TAutoDriver<ChartColorFormat>::Bind(pintf, false);
    return *this;
  }

  ChartColorFormatDispT& operator=(ChartColorFormatPtr pintf)
  {
    TAutoDriver<ChartColorFormat>::Bind(pintf, true);
    return *this;
  }

  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application();
  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent();
  long /*[VT_I4:0]*/ __fastcall get_SchemeColor();
  void /*[VT_VOID:0]*/ __fastcall set_SchemeColor(long Param1/*[in]*/);
  long /*[VT_I4:0]*/ __fastcall get_rgb();
  long /*[VT_I4:0]*/ __fastcall get__Default();
  long /*[VT_I4:0]*/ __fastcall get_Type();

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   long            SchemeColor = {read = get_SchemeColor, write = set_SchemeColor};
  __property   long            rgb = {read = get_rgb};
  __property   long            _Default = {read = get__Default};
  __property   long            Type = {read = get_Type};
};
typedef ChartColorFormatDispT<ChartColorFormat> ChartColorFormatDisp;

// *********************************************************************//
// DispIntf:  Axis
// Flags:     (4096) Dispatchable
// GUID:      {000208F9-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class AxisDispT : public TAutoDriver<Axis>
{
public:
  AxisDispT(){}

  AxisDispT(Axis *pintf)
  {
    TAutoDriver<Axis>::Bind(pintf, false);
  }

  AxisDispT(AxisPtr pintf)
  {
    TAutoDriver<Axis>::Bind(pintf, true);
  }

  AxisDispT& operator=(Axis *pintf)
  {
    TAutoDriver<Axis>::Bind(pintf, false);
    return *this;
  }

  AxisDispT& operator=(AxisPtr pintf)
  {
    TAutoDriver<Axis>::Bind(pintf, true);
    return *this;
  }

  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application();
  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent();
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_AxisBetweenCategories();
  void /*[VT_VOID:0]*/ __fastcall set_AxisBetweenCategories(TOLEBOOL Param1/*[in]*/);
  Graph_2k::XlAxisGroup /*[VT_USERDEFINED:0]*/ __fastcall get_AxisGroup();
  Graph_2k::AxisTitlePtr /*[VT_USERDEFINED:1]*/ __fastcall get_AxisTitle();
  Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Border();
  Graph_2k::XlAxisCrosses /*[VT_USERDEFINED:0]*/ __fastcall get_Crosses();
  void /*[VT_VOID:0]*/ __fastcall set_Crosses(Graph_2k::XlAxisCrosses Param1/*[in]*/);
  double /*[VT_R8:0]*/ __fastcall get_CrossesAt();
  void /*[VT_VOID:0]*/ __fastcall set_CrossesAt(double Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall Delete();
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_HasMajorGridlines();
  void /*[VT_VOID:0]*/ __fastcall set_HasMajorGridlines(TOLEBOOL Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_HasMinorGridlines();
  void /*[VT_VOID:0]*/ __fastcall set_HasMinorGridlines(TOLEBOOL Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_HasTitle();
  void /*[VT_VOID:0]*/ __fastcall set_HasTitle(TOLEBOOL Param1/*[in]*/);
  Graph_2k::GridlinesPtr /*[VT_USERDEFINED:1]*/ __fastcall get_MajorGridlines();
  Graph_2k::XlTickMark /*[VT_USERDEFINED:0]*/ __fastcall get_MajorTickMark();
  void /*[VT_VOID:0]*/ __fastcall set_MajorTickMark(Graph_2k::XlTickMark Param1/*[in]*/);
  double /*[VT_R8:0]*/ __fastcall get_MajorUnit();
  void /*[VT_VOID:0]*/ __fastcall set_MajorUnit(double Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_MajorUnitIsAuto();
  void /*[VT_VOID:0]*/ __fastcall set_MajorUnitIsAuto(TOLEBOOL Param1/*[in]*/);
  double /*[VT_R8:0]*/ __fastcall get_MaximumScale();
  void /*[VT_VOID:0]*/ __fastcall set_MaximumScale(double Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_MaximumScaleIsAuto();
  void /*[VT_VOID:0]*/ __fastcall set_MaximumScaleIsAuto(TOLEBOOL Param1/*[in]*/);
  double /*[VT_R8:0]*/ __fastcall get_MinimumScale();
  void /*[VT_VOID:0]*/ __fastcall set_MinimumScale(double Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_MinimumScaleIsAuto();
  void /*[VT_VOID:0]*/ __fastcall set_MinimumScaleIsAuto(TOLEBOOL Param1/*[in]*/);
  Graph_2k::GridlinesPtr /*[VT_USERDEFINED:1]*/ __fastcall get_MinorGridlines();
  Graph_2k::XlTickMark /*[VT_USERDEFINED:0]*/ __fastcall get_MinorTickMark();
  void /*[VT_VOID:0]*/ __fastcall set_MinorTickMark(Graph_2k::XlTickMark Param1/*[in]*/);
  double /*[VT_R8:0]*/ __fastcall get_MinorUnit();
  void /*[VT_VOID:0]*/ __fastcall set_MinorUnit(double Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_MinorUnitIsAuto();
  void /*[VT_VOID:0]*/ __fastcall set_MinorUnitIsAuto(TOLEBOOL Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_ReversePlotOrder();
  void /*[VT_VOID:0]*/ __fastcall set_ReversePlotOrder(TOLEBOOL Param1/*[in]*/);
  Graph_2k::XlScaleType /*[VT_USERDEFINED:0]*/ __fastcall get_ScaleType();
  void /*[VT_VOID:0]*/ __fastcall set_ScaleType(Graph_2k::XlScaleType Param1/*[in]*/);
  Graph_2k::XlTickLabelPosition /*[VT_USERDEFINED:0]*/ __fastcall get_TickLabelPosition();
  void /*[VT_VOID:0]*/ __fastcall set_TickLabelPosition(Graph_2k::XlTickLabelPosition Param1/*[in]*/);
  Graph_2k::TickLabelsPtr /*[VT_USERDEFINED:1]*/ __fastcall get_TickLabels();
  long /*[VT_I4:0]*/ __fastcall get_TickLabelSpacing();
  void /*[VT_VOID:0]*/ __fastcall set_TickLabelSpacing(long Param1/*[in]*/);
  long /*[VT_I4:0]*/ __fastcall get_TickMarkSpacing();
  void /*[VT_VOID:0]*/ __fastcall set_TickMarkSpacing(long Param1/*[in]*/);
  Graph_2k::XlAxisType /*[VT_USERDEFINED:0]*/ __fastcall get_Type();
  void /*[VT_VOID:0]*/ __fastcall set_Type(Graph_2k::XlAxisType Param1/*[in]*/);
  Graph_2k::XlTimeUnit /*[VT_USERDEFINED:0]*/ __fastcall get_BaseUnit();
  void /*[VT_VOID:0]*/ __fastcall set_BaseUnit(Graph_2k::XlTimeUnit Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_BaseUnitIsAuto();
  void /*[VT_VOID:0]*/ __fastcall set_BaseUnitIsAuto(TOLEBOOL Param1/*[in]*/);
  Graph_2k::XlTimeUnit /*[VT_USERDEFINED:0]*/ __fastcall get_MajorUnitScale();
  void /*[VT_VOID:0]*/ __fastcall set_MajorUnitScale(Graph_2k::XlTimeUnit Param1/*[in]*/);
  Graph_2k::XlTimeUnit /*[VT_USERDEFINED:0]*/ __fastcall get_MinorUnitScale();
  void /*[VT_VOID:0]*/ __fastcall set_MinorUnitScale(Graph_2k::XlTimeUnit Param1/*[in]*/);
  Graph_2k::XlCategoryType /*[VT_USERDEFINED:0]*/ __fastcall get_CategoryType();
  void /*[VT_VOID:0]*/ __fastcall set_CategoryType(Graph_2k::XlCategoryType Param1/*[in]*/);
  double /*[VT_R8:0]*/ __fastcall get_Left();
  double /*[VT_R8:0]*/ __fastcall get_Top();
  double /*[VT_R8:0]*/ __fastcall get_Width();
  double /*[VT_R8:0]*/ __fastcall get_Height();
  Graph_2k::XlDisplayUnit /*[VT_USERDEFINED:0]*/ __fastcall get_DisplayUnit();
  void /*[VT_VOID:0]*/ __fastcall set_DisplayUnit(Graph_2k::XlDisplayUnit Param1/*[in]*/);
  double /*[VT_R8:0]*/ __fastcall get_DisplayUnitCustom();
  void /*[VT_VOID:0]*/ __fastcall set_DisplayUnitCustom(double Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_HasDisplayUnitLabel();
  void /*[VT_VOID:0]*/ __fastcall set_HasDisplayUnitLabel(TOLEBOOL Param1/*[in]*/);
  Graph_2k::DisplayUnitLabelPtr /*[VT_USERDEFINED:1]*/ __fastcall get_DisplayUnitLabel();

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   TOLEBOOL        AxisBetweenCategories = {read = get_AxisBetweenCategories, write = set_AxisBetweenCategories};
  __property   Graph_2k::XlAxisGroup AxisGroup = {read = get_AxisGroup};
  __property   Graph_2k::AxisTitlePtr AxisTitle = {read = get_AxisTitle};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::XlAxisCrosses Crosses = {read = get_Crosses, write = set_Crosses};
  __property   double          CrossesAt = {read = get_CrossesAt, write = set_CrossesAt};
  __property   TOLEBOOL        HasMajorGridlines = {read = get_HasMajorGridlines, write = set_HasMajorGridlines};
  __property   TOLEBOOL        HasMinorGridlines = {read = get_HasMinorGridlines, write = set_HasMinorGridlines};
  __property   TOLEBOOL        HasTitle = {read = get_HasTitle, write = set_HasTitle};
  __property   Graph_2k::GridlinesPtr MajorGridlines = {read = get_MajorGridlines};
  __property   Graph_2k::XlTickMark MajorTickMark = {read = get_MajorTickMark, write = set_MajorTickMark};
  __property   double          MajorUnit = {read = get_MajorUnit, write = set_MajorUnit};
  __property   TOLEBOOL        MajorUnitIsAuto = {read = get_MajorUnitIsAuto, write = set_MajorUnitIsAuto};
  __property   double          MaximumScale = {read = get_MaximumScale, write = set_MaximumScale};
  __property   TOLEBOOL        MaximumScaleIsAuto = {read = get_MaximumScaleIsAuto, write = set_MaximumScaleIsAuto};
  __property   double          MinimumScale = {read = get_MinimumScale, write = set_MinimumScale};
  __property   TOLEBOOL        MinimumScaleIsAuto = {read = get_MinimumScaleIsAuto, write = set_MinimumScaleIsAuto};
  __property   Graph_2k::GridlinesPtr MinorGridlines = {read = get_MinorGridlines};
  __property   Graph_2k::XlTickMark MinorTickMark = {read = get_MinorTickMark, write = set_MinorTickMark};
  __property   double          MinorUnit = {read = get_MinorUnit, write = set_MinorUnit};
  __property   TOLEBOOL        MinorUnitIsAuto = {read = get_MinorUnitIsAuto, write = set_MinorUnitIsAuto};
  __property   TOLEBOOL        ReversePlotOrder = {read = get_ReversePlotOrder, write = set_ReversePlotOrder};
  __property   Graph_2k::XlScaleType ScaleType = {read = get_ScaleType, write = set_ScaleType};
  __property   Graph_2k::XlTickLabelPosition TickLabelPosition = {read = get_TickLabelPosition, write = set_TickLabelPosition};
  __property   Graph_2k::TickLabelsPtr TickLabels = {read = get_TickLabels};
  __property   long            TickLabelSpacing = {read = get_TickLabelSpacing, write = set_TickLabelSpacing};
  __property   long            TickMarkSpacing = {read = get_TickMarkSpacing, write = set_TickMarkSpacing};
  __property   Graph_2k::XlAxisType Type = {read = get_Type, write = set_Type};
  __property   Graph_2k::XlTimeUnit BaseUnit = {read = get_BaseUnit, write = set_BaseUnit};
  __property   TOLEBOOL        BaseUnitIsAuto = {read = get_BaseUnitIsAuto, write = set_BaseUnitIsAuto};
  __property   Graph_2k::XlTimeUnit MajorUnitScale = {read = get_MajorUnitScale, write = set_MajorUnitScale};
  __property   Graph_2k::XlTimeUnit MinorUnitScale = {read = get_MinorUnitScale, write = set_MinorUnitScale};
  __property   Graph_2k::XlCategoryType CategoryType = {read = get_CategoryType, write = set_CategoryType};
  __property   double          Left = {read = get_Left};
  __property   double          Top = {read = get_Top};
  __property   double          Width = {read = get_Width};
  __property   double          Height = {read = get_Height};
  __property   Graph_2k::XlDisplayUnit DisplayUnit = {read = get_DisplayUnit, write = set_DisplayUnit};
  __property   double          DisplayUnitCustom = {read = get_DisplayUnitCustom, write = set_DisplayUnitCustom};
  __property   TOLEBOOL        HasDisplayUnitLabel = {read = get_HasDisplayUnitLabel, write = set_HasDisplayUnitLabel};
  __property   Graph_2k::DisplayUnitLabelPtr DisplayUnitLabel = {read = get_DisplayUnitLabel};
};
typedef AxisDispT<Axis> AxisDisp;

// *********************************************************************//
// DispIntf:  ChartTitle
// Flags:     (4096) Dispatchable
// GUID:      {000208F8-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class ChartTitleDispT : public TAutoDriver<ChartTitle>
{
public:
  ChartTitleDispT(){}

  ChartTitleDispT(ChartTitle *pintf)
  {
    TAutoDriver<ChartTitle>::Bind(pintf, false);
  }

  ChartTitleDispT(ChartTitlePtr pintf)
  {
    TAutoDriver<ChartTitle>::Bind(pintf, true);
  }

  ChartTitleDispT& operator=(ChartTitle *pintf)
  {
    TAutoDriver<ChartTitle>::Bind(pintf, false);
    return *this;
  }

  ChartTitleDispT& operator=(ChartTitlePtr pintf)
  {
    TAutoDriver<ChartTitle>::Bind(pintf, true);
    return *this;
  }

  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application();
  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent();
  BSTR /*[VT_BSTR:0]*/ __fastcall get_Name();
  Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Border();
  TVariant /*[VT_VARIANT:0]*/ __fastcall Delete();
  Graph_2k::InteriorPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Interior();
  Graph_2k::ChartFillFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Fill();
  BSTR /*[VT_BSTR:0]*/ __fastcall get_Caption();
  void /*[VT_VOID:0]*/ __fastcall set_Caption(BSTR Param1/*[in]*/);
  Graph_2k::FontPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Font();
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_HorizontalAlignment();
  void /*[VT_VOID:0]*/ __fastcall set_HorizontalAlignment(TVariantInParam Param1/*[in]*/);
  double /*[VT_R8:0]*/ __fastcall get_Left();
  void /*[VT_VOID:0]*/ __fastcall set_Left(double Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Orientation();
  void /*[VT_VOID:0]*/ __fastcall set_Orientation(TVariantInParam Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_Shadow();
  void /*[VT_VOID:0]*/ __fastcall set_Shadow(TOLEBOOL Param1/*[in]*/);
  BSTR /*[VT_BSTR:0]*/ __fastcall get_Text();
  void /*[VT_VOID:0]*/ __fastcall set_Text(BSTR Param1/*[in]*/);
  double /*[VT_R8:0]*/ __fastcall get_Top();
  void /*[VT_VOID:0]*/ __fastcall set_Top(double Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_VerticalAlignment();
  void /*[VT_VOID:0]*/ __fastcall set_VerticalAlignment(TVariantInParam Param1/*[in]*/);
  long /*[VT_I4:0]*/ __fastcall get_ReadingOrder();
  void /*[VT_VOID:0]*/ __fastcall set_ReadingOrder(long Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_AutoScaleFont();
  void /*[VT_VOID:0]*/ __fastcall set_AutoScaleFont(TVariantInParam Param1/*[in]*/);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::InteriorPtr Interior = {read = get_Interior};
  __property   Graph_2k::ChartFillFormatPtr Fill = {read = get_Fill};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   Graph_2k::FontPtr Font = {read = get_Font};
  __property   double          Left = {read = get_Left, write = set_Left};
  __property   TOLEBOOL        Shadow = {read = get_Shadow, write = set_Shadow};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   double          Top = {read = get_Top, write = set_Top};
  __property   long            ReadingOrder = {read = get_ReadingOrder, write = set_ReadingOrder};
};
typedef ChartTitleDispT<ChartTitle> ChartTitleDisp;

// *********************************************************************//
// DispIntf:  AxisTitle
// Flags:     (4096) Dispatchable
// GUID:      {000208F7-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class AxisTitleDispT : public TAutoDriver<AxisTitle>
{
public:
  AxisTitleDispT(){}

  AxisTitleDispT(AxisTitle *pintf)
  {
    TAutoDriver<AxisTitle>::Bind(pintf, false);
  }

  AxisTitleDispT(AxisTitlePtr pintf)
  {
    TAutoDriver<AxisTitle>::Bind(pintf, true);
  }

  AxisTitleDispT& operator=(AxisTitle *pintf)
  {
    TAutoDriver<AxisTitle>::Bind(pintf, false);
    return *this;
  }

  AxisTitleDispT& operator=(AxisTitlePtr pintf)
  {
    TAutoDriver<AxisTitle>::Bind(pintf, true);
    return *this;
  }

  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application();
  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent();
  BSTR /*[VT_BSTR:0]*/ __fastcall get_Name();
  Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Border();
  TVariant /*[VT_VARIANT:0]*/ __fastcall Delete();
  Graph_2k::InteriorPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Interior();
  Graph_2k::ChartFillFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Fill();
  BSTR /*[VT_BSTR:0]*/ __fastcall get_Caption();
  void /*[VT_VOID:0]*/ __fastcall set_Caption(BSTR Param1/*[in]*/);
  Graph_2k::FontPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Font();
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_HorizontalAlignment();
  void /*[VT_VOID:0]*/ __fastcall set_HorizontalAlignment(TVariantInParam Param1/*[in]*/);
  double /*[VT_R8:0]*/ __fastcall get_Left();
  void /*[VT_VOID:0]*/ __fastcall set_Left(double Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Orientation();
  void /*[VT_VOID:0]*/ __fastcall set_Orientation(TVariantInParam Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_Shadow();
  void /*[VT_VOID:0]*/ __fastcall set_Shadow(TOLEBOOL Param1/*[in]*/);
  BSTR /*[VT_BSTR:0]*/ __fastcall get_Text();
  void /*[VT_VOID:0]*/ __fastcall set_Text(BSTR Param1/*[in]*/);
  double /*[VT_R8:0]*/ __fastcall get_Top();
  void /*[VT_VOID:0]*/ __fastcall set_Top(double Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_VerticalAlignment();
  void /*[VT_VOID:0]*/ __fastcall set_VerticalAlignment(TVariantInParam Param1/*[in]*/);
  long /*[VT_I4:0]*/ __fastcall get_ReadingOrder();
  void /*[VT_VOID:0]*/ __fastcall set_ReadingOrder(long Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_AutoScaleFont();
  void /*[VT_VOID:0]*/ __fastcall set_AutoScaleFont(TVariantInParam Param1/*[in]*/);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::InteriorPtr Interior = {read = get_Interior};
  __property   Graph_2k::ChartFillFormatPtr Fill = {read = get_Fill};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   Graph_2k::FontPtr Font = {read = get_Font};
  __property   double          Left = {read = get_Left, write = set_Left};
  __property   TOLEBOOL        Shadow = {read = get_Shadow, write = set_Shadow};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   double          Top = {read = get_Top, write = set_Top};
  __property   long            ReadingOrder = {read = get_ReadingOrder, write = set_ReadingOrder};
};
typedef AxisTitleDispT<AxisTitle> AxisTitleDisp;

// *********************************************************************//
// DispIntf:  ChartGroup
// Flags:     (4096) Dispatchable
// GUID:      {000208F6-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class ChartGroupDispT : public TAutoDriver<ChartGroup>
{
public:
  ChartGroupDispT(){}

  ChartGroupDispT(ChartGroup *pintf)
  {
    TAutoDriver<ChartGroup>::Bind(pintf, false);
  }

  ChartGroupDispT(ChartGroupPtr pintf)
  {
    TAutoDriver<ChartGroup>::Bind(pintf, true);
  }

  ChartGroupDispT& operator=(ChartGroup *pintf)
  {
    TAutoDriver<ChartGroup>::Bind(pintf, false);
    return *this;
  }

  ChartGroupDispT& operator=(ChartGroupPtr pintf)
  {
    TAutoDriver<ChartGroup>::Bind(pintf, true);
    return *this;
  }

  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application();
  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent();
  Graph_2k::XlAxisGroup /*[VT_USERDEFINED:0]*/ __fastcall get_AxisGroup();
  void /*[VT_VOID:0]*/ __fastcall set_AxisGroup(Graph_2k::XlAxisGroup Param1/*[in]*/);
  long /*[VT_I4:0]*/ __fastcall get_DoughnutHoleSize();
  void /*[VT_VOID:0]*/ __fastcall set_DoughnutHoleSize(long Param1/*[in]*/);
  Graph_2k::DownBarsPtr /*[VT_USERDEFINED:1]*/ __fastcall get_DownBars();
  Graph_2k::DropLinesPtr /*[VT_USERDEFINED:1]*/ __fastcall get_DropLines();
  long /*[VT_I4:0]*/ __fastcall get_FirstSliceAngle();
  void /*[VT_VOID:0]*/ __fastcall set_FirstSliceAngle(long Param1/*[in]*/);
  long /*[VT_I4:0]*/ __fastcall get_GapWidth();
  void /*[VT_VOID:0]*/ __fastcall set_GapWidth(long Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_HasDropLines();
  void /*[VT_VOID:0]*/ __fastcall set_HasDropLines(TOLEBOOL Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_HasHiLoLines();
  void /*[VT_VOID:0]*/ __fastcall set_HasHiLoLines(TOLEBOOL Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_HasRadarAxisLabels();
  void /*[VT_VOID:0]*/ __fastcall set_HasRadarAxisLabels(TOLEBOOL Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_HasSeriesLines();
  void /*[VT_VOID:0]*/ __fastcall set_HasSeriesLines(TOLEBOOL Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_HasUpDownBars();
  void /*[VT_VOID:0]*/ __fastcall set_HasUpDownBars(TOLEBOOL Param1/*[in]*/);
  Graph_2k::HiLoLinesPtr /*[VT_USERDEFINED:1]*/ __fastcall get_HiLoLines();
  long /*[VT_I4:0]*/ __fastcall get_Index();
  long /*[VT_I4:0]*/ __fastcall get_Overlap();
  void /*[VT_VOID:0]*/ __fastcall set_Overlap(long Param1/*[in]*/);
  Graph_2k::TickLabelsPtr /*[VT_USERDEFINED:1]*/ __fastcall get_RadarAxisLabels();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall SeriesCollection(TVariantInParam Index/*[in,opt]*/= TNoParam());
  Graph_2k::SeriesLinesPtr /*[VT_USERDEFINED:1]*/ __fastcall get_SeriesLines();
  long /*[VT_I4:0]*/ __fastcall get_SubType();
  void /*[VT_VOID:0]*/ __fastcall set_SubType(long Param1/*[in]*/);
  long /*[VT_I4:0]*/ __fastcall get_Type();
  void /*[VT_VOID:0]*/ __fastcall set_Type(long Param1/*[in]*/);
  Graph_2k::UpBarsPtr /*[VT_USERDEFINED:1]*/ __fastcall get_UpBars();
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_VaryByCategories();
  void /*[VT_VOID:0]*/ __fastcall set_VaryByCategories(TOLEBOOL Param1/*[in]*/);
  Graph_2k::XlSizeRepresents /*[VT_USERDEFINED:0]*/ __fastcall get_SizeRepresents();
  void /*[VT_VOID:0]*/ __fastcall set_SizeRepresents(Graph_2k::XlSizeRepresents Param1/*[in]*/);
  long /*[VT_I4:0]*/ __fastcall get_BubbleScale();
  void /*[VT_VOID:0]*/ __fastcall set_BubbleScale(long Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_ShowNegativeBubbles();
  void /*[VT_VOID:0]*/ __fastcall set_ShowNegativeBubbles(TOLEBOOL Param1/*[in]*/);
  Graph_2k::XlChartSplitType /*[VT_USERDEFINED:0]*/ __fastcall get_SplitType();
  void /*[VT_VOID:0]*/ __fastcall set_SplitType(Graph_2k::XlChartSplitType Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_SplitValue();
  void /*[VT_VOID:0]*/ __fastcall set_SplitValue(TVariantInParam Param1/*[in]*/);
  long /*[VT_I4:0]*/ __fastcall get_SecondPlotSize();
  void /*[VT_VOID:0]*/ __fastcall set_SecondPlotSize(long Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_Has3DShading();
  void /*[VT_VOID:0]*/ __fastcall set_Has3DShading(TOLEBOOL Param1/*[in]*/);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Graph_2k::XlAxisGroup AxisGroup = {read = get_AxisGroup, write = set_AxisGroup};
  __property   long            DoughnutHoleSize = {read = get_DoughnutHoleSize, write = set_DoughnutHoleSize};
  __property   Graph_2k::DownBarsPtr DownBars = {read = get_DownBars};
  __property   Graph_2k::DropLinesPtr DropLines = {read = get_DropLines};
  __property   long            FirstSliceAngle = {read = get_FirstSliceAngle, write = set_FirstSliceAngle};
  __property   long            GapWidth = {read = get_GapWidth, write = set_GapWidth};
  __property   TOLEBOOL        HasDropLines = {read = get_HasDropLines, write = set_HasDropLines};
  __property   TOLEBOOL        HasHiLoLines = {read = get_HasHiLoLines, write = set_HasHiLoLines};
  __property   TOLEBOOL        HasRadarAxisLabels = {read = get_HasRadarAxisLabels, write = set_HasRadarAxisLabels};
  __property   TOLEBOOL        HasSeriesLines = {read = get_HasSeriesLines, write = set_HasSeriesLines};
  __property   TOLEBOOL        HasUpDownBars = {read = get_HasUpDownBars, write = set_HasUpDownBars};
  __property   Graph_2k::HiLoLinesPtr HiLoLines = {read = get_HiLoLines};
  __property   long            Index = {read = get_Index};
  __property   long            Overlap = {read = get_Overlap, write = set_Overlap};
  __property   Graph_2k::TickLabelsPtr RadarAxisLabels = {read = get_RadarAxisLabels};
  __property   Graph_2k::SeriesLinesPtr SeriesLines = {read = get_SeriesLines};
  __property   long            SubType = {read = get_SubType, write = set_SubType};
  __property   long            Type = {read = get_Type, write = set_Type};
  __property   Graph_2k::UpBarsPtr UpBars = {read = get_UpBars};
  __property   TOLEBOOL        VaryByCategories = {read = get_VaryByCategories, write = set_VaryByCategories};
  __property   Graph_2k::XlSizeRepresents SizeRepresents = {read = get_SizeRepresents, write = set_SizeRepresents};
  __property   long            BubbleScale = {read = get_BubbleScale, write = set_BubbleScale};
  __property   TOLEBOOL        ShowNegativeBubbles = {read = get_ShowNegativeBubbles, write = set_ShowNegativeBubbles};
  __property   Graph_2k::XlChartSplitType SplitType = {read = get_SplitType, write = set_SplitType};
  __property   long            SecondPlotSize = {read = get_SecondPlotSize, write = set_SecondPlotSize};
  __property   TOLEBOOL        Has3DShading = {read = get_Has3DShading, write = set_Has3DShading};
};
typedef ChartGroupDispT<ChartGroup> ChartGroupDisp;

// *********************************************************************//
// DispIntf:  ChartGroups
// Flags:     (4096) Dispatchable
// GUID:      {000208F5-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class ChartGroupsDispT : public TAutoDriver<ChartGroups>
{
public:
  ChartGroupsDispT(){}

  ChartGroupsDispT(ChartGroups *pintf)
  {
    TAutoDriver<ChartGroups>::Bind(pintf, false);
  }

  ChartGroupsDispT(ChartGroupsPtr pintf)
  {
    TAutoDriver<ChartGroups>::Bind(pintf, true);
  }

  ChartGroupsDispT& operator=(ChartGroups *pintf)
  {
    TAutoDriver<ChartGroups>::Bind(pintf, false);
    return *this;
  }

  ChartGroupsDispT& operator=(ChartGroupsPtr pintf)
  {
    TAutoDriver<ChartGroups>::Bind(pintf, true);
    return *this;
  }

  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application();
  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent();
  long /*[VT_I4:0]*/ __fastcall get_Count();
  Graph_2k::ChartGroupPtr /*[VT_USERDEFINED:1]*/ __fastcall Item(TVariantInParam Index/*[in]*/);
  LPUNKNOWN /*[VT_UNKNOWN:0]*/ __fastcall _NewEnum();

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};
};
typedef ChartGroupsDispT<ChartGroups> ChartGroupsDisp;

// *********************************************************************//
// DispIntf:  Axes
// Flags:     (4096) Dispatchable
// GUID:      {000208F4-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class AxesDispT : public TAutoDriver<Axes>
{
public:
  AxesDispT(){}

  AxesDispT(Axes *pintf)
  {
    TAutoDriver<Axes>::Bind(pintf, false);
  }

  AxesDispT(AxesPtr pintf)
  {
    TAutoDriver<Axes>::Bind(pintf, true);
  }

  AxesDispT& operator=(Axes *pintf)
  {
    TAutoDriver<Axes>::Bind(pintf, false);
    return *this;
  }

  AxesDispT& operator=(AxesPtr pintf)
  {
    TAutoDriver<Axes>::Bind(pintf, true);
    return *this;
  }

  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application();
  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent();
  long /*[VT_I4:0]*/ __fastcall get_Count();
  Graph_2k::AxisPtr /*[VT_USERDEFINED:1]*/ __fastcall Item(Graph_2k::XlAxisType Type/*[in]*/, 
                                                           Graph_2k::XlAxisGroup AxisGroup/*[in,def,opt]*/);
  LPUNKNOWN /*[VT_UNKNOWN:0]*/ __fastcall _NewEnum();

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};
};
typedef AxesDispT<Axes> AxesDisp;

// *********************************************************************//
// DispIntf:  Points
// Flags:     (4096) Dispatchable
// GUID:      {000208F2-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class PointsDispT : public TAutoDriver<Points>
{
public:
  PointsDispT(){}

  PointsDispT(Points *pintf)
  {
    TAutoDriver<Points>::Bind(pintf, false);
  }

  PointsDispT(PointsPtr pintf)
  {
    TAutoDriver<Points>::Bind(pintf, true);
  }

  PointsDispT& operator=(Points *pintf)
  {
    TAutoDriver<Points>::Bind(pintf, false);
    return *this;
  }

  PointsDispT& operator=(PointsPtr pintf)
  {
    TAutoDriver<Points>::Bind(pintf, true);
    return *this;
  }

  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application();
  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent();
  long /*[VT_I4:0]*/ __fastcall get_Count();
  Graph_2k::PointPtr /*[VT_USERDEFINED:1]*/ __fastcall Item(long Index/*[in]*/);
  LPUNKNOWN /*[VT_UNKNOWN:0]*/ __fastcall _NewEnum();

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};
};
typedef PointsDispT<Points> PointsDisp;

// *********************************************************************//
// DispIntf:  Point
// Flags:     (4096) Dispatchable
// GUID:      {000208F1-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class PointDispT : public TAutoDriver<Point>
{
public:
  PointDispT(){}

  PointDispT(Point *pintf)
  {
    TAutoDriver<Point>::Bind(pintf, false);
  }

  PointDispT(PointPtr pintf)
  {
    TAutoDriver<Point>::Bind(pintf, true);
  }

  PointDispT& operator=(Point *pintf)
  {
    TAutoDriver<Point>::Bind(pintf, false);
    return *this;
  }

  PointDispT& operator=(PointPtr pintf)
  {
    TAutoDriver<Point>::Bind(pintf, true);
    return *this;
  }

  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application();
  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent();
  TVariant /*[VT_VARIANT:0]*/ __fastcall ApplyDataLabels(Graph_2k::XlDataLabelsType Type/*[in,def,opt]*/
                                                         , 
                                                         TVariantInParam LegendKey/*[in,opt]*/= TNoParam()
                                                         , 
                                                         TVariantInParam AutoText/*[in,opt]*/= TNoParam());
  Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Border();
  TVariant /*[VT_VARIANT:0]*/ __fastcall ClearFormats();
  Graph_2k::DataLabelPtr /*[VT_USERDEFINED:1]*/ __fastcall get_DataLabel();
  TVariant /*[VT_VARIANT:0]*/ __fastcall Delete();
  long /*[VT_I4:0]*/ __fastcall get_Explosion();
  void /*[VT_VOID:0]*/ __fastcall set_Explosion(long Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_HasDataLabel();
  void /*[VT_VOID:0]*/ __fastcall set_HasDataLabel(TOLEBOOL Param1/*[in]*/);
  Graph_2k::InteriorPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Interior();
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_InvertIfNegative();
  void /*[VT_VOID:0]*/ __fastcall set_InvertIfNegative(TOLEBOOL Param1/*[in]*/);
  long /*[VT_I4:0]*/ __fastcall get_MarkerBackgroundColor();
  void /*[VT_VOID:0]*/ __fastcall set_MarkerBackgroundColor(long Param1/*[in]*/);
  Graph_2k::XlColorIndex /*[VT_USERDEFINED:0]*/ __fastcall get_MarkerBackgroundColorIndex();
  void /*[VT_VOID:0]*/ __fastcall set_MarkerBackgroundColorIndex(Graph_2k::XlColorIndex Param1/*[in]*/);
  long /*[VT_I4:0]*/ __fastcall get_MarkerForegroundColor();
  void /*[VT_VOID:0]*/ __fastcall set_MarkerForegroundColor(long Param1/*[in]*/);
  Graph_2k::XlColorIndex /*[VT_USERDEFINED:0]*/ __fastcall get_MarkerForegroundColorIndex();
  void /*[VT_VOID:0]*/ __fastcall set_MarkerForegroundColorIndex(Graph_2k::XlColorIndex Param1/*[in]*/);
  long /*[VT_I4:0]*/ __fastcall get_MarkerSize();
  void /*[VT_VOID:0]*/ __fastcall set_MarkerSize(long Param1/*[in]*/);
  Graph_2k::XlMarkerStyle /*[VT_USERDEFINED:0]*/ __fastcall get_MarkerStyle();
  void /*[VT_VOID:0]*/ __fastcall set_MarkerStyle(Graph_2k::XlMarkerStyle Param1/*[in]*/);
  Graph_2k::XlChartPictureType /*[VT_USERDEFINED:0]*/ __fastcall get_PictureType();
  void /*[VT_VOID:0]*/ __fastcall set_PictureType(Graph_2k::XlChartPictureType Param1/*[in]*/);
  long /*[VT_I4:0]*/ __fastcall get_PictureUnit();
  void /*[VT_VOID:0]*/ __fastcall set_PictureUnit(long Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_ApplyPictToSides();
  void /*[VT_VOID:0]*/ __fastcall set_ApplyPictToSides(TOLEBOOL Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_ApplyPictToFront();
  void /*[VT_VOID:0]*/ __fastcall set_ApplyPictToFront(TOLEBOOL Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_ApplyPictToEnd();
  void /*[VT_VOID:0]*/ __fastcall set_ApplyPictToEnd(TOLEBOOL Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_Shadow();
  void /*[VT_VOID:0]*/ __fastcall set_Shadow(TOLEBOOL Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_SecondaryPlot();
  void /*[VT_VOID:0]*/ __fastcall set_SecondaryPlot(TOLEBOOL Param1/*[in]*/);
  Graph_2k::ChartFillFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Fill();

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::DataLabelPtr DataLabel = {read = get_DataLabel};
  __property   long            Explosion = {read = get_Explosion, write = set_Explosion};
  __property   TOLEBOOL        HasDataLabel = {read = get_HasDataLabel, write = set_HasDataLabel};
  __property   Graph_2k::InteriorPtr Interior = {read = get_Interior};
  __property   TOLEBOOL        InvertIfNegative = {read = get_InvertIfNegative, write = set_InvertIfNegative};
  __property   long            MarkerBackgroundColor = {read = get_MarkerBackgroundColor, write = set_MarkerBackgroundColor};
  __property   Graph_2k::XlColorIndex MarkerBackgroundColorIndex = {read = get_MarkerBackgroundColorIndex, write = set_MarkerBackgroundColorIndex};
  __property   long            MarkerForegroundColor = {read = get_MarkerForegroundColor, write = set_MarkerForegroundColor};
  __property   Graph_2k::XlColorIndex MarkerForegroundColorIndex = {read = get_MarkerForegroundColorIndex, write = set_MarkerForegroundColorIndex};
  __property   long            MarkerSize = {read = get_MarkerSize, write = set_MarkerSize};
  __property   Graph_2k::XlMarkerStyle MarkerStyle = {read = get_MarkerStyle, write = set_MarkerStyle};
  __property   Graph_2k::XlChartPictureType PictureType = {read = get_PictureType, write = set_PictureType};
  __property   long            PictureUnit = {read = get_PictureUnit, write = set_PictureUnit};
  __property   TOLEBOOL        ApplyPictToSides = {read = get_ApplyPictToSides, write = set_ApplyPictToSides};
  __property   TOLEBOOL        ApplyPictToFront = {read = get_ApplyPictToFront, write = set_ApplyPictToFront};
  __property   TOLEBOOL        ApplyPictToEnd = {read = get_ApplyPictToEnd, write = set_ApplyPictToEnd};
  __property   TOLEBOOL        Shadow = {read = get_Shadow, write = set_Shadow};
  __property   TOLEBOOL        SecondaryPlot = {read = get_SecondaryPlot, write = set_SecondaryPlot};
  __property   Graph_2k::ChartFillFormatPtr Fill = {read = get_Fill};
};
typedef PointDispT<Point> PointDisp;

// *********************************************************************//
// DispIntf:  Series
// Flags:     (4096) Dispatchable
// GUID:      {000208F0-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class SeriesDispT : public TAutoDriver<Series>
{
public:
  SeriesDispT(){}

  SeriesDispT(Series *pintf)
  {
    TAutoDriver<Series>::Bind(pintf, false);
  }

  SeriesDispT(SeriesPtr pintf)
  {
    TAutoDriver<Series>::Bind(pintf, true);
  }

  SeriesDispT& operator=(Series *pintf)
  {
    TAutoDriver<Series>::Bind(pintf, false);
    return *this;
  }

  SeriesDispT& operator=(SeriesPtr pintf)
  {
    TAutoDriver<Series>::Bind(pintf, true);
    return *this;
  }

  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application();
  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent();
  TVariant /*[VT_VARIANT:0]*/ __fastcall ApplyDataLabels(Graph_2k::XlDataLabelsType Type/*[in,def,opt]*/
                                                         , 
                                                         TVariantInParam LegendKey/*[in,opt]*/= TNoParam()
                                                         , 
                                                         TVariantInParam AutoText/*[in,opt]*/= TNoParam()
                                                         , 
                                                         TVariantInParam HasLeaderLines/*[in,opt]*/= TNoParam());
  Graph_2k::XlAxisGroup /*[VT_USERDEFINED:0]*/ __fastcall get_AxisGroup();
  void /*[VT_VOID:0]*/ __fastcall set_AxisGroup(Graph_2k::XlAxisGroup Param1/*[in]*/);
  Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Border();
  TVariant /*[VT_VARIANT:0]*/ __fastcall ClearFormats();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall DataLabels(TVariantInParam Index/*[in,opt]*/= TNoParam());
  TVariant /*[VT_VARIANT:0]*/ __fastcall Delete();
  TVariant /*[VT_VARIANT:0]*/ __fastcall ErrorBar(Graph_2k::XlErrorBarDirection Direction/*[in]*/, 
                                                  Graph_2k::XlErrorBarInclude Include/*[in]*/, 
                                                  Graph_2k::XlErrorBarType Type/*[in]*/, 
                                                  TVariantInParam Amount/*[in,opt]*/= TNoParam(), 
                                                  TVariantInParam MinusValues/*[in,opt]*/= TNoParam());
  Graph_2k::ErrorBarsPtr /*[VT_USERDEFINED:1]*/ __fastcall get_ErrorBars();
  long /*[VT_I4:0]*/ __fastcall get_Explosion();
  void /*[VT_VOID:0]*/ __fastcall set_Explosion(long Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_HasDataLabels();
  void /*[VT_VOID:0]*/ __fastcall set_HasDataLabels(TOLEBOOL Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_HasErrorBars();
  void /*[VT_VOID:0]*/ __fastcall set_HasErrorBars(TOLEBOOL Param1/*[in]*/);
  Graph_2k::InteriorPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Interior();
  Graph_2k::ChartFillFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Fill();
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_InvertIfNegative();
  void /*[VT_VOID:0]*/ __fastcall set_InvertIfNegative(TOLEBOOL Param1/*[in]*/);
  long /*[VT_I4:0]*/ __fastcall get_MarkerBackgroundColor();
  void /*[VT_VOID:0]*/ __fastcall set_MarkerBackgroundColor(long Param1/*[in]*/);
  Graph_2k::XlColorIndex /*[VT_USERDEFINED:0]*/ __fastcall get_MarkerBackgroundColorIndex();
  void /*[VT_VOID:0]*/ __fastcall set_MarkerBackgroundColorIndex(Graph_2k::XlColorIndex Param1/*[in]*/);
  long /*[VT_I4:0]*/ __fastcall get_MarkerForegroundColor();
  void /*[VT_VOID:0]*/ __fastcall set_MarkerForegroundColor(long Param1/*[in]*/);
  Graph_2k::XlColorIndex /*[VT_USERDEFINED:0]*/ __fastcall get_MarkerForegroundColorIndex();
  void /*[VT_VOID:0]*/ __fastcall set_MarkerForegroundColorIndex(Graph_2k::XlColorIndex Param1/*[in]*/);
  long /*[VT_I4:0]*/ __fastcall get_MarkerSize();
  void /*[VT_VOID:0]*/ __fastcall set_MarkerSize(long Param1/*[in]*/);
  Graph_2k::XlMarkerStyle /*[VT_USERDEFINED:0]*/ __fastcall get_MarkerStyle();
  void /*[VT_VOID:0]*/ __fastcall set_MarkerStyle(Graph_2k::XlMarkerStyle Param1/*[in]*/);
  Graph_2k::XlChartPictureType /*[VT_USERDEFINED:0]*/ __fastcall get_PictureType();
  void /*[VT_VOID:0]*/ __fastcall set_PictureType(Graph_2k::XlChartPictureType Param1/*[in]*/);
  long /*[VT_I4:0]*/ __fastcall get_PictureUnit();
  void /*[VT_VOID:0]*/ __fastcall set_PictureUnit(long Param1/*[in]*/);
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall Points(TVariantInParam Index/*[in,opt]*/= TNoParam());
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_Smooth();
  void /*[VT_VOID:0]*/ __fastcall set_Smooth(TOLEBOOL Param1/*[in]*/);
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall Trendlines(TVariantInParam Index/*[in,opt]*/= TNoParam());
  long /*[VT_I4:0]*/ __fastcall get_Type();
  void /*[VT_VOID:0]*/ __fastcall set_Type(long Param1/*[in]*/);
  Graph_2k::XlChartType /*[VT_USERDEFINED:0]*/ __fastcall get_ChartType();
  void /*[VT_VOID:0]*/ __fastcall set_ChartType(Graph_2k::XlChartType Param1/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall ApplyCustomType(Graph_2k::XlChartType ChartType/*[in]*/);
  Graph_2k::XlBarShape /*[VT_USERDEFINED:0]*/ __fastcall get_BarShape();
  void /*[VT_VOID:0]*/ __fastcall set_BarShape(Graph_2k::XlBarShape Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_ApplyPictToSides();
  void /*[VT_VOID:0]*/ __fastcall set_ApplyPictToSides(TOLEBOOL Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_ApplyPictToFront();
  void /*[VT_VOID:0]*/ __fastcall set_ApplyPictToFront(TOLEBOOL Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_ApplyPictToEnd();
  void /*[VT_VOID:0]*/ __fastcall set_ApplyPictToEnd(TOLEBOOL Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_Has3DEffect();
  void /*[VT_VOID:0]*/ __fastcall set_Has3DEffect(TOLEBOOL Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_Shadow();
  void /*[VT_VOID:0]*/ __fastcall set_Shadow(TOLEBOOL Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_HasLeaderLines();
  void /*[VT_VOID:0]*/ __fastcall set_HasLeaderLines(TOLEBOOL Param1/*[in]*/);
  Graph_2k::LeaderLinesPtr /*[VT_USERDEFINED:1]*/ __fastcall get_LeaderLines();

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Graph_2k::XlAxisGroup AxisGroup = {read = get_AxisGroup, write = set_AxisGroup};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::ErrorBarsPtr ErrorBars = {read = get_ErrorBars};
  __property   long            Explosion = {read = get_Explosion, write = set_Explosion};
  __property   TOLEBOOL        HasDataLabels = {read = get_HasDataLabels, write = set_HasDataLabels};
  __property   TOLEBOOL        HasErrorBars = {read = get_HasErrorBars, write = set_HasErrorBars};
  __property   Graph_2k::InteriorPtr Interior = {read = get_Interior};
  __property   Graph_2k::ChartFillFormatPtr Fill = {read = get_Fill};
  __property   TOLEBOOL        InvertIfNegative = {read = get_InvertIfNegative, write = set_InvertIfNegative};
  __property   long            MarkerBackgroundColor = {read = get_MarkerBackgroundColor, write = set_MarkerBackgroundColor};
  __property   Graph_2k::XlColorIndex MarkerBackgroundColorIndex = {read = get_MarkerBackgroundColorIndex, write = set_MarkerBackgroundColorIndex};
  __property   long            MarkerForegroundColor = {read = get_MarkerForegroundColor, write = set_MarkerForegroundColor};
  __property   Graph_2k::XlColorIndex MarkerForegroundColorIndex = {read = get_MarkerForegroundColorIndex, write = set_MarkerForegroundColorIndex};
  __property   long            MarkerSize = {read = get_MarkerSize, write = set_MarkerSize};
  __property   Graph_2k::XlMarkerStyle MarkerStyle = {read = get_MarkerStyle, write = set_MarkerStyle};
  __property   Graph_2k::XlChartPictureType PictureType = {read = get_PictureType, write = set_PictureType};
  __property   long            PictureUnit = {read = get_PictureUnit, write = set_PictureUnit};
  __property   TOLEBOOL        Smooth = {read = get_Smooth, write = set_Smooth};
  __property   long            Type = {read = get_Type, write = set_Type};
  __property   Graph_2k::XlChartType ChartType = {read = get_ChartType, write = set_ChartType};
  __property   Graph_2k::XlBarShape BarShape = {read = get_BarShape, write = set_BarShape};
  __property   TOLEBOOL        ApplyPictToSides = {read = get_ApplyPictToSides, write = set_ApplyPictToSides};
  __property   TOLEBOOL        ApplyPictToFront = {read = get_ApplyPictToFront, write = set_ApplyPictToFront};
  __property   TOLEBOOL        ApplyPictToEnd = {read = get_ApplyPictToEnd, write = set_ApplyPictToEnd};
  __property   TOLEBOOL        Has3DEffect = {read = get_Has3DEffect, write = set_Has3DEffect};
  __property   TOLEBOOL        Shadow = {read = get_Shadow, write = set_Shadow};
  __property   TOLEBOOL        HasLeaderLines = {read = get_HasLeaderLines, write = set_HasLeaderLines};
  __property   Graph_2k::LeaderLinesPtr LeaderLines = {read = get_LeaderLines};
};
typedef SeriesDispT<Series> SeriesDisp;

// *********************************************************************//
// DispIntf:  SeriesCollection
// Flags:     (4096) Dispatchable
// GUID:      {000208EF-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class SeriesCollectionDispT : public TAutoDriver<SeriesCollection>
{
public:
  SeriesCollectionDispT(){}

  SeriesCollectionDispT(SeriesCollection *pintf)
  {
    TAutoDriver<SeriesCollection>::Bind(pintf, false);
  }

  SeriesCollectionDispT(SeriesCollectionPtr pintf)
  {
    TAutoDriver<SeriesCollection>::Bind(pintf, true);
  }

  SeriesCollectionDispT& operator=(SeriesCollection *pintf)
  {
    TAutoDriver<SeriesCollection>::Bind(pintf, false);
    return *this;
  }

  SeriesCollectionDispT& operator=(SeriesCollectionPtr pintf)
  {
    TAutoDriver<SeriesCollection>::Bind(pintf, true);
    return *this;
  }

  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application();
  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent();
  long /*[VT_I4:0]*/ __fastcall get_Count();
  Graph_2k::SeriesPtr /*[VT_USERDEFINED:1]*/ __fastcall Item(TVariantInParam Index/*[in]*/);
  LPUNKNOWN /*[VT_UNKNOWN:0]*/ __fastcall _NewEnum();

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};
};
typedef SeriesCollectionDispT<SeriesCollection> SeriesCollectionDisp;

// *********************************************************************//
// DispIntf:  DataLabel
// Flags:     (4096) Dispatchable
// GUID:      {000208E9-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class DataLabelDispT : public TAutoDriver<DataLabel>
{
public:
  DataLabelDispT(){}

  DataLabelDispT(DataLabel *pintf)
  {
    TAutoDriver<DataLabel>::Bind(pintf, false);
  }

  DataLabelDispT(DataLabelPtr pintf)
  {
    TAutoDriver<DataLabel>::Bind(pintf, true);
  }

  DataLabelDispT& operator=(DataLabel *pintf)
  {
    TAutoDriver<DataLabel>::Bind(pintf, false);
    return *this;
  }

  DataLabelDispT& operator=(DataLabelPtr pintf)
  {
    TAutoDriver<DataLabel>::Bind(pintf, true);
    return *this;
  }

  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application();
  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent();
  BSTR /*[VT_BSTR:0]*/ __fastcall get_Name();
  Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Border();
  TVariant /*[VT_VARIANT:0]*/ __fastcall Delete();
  Graph_2k::InteriorPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Interior();
  Graph_2k::ChartFillFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Fill();
  BSTR /*[VT_BSTR:0]*/ __fastcall get_Caption();
  void /*[VT_VOID:0]*/ __fastcall set_Caption(BSTR Param1/*[in]*/);
  Graph_2k::FontPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Font();
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_HorizontalAlignment();
  void /*[VT_VOID:0]*/ __fastcall set_HorizontalAlignment(TVariantInParam Param1/*[in]*/);
  double /*[VT_R8:0]*/ __fastcall get_Left();
  void /*[VT_VOID:0]*/ __fastcall set_Left(double Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Orientation();
  void /*[VT_VOID:0]*/ __fastcall set_Orientation(TVariantInParam Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_Shadow();
  void /*[VT_VOID:0]*/ __fastcall set_Shadow(TOLEBOOL Param1/*[in]*/);
  BSTR /*[VT_BSTR:0]*/ __fastcall get_Text();
  void /*[VT_VOID:0]*/ __fastcall set_Text(BSTR Param1/*[in]*/);
  double /*[VT_R8:0]*/ __fastcall get_Top();
  void /*[VT_VOID:0]*/ __fastcall set_Top(double Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_VerticalAlignment();
  void /*[VT_VOID:0]*/ __fastcall set_VerticalAlignment(TVariantInParam Param1/*[in]*/);
  long /*[VT_I4:0]*/ __fastcall get_ReadingOrder();
  void /*[VT_VOID:0]*/ __fastcall set_ReadingOrder(long Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_AutoScaleFont();
  void /*[VT_VOID:0]*/ __fastcall set_AutoScaleFont(TVariantInParam Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_AutoText();
  void /*[VT_VOID:0]*/ __fastcall set_AutoText(TOLEBOOL Param1/*[in]*/);
  BSTR /*[VT_BSTR:0]*/ __fastcall get_NumberFormat();
  void /*[VT_VOID:0]*/ __fastcall set_NumberFormat(BSTR Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_NumberFormatLocal();
  void /*[VT_VOID:0]*/ __fastcall set_NumberFormatLocal(TVariantInParam Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_ShowLegendKey();
  void /*[VT_VOID:0]*/ __fastcall set_ShowLegendKey(TOLEBOOL Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Type();
  void /*[VT_VOID:0]*/ __fastcall set_Type(TVariantInParam Param1/*[in]*/);
  Graph_2k::XlDataLabelPosition /*[VT_USERDEFINED:0]*/ __fastcall get_Position();
  void /*[VT_VOID:0]*/ __fastcall set_Position(Graph_2k::XlDataLabelPosition Param1/*[in]*/);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::InteriorPtr Interior = {read = get_Interior};
  __property   Graph_2k::ChartFillFormatPtr Fill = {read = get_Fill};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   Graph_2k::FontPtr Font = {read = get_Font};
  __property   double          Left = {read = get_Left, write = set_Left};
  __property   TOLEBOOL        Shadow = {read = get_Shadow, write = set_Shadow};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   double          Top = {read = get_Top, write = set_Top};
  __property   long            ReadingOrder = {read = get_ReadingOrder, write = set_ReadingOrder};
  __property   TOLEBOOL        AutoText = {read = get_AutoText, write = set_AutoText};
  __property   BSTR            NumberFormat = {read = get_NumberFormat, write = set_NumberFormat};
  __property   TOLEBOOL        ShowLegendKey = {read = get_ShowLegendKey, write = set_ShowLegendKey};
  __property   Graph_2k::XlDataLabelPosition Position = {read = get_Position, write = set_Position};
};
typedef DataLabelDispT<DataLabel> DataLabelDisp;

// *********************************************************************//
// DispIntf:  DataLabels
// Flags:     (4096) Dispatchable
// GUID:      {000208E8-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class DataLabelsDispT : public TAutoDriver<DataLabels>
{
public:
  DataLabelsDispT(){}

  DataLabelsDispT(DataLabels *pintf)
  {
    TAutoDriver<DataLabels>::Bind(pintf, false);
  }

  DataLabelsDispT(DataLabelsPtr pintf)
  {
    TAutoDriver<DataLabels>::Bind(pintf, true);
  }

  DataLabelsDispT& operator=(DataLabels *pintf)
  {
    TAutoDriver<DataLabels>::Bind(pintf, false);
    return *this;
  }

  DataLabelsDispT& operator=(DataLabelsPtr pintf)
  {
    TAutoDriver<DataLabels>::Bind(pintf, true);
    return *this;
  }

  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application();
  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent();
  BSTR /*[VT_BSTR:0]*/ __fastcall get_Name();
  Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Border();
  TVariant /*[VT_VARIANT:0]*/ __fastcall Delete();
  Graph_2k::InteriorPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Interior();
  Graph_2k::ChartFillFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Fill();
  void /*[VT_VOID:0]*/ __fastcall _Dummy8();
  Graph_2k::FontPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Font();
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_HorizontalAlignment();
  void /*[VT_VOID:0]*/ __fastcall set_HorizontalAlignment(TVariantInParam Param1/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall _Dummy11();
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Orientation();
  void /*[VT_VOID:0]*/ __fastcall set_Orientation(TVariantInParam Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_Shadow();
  void /*[VT_VOID:0]*/ __fastcall set_Shadow(TOLEBOOL Param1/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall _Dummy14();
  void /*[VT_VOID:0]*/ __fastcall _Dummy15();
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_VerticalAlignment();
  void /*[VT_VOID:0]*/ __fastcall set_VerticalAlignment(TVariantInParam Param1/*[in]*/);
  long /*[VT_I4:0]*/ __fastcall get_ReadingOrder();
  void /*[VT_VOID:0]*/ __fastcall set_ReadingOrder(long Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_AutoScaleFont();
  void /*[VT_VOID:0]*/ __fastcall set_AutoScaleFont(TVariantInParam Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_AutoText();
  void /*[VT_VOID:0]*/ __fastcall set_AutoText(TOLEBOOL Param1/*[in]*/);
  BSTR /*[VT_BSTR:0]*/ __fastcall get_NumberFormat();
  void /*[VT_VOID:0]*/ __fastcall set_NumberFormat(BSTR Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_NumberFormatLocal();
  void /*[VT_VOID:0]*/ __fastcall set_NumberFormatLocal(TVariantInParam Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_ShowLegendKey();
  void /*[VT_VOID:0]*/ __fastcall set_ShowLegendKey(TOLEBOOL Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Type();
  void /*[VT_VOID:0]*/ __fastcall set_Type(TVariantInParam Param1/*[in]*/);
  Graph_2k::XlDataLabelPosition /*[VT_USERDEFINED:0]*/ __fastcall get_Position();
  void /*[VT_VOID:0]*/ __fastcall set_Position(Graph_2k::XlDataLabelPosition Param1/*[in]*/);
  long /*[VT_I4:0]*/ __fastcall get_Count();
  Graph_2k::DataLabelPtr /*[VT_USERDEFINED:1]*/ __fastcall Item(TVariantInParam Index/*[in]*/);
  LPUNKNOWN /*[VT_UNKNOWN:0]*/ __fastcall _NewEnum();
  void /*[VT_VOID:0]*/ __fastcall _Dummy28();

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::InteriorPtr Interior = {read = get_Interior};
  __property   Graph_2k::ChartFillFormatPtr Fill = {read = get_Fill};
  __property   Graph_2k::FontPtr Font = {read = get_Font};
  __property   TOLEBOOL        Shadow = {read = get_Shadow, write = set_Shadow};
  __property   long            ReadingOrder = {read = get_ReadingOrder, write = set_ReadingOrder};
  __property   TOLEBOOL        AutoText = {read = get_AutoText, write = set_AutoText};
  __property   BSTR            NumberFormat = {read = get_NumberFormat, write = set_NumberFormat};
  __property   TOLEBOOL        ShowLegendKey = {read = get_ShowLegendKey, write = set_ShowLegendKey};
  __property   Graph_2k::XlDataLabelPosition Position = {read = get_Position, write = set_Position};
  __property   long            Count = {read = get_Count};
};
typedef DataLabelsDispT<DataLabels> DataLabelsDisp;

// *********************************************************************//
// DispIntf:  LegendEntry
// Flags:     (4096) Dispatchable
// GUID:      {000208E7-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class LegendEntryDispT : public TAutoDriver<LegendEntry>
{
public:
  LegendEntryDispT(){}

  LegendEntryDispT(LegendEntry *pintf)
  {
    TAutoDriver<LegendEntry>::Bind(pintf, false);
  }

  LegendEntryDispT(LegendEntryPtr pintf)
  {
    TAutoDriver<LegendEntry>::Bind(pintf, true);
  }

  LegendEntryDispT& operator=(LegendEntry *pintf)
  {
    TAutoDriver<LegendEntry>::Bind(pintf, false);
    return *this;
  }

  LegendEntryDispT& operator=(LegendEntryPtr pintf)
  {
    TAutoDriver<LegendEntry>::Bind(pintf, true);
    return *this;
  }

  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application();
  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent();
  TVariant /*[VT_VARIANT:0]*/ __fastcall Delete();
  Graph_2k::FontPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Font();
  long /*[VT_I4:0]*/ __fastcall get_Index();
  Graph_2k::LegendKeyPtr /*[VT_USERDEFINED:1]*/ __fastcall get_LegendKey();
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_AutoScaleFont();
  void /*[VT_VOID:0]*/ __fastcall set_AutoScaleFont(TVariantInParam Param1/*[in]*/);
  double /*[VT_R8:0]*/ __fastcall get_Left();
  double /*[VT_R8:0]*/ __fastcall get_Top();
  double /*[VT_R8:0]*/ __fastcall get_Width();
  double /*[VT_R8:0]*/ __fastcall get_Height();

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Graph_2k::FontPtr Font = {read = get_Font};
  __property   long            Index = {read = get_Index};
  __property   Graph_2k::LegendKeyPtr LegendKey = {read = get_LegendKey};
  __property   double          Left = {read = get_Left};
  __property   double          Top = {read = get_Top};
  __property   double          Width = {read = get_Width};
  __property   double          Height = {read = get_Height};
};
typedef LegendEntryDispT<LegendEntry> LegendEntryDisp;

// *********************************************************************//
// DispIntf:  LegendEntries
// Flags:     (4096) Dispatchable
// GUID:      {000208E6-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class LegendEntriesDispT : public TAutoDriver<LegendEntries>
{
public:
  LegendEntriesDispT(){}

  LegendEntriesDispT(LegendEntries *pintf)
  {
    TAutoDriver<LegendEntries>::Bind(pintf, false);
  }

  LegendEntriesDispT(LegendEntriesPtr pintf)
  {
    TAutoDriver<LegendEntries>::Bind(pintf, true);
  }

  LegendEntriesDispT& operator=(LegendEntries *pintf)
  {
    TAutoDriver<LegendEntries>::Bind(pintf, false);
    return *this;
  }

  LegendEntriesDispT& operator=(LegendEntriesPtr pintf)
  {
    TAutoDriver<LegendEntries>::Bind(pintf, true);
    return *this;
  }

  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application();
  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent();
  long /*[VT_I4:0]*/ __fastcall get_Count();
  Graph_2k::LegendEntryPtr /*[VT_USERDEFINED:1]*/ __fastcall Item(TVariantInParam Index/*[in]*/);
  LPUNKNOWN /*[VT_UNKNOWN:0]*/ __fastcall _NewEnum();

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};
};
typedef LegendEntriesDispT<LegendEntries> LegendEntriesDisp;

// *********************************************************************//
// DispIntf:  LegendKey
// Flags:     (4096) Dispatchable
// GUID:      {000208E5-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class LegendKeyDispT : public TAutoDriver<LegendKey>
{
public:
  LegendKeyDispT(){}

  LegendKeyDispT(LegendKey *pintf)
  {
    TAutoDriver<LegendKey>::Bind(pintf, false);
  }

  LegendKeyDispT(LegendKeyPtr pintf)
  {
    TAutoDriver<LegendKey>::Bind(pintf, true);
  }

  LegendKeyDispT& operator=(LegendKey *pintf)
  {
    TAutoDriver<LegendKey>::Bind(pintf, false);
    return *this;
  }

  LegendKeyDispT& operator=(LegendKeyPtr pintf)
  {
    TAutoDriver<LegendKey>::Bind(pintf, true);
    return *this;
  }

  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application();
  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent();
  Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Border();
  TVariant /*[VT_VARIANT:0]*/ __fastcall ClearFormats();
  TVariant /*[VT_VARIANT:0]*/ __fastcall Delete();
  Graph_2k::InteriorPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Interior();
  Graph_2k::ChartFillFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Fill();
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_InvertIfNegative();
  void /*[VT_VOID:0]*/ __fastcall set_InvertIfNegative(TOLEBOOL Param1/*[in]*/);
  long /*[VT_I4:0]*/ __fastcall get_MarkerBackgroundColor();
  void /*[VT_VOID:0]*/ __fastcall set_MarkerBackgroundColor(long Param1/*[in]*/);
  Graph_2k::XlColorIndex /*[VT_USERDEFINED:0]*/ __fastcall get_MarkerBackgroundColorIndex();
  void /*[VT_VOID:0]*/ __fastcall set_MarkerBackgroundColorIndex(Graph_2k::XlColorIndex Param1/*[in]*/);
  long /*[VT_I4:0]*/ __fastcall get_MarkerForegroundColor();
  void /*[VT_VOID:0]*/ __fastcall set_MarkerForegroundColor(long Param1/*[in]*/);
  Graph_2k::XlColorIndex /*[VT_USERDEFINED:0]*/ __fastcall get_MarkerForegroundColorIndex();
  void /*[VT_VOID:0]*/ __fastcall set_MarkerForegroundColorIndex(Graph_2k::XlColorIndex Param1/*[in]*/);
  long /*[VT_I4:0]*/ __fastcall get_MarkerSize();
  void /*[VT_VOID:0]*/ __fastcall set_MarkerSize(long Param1/*[in]*/);
  Graph_2k::XlMarkerStyle /*[VT_USERDEFINED:0]*/ __fastcall get_MarkerStyle();
  void /*[VT_VOID:0]*/ __fastcall set_MarkerStyle(Graph_2k::XlMarkerStyle Param1/*[in]*/);
  long /*[VT_I4:0]*/ __fastcall get_PictureType();
  void /*[VT_VOID:0]*/ __fastcall set_PictureType(long Param1/*[in]*/);
  long /*[VT_I4:0]*/ __fastcall get_PictureUnit();
  void /*[VT_VOID:0]*/ __fastcall set_PictureUnit(long Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_Smooth();
  void /*[VT_VOID:0]*/ __fastcall set_Smooth(TOLEBOOL Param1/*[in]*/);
  double /*[VT_R8:0]*/ __fastcall get_Left();
  double /*[VT_R8:0]*/ __fastcall get_Top();
  double /*[VT_R8:0]*/ __fastcall get_Width();
  double /*[VT_R8:0]*/ __fastcall get_Height();
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_Shadow();
  void /*[VT_VOID:0]*/ __fastcall set_Shadow(TOLEBOOL Param1/*[in]*/);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::InteriorPtr Interior = {read = get_Interior};
  __property   Graph_2k::ChartFillFormatPtr Fill = {read = get_Fill};
  __property   TOLEBOOL        InvertIfNegative = {read = get_InvertIfNegative, write = set_InvertIfNegative};
  __property   long            MarkerBackgroundColor = {read = get_MarkerBackgroundColor, write = set_MarkerBackgroundColor};
  __property   Graph_2k::XlColorIndex MarkerBackgroundColorIndex = {read = get_MarkerBackgroundColorIndex, write = set_MarkerBackgroundColorIndex};
  __property   long            MarkerForegroundColor = {read = get_MarkerForegroundColor, write = set_MarkerForegroundColor};
  __property   Graph_2k::XlColorIndex MarkerForegroundColorIndex = {read = get_MarkerForegroundColorIndex, write = set_MarkerForegroundColorIndex};
  __property   long            MarkerSize = {read = get_MarkerSize, write = set_MarkerSize};
  __property   Graph_2k::XlMarkerStyle MarkerStyle = {read = get_MarkerStyle, write = set_MarkerStyle};
  __property   long            PictureType = {read = get_PictureType, write = set_PictureType};
  __property   long            PictureUnit = {read = get_PictureUnit, write = set_PictureUnit};
  __property   TOLEBOOL        Smooth = {read = get_Smooth, write = set_Smooth};
  __property   double          Left = {read = get_Left};
  __property   double          Top = {read = get_Top};
  __property   double          Width = {read = get_Width};
  __property   double          Height = {read = get_Height};
  __property   TOLEBOOL        Shadow = {read = get_Shadow, write = set_Shadow};
};
typedef LegendKeyDispT<LegendKey> LegendKeyDisp;

// *********************************************************************//
// DispIntf:  Trendlines
// Flags:     (4096) Dispatchable
// GUID:      {000208E4-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class TrendlinesDispT : public TAutoDriver<Trendlines>
{
public:
  TrendlinesDispT(){}

  TrendlinesDispT(Trendlines *pintf)
  {
    TAutoDriver<Trendlines>::Bind(pintf, false);
  }

  TrendlinesDispT(TrendlinesPtr pintf)
  {
    TAutoDriver<Trendlines>::Bind(pintf, true);
  }

  TrendlinesDispT& operator=(Trendlines *pintf)
  {
    TAutoDriver<Trendlines>::Bind(pintf, false);
    return *this;
  }

  TrendlinesDispT& operator=(TrendlinesPtr pintf)
  {
    TAutoDriver<Trendlines>::Bind(pintf, true);
    return *this;
  }

  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application();
  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent();
  Graph_2k::TrendlinePtr /*[VT_USERDEFINED:1]*/ __fastcall Add(Graph_2k::XlTrendlineType Type/*[in,def,opt]*/
                                                               , 
                                                               TVariantInParam Order/*[in,opt]*/= TNoParam()
                                                               , 
                                                               TVariantInParam Period/*[in,opt]*/= TNoParam()
                                                               , 
                                                               TVariantInParam Forward/*[in,opt]*/= TNoParam()
                                                               , 
                                                               TVariantInParam Backward/*[in,opt]*/= TNoParam()
                                                               , 
                                                               TVariantInParam Intercept/*[in,opt]*/= TNoParam()
                                                               , 
                                                               TVariantInParam DisplayEquation/*[in,opt]*/= TNoParam()
                                                               , 
                                                               TVariantInParam DisplayRSquared/*[in,opt]*/= TNoParam()
                                                               , 
                                                               TVariantInParam Name/*[in,opt]*/= TNoParam());
  long /*[VT_I4:0]*/ __fastcall get_Count();
  Graph_2k::TrendlinePtr /*[VT_USERDEFINED:1]*/ __fastcall Item(TVariantInParam Index/*[in,opt]*/= TNoParam());
  LPUNKNOWN /*[VT_UNKNOWN:0]*/ __fastcall _NewEnum();

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};
};
typedef TrendlinesDispT<Trendlines> TrendlinesDisp;

// *********************************************************************//
// DispIntf:  Trendline
// Flags:     (4096) Dispatchable
// GUID:      {000208E3-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class TrendlineDispT : public TAutoDriver<Trendline>
{
public:
  TrendlineDispT(){}

  TrendlineDispT(Trendline *pintf)
  {
    TAutoDriver<Trendline>::Bind(pintf, false);
  }

  TrendlineDispT(TrendlinePtr pintf)
  {
    TAutoDriver<Trendline>::Bind(pintf, true);
  }

  TrendlineDispT& operator=(Trendline *pintf)
  {
    TAutoDriver<Trendline>::Bind(pintf, false);
    return *this;
  }

  TrendlineDispT& operator=(TrendlinePtr pintf)
  {
    TAutoDriver<Trendline>::Bind(pintf, true);
    return *this;
  }

  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application();
  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent();
  long /*[VT_I4:0]*/ __fastcall get_Backward();
  void /*[VT_VOID:0]*/ __fastcall set_Backward(long Param1/*[in]*/);
  Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Border();
  TVariant /*[VT_VARIANT:0]*/ __fastcall ClearFormats();
  Graph_2k::DataLabelPtr /*[VT_USERDEFINED:1]*/ __fastcall get_DataLabel();
  TVariant /*[VT_VARIANT:0]*/ __fastcall Delete();
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_DisplayEquation();
  void /*[VT_VOID:0]*/ __fastcall set_DisplayEquation(TOLEBOOL Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_DisplayRSquared();
  void /*[VT_VOID:0]*/ __fastcall set_DisplayRSquared(TOLEBOOL Param1/*[in]*/);
  long /*[VT_I4:0]*/ __fastcall get_Forward();
  void /*[VT_VOID:0]*/ __fastcall set_Forward(long Param1/*[in]*/);
  long /*[VT_I4:0]*/ __fastcall get_Index();
  double /*[VT_R8:0]*/ __fastcall get_Intercept();
  void /*[VT_VOID:0]*/ __fastcall set_Intercept(double Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_InterceptIsAuto();
  void /*[VT_VOID:0]*/ __fastcall set_InterceptIsAuto(TOLEBOOL Param1/*[in]*/);
  BSTR /*[VT_BSTR:0]*/ __fastcall get_Name();
  void /*[VT_VOID:0]*/ __fastcall set_Name(BSTR Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_NameIsAuto();
  void /*[VT_VOID:0]*/ __fastcall set_NameIsAuto(TOLEBOOL Param1/*[in]*/);
  long /*[VT_I4:0]*/ __fastcall get_Order();
  void /*[VT_VOID:0]*/ __fastcall set_Order(long Param1/*[in]*/);
  long /*[VT_I4:0]*/ __fastcall get_Period();
  void /*[VT_VOID:0]*/ __fastcall set_Period(long Param1/*[in]*/);
  Graph_2k::XlTrendlineType /*[VT_USERDEFINED:0]*/ __fastcall get_Type();
  void /*[VT_VOID:0]*/ __fastcall set_Type(Graph_2k::XlTrendlineType Param1/*[in]*/);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   long            Backward = {read = get_Backward, write = set_Backward};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::DataLabelPtr DataLabel = {read = get_DataLabel};
  __property   TOLEBOOL        DisplayEquation = {read = get_DisplayEquation, write = set_DisplayEquation};
  __property   TOLEBOOL        DisplayRSquared = {read = get_DisplayRSquared, write = set_DisplayRSquared};
  __property   long            Forward = {read = get_Forward, write = set_Forward};
  __property   long            Index = {read = get_Index};
  __property   double          Intercept = {read = get_Intercept, write = set_Intercept};
  __property   TOLEBOOL        InterceptIsAuto = {read = get_InterceptIsAuto, write = set_InterceptIsAuto};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   TOLEBOOL        NameIsAuto = {read = get_NameIsAuto, write = set_NameIsAuto};
  __property   long            Order = {read = get_Order, write = set_Order};
  __property   long            Period = {read = get_Period, write = set_Period};
  __property   Graph_2k::XlTrendlineType Type = {read = get_Type, write = set_Type};
};
typedef TrendlineDispT<Trendline> TrendlineDisp;

// *********************************************************************//
// DispIntf:  Corners
// Flags:     (4096) Dispatchable
// GUID:      {000208E2-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class CornersDispT : public TAutoDriver<Corners>
{
public:
  CornersDispT(){}

  CornersDispT(Corners *pintf)
  {
    TAutoDriver<Corners>::Bind(pintf, false);
  }

  CornersDispT(CornersPtr pintf)
  {
    TAutoDriver<Corners>::Bind(pintf, true);
  }

  CornersDispT& operator=(Corners *pintf)
  {
    TAutoDriver<Corners>::Bind(pintf, false);
    return *this;
  }

  CornersDispT& operator=(CornersPtr pintf)
  {
    TAutoDriver<Corners>::Bind(pintf, true);
    return *this;
  }

  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application();
  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent();
  BSTR /*[VT_BSTR:0]*/ __fastcall get_Name();

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
};
typedef CornersDispT<Corners> CornersDisp;

// *********************************************************************//
// DispIntf:  SeriesLines
// Flags:     (4096) Dispatchable
// GUID:      {000208E1-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class SeriesLinesDispT : public TAutoDriver<SeriesLines>
{
public:
  SeriesLinesDispT(){}

  SeriesLinesDispT(SeriesLines *pintf)
  {
    TAutoDriver<SeriesLines>::Bind(pintf, false);
  }

  SeriesLinesDispT(SeriesLinesPtr pintf)
  {
    TAutoDriver<SeriesLines>::Bind(pintf, true);
  }

  SeriesLinesDispT& operator=(SeriesLines *pintf)
  {
    TAutoDriver<SeriesLines>::Bind(pintf, false);
    return *this;
  }

  SeriesLinesDispT& operator=(SeriesLinesPtr pintf)
  {
    TAutoDriver<SeriesLines>::Bind(pintf, true);
    return *this;
  }

  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application();
  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent();
  BSTR /*[VT_BSTR:0]*/ __fastcall get_Name();
  Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Border();
  TVariant /*[VT_VARIANT:0]*/ __fastcall Delete();

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
};
typedef SeriesLinesDispT<SeriesLines> SeriesLinesDisp;

// *********************************************************************//
// DispIntf:  HiLoLines
// Flags:     (4096) Dispatchable
// GUID:      {000208E0-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class HiLoLinesDispT : public TAutoDriver<HiLoLines>
{
public:
  HiLoLinesDispT(){}

  HiLoLinesDispT(HiLoLines *pintf)
  {
    TAutoDriver<HiLoLines>::Bind(pintf, false);
  }

  HiLoLinesDispT(HiLoLinesPtr pintf)
  {
    TAutoDriver<HiLoLines>::Bind(pintf, true);
  }

  HiLoLinesDispT& operator=(HiLoLines *pintf)
  {
    TAutoDriver<HiLoLines>::Bind(pintf, false);
    return *this;
  }

  HiLoLinesDispT& operator=(HiLoLinesPtr pintf)
  {
    TAutoDriver<HiLoLines>::Bind(pintf, true);
    return *this;
  }

  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application();
  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent();
  BSTR /*[VT_BSTR:0]*/ __fastcall get_Name();
  Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Border();
  TVariant /*[VT_VARIANT:0]*/ __fastcall Delete();

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
};
typedef HiLoLinesDispT<HiLoLines> HiLoLinesDisp;

// *********************************************************************//
// DispIntf:  Gridlines
// Flags:     (4096) Dispatchable
// GUID:      {00024700-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class GridlinesDispT : public TAutoDriver<Gridlines>
{
public:
  GridlinesDispT(){}

  GridlinesDispT(Gridlines *pintf)
  {
    TAutoDriver<Gridlines>::Bind(pintf, false);
  }

  GridlinesDispT(GridlinesPtr pintf)
  {
    TAutoDriver<Gridlines>::Bind(pintf, true);
  }

  GridlinesDispT& operator=(Gridlines *pintf)
  {
    TAutoDriver<Gridlines>::Bind(pintf, false);
    return *this;
  }

  GridlinesDispT& operator=(GridlinesPtr pintf)
  {
    TAutoDriver<Gridlines>::Bind(pintf, true);
    return *this;
  }

  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application();
  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent();
  BSTR /*[VT_BSTR:0]*/ __fastcall get_Name();
  Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Border();
  TVariant /*[VT_VARIANT:0]*/ __fastcall Delete();

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
};
typedef GridlinesDispT<Gridlines> GridlinesDisp;

// *********************************************************************//
// DispIntf:  DropLines
// Flags:     (4096) Dispatchable
// GUID:      {00024701-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class DropLinesDispT : public TAutoDriver<DropLines>
{
public:
  DropLinesDispT(){}

  DropLinesDispT(DropLines *pintf)
  {
    TAutoDriver<DropLines>::Bind(pintf, false);
  }

  DropLinesDispT(DropLinesPtr pintf)
  {
    TAutoDriver<DropLines>::Bind(pintf, true);
  }

  DropLinesDispT& operator=(DropLines *pintf)
  {
    TAutoDriver<DropLines>::Bind(pintf, false);
    return *this;
  }

  DropLinesDispT& operator=(DropLinesPtr pintf)
  {
    TAutoDriver<DropLines>::Bind(pintf, true);
    return *this;
  }

  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application();
  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent();
  BSTR /*[VT_BSTR:0]*/ __fastcall get_Name();
  Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Border();
  TVariant /*[VT_VARIANT:0]*/ __fastcall Delete();

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
};
typedef DropLinesDispT<DropLines> DropLinesDisp;

// *********************************************************************//
// DispIntf:  LeaderLines
// Flags:     (4096) Dispatchable
// GUID:      {0002441E-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class LeaderLinesDispT : public TAutoDriver<LeaderLines>
{
public:
  LeaderLinesDispT(){}

  LeaderLinesDispT(LeaderLines *pintf)
  {
    TAutoDriver<LeaderLines>::Bind(pintf, false);
  }

  LeaderLinesDispT(LeaderLinesPtr pintf)
  {
    TAutoDriver<LeaderLines>::Bind(pintf, true);
  }

  LeaderLinesDispT& operator=(LeaderLines *pintf)
  {
    TAutoDriver<LeaderLines>::Bind(pintf, false);
    return *this;
  }

  LeaderLinesDispT& operator=(LeaderLinesPtr pintf)
  {
    TAutoDriver<LeaderLines>::Bind(pintf, true);
    return *this;
  }

  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application();
  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent();
  Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Border();
  void /*[VT_VOID:0]*/ __fastcall Delete();

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
};
typedef LeaderLinesDispT<LeaderLines> LeaderLinesDisp;

// *********************************************************************//
// DispIntf:  UpBars
// Flags:     (4096) Dispatchable
// GUID:      {00024702-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class UpBarsDispT : public TAutoDriver<UpBars>
{
public:
  UpBarsDispT(){}

  UpBarsDispT(UpBars *pintf)
  {
    TAutoDriver<UpBars>::Bind(pintf, false);
  }

  UpBarsDispT(UpBarsPtr pintf)
  {
    TAutoDriver<UpBars>::Bind(pintf, true);
  }

  UpBarsDispT& operator=(UpBars *pintf)
  {
    TAutoDriver<UpBars>::Bind(pintf, false);
    return *this;
  }

  UpBarsDispT& operator=(UpBarsPtr pintf)
  {
    TAutoDriver<UpBars>::Bind(pintf, true);
    return *this;
  }

  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application();
  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent();
  BSTR /*[VT_BSTR:0]*/ __fastcall get_Name();
  Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Border();
  TVariant /*[VT_VARIANT:0]*/ __fastcall Delete();
  Graph_2k::InteriorPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Interior();
  Graph_2k::ChartFillFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Fill();

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::InteriorPtr Interior = {read = get_Interior};
  __property   Graph_2k::ChartFillFormatPtr Fill = {read = get_Fill};
};
typedef UpBarsDispT<UpBars> UpBarsDisp;

// *********************************************************************//
// DispIntf:  DownBars
// Flags:     (4096) Dispatchable
// GUID:      {00024703-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class DownBarsDispT : public TAutoDriver<DownBars>
{
public:
  DownBarsDispT(){}

  DownBarsDispT(DownBars *pintf)
  {
    TAutoDriver<DownBars>::Bind(pintf, false);
  }

  DownBarsDispT(DownBarsPtr pintf)
  {
    TAutoDriver<DownBars>::Bind(pintf, true);
  }

  DownBarsDispT& operator=(DownBars *pintf)
  {
    TAutoDriver<DownBars>::Bind(pintf, false);
    return *this;
  }

  DownBarsDispT& operator=(DownBarsPtr pintf)
  {
    TAutoDriver<DownBars>::Bind(pintf, true);
    return *this;
  }

  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application();
  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent();
  BSTR /*[VT_BSTR:0]*/ __fastcall get_Name();
  Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Border();
  TVariant /*[VT_VARIANT:0]*/ __fastcall Delete();
  Graph_2k::InteriorPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Interior();
  Graph_2k::ChartFillFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Fill();

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::InteriorPtr Interior = {read = get_Interior};
  __property   Graph_2k::ChartFillFormatPtr Fill = {read = get_Fill};
};
typedef DownBarsDispT<DownBars> DownBarsDisp;

// *********************************************************************//
// DispIntf:  Floor
// Flags:     (4096) Dispatchable
// GUID:      {00024704-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class FloorDispT : public TAutoDriver<Floor>
{
public:
  FloorDispT(){}

  FloorDispT(Floor *pintf)
  {
    TAutoDriver<Floor>::Bind(pintf, false);
  }

  FloorDispT(FloorPtr pintf)
  {
    TAutoDriver<Floor>::Bind(pintf, true);
  }

  FloorDispT& operator=(Floor *pintf)
  {
    TAutoDriver<Floor>::Bind(pintf, false);
    return *this;
  }

  FloorDispT& operator=(FloorPtr pintf)
  {
    TAutoDriver<Floor>::Bind(pintf, true);
    return *this;
  }

  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application();
  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent();
  BSTR /*[VT_BSTR:0]*/ __fastcall get_Name();
  Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Border();
  TVariant /*[VT_VARIANT:0]*/ __fastcall ClearFormats();
  Graph_2k::InteriorPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Interior();
  Graph_2k::ChartFillFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Fill();
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_PictureType();
  void /*[VT_VOID:0]*/ __fastcall set_PictureType(TVariantInParam Param1/*[in]*/);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::InteriorPtr Interior = {read = get_Interior};
  __property   Graph_2k::ChartFillFormatPtr Fill = {read = get_Fill};
};
typedef FloorDispT<Floor> FloorDisp;

// *********************************************************************//
// DispIntf:  Walls
// Flags:     (4096) Dispatchable
// GUID:      {00024705-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class WallsDispT : public TAutoDriver<Walls>
{
public:
  WallsDispT(){}

  WallsDispT(Walls *pintf)
  {
    TAutoDriver<Walls>::Bind(pintf, false);
  }

  WallsDispT(WallsPtr pintf)
  {
    TAutoDriver<Walls>::Bind(pintf, true);
  }

  WallsDispT& operator=(Walls *pintf)
  {
    TAutoDriver<Walls>::Bind(pintf, false);
    return *this;
  }

  WallsDispT& operator=(WallsPtr pintf)
  {
    TAutoDriver<Walls>::Bind(pintf, true);
    return *this;
  }

  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application();
  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent();
  BSTR /*[VT_BSTR:0]*/ __fastcall get_Name();
  Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Border();
  TVariant /*[VT_VARIANT:0]*/ __fastcall ClearFormats();
  Graph_2k::InteriorPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Interior();
  Graph_2k::ChartFillFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Fill();
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_PictureType();
  void /*[VT_VOID:0]*/ __fastcall set_PictureType(TVariantInParam Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_PictureUnit();
  void /*[VT_VOID:0]*/ __fastcall set_PictureUnit(TVariantInParam Param1/*[in]*/);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::InteriorPtr Interior = {read = get_Interior};
  __property   Graph_2k::ChartFillFormatPtr Fill = {read = get_Fill};
};
typedef WallsDispT<Walls> WallsDisp;

// *********************************************************************//
// DispIntf:  TickLabels
// Flags:     (4096) Dispatchable
// GUID:      {00024706-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class TickLabelsDispT : public TAutoDriver<TickLabels>
{
public:
  TickLabelsDispT(){}

  TickLabelsDispT(TickLabels *pintf)
  {
    TAutoDriver<TickLabels>::Bind(pintf, false);
  }

  TickLabelsDispT(TickLabelsPtr pintf)
  {
    TAutoDriver<TickLabels>::Bind(pintf, true);
  }

  TickLabelsDispT& operator=(TickLabels *pintf)
  {
    TAutoDriver<TickLabels>::Bind(pintf, false);
    return *this;
  }

  TickLabelsDispT& operator=(TickLabelsPtr pintf)
  {
    TAutoDriver<TickLabels>::Bind(pintf, true);
    return *this;
  }

  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application();
  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent();
  TVariant /*[VT_VARIANT:0]*/ __fastcall Delete();
  Graph_2k::FontPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Font();
  BSTR /*[VT_BSTR:0]*/ __fastcall get_Name();
  BSTR /*[VT_BSTR:0]*/ __fastcall get_NumberFormat();
  void /*[VT_VOID:0]*/ __fastcall set_NumberFormat(BSTR Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_NumberFormatLocal();
  void /*[VT_VOID:0]*/ __fastcall set_NumberFormatLocal(TVariantInParam Param1/*[in]*/);
  Graph_2k::XlTickLabelOrientation /*[VT_USERDEFINED:0]*/ __fastcall get_Orientation();
  void /*[VT_VOID:0]*/ __fastcall set_Orientation(Graph_2k::XlTickLabelOrientation Param1/*[in]*/);
  long /*[VT_I4:0]*/ __fastcall get_ReadingOrder();
  void /*[VT_VOID:0]*/ __fastcall set_ReadingOrder(long Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_AutoScaleFont();
  void /*[VT_VOID:0]*/ __fastcall set_AutoScaleFont(TVariantInParam Param1/*[in]*/);
  long /*[VT_I4:0]*/ __fastcall get_Offset();
  void /*[VT_VOID:0]*/ __fastcall set_Offset(long Param1/*[in]*/);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Graph_2k::FontPtr Font = {read = get_Font};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            NumberFormat = {read = get_NumberFormat, write = set_NumberFormat};
  __property   Graph_2k::XlTickLabelOrientation Orientation = {read = get_Orientation, write = set_Orientation};
  __property   long            ReadingOrder = {read = get_ReadingOrder, write = set_ReadingOrder};
  __property   long            Offset = {read = get_Offset, write = set_Offset};
};
typedef TickLabelsDispT<TickLabels> TickLabelsDisp;

// *********************************************************************//
// DispIntf:  PlotArea
// Flags:     (4096) Dispatchable
// GUID:      {00024707-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class PlotAreaDispT : public TAutoDriver<PlotArea>
{
public:
  PlotAreaDispT(){}

  PlotAreaDispT(PlotArea *pintf)
  {
    TAutoDriver<PlotArea>::Bind(pintf, false);
  }

  PlotAreaDispT(PlotAreaPtr pintf)
  {
    TAutoDriver<PlotArea>::Bind(pintf, true);
  }

  PlotAreaDispT& operator=(PlotArea *pintf)
  {
    TAutoDriver<PlotArea>::Bind(pintf, false);
    return *this;
  }

  PlotAreaDispT& operator=(PlotAreaPtr pintf)
  {
    TAutoDriver<PlotArea>::Bind(pintf, true);
    return *this;
  }

  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application();
  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent();
  BSTR /*[VT_BSTR:0]*/ __fastcall get_Name();
  Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Border();
  TVariant /*[VT_VARIANT:0]*/ __fastcall ClearFormats();
  double /*[VT_R8:0]*/ __fastcall get_Height();
  void /*[VT_VOID:0]*/ __fastcall set_Height(double Param1/*[in]*/);
  Graph_2k::InteriorPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Interior();
  Graph_2k::ChartFillFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Fill();
  double /*[VT_R8:0]*/ __fastcall get_Left();
  void /*[VT_VOID:0]*/ __fastcall set_Left(double Param1/*[in]*/);
  double /*[VT_R8:0]*/ __fastcall get_Top();
  void /*[VT_VOID:0]*/ __fastcall set_Top(double Param1/*[in]*/);
  double /*[VT_R8:0]*/ __fastcall get_Width();
  void /*[VT_VOID:0]*/ __fastcall set_Width(double Param1/*[in]*/);
  double /*[VT_R8:0]*/ __fastcall get_InsideLeft();
  double /*[VT_R8:0]*/ __fastcall get_InsideTop();
  double /*[VT_R8:0]*/ __fastcall get_InsideWidth();
  double /*[VT_R8:0]*/ __fastcall get_InsideHeight();

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   double          Height = {read = get_Height, write = set_Height};
  __property   Graph_2k::InteriorPtr Interior = {read = get_Interior};
  __property   Graph_2k::ChartFillFormatPtr Fill = {read = get_Fill};
  __property   double          Left = {read = get_Left, write = set_Left};
  __property   double          Top = {read = get_Top, write = set_Top};
  __property   double          Width = {read = get_Width, write = set_Width};
  __property   double          InsideLeft = {read = get_InsideLeft};
  __property   double          InsideTop = {read = get_InsideTop};
  __property   double          InsideWidth = {read = get_InsideWidth};
  __property   double          InsideHeight = {read = get_InsideHeight};
};
typedef PlotAreaDispT<PlotArea> PlotAreaDisp;

// *********************************************************************//
// DispIntf:  ChartArea
// Flags:     (4096) Dispatchable
// GUID:      {00024708-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class ChartAreaDispT : public TAutoDriver<ChartArea>
{
public:
  ChartAreaDispT(){}

  ChartAreaDispT(ChartArea *pintf)
  {
    TAutoDriver<ChartArea>::Bind(pintf, false);
  }

  ChartAreaDispT(ChartAreaPtr pintf)
  {
    TAutoDriver<ChartArea>::Bind(pintf, true);
  }

  ChartAreaDispT& operator=(ChartArea *pintf)
  {
    TAutoDriver<ChartArea>::Bind(pintf, false);
    return *this;
  }

  ChartAreaDispT& operator=(ChartAreaPtr pintf)
  {
    TAutoDriver<ChartArea>::Bind(pintf, true);
    return *this;
  }

  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application();
  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent();
  BSTR /*[VT_BSTR:0]*/ __fastcall get_Name();
  Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Border();
  TVariant /*[VT_VARIANT:0]*/ __fastcall Clear();
  TVariant /*[VT_VARIANT:0]*/ __fastcall ClearContents();
  TVariant /*[VT_VARIANT:0]*/ __fastcall Copy();
  Graph_2k::FontPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Font();
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_Shadow();
  void /*[VT_VOID:0]*/ __fastcall set_Shadow(TOLEBOOL Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall ClearFormats();
  double /*[VT_R8:0]*/ __fastcall get_Height();
  void /*[VT_VOID:0]*/ __fastcall set_Height(double Param1/*[in]*/);
  Graph_2k::InteriorPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Interior();
  Graph_2k::ChartFillFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Fill();
  double /*[VT_R8:0]*/ __fastcall get_Left();
  void /*[VT_VOID:0]*/ __fastcall set_Left(double Param1/*[in]*/);
  double /*[VT_R8:0]*/ __fastcall get_Top();
  void /*[VT_VOID:0]*/ __fastcall set_Top(double Param1/*[in]*/);
  double /*[VT_R8:0]*/ __fastcall get_Width();
  void /*[VT_VOID:0]*/ __fastcall set_Width(double Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_AutoScaleFont();
  void /*[VT_VOID:0]*/ __fastcall set_AutoScaleFont(TVariantInParam Param1/*[in]*/);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::FontPtr Font = {read = get_Font};
  __property   TOLEBOOL        Shadow = {read = get_Shadow, write = set_Shadow};
  __property   double          Height = {read = get_Height, write = set_Height};
  __property   Graph_2k::InteriorPtr Interior = {read = get_Interior};
  __property   Graph_2k::ChartFillFormatPtr Fill = {read = get_Fill};
  __property   double          Left = {read = get_Left, write = set_Left};
  __property   double          Top = {read = get_Top, write = set_Top};
  __property   double          Width = {read = get_Width, write = set_Width};
};
typedef ChartAreaDispT<ChartArea> ChartAreaDisp;

// *********************************************************************//
// DispIntf:  Legend
// Flags:     (4096) Dispatchable
// GUID:      {00024709-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class LegendDispT : public TAutoDriver<Legend>
{
public:
  LegendDispT(){}

  LegendDispT(Legend *pintf)
  {
    TAutoDriver<Legend>::Bind(pintf, false);
  }

  LegendDispT(LegendPtr pintf)
  {
    TAutoDriver<Legend>::Bind(pintf, true);
  }

  LegendDispT& operator=(Legend *pintf)
  {
    TAutoDriver<Legend>::Bind(pintf, false);
    return *this;
  }

  LegendDispT& operator=(LegendPtr pintf)
  {
    TAutoDriver<Legend>::Bind(pintf, true);
    return *this;
  }

  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application();
  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent();
  BSTR /*[VT_BSTR:0]*/ __fastcall get_Name();
  Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Border();
  TVariant /*[VT_VARIANT:0]*/ __fastcall Delete();
  Graph_2k::FontPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Font();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall LegendEntries(TVariantInParam Index/*[in,opt]*/= TNoParam());
  Graph_2k::XlLegendPosition /*[VT_USERDEFINED:0]*/ __fastcall get_Position();
  void /*[VT_VOID:0]*/ __fastcall set_Position(Graph_2k::XlLegendPosition Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_Shadow();
  void /*[VT_VOID:0]*/ __fastcall set_Shadow(TOLEBOOL Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall Clear();
  double /*[VT_R8:0]*/ __fastcall get_Height();
  void /*[VT_VOID:0]*/ __fastcall set_Height(double Param1/*[in]*/);
  Graph_2k::InteriorPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Interior();
  Graph_2k::ChartFillFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Fill();
  double /*[VT_R8:0]*/ __fastcall get_Left();
  void /*[VT_VOID:0]*/ __fastcall set_Left(double Param1/*[in]*/);
  double /*[VT_R8:0]*/ __fastcall get_Top();
  void /*[VT_VOID:0]*/ __fastcall set_Top(double Param1/*[in]*/);
  double /*[VT_R8:0]*/ __fastcall get_Width();
  void /*[VT_VOID:0]*/ __fastcall set_Width(double Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_AutoScaleFont();
  void /*[VT_VOID:0]*/ __fastcall set_AutoScaleFont(TVariantInParam Param1/*[in]*/);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::FontPtr Font = {read = get_Font};
  __property   Graph_2k::XlLegendPosition Position = {read = get_Position, write = set_Position};
  __property   TOLEBOOL        Shadow = {read = get_Shadow, write = set_Shadow};
  __property   double          Height = {read = get_Height, write = set_Height};
  __property   Graph_2k::InteriorPtr Interior = {read = get_Interior};
  __property   Graph_2k::ChartFillFormatPtr Fill = {read = get_Fill};
  __property   double          Left = {read = get_Left, write = set_Left};
  __property   double          Top = {read = get_Top, write = set_Top};
  __property   double          Width = {read = get_Width, write = set_Width};
};
typedef LegendDispT<Legend> LegendDisp;

// *********************************************************************//
// DispIntf:  ErrorBars
// Flags:     (4096) Dispatchable
// GUID:      {0002470A-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class ErrorBarsDispT : public TAutoDriver<ErrorBars>
{
public:
  ErrorBarsDispT(){}

  ErrorBarsDispT(ErrorBars *pintf)
  {
    TAutoDriver<ErrorBars>::Bind(pintf, false);
  }

  ErrorBarsDispT(ErrorBarsPtr pintf)
  {
    TAutoDriver<ErrorBars>::Bind(pintf, true);
  }

  ErrorBarsDispT& operator=(ErrorBars *pintf)
  {
    TAutoDriver<ErrorBars>::Bind(pintf, false);
    return *this;
  }

  ErrorBarsDispT& operator=(ErrorBarsPtr pintf)
  {
    TAutoDriver<ErrorBars>::Bind(pintf, true);
    return *this;
  }

  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application();
  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent();
  BSTR /*[VT_BSTR:0]*/ __fastcall get_Name();
  Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Border();
  TVariant /*[VT_VARIANT:0]*/ __fastcall Delete();
  TVariant /*[VT_VARIANT:0]*/ __fastcall ClearFormats();
  Graph_2k::XlEndStyleCap /*[VT_USERDEFINED:0]*/ __fastcall get_EndStyle();
  void /*[VT_VOID:0]*/ __fastcall set_EndStyle(Graph_2k::XlEndStyleCap Param1/*[in]*/);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::XlEndStyleCap EndStyle = {read = get_EndStyle, write = set_EndStyle};
};
typedef ErrorBarsDispT<ErrorBars> ErrorBarsDisp;

// *********************************************************************//
// DispIntf:  DataTable
// Flags:     (4096) Dispatchable
// GUID:      {000208FA-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class DataTableDispT : public TAutoDriver<DataTable>
{
public:
  DataTableDispT(){}

  DataTableDispT(DataTable *pintf)
  {
    TAutoDriver<DataTable>::Bind(pintf, false);
  }

  DataTableDispT(DataTablePtr pintf)
  {
    TAutoDriver<DataTable>::Bind(pintf, true);
  }

  DataTableDispT& operator=(DataTable *pintf)
  {
    TAutoDriver<DataTable>::Bind(pintf, false);
    return *this;
  }

  DataTableDispT& operator=(DataTablePtr pintf)
  {
    TAutoDriver<DataTable>::Bind(pintf, true);
    return *this;
  }

  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application();
  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent();
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_ShowLegendKey();
  void /*[VT_VOID:0]*/ __fastcall set_ShowLegendKey(TOLEBOOL Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_HasBorderHorizontal();
  void /*[VT_VOID:0]*/ __fastcall set_HasBorderHorizontal(TOLEBOOL Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_HasBorderVertical();
  void /*[VT_VOID:0]*/ __fastcall set_HasBorderVertical(TOLEBOOL Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_HasBorderOutline();
  void /*[VT_VOID:0]*/ __fastcall set_HasBorderOutline(TOLEBOOL Param1/*[in]*/);
  Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Border();
  Graph_2k::FontPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Font();
  void /*[VT_VOID:0]*/ __fastcall Delete();
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_AutoScaleFont();
  void /*[VT_VOID:0]*/ __fastcall set_AutoScaleFont(TVariantInParam Param1/*[in]*/);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   TOLEBOOL        ShowLegendKey = {read = get_ShowLegendKey, write = set_ShowLegendKey};
  __property   TOLEBOOL        HasBorderHorizontal = {read = get_HasBorderHorizontal, write = set_HasBorderHorizontal};
  __property   TOLEBOOL        HasBorderVertical = {read = get_HasBorderVertical, write = set_HasBorderVertical};
  __property   TOLEBOOL        HasBorderOutline = {read = get_HasBorderOutline, write = set_HasBorderOutline};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::FontPtr Font = {read = get_Font};
};
typedef DataTableDispT<DataTable> DataTableDisp;

// *********************************************************************//
// DispIntf:  DisplayUnitLabel
// Flags:     (4096) Dispatchable
// GUID:      {000208D3-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class DisplayUnitLabelDispT : public TAutoDriver<DisplayUnitLabel>
{
public:
  DisplayUnitLabelDispT(){}

  DisplayUnitLabelDispT(DisplayUnitLabel *pintf)
  {
    TAutoDriver<DisplayUnitLabel>::Bind(pintf, false);
  }

  DisplayUnitLabelDispT(DisplayUnitLabelPtr pintf)
  {
    TAutoDriver<DisplayUnitLabel>::Bind(pintf, true);
  }

  DisplayUnitLabelDispT& operator=(DisplayUnitLabel *pintf)
  {
    TAutoDriver<DisplayUnitLabel>::Bind(pintf, false);
    return *this;
  }

  DisplayUnitLabelDispT& operator=(DisplayUnitLabelPtr pintf)
  {
    TAutoDriver<DisplayUnitLabel>::Bind(pintf, true);
    return *this;
  }

  Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Application();
  Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall get_Creator();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent();
  BSTR /*[VT_BSTR:0]*/ __fastcall get_Name();
  Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Border();
  TVariant /*[VT_VARIANT:0]*/ __fastcall Delete();
  Graph_2k::InteriorPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Interior();
  Graph_2k::ChartFillFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Fill();
  BSTR /*[VT_BSTR:0]*/ __fastcall get_Caption();
  void /*[VT_VOID:0]*/ __fastcall set_Caption(BSTR Param1/*[in]*/);
  Graph_2k::FontPtr /*[VT_USERDEFINED:1]*/ __fastcall get_Font();
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_HorizontalAlignment();
  void /*[VT_VOID:0]*/ __fastcall set_HorizontalAlignment(TVariantInParam Param1/*[in]*/);
  double /*[VT_R8:0]*/ __fastcall get_Left();
  void /*[VT_VOID:0]*/ __fastcall set_Left(double Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_Orientation();
  void /*[VT_VOID:0]*/ __fastcall set_Orientation(TVariantInParam Param1/*[in]*/);
  TOLEBOOL /*[VT_BOOL:0]*/ __fastcall get_Shadow();
  void /*[VT_VOID:0]*/ __fastcall set_Shadow(TOLEBOOL Param1/*[in]*/);
  BSTR /*[VT_BSTR:0]*/ __fastcall get_Text();
  void /*[VT_VOID:0]*/ __fastcall set_Text(BSTR Param1/*[in]*/);
  double /*[VT_R8:0]*/ __fastcall get_Top();
  void /*[VT_VOID:0]*/ __fastcall set_Top(double Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_VerticalAlignment();
  void /*[VT_VOID:0]*/ __fastcall set_VerticalAlignment(TVariantInParam Param1/*[in]*/);
  long /*[VT_I4:0]*/ __fastcall get_ReadingOrder();
  void /*[VT_VOID:0]*/ __fastcall set_ReadingOrder(long Param1/*[in]*/);
  TVariant /*[VT_VARIANT:0]*/ __fastcall get_AutoScaleFont();
  void /*[VT_VOID:0]*/ __fastcall set_AutoScaleFont(TVariantInParam Param1/*[in]*/);

  __property   Graph_2k::GraphApplicationPtr Application = {read = get_Application};
  __property   Graph_2k::XlCreator Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Graph_2k::BorderPtr Border = {read = get_Border};
  __property   Graph_2k::InteriorPtr Interior = {read = get_Interior};
  __property   Graph_2k::ChartFillFormatPtr Fill = {read = get_Fill};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   Graph_2k::FontPtr Font = {read = get_Font};
  __property   double          Left = {read = get_Left, write = set_Left};
  __property   TOLEBOOL        Shadow = {read = get_Shadow, write = set_Shadow};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   double          Top = {read = get_Top, write = set_Top};
  __property   long            ReadingOrder = {read = get_ReadingOrder, write = set_ReadingOrder};
};
typedef DisplayUnitLabelDispT<DisplayUnitLabel> DisplayUnitLabelDisp;

// *********************************************************************//
// DispIntf:  IShape
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002441F-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class IShapeDispT : public TAutoDriver<IShape>
{
public:
  IShapeDispT(){}

  IShapeDispT(IShape *pintf)
  {
    TAutoDriver<IShape>::Bind(pintf, false);
  }

  IShapeDispT(IShapePtr pintf)
  {
    TAutoDriver<IShape>::Bind(pintf, true);
  }

  IShapeDispT& operator=(IShape *pintf)
  {
    TAutoDriver<IShape>::Bind(pintf, false);
    return *this;
  }

  IShapeDispT& operator=(IShapePtr pintf)
  {
    TAutoDriver<IShape>::Bind(pintf, true);
    return *this;
  }


};
typedef IShapeDispT<IShape> IShapeDisp;

// *********************************************************************//
// DispIntf:  IShapes
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024420-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class IShapesDispT : public TAutoDriver<IShapes>
{
public:
  IShapesDispT(){}

  IShapesDispT(IShapes *pintf)
  {
    TAutoDriver<IShapes>::Bind(pintf, false);
  }

  IShapesDispT(IShapesPtr pintf)
  {
    TAutoDriver<IShapes>::Bind(pintf, true);
  }

  IShapesDispT& operator=(IShapes *pintf)
  {
    TAutoDriver<IShapes>::Bind(pintf, false);
    return *this;
  }

  IShapesDispT& operator=(IShapesPtr pintf)
  {
    TAutoDriver<IShapes>::Bind(pintf, true);
    return *this;
  }


};
typedef IShapesDispT<IShapes> IShapesDisp;

// *********************************************************************//
// DispIntf:  IShapeRange
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024421-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class IShapeRangeDispT : public TAutoDriver<IShapeRange>
{
public:
  IShapeRangeDispT(){}

  IShapeRangeDispT(IShapeRange *pintf)
  {
    TAutoDriver<IShapeRange>::Bind(pintf, false);
  }

  IShapeRangeDispT(IShapeRangePtr pintf)
  {
    TAutoDriver<IShapeRange>::Bind(pintf, true);
  }

  IShapeRangeDispT& operator=(IShapeRange *pintf)
  {
    TAutoDriver<IShapeRange>::Bind(pintf, false);
    return *this;
  }

  IShapeRangeDispT& operator=(IShapeRangePtr pintf)
  {
    TAutoDriver<IShapeRange>::Bind(pintf, true);
    return *this;
  }


};
typedef IShapeRangeDispT<IShapeRange> IShapeRangeDisp;

// *********************************************************************//
// DispIntf:  IGroupShapes
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024422-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class IGroupShapesDispT : public TAutoDriver<IGroupShapes>
{
public:
  IGroupShapesDispT(){}

  IGroupShapesDispT(IGroupShapes *pintf)
  {
    TAutoDriver<IGroupShapes>::Bind(pintf, false);
  }

  IGroupShapesDispT(IGroupShapesPtr pintf)
  {
    TAutoDriver<IGroupShapes>::Bind(pintf, true);
  }

  IGroupShapesDispT& operator=(IGroupShapes *pintf)
  {
    TAutoDriver<IGroupShapes>::Bind(pintf, false);
    return *this;
  }

  IGroupShapesDispT& operator=(IGroupShapesPtr pintf)
  {
    TAutoDriver<IGroupShapes>::Bind(pintf, true);
    return *this;
  }


};
typedef IGroupShapesDispT<IGroupShapes> IGroupShapesDisp;

// *********************************************************************//
// DispIntf:  ITextFrame
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024423-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class ITextFrameDispT : public TAutoDriver<ITextFrame>
{
public:
  ITextFrameDispT(){}

  ITextFrameDispT(ITextFrame *pintf)
  {
    TAutoDriver<ITextFrame>::Bind(pintf, false);
  }

  ITextFrameDispT(ITextFramePtr pintf)
  {
    TAutoDriver<ITextFrame>::Bind(pintf, true);
  }

  ITextFrameDispT& operator=(ITextFrame *pintf)
  {
    TAutoDriver<ITextFrame>::Bind(pintf, false);
    return *this;
  }

  ITextFrameDispT& operator=(ITextFramePtr pintf)
  {
    TAutoDriver<ITextFrame>::Bind(pintf, true);
    return *this;
  }


};
typedef ITextFrameDispT<ITextFrame> ITextFrameDisp;

// *********************************************************************//
// DispIntf:  IConnectorFormat
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024424-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class IConnectorFormatDispT : public TAutoDriver<IConnectorFormat>
{
public:
  IConnectorFormatDispT(){}

  IConnectorFormatDispT(IConnectorFormat *pintf)
  {
    TAutoDriver<IConnectorFormat>::Bind(pintf, false);
  }

  IConnectorFormatDispT(IConnectorFormatPtr pintf)
  {
    TAutoDriver<IConnectorFormat>::Bind(pintf, true);
  }

  IConnectorFormatDispT& operator=(IConnectorFormat *pintf)
  {
    TAutoDriver<IConnectorFormat>::Bind(pintf, false);
    return *this;
  }

  IConnectorFormatDispT& operator=(IConnectorFormatPtr pintf)
  {
    TAutoDriver<IConnectorFormat>::Bind(pintf, true);
    return *this;
  }


};
typedef IConnectorFormatDispT<IConnectorFormat> IConnectorFormatDisp;

// *********************************************************************//
// DispIntf:  IFreeformBuilder
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024425-0001-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class IFreeformBuilderDispT : public TAutoDriver<IFreeformBuilder>
{
public:
  IFreeformBuilderDispT(){}

  IFreeformBuilderDispT(IFreeformBuilder *pintf)
  {
    TAutoDriver<IFreeformBuilder>::Bind(pintf, false);
  }

  IFreeformBuilderDispT(IFreeformBuilderPtr pintf)
  {
    TAutoDriver<IFreeformBuilder>::Bind(pintf, true);
  }

  IFreeformBuilderDispT& operator=(IFreeformBuilder *pintf)
  {
    TAutoDriver<IFreeformBuilder>::Bind(pintf, false);
    return *this;
  }

  IFreeformBuilderDispT& operator=(IFreeformBuilderPtr pintf)
  {
    TAutoDriver<IFreeformBuilder>::Bind(pintf, true);
    return *this;
  }


};
typedef IFreeformBuilderDispT<IFreeformBuilder> IFreeformBuilderDisp;

// *********************************************************************//
// DispIntf:  Font
// Flags:     (4096) Dispatchable
// GUID:      {000208F3-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall
FontDispT<T>::get_Application()
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(148));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall
FontDispT<T>::get_Creator()
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(149));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
FontDispT<T>::get_Parent()
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(150));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
FontDispT<T>::get_Background()
{
  _TDispID _dispid(*this, OLETEXT("Background"), DISPID(180));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
FontDispT<T>::set_Background(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Background"), DISPID(180));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
FontDispT<T>::get_Bold()
{
  _TDispID _dispid(*this, OLETEXT("Bold"), DISPID(96));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
FontDispT<T>::set_Bold(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bold"), DISPID(96));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
FontDispT<T>::get_Color()
{
  _TDispID _dispid(*this, OLETEXT("Color"), DISPID(99));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
FontDispT<T>::set_Color(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Color"), DISPID(99));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
FontDispT<T>::get_ColorIndex()
{
  _TDispID _dispid(*this, OLETEXT("ColorIndex"), DISPID(97));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
FontDispT<T>::set_ColorIndex(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorIndex"), DISPID(97));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
FontDispT<T>::get_FontStyle()
{
  _TDispID _dispid(*this, OLETEXT("FontStyle"), DISPID(177));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
FontDispT<T>::set_FontStyle(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontStyle"), DISPID(177));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
FontDispT<T>::get_Italic()
{
  _TDispID _dispid(*this, OLETEXT("Italic"), DISPID(101));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
FontDispT<T>::set_Italic(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Italic"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
FontDispT<T>::get_Name()
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(110));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
FontDispT<T>::set_Name(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(110));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
FontDispT<T>::get_OutlineFont()
{
  _TDispID _dispid(*this, OLETEXT("OutlineFont"), DISPID(221));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
FontDispT<T>::set_OutlineFont(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OutlineFont"), DISPID(221));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
FontDispT<T>::get_Shadow()
{
  _TDispID _dispid(*this, OLETEXT("Shadow"), DISPID(103));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
FontDispT<T>::set_Shadow(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Shadow"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
FontDispT<T>::get_Size()
{
  _TDispID _dispid(*this, OLETEXT("Size"), DISPID(104));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
FontDispT<T>::set_Size(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Size"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
FontDispT<T>::get_Strikethrough()
{
  _TDispID _dispid(*this, OLETEXT("Strikethrough"), DISPID(105));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
FontDispT<T>::set_Strikethrough(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Strikethrough"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
FontDispT<T>::get_Subscript()
{
  _TDispID _dispid(*this, OLETEXT("Subscript"), DISPID(179));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
FontDispT<T>::set_Subscript(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Subscript"), DISPID(179));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
FontDispT<T>::get_Superscript()
{
  _TDispID _dispid(*this, OLETEXT("Superscript"), DISPID(178));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
FontDispT<T>::set_Superscript(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Superscript"), DISPID(178));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
FontDispT<T>::get_Underline()
{
  _TDispID _dispid(*this, OLETEXT("Underline"), DISPID(106));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
FontDispT<T>::set_Underline(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Underline"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  _Global
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208FC-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall
_GlobalDispT<T>::get_Application()
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(148));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall
_GlobalDispT<T>::get_Creator()
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(149));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall
_GlobalDispT<T>::get_Parent()
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(150));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Office_2k::CommandBarsPtr /*[VT_USERDEFINED:1]*/ __fastcall
_GlobalDispT<T>::get_CommandBars()
{
  _TDispID _dispid(*this, OLETEXT("CommandBars"), DISPID(1439));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Office_2k::CommandBars* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

// *********************************************************************//
// DispIntf:  Chart
// Flags:     (4096) Dispatchable
// GUID:      {000208FB-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall
ChartDispT<T>::get_Application()
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(148));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall
ChartDispT<T>::get_Creator()
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(149));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
ChartDispT<T>::get_Parent()
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(150));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartDispT<T>::Activate()
{
  _TDispID _dispid(*this, OLETEXT("Activate"), DISPID(304));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartDispT<T>::ApplyDataLabels(TVariantInParam Type/*[in,opt]*/, 
                               TVariantInParam LegendKey/*[in,opt]*/, 
                               TVariantInParam AutoText/*[in,opt]*/, 
                               TVariantInParam HasLeaderLines/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("ApplyDataLabels"), DISPID(151));
  TAutoArgs<4> _args;
  _args[1] = Type /*[VT_VARIANT:0]*/;
  _args[2] = LegendKey /*[VT_VARIANT:0]*/;
  _args[3] = AutoText /*[VT_VARIANT:0]*/;
  _args[4] = HasLeaderLines /*[VT_VARIANT:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> Graph_2k::ChartGroupPtr /*[VT_USERDEFINED:1]*/ __fastcall
ChartDispT<T>::get_Area3DGroup()
{
  _TDispID _dispid(*this, OLETEXT("Area3DGroup"), DISPID(17));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::ChartGroup* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
ChartDispT<T>::AreaGroups(TVariantInParam Index/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("AreaGroups"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartDispT<T>::AutoFormat(long Gallery/*[in]*/, TVariantInParam Format/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoFormat"), DISPID(114));
  TAutoArgs<2> _args;
  _args[1] = Gallery /*[VT_I4:0]*/;
  _args[2] = Format /*[VT_VARIANT:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
ChartDispT<T>::get_AutoScaling()
{
  _TDispID _dispid(*this, OLETEXT("AutoScaling"), DISPID(107));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartDispT<T>::set_AutoScaling(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoScaling"), DISPID(107));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
ChartDispT<T>::Axes(TVariantInParam Type/*[in,opt]*/, TVariantInParam AxisGroup/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Axes"), DISPID(23));
  TAutoArgs<2> _args;
  _args[1] = Type /*[VT_VARIANT:0]*/;
  _args[2] = AxisGroup /*[VT_VARIANT:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::ChartGroupPtr /*[VT_USERDEFINED:1]*/ __fastcall
ChartDispT<T>::get_Bar3DGroup()
{
  _TDispID _dispid(*this, OLETEXT("Bar3DGroup"), DISPID(18));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::ChartGroup* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
ChartDispT<T>::BarGroups(TVariantInParam Index/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("BarGroups"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::ChartAreaPtr /*[VT_USERDEFINED:1]*/ __fastcall
ChartDispT<T>::get_ChartArea()
{
  _TDispID _dispid(*this, OLETEXT("ChartArea"), DISPID(80));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::ChartArea* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
ChartDispT<T>::ChartGroups(TVariantInParam Index/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChartGroups"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::ChartTitlePtr /*[VT_USERDEFINED:1]*/ __fastcall
ChartDispT<T>::get_ChartTitle()
{
  _TDispID _dispid(*this, OLETEXT("ChartTitle"), DISPID(81));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::ChartTitle* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::ChartGroupPtr /*[VT_USERDEFINED:1]*/ __fastcall
ChartDispT<T>::get_Column3DGroup()
{
  _TDispID _dispid(*this, OLETEXT("Column3DGroup"), DISPID(19));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::ChartGroup* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
ChartDispT<T>::ColumnGroups(TVariantInParam Index/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnGroups"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Office_2k::CommandBarsPtr /*[VT_USERDEFINED:1]*/ __fastcall
ChartDispT<T>::get_CommandBars()
{
  _TDispID _dispid(*this, OLETEXT("CommandBars"), DISPID(1439));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Office_2k::CommandBars* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::CornersPtr /*[VT_USERDEFINED:1]*/ __fastcall
ChartDispT<T>::get_Corners()
{
  _TDispID _dispid(*this, OLETEXT("Corners"), DISPID(79));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Corners* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::DataTablePtr /*[VT_USERDEFINED:1]*/ __fastcall
ChartDispT<T>::get_DataTable()
{
  _TDispID _dispid(*this, OLETEXT("DataTable"), DISPID(1395));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::DataTable* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
ChartDispT<T>::get_DepthPercent()
{
  _TDispID _dispid(*this, OLETEXT("DepthPercent"), DISPID(48));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartDispT<T>::set_DepthPercent(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DepthPercent"), DISPID(48));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartDispT<T>::Deselect()
{
  _TDispID _dispid(*this, OLETEXT("Deselect"), DISPID(1120));
  OleProcedure(_dispid);
}

template <class T> Graph_2k::XlDisplayBlanksAs /*[VT_USERDEFINED:0]*/ __fastcall
ChartDispT<T>::get_DisplayBlanksAs()
{
  _TDispID _dispid(*this, OLETEXT("DisplayBlanksAs"), DISPID(93));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlDisplayBlanksAs /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartDispT<T>::set_DisplayBlanksAs(Graph_2k::XlDisplayBlanksAs Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayBlanksAs"), DISPID(93));
  TAutoArgs<1> _args;
  _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
ChartDispT<T>::DoughnutGroups(TVariantInParam Index/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("DoughnutGroups"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
ChartDispT<T>::get_Elevation()
{
  _TDispID _dispid(*this, OLETEXT("Elevation"), DISPID(49));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartDispT<T>::set_Elevation(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Elevation"), DISPID(49));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::FloorPtr /*[VT_USERDEFINED:1]*/ __fastcall
ChartDispT<T>::get_Floor()
{
  _TDispID _dispid(*this, OLETEXT("Floor"), DISPID(83));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Floor* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
ChartDispT<T>::get_GapDepth()
{
  _TDispID _dispid(*this, OLETEXT("GapDepth"), DISPID(50));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartDispT<T>::set_GapDepth(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GapDepth"), DISPID(50));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
ChartDispT<T>::get_HasAxis(TVariantInParam Index1/*[in,opt]*/, TVariantInParam Index2/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasAxis"), DISPID(52));
  TAutoArgs<2> _args;
  _args[1] = Index1 /*[VT_VARIANT:0]*/;
  _args[2] = Index2 /*[VT_VARIANT:0]*/;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartDispT<T>::set_HasAxis(TVariantInParam Index1/*[in,opt]*/, TVariantInParam Index2/*[in,opt]*/, 
                           TVariantInParam Param3/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasAxis"), DISPID(52));
  TAutoArgs<3> _args;
  _args[1] = Index1 /*[VT_VARIANT:0]*/;
  _args[2] = Index2 /*[VT_VARIANT:0]*/;
  _args[3] = Param3 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
ChartDispT<T>::get_HasDataTable()
{
  _TDispID _dispid(*this, OLETEXT("HasDataTable"), DISPID(1396));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartDispT<T>::set_HasDataTable(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasDataTable"), DISPID(1396));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
ChartDispT<T>::get_HasLegend()
{
  _TDispID _dispid(*this, OLETEXT("HasLegend"), DISPID(53));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartDispT<T>::set_HasLegend(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasLegend"), DISPID(53));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
ChartDispT<T>::get_HasTitle()
{
  _TDispID _dispid(*this, OLETEXT("HasTitle"), DISPID(54));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartDispT<T>::set_HasTitle(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasTitle"), DISPID(54));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
ChartDispT<T>::get_Height()
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(123));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartDispT<T>::set_Height(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(123));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
ChartDispT<T>::get_HeightPercent()
{
  _TDispID _dispid(*this, OLETEXT("HeightPercent"), DISPID(55));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartDispT<T>::set_HeightPercent(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeightPercent"), DISPID(55));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
ChartDispT<T>::get_Left()
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(127));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartDispT<T>::set_Left(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(127));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::LegendPtr /*[VT_USERDEFINED:1]*/ __fastcall
ChartDispT<T>::get_Legend()
{
  _TDispID _dispid(*this, OLETEXT("Legend"), DISPID(84));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Legend* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::ChartGroupPtr /*[VT_USERDEFINED:1]*/ __fastcall
ChartDispT<T>::get_Line3DGroup()
{
  _TDispID _dispid(*this, OLETEXT("Line3DGroup"), DISPID(20));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::ChartGroup* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
ChartDispT<T>::LineGroups(TVariantInParam Index/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("LineGroups"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
ChartDispT<T>::get_Name()
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(110));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
ChartDispT<T>::OmitBackground()
{
  _TDispID _dispid(*this, OLETEXT("OmitBackground"), DISPID(1098));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
ChartDispT<T>::get_Perspective()
{
  _TDispID _dispid(*this, OLETEXT("Perspective"), DISPID(57));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartDispT<T>::set_Perspective(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Perspective"), DISPID(57));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::ChartGroupPtr /*[VT_USERDEFINED:1]*/ __fastcall
ChartDispT<T>::get_Pie3DGroup()
{
  _TDispID _dispid(*this, OLETEXT("Pie3DGroup"), DISPID(21));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::ChartGroup* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
ChartDispT<T>::PieGroups(TVariantInParam Index/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("PieGroups"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::PlotAreaPtr /*[VT_USERDEFINED:1]*/ __fastcall
ChartDispT<T>::get_PlotArea()
{
  _TDispID _dispid(*this, OLETEXT("PlotArea"), DISPID(85));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::PlotArea* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartDispT<T>::_Dummy43()
{
  _TDispID _dispid(*this, OLETEXT("_Dummy43"), DISPID(65579));
  OleProcedure(_dispid);
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
ChartDispT<T>::RadarGroups(TVariantInParam Index/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("RadarGroups"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
ChartDispT<T>::get_RightAngleAxes()
{
  _TDispID _dispid(*this, OLETEXT("RightAngleAxes"), DISPID(58));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartDispT<T>::set_RightAngleAxes(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RightAngleAxes"), DISPID(58));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
ChartDispT<T>::get_Rotation()
{
  _TDispID _dispid(*this, OLETEXT("Rotation"), DISPID(59));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartDispT<T>::set_Rotation(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Rotation"), DISPID(59));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
ChartDispT<T>::SeriesCollection(TVariantInParam Index/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("SeriesCollection"), DISPID(68));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
ChartDispT<T>::SetEchoOn(TVariantInParam EchoOn/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetEchoOn"), DISPID(1133));
  TAutoArgs<1> _args;
  _args[1] = EchoOn /*[VT_VARIANT:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
ChartDispT<T>::get_SubType()
{
  _TDispID _dispid(*this, OLETEXT("SubType"), DISPID(109));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartDispT<T>::set_SubType(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SubType"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::ChartGroupPtr /*[VT_USERDEFINED:1]*/ __fastcall
ChartDispT<T>::get_SurfaceGroup()
{
  _TDispID _dispid(*this, OLETEXT("SurfaceGroup"), DISPID(22));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::ChartGroup* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
ChartDispT<T>::get_Top()
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(126));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartDispT<T>::set_Top(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(126));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
ChartDispT<T>::get_Type()
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(108));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartDispT<T>::set_Type(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(108));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::XlChartType /*[VT_USERDEFINED:0]*/ __fastcall
ChartDispT<T>::get_ChartType()
{
  _TDispID _dispid(*this, OLETEXT("ChartType"), DISPID(1400));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlChartType /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartDispT<T>::set_ChartType(Graph_2k::XlChartType Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChartType"), DISPID(1400));
  TAutoArgs<1> _args;
  _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartDispT<T>::ApplyCustomType(Graph_2k::XlChartType ChartType/*[in]*/, 
                               TVariantInParam TypeName/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("ApplyCustomType"), DISPID(1401));
  TAutoArgs<2> _args;
  _args[1] = (int)ChartType /*[VT_USERDEFINED:0]*/;
  _args[2] = TypeName /*[VT_VARIANT:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> Graph_2k::WallsPtr /*[VT_USERDEFINED:1]*/ __fastcall
ChartDispT<T>::get_Walls()
{
  _TDispID _dispid(*this, OLETEXT("Walls"), DISPID(86));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Walls* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
ChartDispT<T>::get_WallsAndGridlines2D()
{
  _TDispID _dispid(*this, OLETEXT("WallsAndGridlines2D"), DISPID(210));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartDispT<T>::set_WallsAndGridlines2D(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WallsAndGridlines2D"), DISPID(210));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
ChartDispT<T>::get_Width()
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(122));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartDispT<T>::set_Width(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(122));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
ChartDispT<T>::XYGroups(TVariantInParam Index/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("XYGroups"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::XlBarShape /*[VT_USERDEFINED:0]*/ __fastcall
ChartDispT<T>::get_BarShape()
{
  _TDispID _dispid(*this, OLETEXT("BarShape"), DISPID(1403));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlBarShape /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartDispT<T>::set_BarShape(Graph_2k::XlBarShape Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BarShape"), DISPID(1403));
  TAutoArgs<1> _args;
  _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
ChartDispT<T>::Export(BSTR FileName/*[in]*/, TVariantInParam FilterName/*[in,opt]*/, 
                      TVariantInParam Interactive/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Export"), DISPID(1414));
  TAutoArgs<3> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  _args[2] = FilterName /*[VT_VARIANT:0]*/;
  _args[3] = Interactive /*[VT_VARIANT:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartDispT<T>::Refresh()
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(1417));
  OleProcedure(_dispid);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
ChartDispT<T>::get_PlotOnX()
{
  _TDispID _dispid(*this, OLETEXT("PlotOnX"), DISPID(1775));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartDispT<T>::set_PlotOnX(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PlotOnX"), DISPID(1775));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  Application
// Flags:     (4096) Dispatchable
// GUID:      {000208EC-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall
GraphApplicationDispT<T>::get_Application()
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(148));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall
GraphApplicationDispT<T>::get_Creator()
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(149));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall
GraphApplicationDispT<T>::get_Parent()
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(150));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Office_2k::CommandBarsPtr /*[VT_USERDEFINED:1]*/ __fastcall
GraphApplicationDispT<T>::get_CommandBars()
{
  _TDispID _dispid(*this, OLETEXT("CommandBars"), DISPID(1439));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Office_2k::CommandBars* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
GraphApplicationDispT<T>::AddChartAutoFormat(BSTR Name/*[in]*/, 
                                             TVariantInParam Description/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddChartAutoFormat"), DISPID(216));
  TAutoArgs<2> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  _args[2] = Description /*[VT_VARIANT:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
GraphApplicationDispT<T>::get_CellDragAndDrop()
{
  _TDispID _dispid(*this, OLETEXT("CellDragAndDrop"), DISPID(320));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
GraphApplicationDispT<T>::set_CellDragAndDrop(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CellDragAndDrop"), DISPID(320));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::ChartPtr /*[VT_USERDEFINED:1]*/ __fastcall
GraphApplicationDispT<T>::Chart()
{
  _TDispID _dispid(*this, OLETEXT("Chart"), DISPID(7));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return (Graph_2k::Chart* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
GraphApplicationDispT<T>::get_ChartWizardDisplay()
{
  _TDispID _dispid(*this, OLETEXT("ChartWizardDisplay"), DISPID(1129));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
GraphApplicationDispT<T>::set_ChartWizardDisplay(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChartWizardDisplay"), DISPID(1129));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::DataSheetPtr /*[VT_USERDEFINED:1]*/ __fastcall
GraphApplicationDispT<T>::get_DataSheet()
{
  _TDispID _dispid(*this, OLETEXT("DataSheet"), DISPID(1101));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::DataSheet* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
GraphApplicationDispT<T>::_set_DataSheet(Graph_2k::DataSheetPtr Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataSheet"), DISPID(1101));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Graph_2k::DataSheet*)Param1 /*[VT_USERDEFINED:1]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
GraphApplicationDispT<T>::DeleteChartAutoFormat(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeleteChartAutoFormat"), DISPID(217));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
GraphApplicationDispT<T>::get_DisplayAlerts()
{
  _TDispID _dispid(*this, OLETEXT("DisplayAlerts"), DISPID(343));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
GraphApplicationDispT<T>::set_DisplayAlerts(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayAlerts"), DISPID(343));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
GraphApplicationDispT<T>::Evaluate(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Evaluate"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
GraphApplicationDispT<T>::FileImport(BSTR FileName/*[in]*/, TVariantInParam Password/*[in,opt]*/, 
                                     TVariantInParam ImportRange/*[in,opt]*/, 
                                     TVariantInParam WorksheetName/*[in,opt]*/, 
                                     TVariantInParam OverwriteCells/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileImport"), DISPID(1191));
  TAutoArgs<5> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  _args[2] = Password /*[VT_VARIANT:0]*/;
  _args[3] = ImportRange /*[VT_VARIANT:0]*/;
  _args[4] = WorksheetName /*[VT_VARIANT:0]*/;
  _args[5] = OverwriteCells /*[VT_VARIANT:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
GraphApplicationDispT<T>::get_HasLinks()
{
  _TDispID _dispid(*this, OLETEXT("HasLinks"), DISPID(1094));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
GraphApplicationDispT<T>::set_HasLinks(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasLinks"), DISPID(1094));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> double /*[VT_R8:0]*/ __fastcall
GraphApplicationDispT<T>::get_Height()
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(123));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
GraphApplicationDispT<T>::set_Height(double Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(123));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_R8:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
GraphApplicationDispT<T>::ImportChart(BSTR FileName/*[in]*/, TVariantInParam Password/*[in,opt]*/, 
                                      TVariantInParam ImportRange/*[in,opt]*/, 
                                      TVariantInParam WorksheetName/*[in,opt]*/, 
                                      TVariantInParam OverwriteCells/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("ImportChart"), DISPID(1099));
  TAutoArgs<5> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  _args[2] = Password /*[VT_VARIANT:0]*/;
  _args[3] = ImportRange /*[VT_VARIANT:0]*/;
  _args[4] = WorksheetName /*[VT_VARIANT:0]*/;
  _args[5] = OverwriteCells /*[VT_VARIANT:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> double /*[VT_R8:0]*/ __fastcall
GraphApplicationDispT<T>::get_Left()
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(127));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
GraphApplicationDispT<T>::set_Left(double Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(127));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_R8:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
GraphApplicationDispT<T>::get_MoveAfterReturn()
{
  _TDispID _dispid(*this, OLETEXT("MoveAfterReturn"), DISPID(374));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
GraphApplicationDispT<T>::set_MoveAfterReturn(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MoveAfterReturn"), DISPID(374));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
GraphApplicationDispT<T>::get_Name()
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(110));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
GraphApplicationDispT<T>::set_Name(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(110));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::XlRowCol /*[VT_USERDEFINED:0]*/ __fastcall
GraphApplicationDispT<T>::get_PlotBy()
{
  _TDispID _dispid(*this, OLETEXT("PlotBy"), DISPID(202));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlRowCol /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
GraphApplicationDispT<T>::set_PlotBy(Graph_2k::XlRowCol Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PlotBy"), DISPID(202));
  TAutoArgs<1> _args;
  _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
GraphApplicationDispT<T>::Quit()
{
  _TDispID _dispid(*this, OLETEXT("Quit"), DISPID(302));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
GraphApplicationDispT<T>::SaveAs(BSTR FileName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SaveAs"), DISPID(284));
  TAutoArgs<1> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
GraphApplicationDispT<T>::SaveAsOldFileFormat(TVariantInParam MajorVersion/*[in,opt]*/, 
                                              TVariantInParam MinorVersion/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("SaveAsOldFileFormat"), DISPID(1091));
  TAutoArgs<2> _args;
  _args[1] = MajorVersion /*[VT_VARIANT:0]*/;
  _args[2] = MinorVersion /*[VT_VARIANT:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
GraphApplicationDispT<T>::SetDefaultChart(TVariantInParam FormatName/*[in,opt]*/, 
                                          TVariantInParam Gallery/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDefaultChart"), DISPID(219));
  TAutoArgs<2> _args;
  _args[1] = FormatName /*[VT_VARIANT:0]*/;
  _args[2] = Gallery /*[VT_VARIANT:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
GraphApplicationDispT<T>::get_ShowChartTipNames()
{
  _TDispID _dispid(*this, OLETEXT("ShowChartTipNames"), DISPID(1207));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
GraphApplicationDispT<T>::set_ShowChartTipNames(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowChartTipNames"), DISPID(1207));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
GraphApplicationDispT<T>::get_ShowChartTipValues()
{
  _TDispID _dispid(*this, OLETEXT("ShowChartTipValues"), DISPID(1208));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
GraphApplicationDispT<T>::set_ShowChartTipValues(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowChartTipValues"), DISPID(1208));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> double /*[VT_R8:0]*/ __fastcall
GraphApplicationDispT<T>::get_Top()
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(126));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
GraphApplicationDispT<T>::set_Top(double Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(126));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_R8:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
GraphApplicationDispT<T>::_Update()
{
  _TDispID _dispid(*this, OLETEXT("Update"), DISPID(680));
  OleProcedure(_dispid);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
GraphApplicationDispT<T>::get_Version()
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(392));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
GraphApplicationDispT<T>::get_Visible()
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(558));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
GraphApplicationDispT<T>::set_Visible(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(558));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> double /*[VT_R8:0]*/ __fastcall
GraphApplicationDispT<T>::get_Width()
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(122));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
GraphApplicationDispT<T>::set_Width(double Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(122));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_R8:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::XlWindowState /*[VT_USERDEFINED:0]*/ __fastcall
GraphApplicationDispT<T>::get_WindowState()
{
  _TDispID _dispid(*this, OLETEXT("WindowState"), DISPID(396));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlWindowState /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
GraphApplicationDispT<T>::set_WindowState(Graph_2k::XlWindowState Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WindowState"), DISPID(396));
  TAutoArgs<1> _args;
  _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::AutoCorrectPtr /*[VT_USERDEFINED:1]*/ __fastcall
GraphApplicationDispT<T>::get_AutoCorrect()
{
  _TDispID _dispid(*this, OLETEXT("AutoCorrect"), DISPID(1145));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::AutoCorrect* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

// *********************************************************************//
// DispIntf:  DataSheet
// Flags:     (4096) Dispatchable
// GUID:      {00024726-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall
DataSheetDispT<T>::get_Application()
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(148));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall
DataSheetDispT<T>::get_Creator()
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(149));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
DataSheetDispT<T>::get_Parent()
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(150));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DataSheetDispT<T>::Activate()
{
  _TDispID _dispid(*this, OLETEXT("Activate"), DISPID(304));
  OleProcedure(_dispid);
}

template <class T> Graph_2k::RangePtr /*[VT_USERDEFINED:1]*/ __fastcall
DataSheetDispT<T>::get_Cells()
{
  _TDispID _dispid(*this, OLETEXT("Cells"), DISPID(238));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Range* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::RangePtr /*[VT_USERDEFINED:1]*/ __fastcall
DataSheetDispT<T>::get_Columns()
{
  _TDispID _dispid(*this, OLETEXT("Columns"), DISPID(241));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Range* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::FontPtr /*[VT_USERDEFINED:1]*/ __fastcall
DataSheetDispT<T>::get_Font()
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(146));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Font* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DataSheetDispT<T>::_set_Font(Graph_2k::FontPtr Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(146));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Graph_2k::Font*)Param1 /*[VT_USERDEFINED:1]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> double /*[VT_R8:0]*/ __fastcall
DataSheetDispT<T>::get_Height()
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(123));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DataSheetDispT<T>::set_Height(double Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(123));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_R8:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> double /*[VT_R8:0]*/ __fastcall
DataSheetDispT<T>::get_Left()
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(127));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DataSheetDispT<T>::set_Left(double Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(127));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_R8:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::RangePtr /*[VT_USERDEFINED:1]*/ __fastcall
DataSheetDispT<T>::get_Range(TVariantInParam Range1/*[in]*/, TVariantInParam Range2/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Range"), DISPID(197));
  TAutoArgs<2> _args;
  _args[1] = Range1 /*[VT_VARIANT:0]*/;
  _args[2] = Range2 /*[VT_VARIANT:0]*/;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Range* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::RangePtr /*[VT_USERDEFINED:1]*/ __fastcall
DataSheetDispT<T>::get_Rows()
{
  _TDispID _dispid(*this, OLETEXT("Rows"), DISPID(258));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Range* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> double /*[VT_R8:0]*/ __fastcall
DataSheetDispT<T>::get_Top()
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(126));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DataSheetDispT<T>::set_Top(double Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(126));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_R8:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> double /*[VT_R8:0]*/ __fastcall
DataSheetDispT<T>::get_Width()
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(122));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DataSheetDispT<T>::set_Width(double Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(122));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_R8:0]*/;
  OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  Range
// Flags:     (4096) Dispatchable
// GUID:      {00024727-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall
RangeDispT<T>::get_Application()
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(148));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall
RangeDispT<T>::get_Creator()
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(149));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
RangeDispT<T>::get_Parent()
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(150));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
RangeDispT<T>::AutoFit()
{
  _TDispID _dispid(*this, OLETEXT("AutoFit"), DISPID(237));
  OleProcedure(_dispid);
}

template <class T> Graph_2k::RangePtr /*[VT_USERDEFINED:1]*/ __fastcall
RangeDispT<T>::get_Cells()
{
  _TDispID _dispid(*this, OLETEXT("Cells"), DISPID(238));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Range* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
RangeDispT<T>::Clear()
{
  _TDispID _dispid(*this, OLETEXT("Clear"), DISPID(111));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
RangeDispT<T>::ClearContents()
{
  _TDispID _dispid(*this, OLETEXT("ClearContents"), DISPID(113));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
RangeDispT<T>::ClearFormats()
{
  _TDispID _dispid(*this, OLETEXT("ClearFormats"), DISPID(112));
  OleProcedure(_dispid);
}

template <class T> Graph_2k::RangePtr /*[VT_USERDEFINED:1]*/ __fastcall
RangeDispT<T>::get_Columns()
{
  _TDispID _dispid(*this, OLETEXT("Columns"), DISPID(241));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Range* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
RangeDispT<T>::get_ColumnWidth()
{
  _TDispID _dispid(*this, OLETEXT("ColumnWidth"), DISPID(242));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
RangeDispT<T>::set_ColumnWidth(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnWidth"), DISPID(242));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
RangeDispT<T>::Copy(TVariantInParam Destination/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Copy"), DISPID(551));
  TAutoArgs<1> _args;
  _args[1] = Destination /*[VT_VARIANT:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
RangeDispT<T>::Cut(TVariantInParam Destination/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Cut"), DISPID(565));
  TAutoArgs<1> _args;
  _args[1] = Destination /*[VT_VARIANT:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
RangeDispT<T>::Delete(TVariantInParam Shift/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(117));
  TAutoArgs<1> _args;
  _args[1] = Shift /*[VT_VARIANT:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
RangeDispT<T>::ImportData(TVariantInParam FileName/*[in]*/, TVariantInParam Range/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("ImportData"), DISPID(1100));
  TAutoArgs<2> _args;
  _args[1] = FileName /*[VT_VARIANT:0]*/;
  _args[2] = Range /*[VT_VARIANT:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
RangeDispT<T>::get_Include()
{
  _TDispID _dispid(*this, OLETEXT("Include"), DISPID(165));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
RangeDispT<T>::set_Include(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Include"), DISPID(165));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
RangeDispT<T>::Insert(TVariantInParam Shift/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Insert"), DISPID(252));
  TAutoArgs<1> _args;
  _args[1] = Shift /*[VT_VARIANT:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
RangeDispT<T>::get_Item(TVariantInParam RowIndex/*[in,opt]*/, 
                        TVariantInParam ColumnIndex/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(170));
  TAutoArgs<2> _args;
  _args[1] = RowIndex /*[VT_VARIANT:0]*/;
  _args[2] = ColumnIndex /*[VT_VARIANT:0]*/;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
RangeDispT<T>::set_Item(TVariantInParam RowIndex/*[in,opt]*/, 
                        TVariantInParam ColumnIndex/*[in,opt]*/, TVariantInParam Param3/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(170));
  TAutoArgs<3> _args;
  _args[1] = RowIndex /*[VT_VARIANT:0]*/;
  _args[2] = ColumnIndex /*[VT_VARIANT:0]*/;
  _args[3] = Param3 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> LPUNKNOWN /*[VT_UNKNOWN:0]*/ __fastcall
RangeDispT<T>::get__NewEnum()
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
RangeDispT<T>::get_NumberFormat()
{
  _TDispID _dispid(*this, OLETEXT("NumberFormat"), DISPID(193));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
RangeDispT<T>::set_NumberFormat(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumberFormat"), DISPID(193));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
RangeDispT<T>::Paste(TVariantInParam Link/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Paste"), DISPID(211));
  TAutoArgs<1> _args;
  _args[1] = Link /*[VT_VARIANT:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> Graph_2k::RangePtr /*[VT_USERDEFINED:1]*/ __fastcall
RangeDispT<T>::get_Rows()
{
  _TDispID _dispid(*this, OLETEXT("Rows"), DISPID(258));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Range* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
RangeDispT<T>::get_Value()
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(6));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
RangeDispT<T>::set_Value(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
RangeDispT<T>::get__Default(TVariantInParam RowIndex/*[in,opt]*/, 
                            TVariantInParam ColumnIndex/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Default"), DISPID(0));
  TAutoArgs<2> _args;
  _args[1] = RowIndex /*[VT_VARIANT:0]*/;
  _args[2] = ColumnIndex /*[VT_VARIANT:0]*/;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
RangeDispT<T>::set__Default(TVariantInParam RowIndex/*[in,opt]*/, 
                            TVariantInParam ColumnIndex/*[in,opt]*/, TVariantInParam Param3/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Default"), DISPID(0));
  TAutoArgs<3> _args;
  _args[1] = RowIndex /*[VT_VARIANT:0]*/;
  _args[2] = ColumnIndex /*[VT_VARIANT:0]*/;
  _args[3] = Param3 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  AutoCorrect
// Flags:     (4096) Dispatchable
// GUID:      {000208D4-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall
AutoCorrectDispT<T>::get_Application()
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(148));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall
AutoCorrectDispT<T>::get_Creator()
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(149));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
AutoCorrectDispT<T>::get_Parent()
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(150));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
AutoCorrectDispT<T>::AddReplacement(BSTR What/*[in]*/, BSTR Replacement/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddReplacement"), DISPID(1146));
  TAutoArgs<2> _args;
  _args[1] = What /*[VT_BSTR:0]*/;
  _args[2] = Replacement /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
AutoCorrectDispT<T>::get_CapitalizeNamesOfDays()
{
  _TDispID _dispid(*this, OLETEXT("CapitalizeNamesOfDays"), DISPID(1150));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
AutoCorrectDispT<T>::set_CapitalizeNamesOfDays(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CapitalizeNamesOfDays"), DISPID(1150));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
AutoCorrectDispT<T>::DeleteReplacement(BSTR What/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeleteReplacement"), DISPID(1147));
  TAutoArgs<1> _args;
  _args[1] = What /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
AutoCorrectDispT<T>::get_ReplacementList(TVariantInParam Index/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReplacementList"), DISPID(1151));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
AutoCorrectDispT<T>::set_ReplacementList(TVariantInParam Index/*[in,opt]*/, 
                                         TVariantInParam Param2/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReplacementList"), DISPID(1151));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  _args[2] = Param2 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
AutoCorrectDispT<T>::get_ReplaceText()
{
  _TDispID _dispid(*this, OLETEXT("ReplaceText"), DISPID(1148));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
AutoCorrectDispT<T>::set_ReplaceText(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReplaceText"), DISPID(1148));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
AutoCorrectDispT<T>::get_TwoInitialCapitals()
{
  _TDispID _dispid(*this, OLETEXT("TwoInitialCapitals"), DISPID(1149));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
AutoCorrectDispT<T>::set_TwoInitialCapitals(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TwoInitialCapitals"), DISPID(1149));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
AutoCorrectDispT<T>::get_CorrectSentenceCap()
{
  _TDispID _dispid(*this, OLETEXT("CorrectSentenceCap"), DISPID(1619));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
AutoCorrectDispT<T>::set_CorrectSentenceCap(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CorrectSentenceCap"), DISPID(1619));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
AutoCorrectDispT<T>::get_CorrectCapsLock()
{
  _TDispID _dispid(*this, OLETEXT("CorrectCapsLock"), DISPID(1620));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
AutoCorrectDispT<T>::set_CorrectCapsLock(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CorrectCapsLock"), DISPID(1620));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  Border
// Flags:     (4096) Dispatchable
// GUID:      {000208EE-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall
BorderDispT<T>::get_Application()
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(148));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall
BorderDispT<T>::get_Creator()
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(149));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
BorderDispT<T>::get_Parent()
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(150));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
BorderDispT<T>::get_Color()
{
  _TDispID _dispid(*this, OLETEXT("Color"), DISPID(99));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
BorderDispT<T>::set_Color(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Color"), DISPID(99));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
BorderDispT<T>::get_ColorIndex()
{
  _TDispID _dispid(*this, OLETEXT("ColorIndex"), DISPID(97));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
BorderDispT<T>::set_ColorIndex(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorIndex"), DISPID(97));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
BorderDispT<T>::get_LineStyle()
{
  _TDispID _dispid(*this, OLETEXT("LineStyle"), DISPID(119));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
BorderDispT<T>::set_LineStyle(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LineStyle"), DISPID(119));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
BorderDispT<T>::get_Weight()
{
  _TDispID _dispid(*this, OLETEXT("Weight"), DISPID(120));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
BorderDispT<T>::set_Weight(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Weight"), DISPID(120));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  Interior
// Flags:     (4096) Dispatchable
// GUID:      {000208ED-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall
InteriorDispT<T>::get_Application()
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(148));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall
InteriorDispT<T>::get_Creator()
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(149));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
InteriorDispT<T>::get_Parent()
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(150));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
InteriorDispT<T>::get_Color()
{
  _TDispID _dispid(*this, OLETEXT("Color"), DISPID(99));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
InteriorDispT<T>::set_Color(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Color"), DISPID(99));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
InteriorDispT<T>::get_ColorIndex()
{
  _TDispID _dispid(*this, OLETEXT("ColorIndex"), DISPID(97));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
InteriorDispT<T>::set_ColorIndex(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorIndex"), DISPID(97));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
InteriorDispT<T>::get_InvertIfNegative()
{
  _TDispID _dispid(*this, OLETEXT("InvertIfNegative"), DISPID(132));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
InteriorDispT<T>::set_InvertIfNegative(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InvertIfNegative"), DISPID(132));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
InteriorDispT<T>::get_Pattern()
{
  _TDispID _dispid(*this, OLETEXT("Pattern"), DISPID(95));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
InteriorDispT<T>::set_Pattern(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Pattern"), DISPID(95));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
InteriorDispT<T>::get_PatternColor()
{
  _TDispID _dispid(*this, OLETEXT("PatternColor"), DISPID(100));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
InteriorDispT<T>::set_PatternColor(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PatternColor"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
InteriorDispT<T>::get_PatternColorIndex()
{
  _TDispID _dispid(*this, OLETEXT("PatternColorIndex"), DISPID(98));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
InteriorDispT<T>::set_PatternColorIndex(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PatternColorIndex"), DISPID(98));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ChartFillFormat
// Flags:     (4096) Dispatchable
// GUID:      {0002441C-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall
ChartFillFormatDispT<T>::get_Application()
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(148));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall
ChartFillFormatDispT<T>::get_Creator()
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(149));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
ChartFillFormatDispT<T>::get_Parent()
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(150));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartFillFormatDispT<T>::OneColorGradient(Office_2k::MsoGradientStyle Style/*[in]*/, 
                                          long Variant/*[in]*/, float Degree/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OneColorGradient"), DISPID(1621));
  TAutoArgs<3> _args;
  _args[1] = (int)Style /*[VT_USERDEFINED:0]*/;
  _args[2] = Variant /*[VT_I4:0]*/;
  _args[3] = Degree /*[VT_R4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartFillFormatDispT<T>::TwoColorGradient(Office_2k::MsoGradientStyle Style/*[in]*/, 
                                          long Variant/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TwoColorGradient"), DISPID(1624));
  TAutoArgs<2> _args;
  _args[1] = (int)Style /*[VT_USERDEFINED:0]*/;
  _args[2] = Variant /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartFillFormatDispT<T>::PresetTextured(Office_2k::MsoPresetTexture PresetTexture/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetTextured"), DISPID(1625));
  TAutoArgs<1> _args;
  _args[1] = (int)PresetTexture /*[VT_USERDEFINED:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartFillFormatDispT<T>::Solid()
{
  _TDispID _dispid(*this, OLETEXT("Solid"), DISPID(1627));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartFillFormatDispT<T>::Patterned(Office_2k::MsoPatternType Pattern/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Patterned"), DISPID(1628));
  TAutoArgs<1> _args;
  _args[1] = (int)Pattern /*[VT_USERDEFINED:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartFillFormatDispT<T>::UserPicture(TVariantInParam PictureFile/*[in,opt]*/, 
                                     TVariantInParam PictureFormat/*[in,opt]*/, 
                                     TVariantInParam PictureStackUnit/*[in,opt]*/, 
                                     TVariantInParam PicturePlacement/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserPicture"), DISPID(1629));
  TAutoArgs<4> _args;
  _args[1] = PictureFile /*[VT_VARIANT:0]*/;
  _args[2] = PictureFormat /*[VT_VARIANT:0]*/;
  _args[3] = PictureStackUnit /*[VT_VARIANT:0]*/;
  _args[4] = PicturePlacement /*[VT_VARIANT:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartFillFormatDispT<T>::UserTextured(BSTR TextureFile/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserTextured"), DISPID(1634));
  TAutoArgs<1> _args;
  _args[1] = TextureFile /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartFillFormatDispT<T>::PresetGradient(Office_2k::MsoGradientStyle Style/*[in]*/, 
                                        long Variant/*[in]*/, 
                                        Office_2k::MsoPresetGradientType PresetGradientType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetGradient"), DISPID(1636));
  TAutoArgs<3> _args;
  _args[1] = (int)Style /*[VT_USERDEFINED:0]*/;
  _args[2] = Variant /*[VT_I4:0]*/;
  _args[3] = (int)PresetGradientType /*[VT_USERDEFINED:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> Graph_2k::ChartColorFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall
ChartFillFormatDispT<T>::get_BackColor()
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(1638));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::ChartColorFormat* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::ChartColorFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall
ChartFillFormatDispT<T>::get_ForeColor()
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(1639));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::ChartColorFormat* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Office_2k::MsoGradientColorType /*[VT_USERDEFINED:0]*/ __fastcall
ChartFillFormatDispT<T>::get_GradientColorType()
{
  _TDispID _dispid(*this, OLETEXT("GradientColorType"), DISPID(1640));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Office_2k::MsoGradientColorType /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> float /*[VT_R4:0]*/ __fastcall
ChartFillFormatDispT<T>::get_GradientDegree()
{
  _TDispID _dispid(*this, OLETEXT("GradientDegree"), DISPID(1641));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Office_2k::MsoGradientStyle /*[VT_USERDEFINED:0]*/ __fastcall
ChartFillFormatDispT<T>::get_GradientStyle()
{
  _TDispID _dispid(*this, OLETEXT("GradientStyle"), DISPID(1642));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Office_2k::MsoGradientStyle /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
ChartFillFormatDispT<T>::get_GradientVariant()
{
  _TDispID _dispid(*this, OLETEXT("GradientVariant"), DISPID(1643));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Office_2k::MsoPatternType /*[VT_USERDEFINED:0]*/ __fastcall
ChartFillFormatDispT<T>::get_Pattern()
{
  _TDispID _dispid(*this, OLETEXT("Pattern"), DISPID(95));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Office_2k::MsoPatternType /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> Office_2k::MsoPresetGradientType /*[VT_USERDEFINED:0]*/ __fastcall
ChartFillFormatDispT<T>::get_PresetGradientType()
{
  _TDispID _dispid(*this, OLETEXT("PresetGradientType"), DISPID(1637));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Office_2k::MsoPresetGradientType /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> Office_2k::MsoPresetTexture /*[VT_USERDEFINED:0]*/ __fastcall
ChartFillFormatDispT<T>::get_PresetTexture()
{
  _TDispID _dispid(*this, OLETEXT("PresetTexture"), DISPID(1626));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Office_2k::MsoPresetTexture /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
ChartFillFormatDispT<T>::get_TextureName()
{
  _TDispID _dispid(*this, OLETEXT("TextureName"), DISPID(1644));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Office_2k::MsoTextureType /*[VT_USERDEFINED:0]*/ __fastcall
ChartFillFormatDispT<T>::get_TextureType()
{
  _TDispID _dispid(*this, OLETEXT("TextureType"), DISPID(1645));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Office_2k::MsoTextureType /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> Office_2k::MsoFillType /*[VT_USERDEFINED:0]*/ __fastcall
ChartFillFormatDispT<T>::get_Type()
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(108));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Office_2k::MsoFillType /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> Office_2k::MsoTriState /*[VT_USERDEFINED:0]*/ __fastcall
ChartFillFormatDispT<T>::get_Visible()
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(558));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Office_2k::MsoTriState /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartFillFormatDispT<T>::set_Visible(Office_2k::MsoTriState Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(558));
  TAutoArgs<1> _args;
  _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
  OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ChartColorFormat
// Flags:     (4096) Dispatchable
// GUID:      {0002441D-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall
ChartColorFormatDispT<T>::get_Application()
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(148));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall
ChartColorFormatDispT<T>::get_Creator()
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(149));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
ChartColorFormatDispT<T>::get_Parent()
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(150));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
ChartColorFormatDispT<T>::get_SchemeColor()
{
  _TDispID _dispid(*this, OLETEXT("SchemeColor"), DISPID(1646));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartColorFormatDispT<T>::set_SchemeColor(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SchemeColor"), DISPID(1646));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
ChartColorFormatDispT<T>::get_rgb()
{
  _TDispID _dispid(*this, OLETEXT("RGB"), DISPID(1055));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
ChartColorFormatDispT<T>::get__Default()
{
  _TDispID _dispid(*this, OLETEXT("_Default"), DISPID(0));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
ChartColorFormatDispT<T>::get_Type()
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(108));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

// *********************************************************************//
// DispIntf:  Axis
// Flags:     (4096) Dispatchable
// GUID:      {000208F9-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall
AxisDispT<T>::get_Application()
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(148));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall
AxisDispT<T>::get_Creator()
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(149));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
AxisDispT<T>::get_Parent()
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(150));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
AxisDispT<T>::get_AxisBetweenCategories()
{
  _TDispID _dispid(*this, OLETEXT("AxisBetweenCategories"), DISPID(45));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
AxisDispT<T>::set_AxisBetweenCategories(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AxisBetweenCategories"), DISPID(45));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::XlAxisGroup /*[VT_USERDEFINED:0]*/ __fastcall
AxisDispT<T>::get_AxisGroup()
{
  _TDispID _dispid(*this, OLETEXT("AxisGroup"), DISPID(47));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlAxisGroup /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> Graph_2k::AxisTitlePtr /*[VT_USERDEFINED:1]*/ __fastcall
AxisDispT<T>::get_AxisTitle()
{
  _TDispID _dispid(*this, OLETEXT("AxisTitle"), DISPID(82));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::AxisTitle* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall
AxisDispT<T>::get_Border()
{
  _TDispID _dispid(*this, OLETEXT("Border"), DISPID(128));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Border* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::XlAxisCrosses /*[VT_USERDEFINED:0]*/ __fastcall
AxisDispT<T>::get_Crosses()
{
  _TDispID _dispid(*this, OLETEXT("Crosses"), DISPID(42));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlAxisCrosses /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
AxisDispT<T>::set_Crosses(Graph_2k::XlAxisCrosses Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Crosses"), DISPID(42));
  TAutoArgs<1> _args;
  _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> double /*[VT_R8:0]*/ __fastcall
AxisDispT<T>::get_CrossesAt()
{
  _TDispID _dispid(*this, OLETEXT("CrossesAt"), DISPID(43));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
AxisDispT<T>::set_CrossesAt(double Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CrossesAt"), DISPID(43));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_R8:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
AxisDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(117));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
AxisDispT<T>::get_HasMajorGridlines()
{
  _TDispID _dispid(*this, OLETEXT("HasMajorGridlines"), DISPID(24));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
AxisDispT<T>::set_HasMajorGridlines(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasMajorGridlines"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
AxisDispT<T>::get_HasMinorGridlines()
{
  _TDispID _dispid(*this, OLETEXT("HasMinorGridlines"), DISPID(25));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
AxisDispT<T>::set_HasMinorGridlines(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasMinorGridlines"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
AxisDispT<T>::get_HasTitle()
{
  _TDispID _dispid(*this, OLETEXT("HasTitle"), DISPID(54));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
AxisDispT<T>::set_HasTitle(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasTitle"), DISPID(54));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::GridlinesPtr /*[VT_USERDEFINED:1]*/ __fastcall
AxisDispT<T>::get_MajorGridlines()
{
  _TDispID _dispid(*this, OLETEXT("MajorGridlines"), DISPID(89));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Gridlines* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::XlTickMark /*[VT_USERDEFINED:0]*/ __fastcall
AxisDispT<T>::get_MajorTickMark()
{
  _TDispID _dispid(*this, OLETEXT("MajorTickMark"), DISPID(26));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlTickMark /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
AxisDispT<T>::set_MajorTickMark(Graph_2k::XlTickMark Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MajorTickMark"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> double /*[VT_R8:0]*/ __fastcall
AxisDispT<T>::get_MajorUnit()
{
  _TDispID _dispid(*this, OLETEXT("MajorUnit"), DISPID(37));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
AxisDispT<T>::set_MajorUnit(double Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MajorUnit"), DISPID(37));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_R8:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
AxisDispT<T>::get_MajorUnitIsAuto()
{
  _TDispID _dispid(*this, OLETEXT("MajorUnitIsAuto"), DISPID(38));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
AxisDispT<T>::set_MajorUnitIsAuto(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MajorUnitIsAuto"), DISPID(38));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> double /*[VT_R8:0]*/ __fastcall
AxisDispT<T>::get_MaximumScale()
{
  _TDispID _dispid(*this, OLETEXT("MaximumScale"), DISPID(35));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
AxisDispT<T>::set_MaximumScale(double Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaximumScale"), DISPID(35));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_R8:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
AxisDispT<T>::get_MaximumScaleIsAuto()
{
  _TDispID _dispid(*this, OLETEXT("MaximumScaleIsAuto"), DISPID(36));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
AxisDispT<T>::set_MaximumScaleIsAuto(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaximumScaleIsAuto"), DISPID(36));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> double /*[VT_R8:0]*/ __fastcall
AxisDispT<T>::get_MinimumScale()
{
  _TDispID _dispid(*this, OLETEXT("MinimumScale"), DISPID(33));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
AxisDispT<T>::set_MinimumScale(double Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinimumScale"), DISPID(33));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_R8:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
AxisDispT<T>::get_MinimumScaleIsAuto()
{
  _TDispID _dispid(*this, OLETEXT("MinimumScaleIsAuto"), DISPID(34));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
AxisDispT<T>::set_MinimumScaleIsAuto(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinimumScaleIsAuto"), DISPID(34));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::GridlinesPtr /*[VT_USERDEFINED:1]*/ __fastcall
AxisDispT<T>::get_MinorGridlines()
{
  _TDispID _dispid(*this, OLETEXT("MinorGridlines"), DISPID(90));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Gridlines* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::XlTickMark /*[VT_USERDEFINED:0]*/ __fastcall
AxisDispT<T>::get_MinorTickMark()
{
  _TDispID _dispid(*this, OLETEXT("MinorTickMark"), DISPID(27));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlTickMark /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
AxisDispT<T>::set_MinorTickMark(Graph_2k::XlTickMark Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinorTickMark"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> double /*[VT_R8:0]*/ __fastcall
AxisDispT<T>::get_MinorUnit()
{
  _TDispID _dispid(*this, OLETEXT("MinorUnit"), DISPID(39));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
AxisDispT<T>::set_MinorUnit(double Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinorUnit"), DISPID(39));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_R8:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
AxisDispT<T>::get_MinorUnitIsAuto()
{
  _TDispID _dispid(*this, OLETEXT("MinorUnitIsAuto"), DISPID(40));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
AxisDispT<T>::set_MinorUnitIsAuto(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinorUnitIsAuto"), DISPID(40));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
AxisDispT<T>::get_ReversePlotOrder()
{
  _TDispID _dispid(*this, OLETEXT("ReversePlotOrder"), DISPID(44));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
AxisDispT<T>::set_ReversePlotOrder(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReversePlotOrder"), DISPID(44));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::XlScaleType /*[VT_USERDEFINED:0]*/ __fastcall
AxisDispT<T>::get_ScaleType()
{
  _TDispID _dispid(*this, OLETEXT("ScaleType"), DISPID(41));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlScaleType /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
AxisDispT<T>::set_ScaleType(Graph_2k::XlScaleType Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScaleType"), DISPID(41));
  TAutoArgs<1> _args;
  _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::XlTickLabelPosition /*[VT_USERDEFINED:0]*/ __fastcall
AxisDispT<T>::get_TickLabelPosition()
{
  _TDispID _dispid(*this, OLETEXT("TickLabelPosition"), DISPID(28));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlTickLabelPosition /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
AxisDispT<T>::set_TickLabelPosition(Graph_2k::XlTickLabelPosition Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TickLabelPosition"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::TickLabelsPtr /*[VT_USERDEFINED:1]*/ __fastcall
AxisDispT<T>::get_TickLabels()
{
  _TDispID _dispid(*this, OLETEXT("TickLabels"), DISPID(91));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::TickLabels* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
AxisDispT<T>::get_TickLabelSpacing()
{
  _TDispID _dispid(*this, OLETEXT("TickLabelSpacing"), DISPID(29));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
AxisDispT<T>::set_TickLabelSpacing(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TickLabelSpacing"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
AxisDispT<T>::get_TickMarkSpacing()
{
  _TDispID _dispid(*this, OLETEXT("TickMarkSpacing"), DISPID(31));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
AxisDispT<T>::set_TickMarkSpacing(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TickMarkSpacing"), DISPID(31));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::XlAxisType /*[VT_USERDEFINED:0]*/ __fastcall
AxisDispT<T>::get_Type()
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(108));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlAxisType /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
AxisDispT<T>::set_Type(Graph_2k::XlAxisType Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(108));
  TAutoArgs<1> _args;
  _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::XlTimeUnit /*[VT_USERDEFINED:0]*/ __fastcall
AxisDispT<T>::get_BaseUnit()
{
  _TDispID _dispid(*this, OLETEXT("BaseUnit"), DISPID(1647));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlTimeUnit /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
AxisDispT<T>::set_BaseUnit(Graph_2k::XlTimeUnit Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaseUnit"), DISPID(1647));
  TAutoArgs<1> _args;
  _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
AxisDispT<T>::get_BaseUnitIsAuto()
{
  _TDispID _dispid(*this, OLETEXT("BaseUnitIsAuto"), DISPID(1648));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
AxisDispT<T>::set_BaseUnitIsAuto(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaseUnitIsAuto"), DISPID(1648));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::XlTimeUnit /*[VT_USERDEFINED:0]*/ __fastcall
AxisDispT<T>::get_MajorUnitScale()
{
  _TDispID _dispid(*this, OLETEXT("MajorUnitScale"), DISPID(1649));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlTimeUnit /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
AxisDispT<T>::set_MajorUnitScale(Graph_2k::XlTimeUnit Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MajorUnitScale"), DISPID(1649));
  TAutoArgs<1> _args;
  _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::XlTimeUnit /*[VT_USERDEFINED:0]*/ __fastcall
AxisDispT<T>::get_MinorUnitScale()
{
  _TDispID _dispid(*this, OLETEXT("MinorUnitScale"), DISPID(1650));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlTimeUnit /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
AxisDispT<T>::set_MinorUnitScale(Graph_2k::XlTimeUnit Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinorUnitScale"), DISPID(1650));
  TAutoArgs<1> _args;
  _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::XlCategoryType /*[VT_USERDEFINED:0]*/ __fastcall
AxisDispT<T>::get_CategoryType()
{
  _TDispID _dispid(*this, OLETEXT("CategoryType"), DISPID(1651));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlCategoryType /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
AxisDispT<T>::set_CategoryType(Graph_2k::XlCategoryType Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CategoryType"), DISPID(1651));
  TAutoArgs<1> _args;
  _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> double /*[VT_R8:0]*/ __fastcall
AxisDispT<T>::get_Left()
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(127));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> double /*[VT_R8:0]*/ __fastcall
AxisDispT<T>::get_Top()
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(126));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> double /*[VT_R8:0]*/ __fastcall
AxisDispT<T>::get_Width()
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(122));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> double /*[VT_R8:0]*/ __fastcall
AxisDispT<T>::get_Height()
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(123));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::XlDisplayUnit /*[VT_USERDEFINED:0]*/ __fastcall
AxisDispT<T>::get_DisplayUnit()
{
  _TDispID _dispid(*this, OLETEXT("DisplayUnit"), DISPID(1779));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlDisplayUnit /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
AxisDispT<T>::set_DisplayUnit(Graph_2k::XlDisplayUnit Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayUnit"), DISPID(1779));
  TAutoArgs<1> _args;
  _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> double /*[VT_R8:0]*/ __fastcall
AxisDispT<T>::get_DisplayUnitCustom()
{
  _TDispID _dispid(*this, OLETEXT("DisplayUnitCustom"), DISPID(1780));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
AxisDispT<T>::set_DisplayUnitCustom(double Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayUnitCustom"), DISPID(1780));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_R8:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
AxisDispT<T>::get_HasDisplayUnitLabel()
{
  _TDispID _dispid(*this, OLETEXT("HasDisplayUnitLabel"), DISPID(1781));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
AxisDispT<T>::set_HasDisplayUnitLabel(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasDisplayUnitLabel"), DISPID(1781));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::DisplayUnitLabelPtr /*[VT_USERDEFINED:1]*/ __fastcall
AxisDispT<T>::get_DisplayUnitLabel()
{
  _TDispID _dispid(*this, OLETEXT("DisplayUnitLabel"), DISPID(1782));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::DisplayUnitLabel* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

// *********************************************************************//
// DispIntf:  ChartTitle
// Flags:     (4096) Dispatchable
// GUID:      {000208F8-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall
ChartTitleDispT<T>::get_Application()
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(148));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall
ChartTitleDispT<T>::get_Creator()
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(149));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
ChartTitleDispT<T>::get_Parent()
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(150));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
ChartTitleDispT<T>::get_Name()
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(110));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall
ChartTitleDispT<T>::get_Border()
{
  _TDispID _dispid(*this, OLETEXT("Border"), DISPID(128));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Border* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
ChartTitleDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(117));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::InteriorPtr /*[VT_USERDEFINED:1]*/ __fastcall
ChartTitleDispT<T>::get_Interior()
{
  _TDispID _dispid(*this, OLETEXT("Interior"), DISPID(129));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Interior* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::ChartFillFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall
ChartTitleDispT<T>::get_Fill()
{
  _TDispID _dispid(*this, OLETEXT("Fill"), DISPID(1663));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::ChartFillFormat* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
ChartTitleDispT<T>::get_Caption()
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(139));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartTitleDispT<T>::set_Caption(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(139));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::FontPtr /*[VT_USERDEFINED:1]*/ __fastcall
ChartTitleDispT<T>::get_Font()
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(146));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Font* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
ChartTitleDispT<T>::get_HorizontalAlignment()
{
  _TDispID _dispid(*this, OLETEXT("HorizontalAlignment"), DISPID(136));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartTitleDispT<T>::set_HorizontalAlignment(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HorizontalAlignment"), DISPID(136));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> double /*[VT_R8:0]*/ __fastcall
ChartTitleDispT<T>::get_Left()
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(127));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartTitleDispT<T>::set_Left(double Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(127));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_R8:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
ChartTitleDispT<T>::get_Orientation()
{
  _TDispID _dispid(*this, OLETEXT("Orientation"), DISPID(134));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartTitleDispT<T>::set_Orientation(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Orientation"), DISPID(134));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
ChartTitleDispT<T>::get_Shadow()
{
  _TDispID _dispid(*this, OLETEXT("Shadow"), DISPID(103));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartTitleDispT<T>::set_Shadow(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Shadow"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
ChartTitleDispT<T>::get_Text()
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(138));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartTitleDispT<T>::set_Text(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(138));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> double /*[VT_R8:0]*/ __fastcall
ChartTitleDispT<T>::get_Top()
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(126));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartTitleDispT<T>::set_Top(double Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(126));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_R8:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
ChartTitleDispT<T>::get_VerticalAlignment()
{
  _TDispID _dispid(*this, OLETEXT("VerticalAlignment"), DISPID(137));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartTitleDispT<T>::set_VerticalAlignment(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("VerticalAlignment"), DISPID(137));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
ChartTitleDispT<T>::get_ReadingOrder()
{
  _TDispID _dispid(*this, OLETEXT("ReadingOrder"), DISPID(975));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartTitleDispT<T>::set_ReadingOrder(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReadingOrder"), DISPID(975));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
ChartTitleDispT<T>::get_AutoScaleFont()
{
  _TDispID _dispid(*this, OLETEXT("AutoScaleFont"), DISPID(1525));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartTitleDispT<T>::set_AutoScaleFont(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoScaleFont"), DISPID(1525));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  AxisTitle
// Flags:     (4096) Dispatchable
// GUID:      {000208F7-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall
AxisTitleDispT<T>::get_Application()
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(148));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall
AxisTitleDispT<T>::get_Creator()
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(149));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
AxisTitleDispT<T>::get_Parent()
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(150));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
AxisTitleDispT<T>::get_Name()
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(110));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall
AxisTitleDispT<T>::get_Border()
{
  _TDispID _dispid(*this, OLETEXT("Border"), DISPID(128));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Border* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
AxisTitleDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(117));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::InteriorPtr /*[VT_USERDEFINED:1]*/ __fastcall
AxisTitleDispT<T>::get_Interior()
{
  _TDispID _dispid(*this, OLETEXT("Interior"), DISPID(129));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Interior* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::ChartFillFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall
AxisTitleDispT<T>::get_Fill()
{
  _TDispID _dispid(*this, OLETEXT("Fill"), DISPID(1663));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::ChartFillFormat* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
AxisTitleDispT<T>::get_Caption()
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(139));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
AxisTitleDispT<T>::set_Caption(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(139));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::FontPtr /*[VT_USERDEFINED:1]*/ __fastcall
AxisTitleDispT<T>::get_Font()
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(146));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Font* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
AxisTitleDispT<T>::get_HorizontalAlignment()
{
  _TDispID _dispid(*this, OLETEXT("HorizontalAlignment"), DISPID(136));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
AxisTitleDispT<T>::set_HorizontalAlignment(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HorizontalAlignment"), DISPID(136));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> double /*[VT_R8:0]*/ __fastcall
AxisTitleDispT<T>::get_Left()
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(127));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
AxisTitleDispT<T>::set_Left(double Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(127));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_R8:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
AxisTitleDispT<T>::get_Orientation()
{
  _TDispID _dispid(*this, OLETEXT("Orientation"), DISPID(134));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
AxisTitleDispT<T>::set_Orientation(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Orientation"), DISPID(134));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
AxisTitleDispT<T>::get_Shadow()
{
  _TDispID _dispid(*this, OLETEXT("Shadow"), DISPID(103));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
AxisTitleDispT<T>::set_Shadow(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Shadow"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
AxisTitleDispT<T>::get_Text()
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(138));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
AxisTitleDispT<T>::set_Text(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(138));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> double /*[VT_R8:0]*/ __fastcall
AxisTitleDispT<T>::get_Top()
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(126));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
AxisTitleDispT<T>::set_Top(double Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(126));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_R8:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
AxisTitleDispT<T>::get_VerticalAlignment()
{
  _TDispID _dispid(*this, OLETEXT("VerticalAlignment"), DISPID(137));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
AxisTitleDispT<T>::set_VerticalAlignment(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("VerticalAlignment"), DISPID(137));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
AxisTitleDispT<T>::get_ReadingOrder()
{
  _TDispID _dispid(*this, OLETEXT("ReadingOrder"), DISPID(975));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
AxisTitleDispT<T>::set_ReadingOrder(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReadingOrder"), DISPID(975));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
AxisTitleDispT<T>::get_AutoScaleFont()
{
  _TDispID _dispid(*this, OLETEXT("AutoScaleFont"), DISPID(1525));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
AxisTitleDispT<T>::set_AutoScaleFont(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoScaleFont"), DISPID(1525));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ChartGroup
// Flags:     (4096) Dispatchable
// GUID:      {000208F6-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall
ChartGroupDispT<T>::get_Application()
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(148));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall
ChartGroupDispT<T>::get_Creator()
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(149));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
ChartGroupDispT<T>::get_Parent()
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(150));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::XlAxisGroup /*[VT_USERDEFINED:0]*/ __fastcall
ChartGroupDispT<T>::get_AxisGroup()
{
  _TDispID _dispid(*this, OLETEXT("AxisGroup"), DISPID(47));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlAxisGroup /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartGroupDispT<T>::set_AxisGroup(Graph_2k::XlAxisGroup Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AxisGroup"), DISPID(47));
  TAutoArgs<1> _args;
  _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
ChartGroupDispT<T>::get_DoughnutHoleSize()
{
  _TDispID _dispid(*this, OLETEXT("DoughnutHoleSize"), DISPID(1126));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartGroupDispT<T>::set_DoughnutHoleSize(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DoughnutHoleSize"), DISPID(1126));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::DownBarsPtr /*[VT_USERDEFINED:1]*/ __fastcall
ChartGroupDispT<T>::get_DownBars()
{
  _TDispID _dispid(*this, OLETEXT("DownBars"), DISPID(141));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::DownBars* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::DropLinesPtr /*[VT_USERDEFINED:1]*/ __fastcall
ChartGroupDispT<T>::get_DropLines()
{
  _TDispID _dispid(*this, OLETEXT("DropLines"), DISPID(142));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::DropLines* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
ChartGroupDispT<T>::get_FirstSliceAngle()
{
  _TDispID _dispid(*this, OLETEXT("FirstSliceAngle"), DISPID(63));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartGroupDispT<T>::set_FirstSliceAngle(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FirstSliceAngle"), DISPID(63));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
ChartGroupDispT<T>::get_GapWidth()
{
  _TDispID _dispid(*this, OLETEXT("GapWidth"), DISPID(51));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartGroupDispT<T>::set_GapWidth(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GapWidth"), DISPID(51));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
ChartGroupDispT<T>::get_HasDropLines()
{
  _TDispID _dispid(*this, OLETEXT("HasDropLines"), DISPID(61));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartGroupDispT<T>::set_HasDropLines(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasDropLines"), DISPID(61));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
ChartGroupDispT<T>::get_HasHiLoLines()
{
  _TDispID _dispid(*this, OLETEXT("HasHiLoLines"), DISPID(62));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartGroupDispT<T>::set_HasHiLoLines(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasHiLoLines"), DISPID(62));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
ChartGroupDispT<T>::get_HasRadarAxisLabels()
{
  _TDispID _dispid(*this, OLETEXT("HasRadarAxisLabels"), DISPID(64));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartGroupDispT<T>::set_HasRadarAxisLabels(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasRadarAxisLabels"), DISPID(64));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
ChartGroupDispT<T>::get_HasSeriesLines()
{
  _TDispID _dispid(*this, OLETEXT("HasSeriesLines"), DISPID(65));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartGroupDispT<T>::set_HasSeriesLines(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasSeriesLines"), DISPID(65));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
ChartGroupDispT<T>::get_HasUpDownBars()
{
  _TDispID _dispid(*this, OLETEXT("HasUpDownBars"), DISPID(66));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartGroupDispT<T>::set_HasUpDownBars(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasUpDownBars"), DISPID(66));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::HiLoLinesPtr /*[VT_USERDEFINED:1]*/ __fastcall
ChartGroupDispT<T>::get_HiLoLines()
{
  _TDispID _dispid(*this, OLETEXT("HiLoLines"), DISPID(143));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::HiLoLines* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
ChartGroupDispT<T>::get_Index()
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(486));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
ChartGroupDispT<T>::get_Overlap()
{
  _TDispID _dispid(*this, OLETEXT("Overlap"), DISPID(56));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartGroupDispT<T>::set_Overlap(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Overlap"), DISPID(56));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::TickLabelsPtr /*[VT_USERDEFINED:1]*/ __fastcall
ChartGroupDispT<T>::get_RadarAxisLabels()
{
  _TDispID _dispid(*this, OLETEXT("RadarAxisLabels"), DISPID(144));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::TickLabels* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
ChartGroupDispT<T>::SeriesCollection(TVariantInParam Index/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("SeriesCollection"), DISPID(68));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::SeriesLinesPtr /*[VT_USERDEFINED:1]*/ __fastcall
ChartGroupDispT<T>::get_SeriesLines()
{
  _TDispID _dispid(*this, OLETEXT("SeriesLines"), DISPID(145));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::SeriesLines* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
ChartGroupDispT<T>::get_SubType()
{
  _TDispID _dispid(*this, OLETEXT("SubType"), DISPID(109));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartGroupDispT<T>::set_SubType(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SubType"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
ChartGroupDispT<T>::get_Type()
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(108));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartGroupDispT<T>::set_Type(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(108));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::UpBarsPtr /*[VT_USERDEFINED:1]*/ __fastcall
ChartGroupDispT<T>::get_UpBars()
{
  _TDispID _dispid(*this, OLETEXT("UpBars"), DISPID(140));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::UpBars* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
ChartGroupDispT<T>::get_VaryByCategories()
{
  _TDispID _dispid(*this, OLETEXT("VaryByCategories"), DISPID(60));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartGroupDispT<T>::set_VaryByCategories(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("VaryByCategories"), DISPID(60));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::XlSizeRepresents /*[VT_USERDEFINED:0]*/ __fastcall
ChartGroupDispT<T>::get_SizeRepresents()
{
  _TDispID _dispid(*this, OLETEXT("SizeRepresents"), DISPID(1652));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlSizeRepresents /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartGroupDispT<T>::set_SizeRepresents(Graph_2k::XlSizeRepresents Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SizeRepresents"), DISPID(1652));
  TAutoArgs<1> _args;
  _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
ChartGroupDispT<T>::get_BubbleScale()
{
  _TDispID _dispid(*this, OLETEXT("BubbleScale"), DISPID(1653));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartGroupDispT<T>::set_BubbleScale(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BubbleScale"), DISPID(1653));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
ChartGroupDispT<T>::get_ShowNegativeBubbles()
{
  _TDispID _dispid(*this, OLETEXT("ShowNegativeBubbles"), DISPID(1654));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartGroupDispT<T>::set_ShowNegativeBubbles(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowNegativeBubbles"), DISPID(1654));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::XlChartSplitType /*[VT_USERDEFINED:0]*/ __fastcall
ChartGroupDispT<T>::get_SplitType()
{
  _TDispID _dispid(*this, OLETEXT("SplitType"), DISPID(1655));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlChartSplitType /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartGroupDispT<T>::set_SplitType(Graph_2k::XlChartSplitType Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SplitType"), DISPID(1655));
  TAutoArgs<1> _args;
  _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
ChartGroupDispT<T>::get_SplitValue()
{
  _TDispID _dispid(*this, OLETEXT("SplitValue"), DISPID(1656));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartGroupDispT<T>::set_SplitValue(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SplitValue"), DISPID(1656));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
ChartGroupDispT<T>::get_SecondPlotSize()
{
  _TDispID _dispid(*this, OLETEXT("SecondPlotSize"), DISPID(1657));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartGroupDispT<T>::set_SecondPlotSize(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SecondPlotSize"), DISPID(1657));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
ChartGroupDispT<T>::get_Has3DShading()
{
  _TDispID _dispid(*this, OLETEXT("Has3DShading"), DISPID(1658));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartGroupDispT<T>::set_Has3DShading(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Has3DShading"), DISPID(1658));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ChartGroups
// Flags:     (4096) Dispatchable
// GUID:      {000208F5-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall
ChartGroupsDispT<T>::get_Application()
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(148));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall
ChartGroupsDispT<T>::get_Creator()
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(149));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
ChartGroupsDispT<T>::get_Parent()
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(150));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
ChartGroupsDispT<T>::get_Count()
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(118));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::ChartGroupPtr /*[VT_USERDEFINED:1]*/ __fastcall
ChartGroupsDispT<T>::Item(TVariantInParam Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(170));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  OleFunction(_dispid, _args);
  return (Graph_2k::ChartGroup* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> LPUNKNOWN /*[VT_UNKNOWN:0]*/ __fastcall
ChartGroupsDispT<T>::_NewEnum()
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

// *********************************************************************//
// DispIntf:  Axes
// Flags:     (4096) Dispatchable
// GUID:      {000208F4-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall
AxesDispT<T>::get_Application()
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(148));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall
AxesDispT<T>::get_Creator()
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(149));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
AxesDispT<T>::get_Parent()
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(150));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
AxesDispT<T>::get_Count()
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(118));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::AxisPtr /*[VT_USERDEFINED:1]*/ __fastcall
AxesDispT<T>::Item(Graph_2k::XlAxisType Type/*[in]*/, 
                   Graph_2k::XlAxisGroup AxisGroup/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(170));
  TAutoArgs<2> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  _args[2] = (int)AxisGroup /*[VT_USERDEFINED:0]*/;
  OleFunction(_dispid, _args);
  return (Graph_2k::Axis* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> LPUNKNOWN /*[VT_UNKNOWN:0]*/ __fastcall
AxesDispT<T>::_NewEnum()
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

// *********************************************************************//
// DispIntf:  Points
// Flags:     (4096) Dispatchable
// GUID:      {000208F2-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall
PointsDispT<T>::get_Application()
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(148));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall
PointsDispT<T>::get_Creator()
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(149));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
PointsDispT<T>::get_Parent()
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(150));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
PointsDispT<T>::get_Count()
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(118));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::PointPtr /*[VT_USERDEFINED:1]*/ __fastcall
PointsDispT<T>::Item(long Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(170));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return (Graph_2k::Point* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> LPUNKNOWN /*[VT_UNKNOWN:0]*/ __fastcall
PointsDispT<T>::_NewEnum()
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

// *********************************************************************//
// DispIntf:  Point
// Flags:     (4096) Dispatchable
// GUID:      {000208F1-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall
PointDispT<T>::get_Application()
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(148));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall
PointDispT<T>::get_Creator()
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(149));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
PointDispT<T>::get_Parent()
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(150));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
PointDispT<T>::ApplyDataLabels(Graph_2k::XlDataLabelsType Type/*[in,def,opt]*/, 
                               TVariantInParam LegendKey/*[in,opt]*/, 
                               TVariantInParam AutoText/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("ApplyDataLabels"), DISPID(151));
  TAutoArgs<3> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  _args[2] = LegendKey /*[VT_VARIANT:0]*/;
  _args[3] = AutoText /*[VT_VARIANT:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall
PointDispT<T>::get_Border()
{
  _TDispID _dispid(*this, OLETEXT("Border"), DISPID(128));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Border* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
PointDispT<T>::ClearFormats()
{
  _TDispID _dispid(*this, OLETEXT("ClearFormats"), DISPID(112));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::DataLabelPtr /*[VT_USERDEFINED:1]*/ __fastcall
PointDispT<T>::get_DataLabel()
{
  _TDispID _dispid(*this, OLETEXT("DataLabel"), DISPID(158));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::DataLabel* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
PointDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(117));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
PointDispT<T>::get_Explosion()
{
  _TDispID _dispid(*this, OLETEXT("Explosion"), DISPID(182));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
PointDispT<T>::set_Explosion(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Explosion"), DISPID(182));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
PointDispT<T>::get_HasDataLabel()
{
  _TDispID _dispid(*this, OLETEXT("HasDataLabel"), DISPID(77));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
PointDispT<T>::set_HasDataLabel(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasDataLabel"), DISPID(77));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::InteriorPtr /*[VT_USERDEFINED:1]*/ __fastcall
PointDispT<T>::get_Interior()
{
  _TDispID _dispid(*this, OLETEXT("Interior"), DISPID(129));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Interior* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
PointDispT<T>::get_InvertIfNegative()
{
  _TDispID _dispid(*this, OLETEXT("InvertIfNegative"), DISPID(132));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
PointDispT<T>::set_InvertIfNegative(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InvertIfNegative"), DISPID(132));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
PointDispT<T>::get_MarkerBackgroundColor()
{
  _TDispID _dispid(*this, OLETEXT("MarkerBackgroundColor"), DISPID(73));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
PointDispT<T>::set_MarkerBackgroundColor(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarkerBackgroundColor"), DISPID(73));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::XlColorIndex /*[VT_USERDEFINED:0]*/ __fastcall
PointDispT<T>::get_MarkerBackgroundColorIndex()
{
  _TDispID _dispid(*this, OLETEXT("MarkerBackgroundColorIndex"), DISPID(74));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlColorIndex /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
PointDispT<T>::set_MarkerBackgroundColorIndex(Graph_2k::XlColorIndex Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarkerBackgroundColorIndex"), DISPID(74));
  TAutoArgs<1> _args;
  _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
PointDispT<T>::get_MarkerForegroundColor()
{
  _TDispID _dispid(*this, OLETEXT("MarkerForegroundColor"), DISPID(75));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
PointDispT<T>::set_MarkerForegroundColor(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarkerForegroundColor"), DISPID(75));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::XlColorIndex /*[VT_USERDEFINED:0]*/ __fastcall
PointDispT<T>::get_MarkerForegroundColorIndex()
{
  _TDispID _dispid(*this, OLETEXT("MarkerForegroundColorIndex"), DISPID(76));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlColorIndex /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
PointDispT<T>::set_MarkerForegroundColorIndex(Graph_2k::XlColorIndex Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarkerForegroundColorIndex"), DISPID(76));
  TAutoArgs<1> _args;
  _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
PointDispT<T>::get_MarkerSize()
{
  _TDispID _dispid(*this, OLETEXT("MarkerSize"), DISPID(231));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
PointDispT<T>::set_MarkerSize(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarkerSize"), DISPID(231));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::XlMarkerStyle /*[VT_USERDEFINED:0]*/ __fastcall
PointDispT<T>::get_MarkerStyle()
{
  _TDispID _dispid(*this, OLETEXT("MarkerStyle"), DISPID(72));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlMarkerStyle /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
PointDispT<T>::set_MarkerStyle(Graph_2k::XlMarkerStyle Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarkerStyle"), DISPID(72));
  TAutoArgs<1> _args;
  _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::XlChartPictureType /*[VT_USERDEFINED:0]*/ __fastcall
PointDispT<T>::get_PictureType()
{
  _TDispID _dispid(*this, OLETEXT("PictureType"), DISPID(161));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlChartPictureType /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
PointDispT<T>::set_PictureType(Graph_2k::XlChartPictureType Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureType"), DISPID(161));
  TAutoArgs<1> _args;
  _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
PointDispT<T>::get_PictureUnit()
{
  _TDispID _dispid(*this, OLETEXT("PictureUnit"), DISPID(162));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
PointDispT<T>::set_PictureUnit(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureUnit"), DISPID(162));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
PointDispT<T>::get_ApplyPictToSides()
{
  _TDispID _dispid(*this, OLETEXT("ApplyPictToSides"), DISPID(1659));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
PointDispT<T>::set_ApplyPictToSides(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ApplyPictToSides"), DISPID(1659));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
PointDispT<T>::get_ApplyPictToFront()
{
  _TDispID _dispid(*this, OLETEXT("ApplyPictToFront"), DISPID(1660));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
PointDispT<T>::set_ApplyPictToFront(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ApplyPictToFront"), DISPID(1660));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
PointDispT<T>::get_ApplyPictToEnd()
{
  _TDispID _dispid(*this, OLETEXT("ApplyPictToEnd"), DISPID(1661));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
PointDispT<T>::set_ApplyPictToEnd(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ApplyPictToEnd"), DISPID(1661));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
PointDispT<T>::get_Shadow()
{
  _TDispID _dispid(*this, OLETEXT("Shadow"), DISPID(103));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
PointDispT<T>::set_Shadow(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Shadow"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
PointDispT<T>::get_SecondaryPlot()
{
  _TDispID _dispid(*this, OLETEXT("SecondaryPlot"), DISPID(1662));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
PointDispT<T>::set_SecondaryPlot(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SecondaryPlot"), DISPID(1662));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::ChartFillFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall
PointDispT<T>::get_Fill()
{
  _TDispID _dispid(*this, OLETEXT("Fill"), DISPID(1663));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::ChartFillFormat* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

// *********************************************************************//
// DispIntf:  Series
// Flags:     (4096) Dispatchable
// GUID:      {000208F0-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall
SeriesDispT<T>::get_Application()
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(148));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall
SeriesDispT<T>::get_Creator()
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(149));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
SeriesDispT<T>::get_Parent()
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(150));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
SeriesDispT<T>::ApplyDataLabels(Graph_2k::XlDataLabelsType Type/*[in,def,opt]*/, 
                                TVariantInParam LegendKey/*[in,opt]*/, 
                                TVariantInParam AutoText/*[in,opt]*/, 
                                TVariantInParam HasLeaderLines/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("ApplyDataLabels"), DISPID(151));
  TAutoArgs<4> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  _args[2] = LegendKey /*[VT_VARIANT:0]*/;
  _args[3] = AutoText /*[VT_VARIANT:0]*/;
  _args[4] = HasLeaderLines /*[VT_VARIANT:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::XlAxisGroup /*[VT_USERDEFINED:0]*/ __fastcall
SeriesDispT<T>::get_AxisGroup()
{
  _TDispID _dispid(*this, OLETEXT("AxisGroup"), DISPID(47));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlAxisGroup /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
SeriesDispT<T>::set_AxisGroup(Graph_2k::XlAxisGroup Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AxisGroup"), DISPID(47));
  TAutoArgs<1> _args;
  _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall
SeriesDispT<T>::get_Border()
{
  _TDispID _dispid(*this, OLETEXT("Border"), DISPID(128));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Border* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
SeriesDispT<T>::ClearFormats()
{
  _TDispID _dispid(*this, OLETEXT("ClearFormats"), DISPID(112));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
SeriesDispT<T>::DataLabels(TVariantInParam Index/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataLabels"), DISPID(157));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
SeriesDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(117));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
SeriesDispT<T>::ErrorBar(Graph_2k::XlErrorBarDirection Direction/*[in]*/, 
                         Graph_2k::XlErrorBarInclude Include/*[in]*/, 
                         Graph_2k::XlErrorBarType Type/*[in]*/, TVariantInParam Amount/*[in,opt]*/, 
                         TVariantInParam MinusValues/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrorBar"), DISPID(152));
  TAutoArgs<5> _args;
  _args[1] = (int)Direction /*[VT_USERDEFINED:0]*/;
  _args[2] = (int)Include /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)Type /*[VT_USERDEFINED:0]*/;
  _args[4] = Amount /*[VT_VARIANT:0]*/;
  _args[5] = MinusValues /*[VT_VARIANT:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::ErrorBarsPtr /*[VT_USERDEFINED:1]*/ __fastcall
SeriesDispT<T>::get_ErrorBars()
{
  _TDispID _dispid(*this, OLETEXT("ErrorBars"), DISPID(159));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::ErrorBars* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
SeriesDispT<T>::get_Explosion()
{
  _TDispID _dispid(*this, OLETEXT("Explosion"), DISPID(182));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
SeriesDispT<T>::set_Explosion(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Explosion"), DISPID(182));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
SeriesDispT<T>::get_HasDataLabels()
{
  _TDispID _dispid(*this, OLETEXT("HasDataLabels"), DISPID(78));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
SeriesDispT<T>::set_HasDataLabels(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasDataLabels"), DISPID(78));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
SeriesDispT<T>::get_HasErrorBars()
{
  _TDispID _dispid(*this, OLETEXT("HasErrorBars"), DISPID(160));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
SeriesDispT<T>::set_HasErrorBars(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasErrorBars"), DISPID(160));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::InteriorPtr /*[VT_USERDEFINED:1]*/ __fastcall
SeriesDispT<T>::get_Interior()
{
  _TDispID _dispid(*this, OLETEXT("Interior"), DISPID(129));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Interior* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::ChartFillFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall
SeriesDispT<T>::get_Fill()
{
  _TDispID _dispid(*this, OLETEXT("Fill"), DISPID(1663));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::ChartFillFormat* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
SeriesDispT<T>::get_InvertIfNegative()
{
  _TDispID _dispid(*this, OLETEXT("InvertIfNegative"), DISPID(132));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
SeriesDispT<T>::set_InvertIfNegative(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InvertIfNegative"), DISPID(132));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
SeriesDispT<T>::get_MarkerBackgroundColor()
{
  _TDispID _dispid(*this, OLETEXT("MarkerBackgroundColor"), DISPID(73));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
SeriesDispT<T>::set_MarkerBackgroundColor(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarkerBackgroundColor"), DISPID(73));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::XlColorIndex /*[VT_USERDEFINED:0]*/ __fastcall
SeriesDispT<T>::get_MarkerBackgroundColorIndex()
{
  _TDispID _dispid(*this, OLETEXT("MarkerBackgroundColorIndex"), DISPID(74));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlColorIndex /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
SeriesDispT<T>::set_MarkerBackgroundColorIndex(Graph_2k::XlColorIndex Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarkerBackgroundColorIndex"), DISPID(74));
  TAutoArgs<1> _args;
  _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
SeriesDispT<T>::get_MarkerForegroundColor()
{
  _TDispID _dispid(*this, OLETEXT("MarkerForegroundColor"), DISPID(75));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
SeriesDispT<T>::set_MarkerForegroundColor(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarkerForegroundColor"), DISPID(75));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::XlColorIndex /*[VT_USERDEFINED:0]*/ __fastcall
SeriesDispT<T>::get_MarkerForegroundColorIndex()
{
  _TDispID _dispid(*this, OLETEXT("MarkerForegroundColorIndex"), DISPID(76));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlColorIndex /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
SeriesDispT<T>::set_MarkerForegroundColorIndex(Graph_2k::XlColorIndex Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarkerForegroundColorIndex"), DISPID(76));
  TAutoArgs<1> _args;
  _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
SeriesDispT<T>::get_MarkerSize()
{
  _TDispID _dispid(*this, OLETEXT("MarkerSize"), DISPID(231));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
SeriesDispT<T>::set_MarkerSize(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarkerSize"), DISPID(231));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::XlMarkerStyle /*[VT_USERDEFINED:0]*/ __fastcall
SeriesDispT<T>::get_MarkerStyle()
{
  _TDispID _dispid(*this, OLETEXT("MarkerStyle"), DISPID(72));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlMarkerStyle /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
SeriesDispT<T>::set_MarkerStyle(Graph_2k::XlMarkerStyle Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarkerStyle"), DISPID(72));
  TAutoArgs<1> _args;
  _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::XlChartPictureType /*[VT_USERDEFINED:0]*/ __fastcall
SeriesDispT<T>::get_PictureType()
{
  _TDispID _dispid(*this, OLETEXT("PictureType"), DISPID(161));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlChartPictureType /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
SeriesDispT<T>::set_PictureType(Graph_2k::XlChartPictureType Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureType"), DISPID(161));
  TAutoArgs<1> _args;
  _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
SeriesDispT<T>::get_PictureUnit()
{
  _TDispID _dispid(*this, OLETEXT("PictureUnit"), DISPID(162));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
SeriesDispT<T>::set_PictureUnit(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureUnit"), DISPID(162));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
SeriesDispT<T>::Points(TVariantInParam Index/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Points"), DISPID(70));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
SeriesDispT<T>::get_Smooth()
{
  _TDispID _dispid(*this, OLETEXT("Smooth"), DISPID(163));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
SeriesDispT<T>::set_Smooth(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Smooth"), DISPID(163));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
SeriesDispT<T>::Trendlines(TVariantInParam Index/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Trendlines"), DISPID(154));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
SeriesDispT<T>::get_Type()
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(108));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
SeriesDispT<T>::set_Type(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(108));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::XlChartType /*[VT_USERDEFINED:0]*/ __fastcall
SeriesDispT<T>::get_ChartType()
{
  _TDispID _dispid(*this, OLETEXT("ChartType"), DISPID(1400));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlChartType /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
SeriesDispT<T>::set_ChartType(Graph_2k::XlChartType Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChartType"), DISPID(1400));
  TAutoArgs<1> _args;
  _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
SeriesDispT<T>::ApplyCustomType(Graph_2k::XlChartType ChartType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ApplyCustomType"), DISPID(1401));
  TAutoArgs<1> _args;
  _args[1] = (int)ChartType /*[VT_USERDEFINED:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> Graph_2k::XlBarShape /*[VT_USERDEFINED:0]*/ __fastcall
SeriesDispT<T>::get_BarShape()
{
  _TDispID _dispid(*this, OLETEXT("BarShape"), DISPID(1403));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlBarShape /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
SeriesDispT<T>::set_BarShape(Graph_2k::XlBarShape Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BarShape"), DISPID(1403));
  TAutoArgs<1> _args;
  _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
SeriesDispT<T>::get_ApplyPictToSides()
{
  _TDispID _dispid(*this, OLETEXT("ApplyPictToSides"), DISPID(1659));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
SeriesDispT<T>::set_ApplyPictToSides(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ApplyPictToSides"), DISPID(1659));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
SeriesDispT<T>::get_ApplyPictToFront()
{
  _TDispID _dispid(*this, OLETEXT("ApplyPictToFront"), DISPID(1660));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
SeriesDispT<T>::set_ApplyPictToFront(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ApplyPictToFront"), DISPID(1660));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
SeriesDispT<T>::get_ApplyPictToEnd()
{
  _TDispID _dispid(*this, OLETEXT("ApplyPictToEnd"), DISPID(1661));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
SeriesDispT<T>::set_ApplyPictToEnd(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ApplyPictToEnd"), DISPID(1661));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
SeriesDispT<T>::get_Has3DEffect()
{
  _TDispID _dispid(*this, OLETEXT("Has3DEffect"), DISPID(1665));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
SeriesDispT<T>::set_Has3DEffect(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Has3DEffect"), DISPID(1665));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
SeriesDispT<T>::get_Shadow()
{
  _TDispID _dispid(*this, OLETEXT("Shadow"), DISPID(103));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
SeriesDispT<T>::set_Shadow(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Shadow"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
SeriesDispT<T>::get_HasLeaderLines()
{
  _TDispID _dispid(*this, OLETEXT("HasLeaderLines"), DISPID(1394));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
SeriesDispT<T>::set_HasLeaderLines(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasLeaderLines"), DISPID(1394));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::LeaderLinesPtr /*[VT_USERDEFINED:1]*/ __fastcall
SeriesDispT<T>::get_LeaderLines()
{
  _TDispID _dispid(*this, OLETEXT("LeaderLines"), DISPID(1666));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::LeaderLines* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

// *********************************************************************//
// DispIntf:  SeriesCollection
// Flags:     (4096) Dispatchable
// GUID:      {000208EF-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall
SeriesCollectionDispT<T>::get_Application()
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(148));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall
SeriesCollectionDispT<T>::get_Creator()
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(149));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
SeriesCollectionDispT<T>::get_Parent()
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(150));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
SeriesCollectionDispT<T>::get_Count()
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(118));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::SeriesPtr /*[VT_USERDEFINED:1]*/ __fastcall
SeriesCollectionDispT<T>::Item(TVariantInParam Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(170));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  OleFunction(_dispid, _args);
  return (Graph_2k::Series* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> LPUNKNOWN /*[VT_UNKNOWN:0]*/ __fastcall
SeriesCollectionDispT<T>::_NewEnum()
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

// *********************************************************************//
// DispIntf:  DataLabel
// Flags:     (4096) Dispatchable
// GUID:      {000208E9-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall
DataLabelDispT<T>::get_Application()
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(148));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall
DataLabelDispT<T>::get_Creator()
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(149));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
DataLabelDispT<T>::get_Parent()
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(150));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
DataLabelDispT<T>::get_Name()
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(110));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall
DataLabelDispT<T>::get_Border()
{
  _TDispID _dispid(*this, OLETEXT("Border"), DISPID(128));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Border* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
DataLabelDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(117));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::InteriorPtr /*[VT_USERDEFINED:1]*/ __fastcall
DataLabelDispT<T>::get_Interior()
{
  _TDispID _dispid(*this, OLETEXT("Interior"), DISPID(129));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Interior* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::ChartFillFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall
DataLabelDispT<T>::get_Fill()
{
  _TDispID _dispid(*this, OLETEXT("Fill"), DISPID(1663));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::ChartFillFormat* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
DataLabelDispT<T>::get_Caption()
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(139));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DataLabelDispT<T>::set_Caption(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(139));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::FontPtr /*[VT_USERDEFINED:1]*/ __fastcall
DataLabelDispT<T>::get_Font()
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(146));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Font* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
DataLabelDispT<T>::get_HorizontalAlignment()
{
  _TDispID _dispid(*this, OLETEXT("HorizontalAlignment"), DISPID(136));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DataLabelDispT<T>::set_HorizontalAlignment(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HorizontalAlignment"), DISPID(136));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> double /*[VT_R8:0]*/ __fastcall
DataLabelDispT<T>::get_Left()
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(127));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DataLabelDispT<T>::set_Left(double Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(127));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_R8:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
DataLabelDispT<T>::get_Orientation()
{
  _TDispID _dispid(*this, OLETEXT("Orientation"), DISPID(134));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DataLabelDispT<T>::set_Orientation(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Orientation"), DISPID(134));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
DataLabelDispT<T>::get_Shadow()
{
  _TDispID _dispid(*this, OLETEXT("Shadow"), DISPID(103));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DataLabelDispT<T>::set_Shadow(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Shadow"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
DataLabelDispT<T>::get_Text()
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(138));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DataLabelDispT<T>::set_Text(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(138));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> double /*[VT_R8:0]*/ __fastcall
DataLabelDispT<T>::get_Top()
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(126));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DataLabelDispT<T>::set_Top(double Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(126));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_R8:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
DataLabelDispT<T>::get_VerticalAlignment()
{
  _TDispID _dispid(*this, OLETEXT("VerticalAlignment"), DISPID(137));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DataLabelDispT<T>::set_VerticalAlignment(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("VerticalAlignment"), DISPID(137));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
DataLabelDispT<T>::get_ReadingOrder()
{
  _TDispID _dispid(*this, OLETEXT("ReadingOrder"), DISPID(975));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DataLabelDispT<T>::set_ReadingOrder(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReadingOrder"), DISPID(975));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
DataLabelDispT<T>::get_AutoScaleFont()
{
  _TDispID _dispid(*this, OLETEXT("AutoScaleFont"), DISPID(1525));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DataLabelDispT<T>::set_AutoScaleFont(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoScaleFont"), DISPID(1525));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
DataLabelDispT<T>::get_AutoText()
{
  _TDispID _dispid(*this, OLETEXT("AutoText"), DISPID(135));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DataLabelDispT<T>::set_AutoText(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoText"), DISPID(135));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
DataLabelDispT<T>::get_NumberFormat()
{
  _TDispID _dispid(*this, OLETEXT("NumberFormat"), DISPID(193));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DataLabelDispT<T>::set_NumberFormat(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumberFormat"), DISPID(193));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
DataLabelDispT<T>::get_NumberFormatLocal()
{
  _TDispID _dispid(*this, OLETEXT("NumberFormatLocal"), DISPID(1097));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DataLabelDispT<T>::set_NumberFormatLocal(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumberFormatLocal"), DISPID(1097));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
DataLabelDispT<T>::get_ShowLegendKey()
{
  _TDispID _dispid(*this, OLETEXT("ShowLegendKey"), DISPID(171));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DataLabelDispT<T>::set_ShowLegendKey(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowLegendKey"), DISPID(171));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
DataLabelDispT<T>::get_Type()
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(108));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DataLabelDispT<T>::set_Type(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(108));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::XlDataLabelPosition /*[VT_USERDEFINED:0]*/ __fastcall
DataLabelDispT<T>::get_Position()
{
  _TDispID _dispid(*this, OLETEXT("Position"), DISPID(133));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlDataLabelPosition /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DataLabelDispT<T>::set_Position(Graph_2k::XlDataLabelPosition Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Position"), DISPID(133));
  TAutoArgs<1> _args;
  _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
  OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  DataLabels
// Flags:     (4096) Dispatchable
// GUID:      {000208E8-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall
DataLabelsDispT<T>::get_Application()
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(148));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall
DataLabelsDispT<T>::get_Creator()
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(149));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
DataLabelsDispT<T>::get_Parent()
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(150));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
DataLabelsDispT<T>::get_Name()
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(110));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall
DataLabelsDispT<T>::get_Border()
{
  _TDispID _dispid(*this, OLETEXT("Border"), DISPID(128));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Border* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
DataLabelsDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(117));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::InteriorPtr /*[VT_USERDEFINED:1]*/ __fastcall
DataLabelsDispT<T>::get_Interior()
{
  _TDispID _dispid(*this, OLETEXT("Interior"), DISPID(129));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Interior* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::ChartFillFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall
DataLabelsDispT<T>::get_Fill()
{
  _TDispID _dispid(*this, OLETEXT("Fill"), DISPID(1663));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::ChartFillFormat* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DataLabelsDispT<T>::_Dummy8()
{
  _TDispID _dispid(*this, OLETEXT("_Dummy8"), DISPID(65544));
  OleProcedure(_dispid);
}

template <class T> Graph_2k::FontPtr /*[VT_USERDEFINED:1]*/ __fastcall
DataLabelsDispT<T>::get_Font()
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(146));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Font* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
DataLabelsDispT<T>::get_HorizontalAlignment()
{
  _TDispID _dispid(*this, OLETEXT("HorizontalAlignment"), DISPID(136));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DataLabelsDispT<T>::set_HorizontalAlignment(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HorizontalAlignment"), DISPID(136));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DataLabelsDispT<T>::_Dummy11()
{
  _TDispID _dispid(*this, OLETEXT("_Dummy11"), DISPID(65547));
  OleProcedure(_dispid);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
DataLabelsDispT<T>::get_Orientation()
{
  _TDispID _dispid(*this, OLETEXT("Orientation"), DISPID(134));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DataLabelsDispT<T>::set_Orientation(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Orientation"), DISPID(134));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
DataLabelsDispT<T>::get_Shadow()
{
  _TDispID _dispid(*this, OLETEXT("Shadow"), DISPID(103));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DataLabelsDispT<T>::set_Shadow(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Shadow"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DataLabelsDispT<T>::_Dummy14()
{
  _TDispID _dispid(*this, OLETEXT("_Dummy14"), DISPID(65550));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DataLabelsDispT<T>::_Dummy15()
{
  _TDispID _dispid(*this, OLETEXT("_Dummy15"), DISPID(65551));
  OleProcedure(_dispid);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
DataLabelsDispT<T>::get_VerticalAlignment()
{
  _TDispID _dispid(*this, OLETEXT("VerticalAlignment"), DISPID(137));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DataLabelsDispT<T>::set_VerticalAlignment(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("VerticalAlignment"), DISPID(137));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
DataLabelsDispT<T>::get_ReadingOrder()
{
  _TDispID _dispid(*this, OLETEXT("ReadingOrder"), DISPID(975));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DataLabelsDispT<T>::set_ReadingOrder(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReadingOrder"), DISPID(975));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
DataLabelsDispT<T>::get_AutoScaleFont()
{
  _TDispID _dispid(*this, OLETEXT("AutoScaleFont"), DISPID(1525));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DataLabelsDispT<T>::set_AutoScaleFont(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoScaleFont"), DISPID(1525));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
DataLabelsDispT<T>::get_AutoText()
{
  _TDispID _dispid(*this, OLETEXT("AutoText"), DISPID(135));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DataLabelsDispT<T>::set_AutoText(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoText"), DISPID(135));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
DataLabelsDispT<T>::get_NumberFormat()
{
  _TDispID _dispid(*this, OLETEXT("NumberFormat"), DISPID(193));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DataLabelsDispT<T>::set_NumberFormat(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumberFormat"), DISPID(193));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
DataLabelsDispT<T>::get_NumberFormatLocal()
{
  _TDispID _dispid(*this, OLETEXT("NumberFormatLocal"), DISPID(1097));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DataLabelsDispT<T>::set_NumberFormatLocal(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumberFormatLocal"), DISPID(1097));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
DataLabelsDispT<T>::get_ShowLegendKey()
{
  _TDispID _dispid(*this, OLETEXT("ShowLegendKey"), DISPID(171));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DataLabelsDispT<T>::set_ShowLegendKey(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowLegendKey"), DISPID(171));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
DataLabelsDispT<T>::get_Type()
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(108));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DataLabelsDispT<T>::set_Type(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(108));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::XlDataLabelPosition /*[VT_USERDEFINED:0]*/ __fastcall
DataLabelsDispT<T>::get_Position()
{
  _TDispID _dispid(*this, OLETEXT("Position"), DISPID(133));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlDataLabelPosition /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DataLabelsDispT<T>::set_Position(Graph_2k::XlDataLabelPosition Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Position"), DISPID(133));
  TAutoArgs<1> _args;
  _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
DataLabelsDispT<T>::get_Count()
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(118));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::DataLabelPtr /*[VT_USERDEFINED:1]*/ __fastcall
DataLabelsDispT<T>::Item(TVariantInParam Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(170));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  OleFunction(_dispid, _args);
  return (Graph_2k::DataLabel* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> LPUNKNOWN /*[VT_UNKNOWN:0]*/ __fastcall
DataLabelsDispT<T>::_NewEnum()
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DataLabelsDispT<T>::_Dummy28()
{
  _TDispID _dispid(*this, OLETEXT("_Dummy28"), DISPID(65564));
  OleProcedure(_dispid);
}

// *********************************************************************//
// DispIntf:  LegendEntry
// Flags:     (4096) Dispatchable
// GUID:      {000208E7-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall
LegendEntryDispT<T>::get_Application()
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(148));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall
LegendEntryDispT<T>::get_Creator()
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(149));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
LegendEntryDispT<T>::get_Parent()
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(150));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
LegendEntryDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(117));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::FontPtr /*[VT_USERDEFINED:1]*/ __fastcall
LegendEntryDispT<T>::get_Font()
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(146));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Font* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
LegendEntryDispT<T>::get_Index()
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(486));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::LegendKeyPtr /*[VT_USERDEFINED:1]*/ __fastcall
LegendEntryDispT<T>::get_LegendKey()
{
  _TDispID _dispid(*this, OLETEXT("LegendKey"), DISPID(174));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::LegendKey* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
LegendEntryDispT<T>::get_AutoScaleFont()
{
  _TDispID _dispid(*this, OLETEXT("AutoScaleFont"), DISPID(1525));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
LegendEntryDispT<T>::set_AutoScaleFont(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoScaleFont"), DISPID(1525));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> double /*[VT_R8:0]*/ __fastcall
LegendEntryDispT<T>::get_Left()
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(127));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> double /*[VT_R8:0]*/ __fastcall
LegendEntryDispT<T>::get_Top()
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(126));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> double /*[VT_R8:0]*/ __fastcall
LegendEntryDispT<T>::get_Width()
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(122));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> double /*[VT_R8:0]*/ __fastcall
LegendEntryDispT<T>::get_Height()
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(123));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

// *********************************************************************//
// DispIntf:  LegendEntries
// Flags:     (4096) Dispatchable
// GUID:      {000208E6-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall
LegendEntriesDispT<T>::get_Application()
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(148));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall
LegendEntriesDispT<T>::get_Creator()
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(149));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
LegendEntriesDispT<T>::get_Parent()
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(150));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
LegendEntriesDispT<T>::get_Count()
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(118));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::LegendEntryPtr /*[VT_USERDEFINED:1]*/ __fastcall
LegendEntriesDispT<T>::Item(TVariantInParam Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(170));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  OleFunction(_dispid, _args);
  return (Graph_2k::LegendEntry* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> LPUNKNOWN /*[VT_UNKNOWN:0]*/ __fastcall
LegendEntriesDispT<T>::_NewEnum()
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

// *********************************************************************//
// DispIntf:  LegendKey
// Flags:     (4096) Dispatchable
// GUID:      {000208E5-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall
LegendKeyDispT<T>::get_Application()
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(148));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall
LegendKeyDispT<T>::get_Creator()
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(149));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
LegendKeyDispT<T>::get_Parent()
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(150));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall
LegendKeyDispT<T>::get_Border()
{
  _TDispID _dispid(*this, OLETEXT("Border"), DISPID(128));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Border* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
LegendKeyDispT<T>::ClearFormats()
{
  _TDispID _dispid(*this, OLETEXT("ClearFormats"), DISPID(112));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
LegendKeyDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(117));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::InteriorPtr /*[VT_USERDEFINED:1]*/ __fastcall
LegendKeyDispT<T>::get_Interior()
{
  _TDispID _dispid(*this, OLETEXT("Interior"), DISPID(129));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Interior* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::ChartFillFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall
LegendKeyDispT<T>::get_Fill()
{
  _TDispID _dispid(*this, OLETEXT("Fill"), DISPID(1663));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::ChartFillFormat* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
LegendKeyDispT<T>::get_InvertIfNegative()
{
  _TDispID _dispid(*this, OLETEXT("InvertIfNegative"), DISPID(132));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
LegendKeyDispT<T>::set_InvertIfNegative(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InvertIfNegative"), DISPID(132));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
LegendKeyDispT<T>::get_MarkerBackgroundColor()
{
  _TDispID _dispid(*this, OLETEXT("MarkerBackgroundColor"), DISPID(73));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
LegendKeyDispT<T>::set_MarkerBackgroundColor(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarkerBackgroundColor"), DISPID(73));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::XlColorIndex /*[VT_USERDEFINED:0]*/ __fastcall
LegendKeyDispT<T>::get_MarkerBackgroundColorIndex()
{
  _TDispID _dispid(*this, OLETEXT("MarkerBackgroundColorIndex"), DISPID(74));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlColorIndex /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
LegendKeyDispT<T>::set_MarkerBackgroundColorIndex(Graph_2k::XlColorIndex Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarkerBackgroundColorIndex"), DISPID(74));
  TAutoArgs<1> _args;
  _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
LegendKeyDispT<T>::get_MarkerForegroundColor()
{
  _TDispID _dispid(*this, OLETEXT("MarkerForegroundColor"), DISPID(75));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
LegendKeyDispT<T>::set_MarkerForegroundColor(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarkerForegroundColor"), DISPID(75));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::XlColorIndex /*[VT_USERDEFINED:0]*/ __fastcall
LegendKeyDispT<T>::get_MarkerForegroundColorIndex()
{
  _TDispID _dispid(*this, OLETEXT("MarkerForegroundColorIndex"), DISPID(76));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlColorIndex /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
LegendKeyDispT<T>::set_MarkerForegroundColorIndex(Graph_2k::XlColorIndex Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarkerForegroundColorIndex"), DISPID(76));
  TAutoArgs<1> _args;
  _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
LegendKeyDispT<T>::get_MarkerSize()
{
  _TDispID _dispid(*this, OLETEXT("MarkerSize"), DISPID(231));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
LegendKeyDispT<T>::set_MarkerSize(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarkerSize"), DISPID(231));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::XlMarkerStyle /*[VT_USERDEFINED:0]*/ __fastcall
LegendKeyDispT<T>::get_MarkerStyle()
{
  _TDispID _dispid(*this, OLETEXT("MarkerStyle"), DISPID(72));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlMarkerStyle /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
LegendKeyDispT<T>::set_MarkerStyle(Graph_2k::XlMarkerStyle Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarkerStyle"), DISPID(72));
  TAutoArgs<1> _args;
  _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
LegendKeyDispT<T>::get_PictureType()
{
  _TDispID _dispid(*this, OLETEXT("PictureType"), DISPID(161));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
LegendKeyDispT<T>::set_PictureType(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureType"), DISPID(161));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
LegendKeyDispT<T>::get_PictureUnit()
{
  _TDispID _dispid(*this, OLETEXT("PictureUnit"), DISPID(162));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
LegendKeyDispT<T>::set_PictureUnit(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureUnit"), DISPID(162));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
LegendKeyDispT<T>::get_Smooth()
{
  _TDispID _dispid(*this, OLETEXT("Smooth"), DISPID(163));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
LegendKeyDispT<T>::set_Smooth(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Smooth"), DISPID(163));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> double /*[VT_R8:0]*/ __fastcall
LegendKeyDispT<T>::get_Left()
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(127));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> double /*[VT_R8:0]*/ __fastcall
LegendKeyDispT<T>::get_Top()
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(126));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> double /*[VT_R8:0]*/ __fastcall
LegendKeyDispT<T>::get_Width()
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(122));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> double /*[VT_R8:0]*/ __fastcall
LegendKeyDispT<T>::get_Height()
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(123));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
LegendKeyDispT<T>::get_Shadow()
{
  _TDispID _dispid(*this, OLETEXT("Shadow"), DISPID(103));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
LegendKeyDispT<T>::set_Shadow(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Shadow"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  Trendlines
// Flags:     (4096) Dispatchable
// GUID:      {000208E4-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall
TrendlinesDispT<T>::get_Application()
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(148));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall
TrendlinesDispT<T>::get_Creator()
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(149));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
TrendlinesDispT<T>::get_Parent()
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(150));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::TrendlinePtr /*[VT_USERDEFINED:1]*/ __fastcall
TrendlinesDispT<T>::Add(Graph_2k::XlTrendlineType Type/*[in,def,opt]*/, 
                        TVariantInParam Order/*[in,opt]*/, TVariantInParam Period/*[in,opt]*/, 
                        TVariantInParam Forward/*[in,opt]*/, TVariantInParam Backward/*[in,opt]*/, 
                        TVariantInParam Intercept/*[in,opt]*/, 
                        TVariantInParam DisplayEquation/*[in,opt]*/, 
                        TVariantInParam DisplayRSquared/*[in,opt]*/, 
                        TVariantInParam Name/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(181));
  TAutoArgs<9> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  _args[2] = Order /*[VT_VARIANT:0]*/;
  _args[3] = Period /*[VT_VARIANT:0]*/;
  _args[4] = Forward /*[VT_VARIANT:0]*/;
  _args[5] = Backward /*[VT_VARIANT:0]*/;
  _args[6] = Intercept /*[VT_VARIANT:0]*/;
  _args[7] = DisplayEquation /*[VT_VARIANT:0]*/;
  _args[8] = DisplayRSquared /*[VT_VARIANT:0]*/;
  _args[9] = Name /*[VT_VARIANT:0]*/;
  OleFunction(_dispid, _args);
  return (Graph_2k::Trendline* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
TrendlinesDispT<T>::get_Count()
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(118));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::TrendlinePtr /*[VT_USERDEFINED:1]*/ __fastcall
TrendlinesDispT<T>::Item(TVariantInParam Index/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(170));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  OleFunction(_dispid, _args);
  return (Graph_2k::Trendline* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> LPUNKNOWN /*[VT_UNKNOWN:0]*/ __fastcall
TrendlinesDispT<T>::_NewEnum()
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

// *********************************************************************//
// DispIntf:  Trendline
// Flags:     (4096) Dispatchable
// GUID:      {000208E3-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall
TrendlineDispT<T>::get_Application()
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(148));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall
TrendlineDispT<T>::get_Creator()
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(149));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
TrendlineDispT<T>::get_Parent()
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(150));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
TrendlineDispT<T>::get_Backward()
{
  _TDispID _dispid(*this, OLETEXT("Backward"), DISPID(185));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
TrendlineDispT<T>::set_Backward(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Backward"), DISPID(185));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall
TrendlineDispT<T>::get_Border()
{
  _TDispID _dispid(*this, OLETEXT("Border"), DISPID(128));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Border* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
TrendlineDispT<T>::ClearFormats()
{
  _TDispID _dispid(*this, OLETEXT("ClearFormats"), DISPID(112));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::DataLabelPtr /*[VT_USERDEFINED:1]*/ __fastcall
TrendlineDispT<T>::get_DataLabel()
{
  _TDispID _dispid(*this, OLETEXT("DataLabel"), DISPID(158));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::DataLabel* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
TrendlineDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(117));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
TrendlineDispT<T>::get_DisplayEquation()
{
  _TDispID _dispid(*this, OLETEXT("DisplayEquation"), DISPID(190));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
TrendlineDispT<T>::set_DisplayEquation(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayEquation"), DISPID(190));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
TrendlineDispT<T>::get_DisplayRSquared()
{
  _TDispID _dispid(*this, OLETEXT("DisplayRSquared"), DISPID(189));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
TrendlineDispT<T>::set_DisplayRSquared(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayRSquared"), DISPID(189));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
TrendlineDispT<T>::get_Forward()
{
  _TDispID _dispid(*this, OLETEXT("Forward"), DISPID(191));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
TrendlineDispT<T>::set_Forward(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Forward"), DISPID(191));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
TrendlineDispT<T>::get_Index()
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(486));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> double /*[VT_R8:0]*/ __fastcall
TrendlineDispT<T>::get_Intercept()
{
  _TDispID _dispid(*this, OLETEXT("Intercept"), DISPID(186));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
TrendlineDispT<T>::set_Intercept(double Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Intercept"), DISPID(186));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_R8:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
TrendlineDispT<T>::get_InterceptIsAuto()
{
  _TDispID _dispid(*this, OLETEXT("InterceptIsAuto"), DISPID(187));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
TrendlineDispT<T>::set_InterceptIsAuto(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InterceptIsAuto"), DISPID(187));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
TrendlineDispT<T>::get_Name()
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(110));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
TrendlineDispT<T>::set_Name(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(110));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
TrendlineDispT<T>::get_NameIsAuto()
{
  _TDispID _dispid(*this, OLETEXT("NameIsAuto"), DISPID(188));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
TrendlineDispT<T>::set_NameIsAuto(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NameIsAuto"), DISPID(188));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
TrendlineDispT<T>::get_Order()
{
  _TDispID _dispid(*this, OLETEXT("Order"), DISPID(192));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
TrendlineDispT<T>::set_Order(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Order"), DISPID(192));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
TrendlineDispT<T>::get_Period()
{
  _TDispID _dispid(*this, OLETEXT("Period"), DISPID(184));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
TrendlineDispT<T>::set_Period(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Period"), DISPID(184));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::XlTrendlineType /*[VT_USERDEFINED:0]*/ __fastcall
TrendlineDispT<T>::get_Type()
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(108));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlTrendlineType /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
TrendlineDispT<T>::set_Type(Graph_2k::XlTrendlineType Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(108));
  TAutoArgs<1> _args;
  _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
  OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  Corners
// Flags:     (4096) Dispatchable
// GUID:      {000208E2-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall
CornersDispT<T>::get_Application()
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(148));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall
CornersDispT<T>::get_Creator()
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(149));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
CornersDispT<T>::get_Parent()
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(150));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
CornersDispT<T>::get_Name()
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(110));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

// *********************************************************************//
// DispIntf:  SeriesLines
// Flags:     (4096) Dispatchable
// GUID:      {000208E1-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall
SeriesLinesDispT<T>::get_Application()
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(148));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall
SeriesLinesDispT<T>::get_Creator()
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(149));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
SeriesLinesDispT<T>::get_Parent()
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(150));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
SeriesLinesDispT<T>::get_Name()
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(110));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall
SeriesLinesDispT<T>::get_Border()
{
  _TDispID _dispid(*this, OLETEXT("Border"), DISPID(128));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Border* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
SeriesLinesDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(117));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

// *********************************************************************//
// DispIntf:  HiLoLines
// Flags:     (4096) Dispatchable
// GUID:      {000208E0-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall
HiLoLinesDispT<T>::get_Application()
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(148));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall
HiLoLinesDispT<T>::get_Creator()
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(149));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
HiLoLinesDispT<T>::get_Parent()
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(150));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
HiLoLinesDispT<T>::get_Name()
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(110));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall
HiLoLinesDispT<T>::get_Border()
{
  _TDispID _dispid(*this, OLETEXT("Border"), DISPID(128));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Border* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
HiLoLinesDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(117));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

// *********************************************************************//
// DispIntf:  Gridlines
// Flags:     (4096) Dispatchable
// GUID:      {00024700-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall
GridlinesDispT<T>::get_Application()
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(148));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall
GridlinesDispT<T>::get_Creator()
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(149));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
GridlinesDispT<T>::get_Parent()
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(150));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
GridlinesDispT<T>::get_Name()
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(110));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall
GridlinesDispT<T>::get_Border()
{
  _TDispID _dispid(*this, OLETEXT("Border"), DISPID(128));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Border* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
GridlinesDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(117));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

// *********************************************************************//
// DispIntf:  DropLines
// Flags:     (4096) Dispatchable
// GUID:      {00024701-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall
DropLinesDispT<T>::get_Application()
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(148));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall
DropLinesDispT<T>::get_Creator()
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(149));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
DropLinesDispT<T>::get_Parent()
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(150));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
DropLinesDispT<T>::get_Name()
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(110));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall
DropLinesDispT<T>::get_Border()
{
  _TDispID _dispid(*this, OLETEXT("Border"), DISPID(128));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Border* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
DropLinesDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(117));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

// *********************************************************************//
// DispIntf:  LeaderLines
// Flags:     (4096) Dispatchable
// GUID:      {0002441E-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall
LeaderLinesDispT<T>::get_Application()
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(148));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall
LeaderLinesDispT<T>::get_Creator()
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(149));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
LeaderLinesDispT<T>::get_Parent()
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(150));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall
LeaderLinesDispT<T>::get_Border()
{
  _TDispID _dispid(*this, OLETEXT("Border"), DISPID(128));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Border* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
LeaderLinesDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(117));
  OleProcedure(_dispid);
}

// *********************************************************************//
// DispIntf:  UpBars
// Flags:     (4096) Dispatchable
// GUID:      {00024702-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall
UpBarsDispT<T>::get_Application()
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(148));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall
UpBarsDispT<T>::get_Creator()
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(149));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
UpBarsDispT<T>::get_Parent()
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(150));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
UpBarsDispT<T>::get_Name()
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(110));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall
UpBarsDispT<T>::get_Border()
{
  _TDispID _dispid(*this, OLETEXT("Border"), DISPID(128));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Border* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
UpBarsDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(117));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::InteriorPtr /*[VT_USERDEFINED:1]*/ __fastcall
UpBarsDispT<T>::get_Interior()
{
  _TDispID _dispid(*this, OLETEXT("Interior"), DISPID(129));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Interior* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::ChartFillFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall
UpBarsDispT<T>::get_Fill()
{
  _TDispID _dispid(*this, OLETEXT("Fill"), DISPID(1663));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::ChartFillFormat* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

// *********************************************************************//
// DispIntf:  DownBars
// Flags:     (4096) Dispatchable
// GUID:      {00024703-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall
DownBarsDispT<T>::get_Application()
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(148));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall
DownBarsDispT<T>::get_Creator()
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(149));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
DownBarsDispT<T>::get_Parent()
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(150));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
DownBarsDispT<T>::get_Name()
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(110));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall
DownBarsDispT<T>::get_Border()
{
  _TDispID _dispid(*this, OLETEXT("Border"), DISPID(128));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Border* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
DownBarsDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(117));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::InteriorPtr /*[VT_USERDEFINED:1]*/ __fastcall
DownBarsDispT<T>::get_Interior()
{
  _TDispID _dispid(*this, OLETEXT("Interior"), DISPID(129));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Interior* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::ChartFillFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall
DownBarsDispT<T>::get_Fill()
{
  _TDispID _dispid(*this, OLETEXT("Fill"), DISPID(1663));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::ChartFillFormat* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

// *********************************************************************//
// DispIntf:  Floor
// Flags:     (4096) Dispatchable
// GUID:      {00024704-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall
FloorDispT<T>::get_Application()
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(148));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall
FloorDispT<T>::get_Creator()
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(149));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
FloorDispT<T>::get_Parent()
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(150));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
FloorDispT<T>::get_Name()
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(110));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall
FloorDispT<T>::get_Border()
{
  _TDispID _dispid(*this, OLETEXT("Border"), DISPID(128));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Border* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
FloorDispT<T>::ClearFormats()
{
  _TDispID _dispid(*this, OLETEXT("ClearFormats"), DISPID(112));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::InteriorPtr /*[VT_USERDEFINED:1]*/ __fastcall
FloorDispT<T>::get_Interior()
{
  _TDispID _dispid(*this, OLETEXT("Interior"), DISPID(129));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Interior* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::ChartFillFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall
FloorDispT<T>::get_Fill()
{
  _TDispID _dispid(*this, OLETEXT("Fill"), DISPID(1663));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::ChartFillFormat* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
FloorDispT<T>::get_PictureType()
{
  _TDispID _dispid(*this, OLETEXT("PictureType"), DISPID(161));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
FloorDispT<T>::set_PictureType(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureType"), DISPID(161));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  Walls
// Flags:     (4096) Dispatchable
// GUID:      {00024705-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall
WallsDispT<T>::get_Application()
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(148));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall
WallsDispT<T>::get_Creator()
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(149));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
WallsDispT<T>::get_Parent()
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(150));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
WallsDispT<T>::get_Name()
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(110));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall
WallsDispT<T>::get_Border()
{
  _TDispID _dispid(*this, OLETEXT("Border"), DISPID(128));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Border* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
WallsDispT<T>::ClearFormats()
{
  _TDispID _dispid(*this, OLETEXT("ClearFormats"), DISPID(112));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::InteriorPtr /*[VT_USERDEFINED:1]*/ __fastcall
WallsDispT<T>::get_Interior()
{
  _TDispID _dispid(*this, OLETEXT("Interior"), DISPID(129));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Interior* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::ChartFillFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall
WallsDispT<T>::get_Fill()
{
  _TDispID _dispid(*this, OLETEXT("Fill"), DISPID(1663));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::ChartFillFormat* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
WallsDispT<T>::get_PictureType()
{
  _TDispID _dispid(*this, OLETEXT("PictureType"), DISPID(161));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
WallsDispT<T>::set_PictureType(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureType"), DISPID(161));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
WallsDispT<T>::get_PictureUnit()
{
  _TDispID _dispid(*this, OLETEXT("PictureUnit"), DISPID(162));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
WallsDispT<T>::set_PictureUnit(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureUnit"), DISPID(162));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  TickLabels
// Flags:     (4096) Dispatchable
// GUID:      {00024706-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall
TickLabelsDispT<T>::get_Application()
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(148));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall
TickLabelsDispT<T>::get_Creator()
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(149));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
TickLabelsDispT<T>::get_Parent()
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(150));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
TickLabelsDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(117));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::FontPtr /*[VT_USERDEFINED:1]*/ __fastcall
TickLabelsDispT<T>::get_Font()
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(146));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Font* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
TickLabelsDispT<T>::get_Name()
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(110));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
TickLabelsDispT<T>::get_NumberFormat()
{
  _TDispID _dispid(*this, OLETEXT("NumberFormat"), DISPID(193));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
TickLabelsDispT<T>::set_NumberFormat(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumberFormat"), DISPID(193));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
TickLabelsDispT<T>::get_NumberFormatLocal()
{
  _TDispID _dispid(*this, OLETEXT("NumberFormatLocal"), DISPID(1097));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
TickLabelsDispT<T>::set_NumberFormatLocal(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumberFormatLocal"), DISPID(1097));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::XlTickLabelOrientation /*[VT_USERDEFINED:0]*/ __fastcall
TickLabelsDispT<T>::get_Orientation()
{
  _TDispID _dispid(*this, OLETEXT("Orientation"), DISPID(134));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlTickLabelOrientation /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
TickLabelsDispT<T>::set_Orientation(Graph_2k::XlTickLabelOrientation Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Orientation"), DISPID(134));
  TAutoArgs<1> _args;
  _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
TickLabelsDispT<T>::get_ReadingOrder()
{
  _TDispID _dispid(*this, OLETEXT("ReadingOrder"), DISPID(975));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
TickLabelsDispT<T>::set_ReadingOrder(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReadingOrder"), DISPID(975));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
TickLabelsDispT<T>::get_AutoScaleFont()
{
  _TDispID _dispid(*this, OLETEXT("AutoScaleFont"), DISPID(1525));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
TickLabelsDispT<T>::set_AutoScaleFont(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoScaleFont"), DISPID(1525));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
TickLabelsDispT<T>::get_Offset()
{
  _TDispID _dispid(*this, OLETEXT("Offset"), DISPID(254));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
TickLabelsDispT<T>::set_Offset(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Offset"), DISPID(254));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  PlotArea
// Flags:     (4096) Dispatchable
// GUID:      {00024707-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall
PlotAreaDispT<T>::get_Application()
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(148));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall
PlotAreaDispT<T>::get_Creator()
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(149));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
PlotAreaDispT<T>::get_Parent()
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(150));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
PlotAreaDispT<T>::get_Name()
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(110));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall
PlotAreaDispT<T>::get_Border()
{
  _TDispID _dispid(*this, OLETEXT("Border"), DISPID(128));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Border* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
PlotAreaDispT<T>::ClearFormats()
{
  _TDispID _dispid(*this, OLETEXT("ClearFormats"), DISPID(112));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> double /*[VT_R8:0]*/ __fastcall
PlotAreaDispT<T>::get_Height()
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(123));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
PlotAreaDispT<T>::set_Height(double Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(123));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_R8:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::InteriorPtr /*[VT_USERDEFINED:1]*/ __fastcall
PlotAreaDispT<T>::get_Interior()
{
  _TDispID _dispid(*this, OLETEXT("Interior"), DISPID(129));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Interior* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::ChartFillFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall
PlotAreaDispT<T>::get_Fill()
{
  _TDispID _dispid(*this, OLETEXT("Fill"), DISPID(1663));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::ChartFillFormat* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> double /*[VT_R8:0]*/ __fastcall
PlotAreaDispT<T>::get_Left()
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(127));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
PlotAreaDispT<T>::set_Left(double Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(127));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_R8:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> double /*[VT_R8:0]*/ __fastcall
PlotAreaDispT<T>::get_Top()
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(126));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
PlotAreaDispT<T>::set_Top(double Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(126));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_R8:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> double /*[VT_R8:0]*/ __fastcall
PlotAreaDispT<T>::get_Width()
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(122));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
PlotAreaDispT<T>::set_Width(double Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(122));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_R8:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> double /*[VT_R8:0]*/ __fastcall
PlotAreaDispT<T>::get_InsideLeft()
{
  _TDispID _dispid(*this, OLETEXT("InsideLeft"), DISPID(1667));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> double /*[VT_R8:0]*/ __fastcall
PlotAreaDispT<T>::get_InsideTop()
{
  _TDispID _dispid(*this, OLETEXT("InsideTop"), DISPID(1668));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> double /*[VT_R8:0]*/ __fastcall
PlotAreaDispT<T>::get_InsideWidth()
{
  _TDispID _dispid(*this, OLETEXT("InsideWidth"), DISPID(1669));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> double /*[VT_R8:0]*/ __fastcall
PlotAreaDispT<T>::get_InsideHeight()
{
  _TDispID _dispid(*this, OLETEXT("InsideHeight"), DISPID(1670));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

// *********************************************************************//
// DispIntf:  ChartArea
// Flags:     (4096) Dispatchable
// GUID:      {00024708-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall
ChartAreaDispT<T>::get_Application()
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(148));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall
ChartAreaDispT<T>::get_Creator()
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(149));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
ChartAreaDispT<T>::get_Parent()
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(150));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
ChartAreaDispT<T>::get_Name()
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(110));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall
ChartAreaDispT<T>::get_Border()
{
  _TDispID _dispid(*this, OLETEXT("Border"), DISPID(128));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Border* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
ChartAreaDispT<T>::Clear()
{
  _TDispID _dispid(*this, OLETEXT("Clear"), DISPID(111));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
ChartAreaDispT<T>::ClearContents()
{
  _TDispID _dispid(*this, OLETEXT("ClearContents"), DISPID(113));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
ChartAreaDispT<T>::Copy()
{
  _TDispID _dispid(*this, OLETEXT("Copy"), DISPID(551));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::FontPtr /*[VT_USERDEFINED:1]*/ __fastcall
ChartAreaDispT<T>::get_Font()
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(146));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Font* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
ChartAreaDispT<T>::get_Shadow()
{
  _TDispID _dispid(*this, OLETEXT("Shadow"), DISPID(103));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartAreaDispT<T>::set_Shadow(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Shadow"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
ChartAreaDispT<T>::ClearFormats()
{
  _TDispID _dispid(*this, OLETEXT("ClearFormats"), DISPID(112));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> double /*[VT_R8:0]*/ __fastcall
ChartAreaDispT<T>::get_Height()
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(123));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartAreaDispT<T>::set_Height(double Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(123));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_R8:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::InteriorPtr /*[VT_USERDEFINED:1]*/ __fastcall
ChartAreaDispT<T>::get_Interior()
{
  _TDispID _dispid(*this, OLETEXT("Interior"), DISPID(129));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Interior* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::ChartFillFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall
ChartAreaDispT<T>::get_Fill()
{
  _TDispID _dispid(*this, OLETEXT("Fill"), DISPID(1663));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::ChartFillFormat* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> double /*[VT_R8:0]*/ __fastcall
ChartAreaDispT<T>::get_Left()
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(127));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartAreaDispT<T>::set_Left(double Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(127));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_R8:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> double /*[VT_R8:0]*/ __fastcall
ChartAreaDispT<T>::get_Top()
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(126));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartAreaDispT<T>::set_Top(double Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(126));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_R8:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> double /*[VT_R8:0]*/ __fastcall
ChartAreaDispT<T>::get_Width()
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(122));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartAreaDispT<T>::set_Width(double Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(122));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_R8:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
ChartAreaDispT<T>::get_AutoScaleFont()
{
  _TDispID _dispid(*this, OLETEXT("AutoScaleFont"), DISPID(1525));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ChartAreaDispT<T>::set_AutoScaleFont(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoScaleFont"), DISPID(1525));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  Legend
// Flags:     (4096) Dispatchable
// GUID:      {00024709-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall
LegendDispT<T>::get_Application()
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(148));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall
LegendDispT<T>::get_Creator()
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(149));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
LegendDispT<T>::get_Parent()
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(150));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
LegendDispT<T>::get_Name()
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(110));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall
LegendDispT<T>::get_Border()
{
  _TDispID _dispid(*this, OLETEXT("Border"), DISPID(128));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Border* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
LegendDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(117));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::FontPtr /*[VT_USERDEFINED:1]*/ __fastcall
LegendDispT<T>::get_Font()
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(146));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Font* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
LegendDispT<T>::LegendEntries(TVariantInParam Index/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("LegendEntries"), DISPID(173));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::XlLegendPosition /*[VT_USERDEFINED:0]*/ __fastcall
LegendDispT<T>::get_Position()
{
  _TDispID _dispid(*this, OLETEXT("Position"), DISPID(133));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlLegendPosition /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
LegendDispT<T>::set_Position(Graph_2k::XlLegendPosition Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Position"), DISPID(133));
  TAutoArgs<1> _args;
  _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
LegendDispT<T>::get_Shadow()
{
  _TDispID _dispid(*this, OLETEXT("Shadow"), DISPID(103));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
LegendDispT<T>::set_Shadow(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Shadow"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
LegendDispT<T>::Clear()
{
  _TDispID _dispid(*this, OLETEXT("Clear"), DISPID(111));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> double /*[VT_R8:0]*/ __fastcall
LegendDispT<T>::get_Height()
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(123));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
LegendDispT<T>::set_Height(double Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(123));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_R8:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::InteriorPtr /*[VT_USERDEFINED:1]*/ __fastcall
LegendDispT<T>::get_Interior()
{
  _TDispID _dispid(*this, OLETEXT("Interior"), DISPID(129));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Interior* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::ChartFillFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall
LegendDispT<T>::get_Fill()
{
  _TDispID _dispid(*this, OLETEXT("Fill"), DISPID(1663));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::ChartFillFormat* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> double /*[VT_R8:0]*/ __fastcall
LegendDispT<T>::get_Left()
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(127));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
LegendDispT<T>::set_Left(double Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(127));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_R8:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> double /*[VT_R8:0]*/ __fastcall
LegendDispT<T>::get_Top()
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(126));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
LegendDispT<T>::set_Top(double Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(126));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_R8:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> double /*[VT_R8:0]*/ __fastcall
LegendDispT<T>::get_Width()
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(122));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
LegendDispT<T>::set_Width(double Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(122));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_R8:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
LegendDispT<T>::get_AutoScaleFont()
{
  _TDispID _dispid(*this, OLETEXT("AutoScaleFont"), DISPID(1525));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
LegendDispT<T>::set_AutoScaleFont(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoScaleFont"), DISPID(1525));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ErrorBars
// Flags:     (4096) Dispatchable
// GUID:      {0002470A-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall
ErrorBarsDispT<T>::get_Application()
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(148));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall
ErrorBarsDispT<T>::get_Creator()
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(149));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
ErrorBarsDispT<T>::get_Parent()
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(150));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
ErrorBarsDispT<T>::get_Name()
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(110));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall
ErrorBarsDispT<T>::get_Border()
{
  _TDispID _dispid(*this, OLETEXT("Border"), DISPID(128));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Border* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
ErrorBarsDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(117));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
ErrorBarsDispT<T>::ClearFormats()
{
  _TDispID _dispid(*this, OLETEXT("ClearFormats"), DISPID(112));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::XlEndStyleCap /*[VT_USERDEFINED:0]*/ __fastcall
ErrorBarsDispT<T>::get_EndStyle()
{
  _TDispID _dispid(*this, OLETEXT("EndStyle"), DISPID(1124));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlEndStyleCap /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ErrorBarsDispT<T>::set_EndStyle(Graph_2k::XlEndStyleCap Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndStyle"), DISPID(1124));
  TAutoArgs<1> _args;
  _args[1] = (int)Param1 /*[VT_USERDEFINED:0]*/;
  OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  DataTable
// Flags:     (4096) Dispatchable
// GUID:      {000208FA-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall
DataTableDispT<T>::get_Application()
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(148));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall
DataTableDispT<T>::get_Creator()
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(149));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
DataTableDispT<T>::get_Parent()
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(150));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
DataTableDispT<T>::get_ShowLegendKey()
{
  _TDispID _dispid(*this, OLETEXT("ShowLegendKey"), DISPID(171));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DataTableDispT<T>::set_ShowLegendKey(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowLegendKey"), DISPID(171));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
DataTableDispT<T>::get_HasBorderHorizontal()
{
  _TDispID _dispid(*this, OLETEXT("HasBorderHorizontal"), DISPID(1671));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DataTableDispT<T>::set_HasBorderHorizontal(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasBorderHorizontal"), DISPID(1671));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
DataTableDispT<T>::get_HasBorderVertical()
{
  _TDispID _dispid(*this, OLETEXT("HasBorderVertical"), DISPID(1672));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DataTableDispT<T>::set_HasBorderVertical(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasBorderVertical"), DISPID(1672));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
DataTableDispT<T>::get_HasBorderOutline()
{
  _TDispID _dispid(*this, OLETEXT("HasBorderOutline"), DISPID(1673));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DataTableDispT<T>::set_HasBorderOutline(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasBorderOutline"), DISPID(1673));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall
DataTableDispT<T>::get_Border()
{
  _TDispID _dispid(*this, OLETEXT("Border"), DISPID(128));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Border* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::FontPtr /*[VT_USERDEFINED:1]*/ __fastcall
DataTableDispT<T>::get_Font()
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(146));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Font* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DataTableDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(117));
  OleProcedure(_dispid);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
DataTableDispT<T>::get_AutoScaleFont()
{
  _TDispID _dispid(*this, OLETEXT("AutoScaleFont"), DISPID(1525));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DataTableDispT<T>::set_AutoScaleFont(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoScaleFont"), DISPID(1525));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  DisplayUnitLabel
// Flags:     (4096) Dispatchable
// GUID:      {000208D3-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> Graph_2k::GraphApplicationPtr /*[VT_USERDEFINED:1]*/ __fastcall
DisplayUnitLabelDispT<T>::get_Application()
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(148));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::GraphApplication* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::XlCreator /*[VT_USERDEFINED:0]*/ __fastcall
DisplayUnitLabelDispT<T>::get_Creator()
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(149));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::XlCreator /*[C1]*/)(int) /*[VT_I4:0]*/_args.GetRetVariant();
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
DisplayUnitLabelDispT<T>::get_Parent()
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(150));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
DisplayUnitLabelDispT<T>::get_Name()
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(110));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::BorderPtr /*[VT_USERDEFINED:1]*/ __fastcall
DisplayUnitLabelDispT<T>::get_Border()
{
  _TDispID _dispid(*this, OLETEXT("Border"), DISPID(128));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Border* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
DisplayUnitLabelDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(117));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Graph_2k::InteriorPtr /*[VT_USERDEFINED:1]*/ __fastcall
DisplayUnitLabelDispT<T>::get_Interior()
{
  _TDispID _dispid(*this, OLETEXT("Interior"), DISPID(129));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Interior* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Graph_2k::ChartFillFormatPtr /*[VT_USERDEFINED:1]*/ __fastcall
DisplayUnitLabelDispT<T>::get_Fill()
{
  _TDispID _dispid(*this, OLETEXT("Fill"), DISPID(1663));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::ChartFillFormat* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
DisplayUnitLabelDispT<T>::get_Caption()
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(139));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DisplayUnitLabelDispT<T>::set_Caption(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(139));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Graph_2k::FontPtr /*[VT_USERDEFINED:1]*/ __fastcall
DisplayUnitLabelDispT<T>::get_Font()
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(146));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Graph_2k::Font* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
DisplayUnitLabelDispT<T>::get_HorizontalAlignment()
{
  _TDispID _dispid(*this, OLETEXT("HorizontalAlignment"), DISPID(136));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DisplayUnitLabelDispT<T>::set_HorizontalAlignment(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HorizontalAlignment"), DISPID(136));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> double /*[VT_R8:0]*/ __fastcall
DisplayUnitLabelDispT<T>::get_Left()
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(127));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DisplayUnitLabelDispT<T>::set_Left(double Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(127));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_R8:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
DisplayUnitLabelDispT<T>::get_Orientation()
{
  _TDispID _dispid(*this, OLETEXT("Orientation"), DISPID(134));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DisplayUnitLabelDispT<T>::set_Orientation(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Orientation"), DISPID(134));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TOLEBOOL /*[VT_BOOL:0]*/ __fastcall
DisplayUnitLabelDispT<T>::get_Shadow()
{
  _TDispID _dispid(*this, OLETEXT("Shadow"), DISPID(103));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DisplayUnitLabelDispT<T>::set_Shadow(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Shadow"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
DisplayUnitLabelDispT<T>::get_Text()
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(138));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DisplayUnitLabelDispT<T>::set_Text(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(138));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> double /*[VT_R8:0]*/ __fastcall
DisplayUnitLabelDispT<T>::get_Top()
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(126));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DisplayUnitLabelDispT<T>::set_Top(double Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(126));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_R8:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
DisplayUnitLabelDispT<T>::get_VerticalAlignment()
{
  _TDispID _dispid(*this, OLETEXT("VerticalAlignment"), DISPID(137));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DisplayUnitLabelDispT<T>::set_VerticalAlignment(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("VerticalAlignment"), DISPID(137));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
DisplayUnitLabelDispT<T>::get_ReadingOrder()
{
  _TDispID _dispid(*this, OLETEXT("ReadingOrder"), DISPID(975));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DisplayUnitLabelDispT<T>::set_ReadingOrder(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReadingOrder"), DISPID(975));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> TVariant /*[VT_VARIANT:0]*/ __fastcall
DisplayUnitLabelDispT<T>::get_AutoScaleFont()
{
  _TDispID _dispid(*this, OLETEXT("AutoScaleFont"), DISPID(1525));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DisplayUnitLabelDispT<T>::set_AutoScaleFont(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoScaleFont"), DISPID(1525));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Global
// Interface: _GlobalDisp
// *********************************************************************//
typedef TCoClassCreatorT<_GlobalDisp, _Global, &CLSID_Global, &DIID__Global> CoGlobal;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


};     // namespace Graph_2k

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Graph_2k;
#endif

#pragma option pop

#endif // __Graph_2K_h__
