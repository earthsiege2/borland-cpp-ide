// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.0.1.0.1.2  $
// File generated on 1/29/2002 1:27:45 PM from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Program Files\Common Files\Microsoft Shared\Web Components\10\OWC10.DLL (1)
// LIBID: {0002E550-0000-0000-C000-000000000046}
// LCID: 0
// Helpfile: C:\Program Files\Common Files\Microsoft Shared\Web Components\10\owcvba10.chm
// HelpString: Microsoft Office XP Web Components
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINNT\System32\stdole2.tlb)
//   (2) v1.0 MSDATASRC, (C:\dev\riptide\typelib\typelib\typelibraries\testing\msdatsrc.tlb)
//   (3) v2.0 MSComctlLib, (C:\WINNT\System32\MSCOMCTL.OCX)
//   (4) v2.1 ADODB, (C:\dev\riptide\typelib\typelib\typelibraries\testing\msado21.tlb)
// Parent TypeLibrary:
//   (0) v9.0 Access, (c:\program files\microsoft office\office10\msacc.olb)
// ************************************************************************ //
#ifndef   OWC10_XPH
#define   OWC10_XPH

#pragma option push -b -w-inl

#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0600)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif
#include "MSDATASRC_XP.h"
#include "MSComctlLib_XP.h"
#include "ADODB_XP.h"


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Owc10_xp
{

// *********************************************************************//
// HelpString: Microsoft Office XP Web Components
// Version:    1.0
// *********************************************************************//

/*   **********************************************************

  Type Library Options: 
  Generate C++ Import file
  Expose namespace with 'using'.
  Generate files for dependant type libraries
  Map HRESULT to safecall on dual interfaces
  Place warnings in imported files
  Generate IDE registration for component wrappers
  Generate dispinterfaces
  Generate CoClassCreator wrappers
  Generate C++Builder 4.0 event wrappers for servers
  Generate VCL component wrappers for servers
  Force use of a _TLB file
  Ignore [PreDefined] flag
  Ignore Standard Type Libraries
  Show Debug Output
  Place comments in imported files
   ******************************************************** */

// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_OWC10;
extern __declspec (package) const GUID DIID_IChartEvents;
extern __declspec (package) const GUID IID_ByRef;
extern __declspec (package) const GUID IID_ChChartDraw;
extern __declspec (package) const GUID IID_ChInterior;
extern __declspec (package) const GUID GUID_ChartPatternTypeEnum;
extern __declspec (package) const GUID GUID_ChartFillTypeEnum;
extern __declspec (package) const GUID GUID_ChartPresetGradientTypeEnum;
extern __declspec (package) const GUID GUID_ChartGradientStyleEnum;
extern __declspec (package) const GUID GUID_ChartGradientVariantEnum;
extern __declspec (package) const GUID GUID_ChartPresetTextureEnum;
extern __declspec (package) const GUID GUID_ChartTextureFormatEnum;
extern __declspec (package) const GUID GUID_ChartTexturePlacementEnum;
extern __declspec (package) const GUID IID_ChBorder;
extern __declspec (package) const GUID GUID_ChartLineDashStyleEnum;
extern __declspec (package) const GUID GUID_LineWeightEnum;
extern __declspec (package) const GUID IID_ChFont;
extern __declspec (package) const GUID GUID_UnderlineStyleEnum;
extern __declspec (package) const GUID IID_ChLine;
extern __declspec (package) const GUID GUID_ChartLineMiterEnum;
extern __declspec (package) const GUID GUID_ChartDrawModesEnum;
extern __declspec (package) const GUID IID_ChChartSpace;
extern __declspec (package) const GUID CLSID_ChartSpace;
extern __declspec (package) const GUID GUID_ChartChartLayoutEnum;
extern __declspec (package) const GUID IID_ChCharts;
extern __declspec (package) const GUID IID_ChChart;
extern __declspec (package) const GUID IID_ChAxes;
extern __declspec (package) const GUID IID_ChScaling;
extern __declspec (package) const GUID GUID_ChartScaleOrientationEnum;
extern __declspec (package) const GUID GUID_ChartScaleTypeEnum;
extern __declspec (package) const GUID IID_ChAxis;
extern __declspec (package) const GUID GUID_ChartAxisCrossesEnum;
extern __declspec (package) const GUID IID_ChGridlines;
extern __declspec (package) const GUID GUID_ChartSelectionsEnum;
extern __declspec (package) const GUID GUID_ChartTickMarkEnum;
extern __declspec (package) const GUID GUID_ChartAxisPositionEnum;
extern __declspec (package) const GUID IID_ChTitle;
extern __declspec (package) const GUID GUID_ChartTitlePositionEnum;
extern __declspec (package) const GUID GUID_ChartAxisTypeEnum;
extern __declspec (package) const GUID GUID_ChartAxisGroupingEnum;
extern __declspec (package) const GUID GUID_ChartAxisUnitTypeEnum;
extern __declspec (package) const GUID GUID_ChartGroupingTotalFunctionEnum;
extern __declspec (package) const GUID IID_ChCategoryLabels;
extern __declspec (package) const GUID IID_ChCategoryLabel;
extern __declspec (package) const GUID IID_PivotResultAxis;
extern __declspec (package) const GUID IID_PivotResultGroupAxis;
extern __declspec (package) const GUID IID_PivotData;
extern __declspec (package) const GUID IID_PivotView;
extern __declspec (package) const GUID IID_PivotFieldSets;
extern __declspec (package) const GUID IID_PivotFieldSet;
extern __declspec (package) const GUID IID_PivotFields;
extern __declspec (package) const GUID IID_PivotField;
extern __declspec (package) const GUID IID_PivotFont;
extern __declspec (package) const GUID GUID_PivotHAlignmentEnum;
extern __declspec (package) const GUID GUID_PivotFieldGroupOnEnum;
extern __declspec (package) const GUID GUID_PivotFieldSortDirectionEnum;
extern __declspec (package) const GUID GUID_PivotFieldTypeEnum;
extern __declspec (package) const GUID GUID_PivotFieldFilterFunctionEnum;
extern __declspec (package) const GUID IID_PivotTotal;
extern __declspec (package) const GUID GUID_PivotTotalFunctionEnum;
extern __declspec (package) const GUID GUID_PivotTotalTypeEnum;
extern __declspec (package) const GUID GUID_PivotShowAsEnum;
extern __declspec (package) const GUID IID_PivotMemberProperties;
extern __declspec (package) const GUID IID_PivotMemberProperty;
extern __declspec (package) const GUID GUID_PivotMemberPropertyDisplayEnum;
extern __declspec (package) const GUID IID_PivotMember;
extern __declspec (package) const GUID IID_PivotMembers;
extern __declspec (package) const GUID GUID_PivotMemberFindFormatEnum;
extern __declspec (package) const GUID GUID_PivotMemberCustomGroupTypeEnum;
extern __declspec (package) const GUID GUID_PivotFieldSetOrientationEnum;
extern __declspec (package) const GUID GUID_PivotFieldSetTypeEnum;
extern __declspec (package) const GUID GUID_PivotMembersCompareByEnum;
extern __declspec (package) const GUID IID_PivotFilterUpdate;
extern __declspec (package) const GUID GUID_PivotFilterUpdateMemberStateEnum;
extern __declspec (package) const GUID GUID_PivotFieldSetAllIncludeExcludeEnum;
extern __declspec (package) const GUID IID_PivotAxis;
extern __declspec (package) const GUID IID_PivotGroupAxis;
extern __declspec (package) const GUID IID_PivotLabel;
extern __declspec (package) const GUID IID_PivotDataAxis;
extern __declspec (package) const GUID IID_PivotTotals;
extern __declspec (package) const GUID IID_PivotFilterAxis;
extern __declspec (package) const GUID GUID_PivotViewTotalOrientationEnum;
extern __declspec (package) const GUID GUID_PivotTableExpandEnum;
extern __declspec (package) const GUID IID_IPivotControl;
extern __declspec (package) const GUID GUID_PivotExportActionEnum;
extern __declspec (package) const GUID GUID_ProviderType;
extern __declspec (package) const GUID GUID_PivotTableMemberExpandEnum;
extern __declspec (package) const GUID IID_PivotClassFactory;
extern __declspec (package) const GUID IID_PivotDetailCell;
extern __declspec (package) const GUID IID_PivotCell;
extern __declspec (package) const GUID IID_PivotAggregates;
extern __declspec (package) const GUID IID_PivotAggregate;
extern __declspec (package) const GUID IID_PivotAxisMember;
extern __declspec (package) const GUID IID_PivotRowMember;
extern __declspec (package) const GUID IID_PivotAxisMembers;
extern __declspec (package) const GUID IID_PivotHyperlink;
extern __declspec (package) const GUID IID_PivotResultMemberProperties;
extern __declspec (package) const GUID IID_PivotResultMemberProperty;
extern __declspec (package) const GUID IID_PivotResultField;
extern __declspec (package) const GUID IID_PivotResultGroupField;
extern __declspec (package) const GUID IID_PivotRowMembers;
extern __declspec (package) const GUID IID_PivotColumnMember;
extern __declspec (package) const GUID IID_PivotColumnMembers;
extern __declspec (package) const GUID IID_PivotDetailRange;
extern __declspec (package) const GUID IID_PivotPageMember;
extern __declspec (package) const GUID IID_PivotPageMembers;
extern __declspec (package) const GUID IID_DropSource;
extern __declspec (package) const GUID IID_DropTarget;
extern __declspec (package) const GUID GUID_PivotScrollTypeEnum;
extern __declspec (package) const GUID IID_OCCommands;
extern __declspec (package) const GUID IID_OCCommand;
extern __declspec (package) const GUID GUID_PivotArrowModeEnum;
extern __declspec (package) const GUID GUID_PivotCaretPositionEnum;
extern __declspec (package) const GUID GUID_PivotEditModeEnum;
extern __declspec (package) const GUID IID_PivotResultRowAxis;
extern __declspec (package) const GUID IID_PivotResultColumnAxis;
extern __declspec (package) const GUID IID_PivotResultFilterAxis;
extern __declspec (package) const GUID IID_PivotResultDataAxis;
extern __declspec (package) const GUID IID_PivotRange;
extern __declspec (package) const GUID IID_PivotResultLabel;
extern __declspec (package) const GUID IID_PivotResultPageAxis;
extern __declspec (package) const GUID IID_PivotResultGroupFields;
extern __declspec (package) const GUID IID_Coordinate;
extern __declspec (package) const GUID IID_ChLegend;
extern __declspec (package) const GUID IID_ChLegendEntries;
extern __declspec (package) const GUID IID_ChLegendEntry;
extern __declspec (package) const GUID GUID_ChartLegendPositionEnum;
extern __declspec (package) const GUID IID_ChPlotArea;
extern __declspec (package) const GUID IID_ChSurface;
extern __declspec (package) const GUID GUID_ChartProjectionModeEnum;
extern __declspec (package) const GUID IID_ChSeriesCollection;
extern __declspec (package) const GUID IID_ChSeries;
extern __declspec (package) const GUID IID_ChDataLabelsCollection;
extern __declspec (package) const GUID IID_ChDataLabels;
extern __declspec (package) const GUID GUID_ChartDataLabelPositionEnum;
extern __declspec (package) const GUID IID_ChDataLabel;
extern __declspec (package) const GUID IID_ChPoints;
extern __declspec (package) const GUID IID_ChPoint;
extern __declspec (package) const GUID GUID_ChartDimensionsEnum;
extern __declspec (package) const GUID IID_ChErrorBarsCollection;
extern __declspec (package) const GUID IID_ChErrorBars;
extern __declspec (package) const GUID GUID_ChartEndStyleEnum;
extern __declspec (package) const GUID GUID_ChartErrorBarDirectionEnum;
extern __declspec (package) const GUID GUID_ChartErrorBarIncludeEnum;
extern __declspec (package) const GUID GUID_ChartErrorBarTypeEnum;
extern __declspec (package) const GUID GUID_ChartErrorBarCustomValuesEnum;
extern __declspec (package) const GUID IID_ChMarker;
extern __declspec (package) const GUID GUID_ChartMarkerStyleEnum;
extern __declspec (package) const GUID IID_ChTrendlines;
extern __declspec (package) const GUID IID_ChTrendline;
extern __declspec (package) const GUID GUID_ChartTrendlineTypeEnum;
extern __declspec (package) const GUID GUID_ChartChartTypeEnum;
extern __declspec (package) const GUID IID_ChFormatMap;
extern __declspec (package) const GUID IID_ChSegments;
extern __declspec (package) const GUID IID_ChSegment;
extern __declspec (package) const GUID IID_ChSegmentBoundary;
extern __declspec (package) const GUID GUID_ChartBoundaryValueTypeEnum;
extern __declspec (package) const GUID GUID_ChartSizeRepresentsEnum;
extern __declspec (package) const GUID GUID_ChartDataSourceTypeEnum;
extern __declspec (package) const GUID GUID_ChartSelectionMarksEnum;
extern __declspec (package) const GUID GUID_ChartPlotAggregatesEnum;
extern __declspec (package) const GUID GUID_ChartDropZonesEnum;
extern __declspec (package) const GUID IID_ChDropZone;
extern __declspec (package) const GUID IID_ChChartFields;
extern __declspec (package) const GUID IID_ChChartField;
extern __declspec (package) const GUID IID_OWCLanguageSettings;
extern __declspec (package) const GUID GUID_MsoAppLanguageID;
extern __declspec (package) const GUID GUID_MsoLanguageID;
extern __declspec (package) const GUID DIID_ISpreadsheetEventSink;
extern __declspec (package) const GUID IID__Range;
extern __declspec (package) const GUID GUID_XlBorderWeight;
extern __declspec (package) const GUID GUID_XlColorIndex;
extern __declspec (package) const GUID GUID_XlSearchDirection;
extern __declspec (package) const GUID GUID_XlSortOrder;
extern __declspec (package) const GUID GUID_XlYesNoGuess;
extern __declspec (package) const GUID GUID_XlReferenceStyle;
extern __declspec (package) const GUID IID_ISpreadsheet;
extern __declspec (package) const GUID GUID_SheetExportActionEnum;
extern __declspec (package) const GUID GUID_SheetExportFormat;
extern __declspec (package) const GUID IID_Worksheet;
extern __declspec (package) const GUID IID_AutoFilter;
extern __declspec (package) const GUID IID_Filters;
extern __declspec (package) const GUID IID_Filter;
extern __declspec (package) const GUID IID_Criteria;
extern __declspec (package) const GUID GUID_SheetFilterFunction;
extern __declspec (package) const GUID IID_Names;
extern __declspec (package) const GUID IID_Name;
extern __declspec (package) const GUID IID_Workbook;
extern __declspec (package) const GUID IID_Sheets;
extern __declspec (package) const GUID IID_Windows;
extern __declspec (package) const GUID IID_WINDOW;
extern __declspec (package) const GUID IID_Pane;
extern __declspec (package) const GUID IID_Headings;
extern __declspec (package) const GUID IID_Heading;
extern __declspec (package) const GUID IID_Panes;
extern __declspec (package) const GUID GUID_XlWindowType;
extern __declspec (package) const GUID IID_Worksheets;
extern __declspec (package) const GUID IID_Protection;
extern __declspec (package) const GUID GUID_XlSheetType;
extern __declspec (package) const GUID GUID_XlSheetVisibility;
extern __declspec (package) const GUID GUID_XlCalculation;
extern __declspec (package) const GUID GUID_XlDirection;
extern __declspec (package) const GUID IID_TitleBar;
extern __declspec (package) const GUID IID_Font;
extern __declspec (package) const GUID GUID_XlUnderlineStyle;
extern __declspec (package) const GUID IID_Interior;
extern __declspec (package) const GUID IID_Workbooks;
extern __declspec (package) const GUID IID_Borders;
extern __declspec (package) const GUID GUID_XlBordersIndex;
extern __declspec (package) const GUID IID_Border;
extern __declspec (package) const GUID GUID_XlLineStyle;
extern __declspec (package) const GUID GUID_XlHAlign;
extern __declspec (package) const GUID IID_Hyperlink;
extern __declspec (package) const GUID GUID_XlReadingOrder;
extern __declspec (package) const GUID GUID_XlVAlign;
extern __declspec (package) const GUID CLSID_Spreadsheet;
extern __declspec (package) const GUID GUID_TipTypeEnum;
extern __declspec (package) const GUID GUID_LineStyleEnum;
extern __declspec (package) const GUID GUID_ExpandBitmapTypeEnum;
extern __declspec (package) const GUID GUID_DscFieldTypeEnum;
extern __declspec (package) const GUID GUID_DscTotalTypeEnum;
extern __declspec (package) const GUID GUID_DscGroupOnEnum;
extern __declspec (package) const GUID GUID_DscJoinTypeEnum;
extern __declspec (package) const GUID GUID_DscPageRelTypeEnum;
extern __declspec (package) const GUID GUID_DscObjectTypeEnum;
extern __declspec (package) const GUID GUID_NavButtonEnum;
extern __declspec (package) const GUID GUID_DscDropTypeEnum;
extern __declspec (package) const GUID GUID_DscDropLocationEnum;
extern __declspec (package) const GUID GUID_DscHyperlinkPartEnum;
extern __declspec (package) const GUID GUID_DscLocationEnum;
extern __declspec (package) const GUID GUID_DscRecordsetTypeEnum;
extern __declspec (package) const GUID GUID_DscRowsourceTypeEnum;
extern __declspec (package) const GUID GUID_DscFetchTypeEnum;
extern __declspec (package) const GUID GUID_DscAdviseTypeEnum;
extern __declspec (package) const GUID IID_IOleCommandTargetArgument;
extern __declspec (package) const GUID GUID_OCCommandId;
extern __declspec (package) const GUID IID__NumberFormat;
extern __declspec (package) const GUID CLSID_NumberFormat;
extern __declspec (package) const GUID GUID_XlApplicationInternational;
extern __declspec (package) const GUID IID_OCDirty;
extern __declspec (package) const GUID IID_IOMEvent;
extern __declspec (package) const GUID IID_DesignAdviseSink;
extern __declspec (package) const GUID IID_SchemaFields;
extern __declspec (package) const GUID IID_SchemaField;
extern __declspec (package) const GUID IID_SchemaProperties;
extern __declspec (package) const GUID IID_SchemaProperty;
extern __declspec (package) const GUID IID_SchemaDiagram;
extern __declspec (package) const GUID IID_SchemaRowsources;
extern __declspec (package) const GUID IID_SchemaRowsource;
extern __declspec (package) const GUID IID_LookupSchemaRelationships;
extern __declspec (package) const GUID IID_SchemaRelationship;
extern __declspec (package) const GUID IID_SchemaRelatedFields;
extern __declspec (package) const GUID IID_SchemaRelatedField;
extern __declspec (package) const GUID IID_SublistSchemaRelationships;
extern __declspec (package) const GUID IID_SchemaParameters;
extern __declspec (package) const GUID IID_SchemaParameter;
extern __declspec (package) const GUID IID_SchemaDiagrams;
extern __declspec (package) const GUID IID_SchemaRelationships;
extern __declspec (package) const GUID IID_PageRowsources;
extern __declspec (package) const GUID IID_PageRowsource;
extern __declspec (package) const GUID IID_RecordsetDef;
extern __declspec (package) const GUID IID_SublistRelationships;
extern __declspec (package) const GUID IID_PageRelationship;
extern __declspec (package) const GUID IID_PageRelatedFields;
extern __declspec (package) const GUID IID_PageRelatedField;
extern __declspec (package) const GUID IID_PageField;
extern __declspec (package) const GUID IID_GroupingDef;
extern __declspec (package) const GUID IID_PageFields;
extern __declspec (package) const GUID IID_GroupingDefs;
extern __declspec (package) const GUID IID_ParameterValues;
extern __declspec (package) const GUID IID_ParameterValue;
extern __declspec (package) const GUID IID_LookupRelationships;
extern __declspec (package) const GUID IID_RecordsetDefs;
extern __declspec (package) const GUID IID_AllPageFields;
extern __declspec (package) const GUID IID_AllGroupingDefs;
extern __declspec (package) const GUID GUID_FieldListRelationshipTypeEnum;
extern __declspec (package) const GUID GUID_FieldListObjectTypeEnum;
extern __declspec (package) const GUID GUID_DaAttrEnum;
extern __declspec (package) const GUID IID_IDARef;
extern __declspec (package) const GUID IID_Section;
extern __declspec (package) const GUID GUID_SectTypeEnum;
extern __declspec (package) const GUID IID_DataPage;
extern __declspec (package) const GUID IID_GroupLevel;
extern __declspec (package) const GUID GUID_DscStatusEnum;
extern __declspec (package) const GUID GUID_DscDisplayAlert;
extern __declspec (package) const GUID GUID_DefaultControlTypeEnum;
extern __declspec (package) const GUID GUID_DataPageDesignerFlags;
extern __declspec (package) const GUID GUID_ExportableConnectStringEnum;
extern __declspec (package) const GUID GUID_DscOfflineTypeEnum;
extern __declspec (package) const GUID GUID_DscXMLLocationEnum;
extern __declspec (package) const GUID GUID_DscSaveAsEnum;
extern __declspec (package) const GUID GUID_DscEncodingEnum;
extern __declspec (package) const GUID GUID_NotificationType;
extern __declspec (package) const GUID GUID_RefreshType;
extern __declspec (package) const GUID GUID_SynchronizationStatus;
extern __declspec (package) const GUID IID_GroupLevels;
extern __declspec (package) const GUID IID_DataPages;
extern __declspec (package) const GUID IID_ElementExtension;
extern __declspec (package) const GUID IID_ElementExtensions;
extern __declspec (package) const GUID IID_IDataSourceControl;
extern __declspec (package) const GUID IID_DSCEventInfo;
extern __declspec (package) const GUID DIID__DataSourceControlEvent;
extern __declspec (package) const GUID CLSID_DataSourceControl;
extern __declspec (package) const GUID IID_INavigationControl;
extern __declspec (package) const GUID IID_INavUIHost;
extern __declspec (package) const GUID DIID__NavigationEvent;
extern __declspec (package) const GUID CLSID_RecordNavigationControl;
extern __declspec (package) const GUID IID_IDataPageDesigner;
extern __declspec (package) const GUID IID_IOleUndoManager;
extern __declspec (package) const GUID IID_IOleUndoUnit;
extern __declspec (package) const GUID IID_IOleParentUndoUnit;
extern __declspec (package) const GUID IID_IEnumOleUndoUnits;
extern __declspec (package) const GUID IID_ISimpleDataConverter;
extern __declspec (package) const GUID IID_FieldListHierarchy;
extern __declspec (package) const GUID IID_FieldListHierarchySite;
extern __declspec (package) const GUID IID_FieldListNode;
extern __declspec (package) const GUID IID_FieldListType;
extern __declspec (package) const GUID GUID_FieldListSelectRestriction;
extern __declspec (package) const GUID IID_FieldList;
extern __declspec (package) const GUID IID_FieldListDragData;
extern __declspec (package) const GUID IID_FieldListDragDataList;
extern __declspec (package) const GUID CLSID_FieldListControl;
extern __declspec (package) const GUID IID_IOfflineInfo;
extern __declspec (package) const GUID CLSID_OfflineInfo;
extern __declspec (package) const GUID IID_ChUserDefinedSelection;
extern __declspec (package) const GUID GUID_ChartFillStyleEnum;
extern __declspec (package) const GUID GUID_ChartColorIndexEnum;
extern __declspec (package) const GUID GUID_ChartDataGroupingFunctionEnum;
extern __declspec (package) const GUID GUID_ChartSeriesByEnum;
extern __declspec (package) const GUID GUID_ChartSpecialDataSourcesEnum;
extern __declspec (package) const GUID GUID_ChartPivotDataReferenceEnum;
extern __declspec (package) const GUID GUID_Chart3DSurfaceEnum;
extern __declspec (package) const GUID GUID_ChartLabelOrientationEnum;
extern __declspec (package) const GUID GUID_ChartCommandIdEnum;
extern __declspec (package) const GUID IID_IAddinHost;
extern __declspec (package) const GUID GUID_AddinClientTypeEnum;
extern __declspec (package) const GUID GUID_SpreadSheetCommandId;
extern __declspec (package) const GUID GUID_SheetCommandEnum;
extern __declspec (package) const GUID GUID_XlConstants;
extern __declspec (package) const GUID GUID_XlDeleteShiftDirection;
extern __declspec (package) const GUID GUID_XlInsertShiftDirection;
extern __declspec (package) const GUID GUID_XlFindLookIn;
extern __declspec (package) const GUID GUID_XlLookAt;
extern __declspec (package) const GUID GUID_XlOrientation;
extern __declspec (package) const GUID GUID_XlSearchOrder;
extern __declspec (package) const GUID GUID_XlRangeValueType;
extern __declspec (package) const GUID DIID_IRangeEvents;
extern __declspec (package) const GUID CLSID_Range;
extern __declspec (package) const GUID IID_IXRangeEnum;
extern __declspec (package) const GUID IID_IAddinClient;
extern __declspec (package) const GUID GUID_PivotViewReasonEnum;
extern __declspec (package) const GUID GUID_PivotDataReasonEnum;
extern __declspec (package) const GUID GUID_PivotTableReasonEnum;
extern __declspec (package) const GUID GUID_PivotCommandId;
extern __declspec (package) const GUID DIID_IPivotControlEvents;
extern __declspec (package) const GUID CLSID_PivotTable;
extern __declspec (package) const GUID IID_TextFormat;
extern __declspec (package) const GUID IID_ViewSurface;
extern __declspec (package) const GUID IID_ViewObject;
extern __declspec (package) const GUID IID_MouseTarget;
extern __declspec (package) const GUID IID_SelectionHighlight;
extern __declspec (package) const GUID IID_ActiveObject;
extern __declspec (package) const GUID IID_PopupMenu;
extern __declspec (package) const GUID IID_AutoFitObject;
extern __declspec (package) const GUID IID_Moniker;
extern __declspec (package) const GUID IID_InplaceObject;
extern __declspec (package) const GUID IID_PropertyNotify;
extern __declspec (package) const GUID IID_MutualExpando;
extern __declspec (package) const GUID IID_EditableObject;
extern __declspec (package) const GUID IID_TipProvider;
extern __declspec (package) const GUID IID_IPivotCopy;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
enum      ChartPatternTypeEnum;
enum      ChartFillTypeEnum;
enum      ChartPresetGradientTypeEnum;
enum      ChartGradientStyleEnum;
enum      ChartGradientVariantEnum;
enum      ChartPresetTextureEnum;
enum      ChartTextureFormatEnum;
enum      ChartTexturePlacementEnum;
enum      ChartLineDashStyleEnum;
enum      LineWeightEnum;
enum      UnderlineStyleEnum;
enum      ChartLineMiterEnum;
enum      ChartDrawModesEnum;
enum      ChartChartLayoutEnum;
enum      ChartScaleOrientationEnum;
enum      ChartScaleTypeEnum;
enum      ChartAxisCrossesEnum;
enum      ChartSelectionsEnum;
enum      ChartTickMarkEnum;
enum      ChartAxisPositionEnum;
enum      ChartTitlePositionEnum;
enum      ChartAxisTypeEnum;
enum      ChartAxisGroupingEnum;
enum      ChartAxisUnitTypeEnum;
enum      ChartGroupingTotalFunctionEnum;
enum      PivotHAlignmentEnum;
enum      PivotFieldGroupOnEnum;
enum      PivotFieldSortDirectionEnum;
enum      PivotFieldTypeEnum;
enum      PivotFieldFilterFunctionEnum;
enum      PivotTotalFunctionEnum;
enum      PivotTotalTypeEnum;
enum      PivotShowAsEnum;
enum      PivotMemberPropertyDisplayEnum;
enum      PivotMemberFindFormatEnum;
enum      PivotMemberCustomGroupTypeEnum;
enum      PivotFieldSetOrientationEnum;
enum      PivotFieldSetTypeEnum;
enum      PivotMembersCompareByEnum;
enum      PivotFilterUpdateMemberStateEnum;
enum      PivotFieldSetAllIncludeExcludeEnum;
enum      PivotViewTotalOrientationEnum;
enum      PivotTableExpandEnum;
enum      PivotExportActionEnum;
enum      ProviderType;
enum      PivotTableMemberExpandEnum;
enum      PivotScrollTypeEnum;
enum      PivotArrowModeEnum;
enum      PivotCaretPositionEnum;
enum      PivotEditModeEnum;
enum      ChartLegendPositionEnum;
enum      ChartProjectionModeEnum;
enum      ChartDataLabelPositionEnum;
enum      ChartDimensionsEnum;
enum      ChartEndStyleEnum;
enum      ChartErrorBarDirectionEnum;
enum      ChartErrorBarIncludeEnum;
enum      ChartErrorBarTypeEnum;
enum      ChartErrorBarCustomValuesEnum;
enum      ChartMarkerStyleEnum;
enum      ChartTrendlineTypeEnum;
enum      ChartChartTypeEnum;
enum      ChartBoundaryValueTypeEnum;
enum      ChartSizeRepresentsEnum;
enum      ChartDataSourceTypeEnum;
enum      ChartSelectionMarksEnum;
enum      ChartPlotAggregatesEnum;
enum      ChartDropZonesEnum;
enum      MsoAppLanguageID;
enum      MsoLanguageID;
enum      XlBorderWeight;
enum      XlColorIndex;
enum      XlSearchDirection;
enum      XlSortOrder;
enum      XlYesNoGuess;
enum      XlReferenceStyle;
enum      SheetExportActionEnum;
enum      SheetExportFormat;
enum      SheetFilterFunction;
enum      XlWindowType;
enum      XlSheetType;
enum      XlSheetVisibility;
enum      XlCalculation;
enum      XlDirection;
enum      XlUnderlineStyle;
enum      XlBordersIndex;
enum      XlLineStyle;
enum      XlHAlign;
enum      XlReadingOrder;
enum      XlVAlign;
enum      TipTypeEnum;
enum      LineStyleEnum;
enum      ExpandBitmapTypeEnum;
enum      DscFieldTypeEnum;
enum      DscTotalTypeEnum;
enum      DscGroupOnEnum;
enum      DscJoinTypeEnum;
enum      DscPageRelTypeEnum;
enum      DscObjectTypeEnum;
enum      NavButtonEnum;
enum      DscDropTypeEnum;
enum      DscDropLocationEnum;
enum      DscHyperlinkPartEnum;
enum      DscLocationEnum;
enum      DscRecordsetTypeEnum;
enum      DscRowsourceTypeEnum;
enum      DscFetchTypeEnum;
enum      DscAdviseTypeEnum;
enum      OCCommandId;
enum      XlApplicationInternational;
enum      FieldListRelationshipTypeEnum;
enum      FieldListObjectTypeEnum;
enum      DaAttrEnum;
enum      SectTypeEnum;
enum      DscStatusEnum;
enum      DscDisplayAlert;
enum      DefaultControlTypeEnum;
enum      DataPageDesignerFlags;
enum      ExportableConnectStringEnum;
enum      DscOfflineTypeEnum;
enum      DscXMLLocationEnum;
enum      DscSaveAsEnum;
enum      DscEncodingEnum;
enum      NotificationType;
enum      RefreshType;
enum      SynchronizationStatus;
enum      FieldListSelectRestriction;
enum      ChartFillStyleEnum;
enum      ChartColorIndexEnum;
enum      ChartDataGroupingFunctionEnum;
enum      ChartSeriesByEnum;
enum      ChartSpecialDataSourcesEnum;
enum      ChartPivotDataReferenceEnum;
enum      Chart3DSurfaceEnum;
enum      ChartLabelOrientationEnum;
enum      ChartCommandIdEnum;
enum      AddinClientTypeEnum;
enum      SpreadSheetCommandId;
enum      SheetCommandEnum;
enum      XlConstants;
enum      XlDeleteShiftDirection;
enum      XlInsertShiftDirection;
enum      XlFindLookIn;
enum      XlLookAt;
enum      XlOrientation;
enum      XlSearchOrder;
enum      XlRangeValueType;
enum      PivotViewReasonEnum;
enum      PivotDataReasonEnum;
enum      PivotTableReasonEnum;
enum      PivotCommandId;
interface DECLSPEC_UUID("{F5B39A7A-1480-11D3-8549-00C04FAC67D7}") IChartEvents;
typedef TComInterface<IChartEvents, &DIID_IChartEvents> IChartEventsPtr;

interface DECLSPEC_UUID("{0B817E8E-5A5A-11D3-BE88-0050041DB15A}") ByRef;
typedef TComInterface<ByRef, &IID_ByRef> ByRefPtr;

interface DECLSPEC_UUID("{278585C3-D74B-4E30-ACEB-77D4777639E6}") ChChartDraw;
typedef TComInterface<ChChartDraw, &IID_ChChartDraw> ChChartDrawPtr;

interface DECLSPEC_UUID("{56C833A6-3E1C-11D3-831A-00C04F991C70}") ChInterior;
typedef TComInterface<ChInterior, &IID_ChInterior> ChInteriorPtr;

interface DECLSPEC_UUID("{F5B39A72-1480-11D3-8549-00C04FAC67D7}") ChBorder;
typedef TComInterface<ChBorder, &IID_ChBorder> ChBorderPtr;

interface DECLSPEC_UUID("{F5B39A86-1480-11D3-8549-00C04FAC67D7}") ChFont;
typedef TComInterface<ChFont, &IID_ChFont> ChFontPtr;

interface DECLSPEC_UUID("{966CCC26-4469-11D3-8324-00C04F991C70}") ChLine;
typedef TComInterface<ChLine, &IID_ChLine> ChLinePtr;

interface DECLSPEC_UUID("{F5B39A82-1480-11D3-8549-00C04FAC67D7}") ChChartSpace;
typedef TComInterface<ChChartSpace, &IID_ChChartSpace> ChChartSpacePtr;

interface DECLSPEC_UUID("{F5B39AE4-1480-11D3-8549-00C04FAC67D7}") ChCharts;
typedef TComInterface<ChCharts, &IID_ChCharts> ChChartsPtr;

interface DECLSPEC_UUID("{F5B39AE5-1480-11D3-8549-00C04FAC67D7}") ChChart;
typedef TComInterface<ChChart, &IID_ChChart> ChChartPtr;

interface DECLSPEC_UUID("{F5B39AE6-1480-11D3-8549-00C04FAC67D7}") ChAxes;
typedef TComInterface<ChAxes, &IID_ChAxes> ChAxesPtr;

interface DECLSPEC_UUID("{F5B39ABB-1480-11D3-8549-00C04FAC67D7}") ChScaling;
typedef TComInterface<ChScaling, &IID_ChScaling> ChScalingPtr;

interface DECLSPEC_UUID("{F5B39AE7-1480-11D3-8549-00C04FAC67D7}") ChAxis;
typedef TComInterface<ChAxis, &IID_ChAxis> ChAxisPtr;

interface DECLSPEC_UUID("{F5B39AC4-1480-11D3-8549-00C04FAC67D7}") ChGridlines;
typedef TComInterface<ChGridlines, &IID_ChGridlines> ChGridlinesPtr;

interface DECLSPEC_UUID("{F5B39ABE-1480-11D3-8549-00C04FAC67D7}") ChTitle;
typedef TComInterface<ChTitle, &IID_ChTitle> ChTitlePtr;

interface DECLSPEC_UUID("{EDF774DC-D540-40F4-99F2-75C83379CAA8}") ChCategoryLabels;
typedef TComInterface<ChCategoryLabels, &IID_ChCategoryLabels> ChCategoryLabelsPtr;

interface DECLSPEC_UUID("{D4765783-5F64-4A53-BD65-66839B65B4C9}") ChCategoryLabel;
typedef TComInterface<ChCategoryLabel, &IID_ChCategoryLabel> ChCategoryLabelPtr;

interface DECLSPEC_UUID("{D1AFFCE4-FCE5-11D2-8F35-00600893B533}") PivotResultAxis;
typedef TComInterface<PivotResultAxis, &IID_PivotResultAxis> PivotResultAxisPtr;

interface DECLSPEC_UUID("{2C8CED10-01AF-11D3-8F35-00600893B533}") PivotResultGroupAxis;
typedef TComInterface<PivotResultGroupAxis, &IID_PivotResultGroupAxis> PivotResultGroupAxisPtr;

interface DECLSPEC_UUID("{F5B39B30-1480-11D3-8549-00C04FAC67D7}") PivotData;
typedef TComInterface<PivotData, &IID_PivotData> PivotDataPtr;

interface DECLSPEC_UUID("{F5B39B29-1480-11D3-8549-00C04FAC67D7}") PivotView;
typedef TComInterface<PivotView, &IID_PivotView> PivotViewPtr;

interface DECLSPEC_UUID("{F5B39AAD-1480-11D3-8549-00C04FAC67D7}") PivotFieldSets;
typedef TComInterface<PivotFieldSets, &IID_PivotFieldSets> PivotFieldSetsPtr;

interface DECLSPEC_UUID("{F5B39AAE-1480-11D3-8549-00C04FAC67D7}") PivotFieldSet;
typedef TComInterface<PivotFieldSet, &IID_PivotFieldSet> PivotFieldSetPtr;

interface DECLSPEC_UUID("{F5B39B2A-1480-11D3-8549-00C04FAC67D7}") PivotFields;
typedef TComInterface<PivotFields, &IID_PivotFields> PivotFieldsPtr;

interface DECLSPEC_UUID("{F5B39B2C-1480-11D3-8549-00C04FAC67D7}") PivotField;
typedef TComInterface<PivotField, &IID_PivotField> PivotFieldPtr;

interface DECLSPEC_UUID("{F5B39B01-1480-11D3-8549-00C04FAC67D7}") PivotFont;
typedef TComInterface<PivotFont, &IID_PivotFont> PivotFontPtr;

interface DECLSPEC_UUID("{F5B39B2F-1480-11D3-8549-00C04FAC67D7}") PivotTotal;
typedef TComInterface<PivotTotal, &IID_PivotTotal> PivotTotalPtr;

interface DECLSPEC_UUID("{0F57F292-726F-4817-A78B-52D452498519}") PivotMemberProperties;
typedef TComInterface<PivotMemberProperties, &IID_PivotMemberProperties> PivotMemberPropertiesPtr;

interface DECLSPEC_UUID("{6ADF4A9E-5E7D-47EE-A3B8-CE06023D6A14}") PivotMemberProperty;
typedef TComInterface<PivotMemberProperty, &IID_PivotMemberProperty> PivotMemberPropertyPtr;

interface DECLSPEC_UUID("{F5B39B33-1480-11D3-8549-00C04FAC67D7}") PivotMember;
typedef TComInterface<PivotMember, &IID_PivotMember> PivotMemberPtr;

interface DECLSPEC_UUID("{F5B39B32-1480-11D3-8549-00C04FAC67D7}") PivotMembers;
typedef TComInterface<PivotMembers, &IID_PivotMembers> PivotMembersPtr;

interface DECLSPEC_UUID("{A5E83EE4-5A92-11D3-BF58-00C04F61319A}") PivotFilterUpdate;
typedef TComInterface<PivotFilterUpdate, &IID_PivotFilterUpdate> PivotFilterUpdatePtr;

interface DECLSPEC_UUID("{F5B39B2B-1480-11D3-8549-00C04FAC67D7}") PivotAxis;
typedef TComInterface<PivotAxis, &IID_PivotAxis> PivotAxisPtr;

interface DECLSPEC_UUID("{F5B39AA7-1480-11D3-8549-00C04FAC67D7}") PivotGroupAxis;
typedef TComInterface<PivotGroupAxis, &IID_PivotGroupAxis> PivotGroupAxisPtr;

interface DECLSPEC_UUID("{F5B39B2D-1480-11D3-8549-00C04FAC67D7}") PivotLabel;
typedef TComInterface<PivotLabel, &IID_PivotLabel> PivotLabelPtr;

interface DECLSPEC_UUID("{F5B39B43-1480-11D3-8549-00C04FAC67D7}") PivotDataAxis;
typedef TComInterface<PivotDataAxis, &IID_PivotDataAxis> PivotDataAxisPtr;

interface DECLSPEC_UUID("{F5B39B2E-1480-11D3-8549-00C04FAC67D7}") PivotTotals;
typedef TComInterface<PivotTotals, &IID_PivotTotals> PivotTotalsPtr;

interface DECLSPEC_UUID("{F5B39AFD-1480-11D3-8549-00C04FAC67D7}") PivotFilterAxis;
typedef TComInterface<PivotFilterAxis, &IID_PivotFilterAxis> PivotFilterAxisPtr;

interface DECLSPEC_UUID("{F5B39B08-1480-11D3-8549-00C04FAC67D7}") IPivotControl;
typedef TComInterface<IPivotControl, &IID_IPivotControl> IPivotControlPtr;

interface DECLSPEC_UUID("{73F4D511-C851-11D2-8F2D-00600893B533}") PivotClassFactory;
typedef TComInterface<PivotClassFactory, &IID_PivotClassFactory> PivotClassFactoryPtr;

interface DECLSPEC_UUID("{F5B39B48-1480-11D3-8549-00C04FAC67D7}") PivotDetailCell;
typedef TComInterface<PivotDetailCell, &IID_PivotDetailCell> PivotDetailCellPtr;

interface DECLSPEC_UUID("{F5B39B31-1480-11D3-8549-00C04FAC67D7}") PivotCell;
typedef TComInterface<PivotCell, &IID_PivotCell> PivotCellPtr;

interface DECLSPEC_UUID("{F5B39A77-1480-11D3-8549-00C04FAC67D7}") PivotAggregates;
typedef TComInterface<PivotAggregates, &IID_PivotAggregates> PivotAggregatesPtr;

interface DECLSPEC_UUID("{F5B39A78-1480-11D3-8549-00C04FAC67D7}") PivotAggregate;
typedef TComInterface<PivotAggregate, &IID_PivotAggregate> PivotAggregatePtr;

interface DECLSPEC_UUID("{1D40A583-EBA2-11D2-8F35-00600893B533}") PivotAxisMember;
typedef TComInterface<PivotAxisMember, &IID_PivotAxisMember> PivotAxisMemberPtr;

interface DECLSPEC_UUID("{1D40A584-EBA2-11D2-8F35-00600893B533}") PivotRowMember;
typedef TComInterface<PivotRowMember, &IID_PivotRowMember> PivotRowMemberPtr;

interface DECLSPEC_UUID("{30971540-EEB8-11D2-8F35-00600893B533}") PivotAxisMembers;
typedef TComInterface<PivotAxisMembers, &IID_PivotAxisMembers> PivotAxisMembersPtr;

interface DECLSPEC_UUID("{F5B39A9C-1480-11D3-8549-00C04FAC67D7}") PivotHyperlink;
typedef TComInterface<PivotHyperlink, &IID_PivotHyperlink> PivotHyperlinkPtr;

interface DECLSPEC_UUID("{23E41747-B2E7-4A36-9CEB-99799D619D02}") PivotResultMemberProperties;
typedef TComInterface<PivotResultMemberProperties, &IID_PivotResultMemberProperties> PivotResultMemberPropertiesPtr;

interface DECLSPEC_UUID("{07C8959F-2E2A-4149-B6EA-6C511B21F485}") PivotResultMemberProperty;
typedef TComInterface<PivotResultMemberProperty, &IID_PivotResultMemberProperty> PivotResultMemberPropertyPtr;

interface DECLSPEC_UUID("{682A2445-8F22-4E2D-A73B-D04E4CC273B5}") PivotResultField;
typedef TComInterface<PivotResultField, &IID_PivotResultField> PivotResultFieldPtr;

interface DECLSPEC_UUID("{DC0342FE-039A-4D2D-80BF-BCA659270822}") PivotResultGroupField;
typedef TComInterface<PivotResultGroupField, &IID_PivotResultGroupField> PivotResultGroupFieldPtr;

interface DECLSPEC_UUID("{30971541-EEB8-11D2-8F35-00600893B533}") PivotRowMembers;
typedef TComInterface<PivotRowMembers, &IID_PivotRowMembers> PivotRowMembersPtr;

interface DECLSPEC_UUID("{1D40A585-EBA2-11D2-8F35-00600893B533}") PivotColumnMember;
typedef TComInterface<PivotColumnMember, &IID_PivotColumnMember> PivotColumnMemberPtr;

interface DECLSPEC_UUID("{30971542-EEB8-11D2-8F35-00600893B533}") PivotColumnMembers;
typedef TComInterface<PivotColumnMembers, &IID_PivotColumnMembers> PivotColumnMembersPtr;

interface DECLSPEC_UUID("{F5B39B47-1480-11D3-8549-00C04FAC67D7}") PivotDetailRange;
typedef TComInterface<PivotDetailRange, &IID_PivotDetailRange> PivotDetailRangePtr;

interface DECLSPEC_UUID("{C575AE1E-3959-441A-BED4-D3DEA9EB8037}") PivotPageMember;
typedef TComInterface<PivotPageMember, &IID_PivotPageMember> PivotPageMemberPtr;

interface DECLSPEC_UUID("{E3AB2FF8-B95F-4C05-BF3F-6E9BA007F81C}") PivotPageMembers;
typedef TComInterface<PivotPageMembers, &IID_PivotPageMembers> PivotPageMembersPtr;

interface DECLSPEC_UUID("{D6CE4620-E224-11D2-8F35-00600893B533}") DropSource;
typedef TComInterface<DropSource, &IID_DropSource> DropSourcePtr;

interface DECLSPEC_UUID("{77186960-CDB1-11D2-8F2E-00600893B533}") DropTarget;
typedef TComInterface<DropTarget, &IID_DropTarget> DropTargetPtr;

interface DECLSPEC_UUID("{85FE02E2-51A7-11D3-BE84-0050041DB15A}") OCCommands;
typedef TComInterface<OCCommands, &IID_OCCommands> OCCommandsPtr;

interface DECLSPEC_UUID("{B9B7C776-51A7-11D3-BE84-0050041DB15A}") OCCommand;
typedef TComInterface<OCCommand, &IID_OCCommand> OCCommandPtr;

interface DECLSPEC_UUID("{2C8CED11-01AF-11D3-8F35-00600893B533}") PivotResultRowAxis;
typedef TComInterface<PivotResultRowAxis, &IID_PivotResultRowAxis> PivotResultRowAxisPtr;

interface DECLSPEC_UUID("{2C8CED12-01AF-11D3-8F35-00600893B533}") PivotResultColumnAxis;
typedef TComInterface<PivotResultColumnAxis, &IID_PivotResultColumnAxis> PivotResultColumnAxisPtr;

interface DECLSPEC_UUID("{2C8CED13-01AF-11D3-8F35-00600893B533}") PivotResultFilterAxis;
typedef TComInterface<PivotResultFilterAxis, &IID_PivotResultFilterAxis> PivotResultFilterAxisPtr;

interface DECLSPEC_UUID("{2C8CED15-01AF-11D3-8F35-00600893B533}") PivotResultDataAxis;
typedef TComInterface<PivotResultDataAxis, &IID_PivotResultDataAxis> PivotResultDataAxisPtr;

interface DECLSPEC_UUID("{F5B39B4A-1480-11D3-8549-00C04FAC67D7}") PivotRange;
typedef TComInterface<PivotRange, &IID_PivotRange> PivotRangePtr;

interface DECLSPEC_UUID("{D5A2B201-0334-11D3-8F39-00600893B533}") PivotResultLabel;
typedef TComInterface<PivotResultLabel, &IID_PivotResultLabel> PivotResultLabelPtr;

interface DECLSPEC_UUID("{2719FF1C-6999-4C17-94B3-887FCA2DCFA0}") PivotResultPageAxis;
typedef TComInterface<PivotResultPageAxis, &IID_PivotResultPageAxis> PivotResultPageAxisPtr;

interface DECLSPEC_UUID("{3A3AF091-8C35-4CC7-A1F4-B70D239D773B}") PivotResultGroupFields;
typedef TComInterface<PivotResultGroupFields, &IID_PivotResultGroupFields> PivotResultGroupFieldsPtr;

interface DECLSPEC_UUID("{08801567-AFB8-45B0-A076-CC91579EC10E}") Coordinate;
typedef TComInterface<Coordinate, &IID_Coordinate> CoordinatePtr;

interface DECLSPEC_UUID("{F5B39AEC-1480-11D3-8549-00C04FAC67D7}") ChLegend;
typedef TComInterface<ChLegend, &IID_ChLegend> ChLegendPtr;

interface DECLSPEC_UUID("{F5B39AB8-1480-11D3-8549-00C04FAC67D7}") ChLegendEntries;
typedef TComInterface<ChLegendEntries, &IID_ChLegendEntries> ChLegendEntriesPtr;

interface DECLSPEC_UUID("{F5B39AB9-1480-11D3-8549-00C04FAC67D7}") ChLegendEntry;
typedef TComInterface<ChLegendEntry, &IID_ChLegendEntry> ChLegendEntryPtr;

interface DECLSPEC_UUID("{F5B39ABA-1480-11D3-8549-00C04FAC67D7}") ChPlotArea;
typedef TComInterface<ChPlotArea, &IID_ChPlotArea> ChPlotAreaPtr;

interface DECLSPEC_UUID("{C592C1D2-448A-11D3-82BA-00C04F4C2A96}") ChSurface;
typedef TComInterface<ChSurface, &IID_ChSurface> ChSurfacePtr;

interface DECLSPEC_UUID("{F5B39ABD-1480-11D3-8549-00C04FAC67D7}") ChSeriesCollection;
typedef TComInterface<ChSeriesCollection, &IID_ChSeriesCollection> ChSeriesCollectionPtr;

interface DECLSPEC_UUID("{F5B39AC1-1480-11D3-8549-00C04FAC67D7}") ChSeries;
typedef TComInterface<ChSeries, &IID_ChSeries> ChSeriesPtr;

interface DECLSPEC_UUID("{F5B39A71-1480-11D3-8549-00C04FAC67D7}") ChDataLabelsCollection;
typedef TComInterface<ChDataLabelsCollection, &IID_ChDataLabelsCollection> ChDataLabelsCollectionPtr;

interface DECLSPEC_UUID("{F5B39AC2-1480-11D3-8549-00C04FAC67D7}") ChDataLabels;
typedef TComInterface<ChDataLabels, &IID_ChDataLabels> ChDataLabelsPtr;

interface DECLSPEC_UUID("{F5B39AE8-1480-11D3-8549-00C04FAC67D7}") ChDataLabel;
typedef TComInterface<ChDataLabel, &IID_ChDataLabel> ChDataLabelPtr;

interface DECLSPEC_UUID("{F5B39AEA-1480-11D3-8549-00C04FAC67D7}") ChPoints;
typedef TComInterface<ChPoints, &IID_ChPoints> ChPointsPtr;

interface DECLSPEC_UUID("{F5B39AE9-1480-11D3-8549-00C04FAC67D7}") ChPoint;
typedef TComInterface<ChPoint, &IID_ChPoint> ChPointPtr;

interface DECLSPEC_UUID("{F5B39AB7-1480-11D3-8549-00C04FAC67D7}") ChErrorBarsCollection;
typedef TComInterface<ChErrorBarsCollection, &IID_ChErrorBarsCollection> ChErrorBarsCollectionPtr;

interface DECLSPEC_UUID("{F5B39AEB-1480-11D3-8549-00C04FAC67D7}") ChErrorBars;
typedef TComInterface<ChErrorBars, &IID_ChErrorBars> ChErrorBarsPtr;

interface DECLSPEC_UUID("{F5B39ABC-1480-11D3-8549-00C04FAC67D7}") ChMarker;
typedef TComInterface<ChMarker, &IID_ChMarker> ChMarkerPtr;

interface DECLSPEC_UUID("{F5B39AC0-1480-11D3-8549-00C04FAC67D7}") ChTrendlines;
typedef TComInterface<ChTrendlines, &IID_ChTrendlines> ChTrendlinesPtr;

interface DECLSPEC_UUID("{F5B39ABF-1480-11D3-8549-00C04FAC67D7}") ChTrendline;
typedef TComInterface<ChTrendline, &IID_ChTrendline> ChTrendlinePtr;

interface DECLSPEC_UUID("{BEAE3F40-6FB5-11D2-A8FF-00C04FAC6830}") ChFormatMap;
typedef TComInterface<ChFormatMap, &IID_ChFormatMap> ChFormatMapPtr;

interface DECLSPEC_UUID("{BEAE3F41-6FB5-11D2-A8FF-00C04FAC6830}") ChSegments;
typedef TComInterface<ChSegments, &IID_ChSegments> ChSegmentsPtr;

interface DECLSPEC_UUID("{EB509C25-4748-4D52-A6FE-137BA0642027}") ChSegment;
typedef TComInterface<ChSegment, &IID_ChSegment> ChSegmentPtr;

interface DECLSPEC_UUID("{186FEDB0-6FB6-11D2-A8FF-00C04FAC6830}") ChSegmentBoundary;
typedef TComInterface<ChSegmentBoundary, &IID_ChSegmentBoundary> ChSegmentBoundaryPtr;

interface DECLSPEC_UUID("{F0706B76-6BB3-11D3-A18A-00C04F612970}") ChDropZone;
typedef TComInterface<ChDropZone, &IID_ChDropZone> ChDropZonePtr;

interface DECLSPEC_UUID("{BB4C16FA-6BEC-11D3-A18A-00C04F612970}") ChChartFields;
typedef TComInterface<ChChartFields, &IID_ChChartFields> ChChartFieldsPtr;

interface DECLSPEC_UUID("{D7842C36-6BEC-11D3-A18A-00C04F612970}") ChChartField;
typedef TComInterface<ChChartField, &IID_ChChartField> ChChartFieldPtr;

interface DECLSPEC_UUID("{6F5A76C3-0AC7-4DED-9A6B-A3547FD7B7BB}") OWCLanguageSettings;
typedef TComInterface<OWCLanguageSettings, &IID_OWCLanguageSettings> OWCLanguageSettingsPtr;

interface DECLSPEC_UUID("{F5B39A75-1480-11D3-8549-00C04FAC67D7}") ISpreadsheetEventSink;
typedef TComInterface<ISpreadsheetEventSink, &DIID_ISpreadsheetEventSink> ISpreadsheetEventSinkPtr;

interface DECLSPEC_UUID("{F5B39B05-1480-11D3-8549-00C04FAC67D7}") _Range;
typedef TComInterface<_Range, &IID__Range> _RangePtr;

interface DECLSPEC_UUID("{F5B39A79-1480-11D3-8549-00C04FAC67D7}") ISpreadsheet;
typedef TComInterface<ISpreadsheet, &IID_ISpreadsheet> ISpreadsheetPtr;

interface DECLSPEC_UUID("{F5B39A88-1480-11D3-8549-00C04FAC67D7}") Worksheet;
typedef TComInterface<Worksheet, &IID_Worksheet> WorksheetPtr;

interface DECLSPEC_UUID("{F5B39B0E-1480-11D3-8549-00C04FAC67D7}") AutoFilter;
typedef TComInterface<AutoFilter, &IID_AutoFilter> AutoFilterPtr;

interface DECLSPEC_UUID("{F5B39B04-1480-11D3-8549-00C04FAC67D7}") Filters;
typedef TComInterface<Filters, &IID_Filters> FiltersPtr;

interface DECLSPEC_UUID("{F5B39B03-1480-11D3-8549-00C04FAC67D7}") Filter;
typedef TComInterface<Filter, &IID_Filter> FilterPtr;

interface DECLSPEC_UUID("{F5B39B02-1480-11D3-8549-00C04FAC67D7}") Criteria;
typedef TComInterface<Criteria, &IID_Criteria> CriteriaPtr;

interface DECLSPEC_UUID("{F5B39BAD-1480-11D3-8549-00C04FAC67D7}") Names;
typedef TComInterface<Names, &IID_Names> NamesPtr;

interface DECLSPEC_UUID("{F5B39BAC-1480-11D3-8549-00C04FAC67D7}") Name;
typedef TComInterface<Name, &IID_Name> NamePtr;

interface DECLSPEC_UUID("{F5B39BA6-1480-11D3-8549-00C04FAC67D7}") Workbook;
typedef TComInterface<Workbook, &IID_Workbook> WorkbookPtr;

interface DECLSPEC_UUID("{F5B39BA7-1480-11D3-8549-00C04FAC67D7}") Sheets;
typedef TComInterface<Sheets, &IID_Sheets> SheetsPtr;

interface DECLSPEC_UUID("{F5B39BAB-1480-11D3-8549-00C04FAC67D7}") Windows;
typedef TComInterface<Windows, &IID_Windows> WindowsPtr;

interface DECLSPEC_UUID("{F5B39BAA-1480-11D3-8549-00C04FAC67D7}") WINDOW;
typedef TComInterface<WINDOW, &IID_WINDOW> WINDOWPtr;

interface DECLSPEC_UUID("{F5B39AB2-1480-11D3-8549-00C04FAC67D7}") Pane;
typedef TComInterface<Pane, &IID_Pane> PanePtr;

interface DECLSPEC_UUID("{F5B39BA3-1480-11D3-8549-00C04FAC67D7}") Headings;
typedef TComInterface<Headings, &IID_Headings> HeadingsPtr;

interface DECLSPEC_UUID("{F5B39BA4-1480-11D3-8549-00C04FAC67D7}") Heading;
typedef TComInterface<Heading, &IID_Heading> HeadingPtr;

interface DECLSPEC_UUID("{F5B39AB5-1480-11D3-8549-00C04FAC67D7}") Panes;
typedef TComInterface<Panes, &IID_Panes> PanesPtr;

interface DECLSPEC_UUID("{F5B39BA8-1480-11D3-8549-00C04FAC67D7}") Worksheets;
typedef TComInterface<Worksheets, &IID_Worksheets> WorksheetsPtr;

interface DECLSPEC_UUID("{F5B39B3D-1480-11D3-8549-00C04FAC67D7}") Protection;
typedef TComInterface<Protection, &IID_Protection> ProtectionPtr;

interface DECLSPEC_UUID("{F5B39B0B-1480-11D3-8549-00C04FAC67D7}") TitleBar;
typedef TComInterface<TitleBar, &IID_TitleBar> TitleBarPtr;

interface DECLSPEC_UUID("{6F5A761A-0AC7-4DED-9A6B-A3547FD7B7BB}") Font;
typedef TComInterface<Font, &IID_Font> FontPtr;

interface DECLSPEC_UUID("{6F5A761B-0AC7-4DED-9A6B-A3547FD7B7BB}") Interior;
typedef TComInterface<Interior, &IID_Interior> InteriorPtr;

interface DECLSPEC_UUID("{F5B39BA5-1480-11D3-8549-00C04FAC67D7}") Workbooks;
typedef TComInterface<Workbooks, &IID_Workbooks> WorkbooksPtr;

interface DECLSPEC_UUID("{F5B39A7D-1480-11D3-8549-00C04FAC67D7}") Borders;
typedef TComInterface<Borders, &IID_Borders> BordersPtr;

interface DECLSPEC_UUID("{6F5A7618-0AC7-4DED-9A6B-A3547FD7B7BB}") Border;
typedef TComInterface<Border, &IID_Border> BorderPtr;

interface DECLSPEC_UUID("{6F5A7620-0AC7-4DED-9A6B-A3547FD7B7BB}") Hyperlink;
typedef TComInterface<Hyperlink, &IID_Hyperlink> HyperlinkPtr;

interface DECLSPEC_UUID("{FB8D568A-AE5F-4136-8223-6E24ABE10A28}") IOleCommandTargetArgument;
typedef TComInterface<IOleCommandTargetArgument, &IID_IOleCommandTargetArgument> IOleCommandTargetArgumentPtr;

interface DECLSPEC_UUID("{81FDD9FE-6464-4A19-82AB-878823E85A5E}") _NumberFormat;
typedef TComInterface<_NumberFormat, &IID__NumberFormat> _NumberFormatPtr;

interface DECLSPEC_UUID("{B166E2BE-A46C-49AC-A76C-D0F2D1257C16}") OCDirty;
typedef TComInterface<OCDirty, &IID_OCDirty> OCDirtyPtr;

interface DECLSPEC_UUID("{F5B39AE3-1480-11D3-8549-00C04FAC67D7}") IOMEvent;
typedef TComInterface<IOMEvent, &IID_IOMEvent> IOMEventPtr;

interface DECLSPEC_UUID("{9B3E2331-87A6-11D1-BACD-00C04FAC6863}") DesignAdviseSink;
typedef TComInterface<DesignAdviseSink, &IID_DesignAdviseSink> DesignAdviseSinkPtr;

interface DECLSPEC_UUID("{F5B39AA3-1480-11D3-8549-00C04FAC67D7}") SchemaFields;
typedef TComInterface<SchemaFields, &IID_SchemaFields> SchemaFieldsPtr;

interface DECLSPEC_UUID("{F5B39A67-1480-11D3-8549-00C04FAC67D7}") SchemaField;
typedef TComInterface<SchemaField, &IID_SchemaField> SchemaFieldPtr;

interface DECLSPEC_UUID("{C233A511-A2BB-11D3-80F9-0050041DC1A6}") SchemaProperties;
typedef TComInterface<SchemaProperties, &IID_SchemaProperties> SchemaPropertiesPtr;

interface DECLSPEC_UUID("{C233A512-A2BB-11D3-80F9-0050041DC1A6}") SchemaProperty;
typedef TComInterface<SchemaProperty, &IID_SchemaProperty> SchemaPropertyPtr;

interface DECLSPEC_UUID("{30C37029-25CD-11D4-8D9D-00500483860C}") SchemaDiagram;
typedef TComInterface<SchemaDiagram, &IID_SchemaDiagram> SchemaDiagramPtr;

interface DECLSPEC_UUID("{F5B39AA4-1480-11D3-8549-00C04FAC67D7}") SchemaRowsources;
typedef TComInterface<SchemaRowsources, &IID_SchemaRowsources> SchemaRowsourcesPtr;

interface DECLSPEC_UUID("{F5B39AC8-1480-11D3-8549-00C04FAC67D7}") SchemaRowsource;
typedef TComInterface<SchemaRowsource, &IID_SchemaRowsource> SchemaRowsourcePtr;

interface DECLSPEC_UUID("{F5B39AF1-1480-11D3-8549-00C04FAC67D7}") LookupSchemaRelationships;
typedef TComInterface<LookupSchemaRelationships, &IID_LookupSchemaRelationships> LookupSchemaRelationshipsPtr;

interface DECLSPEC_UUID("{F5B39AEE-1480-11D3-8549-00C04FAC67D7}") SchemaRelationship;
typedef TComInterface<SchemaRelationship, &IID_SchemaRelationship> SchemaRelationshipPtr;

interface DECLSPEC_UUID("{F5B39A6D-1480-11D3-8549-00C04FAC67D7}") SchemaRelatedFields;
typedef TComInterface<SchemaRelatedFields, &IID_SchemaRelatedFields> SchemaRelatedFieldsPtr;

interface DECLSPEC_UUID("{F5B39A6E-1480-11D3-8549-00C04FAC67D7}") SchemaRelatedField;
typedef TComInterface<SchemaRelatedField, &IID_SchemaRelatedField> SchemaRelatedFieldPtr;

interface DECLSPEC_UUID("{F5B39AF0-1480-11D3-8549-00C04FAC67D7}") SublistSchemaRelationships;
typedef TComInterface<SublistSchemaRelationships, &IID_SublistSchemaRelationships> SublistSchemaRelationshipsPtr;

interface DECLSPEC_UUID("{F5B39AED-1480-11D3-8549-00C04FAC67D7}") SchemaParameters;
typedef TComInterface<SchemaParameters, &IID_SchemaParameters> SchemaParametersPtr;

interface DECLSPEC_UUID("{F5B39A89-1480-11D3-8549-00C04FAC67D7}") SchemaParameter;
typedef TComInterface<SchemaParameter, &IID_SchemaParameter> SchemaParameterPtr;

interface DECLSPEC_UUID("{30C37028-25CD-11D4-8D9D-00500483860C}") SchemaDiagrams;
typedef TComInterface<SchemaDiagrams, &IID_SchemaDiagrams> SchemaDiagramsPtr;

interface DECLSPEC_UUID("{F5B39A6C-1480-11D3-8549-00C04FAC67D7}") SchemaRelationships;
typedef TComInterface<SchemaRelationships, &IID_SchemaRelationships> SchemaRelationshipsPtr;

interface DECLSPEC_UUID("{F5B39AA5-1480-11D3-8549-00C04FAC67D7}") PageRowsources;
typedef TComInterface<PageRowsources, &IID_PageRowsources> PageRowsourcesPtr;

interface DECLSPEC_UUID("{F5B39A9F-1480-11D3-8549-00C04FAC67D7}") PageRowsource;
typedef TComInterface<PageRowsource, &IID_PageRowsource> PageRowsourcePtr;

interface DECLSPEC_UUID("{F5B39A9D-1480-11D3-8549-00C04FAC67D7}") RecordsetDef;
typedef TComInterface<RecordsetDef, &IID_RecordsetDef> RecordsetDefPtr;

interface DECLSPEC_UUID("{F5B39AE1-1480-11D3-8549-00C04FAC67D7}") SublistRelationships;
typedef TComInterface<SublistRelationships, &IID_SublistRelationships> SublistRelationshipsPtr;

interface DECLSPEC_UUID("{F5B39A6B-1480-11D3-8549-00C04FAC67D7}") PageRelationship;
typedef TComInterface<PageRelationship, &IID_PageRelationship> PageRelationshipPtr;

interface DECLSPEC_UUID("{F5B39A6F-1480-11D3-8549-00C04FAC67D7}") PageRelatedFields;
typedef TComInterface<PageRelatedFields, &IID_PageRelatedFields> PageRelatedFieldsPtr;

interface DECLSPEC_UUID("{F5B39A70-1480-11D3-8549-00C04FAC67D7}") PageRelatedField;
typedef TComInterface<PageRelatedField, &IID_PageRelatedField> PageRelatedFieldPtr;

interface DECLSPEC_UUID("{F5B39AC7-1480-11D3-8549-00C04FAC67D7}") PageField;
typedef TComInterface<PageField, &IID_PageField> PageFieldPtr;

interface DECLSPEC_UUID("{F5B39A7B-1480-11D3-8549-00C04FAC67D7}") GroupingDef;
typedef TComInterface<GroupingDef, &IID_GroupingDef> GroupingDefPtr;

interface DECLSPEC_UUID("{F5B39AB1-1480-11D3-8549-00C04FAC67D7}") PageFields;
typedef TComInterface<PageFields, &IID_PageFields> PageFieldsPtr;

interface DECLSPEC_UUID("{F5B39A7C-1480-11D3-8549-00C04FAC67D7}") GroupingDefs;
typedef TComInterface<GroupingDefs, &IID_GroupingDefs> GroupingDefsPtr;

interface DECLSPEC_UUID("{F5B39AFF-1480-11D3-8549-00C04FAC67D7}") ParameterValues;
typedef TComInterface<ParameterValues, &IID_ParameterValues> ParameterValuesPtr;

interface DECLSPEC_UUID("{F5B39B0F-1480-11D3-8549-00C04FAC67D7}") ParameterValue;
typedef TComInterface<ParameterValue, &IID_ParameterValue> ParameterValuePtr;

interface DECLSPEC_UUID("{F5B39A74-1480-11D3-8549-00C04FAC67D7}") LookupRelationships;
typedef TComInterface<LookupRelationships, &IID_LookupRelationships> LookupRelationshipsPtr;

interface DECLSPEC_UUID("{F5B39AA2-1480-11D3-8549-00C04FAC67D7}") RecordsetDefs;
typedef TComInterface<RecordsetDefs, &IID_RecordsetDefs> RecordsetDefsPtr;

interface DECLSPEC_UUID("{F5B39B45-1480-11D3-8549-00C04FAC67D7}") AllPageFields;
typedef TComInterface<AllPageFields, &IID_AllPageFields> AllPageFieldsPtr;

interface DECLSPEC_UUID("{F5B39AF9-1480-11D3-8549-00C04FAC67D7}") AllGroupingDefs;
typedef TComInterface<AllGroupingDefs, &IID_AllGroupingDefs> AllGroupingDefsPtr;

interface DECLSPEC_UUID("{97D6D375-23BB-11D1-A0E1-00C04FC9E20F}") IDARef;
typedef TComInterface<IDARef, &IID_IDARef> IDARefPtr;

interface DECLSPEC_UUID("{F5B39A68-1480-11D3-8549-00C04FAC67D7}") Section;
typedef TComInterface<Section, &IID_Section> SectionPtr;

interface DECLSPEC_UUID("{F5B39AB4-1480-11D3-8549-00C04FAC67D7}") DataPage;
typedef TComInterface<DataPage, &IID_DataPage> DataPagePtr;

interface DECLSPEC_UUID("{F5B39A76-1480-11D3-8549-00C04FAC67D7}") GroupLevel;
typedef TComInterface<GroupLevel, &IID_GroupLevel> GroupLevelPtr;

interface DECLSPEC_UUID("{F5B39B00-1480-11D3-8549-00C04FAC67D7}") GroupLevels;
typedef TComInterface<GroupLevels, &IID_GroupLevels> GroupLevelsPtr;

interface DECLSPEC_UUID("{F5B39A85-1480-11D3-8549-00C04FAC67D7}") DataPages;
typedef TComInterface<DataPages, &IID_DataPages> DataPagesPtr;

interface DECLSPEC_UUID("{F5B39AAC-1480-11D3-8549-00C04FAC67D7}") ElementExtension;
typedef TComInterface<ElementExtension, &IID_ElementExtension> ElementExtensionPtr;

interface DECLSPEC_UUID("{F5B39AC9-1480-11D3-8549-00C04FAC67D7}") ElementExtensions;
typedef TComInterface<ElementExtensions, &IID_ElementExtensions> ElementExtensionsPtr;

interface DECLSPEC_UUID("{F5B39AAF-1480-11D3-8549-00C04FAC67D7}") IDataSourceControl;
typedef TComInterface<IDataSourceControl, &IID_IDataSourceControl> IDataSourceControlPtr;

interface DECLSPEC_UUID("{F5B39B06-1480-11D3-8549-00C04FAC67D7}") DSCEventInfo;
typedef TComInterface<DSCEventInfo, &IID_DSCEventInfo> DSCEventInfoPtr;

interface DECLSPEC_UUID("{F5B39A9B-1480-11D3-8549-00C04FAC67D7}") _DataSourceControlEvent;
typedef TComInterface<_DataSourceControlEvent, &DIID__DataSourceControlEvent> _DataSourceControlEventPtr;

interface DECLSPEC_UUID("{F5B39AA8-1480-11D3-8549-00C04FAC67D7}") INavigationControl;
typedef TComInterface<INavigationControl, &IID_INavigationControl> INavigationControlPtr;

interface DECLSPEC_UUID("{F5B39AC5-1480-11D3-8549-00C04FAC67D7}") INavUIHost;
typedef TComInterface<INavUIHost, &IID_INavUIHost> INavUIHostPtr;

interface DECLSPEC_UUID("{4BD09D02-45CC-11D1-B1D1-006097C97F9B}") _NavigationEvent;
typedef TComInterface<_NavigationEvent, &DIID__NavigationEvent> _NavigationEventPtr;

interface DECLSPEC_UUID("{F5B39ADD-1480-11D3-8549-00C04FAC67D7}") IDataPageDesigner;
typedef TComInterface<IDataPageDesigner, &IID_IDataPageDesigner> IDataPageDesignerPtr;

interface DECLSPEC_UUID("{D001F200-EF97-11CE-9BC9-00AA00608E01}") IOleUndoManager;
typedef TComInterface<IOleUndoManager, &IID_IOleUndoManager> IOleUndoManagerPtr;

interface DECLSPEC_UUID("{894AD3B0-EF97-11CE-9BC9-00AA00608E01}") IOleUndoUnit;
typedef TComInterface<IOleUndoUnit, &IID_IOleUndoUnit> IOleUndoUnitPtr;

interface DECLSPEC_UUID("{A1FAF330-EF97-11CE-9BC9-00AA00608E01}") IOleParentUndoUnit;
typedef TComInterface<IOleParentUndoUnit, &IID_IOleParentUndoUnit> IOleParentUndoUnitPtr;

interface DECLSPEC_UUID("{B3E7C340-EF97-11CE-9BC9-00AA00608E01}") IEnumOleUndoUnits;
typedef TComInterface<IEnumOleUndoUnits, &IID_IEnumOleUndoUnits> IEnumOleUndoUnitsPtr;

interface DECLSPEC_UUID("{78667670-3C3D-11D2-91F9-006097C97F9B}") ISimpleDataConverter;
typedef TComInterface<ISimpleDataConverter, &IID_ISimpleDataConverter> ISimpleDataConverterPtr;

interface DECLSPEC_UUID("{7BD180A4-0406-11D3-8549-00C04FAC67D7}") FieldListHierarchy;
typedef TComInterface<FieldListHierarchy, &IID_FieldListHierarchy> FieldListHierarchyPtr;

interface DECLSPEC_UUID("{FA99DB40-2043-11D3-854E-00C04FAC67D7}") FieldListHierarchySite;
typedef TComInterface<FieldListHierarchySite, &IID_FieldListHierarchySite> FieldListHierarchySitePtr;

interface DECLSPEC_UUID("{F7DDE2F0-0895-11D3-8549-00C04FAC67D7}") FieldListNode;
typedef TComInterface<FieldListNode, &IID_FieldListNode> FieldListNodePtr;

interface DECLSPEC_UUID("{63F85AD0-1ACC-11D3-854A-00C04FAC67D7}") FieldListType;
typedef TComInterface<FieldListType, &IID_FieldListType> FieldListTypePtr;

interface DECLSPEC_UUID("{7BD1809E-0406-11D3-8549-00C04FAC67D7}") FieldList;
typedef TComInterface<FieldList, &IID_FieldList> FieldListPtr;

interface DECLSPEC_UUID("{6EAC3754-49CC-11D3-AE50-00C04F613171}") FieldListDragData;
typedef TComInterface<FieldListDragData, &IID_FieldListDragData> FieldListDragDataPtr;

interface DECLSPEC_UUID("{2A9DDE7C-D83E-11D3-AE6C-00C04F613171}") FieldListDragDataList;
typedef TComInterface<FieldListDragDataList, &IID_FieldListDragDataList> FieldListDragDataListPtr;

interface DECLSPEC_UUID("{E2AC0C69-7079-11D3-8D01-0050048383A8}") IOfflineInfo;
typedef TComInterface<IOfflineInfo, &IID_IOfflineInfo> IOfflineInfoPtr;

interface DECLSPEC_UUID("{22C1AB70-4BFF-40FB-95EE-C8CA647833C6}") ChUserDefinedSelection;
typedef TComInterface<ChUserDefinedSelection, &IID_ChUserDefinedSelection> ChUserDefinedSelectionPtr;

interface DECLSPEC_UUID("{FAA0B9C0-F635-44C7-B825-B805F59B3D66}") IAddinHost;
typedef TComInterface<IAddinHost, &IID_IAddinHost> IAddinHostPtr;

interface DECLSPEC_UUID("{B8891063-2B00-48EC-957F-6DEBEADE9D8B}") IRangeEvents;
typedef TComInterface<IRangeEvents, &DIID_IRangeEvents> IRangeEventsPtr;

interface DECLSPEC_UUID("{F5B39B09-1480-11D3-8549-00C04FAC67D7}") IXRangeEnum;
typedef TComInterface<IXRangeEnum, &IID_IXRangeEnum> IXRangeEnumPtr;

interface DECLSPEC_UUID("{198924BD-4102-4CB0-B7E8-DBF8BE7EB5A1}") IAddinClient;
typedef TComInterface<IAddinClient, &IID_IAddinClient> IAddinClientPtr;

interface DECLSPEC_UUID("{F5B39A87-1480-11D3-8549-00C04FAC67D7}") IPivotControlEvents;
typedef TComInterface<IPivotControlEvents, &DIID_IPivotControlEvents> IPivotControlEventsPtr;

interface DECLSPEC_UUID("{58573A81-5025-11D3-BE84-0050041DB15A}") TextFormat;
typedef TComInterface<TextFormat, &IID_TextFormat> TextFormatPtr;

interface DECLSPEC_UUID("{EE658610-D8B3-11D2-8F30-00600893B533}") ViewSurface;
typedef TComInterface<ViewSurface, &IID_ViewSurface> ViewSurfacePtr;

interface DECLSPEC_UUID("{8C950530-C84C-11D2-8F2D-00600893B533}") ViewObject;
typedef TComInterface<ViewObject, &IID_ViewObject> ViewObjectPtr;

interface DECLSPEC_UUID("{8F8E5640-CDB0-11D2-8F2E-00600893B533}") MouseTarget;
typedef TComInterface<MouseTarget, &IID_MouseTarget> MouseTargetPtr;

interface DECLSPEC_UUID("{58573A80-5025-11D3-BE84-0050041DB15A}") SelectionHighlight;
typedef TComInterface<SelectionHighlight, &IID_SelectionHighlight> SelectionHighlightPtr;

interface DECLSPEC_UUID("{A809B678-545A-11D3-BE86-0050041DB15A}") ActiveObject;
typedef TComInterface<ActiveObject, &IID_ActiveObject> ActiveObjectPtr;

interface DECLSPEC_UUID("{04B21422-1F84-4DD3-8CD6-1C6ECC68E521}") PopupMenu;
typedef TComInterface<PopupMenu, &IID_PopupMenu> PopupMenuPtr;

interface DECLSPEC_UUID("{99049AFE-271D-4568-95D8-3BC879AA73E3}") AutoFitObject;
typedef TComInterface<AutoFitObject, &IID_AutoFitObject> AutoFitObjectPtr;

interface DECLSPEC_UUID("{5055F752-6848-4CEA-9BAB-265EC4B5380A}") Moniker;
typedef TComInterface<Moniker, &IID_Moniker> MonikerPtr;

interface DECLSPEC_UUID("{EDAC92DC-84DB-4CD1-AE98-EB436F4D99EB}") InplaceObject;
typedef TComInterface<InplaceObject, &IID_InplaceObject> InplaceObjectPtr;

interface DECLSPEC_UUID("{7BB4EDA1-862A-4AB2-92F2-557E1BAB3408}") PropertyNotify;
typedef TComInterface<PropertyNotify, &IID_PropertyNotify> PropertyNotifyPtr;

interface DECLSPEC_UUID("{F9328F0C-1862-4BD5-81D8-2052A7EC80FA}") MutualExpando;
typedef TComInterface<MutualExpando, &IID_MutualExpando> MutualExpandoPtr;

interface DECLSPEC_UUID("{EB3286D3-226C-48F0-8049-2DB1E01DEE9C}") EditableObject;
typedef TComInterface<EditableObject, &IID_EditableObject> EditableObjectPtr;

interface DECLSPEC_UUID("{8966D336-AACA-4ADB-9315-F3A541B16917}") TipProvider;
typedef TComInterface<TipProvider, &IID_TipProvider> TipProviderPtr;

interface DECLSPEC_UUID("{CD44E547-FEC9-4ADC-AB6A-3129B44801BA}") IPivotCopy;
typedef TComInterface<IPivotCopy, &IID_IPivotCopy> IPivotCopyPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef ChChartSpace ChartSpace;
typedef ChChartSpacePtr ChartSpacePtr;
typedef ISpreadsheet Spreadsheet;
typedef ISpreadsheetPtr SpreadsheetPtr;
typedef _NumberFormat NumberFormat;
typedef _NumberFormatPtr NumberFormatPtr;
typedef IDataSourceControl DataSourceControl;
typedef IDataSourceControlPtr DataSourceControlPtr;
typedef INavigationControl RecordNavigationControl;
typedef INavigationControlPtr RecordNavigationControlPtr;
typedef FieldList FieldListControl;
typedef FieldListPtr FieldListControlPtr;
typedef IOfflineInfo OfflineInfo;
typedef IOfflineInfoPtr OfflineInfoPtr;
typedef _Range Range;
typedef _RangePtr RangePtr;
typedef IPivotControl PivotTable;
typedef IPivotControlPtr PivotTablePtr;

#define LIBID_OF_ChartSpace (&LIBID_OWC10)
#define LIBID_OF_Spreadsheet (&LIBID_OWC10)
#define LIBID_OF_NumberFormat (&LIBID_OWC10)
#define LIBID_OF_DataSourceControl (&LIBID_OWC10)
#define LIBID_OF_RecordNavigationControl (&LIBID_OWC10)
#define LIBID_OF_FieldListControl (&LIBID_OWC10)
#define LIBID_OF_OfflineInfo (&LIBID_OWC10)
#define LIBID_OF_Range (&LIBID_OWC10)
#define LIBID_OF_PivotTable (&LIBID_OWC10)

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
typedef enum ChartPatternTypeEnum
{
  chPattern5Percent = 1, 
  chPattern10Percent = 2, 
  chPattern20Percent = 3, 
  chPattern25Percent = 4, 
  chPattern30Percent = 5, 
  chPattern40Percent = 6, 
  chPattern50Percent = 7, 
  chPattern60Percent = 8, 
  chPattern70Percent = 9, 
  chPattern75Percent = 10, 
  chPattern80Percent = 11, 
  chPattern90Percent = 12, 
  chPatternDarkHorizontal = 13, 
  chPatternDarkVertical = 14, 
  chPatternDarkDownwardDiagonal = 15, 
  chPatternDarkUpwardDiagonal = 16, 
  chPatternSmallCheckerBoard = 17, 
  chPatternTrellis = 18, 
  chPatternLightHorizontal = 19, 
  chPatternLightVertical = 20, 
  chPatternLightDownwardDiagonal = 21, 
  chPatternLightUpwardDiagonal = 22, 
  chPatternSmallGrid = 23, 
  chPatternDottedDiamond = 24, 
  chPatternWideDownwardDiagonal = 25, 
  chPatternWideUpwardDiagonal = 26, 
  chPatternDashedUpwardDiagonal = 27, 
  chPatternDashedDownwardDiagonal = 28, 
  chPatternNarrowVertical = 29, 
  chPatternNarrowHorizontal = 30, 
  chPatternDashedVertical = 31, 
  chPatternDashedHorizontal = 32, 
  chPatternLargeConfetti = 33, 
  chPatternLargeGrid = 34, 
  chPatternHorizontalBrick = 35, 
  chPatternLargeCheckerBoard = 36, 
  chPatternSmallConfetti = 37, 
  chPatternZigZag = 38, 
  chPatternSolidDiamond = 39, 
  chPatternDiagonalBrick = 40, 
  chPatternOutlinedDiamond = 41, 
  chPatternPlaid = 42, 
  chPatternSphere = 43, 
  chPatternWeave = 44, 
  chPatternDottedGrid = 45, 
  chPatternDivot = 46, 
  chPatternShingle = 47, 
  chPatternWave = 48
} ChartPatternTypeEnum;

typedef enum ChartFillTypeEnum
{
  chFillSolid = 1, 
  chFillPatterned = 2, 
  chFillGradientOneColor = 3, 
  chFillGradientTwoColors = 4, 
  chFillGradientPresetColors = 5, 
  chFillTexturePreset = 6, 
  chFillTextureUserDefined = 7
} ChartFillTypeEnum;

typedef enum ChartPresetGradientTypeEnum
{
  chGradientEarlySunset = 1, 
  chGradientLateSunset = 2, 
  chGradientNightfall = 3, 
  chGradientDaybreak = 4, 
  chGradientHorizon = 5, 
  chGradientDesert = 6, 
  chGradientOcean = 7, 
  chGradientCalmWater = 8, 
  chGradientFire = 9, 
  chGradientFog = 10, 
  chGradientMoss = 11, 
  chGradientPeacock = 12, 
  chGradientWheat = 13, 
  chGradientParchment = 14, 
  chGradientMahogany = 15, 
  chGradientRainbow = 16, 
  chGradientRainbowII = 17, 
  chGradientGold = 18, 
  chGradientGoldII = 19, 
  chGradientBrass = 20, 
  chGradientChrome = 21, 
  chGradientChromeII = 22, 
  chGradientSilver = 23, 
  chGradientSapphire = 24
} ChartPresetGradientTypeEnum;

typedef enum ChartGradientStyleEnum
{
  chGradientHorizontal = 1, 
  chGradientVertical = 2, 
  chGradientDiagonalUp = 3, 
  chGradientDiagonalDown = 4, 
  chGradientFromCorner = 5, 
  chGradientFromCenter = 7
} ChartGradientStyleEnum;

typedef enum ChartGradientVariantEnum
{
  chGradientVariantStart = 1, 
  chGradientVariantEnd = 2, 
  chGradientVariantCenter = 3, 
  chGradientVariantEdges = 4
} ChartGradientVariantEnum;

typedef enum ChartPresetTextureEnum
{
  chTexturePapyrus = 1, 
  chTextureCanvas = 2, 
  chTextureDenim = 3, 
  chTextureWovenMat = 4, 
  chTextureWaterDroplets = 5, 
  chTexturePaperBag = 6, 
  chTextureFishFossil = 7, 
  chTextureSand = 8, 
  chTextureGreenMarble = 9, 
  chTextureWhiteMarble = 10, 
  chTextureBrownMarble = 11, 
  chTextureGranite = 12, 
  chTextureNewsprint = 13, 
  chTextureRecycledPaper = 14, 
  chTextureParchment = 15, 
  chTextureStationery = 16, 
  chTextureBlueTissuePaper = 17, 
  chTexturePinkTissuePaper = 18, 
  chTexturePurpleMesh = 19, 
  chTextureBouquet = 20, 
  chTextureCork = 21, 
  chTextureWalnut = 22, 
  chTextureOak = 23, 
  chTextureMediumWood = 24
} ChartPresetTextureEnum;

typedef enum ChartTextureFormatEnum
{
  chStack = 1, 
  chStackScale = 2, 
  chStretch = 3, 
  chTile = 4, 
  chStretchPlot = 5
} ChartTextureFormatEnum;

typedef enum ChartTexturePlacementEnum
{
  chAllFaces = 7, 
  chEnd = 2, 
  chEndSides = 6, 
  chFront = 1, 
  chFrontEnd = 3, 
  chFrontSides = 5, 
  chSides = 4, 
  chProjectFront = 8
} ChartTexturePlacementEnum;

typedef enum ChartLineDashStyleEnum
{
  chLineDash = 0, 
  chLineDashDot = 1, 
  chLineDashDotDot = 2, 
  chLineLongDash = 4, 
  chLineLongDashDot = 5, 
  chLineRoundDot = 6, 
  chLineSolid = 7, 
  chLineSquareDot = 8
} ChartLineDashStyleEnum;

typedef enum LineWeightEnum
{
  owcLineWeightHairline = 0, 
  owcLineWeightThin = 1, 
  owcLineWeightMedium = 2, 
  owcLineWeightThick = 3
} LineWeightEnum;

typedef enum UnderlineStyleEnum
{
  owcUnderlineStyleNone = 0, 
  owcUnderlineStyleSingle = 1, 
  owcUnderlineStyleDouble = 2, 
  owcUnderlineStyleSingleAccounting = 3, 
  owcUnderlineStyleDoubleAccounting = 4
} UnderlineStyleEnum;

typedef enum ChartLineMiterEnum
{
  chLineMiterBevel = 0, 
  chLineMiterMiter = 1, 
  chLineMiterRound = 2
} ChartLineMiterEnum;

typedef enum ChartDrawModesEnum
{
  chDrawModePaint = 1, 
  chDrawModeSelection = 2, 
  chDrawModeHitTest = 3, 
  chDrawModeScale = 4
} ChartDrawModesEnum;

typedef enum ChartChartLayoutEnum
{
  chChartLayoutAutomatic = 0, 
  chChartLayoutHorizontal = 1, 
  chChartLayoutVertical = 2
} ChartChartLayoutEnum;

typedef enum ChartScaleOrientationEnum
{
  chScaleOrientationMinMax = 0, 
  chScaleOrientationMaxMin = 1
} ChartScaleOrientationEnum;

typedef enum ChartScaleTypeEnum
{
  chScaleTypeLinear = 0, 
  chScaleTypeLogarithmic = 1
} ChartScaleTypeEnum;

typedef enum ChartAxisCrossesEnum
{
  chAxisCrossesAutomatic = 0, 
  chAxisCrossesCustom = 3
} ChartAxisCrossesEnum;

typedef enum ChartSelectionsEnum
{
  chSelectionNone = 0xFFFFFFFF, 
  chSelectionAxis = 0, 
  chSelectionChart = 1, 
  chSelectionPlotArea = 2, 
  chSelectionDataLabels = 3, 
  chSelectionErrorbars = 4, 
  chSelectionGridlines = 5, 
  chSelectionLegend = 6, 
  chSelectionLegendEntry = 7, 
  chSelectionPoint = 8, 
  chSelectionSeries = 9, 
  chSelectionTitle = 10, 
  chSelectionTrendline = 11, 
  chSelectionChartSpace = 12, 
  chSelectionSurface = 13, 
  chSelectionField = 14, 
  chSelectionUserDefined = 0xFFFFFFFE, 
  chSelectionCategoryLabel = 16, 
  chSelectionDropZone = 17, 
  chSelectionDataLabel = 18
} ChartSelectionsEnum;

typedef enum ChartTickMarkEnum
{
  chTickMarkAutomatic = 0, 
  chTickMarkNone = 1, 
  chTickMarkInside = 2, 
  chTickMarkOutside = 3, 
  chTickMarkCross = 4
} ChartTickMarkEnum;

typedef enum ChartAxisPositionEnum
{
  chAxisPositionTop = 0xFFFFFFFF, 
  chAxisPositionBottom = 0xFFFFFFFE, 
  chAxisPositionLeft = 0xFFFFFFFD, 
  chAxisPositionRight = 0xFFFFFFFC, 
  chAxisPositionRadial = 0xFFFFFFFB, 
  chAxisPositionCircular = 0xFFFFFFFA, 
  chAxisPositionCategory = 0xFFFFFFF9, 
  chAxisPositionTimescale = 0xFFFFFFF9, 
  chAxisPositionValue = 0xFFFFFFF8, 
  chAxisPositionSeries = 0xFFFFFFF7, 
  chAxisPositionPrimary = 0xFFFFFFF6, 
  chAxisPositionSecondary = 0xFFFFFFF5
} ChartAxisPositionEnum;

typedef enum ChartTitlePositionEnum
{
  chTitlePositionAutomatic = 0, 
  chTitlePositionTop = 1, 
  chTitlePositionBottom = 2, 
  chTitlePositionLeft = 3, 
  chTitlePositionRight = 4
} ChartTitlePositionEnum;

typedef enum ChartAxisTypeEnum
{
  chCategoryAxis = 0, 
  chValueAxis = 1, 
  chTimescaleAxis = 2, 
  chSeriesAxis = 3
} ChartAxisTypeEnum;

typedef enum ChartAxisGroupingEnum
{
  chAxisGroupingNone = 0, 
  chAxisGroupingAuto = 1, 
  chAxisGroupingManual = 2
} ChartAxisGroupingEnum;

typedef enum ChartAxisUnitTypeEnum
{
  chAxisUnitDay = 0, 
  chAxisUnitWeek = 1, 
  chAxisUnitMonth = 2, 
  chAxisUnitQuarter = 3, 
  chAxisUnitYear = 4
} ChartAxisUnitTypeEnum;

typedef enum ChartGroupingTotalFunctionEnum
{
  chFunctionSum = 1, 
  chFunctionCount = 2, 
  chFunctionMin = 3, 
  chFunctionMax = 4, 
  chFunctionAvg = 5, 
  chFunctionDefault = 6
} ChartGroupingTotalFunctionEnum;

typedef enum PivotHAlignmentEnum
{
  plHAlignAutomatic = 0, 
  plHAlignLeft = 1, 
  plHAlignCenter = 2, 
  plHAlignRight = 3
} PivotHAlignmentEnum;

typedef enum PivotFieldGroupOnEnum
{
  plGroupOnEachValue = 0, 
  plGroupOnPrefixChars = 1, 
  plGroupOnYears = 2, 
  plGroupOnQtrs = 3, 
  plGroupOnMonths = 4, 
  plGroupOnWeeks = 5, 
  plGroupOnDays = 6, 
  plGroupOnHours = 7, 
  plGroupOnMinutes = 8, 
  plGroupOnSeconds = 9, 
  plGroupOnInterval = 10
} PivotFieldGroupOnEnum;

typedef enum PivotFieldSortDirectionEnum
{
  plSortDirectionDefault = 0, 
  plSortDirectionAscending = 1, 
  plSortDirectionDescending = 2, 
  plSortDirectionCustom = 4, 
  plSortDirectionCustomAscending = 5, 
  plSortDirectionCustomDescending = 6
} PivotFieldSortDirectionEnum;

typedef enum PivotFieldTypeEnum
{
  plTypeRegular = 1, 
  plTypeCalculated = 2, 
  plTypeTimeYears = 4, 
  plTypeTimeHalfYears = 5, 
  plTypeTimeQuarters = 6, 
  plTypeTimeMonths = 7, 
  plTypeTimeWeeks = 8, 
  plTypeTimeDays = 9, 
  plTypeTimeHours = 10, 
  plTypeTimeMinutes = 11, 
  plTypeTimeSeconds = 12, 
  plTypeTimeUndefined = 13, 
  plTypeUnknown = 14, 
  plTypeUserDefined = 15, 
  plTypeTimeWeekdays = 16, 
  plTypeCustomGroup = 17
} PivotFieldTypeEnum;

typedef enum PivotFieldFilterFunctionEnum
{
  plFilterFunctionNone = 0, 
  plFilterFunctionTopCount = 3, 
  plFilterFunctionBottomCount = 4, 
  plFilterFunctionTopPercent = 5, 
  plFilterFunctionBottomPercent = 6, 
  plFilterFunctionTopSum = 7, 
  plFilterFunctionBottomSum = 8
} PivotFieldFilterFunctionEnum;

typedef enum PivotTotalFunctionEnum
{
  plFunctionUnknown = 0, 
  plFunctionSum = 1, 
  plFunctionCount = 2, 
  plFunctionMin = 3, 
  plFunctionMax = 4, 
  plFunctionAverage = 5, 
  plFunctionStdDev = 6, 
  plFunctionVar = 7, 
  plFunctionStdDevP = 10, 
  plFunctionVarP = 11, 
  plFunctionCalculated = 127
} PivotTotalFunctionEnum;

typedef enum PivotTotalTypeEnum
{
  plTotalTypeIntrinsic = 1, 
  plTotalTypeUserDefined = 2, 
  plTotalTypeCalculated = 3
} PivotTotalTypeEnum;

typedef enum PivotShowAsEnum
{
  plShowAsNormal = 0, 
  plShowAsPercentOfRowTotal = 1, 
  plShowAsPercentOfColumnTotal = 2, 
  plShowAsPercentOfRowParent = 3, 
  plShowAsPercentOfColumnParent = 4, 
  plShowAsPercentOfGrandTotal = 5
} PivotShowAsEnum;

typedef enum PivotMemberPropertyDisplayEnum
{
  plDisplayPropertyNone = 0, 
  plDisplayPropertyInReport = 1, 
  plDisplayPropertyInScreenTip = 2, 
  plDisplayPropertyInAll = 3
} PivotMemberPropertyDisplayEnum;

typedef enum PivotMemberFindFormatEnum
{
  plFindFormatMember = 0, 
  plFindFormatPathName = 1, 
  plFindFormatPathInt = 2, 
  plFindFormatPathHex = 3
} PivotMemberFindFormatEnum;

typedef enum PivotMemberCustomGroupTypeEnum
{
  plGroupTypeRegular = 1, 
  plGroupTypeCustomGroup = 2, 
  plGroupTypeFallThrough = 3, 
  plGroupTypePlaceHolder = 4, 
  plGroupTypeStaticOther = 5, 
  plGroupTypeDynamicOther = 6
} PivotMemberCustomGroupTypeEnum;

typedef enum PivotFieldSetOrientationEnum
{
  plOrientationNone = 0, 
  plOrientationColumnAxis = 1, 
  plOrientationRowAxis = 2, 
  plOrientationFilterAxis = 4, 
  plOrientationDataAxis = 8, 
  plOrientationPageAxis = 16
} PivotFieldSetOrientationEnum;

typedef enum PivotFieldSetTypeEnum
{
  plFieldSetTypeTime = 1, 
  plFieldSetTypeOther = 2, 
  plFieldSetTypeUnknown = 3, 
  plFieldSetTypeUserDefined = 4
} PivotFieldSetTypeEnum;

typedef enum PivotMembersCompareByEnum
{
  plMembersCompareByUniqueName = 0, 
  plMembersCompareByName = 1
} PivotMembersCompareByEnum;

typedef enum PivotFilterUpdateMemberStateEnum
{
  plMemberStateClear = 1, 
  plMemberStateChecked = 2, 
  plMemberStateGray = 3
} PivotFilterUpdateMemberStateEnum;

typedef enum PivotFieldSetAllIncludeExcludeEnum
{
  plAllDefault = 0, 
  plAllInclude = 1, 
  plAllExclude = 2
} PivotFieldSetAllIncludeExcludeEnum;

typedef enum PivotViewTotalOrientationEnum
{
  plTotalOrientationRow = 1, 
  plTotalOrientationColumn = 2
} PivotViewTotalOrientationEnum;

typedef enum PivotTableExpandEnum
{
  plExpandAutomatic = 0, 
  plExpandAlways = 1, 
  plExpandNever = 2
} PivotTableExpandEnum;

typedef enum PivotExportActionEnum
{
  plExportActionNone = 0, 
  plExportActionOpenInExcel = 1
} PivotExportActionEnum;

typedef enum ProviderType
{
  providerTypeUnknown = 1, 
  providerTypeRelational = 2, 
  providerTypeMultidimensional = 3
} ProviderType;

typedef enum PivotTableMemberExpandEnum
{
  plMemberExpandAutomatic = 0, 
  plMemberExpandAlways = 1, 
  plMemberExpandNever = 2
} PivotTableMemberExpandEnum;

typedef enum PivotScrollTypeEnum
{
  plScrollTypeNone = 0, 
  plScrollTypeTop = 1, 
  plScrollTypeLeft = 2, 
  plScrollTypeBottom = 4, 
  plScrollTypeRight = 8, 
  plScrollTypeAll = 15
} PivotScrollTypeEnum;

typedef enum PivotArrowModeEnum
{
  plArrowModeAccept = 0, 
  plArrowModeEdit = 1
} PivotArrowModeEnum;

typedef enum PivotCaretPositionEnum
{
  plCaretPositionAtEnd = 0, 
  plCaretPositionAtMouse = 1
} PivotCaretPositionEnum;

typedef enum PivotEditModeEnum
{
  plEditNone = 0, 
  plEditInProgress = 1
} PivotEditModeEnum;

typedef enum ChartLegendPositionEnum
{
  chLegendPositionAutomatic = 0, 
  chLegendPositionTop = 1, 
  chLegendPositionBottom = 2, 
  chLegendPositionLeft = 3, 
  chLegendPositionRight = 4
} ChartLegendPositionEnum;

typedef enum ChartProjectionModeEnum
{
  chProjectionModePerspective = 0, 
  chProjectionModeOrthographic = 1
} ChartProjectionModeEnum;

typedef enum ChartDataLabelPositionEnum
{
  chLabelPositionAutomatic = 0, 
  chLabelPositionCenter = 1, 
  chLabelPositionInsideEnd = 2, 
  chLabelPositionInsideBase = 3, 
  chLabelPositionOutsideEnd = 4, 
  chLabelPositionOutsideBase = 5, 
  chLabelPositionLeft = 6, 
  chLabelPositionRight = 7, 
  chLabelPositionTop = 8, 
  chLabelPositionBottom = 9
} ChartDataLabelPositionEnum;

typedef enum ChartDimensionsEnum
{
  chDimSeriesNames = 0, 
  chDimCategories = 1, 
  chDimValues = 2, 
  chDimYValues = 3, 
  chDimXValues = 4, 
  chDimOpenValues = 5, 
  chDimCloseValues = 6, 
  chDimHighValues = 7, 
  chDimLowValues = 8, 
  chDimBubbleValues = 9, 
  chDimRValues = 10, 
  chDimThetaValues = 11, 
  chDimFilter = 14, 
  chDimCharts = 15, 
  chDimFormatValues = 16
} ChartDimensionsEnum;

typedef enum ChartEndStyleEnum
{
  chEndStyleNone = 1, 
  chEndStyleCap = 2
} ChartEndStyleEnum;

typedef enum ChartErrorBarDirectionEnum
{
  chErrorBarDirectionY = 0, 
  chErrorBarDirectionX = 1
} ChartErrorBarDirectionEnum;

typedef enum ChartErrorBarIncludeEnum
{
  chErrorBarIncludePlusValues = 0, 
  chErrorBarIncludeMinusValues = 1, 
  chErrorBarIncludeBoth = 2
} ChartErrorBarIncludeEnum;

typedef enum ChartErrorBarTypeEnum
{
  chErrorBarTypeFixedValue = 0, 
  chErrorBarTypePercent = 1, 
  chErrorBarTypeCustom = 2
} ChartErrorBarTypeEnum;

typedef enum ChartErrorBarCustomValuesEnum
{
  chErrorBarPlusValues = 12, 
  chErrorBarMinusValues = 13
} ChartErrorBarCustomValuesEnum;

typedef enum ChartMarkerStyleEnum
{
  chMarkerStyleNone = 0, 
  chMarkerStyleSquare = 1, 
  chMarkerStyleDiamond = 2, 
  chMarkerStyleTriangle = 3, 
  chMarkerStyleX = 4, 
  chMarkerStyleStar = 5, 
  chMarkerStyleDot = 6, 
  chMarkerStyleDash = 7, 
  chMarkerStyleCircle = 8, 
  chMarkerStylePlus = 9
} ChartMarkerStyleEnum;

typedef enum ChartTrendlineTypeEnum
{
  chTrendlineTypeExponential = 0, 
  chTrendlineTypeLinear = 1, 
  chTrendlineTypeLogarithmic = 2, 
  chTrendlineTypePolynomial = 3, 
  chTrendlineTypePower = 4, 
  chTrendlineTypeMovingAverage = 5
} ChartTrendlineTypeEnum;

typedef enum ChartChartTypeEnum
{
  chChartTypeCombo3D = 0xFFFFFFFE, 
  chChartTypeCombo = 0xFFFFFFFF, 
  chChartTypeColumnClustered = 0, 
  chChartTypeColumnStacked = 1, 
  chChartTypeColumnStacked100 = 2, 
  chChartTypeBarClustered = 3, 
  chChartTypeBarStacked = 4, 
  chChartTypeBarStacked100 = 5, 
  chChartTypeLine = 6, 
  chChartTypeLineStacked = 8, 
  chChartTypeLineStacked100 = 10, 
  chChartTypeLineMarkers = 7, 
  chChartTypeLineStackedMarkers = 9, 
  chChartTypeLineStacked100Markers = 11, 
  chChartTypeSmoothLine = 12, 
  chChartTypeSmoothLineStacked = 14, 
  chChartTypeSmoothLineStacked100 = 16, 
  chChartTypeSmoothLineMarkers = 13, 
  chChartTypeSmoothLineStackedMarkers = 15, 
  chChartTypeSmoothLineStacked100Markers = 17, 
  chChartTypePie = 18, 
  chChartTypePieExploded = 19, 
  chChartTypePieStacked = 20, 
  chChartTypeScatterMarkers = 21, 
  chChartTypeScatterLine = 25, 
  chChartTypeScatterLineMarkers = 24, 
  chChartTypeScatterLineFilled = 26, 
  chChartTypeScatterSmoothLine = 23, 
  chChartTypeScatterSmoothLineMarkers = 22, 
  chChartTypeBubble = 27, 
  chChartTypeBubbleLine = 28, 
  chChartTypeArea = 29, 
  chChartTypeAreaStacked = 30, 
  chChartTypeAreaStacked100 = 31, 
  chChartTypeDoughnut = 32, 
  chChartTypeDoughnutExploded = 33, 
  chChartTypeRadarLine = 34, 
  chChartTypeRadarLineMarkers = 35, 
  chChartTypeRadarLineFilled = 36, 
  chChartTypeRadarSmoothLine = 37, 
  chChartTypeRadarSmoothLineMarkers = 38, 
  chChartTypeStockHLC = 39, 
  chChartTypeStockOHLC = 40, 
  chChartTypePolarMarkers = 41, 
  chChartTypePolarLine = 42, 
  chChartTypePolarLineMarkers = 43, 
  chChartTypePolarSmoothLine = 44, 
  chChartTypePolarSmoothLineMarkers = 45, 
  chChartTypeColumn3D = 46, 
  chChartTypeColumnClustered3D = 47, 
  chChartTypeColumnStacked3D = 48, 
  chChartTypeColumnStacked1003D = 49, 
  chChartTypeBar3D = 50, 
  chChartTypeBarClustered3D = 51, 
  chChartTypeBarStacked3D = 52, 
  chChartTypeBarStacked1003D = 53, 
  chChartTypeLine3D = 54, 
  chChartTypeLineOverlapped3D = 55, 
  chChartTypeLineStacked3D = 56, 
  chChartTypeLineStacked1003D = 57, 
  chChartTypePie3D = 58, 
  chChartTypePieExploded3D = 59, 
  chChartTypeArea3D = 60, 
  chChartTypeAreaOverlapped3D = 61, 
  chChartTypeAreaStacked3D = 62, 
  chChartTypeAreaStacked1003D = 63
} ChartChartTypeEnum;

typedef enum ChartBoundaryValueTypeEnum
{
  chBoundaryValuePercent = 0, 
  chBoundaryValueAbsolute = 1
} ChartBoundaryValueTypeEnum;

typedef enum ChartSizeRepresentsEnum
{
  chSizeIsWidth = 0, 
  chSizeIsArea = 1
} ChartSizeRepresentsEnum;

typedef enum ChartDataSourceTypeEnum
{
  chDataSourceTypeUnknown = 0, 
  chDataSourceTypeSpreadsheet = 1, 
  chDataSourceTypePivotTable = 3, 
  chDataSourceTypeQuery = 4, 
  chDataSourceTypeDSC = 5
} ChartDataSourceTypeEnum;

typedef enum ChartSelectionMarksEnum
{
  chSelectionMarksNone = 0, 
  chSelectionMarksAll = 1, 
  chSelectionMarksPivot = 2
} ChartSelectionMarksEnum;

typedef enum ChartPlotAggregatesEnum
{
  chPlotAggregatesNone = 0, 
  chPlotAggregatesSeries = 1, 
  chPlotAggregatesCategories = 2, 
  chPlotAggregatesCharts = 3, 
  chPlotAggregatesFromTotalOrientation = 4
} ChartPlotAggregatesEnum;

typedef enum ChartDropZonesEnum
{
  chDropZoneFilter = 0, 
  chDropZoneSeries = 1, 
  chDropZoneCategories = 2, 
  chDropZoneData = 3, 
  chDropZoneCharts = 4
} ChartDropZonesEnum;

typedef enum MsoAppLanguageID
{
  msoLanguageIDInstall = 1, 
  msoLanguageIDUI = 2, 
  msoLanguageIDHelp = 3, 
  msoLanguageIDExeMode = 4, 
  msoLanguageIDUIPrevious = 5
} MsoAppLanguageID;

typedef enum MsoLanguageID
{
  msoLanguageIDMixed = 0xFFFFFFFE, 
  msoLanguageIDNone = 0, 
  msoLanguageIDNoProofing = 1024, 
  msoLanguageIDAfrikaans = 1078, 
  msoLanguageIDAlbanian = 1052, 
  msoLanguageIDArabicAlgeria = 5121, 
  msoLanguageIDArabicBahrain = 15361, 
  msoLanguageIDArabicEgypt = 3073, 
  msoLanguageIDArabicIraq = 2049, 
  msoLanguageIDArabicJordan = 11265, 
  msoLanguageIDArabicKuwait = 13313, 
  msoLanguageIDArabicLebanon = 12289, 
  msoLanguageIDArabicLibya = 4097, 
  msoLanguageIDArabicMorocco = 6145, 
  msoLanguageIDArabicOman = 8193, 
  msoLanguageIDArabicQatar = 16385, 
  msoLanguageIDArabic = 1025, 
  msoLanguageIDArabicSyria = 10241, 
  msoLanguageIDArabicTunisia = 7169, 
  msoLanguageIDArabicUAE = 14337, 
  msoLanguageIDArabicYemen = 9217, 
  msoLanguageIDArmenian = 1067, 
  msoLanguageIDAssamese = 1101, 
  msoLanguageIDAzeriCyrillic = 2092, 
  msoLanguageIDAzeriLatin = 1068, 
  msoLanguageIDBasque = 1069, 
  msoLanguageIDByelorussian = 1059, 
  msoLanguageIDBengali = 1093, 
  msoLanguageIDBulgarian = 1026, 
  msoLanguageIDBurmese = 1109, 
  msoLanguageIDCatalan = 1027, 
  msoLanguageIDChineseHongKong = 3076, 
  msoLanguageIDChineseMacao = 5124, 
  msoLanguageIDSimplifiedChinese = 2052, 
  msoLanguageIDChineseSingapore = 4100, 
  msoLanguageIDTraditionalChinese = 1028, 
  msoLanguageIDCroatian = 1050, 
  msoLanguageIDCzech = 1029, 
  msoLanguageIDDanish = 1030, 
  msoLanguageIDBelgianDutch = 2067, 
  msoLanguageIDDutch = 1043, 
  msoLanguageIDEnglishAUS = 3081, 
  msoLanguageIDEnglishBelize = 10249, 
  msoLanguageIDEnglishCanadian = 4105, 
  msoLanguageIDEnglishCaribbean = 9225, 
  msoLanguageIDEnglishIreland = 6153, 
  msoLanguageIDEnglishJamaica = 8201, 
  msoLanguageIDEnglishNewZealand = 5129, 
  msoLanguageIDEnglishPhilippines = 13321, 
  msoLanguageIDEnglishSouthAfrica = 7177, 
  msoLanguageIDEnglishTrinidad = 11273, 
  msoLanguageIDEnglishUK = 2057, 
  msoLanguageIDEnglishUS = 1033, 
  msoLanguageIDEnglishZimbabwe = 12297, 
  msoLanguageIDEstonian = 1061, 
  msoLanguageIDFaeroese = 1080, 
  msoLanguageIDFarsi = 1065, 
  msoLanguageIDFinnish = 1035, 
  msoLanguageIDBelgianFrench = 2060, 
  msoLanguageIDFrenchCameroon = 11276, 
  msoLanguageIDFrenchCanadian = 3084, 
  msoLanguageIDFrenchCotedIvoire = 12300, 
  msoLanguageIDFrench = 1036, 
  msoLanguageIDFrenchLuxembourg = 5132, 
  msoLanguageIDFrenchMali = 13324, 
  msoLanguageIDFrenchMonaco = 6156, 
  msoLanguageIDFrenchReunion = 8204, 
  msoLanguageIDFrenchSenegal = 10252, 
  msoLanguageIDSwissFrench = 4108, 
  msoLanguageIDFrenchWestIndies = 7180, 
  msoLanguageIDFrenchZaire = 9228, 
  msoLanguageIDFrisianNetherlands = 1122, 
  msoLanguageIDGaelicIreland = 2108, 
  msoLanguageIDGaelicScotland = 1084, 
  msoLanguageIDGalician = 1110, 
  msoLanguageIDGeorgian = 1079, 
  msoLanguageIDGermanAustria = 3079, 
  msoLanguageIDGerman = 1031, 
  msoLanguageIDGermanLiechtenstein = 5127, 
  msoLanguageIDGermanLuxembourg = 4103, 
  msoLanguageIDSwissGerman = 2055, 
  msoLanguageIDGreek = 1032, 
  msoLanguageIDGujarati = 1095, 
  msoLanguageIDHebrew = 1037, 
  msoLanguageIDHindi = 1081, 
  msoLanguageIDHungarian = 1038, 
  msoLanguageIDIcelandic = 1039, 
  msoLanguageIDIndonesian = 1057, 
  msoLanguageIDItalian = 1040, 
  msoLanguageIDSwissItalian = 2064, 
  msoLanguageIDJapanese = 1041, 
  msoLanguageIDKannada = 1099, 
  msoLanguageIDKashmiri = 1120, 
  msoLanguageIDKazakh = 1087, 
  msoLanguageIDKhmer = 1107, 
  msoLanguageIDKirghiz = 1088, 
  msoLanguageIDKonkani = 1111, 
  msoLanguageIDKorean = 1042, 
  msoLanguageIDLao = 1108, 
  msoLanguageIDLatvian = 1062, 
  msoLanguageIDLithuanian = 1063, 
  msoLanguageIDMacedonian = 1071, 
  msoLanguageIDMalaysian = 1086, 
  msoLanguageIDMalayBruneiDarussalam = 2110, 
  msoLanguageIDMalayalam = 1100, 
  msoLanguageIDMaltese = 1082, 
  msoLanguageIDManipuri = 1112, 
  msoLanguageIDMarathi = 1102, 
  msoLanguageIDMongolian = 1104, 
  msoLanguageIDNepali = 1121, 
  msoLanguageIDNorwegianBokmol = 1044, 
  msoLanguageIDNorwegianNynorsk = 2068, 
  msoLanguageIDOriya = 1096, 
  msoLanguageIDPolish = 1045, 
  msoLanguageIDBrazilianPortuguese = 1046, 
  msoLanguageIDPortuguese = 2070, 
  msoLanguageIDPunjabi = 1094, 
  msoLanguageIDRhaetoRomanic = 1047, 
  msoLanguageIDRomanianMoldova = 2072, 
  msoLanguageIDRomanian = 1048, 
  msoLanguageIDRussianMoldova = 2073, 
  msoLanguageIDRussian = 1049, 
  msoLanguageIDSamiLappish = 1083, 
  msoLanguageIDSanskrit = 1103, 
  msoLanguageIDSerbianCyrillic = 3098, 
  msoLanguageIDSerbianLatin = 2074, 
  msoLanguageIDSesotho = 1072, 
  msoLanguageIDSindhi = 1113, 
  msoLanguageIDSlovak = 1051, 
  msoLanguageIDSlovenian = 1060, 
  msoLanguageIDSorbian = 1070, 
  msoLanguageIDSpanishArgentina = 11274, 
  msoLanguageIDSpanishBolivia = 16394, 
  msoLanguageIDSpanishChile = 13322, 
  msoLanguageIDSpanishColombia = 9226, 
  msoLanguageIDSpanishCostaRica = 5130, 
  msoLanguageIDSpanishDominicanRepublic = 7178, 
  msoLanguageIDSpanishEcuador = 12298, 
  msoLanguageIDSpanishElSalvador = 17418, 
  msoLanguageIDSpanishGuatemala = 4106, 
  msoLanguageIDSpanishHonduras = 18442, 
  msoLanguageIDMexicanSpanish = 2058, 
  msoLanguageIDSpanishNicaragua = 19466, 
  msoLanguageIDSpanishPanama = 6154, 
  msoLanguageIDSpanishParaguay = 15370, 
  msoLanguageIDSpanishPeru = 10250, 
  msoLanguageIDSpanishPuertoRico = 20490, 
  msoLanguageIDSpanishModernSort = 3082, 
  msoLanguageIDSpanish = 1034, 
  msoLanguageIDSpanishUruguay = 14346, 
  msoLanguageIDSpanishVenezuela = 8202, 
  msoLanguageIDSutu = 1072, 
  msoLanguageIDSwahili = 1089, 
  msoLanguageIDSwedishFinland = 2077, 
  msoLanguageIDSwedish = 1053, 
  msoLanguageIDTajik = 1064, 
  msoLanguageIDTamil = 1097, 
  msoLanguageIDTatar = 1092, 
  msoLanguageIDTelugu = 1098, 
  msoLanguageIDThai = 1054, 
  msoLanguageIDTibetan = 1105, 
  msoLanguageIDTsonga = 1073, 
  msoLanguageIDTswana = 1074, 
  msoLanguageIDTurkish = 1055, 
  msoLanguageIDTurkmen = 1090, 
  msoLanguageIDUkrainian = 1058, 
  msoLanguageIDUrdu = 1056, 
  msoLanguageIDUzbekCyrillic = 2115, 
  msoLanguageIDUzbekLatin = 1091, 
  msoLanguageIDVenda = 1075, 
  msoLanguageIDVietnamese = 1066, 
  msoLanguageIDWelsh = 1106, 
  msoLanguageIDXhosa = 1076, 
  msoLanguageIDZulu = 1077
} MsoLanguageID;

typedef enum XlBorderWeight
{
  xlHairline = 1, 
  xlThin = 2, 
  xlMedium = 0xFFFFEFD6, 
  xlThick = 4
} XlBorderWeight;

typedef enum XlColorIndex
{
  xlColorIndexAutomatic = 0xFFFFEFF7, 
  xlColorIndexNone = 0xFFFFEFD2
} XlColorIndex;

typedef enum XlSearchDirection
{
  xlNext = 1, 
  xlPrevious = 2
} XlSearchDirection;

typedef enum XlSortOrder
{
  xlAscending = 1, 
  xlDescending = 2
} XlSortOrder;

typedef enum XlYesNoGuess
{
  xlGuess = 0, 
  xlYes = 1, 
  xlNo = 2
} XlYesNoGuess;

typedef enum XlReferenceStyle
{
  xlA1 = 1, 
  xlR1C1 = 0xFFFFEFCA
} XlReferenceStyle;

typedef enum SheetExportActionEnum
{
  ssExportActionNone = 0, 
  ssExportActionOpenInExcel = 1
} SheetExportActionEnum;

typedef enum SheetExportFormat
{
  ssExportAsAppropriate = 0, 
  ssExportXMLSpreadsheet = 1, 
  ssExportHTML = 2
} SheetExportFormat;

typedef enum SheetFilterFunction
{
  ssFilterFunctionInclude = 1, 
  ssFilterFunctionExclude = 2
} SheetFilterFunction;

typedef enum XlWindowType
{
  xlWorkbook = 1
} XlWindowType;

typedef enum XlSheetType
{
  xlWorksheet = 0xFFFFEFB9
} XlSheetType;

typedef enum XlSheetVisibility
{
  xlSheetVisible = 0xFFFFFFFF, 
  xlSheetHidden = 0, 
  xlSheetVeryHidden = 2
} XlSheetVisibility;

typedef enum XlCalculation
{
  xlCalculationAutomatic = 0xFFFFEFF7, 
  xlCalculationManual = 0xFFFFEFD9
} XlCalculation;

typedef enum XlDirection
{
  xlDown = 0xFFFFEFE7, 
  xlToLeft = 0xFFFFEFC1, 
  xlToRight = 0xFFFFEFBF, 
  xlUp = 0xFFFFEFBE
} XlDirection;

typedef enum XlUnderlineStyle
{
  xlUnderlineStyleNone = 0xFFFFEFD2, 
  xlUnderlineStyleSingle = 2, 
  xlUnderlineStyleDouble = 0xFFFFEFE9, 
  xlUnderlineStyleSingleAccounting = 4, 
  xlUnderlineStyleDoubleAccounting = 5
} XlUnderlineStyle;

typedef enum XlBordersIndex
{
  xlEdgeLeft = 7, 
  xlEdgeTop = 8, 
  xlEdgeBottom = 9, 
  xlEdgeRight = 10, 
  xlInsideVertical = 11, 
  xlInsideHorizontal = 12
} XlBordersIndex;

typedef enum XlLineStyle
{
  xlLineStyleNone = 0xFFFFEFD2, 
  xlContinuous = 1, 
  xlDash = 0xFFFFEFED, 
  xlDot = 0xFFFFEFEA, 
  xlDashDot = 4, 
  xlDashDotDot = 5
} XlLineStyle;

typedef enum XlHAlign
{
  xlHAlignGeneral = 1, 
  xlHAlignLeft = 0xFFFFEFDD, 
  xlHAlignCenter = 0xFFFFEFF4, 
  xlHAlignRight = 0xFFFFEFC8, 
  xlHAlignFill = 5
} XlHAlign;

typedef enum XlReadingOrder
{
  xlContext = 0xFFFFEC76, 
  xlLTR = 0xFFFFEC75, 
  xlRTL = 0xFFFFEC74
} XlReadingOrder;

typedef enum XlVAlign
{
  xlVAlignBottom = 0xFFFFEFF5, 
  xlVAlignCenter = 0xFFFFEFF4, 
  xlVAlignTop = 0xFFFFEFC0
} XlVAlign;

typedef enum TipTypeEnum
{
  eTipTypeNone = 0xFFFFFFFF, 
  eTipTypeText = 0, 
  eTipTypeHTML = 1, 
  eTipTypeAuto = 2
} TipTypeEnum;

typedef enum LineStyleEnum
{
  owcLineStyleNone = 0, 
  owcLineStyleAutomatic = 1, 
  owcLineStyleSolid = 2, 
  owcLineStyleDash = 3, 
  owcLineStyleDot = 4, 
  owcLineStyleDashDot = 5, 
  owcLineStyleDashDotDot = 6
} LineStyleEnum;

typedef enum ExpandBitmapTypeEnum
{
  ecBitmapPlusMinus = 0, 
  ecBitmapUpDownArrow = 1, 
  ecBitmapOpenCloseFolder = 2
} ExpandBitmapTypeEnum;

typedef enum DscFieldTypeEnum
{
  dscParameter = 0xFFFFFFFF, 
  dscOutput = 1, 
  dscCalculated = 2, 
  dscGrouping = 3
} DscFieldTypeEnum;

typedef enum DscTotalTypeEnum
{
  dscNone = 0, 
  dscSum = 1, 
  dscAvg = 2, 
  dscMin = 3, 
  dscMax = 4, 
  dscCount = 5, 
  dscAny = 6, 
  dscStdev = 7
} DscTotalTypeEnum;

typedef enum DscGroupOnEnum
{
  dscEachValue = 0, 
  dscPrefix = 1, 
  dscYear = 2, 
  dscQuarter = 3, 
  dscMonth = 4, 
  dscWeek = 5, 
  dscDay = 6, 
  dscHour = 7, 
  dscMinute = 8, 
  dscInterval = 9
} DscGroupOnEnum;

typedef enum DscJoinTypeEnum
{
  dscInnerJoin = 1, 
  dscLeftOuterJoin = 2, 
  dscRightOuterJoin = 3
} DscJoinTypeEnum;

typedef enum DscPageRelTypeEnum
{
  dscSublist = 1, 
  dscLookup = 2
} DscPageRelTypeEnum;

typedef enum DscObjectTypeEnum
{
  dscobjUnknown = 0xFFFFFFFF, 
  dscobjSchemaRowsource = 1, 
  dscobjSchemaField = 2, 
  dscobjSchemaRelationship = 4, 
  dscobjRecordsetDef = 8, 
  dscobjPageRowsource = 16, 
  dscobjPageField = 32, 
  dscobjSublistRelationship = 64, 
  dscobjLookupRelationship = 128, 
  dscobjGroupingDef = 256, 
  dscobjDatamodel = 512, 
  dscobjPageRelatedField = 1024, 
  dscobjParameterValue = 2048, 
  dscobjSchemaRelatedField = 4096, 
  dscobjSchemaParameter = 8192, 
  dscobjSchemaProperty = 16384, 
  dscobjSchemaDiagram = 32768
} DscObjectTypeEnum;

typedef enum NavButtonEnum
{
  navbtnMoveFirst = 0, 
  navbtnMovePrev = 1, 
  navbtnMoveNext = 2, 
  navbtnMoveLast = 3, 
  navbtnNew = 4, 
  navbtnDelete = 5, 
  navbtnSave = 6, 
  navbtnUndo = 7, 
  navbtnSortAscending = 8, 
  navbtnSortDescending = 9, 
  navbtnApplyFilter = 10, 
  navbtnToggleFilter = 11, 
  navbtnHelp = 12
} NavButtonEnum;

typedef enum DscDropTypeEnum
{
  dscDefault = 0, 
  dscGrid = 1, 
  dscFields = 2
} DscDropTypeEnum;

typedef enum DscDropLocationEnum
{
  dscAbove = 1, 
  dscWithin = 2, 
  dscBelow = 3
} DscDropLocationEnum;

typedef enum DscHyperlinkPartEnum
{
  dschlDisplayedValue = 0, 
  dschlDisplayText = 1, 
  dschlAddress = 2, 
  dschlSubAddress = 3, 
  dschlScreenTip = 4, 
  dschlFullAddress = 5
} DscHyperlinkPartEnum;

typedef enum DscLocationEnum
{
  dscSystem = 0xFFFFFFFF, 
  dscClient = 0, 
  dscServer = 1
} DscLocationEnum;

typedef enum DscRecordsetTypeEnum
{
  dscSnapshot = 1, 
  dscUpdatableSnapshot = 2
} DscRecordsetTypeEnum;

typedef enum DscRowsourceTypeEnum
{
  dscTable = 1, 
  dscView = 2, 
  dscCommandText = 3, 
  dscProcedure = 4, 
  dscCommandFile = 5
} DscRowsourceTypeEnum;

typedef enum DscFetchTypeEnum
{
  dscFull = 1, 
  dscParameterized = 2, 
  dscSelectControl = 32768
} DscFetchTypeEnum;

typedef enum DscAdviseTypeEnum
{
  dscAdd = 1, 
  dscDelete = 2, 
  dscMove = 3, 
  dscLoad = 4, 
  dscChange = 5, 
  dscDeleteComplete = 6, 
  dscRename = 7
} DscAdviseTypeEnum;

typedef enum OCCommandId
{
  ocCommandAbout = 1007, 
  ocCommandUndo = 1000, 
  ocCommandCut = 1001, 
  ocCommandCopy = 1002, 
  ocCommandPaste = 1003, 
  ocCommandProperties = 1005, 
  ocCommandHelp = 1006, 
  ocCommandExport = 1004, 
  ocCommandSortAsc = 2000, 
  ocCommandSortDesc = 2031, 
  ocCommandChooser = 1010, 
  ocCommandAutoFilter = 1017, 
  ocCommandAutoCalc = 1016, 
  ocCommandCollapse = 1013, 
  ocCommandExpand = 1012, 
  ocCommandRefresh = 1014
} OCCommandId;

typedef enum XlApplicationInternational
{
  xl24HourClock = 33, 
  xl4DigitYears = 43, 
  xlAlternateArraySeparator = 16, 
  xlColumnSeparator = 14, 
  xlCountryCode = 1, 
  xlCountrySetting = 2, 
  xlCurrencyBefore = 37, 
  xlCurrencyCode = 25, 
  xlCurrencyDigits = 27, 
  xlCurrencyLeadingZeros = 40, 
  xlCurrencyMinusSign = 38, 
  xlCurrencyNegative = 28, 
  xlCurrencySpaceBefore = 36, 
  xlCurrencyTrailingZeros = 39, 
  xlDateOrder = 32, 
  xlDateSeparator = 17, 
  xlDayCode = 21, 
  xlDayLeadingZero = 42, 
  xlDecimalSeparator = 3, 
  xlGeneralFormatName = 26, 
  xlHourCode = 22, 
  xlLeftBrace = 12, 
  xlLeftBracket = 10, 
  xlListSeparator = 5, 
  xlLowerCaseColumnLetter = 9, 
  xlLowerCaseRowLetter = 8, 
  xlMDY = 44, 
  xlMetric = 35, 
  xlMinuteCode = 23, 
  xlMonthCode = 20, 
  xlMonthLeadingZero = 41, 
  xlMonthNameChars = 30, 
  xlNoncurrencyDigits = 29, 
  xlNonEnglishFunctions = 34, 
  xlRightBrace = 13, 
  xlRightBracket = 11, 
  xlRowSeparator = 15, 
  xlSecondCode = 24, 
  xlThousandsSeparator = 4, 
  xlTimeLeadingZero = 45, 
  xlTimeSeparator = 18, 
  xlUpperCaseColumnLetter = 7, 
  xlUpperCaseRowLetter = 6, 
  xlWeekdayNameChars = 31, 
  xlYearCode = 19
} XlApplicationInternational;

typedef enum FieldListRelationshipTypeEnum
{
  flrelNoRel = 0, 
  flrelOneToMany = 1, 
  flrelManyToOne = 2, 
  flrelOneToOnePrimaryPrimary = 4, 
  flrelOneToOnePrimaryForeign = 8, 
  flrelUniqueConstraint = 16, 
  flrelUniqueIndex = 32
} FieldListRelationshipTypeEnum;

typedef enum FieldListObjectTypeEnum
{
  flTables = 1, 
  flViews = 2, 
  flStoredProcedures = 4, 
  flCmdText = 8, 
  flSchemaDiagrams = 16, 
  flOLAPCube = 32, 
  flAll = 63
} FieldListObjectTypeEnum;

typedef enum DaAttrEnum
{
  daLength = 1, 
  daPrecision = 2, 
  daScale = 3
} DaAttrEnum;

typedef enum SectTypeEnum
{
  sectTypeNone = 0, 
  sectTypeCaption = 1, 
  sectTypeHeader = 2, 
  sectTypeFooter = 3, 
  sectTypeRecNav = 4
} SectTypeEnum;

typedef enum DscStatusEnum
{
  dscDeleteOK = 0, 
  dscDeleteCancel = 1, 
  dscDeleteUserCancel = 2
} DscStatusEnum;

typedef enum DscDisplayAlert
{
  dscDataAlertContinue = 0, 
  dscDataAlertDisplay = 1
} DscDisplayAlert;

typedef enum DefaultControlTypeEnum
{
  ctlTypeTextBox = 0, 
  ctlTypeBoundSpan = 1, 
  ctlTypeBoundHTML = 1
} DefaultControlTypeEnum;

typedef enum DataPageDesignerFlags
{
  designFlagDontDelete = 1, 
  designFlagDontCleanup = 2
} DataPageDesignerFlags;

typedef enum ExportableConnectStringEnum
{
  exportNone = 0, 
  exportForExcel = 1
} ExportableConnectStringEnum;

typedef enum DscOfflineTypeEnum
{
  dscOfflineNone = 0, 
  dscOfflineMerge = 1, 
  dscOfflineXMLDataFile = 2
} DscOfflineTypeEnum;

typedef enum DscXMLLocationEnum
{
  dscXMLEmbedded = 0, 
  dscXMLDataFile = 1
} DscXMLLocationEnum;

typedef enum DscSaveAsEnum
{
  dscSaveAsEmbeddedXML = 0, 
  dscSaveAsXMLDataFile = 1
} DscSaveAsEnum;

typedef enum DscEncodingEnum
{
  dscUTF8 = 0, 
  dscUTF16 = 1
} DscEncodingEnum;

typedef enum NotificationType
{
  dscConnectionReset = 0, 
  dscDataReset = 1
} NotificationType;

typedef enum RefreshType
{
  dscRefreshConnection = 0, 
  dscRefreshData = 1
} RefreshType;

typedef enum SynchronizationStatus
{
  dscSynchronizing = 0, 
  dscSynchronizationDone = 1
} SynchronizationStatus;

typedef enum FieldListSelectRestriction
{
  flSRNone = 0, 
  flSRParent = 1, 
  flSRParentAndType = 2
} FieldListSelectRestriction;

typedef enum ChartFillStyleEnum
{
  chNone = 0xFFFFFFFF, 
  chSolid = 0
} ChartFillStyleEnum;

typedef enum ChartColorIndexEnum
{
  chColorAutomatic = 0xFFFFFFFF, 
  chColorNone = 0xFFFFFFFE
} ChartColorIndexEnum;

typedef enum ChartDataGroupingFunctionEnum
{
  chDataGroupingFunctionMinimum = 0, 
  chDataGroupingFunctionMaximum = 1, 
  chDataGroupingFunctionSum = 2, 
  chDataGroupingFunctionAverage = 3
} ChartDataGroupingFunctionEnum;

typedef enum ChartSeriesByEnum
{
  chSeriesByRows = 0, 
  chSeriesByColumns = 1
} ChartSeriesByEnum;

typedef enum ChartSpecialDataSourcesEnum
{
  chDataBound = 0, 
  chDataLiteral = 0xFFFFFFFF, 
  chDataNone = 0xFFFFFFFE, 
  chDataLinked = 0xFFFFFFFD
} ChartSpecialDataSourcesEnum;

typedef enum ChartPivotDataReferenceEnum
{
  chPivotColumns = 0xFFFFFFFF, 
  chPivotRows = 0xFFFFFFFE, 
  chPivotColAggregates = 0xFFFFFFFD, 
  chPivotRowAggregates = 0xFFFFFFFC
} ChartPivotDataReferenceEnum;

typedef enum Chart3DSurfaceEnum
{
  chSurfaceBackWall = 0, 
  chSurfaceSideWall = 1, 
  chSurfaceFloor = 2
} Chart3DSurfaceEnum;

typedef enum ChartLabelOrientationEnum
{
  chLabelOrientationAutomatic = 1000, 
  chLabelOrientationHorizontal = 0, 
  chLabelOrientationUpward = 90, 
  chLabelOrientationDownward = 0xFFFFFFA6
} ChartLabelOrientationEnum;

typedef enum ChartCommandIdEnum
{
  chCommandCut = 1001, 
  chCommandDeleteSelection = 1011, 
  chCommandShowPropertyToolbox = 1005, 
  chCommandShowContextMenu = 6001, 
  chCommandUndo = 1000, 
  chCommandSelectPrevMinor = 6002, 
  chCommandSelectNextMinor = 6003, 
  chCommandSelectPrevMajor = 6004, 
  chCommandSelectNextMajor = 6005, 
  chCommandShowHelp = 1006, 
  chCommandShowAbout = 1007, 
  chCommandPassiveAlert = 6026, 
  chCommandLaunchDataFinder = 6027, 
  chCommandShowLegend = 6028, 
  chCommandRefresh = 1014, 
  chCommandByRowCol = 6032, 
  chCommandSortAscending = 2000, 
  chCommandSortDescending = 2031, 
  chCommandAutoFilter = 1017, 
  chCommandAutoCalc = 1016, 
  chCommandExpand = 1012, 
  chCommandCollapse = 1013, 
  chCommandDrill = 6034, 
  chCommandFieldList = 1010, 
  chCommandFilterByMenu = 1015, 
  chCommandSortAscendingByTotal = 6035, 
  chCommandSortDescendingByTotal = 6036, 
  chCommandDrillOut = 6037, 
  chCommandTogglePropertiesInScreenTip = 6038, 
  chCommandChartType = 6039, 
  chCommandShowWizard = 6040, 
  chCommandSum = 6041, 
  chCommandCount = 6042, 
  chCommandMin = 6043, 
  chCommandMax = 6044, 
  chCommandAverage = 6045, 
  chCommandStdDev = 6046, 
  chCommandVar = 6047, 
  chCommandStdDevP = 6048, 
  chCommandVarP = 6049, 
  chCommandFontName = 1050, 
  chCommandFontSize = 1051, 
  chCommandBold = 1052, 
  chCommandItalic = 1053, 
  chCommandUnderline = 1054, 
  chCommandLineColor = 1055, 
  chCommandInteriorColor = 1056, 
  chCommandFontColor = 1057, 
  chCommandMultiChart = 6050, 
  chCommandUnifiedScales = 6051, 
  chCommandShowDropZones = 6052, 
  chCommandShowToolbar = 6053, 
  chCommandShowTop1 = 1100, 
  chCommandShowTop2 = 1101, 
  chCommandShowTop5 = 1102, 
  chCommandShowTop10 = 1103, 
  chCommandShowTop25 = 1104, 
  chCommandShowTop1Percent = 1105, 
  chCommandShowTop2Percent = 1106, 
  chCommandShowTop5Percent = 1107, 
  chCommandShowTop10Percent = 1108, 
  chCommandShowTop25Percent = 1109, 
  chCommandShowBottom1 = 1110, 
  chCommandShowBottom2 = 1111, 
  chCommandShowBottom5 = 1112, 
  chCommandShowBottom10 = 1113, 
  chCommandShowBottom25 = 1114, 
  chCommandShowBottom1Percent = 1115, 
  chCommandShowBottom2Percent = 1116, 
  chCommandShowBottom5Percent = 1117, 
  chCommandShowBottom10Percent = 1118, 
  chCommandShowBottom25Percent = 1119, 
  chCommandShowOther = 1120, 
  chCommandShowAll = 1121, 
  chCommandShowTopNMenu = 1123, 
  chCommandShowBottomNMenu = 1124, 
  chCommandConditionalFilter = 1125, 
  chCommandMoveToFilterArea = 6054, 
  chCommandMoveToSeriesArea = 6055, 
  chCommandMoveToCategoryArea = 6056, 
  chCommandMoveToChartArea = 6057
} ChartCommandIdEnum;

typedef enum AddinClientTypeEnum
{
  ssCoerceNum = 1, 
  ssCoerceStr = 2, 
  ssCoerceBool = 4, 
  ssCoerceErr = 16, 
  ssCoerceMulti = 64, 
  ssCoerceInt = 2048
} AddinClientTypeEnum;

typedef enum SpreadSheetCommandId
{
  ssCommandUndo = 1000, 
  ssCommandCut = 1001, 
  ssCommandCopy = 1002, 
  ssCommandPaste = 1003, 
  ssCommandExport = 1004, 
  ssCommandProperties = 1005, 
  ssCommandHelp = 1006, 
  ssCommandAbout = 1007, 
  ssCommandSortAsc = 2000, 
  ssCommandSortAscLast = 2030, 
  ssCommandSortDesc = 2031, 
  ssCommandSortDescLast = 2061, 
  ssCommandAutosum = 10000, 
  ssCommandAutoFilter = 10001, 
  ssCommandClear = 10002, 
  ssCommandBold = 1052, 
  ssCommandItalic = 1053, 
  ssCommandUnderline = 1054, 
  ssCommandDeleteRows = 10006, 
  ssCommandDeleteCols = 10007, 
  ssCommandInsertRows = 10008, 
  ssCommandInsertCols = 10009, 
  ssCommandRecalcForce = 10010, 
  ssCommandSelectRow = 10011, 
  ssCommandSelectCol = 10012, 
  ssCommandSelectAll = 10013, 
  ssCommandMoveLeft = 10014, 
  ssCommandMoveUp = 10015, 
  ssCommandMoveRight = 10016, 
  ssCommandMoveDown = 10017, 
  ssCommandScrollLeft = 10018, 
  ssCommandScrollUp = 10019, 
  ssCommandScrollRight = 10020, 
  ssCommandScrollDown = 10021, 
  ssCommandMoveNext = 10022, 
  ssCommandMovePrevious = 10023, 
  ssCommandTabNext = 10024, 
  ssCommandTabPrevious = 10025, 
  ssCommandMoveToEndLeft = 10026, 
  ssCommandMoveToEndUp = 10027, 
  ssCommandMoveToEndRight = 10028, 
  ssCommandMoveToEndDown = 10029, 
  ssCommandExpandLeft = 10030, 
  ssCommandExpandUp = 10031, 
  ssCommandExpandRight = 10032, 
  ssCommandExpandDown = 10033, 
  ssCommandExpandToEndLeft = 10034, 
  ssCommandExpandToEndUp = 10035, 
  ssCommandExpandToEndRight = 10036, 
  ssCommandExpandToEndDown = 10037, 
  ssCommandEnterEditMode = 10038, 
  ssCommandShowContextMenu = 10039, 
  ssCommandToggleToolbar = 10040, 
  ssCommandEscape = 10041, 
  ssCommandMoveToLast = 10042, 
  ssCommandExpandToLast = 10043, 
  ssCommandMoveToLastInRow = 10044, 
  ssCommandMovePageDown = 10045, 
  ssCommandExpandPageDown = 10046, 
  ssCommandMovePageUp = 10047, 
  ssCommandExpandPageUp = 10048, 
  ssCommandMovePageRight = 10062, 
  ssCommandExpandPageRight = 10063, 
  ssCommandMovePageLeft = 10064, 
  ssCommandExpandPageLeft = 10065, 
  ssCommandMoveToOrigin = 10049, 
  ssCommandExpandToOrigin = 10050, 
  ssCommandMoveToHome = 10051, 
  ssCommandExpandToHome = 10052, 
  ssCommandExpandMenu = 10053, 
  ssCommandEat = 10054, 
  ssCommandNextSheet = 10055, 
  ssCommandPrevSheet = 10056, 
  ssCommandNewSheet = 10057, 
  ssCommandSelectArray = 10058, 
  ssCommandSelectArraySilent = 10067, 
  ssCommandRecalc = 10059, 
  ssCommandRefresh = 10060, 
  ssCommandRefreshAll = 10061, 
  ssCommandMakeActiveCellVisible = 10066
} SpreadSheetCommandId;

typedef enum SheetCommandEnum
{
  ssCalculate = 0, 
  ssInsertRows = 2, 
  ssInsertColumns = 3, 
  ssDeleteRows = 4, 
  ssDeleteColumns = 5, 
  ssCut = 6, 
  ssCopy = 7, 
  ssPaste = 8, 
  ssExport = 9, 
  ssUndo = 10, 
  ssSortAscending = 11, 
  ssSortDescending = 12, 
  ssFind = 13, 
  ssClear = 14, 
  ssAutoFilter = 15, 
  ssProperties = 16, 
  ssHelp = 17
} SheetCommandEnum;

typedef enum XlConstants
{
  xlAutomatic = 0xFFFFEFF7, 
  xlNone = 0xFFFFEFD2
} XlConstants;

typedef enum XlDeleteShiftDirection
{
  xlShiftToLeft = 0xFFFFEFC1, 
  xlShiftUp = 0xFFFFEFBE
} XlDeleteShiftDirection;

typedef enum XlInsertShiftDirection
{
  xlShiftDown = 0xFFFFEFE7, 
  xlShiftToRight = 0xFFFFEFBF
} XlInsertShiftDirection;

typedef enum XlFindLookIn
{
  xlFormulas = 0xFFFFEFE5, 
  xlValues = 0xFFFFEFBD
} XlFindLookIn;

typedef enum XlLookAt
{
  xlPart = 2, 
  xlWhole = 1
} XlLookAt;

typedef enum XlOrientation
{
  xlDownward = 0xFFFFEFB6, 
  xlHorizontal = 0xFFFFEFE0, 
  xlUpward = 0xFFFFEFB5, 
  xlVertical = 0xFFFFEFBA
} XlOrientation;

typedef enum XlSearchOrder
{
  xlByColumns = 2, 
  xlByRows = 1
} XlSearchOrder;

typedef enum XlRangeValueType
{
  xlRangeValueDefault = 10, 
  xlRangeValueXMLSpreadsheet = 11, 
  xlRangeValueHTML = 1000, 
  xlRangeValueCSV = 1001
} XlRangeValueType;

typedef enum PivotViewReasonEnum
{
  plViewReasonSelectionChange = 0, 
  plViewReasonSystemColorChange = 1, 
  plViewReasonDataChange = 2, 
  plViewReasonFontNameChange = 3, 
  plViewReasonFontSizeChange = 4, 
  plViewReasonFontBoldChange = 5, 
  plViewReasonFontItalicChange = 6, 
  plViewReasonFontUnderlineChange = 7, 
  plViewReasonMemberExpandedChange = 8, 
  plViewReasonCellExpandedChange = 9, 
  plViewReasonDetailRowHeightChange = 10, 
  plViewReasonFieldDetailWidthChange = 11, 
  plViewReasonFieldGroupedWidthChange = 12, 
  plViewReasonViewDetailWidthChange = 13, 
  plViewReasonFieldSetWidthChange = 14, 
  plViewReasonTotalWidthChange = 15, 
  plViewReasonForeColorChange = 16, 
  plViewReasonBackColorChange = 17, 
  plViewReasonAlignmentChange = 18, 
  plViewReasonNumberFormatChange = 19, 
  plViewReasonDetailTopChange = 20, 
  plViewReasonDetailLeftChange = 21, 
  plViewReasonTopChange = 22, 
  plViewReasonLeftChange = 23, 
  plViewReasonRightToLeftChange = 24, 
  plViewReasonTotalOrientationChange = 25, 
  plViewReasonDisplayOutlineChange = 26, 
  plViewReasonFieldCaptionChange = 27, 
  plViewReasonFieldSetCaptionChange = 28, 
  plViewReasonLabelCaptionChange = 29, 
  plViewReasonMemberCaptionChange = 30, 
  plViewReasonTotalCaptionChange = 31, 
  plViewReasonAllowFilteringChange = 32, 
  plViewReasonAllowGroupingChange = 33, 
  plViewReasonWidthChange = 34, 
  plViewReasonHeightChange = 35, 
  plViewReasonLabelVisibleChange = 36, 
  plViewReasonDisplayToolbarChange = 37, 
  plViewReasonMaxHeightChange = 38, 
  plViewReasonMaxWidthChange = 39, 
  plViewReasonAutoFitChange = 40, 
  plViewReasonFieldExpandedChange = 41, 
  plViewReasonExpandDetailsChange = 42, 
  plViewReasonDetailMaxWidthChange = 43, 
  plViewReasonDetailMaxHeightChange = 44, 
  plViewReasonTopOffsetChange = 45, 
  plViewReasonLeftOffsetChange = 46, 
  plViewReasonDetailTopOffsetChange = 47, 
  plViewReasonDetailLeftOffsetChange = 48, 
  plViewReasonIsHyperlinkChange = 49, 
  plViewReasonMemberPropertyDisplayInChange = 50, 
  plViewReasonMemberPropertyCaptionChange = 51, 
  plViewReasonMemberPropertiesOrderChange = 52, 
  plViewReasonFieldGroupedHeightChange = 53, 
  plViewReasonMemberHeightChange = 54, 
  plViewReasonMemberWidthChange = 55, 
  plViewReasonPropertyValueWidthChange = 56, 
  plViewReasonPropertyHeightChange = 57, 
  plViewReasonShowDetails = 58, 
  plViewReasonHideDetails = 59, 
  plViewReasonAllowCustomOrderingChange = 60, 
  plViewReasonAllowPropertyToolbox = 61, 
  plViewReasonExpandMembersChange = 62, 
  plViewReasonAllowEditsChange = 63, 
  plViewReasonAllowAdditionsChange = 64, 
  plViewReasonAllowDeletionsChange = 65, 
  plViewReasonSetFocus = 66, 
  plViewReasonKillFocus = 67, 
  plViewReasonDisplayScreenTipsChange = 68, 
  plViewReasonShowAsChange = 69, 
  plViewReasonMemberCaptionsChange = 70, 
  plViewReasonPropertyCaptionWidthChange = 71, 
  plViewReasonDataMemberCaptionChange = 72, 
  plViewReasonDisplayInFieldListChange = 73, 
  plViewReasonToolbarChange = 74, 
  plViewReasonUseProviderFormattingChange = 75
} PivotViewReasonEnum;

typedef enum PivotDataReasonEnum
{
  plDataReasonInsertFieldSet = 0, 
  plDataReasonRemoveFieldSet = 1, 
  plDataReasonInsertTotal = 2, 
  plDataReasonRemoveTotal = 3, 
  plDataReasonAllowDetailsChange = 4, 
  plDataReasonSortDirectionChange = 5, 
  plDataReasonSortOnChange = 6, 
  plDataReasonSortOnScopeChange = 7, 
  plDataReasonFilterFunctionChange = 8, 
  plDataReasonFilterContextChange = 9, 
  plDataReasonDisplayCalculatedMembersChange = 10, 
  plDataReasonFilterOnChange = 11, 
  plDataReasonFilterOnScopeChange = 12, 
  plDataReasonFilterFunctionValueChange = 13, 
  plDataReasonTotalNameChange = 14, 
  plDataReasonIncludedMembersChange = 15, 
  plDataReasonExcludedMembersChange = 16, 
  plDataReasonIsIncludedChange = 17, 
  plDataReasonDisplayEmptyMembersChange = 19, 
  plDataReasonTotalFunctionChange = 20, 
  plDataReasonUser = 21, 
  plDataReasonDataSourceChange = 22, 
  plDataReasonDataMemberChange = 23, 
  plDataReasonGroupOnChange = 24, 
  plDataReasonUnknown = 25, 
  plDataReasonGroupStartChange = 26, 
  plDataReasonGroupIntervalChange = 27, 
  plDataReasonIsFilteredChange = 28, 
  plDataReasonOrderedMembersChange = 29, 
  plDataReasonGroupEndChange = 30, 
  plDataReasonCommandTextChange = 31, 
  plDataReasonConnectionStringChange = 32, 
  plDataReasonMemberPropertyIsIncludedChange = 33, 
  plDataReasonMemberPropertyDisplayInChange = 34, 
  plDataReasonSubtotalsChange = 35, 
  plDataReasonTotalExpressionChange = 36, 
  plDataReasonTotalSolveOrderChange = 37, 
  plDataReasonTotalDeleted = 38, 
  plDataReasonFieldSetDeleted = 39, 
  plDataReasonRecordChanged = 40, 
  plDataReasonAllowMultiFilterChange = 41, 
  plDataReasonAllIncludeExcludeChange = 42, 
  plDataReasonAdhocFieldAdded = 43, 
  plDataReasonAdhocFieldDeleted = 44, 
  plDataReasonAdhocMemberChanged = 45, 
  plDataReasonAlwaysIncludeInCubeChange = 46, 
  plDataReasonExpressionChange = 47, 
  plDataReasonTotalAllMembersChange = 48, 
  plDataReasonDisplayCellColorChange = 49, 
  plDataReasonFilterCrossJoinsChange = 50, 
  plDataReasonRefreshDataSource = 51, 
  plDataReasonFieldSetNameChange = 52, 
  plDataReasonFieldNameChange = 53
} PivotDataReasonEnum;

typedef enum PivotTableReasonEnum
{
  plPivotTableReasonTotalAdded = 0, 
  plPivotTableReasonTotalDeleted = 1, 
  plPivotTableReasonFieldSetAdded = 2, 
  plPivotTableReasonFieldAdded = 3
} PivotTableReasonEnum;

typedef enum PivotCommandId
{
  plCommandAbout = 1007, 
  plCommandDelete = 1011, 
  plCommandFilterBySel = 12001, 
  plCommandChooser = 1010, 
  plCommandProperties = 1005, 
  plCommandInsertField = 12004, 
  plCommandAutoSum = 12005, 
  plCommandAutoCount = 12006, 
  plCommandAutoMin = 12007, 
  plCommandAutoMax = 12008, 
  plCommandDropzones = 12009, 
  plCommandRemove = 12010, 
  plCommandNextHorz = 12012, 
  plCommandNextVert = 12013, 
  plCommandLeftEdge = 12014, 
  plCommandRightEdge = 12015, 
  plCommandTopLeftEdge = 12016, 
  plCommandBottomRightEdge = 12017, 
  plCommandNextHorzCell = 12018, 
  plCommandPrevHorzCell = 12019, 
  plCommandLastLeft = 12020, 
  plCommandLastRight = 12021, 
  plCommandLastUp = 12022, 
  plCommandLastDown = 12023, 
  plCommandEnterDetails = 12024, 
  plCommandExitDetails = 12025, 
  plCommandLeft = 12026, 
  plCommandRight = 12027, 
  plCommandUp = 12028, 
  plCommandDown = 12029, 
  plCommandPageUp = 12030, 
  plCommandPageDown = 12031, 
  plCommandPageLeft = 12032, 
  plCommandPageRight = 12033, 
  plCommandGroupByRow = 12034, 
  plCommandGroupByColumn = 12035, 
  plCommandUngroup = 12036, 
  plCommandFilter = 12037, 
  plCommandPromote = 12038, 
  plCommandDemote = 12039, 
  plCommandExpand = 1012, 
  plCommandCollapse = 1013, 
  plCommandSubtotal = 12042, 
  plCommandExport = 1004, 
  plCommandToolbar = 12044, 
  plCommandSortAsc = 2000, 
  plCommandSortDesc = 2031, 
  plCommandClearCustomOrdering = 12154, 
  plCommandHelp = 1006, 
  plCommandRefresh = 1014, 
  plCommandAutoFilter = 1017, 
  plCommandCopy = 1002, 
  plCommandExpandIndicator = 12051, 
  plCommandSelectField = 12052, 
  plCommandSelectRow = 12053, 
  plCommandSelectAll = 12054, 
  plCommandFormatGeneral = 12055, 
  plCommandFormatCurrency = 12056, 
  plCommandFormatPercent = 12057, 
  plCommandFormatExponent = 12058, 
  plCommandFormatDate = 12059, 
  plCommandFormatTime = 12060, 
  plCommandFormatComma = 12061, 
  plCommandFormatBold = 12062, 
  plCommandFormatItalic = 12063, 
  plCommandFormatUnderline = 12064, 
  plCommandFormatUnderline2 = 12146, 
  plCommandFilterByMenu = 12065, 
  plCommandContextMenu = 12066, 
  plCommandPrevHorz = 12067, 
  plCommandPrevVert = 12068, 
  plCommandNextVertCell = 12069, 
  plCommandPrevVertCell = 12070, 
  plCommandExtendLeft = 12072, 
  plCommandExtendRight = 12073, 
  plCommandExtendUp = 12074, 
  plCommandExtendDown = 12075, 
  plCommandExtendPageLeft = 12076, 
  plCommandExtendPageRight = 12077, 
  plCommandExtendPageUp = 12078, 
  plCommandExtendPageDown = 12079, 
  plCommandHyperlink = 12082, 
  plCommandOpenHyperlinkInPlace = 12083, 
  plCommandOpenHyperlinkInWindow = 12084, 
  plCommandMoveMemUp = 12085, 
  plCommandMoveMemDown = 12086, 
  plCommandMoveMemLeft = 12087, 
  plCommandMoveMemRight = 12088, 
  plCommandAutoAverage = 12089, 
  plCommandAutoStdDev = 12090, 
  plCommandAutoVar = 12091, 
  plCommandAutoStdDevP = 12092, 
  plCommandAutoVarP = 12093, 
  plCommandShowDetails = 12095, 
  plCommandHideDetails = 12096, 
  plCommandTogglePropertiesInReport = 12097, 
  plCommandTogglePropertiesInScreenTip = 12098, 
  plCommandStartEdit = 12099, 
  plCommandEndEdit = 12100, 
  plCommandDeleteRow = 12101, 
  plCommandCreateCalculatedTotal = 12102, 
  plCommandPaste = 1003, 
  plCommandExtendTopLeftEdge = 12107, 
  plCommandExtendBottomRightEdge = 12108, 
  plCommandTogglePropertyInReport = 12900, 
  plCommandTogglePropertyInScreenTip = 12950, 
  plCommandAutoCalc = 1016, 
  plCommandCalculated = 12110, 
  plCommandShowTop1 = 1100, 
  plCommandShowTop2 = 1101, 
  plCommandShowTop5 = 1102, 
  plCommandShowTop10 = 1103, 
  plCommandShowTop25 = 1104, 
  plCommandShowTop1Percent = 1105, 
  plCommandShowTop2Percent = 1106, 
  plCommandShowTop5Percent = 1107, 
  plCommandShowTop10Percent = 1108, 
  plCommandShowTop25Percent = 1109, 
  plCommandShowBottom1 = 1110, 
  plCommandShowBottom2 = 1111, 
  plCommandShowBottom5 = 1112, 
  plCommandShowBottom10 = 1113, 
  plCommandShowBottom25 = 1114, 
  plCommandShowBottom1Percent = 1115, 
  plCommandShowBottom2Percent = 1116, 
  plCommandShowBottom5Percent = 1117, 
  plCommandShowBottom10Percent = 1118, 
  plCommandShowBottom25Percent = 1119, 
  plCommandShowOther = 1120, 
  plCommandShowAll = 1121, 
  plCommandShowTopNMenu = 1123, 
  plCommandShowBottomNMenu = 1124, 
  plCommandConditionalFilter = 1125, 
  plCommandShowAs = 12134, 
  plCommandShowAsNormal = 12135, 
  plCommandShowAsPercentOfRowTotal = 12136, 
  plCommandShowAsPercentOfColumnTotal = 12137, 
  plCommandShowAsPercentOfRowParent = 12138, 
  plCommandShowAsPercentOfColumnParent = 12139, 
  plCommandShowAsPercentOfGrandTotal = 12140, 
  plCommandFormatAlignLeft = 12141, 
  plCommandFormatAlignCenter = 12142, 
  plCommandFormatAlignRight = 12143, 
  plCommandFormatAlignAutomatic = 12158, 
  plCommandFormatName = 12144, 
  plCommandFormatSize = 12145, 
  plCommandFormatForeColor = 12147, 
  plCommandFormatBackColor = 12148, 
  plCommandShowAllPropertiesInReport = 12149, 
  plCommandHideAllPropertiesInReport = 12150, 
  plCommandShowAllPropertiesInScreenTip = 12151, 
  plCommandHideAllPropertiesInScreenTip = 12152, 
  plCommandProfile = 12153, 
  plCommandGroupMembers = 12155, 
  plCommandUngroupMembers = 12156, 
  plCommandCut = 12157
} PivotCommandId;

// *********************************************************************//
// Interface: IChartEvents
// Flags:     (4096) Dispatchable
// GUID:      {F5B39A7A-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface IChartEvents : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall DataSetChange()
  {
    _TDispID _dispid(/* DataSetChange */ DISPID(5101));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall DblClick()
  {
    _TDispID _dispid(/* DblClick */ DISPID(5102));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall Click()
  {
    _TDispID _dispid(/* Click */ DISPID(5103));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyDown(long KeyCode, long Shift)
  {
    _TDispID _dispid(/* KeyDown */ DISPID(1009));
    TAutoArgs<2> _args;
    _args[1] = KeyCode /*[VT_I4:0]*/;
    _args[2] = Shift /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyUp(long KeyCode, long Shift)
  {
    _TDispID _dispid(/* KeyUp */ DISPID(1008));
    TAutoArgs<2> _args;
    _args[1] = KeyCode /*[VT_I4:0]*/;
    _args[2] = Shift /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyPress(long KeyAscii)
  {
    _TDispID _dispid(/* KeyPress */ DISPID(1010));
    TAutoArgs<1> _args;
    _args[1] = KeyAscii /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall BeforeKeyDown(long KeyCode, long Shift, Owc10_xp::ByRef* Cancel)
  {
    _TDispID _dispid(/* BeforeKeyDown */ DISPID(1006));
    TAutoArgs<3> _args;
    _args[1] = KeyCode /*[VT_I4:0]*/;
    _args[2] = Shift /*[VT_I4:0]*/;
    _args[3] = (LPDISPATCH)(Owc10_xp::ByRef*)Cancel /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall BeforeKeyUp(long KeyCode, long Shift, Owc10_xp::ByRef* Cancel)
  {
    _TDispID _dispid(/* BeforeKeyUp */ DISPID(1005));
    TAutoArgs<3> _args;
    _args[1] = KeyCode /*[VT_I4:0]*/;
    _args[2] = Shift /*[VT_I4:0]*/;
    _args[3] = (LPDISPATCH)(Owc10_xp::ByRef*)Cancel /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall BeforeKeyPress(long KeyAscii, Owc10_xp::ByRef* Cancel)
  {
    _TDispID _dispid(/* BeforeKeyPress */ DISPID(1007));
    TAutoArgs<2> _args;
    _args[1] = KeyAscii /*[VT_I4:0]*/;
    _args[2] = (LPDISPATCH)(Owc10_xp::ByRef*)Cancel /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseDown(long Button/*[in]*/, long Shift/*[in]*/, long x/*[in]*/
                                            , long y/*[in]*/)
  {
    _TDispID _dispid(/* MouseDown */ DISPID(5107));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I4:0]*/;
    _args[2] = Shift /*[VT_I4:0]*/;
    _args[3] = x /*[VT_I4:0]*/;
    _args[4] = y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseMove(long Button/*[in]*/, long Shift/*[in]*/, long x/*[in]*/
                                            , long y/*[in]*/)
  {
    _TDispID _dispid(/* MouseMove */ DISPID(5108));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I4:0]*/;
    _args[2] = Shift /*[VT_I4:0]*/;
    _args[3] = x /*[VT_I4:0]*/;
    _args[4] = y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseUp(long Button/*[in]*/, long Shift/*[in]*/, long x/*[in]*/, 
                                          long y/*[in]*/)
  {
    _TDispID _dispid(/* MouseUp */ DISPID(5109));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I4:0]*/;
    _args[2] = Shift /*[VT_I4:0]*/;
    _args[3] = x /*[VT_I4:0]*/;
    _args[4] = y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseWheel(VARIANT_BOOL Page/*[in]*/, long Count/*[in]*/)
  {
    _TDispID _dispid(/* MouseWheel */ DISPID(5118));
    TAutoArgs<2> _args;
    _args[1] = Page /*[VT_BOOL:0]*/;
    _args[2] = Count /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall SelectionChange()
  {
    _TDispID _dispid(/* SelectionChange */ DISPID(5110));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall BeforeScreenTip(Owc10_xp::ByRef* TipText, LPDISPATCH ContextObject)
  {
    _TDispID _dispid(/* BeforeScreenTip */ DISPID(5120));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Owc10_xp::ByRef*)TipText /*[VT_USERDEFINED:1]*/;
    _args[2] = ContextObject /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall CommandEnabled(VARIANT Command, Owc10_xp::ByRef* Enabled)
  {
    _TDispID _dispid(/* CommandEnabled */ DISPID(1000));
    TAutoArgs<2> _args;
    _args[1] = Command /*[VT_VARIANT:0]*/;
    _args[2] = (LPDISPATCH)(Owc10_xp::ByRef*)Enabled /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall CommandChecked(VARIANT Command, Owc10_xp::ByRef* Checked)
  {
    _TDispID _dispid(/* CommandChecked */ DISPID(1001));
    TAutoArgs<2> _args;
    _args[1] = Command /*[VT_VARIANT:0]*/;
    _args[2] = (LPDISPATCH)(Owc10_xp::ByRef*)Checked /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall CommandTipText(VARIANT Command, Owc10_xp::ByRef* Caption)
  {
    _TDispID _dispid(/* CommandTipText */ DISPID(1002));
    TAutoArgs<2> _args;
    _args[1] = Command /*[VT_VARIANT:0]*/;
    _args[2] = (LPDISPATCH)(Owc10_xp::ByRef*)Caption /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall CommandBeforeExecute(VARIANT Command, Owc10_xp::ByRef* Cancel)
  {
    _TDispID _dispid(/* CommandBeforeExecute */ DISPID(1003));
    TAutoArgs<2> _args;
    _args[1] = Command /*[VT_VARIANT:0]*/;
    _args[2] = (LPDISPATCH)(Owc10_xp::ByRef*)Cancel /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall CommandExecute(VARIANT Command, VARIANT_BOOL Succeeded)
  {
    _TDispID _dispid(/* CommandExecute */ DISPID(1004));
    TAutoArgs<2> _args;
    _args[1] = Command /*[VT_VARIANT:0]*/;
    _args[2] = Succeeded /*[VT_BOOL:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall BeforeContextMenu(long x, long y, Owc10_xp::ByRef* Menu, 
                                                    Owc10_xp::ByRef* Cancel)
  {
    _TDispID _dispid(/* BeforeContextMenu */ DISPID(1011));
    TAutoArgs<4> _args;
    _args[1] = x /*[VT_I4:0]*/;
    _args[2] = y /*[VT_I4:0]*/;
    _args[3] = (LPDISPATCH)(Owc10_xp::ByRef*)Menu /*[VT_USERDEFINED:1]*/;
    _args[4] = (LPDISPATCH)(Owc10_xp::ByRef*)Cancel /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall BeforeRender(Owc10_xp::ChChartDraw* drawObject/*[in]*/, 
                                               LPDISPATCH chartObject/*[in]*/, 
                                               Owc10_xp::ByRef* Cancel/*[in]*/)
  {
    _TDispID _dispid(/* BeforeRender */ DISPID(5111));
    TAutoArgs<3> _args;
    _args[1] = (LPDISPATCH)(Owc10_xp::ChChartDraw*)drawObject /*[VT_USERDEFINED:1]*/;
    _args[2] = chartObject /*[VT_DISPATCH:0]*/;
    _args[3] = (LPDISPATCH)(Owc10_xp::ByRef*)Cancel /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall AfterRender(Owc10_xp::ChChartDraw* drawObject/*[in]*/, 
                                              LPDISPATCH chartObject/*[in]*/)
  {
    _TDispID _dispid(/* AfterRender */ DISPID(5112));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Owc10_xp::ChChartDraw*)drawObject /*[VT_USERDEFINED:1]*/;
    _args[2] = chartObject /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall AfterFinalRender(Owc10_xp::ChChartDraw* drawObject/*[in]*/)
  {
    _TDispID _dispid(/* AfterFinalRender */ DISPID(5113));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Owc10_xp::ChChartDraw*)drawObject /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall AfterLayout(Owc10_xp::ChChartDraw* drawObject/*[in]*/)
  {
    _TDispID _dispid(/* AfterLayout */ DISPID(5114));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Owc10_xp::ChChartDraw*)drawObject /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall ViewChange()
  {
    _TDispID _dispid(/* ViewChange */ DISPID(5119));
    OleProcedure(_dispid);
  }


};
// *********************************************************************//
// Interface: ByRef
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0B817E8E-5A5A-11D3-BE88-0050041DB15A}
// *********************************************************************//
interface ByRef  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Value(VARIANT* Value/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Value(VARIANT Value/*[in]*/) = 0; // [0]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT __fastcall get_Value(void)
  {
    VARIANT Value;
    OLECHECK(this->get_Value((VARIANT*)&Value));
    return Value;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ChChartDraw
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {278585C3-D74B-4E30-ACEB-77D4777639E6}
// *********************************************************************//
interface ChChartDraw  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Interior(Owc10_xp::ChInterior** ppinterior/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Border(Owc10_xp::ChBorder** ppline/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Font(Owc10_xp::ChFont** ppfont/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Line(Owc10_xp::ChLine** ppline/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DrawType(Owc10_xp::ChartDrawModesEnum* pdrawmodesenum/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_hDC(long* phdc/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE BeginObject(long id/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE EndObject(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE DrawLine(long x0/*[in]*/, long y0/*[in]*/, long x1/*[in]*/, 
                                             long y1/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE DrawRectangle(long Left/*[in]*/, long Top/*[in]*/, 
                                                  long Right/*[in]*/, long Bottom/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE DrawEllipse(long Left/*[in]*/, long Top/*[in]*/, 
                                                long Right/*[in]*/, long Bottom/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE DrawText(BSTR bstrText/*[in]*/, long Left/*[in]*/, 
                                             long Top/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE DrawPolyLine(VARIANT xValues/*[in]*/, VARIANT yValues/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE DrawPolygon(VARIANT xValues/*[in]*/, VARIANT yValues/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE TextWidth(BSTR Text/*[in]*/, VARIANT* Width/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE TextHeight(BSTR Text/*[in]*/, VARIANT* Height/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::ChInterior* __fastcall get_Interior(void)
  {
    Owc10_xp::ChInterior* ppinterior;
    OLECHECK(this->get_Interior((Owc10_xp::ChInterior**)&ppinterior));
    return ppinterior;
  }

  Owc10_xp::ChBorder* __fastcall get_Border(void)
  {
    Owc10_xp::ChBorder* ppline;
    OLECHECK(this->get_Border((Owc10_xp::ChBorder**)&ppline));
    return ppline;
  }

  Owc10_xp::ChFont* __fastcall get_Font(void)
  {
    Owc10_xp::ChFont* ppfont;
    OLECHECK(this->get_Font((Owc10_xp::ChFont**)&ppfont));
    return ppfont;
  }

  Owc10_xp::ChLine* __fastcall get_Line(void)
  {
    Owc10_xp::ChLine* ppline;
    OLECHECK(this->get_Line((Owc10_xp::ChLine**)&ppline));
    return ppline;
  }

  Owc10_xp::ChartDrawModesEnum __fastcall get_DrawType(void)
  {
    Owc10_xp::ChartDrawModesEnum pdrawmodesenum;
    OLECHECK(this->get_DrawType((Owc10_xp::ChartDrawModesEnum*)&pdrawmodesenum));
    return pdrawmodesenum;
  }

  long __fastcall get_hDC(void)
  {
    long phdc;
    OLECHECK(this->get_hDC((long*)&phdc));
    return phdc;
  }

  VARIANT __fastcall TextWidth(BSTR Text/*[in]*/)
  {
    VARIANT Width;
    OLECHECK(this->TextWidth(Text, (VARIANT*)&Width));
    return Width;
  }

  VARIANT __fastcall TextHeight(BSTR Text/*[in]*/)
  {
    VARIANT Height;
    OLECHECK(this->TextHeight(Text, (VARIANT*)&Height));
    return Height;
  }


  __property   Owc10_xp::ChInterior* Interior = {read = get_Interior};
  __property   Owc10_xp::ChBorder* Border = {read = get_Border};
  __property   Owc10_xp::ChFont* Font = {read = get_Font};
  __property   Owc10_xp::ChLine* Line = {read = get_Line};
  __property   Owc10_xp::ChartDrawModesEnum DrawType = {read = get_DrawType};
  __property   long            hDC = {read = get_hDC};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ChInterior
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {56C833A6-3E1C-11D3-831A-00C04F991C70}
// *********************************************************************//
interface ChInterior  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Color(VARIANT* Color/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Color(VARIANT Color/*[in]*/) = 0; // [1610743808]
  virtual HRESULT STDMETHODCALLTYPE get_DefaultColor(VARIANT* Color/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_BackColor(VARIANT* BackColor/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_BackColor(VARIANT BackColor/*[in]*/) = 0; // [1610743811]
  virtual HRESULT STDMETHODCALLTYPE get_Pattern(Owc10_xp::ChartPatternTypeEnum* pwcpt/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_FillType(Owc10_xp::ChartFillTypeEnum* pwcft/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_PresetGradientType(Owc10_xp::ChartPresetGradientTypeEnum* pwcpt/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_GradientStyle(Owc10_xp::ChartGradientStyleEnum* pwcgs/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_GradientVariant(Owc10_xp::ChartGradientVariantEnum* pwcgv/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_GradientDegree(double* GradientDegree/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_PresetTexture(Owc10_xp::ChartPresetTextureEnum* pwcpt/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_TextureName(BSTR* pbstr/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_TextureFormat(Owc10_xp::ChartTextureFormatEnum* pwctf/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_TextureStackUnit(double* dStackUnit/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_TexturePlacement(Owc10_xp::ChartTexturePlacementEnum* wcctp/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SetPatterned(Owc10_xp::ChartPatternTypeEnum patternType/*[in]*/, 
                                                 VARIANT Color/*[in,opt]*/= TNoParam(), 
                                                 VARIANT BackColor/*[in,opt]*/= TNoParam()) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SetPresetGradient(Owc10_xp::ChartGradientStyleEnum GradientStyle/*[in]*/, 
                                                      Owc10_xp::ChartGradientVariantEnum gradientVarient/*[in]*/, 
                                                      Owc10_xp::ChartPresetGradientTypeEnum gradientPreset/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SetTextured(VARIANT textureFile/*[in]*/, 
                                                Owc10_xp::ChartTextureFormatEnum TextureFormat/*[in,def,opt]*/, 
                                                double stackUnit/*[in,def,opt]*/, 
                                                Owc10_xp::ChartTexturePlacementEnum TexturePlacement/*[in,def,opt]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SetOneColorGradient(Owc10_xp::ChartGradientStyleEnum GradientStyle/*[in]*/, 
                                                        Owc10_xp::ChartGradientVariantEnum GradientVariant/*[in]*/, 
                                                        double GradientDegree/*[in]*/, 
                                                        VARIANT Color/*[in,opt]*/= TNoParam()) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SetSolid(VARIANT Color/*[in,opt]*/= TNoParam()) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SetTwoColorGradient(Owc10_xp::ChartGradientStyleEnum GradientStyle/*[in]*/, 
                                                        Owc10_xp::ChartGradientVariantEnum GradientVariant/*[in]*/, 
                                                        VARIANT Color/*[in,opt]*/= TNoParam(), 
                                                        VARIANT BackColor/*[in,opt]*/= TNoParam()) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT __fastcall get_Color(void)
  {
    VARIANT Color;
    OLECHECK(this->get_Color((VARIANT*)&Color));
    return Color;
  }

  VARIANT __fastcall get_DefaultColor(void)
  {
    VARIANT Color;
    OLECHECK(this->get_DefaultColor((VARIANT*)&Color));
    return Color;
  }

  VARIANT __fastcall get_BackColor(void)
  {
    VARIANT BackColor;
    OLECHECK(this->get_BackColor((VARIANT*)&BackColor));
    return BackColor;
  }

  Owc10_xp::ChartPatternTypeEnum __fastcall get_Pattern(void)
  {
    Owc10_xp::ChartPatternTypeEnum pwcpt;
    OLECHECK(this->get_Pattern((Owc10_xp::ChartPatternTypeEnum*)&pwcpt));
    return pwcpt;
  }

  Owc10_xp::ChartFillTypeEnum __fastcall get_FillType(void)
  {
    Owc10_xp::ChartFillTypeEnum pwcft;
    OLECHECK(this->get_FillType((Owc10_xp::ChartFillTypeEnum*)&pwcft));
    return pwcft;
  }

  Owc10_xp::ChartPresetGradientTypeEnum __fastcall get_PresetGradientType(void)
  {
    Owc10_xp::ChartPresetGradientTypeEnum pwcpt;
    OLECHECK(this->get_PresetGradientType((Owc10_xp::ChartPresetGradientTypeEnum*)&pwcpt));
    return pwcpt;
  }

  Owc10_xp::ChartGradientStyleEnum __fastcall get_GradientStyle(void)
  {
    Owc10_xp::ChartGradientStyleEnum pwcgs;
    OLECHECK(this->get_GradientStyle((Owc10_xp::ChartGradientStyleEnum*)&pwcgs));
    return pwcgs;
  }

  Owc10_xp::ChartGradientVariantEnum __fastcall get_GradientVariant(void)
  {
    Owc10_xp::ChartGradientVariantEnum pwcgv;
    OLECHECK(this->get_GradientVariant((Owc10_xp::ChartGradientVariantEnum*)&pwcgv));
    return pwcgv;
  }

  double __fastcall get_GradientDegree(void)
  {
    double GradientDegree;
    OLECHECK(this->get_GradientDegree((double*)&GradientDegree));
    return GradientDegree;
  }

  Owc10_xp::ChartPresetTextureEnum __fastcall get_PresetTexture(void)
  {
    Owc10_xp::ChartPresetTextureEnum pwcpt;
    OLECHECK(this->get_PresetTexture((Owc10_xp::ChartPresetTextureEnum*)&pwcpt));
    return pwcpt;
  }

  BSTR __fastcall get_TextureName(void)
  {
    BSTR pbstr = 0;
    OLECHECK(this->get_TextureName((BSTR*)&pbstr));
    return pbstr;
  }

  Owc10_xp::ChartTextureFormatEnum __fastcall get_TextureFormat(void)
  {
    Owc10_xp::ChartTextureFormatEnum pwctf;
    OLECHECK(this->get_TextureFormat((Owc10_xp::ChartTextureFormatEnum*)&pwctf));
    return pwctf;
  }

  double __fastcall get_TextureStackUnit(void)
  {
    double dStackUnit;
    OLECHECK(this->get_TextureStackUnit((double*)&dStackUnit));
    return dStackUnit;
  }

  Owc10_xp::ChartTexturePlacementEnum __fastcall get_TexturePlacement(void)
  {
    Owc10_xp::ChartTexturePlacementEnum wcctp;
    OLECHECK(this->get_TexturePlacement((Owc10_xp::ChartTexturePlacementEnum*)&wcctp));
    return wcctp;
  }


  __property   Owc10_xp::ChartPatternTypeEnum Pattern = {read = get_Pattern};
  __property   Owc10_xp::ChartFillTypeEnum FillType = {read = get_FillType};
  __property   Owc10_xp::ChartPresetGradientTypeEnum PresetGradientType = {read = get_PresetGradientType};
  __property   Owc10_xp::ChartGradientStyleEnum GradientStyle = {read = get_GradientStyle};
  __property   Owc10_xp::ChartGradientVariantEnum GradientVariant = {read = get_GradientVariant};
  __property   double          GradientDegree = {read = get_GradientDegree};
  __property   Owc10_xp::ChartPresetTextureEnum PresetTexture = {read = get_PresetTexture};
  __property   BSTR            TextureName = {read = get_TextureName};
  __property   Owc10_xp::ChartTextureFormatEnum TextureFormat = {read = get_TextureFormat};
  __property   double          TextureStackUnit = {read = get_TextureStackUnit};
  __property   Owc10_xp::ChartTexturePlacementEnum TexturePlacement = {read = get_TexturePlacement};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ChBorder
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A72-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface ChBorder  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Color(VARIANT* Color/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Color(VARIANT Color/*[in]*/) = 0; // [1610743808]
  virtual HRESULT STDMETHODCALLTYPE get_DashStyle(Owc10_xp::ChartLineDashStyleEnum* pwclds/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_DashStyle(Owc10_xp::ChartLineDashStyleEnum pwclds/*[in]*/) = 0; // [1610743810]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [5201]
  virtual HRESULT STDMETHODCALLTYPE get_Weight(VARIANT* LineWeight/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Weight(Owc10_xp::LineWeightEnum LineWeight/*[in]*/) = 0; // [1610743813]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT __fastcall get_Color(void)
  {
    VARIANT Color;
    OLECHECK(this->get_Color((VARIANT*)&Color));
    return Color;
  }

  Owc10_xp::ChartLineDashStyleEnum __fastcall get_DashStyle(void)
  {
    Owc10_xp::ChartLineDashStyleEnum pwclds;
    OLECHECK(this->get_DashStyle((Owc10_xp::ChartLineDashStyleEnum*)&pwclds));
    return pwclds;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  VARIANT __fastcall get_Weight(void)
  {
    VARIANT LineWeight;
    OLECHECK(this->get_Weight((VARIANT*)&LineWeight));
    return LineWeight;
  }


  __property   Owc10_xp::ChartLineDashStyleEnum DashStyle = {read = get_DashStyle, write = set_DashStyle};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Owc10_xp::LineWeightEnum Weight = {write = set_Weight};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ChFont
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A86-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface ChFont  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Bold(VARIANT_BOOL* Bold/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE set_Bold(VARIANT_BOOL Bold/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_Color(VARIANT* Color/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Color(VARIANT Color/*[in]*/) = 0; // [1610743810]
  virtual HRESULT STDMETHODCALLTYPE get_Italic(VARIANT_BOOL* Italic/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_Italic(VARIANT_BOOL Italic/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR Name/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Size(long* Size/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE set_Size(long Size/*[in]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_Underline(Owc10_xp::UnderlineStyleEnum* UnderlineStyle/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE set_Underline(Owc10_xp::UnderlineStyleEnum UnderlineStyle/*[in]*/) = 0; // [5]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_Bold(void)
  {
    VARIANT_BOOL Bold;
    OLECHECK(this->get_Bold((VARIANT_BOOL*)&Bold));
    return Bold;
  }

  VARIANT __fastcall get_Color(void)
  {
    VARIANT Color;
    OLECHECK(this->get_Color((VARIANT*)&Color));
    return Color;
  }

  VARIANT_BOOL __fastcall get_Italic(void)
  {
    VARIANT_BOOL Italic;
    OLECHECK(this->get_Italic((VARIANT_BOOL*)&Italic));
    return Italic;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  long __fastcall get_Size(void)
  {
    long Size;
    OLECHECK(this->get_Size((long*)&Size));
    return Size;
  }

  Owc10_xp::UnderlineStyleEnum __fastcall get_Underline(void)
  {
    Owc10_xp::UnderlineStyleEnum UnderlineStyle;
    OLECHECK(this->get_Underline((Owc10_xp::UnderlineStyleEnum*)&UnderlineStyle));
    return UnderlineStyle;
  }


  __property   VARIANT_BOOL    Bold = {read = get_Bold, write = set_Bold};
  __property   VARIANT_BOOL    Italic = {read = get_Italic, write = set_Italic};
  __property   BSTR            Name = {read = get_Name};
  __property   long            Size = {read = get_Size, write = set_Size};
  __property   Owc10_xp::UnderlineStyleEnum Underline = {read = get_Underline, write = set_Underline};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ChLine
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {966CCC26-4469-11D3-8324-00C04F991C70}
// *********************************************************************//
interface ChLine  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Color(VARIANT* Color/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Color(VARIANT Color/*[in]*/) = 0; // [1610743808]
  virtual HRESULT STDMETHODCALLTYPE get_DashStyle(Owc10_xp::ChartLineDashStyleEnum* pwclds/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_DashStyle(Owc10_xp::ChartLineDashStyleEnum pwclds/*[in]*/) = 0; // [1610743810]
  virtual HRESULT STDMETHODCALLTYPE get_Weight(VARIANT* LineWeight/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Weight(Owc10_xp::LineWeightEnum LineWeight/*[in]*/) = 0; // [1610743812]
  virtual HRESULT STDMETHODCALLTYPE get_Miter(Owc10_xp::ChartLineMiterEnum* pwclm/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Miter(Owc10_xp::ChartLineMiterEnum pwclm/*[in]*/) = 0; // [1610743814]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT __fastcall get_Color(void)
  {
    VARIANT Color;
    OLECHECK(this->get_Color((VARIANT*)&Color));
    return Color;
  }

  Owc10_xp::ChartLineDashStyleEnum __fastcall get_DashStyle(void)
  {
    Owc10_xp::ChartLineDashStyleEnum pwclds;
    OLECHECK(this->get_DashStyle((Owc10_xp::ChartLineDashStyleEnum*)&pwclds));
    return pwclds;
  }

  VARIANT __fastcall get_Weight(void)
  {
    VARIANT LineWeight;
    OLECHECK(this->get_Weight((VARIANT*)&LineWeight));
    return LineWeight;
  }

  Owc10_xp::ChartLineMiterEnum __fastcall get_Miter(void)
  {
    Owc10_xp::ChartLineMiterEnum pwclm;
    OLECHECK(this->get_Miter((Owc10_xp::ChartLineMiterEnum*)&pwclm));
    return pwclm;
  }


  __property   Owc10_xp::ChartLineDashStyleEnum DashStyle = {read = get_DashStyle, write = set_DashStyle};
  __property   Owc10_xp::LineWeightEnum Weight = {write = set_Weight};
  __property   Owc10_xp::ChartLineMiterEnum Miter = {read = get_Miter, write = set_Miter};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ChChartSpace
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A82-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface ChChartSpace  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_ChartLayout(Owc10_xp::ChartChartLayoutEnum pChartChartLayout/*[in]*/) = 0; // [5000]
  virtual HRESULT STDMETHODCALLTYPE get_ChartLayout(Owc10_xp::ChartChartLayoutEnum* pChartChartLayout/*[out,retval]*/) = 0; // [5000]
  virtual HRESULT STDMETHODCALLTYPE set_ChartWrapCount(long plcount/*[in]*/) = 0; // [5001]
  virtual HRESULT STDMETHODCALLTYPE get_ChartWrapCount(long* plcount/*[out,retval]*/) = 0; // [5001]
  virtual HRESULT STDMETHODCALLTYPE set_EnableEvents(VARIANT_BOOL pfEnableEvents/*[in]*/) = 0; // [5016]
  virtual HRESULT STDMETHODCALLTYPE get_EnableEvents(VARIANT_BOOL* pfEnableEvents/*[out,retval]*/) = 0; // [5016]
  virtual HRESULT STDMETHODCALLTYPE set_HasChartSpaceLegend(VARIANT_BOOL pfHasChartSpaceLegend/*[in]*/) = 0; // [5002]
  virtual HRESULT STDMETHODCALLTYPE get_HasChartSpaceLegend(VARIANT_BOOL* pfHasChartSpaceLegend/*[out,retval]*/) = 0; // [5002]
  virtual HRESULT STDMETHODCALLTYPE get_MajorVersion(long* plMajorVersion/*[out,retval]*/) = 0; // [5026]
  virtual HRESULT STDMETHODCALLTYPE get_MinorVersion(BSTR* pbstrMinorVersion/*[out,retval]*/) = 0; // [5027]
  virtual HRESULT STDMETHODCALLTYPE get_BuildNumber(BSTR* pbstrBuildNumber/*[out,retval]*/) = 0; // [5028]
  virtual HRESULT STDMETHODCALLTYPE set_ScreenUpdating(VARIANT_BOOL pfUpdate/*[in]*/) = 0; // [5003]
  virtual HRESULT STDMETHODCALLTYPE get_ScreenUpdating(VARIANT_BOOL* pfUpdate/*[out,retval]*/) = 0; // [5003]
  virtual HRESULT STDMETHODCALLTYPE get_Border(Owc10_xp::ChBorder** ppline/*[out,retval]*/) = 0; // [5004]
  virtual HRESULT STDMETHODCALLTYPE get_Charts(Owc10_xp::ChCharts** ppcharts/*[out,retval]*/) = 0; // [5005]
  virtual HRESULT STDMETHODCALLTYPE _set_DataSource(Msdatasrc_xp::DataSource* ppidatasource/*[in]*/) = 0; // [5020]
  virtual HRESULT STDMETHODCALLTYPE set_DataSource(Msdatasrc_xp::DataSource* ppidatasource/*[in]*/) = 0; // [5020]
  virtual HRESULT STDMETHODCALLTYPE get_DataSource(Msdatasrc_xp::DataSource** ppidatasource/*[out,retval]*/) = 0; // [5020]
  virtual HRESULT STDMETHODCALLTYPE set_DataMember(Msdatasrc_xp::DataMember pdatamember/*[in]*/) = 0; // [5021]
  virtual HRESULT STDMETHODCALLTYPE get_DataMember(Msdatasrc_xp::DataMember* pdatamember/*[out,retval]*/) = 0; // [5021]
  virtual HRESULT STDMETHODCALLTYPE get_DataSourceType(Owc10_xp::ChartDataSourceTypeEnum* pocpDST/*[out,retval]*/) = 0; // [5023]
  virtual HRESULT STDMETHODCALLTYPE set_HasChartSpaceTitle(VARIANT_BOOL pfHasChartSpaceTitle/*[in]*/) = 0; // [5017]
  virtual HRESULT STDMETHODCALLTYPE get_HasChartSpaceTitle(VARIANT_BOOL* pfHasChartSpaceTitle/*[out,retval]*/) = 0; // [5017]
  virtual HRESULT STDMETHODCALLTYPE get_Interior(Owc10_xp::ChInterior** ppinterior/*[out,retval]*/) = 0; // [5007]
  virtual HRESULT STDMETHODCALLTYPE get_ChartSpaceLegend(Owc10_xp::ChLegend** pplegend/*[out,retval]*/) = 0; // [5008]
  virtual HRESULT STDMETHODCALLTYPE get_Selection(LPDISPATCH* ppobject/*[out,retval]*/) = 0; // [5029]
  virtual HRESULT STDMETHODCALLTYPE get_SelectionType(Owc10_xp::ChartSelectionsEnum* itype/*[out,retval]*/) = 0; // [5030]
  virtual HRESULT STDMETHODCALLTYPE set_HasSelectionMarks(Owc10_xp::ChartSelectionMarksEnum fMarks/*[in]*/) = 0; // [5031]
  virtual HRESULT STDMETHODCALLTYPE get_HasSelectionMarks(Owc10_xp::ChartSelectionMarksEnum* fMarks/*[out,retval]*/) = 0; // [5031]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayPropertyToolbox(VARIANT_BOOL fMenu/*[in]*/) = 0; // [4002]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayPropertyToolbox(VARIANT_BOOL* fMenu/*[out,retval]*/) = 0; // [4002]
  virtual HRESULT STDMETHODCALLTYPE get_ChartSpaceTitle(Owc10_xp::ChTitle** pptitle/*[out,retval]*/) = 0; // [5009]
  virtual HRESULT STDMETHODCALLTYPE get_Version(BSTR* pbstr/*[out,retval]*/) = 0; // [5010]
  virtual HRESULT STDMETHODCALLTYPE get_XMLData(BSTR* pbstrHTML/*[out,retval]*/) = 0; // [5022]
  virtual HRESULT STDMETHODCALLTYPE set_XMLData(BSTR pbstrHTML/*[in]*/) = 0; // [5022]
  virtual HRESULT STDMETHODCALLTYPE get_Constants(LPDISPATCH* ppIDispatchConstants/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_CanUndo(VARIANT_BOOL* pfCanUndo/*[out,retval]*/) = 0; // [5033]
  virtual HRESULT STDMETHODCALLTYPE get_AllowLayoutEvents(VARIANT_BOOL* pvbAllowLayoutEvents/*[out,retval]*/) = 0; // [5068]
  virtual HRESULT STDMETHODCALLTYPE set_AllowLayoutEvents(VARIANT_BOOL pvbAllowLayoutEvents/*[in]*/) = 0; // [5068]
  virtual HRESULT STDMETHODCALLTYPE get_AllowRenderEvents(VARIANT_BOOL* pvbAllowRenderEvents/*[out,retval]*/) = 0; // [5069]
  virtual HRESULT STDMETHODCALLTYPE set_AllowRenderEvents(VARIANT_BOOL pvbAllowRenderEvents/*[in]*/) = 0; // [5069]
  virtual HRESULT STDMETHODCALLTYPE get_AllowPointRenderEvents(VARIANT_BOOL* pvbAllowPointRenderEvents/*[out,retval]*/) = 0; // [5070]
  virtual HRESULT STDMETHODCALLTYPE set_AllowPointRenderEvents(VARIANT_BOOL pvbAllowPointRenderEvents/*[in]*/) = 0; // [5070]
  virtual HRESULT STDMETHODCALLTYPE BuildLitChart(void) = 0; // [5019]
  virtual HRESULT STDMETHODCALLTYPE Load(BSTR Filename/*[in]*/) = 0; // [5018]
  virtual HRESULT STDMETHODCALLTYPE Clear(void) = 0; // [5012]
  virtual HRESULT STDMETHODCALLTYPE ShowHelp(long iTopic/*[in]*/) = 0; // [5034]
  virtual HRESULT STDMETHODCALLTYPE ExportPicture(BSTR Filename/*[in,def,opt]*/, 
                                                  BSTR FilterName/*[in,def,opt]*/, 
                                                  long Width/*[in,def,opt]*/, 
                                                  long Height/*[in,def,opt]*/) = 0; // [5035]
  virtual HRESULT STDMETHODCALLTYPE Refresh(void) = 0; // [5014]
  virtual HRESULT STDMETHODCALLTYPE Select(void) = 0; // [5036]
  virtual HRESULT STDMETHODCALLTYPE BeginUndo(void) = 0; // [5037]
  virtual HRESULT STDMETHODCALLTYPE EndUndo(void) = 0; // [5038]
  virtual HRESULT STDMETHODCALLTYPE Undo(void) = 0; // [5039]
  virtual HRESULT STDMETHODCALLTYPE RangeFromPoint(int x/*[in]*/, int y/*[in]*/, 
                                                   LPDISPATCH* ppobject/*[out,retval]*/) = 0; // [5025]
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(VARIANT_BOOL fEnabled/*[in]*/) = 0; // [5040]
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(VARIANT_BOOL* fEnabled/*[out,retval]*/) = 0; // [5040]
  virtual HRESULT STDMETHODCALLTYPE get_RevisionNumber(BSTR* pbstrRevisionNumber/*[out,retval]*/) = 0; // [5042]
  virtual HRESULT STDMETHODCALLTYPE set_PrintQuality3D(double prquality/*[in]*/) = 0; // [5043]
  virtual HRESULT STDMETHODCALLTYPE get_PrintQuality3D(double* prquality/*[out,retval]*/) = 0; // [5043]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayScreenTips(VARIANT_BOOL pfDisplayScreenTips/*[in]*/) = 0; // [5062]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayScreenTips(VARIANT_BOOL* pfDisplayScreenTips/*[out,retval]*/) = 0; // [5062]
  virtual HRESULT STDMETHODCALLTYPE set_ConnectionString(BSTR ConnectionString/*[in]*/) = 0; // [5052]
  virtual HRESULT STDMETHODCALLTYPE get_ConnectionString(BSTR* ConnectionString/*[out,retval]*/) = 0; // [5052]
  virtual HRESULT STDMETHODCALLTYPE set_CommandText(BSTR CommandText/*[in]*/) = 0; // [5045]
  virtual HRESULT STDMETHODCALLTYPE get_CommandText(BSTR* CommandText/*[out,retval]*/) = 0; // [5045]
  virtual HRESULT STDMETHODCALLTYPE get_InternalPivotTable(LPDISPATCH* PivotTable/*[out,retval]*/) = 0; // [5046]
  virtual HRESULT STDMETHODCALLTYPE SetData(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/, 
                                            long DataSourceIndex/*[in]*/, 
                                            VARIANT DataReference/*[in,opt]*/= TNoParam()) = 0; // [5047]
  virtual HRESULT STDMETHODCALLTYPE set_HasSeriesByRows(VARIANT_BOOL HasSeriesByRows/*[in]*/) = 0; // [5048]
  virtual HRESULT STDMETHODCALLTYPE get_HasSeriesByRows(VARIANT_BOOL* HasSeriesByRows/*[out,retval]*/) = 0; // [5048]
  virtual HRESULT STDMETHODCALLTYPE set_PlotAllAggregates(Owc10_xp::ChartPlotAggregatesEnum PlotMultipleAggregates/*[in]*/) = 0; // [5049]
  virtual HRESULT STDMETHODCALLTYPE get_PlotAllAggregates(Owc10_xp::ChartPlotAggregatesEnum* PlotMultipleAggregates/*[out,retval]*/) = 0; // [5049]
  virtual HRESULT STDMETHODCALLTYPE set_HasMultipleCharts(VARIANT_BOOL HasMultiplePlots/*[in]*/) = 0; // [5050]
  virtual HRESULT STDMETHODCALLTYPE get_HasMultipleCharts(VARIANT_BOOL* HasMultiplePlots/*[out,retval]*/) = 0; // [5050]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayFieldList(VARIANT_BOOL DisplayFieldList/*[in]*/) = 0; // [4001]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayFieldList(VARIANT_BOOL* DisplayFieldList/*[out,retval]*/) = 0; // [4001]
  virtual HRESULT STDMETHODCALLTYPE set_HasPassiveAlerts(VARIANT_BOOL pfHasPassiveAlerts/*[in]*/) = 0; // [5044]
  virtual HRESULT STDMETHODCALLTYPE get_HasPassiveAlerts(VARIANT_BOOL* pfHasPassiveAlerts/*[out,retval]*/) = 0; // [5044]
  virtual HRESULT STDMETHODCALLTYPE DropZones(Owc10_xp::ChartDropZonesEnum dz/*[in]*/, 
                                              Owc10_xp::ChDropZone** ppwcdz/*[out,retval]*/) = 0; // [5054]
  virtual HRESULT STDMETHODCALLTYPE set_DataSourceName(BSTR pbstrDSName/*[in]*/) = 0; // [5055]
  virtual HRESULT STDMETHODCALLTYPE get_DataSourceName(BSTR* pbstrDSName/*[out,retval]*/) = 0; // [5055]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayFieldButtons(VARIANT_BOOL DisplayFieldButtons/*[in]*/) = 0; // [5056]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayFieldButtons(VARIANT_BOOL* DisplayFieldButtons/*[out,retval]*/) = 0; // [5056]
  virtual HRESULT STDMETHODCALLTYPE get_SelectionList(VARIANT* SelectionList/*[out,retval]*/) = 0; // [5057]
  virtual HRESULT STDMETHODCALLTYPE set_HasPlotDetails(VARIANT_BOOL pvbPlotDetails/*[in]*/) = 0; // [5058]
  virtual HRESULT STDMETHODCALLTYPE get_HasPlotDetails(VARIANT_BOOL* pvbPlotDetails/*[out,retval]*/) = 0; // [5058]
  virtual HRESULT STDMETHODCALLTYPE FieldListAddTo(LPUNKNOWN punk/*[in]*/, long lPos) = 0; // [5059]
  virtual HRESULT STDMETHODCALLTYPE set_AllowScreenTipEvents(VARIANT_BOOL pfAllowScreenTipEvents/*[in]*/) = 0; // [5061]
  virtual HRESULT STDMETHODCALLTYPE get_AllowScreenTipEvents(VARIANT_BOOL* pfAllowScreenTipEvents/*[out,retval]*/) = 0; // [5061]
  virtual HRESULT STDMETHODCALLTYPE get_Commands(Owc10_xp::OCCommands** Commands/*[out,retval]*/) = 0; // [5064]
  virtual HRESULT STDMETHODCALLTYPE set_AllowPropertyToolbox(VARIANT_BOOL fMenu/*[in]*/) = 0; // [5065]
  virtual HRESULT STDMETHODCALLTYPE get_AllowPropertyToolbox(VARIANT_BOOL* fMenu/*[out,retval]*/) = 0; // [5065]
  virtual HRESULT STDMETHODCALLTYPE get_AllowGrouping(VARIANT_BOOL* AllowGrouping/*[out,retval]*/) = 0; // [5066]
  virtual HRESULT STDMETHODCALLTYPE set_AllowGrouping(VARIANT_BOOL AllowGrouping/*[in]*/) = 0; // [5066]
  virtual HRESULT STDMETHODCALLTYPE get_AllowFiltering(VARIANT_BOOL* AllowFiltering/*[out,retval]*/) = 0; // [5067]
  virtual HRESULT STDMETHODCALLTYPE set_AllowFiltering(VARIANT_BOOL AllowFiltering/*[in]*/) = 0; // [5067]
  virtual HRESULT STDMETHODCALLTYPE get_Top(long* ptop/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Left(long* pleft/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Bottom(long* pbottom/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Right(long* pright/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_HasUnifiedScales(VARIANT_BOOL* HasUnifiedScales/*[out,retval]*/) = 0; // [5071]
  virtual HRESULT STDMETHODCALLTYPE set_HasUnifiedScales(VARIANT_BOOL HasUnifiedScales/*[in]*/) = 0; // [5071]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayToolbar(VARIANT_BOOL* DisplayToolbar/*[out,retval]*/) = 0; // [5072]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayToolbar(VARIANT_BOOL DisplayToolbar/*[in]*/) = 0; // [5072]
  virtual HRESULT STDMETHODCALLTYPE get_Toolbar(Mscomctllib_xp::IToolbar** Toolbar/*[out,retval]*/) = 0; // [5076]
  virtual HRESULT STDMETHODCALLTYPE get_ViewOnlyMode(VARIANT_BOOL* ViewOnlyMode/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE LocateDataSource(void) = 0; // [5073]
  virtual HRESULT STDMETHODCALLTYPE ShowContextMenu(long x/*[in]*/, long y/*[in]*/, 
                                                    VARIANT Menu/*[in]*/) = 0; // [5074]
  virtual HRESULT STDMETHODCALLTYPE GetPicture(BSTR FilterName/*[in,def,opt]*/, 
                                               long Width/*[in,def,opt]*/, 
                                               long Height/*[in,def,opt]*/, 
                                               VARIANT* pvarArray/*[out,retval]*/) = 0; // [5075]
  virtual HRESULT STDMETHODCALLTYPE SetSpreadsheetData(BSTR DataReference/*[in]*/, 
                                                       VARIANT_BOOL SeriesByRows/*[in,def,opt]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Repaint(void) = 0; // [5077]
  virtual HRESULT STDMETHODCALLTYPE get_IsDirty(VARIANT_BOOL* IsDirty/*[out,retval]*/) = 0; // [5078]
  virtual HRESULT STDMETHODCALLTYPE set_IsDirty(VARIANT_BOOL IsDirty/*[in]*/) = 0; // [5078]
  virtual HRESULT STDMETHODCALLTYPE get_International(VARIANT Index/*[in]*/, 
                                                      VARIANT* info/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_LanguageSettings(Owc10_xp::OWCLanguageSettings** langset/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [5201]
  virtual HRESULT STDMETHODCALLTYPE GetDataSourceIndex(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/, 
                                                       long* DataSourceIndex/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_HasRuntimeSelection(VARIANT_BOOL* pvb/*[out,retval]*/) = 0; // [5079]
  virtual HRESULT STDMETHODCALLTYPE set_HasRuntimeSelection(VARIANT_BOOL pvb/*[in]*/) = 0; // [5079]
  virtual HRESULT STDMETHODCALLTYPE ClearUndo(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayBranding(VARIANT_BOOL* DisplayBranding/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayBranding(VARIANT_BOOL DisplayBranding/*[in]*/) = 0; // [1610743927]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayOfficeLogo(VARIANT_BOOL* DisplayOfficeLogo/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayOfficeLogo(VARIANT_BOOL DisplayOfficeLogo/*[in]*/) = 0; // [1610743929]
  virtual HRESULT STDMETHODCALLTYPE OkToBindToControlByName(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::ChartChartLayoutEnum __fastcall get_ChartLayout(void)
  {
    Owc10_xp::ChartChartLayoutEnum pChartChartLayout;
    OLECHECK(this->get_ChartLayout((Owc10_xp::ChartChartLayoutEnum*)&pChartChartLayout));
    return pChartChartLayout;
  }

  long __fastcall get_ChartWrapCount(void)
  {
    long plcount;
    OLECHECK(this->get_ChartWrapCount((long*)&plcount));
    return plcount;
  }

  VARIANT_BOOL __fastcall get_EnableEvents(void)
  {
    VARIANT_BOOL pfEnableEvents;
    OLECHECK(this->get_EnableEvents((VARIANT_BOOL*)&pfEnableEvents));
    return pfEnableEvents;
  }

  VARIANT_BOOL __fastcall get_HasChartSpaceLegend(void)
  {
    VARIANT_BOOL pfHasChartSpaceLegend;
    OLECHECK(this->get_HasChartSpaceLegend((VARIANT_BOOL*)&pfHasChartSpaceLegend));
    return pfHasChartSpaceLegend;
  }

  long __fastcall get_MajorVersion(void)
  {
    long plMajorVersion;
    OLECHECK(this->get_MajorVersion((long*)&plMajorVersion));
    return plMajorVersion;
  }

  BSTR __fastcall get_MinorVersion(void)
  {
    BSTR pbstrMinorVersion = 0;
    OLECHECK(this->get_MinorVersion((BSTR*)&pbstrMinorVersion));
    return pbstrMinorVersion;
  }

  BSTR __fastcall get_BuildNumber(void)
  {
    BSTR pbstrBuildNumber = 0;
    OLECHECK(this->get_BuildNumber((BSTR*)&pbstrBuildNumber));
    return pbstrBuildNumber;
  }

  VARIANT_BOOL __fastcall get_ScreenUpdating(void)
  {
    VARIANT_BOOL pfUpdate;
    OLECHECK(this->get_ScreenUpdating((VARIANT_BOOL*)&pfUpdate));
    return pfUpdate;
  }

  Owc10_xp::ChBorder* __fastcall get_Border(void)
  {
    Owc10_xp::ChBorder* ppline;
    OLECHECK(this->get_Border((Owc10_xp::ChBorder**)&ppline));
    return ppline;
  }

  Owc10_xp::ChCharts* __fastcall get_Charts(void)
  {
    Owc10_xp::ChCharts* ppcharts;
    OLECHECK(this->get_Charts((Owc10_xp::ChCharts**)&ppcharts));
    return ppcharts;
  }

  Msdatasrc_xp::DataSource* __fastcall get_DataSource(void)
  {
    Msdatasrc_xp::DataSource* ppidatasource;
    OLECHECK(this->get_DataSource((Msdatasrc_xp::DataSource**)&ppidatasource));
    return ppidatasource;
  }

  Msdatasrc_xp::DataMember __fastcall get_DataMember(void)
  {
    Msdatasrc_xp::DataMember pdatamember;
    OLECHECK(this->get_DataMember((Msdatasrc_xp::DataMember*)&pdatamember));
    return pdatamember;
  }

  Owc10_xp::ChartDataSourceTypeEnum __fastcall get_DataSourceType(void)
  {
    Owc10_xp::ChartDataSourceTypeEnum pocpDST;
    OLECHECK(this->get_DataSourceType((Owc10_xp::ChartDataSourceTypeEnum*)&pocpDST));
    return pocpDST;
  }

  VARIANT_BOOL __fastcall get_HasChartSpaceTitle(void)
  {
    VARIANT_BOOL pfHasChartSpaceTitle;
    OLECHECK(this->get_HasChartSpaceTitle((VARIANT_BOOL*)&pfHasChartSpaceTitle));
    return pfHasChartSpaceTitle;
  }

  Owc10_xp::ChInterior* __fastcall get_Interior(void)
  {
    Owc10_xp::ChInterior* ppinterior;
    OLECHECK(this->get_Interior((Owc10_xp::ChInterior**)&ppinterior));
    return ppinterior;
  }

  Owc10_xp::ChLegend* __fastcall get_ChartSpaceLegend(void)
  {
    Owc10_xp::ChLegend* pplegend;
    OLECHECK(this->get_ChartSpaceLegend((Owc10_xp::ChLegend**)&pplegend));
    return pplegend;
  }

  LPDISPATCH __fastcall get_Selection(void)
  {
    LPDISPATCH ppobject;
    OLECHECK(this->get_Selection((LPDISPATCH*)&ppobject));
    return ppobject;
  }

  Owc10_xp::ChartSelectionsEnum __fastcall get_SelectionType(void)
  {
    Owc10_xp::ChartSelectionsEnum itype;
    OLECHECK(this->get_SelectionType((Owc10_xp::ChartSelectionsEnum*)&itype));
    return itype;
  }

  Owc10_xp::ChartSelectionMarksEnum __fastcall get_HasSelectionMarks(void)
  {
    Owc10_xp::ChartSelectionMarksEnum fMarks;
    OLECHECK(this->get_HasSelectionMarks((Owc10_xp::ChartSelectionMarksEnum*)&fMarks));
    return fMarks;
  }

  VARIANT_BOOL __fastcall get_DisplayPropertyToolbox(void)
  {
    VARIANT_BOOL fMenu;
    OLECHECK(this->get_DisplayPropertyToolbox((VARIANT_BOOL*)&fMenu));
    return fMenu;
  }

  Owc10_xp::ChTitle* __fastcall get_ChartSpaceTitle(void)
  {
    Owc10_xp::ChTitle* pptitle;
    OLECHECK(this->get_ChartSpaceTitle((Owc10_xp::ChTitle**)&pptitle));
    return pptitle;
  }

  BSTR __fastcall get_Version(void)
  {
    BSTR pbstr = 0;
    OLECHECK(this->get_Version((BSTR*)&pbstr));
    return pbstr;
  }

  BSTR __fastcall get_XMLData(void)
  {
    BSTR pbstrHTML = 0;
    OLECHECK(this->get_XMLData((BSTR*)&pbstrHTML));
    return pbstrHTML;
  }

  LPDISPATCH __fastcall get_Constants(void)
  {
    LPDISPATCH ppIDispatchConstants;
    OLECHECK(this->get_Constants((LPDISPATCH*)&ppIDispatchConstants));
    return ppIDispatchConstants;
  }

  VARIANT_BOOL __fastcall get_CanUndo(void)
  {
    VARIANT_BOOL pfCanUndo;
    OLECHECK(this->get_CanUndo((VARIANT_BOOL*)&pfCanUndo));
    return pfCanUndo;
  }

  VARIANT_BOOL __fastcall get_AllowLayoutEvents(void)
  {
    VARIANT_BOOL pvbAllowLayoutEvents;
    OLECHECK(this->get_AllowLayoutEvents((VARIANT_BOOL*)&pvbAllowLayoutEvents));
    return pvbAllowLayoutEvents;
  }

  VARIANT_BOOL __fastcall get_AllowRenderEvents(void)
  {
    VARIANT_BOOL pvbAllowRenderEvents;
    OLECHECK(this->get_AllowRenderEvents((VARIANT_BOOL*)&pvbAllowRenderEvents));
    return pvbAllowRenderEvents;
  }

  VARIANT_BOOL __fastcall get_AllowPointRenderEvents(void)
  {
    VARIANT_BOOL pvbAllowPointRenderEvents;
    OLECHECK(this->get_AllowPointRenderEvents((VARIANT_BOOL*)&pvbAllowPointRenderEvents));
    return pvbAllowPointRenderEvents;
  }

  LPDISPATCH __fastcall RangeFromPoint(int x/*[in]*/, int y/*[in]*/)
  {
    LPDISPATCH ppobject;
    OLECHECK(this->RangeFromPoint(x, y, (LPDISPATCH*)&ppobject));
    return ppobject;
  }

  VARIANT_BOOL __fastcall get_Enabled(void)
  {
    VARIANT_BOOL fEnabled;
    OLECHECK(this->get_Enabled((VARIANT_BOOL*)&fEnabled));
    return fEnabled;
  }

  BSTR __fastcall get_RevisionNumber(void)
  {
    BSTR pbstrRevisionNumber = 0;
    OLECHECK(this->get_RevisionNumber((BSTR*)&pbstrRevisionNumber));
    return pbstrRevisionNumber;
  }

  double __fastcall get_PrintQuality3D(void)
  {
    double prquality;
    OLECHECK(this->get_PrintQuality3D((double*)&prquality));
    return prquality;
  }

  VARIANT_BOOL __fastcall get_DisplayScreenTips(void)
  {
    VARIANT_BOOL pfDisplayScreenTips;
    OLECHECK(this->get_DisplayScreenTips((VARIANT_BOOL*)&pfDisplayScreenTips));
    return pfDisplayScreenTips;
  }

  BSTR __fastcall get_ConnectionString(void)
  {
    BSTR ConnectionString = 0;
    OLECHECK(this->get_ConnectionString((BSTR*)&ConnectionString));
    return ConnectionString;
  }

  BSTR __fastcall get_CommandText(void)
  {
    BSTR CommandText = 0;
    OLECHECK(this->get_CommandText((BSTR*)&CommandText));
    return CommandText;
  }

  LPDISPATCH __fastcall get_InternalPivotTable(void)
  {
    LPDISPATCH PivotTable;
    OLECHECK(this->get_InternalPivotTable((LPDISPATCH*)&PivotTable));
    return PivotTable;
  }

  VARIANT_BOOL __fastcall get_HasSeriesByRows(void)
  {
    VARIANT_BOOL HasSeriesByRows;
    OLECHECK(this->get_HasSeriesByRows((VARIANT_BOOL*)&HasSeriesByRows));
    return HasSeriesByRows;
  }

  Owc10_xp::ChartPlotAggregatesEnum __fastcall get_PlotAllAggregates(void)
  {
    Owc10_xp::ChartPlotAggregatesEnum PlotMultipleAggregates;
    OLECHECK(this->get_PlotAllAggregates((Owc10_xp::ChartPlotAggregatesEnum*)&PlotMultipleAggregates));
    return PlotMultipleAggregates;
  }

  VARIANT_BOOL __fastcall get_HasMultipleCharts(void)
  {
    VARIANT_BOOL HasMultiplePlots;
    OLECHECK(this->get_HasMultipleCharts((VARIANT_BOOL*)&HasMultiplePlots));
    return HasMultiplePlots;
  }

  VARIANT_BOOL __fastcall get_DisplayFieldList(void)
  {
    VARIANT_BOOL DisplayFieldList;
    OLECHECK(this->get_DisplayFieldList((VARIANT_BOOL*)&DisplayFieldList));
    return DisplayFieldList;
  }

  VARIANT_BOOL __fastcall get_HasPassiveAlerts(void)
  {
    VARIANT_BOOL pfHasPassiveAlerts;
    OLECHECK(this->get_HasPassiveAlerts((VARIANT_BOOL*)&pfHasPassiveAlerts));
    return pfHasPassiveAlerts;
  }

  Owc10_xp::ChDropZone* __fastcall DropZones(Owc10_xp::ChartDropZonesEnum dz/*[in]*/)
  {
    Owc10_xp::ChDropZone* ppwcdz;
    OLECHECK(this->DropZones(dz, (Owc10_xp::ChDropZone**)&ppwcdz));
    return ppwcdz;
  }

  BSTR __fastcall get_DataSourceName(void)
  {
    BSTR pbstrDSName = 0;
    OLECHECK(this->get_DataSourceName((BSTR*)&pbstrDSName));
    return pbstrDSName;
  }

  VARIANT_BOOL __fastcall get_DisplayFieldButtons(void)
  {
    VARIANT_BOOL DisplayFieldButtons;
    OLECHECK(this->get_DisplayFieldButtons((VARIANT_BOOL*)&DisplayFieldButtons));
    return DisplayFieldButtons;
  }

  VARIANT __fastcall get_SelectionList(void)
  {
    VARIANT SelectionList;
    OLECHECK(this->get_SelectionList((VARIANT*)&SelectionList));
    return SelectionList;
  }

  VARIANT_BOOL __fastcall get_HasPlotDetails(void)
  {
    VARIANT_BOOL pvbPlotDetails;
    OLECHECK(this->get_HasPlotDetails((VARIANT_BOOL*)&pvbPlotDetails));
    return pvbPlotDetails;
  }

  VARIANT_BOOL __fastcall get_AllowScreenTipEvents(void)
  {
    VARIANT_BOOL pfAllowScreenTipEvents;
    OLECHECK(this->get_AllowScreenTipEvents((VARIANT_BOOL*)&pfAllowScreenTipEvents));
    return pfAllowScreenTipEvents;
  }

  Owc10_xp::OCCommands* __fastcall get_Commands(void)
  {
    Owc10_xp::OCCommands* Commands;
    OLECHECK(this->get_Commands((Owc10_xp::OCCommands**)&Commands));
    return Commands;
  }

  VARIANT_BOOL __fastcall get_AllowPropertyToolbox(void)
  {
    VARIANT_BOOL fMenu;
    OLECHECK(this->get_AllowPropertyToolbox((VARIANT_BOOL*)&fMenu));
    return fMenu;
  }

  VARIANT_BOOL __fastcall get_AllowGrouping(void)
  {
    VARIANT_BOOL AllowGrouping;
    OLECHECK(this->get_AllowGrouping((VARIANT_BOOL*)&AllowGrouping));
    return AllowGrouping;
  }

  VARIANT_BOOL __fastcall get_AllowFiltering(void)
  {
    VARIANT_BOOL AllowFiltering;
    OLECHECK(this->get_AllowFiltering((VARIANT_BOOL*)&AllowFiltering));
    return AllowFiltering;
  }

  long __fastcall get_Top(void)
  {
    long ptop;
    OLECHECK(this->get_Top((long*)&ptop));
    return ptop;
  }

  long __fastcall get_Left(void)
  {
    long pleft;
    OLECHECK(this->get_Left((long*)&pleft));
    return pleft;
  }

  long __fastcall get_Bottom(void)
  {
    long pbottom;
    OLECHECK(this->get_Bottom((long*)&pbottom));
    return pbottom;
  }

  long __fastcall get_Right(void)
  {
    long pright;
    OLECHECK(this->get_Right((long*)&pright));
    return pright;
  }

  VARIANT_BOOL __fastcall get_HasUnifiedScales(void)
  {
    VARIANT_BOOL HasUnifiedScales;
    OLECHECK(this->get_HasUnifiedScales((VARIANT_BOOL*)&HasUnifiedScales));
    return HasUnifiedScales;
  }

  VARIANT_BOOL __fastcall get_DisplayToolbar(void)
  {
    VARIANT_BOOL DisplayToolbar;
    OLECHECK(this->get_DisplayToolbar((VARIANT_BOOL*)&DisplayToolbar));
    return DisplayToolbar;
  }

  Mscomctllib_xp::IToolbar* __fastcall get_Toolbar(void)
  {
    Mscomctllib_xp::IToolbar* Toolbar;
    OLECHECK(this->get_Toolbar((Mscomctllib_xp::IToolbar**)&Toolbar));
    return Toolbar;
  }

  VARIANT_BOOL __fastcall get_ViewOnlyMode(void)
  {
    VARIANT_BOOL ViewOnlyMode;
    OLECHECK(this->get_ViewOnlyMode((VARIANT_BOOL*)&ViewOnlyMode));
    return ViewOnlyMode;
  }

  VARIANT __fastcall GetPicture(BSTR FilterName/*[in,def,opt]*/, long Width/*[in,def,opt]*/, 
                                long Height/*[in,def,opt]*/)
  {
    VARIANT pvarArray;
    OLECHECK(this->GetPicture(FilterName, Width, Height, (VARIANT*)&pvarArray));
    return pvarArray;
  }

  VARIANT_BOOL __fastcall get_IsDirty(void)
  {
    VARIANT_BOOL IsDirty;
    OLECHECK(this->get_IsDirty((VARIANT_BOOL*)&IsDirty));
    return IsDirty;
  }

  VARIANT __fastcall get_International(VARIANT Index/*[in]*/)
  {
    VARIANT info;
    OLECHECK(this->get_International(Index, (VARIANT*)&info));
    return info;
  }

  Owc10_xp::OWCLanguageSettings* __fastcall get_LanguageSettings(void)
  {
    Owc10_xp::OWCLanguageSettings* langset;
    OLECHECK(this->get_LanguageSettings((Owc10_xp::OWCLanguageSettings**)&langset));
    return langset;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  long __fastcall GetDataSourceIndex(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/)
  {
    long DataSourceIndex;
    OLECHECK(this->GetDataSourceIndex(Dimension, (long*)&DataSourceIndex));
    return DataSourceIndex;
  }

  VARIANT_BOOL __fastcall get_HasRuntimeSelection(void)
  {
    VARIANT_BOOL pvb;
    OLECHECK(this->get_HasRuntimeSelection((VARIANT_BOOL*)&pvb));
    return pvb;
  }

  VARIANT_BOOL __fastcall get_DisplayBranding(void)
  {
    VARIANT_BOOL DisplayBranding;
    OLECHECK(this->get_DisplayBranding((VARIANT_BOOL*)&DisplayBranding));
    return DisplayBranding;
  }

  VARIANT_BOOL __fastcall get_DisplayOfficeLogo(void)
  {
    VARIANT_BOOL DisplayOfficeLogo;
    OLECHECK(this->get_DisplayOfficeLogo((VARIANT_BOOL*)&DisplayOfficeLogo));
    return DisplayOfficeLogo;
  }

  Owc10_xp::ChartSelectionsEnum __fastcall get_ObjectType(void)
  {
    Owc10_xp::ChartSelectionsEnum pcs;
    OLECHECK(this->get_ObjectType((Owc10_xp::ChartSelectionsEnum*)&pcs));
    return pcs;
  }


  __property   Owc10_xp::ChartChartLayoutEnum ChartLayout = {read = get_ChartLayout, write = set_ChartLayout};
  __property   long            ChartWrapCount = {read = get_ChartWrapCount, write = set_ChartWrapCount};
  __property   VARIANT_BOOL    EnableEvents = {read = get_EnableEvents, write = set_EnableEvents};
  __property   VARIANT_BOOL    HasChartSpaceLegend = {read = get_HasChartSpaceLegend, write = set_HasChartSpaceLegend};
  __property   long            MajorVersion = {read = get_MajorVersion};
  __property   BSTR            MinorVersion = {read = get_MinorVersion};
  __property   BSTR            BuildNumber = {read = get_BuildNumber};
  __property   VARIANT_BOOL    ScreenUpdating = {read = get_ScreenUpdating, write = set_ScreenUpdating};
  __property   Owc10_xp::ChBorder* Border = {read = get_Border};
  __property   Owc10_xp::ChCharts* Charts = {read = get_Charts};
  __property   Msdatasrc_xp::DataSource* DataSource = {read = get_DataSource, write = set_DataSource};
  __property   Msdatasrc_xp::DataMember DataMember = {read = get_DataMember, write = set_DataMember};
  __property   Owc10_xp::ChartDataSourceTypeEnum DataSourceType = {read = get_DataSourceType};
  __property   VARIANT_BOOL    HasChartSpaceTitle = {read = get_HasChartSpaceTitle, write = set_HasChartSpaceTitle};
  __property   Owc10_xp::ChInterior* Interior = {read = get_Interior};
  __property   Owc10_xp::ChLegend* ChartSpaceLegend = {read = get_ChartSpaceLegend};
  __property   LPDISPATCH      Selection = {read = get_Selection};
  __property   Owc10_xp::ChartSelectionsEnum SelectionType = {read = get_SelectionType};
  __property   Owc10_xp::ChartSelectionMarksEnum HasSelectionMarks = {read = get_HasSelectionMarks, write = set_HasSelectionMarks};
  __property   VARIANT_BOOL    DisplayPropertyToolbox = {read = get_DisplayPropertyToolbox, write = set_DisplayPropertyToolbox};
  __property   Owc10_xp::ChTitle* ChartSpaceTitle = {read = get_ChartSpaceTitle};
  __property   BSTR            Version = {read = get_Version};
  __property   BSTR            XMLData = {read = get_XMLData};
  __property   LPDISPATCH      Constants = {read = get_Constants};
  __property   VARIANT_BOOL    CanUndo = {read = get_CanUndo};
  __property   VARIANT_BOOL    AllowLayoutEvents = {read = get_AllowLayoutEvents, write = set_AllowLayoutEvents};
  __property   VARIANT_BOOL    AllowRenderEvents = {read = get_AllowRenderEvents, write = set_AllowRenderEvents};
  __property   VARIANT_BOOL    AllowPointRenderEvents = {read = get_AllowPointRenderEvents, write = set_AllowPointRenderEvents};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   BSTR            RevisionNumber = {read = get_RevisionNumber};
  __property   double          PrintQuality3D = {read = get_PrintQuality3D, write = set_PrintQuality3D};
  __property   VARIANT_BOOL    DisplayScreenTips = {read = get_DisplayScreenTips, write = set_DisplayScreenTips};
  __property   BSTR            ConnectionString = {read = get_ConnectionString, write = set_ConnectionString};
  __property   BSTR            CommandText = {read = get_CommandText, write = set_CommandText};
  __property   LPDISPATCH      InternalPivotTable = {read = get_InternalPivotTable};
  __property   VARIANT_BOOL    HasSeriesByRows = {read = get_HasSeriesByRows, write = set_HasSeriesByRows};
  __property   Owc10_xp::ChartPlotAggregatesEnum PlotAllAggregates = {read = get_PlotAllAggregates, write = set_PlotAllAggregates};
  __property   VARIANT_BOOL    HasMultipleCharts = {read = get_HasMultipleCharts, write = set_HasMultipleCharts};
  __property   VARIANT_BOOL    DisplayFieldList = {read = get_DisplayFieldList, write = set_DisplayFieldList};
  __property   VARIANT_BOOL    HasPassiveAlerts = {read = get_HasPassiveAlerts, write = set_HasPassiveAlerts};
  __property   BSTR            DataSourceName = {read = get_DataSourceName, write = set_DataSourceName};
  __property   VARIANT_BOOL    DisplayFieldButtons = {read = get_DisplayFieldButtons, write = set_DisplayFieldButtons};
  __property   VARIANT_BOOL    HasPlotDetails = {read = get_HasPlotDetails, write = set_HasPlotDetails};
  __property   VARIANT_BOOL    AllowScreenTipEvents = {read = get_AllowScreenTipEvents, write = set_AllowScreenTipEvents};
  __property   Owc10_xp::OCCommands* Commands = {read = get_Commands};
  __property   VARIANT_BOOL    AllowPropertyToolbox = {read = get_AllowPropertyToolbox, write = set_AllowPropertyToolbox};
  __property   VARIANT_BOOL    AllowGrouping = {read = get_AllowGrouping, write = set_AllowGrouping};
  __property   VARIANT_BOOL    AllowFiltering = {read = get_AllowFiltering, write = set_AllowFiltering};
  __property   long            Top = {read = get_Top};
  __property   long            Left = {read = get_Left};
  __property   long            Bottom = {read = get_Bottom};
  __property   long            Right = {read = get_Right};
  __property   VARIANT_BOOL    HasUnifiedScales = {read = get_HasUnifiedScales, write = set_HasUnifiedScales};
  __property   VARIANT_BOOL    DisplayToolbar = {read = get_DisplayToolbar, write = set_DisplayToolbar};
  __property   Mscomctllib_xp::IToolbar* Toolbar = {read = get_Toolbar};
  __property   VARIANT_BOOL    ViewOnlyMode = {read = get_ViewOnlyMode};
  __property   VARIANT_BOOL    IsDirty = {read = get_IsDirty, write = set_IsDirty};
  __property   Owc10_xp::OWCLanguageSettings* LanguageSettings = {read = get_LanguageSettings};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   VARIANT_BOOL    HasRuntimeSelection = {read = get_HasRuntimeSelection, write = set_HasRuntimeSelection};
  __property   VARIANT_BOOL    DisplayBranding = {read = get_DisplayBranding, write = set_DisplayBranding};
  __property   VARIANT_BOOL    DisplayOfficeLogo = {read = get_DisplayOfficeLogo, write = set_DisplayOfficeLogo};
  __property   Owc10_xp::ChartSelectionsEnum ObjectType = {read = get_ObjectType};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ChCharts
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AE4-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface ChCharts  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* pCount/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* ppiwebchart/*[out,retval]*/) = 0; // [5201]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE Add(long Index/*[in,def,opt]*/, 
                                        Owc10_xp::ChChart** ppchart/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Delete(VARIANT Index/*[in]*/) = 0; // [5202]
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Owc10_xp::ChChart** ppchart/*[out,retval]*/) = 0; // [0]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long pCount;
    OLECHECK(this->get_Count((long*)&pCount));
    return pCount;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH ppiwebchart;
    OLECHECK(this->get_Parent((LPDISPATCH*)&ppiwebchart));
    return ppiwebchart;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunk));
    return ppunk;
  }

  Owc10_xp::ChChart* __fastcall Add(long Index/*[in,def,opt]*/)
  {
    Owc10_xp::ChChart* ppchart;
    OLECHECK(this->Add(Index, (Owc10_xp::ChChart**)&ppchart));
    return ppchart;
  }

  Owc10_xp::ChChart* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Owc10_xp::ChChart* ppchart;
    OLECHECK(this->get_Item(Index, (Owc10_xp::ChChart**)&ppchart));
    return ppchart;
  }


  __property   long            Count = {read = get_Count};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ChChart
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AE5-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface ChChart  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Axes(Owc10_xp::ChAxes** ppaxes/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Border(Owc10_xp::ChBorder** ppline/*[out,retval]*/) = 0; // [5004]
  virtual HRESULT STDMETHODCALLTYPE set_HasLegend(VARIANT_BOOL pfHasLegend/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_HasLegend(VARIANT_BOOL* pfHasLegend/*[out,retval]*/) = 0; // [1610743810]
  virtual HRESULT STDMETHODCALLTYPE set_HasTitle(VARIANT_BOOL pfHasTitle/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_HasTitle(VARIANT_BOOL* pfHasTitle/*[out,retval]*/) = 0; // [1610743812]
  virtual HRESULT STDMETHODCALLTYPE set_WidthRatio(long pratio/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_WidthRatio(long* pratio/*[out,retval]*/) = 0; // [1610743814]
  virtual HRESULT STDMETHODCALLTYPE set_HeightRatio(long pratio/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_HeightRatio(long* pratio/*[out,retval]*/) = 0; // [1610743816]
  virtual HRESULT STDMETHODCALLTYPE get_Index(long* piChart/*[out,retval]*/) = 0; // [5204]
  virtual HRESULT STDMETHODCALLTYPE get_Interior(Owc10_xp::ChInterior** ppinterior/*[out,retval]*/) = 0; // [5007]
  virtual HRESULT STDMETHODCALLTYPE get_Legend(Owc10_xp::ChLegend** pplegend/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR pbstr/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pbstr/*[out,retval]*/) = 0; // [1610743821]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* ppwcwebchart/*[out,retval]*/) = 0; // [5201]
  virtual HRESULT STDMETHODCALLTYPE get_PlotArea(Owc10_xp::ChPlotArea** ppplotarea/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Title(Owc10_xp::ChTitle** pptitle/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_ExtrudeAngle(double protation/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ExtrudeAngle(double* protation/*[out,retval]*/) = 0; // [1610743826]
  virtual HRESULT STDMETHODCALLTYPE set_DirectionalLightRotation(double protation/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DirectionalLightRotation(double* protation/*[out,retval]*/) = 0; // [1610743828]
  virtual HRESULT STDMETHODCALLTYPE set_DirectionalLightInclination(double pinclination/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DirectionalLightInclination(double* pinclination/*[out,retval]*/) = 0; // [1610743830]
  virtual HRESULT STDMETHODCALLTYPE set_DirectionalLightIntensity(double pintensity/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DirectionalLightIntensity(double* pintensity/*[out,retval]*/) = 0; // [1610743832]
  virtual HRESULT STDMETHODCALLTYPE set_AmbientLightIntensity(double pintensity/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_AmbientLightIntensity(double* pintensity/*[out,retval]*/) = 0; // [1610743834]
  virtual HRESULT STDMETHODCALLTYPE set_LightNormal(double pnormal/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_LightNormal(double* pnormal/*[out,retval]*/) = 0; // [1610743836]
  virtual HRESULT STDMETHODCALLTYPE set_ProjectionMode(Owc10_xp::ChartProjectionModeEnum pmode/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ProjectionMode(Owc10_xp::ChartProjectionModeEnum* pmode/*[out,retval]*/) = 0; // [1610743838]
  virtual HRESULT STDMETHODCALLTYPE set_Inclination(double pinclination/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Inclination(double* pinclination/*[out,retval]*/) = 0; // [1610743840]
  virtual HRESULT STDMETHODCALLTYPE set_Rotation(double protation/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Rotation(double* protation/*[out,retval]*/) = 0; // [1610743842]
  virtual HRESULT STDMETHODCALLTYPE set_Perspective(long pperspective/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Perspective(long* pperspective/*[out,retval]*/) = 0; // [1610743844]
  virtual HRESULT STDMETHODCALLTYPE set_GapDepth(long pgapdepth/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_GapDepth(long* pgapdepth/*[out,retval]*/) = 0; // [1610743846]
  virtual HRESULT STDMETHODCALLTYPE set_HasAutoChartDepth(VARIANT_BOOL pfHasAutoChartDepth/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_HasAutoChartDepth(VARIANT_BOOL* pfHasAutoChartDepth/*[out,retval]*/) = 0; // [1610743848]
  virtual HRESULT STDMETHODCALLTYPE set_HasAutoAspectRatio(VARIANT_BOOL pfHasAutoAspectRatio/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_HasAutoAspectRatio(VARIANT_BOOL* pfHasAutoAspectRatio/*[out,retval]*/) = 0; // [1610743850]
  virtual HRESULT STDMETHODCALLTYPE set_ChartDepth(long pchartdepth/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ChartDepth(long* pchartdepth/*[out,retval]*/) = 0; // [1610743852]
  virtual HRESULT STDMETHODCALLTYPE set_AspectRatio(long paspectratio/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_AspectRatio(long* paspectratio/*[out,retval]*/) = 0; // [1610743854]
  virtual HRESULT STDMETHODCALLTYPE Select(void) = 0; // [5036]
  virtual HRESULT STDMETHODCALLTYPE set_BubbleScale(double pdBubbleScalew/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_BubbleScale(double* pdBubbleScalew/*[out,retval]*/) = 0; // [1610743857]
  virtual HRESULT STDMETHODCALLTYPE set_FirstSliceAngle(long panFirst/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_FirstSliceAngle(long* panFirst/*[out,retval]*/) = 0; // [1610743859]
  virtual HRESULT STDMETHODCALLTYPE set_GapWidth(long plGapWidth/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_GapWidth(long* plGapWidth/*[out,retval]*/) = 0; // [1610743861]
  virtual HRESULT STDMETHODCALLTYPE set_HoleSize(long plHoleSize/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_HoleSize(long* plHoleSize/*[out,retval]*/) = 0; // [1610743863]
  virtual HRESULT STDMETHODCALLTYPE set_Overlap(long plOverlap/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Overlap(long* plOverlap/*[out,retval]*/) = 0; // [1610743865]
  virtual HRESULT STDMETHODCALLTYPE get_SeriesCollection(Owc10_xp::ChSeriesCollection** ppseriesCollection/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_SizeRepresents(Owc10_xp::ChartSizeRepresentsEnum pocpSR/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_SizeRepresents(Owc10_xp::ChartSizeRepresentsEnum* pocpSR/*[out,retval]*/) = 0; // [1610743868]
  virtual HRESULT STDMETHODCALLTYPE get_Scalings(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/, 
                                                 Owc10_xp::ChScaling** ppwcscaling/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Type(Owc10_xp::ChartChartTypeEnum pocpGT/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Owc10_xp::ChartChartTypeEnum* pocpGT/*[out,retval]*/) = 0; // [1610743871]
  virtual HRESULT STDMETHODCALLTYPE SetData(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/, 
                                            long DataSourceIndex/*[in]*/, 
                                            VARIANT DataReference/*[in,opt]*/= TNoParam()) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetDataReference(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/, 
                                                     BSTR* DataSourceReference/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetDataSourceIndex(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/, 
                                                       long* DataSourceIndex/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetData(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/, 
                                            VARIANT* DataSourceIndex/*[out]*/, 
                                            VARIANT* DataReference/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_LayerCount(long* playercount/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Top(long* ptop/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Top(long ptop/*[in]*/) = 0; // [1610743878]
  virtual HRESULT STDMETHODCALLTYPE get_Left(long* pleft/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Left(long pleft/*[in]*/) = 0; // [1610743880]
  virtual HRESULT STDMETHODCALLTYPE get_Bottom(long* pbottom/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Right(long* pright/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_TypeFlags(int* pgrbit/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SetSpreadsheetData(BSTR DataReference/*[in]*/, 
                                                       VARIANT_BOOL SeriesByRows/*[in,def,opt]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE DuplicateFormat(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::ChAxes* __fastcall get_Axes(void)
  {
    Owc10_xp::ChAxes* ppaxes;
    OLECHECK(this->get_Axes((Owc10_xp::ChAxes**)&ppaxes));
    return ppaxes;
  }

  Owc10_xp::ChBorder* __fastcall get_Border(void)
  {
    Owc10_xp::ChBorder* ppline;
    OLECHECK(this->get_Border((Owc10_xp::ChBorder**)&ppline));
    return ppline;
  }

  VARIANT_BOOL __fastcall get_HasLegend(void)
  {
    VARIANT_BOOL pfHasLegend;
    OLECHECK(this->get_HasLegend((VARIANT_BOOL*)&pfHasLegend));
    return pfHasLegend;
  }

  VARIANT_BOOL __fastcall get_HasTitle(void)
  {
    VARIANT_BOOL pfHasTitle;
    OLECHECK(this->get_HasTitle((VARIANT_BOOL*)&pfHasTitle));
    return pfHasTitle;
  }

  long __fastcall get_WidthRatio(void)
  {
    long pratio;
    OLECHECK(this->get_WidthRatio((long*)&pratio));
    return pratio;
  }

  long __fastcall get_HeightRatio(void)
  {
    long pratio;
    OLECHECK(this->get_HeightRatio((long*)&pratio));
    return pratio;
  }

  long __fastcall get_Index(void)
  {
    long piChart;
    OLECHECK(this->get_Index((long*)&piChart));
    return piChart;
  }

  Owc10_xp::ChInterior* __fastcall get_Interior(void)
  {
    Owc10_xp::ChInterior* ppinterior;
    OLECHECK(this->get_Interior((Owc10_xp::ChInterior**)&ppinterior));
    return ppinterior;
  }

  Owc10_xp::ChLegend* __fastcall get_Legend(void)
  {
    Owc10_xp::ChLegend* pplegend;
    OLECHECK(this->get_Legend((Owc10_xp::ChLegend**)&pplegend));
    return pplegend;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pbstr = 0;
    OLECHECK(this->get_Name((BSTR*)&pbstr));
    return pbstr;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH ppwcwebchart;
    OLECHECK(this->get_Parent((LPDISPATCH*)&ppwcwebchart));
    return ppwcwebchart;
  }

  Owc10_xp::ChPlotArea* __fastcall get_PlotArea(void)
  {
    Owc10_xp::ChPlotArea* ppplotarea;
    OLECHECK(this->get_PlotArea((Owc10_xp::ChPlotArea**)&ppplotarea));
    return ppplotarea;
  }

  Owc10_xp::ChTitle* __fastcall get_Title(void)
  {
    Owc10_xp::ChTitle* pptitle;
    OLECHECK(this->get_Title((Owc10_xp::ChTitle**)&pptitle));
    return pptitle;
  }

  double __fastcall get_ExtrudeAngle(void)
  {
    double protation;
    OLECHECK(this->get_ExtrudeAngle((double*)&protation));
    return protation;
  }

  double __fastcall get_DirectionalLightRotation(void)
  {
    double protation;
    OLECHECK(this->get_DirectionalLightRotation((double*)&protation));
    return protation;
  }

  double __fastcall get_DirectionalLightInclination(void)
  {
    double pinclination;
    OLECHECK(this->get_DirectionalLightInclination((double*)&pinclination));
    return pinclination;
  }

  double __fastcall get_DirectionalLightIntensity(void)
  {
    double pintensity;
    OLECHECK(this->get_DirectionalLightIntensity((double*)&pintensity));
    return pintensity;
  }

  double __fastcall get_AmbientLightIntensity(void)
  {
    double pintensity;
    OLECHECK(this->get_AmbientLightIntensity((double*)&pintensity));
    return pintensity;
  }

  double __fastcall get_LightNormal(void)
  {
    double pnormal;
    OLECHECK(this->get_LightNormal((double*)&pnormal));
    return pnormal;
  }

  Owc10_xp::ChartProjectionModeEnum __fastcall get_ProjectionMode(void)
  {
    Owc10_xp::ChartProjectionModeEnum pmode;
    OLECHECK(this->get_ProjectionMode((Owc10_xp::ChartProjectionModeEnum*)&pmode));
    return pmode;
  }

  double __fastcall get_Inclination(void)
  {
    double pinclination;
    OLECHECK(this->get_Inclination((double*)&pinclination));
    return pinclination;
  }

  double __fastcall get_Rotation(void)
  {
    double protation;
    OLECHECK(this->get_Rotation((double*)&protation));
    return protation;
  }

  long __fastcall get_Perspective(void)
  {
    long pperspective;
    OLECHECK(this->get_Perspective((long*)&pperspective));
    return pperspective;
  }

  long __fastcall get_GapDepth(void)
  {
    long pgapdepth;
    OLECHECK(this->get_GapDepth((long*)&pgapdepth));
    return pgapdepth;
  }

  VARIANT_BOOL __fastcall get_HasAutoChartDepth(void)
  {
    VARIANT_BOOL pfHasAutoChartDepth;
    OLECHECK(this->get_HasAutoChartDepth((VARIANT_BOOL*)&pfHasAutoChartDepth));
    return pfHasAutoChartDepth;
  }

  VARIANT_BOOL __fastcall get_HasAutoAspectRatio(void)
  {
    VARIANT_BOOL pfHasAutoAspectRatio;
    OLECHECK(this->get_HasAutoAspectRatio((VARIANT_BOOL*)&pfHasAutoAspectRatio));
    return pfHasAutoAspectRatio;
  }

  long __fastcall get_ChartDepth(void)
  {
    long pchartdepth;
    OLECHECK(this->get_ChartDepth((long*)&pchartdepth));
    return pchartdepth;
  }

  long __fastcall get_AspectRatio(void)
  {
    long paspectratio;
    OLECHECK(this->get_AspectRatio((long*)&paspectratio));
    return paspectratio;
  }

  double __fastcall get_BubbleScale(void)
  {
    double pdBubbleScalew;
    OLECHECK(this->get_BubbleScale((double*)&pdBubbleScalew));
    return pdBubbleScalew;
  }

  long __fastcall get_FirstSliceAngle(void)
  {
    long panFirst;
    OLECHECK(this->get_FirstSliceAngle((long*)&panFirst));
    return panFirst;
  }

  long __fastcall get_GapWidth(void)
  {
    long plGapWidth;
    OLECHECK(this->get_GapWidth((long*)&plGapWidth));
    return plGapWidth;
  }

  long __fastcall get_HoleSize(void)
  {
    long plHoleSize;
    OLECHECK(this->get_HoleSize((long*)&plHoleSize));
    return plHoleSize;
  }

  long __fastcall get_Overlap(void)
  {
    long plOverlap;
    OLECHECK(this->get_Overlap((long*)&plOverlap));
    return plOverlap;
  }

  Owc10_xp::ChSeriesCollection* __fastcall get_SeriesCollection(void)
  {
    Owc10_xp::ChSeriesCollection* ppseriesCollection;
    OLECHECK(this->get_SeriesCollection((Owc10_xp::ChSeriesCollection**)&ppseriesCollection));
    return ppseriesCollection;
  }

  Owc10_xp::ChartSizeRepresentsEnum __fastcall get_SizeRepresents(void)
  {
    Owc10_xp::ChartSizeRepresentsEnum pocpSR;
    OLECHECK(this->get_SizeRepresents((Owc10_xp::ChartSizeRepresentsEnum*)&pocpSR));
    return pocpSR;
  }

  Owc10_xp::ChScaling* __fastcall get_Scalings(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/)
  {
    Owc10_xp::ChScaling* ppwcscaling;
    OLECHECK(this->get_Scalings(Dimension, (Owc10_xp::ChScaling**)&ppwcscaling));
    return ppwcscaling;
  }

  Owc10_xp::ChartChartTypeEnum __fastcall get_Type(void)
  {
    Owc10_xp::ChartChartTypeEnum pocpGT;
    OLECHECK(this->get_Type((Owc10_xp::ChartChartTypeEnum*)&pocpGT));
    return pocpGT;
  }

  BSTR __fastcall GetDataReference(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/)
  {
    BSTR DataSourceReference = 0;
    OLECHECK(this->GetDataReference(Dimension, (BSTR*)&DataSourceReference));
    return DataSourceReference;
  }

  long __fastcall GetDataSourceIndex(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/)
  {
    long DataSourceIndex;
    OLECHECK(this->GetDataSourceIndex(Dimension, (long*)&DataSourceIndex));
    return DataSourceIndex;
  }

  long __fastcall get_LayerCount(void)
  {
    long playercount;
    OLECHECK(this->get_LayerCount((long*)&playercount));
    return playercount;
  }

  long __fastcall get_Top(void)
  {
    long ptop;
    OLECHECK(this->get_Top((long*)&ptop));
    return ptop;
  }

  long __fastcall get_Left(void)
  {
    long pleft;
    OLECHECK(this->get_Left((long*)&pleft));
    return pleft;
  }

  long __fastcall get_Bottom(void)
  {
    long pbottom;
    OLECHECK(this->get_Bottom((long*)&pbottom));
    return pbottom;
  }

  long __fastcall get_Right(void)
  {
    long pright;
    OLECHECK(this->get_Right((long*)&pright));
    return pright;
  }

  int __fastcall get_TypeFlags(void)
  {
    int pgrbit;
    OLECHECK(this->get_TypeFlags((int*)&pgrbit));
    return pgrbit;
  }

  Owc10_xp::ChartSelectionsEnum __fastcall get_ObjectType(void)
  {
    Owc10_xp::ChartSelectionsEnum pcs;
    OLECHECK(this->get_ObjectType((Owc10_xp::ChartSelectionsEnum*)&pcs));
    return pcs;
  }


  __property   Owc10_xp::ChAxes* Axes = {read = get_Axes};
  __property   Owc10_xp::ChBorder* Border = {read = get_Border};
  __property   VARIANT_BOOL    HasLegend = {read = get_HasLegend, write = set_HasLegend};
  __property   VARIANT_BOOL    HasTitle = {read = get_HasTitle, write = set_HasTitle};
  __property   long            WidthRatio = {read = get_WidthRatio, write = set_WidthRatio};
  __property   long            HeightRatio = {read = get_HeightRatio, write = set_HeightRatio};
  __property   long            Index = {read = get_Index};
  __property   Owc10_xp::ChInterior* Interior = {read = get_Interior};
  __property   Owc10_xp::ChLegend* Legend = {read = get_Legend};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Owc10_xp::ChPlotArea* PlotArea = {read = get_PlotArea};
  __property   Owc10_xp::ChTitle* Title = {read = get_Title};
  __property   double          ExtrudeAngle = {read = get_ExtrudeAngle, write = set_ExtrudeAngle};
  __property   double          DirectionalLightRotation = {read = get_DirectionalLightRotation, write = set_DirectionalLightRotation};
  __property   double          DirectionalLightInclination = {read = get_DirectionalLightInclination, write = set_DirectionalLightInclination};
  __property   double          DirectionalLightIntensity = {read = get_DirectionalLightIntensity, write = set_DirectionalLightIntensity};
  __property   double          AmbientLightIntensity = {read = get_AmbientLightIntensity, write = set_AmbientLightIntensity};
  __property   double          LightNormal = {read = get_LightNormal, write = set_LightNormal};
  __property   Owc10_xp::ChartProjectionModeEnum ProjectionMode = {read = get_ProjectionMode, write = set_ProjectionMode};
  __property   double          Inclination = {read = get_Inclination, write = set_Inclination};
  __property   double          Rotation = {read = get_Rotation, write = set_Rotation};
  __property   long            Perspective = {read = get_Perspective, write = set_Perspective};
  __property   long            GapDepth = {read = get_GapDepth, write = set_GapDepth};
  __property   VARIANT_BOOL    HasAutoChartDepth = {read = get_HasAutoChartDepth, write = set_HasAutoChartDepth};
  __property   VARIANT_BOOL    HasAutoAspectRatio = {read = get_HasAutoAspectRatio, write = set_HasAutoAspectRatio};
  __property   long            ChartDepth = {read = get_ChartDepth, write = set_ChartDepth};
  __property   long            AspectRatio = {read = get_AspectRatio, write = set_AspectRatio};
  __property   double          BubbleScale = {read = get_BubbleScale, write = set_BubbleScale};
  __property   long            FirstSliceAngle = {read = get_FirstSliceAngle, write = set_FirstSliceAngle};
  __property   long            GapWidth = {read = get_GapWidth, write = set_GapWidth};
  __property   long            HoleSize = {read = get_HoleSize, write = set_HoleSize};
  __property   long            Overlap = {read = get_Overlap, write = set_Overlap};
  __property   Owc10_xp::ChSeriesCollection* SeriesCollection = {read = get_SeriesCollection};
  __property   Owc10_xp::ChartSizeRepresentsEnum SizeRepresents = {read = get_SizeRepresents, write = set_SizeRepresents};
  __property   Owc10_xp::ChartChartTypeEnum Type = {read = get_Type, write = set_Type};
  __property   long            LayerCount = {read = get_LayerCount};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Bottom = {read = get_Bottom};
  __property   long            Right = {read = get_Right};
  __property   int             TypeFlags = {read = get_TypeFlags};
  __property   Owc10_xp::ChartSelectionsEnum ObjectType = {read = get_ObjectType};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ChAxes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AE6-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface ChAxes  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* pcaxis/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Owc10_xp::ChChart** ppchart/*[out,retval]*/) = 0; // [5201]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE Add(Owc10_xp::ChScaling* Scaling/*[in]*/, 
                                        Owc10_xp::ChAxis** ppaxis/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Delete(VARIANT Index/*[in]*/) = 0; // [5202]
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Owc10_xp::ChAxis** ppaxis/*[out,retval]*/) = 0; // [0]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long pcaxis;
    OLECHECK(this->get_Count((long*)&pcaxis));
    return pcaxis;
  }

  Owc10_xp::ChChart* __fastcall get_Parent(void)
  {
    Owc10_xp::ChChart* ppchart;
    OLECHECK(this->get_Parent((Owc10_xp::ChChart**)&ppchart));
    return ppchart;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunk));
    return ppunk;
  }

  Owc10_xp::ChAxis* __fastcall Add(Owc10_xp::ChScaling* Scaling/*[in]*/)
  {
    Owc10_xp::ChAxis* ppaxis;
    OLECHECK(this->Add(Scaling, (Owc10_xp::ChAxis**)&ppaxis));
    return ppaxis;
  }

  Owc10_xp::ChAxis* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Owc10_xp::ChAxis* ppaxis;
    OLECHECK(this->get_Item(Index, (Owc10_xp::ChAxis**)&ppaxis));
    return ppaxis;
  }


  __property   long            Count = {read = get_Count};
  __property   Owc10_xp::ChChart* Parent = {read = get_Parent};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ChScaling
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39ABB-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface ChScaling  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_HasAutoMaximum(VARIANT_BOOL pfAutoMax/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_HasAutoMaximum(VARIANT_BOOL* pfAutoMax/*[out,retval]*/) = 0; // [1610743808]
  virtual HRESULT STDMETHODCALLTYPE set_HasAutoMinimum(VARIANT_BOOL pfHasAutoMinimum/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_HasAutoMinimum(VARIANT_BOOL* pfHasAutoMinimum/*[out,retval]*/) = 0; // [1610743810]
  virtual HRESULT STDMETHODCALLTYPE set_HasSplit(VARIANT_BOOL pfHasSplit/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_HasSplit(VARIANT_BOOL* pfHasSplit/*[out,retval]*/) = 0; // [1610743812]
  virtual HRESULT STDMETHODCALLTYPE set_LogBase(double pdLogBase/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_LogBase(double* pdLogBase/*[out,retval]*/) = 0; // [1610743814]
  virtual HRESULT STDMETHODCALLTYPE set_Maximum(double pdMax/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Maximum(double* pdMax/*[out,retval]*/) = 0; // [1610743816]
  virtual HRESULT STDMETHODCALLTYPE set_Minimum(double pdMin/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Minimum(double* pdMin/*[out,retval]*/) = 0; // [1610743818]
  virtual HRESULT STDMETHODCALLTYPE set_Orientation(Owc10_xp::ChartScaleOrientationEnum pocpSO/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Orientation(Owc10_xp::ChartScaleOrientationEnum* pocpSO/*[out,retval]*/) = 0; // [1610743820]
  virtual HRESULT STDMETHODCALLTYPE set_Type(Owc10_xp::ChartScaleTypeEnum pocpST/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Owc10_xp::ChartScaleTypeEnum* pocpST/*[out,retval]*/) = 0; // [1610743822]
  virtual HRESULT STDMETHODCALLTYPE set_SplitMaximum(double pdSplitMax/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_SplitMaximum(double* pdSplitMax/*[out,retval]*/) = 0; // [1610743824]
  virtual HRESULT STDMETHODCALLTYPE set_SplitMinimum(double pdSplitMin/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_SplitMinimum(double* pdSplitMin/*[out,retval]*/) = 0; // [1610743826]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_HasAutoMaximum(void)
  {
    VARIANT_BOOL pfAutoMax;
    OLECHECK(this->get_HasAutoMaximum((VARIANT_BOOL*)&pfAutoMax));
    return pfAutoMax;
  }

  VARIANT_BOOL __fastcall get_HasAutoMinimum(void)
  {
    VARIANT_BOOL pfHasAutoMinimum;
    OLECHECK(this->get_HasAutoMinimum((VARIANT_BOOL*)&pfHasAutoMinimum));
    return pfHasAutoMinimum;
  }

  VARIANT_BOOL __fastcall get_HasSplit(void)
  {
    VARIANT_BOOL pfHasSplit;
    OLECHECK(this->get_HasSplit((VARIANT_BOOL*)&pfHasSplit));
    return pfHasSplit;
  }

  double __fastcall get_LogBase(void)
  {
    double pdLogBase;
    OLECHECK(this->get_LogBase((double*)&pdLogBase));
    return pdLogBase;
  }

  double __fastcall get_Maximum(void)
  {
    double pdMax;
    OLECHECK(this->get_Maximum((double*)&pdMax));
    return pdMax;
  }

  double __fastcall get_Minimum(void)
  {
    double pdMin;
    OLECHECK(this->get_Minimum((double*)&pdMin));
    return pdMin;
  }

  Owc10_xp::ChartScaleOrientationEnum __fastcall get_Orientation(void)
  {
    Owc10_xp::ChartScaleOrientationEnum pocpSO;
    OLECHECK(this->get_Orientation((Owc10_xp::ChartScaleOrientationEnum*)&pocpSO));
    return pocpSO;
  }

  Owc10_xp::ChartScaleTypeEnum __fastcall get_Type(void)
  {
    Owc10_xp::ChartScaleTypeEnum pocpST;
    OLECHECK(this->get_Type((Owc10_xp::ChartScaleTypeEnum*)&pocpST));
    return pocpST;
  }

  double __fastcall get_SplitMaximum(void)
  {
    double pdSplitMax;
    OLECHECK(this->get_SplitMaximum((double*)&pdSplitMax));
    return pdSplitMax;
  }

  double __fastcall get_SplitMinimum(void)
  {
    double pdSplitMin;
    OLECHECK(this->get_SplitMinimum((double*)&pdSplitMin));
    return pdSplitMin;
  }


  __property   VARIANT_BOOL    HasAutoMaximum = {read = get_HasAutoMaximum, write = set_HasAutoMaximum};
  __property   VARIANT_BOOL    HasAutoMinimum = {read = get_HasAutoMinimum, write = set_HasAutoMinimum};
  __property   VARIANT_BOOL    HasSplit = {read = get_HasSplit, write = set_HasSplit};
  __property   double          LogBase = {read = get_LogBase, write = set_LogBase};
  __property   double          Maximum = {read = get_Maximum, write = set_Maximum};
  __property   double          Minimum = {read = get_Minimum, write = set_Minimum};
  __property   Owc10_xp::ChartScaleOrientationEnum Orientation = {read = get_Orientation, write = set_Orientation};
  __property   Owc10_xp::ChartScaleTypeEnum Type = {read = get_Type, write = set_Type};
  __property   double          SplitMaximum = {read = get_SplitMaximum, write = set_SplitMaximum};
  __property   double          SplitMinimum = {read = get_SplitMinimum, write = set_SplitMinimum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ChAxis
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AE7-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface ChAxis  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_Crosses(Owc10_xp::ChartAxisCrossesEnum pocpACT/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Crosses(Owc10_xp::ChartAxisCrossesEnum* pocpACT/*[out,retval]*/) = 0; // [1610743808]
  virtual HRESULT STDMETHODCALLTYPE set_CrossesAtValue(double pdCrossesAt/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_CrossesAtValue(double* pdCrossesAt/*[out,retval]*/) = 0; // [1610743810]
  virtual HRESULT STDMETHODCALLTYPE set_CrossingAxis(Owc10_xp::ChAxis* ppaxis/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_CrossingAxis(Owc10_xp::ChAxis** ppaxis/*[out,retval]*/) = 0; // [1610743812]
  virtual HRESULT STDMETHODCALLTYPE get_Font(Owc10_xp::ChFont** ppfont/*[out,retval]*/) = 0; // [5200]
  virtual HRESULT STDMETHODCALLTYPE set_HasAutoMajorUnit(VARIANT_BOOL pfHasAutoMajorUnit/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_HasAutoMajorUnit(VARIANT_BOOL* pfHasAutoMajorUnit/*[out,retval]*/) = 0; // [1610743815]
  virtual HRESULT STDMETHODCALLTYPE set_HasAutoMinorUnit(VARIANT_BOOL pfHasAutoMinorUnit/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_HasAutoMinorUnit(VARIANT_BOOL* pfHasAutoMinorUnit/*[out,retval]*/) = 0; // [1610743817]
  virtual HRESULT STDMETHODCALLTYPE set_HasMajorGridlines(VARIANT_BOOL pfHasMajorGridlines/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_HasMajorGridlines(VARIANT_BOOL* pfHasMajorGridlines/*[out,retval]*/) = 0; // [1610743819]
  virtual HRESULT STDMETHODCALLTYPE set_HasMinorGridlines(VARIANT_BOOL pfHasMinorGridlines/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_HasMinorGridlines(VARIANT_BOOL* pfHasMinorGridlines/*[out,retval]*/) = 0; // [1610743821]
  virtual HRESULT STDMETHODCALLTYPE set_HasTitle(VARIANT_BOOL pfHasTitle/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_HasTitle(VARIANT_BOOL* pfHasTitle/*[out,retval]*/) = 0; // [1610743823]
  virtual HRESULT STDMETHODCALLTYPE get_Line(Owc10_xp::ChLine** ppline/*[out,retval]*/) = 0; // [5205]
  virtual HRESULT STDMETHODCALLTYPE get_MajorGridlines(Owc10_xp::ChGridlines** ppgridlines/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_MajorTickMarks(Owc10_xp::ChartTickMarkEnum pocpTMT/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_MajorTickMarks(Owc10_xp::ChartTickMarkEnum* pocpTMT/*[out,retval]*/) = 0; // [1610743827]
  virtual HRESULT STDMETHODCALLTYPE set_MajorUnit(double pdMajorUnit/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_MajorUnit(double* pdMajorUnit/*[out,retval]*/) = 0; // [1610743829]
  virtual HRESULT STDMETHODCALLTYPE get_MinorGridlines(Owc10_xp::ChGridlines** ppgridlines/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_MinorTickMarks(Owc10_xp::ChartTickMarkEnum pocpTMT/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_MinorTickMarks(Owc10_xp::ChartTickMarkEnum* pocpTMT/*[out,retval]*/) = 0; // [1610743832]
  virtual HRESULT STDMETHODCALLTYPE set_MinorUnit(double pdMinorUnit/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_MinorUnit(double* pdMinorUnit/*[out,retval]*/) = 0; // [1610743834]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR pbstr/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pbstr/*[out,retval]*/) = 0; // [1610743836]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Owc10_xp::ChChart** ppchart/*[out,retval]*/) = 0; // [5201]
  virtual HRESULT STDMETHODCALLTYPE set_Position(Owc10_xp::ChartAxisPositionEnum pChartAxisPosition/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Position(Owc10_xp::ChartAxisPositionEnum* pChartAxisPosition/*[out,retval]*/) = 0; // [1610743839]
  virtual HRESULT STDMETHODCALLTYPE get_Scaling(Owc10_xp::ChScaling** ppscaling/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_HasTickLabels(VARIANT_BOOL pfLabels/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_HasTickLabels(VARIANT_BOOL* pfLabels/*[out,retval]*/) = 0; // [1610743842]
  virtual HRESULT STDMETHODCALLTYPE set_TickLabelSpacing(long pcCat/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_TickLabelSpacing(long* pcCat/*[out,retval]*/) = 0; // [1610743844]
  virtual HRESULT STDMETHODCALLTYPE set_TickMarkSpacing(long pcCat/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_TickMarkSpacing(long* pcCat/*[out,retval]*/) = 0; // [1610743846]
  virtual HRESULT STDMETHODCALLTYPE get_Title(Owc10_xp::ChTitle** pptitle/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Owc10_xp::ChartAxisTypeEnum* pocpAT/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Index(long* piAxis/*[out,retval]*/) = 0; // [5204]
  virtual HRESULT STDMETHODCALLTYPE set_NumberFormat(BSTR pbstrNumberFormat/*[in]*/) = 0; // [5203]
  virtual HRESULT STDMETHODCALLTYPE get_NumberFormat(BSTR* pbstrNumberFormat/*[out,retval]*/) = 0; // [5203]
  virtual HRESULT STDMETHODCALLTYPE Select(void) = 0; // [5036]
  virtual HRESULT STDMETHODCALLTYPE get_GroupingType(Owc10_xp::ChartAxisGroupingEnum* pgroupenum/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_GroupingType(Owc10_xp::ChartAxisGroupingEnum pgroupenum/*[in]*/) = 0; // [1610743854]
  virtual HRESULT STDMETHODCALLTYPE get_TickLabelUnitType(Owc10_xp::ChartAxisUnitTypeEnum* punittype/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_TickLabelUnitType(Owc10_xp::ChartAxisUnitTypeEnum punittype/*[in]*/) = 0; // [1610743856]
  virtual HRESULT STDMETHODCALLTYPE get_TickMarkUnitType(Owc10_xp::ChartAxisUnitTypeEnum* punittype/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_TickMarkUnitType(Owc10_xp::ChartAxisUnitTypeEnum punittype/*[in]*/) = 0; // [1610743858]
  virtual HRESULT STDMETHODCALLTYPE get_GroupingUnit(long* GroupingUnit/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_GroupingUnit(long GroupingUnit/*[in]*/) = 0; // [1610743860]
  virtual HRESULT STDMETHODCALLTYPE get_GroupingUnitType(Owc10_xp::ChartAxisUnitTypeEnum* proupingUnitType/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_GroupingUnitType(Owc10_xp::ChartAxisUnitTypeEnum proupingUnitType/*[in]*/) = 0; // [1610743862]
  virtual HRESULT STDMETHODCALLTYPE get_GroupingTotalFunction(Owc10_xp::ChartGroupingTotalFunctionEnum* ptotal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_GroupingTotalFunction(Owc10_xp::ChartGroupingTotalFunctionEnum ptotal/*[in]*/) = 0; // [1610743864]
  virtual HRESULT STDMETHODCALLTYPE set_Orientation(long porientation/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Orientation(long* porientation/*[out,retval]*/) = 0; // [1610743866]
  virtual HRESULT STDMETHODCALLTYPE get_Top(long* ptop/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Top(long ptop/*[in]*/) = 0; // [1610743868]
  virtual HRESULT STDMETHODCALLTYPE get_Left(long* pleft/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Left(long pleft/*[in]*/) = 0; // [1610743870]
  virtual HRESULT STDMETHODCALLTYPE get_Bottom(long* pbottom/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Right(long* pright/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_CategoryLabels(Owc10_xp::ChCategoryLabels** ppCategoryLabels/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ValueToPoint(VARIANT Value/*[in]*/, 
                                                 Owc10_xp::Coordinate** ppCoord/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::ChartAxisCrossesEnum __fastcall get_Crosses(void)
  {
    Owc10_xp::ChartAxisCrossesEnum pocpACT;
    OLECHECK(this->get_Crosses((Owc10_xp::ChartAxisCrossesEnum*)&pocpACT));
    return pocpACT;
  }

  double __fastcall get_CrossesAtValue(void)
  {
    double pdCrossesAt;
    OLECHECK(this->get_CrossesAtValue((double*)&pdCrossesAt));
    return pdCrossesAt;
  }

  Owc10_xp::ChAxis* __fastcall get_CrossingAxis(void)
  {
    Owc10_xp::ChAxis* ppaxis;
    OLECHECK(this->get_CrossingAxis((Owc10_xp::ChAxis**)&ppaxis));
    return ppaxis;
  }

  Owc10_xp::ChFont* __fastcall get_Font(void)
  {
    Owc10_xp::ChFont* ppfont;
    OLECHECK(this->get_Font((Owc10_xp::ChFont**)&ppfont));
    return ppfont;
  }

  VARIANT_BOOL __fastcall get_HasAutoMajorUnit(void)
  {
    VARIANT_BOOL pfHasAutoMajorUnit;
    OLECHECK(this->get_HasAutoMajorUnit((VARIANT_BOOL*)&pfHasAutoMajorUnit));
    return pfHasAutoMajorUnit;
  }

  VARIANT_BOOL __fastcall get_HasAutoMinorUnit(void)
  {
    VARIANT_BOOL pfHasAutoMinorUnit;
    OLECHECK(this->get_HasAutoMinorUnit((VARIANT_BOOL*)&pfHasAutoMinorUnit));
    return pfHasAutoMinorUnit;
  }

  VARIANT_BOOL __fastcall get_HasMajorGridlines(void)
  {
    VARIANT_BOOL pfHasMajorGridlines;
    OLECHECK(this->get_HasMajorGridlines((VARIANT_BOOL*)&pfHasMajorGridlines));
    return pfHasMajorGridlines;
  }

  VARIANT_BOOL __fastcall get_HasMinorGridlines(void)
  {
    VARIANT_BOOL pfHasMinorGridlines;
    OLECHECK(this->get_HasMinorGridlines((VARIANT_BOOL*)&pfHasMinorGridlines));
    return pfHasMinorGridlines;
  }

  VARIANT_BOOL __fastcall get_HasTitle(void)
  {
    VARIANT_BOOL pfHasTitle;
    OLECHECK(this->get_HasTitle((VARIANT_BOOL*)&pfHasTitle));
    return pfHasTitle;
  }

  Owc10_xp::ChLine* __fastcall get_Line(void)
  {
    Owc10_xp::ChLine* ppline;
    OLECHECK(this->get_Line((Owc10_xp::ChLine**)&ppline));
    return ppline;
  }

  Owc10_xp::ChGridlines* __fastcall get_MajorGridlines(void)
  {
    Owc10_xp::ChGridlines* ppgridlines;
    OLECHECK(this->get_MajorGridlines((Owc10_xp::ChGridlines**)&ppgridlines));
    return ppgridlines;
  }

  Owc10_xp::ChartTickMarkEnum __fastcall get_MajorTickMarks(void)
  {
    Owc10_xp::ChartTickMarkEnum pocpTMT;
    OLECHECK(this->get_MajorTickMarks((Owc10_xp::ChartTickMarkEnum*)&pocpTMT));
    return pocpTMT;
  }

  double __fastcall get_MajorUnit(void)
  {
    double pdMajorUnit;
    OLECHECK(this->get_MajorUnit((double*)&pdMajorUnit));
    return pdMajorUnit;
  }

  Owc10_xp::ChGridlines* __fastcall get_MinorGridlines(void)
  {
    Owc10_xp::ChGridlines* ppgridlines;
    OLECHECK(this->get_MinorGridlines((Owc10_xp::ChGridlines**)&ppgridlines));
    return ppgridlines;
  }

  Owc10_xp::ChartTickMarkEnum __fastcall get_MinorTickMarks(void)
  {
    Owc10_xp::ChartTickMarkEnum pocpTMT;
    OLECHECK(this->get_MinorTickMarks((Owc10_xp::ChartTickMarkEnum*)&pocpTMT));
    return pocpTMT;
  }

  double __fastcall get_MinorUnit(void)
  {
    double pdMinorUnit;
    OLECHECK(this->get_MinorUnit((double*)&pdMinorUnit));
    return pdMinorUnit;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pbstr = 0;
    OLECHECK(this->get_Name((BSTR*)&pbstr));
    return pbstr;
  }

  Owc10_xp::ChChart* __fastcall get_Parent(void)
  {
    Owc10_xp::ChChart* ppchart;
    OLECHECK(this->get_Parent((Owc10_xp::ChChart**)&ppchart));
    return ppchart;
  }

  Owc10_xp::ChartAxisPositionEnum __fastcall get_Position(void)
  {
    Owc10_xp::ChartAxisPositionEnum pChartAxisPosition;
    OLECHECK(this->get_Position((Owc10_xp::ChartAxisPositionEnum*)&pChartAxisPosition));
    return pChartAxisPosition;
  }

  Owc10_xp::ChScaling* __fastcall get_Scaling(void)
  {
    Owc10_xp::ChScaling* ppscaling;
    OLECHECK(this->get_Scaling((Owc10_xp::ChScaling**)&ppscaling));
    return ppscaling;
  }

  VARIANT_BOOL __fastcall get_HasTickLabels(void)
  {
    VARIANT_BOOL pfLabels;
    OLECHECK(this->get_HasTickLabels((VARIANT_BOOL*)&pfLabels));
    return pfLabels;
  }

  long __fastcall get_TickLabelSpacing(void)
  {
    long pcCat;
    OLECHECK(this->get_TickLabelSpacing((long*)&pcCat));
    return pcCat;
  }

  long __fastcall get_TickMarkSpacing(void)
  {
    long pcCat;
    OLECHECK(this->get_TickMarkSpacing((long*)&pcCat));
    return pcCat;
  }

  Owc10_xp::ChTitle* __fastcall get_Title(void)
  {
    Owc10_xp::ChTitle* pptitle;
    OLECHECK(this->get_Title((Owc10_xp::ChTitle**)&pptitle));
    return pptitle;
  }

  Owc10_xp::ChartAxisTypeEnum __fastcall get_Type(void)
  {
    Owc10_xp::ChartAxisTypeEnum pocpAT;
    OLECHECK(this->get_Type((Owc10_xp::ChartAxisTypeEnum*)&pocpAT));
    return pocpAT;
  }

  long __fastcall get_Index(void)
  {
    long piAxis;
    OLECHECK(this->get_Index((long*)&piAxis));
    return piAxis;
  }

  BSTR __fastcall get_NumberFormat(void)
  {
    BSTR pbstrNumberFormat = 0;
    OLECHECK(this->get_NumberFormat((BSTR*)&pbstrNumberFormat));
    return pbstrNumberFormat;
  }

  Owc10_xp::ChartAxisGroupingEnum __fastcall get_GroupingType(void)
  {
    Owc10_xp::ChartAxisGroupingEnum pgroupenum;
    OLECHECK(this->get_GroupingType((Owc10_xp::ChartAxisGroupingEnum*)&pgroupenum));
    return pgroupenum;
  }

  Owc10_xp::ChartAxisUnitTypeEnum __fastcall get_TickLabelUnitType(void)
  {
    Owc10_xp::ChartAxisUnitTypeEnum punittype;
    OLECHECK(this->get_TickLabelUnitType((Owc10_xp::ChartAxisUnitTypeEnum*)&punittype));
    return punittype;
  }

  Owc10_xp::ChartAxisUnitTypeEnum __fastcall get_TickMarkUnitType(void)
  {
    Owc10_xp::ChartAxisUnitTypeEnum punittype;
    OLECHECK(this->get_TickMarkUnitType((Owc10_xp::ChartAxisUnitTypeEnum*)&punittype));
    return punittype;
  }

  long __fastcall get_GroupingUnit(void)
  {
    long GroupingUnit;
    OLECHECK(this->get_GroupingUnit((long*)&GroupingUnit));
    return GroupingUnit;
  }

  Owc10_xp::ChartAxisUnitTypeEnum __fastcall get_GroupingUnitType(void)
  {
    Owc10_xp::ChartAxisUnitTypeEnum proupingUnitType;
    OLECHECK(this->get_GroupingUnitType((Owc10_xp::ChartAxisUnitTypeEnum*)&proupingUnitType));
    return proupingUnitType;
  }

  Owc10_xp::ChartGroupingTotalFunctionEnum __fastcall get_GroupingTotalFunction(void)
  {
    Owc10_xp::ChartGroupingTotalFunctionEnum ptotal;
    OLECHECK(this->get_GroupingTotalFunction((Owc10_xp::ChartGroupingTotalFunctionEnum*)&ptotal));
    return ptotal;
  }

  long __fastcall get_Orientation(void)
  {
    long porientation;
    OLECHECK(this->get_Orientation((long*)&porientation));
    return porientation;
  }

  long __fastcall get_Top(void)
  {
    long ptop;
    OLECHECK(this->get_Top((long*)&ptop));
    return ptop;
  }

  long __fastcall get_Left(void)
  {
    long pleft;
    OLECHECK(this->get_Left((long*)&pleft));
    return pleft;
  }

  long __fastcall get_Bottom(void)
  {
    long pbottom;
    OLECHECK(this->get_Bottom((long*)&pbottom));
    return pbottom;
  }

  long __fastcall get_Right(void)
  {
    long pright;
    OLECHECK(this->get_Right((long*)&pright));
    return pright;
  }

  Owc10_xp::ChCategoryLabels* __fastcall get_CategoryLabels(void)
  {
    Owc10_xp::ChCategoryLabels* ppCategoryLabels;
    OLECHECK(this->get_CategoryLabels((Owc10_xp::ChCategoryLabels**)&ppCategoryLabels));
    return ppCategoryLabels;
  }

  Owc10_xp::Coordinate* __fastcall ValueToPoint(VARIANT Value/*[in]*/)
  {
    Owc10_xp::Coordinate* ppCoord;
    OLECHECK(this->ValueToPoint(Value, (Owc10_xp::Coordinate**)&ppCoord));
    return ppCoord;
  }

  Owc10_xp::ChartSelectionsEnum __fastcall get_ObjectType(void)
  {
    Owc10_xp::ChartSelectionsEnum pcs;
    OLECHECK(this->get_ObjectType((Owc10_xp::ChartSelectionsEnum*)&pcs));
    return pcs;
  }


  __property   Owc10_xp::ChartAxisCrossesEnum Crosses = {read = get_Crosses, write = set_Crosses};
  __property   double          CrossesAtValue = {read = get_CrossesAtValue, write = set_CrossesAtValue};
  __property   Owc10_xp::ChAxis* CrossingAxis = {read = get_CrossingAxis, write = set_CrossingAxis};
  __property   Owc10_xp::ChFont* Font = {read = get_Font};
  __property   VARIANT_BOOL    HasAutoMajorUnit = {read = get_HasAutoMajorUnit, write = set_HasAutoMajorUnit};
  __property   VARIANT_BOOL    HasAutoMinorUnit = {read = get_HasAutoMinorUnit, write = set_HasAutoMinorUnit};
  __property   VARIANT_BOOL    HasMajorGridlines = {read = get_HasMajorGridlines, write = set_HasMajorGridlines};
  __property   VARIANT_BOOL    HasMinorGridlines = {read = get_HasMinorGridlines, write = set_HasMinorGridlines};
  __property   VARIANT_BOOL    HasTitle = {read = get_HasTitle, write = set_HasTitle};
  __property   Owc10_xp::ChLine* Line = {read = get_Line};
  __property   Owc10_xp::ChGridlines* MajorGridlines = {read = get_MajorGridlines};
  __property   Owc10_xp::ChartTickMarkEnum MajorTickMarks = {read = get_MajorTickMarks, write = set_MajorTickMarks};
  __property   double          MajorUnit = {read = get_MajorUnit, write = set_MajorUnit};
  __property   Owc10_xp::ChGridlines* MinorGridlines = {read = get_MinorGridlines};
  __property   Owc10_xp::ChartTickMarkEnum MinorTickMarks = {read = get_MinorTickMarks, write = set_MinorTickMarks};
  __property   double          MinorUnit = {read = get_MinorUnit, write = set_MinorUnit};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   Owc10_xp::ChChart* Parent = {read = get_Parent};
  __property   Owc10_xp::ChartAxisPositionEnum Position = {read = get_Position, write = set_Position};
  __property   Owc10_xp::ChScaling* Scaling = {read = get_Scaling};
  __property   VARIANT_BOOL    HasTickLabels = {read = get_HasTickLabels, write = set_HasTickLabels};
  __property   long            TickLabelSpacing = {read = get_TickLabelSpacing, write = set_TickLabelSpacing};
  __property   long            TickMarkSpacing = {read = get_TickMarkSpacing, write = set_TickMarkSpacing};
  __property   Owc10_xp::ChTitle* Title = {read = get_Title};
  __property   Owc10_xp::ChartAxisTypeEnum Type = {read = get_Type};
  __property   long            Index = {read = get_Index};
  __property   BSTR            NumberFormat = {read = get_NumberFormat, write = set_NumberFormat};
  __property   Owc10_xp::ChartAxisGroupingEnum GroupingType = {read = get_GroupingType, write = set_GroupingType};
  __property   Owc10_xp::ChartAxisUnitTypeEnum TickLabelUnitType = {read = get_TickLabelUnitType, write = set_TickLabelUnitType};
  __property   Owc10_xp::ChartAxisUnitTypeEnum TickMarkUnitType = {read = get_TickMarkUnitType, write = set_TickMarkUnitType};
  __property   long            GroupingUnit = {read = get_GroupingUnit, write = set_GroupingUnit};
  __property   Owc10_xp::ChartAxisUnitTypeEnum GroupingUnitType = {read = get_GroupingUnitType, write = set_GroupingUnitType};
  __property   Owc10_xp::ChartGroupingTotalFunctionEnum GroupingTotalFunction = {read = get_GroupingTotalFunction, write = set_GroupingTotalFunction};
  __property   long            Orientation = {read = get_Orientation, write = set_Orientation};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Bottom = {read = get_Bottom};
  __property   long            Right = {read = get_Right};
  __property   Owc10_xp::ChCategoryLabels* CategoryLabels = {read = get_CategoryLabels};
  __property   Owc10_xp::ChartSelectionsEnum ObjectType = {read = get_ObjectType};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ChGridlines
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AC4-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface ChGridlines  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Line(Owc10_xp::ChLine** ppline/*[out,retval]*/) = 0; // [5205]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Owc10_xp::ChAxis** ppaxis/*[out,retval]*/) = 0; // [5201]
  virtual HRESULT STDMETHODCALLTYPE Select(void) = 0; // [5036]
  virtual HRESULT STDMETHODCALLTYPE get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::ChLine* __fastcall get_Line(void)
  {
    Owc10_xp::ChLine* ppline;
    OLECHECK(this->get_Line((Owc10_xp::ChLine**)&ppline));
    return ppline;
  }

  Owc10_xp::ChAxis* __fastcall get_Parent(void)
  {
    Owc10_xp::ChAxis* ppaxis;
    OLECHECK(this->get_Parent((Owc10_xp::ChAxis**)&ppaxis));
    return ppaxis;
  }

  Owc10_xp::ChartSelectionsEnum __fastcall get_ObjectType(void)
  {
    Owc10_xp::ChartSelectionsEnum pcs;
    OLECHECK(this->get_ObjectType((Owc10_xp::ChartSelectionsEnum*)&pcs));
    return pcs;
  }


  __property   Owc10_xp::ChLine* Line = {read = get_Line};
  __property   Owc10_xp::ChAxis* Parent = {read = get_Parent};
  __property   Owc10_xp::ChartSelectionsEnum ObjectType = {read = get_ObjectType};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ChTitle
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39ABE-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface ChTitle  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Border(Owc10_xp::ChBorder** ppline/*[out,retval]*/) = 0; // [5004]
  virtual HRESULT STDMETHODCALLTYPE set_Caption(BSTR pbstr/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Caption(BSTR* pbstr/*[out,retval]*/) = 0; // [1610743809]
  virtual HRESULT STDMETHODCALLTYPE get_Font(Owc10_xp::ChFont** ppfont/*[out,retval]*/) = 0; // [5200]
  virtual HRESULT STDMETHODCALLTYPE get_Interior(Owc10_xp::ChInterior** ppinterior/*[out,retval]*/) = 0; // [5007]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* ppidispatch/*[out,retval]*/) = 0; // [5201]
  virtual HRESULT STDMETHODCALLTYPE set_Position(Owc10_xp::ChartTitlePositionEnum pocpPos/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Position(Owc10_xp::ChartTitlePositionEnum* pocpPos/*[out,retval]*/) = 0; // [1610743814]
  virtual HRESULT STDMETHODCALLTYPE Select(void) = 0; // [5036]
  virtual HRESULT STDMETHODCALLTYPE get_Top(long* ptop/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Top(long ptop/*[in]*/) = 0; // [1610743817]
  virtual HRESULT STDMETHODCALLTYPE get_Left(long* pleft/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Left(long pleft/*[in]*/) = 0; // [1610743819]
  virtual HRESULT STDMETHODCALLTYPE get_Bottom(long* pbottom/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Right(long* pright/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::ChBorder* __fastcall get_Border(void)
  {
    Owc10_xp::ChBorder* ppline;
    OLECHECK(this->get_Border((Owc10_xp::ChBorder**)&ppline));
    return ppline;
  }

  BSTR __fastcall get_Caption(void)
  {
    BSTR pbstr = 0;
    OLECHECK(this->get_Caption((BSTR*)&pbstr));
    return pbstr;
  }

  Owc10_xp::ChFont* __fastcall get_Font(void)
  {
    Owc10_xp::ChFont* ppfont;
    OLECHECK(this->get_Font((Owc10_xp::ChFont**)&ppfont));
    return ppfont;
  }

  Owc10_xp::ChInterior* __fastcall get_Interior(void)
  {
    Owc10_xp::ChInterior* ppinterior;
    OLECHECK(this->get_Interior((Owc10_xp::ChInterior**)&ppinterior));
    return ppinterior;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH ppidispatch;
    OLECHECK(this->get_Parent((LPDISPATCH*)&ppidispatch));
    return ppidispatch;
  }

  Owc10_xp::ChartTitlePositionEnum __fastcall get_Position(void)
  {
    Owc10_xp::ChartTitlePositionEnum pocpPos;
    OLECHECK(this->get_Position((Owc10_xp::ChartTitlePositionEnum*)&pocpPos));
    return pocpPos;
  }

  long __fastcall get_Top(void)
  {
    long ptop;
    OLECHECK(this->get_Top((long*)&ptop));
    return ptop;
  }

  long __fastcall get_Left(void)
  {
    long pleft;
    OLECHECK(this->get_Left((long*)&pleft));
    return pleft;
  }

  long __fastcall get_Bottom(void)
  {
    long pbottom;
    OLECHECK(this->get_Bottom((long*)&pbottom));
    return pbottom;
  }

  long __fastcall get_Right(void)
  {
    long pright;
    OLECHECK(this->get_Right((long*)&pright));
    return pright;
  }

  Owc10_xp::ChartSelectionsEnum __fastcall get_ObjectType(void)
  {
    Owc10_xp::ChartSelectionsEnum pcs;
    OLECHECK(this->get_ObjectType((Owc10_xp::ChartSelectionsEnum*)&pcs));
    return pcs;
  }


  __property   Owc10_xp::ChBorder* Border = {read = get_Border};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   Owc10_xp::ChFont* Font = {read = get_Font};
  __property   Owc10_xp::ChInterior* Interior = {read = get_Interior};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Owc10_xp::ChartTitlePositionEnum Position = {read = get_Position, write = set_Position};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Bottom = {read = get_Bottom};
  __property   long            Right = {read = get_Right};
  __property   Owc10_xp::ChartSelectionsEnum ObjectType = {read = get_ObjectType};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ChCategoryLabels
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {EDF774DC-D540-40F4-99F2-75C83379CAA8}
// *********************************************************************//
interface ChCategoryLabels  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_LevelCount(long* pclabel/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ItemCount(long Level/*[in,def,opt]*/, 
                                                  long* pcitem/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Owc10_xp::ChAxis** ppaxis/*[out,retval]*/) = 0; // [5201]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, long Level/*[in,def,opt]*/, 
                                             Owc10_xp::ChCategoryLabel** ppCategoryLabel/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_PivotAxis(Owc10_xp::PivotResultAxis** ppaxis/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_LevelCount(void)
  {
    long pclabel;
    OLECHECK(this->get_LevelCount((long*)&pclabel));
    return pclabel;
  }

  long __fastcall get_ItemCount(long Level/*[in,def,opt]*/)
  {
    long pcitem;
    OLECHECK(this->get_ItemCount(Level, (long*)&pcitem));
    return pcitem;
  }

  Owc10_xp::ChAxis* __fastcall get_Parent(void)
  {
    Owc10_xp::ChAxis* ppaxis;
    OLECHECK(this->get_Parent((Owc10_xp::ChAxis**)&ppaxis));
    return ppaxis;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunk));
    return ppunk;
  }

  Owc10_xp::ChCategoryLabel* __fastcall get_Item(VARIANT Index/*[in]*/, long Level/*[in,def,opt]*/)
  {
    Owc10_xp::ChCategoryLabel* ppCategoryLabel;
    OLECHECK(this->get_Item(Index, Level, (Owc10_xp::ChCategoryLabel**)&ppCategoryLabel));
    return ppCategoryLabel;
  }

  Owc10_xp::PivotResultAxis* __fastcall get_PivotAxis(void)
  {
    Owc10_xp::PivotResultAxis* ppaxis;
    OLECHECK(this->get_PivotAxis((Owc10_xp::PivotResultAxis**)&ppaxis));
    return ppaxis;
  }


  __property   long            LevelCount = {read = get_LevelCount};
  __property   Owc10_xp::ChAxis* Parent = {read = get_Parent};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   Owc10_xp::PivotResultAxis* PivotAxis = {read = get_PivotAxis};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ChCategoryLabel
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D4765783-5F64-4A53-BD65-66839B65B4C9}
// *********************************************************************//
interface ChCategoryLabel  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Caption(BSTR* pbstr/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_PivotObject(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Level(long* pLevel/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Index(long* pIndex/*[out,retval]*/) = 0; // [5204]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Owc10_xp::ChAxis** ppaxis/*[out,retval]*/) = 0; // [5201]
  virtual HRESULT STDMETHODCALLTYPE get_ParentLabel(Owc10_xp::ChCategoryLabel** pplabel/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Select(void) = 0; // [5036]
  virtual HRESULT STDMETHODCALLTYPE get_Top(long* ptop/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Left(long* pleft/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Bottom(long* pbottom/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Right(long* pright/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Caption(void)
  {
    BSTR pbstr = 0;
    OLECHECK(this->get_Caption((BSTR*)&pbstr));
    return pbstr;
  }

  LPDISPATCH __fastcall get_PivotObject(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_PivotObject((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  long __fastcall get_Level(void)
  {
    long pLevel;
    OLECHECK(this->get_Level((long*)&pLevel));
    return pLevel;
  }

  long __fastcall get_Index(void)
  {
    long pIndex;
    OLECHECK(this->get_Index((long*)&pIndex));
    return pIndex;
  }

  Owc10_xp::ChAxis* __fastcall get_Parent(void)
  {
    Owc10_xp::ChAxis* ppaxis;
    OLECHECK(this->get_Parent((Owc10_xp::ChAxis**)&ppaxis));
    return ppaxis;
  }

  Owc10_xp::ChCategoryLabel* __fastcall get_ParentLabel(void)
  {
    Owc10_xp::ChCategoryLabel* pplabel;
    OLECHECK(this->get_ParentLabel((Owc10_xp::ChCategoryLabel**)&pplabel));
    return pplabel;
  }

  long __fastcall get_Top(void)
  {
    long ptop;
    OLECHECK(this->get_Top((long*)&ptop));
    return ptop;
  }

  long __fastcall get_Left(void)
  {
    long pleft;
    OLECHECK(this->get_Left((long*)&pleft));
    return pleft;
  }

  long __fastcall get_Bottom(void)
  {
    long pbottom;
    OLECHECK(this->get_Bottom((long*)&pbottom));
    return pbottom;
  }

  long __fastcall get_Right(void)
  {
    long pright;
    OLECHECK(this->get_Right((long*)&pright));
    return pright;
  }

  Owc10_xp::ChartSelectionsEnum __fastcall get_ObjectType(void)
  {
    Owc10_xp::ChartSelectionsEnum pcs;
    OLECHECK(this->get_ObjectType((Owc10_xp::ChartSelectionsEnum*)&pcs));
    return pcs;
  }


  __property   BSTR            Caption = {read = get_Caption};
  __property   LPDISPATCH      PivotObject = {read = get_PivotObject};
  __property   long            Level = {read = get_Level};
  __property   long            Index = {read = get_Index};
  __property   Owc10_xp::ChAxis* Parent = {read = get_Parent};
  __property   Owc10_xp::ChCategoryLabel* ParentLabel = {read = get_ParentLabel};
  __property   long            Top = {read = get_Top};
  __property   long            Left = {read = get_Left};
  __property   long            Bottom = {read = get_Bottom};
  __property   long            Right = {read = get_Right};
  __property   Owc10_xp::ChartSelectionsEnum ObjectType = {read = get_ObjectType};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PivotResultAxis
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D1AFFCE4-FCE5-11D2-8F35-00600893B533}
// *********************************************************************//
interface PivotResultAxis  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Data(Owc10_xp::PivotData** Data/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_SourceAxis(Owc10_xp::PivotGroupAxis** Axis/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Label(Owc10_xp::PivotResultLabel** Label/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Left(long* Left/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Top(long* Top/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Width(long* Width/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Height(long* Height/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::PivotData* __fastcall get_Data(void)
  {
    Owc10_xp::PivotData* Data;
    OLECHECK(this->get_Data((Owc10_xp::PivotData**)&Data));
    return Data;
  }

  Owc10_xp::PivotGroupAxis* __fastcall get_SourceAxis(void)
  {
    Owc10_xp::PivotGroupAxis* Axis;
    OLECHECK(this->get_SourceAxis((Owc10_xp::PivotGroupAxis**)&Axis));
    return Axis;
  }

  Owc10_xp::PivotResultLabel* __fastcall get_Label(void)
  {
    Owc10_xp::PivotResultLabel* Label;
    OLECHECK(this->get_Label((Owc10_xp::PivotResultLabel**)&Label));
    return Label;
  }

  long __fastcall get_Left(void)
  {
    long Left;
    OLECHECK(this->get_Left((long*)&Left));
    return Left;
  }

  long __fastcall get_Top(void)
  {
    long Top;
    OLECHECK(this->get_Top((long*)&Top));
    return Top;
  }

  long __fastcall get_Width(void)
  {
    long Width;
    OLECHECK(this->get_Width((long*)&Width));
    return Width;
  }

  long __fastcall get_Height(void)
  {
    long Height;
    OLECHECK(this->get_Height((long*)&Height));
    return Height;
  }


  __property   Owc10_xp::PivotData* Data = {read = get_Data};
  __property   Owc10_xp::PivotGroupAxis* SourceAxis = {read = get_SourceAxis};
  __property   Owc10_xp::PivotResultLabel* Label = {read = get_Label};
  __property   long            Left = {read = get_Left};
  __property   long            Top = {read = get_Top};
  __property   long            Width = {read = get_Width};
  __property   long            Height = {read = get_Height};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PivotResultGroupAxis
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2C8CED10-01AF-11D3-8F35-00600893B533}
// *********************************************************************//
interface PivotResultGroupAxis  : public Owc10_xp::PivotResultAxis
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Fields(Owc10_xp::PivotFields** Fields/*[out,retval]*/) = 0; // [1610809344]
  virtual HRESULT STDMETHODCALLTYPE get_GroupFields(Owc10_xp::PivotResultGroupFields** GroupFields/*[out,retval]*/) = 0; // [1610809345]
  virtual HRESULT STDMETHODCALLTYPE get_Member(Owc10_xp::PivotRowMember** Member/*[out,retval]*/) = 0; // [1610809346]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::PivotFields* __fastcall get_Fields(void)
  {
    Owc10_xp::PivotFields* Fields;
    OLECHECK(this->get_Fields((Owc10_xp::PivotFields**)&Fields));
    return Fields;
  }

  Owc10_xp::PivotResultGroupFields* __fastcall get_GroupFields(void)
  {
    Owc10_xp::PivotResultGroupFields* GroupFields;
    OLECHECK(this->get_GroupFields((Owc10_xp::PivotResultGroupFields**)&GroupFields));
    return GroupFields;
  }

  Owc10_xp::PivotRowMember* __fastcall get_Member(void)
  {
    Owc10_xp::PivotRowMember* Member;
    OLECHECK(this->get_Member((Owc10_xp::PivotRowMember**)&Member));
    return Member;
  }


  __property   Owc10_xp::PivotFields* Fields = {read = get_Fields};
  __property   Owc10_xp::PivotResultGroupFields* GroupFields = {read = get_GroupFields};
  __property   Owc10_xp::PivotRowMember* Member = {read = get_Member};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PivotData
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B30-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface PivotData  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_View(Owc10_xp::PivotView** View/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_RowAxis(Owc10_xp::PivotResultRowAxis** RowAxis/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ColumnAxis(Owc10_xp::PivotResultColumnAxis** ColumnAxis/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_FilterAxis(Owc10_xp::PivotResultFilterAxis** FilterAxis/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DataAxis(Owc10_xp::PivotResultDataAxis** DataAxis/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Left(Owc10_xp::PivotColumnMember** Left/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _set_Left(Owc10_xp::PivotColumnMember* Left/*[in]*/) = 0; // [1610743813]
  virtual HRESULT STDMETHODCALLTYPE get_Top(Owc10_xp::PivotAxisMember** Top/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _set_Top(Owc10_xp::PivotAxisMember* Top/*[in]*/) = 0; // [1610743815]
  virtual HRESULT STDMETHODCALLTYPE get_Cells(Owc10_xp::PivotAxisMember* Row/*[in]*/, 
                                              Owc10_xp::PivotColumnMember* Column/*[in]*/, 
                                              Owc10_xp::PivotCell** Cell/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DetailLeft(Owc10_xp::PivotColumnMember* Column/*[in]*/, 
                                                   long* DetailLeft/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_DetailLeft(Owc10_xp::PivotColumnMember* Column/*[in]*/, 
                                                   long DetailLeft/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Range(Owc10_xp::PivotCell* TopLeft/*[in]*/, 
                                              Owc10_xp::PivotCell* BottomRight/*[in]*/, 
                                              Owc10_xp::PivotRange** Range/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Left2(long* Left2/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Top2(long* Top2/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Label(Owc10_xp::PivotResultLabel** Label/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE MoveTop(Owc10_xp::PivotAxisMember* Top/*[in]*/, 
                                            long TopOffset/*[in]*/, 
                                            VARIANT_BOOL Update/*[in,def,opt]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE MoveLeft(Owc10_xp::PivotColumnMember* Left/*[in]*/, 
                                             long LeftOffset/*[in]*/, 
                                             VARIANT_BOOL Update/*[in,def,opt]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Control(Owc10_xp::IPivotControl** Control/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_RowMembers(Owc10_xp::PivotRowMembers** RowMembers/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ColumnMembers(Owc10_xp::PivotColumnMembers** ColumnMembers/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_CurrentCell(Owc10_xp::PivotCell** Cell/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_LeftOffset(long* LeftOffset/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_LeftOffset(long LeftOffset/*[in]*/) = 0; // [1610743830]
  virtual HRESULT STDMETHODCALLTYPE get_TopOffset(long* TopOffset/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_TopOffset(long TopOffset/*[in]*/) = 0; // [1610743832]
  virtual HRESULT STDMETHODCALLTYPE get_ViewportTop(long* ViewportTop/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_ViewportTop(long ViewportTop/*[in]*/) = 0; // [1610743834]
  virtual HRESULT STDMETHODCALLTYPE get_ViewportLeft(long* ViewportLeft/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_ViewportLeft(long ViewportLeft/*[in]*/) = 0; // [1610743836]
  virtual HRESULT STDMETHODCALLTYPE get_CellsEx(Owc10_xp::PivotAxisMember* Row/*[in]*/, 
                                                Owc10_xp::PivotColumnMember* Column/*[in]*/, 
                                                Owc10_xp::PivotPageMember* Page/*[in]*/, 
                                                Owc10_xp::PivotCell** Cell/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_PageAxis(Owc10_xp::PivotResultPageAxis** PageAxis/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Recordset(Adodb_xp::Recordset** Recordset/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ShowDetails(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE HideDetails(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_IsConsistent(VARIANT_BOOL* IsConsistent/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::PivotView* __fastcall get_View(void)
  {
    Owc10_xp::PivotView* View;
    OLECHECK(this->get_View((Owc10_xp::PivotView**)&View));
    return View;
  }

  Owc10_xp::PivotResultRowAxis* __fastcall get_RowAxis(void)
  {
    Owc10_xp::PivotResultRowAxis* RowAxis;
    OLECHECK(this->get_RowAxis((Owc10_xp::PivotResultRowAxis**)&RowAxis));
    return RowAxis;
  }

  Owc10_xp::PivotResultColumnAxis* __fastcall get_ColumnAxis(void)
  {
    Owc10_xp::PivotResultColumnAxis* ColumnAxis;
    OLECHECK(this->get_ColumnAxis((Owc10_xp::PivotResultColumnAxis**)&ColumnAxis));
    return ColumnAxis;
  }

  Owc10_xp::PivotResultFilterAxis* __fastcall get_FilterAxis(void)
  {
    Owc10_xp::PivotResultFilterAxis* FilterAxis;
    OLECHECK(this->get_FilterAxis((Owc10_xp::PivotResultFilterAxis**)&FilterAxis));
    return FilterAxis;
  }

  Owc10_xp::PivotResultDataAxis* __fastcall get_DataAxis(void)
  {
    Owc10_xp::PivotResultDataAxis* DataAxis;
    OLECHECK(this->get_DataAxis((Owc10_xp::PivotResultDataAxis**)&DataAxis));
    return DataAxis;
  }

  Owc10_xp::PivotColumnMember* __fastcall get_Left(void)
  {
    Owc10_xp::PivotColumnMember* Left;
    OLECHECK(this->get_Left((Owc10_xp::PivotColumnMember**)&Left));
    return Left;
  }

  Owc10_xp::PivotAxisMember* __fastcall get_Top(void)
  {
    Owc10_xp::PivotAxisMember* Top;
    OLECHECK(this->get_Top((Owc10_xp::PivotAxisMember**)&Top));
    return Top;
  }

  Owc10_xp::PivotCell* __fastcall get_Cells(Owc10_xp::PivotAxisMember* Row/*[in]*/, 
                                            Owc10_xp::PivotColumnMember* Column/*[in]*/)
  {
    Owc10_xp::PivotCell* Cell;
    OLECHECK(this->get_Cells(Row, Column, (Owc10_xp::PivotCell**)&Cell));
    return Cell;
  }

  long __fastcall get_DetailLeft(Owc10_xp::PivotColumnMember* Column/*[in]*/)
  {
    long DetailLeft;
    OLECHECK(this->get_DetailLeft(Column, (long*)&DetailLeft));
    return DetailLeft;
  }

  Owc10_xp::PivotRange* __fastcall get_Range(Owc10_xp::PivotCell* TopLeft/*[in]*/, 
                                             Owc10_xp::PivotCell* BottomRight/*[in]*/)
  {
    Owc10_xp::PivotRange* Range;
    OLECHECK(this->get_Range(TopLeft, BottomRight, (Owc10_xp::PivotRange**)&Range));
    return Range;
  }

  long __fastcall get_Left2(void)
  {
    long Left2;
    OLECHECK(this->get_Left2((long*)&Left2));
    return Left2;
  }

  long __fastcall get_Top2(void)
  {
    long Top2;
    OLECHECK(this->get_Top2((long*)&Top2));
    return Top2;
  }

  Owc10_xp::PivotResultLabel* __fastcall get_Label(void)
  {
    Owc10_xp::PivotResultLabel* Label;
    OLECHECK(this->get_Label((Owc10_xp::PivotResultLabel**)&Label));
    return Label;
  }

  Owc10_xp::IPivotControl* __fastcall get_Control(void)
  {
    Owc10_xp::IPivotControl* Control;
    OLECHECK(this->get_Control((Owc10_xp::IPivotControl**)&Control));
    return Control;
  }

  Owc10_xp::PivotRowMembers* __fastcall get_RowMembers(void)
  {
    Owc10_xp::PivotRowMembers* RowMembers;
    OLECHECK(this->get_RowMembers((Owc10_xp::PivotRowMembers**)&RowMembers));
    return RowMembers;
  }

  Owc10_xp::PivotColumnMembers* __fastcall get_ColumnMembers(void)
  {
    Owc10_xp::PivotColumnMembers* ColumnMembers;
    OLECHECK(this->get_ColumnMembers((Owc10_xp::PivotColumnMembers**)&ColumnMembers));
    return ColumnMembers;
  }

  Owc10_xp::PivotCell* __fastcall get_CurrentCell(void)
  {
    Owc10_xp::PivotCell* Cell;
    OLECHECK(this->get_CurrentCell((Owc10_xp::PivotCell**)&Cell));
    return Cell;
  }

  long __fastcall get_LeftOffset(void)
  {
    long LeftOffset;
    OLECHECK(this->get_LeftOffset((long*)&LeftOffset));
    return LeftOffset;
  }

  long __fastcall get_TopOffset(void)
  {
    long TopOffset;
    OLECHECK(this->get_TopOffset((long*)&TopOffset));
    return TopOffset;
  }

  long __fastcall get_ViewportTop(void)
  {
    long ViewportTop;
    OLECHECK(this->get_ViewportTop((long*)&ViewportTop));
    return ViewportTop;
  }

  long __fastcall get_ViewportLeft(void)
  {
    long ViewportLeft;
    OLECHECK(this->get_ViewportLeft((long*)&ViewportLeft));
    return ViewportLeft;
  }

  Owc10_xp::PivotCell* __fastcall get_CellsEx(Owc10_xp::PivotAxisMember* Row/*[in]*/, 
                                              Owc10_xp::PivotColumnMember* Column/*[in]*/, 
                                              Owc10_xp::PivotPageMember* Page/*[in]*/)
  {
    Owc10_xp::PivotCell* Cell;
    OLECHECK(this->get_CellsEx(Row, Column, Page, (Owc10_xp::PivotCell**)&Cell));
    return Cell;
  }

  Owc10_xp::PivotResultPageAxis* __fastcall get_PageAxis(void)
  {
    Owc10_xp::PivotResultPageAxis* PageAxis;
    OLECHECK(this->get_PageAxis((Owc10_xp::PivotResultPageAxis**)&PageAxis));
    return PageAxis;
  }

  Adodb_xp::Recordset* __fastcall get_Recordset(void)
  {
    Adodb_xp::Recordset* Recordset;
    OLECHECK(this->get_Recordset((Adodb_xp::Recordset**)&Recordset));
    return Recordset;
  }

  VARIANT_BOOL __fastcall get_IsConsistent(void)
  {
    VARIANT_BOOL IsConsistent;
    OLECHECK(this->get_IsConsistent((VARIANT_BOOL*)&IsConsistent));
    return IsConsistent;
  }


  __property   Owc10_xp::PivotView* View = {read = get_View};
  __property   Owc10_xp::PivotResultRowAxis* RowAxis = {read = get_RowAxis};
  __property   Owc10_xp::PivotResultColumnAxis* ColumnAxis = {read = get_ColumnAxis};
  __property   Owc10_xp::PivotResultFilterAxis* FilterAxis = {read = get_FilterAxis};
  __property   Owc10_xp::PivotResultDataAxis* DataAxis = {read = get_DataAxis};
  __property   Owc10_xp::PivotColumnMember* Left = {read = get_Left, write = _set_Left};
  __property   Owc10_xp::PivotAxisMember* Top = {read = get_Top, write = _set_Top};
  __property   long            Left2 = {read = get_Left2};
  __property   long            Top2 = {read = get_Top2};
  __property   Owc10_xp::PivotResultLabel* Label = {read = get_Label};
  __property   Owc10_xp::IPivotControl* Control = {read = get_Control};
  __property   Owc10_xp::PivotRowMembers* RowMembers = {read = get_RowMembers};
  __property   Owc10_xp::PivotColumnMembers* ColumnMembers = {read = get_ColumnMembers};
  __property   Owc10_xp::PivotCell* CurrentCell = {read = get_CurrentCell};
  __property   long            LeftOffset = {read = get_LeftOffset, write = set_LeftOffset};
  __property   long            TopOffset = {read = get_TopOffset, write = set_TopOffset};
  __property   long            ViewportTop = {read = get_ViewportTop, write = set_ViewportTop};
  __property   long            ViewportLeft = {read = get_ViewportLeft, write = set_ViewportLeft};
  __property   Owc10_xp::PivotResultPageAxis* PageAxis = {read = get_PageAxis};
  __property   Adodb_xp::Recordset* Recordset = {read = get_Recordset};
  __property   VARIANT_BOOL    IsConsistent = {read = get_IsConsistent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PivotView
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B29-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface PivotView  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_FieldSets(Owc10_xp::PivotFieldSets** FieldSets/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_RowAxis(Owc10_xp::PivotAxis** Axis/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ColumnAxis(Owc10_xp::PivotAxis** Axis/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DataAxis(Owc10_xp::PivotDataAxis** Axis/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_FilterAxis(Owc10_xp::PivotFilterAxis** Axis/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Label(Owc10_xp::PivotLabel** Label/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_TitleBar(Owc10_xp::PivotLabel** Label/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Totals(Owc10_xp::PivotTotals** Totals/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_TotalFont(Owc10_xp::PivotFont** Font/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_TotalForeColor(VARIANT* Color/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_TotalForeColor(VARIANT Color/*[in]*/) = 0; // [1610743817]
  virtual HRESULT STDMETHODCALLTYPE get_TotalBackColor(VARIANT* Color/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_TotalBackColor(VARIANT Color/*[in]*/) = 0; // [1610743819]
  virtual HRESULT STDMETHODCALLTYPE get_HeaderFont(Owc10_xp::PivotFont** Font/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_HeaderForeColor(VARIANT* Color/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_HeaderForeColor(VARIANT Color/*[in]*/) = 0; // [1610743822]
  virtual HRESULT STDMETHODCALLTYPE get_HeaderBackColor(VARIANT* Color/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_HeaderBackColor(VARIANT Color/*[in]*/) = 0; // [1610743824]
  virtual HRESULT STDMETHODCALLTYPE get_HeaderHAlignment(Owc10_xp::PivotHAlignmentEnum* HAlignment/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_HeaderHAlignment(Owc10_xp::PivotHAlignmentEnum HAlignment/*[in]*/) = 0; // [1610743826]
  virtual HRESULT STDMETHODCALLTYPE get_HeaderHeight(long* Height/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_FieldLabelFont(Owc10_xp::PivotFont** Font/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_FieldLabelForeColor(VARIANT* Color/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_FieldLabelForeColor(VARIANT Color/*[in]*/) = 0; // [1610743830]
  virtual HRESULT STDMETHODCALLTYPE get_FieldLabelBackColor(VARIANT* Color/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_FieldLabelBackColor(VARIANT Color/*[in]*/) = 0; // [1610743832]
  virtual HRESULT STDMETHODCALLTYPE get_FieldLabelHeight(long* Height/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DetailRowHeight(long* Height/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_DetailRowHeight(long Height/*[in]*/) = 0; // [1610743835]
  virtual HRESULT STDMETHODCALLTYPE get_DetailSortOrder(VARIANT* DetailSortOrder/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_DetailSortOrder(VARIANT DetailSortOrder/*[in]*/) = 0; // [1610743837]
  virtual HRESULT STDMETHODCALLTYPE get_TotalOrientation(Owc10_xp::PivotViewTotalOrientationEnum* TotalOrientation/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_TotalOrientation(Owc10_xp::PivotViewTotalOrientationEnum TotalOrientation/*[in]*/) = 0; // [1610743839]
  virtual HRESULT STDMETHODCALLTYPE AddTotal(BSTR Name/*[in]*/, Owc10_xp::PivotField* Field/*[in]*/, 
                                             Owc10_xp::PivotTotalFunctionEnum Function/*[in]*/, 
                                             Owc10_xp::PivotTotal** Total/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE DeleteTotal(VARIANT Total/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE AddFieldSet(BSTR Name/*[in]*/, 
                                                Owc10_xp::PivotFieldSet** FieldSet/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE DeleteFieldSet(VARIANT FieldSet/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE AutoLayout(long MaxDataFields/*[in,def,opt]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_TotalAllMembers(VARIANT_BOOL* TotalAllMembers/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_TotalAllMembers(VARIANT_BOOL TotalAllMembers/*[in]*/) = 0; // [1610743846]
  virtual HRESULT STDMETHODCALLTYPE get_DetailMaxWidth(long* DetailMaxWidth/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_DetailMaxWidth(long DetailMaxWidth/*[in]*/) = 0; // [1610743848]
  virtual HRESULT STDMETHODCALLTYPE get_DetailMaxHeight(long* DetailMaxHeight/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_DetailMaxHeight(long DetailMaxHeight/*[in]*/) = 0; // [1610743850]
  virtual HRESULT STDMETHODCALLTYPE get_DetailAutoFit(VARIANT_BOOL* DetailAutoFit/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_DetailAutoFit(VARIANT_BOOL DetailAutoFit/*[in]*/) = 0; // [1610743852]
  virtual HRESULT STDMETHODCALLTYPE get_IsFiltered(VARIANT_BOOL* IsFiltered/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_IsFiltered(VARIANT_BOOL IsFiltered/*[in]*/) = 0; // [1610743854]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayCalculatedMembers(VARIANT_BOOL* DisplayCalculatedMembers/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayCalculatedMembers(VARIANT_BOOL DisplayCalculatedMembers/*[in]*/) = 0; // [1610743856]
  virtual HRESULT STDMETHODCALLTYPE get_UseProviderFormatting(VARIANT_BOOL* UseProviderFormatting/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_UseProviderFormatting(VARIANT_BOOL UseProviderFormatting/*[in]*/) = 0; // [1610743858]
  virtual HRESULT STDMETHODCALLTYPE get_ExpandDetails(Owc10_xp::PivotTableExpandEnum* ExpandDetails/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_ExpandDetails(Owc10_xp::PivotTableExpandEnum ExpandDetails/*[in]*/) = 0; // [1610743860]
  virtual HRESULT STDMETHODCALLTYPE get_Control(Owc10_xp::IPivotControl** Control/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE AddCalculatedTotal(BSTR Name/*[in]*/, BSTR Caption/*[in]*/, 
                                                       BSTR Expression/*[in]*/, 
                                                       long SolveOrder/*[in,def,opt]*/, 
                                                       Owc10_xp::PivotTotal** Total/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_PageAxis(Owc10_xp::PivotAxis** Axis/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ExpandMembers(Owc10_xp::PivotTableExpandEnum* ExpandDetails/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_ExpandMembers(Owc10_xp::PivotTableExpandEnum ExpandDetails/*[in]*/) = 0; // [1610743865]
  virtual HRESULT STDMETHODCALLTYPE get_AllowEdits(VARIANT_BOOL* AllowEdits/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_AllowEdits(VARIANT_BOOL AllowEdits/*[in]*/) = 0; // [1610743867]
  virtual HRESULT STDMETHODCALLTYPE get_AllowAdditions(VARIANT_BOOL* AllowAdditions/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_AllowAdditions(VARIANT_BOOL AllowAdditions/*[in]*/) = 0; // [1610743869]
  virtual HRESULT STDMETHODCALLTYPE get_AllowDeletions(VARIANT_BOOL* AllowDeletions/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_AllowDeletions(VARIANT_BOOL AllowDeletions/*[in]*/) = 0; // [1610743871]
  virtual HRESULT STDMETHODCALLTYPE get_PropertyCaptionFont(Owc10_xp::PivotFont** Font/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_PropertyValueFont(Owc10_xp::PivotFont** Font/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_PropertyCaptionHAlignment(Owc10_xp::PivotHAlignmentEnum* HAlignment/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_PropertyCaptionHAlignment(Owc10_xp::PivotHAlignmentEnum HAlignment/*[in]*/) = 0; // [1610743875]
  virtual HRESULT STDMETHODCALLTYPE get_PropertyValueHAlignment(Owc10_xp::PivotHAlignmentEnum* HAlignment/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_PropertyValueHAlignment(Owc10_xp::PivotHAlignmentEnum HAlignment/*[in]*/) = 0; // [1610743877]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayCellColor(VARIANT_BOOL* DisplayCellColor/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayCellColor(VARIANT_BOOL DisplayCellColor/*[in]*/) = 0; // [1610743879]
  virtual HRESULT STDMETHODCALLTYPE get_FilterCrossJoins(VARIANT_BOOL* FilterCrossJoins/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_FilterCrossJoins(VARIANT_BOOL FilterCrossJoins/*[in]*/) = 0; // [1610743881]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::PivotFieldSets* __fastcall get_FieldSets(void)
  {
    Owc10_xp::PivotFieldSets* FieldSets;
    OLECHECK(this->get_FieldSets((Owc10_xp::PivotFieldSets**)&FieldSets));
    return FieldSets;
  }

  Owc10_xp::PivotAxis* __fastcall get_RowAxis(void)
  {
    Owc10_xp::PivotAxis* Axis;
    OLECHECK(this->get_RowAxis((Owc10_xp::PivotAxis**)&Axis));
    return Axis;
  }

  Owc10_xp::PivotAxis* __fastcall get_ColumnAxis(void)
  {
    Owc10_xp::PivotAxis* Axis;
    OLECHECK(this->get_ColumnAxis((Owc10_xp::PivotAxis**)&Axis));
    return Axis;
  }

  Owc10_xp::PivotDataAxis* __fastcall get_DataAxis(void)
  {
    Owc10_xp::PivotDataAxis* Axis;
    OLECHECK(this->get_DataAxis((Owc10_xp::PivotDataAxis**)&Axis));
    return Axis;
  }

  Owc10_xp::PivotFilterAxis* __fastcall get_FilterAxis(void)
  {
    Owc10_xp::PivotFilterAxis* Axis;
    OLECHECK(this->get_FilterAxis((Owc10_xp::PivotFilterAxis**)&Axis));
    return Axis;
  }

  Owc10_xp::PivotLabel* __fastcall get_Label(void)
  {
    Owc10_xp::PivotLabel* Label;
    OLECHECK(this->get_Label((Owc10_xp::PivotLabel**)&Label));
    return Label;
  }

  Owc10_xp::PivotLabel* __fastcall get_TitleBar(void)
  {
    Owc10_xp::PivotLabel* Label;
    OLECHECK(this->get_TitleBar((Owc10_xp::PivotLabel**)&Label));
    return Label;
  }

  Owc10_xp::PivotTotals* __fastcall get_Totals(void)
  {
    Owc10_xp::PivotTotals* Totals;
    OLECHECK(this->get_Totals((Owc10_xp::PivotTotals**)&Totals));
    return Totals;
  }

  Owc10_xp::PivotFont* __fastcall get_TotalFont(void)
  {
    Owc10_xp::PivotFont* Font;
    OLECHECK(this->get_TotalFont((Owc10_xp::PivotFont**)&Font));
    return Font;
  }

  VARIANT __fastcall get_TotalForeColor(void)
  {
    VARIANT Color;
    OLECHECK(this->get_TotalForeColor((VARIANT*)&Color));
    return Color;
  }

  VARIANT __fastcall get_TotalBackColor(void)
  {
    VARIANT Color;
    OLECHECK(this->get_TotalBackColor((VARIANT*)&Color));
    return Color;
  }

  Owc10_xp::PivotFont* __fastcall get_HeaderFont(void)
  {
    Owc10_xp::PivotFont* Font;
    OLECHECK(this->get_HeaderFont((Owc10_xp::PivotFont**)&Font));
    return Font;
  }

  VARIANT __fastcall get_HeaderForeColor(void)
  {
    VARIANT Color;
    OLECHECK(this->get_HeaderForeColor((VARIANT*)&Color));
    return Color;
  }

  VARIANT __fastcall get_HeaderBackColor(void)
  {
    VARIANT Color;
    OLECHECK(this->get_HeaderBackColor((VARIANT*)&Color));
    return Color;
  }

  Owc10_xp::PivotHAlignmentEnum __fastcall get_HeaderHAlignment(void)
  {
    Owc10_xp::PivotHAlignmentEnum HAlignment;
    OLECHECK(this->get_HeaderHAlignment((Owc10_xp::PivotHAlignmentEnum*)&HAlignment));
    return HAlignment;
  }

  long __fastcall get_HeaderHeight(void)
  {
    long Height;
    OLECHECK(this->get_HeaderHeight((long*)&Height));
    return Height;
  }

  Owc10_xp::PivotFont* __fastcall get_FieldLabelFont(void)
  {
    Owc10_xp::PivotFont* Font;
    OLECHECK(this->get_FieldLabelFont((Owc10_xp::PivotFont**)&Font));
    return Font;
  }

  VARIANT __fastcall get_FieldLabelForeColor(void)
  {
    VARIANT Color;
    OLECHECK(this->get_FieldLabelForeColor((VARIANT*)&Color));
    return Color;
  }

  VARIANT __fastcall get_FieldLabelBackColor(void)
  {
    VARIANT Color;
    OLECHECK(this->get_FieldLabelBackColor((VARIANT*)&Color));
    return Color;
  }

  long __fastcall get_FieldLabelHeight(void)
  {
    long Height;
    OLECHECK(this->get_FieldLabelHeight((long*)&Height));
    return Height;
  }

  long __fastcall get_DetailRowHeight(void)
  {
    long Height;
    OLECHECK(this->get_DetailRowHeight((long*)&Height));
    return Height;
  }

  VARIANT __fastcall get_DetailSortOrder(void)
  {
    VARIANT DetailSortOrder;
    OLECHECK(this->get_DetailSortOrder((VARIANT*)&DetailSortOrder));
    return DetailSortOrder;
  }

  Owc10_xp::PivotViewTotalOrientationEnum __fastcall get_TotalOrientation(void)
  {
    Owc10_xp::PivotViewTotalOrientationEnum TotalOrientation;
    OLECHECK(this->get_TotalOrientation((Owc10_xp::PivotViewTotalOrientationEnum*)&TotalOrientation));
    return TotalOrientation;
  }

  Owc10_xp::PivotTotal* __fastcall AddTotal(BSTR Name/*[in]*/, Owc10_xp::PivotField* Field/*[in]*/, 
                                            Owc10_xp::PivotTotalFunctionEnum Function/*[in]*/)
  {
    Owc10_xp::PivotTotal* Total;
    OLECHECK(this->AddTotal(Name, Field, Function, (Owc10_xp::PivotTotal**)&Total));
    return Total;
  }

  Owc10_xp::PivotFieldSet* __fastcall AddFieldSet(BSTR Name/*[in]*/)
  {
    Owc10_xp::PivotFieldSet* FieldSet;
    OLECHECK(this->AddFieldSet(Name, (Owc10_xp::PivotFieldSet**)&FieldSet));
    return FieldSet;
  }

  VARIANT_BOOL __fastcall get_TotalAllMembers(void)
  {
    VARIANT_BOOL TotalAllMembers;
    OLECHECK(this->get_TotalAllMembers((VARIANT_BOOL*)&TotalAllMembers));
    return TotalAllMembers;
  }

  long __fastcall get_DetailMaxWidth(void)
  {
    long DetailMaxWidth;
    OLECHECK(this->get_DetailMaxWidth((long*)&DetailMaxWidth));
    return DetailMaxWidth;
  }

  long __fastcall get_DetailMaxHeight(void)
  {
    long DetailMaxHeight;
    OLECHECK(this->get_DetailMaxHeight((long*)&DetailMaxHeight));
    return DetailMaxHeight;
  }

  VARIANT_BOOL __fastcall get_DetailAutoFit(void)
  {
    VARIANT_BOOL DetailAutoFit;
    OLECHECK(this->get_DetailAutoFit((VARIANT_BOOL*)&DetailAutoFit));
    return DetailAutoFit;
  }

  VARIANT_BOOL __fastcall get_IsFiltered(void)
  {
    VARIANT_BOOL IsFiltered;
    OLECHECK(this->get_IsFiltered((VARIANT_BOOL*)&IsFiltered));
    return IsFiltered;
  }

  VARIANT_BOOL __fastcall get_DisplayCalculatedMembers(void)
  {
    VARIANT_BOOL DisplayCalculatedMembers;
    OLECHECK(this->get_DisplayCalculatedMembers((VARIANT_BOOL*)&DisplayCalculatedMembers));
    return DisplayCalculatedMembers;
  }

  VARIANT_BOOL __fastcall get_UseProviderFormatting(void)
  {
    VARIANT_BOOL UseProviderFormatting;
    OLECHECK(this->get_UseProviderFormatting((VARIANT_BOOL*)&UseProviderFormatting));
    return UseProviderFormatting;
  }

  Owc10_xp::PivotTableExpandEnum __fastcall get_ExpandDetails(void)
  {
    Owc10_xp::PivotTableExpandEnum ExpandDetails;
    OLECHECK(this->get_ExpandDetails((Owc10_xp::PivotTableExpandEnum*)&ExpandDetails));
    return ExpandDetails;
  }

  Owc10_xp::IPivotControl* __fastcall get_Control(void)
  {
    Owc10_xp::IPivotControl* Control;
    OLECHECK(this->get_Control((Owc10_xp::IPivotControl**)&Control));
    return Control;
  }

  Owc10_xp::PivotTotal* __fastcall AddCalculatedTotal(BSTR Name/*[in]*/, BSTR Caption/*[in]*/, 
                                                      BSTR Expression/*[in]*/, 
                                                      long SolveOrder/*[in,def,opt]*/)
  {
    Owc10_xp::PivotTotal* Total;
    OLECHECK(this->AddCalculatedTotal(Name, Caption, Expression, SolveOrder, (Owc10_xp::PivotTotal**)&Total));
    return Total;
  }

  Owc10_xp::PivotAxis* __fastcall get_PageAxis(void)
  {
    Owc10_xp::PivotAxis* Axis;
    OLECHECK(this->get_PageAxis((Owc10_xp::PivotAxis**)&Axis));
    return Axis;
  }

  Owc10_xp::PivotTableExpandEnum __fastcall get_ExpandMembers(void)
  {
    Owc10_xp::PivotTableExpandEnum ExpandDetails;
    OLECHECK(this->get_ExpandMembers((Owc10_xp::PivotTableExpandEnum*)&ExpandDetails));
    return ExpandDetails;
  }

  VARIANT_BOOL __fastcall get_AllowEdits(void)
  {
    VARIANT_BOOL AllowEdits;
    OLECHECK(this->get_AllowEdits((VARIANT_BOOL*)&AllowEdits));
    return AllowEdits;
  }

  VARIANT_BOOL __fastcall get_AllowAdditions(void)
  {
    VARIANT_BOOL AllowAdditions;
    OLECHECK(this->get_AllowAdditions((VARIANT_BOOL*)&AllowAdditions));
    return AllowAdditions;
  }

  VARIANT_BOOL __fastcall get_AllowDeletions(void)
  {
    VARIANT_BOOL AllowDeletions;
    OLECHECK(this->get_AllowDeletions((VARIANT_BOOL*)&AllowDeletions));
    return AllowDeletions;
  }

  Owc10_xp::PivotFont* __fastcall get_PropertyCaptionFont(void)
  {
    Owc10_xp::PivotFont* Font;
    OLECHECK(this->get_PropertyCaptionFont((Owc10_xp::PivotFont**)&Font));
    return Font;
  }

  Owc10_xp::PivotFont* __fastcall get_PropertyValueFont(void)
  {
    Owc10_xp::PivotFont* Font;
    OLECHECK(this->get_PropertyValueFont((Owc10_xp::PivotFont**)&Font));
    return Font;
  }

  Owc10_xp::PivotHAlignmentEnum __fastcall get_PropertyCaptionHAlignment(void)
  {
    Owc10_xp::PivotHAlignmentEnum HAlignment;
    OLECHECK(this->get_PropertyCaptionHAlignment((Owc10_xp::PivotHAlignmentEnum*)&HAlignment));
    return HAlignment;
  }

  Owc10_xp::PivotHAlignmentEnum __fastcall get_PropertyValueHAlignment(void)
  {
    Owc10_xp::PivotHAlignmentEnum HAlignment;
    OLECHECK(this->get_PropertyValueHAlignment((Owc10_xp::PivotHAlignmentEnum*)&HAlignment));
    return HAlignment;
  }

  VARIANT_BOOL __fastcall get_DisplayCellColor(void)
  {
    VARIANT_BOOL DisplayCellColor;
    OLECHECK(this->get_DisplayCellColor((VARIANT_BOOL*)&DisplayCellColor));
    return DisplayCellColor;
  }

  VARIANT_BOOL __fastcall get_FilterCrossJoins(void)
  {
    VARIANT_BOOL FilterCrossJoins;
    OLECHECK(this->get_FilterCrossJoins((VARIANT_BOOL*)&FilterCrossJoins));
    return FilterCrossJoins;
  }


  __property   Owc10_xp::PivotFieldSets* FieldSets = {read = get_FieldSets};
  __property   Owc10_xp::PivotAxis* RowAxis = {read = get_RowAxis};
  __property   Owc10_xp::PivotAxis* ColumnAxis = {read = get_ColumnAxis};
  __property   Owc10_xp::PivotDataAxis* DataAxis = {read = get_DataAxis};
  __property   Owc10_xp::PivotFilterAxis* FilterAxis = {read = get_FilterAxis};
  __property   Owc10_xp::PivotLabel* Label = {read = get_Label};
  __property   Owc10_xp::PivotLabel* TitleBar = {read = get_TitleBar};
  __property   Owc10_xp::PivotTotals* Totals = {read = get_Totals};
  __property   Owc10_xp::PivotFont* TotalFont = {read = get_TotalFont};
  __property   Owc10_xp::PivotFont* HeaderFont = {read = get_HeaderFont};
  __property   Owc10_xp::PivotHAlignmentEnum HeaderHAlignment = {read = get_HeaderHAlignment, write = set_HeaderHAlignment};
  __property   long            HeaderHeight = {read = get_HeaderHeight};
  __property   Owc10_xp::PivotFont* FieldLabelFont = {read = get_FieldLabelFont};
  __property   long            FieldLabelHeight = {read = get_FieldLabelHeight};
  __property   long            DetailRowHeight = {read = get_DetailRowHeight, write = set_DetailRowHeight};
  __property   Owc10_xp::PivotViewTotalOrientationEnum TotalOrientation = {read = get_TotalOrientation, write = set_TotalOrientation};
  __property   VARIANT_BOOL    TotalAllMembers = {read = get_TotalAllMembers, write = set_TotalAllMembers};
  __property   long            DetailMaxWidth = {read = get_DetailMaxWidth, write = set_DetailMaxWidth};
  __property   long            DetailMaxHeight = {read = get_DetailMaxHeight, write = set_DetailMaxHeight};
  __property   VARIANT_BOOL    DetailAutoFit = {read = get_DetailAutoFit, write = set_DetailAutoFit};
  __property   VARIANT_BOOL    IsFiltered = {read = get_IsFiltered, write = set_IsFiltered};
  __property   VARIANT_BOOL    DisplayCalculatedMembers = {read = get_DisplayCalculatedMembers, write = set_DisplayCalculatedMembers};
  __property   VARIANT_BOOL    UseProviderFormatting = {read = get_UseProviderFormatting, write = set_UseProviderFormatting};
  __property   Owc10_xp::PivotTableExpandEnum ExpandDetails = {read = get_ExpandDetails, write = set_ExpandDetails};
  __property   Owc10_xp::IPivotControl* Control = {read = get_Control};
  __property   Owc10_xp::PivotAxis* PageAxis = {read = get_PageAxis};
  __property   Owc10_xp::PivotTableExpandEnum ExpandMembers = {read = get_ExpandMembers, write = set_ExpandMembers};
  __property   VARIANT_BOOL    AllowEdits = {read = get_AllowEdits, write = set_AllowEdits};
  __property   VARIANT_BOOL    AllowAdditions = {read = get_AllowAdditions, write = set_AllowAdditions};
  __property   VARIANT_BOOL    AllowDeletions = {read = get_AllowDeletions, write = set_AllowDeletions};
  __property   Owc10_xp::PivotFont* PropertyCaptionFont = {read = get_PropertyCaptionFont};
  __property   Owc10_xp::PivotFont* PropertyValueFont = {read = get_PropertyValueFont};
  __property   Owc10_xp::PivotHAlignmentEnum PropertyCaptionHAlignment = {read = get_PropertyCaptionHAlignment, write = set_PropertyCaptionHAlignment};
  __property   Owc10_xp::PivotHAlignmentEnum PropertyValueHAlignment = {read = get_PropertyValueHAlignment, write = set_PropertyValueHAlignment};
  __property   VARIANT_BOOL    DisplayCellColor = {read = get_DisplayCellColor, write = set_DisplayCellColor};
  __property   VARIANT_BOOL    FilterCrossJoins = {read = get_FilterCrossJoins, write = set_FilterCrossJoins};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PivotFieldSets
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AAD-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface PivotFieldSets  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Owc10_xp::PivotFieldSet** FieldSet/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::PivotFieldSet* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Owc10_xp::PivotFieldSet* FieldSet;
    OLECHECK(this->get_Item(Index, (Owc10_xp::PivotFieldSet**)&FieldSet));
    return FieldSet;
  }

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunk));
    return ppunk;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PivotFieldSet
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AAE-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface PivotFieldSet  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [6023]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR Name/*[in]*/) = 0; // [6023]
  virtual HRESULT STDMETHODCALLTYPE get_Caption(BSTR* Caption/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Caption(BSTR Caption/*[in]*/) = 0; // [1610743810]
  virtual HRESULT STDMETHODCALLTYPE get_Fields(Owc10_xp::PivotFields** Fields/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Members(Owc10_xp::PivotMembers** Members/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Orientation(Owc10_xp::PivotFieldSetOrientationEnum* Orientation/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Owc10_xp::PivotFieldSetTypeEnum* Type/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE AddCalculatedField(BSTR Name/*[in]*/, BSTR Caption/*[in]*/, 
                                                       BSTR DataField/*[in]*/, 
                                                       BSTR Expression/*[in]*/, 
                                                       Owc10_xp::PivotField** Field/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_BoundField(Owc10_xp::PivotField** Field/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_UniqueName(BSTR* UniqueName/*[out,retval]*/) = 0; // [6022]
  virtual HRESULT STDMETHODCALLTYPE get_Width(long* Width/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Width(long Width/*[in]*/) = 0; // [1610743819]
  virtual HRESULT STDMETHODCALLTYPE get_DefaultMember(Owc10_xp::PivotMember** DefaultMember/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Member(Owc10_xp::PivotMember** Member/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_AllMember(Owc10_xp::PivotMember** AllMember/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_CompareOrderedMembersBy(Owc10_xp::PivotMembersCompareByEnum* CompareOrderedMembersBy/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_CompareOrderedMembersBy(Owc10_xp::PivotMembersCompareByEnum CompareOrderedMembersBy/*[in]*/) = 0; // [1610743824]
  virtual HRESULT STDMETHODCALLTYPE get_View(Owc10_xp::PivotView** View/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_CreateFilterUpdate(Owc10_xp::PivotFilterUpdate** FilterUpdate/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_AllowMultiFilter(VARIANT_BOOL* Allow/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_AllowMultiFilter(VARIANT_BOOL Allow/*[in]*/) = 0; // [1610743828]
  virtual HRESULT STDMETHODCALLTYPE get_FilterCaption(BSTR* FilterCaption/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_AllIncludeExclude(Owc10_xp::PivotFieldSetAllIncludeExcludeEnum* AllIncludeExclude/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_AllIncludeExclude(Owc10_xp::PivotFieldSetAllIncludeExcludeEnum AllIncludeExclude/*[in]*/) = 0; // [1610743831]
  virtual HRESULT STDMETHODCALLTYPE AddCustomGroupField(BSTR Name/*[in,def,opt]*/, 
                                                        BSTR Caption/*[in,def,opt]*/, 
                                                        VARIANT Before/*[in,def,opt]*/, 
                                                        Owc10_xp::PivotField** Field/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE DeleteField(VARIANT Field/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_CompareMemberCaptionsBy(Owc10_xp::PivotMembersCompareByEnum* CompareMemberCaptionsBy/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_CompareMemberCaptionsBy(Owc10_xp::PivotMembersCompareByEnum CompareMemberCaptionsBy/*[in]*/) = 0; // [1610743835]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayInFieldList(VARIANT_BOOL* DisplayInFieldList/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayInFieldList(VARIANT_BOOL DisplayInFieldList/*[in]*/) = 0; // [1610743837]
  virtual HRESULT STDMETHODCALLTYPE get_AlwaysIncludeInCube(VARIANT_BOOL* AlwaysInclude/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_AlwaysIncludeInCube(VARIANT_BOOL AlwaysInclude/*[in]*/) = 0; // [1610743839]
  virtual HRESULT STDMETHODCALLTYPE get_FindMember(VARIANT NameOrPath/*[in]*/, 
                                                   Owc10_xp::PivotMemberFindFormatEnum Format/*[in,def,opt]*/, 
                                                   Owc10_xp::PivotMember** Member/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  BSTR __fastcall get_Caption(void)
  {
    BSTR Caption = 0;
    OLECHECK(this->get_Caption((BSTR*)&Caption));
    return Caption;
  }

  Owc10_xp::PivotFields* __fastcall get_Fields(void)
  {
    Owc10_xp::PivotFields* Fields;
    OLECHECK(this->get_Fields((Owc10_xp::PivotFields**)&Fields));
    return Fields;
  }

  Owc10_xp::PivotMembers* __fastcall get_Members(void)
  {
    Owc10_xp::PivotMembers* Members;
    OLECHECK(this->get_Members((Owc10_xp::PivotMembers**)&Members));
    return Members;
  }

  Owc10_xp::PivotFieldSetOrientationEnum __fastcall get_Orientation(void)
  {
    Owc10_xp::PivotFieldSetOrientationEnum Orientation;
    OLECHECK(this->get_Orientation((Owc10_xp::PivotFieldSetOrientationEnum*)&Orientation));
    return Orientation;
  }

  Owc10_xp::PivotFieldSetTypeEnum __fastcall get_Type(void)
  {
    Owc10_xp::PivotFieldSetTypeEnum Type;
    OLECHECK(this->get_Type((Owc10_xp::PivotFieldSetTypeEnum*)&Type));
    return Type;
  }

  Owc10_xp::PivotField* __fastcall AddCalculatedField(BSTR Name/*[in]*/, BSTR Caption/*[in]*/, 
                                                      BSTR DataField/*[in]*/, 
                                                      BSTR Expression/*[in]*/)
  {
    Owc10_xp::PivotField* Field;
    OLECHECK(this->AddCalculatedField(Name, Caption, DataField, Expression, (Owc10_xp::PivotField**)&Field));
    return Field;
  }

  Owc10_xp::PivotField* __fastcall get_BoundField(void)
  {
    Owc10_xp::PivotField* Field;
    OLECHECK(this->get_BoundField((Owc10_xp::PivotField**)&Field));
    return Field;
  }

  BSTR __fastcall get_UniqueName(void)
  {
    BSTR UniqueName = 0;
    OLECHECK(this->get_UniqueName((BSTR*)&UniqueName));
    return UniqueName;
  }

  long __fastcall get_Width(void)
  {
    long Width;
    OLECHECK(this->get_Width((long*)&Width));
    return Width;
  }

  Owc10_xp::PivotMember* __fastcall get_DefaultMember(void)
  {
    Owc10_xp::PivotMember* DefaultMember;
    OLECHECK(this->get_DefaultMember((Owc10_xp::PivotMember**)&DefaultMember));
    return DefaultMember;
  }

  Owc10_xp::PivotMember* __fastcall get_Member(void)
  {
    Owc10_xp::PivotMember* Member;
    OLECHECK(this->get_Member((Owc10_xp::PivotMember**)&Member));
    return Member;
  }

  Owc10_xp::PivotMember* __fastcall get_AllMember(void)
  {
    Owc10_xp::PivotMember* AllMember;
    OLECHECK(this->get_AllMember((Owc10_xp::PivotMember**)&AllMember));
    return AllMember;
  }

  Owc10_xp::PivotMembersCompareByEnum __fastcall get_CompareOrderedMembersBy(void)
  {
    Owc10_xp::PivotMembersCompareByEnum CompareOrderedMembersBy;
    OLECHECK(this->get_CompareOrderedMembersBy((Owc10_xp::PivotMembersCompareByEnum*)&CompareOrderedMembersBy));
    return CompareOrderedMembersBy;
  }

  Owc10_xp::PivotView* __fastcall get_View(void)
  {
    Owc10_xp::PivotView* View;
    OLECHECK(this->get_View((Owc10_xp::PivotView**)&View));
    return View;
  }

  Owc10_xp::PivotFilterUpdate* __fastcall get_CreateFilterUpdate(void)
  {
    Owc10_xp::PivotFilterUpdate* FilterUpdate;
    OLECHECK(this->get_CreateFilterUpdate((Owc10_xp::PivotFilterUpdate**)&FilterUpdate));
    return FilterUpdate;
  }

  VARIANT_BOOL __fastcall get_AllowMultiFilter(void)
  {
    VARIANT_BOOL Allow;
    OLECHECK(this->get_AllowMultiFilter((VARIANT_BOOL*)&Allow));
    return Allow;
  }

  BSTR __fastcall get_FilterCaption(void)
  {
    BSTR FilterCaption = 0;
    OLECHECK(this->get_FilterCaption((BSTR*)&FilterCaption));
    return FilterCaption;
  }

  Owc10_xp::PivotFieldSetAllIncludeExcludeEnum __fastcall get_AllIncludeExclude(void)
  {
    Owc10_xp::PivotFieldSetAllIncludeExcludeEnum AllIncludeExclude;
    OLECHECK(this->get_AllIncludeExclude((Owc10_xp::PivotFieldSetAllIncludeExcludeEnum*)&AllIncludeExclude));
    return AllIncludeExclude;
  }

  Owc10_xp::PivotField* __fastcall AddCustomGroupField(BSTR Name/*[in,def,opt]*/, 
                                                       BSTR Caption/*[in,def,opt]*/, 
                                                       VARIANT Before/*[in,def,opt]*/= TNoParam())
  {
    Owc10_xp::PivotField* Field;
    OLECHECK(this->AddCustomGroupField(Name, Caption, Before, (Owc10_xp::PivotField**)&Field));
    return Field;
  }

  Owc10_xp::PivotMembersCompareByEnum __fastcall get_CompareMemberCaptionsBy(void)
  {
    Owc10_xp::PivotMembersCompareByEnum CompareMemberCaptionsBy;
    OLECHECK(this->get_CompareMemberCaptionsBy((Owc10_xp::PivotMembersCompareByEnum*)&CompareMemberCaptionsBy));
    return CompareMemberCaptionsBy;
  }

  VARIANT_BOOL __fastcall get_DisplayInFieldList(void)
  {
    VARIANT_BOOL DisplayInFieldList;
    OLECHECK(this->get_DisplayInFieldList((VARIANT_BOOL*)&DisplayInFieldList));
    return DisplayInFieldList;
  }

  VARIANT_BOOL __fastcall get_AlwaysIncludeInCube(void)
  {
    VARIANT_BOOL AlwaysInclude;
    OLECHECK(this->get_AlwaysIncludeInCube((VARIANT_BOOL*)&AlwaysInclude));
    return AlwaysInclude;
  }

  Owc10_xp::PivotMember* __fastcall get_FindMember(VARIANT NameOrPath/*[in]*/, 
                                                   Owc10_xp::PivotMemberFindFormatEnum Format/*[in,def,opt]*/)
  {
    Owc10_xp::PivotMember* Member;
    OLECHECK(this->get_FindMember(NameOrPath, Format, (Owc10_xp::PivotMember**)&Member));
    return Member;
  }


  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Caption = {read = get_Caption};
  __property   Owc10_xp::PivotFields* Fields = {read = get_Fields};
  __property   Owc10_xp::PivotMembers* Members = {read = get_Members};
  __property   Owc10_xp::PivotFieldSetOrientationEnum Orientation = {read = get_Orientation};
  __property   Owc10_xp::PivotFieldSetTypeEnum Type = {read = get_Type};
  __property   Owc10_xp::PivotField* BoundField = {read = get_BoundField};
  __property   BSTR            UniqueName = {read = get_UniqueName};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   Owc10_xp::PivotMember* DefaultMember = {read = get_DefaultMember};
  __property   Owc10_xp::PivotMember* Member = {read = get_Member};
  __property   Owc10_xp::PivotMember* AllMember = {read = get_AllMember};
  __property   Owc10_xp::PivotMembersCompareByEnum CompareOrderedMembersBy = {read = get_CompareOrderedMembersBy, write = set_CompareOrderedMembersBy};
  __property   Owc10_xp::PivotView* View = {read = get_View};
  __property   Owc10_xp::PivotFilterUpdate* CreateFilterUpdate = {read = get_CreateFilterUpdate};
  __property   VARIANT_BOOL    AllowMultiFilter = {read = get_AllowMultiFilter, write = set_AllowMultiFilter};
  __property   BSTR            FilterCaption = {read = get_FilterCaption};
  __property   Owc10_xp::PivotFieldSetAllIncludeExcludeEnum AllIncludeExclude = {read = get_AllIncludeExclude, write = set_AllIncludeExclude};
  __property   Owc10_xp::PivotMembersCompareByEnum CompareMemberCaptionsBy = {read = get_CompareMemberCaptionsBy, write = set_CompareMemberCaptionsBy};
  __property   VARIANT_BOOL    DisplayInFieldList = {read = get_DisplayInFieldList, write = set_DisplayInFieldList};
  __property   VARIANT_BOOL    AlwaysIncludeInCube = {read = get_AlwaysIncludeInCube, write = set_AlwaysIncludeInCube};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PivotFields
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B2A-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface PivotFields  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Owc10_xp::PivotField** Field/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::PivotField* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Owc10_xp::PivotField* Field;
    OLECHECK(this->get_Item(Index, (Owc10_xp::PivotField**)&Field));
    return Field;
  }

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunk));
    return ppunk;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PivotField
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B2C-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface PivotField  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Caption(BSTR* Caption/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Caption(BSTR Caption/*[in]*/) = 0; // [1610743808]
  virtual HRESULT STDMETHODCALLTYPE get_BaseName(BSTR* BaseName/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DataType(Adodb_xp::DataTypeEnum* Type/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [6023]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR Name/*[in]*/) = 0; // [6023]
  virtual HRESULT STDMETHODCALLTYPE get_DetailWidth(long* Width/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_DetailWidth(long Width/*[in]*/) = 0; // [1610743814]
  virtual HRESULT STDMETHODCALLTYPE get_GroupedWidth(long* Width/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_GroupedWidth(long Width/*[in]*/) = 0; // [1610743816]
  virtual HRESULT STDMETHODCALLTYPE get_Subtotals(long Subtotals/*[in]*/, 
                                                  VARIANT_BOOL* Display/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Subtotals(long Subtotals/*[in]*/, 
                                                  VARIANT_BOOL Display/*[in]*/) = 0; // [1610743818]
  virtual HRESULT STDMETHODCALLTYPE get_DetailFont(Owc10_xp::PivotFont** Font/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DetailForeColor(VARIANT* Color/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_DetailForeColor(VARIANT Color/*[in]*/) = 0; // [1610743821]
  virtual HRESULT STDMETHODCALLTYPE get_DetailBackColor(VARIANT* Color/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_DetailBackColor(VARIANT Color/*[in]*/) = 0; // [1610743823]
  virtual HRESULT STDMETHODCALLTYPE get_DetailHAlignment(Owc10_xp::PivotHAlignmentEnum* HAlignment/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_DetailHAlignment(Owc10_xp::PivotHAlignmentEnum HAlignment/*[in]*/) = 0; // [1610743825]
  virtual HRESULT STDMETHODCALLTYPE get_SubtotalFont(Owc10_xp::PivotFont** Font/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_SubtotalForeColor(VARIANT* Color/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_SubtotalForeColor(VARIANT Color/*[in]*/) = 0; // [1610743828]
  virtual HRESULT STDMETHODCALLTYPE get_SubtotalBackColor(VARIANT* Color/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_SubtotalBackColor(VARIANT Color/*[in]*/) = 0; // [1610743830]
  virtual HRESULT STDMETHODCALLTYPE get_GroupOn(Owc10_xp::PivotFieldGroupOnEnum* GroupOn/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_GroupOn(Owc10_xp::PivotFieldGroupOnEnum GroupOn/*[in]*/) = 0; // [1610743832]
  virtual HRESULT STDMETHODCALLTYPE get_GroupInterval(double* GroupInterval/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_GroupInterval(double GroupInterval/*[in]*/) = 0; // [1610743834]
  virtual HRESULT STDMETHODCALLTYPE get_Expression(BSTR* Expression/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Expression(BSTR Expression/*[in]*/) = 0; // [1610743836]
  virtual HRESULT STDMETHODCALLTYPE get_NumberFormat(BSTR* NumberFormat/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_NumberFormat(BSTR NumberFormat/*[in]*/) = 0; // [1610743838]
  virtual HRESULT STDMETHODCALLTYPE get_DataField(BSTR* DataField/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_IsIncluded(VARIANT_BOOL* IsIncluded/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_IsIncluded(VARIANT_BOOL IsIncluded/*[in]*/) = 0; // [1610743841]
  virtual HRESULT STDMETHODCALLTYPE get_SortDirection(Owc10_xp::PivotFieldSortDirectionEnum* SortDirection/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_SortDirection(Owc10_xp::PivotFieldSortDirectionEnum SortDirection/*[in]*/) = 0; // [1610743843]
  virtual HRESULT STDMETHODCALLTYPE set_OrderedMembers(VARIANT OrderedMembers/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_OrderedMembers(VARIANT* OrderedMembers/*[out,retval]*/) = 0; // [1610743845]
  virtual HRESULT STDMETHODCALLTYPE set_MemberCaptions(VARIANT MemberCaptions/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_MemberCaptions(VARIANT* MemberCaptions/*[out,retval]*/) = 0; // [1610743847]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Owc10_xp::PivotFieldTypeEnum* Type/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_FilterFunction(Owc10_xp::PivotFieldFilterFunctionEnum* FilterFunction/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_FilterFunction(Owc10_xp::PivotFieldFilterFunctionEnum FilterFunction/*[in]*/) = 0; // [1610743850]
  virtual HRESULT STDMETHODCALLTYPE get_DetailAutoFit(VARIANT_BOOL* AutoFit/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_DetailAutoFit(VARIANT_BOOL AutoFit/*[in]*/) = 0; // [1610743852]
  virtual HRESULT STDMETHODCALLTYPE get_GroupedAutoFit(VARIANT_BOOL* AutoFit/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_GroupedAutoFit(VARIANT_BOOL AutoFit/*[in]*/) = 0; // [1610743854]
  virtual HRESULT STDMETHODCALLTYPE get_FieldSet(Owc10_xp::PivotFieldSet** FieldSet/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Expanded(VARIANT_BOOL* Expanded/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Expanded(VARIANT_BOOL Expanded/*[in]*/) = 0; // [1610743857]
  virtual HRESULT STDMETHODCALLTYPE get_SortOn(Owc10_xp::PivotTotal** Total/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _set_SortOn(Owc10_xp::PivotTotal* Total/*[in]*/) = 0; // [1610743859]
  virtual HRESULT STDMETHODCALLTYPE get_SortOnScope(VARIANT* Scope/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_SortOnScope(VARIANT Scope/*[in]*/) = 0; // [1610743861]
  virtual HRESULT STDMETHODCALLTYPE get_IsHyperlink(VARIANT_BOOL* IsHyperlink/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_IsHyperlink(VARIANT_BOOL IsHyperlink/*[in]*/) = 0; // [1610743863]
  virtual HRESULT STDMETHODCALLTYPE get_UniqueName(BSTR* UniqueName/*[out,retval]*/) = 0; // [6022]
  virtual HRESULT STDMETHODCALLTYPE get_GroupStart(VARIANT* GroupStart/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_GroupStart(VARIANT GroupStart/*[in]*/) = 0; // [1610743866]
  virtual HRESULT STDMETHODCALLTYPE get_GroupEnd(VARIANT* GroupEnd/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_GroupEnd(VARIANT GroupEnd/*[in]*/) = 0; // [1610743868]
  virtual HRESULT STDMETHODCALLTYPE get_IncludedMembers(VARIANT* Members/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_IncludedMembers(VARIANT Members/*[in]*/) = 0; // [1610743870]
  virtual HRESULT STDMETHODCALLTYPE get_ExcludedMembers(VARIANT* Members/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_ExcludedMembers(VARIANT Members/*[in]*/) = 0; // [1610743872]
  virtual HRESULT STDMETHODCALLTYPE get_MemberProperties(Owc10_xp::PivotMemberProperties** MemberProperties/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_MemberPropertiesOrder(VARIANT* MemberPropertiesOrder/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_MemberPropertiesOrder(VARIANT MemberPropertiesOrder/*[in]*/) = 0; // [1610743875]
  virtual HRESULT STDMETHODCALLTYPE get_PropertyCaptionWidth(long* Width/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_PropertyCaptionWidth(long Width/*[in]*/) = 0; // [1610743877]
  virtual HRESULT STDMETHODCALLTYPE get_GroupedHeight(long* Height/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_GroupedHeight(long Height/*[in]*/) = 0; // [1610743879]
  virtual HRESULT STDMETHODCALLTYPE get_PropertyValueWidth(long* Width/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_PropertyValueWidth(long Width/*[in]*/) = 0; // [1610743881]
  virtual HRESULT STDMETHODCALLTYPE get_PropertyHeight(long* Height/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_PropertyHeight(long Height/*[in]*/) = 0; // [1610743883]
  virtual HRESULT STDMETHODCALLTYPE get_FilterContext(Owc10_xp::PivotField** Field/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _set_FilterContext(Owc10_xp::PivotField* Field/*[in]*/) = 0; // [1610743885]
  virtual HRESULT STDMETHODCALLTYPE get_FilterOn(Owc10_xp::PivotTotal** Total/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _set_FilterOn(Owc10_xp::PivotTotal* Total/*[in]*/) = 0; // [1610743887]
  virtual HRESULT STDMETHODCALLTYPE get_FilterOnScope(VARIANT* Scope/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_FilterOnScope(VARIANT Scope/*[in]*/) = 0; // [1610743889]
  virtual HRESULT STDMETHODCALLTYPE get_FilterFunctionValue(VARIANT* Value/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_FilterFunctionValue(VARIANT Value/*[in]*/) = 0; // [1610743891]
  virtual HRESULT STDMETHODCALLTYPE get_GroupedFont(Owc10_xp::PivotFont** Font/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_GroupedForeColor(VARIANT* Color/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_GroupedForeColor(VARIANT Color/*[in]*/) = 0; // [1610743894]
  virtual HRESULT STDMETHODCALLTYPE get_GroupedBackColor(VARIANT* Color/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_GroupedBackColor(VARIANT Color/*[in]*/) = 0; // [1610743896]
  virtual HRESULT STDMETHODCALLTYPE get_GroupedHAlignment(Owc10_xp::PivotHAlignmentEnum* HAlignment/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_GroupedHAlignment(Owc10_xp::PivotHAlignmentEnum HAlignment/*[in]*/) = 0; // [1610743898]
  virtual HRESULT STDMETHODCALLTYPE AddCustomGroupMember(VARIANT Parent/*[in]*/, 
                                                         VARIANT varChildMembers/*[in]*/, 
                                                         BSTR bstrCaption/*[in,def,opt]*/, 
                                                         Owc10_xp::PivotMember** ppCustomGroupMember/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE DeleteCustomGroupMember(VARIANT CustomGroupMember/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_CustomGroupMembers(Owc10_xp::PivotMembers** Members/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DefaultValue(VARIANT* DefaultValue/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_DefaultValue(VARIANT DefaultValue/*[in]*/) = 0; // [1610743903]
  virtual HRESULT STDMETHODCALLTYPE get_SubtotalLabelFont(Owc10_xp::PivotFont** Font/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_SubtotalLabelForeColor(VARIANT* Color/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_SubtotalLabelForeColor(VARIANT Color/*[in]*/) = 0; // [1610743906]
  virtual HRESULT STDMETHODCALLTYPE get_SubtotalLabelBackColor(VARIANT* Color/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_SubtotalLabelBackColor(VARIANT Color/*[in]*/) = 0; // [1610743908]
  virtual HRESULT STDMETHODCALLTYPE get_SubtotalLabelHAlignment(Owc10_xp::PivotHAlignmentEnum* HAlignment/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_SubtotalLabelHAlignment(Owc10_xp::PivotHAlignmentEnum HAlignment/*[in]*/) = 0; // [1610743910]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Caption(void)
  {
    BSTR Caption = 0;
    OLECHECK(this->get_Caption((BSTR*)&Caption));
    return Caption;
  }

  BSTR __fastcall get_BaseName(void)
  {
    BSTR BaseName = 0;
    OLECHECK(this->get_BaseName((BSTR*)&BaseName));
    return BaseName;
  }

  Adodb_xp::DataTypeEnum __fastcall get_DataType(void)
  {
    Adodb_xp::DataTypeEnum Type;
    OLECHECK(this->get_DataType((Adodb_xp::DataTypeEnum*)&Type));
    return Type;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  long __fastcall get_DetailWidth(void)
  {
    long Width;
    OLECHECK(this->get_DetailWidth((long*)&Width));
    return Width;
  }

  long __fastcall get_GroupedWidth(void)
  {
    long Width;
    OLECHECK(this->get_GroupedWidth((long*)&Width));
    return Width;
  }

  VARIANT_BOOL __fastcall get_Subtotals(long Subtotals/*[in]*/)
  {
    VARIANT_BOOL Display;
    OLECHECK(this->get_Subtotals(Subtotals, (VARIANT_BOOL*)&Display));
    return Display;
  }

  Owc10_xp::PivotFont* __fastcall get_DetailFont(void)
  {
    Owc10_xp::PivotFont* Font;
    OLECHECK(this->get_DetailFont((Owc10_xp::PivotFont**)&Font));
    return Font;
  }

  VARIANT __fastcall get_DetailForeColor(void)
  {
    VARIANT Color;
    OLECHECK(this->get_DetailForeColor((VARIANT*)&Color));
    return Color;
  }

  VARIANT __fastcall get_DetailBackColor(void)
  {
    VARIANT Color;
    OLECHECK(this->get_DetailBackColor((VARIANT*)&Color));
    return Color;
  }

  Owc10_xp::PivotHAlignmentEnum __fastcall get_DetailHAlignment(void)
  {
    Owc10_xp::PivotHAlignmentEnum HAlignment;
    OLECHECK(this->get_DetailHAlignment((Owc10_xp::PivotHAlignmentEnum*)&HAlignment));
    return HAlignment;
  }

  Owc10_xp::PivotFont* __fastcall get_SubtotalFont(void)
  {
    Owc10_xp::PivotFont* Font;
    OLECHECK(this->get_SubtotalFont((Owc10_xp::PivotFont**)&Font));
    return Font;
  }

  VARIANT __fastcall get_SubtotalForeColor(void)
  {
    VARIANT Color;
    OLECHECK(this->get_SubtotalForeColor((VARIANT*)&Color));
    return Color;
  }

  VARIANT __fastcall get_SubtotalBackColor(void)
  {
    VARIANT Color;
    OLECHECK(this->get_SubtotalBackColor((VARIANT*)&Color));
    return Color;
  }

  Owc10_xp::PivotFieldGroupOnEnum __fastcall get_GroupOn(void)
  {
    Owc10_xp::PivotFieldGroupOnEnum GroupOn;
    OLECHECK(this->get_GroupOn((Owc10_xp::PivotFieldGroupOnEnum*)&GroupOn));
    return GroupOn;
  }

  double __fastcall get_GroupInterval(void)
  {
    double GroupInterval;
    OLECHECK(this->get_GroupInterval((double*)&GroupInterval));
    return GroupInterval;
  }

  BSTR __fastcall get_Expression(void)
  {
    BSTR Expression = 0;
    OLECHECK(this->get_Expression((BSTR*)&Expression));
    return Expression;
  }

  BSTR __fastcall get_NumberFormat(void)
  {
    BSTR NumberFormat = 0;
    OLECHECK(this->get_NumberFormat((BSTR*)&NumberFormat));
    return NumberFormat;
  }

  BSTR __fastcall get_DataField(void)
  {
    BSTR DataField = 0;
    OLECHECK(this->get_DataField((BSTR*)&DataField));
    return DataField;
  }

  VARIANT_BOOL __fastcall get_IsIncluded(void)
  {
    VARIANT_BOOL IsIncluded;
    OLECHECK(this->get_IsIncluded((VARIANT_BOOL*)&IsIncluded));
    return IsIncluded;
  }

  Owc10_xp::PivotFieldSortDirectionEnum __fastcall get_SortDirection(void)
  {
    Owc10_xp::PivotFieldSortDirectionEnum SortDirection;
    OLECHECK(this->get_SortDirection((Owc10_xp::PivotFieldSortDirectionEnum*)&SortDirection));
    return SortDirection;
  }

  VARIANT __fastcall get_OrderedMembers(void)
  {
    VARIANT OrderedMembers;
    OLECHECK(this->get_OrderedMembers((VARIANT*)&OrderedMembers));
    return OrderedMembers;
  }

  VARIANT __fastcall get_MemberCaptions(void)
  {
    VARIANT MemberCaptions;
    OLECHECK(this->get_MemberCaptions((VARIANT*)&MemberCaptions));
    return MemberCaptions;
  }

  Owc10_xp::PivotFieldTypeEnum __fastcall get_Type(void)
  {
    Owc10_xp::PivotFieldTypeEnum Type;
    OLECHECK(this->get_Type((Owc10_xp::PivotFieldTypeEnum*)&Type));
    return Type;
  }

  Owc10_xp::PivotFieldFilterFunctionEnum __fastcall get_FilterFunction(void)
  {
    Owc10_xp::PivotFieldFilterFunctionEnum FilterFunction;
    OLECHECK(this->get_FilterFunction((Owc10_xp::PivotFieldFilterFunctionEnum*)&FilterFunction));
    return FilterFunction;
  }

  VARIANT_BOOL __fastcall get_DetailAutoFit(void)
  {
    VARIANT_BOOL AutoFit;
    OLECHECK(this->get_DetailAutoFit((VARIANT_BOOL*)&AutoFit));
    return AutoFit;
  }

  VARIANT_BOOL __fastcall get_GroupedAutoFit(void)
  {
    VARIANT_BOOL AutoFit;
    OLECHECK(this->get_GroupedAutoFit((VARIANT_BOOL*)&AutoFit));
    return AutoFit;
  }

  Owc10_xp::PivotFieldSet* __fastcall get_FieldSet(void)
  {
    Owc10_xp::PivotFieldSet* FieldSet;
    OLECHECK(this->get_FieldSet((Owc10_xp::PivotFieldSet**)&FieldSet));
    return FieldSet;
  }

  VARIANT_BOOL __fastcall get_Expanded(void)
  {
    VARIANT_BOOL Expanded;
    OLECHECK(this->get_Expanded((VARIANT_BOOL*)&Expanded));
    return Expanded;
  }

  Owc10_xp::PivotTotal* __fastcall get_SortOn(void)
  {
    Owc10_xp::PivotTotal* Total;
    OLECHECK(this->get_SortOn((Owc10_xp::PivotTotal**)&Total));
    return Total;
  }

  VARIANT __fastcall get_SortOnScope(void)
  {
    VARIANT Scope;
    OLECHECK(this->get_SortOnScope((VARIANT*)&Scope));
    return Scope;
  }

  VARIANT_BOOL __fastcall get_IsHyperlink(void)
  {
    VARIANT_BOOL IsHyperlink;
    OLECHECK(this->get_IsHyperlink((VARIANT_BOOL*)&IsHyperlink));
    return IsHyperlink;
  }

  BSTR __fastcall get_UniqueName(void)
  {
    BSTR UniqueName = 0;
    OLECHECK(this->get_UniqueName((BSTR*)&UniqueName));
    return UniqueName;
  }

  VARIANT __fastcall get_GroupStart(void)
  {
    VARIANT GroupStart;
    OLECHECK(this->get_GroupStart((VARIANT*)&GroupStart));
    return GroupStart;
  }

  VARIANT __fastcall get_GroupEnd(void)
  {
    VARIANT GroupEnd;
    OLECHECK(this->get_GroupEnd((VARIANT*)&GroupEnd));
    return GroupEnd;
  }

  VARIANT __fastcall get_IncludedMembers(void)
  {
    VARIANT Members;
    OLECHECK(this->get_IncludedMembers((VARIANT*)&Members));
    return Members;
  }

  VARIANT __fastcall get_ExcludedMembers(void)
  {
    VARIANT Members;
    OLECHECK(this->get_ExcludedMembers((VARIANT*)&Members));
    return Members;
  }

  Owc10_xp::PivotMemberProperties* __fastcall get_MemberProperties(void)
  {
    Owc10_xp::PivotMemberProperties* MemberProperties;
    OLECHECK(this->get_MemberProperties((Owc10_xp::PivotMemberProperties**)&MemberProperties));
    return MemberProperties;
  }

  VARIANT __fastcall get_MemberPropertiesOrder(void)
  {
    VARIANT MemberPropertiesOrder;
    OLECHECK(this->get_MemberPropertiesOrder((VARIANT*)&MemberPropertiesOrder));
    return MemberPropertiesOrder;
  }

  long __fastcall get_PropertyCaptionWidth(void)
  {
    long Width;
    OLECHECK(this->get_PropertyCaptionWidth((long*)&Width));
    return Width;
  }

  long __fastcall get_GroupedHeight(void)
  {
    long Height;
    OLECHECK(this->get_GroupedHeight((long*)&Height));
    return Height;
  }

  long __fastcall get_PropertyValueWidth(void)
  {
    long Width;
    OLECHECK(this->get_PropertyValueWidth((long*)&Width));
    return Width;
  }

  long __fastcall get_PropertyHeight(void)
  {
    long Height;
    OLECHECK(this->get_PropertyHeight((long*)&Height));
    return Height;
  }

  Owc10_xp::PivotField* __fastcall get_FilterContext(void)
  {
    Owc10_xp::PivotField* Field;
    OLECHECK(this->get_FilterContext((Owc10_xp::PivotField**)&Field));
    return Field;
  }

  Owc10_xp::PivotTotal* __fastcall get_FilterOn(void)
  {
    Owc10_xp::PivotTotal* Total;
    OLECHECK(this->get_FilterOn((Owc10_xp::PivotTotal**)&Total));
    return Total;
  }

  VARIANT __fastcall get_FilterOnScope(void)
  {
    VARIANT Scope;
    OLECHECK(this->get_FilterOnScope((VARIANT*)&Scope));
    return Scope;
  }

  VARIANT __fastcall get_FilterFunctionValue(void)
  {
    VARIANT Value;
    OLECHECK(this->get_FilterFunctionValue((VARIANT*)&Value));
    return Value;
  }

  Owc10_xp::PivotFont* __fastcall get_GroupedFont(void)
  {
    Owc10_xp::PivotFont* Font;
    OLECHECK(this->get_GroupedFont((Owc10_xp::PivotFont**)&Font));
    return Font;
  }

  VARIANT __fastcall get_GroupedForeColor(void)
  {
    VARIANT Color;
    OLECHECK(this->get_GroupedForeColor((VARIANT*)&Color));
    return Color;
  }

  VARIANT __fastcall get_GroupedBackColor(void)
  {
    VARIANT Color;
    OLECHECK(this->get_GroupedBackColor((VARIANT*)&Color));
    return Color;
  }

  Owc10_xp::PivotHAlignmentEnum __fastcall get_GroupedHAlignment(void)
  {
    Owc10_xp::PivotHAlignmentEnum HAlignment;
    OLECHECK(this->get_GroupedHAlignment((Owc10_xp::PivotHAlignmentEnum*)&HAlignment));
    return HAlignment;
  }

  Owc10_xp::PivotMember* __fastcall AddCustomGroupMember(VARIANT Parent/*[in]*/, 
                                                         VARIANT varChildMembers/*[in]*/, 
                                                         BSTR bstrCaption/*[in,def,opt]*/)
  {
    Owc10_xp::PivotMember* ppCustomGroupMember;
    OLECHECK(this->AddCustomGroupMember(Parent, varChildMembers, bstrCaption, (Owc10_xp::PivotMember**)&ppCustomGroupMember));
    return ppCustomGroupMember;
  }

  Owc10_xp::PivotMembers* __fastcall get_CustomGroupMembers(void)
  {
    Owc10_xp::PivotMembers* Members;
    OLECHECK(this->get_CustomGroupMembers((Owc10_xp::PivotMembers**)&Members));
    return Members;
  }

  VARIANT __fastcall get_DefaultValue(void)
  {
    VARIANT DefaultValue;
    OLECHECK(this->get_DefaultValue((VARIANT*)&DefaultValue));
    return DefaultValue;
  }

  Owc10_xp::PivotFont* __fastcall get_SubtotalLabelFont(void)
  {
    Owc10_xp::PivotFont* Font;
    OLECHECK(this->get_SubtotalLabelFont((Owc10_xp::PivotFont**)&Font));
    return Font;
  }

  VARIANT __fastcall get_SubtotalLabelForeColor(void)
  {
    VARIANT Color;
    OLECHECK(this->get_SubtotalLabelForeColor((VARIANT*)&Color));
    return Color;
  }

  VARIANT __fastcall get_SubtotalLabelBackColor(void)
  {
    VARIANT Color;
    OLECHECK(this->get_SubtotalLabelBackColor((VARIANT*)&Color));
    return Color;
  }

  Owc10_xp::PivotHAlignmentEnum __fastcall get_SubtotalLabelHAlignment(void)
  {
    Owc10_xp::PivotHAlignmentEnum HAlignment;
    OLECHECK(this->get_SubtotalLabelHAlignment((Owc10_xp::PivotHAlignmentEnum*)&HAlignment));
    return HAlignment;
  }


  __property   BSTR            Caption = {read = get_Caption};
  __property   BSTR            BaseName = {read = get_BaseName};
  __property   Adodb_xp::DataTypeEnum DataType = {read = get_DataType};
  __property   BSTR            Name = {read = get_Name};
  __property   long            DetailWidth = {read = get_DetailWidth, write = set_DetailWidth};
  __property   long            GroupedWidth = {read = get_GroupedWidth, write = set_GroupedWidth};
  __property   Owc10_xp::PivotFont* DetailFont = {read = get_DetailFont};
  __property   Owc10_xp::PivotHAlignmentEnum DetailHAlignment = {read = get_DetailHAlignment, write = set_DetailHAlignment};
  __property   Owc10_xp::PivotFont* SubtotalFont = {read = get_SubtotalFont};
  __property   Owc10_xp::PivotFieldGroupOnEnum GroupOn = {read = get_GroupOn, write = set_GroupOn};
  __property   double          GroupInterval = {read = get_GroupInterval, write = set_GroupInterval};
  __property   BSTR            Expression = {read = get_Expression};
  __property   BSTR            NumberFormat = {read = get_NumberFormat};
  __property   BSTR            DataField = {read = get_DataField};
  __property   VARIANT_BOOL    IsIncluded = {read = get_IsIncluded, write = set_IsIncluded};
  __property   Owc10_xp::PivotFieldSortDirectionEnum SortDirection = {read = get_SortDirection, write = set_SortDirection};
  __property   Owc10_xp::PivotFieldTypeEnum Type = {read = get_Type};
  __property   Owc10_xp::PivotFieldFilterFunctionEnum FilterFunction = {read = get_FilterFunction, write = set_FilterFunction};
  __property   VARIANT_BOOL    DetailAutoFit = {read = get_DetailAutoFit, write = set_DetailAutoFit};
  __property   VARIANT_BOOL    GroupedAutoFit = {read = get_GroupedAutoFit, write = set_GroupedAutoFit};
  __property   Owc10_xp::PivotFieldSet* FieldSet = {read = get_FieldSet};
  __property   VARIANT_BOOL    Expanded = {read = get_Expanded, write = set_Expanded};
  __property   Owc10_xp::PivotTotal* SortOn = {read = get_SortOn, write = _set_SortOn};
  __property   VARIANT_BOOL    IsHyperlink = {read = get_IsHyperlink, write = set_IsHyperlink};
  __property   BSTR            UniqueName = {read = get_UniqueName};
  __property   Owc10_xp::PivotMemberProperties* MemberProperties = {read = get_MemberProperties};
  __property   long            PropertyCaptionWidth = {read = get_PropertyCaptionWidth, write = set_PropertyCaptionWidth};
  __property   long            GroupedHeight = {read = get_GroupedHeight, write = set_GroupedHeight};
  __property   long            PropertyValueWidth = {read = get_PropertyValueWidth, write = set_PropertyValueWidth};
  __property   long            PropertyHeight = {read = get_PropertyHeight, write = set_PropertyHeight};
  __property   Owc10_xp::PivotField* FilterContext = {read = get_FilterContext, write = _set_FilterContext};
  __property   Owc10_xp::PivotTotal* FilterOn = {read = get_FilterOn, write = _set_FilterOn};
  __property   Owc10_xp::PivotFont* GroupedFont = {read = get_GroupedFont};
  __property   Owc10_xp::PivotHAlignmentEnum GroupedHAlignment = {read = get_GroupedHAlignment, write = set_GroupedHAlignment};
  __property   Owc10_xp::PivotMembers* CustomGroupMembers = {read = get_CustomGroupMembers};
  __property   Owc10_xp::PivotFont* SubtotalLabelFont = {read = get_SubtotalLabelFont};
  __property   Owc10_xp::PivotHAlignmentEnum SubtotalLabelHAlignment = {read = get_SubtotalLabelHAlignment, write = set_SubtotalLabelHAlignment};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PivotFont
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B01-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface PivotFont  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR Name/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Size(long* Size/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE set_Size(long Size/*[in]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_Bold(VARIANT_BOOL* Bold/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE set_Bold(VARIANT_BOOL Bold/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_Italic(VARIANT_BOOL* Italic/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_Italic(VARIANT_BOOL Italic/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_Underline(Owc10_xp::UnderlineStyleEnum* Underline/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE set_Underline(Owc10_xp::UnderlineStyleEnum Underline/*[in]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_Color(VARIANT* Color/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Color(VARIANT Color/*[in]*/) = 0; // [1610743818]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  long __fastcall get_Size(void)
  {
    long Size;
    OLECHECK(this->get_Size((long*)&Size));
    return Size;
  }

  VARIANT_BOOL __fastcall get_Bold(void)
  {
    VARIANT_BOOL Bold;
    OLECHECK(this->get_Bold((VARIANT_BOOL*)&Bold));
    return Bold;
  }

  VARIANT_BOOL __fastcall get_Italic(void)
  {
    VARIANT_BOOL Italic;
    OLECHECK(this->get_Italic((VARIANT_BOOL*)&Italic));
    return Italic;
  }

  Owc10_xp::UnderlineStyleEnum __fastcall get_Underline(void)
  {
    Owc10_xp::UnderlineStyleEnum Underline;
    OLECHECK(this->get_Underline((Owc10_xp::UnderlineStyleEnum*)&Underline));
    return Underline;
  }

  VARIANT __fastcall get_Color(void)
  {
    VARIANT Color;
    OLECHECK(this->get_Color((VARIANT*)&Color));
    return Color;
  }


  __property   BSTR            Name = {read = get_Name};
  __property   long            Size = {read = get_Size, write = set_Size};
  __property   VARIANT_BOOL    Bold = {read = get_Bold, write = set_Bold};
  __property   VARIANT_BOOL    Italic = {read = get_Italic, write = set_Italic};
  __property   Owc10_xp::UnderlineStyleEnum Underline = {read = get_Underline, write = set_Underline};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PivotTotal
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B2F-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface PivotTotal  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Field(Owc10_xp::PivotField** Field/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Function(Owc10_xp::PivotTotalFunctionEnum* Function/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Function(Owc10_xp::PivotTotalFunctionEnum Function/*[in]*/) = 0; // [1610743809]
  virtual HRESULT STDMETHODCALLTYPE get_Caption(BSTR* Caption/*[out,retval]*/) = 0; // [6028]
  virtual HRESULT STDMETHODCALLTYPE set_Caption(BSTR Caption/*[in]*/) = 0; // [6028]
  virtual HRESULT STDMETHODCALLTYPE get_Width(long* Width/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Width(long Width/*[in]*/) = 0; // [1610743813]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [6023]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR Name/*[in]*/) = 0; // [6023]
  virtual HRESULT STDMETHODCALLTYPE get_NumberFormat(BSTR* NumberFormat/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_NumberFormat(BSTR NumberFormat/*[in]*/) = 0; // [1610743817]
  virtual HRESULT STDMETHODCALLTYPE get_HAlignment(Owc10_xp::PivotHAlignmentEnum* HAlignment/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_HAlignment(Owc10_xp::PivotHAlignmentEnum HAlignment/*[in]*/) = 0; // [1610743819]
  virtual HRESULT STDMETHODCALLTYPE get_CaptionHAlignment(Owc10_xp::PivotHAlignmentEnum* CaptionHAlignment/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_CaptionHAlignment(Owc10_xp::PivotHAlignmentEnum CaptionHAlignment/*[in]*/) = 0; // [1610743821]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Owc10_xp::PivotTotalTypeEnum* Type/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_AutoFit(VARIANT_BOOL* AutoFit/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_AutoFit(VARIANT_BOOL AutoFit/*[in]*/) = 0; // [1610743824]
  virtual HRESULT STDMETHODCALLTYPE get_UniqueName(BSTR* UniqueName/*[out,retval]*/) = 0; // [6022]
  virtual HRESULT STDMETHODCALLTYPE get_View(Owc10_xp::PivotView** View/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Expression(BSTR* Expression/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Expression(BSTR Expression/*[in]*/) = 0; // [1610743828]
  virtual HRESULT STDMETHODCALLTYPE get_SolveOrder(long* SolveOrder/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_SolveOrder(long SolveOrder/*[in]*/) = 0; // [1610743830]
  virtual HRESULT STDMETHODCALLTYPE get_ShowAs(Owc10_xp::PivotShowAsEnum* ShowAs/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_ShowAs(Owc10_xp::PivotShowAsEnum ShowAs/*[in]*/) = 0; // [1610743832]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayInFieldList(VARIANT_BOOL* DisplayInFieldList/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayInFieldList(VARIANT_BOOL DisplayInFieldList/*[in]*/) = 0; // [1610743834]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::PivotField* __fastcall get_Field(void)
  {
    Owc10_xp::PivotField* Field;
    OLECHECK(this->get_Field((Owc10_xp::PivotField**)&Field));
    return Field;
  }

  Owc10_xp::PivotTotalFunctionEnum __fastcall get_Function(void)
  {
    Owc10_xp::PivotTotalFunctionEnum Function;
    OLECHECK(this->get_Function((Owc10_xp::PivotTotalFunctionEnum*)&Function));
    return Function;
  }

  BSTR __fastcall get_Caption(void)
  {
    BSTR Caption = 0;
    OLECHECK(this->get_Caption((BSTR*)&Caption));
    return Caption;
  }

  long __fastcall get_Width(void)
  {
    long Width;
    OLECHECK(this->get_Width((long*)&Width));
    return Width;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  BSTR __fastcall get_NumberFormat(void)
  {
    BSTR NumberFormat = 0;
    OLECHECK(this->get_NumberFormat((BSTR*)&NumberFormat));
    return NumberFormat;
  }

  Owc10_xp::PivotHAlignmentEnum __fastcall get_HAlignment(void)
  {
    Owc10_xp::PivotHAlignmentEnum HAlignment;
    OLECHECK(this->get_HAlignment((Owc10_xp::PivotHAlignmentEnum*)&HAlignment));
    return HAlignment;
  }

  Owc10_xp::PivotHAlignmentEnum __fastcall get_CaptionHAlignment(void)
  {
    Owc10_xp::PivotHAlignmentEnum CaptionHAlignment;
    OLECHECK(this->get_CaptionHAlignment((Owc10_xp::PivotHAlignmentEnum*)&CaptionHAlignment));
    return CaptionHAlignment;
  }

  Owc10_xp::PivotTotalTypeEnum __fastcall get_Type(void)
  {
    Owc10_xp::PivotTotalTypeEnum Type;
    OLECHECK(this->get_Type((Owc10_xp::PivotTotalTypeEnum*)&Type));
    return Type;
  }

  VARIANT_BOOL __fastcall get_AutoFit(void)
  {
    VARIANT_BOOL AutoFit;
    OLECHECK(this->get_AutoFit((VARIANT_BOOL*)&AutoFit));
    return AutoFit;
  }

  BSTR __fastcall get_UniqueName(void)
  {
    BSTR UniqueName = 0;
    OLECHECK(this->get_UniqueName((BSTR*)&UniqueName));
    return UniqueName;
  }

  Owc10_xp::PivotView* __fastcall get_View(void)
  {
    Owc10_xp::PivotView* View;
    OLECHECK(this->get_View((Owc10_xp::PivotView**)&View));
    return View;
  }

  BSTR __fastcall get_Expression(void)
  {
    BSTR Expression = 0;
    OLECHECK(this->get_Expression((BSTR*)&Expression));
    return Expression;
  }

  long __fastcall get_SolveOrder(void)
  {
    long SolveOrder;
    OLECHECK(this->get_SolveOrder((long*)&SolveOrder));
    return SolveOrder;
  }

  Owc10_xp::PivotShowAsEnum __fastcall get_ShowAs(void)
  {
    Owc10_xp::PivotShowAsEnum ShowAs;
    OLECHECK(this->get_ShowAs((Owc10_xp::PivotShowAsEnum*)&ShowAs));
    return ShowAs;
  }

  VARIANT_BOOL __fastcall get_DisplayInFieldList(void)
  {
    VARIANT_BOOL DisplayInFieldList;
    OLECHECK(this->get_DisplayInFieldList((VARIANT_BOOL*)&DisplayInFieldList));
    return DisplayInFieldList;
  }


  __property   Owc10_xp::PivotField* Field = {read = get_Field};
  __property   Owc10_xp::PivotTotalFunctionEnum Function = {read = get_Function, write = set_Function};
  __property   BSTR            Caption = {read = get_Caption};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            NumberFormat = {read = get_NumberFormat};
  __property   Owc10_xp::PivotHAlignmentEnum HAlignment = {read = get_HAlignment, write = set_HAlignment};
  __property   Owc10_xp::PivotHAlignmentEnum CaptionHAlignment = {read = get_CaptionHAlignment, write = set_CaptionHAlignment};
  __property   Owc10_xp::PivotTotalTypeEnum Type = {read = get_Type};
  __property   VARIANT_BOOL    AutoFit = {read = get_AutoFit, write = set_AutoFit};
  __property   BSTR            UniqueName = {read = get_UniqueName};
  __property   Owc10_xp::PivotView* View = {read = get_View};
  __property   BSTR            Expression = {read = get_Expression};
  __property   long            SolveOrder = {read = get_SolveOrder, write = set_SolveOrder};
  __property   Owc10_xp::PivotShowAsEnum ShowAs = {read = get_ShowAs, write = set_ShowAs};
  __property   VARIANT_BOOL    DisplayInFieldList = {read = get_DisplayInFieldList, write = set_DisplayInFieldList};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PivotMemberProperties
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0F57F292-726F-4817-A78B-52D452498519}
// *********************************************************************//
interface PivotMemberProperties  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT varIndex/*[in]*/, 
                                             Owc10_xp::PivotMemberProperty** Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::PivotMemberProperty* __fastcall get_Item(VARIANT varIndex/*[in]*/)
  {
    Owc10_xp::PivotMemberProperty* Item;
    OLECHECK(this->get_Item(varIndex, (Owc10_xp::PivotMemberProperty**)&Item));
    return Item;
  }

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN _NewEnum;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&_NewEnum));
    return _NewEnum;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PivotMemberProperty
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6ADF4A9E-5E7D-47EE-A3B8-CE06023D6A14}
// *********************************************************************//
interface PivotMemberProperty  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [6023]
  virtual HRESULT STDMETHODCALLTYPE set_Caption(BSTR Caption/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Caption(BSTR* Caption/*[out,retval]*/) = 0; // [1610743809]
  virtual HRESULT STDMETHODCALLTYPE set_IsIncluded(VARIANT_BOOL IsIncluded/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_IsIncluded(VARIANT_BOOL* IsIncluded/*[out,retval]*/) = 0; // [1610743811]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayIn(Owc10_xp::PivotMemberPropertyDisplayEnum DisplayIn/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayIn(Owc10_xp::PivotMemberPropertyDisplayEnum* DisplayIn/*[out,retval]*/) = 0; // [1610743813]
  virtual HRESULT STDMETHODCALLTYPE get_NumberFormat(BSTR* NumberFormat/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_NumberFormat(BSTR NumberFormat/*[in]*/) = 0; // [1610743815]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  BSTR __fastcall get_Caption(void)
  {
    BSTR Caption = 0;
    OLECHECK(this->get_Caption((BSTR*)&Caption));
    return Caption;
  }

  VARIANT_BOOL __fastcall get_IsIncluded(void)
  {
    VARIANT_BOOL IsIncluded;
    OLECHECK(this->get_IsIncluded((VARIANT_BOOL*)&IsIncluded));
    return IsIncluded;
  }

  Owc10_xp::PivotMemberPropertyDisplayEnum __fastcall get_DisplayIn(void)
  {
    Owc10_xp::PivotMemberPropertyDisplayEnum DisplayIn;
    OLECHECK(this->get_DisplayIn((Owc10_xp::PivotMemberPropertyDisplayEnum*)&DisplayIn));
    return DisplayIn;
  }

  BSTR __fastcall get_NumberFormat(void)
  {
    BSTR NumberFormat = 0;
    OLECHECK(this->get_NumberFormat((BSTR*)&NumberFormat));
    return NumberFormat;
  }


  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   VARIANT_BOOL    IsIncluded = {read = get_IsIncluded, write = set_IsIncluded};
  __property   Owc10_xp::PivotMemberPropertyDisplayEnum DisplayIn = {read = get_DisplayIn, write = set_DisplayIn};
  __property   BSTR            NumberFormat = {read = get_NumberFormat};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PivotMember
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B33-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface PivotMember  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_View(Owc10_xp::PivotView** View/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ChildMembers(Owc10_xp::PivotMembers** Members/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ParentMember(Owc10_xp::PivotMember** Member/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_FindMember(BSTR Path/*[in]*/, 
                                                   Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/, 
                                                   Owc10_xp::PivotMember** Member/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [6023]
  virtual HRESULT STDMETHODCALLTYPE get_Caption(BSTR* Caption/*[out,retval]*/) = 0; // [6028]
  virtual HRESULT STDMETHODCALLTYPE get_Value(VARIANT* Value/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_UniqueName(BSTR* UniqueName/*[out,retval]*/) = 0; // [6022]
  virtual HRESULT STDMETHODCALLTYPE get_Field(Owc10_xp::PivotField** Field/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Path(Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/, 
                                             BSTR* Path/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_TimeValue(VARIANT* TimeValue/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_IsValid(VARIANT_BOOL* Valid/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_CustomGroupType(Owc10_xp::PivotMemberCustomGroupTypeEnum* Type/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::PivotView* __fastcall get_View(void)
  {
    Owc10_xp::PivotView* View;
    OLECHECK(this->get_View((Owc10_xp::PivotView**)&View));
    return View;
  }

  Owc10_xp::PivotMembers* __fastcall get_ChildMembers(void)
  {
    Owc10_xp::PivotMembers* Members;
    OLECHECK(this->get_ChildMembers((Owc10_xp::PivotMembers**)&Members));
    return Members;
  }

  Owc10_xp::PivotMember* __fastcall get_ParentMember(void)
  {
    Owc10_xp::PivotMember* Member;
    OLECHECK(this->get_ParentMember((Owc10_xp::PivotMember**)&Member));
    return Member;
  }

  Owc10_xp::PivotMember* __fastcall get_FindMember(BSTR Path/*[in]*/, 
                                                   Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/)
  {
    Owc10_xp::PivotMember* Member;
    OLECHECK(this->get_FindMember(Path, Format, (Owc10_xp::PivotMember**)&Member));
    return Member;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  BSTR __fastcall get_Caption(void)
  {
    BSTR Caption = 0;
    OLECHECK(this->get_Caption((BSTR*)&Caption));
    return Caption;
  }

  VARIANT __fastcall get_Value(void)
  {
    VARIANT Value;
    OLECHECK(this->get_Value((VARIANT*)&Value));
    return Value;
  }

  BSTR __fastcall get_UniqueName(void)
  {
    BSTR UniqueName = 0;
    OLECHECK(this->get_UniqueName((BSTR*)&UniqueName));
    return UniqueName;
  }

  Owc10_xp::PivotField* __fastcall get_Field(void)
  {
    Owc10_xp::PivotField* Field;
    OLECHECK(this->get_Field((Owc10_xp::PivotField**)&Field));
    return Field;
  }

  BSTR __fastcall get_Path(Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/)
  {
    BSTR Path = 0;
    OLECHECK(this->get_Path(Format, (BSTR*)&Path));
    return Path;
  }

  VARIANT __fastcall get_TimeValue(void)
  {
    VARIANT TimeValue;
    OLECHECK(this->get_TimeValue((VARIANT*)&TimeValue));
    return TimeValue;
  }

  VARIANT_BOOL __fastcall get_IsValid(void)
  {
    VARIANT_BOOL Valid;
    OLECHECK(this->get_IsValid((VARIANT_BOOL*)&Valid));
    return Valid;
  }

  Owc10_xp::PivotMemberCustomGroupTypeEnum __fastcall get_CustomGroupType(void)
  {
    Owc10_xp::PivotMemberCustomGroupTypeEnum Type;
    OLECHECK(this->get_CustomGroupType((Owc10_xp::PivotMemberCustomGroupTypeEnum*)&Type));
    return Type;
  }


  __property   Owc10_xp::PivotView* View = {read = get_View};
  __property   Owc10_xp::PivotMembers* ChildMembers = {read = get_ChildMembers};
  __property   Owc10_xp::PivotMember* ParentMember = {read = get_ParentMember};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Caption = {read = get_Caption};
  __property   BSTR            UniqueName = {read = get_UniqueName};
  __property   Owc10_xp::PivotField* Field = {read = get_Field};
  __property   VARIANT_BOOL    IsValid = {read = get_IsValid};
  __property   Owc10_xp::PivotMemberCustomGroupTypeEnum CustomGroupType = {read = get_CustomGroupType};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PivotMembers
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B32-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface PivotMembers  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Owc10_xp::PivotMember** Member/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::PivotMember* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Owc10_xp::PivotMember* Member;
    OLECHECK(this->get_Item(Index, (Owc10_xp::PivotMember**)&Member));
    return Member;
  }

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunk));
    return ppunk;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PivotFilterUpdate
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A5E83EE4-5A92-11D3-BF58-00C04F61319A}
// *********************************************************************//
interface PivotFilterUpdate  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_StateOf(Owc10_xp::PivotMember* Member/*[in]*/, 
                                                Owc10_xp::PivotFilterUpdateMemberStateEnum* MemberState/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Click(Owc10_xp::PivotMember* Member/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ClickFromTo(Owc10_xp::PivotMember* Member/*[in]*/, 
                                                Owc10_xp::PivotFilterUpdateMemberStateEnum OldMemberState/*[in]*/, 
                                                Owc10_xp::PivotFilterUpdateMemberStateEnum NewMemberState/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_IsDirty(VARIANT_BOOL* IsDirty/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Apply(void) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::PivotFilterUpdateMemberStateEnum __fastcall get_StateOf(Owc10_xp::PivotMember* Member/*[in]*/)
  {
    Owc10_xp::PivotFilterUpdateMemberStateEnum MemberState;
    OLECHECK(this->get_StateOf(Member, (Owc10_xp::PivotFilterUpdateMemberStateEnum*)&MemberState));
    return MemberState;
  }

  VARIANT_BOOL __fastcall get_IsDirty(void)
  {
    VARIANT_BOOL IsDirty;
    OLECHECK(this->get_IsDirty((VARIANT_BOOL*)&IsDirty));
    return IsDirty;
  }


  __property   VARIANT_BOOL    IsDirty = {read = get_IsDirty};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PivotAxis
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B2B-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface PivotAxis  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_View(Owc10_xp::PivotView** View/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_FieldSets(Owc10_xp::PivotFieldSets** FieldSets/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE InsertFieldSet(Owc10_xp::PivotFieldSet* FieldSet/*[in]*/, 
                                                   VARIANT Before/*[in,opt]*/, 
                                                   VARIANT_BOOL Remove/*[in,def,opt]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE RemoveFieldSet(VARIANT FieldSet/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Label(Owc10_xp::PivotLabel** Label/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::PivotView* __fastcall get_View(void)
  {
    Owc10_xp::PivotView* View;
    OLECHECK(this->get_View((Owc10_xp::PivotView**)&View));
    return View;
  }

  Owc10_xp::PivotFieldSets* __fastcall get_FieldSets(void)
  {
    Owc10_xp::PivotFieldSets* FieldSets;
    OLECHECK(this->get_FieldSets((Owc10_xp::PivotFieldSets**)&FieldSets));
    return FieldSets;
  }

  Owc10_xp::PivotLabel* __fastcall get_Label(void)
  {
    Owc10_xp::PivotLabel* Label;
    OLECHECK(this->get_Label((Owc10_xp::PivotLabel**)&Label));
    return Label;
  }


  __property   Owc10_xp::PivotView* View = {read = get_View};
  __property   Owc10_xp::PivotFieldSets* FieldSets = {read = get_FieldSets};
  __property   Owc10_xp::PivotLabel* Label = {read = get_Label};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PivotGroupAxis
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AA7-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface PivotGroupAxis  : public Owc10_xp::PivotAxis
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_DisplayEmptyMembers(VARIANT_BOOL* DisplayEmptyMembers/*[out,retval]*/) = 0; // [1610809344]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayEmptyMembers(VARIANT_BOOL DisplayEmptyMembers/*[in]*/) = 0; // [1610809344]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_DisplayEmptyMembers(void)
  {
    VARIANT_BOOL DisplayEmptyMembers;
    OLECHECK(this->get_DisplayEmptyMembers((VARIANT_BOOL*)&DisplayEmptyMembers));
    return DisplayEmptyMembers;
  }


  __property   VARIANT_BOOL    DisplayEmptyMembers = {read = get_DisplayEmptyMembers, write = set_DisplayEmptyMembers};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PivotLabel
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B2D-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface PivotLabel  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Caption(BSTR* Caption/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Caption(BSTR Caption/*[in]*/) = 0; // [1610743808]
  virtual HRESULT STDMETHODCALLTYPE get_HAlignment(Owc10_xp::PivotHAlignmentEnum* HAlignment/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_HAlignment(Owc10_xp::PivotHAlignmentEnum HAlignment/*[in]*/) = 0; // [1610743810]
  virtual HRESULT STDMETHODCALLTYPE get_ForeColor(VARIANT* Color/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_ForeColor(VARIANT Color/*[in]*/) = 0; // [1610743812]
  virtual HRESULT STDMETHODCALLTYPE get_BackColor(VARIANT* Color/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_BackColor(VARIANT Color/*[in]*/) = 0; // [1610743814]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(VARIANT_BOOL* Visible/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(VARIANT_BOOL Visible/*[in]*/) = 0; // [1610743816]
  virtual HRESULT STDMETHODCALLTYPE get_Font(Owc10_xp::PivotFont** Font/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Caption(void)
  {
    BSTR Caption = 0;
    OLECHECK(this->get_Caption((BSTR*)&Caption));
    return Caption;
  }

  Owc10_xp::PivotHAlignmentEnum __fastcall get_HAlignment(void)
  {
    Owc10_xp::PivotHAlignmentEnum HAlignment;
    OLECHECK(this->get_HAlignment((Owc10_xp::PivotHAlignmentEnum*)&HAlignment));
    return HAlignment;
  }

  VARIANT __fastcall get_ForeColor(void)
  {
    VARIANT Color;
    OLECHECK(this->get_ForeColor((VARIANT*)&Color));
    return Color;
  }

  VARIANT __fastcall get_BackColor(void)
  {
    VARIANT Color;
    OLECHECK(this->get_BackColor((VARIANT*)&Color));
    return Color;
  }

  VARIANT_BOOL __fastcall get_Visible(void)
  {
    VARIANT_BOOL Visible;
    OLECHECK(this->get_Visible((VARIANT_BOOL*)&Visible));
    return Visible;
  }

  Owc10_xp::PivotFont* __fastcall get_Font(void)
  {
    Owc10_xp::PivotFont* Font;
    OLECHECK(this->get_Font((Owc10_xp::PivotFont**)&Font));
    return Font;
  }


  __property   BSTR            Caption = {read = get_Caption};
  __property   Owc10_xp::PivotHAlignmentEnum HAlignment = {read = get_HAlignment, write = set_HAlignment};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   Owc10_xp::PivotFont* Font = {read = get_Font};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PivotDataAxis
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B43-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface PivotDataAxis  : public Owc10_xp::PivotAxis
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Totals(Owc10_xp::PivotTotals** Totals/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE InsertTotal(Owc10_xp::PivotTotal* Total/*[in]*/, 
                                                VARIANT Before/*[in,opt]*/= TNoParam()) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE RemoveTotal(VARIANT Total/*[in]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::PivotTotals* __fastcall get_Totals(void)
  {
    Owc10_xp::PivotTotals* Totals;
    OLECHECK(this->get_Totals((Owc10_xp::PivotTotals**)&Totals));
    return Totals;
  }


  __property   Owc10_xp::PivotTotals* Totals = {read = get_Totals};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PivotTotals
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B2E-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface PivotTotals  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Owc10_xp::PivotTotal** Total/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::PivotTotal* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Owc10_xp::PivotTotal* Total;
    OLECHECK(this->get_Item(Index, (Owc10_xp::PivotTotal**)&Total));
    return Total;
  }

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunk));
    return ppunk;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PivotFilterAxis
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AFD-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface PivotFilterAxis  : public Owc10_xp::PivotAxis
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IPivotControl
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B08-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface IPivotControl  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_ActiveView(Owc10_xp::PivotView** View/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Selection(LPDISPATCH* Selection/*[out,retval]*/) = 0; // [6031]
  virtual HRESULT STDMETHODCALLTYPE _set_Selection(LPDISPATCH Selection/*[in]*/) = 0; // [6031]
  virtual HRESULT STDMETHODCALLTYPE get_DataMember(Msdatasrc_xp::DataMember* DataMember/*[out,retval]*/) = 0; // [6000]
  virtual HRESULT STDMETHODCALLTYPE set_DataMember(Msdatasrc_xp::DataMember DataMember/*[in]*/) = 0; // [6000]
  virtual HRESULT STDMETHODCALLTYPE get_ActiveData(Owc10_xp::PivotData** Data/*[out,retval]*/) = 0; // [6048]
  virtual HRESULT STDMETHODCALLTYPE get_Version(BSTR* Version/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_HasDetails(VARIANT_BOOL* HasDetails/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayToolbar(VARIANT_BOOL* DisplayToolbar/*[out,retval]*/) = 0; // [6008]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayToolbar(VARIANT_BOOL DisplayToolbar/*[in]*/) = 0; // [6008]
  virtual HRESULT STDMETHODCALLTYPE get_AllowGrouping(VARIANT_BOOL* AllowGrouping/*[out,retval]*/) = 0; // [6009]
  virtual HRESULT STDMETHODCALLTYPE set_AllowGrouping(VARIANT_BOOL AllowGrouping/*[in]*/) = 0; // [6009]
  virtual HRESULT STDMETHODCALLTYPE get_AllowFiltering(VARIANT_BOOL* AllowFiltering/*[out,retval]*/) = 0; // [6010]
  virtual HRESULT STDMETHODCALLTYPE set_AllowFiltering(VARIANT_BOOL AllowFiltering/*[in]*/) = 0; // [6010]
  virtual HRESULT STDMETHODCALLTYPE get_AllowDetails(VARIANT_BOOL* EnableDetails/*[out,retval]*/) = 0; // [6011]
  virtual HRESULT STDMETHODCALLTYPE set_AllowDetails(VARIANT_BOOL EnableDetails/*[in]*/) = 0; // [6011]
  virtual HRESULT STDMETHODCALLTYPE get_AllowPropertyToolbox(VARIANT_BOOL* AllowPropertyToolbox/*[out,retval]*/) = 0; // [6012]
  virtual HRESULT STDMETHODCALLTYPE set_AllowPropertyToolbox(VARIANT_BOOL AllowPropertyToolbox/*[in]*/) = 0; // [6012]
  virtual HRESULT STDMETHODCALLTYPE get_AllowCustomOrdering(VARIANT_BOOL* AllowCustomOrdering/*[out,retval]*/) = 0; // [6027]
  virtual HRESULT STDMETHODCALLTYPE set_AllowCustomOrdering(VARIANT_BOOL AllowCustomOrdering/*[in]*/) = 0; // [6027]
  virtual HRESULT STDMETHODCALLTYPE get_AutoFit(VARIANT_BOOL* AutoFit/*[out,retval]*/) = 0; // [6013]
  virtual HRESULT STDMETHODCALLTYPE set_AutoFit(VARIANT_BOOL AutoFit/*[in]*/) = 0; // [6013]
  virtual HRESULT STDMETHODCALLTYPE Export(BSTR Filename/*[in,def,opt]*/, 
                                           Owc10_xp::PivotExportActionEnum Action/*[in,def,opt]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_DataSource(Msdatasrc_xp::DataSource* DataSource/*[in]*/) = 0; // [6037]
  virtual HRESULT STDMETHODCALLTYPE _set_DataSource(Msdatasrc_xp::DataSource* DataSource/*[in]*/) = 0; // [6037]
  virtual HRESULT STDMETHODCALLTYPE get_DataSource(Msdatasrc_xp::DataSource** DataSource/*[out,retval]*/) = 0; // [6037]
  virtual HRESULT STDMETHODCALLTYPE get_BackColor(VARIANT* BackColor/*[out,retval]*/) = 0; // [6014]
  virtual HRESULT STDMETHODCALLTYPE set_BackColor(VARIANT BackColor/*[in]*/) = 0; // [6014]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayExpandIndicator(VARIANT_BOOL* DisplayExpandIndicator/*[out,retval]*/) = 0; // [6015]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayExpandIndicator(VARIANT_BOOL DisplayExpandIndicator/*[in]*/) = 0; // [6015]
  virtual HRESULT STDMETHODCALLTYPE get_RightToLeft(VARIANT_BOOL* RightToLeft/*[out,retval]*/) = 0; // [6016]
  virtual HRESULT STDMETHODCALLTYPE set_RightToLeft(VARIANT_BOOL RightToLeft/*[in]*/) = 0; // [6016]
  virtual HRESULT STDMETHODCALLTYPE get_MaxWidth(long* MaxWidth/*[out,retval]*/) = 0; // [6017]
  virtual HRESULT STDMETHODCALLTYPE set_MaxWidth(long MaxWidth/*[in]*/) = 0; // [6017]
  virtual HRESULT STDMETHODCALLTYPE get_MaxHeight(long* MaxHeight/*[out,retval]*/) = 0; // [6018]
  virtual HRESULT STDMETHODCALLTYPE set_MaxHeight(long MaxHeight/*[in]*/) = 0; // [6018]
  virtual HRESULT STDMETHODCALLTYPE get_Width(long* Width/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Width(long Width/*[in]*/) = 0; // [1610743844]
  virtual HRESULT STDMETHODCALLTYPE get_Height(long* Height/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Height(long Height/*[in]*/) = 0; // [1610743846]
  virtual HRESULT STDMETHODCALLTYPE get_XMLData(BSTR* XMLData/*[out,retval]*/) = 0; // [6002]
  virtual HRESULT STDMETHODCALLTYPE set_XMLData(BSTR XMLData/*[in]*/) = 0; // [6002]
  virtual HRESULT STDMETHODCALLTYPE Refresh(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayPropertyToolbox(VARIANT_BOOL* DisplayPropertyToolbox/*[out,retval]*/) = 0; // [4002]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayPropertyToolbox(VARIANT_BOOL DisplayPropertyToolbox/*[in]*/) = 0; // [4002]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayFieldList(VARIANT_BOOL* DisplayFieldList/*[out,retval]*/) = 0; // [4001]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayFieldList(VARIANT_BOOL DisplayFieldList/*[in]*/) = 0; // [4001]
  virtual HRESULT STDMETHODCALLTYPE get_Constants(LPDISPATCH* Constants/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_MajorVersion(long* MajorVersion/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_MinorVersion(BSTR* MinorVersion/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_BuildNumber(BSTR* BuildNumber/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ExportPicture(BSTR Filename/*[in,def,opt]*/, 
                                                  BSTR FilterName/*[in,def,opt]*/, 
                                                  long Width/*[in,def,opt]*/, 
                                                  long Height/*[in,def,opt]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ConnectionString(BSTR* ConnectionString/*[out,retval]*/) = 0; // [6038]
  virtual HRESULT STDMETHODCALLTYPE set_ConnectionString(BSTR ConnectionString/*[in]*/) = 0; // [6038]
  virtual HRESULT STDMETHODCALLTYPE get_CommandText(BSTR* CommandText/*[out,retval]*/) = 0; // [6036]
  virtual HRESULT STDMETHODCALLTYPE set_CommandText(BSTR CommandText/*[in]*/) = 0; // [6036]
  virtual HRESULT STDMETHODCALLTYPE get_ProviderType(Owc10_xp::ProviderType* ProviderType/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_MemberExpand(Owc10_xp::PivotTableMemberExpandEnum* MemberExpand/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_MemberExpand(Owc10_xp::PivotTableMemberExpandEnum MemberExpand/*[in]*/) = 0; // [1610743866]
  virtual HRESULT STDMETHODCALLTYPE LocateDataSource(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _set_Connection(Adodb_xp::Connection* Connection/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Connection(Adodb_xp::Connection** Connection/*[out,retval]*/) = 0; // [1610743869]
  virtual HRESULT STDMETHODCALLTYPE Copy(LPDISPATCH Selection/*[in,def,opt]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_RevisionNumber(BSTR* RevisionNumber/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayAlerts(VARIANT_BOOL* DisplayAlerts/*[out,retval]*/) = 0; // [6025]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayAlerts(VARIANT_BOOL DisplayAlerts/*[in]*/) = 0; // [6025]
  virtual HRESULT STDMETHODCALLTYPE get_DataMemberStrings(VARIANT* DataMemberStrings/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ClassFactory(Owc10_xp::PivotClassFactory** ClassFactory/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _set_ClassFactory(Owc10_xp::PivotClassFactory* ClassFactory/*[in]*/) = 0; // [1610743876]
  virtual HRESULT STDMETHODCALLTYPE get_Left(long* Left/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Top(long* Top/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Hwnd(long* Hwnd/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE DoDragDrop(Owc10_xp::DropSource* Source/*[in]*/, 
                                               LPDISPATCH DragItem/*[in]*/, 
                                               Owc10_xp::DropTarget* Target/*[in]*/, 
                                               long dwLegalEffect/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Select(LPDISPATCH Selection/*[in]*/, 
                                           LPDISPATCH ActiveObject/*[in]*/, 
                                           Owc10_xp::PivotScrollTypeEnum ScrollType/*[in,def,opt]*/, 
                                           VARIANT_BOOL Update/*[in,def,opt]*/, 
                                           VARIANT_BOOL Notify/*[in,def,opt]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ActiveObject(LPDISPATCH* ActiveObject/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _set_ActiveObject(LPDISPATCH ActiveObject/*[in]*/) = 0; // [1610743883]
  virtual HRESULT STDMETHODCALLTYPE get_Commands(Owc10_xp::OCCommands** Commands/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ShowHelp(long Topic/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ShowAbout(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_UserMode(VARIANT_BOOL* UserMode/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ShowContextMenu(long x/*[in]*/, long y/*[in]*/, 
                                                    VARIANT Menu/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DataMemberCaption(BSTR* Caption/*[out,retval]*/) = 0; // [6040]
  virtual HRESULT STDMETHODCALLTYPE set_DataMemberCaption(BSTR Caption/*[in]*/) = 0; // [6040]
  virtual HRESULT STDMETHODCALLTYPE get_DataSourceEx(LPDISPATCH* DataSourceEx/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _set_DataSourceEx(LPDISPATCH DataSourceEx/*[in]*/) = 0; // [1610743892]
  virtual HRESULT STDMETHODCALLTYPE StartEdit(VARIANT InitialValue/*[in,opt]*/, 
                                              Owc10_xp::PivotArrowModeEnum ArrowMode/*[in,def,opt]*/, 
                                              Owc10_xp::PivotCaretPositionEnum CaretPosition/*[in,def,opt]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE EndEdit(VARIANT_BOOL Accept/*[in,def,opt]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE CancelDragDrop(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_IsDirty(VARIANT_BOOL* IsDirty/*[out,retval]*/) = 0; // [6047]
  virtual HRESULT STDMETHODCALLTYPE set_IsDirty(VARIANT_BOOL IsDirty/*[in]*/) = 0; // [6047]
  virtual HRESULT STDMETHODCALLTYPE get_CubeProvider(BSTR* CubeProvider/*[out,retval]*/) = 0; // [6041]
  virtual HRESULT STDMETHODCALLTYPE set_CubeProvider(BSTR CubeProvider/*[in]*/) = 0; // [6041]
  virtual HRESULT STDMETHODCALLTYPE get_SelectionType(BSTR* SelectionType/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayScreenTips(VARIANT_BOOL* DisplayScreenTips/*[out,retval]*/) = 0; // [6042]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayScreenTips(VARIANT_BOOL DisplayScreenTips/*[in]*/) = 0; // [6042]
  virtual HRESULT STDMETHODCALLTYPE get_ViewOnlyMode(VARIANT_BOOL* ViewOnlyMode/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayDesignTimeUI(VARIANT_BOOL* DisplayDesignTimeUI/*[out,retval]*/) = 0; // [6050]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayDesignTimeUI(VARIANT_BOOL DisplayDesignTimeUI/*[in]*/) = 0; // [6050]
  virtual HRESULT STDMETHODCALLTYPE get_Toolbar(Mscomctllib_xp::IToolbar** Toolbar/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_EditMode(Owc10_xp::PivotEditModeEnum* EditMode/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_HTMLData(BSTR* HTMLData/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DataSourceName(BSTR* DataSourceName/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_DataSourceName(BSTR DataSourceName/*[in]*/) = 0; // [1610743910]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayBranding(VARIANT_BOOL* DisplayBranding/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayBranding(VARIANT_BOOL DisplayBranding/*[in]*/) = 0; // [1610743912]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayOfficeLogo(VARIANT_BOOL* DisplayOfficeLogo/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayOfficeLogo(VARIANT_BOOL DisplayOfficeLogo/*[in]*/) = 0; // [1610743914]
  virtual HRESULT STDMETHODCALLTYPE OkToBindToControlByName(void) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::PivotView* __fastcall get_ActiveView(void)
  {
    Owc10_xp::PivotView* View;
    OLECHECK(this->get_ActiveView((Owc10_xp::PivotView**)&View));
    return View;
  }

  LPDISPATCH __fastcall get_Selection(void)
  {
    LPDISPATCH Selection;
    OLECHECK(this->get_Selection((LPDISPATCH*)&Selection));
    return Selection;
  }

  Msdatasrc_xp::DataMember __fastcall get_DataMember(void)
  {
    Msdatasrc_xp::DataMember DataMember;
    OLECHECK(this->get_DataMember((Msdatasrc_xp::DataMember*)&DataMember));
    return DataMember;
  }

  Owc10_xp::PivotData* __fastcall get_ActiveData(void)
  {
    Owc10_xp::PivotData* Data;
    OLECHECK(this->get_ActiveData((Owc10_xp::PivotData**)&Data));
    return Data;
  }

  BSTR __fastcall get_Version(void)
  {
    BSTR Version = 0;
    OLECHECK(this->get_Version((BSTR*)&Version));
    return Version;
  }

  VARIANT_BOOL __fastcall get_HasDetails(void)
  {
    VARIANT_BOOL HasDetails;
    OLECHECK(this->get_HasDetails((VARIANT_BOOL*)&HasDetails));
    return HasDetails;
  }

  VARIANT_BOOL __fastcall get_DisplayToolbar(void)
  {
    VARIANT_BOOL DisplayToolbar;
    OLECHECK(this->get_DisplayToolbar((VARIANT_BOOL*)&DisplayToolbar));
    return DisplayToolbar;
  }

  VARIANT_BOOL __fastcall get_AllowGrouping(void)
  {
    VARIANT_BOOL AllowGrouping;
    OLECHECK(this->get_AllowGrouping((VARIANT_BOOL*)&AllowGrouping));
    return AllowGrouping;
  }

  VARIANT_BOOL __fastcall get_AllowFiltering(void)
  {
    VARIANT_BOOL AllowFiltering;
    OLECHECK(this->get_AllowFiltering((VARIANT_BOOL*)&AllowFiltering));
    return AllowFiltering;
  }

  VARIANT_BOOL __fastcall get_AllowDetails(void)
  {
    VARIANT_BOOL EnableDetails;
    OLECHECK(this->get_AllowDetails((VARIANT_BOOL*)&EnableDetails));
    return EnableDetails;
  }

  VARIANT_BOOL __fastcall get_AllowPropertyToolbox(void)
  {
    VARIANT_BOOL AllowPropertyToolbox;
    OLECHECK(this->get_AllowPropertyToolbox((VARIANT_BOOL*)&AllowPropertyToolbox));
    return AllowPropertyToolbox;
  }

  VARIANT_BOOL __fastcall get_AllowCustomOrdering(void)
  {
    VARIANT_BOOL AllowCustomOrdering;
    OLECHECK(this->get_AllowCustomOrdering((VARIANT_BOOL*)&AllowCustomOrdering));
    return AllowCustomOrdering;
  }

  VARIANT_BOOL __fastcall get_AutoFit(void)
  {
    VARIANT_BOOL AutoFit;
    OLECHECK(this->get_AutoFit((VARIANT_BOOL*)&AutoFit));
    return AutoFit;
  }

  Msdatasrc_xp::DataSource* __fastcall get_DataSource(void)
  {
    Msdatasrc_xp::DataSource* DataSource;
    OLECHECK(this->get_DataSource((Msdatasrc_xp::DataSource**)&DataSource));
    return DataSource;
  }

  VARIANT __fastcall get_BackColor(void)
  {
    VARIANT BackColor;
    OLECHECK(this->get_BackColor((VARIANT*)&BackColor));
    return BackColor;
  }

  VARIANT_BOOL __fastcall get_DisplayExpandIndicator(void)
  {
    VARIANT_BOOL DisplayExpandIndicator;
    OLECHECK(this->get_DisplayExpandIndicator((VARIANT_BOOL*)&DisplayExpandIndicator));
    return DisplayExpandIndicator;
  }

  VARIANT_BOOL __fastcall get_RightToLeft(void)
  {
    VARIANT_BOOL RightToLeft;
    OLECHECK(this->get_RightToLeft((VARIANT_BOOL*)&RightToLeft));
    return RightToLeft;
  }

  long __fastcall get_MaxWidth(void)
  {
    long MaxWidth;
    OLECHECK(this->get_MaxWidth((long*)&MaxWidth));
    return MaxWidth;
  }

  long __fastcall get_MaxHeight(void)
  {
    long MaxHeight;
    OLECHECK(this->get_MaxHeight((long*)&MaxHeight));
    return MaxHeight;
  }

  long __fastcall get_Width(void)
  {
    long Width;
    OLECHECK(this->get_Width((long*)&Width));
    return Width;
  }

  long __fastcall get_Height(void)
  {
    long Height;
    OLECHECK(this->get_Height((long*)&Height));
    return Height;
  }

  BSTR __fastcall get_XMLData(void)
  {
    BSTR XMLData = 0;
    OLECHECK(this->get_XMLData((BSTR*)&XMLData));
    return XMLData;
  }

  VARIANT_BOOL __fastcall get_DisplayPropertyToolbox(void)
  {
    VARIANT_BOOL DisplayPropertyToolbox;
    OLECHECK(this->get_DisplayPropertyToolbox((VARIANT_BOOL*)&DisplayPropertyToolbox));
    return DisplayPropertyToolbox;
  }

  VARIANT_BOOL __fastcall get_DisplayFieldList(void)
  {
    VARIANT_BOOL DisplayFieldList;
    OLECHECK(this->get_DisplayFieldList((VARIANT_BOOL*)&DisplayFieldList));
    return DisplayFieldList;
  }

  LPDISPATCH __fastcall get_Constants(void)
  {
    LPDISPATCH Constants;
    OLECHECK(this->get_Constants((LPDISPATCH*)&Constants));
    return Constants;
  }

  long __fastcall get_MajorVersion(void)
  {
    long MajorVersion;
    OLECHECK(this->get_MajorVersion((long*)&MajorVersion));
    return MajorVersion;
  }

  BSTR __fastcall get_MinorVersion(void)
  {
    BSTR MinorVersion = 0;
    OLECHECK(this->get_MinorVersion((BSTR*)&MinorVersion));
    return MinorVersion;
  }

  BSTR __fastcall get_BuildNumber(void)
  {
    BSTR BuildNumber = 0;
    OLECHECK(this->get_BuildNumber((BSTR*)&BuildNumber));
    return BuildNumber;
  }

  BSTR __fastcall get_ConnectionString(void)
  {
    BSTR ConnectionString = 0;
    OLECHECK(this->get_ConnectionString((BSTR*)&ConnectionString));
    return ConnectionString;
  }

  BSTR __fastcall get_CommandText(void)
  {
    BSTR CommandText = 0;
    OLECHECK(this->get_CommandText((BSTR*)&CommandText));
    return CommandText;
  }

  Owc10_xp::ProviderType __fastcall get_ProviderType(void)
  {
    Owc10_xp::ProviderType ProviderType;
    OLECHECK(this->get_ProviderType((Owc10_xp::ProviderType*)&ProviderType));
    return ProviderType;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Owc10_xp::PivotTableMemberExpandEnum __fastcall get_MemberExpand(void)
  {
    Owc10_xp::PivotTableMemberExpandEnum MemberExpand;
    OLECHECK(this->get_MemberExpand((Owc10_xp::PivotTableMemberExpandEnum*)&MemberExpand));
    return MemberExpand;
  }

  Adodb_xp::Connection* __fastcall get_Connection(void)
  {
    Adodb_xp::Connection* Connection;
    OLECHECK(this->get_Connection((Adodb_xp::Connection**)&Connection));
    return Connection;
  }

  BSTR __fastcall get_RevisionNumber(void)
  {
    BSTR RevisionNumber = 0;
    OLECHECK(this->get_RevisionNumber((BSTR*)&RevisionNumber));
    return RevisionNumber;
  }

  VARIANT_BOOL __fastcall get_DisplayAlerts(void)
  {
    VARIANT_BOOL DisplayAlerts;
    OLECHECK(this->get_DisplayAlerts((VARIANT_BOOL*)&DisplayAlerts));
    return DisplayAlerts;
  }

  VARIANT __fastcall get_DataMemberStrings(void)
  {
    VARIANT DataMemberStrings;
    OLECHECK(this->get_DataMemberStrings((VARIANT*)&DataMemberStrings));
    return DataMemberStrings;
  }

  Owc10_xp::PivotClassFactory* __fastcall get_ClassFactory(void)
  {
    Owc10_xp::PivotClassFactory* ClassFactory;
    OLECHECK(this->get_ClassFactory((Owc10_xp::PivotClassFactory**)&ClassFactory));
    return ClassFactory;
  }

  long __fastcall get_Left(void)
  {
    long Left;
    OLECHECK(this->get_Left((long*)&Left));
    return Left;
  }

  long __fastcall get_Top(void)
  {
    long Top;
    OLECHECK(this->get_Top((long*)&Top));
    return Top;
  }

  long __fastcall get_Hwnd(void)
  {
    long Hwnd;
    OLECHECK(this->get_Hwnd((long*)&Hwnd));
    return Hwnd;
  }

  LPDISPATCH __fastcall get_ActiveObject(void)
  {
    LPDISPATCH ActiveObject;
    OLECHECK(this->get_ActiveObject((LPDISPATCH*)&ActiveObject));
    return ActiveObject;
  }

  Owc10_xp::OCCommands* __fastcall get_Commands(void)
  {
    Owc10_xp::OCCommands* Commands;
    OLECHECK(this->get_Commands((Owc10_xp::OCCommands**)&Commands));
    return Commands;
  }

  VARIANT_BOOL __fastcall get_UserMode(void)
  {
    VARIANT_BOOL UserMode;
    OLECHECK(this->get_UserMode((VARIANT_BOOL*)&UserMode));
    return UserMode;
  }

  BSTR __fastcall get_DataMemberCaption(void)
  {
    BSTR Caption = 0;
    OLECHECK(this->get_DataMemberCaption((BSTR*)&Caption));
    return Caption;
  }

  LPDISPATCH __fastcall get_DataSourceEx(void)
  {
    LPDISPATCH DataSourceEx;
    OLECHECK(this->get_DataSourceEx((LPDISPATCH*)&DataSourceEx));
    return DataSourceEx;
  }

  VARIANT_BOOL __fastcall get_IsDirty(void)
  {
    VARIANT_BOOL IsDirty;
    OLECHECK(this->get_IsDirty((VARIANT_BOOL*)&IsDirty));
    return IsDirty;
  }

  BSTR __fastcall get_CubeProvider(void)
  {
    BSTR CubeProvider = 0;
    OLECHECK(this->get_CubeProvider((BSTR*)&CubeProvider));
    return CubeProvider;
  }

  BSTR __fastcall get_SelectionType(void)
  {
    BSTR SelectionType = 0;
    OLECHECK(this->get_SelectionType((BSTR*)&SelectionType));
    return SelectionType;
  }

  VARIANT_BOOL __fastcall get_DisplayScreenTips(void)
  {
    VARIANT_BOOL DisplayScreenTips;
    OLECHECK(this->get_DisplayScreenTips((VARIANT_BOOL*)&DisplayScreenTips));
    return DisplayScreenTips;
  }

  VARIANT_BOOL __fastcall get_ViewOnlyMode(void)
  {
    VARIANT_BOOL ViewOnlyMode;
    OLECHECK(this->get_ViewOnlyMode((VARIANT_BOOL*)&ViewOnlyMode));
    return ViewOnlyMode;
  }

  VARIANT_BOOL __fastcall get_DisplayDesignTimeUI(void)
  {
    VARIANT_BOOL DisplayDesignTimeUI;
    OLECHECK(this->get_DisplayDesignTimeUI((VARIANT_BOOL*)&DisplayDesignTimeUI));
    return DisplayDesignTimeUI;
  }

  Mscomctllib_xp::IToolbar* __fastcall get_Toolbar(void)
  {
    Mscomctllib_xp::IToolbar* Toolbar;
    OLECHECK(this->get_Toolbar((Mscomctllib_xp::IToolbar**)&Toolbar));
    return Toolbar;
  }

  Owc10_xp::PivotEditModeEnum __fastcall get_EditMode(void)
  {
    Owc10_xp::PivotEditModeEnum EditMode;
    OLECHECK(this->get_EditMode((Owc10_xp::PivotEditModeEnum*)&EditMode));
    return EditMode;
  }

  BSTR __fastcall get_HTMLData(void)
  {
    BSTR HTMLData = 0;
    OLECHECK(this->get_HTMLData((BSTR*)&HTMLData));
    return HTMLData;
  }

  BSTR __fastcall get_DataSourceName(void)
  {
    BSTR DataSourceName = 0;
    OLECHECK(this->get_DataSourceName((BSTR*)&DataSourceName));
    return DataSourceName;
  }

  VARIANT_BOOL __fastcall get_DisplayBranding(void)
  {
    VARIANT_BOOL DisplayBranding;
    OLECHECK(this->get_DisplayBranding((VARIANT_BOOL*)&DisplayBranding));
    return DisplayBranding;
  }

  VARIANT_BOOL __fastcall get_DisplayOfficeLogo(void)
  {
    VARIANT_BOOL DisplayOfficeLogo;
    OLECHECK(this->get_DisplayOfficeLogo((VARIANT_BOOL*)&DisplayOfficeLogo));
    return DisplayOfficeLogo;
  }


  __property   Owc10_xp::PivotView* ActiveView = {read = get_ActiveView};
  __property   LPDISPATCH      Selection = {read = get_Selection, write = _set_Selection};
  __property   Msdatasrc_xp::DataMember DataMember = {read = get_DataMember, write = set_DataMember};
  __property   Owc10_xp::PivotData* ActiveData = {read = get_ActiveData};
  __property   BSTR            Version = {read = get_Version};
  __property   VARIANT_BOOL    HasDetails = {read = get_HasDetails};
  __property   VARIANT_BOOL    DisplayToolbar = {read = get_DisplayToolbar, write = set_DisplayToolbar};
  __property   VARIANT_BOOL    AllowGrouping = {read = get_AllowGrouping, write = set_AllowGrouping};
  __property   VARIANT_BOOL    AllowFiltering = {read = get_AllowFiltering, write = set_AllowFiltering};
  __property   VARIANT_BOOL    AllowDetails = {read = get_AllowDetails, write = set_AllowDetails};
  __property   VARIANT_BOOL    AllowPropertyToolbox = {read = get_AllowPropertyToolbox, write = set_AllowPropertyToolbox};
  __property   VARIANT_BOOL    AllowCustomOrdering = {read = get_AllowCustomOrdering, write = set_AllowCustomOrdering};
  __property   VARIANT_BOOL    AutoFit = {read = get_AutoFit, write = set_AutoFit};
  __property   Msdatasrc_xp::DataSource* DataSource = {read = get_DataSource, write = set_DataSource};
  __property   VARIANT_BOOL    DisplayExpandIndicator = {read = get_DisplayExpandIndicator, write = set_DisplayExpandIndicator};
  __property   VARIANT_BOOL    RightToLeft = {read = get_RightToLeft, write = set_RightToLeft};
  __property   long            MaxWidth = {read = get_MaxWidth, write = set_MaxWidth};
  __property   long            MaxHeight = {read = get_MaxHeight, write = set_MaxHeight};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   BSTR            XMLData = {read = get_XMLData};
  __property   VARIANT_BOOL    DisplayPropertyToolbox = {read = get_DisplayPropertyToolbox, write = set_DisplayPropertyToolbox};
  __property   VARIANT_BOOL    DisplayFieldList = {read = get_DisplayFieldList, write = set_DisplayFieldList};
  __property   LPDISPATCH      Constants = {read = get_Constants};
  __property   long            MajorVersion = {read = get_MajorVersion};
  __property   BSTR            MinorVersion = {read = get_MinorVersion};
  __property   BSTR            BuildNumber = {read = get_BuildNumber};
  __property   BSTR            ConnectionString = {read = get_ConnectionString};
  __property   BSTR            CommandText = {read = get_CommandText};
  __property   Owc10_xp::ProviderType ProviderType = {read = get_ProviderType};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Owc10_xp::PivotTableMemberExpandEnum MemberExpand = {read = get_MemberExpand, write = set_MemberExpand};
  __property   Adodb_xp::Connection* Connection = {read = get_Connection, write = _set_Connection};
  __property   BSTR            RevisionNumber = {read = get_RevisionNumber};
  __property   VARIANT_BOOL    DisplayAlerts = {read = get_DisplayAlerts, write = set_DisplayAlerts};
  __property   Owc10_xp::PivotClassFactory* ClassFactory = {read = get_ClassFactory, write = _set_ClassFactory};
  __property   long            Left = {read = get_Left};
  __property   long            Top = {read = get_Top};
  __property   long            Hwnd = {read = get_Hwnd};
  __property   LPDISPATCH      ActiveObject = {read = get_ActiveObject, write = _set_ActiveObject};
  __property   Owc10_xp::OCCommands* Commands = {read = get_Commands};
  __property   VARIANT_BOOL    UserMode = {read = get_UserMode};
  __property   BSTR            DataMemberCaption = {read = get_DataMemberCaption};
  __property   LPDISPATCH      DataSourceEx = {read = get_DataSourceEx, write = _set_DataSourceEx};
  __property   VARIANT_BOOL    IsDirty = {read = get_IsDirty, write = set_IsDirty};
  __property   BSTR            CubeProvider = {read = get_CubeProvider};
  __property   BSTR            SelectionType = {read = get_SelectionType};
  __property   VARIANT_BOOL    DisplayScreenTips = {read = get_DisplayScreenTips, write = set_DisplayScreenTips};
  __property   VARIANT_BOOL    ViewOnlyMode = {read = get_ViewOnlyMode};
  __property   VARIANT_BOOL    DisplayDesignTimeUI = {read = get_DisplayDesignTimeUI, write = set_DisplayDesignTimeUI};
  __property   Mscomctllib_xp::IToolbar* Toolbar = {read = get_Toolbar};
  __property   Owc10_xp::PivotEditModeEnum EditMode = {read = get_EditMode};
  __property   BSTR            HTMLData = {read = get_HTMLData};
  __property   BSTR            DataSourceName = {read = get_DataSourceName};
  __property   VARIANT_BOOL    DisplayBranding = {read = get_DisplayBranding, write = set_DisplayBranding};
  __property   VARIANT_BOOL    DisplayOfficeLogo = {read = get_DisplayOfficeLogo, write = set_DisplayOfficeLogo};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PivotClassFactory
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {73F4D511-C851-11D2-8F2D-00600893B533}
// *********************************************************************//
interface PivotClassFactory  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_NewDetailCell(Owc10_xp::PivotDetailCell* DetailCell/*[in]*/, 
                                                      LPDISPATCH* NewDetailCell/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_NewAggregate(Owc10_xp::PivotAggregate* Aggregate/*[in]*/, 
                                                     LPDISPATCH* NewAggregate/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_NewRowMember(Owc10_xp::PivotAxisMember* RowMember/*[in]*/, 
                                                     LPDISPATCH* NewRowMember/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_NewColumnMember(Owc10_xp::PivotColumnMember* ColumnMember/*[in]*/, 
                                                        LPDISPATCH* NewColumnMember/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_NewCell(Owc10_xp::PivotCell* Cell/*[in]*/, 
                                                LPDISPATCH* NewCell/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_NewDetailCell(Owc10_xp::PivotDetailCell* DetailCell/*[in]*/)
  {
    LPDISPATCH NewDetailCell;
    OLECHECK(this->get_NewDetailCell(DetailCell, (LPDISPATCH*)&NewDetailCell));
    return NewDetailCell;
  }

  LPDISPATCH __fastcall get_NewAggregate(Owc10_xp::PivotAggregate* Aggregate/*[in]*/)
  {
    LPDISPATCH NewAggregate;
    OLECHECK(this->get_NewAggregate(Aggregate, (LPDISPATCH*)&NewAggregate));
    return NewAggregate;
  }

  LPDISPATCH __fastcall get_NewRowMember(Owc10_xp::PivotAxisMember* RowMember/*[in]*/)
  {
    LPDISPATCH NewRowMember;
    OLECHECK(this->get_NewRowMember(RowMember, (LPDISPATCH*)&NewRowMember));
    return NewRowMember;
  }

  LPDISPATCH __fastcall get_NewColumnMember(Owc10_xp::PivotColumnMember* ColumnMember/*[in]*/)
  {
    LPDISPATCH NewColumnMember;
    OLECHECK(this->get_NewColumnMember(ColumnMember, (LPDISPATCH*)&NewColumnMember));
    return NewColumnMember;
  }

  LPDISPATCH __fastcall get_NewCell(Owc10_xp::PivotCell* Cell/*[in]*/)
  {
    LPDISPATCH NewCell;
    OLECHECK(this->get_NewCell(Cell, (LPDISPATCH*)&NewCell));
    return NewCell;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PivotDetailCell
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B48-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface PivotDetailCell  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Value(VARIANT* Value/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Value(VARIANT Value/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Text(BSTR* Text/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Cell(Owc10_xp::PivotCell** Cell/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Field(Owc10_xp::PivotField** Field/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Row(long* Row/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Left(long* Left/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Top(long* Top/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Width(long* Width/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Height(long* Height/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Column(long* Column/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Hyperlink(Owc10_xp::PivotHyperlink** Hyperlink/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Bookmark(VARIANT* pvar/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT __fastcall get_Value(void)
  {
    VARIANT Value;
    OLECHECK(this->get_Value((VARIANT*)&Value));
    return Value;
  }

  BSTR __fastcall get_Text(void)
  {
    BSTR Text = 0;
    OLECHECK(this->get_Text((BSTR*)&Text));
    return Text;
  }

  Owc10_xp::PivotCell* __fastcall get_Cell(void)
  {
    Owc10_xp::PivotCell* Cell;
    OLECHECK(this->get_Cell((Owc10_xp::PivotCell**)&Cell));
    return Cell;
  }

  Owc10_xp::PivotField* __fastcall get_Field(void)
  {
    Owc10_xp::PivotField* Field;
    OLECHECK(this->get_Field((Owc10_xp::PivotField**)&Field));
    return Field;
  }

  long __fastcall get_Row(void)
  {
    long Row;
    OLECHECK(this->get_Row((long*)&Row));
    return Row;
  }

  long __fastcall get_Left(void)
  {
    long Left;
    OLECHECK(this->get_Left((long*)&Left));
    return Left;
  }

  long __fastcall get_Top(void)
  {
    long Top;
    OLECHECK(this->get_Top((long*)&Top));
    return Top;
  }

  long __fastcall get_Width(void)
  {
    long Width;
    OLECHECK(this->get_Width((long*)&Width));
    return Width;
  }

  long __fastcall get_Height(void)
  {
    long Height;
    OLECHECK(this->get_Height((long*)&Height));
    return Height;
  }

  long __fastcall get_Column(void)
  {
    long Column;
    OLECHECK(this->get_Column((long*)&Column));
    return Column;
  }

  Owc10_xp::PivotHyperlink* __fastcall get_Hyperlink(void)
  {
    Owc10_xp::PivotHyperlink* Hyperlink;
    OLECHECK(this->get_Hyperlink((Owc10_xp::PivotHyperlink**)&Hyperlink));
    return Hyperlink;
  }

  VARIANT __fastcall get_Bookmark(void)
  {
    VARIANT pvar;
    OLECHECK(this->get_Bookmark((VARIANT*)&pvar));
    return pvar;
  }


  __property   BSTR            Text = {read = get_Text};
  __property   Owc10_xp::PivotCell* Cell = {read = get_Cell};
  __property   Owc10_xp::PivotField* Field = {read = get_Field};
  __property   long            Row = {read = get_Row};
  __property   long            Left = {read = get_Left};
  __property   long            Top = {read = get_Top};
  __property   long            Width = {read = get_Width};
  __property   long            Height = {read = get_Height};
  __property   long            Column = {read = get_Column};
  __property   Owc10_xp::PivotHyperlink* Hyperlink = {read = get_Hyperlink};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PivotCell
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B31-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface PivotCell  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Aggregates(Owc10_xp::PivotAggregates** Aggregates/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Expanded(VARIANT_BOOL* Expanded/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Expanded(VARIANT_BOOL Expanded/*[in]*/) = 0; // [1610743809]
  virtual HRESULT STDMETHODCALLTYPE get_Recordset(Adodb_xp::Recordset** Recordset/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_RowMember(Owc10_xp::PivotAxisMember** Member/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ColumnMember(Owc10_xp::PivotColumnMember** Member/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DetailTop(long* DetailTop/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_DetailTop(long DetailTop/*[in]*/) = 0; // [1610743814]
  virtual HRESULT STDMETHODCALLTYPE get_DetailCells(long Row/*[in]*/, long Column/*[in]*/, 
                                                    Owc10_xp::PivotDetailCell** Cell/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DetailRange(Owc10_xp::PivotDetailCell* TopLeft/*[in]*/, 
                                                    Owc10_xp::PivotDetailCell* BottomRight/*[in]*/, 
                                                    Owc10_xp::PivotDetailRange** Range/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Data(Owc10_xp::PivotData** Data/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DetailTopOffset(long* DetailTopOffset/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_DetailTopOffset(long DetailTopOffset/*[in]*/) = 0; // [1610743819]
  virtual HRESULT STDMETHODCALLTYPE MoveDetailTop(long DetailTop/*[in]*/, 
                                                  long DetailTopOffset/*[in]*/, 
                                                  VARIANT_BOOL Update/*[in,def,opt]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DetailRowCount(long* DetailRowCount/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DetailColumnCount(long* DetailColumnCount/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_PageMember(Owc10_xp::PivotPageMember** Member/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::PivotAggregates* __fastcall get_Aggregates(void)
  {
    Owc10_xp::PivotAggregates* Aggregates;
    OLECHECK(this->get_Aggregates((Owc10_xp::PivotAggregates**)&Aggregates));
    return Aggregates;
  }

  VARIANT_BOOL __fastcall get_Expanded(void)
  {
    VARIANT_BOOL Expanded;
    OLECHECK(this->get_Expanded((VARIANT_BOOL*)&Expanded));
    return Expanded;
  }

  Adodb_xp::Recordset* __fastcall get_Recordset(void)
  {
    Adodb_xp::Recordset* Recordset;
    OLECHECK(this->get_Recordset((Adodb_xp::Recordset**)&Recordset));
    return Recordset;
  }

  Owc10_xp::PivotAxisMember* __fastcall get_RowMember(void)
  {
    Owc10_xp::PivotAxisMember* Member;
    OLECHECK(this->get_RowMember((Owc10_xp::PivotAxisMember**)&Member));
    return Member;
  }

  Owc10_xp::PivotColumnMember* __fastcall get_ColumnMember(void)
  {
    Owc10_xp::PivotColumnMember* Member;
    OLECHECK(this->get_ColumnMember((Owc10_xp::PivotColumnMember**)&Member));
    return Member;
  }

  long __fastcall get_DetailTop(void)
  {
    long DetailTop;
    OLECHECK(this->get_DetailTop((long*)&DetailTop));
    return DetailTop;
  }

  Owc10_xp::PivotDetailCell* __fastcall get_DetailCells(long Row/*[in]*/, long Column/*[in]*/)
  {
    Owc10_xp::PivotDetailCell* Cell;
    OLECHECK(this->get_DetailCells(Row, Column, (Owc10_xp::PivotDetailCell**)&Cell));
    return Cell;
  }

  Owc10_xp::PivotDetailRange* __fastcall get_DetailRange(Owc10_xp::PivotDetailCell* TopLeft/*[in]*/, 
                                                         Owc10_xp::PivotDetailCell* BottomRight/*[in]*/)
  {
    Owc10_xp::PivotDetailRange* Range;
    OLECHECK(this->get_DetailRange(TopLeft, BottomRight, (Owc10_xp::PivotDetailRange**)&Range));
    return Range;
  }

  Owc10_xp::PivotData* __fastcall get_Data(void)
  {
    Owc10_xp::PivotData* Data;
    OLECHECK(this->get_Data((Owc10_xp::PivotData**)&Data));
    return Data;
  }

  long __fastcall get_DetailTopOffset(void)
  {
    long DetailTopOffset;
    OLECHECK(this->get_DetailTopOffset((long*)&DetailTopOffset));
    return DetailTopOffset;
  }

  long __fastcall get_DetailRowCount(void)
  {
    long DetailRowCount;
    OLECHECK(this->get_DetailRowCount((long*)&DetailRowCount));
    return DetailRowCount;
  }

  long __fastcall get_DetailColumnCount(void)
  {
    long DetailColumnCount;
    OLECHECK(this->get_DetailColumnCount((long*)&DetailColumnCount));
    return DetailColumnCount;
  }

  Owc10_xp::PivotPageMember* __fastcall get_PageMember(void)
  {
    Owc10_xp::PivotPageMember* Member;
    OLECHECK(this->get_PageMember((Owc10_xp::PivotPageMember**)&Member));
    return Member;
  }


  __property   Owc10_xp::PivotAggregates* Aggregates = {read = get_Aggregates};
  __property   VARIANT_BOOL    Expanded = {read = get_Expanded, write = set_Expanded};
  __property   Adodb_xp::Recordset* Recordset = {read = get_Recordset};
  __property   Owc10_xp::PivotAxisMember* RowMember = {read = get_RowMember};
  __property   Owc10_xp::PivotColumnMember* ColumnMember = {read = get_ColumnMember};
  __property   long            DetailTop = {read = get_DetailTop, write = set_DetailTop};
  __property   Owc10_xp::PivotData* Data = {read = get_Data};
  __property   long            DetailTopOffset = {read = get_DetailTopOffset, write = set_DetailTopOffset};
  __property   long            DetailRowCount = {read = get_DetailRowCount};
  __property   long            DetailColumnCount = {read = get_DetailColumnCount};
  __property   Owc10_xp::PivotPageMember* PageMember = {read = get_PageMember};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PivotAggregates
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A77-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface PivotAggregates  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Owc10_xp::PivotAggregate** Aggregate/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::PivotAggregate* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Owc10_xp::PivotAggregate* Aggregate;
    OLECHECK(this->get_Item(Index, (Owc10_xp::PivotAggregate**)&Aggregate));
    return Aggregate;
  }

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunk));
    return ppunk;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PivotAggregate
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A78-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface PivotAggregate  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Value(VARIANT* Value/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [6023]
  virtual HRESULT STDMETHODCALLTYPE get_Text(BSTR* Text/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Cell(Owc10_xp::PivotCell** Cell/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Total(Owc10_xp::PivotTotal** Total/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Left(long* Left/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Top(long* Top/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Width(long* Width/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Height(long* Height/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ShowAsValue(VARIANT* ShowAsValue/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ProviderFormattedValue(VARIANT* Value/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ForeColor(VARIANT* Color/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_BackColor(VARIANT* Color/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT __fastcall get_Value(void)
  {
    VARIANT Value;
    OLECHECK(this->get_Value((VARIANT*)&Value));
    return Value;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  BSTR __fastcall get_Text(void)
  {
    BSTR Text = 0;
    OLECHECK(this->get_Text((BSTR*)&Text));
    return Text;
  }

  Owc10_xp::PivotCell* __fastcall get_Cell(void)
  {
    Owc10_xp::PivotCell* Cell;
    OLECHECK(this->get_Cell((Owc10_xp::PivotCell**)&Cell));
    return Cell;
  }

  Owc10_xp::PivotTotal* __fastcall get_Total(void)
  {
    Owc10_xp::PivotTotal* Total;
    OLECHECK(this->get_Total((Owc10_xp::PivotTotal**)&Total));
    return Total;
  }

  long __fastcall get_Left(void)
  {
    long Left;
    OLECHECK(this->get_Left((long*)&Left));
    return Left;
  }

  long __fastcall get_Top(void)
  {
    long Top;
    OLECHECK(this->get_Top((long*)&Top));
    return Top;
  }

  long __fastcall get_Width(void)
  {
    long Width;
    OLECHECK(this->get_Width((long*)&Width));
    return Width;
  }

  long __fastcall get_Height(void)
  {
    long Height;
    OLECHECK(this->get_Height((long*)&Height));
    return Height;
  }

  VARIANT __fastcall get_ShowAsValue(void)
  {
    VARIANT ShowAsValue;
    OLECHECK(this->get_ShowAsValue((VARIANT*)&ShowAsValue));
    return ShowAsValue;
  }

  VARIANT __fastcall get_ProviderFormattedValue(void)
  {
    VARIANT Value;
    OLECHECK(this->get_ProviderFormattedValue((VARIANT*)&Value));
    return Value;
  }

  VARIANT __fastcall get_ForeColor(void)
  {
    VARIANT Color;
    OLECHECK(this->get_ForeColor((VARIANT*)&Color));
    return Color;
  }

  VARIANT __fastcall get_BackColor(void)
  {
    VARIANT Color;
    OLECHECK(this->get_BackColor((VARIANT*)&Color));
    return Color;
  }


  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Text = {read = get_Text};
  __property   Owc10_xp::PivotCell* Cell = {read = get_Cell};
  __property   Owc10_xp::PivotTotal* Total = {read = get_Total};
  __property   long            Left = {read = get_Left};
  __property   long            Top = {read = get_Top};
  __property   long            Width = {read = get_Width};
  __property   long            Height = {read = get_Height};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PivotAxisMember
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1D40A583-EBA2-11D2-8F35-00600893B533}
// *********************************************************************//
interface PivotAxisMember  : public Owc10_xp::PivotMember
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_ChildAxisMembers(Owc10_xp::PivotAxisMembers** Members/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ParentAxisMember(Owc10_xp::PivotRowMember** ParentAxisMember/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_FindAxisMember(BSTR Path/*[in]*/, 
                                                       Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/, 
                                                       Owc10_xp::PivotRowMember** Member/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_TotalMember(Owc10_xp::PivotRowMember** TotalMember/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Axis(Owc10_xp::PivotResultAxis** Axis/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Expanded(VARIANT_BOOL* Expanded/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Expanded(VARIANT_BOOL Expanded/*[in]*/) = 0; // [1610809349]
  virtual HRESULT STDMETHODCALLTYPE get_Top(long* Top/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Left(long* Left/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Width(long* Width/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Width(long Width/*[in]*/) = 0; // [1610809353]
  virtual HRESULT STDMETHODCALLTYPE get_Height(long* Height/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Height(long Height/*[in]*/) = 0; // [1610809355]
  virtual HRESULT STDMETHODCALLTYPE get_AutoFit(VARIANT_BOOL* AutoFit/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_AutoFit(VARIANT_BOOL AutoFit/*[in]*/) = 0; // [1610809357]
  virtual HRESULT STDMETHODCALLTYPE get_Hyperlink(Owc10_xp::PivotHyperlink** Hyperlink/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_MemberProperties(Owc10_xp::PivotResultMemberProperties** MemberProperties/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_GroupField(Owc10_xp::PivotResultField** GroupField/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ShowDetails(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE HideDetails(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_IsTotal(VARIANT_BOOL* IsTotal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_SourceMember(Owc10_xp::PivotMember** SourceMember/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::PivotAxisMembers* __fastcall get_ChildAxisMembers(void)
  {
    Owc10_xp::PivotAxisMembers* Members;
    OLECHECK(this->get_ChildAxisMembers((Owc10_xp::PivotAxisMembers**)&Members));
    return Members;
  }

  Owc10_xp::PivotRowMember* __fastcall get_ParentAxisMember(void)
  {
    Owc10_xp::PivotRowMember* ParentAxisMember;
    OLECHECK(this->get_ParentAxisMember((Owc10_xp::PivotRowMember**)&ParentAxisMember));
    return ParentAxisMember;
  }

  Owc10_xp::PivotRowMember* __fastcall get_FindAxisMember(BSTR Path/*[in]*/, 
                                                          Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/)
  {
    Owc10_xp::PivotRowMember* Member;
    OLECHECK(this->get_FindAxisMember(Path, Format, (Owc10_xp::PivotRowMember**)&Member));
    return Member;
  }

  Owc10_xp::PivotRowMember* __fastcall get_TotalMember(void)
  {
    Owc10_xp::PivotRowMember* TotalMember;
    OLECHECK(this->get_TotalMember((Owc10_xp::PivotRowMember**)&TotalMember));
    return TotalMember;
  }

  Owc10_xp::PivotResultAxis* __fastcall get_Axis(void)
  {
    Owc10_xp::PivotResultAxis* Axis;
    OLECHECK(this->get_Axis((Owc10_xp::PivotResultAxis**)&Axis));
    return Axis;
  }

  VARIANT_BOOL __fastcall get_Expanded(void)
  {
    VARIANT_BOOL Expanded;
    OLECHECK(this->get_Expanded((VARIANT_BOOL*)&Expanded));
    return Expanded;
  }

  long __fastcall get_Top(void)
  {
    long Top;
    OLECHECK(this->get_Top((long*)&Top));
    return Top;
  }

  long __fastcall get_Left(void)
  {
    long Left;
    OLECHECK(this->get_Left((long*)&Left));
    return Left;
  }

  long __fastcall get_Width(void)
  {
    long Width;
    OLECHECK(this->get_Width((long*)&Width));
    return Width;
  }

  long __fastcall get_Height(void)
  {
    long Height;
    OLECHECK(this->get_Height((long*)&Height));
    return Height;
  }

  VARIANT_BOOL __fastcall get_AutoFit(void)
  {
    VARIANT_BOOL AutoFit;
    OLECHECK(this->get_AutoFit((VARIANT_BOOL*)&AutoFit));
    return AutoFit;
  }

  Owc10_xp::PivotHyperlink* __fastcall get_Hyperlink(void)
  {
    Owc10_xp::PivotHyperlink* Hyperlink;
    OLECHECK(this->get_Hyperlink((Owc10_xp::PivotHyperlink**)&Hyperlink));
    return Hyperlink;
  }

  Owc10_xp::PivotResultMemberProperties* __fastcall get_MemberProperties(void)
  {
    Owc10_xp::PivotResultMemberProperties* MemberProperties;
    OLECHECK(this->get_MemberProperties((Owc10_xp::PivotResultMemberProperties**)&MemberProperties));
    return MemberProperties;
  }

  Owc10_xp::PivotResultField* __fastcall get_GroupField(void)
  {
    Owc10_xp::PivotResultField* GroupField;
    OLECHECK(this->get_GroupField((Owc10_xp::PivotResultField**)&GroupField));
    return GroupField;
  }

  VARIANT_BOOL __fastcall get_IsTotal(void)
  {
    VARIANT_BOOL IsTotal;
    OLECHECK(this->get_IsTotal((VARIANT_BOOL*)&IsTotal));
    return IsTotal;
  }

  Owc10_xp::PivotMember* __fastcall get_SourceMember(void)
  {
    Owc10_xp::PivotMember* SourceMember;
    OLECHECK(this->get_SourceMember((Owc10_xp::PivotMember**)&SourceMember));
    return SourceMember;
  }


  __property   Owc10_xp::PivotAxisMembers* ChildAxisMembers = {read = get_ChildAxisMembers};
  __property   Owc10_xp::PivotRowMember* ParentAxisMember = {read = get_ParentAxisMember};
  __property   Owc10_xp::PivotRowMember* TotalMember = {read = get_TotalMember};
  __property   Owc10_xp::PivotResultAxis* Axis = {read = get_Axis};
  __property   VARIANT_BOOL    Expanded = {read = get_Expanded, write = set_Expanded};
  __property   long            Top = {read = get_Top};
  __property   long            Left = {read = get_Left};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   VARIANT_BOOL    AutoFit = {read = get_AutoFit, write = set_AutoFit};
  __property   Owc10_xp::PivotHyperlink* Hyperlink = {read = get_Hyperlink};
  __property   Owc10_xp::PivotResultMemberProperties* MemberProperties = {read = get_MemberProperties};
  __property   Owc10_xp::PivotResultField* GroupField = {read = get_GroupField};
  __property   VARIANT_BOOL    IsTotal = {read = get_IsTotal};
  __property   Owc10_xp::PivotMember* SourceMember = {read = get_SourceMember};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PivotRowMember
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1D40A584-EBA2-11D2-8F35-00600893B533}
// *********************************************************************//
interface PivotRowMember  : public Owc10_xp::PivotAxisMember
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_ChildRowMembers(Owc10_xp::PivotRowMembers** Members/*[out,retval]*/) = 0; // [1610874880]
  virtual HRESULT STDMETHODCALLTYPE get_ParentRowMember(Owc10_xp::PivotAxisMember** ParentRowMember/*[out,retval]*/) = 0; // [1610874881]
  virtual HRESULT STDMETHODCALLTYPE get_FindRowMember(BSTR Path/*[in]*/, 
                                                      Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/, 
                                                      Owc10_xp::PivotAxisMember** Member/*[out,retval]*/) = 0; // [1610874882]
  virtual HRESULT STDMETHODCALLTYPE get_TotalRowMember(Owc10_xp::PivotAxisMember** TotalMember/*[out,retval]*/) = 0; // [1610874883]
  virtual HRESULT STDMETHODCALLTYPE get_TotalRowHeight(long* TotalRowHeight/*[out,retval]*/) = 0; // [1610874884]
  virtual HRESULT STDMETHODCALLTYPE set_TotalRowHeight(long TotalRowHeight/*[in]*/) = 0; // [1610874884]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::PivotRowMembers* __fastcall get_ChildRowMembers(void)
  {
    Owc10_xp::PivotRowMembers* Members;
    OLECHECK(this->get_ChildRowMembers((Owc10_xp::PivotRowMembers**)&Members));
    return Members;
  }

  Owc10_xp::PivotAxisMember* __fastcall get_ParentRowMember(void)
  {
    Owc10_xp::PivotAxisMember* ParentRowMember;
    OLECHECK(this->get_ParentRowMember((Owc10_xp::PivotAxisMember**)&ParentRowMember));
    return ParentRowMember;
  }

  Owc10_xp::PivotAxisMember* __fastcall get_FindRowMember(BSTR Path/*[in]*/, 
                                                          Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/)
  {
    Owc10_xp::PivotAxisMember* Member;
    OLECHECK(this->get_FindRowMember(Path, Format, (Owc10_xp::PivotAxisMember**)&Member));
    return Member;
  }

  Owc10_xp::PivotAxisMember* __fastcall get_TotalRowMember(void)
  {
    Owc10_xp::PivotAxisMember* TotalMember;
    OLECHECK(this->get_TotalRowMember((Owc10_xp::PivotAxisMember**)&TotalMember));
    return TotalMember;
  }

  long __fastcall get_TotalRowHeight(void)
  {
    long TotalRowHeight;
    OLECHECK(this->get_TotalRowHeight((long*)&TotalRowHeight));
    return TotalRowHeight;
  }


  __property   Owc10_xp::PivotRowMembers* ChildRowMembers = {read = get_ChildRowMembers};
  __property   Owc10_xp::PivotAxisMember* ParentRowMember = {read = get_ParentRowMember};
  __property   Owc10_xp::PivotAxisMember* TotalRowMember = {read = get_TotalRowMember};
  __property   long            TotalRowHeight = {read = get_TotalRowHeight, write = set_TotalRowHeight};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PivotAxisMembers
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {30971540-EEB8-11D2-8F35-00600893B533}
// *********************************************************************//
interface PivotAxisMembers  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Owc10_xp::PivotRowMember** Member/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::PivotRowMember* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Owc10_xp::PivotRowMember* Member;
    OLECHECK(this->get_Item(Index, (Owc10_xp::PivotRowMember**)&Member));
    return Member;
  }

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunk));
    return ppunk;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PivotHyperlink
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A9C-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface PivotHyperlink  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Follow(VARIANT_BOOL NewWindow/*[in,def,opt]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Address(BSTR* Address/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Address(BSTR Address/*[in]*/) = 0; // [1610743811]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR Name/*[in]*/) = 0; // [1610743813]
  virtual HRESULT STDMETHODCALLTYPE get_SubAddress(BSTR* SubAddress/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_SubAddress(BSTR SubAddress/*[in]*/) = 0; // [1610743815]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  BSTR __fastcall get_Address(void)
  {
    BSTR Address = 0;
    OLECHECK(this->get_Address((BSTR*)&Address));
    return Address;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  BSTR __fastcall get_SubAddress(void)
  {
    BSTR SubAddress = 0;
    OLECHECK(this->get_SubAddress((BSTR*)&SubAddress));
    return SubAddress;
  }


  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Address = {read = get_Address};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            SubAddress = {read = get_SubAddress};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PivotResultMemberProperties
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {23E41747-B2E7-4A36-9CEB-99799D619D02}
// *********************************************************************//
interface PivotResultMemberProperties  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT varIndex/*[in]*/, 
                                             Owc10_xp::PivotResultMemberProperty** Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::PivotResultMemberProperty* __fastcall get_Item(VARIANT varIndex/*[in]*/)
  {
    Owc10_xp::PivotResultMemberProperty* Item;
    OLECHECK(this->get_Item(varIndex, (Owc10_xp::PivotResultMemberProperty**)&Item));
    return Item;
  }

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN _NewEnum;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&_NewEnum));
    return _NewEnum;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PivotResultMemberProperty
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {07C8959F-2E2A-4149-B6EA-6C511B21F485}
// *********************************************************************//
interface PivotResultMemberProperty  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [6023]
  virtual HRESULT STDMETHODCALLTYPE get_Caption(BSTR* Caption/*[out,retval]*/) = 0; // [6028]
  virtual HRESULT STDMETHODCALLTYPE get_Value(VARIANT* Value/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_MemberProperty(Owc10_xp::PivotMemberProperty** MemberProperty/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  BSTR __fastcall get_Caption(void)
  {
    BSTR Caption = 0;
    OLECHECK(this->get_Caption((BSTR*)&Caption));
    return Caption;
  }

  VARIANT __fastcall get_Value(void)
  {
    VARIANT Value;
    OLECHECK(this->get_Value((VARIANT*)&Value));
    return Value;
  }

  Owc10_xp::PivotMemberProperty* __fastcall get_MemberProperty(void)
  {
    Owc10_xp::PivotMemberProperty* MemberProperty;
    OLECHECK(this->get_MemberProperty((Owc10_xp::PivotMemberProperty**)&MemberProperty));
    return MemberProperty;
  }


  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Caption = {read = get_Caption};
  __property   Owc10_xp::PivotMemberProperty* MemberProperty = {read = get_MemberProperty};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PivotResultField
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {682A2445-8F22-4E2D-A73B-D04E4CC273B5}
// *********************************************************************//
interface PivotResultField  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_SourceField(Owc10_xp::PivotField** Field/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Axis(Owc10_xp::PivotResultGroupAxis** Axis/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::PivotField* __fastcall get_SourceField(void)
  {
    Owc10_xp::PivotField* Field;
    OLECHECK(this->get_SourceField((Owc10_xp::PivotField**)&Field));
    return Field;
  }

  Owc10_xp::PivotResultGroupAxis* __fastcall get_Axis(void)
  {
    Owc10_xp::PivotResultGroupAxis* Axis;
    OLECHECK(this->get_Axis((Owc10_xp::PivotResultGroupAxis**)&Axis));
    return Axis;
  }


  __property   Owc10_xp::PivotField* SourceField = {read = get_SourceField};
  __property   Owc10_xp::PivotResultGroupAxis* Axis = {read = get_Axis};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PivotResultGroupField
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {DC0342FE-039A-4D2D-80BF-BCA659270822}
// *********************************************************************//
interface PivotResultGroupField  : public Owc10_xp::PivotResultField
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_DisplayTotal(VARIANT_BOOL* DisplayTotal/*[out,retval]*/) = 0; // [1610809344]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_DisplayTotal(void)
  {
    VARIANT_BOOL DisplayTotal;
    OLECHECK(this->get_DisplayTotal((VARIANT_BOOL*)&DisplayTotal));
    return DisplayTotal;
  }


  __property   VARIANT_BOOL    DisplayTotal = {read = get_DisplayTotal};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PivotRowMembers
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {30971541-EEB8-11D2-8F35-00600893B533}
// *********************************************************************//
interface PivotRowMembers  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Owc10_xp::PivotAxisMember** Member/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::PivotAxisMember* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Owc10_xp::PivotAxisMember* Member;
    OLECHECK(this->get_Item(Index, (Owc10_xp::PivotAxisMember**)&Member));
    return Member;
  }

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunk));
    return ppunk;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PivotColumnMember
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1D40A585-EBA2-11D2-8F35-00600893B533}
// *********************************************************************//
interface PivotColumnMember  : public Owc10_xp::PivotAxisMember
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_ChildColumnMembers(Owc10_xp::PivotColumnMembers** Members/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ParentColumnMember(Owc10_xp::PivotColumnMember** ParentColumnMember/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_FindColumnMember(BSTR Path/*[in]*/, 
                                                         Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/, 
                                                         Owc10_xp::PivotColumnMember** Member/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_TotalColumnMember(Owc10_xp::PivotColumnMember** TotalMember/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DetailLeft(long* DetailLeft/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_DetailLeft(long DetailLeft/*[in]*/) = 0; // [1610874884]
  virtual HRESULT STDMETHODCALLTYPE get_DetailLeftOffset(long* DetailLeftOffset/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_DetailLeftOffset(long DetailLeftOffset/*[in]*/) = 0; // [1610874886]
  virtual HRESULT STDMETHODCALLTYPE MoveDetailLeft(long DetailLeft/*[in]*/, 
                                                   long DetailLeftOffset/*[in]*/, 
                                                   VARIANT_BOOL Update/*[in,def,opt]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DetailsExpanded(VARIANT_BOOL* DetailsExpanded/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::PivotColumnMembers* __fastcall get_ChildColumnMembers(void)
  {
    Owc10_xp::PivotColumnMembers* Members;
    OLECHECK(this->get_ChildColumnMembers((Owc10_xp::PivotColumnMembers**)&Members));
    return Members;
  }

  Owc10_xp::PivotColumnMember* __fastcall get_ParentColumnMember(void)
  {
    Owc10_xp::PivotColumnMember* ParentColumnMember;
    OLECHECK(this->get_ParentColumnMember((Owc10_xp::PivotColumnMember**)&ParentColumnMember));
    return ParentColumnMember;
  }

  Owc10_xp::PivotColumnMember* __fastcall get_FindColumnMember(BSTR Path/*[in]*/, 
                                                               Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/)
  {
    Owc10_xp::PivotColumnMember* Member;
    OLECHECK(this->get_FindColumnMember(Path, Format, (Owc10_xp::PivotColumnMember**)&Member));
    return Member;
  }

  Owc10_xp::PivotColumnMember* __fastcall get_TotalColumnMember(void)
  {
    Owc10_xp::PivotColumnMember* TotalMember;
    OLECHECK(this->get_TotalColumnMember((Owc10_xp::PivotColumnMember**)&TotalMember));
    return TotalMember;
  }

  long __fastcall get_DetailLeft(void)
  {
    long DetailLeft;
    OLECHECK(this->get_DetailLeft((long*)&DetailLeft));
    return DetailLeft;
  }

  long __fastcall get_DetailLeftOffset(void)
  {
    long DetailLeftOffset;
    OLECHECK(this->get_DetailLeftOffset((long*)&DetailLeftOffset));
    return DetailLeftOffset;
  }

  VARIANT_BOOL __fastcall get_DetailsExpanded(void)
  {
    VARIANT_BOOL DetailsExpanded;
    OLECHECK(this->get_DetailsExpanded((VARIANT_BOOL*)&DetailsExpanded));
    return DetailsExpanded;
  }


  __property   Owc10_xp::PivotColumnMembers* ChildColumnMembers = {read = get_ChildColumnMembers};
  __property   Owc10_xp::PivotColumnMember* ParentColumnMember = {read = get_ParentColumnMember};
  __property   Owc10_xp::PivotColumnMember* TotalColumnMember = {read = get_TotalColumnMember};
  __property   long            DetailLeft = {read = get_DetailLeft, write = set_DetailLeft};
  __property   long            DetailLeftOffset = {read = get_DetailLeftOffset, write = set_DetailLeftOffset};
  __property   VARIANT_BOOL    DetailsExpanded = {read = get_DetailsExpanded};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PivotColumnMembers
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {30971542-EEB8-11D2-8F35-00600893B533}
// *********************************************************************//
interface PivotColumnMembers  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Owc10_xp::PivotColumnMember** Member/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::PivotColumnMember* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Owc10_xp::PivotColumnMember* Member;
    OLECHECK(this->get_Item(Index, (Owc10_xp::PivotColumnMember**)&Member));
    return Member;
  }

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunk));
    return ppunk;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PivotDetailRange
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B47-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface PivotDetailRange  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Cell(Owc10_xp::PivotCell** Cell/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_TopLeft(Owc10_xp::PivotDetailCell** TopLeft/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_BottomRight(Owc10_xp::PivotDetailCell** BottomRight/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Fields(Owc10_xp::PivotFields** ppPF/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::PivotCell* __fastcall get_Cell(void)
  {
    Owc10_xp::PivotCell* Cell;
    OLECHECK(this->get_Cell((Owc10_xp::PivotCell**)&Cell));
    return Cell;
  }

  Owc10_xp::PivotDetailCell* __fastcall get_TopLeft(void)
  {
    Owc10_xp::PivotDetailCell* TopLeft;
    OLECHECK(this->get_TopLeft((Owc10_xp::PivotDetailCell**)&TopLeft));
    return TopLeft;
  }

  Owc10_xp::PivotDetailCell* __fastcall get_BottomRight(void)
  {
    Owc10_xp::PivotDetailCell* BottomRight;
    OLECHECK(this->get_BottomRight((Owc10_xp::PivotDetailCell**)&BottomRight));
    return BottomRight;
  }

  Owc10_xp::PivotFields* __fastcall get_Fields(void)
  {
    Owc10_xp::PivotFields* ppPF;
    OLECHECK(this->get_Fields((Owc10_xp::PivotFields**)&ppPF));
    return ppPF;
  }


  __property   Owc10_xp::PivotCell* Cell = {read = get_Cell};
  __property   Owc10_xp::PivotDetailCell* TopLeft = {read = get_TopLeft};
  __property   Owc10_xp::PivotDetailCell* BottomRight = {read = get_BottomRight};
  __property   Owc10_xp::PivotFields* Fields = {read = get_Fields};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PivotPageMember
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C575AE1E-3959-441A-BED4-D3DEA9EB8037}
// *********************************************************************//
interface PivotPageMember  : public Owc10_xp::PivotAxisMember
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_ChildPageMembers(Owc10_xp::PivotPageMembers** Members/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ParentPageMember(Owc10_xp::PivotPageMember** ParentPageMember/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_FindPageMember(BSTR Path/*[in]*/, 
                                                       Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/, 
                                                       Owc10_xp::PivotPageMember** Member/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_TotalPageMember(Owc10_xp::PivotPageMember** TotalMember/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::PivotPageMembers* __fastcall get_ChildPageMembers(void)
  {
    Owc10_xp::PivotPageMembers* Members;
    OLECHECK(this->get_ChildPageMembers((Owc10_xp::PivotPageMembers**)&Members));
    return Members;
  }

  Owc10_xp::PivotPageMember* __fastcall get_ParentPageMember(void)
  {
    Owc10_xp::PivotPageMember* ParentPageMember;
    OLECHECK(this->get_ParentPageMember((Owc10_xp::PivotPageMember**)&ParentPageMember));
    return ParentPageMember;
  }

  Owc10_xp::PivotPageMember* __fastcall get_FindPageMember(BSTR Path/*[in]*/, 
                                                           Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/)
  {
    Owc10_xp::PivotPageMember* Member;
    OLECHECK(this->get_FindPageMember(Path, Format, (Owc10_xp::PivotPageMember**)&Member));
    return Member;
  }

  Owc10_xp::PivotPageMember* __fastcall get_TotalPageMember(void)
  {
    Owc10_xp::PivotPageMember* TotalMember;
    OLECHECK(this->get_TotalPageMember((Owc10_xp::PivotPageMember**)&TotalMember));
    return TotalMember;
  }


  __property   Owc10_xp::PivotPageMembers* ChildPageMembers = {read = get_ChildPageMembers};
  __property   Owc10_xp::PivotPageMember* ParentPageMember = {read = get_ParentPageMember};
  __property   Owc10_xp::PivotPageMember* TotalPageMember = {read = get_TotalPageMember};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PivotPageMembers
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E3AB2FF8-B95F-4C05-BF3F-6E9BA007F81C}
// *********************************************************************//
interface PivotPageMembers  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Owc10_xp::PivotPageMember** Member/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::PivotPageMember* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Owc10_xp::PivotPageMember* Member;
    OLECHECK(this->get_Item(Index, (Owc10_xp::PivotPageMember**)&Member));
    return Member;
  }

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunk));
    return ppunk;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: DropSource
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D6CE4620-E224-11D2-8F35-00600893B533}
// *********************************************************************//
interface DropSource  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE GiveFeedback(unsigned_long dwEffect) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE QueryContinueDrag(VARIANT_BOOL EscapePressed, long KeyState) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: DropTarget
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {77186960-CDB1-11D2-8F2E-00600893B533}
// *********************************************************************//
interface DropTarget  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE DragEnter(long x/*[in]*/, long y/*[in]*/, long KeyState/*[in]*/, 
                                              unsigned_long* Effect/*[in,out]*/, 
                                              LPDISPATCH Object/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE DragOver(long x/*[in]*/, long y/*[in]*/, long KeyState/*[in]*/, 
                                             unsigned_long* Effect/*[in,out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE DragLeave(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Drop(long x/*[in]*/, long y/*[in]*/, long KeyState/*[in]*/, 
                                         unsigned_long* Effect/*[in,out]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: OCCommands
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {85FE02E2-51A7-11D3-BE84-0050041DB15A}
// *********************************************************************//
interface OCCommands  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Owc10_xp::OCCommand** Item/*[out,retval]*/) = 0; // [0]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::OCCommand* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Owc10_xp::OCCommand* Item;
    OLECHECK(this->get_Item(Index, (Owc10_xp::OCCommand**)&Item));
    return Item;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: OCCommand
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B9B7C776-51A7-11D3-BE84-0050041DB15A}
// *********************************************************************//
interface OCCommand  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Checked(VARIANT_BOOL* Checked/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_TipText(BSTR* TipText/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Execute(void) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_Enabled(void)
  {
    VARIANT_BOOL Enabled;
    OLECHECK(this->get_Enabled((VARIANT_BOOL*)&Enabled));
    return Enabled;
  }

  VARIANT_BOOL __fastcall get_Checked(void)
  {
    VARIANT_BOOL Checked;
    OLECHECK(this->get_Checked((VARIANT_BOOL*)&Checked));
    return Checked;
  }

  BSTR __fastcall get_TipText(void)
  {
    BSTR TipText = 0;
    OLECHECK(this->get_TipText((BSTR*)&TipText));
    return TipText;
  }


  __property   VARIANT_BOOL    Enabled = {read = get_Enabled};
  __property   VARIANT_BOOL    Checked = {read = get_Checked};
  __property   BSTR            TipText = {read = get_TipText};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PivotResultRowAxis
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2C8CED11-01AF-11D3-8F35-00600893B533}
// *********************************************************************//
interface PivotResultRowAxis  : public Owc10_xp::PivotResultGroupAxis
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_SourceRowAxis(Owc10_xp::PivotAxis** Axis/*[out,retval]*/) = 0; // [1610874880]
  virtual HRESULT STDMETHODCALLTYPE get_RowMember(Owc10_xp::PivotAxisMember** Member/*[out,retval]*/) = 0; // [1610874881]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::PivotAxis* __fastcall get_SourceRowAxis(void)
  {
    Owc10_xp::PivotAxis* Axis;
    OLECHECK(this->get_SourceRowAxis((Owc10_xp::PivotAxis**)&Axis));
    return Axis;
  }

  Owc10_xp::PivotAxisMember* __fastcall get_RowMember(void)
  {
    Owc10_xp::PivotAxisMember* Member;
    OLECHECK(this->get_RowMember((Owc10_xp::PivotAxisMember**)&Member));
    return Member;
  }


  __property   Owc10_xp::PivotAxis* SourceRowAxis = {read = get_SourceRowAxis};
  __property   Owc10_xp::PivotAxisMember* RowMember = {read = get_RowMember};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PivotResultColumnAxis
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2C8CED12-01AF-11D3-8F35-00600893B533}
// *********************************************************************//
interface PivotResultColumnAxis  : public Owc10_xp::PivotResultGroupAxis
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_SourceColumnAxis(Owc10_xp::PivotAxis** Axis/*[out,retval]*/) = 0; // [1610874880]
  virtual HRESULT STDMETHODCALLTYPE get_ColumnMember(Owc10_xp::PivotColumnMember** Member/*[out,retval]*/) = 0; // [1610874881]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::PivotAxis* __fastcall get_SourceColumnAxis(void)
  {
    Owc10_xp::PivotAxis* Axis;
    OLECHECK(this->get_SourceColumnAxis((Owc10_xp::PivotAxis**)&Axis));
    return Axis;
  }

  Owc10_xp::PivotColumnMember* __fastcall get_ColumnMember(void)
  {
    Owc10_xp::PivotColumnMember* Member;
    OLECHECK(this->get_ColumnMember((Owc10_xp::PivotColumnMember**)&Member));
    return Member;
  }


  __property   Owc10_xp::PivotAxis* SourceColumnAxis = {read = get_SourceColumnAxis};
  __property   Owc10_xp::PivotColumnMember* ColumnMember = {read = get_ColumnMember};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PivotResultFilterAxis
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2C8CED13-01AF-11D3-8F35-00600893B533}
// *********************************************************************//
interface PivotResultFilterAxis  : public Owc10_xp::PivotResultAxis
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_SourceFilterAxis(Owc10_xp::PivotFilterAxis** Axis/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_FieldSets(Owc10_xp::PivotFieldSets** FieldSets/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::PivotFilterAxis* __fastcall get_SourceFilterAxis(void)
  {
    Owc10_xp::PivotFilterAxis* Axis;
    OLECHECK(this->get_SourceFilterAxis((Owc10_xp::PivotFilterAxis**)&Axis));
    return Axis;
  }

  Owc10_xp::PivotFieldSets* __fastcall get_FieldSets(void)
  {
    Owc10_xp::PivotFieldSets* FieldSets;
    OLECHECK(this->get_FieldSets((Owc10_xp::PivotFieldSets**)&FieldSets));
    return FieldSets;
  }


  __property   Owc10_xp::PivotFilterAxis* SourceFilterAxis = {read = get_SourceFilterAxis};
  __property   Owc10_xp::PivotFieldSets* FieldSets = {read = get_FieldSets};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PivotResultDataAxis
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2C8CED15-01AF-11D3-8F35-00600893B533}
// *********************************************************************//
interface PivotResultDataAxis  : public Owc10_xp::PivotResultAxis
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_SourceDataAxis(Owc10_xp::PivotDataAxis** Axis/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Fields(Owc10_xp::PivotFields** Fields/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Totals(Owc10_xp::PivotTotals** Totals/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::PivotDataAxis* __fastcall get_SourceDataAxis(void)
  {
    Owc10_xp::PivotDataAxis* Axis;
    OLECHECK(this->get_SourceDataAxis((Owc10_xp::PivotDataAxis**)&Axis));
    return Axis;
  }

  Owc10_xp::PivotFields* __fastcall get_Fields(void)
  {
    Owc10_xp::PivotFields* Fields;
    OLECHECK(this->get_Fields((Owc10_xp::PivotFields**)&Fields));
    return Fields;
  }

  Owc10_xp::PivotTotals* __fastcall get_Totals(void)
  {
    Owc10_xp::PivotTotals* Totals;
    OLECHECK(this->get_Totals((Owc10_xp::PivotTotals**)&Totals));
    return Totals;
  }


  __property   Owc10_xp::PivotDataAxis* SourceDataAxis = {read = get_SourceDataAxis};
  __property   Owc10_xp::PivotFields* Fields = {read = get_Fields};
  __property   Owc10_xp::PivotTotals* Totals = {read = get_Totals};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PivotRange
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B4A-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface PivotRange  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_TopLeft(Owc10_xp::PivotCell** Cell/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_BottomRight(Owc10_xp::PivotCell** Cell/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_RowMembers(Owc10_xp::PivotRowMembers** RowMembers/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ColumnMembers(Owc10_xp::PivotColumnMembers** ColumnMembers/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Cells(Owc10_xp::PivotAxisMember* Row/*[in]*/, 
                                              Owc10_xp::PivotColumnMember* Column/*[in]*/, 
                                              Owc10_xp::PivotCell** Cell/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::PivotCell* __fastcall get_TopLeft(void)
  {
    Owc10_xp::PivotCell* Cell;
    OLECHECK(this->get_TopLeft((Owc10_xp::PivotCell**)&Cell));
    return Cell;
  }

  Owc10_xp::PivotCell* __fastcall get_BottomRight(void)
  {
    Owc10_xp::PivotCell* Cell;
    OLECHECK(this->get_BottomRight((Owc10_xp::PivotCell**)&Cell));
    return Cell;
  }

  Owc10_xp::PivotRowMembers* __fastcall get_RowMembers(void)
  {
    Owc10_xp::PivotRowMembers* RowMembers;
    OLECHECK(this->get_RowMembers((Owc10_xp::PivotRowMembers**)&RowMembers));
    return RowMembers;
  }

  Owc10_xp::PivotColumnMembers* __fastcall get_ColumnMembers(void)
  {
    Owc10_xp::PivotColumnMembers* ColumnMembers;
    OLECHECK(this->get_ColumnMembers((Owc10_xp::PivotColumnMembers**)&ColumnMembers));
    return ColumnMembers;
  }

  Owc10_xp::PivotCell* __fastcall get_Cells(Owc10_xp::PivotAxisMember* Row/*[in]*/, 
                                            Owc10_xp::PivotColumnMember* Column/*[in]*/)
  {
    Owc10_xp::PivotCell* Cell;
    OLECHECK(this->get_Cells(Row, Column, (Owc10_xp::PivotCell**)&Cell));
    return Cell;
  }


  __property   Owc10_xp::PivotCell* TopLeft = {read = get_TopLeft};
  __property   Owc10_xp::PivotCell* BottomRight = {read = get_BottomRight};
  __property   Owc10_xp::PivotRowMembers* RowMembers = {read = get_RowMembers};
  __property   Owc10_xp::PivotColumnMembers* ColumnMembers = {read = get_ColumnMembers};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PivotResultLabel
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D5A2B201-0334-11D3-8F39-00600893B533}
// *********************************************************************//
interface PivotResultLabel  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_SourceLabel(Owc10_xp::PivotLabel** SourceLabel/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Top(long* Top/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Left(long* Left/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Width(long* Width/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Height(long* Height/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::PivotLabel* __fastcall get_SourceLabel(void)
  {
    Owc10_xp::PivotLabel* SourceLabel;
    OLECHECK(this->get_SourceLabel((Owc10_xp::PivotLabel**)&SourceLabel));
    return SourceLabel;
  }

  long __fastcall get_Top(void)
  {
    long Top;
    OLECHECK(this->get_Top((long*)&Top));
    return Top;
  }

  long __fastcall get_Left(void)
  {
    long Left;
    OLECHECK(this->get_Left((long*)&Left));
    return Left;
  }

  long __fastcall get_Width(void)
  {
    long Width;
    OLECHECK(this->get_Width((long*)&Width));
    return Width;
  }

  long __fastcall get_Height(void)
  {
    long Height;
    OLECHECK(this->get_Height((long*)&Height));
    return Height;
  }


  __property   Owc10_xp::PivotLabel* SourceLabel = {read = get_SourceLabel};
  __property   long            Top = {read = get_Top};
  __property   long            Left = {read = get_Left};
  __property   long            Width = {read = get_Width};
  __property   long            Height = {read = get_Height};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PivotResultPageAxis
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2719FF1C-6999-4C17-94B3-887FCA2DCFA0}
// *********************************************************************//
interface PivotResultPageAxis  : public Owc10_xp::PivotResultGroupAxis
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_SourcePageAxis(Owc10_xp::PivotAxis** Axis/*[out,retval]*/) = 0; // [1610874880]
  virtual HRESULT STDMETHODCALLTYPE get_PageMember(Owc10_xp::PivotPageMember** Member/*[out,retval]*/) = 0; // [1610874881]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::PivotAxis* __fastcall get_SourcePageAxis(void)
  {
    Owc10_xp::PivotAxis* Axis;
    OLECHECK(this->get_SourcePageAxis((Owc10_xp::PivotAxis**)&Axis));
    return Axis;
  }

  Owc10_xp::PivotPageMember* __fastcall get_PageMember(void)
  {
    Owc10_xp::PivotPageMember* Member;
    OLECHECK(this->get_PageMember((Owc10_xp::PivotPageMember**)&Member));
    return Member;
  }


  __property   Owc10_xp::PivotAxis* SourcePageAxis = {read = get_SourcePageAxis};
  __property   Owc10_xp::PivotPageMember* PageMember = {read = get_PageMember};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PivotResultGroupFields
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3A3AF091-8C35-4CC7-A1F4-B70D239D773B}
// *********************************************************************//
interface PivotResultGroupFields  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Owc10_xp::PivotResultField** Field/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::PivotResultField* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Owc10_xp::PivotResultField* Field;
    OLECHECK(this->get_Item(Index, (Owc10_xp::PivotResultField**)&Field));
    return Field;
  }

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunk));
    return ppunk;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Coordinate
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {08801567-AFB8-45B0-A076-CC91579EC10E}
// *********************************************************************//
interface Coordinate  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_x(long* pl/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_y(long* pl/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_x(void)
  {
    long pl;
    OLECHECK(this->get_x((long*)&pl));
    return pl;
  }

  long __fastcall get_y(void)
  {
    long pl;
    OLECHECK(this->get_y((long*)&pl));
    return pl;
  }


  __property   long            x = {read = get_x};
  __property   long            y = {read = get_y};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ChLegend
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AEC-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface ChLegend  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Border(Owc10_xp::ChBorder** ppline/*[out,retval]*/) = 0; // [5004]
  virtual HRESULT STDMETHODCALLTYPE get_Font(Owc10_xp::ChFont** pfont/*[out,retval]*/) = 0; // [5200]
  virtual HRESULT STDMETHODCALLTYPE get_Interior(Owc10_xp::ChInterior** ppinterior/*[out,retval]*/) = 0; // [5007]
  virtual HRESULT STDMETHODCALLTYPE get_LegendEntries(Owc10_xp::ChLegendEntries** pplegendentries/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* ppidispatch/*[out,retval]*/) = 0; // [5201]
  virtual HRESULT STDMETHODCALLTYPE set_Position(Owc10_xp::ChartLegendPositionEnum pocpPos/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Position(Owc10_xp::ChartLegendPositionEnum* pocpPos/*[out,retval]*/) = 0; // [1610743813]
  virtual HRESULT STDMETHODCALLTYPE Select(void) = 0; // [5036]
  virtual HRESULT STDMETHODCALLTYPE get_Top(long* ptop/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Top(long ptop/*[in]*/) = 0; // [1610743816]
  virtual HRESULT STDMETHODCALLTYPE get_Left(long* pleft/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Left(long pleft/*[in]*/) = 0; // [1610743818]
  virtual HRESULT STDMETHODCALLTYPE get_Bottom(long* pbottom/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Right(long* pright/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::ChBorder* __fastcall get_Border(void)
  {
    Owc10_xp::ChBorder* ppline;
    OLECHECK(this->get_Border((Owc10_xp::ChBorder**)&ppline));
    return ppline;
  }

  Owc10_xp::ChFont* __fastcall get_Font(void)
  {
    Owc10_xp::ChFont* pfont;
    OLECHECK(this->get_Font((Owc10_xp::ChFont**)&pfont));
    return pfont;
  }

  Owc10_xp::ChInterior* __fastcall get_Interior(void)
  {
    Owc10_xp::ChInterior* ppinterior;
    OLECHECK(this->get_Interior((Owc10_xp::ChInterior**)&ppinterior));
    return ppinterior;
  }

  Owc10_xp::ChLegendEntries* __fastcall get_LegendEntries(void)
  {
    Owc10_xp::ChLegendEntries* pplegendentries;
    OLECHECK(this->get_LegendEntries((Owc10_xp::ChLegendEntries**)&pplegendentries));
    return pplegendentries;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH ppidispatch;
    OLECHECK(this->get_Parent((LPDISPATCH*)&ppidispatch));
    return ppidispatch;
  }

  Owc10_xp::ChartLegendPositionEnum __fastcall get_Position(void)
  {
    Owc10_xp::ChartLegendPositionEnum pocpPos;
    OLECHECK(this->get_Position((Owc10_xp::ChartLegendPositionEnum*)&pocpPos));
    return pocpPos;
  }

  long __fastcall get_Top(void)
  {
    long ptop;
    OLECHECK(this->get_Top((long*)&ptop));
    return ptop;
  }

  long __fastcall get_Left(void)
  {
    long pleft;
    OLECHECK(this->get_Left((long*)&pleft));
    return pleft;
  }

  long __fastcall get_Bottom(void)
  {
    long pbottom;
    OLECHECK(this->get_Bottom((long*)&pbottom));
    return pbottom;
  }

  long __fastcall get_Right(void)
  {
    long pright;
    OLECHECK(this->get_Right((long*)&pright));
    return pright;
  }

  Owc10_xp::ChartSelectionsEnum __fastcall get_ObjectType(void)
  {
    Owc10_xp::ChartSelectionsEnum pcs;
    OLECHECK(this->get_ObjectType((Owc10_xp::ChartSelectionsEnum*)&pcs));
    return pcs;
  }


  __property   Owc10_xp::ChBorder* Border = {read = get_Border};
  __property   Owc10_xp::ChFont* Font = {read = get_Font};
  __property   Owc10_xp::ChInterior* Interior = {read = get_Interior};
  __property   Owc10_xp::ChLegendEntries* LegendEntries = {read = get_LegendEntries};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Owc10_xp::ChartLegendPositionEnum Position = {read = get_Position, write = set_Position};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Bottom = {read = get_Bottom};
  __property   long            Right = {read = get_Right};
  __property   Owc10_xp::ChartSelectionsEnum ObjectType = {read = get_ObjectType};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ChLegendEntries
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AB8-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface ChLegendEntries  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* cLegendEntries/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Item(long Index/*[in]*/, 
                                             Owc10_xp::ChLegendEntry** pplegendentry/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Owc10_xp::ChLegend** pplegend/*[out,retval]*/) = 0; // [5201]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunk));
    return ppunk;
  }

  long __fastcall get_Count(void)
  {
    long cLegendEntries;
    OLECHECK(this->get_Count((long*)&cLegendEntries));
    return cLegendEntries;
  }

  Owc10_xp::ChLegendEntry* __fastcall get_Item(long Index/*[in]*/)
  {
    Owc10_xp::ChLegendEntry* pplegendentry;
    OLECHECK(this->get_Item(Index, (Owc10_xp::ChLegendEntry**)&pplegendentry));
    return pplegendentry;
  }

  Owc10_xp::ChLegend* __fastcall get_Parent(void)
  {
    Owc10_xp::ChLegend* pplegend;
    OLECHECK(this->get_Parent((Owc10_xp::ChLegend**)&pplegend));
    return pplegend;
  }


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
  __property   Owc10_xp::ChLegend* Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ChLegendEntry
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AB9-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface ChLegendEntry  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Font(Owc10_xp::ChFont** ppfont/*[out,retval]*/) = 0; // [5200]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(VARIANT_BOOL pfVisible/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(VARIANT_BOOL* pfVisible/*[out,retval]*/) = 0; // [1610743809]
  virtual HRESULT STDMETHODCALLTYPE get_Index(long* pilegendentry/*[out,retval]*/) = 0; // [5204]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Owc10_xp::ChLegend** pplegend/*[out,retval]*/) = 0; // [5201]
  virtual HRESULT STDMETHODCALLTYPE Select(void) = 0; // [5036]
  virtual HRESULT STDMETHODCALLTYPE get_PivotObject(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Top(long* ptop/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Left(long* pleft/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Bottom(long* pbottom/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Right(long* pright/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::ChFont* __fastcall get_Font(void)
  {
    Owc10_xp::ChFont* ppfont;
    OLECHECK(this->get_Font((Owc10_xp::ChFont**)&ppfont));
    return ppfont;
  }

  VARIANT_BOOL __fastcall get_Visible(void)
  {
    VARIANT_BOOL pfVisible;
    OLECHECK(this->get_Visible((VARIANT_BOOL*)&pfVisible));
    return pfVisible;
  }

  long __fastcall get_Index(void)
  {
    long pilegendentry;
    OLECHECK(this->get_Index((long*)&pilegendentry));
    return pilegendentry;
  }

  Owc10_xp::ChLegend* __fastcall get_Parent(void)
  {
    Owc10_xp::ChLegend* pplegend;
    OLECHECK(this->get_Parent((Owc10_xp::ChLegend**)&pplegend));
    return pplegend;
  }

  LPDISPATCH __fastcall get_PivotObject(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_PivotObject((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  long __fastcall get_Top(void)
  {
    long ptop;
    OLECHECK(this->get_Top((long*)&ptop));
    return ptop;
  }

  long __fastcall get_Left(void)
  {
    long pleft;
    OLECHECK(this->get_Left((long*)&pleft));
    return pleft;
  }

  long __fastcall get_Bottom(void)
  {
    long pbottom;
    OLECHECK(this->get_Bottom((long*)&pbottom));
    return pbottom;
  }

  long __fastcall get_Right(void)
  {
    long pright;
    OLECHECK(this->get_Right((long*)&pright));
    return pright;
  }

  Owc10_xp::ChartSelectionsEnum __fastcall get_ObjectType(void)
  {
    Owc10_xp::ChartSelectionsEnum pcs;
    OLECHECK(this->get_ObjectType((Owc10_xp::ChartSelectionsEnum*)&pcs));
    return pcs;
  }


  __property   Owc10_xp::ChFont* Font = {read = get_Font};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   long            Index = {read = get_Index};
  __property   Owc10_xp::ChLegend* Parent = {read = get_Parent};
  __property   LPDISPATCH      PivotObject = {read = get_PivotObject};
  __property   long            Top = {read = get_Top};
  __property   long            Left = {read = get_Left};
  __property   long            Bottom = {read = get_Bottom};
  __property   long            Right = {read = get_Right};
  __property   Owc10_xp::ChartSelectionsEnum ObjectType = {read = get_ObjectType};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ChPlotArea
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39ABA-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface ChPlotArea  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Border(Owc10_xp::ChBorder** ppline/*[out,retval]*/) = 0; // [5004]
  virtual HRESULT STDMETHODCALLTYPE get_Interior(Owc10_xp::ChInterior** ppinterior/*[out,retval]*/) = 0; // [5007]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Owc10_xp::ChChart** ppchart/*[out,retval]*/) = 0; // [5201]
  virtual HRESULT STDMETHODCALLTYPE FlipHorizontal(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE FlipVertical(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE RotateClockwise(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE RotateCounterClockwise(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Select(void) = 0; // [5036]
  virtual HRESULT STDMETHODCALLTYPE get_Top(long* ptop/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Top(long ptop/*[in]*/) = 0; // [1610743816]
  virtual HRESULT STDMETHODCALLTYPE get_Left(long* pleft/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Left(long pleft/*[in]*/) = 0; // [1610743818]
  virtual HRESULT STDMETHODCALLTYPE get_Bottom(long* pbottom/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Bottom(long pbottom/*[in]*/) = 0; // [1610743820]
  virtual HRESULT STDMETHODCALLTYPE get_Right(long* pright/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Right(long pright/*[in]*/) = 0; // [1610743822]
  virtual HRESULT STDMETHODCALLTYPE get_BackWall(Owc10_xp::ChSurface** psurface/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_SideWall(Owc10_xp::ChSurface** psurface/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Floor(Owc10_xp::ChSurface** psurface/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::ChBorder* __fastcall get_Border(void)
  {
    Owc10_xp::ChBorder* ppline;
    OLECHECK(this->get_Border((Owc10_xp::ChBorder**)&ppline));
    return ppline;
  }

  Owc10_xp::ChInterior* __fastcall get_Interior(void)
  {
    Owc10_xp::ChInterior* ppinterior;
    OLECHECK(this->get_Interior((Owc10_xp::ChInterior**)&ppinterior));
    return ppinterior;
  }

  Owc10_xp::ChChart* __fastcall get_Parent(void)
  {
    Owc10_xp::ChChart* ppchart;
    OLECHECK(this->get_Parent((Owc10_xp::ChChart**)&ppchart));
    return ppchart;
  }

  long __fastcall get_Top(void)
  {
    long ptop;
    OLECHECK(this->get_Top((long*)&ptop));
    return ptop;
  }

  long __fastcall get_Left(void)
  {
    long pleft;
    OLECHECK(this->get_Left((long*)&pleft));
    return pleft;
  }

  long __fastcall get_Bottom(void)
  {
    long pbottom;
    OLECHECK(this->get_Bottom((long*)&pbottom));
    return pbottom;
  }

  long __fastcall get_Right(void)
  {
    long pright;
    OLECHECK(this->get_Right((long*)&pright));
    return pright;
  }

  Owc10_xp::ChSurface* __fastcall get_BackWall(void)
  {
    Owc10_xp::ChSurface* psurface;
    OLECHECK(this->get_BackWall((Owc10_xp::ChSurface**)&psurface));
    return psurface;
  }

  Owc10_xp::ChSurface* __fastcall get_SideWall(void)
  {
    Owc10_xp::ChSurface* psurface;
    OLECHECK(this->get_SideWall((Owc10_xp::ChSurface**)&psurface));
    return psurface;
  }

  Owc10_xp::ChSurface* __fastcall get_Floor(void)
  {
    Owc10_xp::ChSurface* psurface;
    OLECHECK(this->get_Floor((Owc10_xp::ChSurface**)&psurface));
    return psurface;
  }

  Owc10_xp::ChartSelectionsEnum __fastcall get_ObjectType(void)
  {
    Owc10_xp::ChartSelectionsEnum pcs;
    OLECHECK(this->get_ObjectType((Owc10_xp::ChartSelectionsEnum*)&pcs));
    return pcs;
  }


  __property   Owc10_xp::ChBorder* Border = {read = get_Border};
  __property   Owc10_xp::ChInterior* Interior = {read = get_Interior};
  __property   Owc10_xp::ChChart* Parent = {read = get_Parent};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Bottom = {read = get_Bottom, write = set_Bottom};
  __property   long            Right = {read = get_Right, write = set_Right};
  __property   Owc10_xp::ChSurface* BackWall = {read = get_BackWall};
  __property   Owc10_xp::ChSurface* SideWall = {read = get_SideWall};
  __property   Owc10_xp::ChSurface* Floor = {read = get_Floor};
  __property   Owc10_xp::ChartSelectionsEnum ObjectType = {read = get_ObjectType};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ChSurface
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C592C1D2-448A-11D3-82BA-00C04F4C2A96}
// *********************************************************************//
interface ChSurface  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Border(Owc10_xp::ChBorder** ppline/*[out,retval]*/) = 0; // [5004]
  virtual HRESULT STDMETHODCALLTYPE set_Thickness(long pl/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Thickness(long* pl/*[out,retval]*/) = 0; // [1610743809]
  virtual HRESULT STDMETHODCALLTYPE get_Interior(Owc10_xp::ChInterior** ppinterior/*[out,retval]*/) = 0; // [5007]
  virtual HRESULT STDMETHODCALLTYPE Select(void) = 0; // [5036]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Owc10_xp::ChPlotArea** ppplotarea/*[out,retval]*/) = 0; // [5201]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::ChBorder* __fastcall get_Border(void)
  {
    Owc10_xp::ChBorder* ppline;
    OLECHECK(this->get_Border((Owc10_xp::ChBorder**)&ppline));
    return ppline;
  }

  long __fastcall get_Thickness(void)
  {
    long pl;
    OLECHECK(this->get_Thickness((long*)&pl));
    return pl;
  }

  Owc10_xp::ChInterior* __fastcall get_Interior(void)
  {
    Owc10_xp::ChInterior* ppinterior;
    OLECHECK(this->get_Interior((Owc10_xp::ChInterior**)&ppinterior));
    return ppinterior;
  }

  Owc10_xp::ChPlotArea* __fastcall get_Parent(void)
  {
    Owc10_xp::ChPlotArea* ppplotarea;
    OLECHECK(this->get_Parent((Owc10_xp::ChPlotArea**)&ppplotarea));
    return ppplotarea;
  }


  __property   Owc10_xp::ChBorder* Border = {read = get_Border};
  __property   long            Thickness = {read = get_Thickness, write = set_Thickness};
  __property   Owc10_xp::ChInterior* Interior = {read = get_Interior};
  __property   Owc10_xp::ChPlotArea* Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ChSeriesCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39ABD-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface ChSeriesCollection  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* cSeries/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Owc10_xp::ChSeries** ppseries/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Owc10_xp::ChChart** ppchart/*[out,retval]*/) = 0; // [5201]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE Add(long Index/*[in,def,opt]*/, 
                                        Owc10_xp::ChSeries** ppseries/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Delete(VARIANT Index/*[in]*/) = 0; // [5202]
  virtual HRESULT STDMETHODCALLTYPE get_PivotAxis(Owc10_xp::PivotResultAxis** ppaxis/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long cSeries;
    OLECHECK(this->get_Count((long*)&cSeries));
    return cSeries;
  }

  Owc10_xp::ChSeries* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Owc10_xp::ChSeries* ppseries;
    OLECHECK(this->get_Item(Index, (Owc10_xp::ChSeries**)&ppseries));
    return ppseries;
  }

  Owc10_xp::ChChart* __fastcall get_Parent(void)
  {
    Owc10_xp::ChChart* ppchart;
    OLECHECK(this->get_Parent((Owc10_xp::ChChart**)&ppchart));
    return ppchart;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunk));
    return ppunk;
  }

  Owc10_xp::ChSeries* __fastcall Add(long Index/*[in,def,opt]*/)
  {
    Owc10_xp::ChSeries* ppseries;
    OLECHECK(this->Add(Index, (Owc10_xp::ChSeries**)&ppseries));
    return ppseries;
  }

  Owc10_xp::PivotResultAxis* __fastcall get_PivotAxis(void)
  {
    Owc10_xp::PivotResultAxis* ppaxis;
    OLECHECK(this->get_PivotAxis((Owc10_xp::PivotResultAxis**)&ppaxis));
    return ppaxis;
  }


  __property   long            Count = {read = get_Count};
  __property   Owc10_xp::ChChart* Parent = {read = get_Parent};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   Owc10_xp::PivotResultAxis* PivotAxis = {read = get_PivotAxis};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ChSeries
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AC1-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface ChSeries  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Border(Owc10_xp::ChBorder** ppline/*[out,retval]*/) = 0; // [5004]
  virtual HRESULT STDMETHODCALLTYPE get_DataLabelsCollection(Owc10_xp::ChDataLabelsCollection** ppdatalabels/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Points(Owc10_xp::ChPoints** pppoints/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Caption(BSTR pbstr/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Caption(BSTR* pbstr/*[out,retval]*/) = 0; // [1610743811]
  virtual HRESULT STDMETHODCALLTYPE set_Explosion(long pl/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Explosion(long* pl/*[out,retval]*/) = 0; // [1610743813]
  virtual HRESULT STDMETHODCALLTYPE set_Thickness(long pl/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Thickness(long* pl/*[out,retval]*/) = 0; // [1610743815]
  virtual HRESULT STDMETHODCALLTYPE get_ErrorBarsCollection(Owc10_xp::ChErrorBarsCollection** pperrorbars/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Index(long* pIndex/*[out,retval]*/) = 0; // [5204]
  virtual HRESULT STDMETHODCALLTYPE get_Interior(Owc10_xp::ChInterior** ppinterior/*[out,retval]*/) = 0; // [5007]
  virtual HRESULT STDMETHODCALLTYPE get_Line(Owc10_xp::ChLine** ppline/*[out,retval]*/) = 0; // [5205]
  virtual HRESULT STDMETHODCALLTYPE get_Marker(Owc10_xp::ChMarker** ppMarker/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Owc10_xp::ChChart** ppchart/*[out,retval]*/) = 0; // [5201]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR pbstr/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pbstr/*[out,retval]*/) = 0; // [1610743823]
  virtual HRESULT STDMETHODCALLTYPE get_Scalings(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/, 
                                                 Owc10_xp::ChScaling** ppwcscaling/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Trendlines(Owc10_xp::ChTrendlines** pptrendlines/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Type(Owc10_xp::ChartChartTypeEnum pocpGT/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Owc10_xp::ChartChartTypeEnum* pocpGT/*[out,retval]*/) = 0; // [1610743827]
  virtual HRESULT STDMETHODCALLTYPE SetData(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/, 
                                            long DataSourceIndex/*[in]*/, 
                                            VARIANT DataReference/*[in,opt]*/= TNoParam()) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetDataReference(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/, 
                                                     BSTR* DataSourceReference/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetDataSourceIndex(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/, 
                                                       long* DataSourceIndex/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetData(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/, 
                                            VARIANT* DataSourceIndex/*[out]*/, 
                                            VARIANT* DataReference/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Select(void) = 0; // [5036]
  virtual HRESULT STDMETHODCALLTYPE set_Index(long pIndex) = 0; // [5204]
  virtual HRESULT STDMETHODCALLTYPE Ungroup(VARIANT_BOOL UseNewScaling/*[in,def,opt]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Group(Owc10_xp::ChSeries* Series) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_ZOrder(long pzorder/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ZOrder(long* pzorder/*[out,retval]*/) = 0; // [1610743837]
  virtual HRESULT STDMETHODCALLTYPE get_PivotObject(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_GapWidth(long plGapWidth/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_GapWidth(long* plGapWidth/*[out,retval]*/) = 0; // [1610743840]
  virtual HRESULT STDMETHODCALLTYPE set_Overlap(long plOverlap/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Overlap(long* plOverlap/*[out,retval]*/) = 0; // [1610743842]
  virtual HRESULT STDMETHODCALLTYPE get_FormatMap(Owc10_xp::ChFormatMap** ppformatmap/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_TipText(BSTR pbstr/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_TipText(BSTR* pbstr/*[out,retval]*/) = 0; // [1610743845]
  virtual HRESULT STDMETHODCALLTYPE get_Top(long* ptop/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Left(long* pleft/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Bottom(long* pbottom/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Right(long* pright/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_LayerIndex(long* pIndex/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ValueToPoint(VARIANT xvalue/*[in]*/, VARIANT yvalue/*[in]*/, 
                                                 VARIANT zvalue/*[in,opt]*/, 
                                                 Owc10_xp::Coordinate** ppCoord/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_TypeFlags(int* pgrbit/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::ChBorder* __fastcall get_Border(void)
  {
    Owc10_xp::ChBorder* ppline;
    OLECHECK(this->get_Border((Owc10_xp::ChBorder**)&ppline));
    return ppline;
  }

  Owc10_xp::ChDataLabelsCollection* __fastcall get_DataLabelsCollection(void)
  {
    Owc10_xp::ChDataLabelsCollection* ppdatalabels;
    OLECHECK(this->get_DataLabelsCollection((Owc10_xp::ChDataLabelsCollection**)&ppdatalabels));
    return ppdatalabels;
  }

  Owc10_xp::ChPoints* __fastcall get_Points(void)
  {
    Owc10_xp::ChPoints* pppoints;
    OLECHECK(this->get_Points((Owc10_xp::ChPoints**)&pppoints));
    return pppoints;
  }

  BSTR __fastcall get_Caption(void)
  {
    BSTR pbstr = 0;
    OLECHECK(this->get_Caption((BSTR*)&pbstr));
    return pbstr;
  }

  long __fastcall get_Explosion(void)
  {
    long pl;
    OLECHECK(this->get_Explosion((long*)&pl));
    return pl;
  }

  long __fastcall get_Thickness(void)
  {
    long pl;
    OLECHECK(this->get_Thickness((long*)&pl));
    return pl;
  }

  Owc10_xp::ChErrorBarsCollection* __fastcall get_ErrorBarsCollection(void)
  {
    Owc10_xp::ChErrorBarsCollection* pperrorbars;
    OLECHECK(this->get_ErrorBarsCollection((Owc10_xp::ChErrorBarsCollection**)&pperrorbars));
    return pperrorbars;
  }

  long __fastcall get_Index(void)
  {
    long pIndex;
    OLECHECK(this->get_Index((long*)&pIndex));
    return pIndex;
  }

  Owc10_xp::ChInterior* __fastcall get_Interior(void)
  {
    Owc10_xp::ChInterior* ppinterior;
    OLECHECK(this->get_Interior((Owc10_xp::ChInterior**)&ppinterior));
    return ppinterior;
  }

  Owc10_xp::ChLine* __fastcall get_Line(void)
  {
    Owc10_xp::ChLine* ppline;
    OLECHECK(this->get_Line((Owc10_xp::ChLine**)&ppline));
    return ppline;
  }

  Owc10_xp::ChMarker* __fastcall get_Marker(void)
  {
    Owc10_xp::ChMarker* ppMarker;
    OLECHECK(this->get_Marker((Owc10_xp::ChMarker**)&ppMarker));
    return ppMarker;
  }

  Owc10_xp::ChChart* __fastcall get_Parent(void)
  {
    Owc10_xp::ChChart* ppchart;
    OLECHECK(this->get_Parent((Owc10_xp::ChChart**)&ppchart));
    return ppchart;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pbstr = 0;
    OLECHECK(this->get_Name((BSTR*)&pbstr));
    return pbstr;
  }

  Owc10_xp::ChScaling* __fastcall get_Scalings(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/)
  {
    Owc10_xp::ChScaling* ppwcscaling;
    OLECHECK(this->get_Scalings(Dimension, (Owc10_xp::ChScaling**)&ppwcscaling));
    return ppwcscaling;
  }

  Owc10_xp::ChTrendlines* __fastcall get_Trendlines(void)
  {
    Owc10_xp::ChTrendlines* pptrendlines;
    OLECHECK(this->get_Trendlines((Owc10_xp::ChTrendlines**)&pptrendlines));
    return pptrendlines;
  }

  Owc10_xp::ChartChartTypeEnum __fastcall get_Type(void)
  {
    Owc10_xp::ChartChartTypeEnum pocpGT;
    OLECHECK(this->get_Type((Owc10_xp::ChartChartTypeEnum*)&pocpGT));
    return pocpGT;
  }

  BSTR __fastcall GetDataReference(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/)
  {
    BSTR DataSourceReference = 0;
    OLECHECK(this->GetDataReference(Dimension, (BSTR*)&DataSourceReference));
    return DataSourceReference;
  }

  long __fastcall GetDataSourceIndex(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/)
  {
    long DataSourceIndex;
    OLECHECK(this->GetDataSourceIndex(Dimension, (long*)&DataSourceIndex));
    return DataSourceIndex;
  }

  long __fastcall get_ZOrder(void)
  {
    long pzorder;
    OLECHECK(this->get_ZOrder((long*)&pzorder));
    return pzorder;
  }

  LPDISPATCH __fastcall get_PivotObject(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_PivotObject((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  long __fastcall get_GapWidth(void)
  {
    long plGapWidth;
    OLECHECK(this->get_GapWidth((long*)&plGapWidth));
    return plGapWidth;
  }

  long __fastcall get_Overlap(void)
  {
    long plOverlap;
    OLECHECK(this->get_Overlap((long*)&plOverlap));
    return plOverlap;
  }

  Owc10_xp::ChFormatMap* __fastcall get_FormatMap(void)
  {
    Owc10_xp::ChFormatMap* ppformatmap;
    OLECHECK(this->get_FormatMap((Owc10_xp::ChFormatMap**)&ppformatmap));
    return ppformatmap;
  }

  BSTR __fastcall get_TipText(void)
  {
    BSTR pbstr = 0;
    OLECHECK(this->get_TipText((BSTR*)&pbstr));
    return pbstr;
  }

  long __fastcall get_Top(void)
  {
    long ptop;
    OLECHECK(this->get_Top((long*)&ptop));
    return ptop;
  }

  long __fastcall get_Left(void)
  {
    long pleft;
    OLECHECK(this->get_Left((long*)&pleft));
    return pleft;
  }

  long __fastcall get_Bottom(void)
  {
    long pbottom;
    OLECHECK(this->get_Bottom((long*)&pbottom));
    return pbottom;
  }

  long __fastcall get_Right(void)
  {
    long pright;
    OLECHECK(this->get_Right((long*)&pright));
    return pright;
  }

  long __fastcall get_LayerIndex(void)
  {
    long pIndex;
    OLECHECK(this->get_LayerIndex((long*)&pIndex));
    return pIndex;
  }

  Owc10_xp::Coordinate* __fastcall ValueToPoint(VARIANT xvalue/*[in]*/, VARIANT yvalue/*[in]*/, 
                                                VARIANT zvalue/*[in,opt]*/= TNoParam())
  {
    Owc10_xp::Coordinate* ppCoord;
    OLECHECK(this->ValueToPoint(xvalue, yvalue, zvalue, (Owc10_xp::Coordinate**)&ppCoord));
    return ppCoord;
  }

  int __fastcall get_TypeFlags(void)
  {
    int pgrbit;
    OLECHECK(this->get_TypeFlags((int*)&pgrbit));
    return pgrbit;
  }

  Owc10_xp::ChartSelectionsEnum __fastcall get_ObjectType(void)
  {
    Owc10_xp::ChartSelectionsEnum pcs;
    OLECHECK(this->get_ObjectType((Owc10_xp::ChartSelectionsEnum*)&pcs));
    return pcs;
  }


  __property   Owc10_xp::ChBorder* Border = {read = get_Border};
  __property   Owc10_xp::ChDataLabelsCollection* DataLabelsCollection = {read = get_DataLabelsCollection};
  __property   Owc10_xp::ChPoints* Points = {read = get_Points};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   long            Explosion = {read = get_Explosion, write = set_Explosion};
  __property   long            Thickness = {read = get_Thickness, write = set_Thickness};
  __property   Owc10_xp::ChErrorBarsCollection* ErrorBarsCollection = {read = get_ErrorBarsCollection};
  __property   long            Index = {read = get_Index, write = set_Index};
  __property   Owc10_xp::ChInterior* Interior = {read = get_Interior};
  __property   Owc10_xp::ChLine* Line = {read = get_Line};
  __property   Owc10_xp::ChMarker* Marker = {read = get_Marker};
  __property   Owc10_xp::ChChart* Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   Owc10_xp::ChTrendlines* Trendlines = {read = get_Trendlines};
  __property   Owc10_xp::ChartChartTypeEnum Type = {read = get_Type, write = set_Type};
  __property   long            ZOrder = {read = get_ZOrder, write = set_ZOrder};
  __property   LPDISPATCH      PivotObject = {read = get_PivotObject};
  __property   long            GapWidth = {read = get_GapWidth, write = set_GapWidth};
  __property   long            Overlap = {read = get_Overlap, write = set_Overlap};
  __property   Owc10_xp::ChFormatMap* FormatMap = {read = get_FormatMap};
  __property   BSTR            TipText = {read = get_TipText, write = set_TipText};
  __property   long            Top = {read = get_Top};
  __property   long            Left = {read = get_Left};
  __property   long            Bottom = {read = get_Bottom};
  __property   long            Right = {read = get_Right};
  __property   long            LayerIndex = {read = get_LayerIndex};
  __property   int             TypeFlags = {read = get_TypeFlags};
  __property   Owc10_xp::ChartSelectionsEnum ObjectType = {read = get_ObjectType};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ChDataLabelsCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A71-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface ChDataLabelsCollection  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Owc10_xp::ChSeries** ppseries/*[out,retval]*/) = 0; // [5201]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE get_Item(long Index/*[in]*/, 
                                             Owc10_xp::ChDataLabels** ppdatalabels/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Add(Owc10_xp::ChDataLabels** ppdatalabels/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Delete(long Index/*[in]*/) = 0; // [5202]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::ChSeries* __fastcall get_Parent(void)
  {
    Owc10_xp::ChSeries* ppseries;
    OLECHECK(this->get_Parent((Owc10_xp::ChSeries**)&ppseries));
    return ppseries;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunk));
    return ppunk;
  }

  Owc10_xp::ChDataLabels* __fastcall get_Item(long Index/*[in]*/)
  {
    Owc10_xp::ChDataLabels* ppdatalabels;
    OLECHECK(this->get_Item(Index, (Owc10_xp::ChDataLabels**)&ppdatalabels));
    return ppdatalabels;
  }

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  Owc10_xp::ChDataLabels* __fastcall Add(void)
  {
    Owc10_xp::ChDataLabels* ppdatalabels;
    OLECHECK(this->Add((Owc10_xp::ChDataLabels**)&ppdatalabels));
    return ppdatalabels;
  }


  __property   Owc10_xp::ChSeries* Parent = {read = get_Parent};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ChDataLabels
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AC2-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface ChDataLabels  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Border(Owc10_xp::ChBorder** ppline/*[out,retval]*/) = 0; // [5004]
  virtual HRESULT STDMETHODCALLTYPE get_Font(Owc10_xp::ChFont** ppfont/*[out,retval]*/) = 0; // [5200]
  virtual HRESULT STDMETHODCALLTYPE set_HasBubbleSize(VARIANT_BOOL pfHasBubbleSize/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_HasBubbleSize(VARIANT_BOOL* pfHasBubbleSize/*[out,retval]*/) = 0; // [1610743810]
  virtual HRESULT STDMETHODCALLTYPE set_HasCategoryName(VARIANT_BOOL pfHasCategoryName/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_HasCategoryName(VARIANT_BOOL* pfHasCategoryName/*[out,retval]*/) = 0; // [1610743812]
  virtual HRESULT STDMETHODCALLTYPE set_HasPercentage(VARIANT_BOOL pfHasPercentage/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_HasPercentage(VARIANT_BOOL* pfHasPercentage/*[out,retval]*/) = 0; // [1610743814]
  virtual HRESULT STDMETHODCALLTYPE set_HasSeriesName(VARIANT_BOOL pfHasSeriesName/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_HasSeriesName(VARIANT_BOOL* pfHasSeriesName/*[out,retval]*/) = 0; // [1610743816]
  virtual HRESULT STDMETHODCALLTYPE set_HasValue(VARIANT_BOOL pfHasValue/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_HasValue(VARIANT_BOOL* pfHasValue/*[out,retval]*/) = 0; // [1610743818]
  virtual HRESULT STDMETHODCALLTYPE get_Interior(Owc10_xp::ChInterior** ppinterior/*[out,retval]*/) = 0; // [5007]
  virtual HRESULT STDMETHODCALLTYPE set_NumberFormat(BSTR pbstrNumberFormat/*[in]*/) = 0; // [5203]
  virtual HRESULT STDMETHODCALLTYPE get_NumberFormat(BSTR* pbstrNumberFormat/*[out,retval]*/) = 0; // [5203]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Owc10_xp::ChSeries** ppseries/*[out,retval]*/) = 0; // [5201]
  virtual HRESULT STDMETHODCALLTYPE set_Position(Owc10_xp::ChartDataLabelPositionEnum pocpDLP/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Position(Owc10_xp::ChartDataLabelPositionEnum* pocpDLP/*[out,retval]*/) = 0; // [1610743824]
  virtual HRESULT STDMETHODCALLTYPE set_Separator(BSTR pbstrSeperator/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Separator(BSTR* pbstrSeperator/*[out,retval]*/) = 0; // [1610743826]
  virtual HRESULT STDMETHODCALLTYPE Select(void) = 0; // [5036]
  virtual HRESULT STDMETHODCALLTYPE get_Index(long* pIndex/*[out,retval]*/) = 0; // [5204]
  virtual HRESULT STDMETHODCALLTYPE get_Item(long Index/*[in]*/, 
                                             Owc10_xp::ChDataLabel** ppdatalabel/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Top(long* ptop/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Left(long* pleft/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Bottom(long* pbottom/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Right(long* pright/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::ChBorder* __fastcall get_Border(void)
  {
    Owc10_xp::ChBorder* ppline;
    OLECHECK(this->get_Border((Owc10_xp::ChBorder**)&ppline));
    return ppline;
  }

  Owc10_xp::ChFont* __fastcall get_Font(void)
  {
    Owc10_xp::ChFont* ppfont;
    OLECHECK(this->get_Font((Owc10_xp::ChFont**)&ppfont));
    return ppfont;
  }

  VARIANT_BOOL __fastcall get_HasBubbleSize(void)
  {
    VARIANT_BOOL pfHasBubbleSize;
    OLECHECK(this->get_HasBubbleSize((VARIANT_BOOL*)&pfHasBubbleSize));
    return pfHasBubbleSize;
  }

  VARIANT_BOOL __fastcall get_HasCategoryName(void)
  {
    VARIANT_BOOL pfHasCategoryName;
    OLECHECK(this->get_HasCategoryName((VARIANT_BOOL*)&pfHasCategoryName));
    return pfHasCategoryName;
  }

  VARIANT_BOOL __fastcall get_HasPercentage(void)
  {
    VARIANT_BOOL pfHasPercentage;
    OLECHECK(this->get_HasPercentage((VARIANT_BOOL*)&pfHasPercentage));
    return pfHasPercentage;
  }

  VARIANT_BOOL __fastcall get_HasSeriesName(void)
  {
    VARIANT_BOOL pfHasSeriesName;
    OLECHECK(this->get_HasSeriesName((VARIANT_BOOL*)&pfHasSeriesName));
    return pfHasSeriesName;
  }

  VARIANT_BOOL __fastcall get_HasValue(void)
  {
    VARIANT_BOOL pfHasValue;
    OLECHECK(this->get_HasValue((VARIANT_BOOL*)&pfHasValue));
    return pfHasValue;
  }

  Owc10_xp::ChInterior* __fastcall get_Interior(void)
  {
    Owc10_xp::ChInterior* ppinterior;
    OLECHECK(this->get_Interior((Owc10_xp::ChInterior**)&ppinterior));
    return ppinterior;
  }

  BSTR __fastcall get_NumberFormat(void)
  {
    BSTR pbstrNumberFormat = 0;
    OLECHECK(this->get_NumberFormat((BSTR*)&pbstrNumberFormat));
    return pbstrNumberFormat;
  }

  Owc10_xp::ChSeries* __fastcall get_Parent(void)
  {
    Owc10_xp::ChSeries* ppseries;
    OLECHECK(this->get_Parent((Owc10_xp::ChSeries**)&ppseries));
    return ppseries;
  }

  Owc10_xp::ChartDataLabelPositionEnum __fastcall get_Position(void)
  {
    Owc10_xp::ChartDataLabelPositionEnum pocpDLP;
    OLECHECK(this->get_Position((Owc10_xp::ChartDataLabelPositionEnum*)&pocpDLP));
    return pocpDLP;
  }

  BSTR __fastcall get_Separator(void)
  {
    BSTR pbstrSeperator = 0;
    OLECHECK(this->get_Separator((BSTR*)&pbstrSeperator));
    return pbstrSeperator;
  }

  long __fastcall get_Index(void)
  {
    long pIndex;
    OLECHECK(this->get_Index((long*)&pIndex));
    return pIndex;
  }

  Owc10_xp::ChDataLabel* __fastcall get_Item(long Index/*[in]*/)
  {
    Owc10_xp::ChDataLabel* ppdatalabel;
    OLECHECK(this->get_Item(Index, (Owc10_xp::ChDataLabel**)&ppdatalabel));
    return ppdatalabel;
  }

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  long __fastcall get_Top(void)
  {
    long ptop;
    OLECHECK(this->get_Top((long*)&ptop));
    return ptop;
  }

  long __fastcall get_Left(void)
  {
    long pleft;
    OLECHECK(this->get_Left((long*)&pleft));
    return pleft;
  }

  long __fastcall get_Bottom(void)
  {
    long pbottom;
    OLECHECK(this->get_Bottom((long*)&pbottom));
    return pbottom;
  }

  long __fastcall get_Right(void)
  {
    long pright;
    OLECHECK(this->get_Right((long*)&pright));
    return pright;
  }

  Owc10_xp::ChartSelectionsEnum __fastcall get_ObjectType(void)
  {
    Owc10_xp::ChartSelectionsEnum pcs;
    OLECHECK(this->get_ObjectType((Owc10_xp::ChartSelectionsEnum*)&pcs));
    return pcs;
  }


  __property   Owc10_xp::ChBorder* Border = {read = get_Border};
  __property   Owc10_xp::ChFont* Font = {read = get_Font};
  __property   VARIANT_BOOL    HasBubbleSize = {read = get_HasBubbleSize, write = set_HasBubbleSize};
  __property   VARIANT_BOOL    HasCategoryName = {read = get_HasCategoryName, write = set_HasCategoryName};
  __property   VARIANT_BOOL    HasPercentage = {read = get_HasPercentage, write = set_HasPercentage};
  __property   VARIANT_BOOL    HasSeriesName = {read = get_HasSeriesName, write = set_HasSeriesName};
  __property   VARIANT_BOOL    HasValue = {read = get_HasValue, write = set_HasValue};
  __property   Owc10_xp::ChInterior* Interior = {read = get_Interior};
  __property   BSTR            NumberFormat = {read = get_NumberFormat, write = set_NumberFormat};
  __property   Owc10_xp::ChSeries* Parent = {read = get_Parent};
  __property   Owc10_xp::ChartDataLabelPositionEnum Position = {read = get_Position, write = set_Position};
  __property   BSTR            Separator = {read = get_Separator, write = set_Separator};
  __property   long            Index = {read = get_Index};
  __property   long            Count = {read = get_Count};
  __property   long            Top = {read = get_Top};
  __property   long            Left = {read = get_Left};
  __property   long            Bottom = {read = get_Bottom};
  __property   long            Right = {read = get_Right};
  __property   Owc10_xp::ChartSelectionsEnum ObjectType = {read = get_ObjectType};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ChDataLabel
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AE8-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface ChDataLabel  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Font(Owc10_xp::ChFont** ppfont/*[out,retval]*/) = 0; // [5200]
  virtual HRESULT STDMETHODCALLTYPE get_Interior(Owc10_xp::ChInterior** ppinterior/*[out,retval]*/) = 0; // [5007]
  virtual HRESULT STDMETHODCALLTYPE get_Border(Owc10_xp::ChBorder** ppline/*[out,retval]*/) = 0; // [5004]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(VARIANT_BOOL* pfVisible/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(VARIANT_BOOL pfVisible/*[in]*/) = 0; // [1610743811]
  virtual HRESULT STDMETHODCALLTYPE get_Top(long* ptop/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Left(long* pleft/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Bottom(long* pbottom/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Right(long* pright/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Select(void) = 0; // [5036]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Owc10_xp::ChDataLabels** Parent/*[out,retval]*/) = 0; // [5201]
  virtual HRESULT STDMETHODCALLTYPE get_Index(long* pIndex/*[out,retval]*/) = 0; // [5204]
  virtual HRESULT STDMETHODCALLTYPE get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::ChFont* __fastcall get_Font(void)
  {
    Owc10_xp::ChFont* ppfont;
    OLECHECK(this->get_Font((Owc10_xp::ChFont**)&ppfont));
    return ppfont;
  }

  Owc10_xp::ChInterior* __fastcall get_Interior(void)
  {
    Owc10_xp::ChInterior* ppinterior;
    OLECHECK(this->get_Interior((Owc10_xp::ChInterior**)&ppinterior));
    return ppinterior;
  }

  Owc10_xp::ChBorder* __fastcall get_Border(void)
  {
    Owc10_xp::ChBorder* ppline;
    OLECHECK(this->get_Border((Owc10_xp::ChBorder**)&ppline));
    return ppline;
  }

  VARIANT_BOOL __fastcall get_Visible(void)
  {
    VARIANT_BOOL pfVisible;
    OLECHECK(this->get_Visible((VARIANT_BOOL*)&pfVisible));
    return pfVisible;
  }

  long __fastcall get_Top(void)
  {
    long ptop;
    OLECHECK(this->get_Top((long*)&ptop));
    return ptop;
  }

  long __fastcall get_Left(void)
  {
    long pleft;
    OLECHECK(this->get_Left((long*)&pleft));
    return pleft;
  }

  long __fastcall get_Bottom(void)
  {
    long pbottom;
    OLECHECK(this->get_Bottom((long*)&pbottom));
    return pbottom;
  }

  long __fastcall get_Right(void)
  {
    long pright;
    OLECHECK(this->get_Right((long*)&pright));
    return pright;
  }

  Owc10_xp::ChDataLabels* __fastcall get_Parent(void)
  {
    Owc10_xp::ChDataLabels* Parent;
    OLECHECK(this->get_Parent((Owc10_xp::ChDataLabels**)&Parent));
    return Parent;
  }

  long __fastcall get_Index(void)
  {
    long pIndex;
    OLECHECK(this->get_Index((long*)&pIndex));
    return pIndex;
  }

  Owc10_xp::ChartSelectionsEnum __fastcall get_ObjectType(void)
  {
    Owc10_xp::ChartSelectionsEnum pcs;
    OLECHECK(this->get_ObjectType((Owc10_xp::ChartSelectionsEnum*)&pcs));
    return pcs;
  }


  __property   Owc10_xp::ChFont* Font = {read = get_Font};
  __property   Owc10_xp::ChInterior* Interior = {read = get_Interior};
  __property   Owc10_xp::ChBorder* Border = {read = get_Border};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   long            Top = {read = get_Top};
  __property   long            Left = {read = get_Left};
  __property   long            Bottom = {read = get_Bottom};
  __property   long            Right = {read = get_Right};
  __property   Owc10_xp::ChDataLabels* Parent = {read = get_Parent};
  __property   long            Index = {read = get_Index};
  __property   Owc10_xp::ChartSelectionsEnum ObjectType = {read = get_ObjectType};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ChPoints
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AEA-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface ChPoints  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Owc10_xp::ChSeries** ppseries/*[out,retval]*/) = 0; // [5201]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Owc10_xp::ChPoint** pppoint/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::ChSeries* __fastcall get_Parent(void)
  {
    Owc10_xp::ChSeries* ppseries;
    OLECHECK(this->get_Parent((Owc10_xp::ChSeries**)&ppseries));
    return ppseries;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunk));
    return ppunk;
  }

  Owc10_xp::ChPoint* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Owc10_xp::ChPoint* pppoint;
    OLECHECK(this->get_Item(Index, (Owc10_xp::ChPoint**)&pppoint));
    return pppoint;
  }

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }


  __property   Owc10_xp::ChSeries* Parent = {read = get_Parent};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ChPoint
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AE9-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface ChPoint  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Border(Owc10_xp::ChBorder** ppline/*[out,retval]*/) = 0; // [5004]
  virtual HRESULT STDMETHODCALLTYPE set_Explosion(long pExplode/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Explosion(long* pExplode/*[out,retval]*/) = 0; // [1610743809]
  virtual HRESULT STDMETHODCALLTYPE get_Interior(Owc10_xp::ChInterior** ppinterior/*[out,retval]*/) = 0; // [5007]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Owc10_xp::ChSeries** ppseries/*[out,retval]*/) = 0; // [5201]
  virtual HRESULT STDMETHODCALLTYPE get_Index(long* piDataSource/*[out,retval]*/) = 0; // [5204]
  virtual HRESULT STDMETHODCALLTYPE Select(void) = 0; // [5036]
  virtual HRESULT STDMETHODCALLTYPE GetValue(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/, 
                                             VARIANT scaled/*[in,opt]*/, 
                                             VARIANT* Value/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Line(Owc10_xp::ChLine** ppline/*[out,retval]*/) = 0; // [5205]
  virtual HRESULT STDMETHODCALLTYPE get_PivotObject(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/, 
                                                    LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Top(long* ptop/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Left(long* pleft/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Bottom(long* pbottom/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Right(long* pright/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::ChBorder* __fastcall get_Border(void)
  {
    Owc10_xp::ChBorder* ppline;
    OLECHECK(this->get_Border((Owc10_xp::ChBorder**)&ppline));
    return ppline;
  }

  long __fastcall get_Explosion(void)
  {
    long pExplode;
    OLECHECK(this->get_Explosion((long*)&pExplode));
    return pExplode;
  }

  Owc10_xp::ChInterior* __fastcall get_Interior(void)
  {
    Owc10_xp::ChInterior* ppinterior;
    OLECHECK(this->get_Interior((Owc10_xp::ChInterior**)&ppinterior));
    return ppinterior;
  }

  Owc10_xp::ChSeries* __fastcall get_Parent(void)
  {
    Owc10_xp::ChSeries* ppseries;
    OLECHECK(this->get_Parent((Owc10_xp::ChSeries**)&ppseries));
    return ppseries;
  }

  long __fastcall get_Index(void)
  {
    long piDataSource;
    OLECHECK(this->get_Index((long*)&piDataSource));
    return piDataSource;
  }

  VARIANT __fastcall GetValue(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/, 
                              VARIANT scaled/*[in,opt]*/= TNoParam())
  {
    VARIANT Value;
    OLECHECK(this->GetValue(Dimension, scaled, (VARIANT*)&Value));
    return Value;
  }

  Owc10_xp::ChLine* __fastcall get_Line(void)
  {
    Owc10_xp::ChLine* ppline;
    OLECHECK(this->get_Line((Owc10_xp::ChLine**)&ppline));
    return ppline;
  }

  LPDISPATCH __fastcall get_PivotObject(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_PivotObject(Dimension, (LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  long __fastcall get_Top(void)
  {
    long ptop;
    OLECHECK(this->get_Top((long*)&ptop));
    return ptop;
  }

  long __fastcall get_Left(void)
  {
    long pleft;
    OLECHECK(this->get_Left((long*)&pleft));
    return pleft;
  }

  long __fastcall get_Bottom(void)
  {
    long pbottom;
    OLECHECK(this->get_Bottom((long*)&pbottom));
    return pbottom;
  }

  long __fastcall get_Right(void)
  {
    long pright;
    OLECHECK(this->get_Right((long*)&pright));
    return pright;
  }

  Owc10_xp::ChartSelectionsEnum __fastcall get_ObjectType(void)
  {
    Owc10_xp::ChartSelectionsEnum pcs;
    OLECHECK(this->get_ObjectType((Owc10_xp::ChartSelectionsEnum*)&pcs));
    return pcs;
  }


  __property   Owc10_xp::ChBorder* Border = {read = get_Border};
  __property   long            Explosion = {read = get_Explosion, write = set_Explosion};
  __property   Owc10_xp::ChInterior* Interior = {read = get_Interior};
  __property   Owc10_xp::ChSeries* Parent = {read = get_Parent};
  __property   long            Index = {read = get_Index};
  __property   Owc10_xp::ChLine* Line = {read = get_Line};
  __property   long            Top = {read = get_Top};
  __property   long            Left = {read = get_Left};
  __property   long            Bottom = {read = get_Bottom};
  __property   long            Right = {read = get_Right};
  __property   Owc10_xp::ChartSelectionsEnum ObjectType = {read = get_ObjectType};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ChErrorBarsCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AB7-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface ChErrorBarsCollection  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* cErrorbars/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Item(long Index/*[in]*/, 
                                             Owc10_xp::ChErrorBars** pptrendline/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Owc10_xp::ChSeries** ppseries/*[out,retval]*/) = 0; // [5201]
  virtual HRESULT STDMETHODCALLTYPE Add(Owc10_xp::ChErrorBars** pptrendline/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Delete(long Index/*[in]*/) = 0; // [5202]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long cErrorbars;
    OLECHECK(this->get_Count((long*)&cErrorbars));
    return cErrorbars;
  }

  Owc10_xp::ChErrorBars* __fastcall get_Item(long Index/*[in]*/)
  {
    Owc10_xp::ChErrorBars* pptrendline;
    OLECHECK(this->get_Item(Index, (Owc10_xp::ChErrorBars**)&pptrendline));
    return pptrendline;
  }

  Owc10_xp::ChSeries* __fastcall get_Parent(void)
  {
    Owc10_xp::ChSeries* ppseries;
    OLECHECK(this->get_Parent((Owc10_xp::ChSeries**)&ppseries));
    return ppseries;
  }

  Owc10_xp::ChErrorBars* __fastcall Add(void)
  {
    Owc10_xp::ChErrorBars* pptrendline;
    OLECHECK(this->Add((Owc10_xp::ChErrorBars**)&pptrendline));
    return pptrendline;
  }


  __property   long            Count = {read = get_Count};
  __property   Owc10_xp::ChSeries* Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ChErrorBars
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AEB-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface ChErrorBars  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_EndStyle(Owc10_xp::ChartEndStyleEnum pocpESC/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_EndStyle(Owc10_xp::ChartEndStyleEnum* pocpESC/*[out,retval]*/) = 0; // [1610743808]
  virtual HRESULT STDMETHODCALLTYPE set_Direction(Owc10_xp::ChartErrorBarDirectionEnum pocpdir/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Direction(Owc10_xp::ChartErrorBarDirectionEnum* pocpdir/*[out,retval]*/) = 0; // [1610743810]
  virtual HRESULT STDMETHODCALLTYPE get_Index(long* pIndex/*[out,retval]*/) = 0; // [5204]
  virtual HRESULT STDMETHODCALLTYPE get_Line(Owc10_xp::ChLine** ppline/*[out,retval]*/) = 0; // [5205]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Owc10_xp::ChSeries** ppseries/*[out,retval]*/) = 0; // [5201]
  virtual HRESULT STDMETHODCALLTYPE set_Amount(double pramount/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Amount(double* pramount/*[out,retval]*/) = 0; // [1610743815]
  virtual HRESULT STDMETHODCALLTYPE set_Include(Owc10_xp::ChartErrorBarIncludeEnum pocpEBI/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Include(Owc10_xp::ChartErrorBarIncludeEnum* pocpEBI/*[out,retval]*/) = 0; // [1610743817]
  virtual HRESULT STDMETHODCALLTYPE set_Type(Owc10_xp::ChartErrorBarTypeEnum pocpEBT/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Owc10_xp::ChartErrorBarTypeEnum* pocpEBT/*[out,retval]*/) = 0; // [1610743819]
  virtual HRESULT STDMETHODCALLTYPE SetData(Owc10_xp::ChartErrorBarCustomValuesEnum Dimension/*[in]*/, 
                                            long DataSourceIndex/*[in]*/, 
                                            VARIANT DataReference/*[in,opt]*/= TNoParam()) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetDataReference(Owc10_xp::ChartErrorBarCustomValuesEnum ErrorBarDirection/*[in]*/, 
                                                     BSTR* DataSourceReference/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetDataSourceIndex(Owc10_xp::ChartErrorBarCustomValuesEnum ErrorBarDirection/*[in]*/, 
                                                       long* DataSourceIndex/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetData(Owc10_xp::ChartErrorBarCustomValuesEnum ErrorBarDirection/*[in]*/, 
                                            VARIANT* DataSourceIndex/*[out]*/, 
                                            VARIANT* DataReference/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Select(void) = 0; // [5036]
  virtual HRESULT STDMETHODCALLTYPE get_Top(long* ptop/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Left(long* pleft/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Bottom(long* pbottom/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Right(long* pright/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::ChartEndStyleEnum __fastcall get_EndStyle(void)
  {
    Owc10_xp::ChartEndStyleEnum pocpESC;
    OLECHECK(this->get_EndStyle((Owc10_xp::ChartEndStyleEnum*)&pocpESC));
    return pocpESC;
  }

  Owc10_xp::ChartErrorBarDirectionEnum __fastcall get_Direction(void)
  {
    Owc10_xp::ChartErrorBarDirectionEnum pocpdir;
    OLECHECK(this->get_Direction((Owc10_xp::ChartErrorBarDirectionEnum*)&pocpdir));
    return pocpdir;
  }

  long __fastcall get_Index(void)
  {
    long pIndex;
    OLECHECK(this->get_Index((long*)&pIndex));
    return pIndex;
  }

  Owc10_xp::ChLine* __fastcall get_Line(void)
  {
    Owc10_xp::ChLine* ppline;
    OLECHECK(this->get_Line((Owc10_xp::ChLine**)&ppline));
    return ppline;
  }

  Owc10_xp::ChSeries* __fastcall get_Parent(void)
  {
    Owc10_xp::ChSeries* ppseries;
    OLECHECK(this->get_Parent((Owc10_xp::ChSeries**)&ppseries));
    return ppseries;
  }

  double __fastcall get_Amount(void)
  {
    double pramount;
    OLECHECK(this->get_Amount((double*)&pramount));
    return pramount;
  }

  Owc10_xp::ChartErrorBarIncludeEnum __fastcall get_Include(void)
  {
    Owc10_xp::ChartErrorBarIncludeEnum pocpEBI;
    OLECHECK(this->get_Include((Owc10_xp::ChartErrorBarIncludeEnum*)&pocpEBI));
    return pocpEBI;
  }

  Owc10_xp::ChartErrorBarTypeEnum __fastcall get_Type(void)
  {
    Owc10_xp::ChartErrorBarTypeEnum pocpEBT;
    OLECHECK(this->get_Type((Owc10_xp::ChartErrorBarTypeEnum*)&pocpEBT));
    return pocpEBT;
  }

  BSTR __fastcall GetDataReference(Owc10_xp::ChartErrorBarCustomValuesEnum ErrorBarDirection/*[in]*/)
  {
    BSTR DataSourceReference = 0;
    OLECHECK(this->GetDataReference(ErrorBarDirection, (BSTR*)&DataSourceReference));
    return DataSourceReference;
  }

  long __fastcall GetDataSourceIndex(Owc10_xp::ChartErrorBarCustomValuesEnum ErrorBarDirection/*[in]*/)
  {
    long DataSourceIndex;
    OLECHECK(this->GetDataSourceIndex(ErrorBarDirection, (long*)&DataSourceIndex));
    return DataSourceIndex;
  }

  long __fastcall get_Top(void)
  {
    long ptop;
    OLECHECK(this->get_Top((long*)&ptop));
    return ptop;
  }

  long __fastcall get_Left(void)
  {
    long pleft;
    OLECHECK(this->get_Left((long*)&pleft));
    return pleft;
  }

  long __fastcall get_Bottom(void)
  {
    long pbottom;
    OLECHECK(this->get_Bottom((long*)&pbottom));
    return pbottom;
  }

  long __fastcall get_Right(void)
  {
    long pright;
    OLECHECK(this->get_Right((long*)&pright));
    return pright;
  }

  Owc10_xp::ChartSelectionsEnum __fastcall get_ObjectType(void)
  {
    Owc10_xp::ChartSelectionsEnum pcs;
    OLECHECK(this->get_ObjectType((Owc10_xp::ChartSelectionsEnum*)&pcs));
    return pcs;
  }


  __property   Owc10_xp::ChartEndStyleEnum EndStyle = {read = get_EndStyle, write = set_EndStyle};
  __property   Owc10_xp::ChartErrorBarDirectionEnum Direction = {read = get_Direction, write = set_Direction};
  __property   long            Index = {read = get_Index};
  __property   Owc10_xp::ChLine* Line = {read = get_Line};
  __property   Owc10_xp::ChSeries* Parent = {read = get_Parent};
  __property   double          Amount = {read = get_Amount, write = set_Amount};
  __property   Owc10_xp::ChartErrorBarIncludeEnum Include = {read = get_Include, write = set_Include};
  __property   Owc10_xp::ChartErrorBarTypeEnum Type = {read = get_Type, write = set_Type};
  __property   long            Top = {read = get_Top};
  __property   long            Left = {read = get_Left};
  __property   long            Bottom = {read = get_Bottom};
  __property   long            Right = {read = get_Right};
  __property   Owc10_xp::ChartSelectionsEnum ObjectType = {read = get_ObjectType};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ChMarker
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39ABC-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface ChMarker  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_Style(Owc10_xp::ChartMarkerStyleEnum plStyle/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Style(Owc10_xp::ChartMarkerStyleEnum* plStyle/*[out,retval]*/) = 0; // [1610743808]
  virtual HRESULT STDMETHODCALLTYPE set_Size(long plSize/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Size(long* plSize/*[out,retval]*/) = 0; // [1610743810]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::ChartMarkerStyleEnum __fastcall get_Style(void)
  {
    Owc10_xp::ChartMarkerStyleEnum plStyle;
    OLECHECK(this->get_Style((Owc10_xp::ChartMarkerStyleEnum*)&plStyle));
    return plStyle;
  }

  long __fastcall get_Size(void)
  {
    long plSize;
    OLECHECK(this->get_Size((long*)&plSize));
    return plSize;
  }


  __property   Owc10_xp::ChartMarkerStyleEnum Style = {read = get_Style, write = set_Style};
  __property   long            Size = {read = get_Size, write = set_Size};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ChTrendlines
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AC0-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface ChTrendlines  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* cScaling/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Item(long Index/*[in]*/, 
                                             Owc10_xp::ChTrendline** pptrendline/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Owc10_xp::ChSeries** ppseries/*[out,retval]*/) = 0; // [5201]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE Add(Owc10_xp::ChTrendline** pptrendline/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Delete(long Index/*[in]*/) = 0; // [5202]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long cScaling;
    OLECHECK(this->get_Count((long*)&cScaling));
    return cScaling;
  }

  Owc10_xp::ChTrendline* __fastcall get_Item(long Index/*[in]*/)
  {
    Owc10_xp::ChTrendline* pptrendline;
    OLECHECK(this->get_Item(Index, (Owc10_xp::ChTrendline**)&pptrendline));
    return pptrendline;
  }

  Owc10_xp::ChSeries* __fastcall get_Parent(void)
  {
    Owc10_xp::ChSeries* ppseries;
    OLECHECK(this->get_Parent((Owc10_xp::ChSeries**)&ppseries));
    return ppseries;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunk));
    return ppunk;
  }

  Owc10_xp::ChTrendline* __fastcall Add(void)
  {
    Owc10_xp::ChTrendline* pptrendline;
    OLECHECK(this->Add((Owc10_xp::ChTrendline**)&pptrendline));
    return pptrendline;
  }


  __property   long            Count = {read = get_Count};
  __property   Owc10_xp::ChSeries* Parent = {read = get_Parent};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ChTrendline
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39ABF-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface ChTrendline  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_DataLabel(Owc10_xp::ChDataLabel** ppdatalabel/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Index(long* pIndex/*[out,retval]*/) = 0; // [5204]
  virtual HRESULT STDMETHODCALLTYPE set_IsDisplayingEquation(VARIANT_BOOL pfIsDisplEquation/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_IsDisplayingEquation(VARIANT_BOOL* pfIsDisplEquation/*[out,retval]*/) = 0; // [1610743810]
  virtual HRESULT STDMETHODCALLTYPE set_IsDisplayingRSquared(VARIANT_BOOL pfIsDisplRSquared/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_IsDisplayingRSquared(VARIANT_BOOL* pfIsDisplRSquared/*[out,retval]*/) = 0; // [1610743812]
  virtual HRESULT STDMETHODCALLTYPE get_Line(Owc10_xp::ChLine** ppline/*[out,retval]*/) = 0; // [5205]
  virtual HRESULT STDMETHODCALLTYPE set_Order(long plOrder/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Order(long* plOrder/*[out,retval]*/) = 0; // [1610743815]
  virtual HRESULT STDMETHODCALLTYPE set_Period(long plPeriod/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Period(long* plPeriod/*[out,retval]*/) = 0; // [1610743817]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Owc10_xp::ChSeries** ppseries/*[out,retval]*/) = 0; // [5201]
  virtual HRESULT STDMETHODCALLTYPE set_Type(Owc10_xp::ChartTrendlineTypeEnum pocpTT/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Owc10_xp::ChartTrendlineTypeEnum* pocpTT/*[out,retval]*/) = 0; // [1610743820]
  virtual HRESULT STDMETHODCALLTYPE set_Caption(BSTR pbstr/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Caption(BSTR* pbstr/*[out,retval]*/) = 0; // [1610743822]
  virtual HRESULT STDMETHODCALLTYPE set_HasAutoCaption(VARIANT_BOOL pfAuto/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_HasAutoCaption(VARIANT_BOOL* pfAuto/*[out,retval]*/) = 0; // [1610743824]
  virtual HRESULT STDMETHODCALLTYPE Select(void) = 0; // [5036]
  virtual HRESULT STDMETHODCALLTYPE get_Top(long* ptop/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Left(long* pleft/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Bottom(long* pbottom/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Right(long* pright/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::ChDataLabel* __fastcall get_DataLabel(void)
  {
    Owc10_xp::ChDataLabel* ppdatalabel;
    OLECHECK(this->get_DataLabel((Owc10_xp::ChDataLabel**)&ppdatalabel));
    return ppdatalabel;
  }

  long __fastcall get_Index(void)
  {
    long pIndex;
    OLECHECK(this->get_Index((long*)&pIndex));
    return pIndex;
  }

  VARIANT_BOOL __fastcall get_IsDisplayingEquation(void)
  {
    VARIANT_BOOL pfIsDisplEquation;
    OLECHECK(this->get_IsDisplayingEquation((VARIANT_BOOL*)&pfIsDisplEquation));
    return pfIsDisplEquation;
  }

  VARIANT_BOOL __fastcall get_IsDisplayingRSquared(void)
  {
    VARIANT_BOOL pfIsDisplRSquared;
    OLECHECK(this->get_IsDisplayingRSquared((VARIANT_BOOL*)&pfIsDisplRSquared));
    return pfIsDisplRSquared;
  }

  Owc10_xp::ChLine* __fastcall get_Line(void)
  {
    Owc10_xp::ChLine* ppline;
    OLECHECK(this->get_Line((Owc10_xp::ChLine**)&ppline));
    return ppline;
  }

  long __fastcall get_Order(void)
  {
    long plOrder;
    OLECHECK(this->get_Order((long*)&plOrder));
    return plOrder;
  }

  long __fastcall get_Period(void)
  {
    long plPeriod;
    OLECHECK(this->get_Period((long*)&plPeriod));
    return plPeriod;
  }

  Owc10_xp::ChSeries* __fastcall get_Parent(void)
  {
    Owc10_xp::ChSeries* ppseries;
    OLECHECK(this->get_Parent((Owc10_xp::ChSeries**)&ppseries));
    return ppseries;
  }

  Owc10_xp::ChartTrendlineTypeEnum __fastcall get_Type(void)
  {
    Owc10_xp::ChartTrendlineTypeEnum pocpTT;
    OLECHECK(this->get_Type((Owc10_xp::ChartTrendlineTypeEnum*)&pocpTT));
    return pocpTT;
  }

  BSTR __fastcall get_Caption(void)
  {
    BSTR pbstr = 0;
    OLECHECK(this->get_Caption((BSTR*)&pbstr));
    return pbstr;
  }

  VARIANT_BOOL __fastcall get_HasAutoCaption(void)
  {
    VARIANT_BOOL pfAuto;
    OLECHECK(this->get_HasAutoCaption((VARIANT_BOOL*)&pfAuto));
    return pfAuto;
  }

  long __fastcall get_Top(void)
  {
    long ptop;
    OLECHECK(this->get_Top((long*)&ptop));
    return ptop;
  }

  long __fastcall get_Left(void)
  {
    long pleft;
    OLECHECK(this->get_Left((long*)&pleft));
    return pleft;
  }

  long __fastcall get_Bottom(void)
  {
    long pbottom;
    OLECHECK(this->get_Bottom((long*)&pbottom));
    return pbottom;
  }

  long __fastcall get_Right(void)
  {
    long pright;
    OLECHECK(this->get_Right((long*)&pright));
    return pright;
  }

  Owc10_xp::ChartSelectionsEnum __fastcall get_ObjectType(void)
  {
    Owc10_xp::ChartSelectionsEnum pcs;
    OLECHECK(this->get_ObjectType((Owc10_xp::ChartSelectionsEnum*)&pcs));
    return pcs;
  }


  __property   Owc10_xp::ChDataLabel* DataLabel = {read = get_DataLabel};
  __property   long            Index = {read = get_Index};
  __property   VARIANT_BOOL    IsDisplayingEquation = {read = get_IsDisplayingEquation, write = set_IsDisplayingEquation};
  __property   VARIANT_BOOL    IsDisplayingRSquared = {read = get_IsDisplayingRSquared, write = set_IsDisplayingRSquared};
  __property   Owc10_xp::ChLine* Line = {read = get_Line};
  __property   long            Order = {read = get_Order, write = set_Order};
  __property   long            Period = {read = get_Period, write = set_Period};
  __property   Owc10_xp::ChSeries* Parent = {read = get_Parent};
  __property   Owc10_xp::ChartTrendlineTypeEnum Type = {read = get_Type, write = set_Type};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   VARIANT_BOOL    HasAutoCaption = {read = get_HasAutoCaption, write = set_HasAutoCaption};
  __property   long            Top = {read = get_Top};
  __property   long            Left = {read = get_Left};
  __property   long            Bottom = {read = get_Bottom};
  __property   long            Right = {read = get_Right};
  __property   Owc10_xp::ChartSelectionsEnum ObjectType = {read = get_ObjectType};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ChFormatMap
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BEAE3F40-6FB5-11D2-A8FF-00C04FAC6830}
// *********************************************************************//
interface ChFormatMap  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Segments(Owc10_xp::ChSegments** ppsegments/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::ChSegments* __fastcall get_Segments(void)
  {
    Owc10_xp::ChSegments* ppsegments;
    OLECHECK(this->get_Segments((Owc10_xp::ChSegments**)&ppsegments));
    return ppsegments;
  }


  __property   Owc10_xp::ChSegments* Segments = {read = get_Segments};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ChSegments
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BEAE3F41-6FB5-11D2-A8FF-00C04FAC6830}
// *********************************************************************//
interface ChSegments  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* cDoodads/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Owc10_xp::ChFormatMap** ppformatmap/*[out,retval]*/) = 0; // [5201]
  virtual HRESULT STDMETHODCALLTYPE Add(Owc10_xp::ChSegment** ppsegment/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Delete(long Index/*[in]*/) = 0; // [5202]
  virtual HRESULT STDMETHODCALLTYPE get_Item(long Index/*[in]*/, 
                                             Owc10_xp::ChSegment** ppsegment/*[out,retval]*/) = 0; // [0]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long cDoodads;
    OLECHECK(this->get_Count((long*)&cDoodads));
    return cDoodads;
  }

  Owc10_xp::ChFormatMap* __fastcall get_Parent(void)
  {
    Owc10_xp::ChFormatMap* ppformatmap;
    OLECHECK(this->get_Parent((Owc10_xp::ChFormatMap**)&ppformatmap));
    return ppformatmap;
  }

  Owc10_xp::ChSegment* __fastcall Add(void)
  {
    Owc10_xp::ChSegment* ppsegment;
    OLECHECK(this->Add((Owc10_xp::ChSegment**)&ppsegment));
    return ppsegment;
  }

  Owc10_xp::ChSegment* __fastcall get_Item(long Index/*[in]*/)
  {
    Owc10_xp::ChSegment* ppsegment;
    OLECHECK(this->get_Item(Index, (Owc10_xp::ChSegment**)&ppsegment));
    return ppsegment;
  }


  __property   long            Count = {read = get_Count};
  __property   Owc10_xp::ChFormatMap* Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ChSegment
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {EB509C25-4748-4D52-A6FE-137BA0642027}
// *********************************************************************//
interface ChSegment  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Begin(Owc10_xp::ChSegmentBoundary** ppsegbound/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_End(Owc10_xp::ChSegmentBoundary** ppsegbound/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_HasAbsoluteLabels(VARIANT_BOOL* pfAbsolute/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_HasAbsoluteLabels(VARIANT_BOOL pfAbsolute/*[in]*/) = 0; // [1610743810]
  virtual HRESULT STDMETHODCALLTYPE get_HasDiscreteDivisions(VARIANT_BOOL* pfDiscrete/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_HasDiscreteDivisions(VARIANT_BOOL pfDiscrete/*[in]*/) = 0; // [1610743812]
  virtual HRESULT STDMETHODCALLTYPE get_HasAutoDivisions(VARIANT_BOOL* pfAuto/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_HasAutoDivisions(VARIANT_BOOL pfAuto/*[in]*/) = 0; // [1610743814]
  virtual HRESULT STDMETHODCALLTYPE get_Divisions(long* pDivisions/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Divisions(long pDivisions/*[in]*/) = 0; // [1610743816]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::ChSegmentBoundary* __fastcall get_Begin(void)
  {
    Owc10_xp::ChSegmentBoundary* ppsegbound;
    OLECHECK(this->get_Begin((Owc10_xp::ChSegmentBoundary**)&ppsegbound));
    return ppsegbound;
  }

  Owc10_xp::ChSegmentBoundary* __fastcall get_End(void)
  {
    Owc10_xp::ChSegmentBoundary* ppsegbound;
    OLECHECK(this->get_End((Owc10_xp::ChSegmentBoundary**)&ppsegbound));
    return ppsegbound;
  }

  VARIANT_BOOL __fastcall get_HasAbsoluteLabels(void)
  {
    VARIANT_BOOL pfAbsolute;
    OLECHECK(this->get_HasAbsoluteLabels((VARIANT_BOOL*)&pfAbsolute));
    return pfAbsolute;
  }

  VARIANT_BOOL __fastcall get_HasDiscreteDivisions(void)
  {
    VARIANT_BOOL pfDiscrete;
    OLECHECK(this->get_HasDiscreteDivisions((VARIANT_BOOL*)&pfDiscrete));
    return pfDiscrete;
  }

  VARIANT_BOOL __fastcall get_HasAutoDivisions(void)
  {
    VARIANT_BOOL pfAuto;
    OLECHECK(this->get_HasAutoDivisions((VARIANT_BOOL*)&pfAuto));
    return pfAuto;
  }

  long __fastcall get_Divisions(void)
  {
    long pDivisions;
    OLECHECK(this->get_Divisions((long*)&pDivisions));
    return pDivisions;
  }


  __property   Owc10_xp::ChSegmentBoundary* Begin = {read = get_Begin};
  __property   Owc10_xp::ChSegmentBoundary* End = {read = get_End};
  __property   VARIANT_BOOL    HasAbsoluteLabels = {read = get_HasAbsoluteLabels, write = set_HasAbsoluteLabels};
  __property   VARIANT_BOOL    HasDiscreteDivisions = {read = get_HasDiscreteDivisions, write = set_HasDiscreteDivisions};
  __property   VARIANT_BOOL    HasAutoDivisions = {read = get_HasAutoDivisions, write = set_HasAutoDivisions};
  __property   long            Divisions = {read = get_Divisions, write = set_Divisions};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ChSegmentBoundary
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {186FEDB0-6FB6-11D2-A8FF-00C04FAC6830}
// *********************************************************************//
interface ChSegmentBoundary  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Border(Owc10_xp::ChBorder** ppline/*[out,retval]*/) = 0; // [5004]
  virtual HRESULT STDMETHODCALLTYPE get_Interior(Owc10_xp::ChInterior** ppinterior/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Line(Owc10_xp::ChLine** ppline/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Value(double* prvalue/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Value(double prvalue/*[in]*/) = 0; // [1610743811]
  virtual HRESULT STDMETHODCALLTYPE get_ValueType(Owc10_xp::ChartBoundaryValueTypeEnum* pvt/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_ValueType(Owc10_xp::ChartBoundaryValueTypeEnum pvt/*[in]*/) = 0; // [1610743813]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::ChBorder* __fastcall get_Border(void)
  {
    Owc10_xp::ChBorder* ppline;
    OLECHECK(this->get_Border((Owc10_xp::ChBorder**)&ppline));
    return ppline;
  }

  Owc10_xp::ChInterior* __fastcall get_Interior(void)
  {
    Owc10_xp::ChInterior* ppinterior;
    OLECHECK(this->get_Interior((Owc10_xp::ChInterior**)&ppinterior));
    return ppinterior;
  }

  Owc10_xp::ChLine* __fastcall get_Line(void)
  {
    Owc10_xp::ChLine* ppline;
    OLECHECK(this->get_Line((Owc10_xp::ChLine**)&ppline));
    return ppline;
  }

  double __fastcall get_Value(void)
  {
    double prvalue;
    OLECHECK(this->get_Value((double*)&prvalue));
    return prvalue;
  }

  Owc10_xp::ChartBoundaryValueTypeEnum __fastcall get_ValueType(void)
  {
    Owc10_xp::ChartBoundaryValueTypeEnum pvt;
    OLECHECK(this->get_ValueType((Owc10_xp::ChartBoundaryValueTypeEnum*)&pvt));
    return pvt;
  }


  __property   Owc10_xp::ChBorder* Border = {read = get_Border};
  __property   Owc10_xp::ChInterior* Interior = {read = get_Interior};
  __property   Owc10_xp::ChLine* Line = {read = get_Line};
  __property   double          Value = {read = get_Value, write = set_Value};
  __property   Owc10_xp::ChartBoundaryValueTypeEnum ValueType = {read = get_ValueType, write = set_ValueType};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ChDropZone
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F0706B76-6BB3-11D3-A18A-00C04F612970}
// *********************************************************************//
interface ChDropZone  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_ButtonFont(Owc10_xp::ChFont** ppfont/*[out,retval]*/) = 0; // [5200]
  virtual HRESULT STDMETHODCALLTYPE get_ButtonInterior(Owc10_xp::ChInterior** ppinterior/*[out,retval]*/) = 0; // [5007]
  virtual HRESULT STDMETHODCALLTYPE get_ButtonBorder(Owc10_xp::ChBorder** ppborder/*[out,retval]*/) = 0; // [5004]
  virtual HRESULT STDMETHODCALLTYPE get_WatermarkFont(Owc10_xp::ChFont** ppfont/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_WatermarkInterior(Owc10_xp::ChInterior** ppinterior/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_WatermarkBorder(Owc10_xp::ChBorder** ppborder/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ChartFields(Owc10_xp::ChChartFields** ppwcfields/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* ppwcwebchart/*[out,retval]*/) = 0; // [5201]
  virtual HRESULT STDMETHODCALLTYPE get_Top(long* ptop/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Top(long ptop/*[in]*/) = 0; // [1610743816]
  virtual HRESULT STDMETHODCALLTYPE get_Left(long* pleft/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Left(long pleft/*[in]*/) = 0; // [1610743818]
  virtual HRESULT STDMETHODCALLTYPE get_Bottom(long* pbottom/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Right(long* pright/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Index(Owc10_xp::ChartDropZonesEnum* pIndex/*[out,retval]*/) = 0; // [5204]
  virtual HRESULT STDMETHODCALLTYPE get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::ChFont* __fastcall get_ButtonFont(void)
  {
    Owc10_xp::ChFont* ppfont;
    OLECHECK(this->get_ButtonFont((Owc10_xp::ChFont**)&ppfont));
    return ppfont;
  }

  Owc10_xp::ChInterior* __fastcall get_ButtonInterior(void)
  {
    Owc10_xp::ChInterior* ppinterior;
    OLECHECK(this->get_ButtonInterior((Owc10_xp::ChInterior**)&ppinterior));
    return ppinterior;
  }

  Owc10_xp::ChBorder* __fastcall get_ButtonBorder(void)
  {
    Owc10_xp::ChBorder* ppborder;
    OLECHECK(this->get_ButtonBorder((Owc10_xp::ChBorder**)&ppborder));
    return ppborder;
  }

  Owc10_xp::ChFont* __fastcall get_WatermarkFont(void)
  {
    Owc10_xp::ChFont* ppfont;
    OLECHECK(this->get_WatermarkFont((Owc10_xp::ChFont**)&ppfont));
    return ppfont;
  }

  Owc10_xp::ChInterior* __fastcall get_WatermarkInterior(void)
  {
    Owc10_xp::ChInterior* ppinterior;
    OLECHECK(this->get_WatermarkInterior((Owc10_xp::ChInterior**)&ppinterior));
    return ppinterior;
  }

  Owc10_xp::ChBorder* __fastcall get_WatermarkBorder(void)
  {
    Owc10_xp::ChBorder* ppborder;
    OLECHECK(this->get_WatermarkBorder((Owc10_xp::ChBorder**)&ppborder));
    return ppborder;
  }

  Owc10_xp::ChChartFields* __fastcall get_ChartFields(void)
  {
    Owc10_xp::ChChartFields* ppwcfields;
    OLECHECK(this->get_ChartFields((Owc10_xp::ChChartFields**)&ppwcfields));
    return ppwcfields;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH ppwcwebchart;
    OLECHECK(this->get_Parent((LPDISPATCH*)&ppwcwebchart));
    return ppwcwebchart;
  }

  long __fastcall get_Top(void)
  {
    long ptop;
    OLECHECK(this->get_Top((long*)&ptop));
    return ptop;
  }

  long __fastcall get_Left(void)
  {
    long pleft;
    OLECHECK(this->get_Left((long*)&pleft));
    return pleft;
  }

  long __fastcall get_Bottom(void)
  {
    long pbottom;
    OLECHECK(this->get_Bottom((long*)&pbottom));
    return pbottom;
  }

  long __fastcall get_Right(void)
  {
    long pright;
    OLECHECK(this->get_Right((long*)&pright));
    return pright;
  }

  Owc10_xp::ChartDropZonesEnum __fastcall get_Index(void)
  {
    Owc10_xp::ChartDropZonesEnum pIndex;
    OLECHECK(this->get_Index((Owc10_xp::ChartDropZonesEnum*)&pIndex));
    return pIndex;
  }

  Owc10_xp::ChartSelectionsEnum __fastcall get_ObjectType(void)
  {
    Owc10_xp::ChartSelectionsEnum pcs;
    OLECHECK(this->get_ObjectType((Owc10_xp::ChartSelectionsEnum*)&pcs));
    return pcs;
  }


  __property   Owc10_xp::ChFont* ButtonFont = {read = get_ButtonFont};
  __property   Owc10_xp::ChInterior* ButtonInterior = {read = get_ButtonInterior};
  __property   Owc10_xp::ChBorder* ButtonBorder = {read = get_ButtonBorder};
  __property   Owc10_xp::ChFont* WatermarkFont = {read = get_WatermarkFont};
  __property   Owc10_xp::ChInterior* WatermarkInterior = {read = get_WatermarkInterior};
  __property   Owc10_xp::ChBorder* WatermarkBorder = {read = get_WatermarkBorder};
  __property   Owc10_xp::ChChartFields* ChartFields = {read = get_ChartFields};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Bottom = {read = get_Bottom};
  __property   long            Right = {read = get_Right};
  __property   Owc10_xp::ChartDropZonesEnum Index = {read = get_Index};
  __property   Owc10_xp::ChartSelectionsEnum ObjectType = {read = get_ObjectType};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ChChartFields
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BB4C16FA-6BEC-11D3-A18A-00C04F612970}
// *********************************************************************//
interface ChChartFields  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Item(long Index/*[in]*/, 
                                             Owc10_xp::ChChartField** ppwcfield/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* pcfields/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Owc10_xp::ChDropZone** ppchdz/*[out,retval]*/) = 0; // [5201]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::ChChartField* __fastcall get_Item(long Index/*[in]*/)
  {
    Owc10_xp::ChChartField* ppwcfield;
    OLECHECK(this->get_Item(Index, (Owc10_xp::ChChartField**)&ppwcfield));
    return ppwcfield;
  }

  long __fastcall get_Count(void)
  {
    long pcfields;
    OLECHECK(this->get_Count((long*)&pcfields));
    return pcfields;
  }

  Owc10_xp::ChDropZone* __fastcall get_Parent(void)
  {
    Owc10_xp::ChDropZone* ppchdz;
    OLECHECK(this->get_Parent((Owc10_xp::ChDropZone**)&ppchdz));
    return ppchdz;
  }


  __property   long            Count = {read = get_Count};
  __property   Owc10_xp::ChDropZone* Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ChChartField
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D7842C36-6BEC-11D3-A18A-00C04F612970}
// *********************************************************************//
interface ChChartField  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_PivotObject(LPDISPATCH* ppdispObj/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Owc10_xp::ChDropZone** ppchdz/*[out,retval]*/) = 0; // [5201]
  virtual HRESULT STDMETHODCALLTYPE Select(void) = 0; // [5036]
  virtual HRESULT STDMETHODCALLTYPE get_Top(long* ptop/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Left(long* pleft/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Bottom(long* pbottom/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Right(long* pright/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_PivotObject(void)
  {
    LPDISPATCH ppdispObj;
    OLECHECK(this->get_PivotObject((LPDISPATCH*)&ppdispObj));
    return ppdispObj;
  }

  Owc10_xp::ChDropZone* __fastcall get_Parent(void)
  {
    Owc10_xp::ChDropZone* ppchdz;
    OLECHECK(this->get_Parent((Owc10_xp::ChDropZone**)&ppchdz));
    return ppchdz;
  }

  long __fastcall get_Top(void)
  {
    long ptop;
    OLECHECK(this->get_Top((long*)&ptop));
    return ptop;
  }

  long __fastcall get_Left(void)
  {
    long pleft;
    OLECHECK(this->get_Left((long*)&pleft));
    return pleft;
  }

  long __fastcall get_Bottom(void)
  {
    long pbottom;
    OLECHECK(this->get_Bottom((long*)&pbottom));
    return pbottom;
  }

  long __fastcall get_Right(void)
  {
    long pright;
    OLECHECK(this->get_Right((long*)&pright));
    return pright;
  }

  Owc10_xp::ChartSelectionsEnum __fastcall get_ObjectType(void)
  {
    Owc10_xp::ChartSelectionsEnum pcs;
    OLECHECK(this->get_ObjectType((Owc10_xp::ChartSelectionsEnum*)&pcs));
    return pcs;
  }


  __property   LPDISPATCH      PivotObject = {read = get_PivotObject};
  __property   Owc10_xp::ChDropZone* Parent = {read = get_Parent};
  __property   long            Top = {read = get_Top};
  __property   long            Left = {read = get_Left};
  __property   long            Bottom = {read = get_Bottom};
  __property   long            Right = {read = get_Right};
  __property   Owc10_xp::ChartSelectionsEnum ObjectType = {read = get_ObjectType};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: OWCLanguageSettings
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6F5A76C3-0AC7-4DED-9A6B-A3547FD7B7BB}
// *********************************************************************//
interface OWCLanguageSettings  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* Dispatch/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_LanguageID(Owc10_xp::MsoAppLanguageID id/*[in]*/, 
                                                   long* lid/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_LanguagePreferredForEditing(Owc10_xp::MsoLanguageID lid/*[in]*/, 
                                                                    VARIANT_BOOL* f/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Application(void)
  {
    LPDISPATCH Dispatch;
    OLECHECK(this->get_Application((LPDISPATCH*)&Dispatch));
    return Dispatch;
  }

  long __fastcall get_LanguageID(Owc10_xp::MsoAppLanguageID id/*[in]*/)
  {
    long lid;
    OLECHECK(this->get_LanguageID(id, (long*)&lid));
    return lid;
  }

  VARIANT_BOOL __fastcall get_LanguagePreferredForEditing(Owc10_xp::MsoLanguageID lid/*[in]*/)
  {
    VARIANT_BOOL f;
    OLECHECK(this->get_LanguagePreferredForEditing(lid, (VARIANT_BOOL*)&f));
    return f;
  }


  __property   LPDISPATCH      Application = {read = get_Application};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ISpreadsheetEventSink
// Flags:     (4096) Dispatchable
// GUID:      {F5B39A75-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface ISpreadsheetEventSink : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall BeforeContextMenu(long x, long y, Owc10_xp::ByRef* Menu, 
                                                    Owc10_xp::ByRef* Cancel)
  {
    _TDispID _dispid(/* BeforeContextMenu */ DISPID(1011));
    TAutoArgs<4> _args;
    _args[1] = x /*[VT_I4:0]*/;
    _args[2] = y /*[VT_I4:0]*/;
    _args[3] = (LPDISPATCH)(Owc10_xp::ByRef*)Menu /*[VT_USERDEFINED:1]*/;
    _args[4] = (LPDISPATCH)(Owc10_xp::ByRef*)Cancel /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall BeforeKeyDown(long KeyCode, long Shift, Owc10_xp::ByRef* Cancel)
  {
    _TDispID _dispid(/* BeforeKeyDown */ DISPID(1006));
    TAutoArgs<3> _args;
    _args[1] = KeyCode /*[VT_I4:0]*/;
    _args[2] = Shift /*[VT_I4:0]*/;
    _args[3] = (LPDISPATCH)(Owc10_xp::ByRef*)Cancel /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall BeforeKeyPress(long KeyAscii, Owc10_xp::ByRef* Cancel)
  {
    _TDispID _dispid(/* BeforeKeyPress */ DISPID(1007));
    TAutoArgs<2> _args;
    _args[1] = KeyAscii /*[VT_I4:0]*/;
    _args[2] = (LPDISPATCH)(Owc10_xp::ByRef*)Cancel /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall BeforeKeyUp(long KeyCode, long Shift, Owc10_xp::ByRef* Cancel)
  {
    _TDispID _dispid(/* BeforeKeyUp */ DISPID(1005));
    TAutoArgs<3> _args;
    _args[1] = KeyCode /*[VT_I4:0]*/;
    _args[2] = Shift /*[VT_I4:0]*/;
    _args[3] = (LPDISPATCH)(Owc10_xp::ByRef*)Cancel /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Click()
  {
    _TDispID _dispid(/* Click */ DISPID(1502));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall CommandEnabled(VARIANT Command, Owc10_xp::ByRef* Enabled)
  {
    _TDispID _dispid(/* CommandEnabled */ DISPID(1000));
    TAutoArgs<2> _args;
    _args[1] = Command /*[VT_VARIANT:0]*/;
    _args[2] = (LPDISPATCH)(Owc10_xp::ByRef*)Enabled /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall CommandChecked(VARIANT Command, Owc10_xp::ByRef* Checked)
  {
    _TDispID _dispid(/* CommandChecked */ DISPID(1001));
    TAutoArgs<2> _args;
    _args[1] = Command /*[VT_VARIANT:0]*/;
    _args[2] = (LPDISPATCH)(Owc10_xp::ByRef*)Checked /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall CommandTipText(VARIANT Command, Owc10_xp::ByRef* Caption)
  {
    _TDispID _dispid(/* CommandTipText */ DISPID(1002));
    TAutoArgs<2> _args;
    _args[1] = Command /*[VT_VARIANT:0]*/;
    _args[2] = (LPDISPATCH)(Owc10_xp::ByRef*)Caption /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall CommandBeforeExecute(VARIANT Command, Owc10_xp::ByRef* Cancel)
  {
    _TDispID _dispid(/* CommandBeforeExecute */ DISPID(1003));
    TAutoArgs<2> _args;
    _args[1] = Command /*[VT_VARIANT:0]*/;
    _args[2] = (LPDISPATCH)(Owc10_xp::ByRef*)Cancel /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall CommandExecute(VARIANT Command, VARIANT_BOOL Succeeded)
  {
    _TDispID _dispid(/* CommandExecute */ DISPID(1004));
    TAutoArgs<2> _args;
    _args[1] = Command /*[VT_VARIANT:0]*/;
    _args[2] = Succeeded /*[VT_BOOL:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall DblClick()
  {
    _TDispID _dispid(/* DblClick */ DISPID(1503));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall EndEdit(VARIANT_BOOL Accept, Owc10_xp::ByRef* FinalValue, 
                                          Owc10_xp::ByRef* Cancel, Owc10_xp::ByRef* ErrorDescription)
  {
    _TDispID _dispid(/* EndEdit */ DISPID(1504));
    TAutoArgs<4> _args;
    _args[1] = Accept /*[VT_BOOL:0]*/;
    _args[2] = (LPDISPATCH)(Owc10_xp::ByRef*)FinalValue /*[VT_USERDEFINED:1]*/;
    _args[3] = (LPDISPATCH)(Owc10_xp::ByRef*)Cancel /*[VT_USERDEFINED:1]*/;
    _args[4] = (LPDISPATCH)(Owc10_xp::ByRef*)ErrorDescription /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Initialize()
  {
    _TDispID _dispid(/* Initialize */ DISPID(1523));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyDown(long KeyCode, long Shift)
  {
    _TDispID _dispid(/* KeyDown */ DISPID(1009));
    TAutoArgs<2> _args;
    _args[1] = KeyCode /*[VT_I4:0]*/;
    _args[2] = Shift /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyPress(long KeyAscii)
  {
    _TDispID _dispid(/* KeyPress */ DISPID(1010));
    TAutoArgs<1> _args;
    _args[1] = KeyAscii /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyUp(long KeyCode, long Shift)
  {
    _TDispID _dispid(/* KeyUp */ DISPID(1008));
    TAutoArgs<2> _args;
    _args[1] = KeyCode /*[VT_I4:0]*/;
    _args[2] = Shift /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall LoadCompleted()
  {
    _TDispID _dispid(/* LoadCompleted */ DISPID(1522));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseDown(long Button, long Shift, long x, long y)
  {
    _TDispID _dispid(/* MouseDown */ DISPID(1505));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I4:0]*/;
    _args[2] = Shift /*[VT_I4:0]*/;
    _args[3] = x /*[VT_I4:0]*/;
    _args[4] = y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseOut(long Button, long Shift, Owc10_xp::_Range* Target)
  {
    _TDispID _dispid(/* MouseOut */ DISPID(1506));
    TAutoArgs<3> _args;
    _args[1] = Button /*[VT_I4:0]*/;
    _args[2] = Shift /*[VT_I4:0]*/;
    _args[3] = (LPDISPATCH)(Owc10_xp::_Range*)Target /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseOver(long Button, long Shift, Owc10_xp::_Range* Target)
  {
    _TDispID _dispid(/* MouseOver */ DISPID(1507));
    TAutoArgs<3> _args;
    _args[1] = Button /*[VT_I4:0]*/;
    _args[2] = Shift /*[VT_I4:0]*/;
    _args[3] = (LPDISPATCH)(Owc10_xp::_Range*)Target /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseUp(long Button, long Shift, long x, long y)
  {
    _TDispID _dispid(/* MouseUp */ DISPID(1508));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I4:0]*/;
    _args[2] = Shift /*[VT_I4:0]*/;
    _args[3] = x /*[VT_I4:0]*/;
    _args[4] = y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseWheel(VARIANT_BOOL Page, long Count)
  {
    _TDispID _dispid(/* MouseWheel */ DISPID(1509));
    TAutoArgs<2> _args;
    _args[1] = Page /*[VT_BOOL:0]*/;
    _args[2] = Count /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall SelectionChange()
  {
    _TDispID _dispid(/* SelectionChange */ DISPID(1511));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall SelectionChanging(Owc10_xp::_Range* Range)
  {
    _TDispID _dispid(/* SelectionChanging */ DISPID(1512));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Owc10_xp::_Range*)Range /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall SheetActivate(Owc10_xp::Worksheet* Sh)
  {
    _TDispID _dispid(/* SheetActivate */ DISPID(1513));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Owc10_xp::Worksheet*)Sh /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall SheetCalculate(Owc10_xp::Worksheet* Sh)
  {
    _TDispID _dispid(/* SheetCalculate */ DISPID(1516));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Owc10_xp::Worksheet*)Sh /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall SheetChange(Owc10_xp::Worksheet* Sh, Owc10_xp::_Range* Target)
  {
    _TDispID _dispid(/* SheetChange */ DISPID(1517));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Owc10_xp::Worksheet*)Sh /*[VT_USERDEFINED:1]*/;
    _args[2] = (LPDISPATCH)(Owc10_xp::_Range*)Target /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall SheetDeactivate(Owc10_xp::Worksheet* Sh)
  {
    _TDispID _dispid(/* SheetDeactivate */ DISPID(1518));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Owc10_xp::Worksheet*)Sh /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall SheetFollowHyperlink(Owc10_xp::Worksheet* Sh, 
                                                       Owc10_xp::Hyperlink* Target)
  {
    _TDispID _dispid(/* SheetFollowHyperlink */ DISPID(1519));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Owc10_xp::Worksheet*)Sh /*[VT_USERDEFINED:1]*/;
    _args[2] = (LPDISPATCH)(Owc10_xp::Hyperlink*)Target /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall StartEdit(LPDISPATCH Selection, Owc10_xp::ByRef* InitialValue, 
                                            Owc10_xp::ByRef* Cancel, 
                                            Owc10_xp::ByRef* ErrorDescription)
  {
    _TDispID _dispid(/* StartEdit */ DISPID(1520));
    TAutoArgs<4> _args;
    _args[1] = Selection /*[VT_DISPATCH:0]*/;
    _args[2] = (LPDISPATCH)(Owc10_xp::ByRef*)InitialValue /*[VT_USERDEFINED:1]*/;
    _args[3] = (LPDISPATCH)(Owc10_xp::ByRef*)Cancel /*[VT_USERDEFINED:1]*/;
    _args[4] = (LPDISPATCH)(Owc10_xp::ByRef*)ErrorDescription /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall ViewChange(Owc10_xp::_Range* Target)
  {
    _TDispID _dispid(/* ViewChange */ DISPID(1521));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Owc10_xp::_Range*)Target /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: _Range
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B05-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface _Range  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE Activate(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE AutoFilter(VARIANT* Field/*[in,opt]*/= TNoParam(), 
                                               VARIANT* Criteria1/*[in,opt]*/= TNoParam(), 
                                               VARIANT* Operator/*[in,opt]*/= TNoParam(), 
                                               VARIANT* Criteria2/*[in,opt]*/= TNoParam(), 
                                               VARIANT* VisibleDropDown/*[in,opt]*/= TNoParam()) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE AutoFit(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE BorderAround(VARIANT LineStyle/*[in,opt]*/, 
                                                 Owc10_xp::XlBorderWeight Weight/*[in,def,opt]*/, 
                                                 Owc10_xp::XlColorIndex ColorIndex/*[in,def,opt]*/, 
                                                 VARIANT Color/*[in,opt]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Calculate(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Clear(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ClearFormats(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ClearContents(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Copy(VARIANT Destination/*[in,opt]*/= TNoParam()) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE CopyFromRecordset(LPUNKNOWN Data/*[in]*/, 
                                                      VARIANT MaxRows/*[in,opt]*/, 
                                                      VARIANT MaxColumns/*[in,opt]*/, 
                                                      int* pcrowRetrieved/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Cut(VARIANT Destination/*[in,opt]*/= TNoParam()) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Delete(VARIANT* Shift/*[in,opt]*/= TNoParam()) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE FillDown(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE FillRight(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Find(VARIANT What/*[in]*/, VARIANT* After/*[in,opt]*/, 
                                         VARIANT* LookIn/*[in,opt]*/, VARIANT* LookAt/*[in,opt]*/, 
                                         VARIANT* SearchOrder/*[in,opt]*/, 
                                         Owc10_xp::XlSearchDirection SearchDirection/*[in,def,opt]*/, 
                                         VARIANT* MatchCase/*[in,opt]*/, 
                                         VARIANT* MatchByte/*[in,opt]*/, 
                                         Owc10_xp::_Range** Range/*[out,retval]*/) = 0; // [1702]
  virtual HRESULT STDMETHODCALLTYPE FindNext(VARIANT* After/*[in,opt]*/, 
                                             Owc10_xp::_Range** Range/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE FindPrevious(VARIANT* After/*[in,opt]*/, 
                                                 Owc10_xp::_Range** Range/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Insert(VARIANT* Shift/*[in,opt]*/= TNoParam()) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE LoadText(BSTR File/*[in]*/, BSTR Delimiters/*[in,def,opt]*/, 
                                             VARIANT_BOOL ConsecutiveDelimAsOne/*[in,def,opt]*/, 
                                             BSTR TextQualifier/*[in,def,opt]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Merge(VARIANT* Across/*[in,opt]*/= TNoParam()) = 0; // [1700]
  virtual HRESULT STDMETHODCALLTYPE ParseText(BSTR Text/*[in]*/, BSTR Delimiters/*[in,def,opt]*/, 
                                              VARIANT_BOOL ConsecutiveDelimAsOne/*[in,def,opt]*/, 
                                              BSTR TextQualifier/*[in,def,opt]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Paste(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Select(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Show(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Sort(int ColumnKey/*[in,def,opt]*/, 
                                         Owc10_xp::XlSortOrder Order/*[in,def,opt]*/, 
                                         Owc10_xp::XlYesNoGuess Header/*[in,def,opt]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE UnMerge(void) = 0; // [1701]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE get__Default(VARIANT Row/*[in,opt]*/, VARIANT Column/*[in,opt]*/, 
                                                 VARIANT* var/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set__Default(VARIANT Row/*[in,opt]*/, VARIANT Column/*[in,opt]*/, 
                                                 VARIANT var/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Address(VARIANT* RowAbsolute/*[in,opt]*/, 
                                                VARIANT* ColumnAbsolute/*[in,opt]*/, 
                                                Owc10_xp::XlReferenceStyle ReferenceStyle/*[in,def,opt]*/, 
                                                VARIANT* External/*[in,opt]*/, 
                                                VARIANT* RelativeTo/*[in,opt]*/, 
                                                BSTR* Address/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Application(Owc10_xp::ISpreadsheet** ppApp/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Borders(Owc10_xp::Borders** Borders/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Cells(Owc10_xp::_Range** Range/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Column(long* Column/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Columns(Owc10_xp::_Range** Range/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ColumnWidth(VARIANT* ColumnWidth/*[out,retval]*/) = 0; // [1011]
  virtual HRESULT STDMETHODCALLTYPE set_ColumnWidth(double ColumnWidth/*[in]*/) = 0; // [1011]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_CurrentArray(Owc10_xp::_Range** CurrentRange/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_CurrentRegion(Owc10_xp::_Range** CurrentRegion/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_End(Owc10_xp::XlDirection Direction/*[in]*/, 
                                            Owc10_xp::_Range** Range/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_EntireColumn(Owc10_xp::_Range** Range/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_EntireRow(Owc10_xp::_Range** Range/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Font(Owc10_xp::Font** Font/*[out,retval]*/) = 0; // [1030]
  virtual HRESULT STDMETHODCALLTYPE get_Formula(VARIANT* Formula/*[out,retval]*/) = 0; // [1031]
  virtual HRESULT STDMETHODCALLTYPE set_Formula(VARIANT Formula/*[in]*/) = 0; // [1031]
  virtual HRESULT STDMETHODCALLTYPE get_FormulaArray(VARIANT* FormulaArray/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_FormulaArray(VARIANT FormulaArray/*[in]*/) = 0; // [1610743854]
  virtual HRESULT STDMETHODCALLTYPE get_FormulaLocal(VARIANT* Formula/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_FormulaLocal(VARIANT Formula/*[in]*/) = 0; // [1610743856]
  virtual HRESULT STDMETHODCALLTYPE get_HasArray(VARIANT* HasArray/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_HasFormula(VARIANT* HasFormula/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Height(VARIANT* Height/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Hidden(VARIANT_BOOL* Hidden/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Hidden(VARIANT_BOOL Hidden/*[in]*/) = 0; // [1610743861]
  virtual HRESULT STDMETHODCALLTYPE get_HorizontalAlignment(VARIANT* HAlign/*[out,retval]*/) = 0; // [1032]
  virtual HRESULT STDMETHODCALLTYPE set_HorizontalAlignment(Owc10_xp::XlHAlign HAlign/*[in]*/) = 0; // [1032]
  virtual HRESULT STDMETHODCALLTYPE get_HTMLData(BSTR* HTMLData/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Hyperlink(Owc10_xp::Hyperlink** Hyperlink/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Interior(Owc10_xp::Interior** Interior/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT RowIndex/*[in]*/, 
                                             VARIANT ColumnIndex/*[in,opt]*/, 
                                             Owc10_xp::_Range** Range/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Left(VARIANT* Left/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Locked(VARIANT* Locked/*[out,retval]*/) = 0; // [1034]
  virtual HRESULT STDMETHODCALLTYPE set_Locked(VARIANT_BOOL Locked/*[in]*/) = 0; // [1034]
  virtual HRESULT STDMETHODCALLTYPE get_MergeArea(Owc10_xp::_Range** Range/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_MergeCells(VARIANT* MergeCells/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_MergeCells(VARIANT_BOOL MergeCells/*[in]*/) = 0; // [1610743873]
  virtual HRESULT STDMETHODCALLTYPE get_Name(Owc10_xp::Name** Name/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR Name/*[in]*/) = 0; // [1610743875]
  virtual HRESULT STDMETHODCALLTYPE get_Next(Owc10_xp::_Range** Range/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_NumberFormat(VARIANT* NumberFormat/*[out,retval]*/) = 0; // [1041]
  virtual HRESULT STDMETHODCALLTYPE set_NumberFormat(BSTR NumberFormat/*[in]*/) = 0; // [1041]
  virtual HRESULT STDMETHODCALLTYPE get_Offset(VARIANT RowOffset/*[in,opt]*/, 
                                               VARIANT ColumnOffset/*[in,opt]*/, 
                                               Owc10_xp::_Range** Range/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Owc10_xp::Worksheet** Sheet/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_PrefixCharacter(VARIANT* str/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Previous(Owc10_xp::_Range** Range/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Range(VARIANT Cell1/*[in]*/, VARIANT Cell2/*[in,opt]*/, 
                                              Owc10_xp::_Range** Range/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ReadingOrder(VARIANT* ReadingOrder/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_ReadingOrder(Owc10_xp::XlReadingOrder ReadingOrder/*[in]*/) = 0; // [1610743885]
  virtual HRESULT STDMETHODCALLTYPE get_Row(long* Row/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_RowHeight(VARIANT* RowHeight/*[out,retval]*/) = 0; // [1043]
  virtual HRESULT STDMETHODCALLTYPE set_RowHeight(double RowHeight/*[in]*/) = 0; // [1043]
  virtual HRESULT STDMETHODCALLTYPE get_Rows(Owc10_xp::_Range** Range/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Text(VARIANT* Text/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Top(VARIANT* Top/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_UseStandardHeight(VARIANT* pbool/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_UseStandardHeight(VARIANT_BOOL pbool/*[in]*/) = 0; // [1610743893]
  virtual HRESULT STDMETHODCALLTYPE get_UseStandardWidth(VARIANT* pbool/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_UseStandardWidth(VARIANT_BOOL pbool/*[in]*/) = 0; // [1610743895]
  virtual HRESULT STDMETHODCALLTYPE get_Value(VARIANT RangeValueDataType/*[in,opt]*/, 
                                              VARIANT* Value/*[out,retval]*/) = 0; // [1049]
  virtual HRESULT STDMETHODCALLTYPE set_Value(VARIANT RangeValueDataType/*[in,opt]*/, 
                                              VARIANT Value/*[in]*/) = 0; // [1049]
  virtual HRESULT STDMETHODCALLTYPE get_Value2(VARIANT* Value/*[out,retval]*/) = 0; // [1050]
  virtual HRESULT STDMETHODCALLTYPE set_Value2(VARIANT Value/*[in]*/) = 0; // [1050]
  virtual HRESULT STDMETHODCALLTYPE get_VerticalAlignment(VARIANT* VAlignment/*[out,retval]*/) = 0; // [1047]
  virtual HRESULT STDMETHODCALLTYPE set_VerticalAlignment(Owc10_xp::XlVAlign VAlignment/*[in]*/) = 0; // [1047]
  virtual HRESULT STDMETHODCALLTYPE get_Width(VARIANT* Width/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Worksheet(Owc10_xp::Worksheet** Sheet/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  int __fastcall CopyFromRecordset(LPUNKNOWN Data/*[in]*/, VARIANT MaxRows/*[in,opt]*/= TNoParam(), 
                                   VARIANT MaxColumns/*[in,opt]*/= TNoParam())
  {
    int pcrowRetrieved;
    OLECHECK(this->CopyFromRecordset(Data, MaxRows, MaxColumns, (int*)&pcrowRetrieved));
    return pcrowRetrieved;
  }

  Owc10_xp::_Range* __fastcall Find(VARIANT What/*[in]*/, VARIANT* After/*[in,opt]*/, 
                                    VARIANT* LookIn/*[in,opt]*/, VARIANT* LookAt/*[in,opt]*/, 
                                    VARIANT* SearchOrder/*[in,opt]*/, 
                                    Owc10_xp::XlSearchDirection SearchDirection/*[in,def,opt]*/, 
                                    VARIANT* MatchCase/*[in,opt]*/, VARIANT* MatchByte/*[in,opt]*/)
  {
    Owc10_xp::_Range* Range;
    OLECHECK(this->Find(What, After, LookIn, LookAt, SearchOrder, SearchDirection, MatchCase, 
                        MatchByte, (Owc10_xp::_Range**)&Range));
    return Range;
  }

  Owc10_xp::_Range* __fastcall FindNext(VARIANT* After/*[in,opt]*/= TNoParam())
  {
    Owc10_xp::_Range* Range;
    OLECHECK(this->FindNext(After, (Owc10_xp::_Range**)&Range));
    return Range;
  }

  Owc10_xp::_Range* __fastcall FindPrevious(VARIANT* After/*[in,opt]*/= TNoParam())
  {
    Owc10_xp::_Range* Range;
    OLECHECK(this->FindPrevious(After, (Owc10_xp::_Range**)&Range));
    return Range;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunk));
    return ppunk;
  }

  VARIANT __fastcall get__Default(VARIANT Row/*[in,opt]*/= TNoParam(), 
                                  VARIANT Column/*[in,opt]*/= TNoParam())
  {
    VARIANT var;
    OLECHECK(this->get__Default(Row, Column, (VARIANT*)&var));
    return var;
  }

  BSTR __fastcall get_Address(VARIANT* RowAbsolute/*[in,opt]*/, VARIANT* ColumnAbsolute/*[in,opt]*/, 
                              Owc10_xp::XlReferenceStyle ReferenceStyle/*[in,def,opt]*/, 
                              VARIANT* External/*[in,opt]*/, VARIANT* RelativeTo/*[in,opt]*/)
  {
    BSTR Address = 0;
    OLECHECK(this->get_Address(RowAbsolute, ColumnAbsolute, ReferenceStyle, External, RelativeTo, (BSTR*)&Address));
    return Address;
  }

  Owc10_xp::ISpreadsheet* __fastcall get_Application(void)
  {
    Owc10_xp::ISpreadsheet* ppApp;
    OLECHECK(this->get_Application((Owc10_xp::ISpreadsheet**)&ppApp));
    return ppApp;
  }

  Owc10_xp::Borders* __fastcall get_Borders(void)
  {
    Owc10_xp::Borders* Borders;
    OLECHECK(this->get_Borders((Owc10_xp::Borders**)&Borders));
    return Borders;
  }

  Owc10_xp::_Range* __fastcall get_Cells(void)
  {
    Owc10_xp::_Range* Range;
    OLECHECK(this->get_Cells((Owc10_xp::_Range**)&Range));
    return Range;
  }

  long __fastcall get_Column(void)
  {
    long Column;
    OLECHECK(this->get_Column((long*)&Column));
    return Column;
  }

  Owc10_xp::_Range* __fastcall get_Columns(void)
  {
    Owc10_xp::_Range* Range;
    OLECHECK(this->get_Columns((Owc10_xp::_Range**)&Range));
    return Range;
  }

  VARIANT __fastcall get_ColumnWidth(void)
  {
    VARIANT ColumnWidth;
    OLECHECK(this->get_ColumnWidth((VARIANT*)&ColumnWidth));
    return ColumnWidth;
  }

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  Owc10_xp::_Range* __fastcall get_CurrentArray(void)
  {
    Owc10_xp::_Range* CurrentRange;
    OLECHECK(this->get_CurrentArray((Owc10_xp::_Range**)&CurrentRange));
    return CurrentRange;
  }

  Owc10_xp::_Range* __fastcall get_CurrentRegion(void)
  {
    Owc10_xp::_Range* CurrentRegion;
    OLECHECK(this->get_CurrentRegion((Owc10_xp::_Range**)&CurrentRegion));
    return CurrentRegion;
  }

  Owc10_xp::_Range* __fastcall get_End(Owc10_xp::XlDirection Direction/*[in]*/)
  {
    Owc10_xp::_Range* Range;
    OLECHECK(this->get_End(Direction, (Owc10_xp::_Range**)&Range));
    return Range;
  }

  Owc10_xp::_Range* __fastcall get_EntireColumn(void)
  {
    Owc10_xp::_Range* Range;
    OLECHECK(this->get_EntireColumn((Owc10_xp::_Range**)&Range));
    return Range;
  }

  Owc10_xp::_Range* __fastcall get_EntireRow(void)
  {
    Owc10_xp::_Range* Range;
    OLECHECK(this->get_EntireRow((Owc10_xp::_Range**)&Range));
    return Range;
  }

  Owc10_xp::Font* __fastcall get_Font(void)
  {
    Owc10_xp::Font* Font;
    OLECHECK(this->get_Font((Owc10_xp::Font**)&Font));
    return Font;
  }

  VARIANT __fastcall get_Formula(void)
  {
    VARIANT Formula;
    OLECHECK(this->get_Formula((VARIANT*)&Formula));
    return Formula;
  }

  VARIANT __fastcall get_FormulaArray(void)
  {
    VARIANT FormulaArray;
    OLECHECK(this->get_FormulaArray((VARIANT*)&FormulaArray));
    return FormulaArray;
  }

  VARIANT __fastcall get_FormulaLocal(void)
  {
    VARIANT Formula;
    OLECHECK(this->get_FormulaLocal((VARIANT*)&Formula));
    return Formula;
  }

  VARIANT __fastcall get_HasArray(void)
  {
    VARIANT HasArray;
    OLECHECK(this->get_HasArray((VARIANT*)&HasArray));
    return HasArray;
  }

  VARIANT __fastcall get_HasFormula(void)
  {
    VARIANT HasFormula;
    OLECHECK(this->get_HasFormula((VARIANT*)&HasFormula));
    return HasFormula;
  }

  VARIANT __fastcall get_Height(void)
  {
    VARIANT Height;
    OLECHECK(this->get_Height((VARIANT*)&Height));
    return Height;
  }

  VARIANT_BOOL __fastcall get_Hidden(void)
  {
    VARIANT_BOOL Hidden;
    OLECHECK(this->get_Hidden((VARIANT_BOOL*)&Hidden));
    return Hidden;
  }

  VARIANT __fastcall get_HorizontalAlignment(void)
  {
    VARIANT HAlign;
    OLECHECK(this->get_HorizontalAlignment((VARIANT*)&HAlign));
    return HAlign;
  }

  BSTR __fastcall get_HTMLData(void)
  {
    BSTR HTMLData = 0;
    OLECHECK(this->get_HTMLData((BSTR*)&HTMLData));
    return HTMLData;
  }

  Owc10_xp::Hyperlink* __fastcall get_Hyperlink(void)
  {
    Owc10_xp::Hyperlink* Hyperlink;
    OLECHECK(this->get_Hyperlink((Owc10_xp::Hyperlink**)&Hyperlink));
    return Hyperlink;
  }

  Owc10_xp::Interior* __fastcall get_Interior(void)
  {
    Owc10_xp::Interior* Interior;
    OLECHECK(this->get_Interior((Owc10_xp::Interior**)&Interior));
    return Interior;
  }

  Owc10_xp::_Range* __fastcall get_Item(VARIANT RowIndex/*[in]*/, 
                                        VARIANT ColumnIndex/*[in,opt]*/= TNoParam())
  {
    Owc10_xp::_Range* Range;
    OLECHECK(this->get_Item(RowIndex, ColumnIndex, (Owc10_xp::_Range**)&Range));
    return Range;
  }

  VARIANT __fastcall get_Left(void)
  {
    VARIANT Left;
    OLECHECK(this->get_Left((VARIANT*)&Left));
    return Left;
  }

  VARIANT __fastcall get_Locked(void)
  {
    VARIANT Locked;
    OLECHECK(this->get_Locked((VARIANT*)&Locked));
    return Locked;
  }

  Owc10_xp::_Range* __fastcall get_MergeArea(void)
  {
    Owc10_xp::_Range* Range;
    OLECHECK(this->get_MergeArea((Owc10_xp::_Range**)&Range));
    return Range;
  }

  VARIANT __fastcall get_MergeCells(void)
  {
    VARIANT MergeCells;
    OLECHECK(this->get_MergeCells((VARIANT*)&MergeCells));
    return MergeCells;
  }

  Owc10_xp::Name* __fastcall get_Name(void)
  {
    Owc10_xp::Name* Name;
    OLECHECK(this->get_Name((Owc10_xp::Name**)&Name));
    return Name;
  }

  Owc10_xp::_Range* __fastcall get_Next(void)
  {
    Owc10_xp::_Range* Range;
    OLECHECK(this->get_Next((Owc10_xp::_Range**)&Range));
    return Range;
  }

  VARIANT __fastcall get_NumberFormat(void)
  {
    VARIANT NumberFormat;
    OLECHECK(this->get_NumberFormat((VARIANT*)&NumberFormat));
    return NumberFormat;
  }

  Owc10_xp::_Range* __fastcall get_Offset(VARIANT RowOffset/*[in,opt]*/= TNoParam(), 
                                          VARIANT ColumnOffset/*[in,opt]*/= TNoParam())
  {
    Owc10_xp::_Range* Range;
    OLECHECK(this->get_Offset(RowOffset, ColumnOffset, (Owc10_xp::_Range**)&Range));
    return Range;
  }

  Owc10_xp::Worksheet* __fastcall get_Parent(void)
  {
    Owc10_xp::Worksheet* Sheet;
    OLECHECK(this->get_Parent((Owc10_xp::Worksheet**)&Sheet));
    return Sheet;
  }

  VARIANT __fastcall get_PrefixCharacter(void)
  {
    VARIANT str;
    OLECHECK(this->get_PrefixCharacter((VARIANT*)&str));
    return str;
  }

  Owc10_xp::_Range* __fastcall get_Previous(void)
  {
    Owc10_xp::_Range* Range;
    OLECHECK(this->get_Previous((Owc10_xp::_Range**)&Range));
    return Range;
  }

  Owc10_xp::_Range* __fastcall get_Range(VARIANT Cell1/*[in]*/, 
                                         VARIANT Cell2/*[in,opt]*/= TNoParam())
  {
    Owc10_xp::_Range* Range;
    OLECHECK(this->get_Range(Cell1, Cell2, (Owc10_xp::_Range**)&Range));
    return Range;
  }

  VARIANT __fastcall get_ReadingOrder(void)
  {
    VARIANT ReadingOrder;
    OLECHECK(this->get_ReadingOrder((VARIANT*)&ReadingOrder));
    return ReadingOrder;
  }

  long __fastcall get_Row(void)
  {
    long Row;
    OLECHECK(this->get_Row((long*)&Row));
    return Row;
  }

  VARIANT __fastcall get_RowHeight(void)
  {
    VARIANT RowHeight;
    OLECHECK(this->get_RowHeight((VARIANT*)&RowHeight));
    return RowHeight;
  }

  Owc10_xp::_Range* __fastcall get_Rows(void)
  {
    Owc10_xp::_Range* Range;
    OLECHECK(this->get_Rows((Owc10_xp::_Range**)&Range));
    return Range;
  }

  VARIANT __fastcall get_Text(void)
  {
    VARIANT Text;
    OLECHECK(this->get_Text((VARIANT*)&Text));
    return Text;
  }

  VARIANT __fastcall get_Top(void)
  {
    VARIANT Top;
    OLECHECK(this->get_Top((VARIANT*)&Top));
    return Top;
  }

  VARIANT __fastcall get_UseStandardHeight(void)
  {
    VARIANT pbool;
    OLECHECK(this->get_UseStandardHeight((VARIANT*)&pbool));
    return pbool;
  }

  VARIANT __fastcall get_UseStandardWidth(void)
  {
    VARIANT pbool;
    OLECHECK(this->get_UseStandardWidth((VARIANT*)&pbool));
    return pbool;
  }

  VARIANT __fastcall get_Value(VARIANT RangeValueDataType/*[in,opt]*/= TNoParam())
  {
    VARIANT Value;
    OLECHECK(this->get_Value(RangeValueDataType, (VARIANT*)&Value));
    return Value;
  }

  VARIANT __fastcall get_Value2(void)
  {
    VARIANT Value;
    OLECHECK(this->get_Value2((VARIANT*)&Value));
    return Value;
  }

  VARIANT __fastcall get_VerticalAlignment(void)
  {
    VARIANT VAlignment;
    OLECHECK(this->get_VerticalAlignment((VARIANT*)&VAlignment));
    return VAlignment;
  }

  VARIANT __fastcall get_Width(void)
  {
    VARIANT Width;
    OLECHECK(this->get_Width((VARIANT*)&Width));
    return Width;
  }

  Owc10_xp::Worksheet* __fastcall get_Worksheet(void)
  {
    Owc10_xp::Worksheet* Sheet;
    OLECHECK(this->get_Worksheet((Owc10_xp::Worksheet**)&Sheet));
    return Sheet;
  }


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   Owc10_xp::Borders* Borders = {read = get_Borders};
  __property   Owc10_xp::_Range* Cells = {read = get_Cells};
  __property   long            Column = {read = get_Column};
  __property   Owc10_xp::_Range* Columns = {read = get_Columns};
  __property   double          ColumnWidth = {write = set_ColumnWidth};
  __property   long            Count = {read = get_Count};
  __property   Owc10_xp::_Range* CurrentArray = {read = get_CurrentArray};
  __property   Owc10_xp::_Range* CurrentRegion = {read = get_CurrentRegion};
  __property   Owc10_xp::_Range* EntireColumn = {read = get_EntireColumn};
  __property   Owc10_xp::_Range* EntireRow = {read = get_EntireRow};
  __property   Owc10_xp::Font* Font = {read = get_Font};
  __property   VARIANT_BOOL    Hidden = {read = get_Hidden, write = set_Hidden};
  __property   Owc10_xp::XlHAlign HorizontalAlignment = {write = set_HorizontalAlignment};
  __property   BSTR            HTMLData = {read = get_HTMLData};
  __property   Owc10_xp::Hyperlink* Hyperlink = {read = get_Hyperlink};
  __property   Owc10_xp::Interior* Interior = {read = get_Interior};
  __property   VARIANT_BOOL    Locked = {write = set_Locked};
  __property   Owc10_xp::_Range* MergeArea = {read = get_MergeArea};
  __property   VARIANT_BOOL    MergeCells = {write = set_MergeCells};
  __property   Owc10_xp::Name* Name = {read = get_Name};
  __property   Owc10_xp::_Range* Next = {read = get_Next};
  __property   BSTR            NumberFormat = {write = set_NumberFormat};
  __property   Owc10_xp::Worksheet* Parent = {read = get_Parent};
  __property   Owc10_xp::_Range* Previous = {read = get_Previous};
  __property   Owc10_xp::XlReadingOrder ReadingOrder = {write = set_ReadingOrder};
  __property   long            Row = {read = get_Row};
  __property   double          RowHeight = {write = set_RowHeight};
  __property   Owc10_xp::_Range* Rows = {read = get_Rows};
  __property   VARIANT_BOOL    UseStandardHeight = {write = set_UseStandardHeight};
  __property   VARIANT_BOOL    UseStandardWidth = {write = set_UseStandardWidth};
  __property   Owc10_xp::XlVAlign VerticalAlignment = {write = set_VerticalAlignment};
  __property   Owc10_xp::Worksheet* Worksheet = {read = get_Worksheet};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ISpreadsheet
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A79-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface ISpreadsheet  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE AddIn(LPDISPATCH AddIn/*[in]*/) = 0; // [1710]
  virtual HRESULT STDMETHODCALLTYPE BeginUndo(void) = 0; // [1711]
  virtual HRESULT STDMETHODCALLTYPE Calculate(void) = 0; // [1712]
  virtual HRESULT STDMETHODCALLTYPE CalculateFull(void) = 0; // [1713]
  virtual HRESULT STDMETHODCALLTYPE EndUndo(VARIANT_BOOL Cancel/*[in,def,opt]*/) = 0; // [1714]
  virtual HRESULT STDMETHODCALLTYPE _Evaluate(VARIANT Expression/*[in]*/, 
                                              VARIANT* Result/*[out,retval]*/) = 0; // [-5]
  virtual HRESULT STDMETHODCALLTYPE Evaluate(VARIANT Expression/*[in]*/, 
                                             VARIANT* Result/*[out,retval]*/) = 0; // [1715]
  virtual HRESULT STDMETHODCALLTYPE Export(BSTR Filename/*[in,def,opt]*/, 
                                           Owc10_xp::SheetExportActionEnum Action/*[in,def,opt]*/, 
                                           Owc10_xp::SheetExportFormat Format/*[in,def,opt]*/) = 0; // [1716]
  virtual HRESULT STDMETHODCALLTYPE LocateDataSource(void) = 0; // [1717]
  virtual HRESULT STDMETHODCALLTYPE msDataSourceObject(BSTR bstr/*[in]*/, 
                                                       LPUNKNOWN* Object/*[out,retval]*/) = 0; // [-3900]
  virtual HRESULT STDMETHODCALLTYPE RectIntersect(Owc10_xp::_Range* Range1/*[in]*/, 
                                                  Owc10_xp::_Range* Range2/*[in]*/, 
                                                  Owc10_xp::_Range** RangeOut/*[out,retval]*/) = 0; // [1718]
  virtual HRESULT STDMETHODCALLTYPE RectUnion(Owc10_xp::_Range* Range1/*[in]*/, 
                                              Owc10_xp::_Range* Range2/*[in]*/, 
                                              Owc10_xp::_Range** RangeOut/*[out,retval]*/) = 0; // [1719]
  virtual HRESULT STDMETHODCALLTYPE Refresh(void) = 0; // [1720]
  virtual HRESULT STDMETHODCALLTYPE Repaint(void) = 0; // [1721]
  virtual HRESULT STDMETHODCALLTYPE ShowAbout(void) = 0; // [1722]
  virtual HRESULT STDMETHODCALLTYPE ShowContextMenu(long x/*[in]*/, long y/*[in]*/, 
                                                    VARIANT Menu/*[in]*/) = 0; // [1723]
  virtual HRESULT STDMETHODCALLTYPE ShowHelp(long Topic/*[in]*/) = 0; // [1724]
  virtual HRESULT STDMETHODCALLTYPE Undo(void) = 0; // [1725]
  virtual HRESULT STDMETHODCALLTYPE UpdatePropertyToolbox(void) = 0; // [1726]
  virtual HRESULT STDMETHODCALLTYPE get_ActiveCell(Owc10_xp::_Range** Range/*[out,retval]*/) = 0; // [1101]
  virtual HRESULT STDMETHODCALLTYPE get_ActiveSheet(Owc10_xp::Worksheet** Sheet/*[out,retval]*/) = 0; // [1102]
  virtual HRESULT STDMETHODCALLTYPE get_ActiveWindow(Owc10_xp::WINDOW** Window/*[out,retval]*/) = 0; // [1103]
  virtual HRESULT STDMETHODCALLTYPE get_ActiveWorkbook(Owc10_xp::Workbook** Workbook/*[out,retval]*/) = 0; // [1104]
  virtual HRESULT STDMETHODCALLTYPE get_AllowPropertyToolbox(VARIANT_BOOL* AllowPropertyToolbox/*[out,retval]*/) = 0; // [1008]
  virtual HRESULT STDMETHODCALLTYPE set_AllowPropertyToolbox(VARIANT_BOOL AllowPropertyToolbox/*[in]*/) = 0; // [1008]
  virtual HRESULT STDMETHODCALLTYPE get_Application(Owc10_xp::ISpreadsheet** ppApp/*[out,retval]*/) = 0; // [1105]
  virtual HRESULT STDMETHODCALLTYPE get_AutoFit(VARIANT_BOOL* AutoFit/*[out,retval]*/) = 0; // [1009]
  virtual HRESULT STDMETHODCALLTYPE set_AutoFit(VARIANT_BOOL AutoFit/*[in]*/) = 0; // [1009]
  virtual HRESULT STDMETHODCALLTYPE get_Build(long* BuildNumber/*[out,retval]*/) = 0; // [1106]
  virtual HRESULT STDMETHODCALLTYPE get_BuildNumber(BSTR* BuildNumber/*[out,retval]*/) = 0; // [1107]
  virtual HRESULT STDMETHODCALLTYPE get_Calculation(Owc10_xp::XlCalculation* calc/*[out,retval]*/) = 0; // [1025]
  virtual HRESULT STDMETHODCALLTYPE set_Calculation(Owc10_xp::XlCalculation calc/*[in]*/) = 0; // [1025]
  virtual HRESULT STDMETHODCALLTYPE get_CalculationVersion(long* ver/*[out,retval]*/) = 0; // [1108]
  virtual HRESULT STDMETHODCALLTYPE get_CanUndo(VARIANT_BOOL* CanUndo/*[out,retval]*/) = 0; // [1109]
  virtual HRESULT STDMETHODCALLTYPE get_Caption(BSTR* Caption/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Caption(BSTR Caption/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Cells(Owc10_xp::_Range** Range/*[out,retval]*/) = 0; // [1110]
  virtual HRESULT STDMETHODCALLTYPE get_Columns(Owc10_xp::_Range** Range/*[out,retval]*/) = 0; // [1111]
  virtual HRESULT STDMETHODCALLTYPE get_Commands(Owc10_xp::OCCommands** Commands/*[out,retval]*/) = 0; // [1112]
  virtual HRESULT STDMETHODCALLTYPE get_Constants(LPDISPATCH* Constants/*[out,retval]*/) = 0; // [1113]
  virtual HRESULT STDMETHODCALLTYPE get_CSVData(BSTR* Data/*[out,retval]*/) = 0; // [1002]
  virtual HRESULT STDMETHODCALLTYPE set_CSVData(BSTR Data/*[in]*/) = 0; // [1002]
  virtual HRESULT STDMETHODCALLTYPE get_CSVURL(BSTR* URL/*[out,retval]*/) = 0; // [1003]
  virtual HRESULT STDMETHODCALLTYPE set_CSVURL(BSTR URL/*[in]*/) = 0; // [1003]
  virtual HRESULT STDMETHODCALLTYPE get_DataMember(Msdatasrc_xp::DataMember* DataMember/*[out,retval]*/) = 0; // [1114]
  virtual HRESULT STDMETHODCALLTYPE set_DataMember(Msdatasrc_xp::DataMember DataMember/*[in]*/) = 0; // [1114]
  virtual HRESULT STDMETHODCALLTYPE get_DataSource(Msdatasrc_xp::DataSource** DataSource/*[out,retval]*/) = 0; // [1115]
  virtual HRESULT STDMETHODCALLTYPE set_DataSource(Msdatasrc_xp::DataSource* DataSource/*[in]*/) = 0; // [1115]
  virtual HRESULT STDMETHODCALLTYPE _set_DataSource(Msdatasrc_xp::DataSource* DataSource/*[in]*/) = 0; // [1115]
  virtual HRESULT STDMETHODCALLTYPE get_DataType(BSTR* DataType/*[out,retval]*/) = 0; // [1001]
  virtual HRESULT STDMETHODCALLTYPE set_DataType(BSTR DataType/*[in]*/) = 0; // [1001]
  virtual HRESULT STDMETHODCALLTYPE get_DesignMode(VARIANT_BOOL* DesignMode/*[out,retval]*/) = 0; // [1116]
  virtual HRESULT STDMETHODCALLTYPE get_Dirty(VARIANT_BOOL* Dirty/*[out,retval]*/) = 0; // [1117]
  virtual HRESULT STDMETHODCALLTYPE set_Dirty(VARIANT_BOOL Dirty/*[in]*/) = 0; // [1117]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayBranding(VARIANT_BOOL* DisplayBranding/*[out,retval]*/) = 0; // [1118]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayBranding(VARIANT_BOOL DisplayBranding/*[in]*/) = 0; // [1118]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayColumnHeadings(VARIANT_BOOL* pf/*[out,retval]*/) = 0; // [1013]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayColumnHeadings(VARIANT_BOOL pf/*[in]*/) = 0; // [1013]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayDesignTimeUI(VARIANT_BOOL* DisplayDesignTimeUI/*[out,retval]*/) = 0; // [1119]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayDesignTimeUI(VARIANT_BOOL DisplayDesignTimeUI/*[in]*/) = 0; // [1119]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayGridlines(VARIANT_BOOL* pf/*[out,retval]*/) = 0; // [1015]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayGridlines(VARIANT_BOOL pf/*[in]*/) = 0; // [1015]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayHorizontalScrollBar(VARIANT_BOOL* pf/*[out,retval]*/) = 0; // [1017]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayHorizontalScrollBar(VARIANT_BOOL pf/*[in]*/) = 0; // [1017]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayOfficeLogo(VARIANT_BOOL* DisplayOfficeLogo/*[out,retval]*/) = 0; // [1018]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayOfficeLogo(VARIANT_BOOL DisplayOfficeLogo/*[in]*/) = 0; // [1018]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayPropertyToolbox(VARIANT_BOOL* pf/*[out,retval]*/) = 0; // [4002]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayPropertyToolbox(VARIANT_BOOL pf/*[in]*/) = 0; // [4002]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayRowHeadings(VARIANT_BOOL* pf/*[out,retval]*/) = 0; // [1019]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayRowHeadings(VARIANT_BOOL pf/*[in]*/) = 0; // [1019]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayTitleBar(VARIANT_BOOL* DisplayTitleBar/*[out,retval]*/) = 0; // [1022]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayTitleBar(VARIANT_BOOL DisplayTitleBar/*[in]*/) = 0; // [1022]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayToolbar(VARIANT_BOOL* DisplayToolbar/*[out,retval]*/) = 0; // [1023]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayToolbar(VARIANT_BOOL DisplayToolbar/*[in]*/) = 0; // [1023]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayVerticalScrollBar(VARIANT_BOOL* pf/*[out,retval]*/) = 0; // [1021]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayVerticalScrollBar(VARIANT_BOOL pf/*[in]*/) = 0; // [1021]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayWorkbookTabs(VARIANT_BOOL* pf/*[out,retval]*/) = 0; // [1024]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayWorkbookTabs(VARIANT_BOOL pf/*[in]*/) = 0; // [1024]
  virtual HRESULT STDMETHODCALLTYPE get_EnableEvents(VARIANT_BOOL* EnableEvents/*[out,retval]*/) = 0; // [1026]
  virtual HRESULT STDMETHODCALLTYPE set_EnableEvents(VARIANT_BOOL EnableEvents/*[in]*/) = 0; // [1026]
  virtual HRESULT STDMETHODCALLTYPE get_EnableUndo(VARIANT_BOOL* EnableUndo/*[out,retval]*/) = 0; // [1029]
  virtual HRESULT STDMETHODCALLTYPE set_EnableUndo(VARIANT_BOOL EnableUndo/*[in]*/) = 0; // [1029]
  virtual HRESULT STDMETHODCALLTYPE get_HTMLData(BSTR* Data/*[out,retval]*/) = 0; // [1004]
  virtual HRESULT STDMETHODCALLTYPE set_HTMLData(BSTR Data/*[in]*/) = 0; // [1004]
  virtual HRESULT STDMETHODCALLTYPE get_HTMLURL(BSTR* URL/*[out,retval]*/) = 0; // [1005]
  virtual HRESULT STDMETHODCALLTYPE set_HTMLURL(BSTR URL/*[in]*/) = 0; // [1005]
  virtual HRESULT STDMETHODCALLTYPE get_InstanceID(unsigned_long* InstanceID/*[out,retval]*/) = 0; // [1033]
  virtual HRESULT STDMETHODCALLTYPE get_International(VARIANT Index/*[in]*/, 
                                                      VARIANT* info/*[out,retval]*/) = 0; // [1120]
  virtual HRESULT STDMETHODCALLTYPE get_LanguageSettings(Owc10_xp::OWCLanguageSettings** langset/*[out,retval]*/) = 0; // [1121]
  virtual HRESULT STDMETHODCALLTYPE get_MaxHeight(VARIANT* MaxHeight/*[out,retval]*/) = 0; // [1036]
  virtual HRESULT STDMETHODCALLTYPE set_MaxHeight(VARIANT MaxHeight/*[in]*/) = 0; // [1036]
  virtual HRESULT STDMETHODCALLTYPE get_MaxWidth(VARIANT* MaxWidth/*[out,retval]*/) = 0; // [1038]
  virtual HRESULT STDMETHODCALLTYPE set_MaxWidth(VARIANT MaxWidth/*[in]*/) = 0; // [1038]
  virtual HRESULT STDMETHODCALLTYPE get_MajorVersion(long* MajorVersion/*[out,retval]*/) = 0; // [1122]
  virtual HRESULT STDMETHODCALLTYPE get_MinorVersion(BSTR* MinorVersion/*[out,retval]*/) = 0; // [1123]
  virtual HRESULT STDMETHODCALLTYPE get_MoveAfterReturn(VARIANT_BOOL* MoveAfterReturn/*[out,retval]*/) = 0; // [1039]
  virtual HRESULT STDMETHODCALLTYPE set_MoveAfterReturn(VARIANT_BOOL MoveAfterReturn/*[in]*/) = 0; // [1039]
  virtual HRESULT STDMETHODCALLTYPE get_MoveAfterReturnDirection(Owc10_xp::XlDirection* MoveAfterReturnDirection/*[out,retval]*/) = 0; // [1040]
  virtual HRESULT STDMETHODCALLTYPE set_MoveAfterReturnDirection(Owc10_xp::XlDirection MoveAfterReturnDirection/*[in]*/) = 0; // [1040]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [1124]
  virtual HRESULT STDMETHODCALLTYPE get_Names(Owc10_xp::Names** Names/*[out,retval]*/) = 0; // [1125]
  virtual HRESULT STDMETHODCALLTYPE get_Range(VARIANT Cell1/*[in]*/, VARIANT Cell2/*[in,opt]*/, 
                                              Owc10_xp::_Range** Range/*[out,retval]*/) = 0; // [1126]
  virtual HRESULT STDMETHODCALLTYPE get_RevisionNumber(BSTR* RevisionNumber/*[out,retval]*/) = 0; // [1127]
  virtual HRESULT STDMETHODCALLTYPE get_RightToLeft(VARIANT_BOOL* RightToLeft/*[out,retval]*/) = 0; // [1042]
  virtual HRESULT STDMETHODCALLTYPE set_RightToLeft(VARIANT_BOOL RightToLeft/*[in]*/) = 0; // [1042]
  virtual HRESULT STDMETHODCALLTYPE get_Rows(Owc10_xp::_Range** Range/*[out,retval]*/) = 0; // [1128]
  virtual HRESULT STDMETHODCALLTYPE get_ScreenUpdating(VARIANT_BOOL* ScreenUpdating/*[out,retval]*/) = 0; // [1044]
  virtual HRESULT STDMETHODCALLTYPE set_ScreenUpdating(VARIANT_BOOL ScreenUpdating/*[in]*/) = 0; // [1044]
  virtual HRESULT STDMETHODCALLTYPE get_Selection(Owc10_xp::_Range** Range/*[out,retval]*/) = 0; // [1045]
  virtual HRESULT STDMETHODCALLTYPE get_Sheets(Owc10_xp::Sheets** Sheets/*[out,retval]*/) = 0; // [1129]
  virtual HRESULT STDMETHODCALLTYPE get_TitleBar(Owc10_xp::TitleBar** TitleBar/*[out,retval]*/) = 0; // [1130]
  virtual HRESULT STDMETHODCALLTYPE get_Toolbar(Mscomctllib_xp::IToolbar** Toolbar/*[out,retval]*/) = 0; // [1131]
  virtual HRESULT STDMETHODCALLTYPE get_Value(BSTR* Name/*[out,retval]*/) = 0; // [1132]
  virtual HRESULT STDMETHODCALLTYPE get_Version(BSTR* Version/*[out,retval]*/) = 0; // [1133]
  virtual HRESULT STDMETHODCALLTYPE get_ViewableRange(BSTR* ViewableRange/*[out,retval]*/) = 0; // [1048]
  virtual HRESULT STDMETHODCALLTYPE set_ViewableRange(BSTR ViewableRange/*[in]*/) = 0; // [1048]
  virtual HRESULT STDMETHODCALLTYPE get_ViewOnlyMode(VARIANT_BOOL* ViewOnlyMode/*[out,retval]*/) = 0; // [1134]
  virtual HRESULT STDMETHODCALLTYPE get_Windows(Owc10_xp::Windows** Windows/*[out,retval]*/) = 0; // [1135]
  virtual HRESULT STDMETHODCALLTYPE get_Workbooks(Owc10_xp::Workbooks** Workbooks/*[out,retval]*/) = 0; // [1136]
  virtual HRESULT STDMETHODCALLTYPE get_Worksheets(Owc10_xp::Worksheets** Worksheets/*[out,retval]*/) = 0; // [1137]
  virtual HRESULT STDMETHODCALLTYPE get_XMLData(BSTR* Data/*[out,retval]*/) = 0; // [1006]
  virtual HRESULT STDMETHODCALLTYPE set_XMLData(BSTR Data/*[in]*/) = 0; // [1006]
  virtual HRESULT STDMETHODCALLTYPE get_XMLURL(BSTR* URL/*[out,retval]*/) = 0; // [1007]
  virtual HRESULT STDMETHODCALLTYPE set_XMLURL(BSTR URL/*[in]*/) = 0; // [1007]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT __fastcall _Evaluate(VARIANT Expression/*[in]*/)
  {
    VARIANT Result;
    OLECHECK(this->_Evaluate(Expression, (VARIANT*)&Result));
    return Result;
  }

  VARIANT __fastcall Evaluate(VARIANT Expression/*[in]*/)
  {
    VARIANT Result;
    OLECHECK(this->Evaluate(Expression, (VARIANT*)&Result));
    return Result;
  }

  LPUNKNOWN __fastcall msDataSourceObject(BSTR bstr/*[in]*/)
  {
    LPUNKNOWN Object;
    OLECHECK(this->msDataSourceObject(bstr, (LPUNKNOWN*)&Object));
    return Object;
  }

  Owc10_xp::_Range* __fastcall RectIntersect(Owc10_xp::_Range* Range1/*[in]*/, 
                                             Owc10_xp::_Range* Range2/*[in]*/)
  {
    Owc10_xp::_Range* RangeOut;
    OLECHECK(this->RectIntersect(Range1, Range2, (Owc10_xp::_Range**)&RangeOut));
    return RangeOut;
  }

  Owc10_xp::_Range* __fastcall RectUnion(Owc10_xp::_Range* Range1/*[in]*/, 
                                         Owc10_xp::_Range* Range2/*[in]*/)
  {
    Owc10_xp::_Range* RangeOut;
    OLECHECK(this->RectUnion(Range1, Range2, (Owc10_xp::_Range**)&RangeOut));
    return RangeOut;
  }

  Owc10_xp::_Range* __fastcall get_ActiveCell(void)
  {
    Owc10_xp::_Range* Range;
    OLECHECK(this->get_ActiveCell((Owc10_xp::_Range**)&Range));
    return Range;
  }

  Owc10_xp::Worksheet* __fastcall get_ActiveSheet(void)
  {
    Owc10_xp::Worksheet* Sheet;
    OLECHECK(this->get_ActiveSheet((Owc10_xp::Worksheet**)&Sheet));
    return Sheet;
  }

  Owc10_xp::WINDOW* __fastcall get_ActiveWindow(void)
  {
    Owc10_xp::WINDOW* Window;
    OLECHECK(this->get_ActiveWindow((Owc10_xp::WINDOW**)&Window));
    return Window;
  }

  Owc10_xp::Workbook* __fastcall get_ActiveWorkbook(void)
  {
    Owc10_xp::Workbook* Workbook;
    OLECHECK(this->get_ActiveWorkbook((Owc10_xp::Workbook**)&Workbook));
    return Workbook;
  }

  VARIANT_BOOL __fastcall get_AllowPropertyToolbox(void)
  {
    VARIANT_BOOL AllowPropertyToolbox;
    OLECHECK(this->get_AllowPropertyToolbox((VARIANT_BOOL*)&AllowPropertyToolbox));
    return AllowPropertyToolbox;
  }

  Owc10_xp::ISpreadsheet* __fastcall get_Application(void)
  {
    Owc10_xp::ISpreadsheet* ppApp;
    OLECHECK(this->get_Application((Owc10_xp::ISpreadsheet**)&ppApp));
    return ppApp;
  }

  VARIANT_BOOL __fastcall get_AutoFit(void)
  {
    VARIANT_BOOL AutoFit;
    OLECHECK(this->get_AutoFit((VARIANT_BOOL*)&AutoFit));
    return AutoFit;
  }

  long __fastcall get_Build(void)
  {
    long BuildNumber;
    OLECHECK(this->get_Build((long*)&BuildNumber));
    return BuildNumber;
  }

  BSTR __fastcall get_BuildNumber(void)
  {
    BSTR BuildNumber = 0;
    OLECHECK(this->get_BuildNumber((BSTR*)&BuildNumber));
    return BuildNumber;
  }

  Owc10_xp::XlCalculation __fastcall get_Calculation(void)
  {
    Owc10_xp::XlCalculation calc;
    OLECHECK(this->get_Calculation((Owc10_xp::XlCalculation*)&calc));
    return calc;
  }

  long __fastcall get_CalculationVersion(void)
  {
    long ver;
    OLECHECK(this->get_CalculationVersion((long*)&ver));
    return ver;
  }

  VARIANT_BOOL __fastcall get_CanUndo(void)
  {
    VARIANT_BOOL CanUndo;
    OLECHECK(this->get_CanUndo((VARIANT_BOOL*)&CanUndo));
    return CanUndo;
  }

  BSTR __fastcall get_Caption(void)
  {
    BSTR Caption = 0;
    OLECHECK(this->get_Caption((BSTR*)&Caption));
    return Caption;
  }

  Owc10_xp::_Range* __fastcall get_Cells(void)
  {
    Owc10_xp::_Range* Range;
    OLECHECK(this->get_Cells((Owc10_xp::_Range**)&Range));
    return Range;
  }

  Owc10_xp::_Range* __fastcall get_Columns(void)
  {
    Owc10_xp::_Range* Range;
    OLECHECK(this->get_Columns((Owc10_xp::_Range**)&Range));
    return Range;
  }

  Owc10_xp::OCCommands* __fastcall get_Commands(void)
  {
    Owc10_xp::OCCommands* Commands;
    OLECHECK(this->get_Commands((Owc10_xp::OCCommands**)&Commands));
    return Commands;
  }

  LPDISPATCH __fastcall get_Constants(void)
  {
    LPDISPATCH Constants;
    OLECHECK(this->get_Constants((LPDISPATCH*)&Constants));
    return Constants;
  }

  BSTR __fastcall get_CSVData(void)
  {
    BSTR Data = 0;
    OLECHECK(this->get_CSVData((BSTR*)&Data));
    return Data;
  }

  BSTR __fastcall get_CSVURL(void)
  {
    BSTR URL = 0;
    OLECHECK(this->get_CSVURL((BSTR*)&URL));
    return URL;
  }

  Msdatasrc_xp::DataMember __fastcall get_DataMember(void)
  {
    Msdatasrc_xp::DataMember DataMember;
    OLECHECK(this->get_DataMember((Msdatasrc_xp::DataMember*)&DataMember));
    return DataMember;
  }

  Msdatasrc_xp::DataSource* __fastcall get_DataSource(void)
  {
    Msdatasrc_xp::DataSource* DataSource;
    OLECHECK(this->get_DataSource((Msdatasrc_xp::DataSource**)&DataSource));
    return DataSource;
  }

  BSTR __fastcall get_DataType(void)
  {
    BSTR DataType = 0;
    OLECHECK(this->get_DataType((BSTR*)&DataType));
    return DataType;
  }

  VARIANT_BOOL __fastcall get_DesignMode(void)
  {
    VARIANT_BOOL DesignMode;
    OLECHECK(this->get_DesignMode((VARIANT_BOOL*)&DesignMode));
    return DesignMode;
  }

  VARIANT_BOOL __fastcall get_Dirty(void)
  {
    VARIANT_BOOL Dirty;
    OLECHECK(this->get_Dirty((VARIANT_BOOL*)&Dirty));
    return Dirty;
  }

  VARIANT_BOOL __fastcall get_DisplayBranding(void)
  {
    VARIANT_BOOL DisplayBranding;
    OLECHECK(this->get_DisplayBranding((VARIANT_BOOL*)&DisplayBranding));
    return DisplayBranding;
  }

  VARIANT_BOOL __fastcall get_DisplayColumnHeadings(void)
  {
    VARIANT_BOOL pf;
    OLECHECK(this->get_DisplayColumnHeadings((VARIANT_BOOL*)&pf));
    return pf;
  }

  VARIANT_BOOL __fastcall get_DisplayDesignTimeUI(void)
  {
    VARIANT_BOOL DisplayDesignTimeUI;
    OLECHECK(this->get_DisplayDesignTimeUI((VARIANT_BOOL*)&DisplayDesignTimeUI));
    return DisplayDesignTimeUI;
  }

  VARIANT_BOOL __fastcall get_DisplayGridlines(void)
  {
    VARIANT_BOOL pf;
    OLECHECK(this->get_DisplayGridlines((VARIANT_BOOL*)&pf));
    return pf;
  }

  VARIANT_BOOL __fastcall get_DisplayHorizontalScrollBar(void)
  {
    VARIANT_BOOL pf;
    OLECHECK(this->get_DisplayHorizontalScrollBar((VARIANT_BOOL*)&pf));
    return pf;
  }

  VARIANT_BOOL __fastcall get_DisplayOfficeLogo(void)
  {
    VARIANT_BOOL DisplayOfficeLogo;
    OLECHECK(this->get_DisplayOfficeLogo((VARIANT_BOOL*)&DisplayOfficeLogo));
    return DisplayOfficeLogo;
  }

  VARIANT_BOOL __fastcall get_DisplayPropertyToolbox(void)
  {
    VARIANT_BOOL pf;
    OLECHECK(this->get_DisplayPropertyToolbox((VARIANT_BOOL*)&pf));
    return pf;
  }

  VARIANT_BOOL __fastcall get_DisplayRowHeadings(void)
  {
    VARIANT_BOOL pf;
    OLECHECK(this->get_DisplayRowHeadings((VARIANT_BOOL*)&pf));
    return pf;
  }

  VARIANT_BOOL __fastcall get_DisplayTitleBar(void)
  {
    VARIANT_BOOL DisplayTitleBar;
    OLECHECK(this->get_DisplayTitleBar((VARIANT_BOOL*)&DisplayTitleBar));
    return DisplayTitleBar;
  }

  VARIANT_BOOL __fastcall get_DisplayToolbar(void)
  {
    VARIANT_BOOL DisplayToolbar;
    OLECHECK(this->get_DisplayToolbar((VARIANT_BOOL*)&DisplayToolbar));
    return DisplayToolbar;
  }

  VARIANT_BOOL __fastcall get_DisplayVerticalScrollBar(void)
  {
    VARIANT_BOOL pf;
    OLECHECK(this->get_DisplayVerticalScrollBar((VARIANT_BOOL*)&pf));
    return pf;
  }

  VARIANT_BOOL __fastcall get_DisplayWorkbookTabs(void)
  {
    VARIANT_BOOL pf;
    OLECHECK(this->get_DisplayWorkbookTabs((VARIANT_BOOL*)&pf));
    return pf;
  }

  VARIANT_BOOL __fastcall get_EnableEvents(void)
  {
    VARIANT_BOOL EnableEvents;
    OLECHECK(this->get_EnableEvents((VARIANT_BOOL*)&EnableEvents));
    return EnableEvents;
  }

  VARIANT_BOOL __fastcall get_EnableUndo(void)
  {
    VARIANT_BOOL EnableUndo;
    OLECHECK(this->get_EnableUndo((VARIANT_BOOL*)&EnableUndo));
    return EnableUndo;
  }

  BSTR __fastcall get_HTMLData(void)
  {
    BSTR Data = 0;
    OLECHECK(this->get_HTMLData((BSTR*)&Data));
    return Data;
  }

  BSTR __fastcall get_HTMLURL(void)
  {
    BSTR URL = 0;
    OLECHECK(this->get_HTMLURL((BSTR*)&URL));
    return URL;
  }

  unsigned_long __fastcall get_InstanceID(void)
  {
    unsigned_long InstanceID;
    OLECHECK(this->get_InstanceID((unsigned_long*)&InstanceID));
    return InstanceID;
  }

  VARIANT __fastcall get_International(VARIANT Index/*[in]*/)
  {
    VARIANT info;
    OLECHECK(this->get_International(Index, (VARIANT*)&info));
    return info;
  }

  Owc10_xp::OWCLanguageSettings* __fastcall get_LanguageSettings(void)
  {
    Owc10_xp::OWCLanguageSettings* langset;
    OLECHECK(this->get_LanguageSettings((Owc10_xp::OWCLanguageSettings**)&langset));
    return langset;
  }

  VARIANT __fastcall get_MaxHeight(void)
  {
    VARIANT MaxHeight;
    OLECHECK(this->get_MaxHeight((VARIANT*)&MaxHeight));
    return MaxHeight;
  }

  VARIANT __fastcall get_MaxWidth(void)
  {
    VARIANT MaxWidth;
    OLECHECK(this->get_MaxWidth((VARIANT*)&MaxWidth));
    return MaxWidth;
  }

  long __fastcall get_MajorVersion(void)
  {
    long MajorVersion;
    OLECHECK(this->get_MajorVersion((long*)&MajorVersion));
    return MajorVersion;
  }

  BSTR __fastcall get_MinorVersion(void)
  {
    BSTR MinorVersion = 0;
    OLECHECK(this->get_MinorVersion((BSTR*)&MinorVersion));
    return MinorVersion;
  }

  VARIANT_BOOL __fastcall get_MoveAfterReturn(void)
  {
    VARIANT_BOOL MoveAfterReturn;
    OLECHECK(this->get_MoveAfterReturn((VARIANT_BOOL*)&MoveAfterReturn));
    return MoveAfterReturn;
  }

  Owc10_xp::XlDirection __fastcall get_MoveAfterReturnDirection(void)
  {
    Owc10_xp::XlDirection MoveAfterReturnDirection;
    OLECHECK(this->get_MoveAfterReturnDirection((Owc10_xp::XlDirection*)&MoveAfterReturnDirection));
    return MoveAfterReturnDirection;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  Owc10_xp::Names* __fastcall get_Names(void)
  {
    Owc10_xp::Names* Names;
    OLECHECK(this->get_Names((Owc10_xp::Names**)&Names));
    return Names;
  }

  Owc10_xp::_Range* __fastcall get_Range(VARIANT Cell1/*[in]*/, 
                                         VARIANT Cell2/*[in,opt]*/= TNoParam())
  {
    Owc10_xp::_Range* Range;
    OLECHECK(this->get_Range(Cell1, Cell2, (Owc10_xp::_Range**)&Range));
    return Range;
  }

  BSTR __fastcall get_RevisionNumber(void)
  {
    BSTR RevisionNumber = 0;
    OLECHECK(this->get_RevisionNumber((BSTR*)&RevisionNumber));
    return RevisionNumber;
  }

  VARIANT_BOOL __fastcall get_RightToLeft(void)
  {
    VARIANT_BOOL RightToLeft;
    OLECHECK(this->get_RightToLeft((VARIANT_BOOL*)&RightToLeft));
    return RightToLeft;
  }

  Owc10_xp::_Range* __fastcall get_Rows(void)
  {
    Owc10_xp::_Range* Range;
    OLECHECK(this->get_Rows((Owc10_xp::_Range**)&Range));
    return Range;
  }

  VARIANT_BOOL __fastcall get_ScreenUpdating(void)
  {
    VARIANT_BOOL ScreenUpdating;
    OLECHECK(this->get_ScreenUpdating((VARIANT_BOOL*)&ScreenUpdating));
    return ScreenUpdating;
  }

  Owc10_xp::_Range* __fastcall get_Selection(void)
  {
    Owc10_xp::_Range* Range;
    OLECHECK(this->get_Selection((Owc10_xp::_Range**)&Range));
    return Range;
  }

  Owc10_xp::Sheets* __fastcall get_Sheets(void)
  {
    Owc10_xp::Sheets* Sheets;
    OLECHECK(this->get_Sheets((Owc10_xp::Sheets**)&Sheets));
    return Sheets;
  }

  Owc10_xp::TitleBar* __fastcall get_TitleBar(void)
  {
    Owc10_xp::TitleBar* TitleBar;
    OLECHECK(this->get_TitleBar((Owc10_xp::TitleBar**)&TitleBar));
    return TitleBar;
  }

  Mscomctllib_xp::IToolbar* __fastcall get_Toolbar(void)
  {
    Mscomctllib_xp::IToolbar* Toolbar;
    OLECHECK(this->get_Toolbar((Mscomctllib_xp::IToolbar**)&Toolbar));
    return Toolbar;
  }

  BSTR __fastcall get_Value(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Value((BSTR*)&Name));
    return Name;
  }

  BSTR __fastcall get_Version(void)
  {
    BSTR Version = 0;
    OLECHECK(this->get_Version((BSTR*)&Version));
    return Version;
  }

  BSTR __fastcall get_ViewableRange(void)
  {
    BSTR ViewableRange = 0;
    OLECHECK(this->get_ViewableRange((BSTR*)&ViewableRange));
    return ViewableRange;
  }

  VARIANT_BOOL __fastcall get_ViewOnlyMode(void)
  {
    VARIANT_BOOL ViewOnlyMode;
    OLECHECK(this->get_ViewOnlyMode((VARIANT_BOOL*)&ViewOnlyMode));
    return ViewOnlyMode;
  }

  Owc10_xp::Windows* __fastcall get_Windows(void)
  {
    Owc10_xp::Windows* Windows;
    OLECHECK(this->get_Windows((Owc10_xp::Windows**)&Windows));
    return Windows;
  }

  Owc10_xp::Workbooks* __fastcall get_Workbooks(void)
  {
    Owc10_xp::Workbooks* Workbooks;
    OLECHECK(this->get_Workbooks((Owc10_xp::Workbooks**)&Workbooks));
    return Workbooks;
  }

  Owc10_xp::Worksheets* __fastcall get_Worksheets(void)
  {
    Owc10_xp::Worksheets* Worksheets;
    OLECHECK(this->get_Worksheets((Owc10_xp::Worksheets**)&Worksheets));
    return Worksheets;
  }

  BSTR __fastcall get_XMLData(void)
  {
    BSTR Data = 0;
    OLECHECK(this->get_XMLData((BSTR*)&Data));
    return Data;
  }

  BSTR __fastcall get_XMLURL(void)
  {
    BSTR URL = 0;
    OLECHECK(this->get_XMLURL((BSTR*)&URL));
    return URL;
  }


  __property   Owc10_xp::_Range* ActiveCell = {read = get_ActiveCell};
  __property   Owc10_xp::Worksheet* ActiveSheet = {read = get_ActiveSheet};
  __property   Owc10_xp::WINDOW* ActiveWindow = {read = get_ActiveWindow};
  __property   Owc10_xp::Workbook* ActiveWorkbook = {read = get_ActiveWorkbook};
  __property   VARIANT_BOOL    AllowPropertyToolbox = {read = get_AllowPropertyToolbox, write = set_AllowPropertyToolbox};
  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   VARIANT_BOOL    AutoFit = {read = get_AutoFit, write = set_AutoFit};
  __property   long            Build = {read = get_Build};
  __property   BSTR            BuildNumber = {read = get_BuildNumber};
  __property   Owc10_xp::XlCalculation Calculation = {read = get_Calculation, write = set_Calculation};
  __property   long            CalculationVersion = {read = get_CalculationVersion};
  __property   VARIANT_BOOL    CanUndo = {read = get_CanUndo};
  __property   BSTR            Caption = {read = get_Caption};
  __property   Owc10_xp::_Range* Cells = {read = get_Cells};
  __property   Owc10_xp::_Range* Columns = {read = get_Columns};
  __property   Owc10_xp::OCCommands* Commands = {read = get_Commands};
  __property   LPDISPATCH      Constants = {read = get_Constants};
  __property   BSTR            CSVData = {read = get_CSVData};
  __property   BSTR            CSVURL = {read = get_CSVURL};
  __property   Msdatasrc_xp::DataMember DataMember = {read = get_DataMember, write = set_DataMember};
  __property   Msdatasrc_xp::DataSource* DataSource = {read = get_DataSource, write = set_DataSource};
  __property   BSTR            DataType = {read = get_DataType};
  __property   VARIANT_BOOL    DesignMode = {read = get_DesignMode};
  __property   VARIANT_BOOL    Dirty = {read = get_Dirty, write = set_Dirty};
  __property   VARIANT_BOOL    DisplayBranding = {read = get_DisplayBranding, write = set_DisplayBranding};
  __property   VARIANT_BOOL    DisplayColumnHeadings = {read = get_DisplayColumnHeadings, write = set_DisplayColumnHeadings};
  __property   VARIANT_BOOL    DisplayDesignTimeUI = {read = get_DisplayDesignTimeUI, write = set_DisplayDesignTimeUI};
  __property   VARIANT_BOOL    DisplayGridlines = {read = get_DisplayGridlines, write = set_DisplayGridlines};
  __property   VARIANT_BOOL    DisplayHorizontalScrollBar = {read = get_DisplayHorizontalScrollBar, write = set_DisplayHorizontalScrollBar};
  __property   VARIANT_BOOL    DisplayOfficeLogo = {read = get_DisplayOfficeLogo, write = set_DisplayOfficeLogo};
  __property   VARIANT_BOOL    DisplayPropertyToolbox = {read = get_DisplayPropertyToolbox, write = set_DisplayPropertyToolbox};
  __property   VARIANT_BOOL    DisplayRowHeadings = {read = get_DisplayRowHeadings, write = set_DisplayRowHeadings};
  __property   VARIANT_BOOL    DisplayTitleBar = {read = get_DisplayTitleBar, write = set_DisplayTitleBar};
  __property   VARIANT_BOOL    DisplayToolbar = {read = get_DisplayToolbar, write = set_DisplayToolbar};
  __property   VARIANT_BOOL    DisplayVerticalScrollBar = {read = get_DisplayVerticalScrollBar, write = set_DisplayVerticalScrollBar};
  __property   VARIANT_BOOL    DisplayWorkbookTabs = {read = get_DisplayWorkbookTabs, write = set_DisplayWorkbookTabs};
  __property   VARIANT_BOOL    EnableEvents = {read = get_EnableEvents, write = set_EnableEvents};
  __property   VARIANT_BOOL    EnableUndo = {read = get_EnableUndo, write = set_EnableUndo};
  __property   BSTR            HTMLData = {read = get_HTMLData};
  __property   BSTR            HTMLURL = {read = get_HTMLURL};
  __property   unsigned_long   InstanceID = {read = get_InstanceID};
  __property   Owc10_xp::OWCLanguageSettings* LanguageSettings = {read = get_LanguageSettings};
  __property   long            MajorVersion = {read = get_MajorVersion};
  __property   BSTR            MinorVersion = {read = get_MinorVersion};
  __property   VARIANT_BOOL    MoveAfterReturn = {read = get_MoveAfterReturn, write = set_MoveAfterReturn};
  __property   Owc10_xp::XlDirection MoveAfterReturnDirection = {read = get_MoveAfterReturnDirection, write = set_MoveAfterReturnDirection};
  __property   BSTR            Name = {read = get_Name};
  __property   Owc10_xp::Names* Names = {read = get_Names};
  __property   BSTR            RevisionNumber = {read = get_RevisionNumber};
  __property   VARIANT_BOOL    RightToLeft = {read = get_RightToLeft, write = set_RightToLeft};
  __property   Owc10_xp::_Range* Rows = {read = get_Rows};
  __property   VARIANT_BOOL    ScreenUpdating = {read = get_ScreenUpdating, write = set_ScreenUpdating};
  __property   Owc10_xp::_Range* Selection = {read = get_Selection};
  __property   Owc10_xp::Sheets* Sheets = {read = get_Sheets};
  __property   Owc10_xp::TitleBar* TitleBar = {read = get_TitleBar};
  __property   Mscomctllib_xp::IToolbar* Toolbar = {read = get_Toolbar};
  __property   BSTR            Value = {read = get_Value};
  __property   BSTR            Version = {read = get_Version};
  __property   BSTR            ViewableRange = {read = get_ViewableRange};
  __property   VARIANT_BOOL    ViewOnlyMode = {read = get_ViewOnlyMode};
  __property   Owc10_xp::Windows* Windows = {read = get_Windows};
  __property   Owc10_xp::Workbooks* Workbooks = {read = get_Workbooks};
  __property   Owc10_xp::Worksheets* Worksheets = {read = get_Worksheets};
  __property   BSTR            XMLData = {read = get_XMLData};
  __property   BSTR            XMLURL = {read = get_XMLURL};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Worksheet
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A88-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface Worksheet  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE Activate(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Calculate(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Copy(VARIANT Before/*[in,opt]*/= TNoParam(), 
                                         VARIANT After/*[in,opt]*/= TNoParam()) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE DumpStringTable(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _Evaluate(VARIANT Expression/*[in]*/, 
                                              VARIANT* Result/*[out,retval]*/) = 0; // [-5]
  virtual HRESULT STDMETHODCALLTYPE Evaluate(VARIANT Expression/*[in]*/, 
                                             VARIANT* Result/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Move(VARIANT Before/*[in,opt]*/= TNoParam(), 
                                         VARIANT After/*[in,opt]*/= TNoParam()) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Paste(VARIANT* Destination/*[in,opt]*/= TNoParam(), 
                                          VARIANT* Link/*[in,opt]*/= TNoParam()) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Protect(VARIANT* Password/*[in,opt]*/= TNoParam(), 
                                            VARIANT* DrawingObjects/*[in,opt]*/= TNoParam(), 
                                            VARIANT* Contents/*[in,opt]*/= TNoParam(), 
                                            VARIANT* Scenarios/*[in,opt]*/= TNoParam(), 
                                            VARIANT* UserInterfaceOnly/*[in,opt]*/= TNoParam(), 
                                            VARIANT* AllowFormattingCells/*[in,opt]*/= TNoParam(), 
                                            VARIANT* AllowFormattingColumns/*[in,opt]*/= TNoParam(), 
                                            VARIANT* AllowFormattingRows/*[in,opt]*/= TNoParam(), 
                                            VARIANT* AllowInsertingColumns/*[in,opt]*/= TNoParam(), 
                                            VARIANT* AllowInsertingRows/*[in,opt]*/= TNoParam(), 
                                            VARIANT* AllowInsertingHyperlinks/*[in,opt]*/= TNoParam(), 
                                            VARIANT* AllowDeletingColumns/*[in,opt]*/= TNoParam(), 
                                            VARIANT* AllowDeletingRows/*[in,opt]*/= TNoParam(), 
                                            VARIANT* AllowSorting/*[in,opt]*/= TNoParam(), 
                                            VARIANT* AllowFiltering/*[in,opt]*/= TNoParam(), 
                                            VARIANT* AllowUsingPivotTableReports/*[in,opt]*/= TNoParam()) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Refresh(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Select(VARIANT* Replace/*[in,opt]*/= TNoParam()) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ShowAllData(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Unprotect(VARIANT* Password/*[in,opt]*/= TNoParam()) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Application(Owc10_xp::ISpreadsheet** ppApp/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_AutoFilter(Owc10_xp::AutoFilter** AutoFilter/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_AutoFilterMode(VARIANT_BOOL* AutoFilterMode/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_AutoFilterMode(VARIANT_BOOL AutoFilterMode/*[in]*/) = 0; // [1610743824]
  virtual HRESULT STDMETHODCALLTYPE get_Cells(Owc10_xp::_Range** Range/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Columns(Owc10_xp::_Range** Range/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_CommandText(BSTR* CommandText/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_CommandText(BSTR CommandText/*[in]*/) = 0; // [1610743828]
  virtual HRESULT STDMETHODCALLTYPE get_ConnectionString(BSTR* ConnectionString/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_ConnectionString(BSTR ConnectionString/*[in]*/) = 0; // [1610743830]
  virtual HRESULT STDMETHODCALLTYPE get_DataMember(Msdatasrc_xp::DataMember* DataMember/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_DataMember(Msdatasrc_xp::DataMember DataMember/*[in]*/) = 0; // [1610743832]
  virtual HRESULT STDMETHODCALLTYPE get_EnableAutoFilter(VARIANT_BOOL* EnableAutoFilter/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_EnableAutoFilter(VARIANT_BOOL EnableAutoFilter/*[in]*/) = 0; // [1610743834]
  virtual HRESULT STDMETHODCALLTYPE get_FilterMode(VARIANT_BOOL* FilterMode/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Index(long* Index/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_IsDataBound(VARIANT_BOOL* pf/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_IsDataBound(VARIANT_BOOL pf/*[in]*/) = 0; // [1610743838]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR Name/*[in]*/) = 0; // [1610743840]
  virtual HRESULT STDMETHODCALLTYPE get_Names(Owc10_xp::Names** Names/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Next(Owc10_xp::Worksheet** wks/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Owc10_xp::Workbook** Parent/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Previous(Owc10_xp::Worksheet** wks/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ProtectContents(VARIANT_BOOL* prot/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Protection(Owc10_xp::Protection** prot/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ProtectionMode(VARIANT_BOOL* prot/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Range(VARIANT Cell1/*[in]*/, VARIANT Cell2/*[in,opt]*/, 
                                              Owc10_xp::_Range** Range/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Rows(Owc10_xp::_Range** Range/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_StandardHeight(double* hgt/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_StandardWidth(double* wid/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_StandardWidth(double wid/*[in]*/) = 0; // [1610743852]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Owc10_xp::XlSheetType* typ/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_UsedRange(Owc10_xp::_Range** Range/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(Owc10_xp::XlSheetVisibility* vis/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(Owc10_xp::XlSheetVisibility vis/*[in]*/) = 0; // [1610743856]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT __fastcall _Evaluate(VARIANT Expression/*[in]*/)
  {
    VARIANT Result;
    OLECHECK(this->_Evaluate(Expression, (VARIANT*)&Result));
    return Result;
  }

  VARIANT __fastcall Evaluate(VARIANT Expression/*[in]*/)
  {
    VARIANT Result;
    OLECHECK(this->Evaluate(Expression, (VARIANT*)&Result));
    return Result;
  }

  Owc10_xp::ISpreadsheet* __fastcall get_Application(void)
  {
    Owc10_xp::ISpreadsheet* ppApp;
    OLECHECK(this->get_Application((Owc10_xp::ISpreadsheet**)&ppApp));
    return ppApp;
  }

  Owc10_xp::AutoFilter* __fastcall get_AutoFilter(void)
  {
    Owc10_xp::AutoFilter* AutoFilter;
    OLECHECK(this->get_AutoFilter((Owc10_xp::AutoFilter**)&AutoFilter));
    return AutoFilter;
  }

  VARIANT_BOOL __fastcall get_AutoFilterMode(void)
  {
    VARIANT_BOOL AutoFilterMode;
    OLECHECK(this->get_AutoFilterMode((VARIANT_BOOL*)&AutoFilterMode));
    return AutoFilterMode;
  }

  Owc10_xp::_Range* __fastcall get_Cells(void)
  {
    Owc10_xp::_Range* Range;
    OLECHECK(this->get_Cells((Owc10_xp::_Range**)&Range));
    return Range;
  }

  Owc10_xp::_Range* __fastcall get_Columns(void)
  {
    Owc10_xp::_Range* Range;
    OLECHECK(this->get_Columns((Owc10_xp::_Range**)&Range));
    return Range;
  }

  BSTR __fastcall get_CommandText(void)
  {
    BSTR CommandText = 0;
    OLECHECK(this->get_CommandText((BSTR*)&CommandText));
    return CommandText;
  }

  BSTR __fastcall get_ConnectionString(void)
  {
    BSTR ConnectionString = 0;
    OLECHECK(this->get_ConnectionString((BSTR*)&ConnectionString));
    return ConnectionString;
  }

  Msdatasrc_xp::DataMember __fastcall get_DataMember(void)
  {
    Msdatasrc_xp::DataMember DataMember;
    OLECHECK(this->get_DataMember((Msdatasrc_xp::DataMember*)&DataMember));
    return DataMember;
  }

  VARIANT_BOOL __fastcall get_EnableAutoFilter(void)
  {
    VARIANT_BOOL EnableAutoFilter;
    OLECHECK(this->get_EnableAutoFilter((VARIANT_BOOL*)&EnableAutoFilter));
    return EnableAutoFilter;
  }

  VARIANT_BOOL __fastcall get_FilterMode(void)
  {
    VARIANT_BOOL FilterMode;
    OLECHECK(this->get_FilterMode((VARIANT_BOOL*)&FilterMode));
    return FilterMode;
  }

  long __fastcall get_Index(void)
  {
    long Index;
    OLECHECK(this->get_Index((long*)&Index));
    return Index;
  }

  VARIANT_BOOL __fastcall get_IsDataBound(void)
  {
    VARIANT_BOOL pf;
    OLECHECK(this->get_IsDataBound((VARIANT_BOOL*)&pf));
    return pf;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  Owc10_xp::Names* __fastcall get_Names(void)
  {
    Owc10_xp::Names* Names;
    OLECHECK(this->get_Names((Owc10_xp::Names**)&Names));
    return Names;
  }

  Owc10_xp::Worksheet* __fastcall get_Next(void)
  {
    Owc10_xp::Worksheet* wks;
    OLECHECK(this->get_Next((Owc10_xp::Worksheet**)&wks));
    return wks;
  }

  Owc10_xp::Workbook* __fastcall get_Parent(void)
  {
    Owc10_xp::Workbook* Parent;
    OLECHECK(this->get_Parent((Owc10_xp::Workbook**)&Parent));
    return Parent;
  }

  Owc10_xp::Worksheet* __fastcall get_Previous(void)
  {
    Owc10_xp::Worksheet* wks;
    OLECHECK(this->get_Previous((Owc10_xp::Worksheet**)&wks));
    return wks;
  }

  VARIANT_BOOL __fastcall get_ProtectContents(void)
  {
    VARIANT_BOOL prot;
    OLECHECK(this->get_ProtectContents((VARIANT_BOOL*)&prot));
    return prot;
  }

  Owc10_xp::Protection* __fastcall get_Protection(void)
  {
    Owc10_xp::Protection* prot;
    OLECHECK(this->get_Protection((Owc10_xp::Protection**)&prot));
    return prot;
  }

  VARIANT_BOOL __fastcall get_ProtectionMode(void)
  {
    VARIANT_BOOL prot;
    OLECHECK(this->get_ProtectionMode((VARIANT_BOOL*)&prot));
    return prot;
  }

  Owc10_xp::_Range* __fastcall get_Range(VARIANT Cell1/*[in]*/, 
                                         VARIANT Cell2/*[in,opt]*/= TNoParam())
  {
    Owc10_xp::_Range* Range;
    OLECHECK(this->get_Range(Cell1, Cell2, (Owc10_xp::_Range**)&Range));
    return Range;
  }

  Owc10_xp::_Range* __fastcall get_Rows(void)
  {
    Owc10_xp::_Range* Range;
    OLECHECK(this->get_Rows((Owc10_xp::_Range**)&Range));
    return Range;
  }

  double __fastcall get_StandardHeight(void)
  {
    double hgt;
    OLECHECK(this->get_StandardHeight((double*)&hgt));
    return hgt;
  }

  double __fastcall get_StandardWidth(void)
  {
    double wid;
    OLECHECK(this->get_StandardWidth((double*)&wid));
    return wid;
  }

  Owc10_xp::XlSheetType __fastcall get_Type(void)
  {
    Owc10_xp::XlSheetType typ;
    OLECHECK(this->get_Type((Owc10_xp::XlSheetType*)&typ));
    return typ;
  }

  Owc10_xp::_Range* __fastcall get_UsedRange(void)
  {
    Owc10_xp::_Range* Range;
    OLECHECK(this->get_UsedRange((Owc10_xp::_Range**)&Range));
    return Range;
  }

  Owc10_xp::XlSheetVisibility __fastcall get_Visible(void)
  {
    Owc10_xp::XlSheetVisibility vis;
    OLECHECK(this->get_Visible((Owc10_xp::XlSheetVisibility*)&vis));
    return vis;
  }


  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   Owc10_xp::AutoFilter* AutoFilter = {read = get_AutoFilter};
  __property   VARIANT_BOOL    AutoFilterMode = {read = get_AutoFilterMode, write = set_AutoFilterMode};
  __property   Owc10_xp::_Range* Cells = {read = get_Cells};
  __property   Owc10_xp::_Range* Columns = {read = get_Columns};
  __property   BSTR            CommandText = {read = get_CommandText};
  __property   BSTR            ConnectionString = {read = get_ConnectionString};
  __property   Msdatasrc_xp::DataMember DataMember = {read = get_DataMember, write = set_DataMember};
  __property   VARIANT_BOOL    EnableAutoFilter = {read = get_EnableAutoFilter, write = set_EnableAutoFilter};
  __property   VARIANT_BOOL    FilterMode = {read = get_FilterMode};
  __property   long            Index = {read = get_Index};
  __property   VARIANT_BOOL    IsDataBound = {read = get_IsDataBound, write = set_IsDataBound};
  __property   BSTR            Name = {read = get_Name};
  __property   Owc10_xp::Names* Names = {read = get_Names};
  __property   Owc10_xp::Worksheet* Next = {read = get_Next};
  __property   Owc10_xp::Workbook* Parent = {read = get_Parent};
  __property   Owc10_xp::Worksheet* Previous = {read = get_Previous};
  __property   VARIANT_BOOL    ProtectContents = {read = get_ProtectContents};
  __property   Owc10_xp::Protection* Protection = {read = get_Protection};
  __property   VARIANT_BOOL    ProtectionMode = {read = get_ProtectionMode};
  __property   Owc10_xp::_Range* Rows = {read = get_Rows};
  __property   double          StandardHeight = {read = get_StandardHeight};
  __property   double          StandardWidth = {read = get_StandardWidth, write = set_StandardWidth};
  __property   Owc10_xp::XlSheetType Type = {read = get_Type};
  __property   Owc10_xp::_Range* UsedRange = {read = get_UsedRange};
  __property   Owc10_xp::XlSheetVisibility Visible = {read = get_Visible, write = set_Visible};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: AutoFilter
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B0E-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface AutoFilter  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Filters(Owc10_xp::Filters** Filters/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Owc10_xp::Worksheet** Dispatch/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Range(Owc10_xp::_Range** Range/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Apply(void) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::ISpreadsheet* __fastcall get_Application(void)
  {
    Owc10_xp::ISpreadsheet* Dispatch;
    OLECHECK(this->get_Application((Owc10_xp::ISpreadsheet**)&Dispatch));
    return Dispatch;
  }

  Owc10_xp::Filters* __fastcall get_Filters(void)
  {
    Owc10_xp::Filters* Filters;
    OLECHECK(this->get_Filters((Owc10_xp::Filters**)&Filters));
    return Filters;
  }

  Owc10_xp::Worksheet* __fastcall get_Parent(void)
  {
    Owc10_xp::Worksheet* Dispatch;
    OLECHECK(this->get_Parent((Owc10_xp::Worksheet**)&Dispatch));
    return Dispatch;
  }

  Owc10_xp::_Range* __fastcall get_Range(void)
  {
    Owc10_xp::_Range* Range;
    OLECHECK(this->get_Range((Owc10_xp::_Range**)&Range));
    return Range;
  }


  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   Owc10_xp::Filters* Filters = {read = get_Filters};
  __property   Owc10_xp::Worksheet* Parent = {read = get_Parent};
  __property   Owc10_xp::_Range* Range = {read = get_Range};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Filters
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B04-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface Filters  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* punk/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE get_Application(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Item(long Index/*[in]*/, 
                                             Owc10_xp::Filter** Filter/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Owc10_xp::AutoFilter** Dispatch/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN punk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&punk));
    return punk;
  }

  Owc10_xp::ISpreadsheet* __fastcall get_Application(void)
  {
    Owc10_xp::ISpreadsheet* Dispatch;
    OLECHECK(this->get_Application((Owc10_xp::ISpreadsheet**)&Dispatch));
    return Dispatch;
  }

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  Owc10_xp::Filter* __fastcall get_Item(long Index/*[in]*/)
  {
    Owc10_xp::Filter* Filter;
    OLECHECK(this->get_Item(Index, (Owc10_xp::Filter**)&Filter));
    return Filter;
  }

  Owc10_xp::AutoFilter* __fastcall get_Parent(void)
  {
    Owc10_xp::AutoFilter* Dispatch;
    OLECHECK(this->get_Parent((Owc10_xp::AutoFilter**)&Dispatch));
    return Dispatch;
  }


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   long            Count = {read = get_Count};
  __property   Owc10_xp::AutoFilter* Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Filter
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B03-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface Filter  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Criteria(Owc10_xp::Criteria** Criteria/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Owc10_xp::AutoFilter** Dispatch/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::ISpreadsheet* __fastcall get_Application(void)
  {
    Owc10_xp::ISpreadsheet* Dispatch;
    OLECHECK(this->get_Application((Owc10_xp::ISpreadsheet**)&Dispatch));
    return Dispatch;
  }

  Owc10_xp::Criteria* __fastcall get_Criteria(void)
  {
    Owc10_xp::Criteria* Criteria;
    OLECHECK(this->get_Criteria((Owc10_xp::Criteria**)&Criteria));
    return Criteria;
  }

  Owc10_xp::AutoFilter* __fastcall get_Parent(void)
  {
    Owc10_xp::AutoFilter* Dispatch;
    OLECHECK(this->get_Parent((Owc10_xp::AutoFilter**)&Dispatch));
    return Dispatch;
  }


  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   Owc10_xp::Criteria* Criteria = {read = get_Criteria};
  __property   Owc10_xp::AutoFilter* Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Criteria
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B02-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface Criteria  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* punk/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE get_Application(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_FilterFunction(Owc10_xp::SheetFilterFunction* FilterFunction/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_FilterFunction(Owc10_xp::SheetFilterFunction FilterFunction/*[in]*/) = 0; // [1610743811]
  virtual HRESULT STDMETHODCALLTYPE get_Item(long Index/*[in]*/, VARIANT* Criterion/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Owc10_xp::Filter** Dispatch/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ShowAll(VARIANT_BOOL* ShowAll/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_ShowAll(VARIANT_BOOL ShowAll/*[in]*/) = 0; // [1610743815]
  virtual HRESULT STDMETHODCALLTYPE Add(BSTR Criterion/*[in]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN punk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&punk));
    return punk;
  }

  Owc10_xp::ISpreadsheet* __fastcall get_Application(void)
  {
    Owc10_xp::ISpreadsheet* Dispatch;
    OLECHECK(this->get_Application((Owc10_xp::ISpreadsheet**)&Dispatch));
    return Dispatch;
  }

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  Owc10_xp::SheetFilterFunction __fastcall get_FilterFunction(void)
  {
    Owc10_xp::SheetFilterFunction FilterFunction;
    OLECHECK(this->get_FilterFunction((Owc10_xp::SheetFilterFunction*)&FilterFunction));
    return FilterFunction;
  }

  VARIANT __fastcall get_Item(long Index/*[in]*/)
  {
    VARIANT Criterion;
    OLECHECK(this->get_Item(Index, (VARIANT*)&Criterion));
    return Criterion;
  }

  Owc10_xp::Filter* __fastcall get_Parent(void)
  {
    Owc10_xp::Filter* Dispatch;
    OLECHECK(this->get_Parent((Owc10_xp::Filter**)&Dispatch));
    return Dispatch;
  }

  VARIANT_BOOL __fastcall get_ShowAll(void)
  {
    VARIANT_BOOL ShowAll;
    OLECHECK(this->get_ShowAll((VARIANT_BOOL*)&ShowAll));
    return ShowAll;
  }


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   long            Count = {read = get_Count};
  __property   Owc10_xp::SheetFilterFunction FilterFunction = {read = get_FilterFunction, write = set_FilterFunction};
  __property   Owc10_xp::Filter* Parent = {read = get_Parent};
  __property   VARIANT_BOOL    ShowAll = {read = get_ShowAll, write = set_ShowAll};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Names
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39BAD-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface Names  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* punk/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE get_Application(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* pc/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* ppXSheet/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Item(VARIANT Index/*[in,opt]*/, VARIANT IndexLocal/*[in,opt]*/, 
                                         VARIANT RefersTo/*[in,opt]*/, 
                                         Owc10_xp::Name** ppXName/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Add(VARIANT Name/*[in,opt]*/= TNoParam(), 
                                        VARIANT RefersTo/*[in,opt]*/= TNoParam(), 
                                        VARIANT Visible/*[in,opt]*/= TNoParam(), 
                                        VARIANT MacroType/*[in,opt]*/= TNoParam(), 
                                        VARIANT ShortcutKey/*[in,opt]*/= TNoParam(), 
                                        VARIANT Category/*[in,opt]*/= TNoParam(), 
                                        VARIANT NameLocal/*[in,opt]*/= TNoParam(), 
                                        VARIANT RefersToLocal/*[in,opt]*/= TNoParam(), 
                                        VARIANT CategoryLocal/*[in,opt]*/= TNoParam(), 
                                        VARIANT RefersToR1C1/*[in,opt]*/= TNoParam(), 
                                        VARIANT RefersToR1C1Local/*[in,opt]*/= TNoParam()) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE AddUI(VARIANT varName/*[in,opt]*/= TNoParam(), 
                                          VARIANT varRefersTo/*[in,opt]*/= TNoParam(), 
                                          VARIANT varVisible/*[in,opt]*/= TNoParam(), 
                                          VARIANT varMacroType/*[in,opt]*/= TNoParam(), 
                                          VARIANT varShortcutKey/*[in,opt]*/= TNoParam(), 
                                          VARIANT varCategory/*[in,opt]*/= TNoParam(), 
                                          VARIANT varNameLocal/*[in,opt]*/= TNoParam(), 
                                          VARIANT varRefersToLocal/*[in,opt]*/= TNoParam(), 
                                          VARIANT varCategoryLocal/*[in,opt]*/= TNoParam(), 
                                          VARIANT varRefersToR1C1/*[in,opt]*/= TNoParam(), 
                                          VARIANT varRefersToR1C1Local/*[in,opt]*/= TNoParam()) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN punk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&punk));
    return punk;
  }

  Owc10_xp::ISpreadsheet* __fastcall get_Application(void)
  {
    Owc10_xp::ISpreadsheet* Dispatch;
    OLECHECK(this->get_Application((Owc10_xp::ISpreadsheet**)&Dispatch));
    return Dispatch;
  }

  long __fastcall get_Count(void)
  {
    long pc;
    OLECHECK(this->get_Count((long*)&pc));
    return pc;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH ppXSheet;
    OLECHECK(this->get_Parent((LPDISPATCH*)&ppXSheet));
    return ppXSheet;
  }

  Owc10_xp::Name* __fastcall Item(VARIANT Index/*[in,opt]*/= TNoParam(), 
                                  VARIANT IndexLocal/*[in,opt]*/= TNoParam(), 
                                  VARIANT RefersTo/*[in,opt]*/= TNoParam())
  {
    Owc10_xp::Name* ppXName;
    OLECHECK(this->Item(Index, IndexLocal, RefersTo, (Owc10_xp::Name**)&ppXName));
    return ppXName;
  }


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   long            Count = {read = get_Count};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Name
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39BAC-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface Name  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Application(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Index(long* pc/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Name_(BSTR* pbstr/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Name_(BSTR pbstr/*[in]*/) = 0; // [1610743811]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_RefersTo(VARIANT* pvarVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_RefersTo(VARIANT pvarVal/*[in]*/) = 0; // [1610743814]
  virtual HRESULT STDMETHODCALLTYPE get_RefersToLocal(VARIANT* pvarVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_RefersToLocal(VARIANT pvarVal/*[in]*/) = 0; // [1610743816]
  virtual HRESULT STDMETHODCALLTYPE get_RefersToRange(Owc10_xp::_Range** ppIDispatchXRange/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Value(BSTR* pBstrOut/*[out,retval]*/) = 0; // [0]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::ISpreadsheet* __fastcall get_Application(void)
  {
    Owc10_xp::ISpreadsheet* Dispatch;
    OLECHECK(this->get_Application((Owc10_xp::ISpreadsheet**)&Dispatch));
    return Dispatch;
  }

  long __fastcall get_Index(void)
  {
    long pc;
    OLECHECK(this->get_Index((long*)&pc));
    return pc;
  }

  BSTR __fastcall get_Name_(void)
  {
    BSTR pbstr = 0;
    OLECHECK(this->get_Name_((BSTR*)&pbstr));
    return pbstr;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Parent((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  VARIANT __fastcall get_RefersTo(void)
  {
    VARIANT pvarVal;
    OLECHECK(this->get_RefersTo((VARIANT*)&pvarVal));
    return pvarVal;
  }

  VARIANT __fastcall get_RefersToLocal(void)
  {
    VARIANT pvarVal;
    OLECHECK(this->get_RefersToLocal((VARIANT*)&pvarVal));
    return pvarVal;
  }

  Owc10_xp::_Range* __fastcall get_RefersToRange(void)
  {
    Owc10_xp::_Range* ppIDispatchXRange;
    OLECHECK(this->get_RefersToRange((Owc10_xp::_Range**)&ppIDispatchXRange));
    return ppIDispatchXRange;
  }

  BSTR __fastcall get_Value(void)
  {
    BSTR pBstrOut = 0;
    OLECHECK(this->get_Value((BSTR*)&pBstrOut));
    return pBstrOut;
  }


  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   long            Index = {read = get_Index};
  __property   BSTR            Name_ = {read = get_Name_};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Owc10_xp::_Range* RefersToRange = {read = get_RefersToRange};
  __property   BSTR            Value = {read = get_Value};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Workbook
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39BA6-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface Workbook  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_ActiveSheet(Owc10_xp::Worksheet** Worksheet/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Application(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_CalculationVersion(long* Version/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Colors(VARIANT Index/*[in,opt]*/, 
                                               VARIANT* Color/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Colors(VARIANT Index/*[in,opt]*/, VARIANT Color/*[in]*/) = 0; // [1610743811]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Names(Owc10_xp::Names** Names/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ProtectStructure(VARIANT_BOOL* ProtectStructure/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Sheets(Owc10_xp::Sheets** Sheets/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Windows(Owc10_xp::Windows** Windows/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Worksheets(Owc10_xp::Worksheets** Worksheets/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Protect(VARIANT Password/*[in,opt]*/= TNoParam(), 
                                            VARIANT Structure/*[in,opt]*/= TNoParam(), 
                                            VARIANT Windows/*[in,opt]*/= TNoParam()) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ResetColors(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Unprotect(VARIANT Password/*[in,opt]*/= TNoParam()) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::Worksheet* __fastcall get_ActiveSheet(void)
  {
    Owc10_xp::Worksheet* Worksheet;
    OLECHECK(this->get_ActiveSheet((Owc10_xp::Worksheet**)&Worksheet));
    return Worksheet;
  }

  Owc10_xp::ISpreadsheet* __fastcall get_Application(void)
  {
    Owc10_xp::ISpreadsheet* Dispatch;
    OLECHECK(this->get_Application((Owc10_xp::ISpreadsheet**)&Dispatch));
    return Dispatch;
  }

  long __fastcall get_CalculationVersion(void)
  {
    long Version;
    OLECHECK(this->get_CalculationVersion((long*)&Version));
    return Version;
  }

  VARIANT __fastcall get_Colors(VARIANT Index/*[in,opt]*/= TNoParam())
  {
    VARIANT Color;
    OLECHECK(this->get_Colors(Index, (VARIANT*)&Color));
    return Color;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  Owc10_xp::Names* __fastcall get_Names(void)
  {
    Owc10_xp::Names* Names;
    OLECHECK(this->get_Names((Owc10_xp::Names**)&Names));
    return Names;
  }

  Owc10_xp::ISpreadsheet* __fastcall get_Parent(void)
  {
    Owc10_xp::ISpreadsheet* Dispatch;
    OLECHECK(this->get_Parent((Owc10_xp::ISpreadsheet**)&Dispatch));
    return Dispatch;
  }

  VARIANT_BOOL __fastcall get_ProtectStructure(void)
  {
    VARIANT_BOOL ProtectStructure;
    OLECHECK(this->get_ProtectStructure((VARIANT_BOOL*)&ProtectStructure));
    return ProtectStructure;
  }

  Owc10_xp::Sheets* __fastcall get_Sheets(void)
  {
    Owc10_xp::Sheets* Sheets;
    OLECHECK(this->get_Sheets((Owc10_xp::Sheets**)&Sheets));
    return Sheets;
  }

  Owc10_xp::Windows* __fastcall get_Windows(void)
  {
    Owc10_xp::Windows* Windows;
    OLECHECK(this->get_Windows((Owc10_xp::Windows**)&Windows));
    return Windows;
  }

  Owc10_xp::Worksheets* __fastcall get_Worksheets(void)
  {
    Owc10_xp::Worksheets* Worksheets;
    OLECHECK(this->get_Worksheets((Owc10_xp::Worksheets**)&Worksheets));
    return Worksheets;
  }


  __property   Owc10_xp::Worksheet* ActiveSheet = {read = get_ActiveSheet};
  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   long            CalculationVersion = {read = get_CalculationVersion};
  __property   BSTR            Name = {read = get_Name};
  __property   Owc10_xp::Names* Names = {read = get_Names};
  __property   Owc10_xp::ISpreadsheet* Parent = {read = get_Parent};
  __property   VARIANT_BOOL    ProtectStructure = {read = get_ProtectStructure};
  __property   Owc10_xp::Sheets* Sheets = {read = get_Sheets};
  __property   Owc10_xp::Windows* Windows = {read = get_Windows};
  __property   Owc10_xp::Worksheets* Worksheets = {read = get_Worksheets};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Sheets
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39BA7-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface Sheets  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE get_Application(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             LPDISPATCH* Dispatch/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Owc10_xp::Workbook** Dispatch/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(VARIANT* Visible/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(VARIANT Visible/*[in]*/) = 0; // [1610743813]
  virtual HRESULT STDMETHODCALLTYPE Add(VARIANT Before/*[in,opt]*/, VARIANT After/*[in,opt]*/, 
                                        VARIANT Count/*[in,opt]*/, VARIANT Type/*[in,opt]*/, 
                                        LPDISPATCH* Dispatch/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Copy(VARIANT Before/*[in,opt]*/= TNoParam(), 
                                         VARIANT After/*[in,opt]*/= TNoParam()) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Move(VARIANT Before/*[in,opt]*/= TNoParam(), 
                                         VARIANT After/*[in,opt]*/= TNoParam()) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Select(VARIANT Replace/*[in,opt]*/= TNoParam()) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunk));
    return ppunk;
  }

  Owc10_xp::ISpreadsheet* __fastcall get_Application(void)
  {
    Owc10_xp::ISpreadsheet* Dispatch;
    OLECHECK(this->get_Application((Owc10_xp::ISpreadsheet**)&Dispatch));
    return Dispatch;
  }

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  LPDISPATCH __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    LPDISPATCH Dispatch;
    OLECHECK(this->get_Item(Index, (LPDISPATCH*)&Dispatch));
    return Dispatch;
  }

  Owc10_xp::Workbook* __fastcall get_Parent(void)
  {
    Owc10_xp::Workbook* Dispatch;
    OLECHECK(this->get_Parent((Owc10_xp::Workbook**)&Dispatch));
    return Dispatch;
  }

  VARIANT __fastcall get_Visible(void)
  {
    VARIANT Visible;
    OLECHECK(this->get_Visible((VARIANT*)&Visible));
    return Visible;
  }

  LPDISPATCH __fastcall Add(VARIANT Before/*[in,opt]*/= TNoParam(), 
                            VARIANT After/*[in,opt]*/= TNoParam(), 
                            VARIANT Count/*[in,opt]*/= TNoParam(), 
                            VARIANT Type/*[in,opt]*/= TNoParam())
  {
    LPDISPATCH Dispatch;
    OLECHECK(this->Add(Before, After, Count, Type, (LPDISPATCH*)&Dispatch));
    return Dispatch;
  }


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   long            Count = {read = get_Count};
  __property   Owc10_xp::Workbook* Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Windows
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39BAB-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface Windows  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Dispatch/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Item(long Index/*[in]*/, 
                                             Owc10_xp::WINDOW** wndw/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::ISpreadsheet* __fastcall get_Application(void)
  {
    Owc10_xp::ISpreadsheet* Dispatch;
    OLECHECK(this->get_Application((Owc10_xp::ISpreadsheet**)&Dispatch));
    return Dispatch;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Dispatch;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Dispatch));
    return Dispatch;
  }

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  Owc10_xp::WINDOW* __fastcall get_Item(long Index/*[in]*/)
  {
    Owc10_xp::WINDOW* wndw;
    OLECHECK(this->get_Item(Index, (Owc10_xp::WINDOW**)&wndw));
    return wndw;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunk));
    return ppunk;
  }


  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: WINDOW
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39BAA-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface WINDOW  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Owc10_xp::Workbook** Dispatch/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ActiveCell(Owc10_xp::_Range** Range/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ActivePane(Owc10_xp::Pane** Pane/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ActiveSheet(Owc10_xp::Worksheet** Sheet/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ColumnHeadings(Owc10_xp::Headings** hdgs/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayColumnHeadings(VARIANT_BOOL* pf/*[out,retval]*/) = 0; // [1013]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayColumnHeadings(VARIANT_BOOL pf/*[in]*/) = 0; // [1013]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayCustomHeadings(VARIANT_BOOL* pf/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayCustomHeadings(VARIANT_BOOL pf/*[in]*/) = 0; // [1610743816]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayGridlines(VARIANT_BOOL* pf/*[out,retval]*/) = 0; // [1015]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayGridlines(VARIANT_BOOL pf/*[in]*/) = 0; // [1015]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayHeadings(VARIANT_BOOL* pf/*[out,retval]*/) = 0; // [1016]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayHeadings(VARIANT_BOOL pf/*[in]*/) = 0; // [1016]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayHorizontalScrollBar(VARIANT_BOOL* pf/*[out,retval]*/) = 0; // [1017]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayHorizontalScrollBar(VARIANT_BOOL pf/*[in]*/) = 0; // [1017]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayRowHeadings(VARIANT_BOOL* pf/*[out,retval]*/) = 0; // [1019]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayRowHeadings(VARIANT_BOOL pf/*[in]*/) = 0; // [1019]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayVerticalScrollBar(VARIANT_BOOL* pf/*[out,retval]*/) = 0; // [1021]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayVerticalScrollBar(VARIANT_BOOL pf/*[in]*/) = 0; // [1021]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayWorkbookTabs(VARIANT_BOOL* pf/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayWorkbookTabs(VARIANT_BOOL pf/*[in]*/) = 0; // [1610743828]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayZeros(VARIANT_BOOL* pf/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayZeros(VARIANT_BOOL pf/*[in]*/) = 0; // [1610743830]
  virtual HRESULT STDMETHODCALLTYPE get_EnableResize(VARIANT_BOOL* pf/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_EnableResize(VARIANT_BOOL pf/*[in]*/) = 0; // [1610743832]
  virtual HRESULT STDMETHODCALLTYPE get_FreezePanes(VARIANT_BOOL* pf/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_FreezePanes(VARIANT_BOOL pf/*[in]*/) = 0; // [1610743834]
  virtual HRESULT STDMETHODCALLTYPE get_GridlineColor(long* clr/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_GridlineColor(VARIANT* clr/*[in]*/) = 0; // [1610743836]
  virtual HRESULT STDMETHODCALLTYPE get_GridlineColorIndex(Owc10_xp::XlColorIndex* iclr/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_GridlineColorIndex(Owc10_xp::XlColorIndex iclr/*[in]*/) = 0; // [1610743838]
  virtual HRESULT STDMETHODCALLTYPE get_Height(double* hgt/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Index(long* Index/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Left(double* lft/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Panes(Owc10_xp::Panes** Panes/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_RangeSelection(Owc10_xp::_Range** rng/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_RowHeadings(Owc10_xp::Headings** hdgs/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ScrollColumn(long* col/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_ScrollColumn(long col/*[in]*/) = 0; // [1610743846]
  virtual HRESULT STDMETHODCALLTYPE get_ScrollRow(long* Row/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_ScrollRow(long Row/*[in]*/) = 0; // [1610743848]
  virtual HRESULT STDMETHODCALLTYPE get_SelectedSheets(Owc10_xp::Sheets** shts/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Selection(Owc10_xp::_Range** rng/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_TabRatio(double* ratio/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_TabRatio(double ratio/*[in]*/) = 0; // [1610743852]
  virtual HRESULT STDMETHODCALLTYPE get_Top(double* Top/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Owc10_xp::XlWindowType* typ/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_UsableHeight(double* hgt/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_UsableWidth(double* wid/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ViewableRange(BSTR* rng/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_ViewableRange(BSTR rng/*[in]*/) = 0; // [1610743858]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(VARIANT_BOOL* pf/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_VisibleRange(Owc10_xp::_Range** rng/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Width(double* wid/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_WindowNumber(long* num/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE LargeScroll(VARIANT* Down/*[in,opt]*/= TNoParam(), 
                                                VARIANT* Up/*[in,opt]*/= TNoParam(), 
                                                VARIANT* ToRight/*[in,opt]*/= TNoParam(), 
                                                VARIANT* ToLeft/*[in,opt]*/= TNoParam()) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE PointsToScreenPixelsX(long Points/*[in]*/, 
                                                          long* pixels/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE PointsToScreenPixelsY(long Points/*[in]*/, 
                                                          long* pixels/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE RangeFromPoint(long x/*[in]*/, long y/*[in]*/, 
                                                   Owc10_xp::_Range** rng/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ResetHeadings(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ScrollIntoView(long Left/*[in]*/, long Top/*[in]*/, 
                                                   long Width/*[in]*/, long Height/*[in]*/, 
                                                   VARIANT* Start/*[in,opt]*/= TNoParam()) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SmallScroll(VARIANT* Down/*[in,opt]*/= TNoParam(), 
                                                VARIANT* Up/*[in,opt]*/= TNoParam(), 
                                                VARIANT* ToRight/*[in,opt]*/= TNoParam(), 
                                                VARIANT* ToLeft/*[in,opt]*/= TNoParam()) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::ISpreadsheet* __fastcall get_Application(void)
  {
    Owc10_xp::ISpreadsheet* Dispatch;
    OLECHECK(this->get_Application((Owc10_xp::ISpreadsheet**)&Dispatch));
    return Dispatch;
  }

  Owc10_xp::Workbook* __fastcall get_Parent(void)
  {
    Owc10_xp::Workbook* Dispatch;
    OLECHECK(this->get_Parent((Owc10_xp::Workbook**)&Dispatch));
    return Dispatch;
  }

  Owc10_xp::_Range* __fastcall get_ActiveCell(void)
  {
    Owc10_xp::_Range* Range;
    OLECHECK(this->get_ActiveCell((Owc10_xp::_Range**)&Range));
    return Range;
  }

  Owc10_xp::Pane* __fastcall get_ActivePane(void)
  {
    Owc10_xp::Pane* Pane;
    OLECHECK(this->get_ActivePane((Owc10_xp::Pane**)&Pane));
    return Pane;
  }

  Owc10_xp::Worksheet* __fastcall get_ActiveSheet(void)
  {
    Owc10_xp::Worksheet* Sheet;
    OLECHECK(this->get_ActiveSheet((Owc10_xp::Worksheet**)&Sheet));
    return Sheet;
  }

  Owc10_xp::Headings* __fastcall get_ColumnHeadings(void)
  {
    Owc10_xp::Headings* hdgs;
    OLECHECK(this->get_ColumnHeadings((Owc10_xp::Headings**)&hdgs));
    return hdgs;
  }

  VARIANT_BOOL __fastcall get_DisplayColumnHeadings(void)
  {
    VARIANT_BOOL pf;
    OLECHECK(this->get_DisplayColumnHeadings((VARIANT_BOOL*)&pf));
    return pf;
  }

  VARIANT_BOOL __fastcall get_DisplayCustomHeadings(void)
  {
    VARIANT_BOOL pf;
    OLECHECK(this->get_DisplayCustomHeadings((VARIANT_BOOL*)&pf));
    return pf;
  }

  VARIANT_BOOL __fastcall get_DisplayGridlines(void)
  {
    VARIANT_BOOL pf;
    OLECHECK(this->get_DisplayGridlines((VARIANT_BOOL*)&pf));
    return pf;
  }

  VARIANT_BOOL __fastcall get_DisplayHeadings(void)
  {
    VARIANT_BOOL pf;
    OLECHECK(this->get_DisplayHeadings((VARIANT_BOOL*)&pf));
    return pf;
  }

  VARIANT_BOOL __fastcall get_DisplayHorizontalScrollBar(void)
  {
    VARIANT_BOOL pf;
    OLECHECK(this->get_DisplayHorizontalScrollBar((VARIANT_BOOL*)&pf));
    return pf;
  }

  VARIANT_BOOL __fastcall get_DisplayRowHeadings(void)
  {
    VARIANT_BOOL pf;
    OLECHECK(this->get_DisplayRowHeadings((VARIANT_BOOL*)&pf));
    return pf;
  }

  VARIANT_BOOL __fastcall get_DisplayVerticalScrollBar(void)
  {
    VARIANT_BOOL pf;
    OLECHECK(this->get_DisplayVerticalScrollBar((VARIANT_BOOL*)&pf));
    return pf;
  }

  VARIANT_BOOL __fastcall get_DisplayWorkbookTabs(void)
  {
    VARIANT_BOOL pf;
    OLECHECK(this->get_DisplayWorkbookTabs((VARIANT_BOOL*)&pf));
    return pf;
  }

  VARIANT_BOOL __fastcall get_DisplayZeros(void)
  {
    VARIANT_BOOL pf;
    OLECHECK(this->get_DisplayZeros((VARIANT_BOOL*)&pf));
    return pf;
  }

  VARIANT_BOOL __fastcall get_EnableResize(void)
  {
    VARIANT_BOOL pf;
    OLECHECK(this->get_EnableResize((VARIANT_BOOL*)&pf));
    return pf;
  }

  VARIANT_BOOL __fastcall get_FreezePanes(void)
  {
    VARIANT_BOOL pf;
    OLECHECK(this->get_FreezePanes((VARIANT_BOOL*)&pf));
    return pf;
  }

  long __fastcall get_GridlineColor(void)
  {
    long clr;
    OLECHECK(this->get_GridlineColor((long*)&clr));
    return clr;
  }

  Owc10_xp::XlColorIndex __fastcall get_GridlineColorIndex(void)
  {
    Owc10_xp::XlColorIndex iclr;
    OLECHECK(this->get_GridlineColorIndex((Owc10_xp::XlColorIndex*)&iclr));
    return iclr;
  }

  double __fastcall get_Height(void)
  {
    double hgt;
    OLECHECK(this->get_Height((double*)&hgt));
    return hgt;
  }

  long __fastcall get_Index(void)
  {
    long Index;
    OLECHECK(this->get_Index((long*)&Index));
    return Index;
  }

  double __fastcall get_Left(void)
  {
    double lft;
    OLECHECK(this->get_Left((double*)&lft));
    return lft;
  }

  Owc10_xp::Panes* __fastcall get_Panes(void)
  {
    Owc10_xp::Panes* Panes;
    OLECHECK(this->get_Panes((Owc10_xp::Panes**)&Panes));
    return Panes;
  }

  Owc10_xp::_Range* __fastcall get_RangeSelection(void)
  {
    Owc10_xp::_Range* rng;
    OLECHECK(this->get_RangeSelection((Owc10_xp::_Range**)&rng));
    return rng;
  }

  Owc10_xp::Headings* __fastcall get_RowHeadings(void)
  {
    Owc10_xp::Headings* hdgs;
    OLECHECK(this->get_RowHeadings((Owc10_xp::Headings**)&hdgs));
    return hdgs;
  }

  long __fastcall get_ScrollColumn(void)
  {
    long col;
    OLECHECK(this->get_ScrollColumn((long*)&col));
    return col;
  }

  long __fastcall get_ScrollRow(void)
  {
    long Row;
    OLECHECK(this->get_ScrollRow((long*)&Row));
    return Row;
  }

  Owc10_xp::Sheets* __fastcall get_SelectedSheets(void)
  {
    Owc10_xp::Sheets* shts;
    OLECHECK(this->get_SelectedSheets((Owc10_xp::Sheets**)&shts));
    return shts;
  }

  Owc10_xp::_Range* __fastcall get_Selection(void)
  {
    Owc10_xp::_Range* rng;
    OLECHECK(this->get_Selection((Owc10_xp::_Range**)&rng));
    return rng;
  }

  double __fastcall get_TabRatio(void)
  {
    double ratio;
    OLECHECK(this->get_TabRatio((double*)&ratio));
    return ratio;
  }

  double __fastcall get_Top(void)
  {
    double Top;
    OLECHECK(this->get_Top((double*)&Top));
    return Top;
  }

  Owc10_xp::XlWindowType __fastcall get_Type(void)
  {
    Owc10_xp::XlWindowType typ;
    OLECHECK(this->get_Type((Owc10_xp::XlWindowType*)&typ));
    return typ;
  }

  double __fastcall get_UsableHeight(void)
  {
    double hgt;
    OLECHECK(this->get_UsableHeight((double*)&hgt));
    return hgt;
  }

  double __fastcall get_UsableWidth(void)
  {
    double wid;
    OLECHECK(this->get_UsableWidth((double*)&wid));
    return wid;
  }

  BSTR __fastcall get_ViewableRange(void)
  {
    BSTR rng = 0;
    OLECHECK(this->get_ViewableRange((BSTR*)&rng));
    return rng;
  }

  VARIANT_BOOL __fastcall get_Visible(void)
  {
    VARIANT_BOOL pf;
    OLECHECK(this->get_Visible((VARIANT_BOOL*)&pf));
    return pf;
  }

  Owc10_xp::_Range* __fastcall get_VisibleRange(void)
  {
    Owc10_xp::_Range* rng;
    OLECHECK(this->get_VisibleRange((Owc10_xp::_Range**)&rng));
    return rng;
  }

  double __fastcall get_Width(void)
  {
    double wid;
    OLECHECK(this->get_Width((double*)&wid));
    return wid;
  }

  long __fastcall get_WindowNumber(void)
  {
    long num;
    OLECHECK(this->get_WindowNumber((long*)&num));
    return num;
  }

  long __fastcall PointsToScreenPixelsX(long Points/*[in]*/)
  {
    long pixels;
    OLECHECK(this->PointsToScreenPixelsX(Points, (long*)&pixels));
    return pixels;
  }

  long __fastcall PointsToScreenPixelsY(long Points/*[in]*/)
  {
    long pixels;
    OLECHECK(this->PointsToScreenPixelsY(Points, (long*)&pixels));
    return pixels;
  }

  Owc10_xp::_Range* __fastcall RangeFromPoint(long x/*[in]*/, long y/*[in]*/)
  {
    Owc10_xp::_Range* rng;
    OLECHECK(this->RangeFromPoint(x, y, (Owc10_xp::_Range**)&rng));
    return rng;
  }


  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   Owc10_xp::Workbook* Parent = {read = get_Parent};
  __property   Owc10_xp::_Range* ActiveCell = {read = get_ActiveCell};
  __property   Owc10_xp::Pane* ActivePane = {read = get_ActivePane};
  __property   Owc10_xp::Worksheet* ActiveSheet = {read = get_ActiveSheet};
  __property   Owc10_xp::Headings* ColumnHeadings = {read = get_ColumnHeadings};
  __property   VARIANT_BOOL    DisplayColumnHeadings = {read = get_DisplayColumnHeadings, write = set_DisplayColumnHeadings};
  __property   VARIANT_BOOL    DisplayCustomHeadings = {read = get_DisplayCustomHeadings, write = set_DisplayCustomHeadings};
  __property   VARIANT_BOOL    DisplayGridlines = {read = get_DisplayGridlines, write = set_DisplayGridlines};
  __property   VARIANT_BOOL    DisplayHeadings = {read = get_DisplayHeadings, write = set_DisplayHeadings};
  __property   VARIANT_BOOL    DisplayHorizontalScrollBar = {read = get_DisplayHorizontalScrollBar, write = set_DisplayHorizontalScrollBar};
  __property   VARIANT_BOOL    DisplayRowHeadings = {read = get_DisplayRowHeadings, write = set_DisplayRowHeadings};
  __property   VARIANT_BOOL    DisplayVerticalScrollBar = {read = get_DisplayVerticalScrollBar, write = set_DisplayVerticalScrollBar};
  __property   VARIANT_BOOL    DisplayWorkbookTabs = {read = get_DisplayWorkbookTabs, write = set_DisplayWorkbookTabs};
  __property   VARIANT_BOOL    DisplayZeros = {read = get_DisplayZeros, write = set_DisplayZeros};
  __property   VARIANT_BOOL    EnableResize = {read = get_EnableResize, write = set_EnableResize};
  __property   VARIANT_BOOL    FreezePanes = {read = get_FreezePanes, write = set_FreezePanes};
  __property   long            GridlineColor = {read = get_GridlineColor};
  __property   Owc10_xp::XlColorIndex GridlineColorIndex = {read = get_GridlineColorIndex, write = set_GridlineColorIndex};
  __property   double          Height = {read = get_Height};
  __property   long            Index = {read = get_Index};
  __property   double          Left = {read = get_Left};
  __property   Owc10_xp::Panes* Panes = {read = get_Panes};
  __property   Owc10_xp::_Range* RangeSelection = {read = get_RangeSelection};
  __property   Owc10_xp::Headings* RowHeadings = {read = get_RowHeadings};
  __property   long            ScrollColumn = {read = get_ScrollColumn, write = set_ScrollColumn};
  __property   long            ScrollRow = {read = get_ScrollRow, write = set_ScrollRow};
  __property   Owc10_xp::Sheets* SelectedSheets = {read = get_SelectedSheets};
  __property   Owc10_xp::_Range* Selection = {read = get_Selection};
  __property   double          TabRatio = {read = get_TabRatio, write = set_TabRatio};
  __property   double          Top = {read = get_Top};
  __property   Owc10_xp::XlWindowType Type = {read = get_Type};
  __property   double          UsableHeight = {read = get_UsableHeight};
  __property   double          UsableWidth = {read = get_UsableWidth};
  __property   BSTR            ViewableRange = {read = get_ViewableRange};
  __property   VARIANT_BOOL    Visible = {read = get_Visible};
  __property   Owc10_xp::_Range* VisibleRange = {read = get_VisibleRange};
  __property   double          Width = {read = get_Width};
  __property   long            WindowNumber = {read = get_WindowNumber};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Pane
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AB2-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface Pane  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Owc10_xp::ISpreadsheet** ppApp/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Index(long* Index/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Owc10_xp::WINDOW** Parent/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_VisibleRange(Owc10_xp::_Range** Range/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::ISpreadsheet* __fastcall get_Application(void)
  {
    Owc10_xp::ISpreadsheet* ppApp;
    OLECHECK(this->get_Application((Owc10_xp::ISpreadsheet**)&ppApp));
    return ppApp;
  }

  long __fastcall get_Index(void)
  {
    long Index;
    OLECHECK(this->get_Index((long*)&Index));
    return Index;
  }

  Owc10_xp::WINDOW* __fastcall get_Parent(void)
  {
    Owc10_xp::WINDOW* Parent;
    OLECHECK(this->get_Parent((Owc10_xp::WINDOW**)&Parent));
    return Parent;
  }

  Owc10_xp::_Range* __fastcall get_VisibleRange(void)
  {
    Owc10_xp::_Range* Range;
    OLECHECK(this->get_VisibleRange((Owc10_xp::_Range**)&Range));
    return Range;
  }


  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   long            Index = {read = get_Index};
  __property   Owc10_xp::WINDOW* Parent = {read = get_Parent};
  __property   Owc10_xp::_Range* VisibleRange = {read = get_VisibleRange};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Headings
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39BA3-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface Headings  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Owc10_xp::WINDOW** Dispatch/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT* Index/*[in]*/, 
                                             Owc10_xp::Heading** Heading/*[out,retval]*/) = 0; // [0]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::ISpreadsheet* __fastcall get_Application(void)
  {
    Owc10_xp::ISpreadsheet* Dispatch;
    OLECHECK(this->get_Application((Owc10_xp::ISpreadsheet**)&Dispatch));
    return Dispatch;
  }

  Owc10_xp::WINDOW* __fastcall get_Parent(void)
  {
    Owc10_xp::WINDOW* Dispatch;
    OLECHECK(this->get_Parent((Owc10_xp::WINDOW**)&Dispatch));
    return Dispatch;
  }

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  Owc10_xp::Heading* __fastcall get_Item(VARIANT* Index/*[in]*/)
  {
    Owc10_xp::Heading* Heading;
    OLECHECK(this->get_Item(Index, (Owc10_xp::Heading**)&Heading));
    return Heading;
  }


  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   Owc10_xp::WINDOW* Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Heading
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39BA4-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface Heading  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Owc10_xp::WINDOW** Parent/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Caption(BSTR* bstr/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Caption(BSTR bstr/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Index(long* Index/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Reset(void) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::ISpreadsheet* __fastcall get_Application(void)
  {
    Owc10_xp::ISpreadsheet* Dispatch;
    OLECHECK(this->get_Application((Owc10_xp::ISpreadsheet**)&Dispatch));
    return Dispatch;
  }

  Owc10_xp::WINDOW* __fastcall get_Parent(void)
  {
    Owc10_xp::WINDOW* Parent;
    OLECHECK(this->get_Parent((Owc10_xp::WINDOW**)&Parent));
    return Parent;
  }

  BSTR __fastcall get_Caption(void)
  {
    BSTR bstr = 0;
    OLECHECK(this->get_Caption((BSTR*)&bstr));
    return bstr;
  }

  long __fastcall get_Index(void)
  {
    long Index;
    OLECHECK(this->get_Index((long*)&Index));
    return Index;
  }


  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   Owc10_xp::WINDOW* Parent = {read = get_Parent};
  __property   BSTR            Caption = {read = get_Caption};
  __property   long            Index = {read = get_Index};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Panes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AB5-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface Panes  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE get_Application(Owc10_xp::ISpreadsheet** ppApp/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Item(long Index/*[in]*/, 
                                             Owc10_xp::Pane** Pane/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Owc10_xp::WINDOW** Parent/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunk));
    return ppunk;
  }

  Owc10_xp::ISpreadsheet* __fastcall get_Application(void)
  {
    Owc10_xp::ISpreadsheet* ppApp;
    OLECHECK(this->get_Application((Owc10_xp::ISpreadsheet**)&ppApp));
    return ppApp;
  }

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  Owc10_xp::Pane* __fastcall get_Item(long Index/*[in]*/)
  {
    Owc10_xp::Pane* Pane;
    OLECHECK(this->get_Item(Index, (Owc10_xp::Pane**)&Pane));
    return Pane;
  }

  Owc10_xp::WINDOW* __fastcall get_Parent(void)
  {
    Owc10_xp::WINDOW* Parent;
    OLECHECK(this->get_Parent((Owc10_xp::WINDOW**)&Parent));
    return Parent;
  }


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   long            Count = {read = get_Count};
  __property   Owc10_xp::WINDOW* Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Worksheets
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39BA8-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface Worksheets  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE get_Application(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             LPDISPATCH* Dispatch/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Owc10_xp::Workbook** Dispatch/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(VARIANT* Visible/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(VARIANT Visible/*[in]*/) = 0; // [1610743813]
  virtual HRESULT STDMETHODCALLTYPE Add(VARIANT Before/*[in,opt]*/, VARIANT After/*[in,opt]*/, 
                                        VARIANT Count/*[in,opt]*/, VARIANT Type/*[in,opt]*/, 
                                        LPDISPATCH* Dispatch/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Copy(VARIANT Before/*[in,opt]*/= TNoParam(), 
                                         VARIANT After/*[in,opt]*/= TNoParam()) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Move(VARIANT Before/*[in,opt]*/= TNoParam(), 
                                         VARIANT After/*[in,opt]*/= TNoParam()) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Select(VARIANT Replace/*[in,opt]*/= TNoParam()) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunk));
    return ppunk;
  }

  Owc10_xp::ISpreadsheet* __fastcall get_Application(void)
  {
    Owc10_xp::ISpreadsheet* Dispatch;
    OLECHECK(this->get_Application((Owc10_xp::ISpreadsheet**)&Dispatch));
    return Dispatch;
  }

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  LPDISPATCH __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    LPDISPATCH Dispatch;
    OLECHECK(this->get_Item(Index, (LPDISPATCH*)&Dispatch));
    return Dispatch;
  }

  Owc10_xp::Workbook* __fastcall get_Parent(void)
  {
    Owc10_xp::Workbook* Dispatch;
    OLECHECK(this->get_Parent((Owc10_xp::Workbook**)&Dispatch));
    return Dispatch;
  }

  VARIANT __fastcall get_Visible(void)
  {
    VARIANT Visible;
    OLECHECK(this->get_Visible((VARIANT*)&Visible));
    return Visible;
  }

  LPDISPATCH __fastcall Add(VARIANT Before/*[in,opt]*/= TNoParam(), 
                            VARIANT After/*[in,opt]*/= TNoParam(), 
                            VARIANT Count/*[in,opt]*/= TNoParam(), 
                            VARIANT Type/*[in,opt]*/= TNoParam())
  {
    LPDISPATCH Dispatch;
    OLECHECK(this->Add(Before, After, Count, Type, (LPDISPATCH*)&Dispatch));
    return Dispatch;
  }


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   long            Count = {read = get_Count};
  __property   Owc10_xp::Workbook* Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Protection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B3D-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface Protection  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Owc10_xp::Worksheet** Dispatch/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(VARIANT_BOOL Enabled/*[in]*/) = 0; // [1610743810]
  virtual HRESULT STDMETHODCALLTYPE get_AllowFormattingRows(VARIANT_BOOL* pf/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_AllowFormattingRows(VARIANT_BOOL pf/*[in]*/) = 0; // [1610743812]
  virtual HRESULT STDMETHODCALLTYPE get_AllowFormattingColumns(VARIANT_BOOL* pf/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_AllowFormattingColumns(VARIANT_BOOL pf/*[in]*/) = 0; // [1610743814]
  virtual HRESULT STDMETHODCALLTYPE get_AllowInsertingRows(VARIANT_BOOL* pf/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_AllowInsertingRows(VARIANT_BOOL pf/*[in]*/) = 0; // [1610743816]
  virtual HRESULT STDMETHODCALLTYPE get_AllowInsertingColumns(VARIANT_BOOL* pf/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_AllowInsertingColumns(VARIANT_BOOL pf/*[in]*/) = 0; // [1610743818]
  virtual HRESULT STDMETHODCALLTYPE get_AllowDeletingRows(VARIANT_BOOL* pf/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_AllowDeletingRows(VARIANT_BOOL pf/*[in]*/) = 0; // [1610743820]
  virtual HRESULT STDMETHODCALLTYPE get_AllowDeletingColumns(VARIANT_BOOL* pf/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_AllowDeletingColumns(VARIANT_BOOL pf/*[in]*/) = 0; // [1610743822]
  virtual HRESULT STDMETHODCALLTYPE get_AllowSorting(VARIANT_BOOL* pf/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_AllowSorting(VARIANT_BOOL pf/*[in]*/) = 0; // [1610743824]
  virtual HRESULT STDMETHODCALLTYPE get_AllowFiltering(VARIANT_BOOL* pf/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_AllowFiltering(VARIANT_BOOL pf/*[in]*/) = 0; // [1610743826]
  virtual HRESULT STDMETHODCALLTYPE get_AllowHeadingRename(VARIANT_BOOL* pf/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_AllowHeadingRename(VARIANT_BOOL pf/*[in]*/) = 0; // [1610743828]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::ISpreadsheet* __fastcall get_Application(void)
  {
    Owc10_xp::ISpreadsheet* Dispatch;
    OLECHECK(this->get_Application((Owc10_xp::ISpreadsheet**)&Dispatch));
    return Dispatch;
  }

  Owc10_xp::Worksheet* __fastcall get_Parent(void)
  {
    Owc10_xp::Worksheet* Dispatch;
    OLECHECK(this->get_Parent((Owc10_xp::Worksheet**)&Dispatch));
    return Dispatch;
  }

  VARIANT_BOOL __fastcall get_Enabled(void)
  {
    VARIANT_BOOL Enabled;
    OLECHECK(this->get_Enabled((VARIANT_BOOL*)&Enabled));
    return Enabled;
  }

  VARIANT_BOOL __fastcall get_AllowFormattingRows(void)
  {
    VARIANT_BOOL pf;
    OLECHECK(this->get_AllowFormattingRows((VARIANT_BOOL*)&pf));
    return pf;
  }

  VARIANT_BOOL __fastcall get_AllowFormattingColumns(void)
  {
    VARIANT_BOOL pf;
    OLECHECK(this->get_AllowFormattingColumns((VARIANT_BOOL*)&pf));
    return pf;
  }

  VARIANT_BOOL __fastcall get_AllowInsertingRows(void)
  {
    VARIANT_BOOL pf;
    OLECHECK(this->get_AllowInsertingRows((VARIANT_BOOL*)&pf));
    return pf;
  }

  VARIANT_BOOL __fastcall get_AllowInsertingColumns(void)
  {
    VARIANT_BOOL pf;
    OLECHECK(this->get_AllowInsertingColumns((VARIANT_BOOL*)&pf));
    return pf;
  }

  VARIANT_BOOL __fastcall get_AllowDeletingRows(void)
  {
    VARIANT_BOOL pf;
    OLECHECK(this->get_AllowDeletingRows((VARIANT_BOOL*)&pf));
    return pf;
  }

  VARIANT_BOOL __fastcall get_AllowDeletingColumns(void)
  {
    VARIANT_BOOL pf;
    OLECHECK(this->get_AllowDeletingColumns((VARIANT_BOOL*)&pf));
    return pf;
  }

  VARIANT_BOOL __fastcall get_AllowSorting(void)
  {
    VARIANT_BOOL pf;
    OLECHECK(this->get_AllowSorting((VARIANT_BOOL*)&pf));
    return pf;
  }

  VARIANT_BOOL __fastcall get_AllowFiltering(void)
  {
    VARIANT_BOOL pf;
    OLECHECK(this->get_AllowFiltering((VARIANT_BOOL*)&pf));
    return pf;
  }

  VARIANT_BOOL __fastcall get_AllowHeadingRename(void)
  {
    VARIANT_BOOL pf;
    OLECHECK(this->get_AllowHeadingRename((VARIANT_BOOL*)&pf));
    return pf;
  }


  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   Owc10_xp::Worksheet* Parent = {read = get_Parent};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   VARIANT_BOOL    AllowFormattingRows = {read = get_AllowFormattingRows, write = set_AllowFormattingRows};
  __property   VARIANT_BOOL    AllowFormattingColumns = {read = get_AllowFormattingColumns, write = set_AllowFormattingColumns};
  __property   VARIANT_BOOL    AllowInsertingRows = {read = get_AllowInsertingRows, write = set_AllowInsertingRows};
  __property   VARIANT_BOOL    AllowInsertingColumns = {read = get_AllowInsertingColumns, write = set_AllowInsertingColumns};
  __property   VARIANT_BOOL    AllowDeletingRows = {read = get_AllowDeletingRows, write = set_AllowDeletingRows};
  __property   VARIANT_BOOL    AllowDeletingColumns = {read = get_AllowDeletingColumns, write = set_AllowDeletingColumns};
  __property   VARIANT_BOOL    AllowSorting = {read = get_AllowSorting, write = set_AllowSorting};
  __property   VARIANT_BOOL    AllowFiltering = {read = get_AllowFiltering, write = set_AllowFiltering};
  __property   VARIANT_BOOL    AllowHeadingRename = {read = get_AllowHeadingRename, write = set_AllowHeadingRename};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: TitleBar
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B0B-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface TitleBar  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Owc10_xp::ISpreadsheet** ppApp/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Caption(BSTR* Caption/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Caption(BSTR Caption/*[in]*/) = 0; // [1610743809]
  virtual HRESULT STDMETHODCALLTYPE get_Font(Owc10_xp::Font** Font/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Interior(Owc10_xp::Interior** Interior/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Owc10_xp::ISpreadsheet** Parent/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(VARIANT_BOOL* Visible/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(VARIANT_BOOL Visible/*[in]*/) = 0; // [1610743814]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::ISpreadsheet* __fastcall get_Application(void)
  {
    Owc10_xp::ISpreadsheet* ppApp;
    OLECHECK(this->get_Application((Owc10_xp::ISpreadsheet**)&ppApp));
    return ppApp;
  }

  BSTR __fastcall get_Caption(void)
  {
    BSTR Caption = 0;
    OLECHECK(this->get_Caption((BSTR*)&Caption));
    return Caption;
  }

  Owc10_xp::Font* __fastcall get_Font(void)
  {
    Owc10_xp::Font* Font;
    OLECHECK(this->get_Font((Owc10_xp::Font**)&Font));
    return Font;
  }

  Owc10_xp::Interior* __fastcall get_Interior(void)
  {
    Owc10_xp::Interior* Interior;
    OLECHECK(this->get_Interior((Owc10_xp::Interior**)&Interior));
    return Interior;
  }

  Owc10_xp::ISpreadsheet* __fastcall get_Parent(void)
  {
    Owc10_xp::ISpreadsheet* Parent;
    OLECHECK(this->get_Parent((Owc10_xp::ISpreadsheet**)&Parent));
    return Parent;
  }

  VARIANT_BOOL __fastcall get_Visible(void)
  {
    VARIANT_BOOL Visible;
    OLECHECK(this->get_Visible((VARIANT_BOOL*)&Visible));
    return Visible;
  }


  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   BSTR            Caption = {read = get_Caption};
  __property   Owc10_xp::Font* Font = {read = get_Font};
  __property   Owc10_xp::Interior* Interior = {read = get_Interior};
  __property   Owc10_xp::ISpreadsheet* Parent = {read = get_Parent};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Font
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6F5A761A-0AC7-4DED-9A6B-A3547FD7B7BB}
// *********************************************************************//
interface Font  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Owc10_xp::ISpreadsheet** ppApp/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Bold(VARIANT* Bold/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE set_Bold(VARIANT_BOOL Bold/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_Color(VARIANT* Color/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Color(VARIANT* Color/*[in]*/) = 0; // [1610743811]
  virtual HRESULT STDMETHODCALLTYPE get_ColorIndex(VARIANT* ColorIndex/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_ColorIndex(int ColorIndex/*[in]*/) = 0; // [1610743813]
  virtual HRESULT STDMETHODCALLTYPE get_Italic(VARIANT* Italic/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_Italic(VARIANT_BOOL Italic/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_Name(VARIANT* Name/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR Name/*[in]*/) = 0; // [1610743817]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* ppidispatch/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Size(VARIANT* Size/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE set_Size(double Size/*[in]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_Underline(VARIANT* UnderlineStyle/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE set_Underline(Owc10_xp::XlUnderlineStyle UnderlineStyle/*[in]*/) = 0; // [5]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::ISpreadsheet* __fastcall get_Application(void)
  {
    Owc10_xp::ISpreadsheet* ppApp;
    OLECHECK(this->get_Application((Owc10_xp::ISpreadsheet**)&ppApp));
    return ppApp;
  }

  VARIANT __fastcall get_Bold(void)
  {
    VARIANT Bold;
    OLECHECK(this->get_Bold((VARIANT*)&Bold));
    return Bold;
  }

  VARIANT __fastcall get_Color(void)
  {
    VARIANT Color;
    OLECHECK(this->get_Color((VARIANT*)&Color));
    return Color;
  }

  VARIANT __fastcall get_ColorIndex(void)
  {
    VARIANT ColorIndex;
    OLECHECK(this->get_ColorIndex((VARIANT*)&ColorIndex));
    return ColorIndex;
  }

  VARIANT __fastcall get_Italic(void)
  {
    VARIANT Italic;
    OLECHECK(this->get_Italic((VARIANT*)&Italic));
    return Italic;
  }

  VARIANT __fastcall get_Name(void)
  {
    VARIANT Name;
    OLECHECK(this->get_Name((VARIANT*)&Name));
    return Name;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH ppidispatch;
    OLECHECK(this->get_Parent((LPDISPATCH*)&ppidispatch));
    return ppidispatch;
  }

  VARIANT __fastcall get_Size(void)
  {
    VARIANT Size;
    OLECHECK(this->get_Size((VARIANT*)&Size));
    return Size;
  }

  VARIANT __fastcall get_Underline(void)
  {
    VARIANT UnderlineStyle;
    OLECHECK(this->get_Underline((VARIANT*)&UnderlineStyle));
    return UnderlineStyle;
  }


  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   VARIANT_BOOL    Bold = {write = set_Bold};
  __property   int             ColorIndex = {write = set_ColorIndex};
  __property   VARIANT_BOOL    Italic = {write = set_Italic};
  __property   BSTR            Name = {write = set_Name};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   double          Size = {write = set_Size};
  __property   Owc10_xp::XlUnderlineStyle Underline = {write = set_Underline};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Interior
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6F5A761B-0AC7-4DED-9A6B-A3547FD7B7BB}
// *********************************************************************//
interface Interior  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Owc10_xp::ISpreadsheet** ppApp/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Color(VARIANT* Color/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Color(VARIANT* Color/*[in]*/) = 0; // [1610743809]
  virtual HRESULT STDMETHODCALLTYPE get_ColorIndex(VARIANT* ColorIndex/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_ColorIndex(int ColorIndex/*[in]*/) = 0; // [1610743811]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::ISpreadsheet* __fastcall get_Application(void)
  {
    Owc10_xp::ISpreadsheet* ppApp;
    OLECHECK(this->get_Application((Owc10_xp::ISpreadsheet**)&ppApp));
    return ppApp;
  }

  VARIANT __fastcall get_Color(void)
  {
    VARIANT Color;
    OLECHECK(this->get_Color((VARIANT*)&Color));
    return Color;
  }

  VARIANT __fastcall get_ColorIndex(void)
  {
    VARIANT ColorIndex;
    OLECHECK(this->get_ColorIndex((VARIANT*)&ColorIndex));
    return ColorIndex;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }


  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   int             ColorIndex = {write = set_ColorIndex};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Workbooks
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39BA5-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface Workbooks  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE get_Application(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Owc10_xp::Workbook** Workbook/*[out,retval]*/) = 0; // [0]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunk));
    return ppunk;
  }

  Owc10_xp::ISpreadsheet* __fastcall get_Application(void)
  {
    Owc10_xp::ISpreadsheet* Dispatch;
    OLECHECK(this->get_Application((Owc10_xp::ISpreadsheet**)&Dispatch));
    return Dispatch;
  }

  Owc10_xp::ISpreadsheet* __fastcall get_Parent(void)
  {
    Owc10_xp::ISpreadsheet* Dispatch;
    OLECHECK(this->get_Parent((Owc10_xp::ISpreadsheet**)&Dispatch));
    return Dispatch;
  }

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  Owc10_xp::Workbook* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Owc10_xp::Workbook* Workbook;
    OLECHECK(this->get_Item(Index, (Owc10_xp::Workbook**)&Workbook));
    return Workbook;
  }


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   Owc10_xp::ISpreadsheet* Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Borders
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A7D-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface Borders  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE get_Application(Owc10_xp::ISpreadsheet** ppApp/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Color(VARIANT* Color/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Color(VARIANT* Color/*[in]*/) = 0; // [1610743810]
  virtual HRESULT STDMETHODCALLTYPE get_ColorIndex(VARIANT* ColorIndex/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_ColorIndex(int ColorIndex/*[in]*/) = 0; // [1610743812]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Item(Owc10_xp::XlBordersIndex Index/*[in]*/, 
                                             Owc10_xp::Border** Border/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_LineStyle(VARIANT* LineStyle/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_LineStyle(Owc10_xp::XlLineStyle LineStyle/*[in]*/) = 0; // [1610743816]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Owc10_xp::_Range** Parent/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Value(VARIANT* LineStyle/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Value(Owc10_xp::XlLineStyle LineStyle/*[in]*/) = 0; // [1610743819]
  virtual HRESULT STDMETHODCALLTYPE get_Weight(VARIANT* LineWeight/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Weight(Owc10_xp::XlBorderWeight LineWeight/*[in]*/) = 0; // [1610743821]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunk));
    return ppunk;
  }

  Owc10_xp::ISpreadsheet* __fastcall get_Application(void)
  {
    Owc10_xp::ISpreadsheet* ppApp;
    OLECHECK(this->get_Application((Owc10_xp::ISpreadsheet**)&ppApp));
    return ppApp;
  }

  VARIANT __fastcall get_Color(void)
  {
    VARIANT Color;
    OLECHECK(this->get_Color((VARIANT*)&Color));
    return Color;
  }

  VARIANT __fastcall get_ColorIndex(void)
  {
    VARIANT ColorIndex;
    OLECHECK(this->get_ColorIndex((VARIANT*)&ColorIndex));
    return ColorIndex;
  }

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  Owc10_xp::Border* __fastcall get_Item(Owc10_xp::XlBordersIndex Index/*[in]*/)
  {
    Owc10_xp::Border* Border;
    OLECHECK(this->get_Item(Index, (Owc10_xp::Border**)&Border));
    return Border;
  }

  VARIANT __fastcall get_LineStyle(void)
  {
    VARIANT LineStyle;
    OLECHECK(this->get_LineStyle((VARIANT*)&LineStyle));
    return LineStyle;
  }

  Owc10_xp::_Range* __fastcall get_Parent(void)
  {
    Owc10_xp::_Range* Parent;
    OLECHECK(this->get_Parent((Owc10_xp::_Range**)&Parent));
    return Parent;
  }

  VARIANT __fastcall get_Value(void)
  {
    VARIANT LineStyle;
    OLECHECK(this->get_Value((VARIANT*)&LineStyle));
    return LineStyle;
  }

  VARIANT __fastcall get_Weight(void)
  {
    VARIANT LineWeight;
    OLECHECK(this->get_Weight((VARIANT*)&LineWeight));
    return LineWeight;
  }


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   int             ColorIndex = {write = set_ColorIndex};
  __property   long            Count = {read = get_Count};
  __property   Owc10_xp::XlLineStyle LineStyle = {write = set_LineStyle};
  __property   Owc10_xp::_Range* Parent = {read = get_Parent};
  __property   Owc10_xp::XlLineStyle Value = {write = set_Value};
  __property   Owc10_xp::XlBorderWeight Weight = {write = set_Weight};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Border
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6F5A7618-0AC7-4DED-9A6B-A3547FD7B7BB}
// *********************************************************************//
interface Border  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Owc10_xp::ISpreadsheet** ppApp/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Color(VARIANT* Color/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Color(VARIANT* Color/*[in]*/) = 0; // [1610743809]
  virtual HRESULT STDMETHODCALLTYPE get_ColorIndex(VARIANT* ColorIndex/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_ColorIndex(int ColorIndex/*[in]*/) = 0; // [1610743811]
  virtual HRESULT STDMETHODCALLTYPE get_LineStyle(VARIANT* LineStyle/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_LineStyle(Owc10_xp::XlLineStyle LineStyle/*[in]*/) = 0; // [1610743813]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Owc10_xp::_Range** Parent/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Weight(VARIANT* LineWeight/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Weight(Owc10_xp::XlBorderWeight LineWeight/*[in]*/) = 0; // [1610743816]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::ISpreadsheet* __fastcall get_Application(void)
  {
    Owc10_xp::ISpreadsheet* ppApp;
    OLECHECK(this->get_Application((Owc10_xp::ISpreadsheet**)&ppApp));
    return ppApp;
  }

  VARIANT __fastcall get_Color(void)
  {
    VARIANT Color;
    OLECHECK(this->get_Color((VARIANT*)&Color));
    return Color;
  }

  VARIANT __fastcall get_ColorIndex(void)
  {
    VARIANT ColorIndex;
    OLECHECK(this->get_ColorIndex((VARIANT*)&ColorIndex));
    return ColorIndex;
  }

  VARIANT __fastcall get_LineStyle(void)
  {
    VARIANT LineStyle;
    OLECHECK(this->get_LineStyle((VARIANT*)&LineStyle));
    return LineStyle;
  }

  Owc10_xp::_Range* __fastcall get_Parent(void)
  {
    Owc10_xp::_Range* Parent;
    OLECHECK(this->get_Parent((Owc10_xp::_Range**)&Parent));
    return Parent;
  }

  VARIANT __fastcall get_Weight(void)
  {
    VARIANT LineWeight;
    OLECHECK(this->get_Weight((VARIANT*)&LineWeight));
    return LineWeight;
  }


  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   int             ColorIndex = {write = set_ColorIndex};
  __property   Owc10_xp::XlLineStyle LineStyle = {write = set_LineStyle};
  __property   Owc10_xp::_Range* Parent = {read = get_Parent};
  __property   Owc10_xp::XlBorderWeight Weight = {write = set_Weight};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Hyperlink
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6F5A7620-0AC7-4DED-9A6B-A3547FD7B7BB}
// *********************************************************************//
interface Hyperlink  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Owc10_xp::ISpreadsheet** ppApp/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Address(BSTR* Address/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Address(BSTR Address/*[in]*/) = 0; // [1610743809]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Owc10_xp::_Range** Parent/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_SubAddress(BSTR* SubAddress/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_SubAddress(BSTR SubAddress/*[in]*/) = 0; // [1610743813]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Follow(VARIANT* NewWindow/*[in,opt]*/= TNoParam(), 
                                           VARIANT* AddHistory/*[in,opt]*/= TNoParam(), 
                                           VARIANT* ExtraInfo/*[in,opt]*/= TNoParam(), 
                                           VARIANT* Method/*[in,opt]*/= TNoParam(), 
                                           VARIANT* HeaderInfo/*[in,opt]*/= TNoParam()) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::ISpreadsheet* __fastcall get_Application(void)
  {
    Owc10_xp::ISpreadsheet* ppApp;
    OLECHECK(this->get_Application((Owc10_xp::ISpreadsheet**)&ppApp));
    return ppApp;
  }

  BSTR __fastcall get_Address(void)
  {
    BSTR Address = 0;
    OLECHECK(this->get_Address((BSTR*)&Address));
    return Address;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  Owc10_xp::_Range* __fastcall get_Parent(void)
  {
    Owc10_xp::_Range* Parent;
    OLECHECK(this->get_Parent((Owc10_xp::_Range**)&Parent));
    return Parent;
  }

  BSTR __fastcall get_SubAddress(void)
  {
    BSTR SubAddress = 0;
    OLECHECK(this->get_SubAddress((BSTR*)&SubAddress));
    return SubAddress;
  }


  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   BSTR            Address = {read = get_Address};
  __property   BSTR            Name = {read = get_Name};
  __property   Owc10_xp::_Range* Parent = {read = get_Parent};
  __property   BSTR            SubAddress = {read = get_SubAddress};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IOleCommandTargetArgument
// Flags:     (464) Hidden Dual NonExtensible OleAutomation
// GUID:      {FB8D568A-AE5F-4136-8223-6E24ABE10A28}
// *********************************************************************//
interface IOleCommandTargetArgument  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Value(VARIANT* Value/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Value(VARIANT Value/*[in]*/) = 0; // [1610678272]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT __fastcall get_Value(void)
  {
    VARIANT Value;
    OLECHECK(this->get_Value((VARIANT*)&Value));
    return Value;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _NumberFormat
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {81FDD9FE-6464-4A19-82AB-878823E85A5E}
// *********************************************************************//
interface _NumberFormat  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR Name/*[in]*/) = 0; // [1610743808]
  virtual HRESULT STDMETHODCALLTYPE get_Code(BSTR* Code/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Code(BSTR Code/*[in]*/) = 0; // [1610743810]
  virtual HRESULT STDMETHODCALLTYPE get_Format(VARIANT Value/*[in]*/, long Count/*[in,def,opt]*/, 
                                               BSTR* Format/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Width(long hDC/*[in]*/, VARIANT Value/*[in]*/, 
                                              long* Width/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Height(long hDC/*[in]*/, VARIANT Value/*[in]*/, 
                                               long* Height/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Render(long hDC/*[in]*/, long hDCInfo/*[in]*/, long cx1/*[in]*/, 
                                           long cy1/*[in]*/, long cx2/*[in]*/, long cy2/*[in]*/, 
                                           long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                           long Height/*[in]*/, long HorizontalAlignment/*[in]*/, 
                                           long VerticalAlignment/*[in]*/, VARIANT Value/*[in]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  BSTR __fastcall get_Code(void)
  {
    BSTR Code = 0;
    OLECHECK(this->get_Code((BSTR*)&Code));
    return Code;
  }

  BSTR __fastcall get_Format(VARIANT Value/*[in]*/, long Count/*[in,def,opt]*/)
  {
    BSTR Format = 0;
    OLECHECK(this->get_Format(Value, Count, (BSTR*)&Format));
    return Format;
  }

  long __fastcall get_Width(long hDC/*[in]*/, VARIANT Value/*[in]*/)
  {
    long Width;
    OLECHECK(this->get_Width(hDC, Value, (long*)&Width));
    return Width;
  }

  long __fastcall get_Height(long hDC/*[in]*/, VARIANT Value/*[in]*/)
  {
    long Height;
    OLECHECK(this->get_Height(hDC, Value, (long*)&Height));
    return Height;
  }


  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Code = {read = get_Code};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: OCDirty
// Flags:     (16) Hidden
// GUID:      {B166E2BE-A46C-49AC-A76C-D0F2D1257C16}
// *********************************************************************//
interface OCDirty  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE IsDirty(void) = 0; // [-1]
};

// *********************************************************************//
// Interface: IOMEvent
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F5B39AE3-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface IOMEvent  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_x(long* px/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_y(long* py/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_KeyCode(long* pvk/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_KeyChar(BSTR* Char/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Button(long* pbutton/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_AltKey(VARIANT_BOOL* pvb/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_CtrlKey(VARIANT_BOOL* pvb/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ShiftKey(VARIANT_BOOL* pvb/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_x(void)
  {
    long px;
    OLECHECK(this->get_x((long*)&px));
    return px;
  }

  long __fastcall get_y(void)
  {
    long py;
    OLECHECK(this->get_y((long*)&py));
    return py;
  }

  long __fastcall get_KeyCode(void)
  {
    long pvk;
    OLECHECK(this->get_KeyCode((long*)&pvk));
    return pvk;
  }

  BSTR __fastcall get_KeyChar(void)
  {
    BSTR Char = 0;
    OLECHECK(this->get_KeyChar((BSTR*)&Char));
    return Char;
  }

  long __fastcall get_Button(void)
  {
    long pbutton;
    OLECHECK(this->get_Button((long*)&pbutton));
    return pbutton;
  }

  VARIANT_BOOL __fastcall get_AltKey(void)
  {
    VARIANT_BOOL pvb;
    OLECHECK(this->get_AltKey((VARIANT_BOOL*)&pvb));
    return pvb;
  }

  VARIANT_BOOL __fastcall get_CtrlKey(void)
  {
    VARIANT_BOOL pvb;
    OLECHECK(this->get_CtrlKey((VARIANT_BOOL*)&pvb));
    return pvb;
  }

  VARIANT_BOOL __fastcall get_ShiftKey(void)
  {
    VARIANT_BOOL pvb;
    OLECHECK(this->get_ShiftKey((VARIANT_BOOL*)&pvb));
    return pvb;
  }


  __property   long            x = {read = get_x};
  __property   long            y = {read = get_y};
  __property   long            KeyCode = {read = get_KeyCode};
  __property   BSTR            KeyChar = {read = get_KeyChar};
  __property   long            Button = {read = get_Button};
  __property   VARIANT_BOOL    AltKey = {read = get_AltKey};
  __property   VARIANT_BOOL    CtrlKey = {read = get_CtrlKey};
  __property   VARIANT_BOOL    ShiftKey = {read = get_ShiftKey};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: DesignAdviseSink
// Flags:     (16) Hidden
// GUID:      {9B3E2331-87A6-11D1-BACD-00C04FAC6863}
// *********************************************************************//
interface DesignAdviseSink  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE ObjectAdded(Owc10_xp::DscObjectTypeEnum dscobjtyp, 
                                                VARIANT varObject, long fGrid) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE ObjectDeleted(Owc10_xp::DscObjectTypeEnum dscobjtyp, 
                                                  VARIANT varObject) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE ObjectMoved(Owc10_xp::DscObjectTypeEnum dscobjtyp, 
                                                VARIANT varObject, BSTR bstrRsd) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE DataModelLoad(void) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE ObjectChanged(Owc10_xp::DscObjectTypeEnum dscobjtyp, 
                                                  VARIANT varObject) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE ObjectDeleteComplete(Owc10_xp::DscObjectTypeEnum dscobjtyp) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE ObjectRenamed(Owc10_xp::DscObjectTypeEnum dscobjtyp, 
                                                  VARIANT varObject, BSTR bstrPreviousName) = 0; // [6]
};

// *********************************************************************//
// Interface: SchemaFields
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AA3-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface SchemaFields  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Owc10_xp::SchemaField** SchemaField/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Add(BSTR Name/*[in]*/, Adodb_xp::DataTypeEnum DataType/*[in]*/, 
                                        VARIANT Length/*[in,opt]*/, 
                                        Owc10_xp::SchemaField** SchemaField/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE Delete(VARIANT Index/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  Owc10_xp::SchemaField* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Owc10_xp::SchemaField* SchemaField;
    OLECHECK(this->get_Item(Index, (Owc10_xp::SchemaField**)&SchemaField));
    return SchemaField;
  }

  Owc10_xp::SchemaField* __fastcall Add(BSTR Name/*[in]*/, Adodb_xp::DataTypeEnum DataType/*[in]*/, 
                                        VARIANT Length/*[in,opt]*/= TNoParam())
  {
    Owc10_xp::SchemaField* SchemaField;
    OLECHECK(this->Add(Name, DataType, Length, (Owc10_xp::SchemaField**)&SchemaField));
    return SchemaField;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunk));
    return ppunk;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: SchemaField
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A67-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface SchemaField  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR Name/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_DataType(Adodb_xp::DataTypeEnum DataType/*[in]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_DataType(Adodb_xp::DataTypeEnum* DataType/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE set_Length(long Length/*[in]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_Length(long* Length/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE set_IsKey(VARIANT_BOOL IsKey/*[in]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_IsKey(VARIANT_BOOL* IsKey/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_IsRenamed(VARIANT_BOOL* IsRenamed/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE get_Properties(Owc10_xp::SchemaProperties** SchemaProperties/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_IsHyperlink(VARIANT_BOOL* IsHyperlink/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_BaseTableName(BSTR* BaseTableName/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE get_BaseColumnName(BSTR* BaseColumnName/*[out,retval]*/) = 0; // [13]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  Adodb_xp::DataTypeEnum __fastcall get_DataType(void)
  {
    Adodb_xp::DataTypeEnum DataType;
    OLECHECK(this->get_DataType((Adodb_xp::DataTypeEnum*)&DataType));
    return DataType;
  }

  long __fastcall get_Length(void)
  {
    long Length;
    OLECHECK(this->get_Length((long*)&Length));
    return Length;
  }

  VARIANT_BOOL __fastcall get_IsKey(void)
  {
    VARIANT_BOOL IsKey;
    OLECHECK(this->get_IsKey((VARIANT_BOOL*)&IsKey));
    return IsKey;
  }

  VARIANT_BOOL __fastcall get_IsRenamed(void)
  {
    VARIANT_BOOL IsRenamed;
    OLECHECK(this->get_IsRenamed((VARIANT_BOOL*)&IsRenamed));
    return IsRenamed;
  }

  Owc10_xp::SchemaProperties* __fastcall get_Properties(void)
  {
    Owc10_xp::SchemaProperties* SchemaProperties;
    OLECHECK(this->get_Properties((Owc10_xp::SchemaProperties**)&SchemaProperties));
    return SchemaProperties;
  }

  VARIANT_BOOL __fastcall get_IsHyperlink(void)
  {
    VARIANT_BOOL IsHyperlink;
    OLECHECK(this->get_IsHyperlink((VARIANT_BOOL*)&IsHyperlink));
    return IsHyperlink;
  }

  BSTR __fastcall get_BaseTableName(void)
  {
    BSTR BaseTableName = 0;
    OLECHECK(this->get_BaseTableName((BSTR*)&BaseTableName));
    return BaseTableName;
  }

  BSTR __fastcall get_BaseColumnName(void)
  {
    BSTR BaseColumnName = 0;
    OLECHECK(this->get_BaseColumnName((BSTR*)&BaseColumnName));
    return BaseColumnName;
  }


  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   Adodb_xp::DataTypeEnum DataType = {read = get_DataType, write = set_DataType};
  __property   long            Length = {read = get_Length, write = set_Length};
  __property   VARIANT_BOOL    IsKey = {read = get_IsKey, write = set_IsKey};
  __property   VARIANT_BOOL    IsRenamed = {read = get_IsRenamed};
  __property   Owc10_xp::SchemaProperties* Properties = {read = get_Properties};
  __property   VARIANT_BOOL    IsHyperlink = {read = get_IsHyperlink};
  __property   BSTR            BaseTableName = {read = get_BaseTableName};
  __property   BSTR            BaseColumnName = {read = get_BaseColumnName};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: SchemaProperties
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C233A511-A2BB-11D3-80F9-0050041DC1A6}
// *********************************************************************//
interface SchemaProperties  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Owc10_xp::SchemaProperty** SchemaProperty/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  Owc10_xp::SchemaProperty* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Owc10_xp::SchemaProperty* SchemaProperty;
    OLECHECK(this->get_Item(Index, (Owc10_xp::SchemaProperty**)&SchemaProperty));
    return SchemaProperty;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunk));
    return ppunk;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: SchemaProperty
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C233A512-A2BB-11D3-80F9-0050041DC1A6}
// *********************************************************************//
interface SchemaProperty  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Value(VARIANT* Value/*[out,retval]*/) = 0; // [1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  VARIANT __fastcall get_Value(void)
  {
    VARIANT Value;
    OLECHECK(this->get_Value((VARIANT*)&Value));
    return Value;
  }


  __property   BSTR            Name = {read = get_Name};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: SchemaDiagram
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {30C37029-25CD-11D4-8D9D-00500483860C}
// *********************************************************************//
interface SchemaDiagram  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_SchemaRowsources(Owc10_xp::SchemaRowsources** SchemaRowsources/*[out,retval]*/) = 0; // [1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  Owc10_xp::SchemaRowsources* __fastcall get_SchemaRowsources(void)
  {
    Owc10_xp::SchemaRowsources* SchemaRowsources;
    OLECHECK(this->get_SchemaRowsources((Owc10_xp::SchemaRowsources**)&SchemaRowsources));
    return SchemaRowsources;
  }


  __property   BSTR            Name = {read = get_Name};
  __property   Owc10_xp::SchemaRowsources* SchemaRowsources = {read = get_SchemaRowsources};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: SchemaRowsources
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AA4-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface SchemaRowsources  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Owc10_xp::SchemaRowsource** SchemaRowsource/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Add(BSTR Name/*[in]*/, 
                                        Owc10_xp::DscRowsourceTypeEnum RowsourceType/*[in]*/, 
                                        VARIANT CommandText/*[in,opt]*/, 
                                        Owc10_xp::SchemaRowsource** SchemaRowsource/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE AddNew(BSTR Name/*[in]*/, 
                                           Owc10_xp::DscRowsourceTypeEnum RowsourceType/*[in]*/, 
                                           VARIANT CommandText/*[in,opt]*/, 
                                           Owc10_xp::SchemaRowsource** SchemaRowsource/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE Delete(VARIANT Index/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  Owc10_xp::SchemaRowsource* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Owc10_xp::SchemaRowsource* SchemaRowsource;
    OLECHECK(this->get_Item(Index, (Owc10_xp::SchemaRowsource**)&SchemaRowsource));
    return SchemaRowsource;
  }

  Owc10_xp::SchemaRowsource* __fastcall Add(BSTR Name/*[in]*/, 
                                            Owc10_xp::DscRowsourceTypeEnum RowsourceType/*[in]*/, 
                                            VARIANT CommandText/*[in,opt]*/= TNoParam())
  {
    Owc10_xp::SchemaRowsource* SchemaRowsource;
    OLECHECK(this->Add(Name, RowsourceType, CommandText, (Owc10_xp::SchemaRowsource**)&SchemaRowsource));
    return SchemaRowsource;
  }

  Owc10_xp::SchemaRowsource* __fastcall AddNew(BSTR Name/*[in]*/, 
                                               Owc10_xp::DscRowsourceTypeEnum RowsourceType/*[in]*/, 
                                               VARIANT CommandText/*[in,opt]*/= TNoParam())
  {
    Owc10_xp::SchemaRowsource* SchemaRowsource;
    OLECHECK(this->AddNew(Name, RowsourceType, CommandText, (Owc10_xp::SchemaRowsource**)&SchemaRowsource));
    return SchemaRowsource;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunk));
    return ppunk;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: SchemaRowsource
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AC8-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface SchemaRowsource  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR Name/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Type(Owc10_xp::DscRowsourceTypeEnum RowsourceType/*[in]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Owc10_xp::DscRowsourceTypeEnum* RowsourceType/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_CommandText(BSTR* CommandText/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_SchemaFields(Owc10_xp::SchemaFields** SchemaFields/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_LookupSchemaRelationships(Owc10_xp::LookupSchemaRelationships** LookupSchemaRelationships/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_SublistSchemaRelationships(Owc10_xp::SublistSchemaRelationships** SublistSchemaRelationships/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_SchemaParameters(Owc10_xp::SchemaParameters** SchemaParameters/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_Properties(Owc10_xp::SchemaProperties** SchemaProperties/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_IsHidden(VARIANT_BOOL* pvfHidden/*[out,retval]*/) = 0; // [9]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  Owc10_xp::DscRowsourceTypeEnum __fastcall get_Type(void)
  {
    Owc10_xp::DscRowsourceTypeEnum RowsourceType;
    OLECHECK(this->get_Type((Owc10_xp::DscRowsourceTypeEnum*)&RowsourceType));
    return RowsourceType;
  }

  BSTR __fastcall get_CommandText(void)
  {
    BSTR CommandText = 0;
    OLECHECK(this->get_CommandText((BSTR*)&CommandText));
    return CommandText;
  }

  Owc10_xp::SchemaFields* __fastcall get_SchemaFields(void)
  {
    Owc10_xp::SchemaFields* SchemaFields;
    OLECHECK(this->get_SchemaFields((Owc10_xp::SchemaFields**)&SchemaFields));
    return SchemaFields;
  }

  Owc10_xp::LookupSchemaRelationships* __fastcall get_LookupSchemaRelationships(void)
  {
    Owc10_xp::LookupSchemaRelationships* LookupSchemaRelationships;
    OLECHECK(this->get_LookupSchemaRelationships((Owc10_xp::LookupSchemaRelationships**)&LookupSchemaRelationships));
    return LookupSchemaRelationships;
  }

  Owc10_xp::SublistSchemaRelationships* __fastcall get_SublistSchemaRelationships(void)
  {
    Owc10_xp::SublistSchemaRelationships* SublistSchemaRelationships;
    OLECHECK(this->get_SublistSchemaRelationships((Owc10_xp::SublistSchemaRelationships**)&SublistSchemaRelationships));
    return SublistSchemaRelationships;
  }

  Owc10_xp::SchemaParameters* __fastcall get_SchemaParameters(void)
  {
    Owc10_xp::SchemaParameters* SchemaParameters;
    OLECHECK(this->get_SchemaParameters((Owc10_xp::SchemaParameters**)&SchemaParameters));
    return SchemaParameters;
  }

  Owc10_xp::SchemaProperties* __fastcall get_Properties(void)
  {
    Owc10_xp::SchemaProperties* SchemaProperties;
    OLECHECK(this->get_Properties((Owc10_xp::SchemaProperties**)&SchemaProperties));
    return SchemaProperties;
  }

  VARIANT_BOOL __fastcall get_IsHidden(void)
  {
    VARIANT_BOOL pvfHidden;
    OLECHECK(this->get_IsHidden((VARIANT_BOOL*)&pvfHidden));
    return pvfHidden;
  }


  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   Owc10_xp::DscRowsourceTypeEnum Type = {read = get_Type, write = set_Type};
  __property   BSTR            CommandText = {read = get_CommandText};
  __property   Owc10_xp::SchemaFields* SchemaFields = {read = get_SchemaFields};
  __property   Owc10_xp::LookupSchemaRelationships* LookupSchemaRelationships = {read = get_LookupSchemaRelationships};
  __property   Owc10_xp::SublistSchemaRelationships* SublistSchemaRelationships = {read = get_SublistSchemaRelationships};
  __property   Owc10_xp::SchemaParameters* SchemaParameters = {read = get_SchemaParameters};
  __property   Owc10_xp::SchemaProperties* Properties = {read = get_Properties};
  __property   VARIANT_BOOL    IsHidden = {read = get_IsHidden};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: LookupSchemaRelationships
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AF1-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface LookupSchemaRelationships  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Owc10_xp::SchemaRelationship** SchemaRelationship/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  Owc10_xp::SchemaRelationship* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Owc10_xp::SchemaRelationship* SchemaRelationship;
    OLECHECK(this->get_Item(Index, (Owc10_xp::SchemaRelationship**)&SchemaRelationship));
    return SchemaRelationship;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunk));
    return ppunk;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: SchemaRelationship
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AEE-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface SchemaRelationship  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_ManySide(BSTR* ManySchemaRowsource/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_OneSide(BSTR* OneSchemaRowsource/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_SchemaRelatedFields(Owc10_xp::SchemaRelatedFields** SchemaRelatedFields/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_Location(Owc10_xp::DscLocationEnum plocation/*[in]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_Location(Owc10_xp::DscLocationEnum* plocation/*[out,retval]*/) = 0; // [5]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  BSTR __fastcall get_ManySide(void)
  {
    BSTR ManySchemaRowsource = 0;
    OLECHECK(this->get_ManySide((BSTR*)&ManySchemaRowsource));
    return ManySchemaRowsource;
  }

  BSTR __fastcall get_OneSide(void)
  {
    BSTR OneSchemaRowsource = 0;
    OLECHECK(this->get_OneSide((BSTR*)&OneSchemaRowsource));
    return OneSchemaRowsource;
  }

  Owc10_xp::SchemaRelatedFields* __fastcall get_SchemaRelatedFields(void)
  {
    Owc10_xp::SchemaRelatedFields* SchemaRelatedFields;
    OLECHECK(this->get_SchemaRelatedFields((Owc10_xp::SchemaRelatedFields**)&SchemaRelatedFields));
    return SchemaRelatedFields;
  }

  Owc10_xp::DscLocationEnum __fastcall get_Location(void)
  {
    Owc10_xp::DscLocationEnum plocation;
    OLECHECK(this->get_Location((Owc10_xp::DscLocationEnum*)&plocation));
    return plocation;
  }


  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            ManySide = {read = get_ManySide};
  __property   BSTR            OneSide = {read = get_OneSide};
  __property   Owc10_xp::SchemaRelatedFields* SchemaRelatedFields = {read = get_SchemaRelatedFields};
  __property   Owc10_xp::DscLocationEnum Location = {read = get_Location, write = set_Location};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: SchemaRelatedFields
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A6D-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface SchemaRelatedFields  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Owc10_xp::SchemaRelatedField** ppSchemaRelatedField/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Add(BSTR ManySchemaField/*[in]*/, BSTR OneSchemaField/*[in]*/, 
                                        Owc10_xp::SchemaRelatedField** SchemaRelatedField/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  Owc10_xp::SchemaRelatedField* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Owc10_xp::SchemaRelatedField* ppSchemaRelatedField;
    OLECHECK(this->get_Item(Index, (Owc10_xp::SchemaRelatedField**)&ppSchemaRelatedField));
    return ppSchemaRelatedField;
  }

  Owc10_xp::SchemaRelatedField* __fastcall Add(BSTR ManySchemaField/*[in]*/, 
                                               BSTR OneSchemaField/*[in]*/)
  {
    Owc10_xp::SchemaRelatedField* SchemaRelatedField;
    OLECHECK(this->Add(ManySchemaField, OneSchemaField, (Owc10_xp::SchemaRelatedField**)&SchemaRelatedField));
    return SchemaRelatedField;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunk));
    return ppunk;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: SchemaRelatedField
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A6E-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface SchemaRelatedField  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_ManySide(BSTR* ManySchemaField/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_OneSide(BSTR* OneSchemaField/*[out,retval]*/) = 0; // [2]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  BSTR __fastcall get_ManySide(void)
  {
    BSTR ManySchemaField = 0;
    OLECHECK(this->get_ManySide((BSTR*)&ManySchemaField));
    return ManySchemaField;
  }

  BSTR __fastcall get_OneSide(void)
  {
    BSTR OneSchemaField = 0;
    OLECHECK(this->get_OneSide((BSTR*)&OneSchemaField));
    return OneSchemaField;
  }


  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            ManySide = {read = get_ManySide};
  __property   BSTR            OneSide = {read = get_OneSide};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: SublistSchemaRelationships
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AF0-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface SublistSchemaRelationships  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Owc10_xp::SchemaRelationship** SchemaRelationship/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  Owc10_xp::SchemaRelationship* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Owc10_xp::SchemaRelationship* SchemaRelationship;
    OLECHECK(this->get_Item(Index, (Owc10_xp::SchemaRelationship**)&SchemaRelationship));
    return SchemaRelationship;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunk));
    return ppunk;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: SchemaParameters
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AED-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface SchemaParameters  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Owc10_xp::SchemaParameter** Parameter/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE Add(BSTR Name/*[in]*/, VARIANT DataType/*[in,opt]*/, 
                                        VARIANT Size/*[in,opt]*/, VARIANT Scale/*[in,opt]*/, 
                                        VARIANT Precision/*[in,opt]*/, VARIANT Direction/*[in,opt]*/, 
                                        Owc10_xp::SchemaParameter** SchemaParameter/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::SchemaParameter* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Owc10_xp::SchemaParameter* Parameter;
    OLECHECK(this->get_Item(Index, (Owc10_xp::SchemaParameter**)&Parameter));
    return Parameter;
  }

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  Owc10_xp::SchemaParameter* __fastcall Add(BSTR Name/*[in]*/, 
                                            VARIANT DataType/*[in,opt]*/= TNoParam(), 
                                            VARIANT Size/*[in,opt]*/= TNoParam(), 
                                            VARIANT Scale/*[in,opt]*/= TNoParam(), 
                                            VARIANT Precision/*[in,opt]*/= TNoParam(), 
                                            VARIANT Direction/*[in,opt]*/= TNoParam())
  {
    Owc10_xp::SchemaParameter* SchemaParameter;
    OLECHECK(this->Add(Name, DataType, Size, Scale, Precision, Direction, (Owc10_xp::SchemaParameter**)&SchemaParameter));
    return SchemaParameter;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunk));
    return ppunk;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: SchemaParameter
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A89-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface SchemaParameter  : public Owc10_xp::SchemaField
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_NumericScale(long* Scale/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_Precision(long* Precision/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_Direction(Adodb_xp::ParameterDirectionEnum* Direction/*[out,retval]*/) = 0; // [6]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_NumericScale(void)
  {
    long Scale;
    OLECHECK(this->get_NumericScale((long*)&Scale));
    return Scale;
  }

  long __fastcall get_Precision(void)
  {
    long Precision;
    OLECHECK(this->get_Precision((long*)&Precision));
    return Precision;
  }

  Adodb_xp::ParameterDirectionEnum __fastcall get_Direction(void)
  {
    Adodb_xp::ParameterDirectionEnum Direction;
    OLECHECK(this->get_Direction((Adodb_xp::ParameterDirectionEnum*)&Direction));
    return Direction;
  }


  __property   long            NumericScale = {read = get_NumericScale};
  __property   long            Precision = {read = get_Precision};
  __property   Adodb_xp::ParameterDirectionEnum Direction = {read = get_Direction};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: SchemaDiagrams
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {30C37028-25CD-11D4-8D9D-00500483860C}
// *********************************************************************//
interface SchemaDiagrams  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Owc10_xp::SchemaDiagram** SchemaDiagram/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  Owc10_xp::SchemaDiagram* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Owc10_xp::SchemaDiagram* SchemaDiagram;
    OLECHECK(this->get_Item(Index, (Owc10_xp::SchemaDiagram**)&SchemaDiagram));
    return SchemaDiagram;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunk));
    return ppunk;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: SchemaRelationships
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A6C-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface SchemaRelationships  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Owc10_xp::SchemaRelationship** SchemaRelationship/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Add(BSTR Name/*[in]*/, BSTR ManySchemaRowsource/*[in]*/, 
                                        BSTR OneSchemaRowsource/*[in]*/, 
                                        BSTR ManySchemaField/*[in]*/, BSTR OneSchemaField/*[in]*/, 
                                        Owc10_xp::SchemaRelationship** SchemaRelationship/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE AddNew(BSTR Name/*[in]*/, BSTR ManySchemaRowsource/*[in]*/, 
                                           BSTR OneSchemaRowsource/*[in]*/, 
                                           BSTR ManySchemaField/*[in]*/, BSTR OneSchemaField/*[in]*/, 
                                           Owc10_xp::SchemaRelationship** SchemaRelationship/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE Delete(VARIANT Index/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  Owc10_xp::SchemaRelationship* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Owc10_xp::SchemaRelationship* SchemaRelationship;
    OLECHECK(this->get_Item(Index, (Owc10_xp::SchemaRelationship**)&SchemaRelationship));
    return SchemaRelationship;
  }

  Owc10_xp::SchemaRelationship* __fastcall Add(BSTR Name/*[in]*/, BSTR ManySchemaRowsource/*[in]*/, 
                                               BSTR OneSchemaRowsource/*[in]*/, 
                                               BSTR ManySchemaField/*[in]*/, 
                                               BSTR OneSchemaField/*[in]*/)
  {
    Owc10_xp::SchemaRelationship* SchemaRelationship;
    OLECHECK(this->Add(Name, ManySchemaRowsource, OneSchemaRowsource, ManySchemaField, 
                       OneSchemaField, (Owc10_xp::SchemaRelationship**)&SchemaRelationship));
    return SchemaRelationship;
  }

  Owc10_xp::SchemaRelationship* __fastcall AddNew(BSTR Name/*[in]*/, 
                                                  BSTR ManySchemaRowsource/*[in]*/, 
                                                  BSTR OneSchemaRowsource/*[in]*/, 
                                                  BSTR ManySchemaField/*[in]*/, 
                                                  BSTR OneSchemaField/*[in]*/)
  {
    Owc10_xp::SchemaRelationship* SchemaRelationship;
    OLECHECK(this->AddNew(Name, ManySchemaRowsource, OneSchemaRowsource, ManySchemaField, 
                          OneSchemaField, (Owc10_xp::SchemaRelationship**)&SchemaRelationship));
    return SchemaRelationship;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunk));
    return ppunk;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PageRowsources
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AA5-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface PageRowsources  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Owc10_xp::PageRowsource** PageRowsource/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  Owc10_xp::PageRowsource* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Owc10_xp::PageRowsource* PageRowsource;
    OLECHECK(this->get_Item(Index, (Owc10_xp::PageRowsource**)&PageRowsource));
    return PageRowsource;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunk));
    return ppunk;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PageRowsource
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A9F-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface PageRowsource  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Source(BSTR Source/*[in]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Source(BSTR* Source/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_RecordsetDef(Owc10_xp::RecordsetDef** RecordsetDef/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_PageFields(Owc10_xp::PageFields** PageFields/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_LookupRelationships(Owc10_xp::LookupRelationships** LookupRelationships/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE Promote(Owc10_xp::RecordsetDef** RecordsetDef/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE IsBound(VARIANT_BOOL* IsBound/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [7]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  BSTR __fastcall get_Source(void)
  {
    BSTR Source = 0;
    OLECHECK(this->get_Source((BSTR*)&Source));
    return Source;
  }

  Owc10_xp::RecordsetDef* __fastcall get_RecordsetDef(void)
  {
    Owc10_xp::RecordsetDef* RecordsetDef;
    OLECHECK(this->get_RecordsetDef((Owc10_xp::RecordsetDef**)&RecordsetDef));
    return RecordsetDef;
  }

  Owc10_xp::PageFields* __fastcall get_PageFields(void)
  {
    Owc10_xp::PageFields* PageFields;
    OLECHECK(this->get_PageFields((Owc10_xp::PageFields**)&PageFields));
    return PageFields;
  }

  Owc10_xp::LookupRelationships* __fastcall get_LookupRelationships(void)
  {
    Owc10_xp::LookupRelationships* LookupRelationships;
    OLECHECK(this->get_LookupRelationships((Owc10_xp::LookupRelationships**)&LookupRelationships));
    return LookupRelationships;
  }

  Owc10_xp::RecordsetDef* __fastcall Promote(void)
  {
    Owc10_xp::RecordsetDef* RecordsetDef;
    OLECHECK(this->Promote((Owc10_xp::RecordsetDef**)&RecordsetDef));
    return RecordsetDef;
  }

  VARIANT_BOOL __fastcall IsBound(void)
  {
    VARIANT_BOOL IsBound;
    OLECHECK(this->IsBound((VARIANT_BOOL*)&IsBound));
    return IsBound;
  }


  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Source = {read = get_Source, write = set_Source};
  __property   Owc10_xp::RecordsetDef* RecordsetDef = {read = get_RecordsetDef};
  __property   Owc10_xp::PageFields* PageFields = {read = get_PageFields};
  __property   Owc10_xp::LookupRelationships* LookupRelationships = {read = get_LookupRelationships};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: RecordsetDef
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A9D-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface RecordsetDef  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR Name/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_ShapeText(Owc10_xp::DscFetchTypeEnum FetchType/*[in,def,opt]*/, 
                                                  BSTR* ShapeText/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE get_CommandText(BSTR* CommandText/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE set_DataEntry(VARIANT_BOOL DataEntry/*[in]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_DataEntry(VARIANT_BOOL* DataEntry/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE set_ServerFilter(BSTR ServerFilter/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_ServerFilter(BSTR* ServerFilter/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_PrimaryPageRowsource(Owc10_xp::PageRowsource** PageRowsource/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_SublistRelationships(Owc10_xp::SublistRelationships** SublistRelationships/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_PageFields(Owc10_xp::PageFields** PageFields/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_ParentRecordsetDef(Owc10_xp::RecordsetDef** RecordsetDef/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE Demote(Owc10_xp::RecordsetDef** RecordsetDef/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_GroupingDefs(Owc10_xp::GroupingDefs** GroupingDefs/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_ParameterValues(Owc10_xp::ParameterValues** ParameterValues/*[out,retval]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE get_PageRowsources(Owc10_xp::PageRowsources** PageRowsources/*[out,retval]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE set_UniqueTable(BSTR TableName/*[in]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE get_UniqueTable(BSTR* TableName/*[out,retval]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE set_ResyncCommand(BSTR Command/*[in]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE get_ResyncCommand(BSTR* Command/*[out,retval]*/) = 0; // [17]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  BSTR __fastcall get_ShapeText(Owc10_xp::DscFetchTypeEnum FetchType/*[in,def,opt]*/)
  {
    BSTR ShapeText = 0;
    OLECHECK(this->get_ShapeText(FetchType, (BSTR*)&ShapeText));
    return ShapeText;
  }

  BSTR __fastcall get_CommandText(void)
  {
    BSTR CommandText = 0;
    OLECHECK(this->get_CommandText((BSTR*)&CommandText));
    return CommandText;
  }

  VARIANT_BOOL __fastcall get_DataEntry(void)
  {
    VARIANT_BOOL DataEntry;
    OLECHECK(this->get_DataEntry((VARIANT_BOOL*)&DataEntry));
    return DataEntry;
  }

  BSTR __fastcall get_ServerFilter(void)
  {
    BSTR ServerFilter = 0;
    OLECHECK(this->get_ServerFilter((BSTR*)&ServerFilter));
    return ServerFilter;
  }

  Owc10_xp::PageRowsource* __fastcall get_PrimaryPageRowsource(void)
  {
    Owc10_xp::PageRowsource* PageRowsource;
    OLECHECK(this->get_PrimaryPageRowsource((Owc10_xp::PageRowsource**)&PageRowsource));
    return PageRowsource;
  }

  Owc10_xp::SublistRelationships* __fastcall get_SublistRelationships(void)
  {
    Owc10_xp::SublistRelationships* SublistRelationships;
    OLECHECK(this->get_SublistRelationships((Owc10_xp::SublistRelationships**)&SublistRelationships));
    return SublistRelationships;
  }

  Owc10_xp::PageFields* __fastcall get_PageFields(void)
  {
    Owc10_xp::PageFields* PageFields;
    OLECHECK(this->get_PageFields((Owc10_xp::PageFields**)&PageFields));
    return PageFields;
  }

  Owc10_xp::RecordsetDef* __fastcall get_ParentRecordsetDef(void)
  {
    Owc10_xp::RecordsetDef* RecordsetDef;
    OLECHECK(this->get_ParentRecordsetDef((Owc10_xp::RecordsetDef**)&RecordsetDef));
    return RecordsetDef;
  }

  Owc10_xp::RecordsetDef* __fastcall Demote(void)
  {
    Owc10_xp::RecordsetDef* RecordsetDef;
    OLECHECK(this->Demote((Owc10_xp::RecordsetDef**)&RecordsetDef));
    return RecordsetDef;
  }

  Owc10_xp::GroupingDefs* __fastcall get_GroupingDefs(void)
  {
    Owc10_xp::GroupingDefs* GroupingDefs;
    OLECHECK(this->get_GroupingDefs((Owc10_xp::GroupingDefs**)&GroupingDefs));
    return GroupingDefs;
  }

  Owc10_xp::ParameterValues* __fastcall get_ParameterValues(void)
  {
    Owc10_xp::ParameterValues* ParameterValues;
    OLECHECK(this->get_ParameterValues((Owc10_xp::ParameterValues**)&ParameterValues));
    return ParameterValues;
  }

  Owc10_xp::PageRowsources* __fastcall get_PageRowsources(void)
  {
    Owc10_xp::PageRowsources* PageRowsources;
    OLECHECK(this->get_PageRowsources((Owc10_xp::PageRowsources**)&PageRowsources));
    return PageRowsources;
  }

  BSTR __fastcall get_UniqueTable(void)
  {
    BSTR TableName = 0;
    OLECHECK(this->get_UniqueTable((BSTR*)&TableName));
    return TableName;
  }

  BSTR __fastcall get_ResyncCommand(void)
  {
    BSTR Command = 0;
    OLECHECK(this->get_ResyncCommand((BSTR*)&Command));
    return Command;
  }


  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            CommandText = {read = get_CommandText};
  __property   VARIANT_BOOL    DataEntry = {read = get_DataEntry, write = set_DataEntry};
  __property   BSTR            ServerFilter = {read = get_ServerFilter, write = set_ServerFilter};
  __property   Owc10_xp::PageRowsource* PrimaryPageRowsource = {read = get_PrimaryPageRowsource};
  __property   Owc10_xp::SublistRelationships* SublistRelationships = {read = get_SublistRelationships};
  __property   Owc10_xp::PageFields* PageFields = {read = get_PageFields};
  __property   Owc10_xp::RecordsetDef* ParentRecordsetDef = {read = get_ParentRecordsetDef};
  __property   Owc10_xp::GroupingDefs* GroupingDefs = {read = get_GroupingDefs};
  __property   Owc10_xp::ParameterValues* ParameterValues = {read = get_ParameterValues};
  __property   Owc10_xp::PageRowsources* PageRowsources = {read = get_PageRowsources};
  __property   BSTR            UniqueTable = {read = get_UniqueTable, write = set_UniqueTable};
  __property   BSTR            ResyncCommand = {read = get_ResyncCommand, write = set_ResyncCommand};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: SublistRelationships
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AE1-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface SublistRelationships  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Owc10_xp::PageRelationship** PageRelationship/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Add(Owc10_xp::PageRowsource* PageRowsource/*[in]*/, 
                                        Owc10_xp::SchemaRelationship* SchemaRelationship/*[in]*/, 
                                        Owc10_xp::PageRelationship** PageRelationship/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE Delete(VARIANT Index/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  Owc10_xp::PageRelationship* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Owc10_xp::PageRelationship* PageRelationship;
    OLECHECK(this->get_Item(Index, (Owc10_xp::PageRelationship**)&PageRelationship));
    return PageRelationship;
  }

  Owc10_xp::PageRelationship* __fastcall Add(Owc10_xp::PageRowsource* PageRowsource/*[in]*/, 
                                             Owc10_xp::SchemaRelationship* SchemaRelationship/*[in]*/)
  {
    Owc10_xp::PageRelationship* PageRelationship;
    OLECHECK(this->Add(PageRowsource, SchemaRelationship, (Owc10_xp::PageRelationship**)&PageRelationship));
    return PageRelationship;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunk));
    return ppunk;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PageRelationship
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A6B-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface PageRelationship  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Owc10_xp::DscPageRelTypeEnum* Reltype/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE set_JoinType(Owc10_xp::DscJoinTypeEnum JoinType) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_JoinType(Owc10_xp::DscJoinTypeEnum* JoinType/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_ManySide(Owc10_xp::PageRowsource** PageRowsource/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_OneSide(Owc10_xp::PageRowsource** PageRowsource/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_PageRelatedFields(Owc10_xp::PageRelatedFields** PageRelatedFields/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [6]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  Owc10_xp::DscPageRelTypeEnum __fastcall get_Type(void)
  {
    Owc10_xp::DscPageRelTypeEnum Reltype;
    OLECHECK(this->get_Type((Owc10_xp::DscPageRelTypeEnum*)&Reltype));
    return Reltype;
  }

  Owc10_xp::DscJoinTypeEnum __fastcall get_JoinType(void)
  {
    Owc10_xp::DscJoinTypeEnum JoinType;
    OLECHECK(this->get_JoinType((Owc10_xp::DscJoinTypeEnum*)&JoinType));
    return JoinType;
  }

  Owc10_xp::PageRowsource* __fastcall get_ManySide(void)
  {
    Owc10_xp::PageRowsource* PageRowsource;
    OLECHECK(this->get_ManySide((Owc10_xp::PageRowsource**)&PageRowsource));
    return PageRowsource;
  }

  Owc10_xp::PageRowsource* __fastcall get_OneSide(void)
  {
    Owc10_xp::PageRowsource* PageRowsource;
    OLECHECK(this->get_OneSide((Owc10_xp::PageRowsource**)&PageRowsource));
    return PageRowsource;
  }

  Owc10_xp::PageRelatedFields* __fastcall get_PageRelatedFields(void)
  {
    Owc10_xp::PageRelatedFields* PageRelatedFields;
    OLECHECK(this->get_PageRelatedFields((Owc10_xp::PageRelatedFields**)&PageRelatedFields));
    return PageRelatedFields;
  }


  __property   BSTR            Name = {read = get_Name};
  __property   Owc10_xp::DscPageRelTypeEnum Type = {read = get_Type};
  __property   Owc10_xp::DscJoinTypeEnum JoinType = {read = get_JoinType, write = set_JoinType};
  __property   Owc10_xp::PageRowsource* ManySide = {read = get_ManySide};
  __property   Owc10_xp::PageRowsource* OneSide = {read = get_OneSide};
  __property   Owc10_xp::PageRelatedFields* PageRelatedFields = {read = get_PageRelatedFields};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PageRelatedFields
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A6F-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface PageRelatedFields  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Owc10_xp::PageRelatedField** PageRelatedField/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  Owc10_xp::PageRelatedField* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Owc10_xp::PageRelatedField* PageRelatedField;
    OLECHECK(this->get_Item(Index, (Owc10_xp::PageRelatedField**)&PageRelatedField));
    return PageRelatedField;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunk));
    return ppunk;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PageRelatedField
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A70-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface PageRelatedField  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_ManySide(Owc10_xp::PageField** PageField/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_OneSide(Owc10_xp::PageField** PageField/*[out,retval]*/) = 0; // [1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::PageField* __fastcall get_ManySide(void)
  {
    Owc10_xp::PageField* PageField;
    OLECHECK(this->get_ManySide((Owc10_xp::PageField**)&PageField));
    return PageField;
  }

  Owc10_xp::PageField* __fastcall get_OneSide(void)
  {
    Owc10_xp::PageField* PageField;
    OLECHECK(this->get_OneSide((Owc10_xp::PageField**)&PageField));
    return PageField;
  }


  __property   Owc10_xp::PageField* ManySide = {read = get_ManySide};
  __property   Owc10_xp::PageField* OneSide = {read = get_OneSide};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PageField
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AC7-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface PageField  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR Name/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_FieldType(Owc10_xp::DscFieldTypeEnum* FieldType/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE set_TotalType(Owc10_xp::DscTotalTypeEnum TotalType/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_TotalType(Owc10_xp::DscTotalTypeEnum* TotalType/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_GroupOn(Owc10_xp::DscGroupOnEnum GroupOn/*[in]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_GroupOn(Owc10_xp::DscGroupOnEnum* GroupOn/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE set_GroupInterval(double Interval/*[in]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_GroupInterval(double* Interval/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_PageRowsource(Owc10_xp::PageRowsource** PageRowsource/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_RecordsetDef(Owc10_xp::RecordsetDef** RecordsetDef/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE MoveGrouping(BSTR GroupingDefDest/*[in]*/, 
                                                 VARIANT Index/*[in,opt]*/, 
                                                 Owc10_xp::GroupingDef** GroupingDef/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE set_Location(Owc10_xp::DscLocationEnum Location/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_Location(Owc10_xp::DscLocationEnum* Location/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE set_Source(BSTR Source/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_Source(BSTR* Source/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_DataType(Adodb_xp::DataTypeEnum* DataType/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_Length(long* Length/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_SchemaField(Owc10_xp::SchemaField** SchemaField/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE IsBound(VARIANT_BOOL* IsBound/*[out,retval]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE ValidateTotalType(Owc10_xp::DscTotalTypeEnum TotalType/*[in]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE DefaultName(BSTR* DefaultName/*[out,retval]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE DefaultCaption(BSTR* DefaultCaption/*[out,retval]*/) = 0; // [17]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  Owc10_xp::DscFieldTypeEnum __fastcall get_FieldType(void)
  {
    Owc10_xp::DscFieldTypeEnum FieldType;
    OLECHECK(this->get_FieldType((Owc10_xp::DscFieldTypeEnum*)&FieldType));
    return FieldType;
  }

  Owc10_xp::DscTotalTypeEnum __fastcall get_TotalType(void)
  {
    Owc10_xp::DscTotalTypeEnum TotalType;
    OLECHECK(this->get_TotalType((Owc10_xp::DscTotalTypeEnum*)&TotalType));
    return TotalType;
  }

  Owc10_xp::DscGroupOnEnum __fastcall get_GroupOn(void)
  {
    Owc10_xp::DscGroupOnEnum GroupOn;
    OLECHECK(this->get_GroupOn((Owc10_xp::DscGroupOnEnum*)&GroupOn));
    return GroupOn;
  }

  double __fastcall get_GroupInterval(void)
  {
    double Interval;
    OLECHECK(this->get_GroupInterval((double*)&Interval));
    return Interval;
  }

  Owc10_xp::PageRowsource* __fastcall get_PageRowsource(void)
  {
    Owc10_xp::PageRowsource* PageRowsource;
    OLECHECK(this->get_PageRowsource((Owc10_xp::PageRowsource**)&PageRowsource));
    return PageRowsource;
  }

  Owc10_xp::RecordsetDef* __fastcall get_RecordsetDef(void)
  {
    Owc10_xp::RecordsetDef* RecordsetDef;
    OLECHECK(this->get_RecordsetDef((Owc10_xp::RecordsetDef**)&RecordsetDef));
    return RecordsetDef;
  }

  Owc10_xp::GroupingDef* __fastcall MoveGrouping(BSTR GroupingDefDest/*[in]*/, 
                                                 VARIANT Index/*[in,opt]*/= TNoParam())
  {
    Owc10_xp::GroupingDef* GroupingDef;
    OLECHECK(this->MoveGrouping(GroupingDefDest, Index, (Owc10_xp::GroupingDef**)&GroupingDef));
    return GroupingDef;
  }

  Owc10_xp::DscLocationEnum __fastcall get_Location(void)
  {
    Owc10_xp::DscLocationEnum Location;
    OLECHECK(this->get_Location((Owc10_xp::DscLocationEnum*)&Location));
    return Location;
  }

  BSTR __fastcall get_Source(void)
  {
    BSTR Source = 0;
    OLECHECK(this->get_Source((BSTR*)&Source));
    return Source;
  }

  Adodb_xp::DataTypeEnum __fastcall get_DataType(void)
  {
    Adodb_xp::DataTypeEnum DataType;
    OLECHECK(this->get_DataType((Adodb_xp::DataTypeEnum*)&DataType));
    return DataType;
  }

  long __fastcall get_Length(void)
  {
    long Length;
    OLECHECK(this->get_Length((long*)&Length));
    return Length;
  }

  Owc10_xp::SchemaField* __fastcall get_SchemaField(void)
  {
    Owc10_xp::SchemaField* SchemaField;
    OLECHECK(this->get_SchemaField((Owc10_xp::SchemaField**)&SchemaField));
    return SchemaField;
  }

  VARIANT_BOOL __fastcall IsBound(void)
  {
    VARIANT_BOOL IsBound;
    OLECHECK(this->IsBound((VARIANT_BOOL*)&IsBound));
    return IsBound;
  }

  BSTR __fastcall DefaultName(void)
  {
    BSTR DefaultName = 0;
    OLECHECK(this->DefaultName((BSTR*)&DefaultName));
    return DefaultName;
  }

  BSTR __fastcall DefaultCaption(void)
  {
    BSTR DefaultCaption = 0;
    OLECHECK(this->DefaultCaption((BSTR*)&DefaultCaption));
    return DefaultCaption;
  }


  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   Owc10_xp::DscFieldTypeEnum FieldType = {read = get_FieldType};
  __property   Owc10_xp::DscTotalTypeEnum TotalType = {read = get_TotalType, write = set_TotalType};
  __property   Owc10_xp::DscGroupOnEnum GroupOn = {read = get_GroupOn, write = set_GroupOn};
  __property   double          GroupInterval = {read = get_GroupInterval, write = set_GroupInterval};
  __property   Owc10_xp::PageRowsource* PageRowsource = {read = get_PageRowsource};
  __property   Owc10_xp::RecordsetDef* RecordsetDef = {read = get_RecordsetDef};
  __property   Owc10_xp::DscLocationEnum Location = {read = get_Location, write = set_Location};
  __property   BSTR            Source = {read = get_Source, write = set_Source};
  __property   Adodb_xp::DataTypeEnum DataType = {read = get_DataType};
  __property   long            Length = {read = get_Length};
  __property   Owc10_xp::SchemaField* SchemaField = {read = get_SchemaField};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: GroupingDef
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A7B-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface GroupingDef  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR Name/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_PageFields(Owc10_xp::PageFields** PageFields/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [2]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  Owc10_xp::PageFields* __fastcall get_PageFields(void)
  {
    Owc10_xp::PageFields* PageFields;
    OLECHECK(this->get_PageFields((Owc10_xp::PageFields**)&PageFields));
    return PageFields;
  }


  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   Owc10_xp::PageFields* PageFields = {read = get_PageFields};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PageFields
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AB1-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface PageFields  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Owc10_xp::PageField** PageField/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE Delete(VARIANT Index/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE Add(VARIANT Source/*[in]*/, VARIANT FieldType/*[in,opt]*/, 
                                        VARIANT Name/*[in,opt]*/, 
                                        Owc10_xp::DscTotalTypeEnum TotalType/*[in,def,opt]*/, 
                                        VARIANT Index/*[in,opt]*/, 
                                        Owc10_xp::PageField** PageField/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE AddBroken(VARIANT Source/*[in]*/, VARIANT FieldType/*[in,opt]*/, 
                                              VARIANT Name/*[in,opt]*/, 
                                              Owc10_xp::DscTotalTypeEnum TotalType/*[in,def,opt]*/, 
                                              VARIANT Index/*[in,opt]*/, 
                                              Owc10_xp::PageField** PageField/*[out,retval]*/) = 0; // [5]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::PageField* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Owc10_xp::PageField* PageField;
    OLECHECK(this->get_Item(Index, (Owc10_xp::PageField**)&PageField));
    return PageField;
  }

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  Owc10_xp::PageField* __fastcall Add(VARIANT Source/*[in]*/, VARIANT FieldType/*[in,opt]*/, 
                                      VARIANT Name/*[in,opt]*/, 
                                      Owc10_xp::DscTotalTypeEnum TotalType/*[in,def,opt]*/, 
                                      VARIANT Index/*[in,opt]*/)
  {
    Owc10_xp::PageField* PageField;
    OLECHECK(this->Add(Source, FieldType, Name, TotalType, Index, (Owc10_xp::PageField**)&PageField));
    return PageField;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunk));
    return ppunk;
  }

  Owc10_xp::PageField* __fastcall AddBroken(VARIANT Source/*[in]*/, VARIANT FieldType/*[in,opt]*/, 
                                            VARIANT Name/*[in,opt]*/, 
                                            Owc10_xp::DscTotalTypeEnum TotalType/*[in,def,opt]*/, 
                                            VARIANT Index/*[in,opt]*/)
  {
    Owc10_xp::PageField* PageField;
    OLECHECK(this->AddBroken(Source, FieldType, Name, TotalType, Index, (Owc10_xp::PageField**)&PageField));
    return PageField;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: GroupingDefs
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A7C-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface GroupingDefs  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Owc10_xp::GroupingDef** GroupingDef/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Add(BSTR GroupingDefName/*[in]*/, BSTR GroupingFieldName/*[in]*/, 
                                        BSTR PageFieldName/*[in]*/, VARIANT Index/*[in,opt]*/, 
                                        Owc10_xp::GroupingDef** GroupingDef/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE AddTotal(BSTR GroupingDefName/*[in]*/, 
                                             BSTR GroupingFieldName/*[in]*/, 
                                             BSTR PageFieldName/*[in]*/, 
                                             Owc10_xp::DscTotalTypeEnum TotalType/*[in]*/, 
                                             VARIANT Index/*[in,opt]*/, 
                                             Owc10_xp::GroupingDef** GroupingDef/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE Delete(VARIANT Index/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  Owc10_xp::GroupingDef* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Owc10_xp::GroupingDef* GroupingDef;
    OLECHECK(this->get_Item(Index, (Owc10_xp::GroupingDef**)&GroupingDef));
    return GroupingDef;
  }

  Owc10_xp::GroupingDef* __fastcall Add(BSTR GroupingDefName/*[in]*/, BSTR GroupingFieldName/*[in]*/, 
                                        BSTR PageFieldName/*[in]*/, 
                                        VARIANT Index/*[in,opt]*/= TNoParam())
  {
    Owc10_xp::GroupingDef* GroupingDef;
    OLECHECK(this->Add(GroupingDefName, GroupingFieldName, PageFieldName, Index, (Owc10_xp::GroupingDef**)&GroupingDef));
    return GroupingDef;
  }

  Owc10_xp::GroupingDef* __fastcall AddTotal(BSTR GroupingDefName/*[in]*/, 
                                             BSTR GroupingFieldName/*[in]*/, 
                                             BSTR PageFieldName/*[in]*/, 
                                             Owc10_xp::DscTotalTypeEnum TotalType/*[in]*/, 
                                             VARIANT Index/*[in,opt]*/= TNoParam())
  {
    Owc10_xp::GroupingDef* GroupingDef;
    OLECHECK(this->AddTotal(GroupingDefName, GroupingFieldName, PageFieldName, TotalType, Index, (Owc10_xp::GroupingDef**)&GroupingDef));
    return GroupingDef;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunk));
    return ppunk;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ParameterValues
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AFF-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface ParameterValues  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Owc10_xp::ParameterValue** ParameterValue/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE Add(BSTR ParameterName/*[in]*/, VARIANT Value/*[in,opt]*/, 
                                        Owc10_xp::ParameterValue** ppPV/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE Delete(VARIANT Index/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::ParameterValue* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Owc10_xp::ParameterValue* ParameterValue;
    OLECHECK(this->get_Item(Index, (Owc10_xp::ParameterValue**)&ParameterValue));
    return ParameterValue;
  }

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  Owc10_xp::ParameterValue* __fastcall Add(BSTR ParameterName/*[in]*/, 
                                           VARIANT Value/*[in,opt]*/= TNoParam())
  {
    Owc10_xp::ParameterValue* ppPV;
    OLECHECK(this->Add(ParameterName, Value, (Owc10_xp::ParameterValue**)&ppPV));
    return ppPV;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunk));
    return ppunk;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ParameterValue
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B0F-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface ParameterValue  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Expression(BSTR* Expression/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE set_Expression(BSTR Expression/*[in]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Value(VARIANT* Value/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE set_Value(VARIANT Value/*[in]*/) = 0; // [2]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  BSTR __fastcall get_Expression(void)
  {
    BSTR Expression = 0;
    OLECHECK(this->get_Expression((BSTR*)&Expression));
    return Expression;
  }

  VARIANT __fastcall get_Value(void)
  {
    VARIANT Value;
    OLECHECK(this->get_Value((VARIANT*)&Value));
    return Value;
  }


  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Expression = {read = get_Expression};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: LookupRelationships
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A74-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface LookupRelationships  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Owc10_xp::PageRelationship** PageRelationship/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Add(Owc10_xp::PageRowsource* PageRowsource/*[in]*/, 
                                        Owc10_xp::SchemaRelationship* SchemaRelationship/*[in]*/, 
                                        Owc10_xp::PageRelationship** PageRelationship/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE Delete(VARIANT Index/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  Owc10_xp::PageRelationship* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Owc10_xp::PageRelationship* PageRelationship;
    OLECHECK(this->get_Item(Index, (Owc10_xp::PageRelationship**)&PageRelationship));
    return PageRelationship;
  }

  Owc10_xp::PageRelationship* __fastcall Add(Owc10_xp::PageRowsource* PageRowsource/*[in]*/, 
                                             Owc10_xp::SchemaRelationship* SchemaRelationship/*[in]*/)
  {
    Owc10_xp::PageRelationship* PageRelationship;
    OLECHECK(this->Add(PageRowsource, SchemaRelationship, (Owc10_xp::PageRelationship**)&PageRelationship));
    return PageRelationship;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunk));
    return ppunk;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: RecordsetDefs
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AA2-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface RecordsetDefs  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Owc10_xp::RecordsetDef** RecordsetDef/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Add(VARIANT SchemaRowsource/*[in]*/, VARIANT Name/*[in,opt]*/, 
                                        Owc10_xp::RecordsetDef** RecordsetDef/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE AddNew(BSTR Source/*[in]*/, VARIANT RowsourceType/*[in,opt]*/, 
                                           VARIANT Name/*[in,opt]*/, 
                                           Owc10_xp::RecordsetDef** RecordsetDef/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE Delete(VARIANT Index/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  Owc10_xp::RecordsetDef* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Owc10_xp::RecordsetDef* RecordsetDef;
    OLECHECK(this->get_Item(Index, (Owc10_xp::RecordsetDef**)&RecordsetDef));
    return RecordsetDef;
  }

  Owc10_xp::RecordsetDef* __fastcall Add(VARIANT SchemaRowsource/*[in]*/, 
                                         VARIANT Name/*[in,opt]*/= TNoParam())
  {
    Owc10_xp::RecordsetDef* RecordsetDef;
    OLECHECK(this->Add(SchemaRowsource, Name, (Owc10_xp::RecordsetDef**)&RecordsetDef));
    return RecordsetDef;
  }

  Owc10_xp::RecordsetDef* __fastcall AddNew(BSTR Source/*[in]*/, 
                                            VARIANT RowsourceType/*[in,opt]*/= TNoParam(), 
                                            VARIANT Name/*[in,opt]*/= TNoParam())
  {
    Owc10_xp::RecordsetDef* RecordsetDef;
    OLECHECK(this->AddNew(Source, RowsourceType, Name, (Owc10_xp::RecordsetDef**)&RecordsetDef));
    return RecordsetDef;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunk));
    return ppunk;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: AllPageFields
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B45-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface AllPageFields  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Owc10_xp::PageField** PageField/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  Owc10_xp::PageField* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Owc10_xp::PageField* PageField;
    OLECHECK(this->get_Item(Index, (Owc10_xp::PageField**)&PageField));
    return PageField;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunk));
    return ppunk;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: AllGroupingDefs
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AF9-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface AllGroupingDefs  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Owc10_xp::GroupingDef** GroupingDef/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  Owc10_xp::GroupingDef* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Owc10_xp::GroupingDef* GroupingDef;
    OLECHECK(this->get_Item(Index, (Owc10_xp::GroupingDef**)&GroupingDef));
    return GroupingDef;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunk));
    return ppunk;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IDARef
// Flags:     (5072) Hidden Dual NonExtensible OleAutomation Restricted Dispatchable
// GUID:      {97D6D375-23BB-11D1-A0E1-00C04FC9E20F}
// *********************************************************************//
interface IDARef  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_ObjType(long* pVal/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_ItemMoniker(BSTR* pVal/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_DAId(BSTR* pbstrDaid/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_Reltype(Owc10_xp::FieldListRelationshipTypeEnum* pfl/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_RelName(BSTR* bstr/*[out,retval]*/) = 0; // [5]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_ObjType(void)
  {
    long pVal;
    OLECHECK(this->get_ObjType((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ItemMoniker(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ItemMoniker((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_DAId(void)
  {
    BSTR pbstrDaid = 0;
    OLECHECK(this->get_DAId((BSTR*)&pbstrDaid));
    return pbstrDaid;
  }

  Owc10_xp::FieldListRelationshipTypeEnum __fastcall get_Reltype(void)
  {
    Owc10_xp::FieldListRelationshipTypeEnum pfl;
    OLECHECK(this->get_Reltype((Owc10_xp::FieldListRelationshipTypeEnum*)&pfl));
    return pfl;
  }

  BSTR __fastcall get_RelName(void)
  {
    BSTR bstr = 0;
    OLECHECK(this->get_RelName((BSTR*)&bstr));
    return bstr;
  }


  __property   long            ObjType = {read = get_ObjType};
  __property   BSTR            ItemMoniker = {read = get_ItemMoniker};
  __property   BSTR            DAId = {read = get_DAId};
  __property   Owc10_xp::FieldListRelationshipTypeEnum Reltype = {read = get_Reltype};
  __property   BSTR            RelName = {read = get_RelName};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Section
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A68-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface Section  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Type(Owc10_xp::SectTypeEnum* SectType/*[out,retval]*/) = 0; // [1106]
  virtual HRESULT STDMETHODCALLTYPE get_DataPage(Owc10_xp::DataPage** DataPage/*[out,retval]*/) = 0; // [1102]
  virtual HRESULT STDMETHODCALLTYPE get_HTMLContainer(LPDISPATCH* HTMLContainer/*[out,retval]*/) = 0; // [1103]
  virtual HRESULT STDMETHODCALLTYPE get_ParentSection(Owc10_xp::Section** Section/*[out,retval]*/) = 0; // [1107]
  virtual HRESULT STDMETHODCALLTYPE get_ChildSection(Owc10_xp::Section** Section/*[out,retval]*/) = 0; // [1108]
  virtual HRESULT STDMETHODCALLTYPE get_NextSibling(Owc10_xp::Section** Section/*[out,retval]*/) = 0; // [1109]
  virtual HRESULT STDMETHODCALLTYPE get_PreviousSibling(Owc10_xp::Section** Section/*[out,retval]*/) = 0; // [1110]
  virtual HRESULT STDMETHODCALLTYPE get_NextSection(Owc10_xp::Section** Section/*[out,retval]*/) = 0; // [1111]
  virtual HRESULT STDMETHODCALLTYPE get_PreviousSection(Owc10_xp::Section** Section/*[out,retval]*/) = 0; // [1112]
  virtual HRESULT STDMETHODCALLTYPE get_IsExpanded(VARIANT_BOOL* IsExpanded/*[out,retval]*/) = 0; // [1113]
  virtual HRESULT STDMETHODCALLTYPE Expand(void) = 0; // [1104]
  virtual HRESULT STDMETHODCALLTYPE Collapse(void) = 0; // [1105]
  virtual HRESULT STDMETHODCALLTYPE MakeCurrent(VARIANT_BOOL ScrollIntoView/*[in,def,opt]*/) = 0; // [1114]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::SectTypeEnum __fastcall get_Type(void)
  {
    Owc10_xp::SectTypeEnum SectType;
    OLECHECK(this->get_Type((Owc10_xp::SectTypeEnum*)&SectType));
    return SectType;
  }

  Owc10_xp::DataPage* __fastcall get_DataPage(void)
  {
    Owc10_xp::DataPage* DataPage;
    OLECHECK(this->get_DataPage((Owc10_xp::DataPage**)&DataPage));
    return DataPage;
  }

  LPDISPATCH __fastcall get_HTMLContainer(void)
  {
    LPDISPATCH HTMLContainer;
    OLECHECK(this->get_HTMLContainer((LPDISPATCH*)&HTMLContainer));
    return HTMLContainer;
  }

  Owc10_xp::Section* __fastcall get_ParentSection(void)
  {
    Owc10_xp::Section* Section;
    OLECHECK(this->get_ParentSection((Owc10_xp::Section**)&Section));
    return Section;
  }

  Owc10_xp::Section* __fastcall get_ChildSection(void)
  {
    Owc10_xp::Section* Section;
    OLECHECK(this->get_ChildSection((Owc10_xp::Section**)&Section));
    return Section;
  }

  Owc10_xp::Section* __fastcall get_NextSibling(void)
  {
    Owc10_xp::Section* Section;
    OLECHECK(this->get_NextSibling((Owc10_xp::Section**)&Section));
    return Section;
  }

  Owc10_xp::Section* __fastcall get_PreviousSibling(void)
  {
    Owc10_xp::Section* Section;
    OLECHECK(this->get_PreviousSibling((Owc10_xp::Section**)&Section));
    return Section;
  }

  Owc10_xp::Section* __fastcall get_NextSection(void)
  {
    Owc10_xp::Section* Section;
    OLECHECK(this->get_NextSection((Owc10_xp::Section**)&Section));
    return Section;
  }

  Owc10_xp::Section* __fastcall get_PreviousSection(void)
  {
    Owc10_xp::Section* Section;
    OLECHECK(this->get_PreviousSection((Owc10_xp::Section**)&Section));
    return Section;
  }

  VARIANT_BOOL __fastcall get_IsExpanded(void)
  {
    VARIANT_BOOL IsExpanded;
    OLECHECK(this->get_IsExpanded((VARIANT_BOOL*)&IsExpanded));
    return IsExpanded;
  }


  __property   Owc10_xp::SectTypeEnum Type = {read = get_Type};
  __property   Owc10_xp::DataPage* DataPage = {read = get_DataPage};
  __property   LPDISPATCH      HTMLContainer = {read = get_HTMLContainer};
  __property   Owc10_xp::Section* ParentSection = {read = get_ParentSection};
  __property   Owc10_xp::Section* ChildSection = {read = get_ChildSection};
  __property   Owc10_xp::Section* NextSibling = {read = get_NextSibling};
  __property   Owc10_xp::Section* PreviousSibling = {read = get_PreviousSibling};
  __property   Owc10_xp::Section* NextSection = {read = get_NextSection};
  __property   Owc10_xp::Section* PreviousSection = {read = get_PreviousSection};
  __property   VARIANT_BOOL    IsExpanded = {read = get_IsExpanded};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: DataPage
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AB4-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface DataPage  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_GroupLevel(Owc10_xp::GroupLevel** GroupLevel/*[out,retval]*/) = 0; // [1300]
  virtual HRESULT STDMETHODCALLTYPE get_Recordset(Adodb_xp::Recordset** Recordset/*[out,retval]*/) = 0; // [1301]
  virtual HRESULT STDMETHODCALLTYPE set_Filter(VARIANT Criteria/*[in]*/) = 0; // [1302]
  virtual HRESULT STDMETHODCALLTYPE get_Filter(VARIANT* Criteria/*[out,retval]*/) = 0; // [1302]
  virtual HRESULT STDMETHODCALLTYPE set_IsFilterOn(VARIANT_BOOL IsFilterOn/*[in]*/) = 0; // [1303]
  virtual HRESULT STDMETHODCALLTYPE get_IsFilterOn(VARIANT_BOOL* IsFilterOn/*[out,retval]*/) = 0; // [1303]
  virtual HRESULT STDMETHODCALLTYPE MoveFirst(void) = 0; // [1304]
  virtual HRESULT STDMETHODCALLTYPE MoveLast(void) = 0; // [1305]
  virtual HRESULT STDMETHODCALLTYPE MoveNext(void) = 0; // [1306]
  virtual HRESULT STDMETHODCALLTYPE MovePrevious(void) = 0; // [1307]
  virtual HRESULT STDMETHODCALLTYPE NewRecord(void) = 0; // [1308]
  virtual HRESULT STDMETHODCALLTYPE DeleteRecord(void) = 0; // [1309]
  virtual HRESULT STDMETHODCALLTYPE get_FirstSection(Owc10_xp::Section** Section/*[out,retval]*/) = 0; // [1310]
  virtual HRESULT STDMETHODCALLTYPE Save(void) = 0; // [1311]
  virtual HRESULT STDMETHODCALLTYPE Undo(void) = 0; // [1312]
  virtual HRESULT STDMETHODCALLTYPE Requery(void) = 0; // [1313]
  virtual HRESULT STDMETHODCALLTYPE SortAscending(void) = 0; // [1314]
  virtual HRESULT STDMETHODCALLTYPE SortDescending(void) = 0; // [1315]
  virtual HRESULT STDMETHODCALLTYPE ApplyFilter(void) = 0; // [1316]
  virtual HRESULT STDMETHODCALLTYPE ToggleFilter(void) = 0; // [1317]
  virtual HRESULT STDMETHODCALLTYPE Help(void) = 0; // [1318]
  virtual HRESULT STDMETHODCALLTYPE IsButtonEnabled(Owc10_xp::NavButtonEnum Button/*[in]*/, 
                                                    VARIANT_BOOL* Enabled/*[out,retval]*/) = 0; // [1319]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::GroupLevel* __fastcall get_GroupLevel(void)
  {
    Owc10_xp::GroupLevel* GroupLevel;
    OLECHECK(this->get_GroupLevel((Owc10_xp::GroupLevel**)&GroupLevel));
    return GroupLevel;
  }

  Adodb_xp::Recordset* __fastcall get_Recordset(void)
  {
    Adodb_xp::Recordset* Recordset;
    OLECHECK(this->get_Recordset((Adodb_xp::Recordset**)&Recordset));
    return Recordset;
  }

  VARIANT __fastcall get_Filter(void)
  {
    VARIANT Criteria;
    OLECHECK(this->get_Filter((VARIANT*)&Criteria));
    return Criteria;
  }

  VARIANT_BOOL __fastcall get_IsFilterOn(void)
  {
    VARIANT_BOOL IsFilterOn;
    OLECHECK(this->get_IsFilterOn((VARIANT_BOOL*)&IsFilterOn));
    return IsFilterOn;
  }

  Owc10_xp::Section* __fastcall get_FirstSection(void)
  {
    Owc10_xp::Section* Section;
    OLECHECK(this->get_FirstSection((Owc10_xp::Section**)&Section));
    return Section;
  }

  VARIANT_BOOL __fastcall IsButtonEnabled(Owc10_xp::NavButtonEnum Button/*[in]*/)
  {
    VARIANT_BOOL Enabled;
    OLECHECK(this->IsButtonEnabled(Button, (VARIANT_BOOL*)&Enabled));
    return Enabled;
  }


  __property   Owc10_xp::GroupLevel* GroupLevel = {read = get_GroupLevel};
  __property   Adodb_xp::Recordset* Recordset = {read = get_Recordset};
  __property   VARIANT_BOOL    IsFilterOn = {read = get_IsFilterOn, write = set_IsFilterOn};
  __property   Owc10_xp::Section* FirstSection = {read = get_FirstSection};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: GroupLevel
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A76-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface GroupLevel  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_GroupOn(Owc10_xp::DscGroupOnEnum GroupOn/*[in]*/) = 0; // [800]
  virtual HRESULT STDMETHODCALLTYPE get_GroupOn(Owc10_xp::DscGroupOnEnum* GroupOn/*[out,retval]*/) = 0; // [800]
  virtual HRESULT STDMETHODCALLTYPE set_GroupInterval(double Interval/*[in]*/) = 0; // [807]
  virtual HRESULT STDMETHODCALLTYPE get_GroupInterval(double* Interval/*[out,retval]*/) = 0; // [807]
  virtual HRESULT STDMETHODCALLTYPE set_GroupHeader(VARIANT_BOOL Header/*[in]*/) = 0; // [801]
  virtual HRESULT STDMETHODCALLTYPE get_GroupHeader(VARIANT_BOOL* Header/*[out,retval]*/) = 0; // [801]
  virtual HRESULT STDMETHODCALLTYPE set_GroupFooter(VARIANT_BOOL Footer/*[in]*/) = 0; // [802]
  virtual HRESULT STDMETHODCALLTYPE get_GroupFooter(VARIANT_BOOL* Footer/*[out,retval]*/) = 0; // [802]
  virtual HRESULT STDMETHODCALLTYPE set_CaptionSection(VARIANT_BOOL CaptionSection/*[in]*/) = 0; // [803]
  virtual HRESULT STDMETHODCALLTYPE get_CaptionSection(VARIANT_BOOL* CaptionSection/*[out,retval]*/) = 0; // [803]
  virtual HRESULT STDMETHODCALLTYPE set_RecordNavigationSection(VARIANT_BOOL RecNavSection/*[in]*/) = 0; // [804]
  virtual HRESULT STDMETHODCALLTYPE get_RecordNavigationSection(VARIANT_BOOL* RecNavSection/*[out,retval]*/) = 0; // [804]
  virtual HRESULT STDMETHODCALLTYPE set_DataPageSize(long Repeat/*[in]*/) = 0; // [805]
  virtual HRESULT STDMETHODCALLTYPE get_DataPageSize(long* Repeat/*[out,retval]*/) = 0; // [805]
  virtual HRESULT STDMETHODCALLTYPE set_ExpandedByDefault(VARIANT_BOOL ExpandedByDefault/*[in]*/) = 0; // [806]
  virtual HRESULT STDMETHODCALLTYPE get_ExpandedByDefault(VARIANT_BOOL* ExpandedByDefault/*[out,retval]*/) = 0; // [806]
  virtual HRESULT STDMETHODCALLTYPE set_GroupFilterControl(BSTR GroupFilterControl/*[in]*/) = 0; // [808]
  virtual HRESULT STDMETHODCALLTYPE get_GroupFilterControl(BSTR* GroupFilterControl/*[out,retval]*/) = 0; // [808]
  virtual HRESULT STDMETHODCALLTYPE set_DefaultSort(BSTR DefaultSort/*[in]*/) = 0; // [809]
  virtual HRESULT STDMETHODCALLTYPE get_DefaultSort(BSTR* DefaultSort/*[out,retval]*/) = 0; // [809]
  virtual HRESULT STDMETHODCALLTYPE set_RecordSource(BSTR RecordSource/*[in]*/) = 0; // [810]
  virtual HRESULT STDMETHODCALLTYPE get_RecordSource(BSTR* RecordSource/*[out,retval]*/) = 0; // [810]
  virtual HRESULT STDMETHODCALLTYPE set_CaptionElementId(BSTR CaptionElementId/*[in]*/) = 0; // [811]
  virtual HRESULT STDMETHODCALLTYPE get_CaptionElementId(BSTR* CaptionElementId/*[out,retval]*/) = 0; // [811]
  virtual HRESULT STDMETHODCALLTYPE set_HeaderElementId(BSTR HeaderElementId/*[in]*/) = 0; // [812]
  virtual HRESULT STDMETHODCALLTYPE get_HeaderElementId(BSTR* HeaderElementId/*[out,retval]*/) = 0; // [812]
  virtual HRESULT STDMETHODCALLTYPE set_FooterElementId(BSTR FooterElementId/*[in]*/) = 0; // [813]
  virtual HRESULT STDMETHODCALLTYPE get_FooterElementId(BSTR* FooterElementId/*[out,retval]*/) = 0; // [813]
  virtual HRESULT STDMETHODCALLTYPE set_RecordNavigationElementId(BSTR RecordNavigationElementId/*[in]*/) = 0; // [814]
  virtual HRESULT STDMETHODCALLTYPE get_RecordNavigationElementId(BSTR* RecordNavigationElementId/*[out,retval]*/) = 0; // [814]
  virtual HRESULT STDMETHODCALLTYPE get_GroupedOnField(Owc10_xp::PageField** ppPageField/*[out,retval]*/) = 0; // [815]
  virtual HRESULT STDMETHODCALLTYPE set_GroupFilterField(BSTR GroupFilterField/*[in]*/) = 0; // [816]
  virtual HRESULT STDMETHODCALLTYPE get_GroupFilterField(BSTR* GroupFilterField/*[out,retval]*/) = 0; // [816]
  virtual HRESULT STDMETHODCALLTYPE set_SGWindow(long Param1/*[in]*/) = 0; // [817]
  virtual HRESULT STDMETHODCALLTYPE set_SGMessage(unsigned Param1/*[in]*/) = 0; // [818]
  virtual HRESULT STDMETHODCALLTYPE SetDesignerFlags(long grfFlags/*[in]*/, VARIANT_BOOL vfSet) = 0; // [830]
  virtual HRESULT STDMETHODCALLTYPE set_AllowEdits(VARIANT_BOOL AllowEdits/*[in]*/) = 0; // [819]
  virtual HRESULT STDMETHODCALLTYPE get_AllowEdits(VARIANT_BOOL* AllowEdits/*[out,retval]*/) = 0; // [819]
  virtual HRESULT STDMETHODCALLTYPE set_AllowAdditions(VARIANT_BOOL AllowAdditions/*[in]*/) = 0; // [820]
  virtual HRESULT STDMETHODCALLTYPE get_AllowAdditions(VARIANT_BOOL* AllowAdditions/*[out,retval]*/) = 0; // [820]
  virtual HRESULT STDMETHODCALLTYPE set_AllowDeletions(VARIANT_BOOL AllowDeletions/*[in]*/) = 0; // [821]
  virtual HRESULT STDMETHODCALLTYPE get_AllowDeletions(VARIANT_BOOL* AllowDeletions/*[out,retval]*/) = 0; // [821]
  virtual HRESULT STDMETHODCALLTYPE set_RecordSelector(VARIANT_BOOL RecordSelector/*[in]*/) = 0; // [822]
  virtual HRESULT STDMETHODCALLTYPE get_RecordSelector(VARIANT_BOOL* RecordSelector/*[out,retval]*/) = 0; // [822]
  virtual HRESULT STDMETHODCALLTYPE set_AlternateRowColor(BSTR AlternateRowColor/*[in]*/) = 0; // [823]
  virtual HRESULT STDMETHODCALLTYPE get_AlternateRowColor(BSTR* AlternateRowColor/*[out,retval]*/) = 0; // [823]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [-800]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::DscGroupOnEnum __fastcall get_GroupOn(void)
  {
    Owc10_xp::DscGroupOnEnum GroupOn;
    OLECHECK(this->get_GroupOn((Owc10_xp::DscGroupOnEnum*)&GroupOn));
    return GroupOn;
  }

  double __fastcall get_GroupInterval(void)
  {
    double Interval;
    OLECHECK(this->get_GroupInterval((double*)&Interval));
    return Interval;
  }

  VARIANT_BOOL __fastcall get_GroupHeader(void)
  {
    VARIANT_BOOL Header;
    OLECHECK(this->get_GroupHeader((VARIANT_BOOL*)&Header));
    return Header;
  }

  VARIANT_BOOL __fastcall get_GroupFooter(void)
  {
    VARIANT_BOOL Footer;
    OLECHECK(this->get_GroupFooter((VARIANT_BOOL*)&Footer));
    return Footer;
  }

  VARIANT_BOOL __fastcall get_CaptionSection(void)
  {
    VARIANT_BOOL CaptionSection;
    OLECHECK(this->get_CaptionSection((VARIANT_BOOL*)&CaptionSection));
    return CaptionSection;
  }

  VARIANT_BOOL __fastcall get_RecordNavigationSection(void)
  {
    VARIANT_BOOL RecNavSection;
    OLECHECK(this->get_RecordNavigationSection((VARIANT_BOOL*)&RecNavSection));
    return RecNavSection;
  }

  long __fastcall get_DataPageSize(void)
  {
    long Repeat;
    OLECHECK(this->get_DataPageSize((long*)&Repeat));
    return Repeat;
  }

  VARIANT_BOOL __fastcall get_ExpandedByDefault(void)
  {
    VARIANT_BOOL ExpandedByDefault;
    OLECHECK(this->get_ExpandedByDefault((VARIANT_BOOL*)&ExpandedByDefault));
    return ExpandedByDefault;
  }

  BSTR __fastcall get_GroupFilterControl(void)
  {
    BSTR GroupFilterControl = 0;
    OLECHECK(this->get_GroupFilterControl((BSTR*)&GroupFilterControl));
    return GroupFilterControl;
  }

  BSTR __fastcall get_DefaultSort(void)
  {
    BSTR DefaultSort = 0;
    OLECHECK(this->get_DefaultSort((BSTR*)&DefaultSort));
    return DefaultSort;
  }

  BSTR __fastcall get_RecordSource(void)
  {
    BSTR RecordSource = 0;
    OLECHECK(this->get_RecordSource((BSTR*)&RecordSource));
    return RecordSource;
  }

  BSTR __fastcall get_CaptionElementId(void)
  {
    BSTR CaptionElementId = 0;
    OLECHECK(this->get_CaptionElementId((BSTR*)&CaptionElementId));
    return CaptionElementId;
  }

  BSTR __fastcall get_HeaderElementId(void)
  {
    BSTR HeaderElementId = 0;
    OLECHECK(this->get_HeaderElementId((BSTR*)&HeaderElementId));
    return HeaderElementId;
  }

  BSTR __fastcall get_FooterElementId(void)
  {
    BSTR FooterElementId = 0;
    OLECHECK(this->get_FooterElementId((BSTR*)&FooterElementId));
    return FooterElementId;
  }

  BSTR __fastcall get_RecordNavigationElementId(void)
  {
    BSTR RecordNavigationElementId = 0;
    OLECHECK(this->get_RecordNavigationElementId((BSTR*)&RecordNavigationElementId));
    return RecordNavigationElementId;
  }

  Owc10_xp::PageField* __fastcall get_GroupedOnField(void)
  {
    Owc10_xp::PageField* ppPageField;
    OLECHECK(this->get_GroupedOnField((Owc10_xp::PageField**)&ppPageField));
    return ppPageField;
  }

  BSTR __fastcall get_GroupFilterField(void)
  {
    BSTR GroupFilterField = 0;
    OLECHECK(this->get_GroupFilterField((BSTR*)&GroupFilterField));
    return GroupFilterField;
  }

  VARIANT_BOOL __fastcall get_AllowEdits(void)
  {
    VARIANT_BOOL AllowEdits;
    OLECHECK(this->get_AllowEdits((VARIANT_BOOL*)&AllowEdits));
    return AllowEdits;
  }

  VARIANT_BOOL __fastcall get_AllowAdditions(void)
  {
    VARIANT_BOOL AllowAdditions;
    OLECHECK(this->get_AllowAdditions((VARIANT_BOOL*)&AllowAdditions));
    return AllowAdditions;
  }

  VARIANT_BOOL __fastcall get_AllowDeletions(void)
  {
    VARIANT_BOOL AllowDeletions;
    OLECHECK(this->get_AllowDeletions((VARIANT_BOOL*)&AllowDeletions));
    return AllowDeletions;
  }

  VARIANT_BOOL __fastcall get_RecordSelector(void)
  {
    VARIANT_BOOL RecordSelector;
    OLECHECK(this->get_RecordSelector((VARIANT_BOOL*)&RecordSelector));
    return RecordSelector;
  }

  BSTR __fastcall get_AlternateRowColor(void)
  {
    BSTR AlternateRowColor = 0;
    OLECHECK(this->get_AlternateRowColor((BSTR*)&AlternateRowColor));
    return AlternateRowColor;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }


  __property   Owc10_xp::DscGroupOnEnum GroupOn = {read = get_GroupOn, write = set_GroupOn};
  __property   double          GroupInterval = {read = get_GroupInterval, write = set_GroupInterval};
  __property   VARIANT_BOOL    GroupHeader = {read = get_GroupHeader, write = set_GroupHeader};
  __property   VARIANT_BOOL    GroupFooter = {read = get_GroupFooter, write = set_GroupFooter};
  __property   VARIANT_BOOL    CaptionSection = {read = get_CaptionSection, write = set_CaptionSection};
  __property   VARIANT_BOOL    RecordNavigationSection = {read = get_RecordNavigationSection, write = set_RecordNavigationSection};
  __property   long            DataPageSize = {read = get_DataPageSize, write = set_DataPageSize};
  __property   VARIANT_BOOL    ExpandedByDefault = {read = get_ExpandedByDefault, write = set_ExpandedByDefault};
  __property   BSTR            GroupFilterControl = {read = get_GroupFilterControl, write = set_GroupFilterControl};
  __property   BSTR            DefaultSort = {read = get_DefaultSort, write = set_DefaultSort};
  __property   BSTR            RecordSource = {read = get_RecordSource, write = set_RecordSource};
  __property   BSTR            CaptionElementId = {read = get_CaptionElementId, write = set_CaptionElementId};
  __property   BSTR            HeaderElementId = {read = get_HeaderElementId, write = set_HeaderElementId};
  __property   BSTR            FooterElementId = {read = get_FooterElementId, write = set_FooterElementId};
  __property   BSTR            RecordNavigationElementId = {read = get_RecordNavigationElementId, write = set_RecordNavigationElementId};
  __property   Owc10_xp::PageField* GroupedOnField = {read = get_GroupedOnField};
  __property   BSTR            GroupFilterField = {read = get_GroupFilterField, write = set_GroupFilterField};
  __property   long            SGWindow = {write = set_SGWindow};
  __property   unsigned        SGMessage = {write = set_SGMessage};
  __property   VARIANT_BOOL    AllowEdits = {read = get_AllowEdits, write = set_AllowEdits};
  __property   VARIANT_BOOL    AllowAdditions = {read = get_AllowAdditions, write = set_AllowAdditions};
  __property   VARIANT_BOOL    AllowDeletions = {read = get_AllowDeletions, write = set_AllowDeletions};
  __property   VARIANT_BOOL    RecordSelector = {read = get_RecordSelector, write = set_RecordSelector};
  __property   BSTR            AlternateRowColor = {read = get_AlternateRowColor, write = set_AlternateRowColor};
  __property   BSTR            Name = {read = get_Name};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: GroupLevels
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B00-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface GroupLevels  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Owc10_xp::GroupLevel** GroupLevel/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [850]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(VARIANT* Enum/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE Add(BSTR RecordSource/*[in]*/, 
                                        VARIANT_BOOL FailIfThere/*[in,def,opt]*/, 
                                        Owc10_xp::GroupLevel** GroupLevel/*[out,retval]*/) = 0; // [851]
  virtual HRESULT STDMETHODCALLTYPE Delete(VARIANT Index/*[in]*/) = 0; // [852]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::GroupLevel* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Owc10_xp::GroupLevel* GroupLevel;
    OLECHECK(this->get_Item(Index, (Owc10_xp::GroupLevel**)&GroupLevel));
    return GroupLevel;
  }

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  VARIANT __fastcall get__NewEnum(void)
  {
    VARIANT Enum;
    OLECHECK(this->get__NewEnum((VARIANT*)&Enum));
    return Enum;
  }

  Owc10_xp::GroupLevel* __fastcall Add(BSTR RecordSource/*[in]*/, 
                                       VARIANT_BOOL FailIfThere/*[in,def,opt]*/)
  {
    Owc10_xp::GroupLevel* GroupLevel;
    OLECHECK(this->Add(RecordSource, FailIfThere, (Owc10_xp::GroupLevel**)&GroupLevel));
    return GroupLevel;
  }


  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: DataPages
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A85-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface DataPages  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Owc10_xp::DataPage** DataPage/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [850]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(VARIANT* Enum/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::DataPage* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Owc10_xp::DataPage* DataPage;
    OLECHECK(this->get_Item(Index, (Owc10_xp::DataPage**)&DataPage));
    return DataPage;
  }

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  VARIANT __fastcall get__NewEnum(void)
  {
    VARIANT Enum;
    OLECHECK(this->get__NewEnum((VARIANT*)&Enum));
    return Enum;
  }


  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ElementExtension
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AAC-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface ElementExtension  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_ElementID(BSTR* ElementID/*[out,retval]*/) = 0; // [900]
  virtual HRESULT STDMETHODCALLTYPE set_ConsumesRecordset(VARIANT_BOOL ConsumesRecordset/*[in]*/) = 0; // [902]
  virtual HRESULT STDMETHODCALLTYPE get_ConsumesRecordset(VARIANT_BOOL* ConsumesRecordset/*[out,retval]*/) = 0; // [902]
  virtual HRESULT STDMETHODCALLTYPE set_AlternateDataSource(BSTR AlternateDataSource/*[in]*/) = 0; // [911]
  virtual HRESULT STDMETHODCALLTYPE get_AlternateDataSource(BSTR* AlternateDataSource/*[out,retval]*/) = 0; // [911]
  virtual HRESULT STDMETHODCALLTYPE set_ListRowSource(BSTR ListRowSource/*[in]*/) = 0; // [904]
  virtual HRESULT STDMETHODCALLTYPE get_ListRowSource(BSTR* ListRowSource/*[out,retval]*/) = 0; // [904]
  virtual HRESULT STDMETHODCALLTYPE set_ListBoundField(BSTR BoundField/*[in]*/) = 0; // [905]
  virtual HRESULT STDMETHODCALLTYPE get_ListBoundField(BSTR* BoundField/*[out,retval]*/) = 0; // [905]
  virtual HRESULT STDMETHODCALLTYPE set_ListDisplayField(BSTR DisplayField/*[in]*/) = 0; // [906]
  virtual HRESULT STDMETHODCALLTYPE get_ListDisplayField(BSTR* DisplayField/*[out,retval]*/) = 0; // [906]
  virtual HRESULT STDMETHODCALLTYPE set_ChildLabel(BSTR ChildLabel/*[in]*/) = 0; // [907]
  virtual HRESULT STDMETHODCALLTYPE get_ChildLabel(BSTR* ChildLabel/*[out,retval]*/) = 0; // [907]
  virtual HRESULT STDMETHODCALLTYPE set_TotalType(Owc10_xp::DscTotalTypeEnum TotalType/*[in]*/) = 0; // [908]
  virtual HRESULT STDMETHODCALLTYPE get_TotalType(Owc10_xp::DscTotalTypeEnum* TotalType/*[out,retval]*/) = 0; // [908]
  virtual HRESULT STDMETHODCALLTYPE set_DefaultValue(BSTR DefaultValue/*[in]*/) = 0; // [909]
  virtual HRESULT STDMETHODCALLTYPE get_DefaultValue(BSTR* DefaultValue/*[out,retval]*/) = 0; // [909]
  virtual HRESULT STDMETHODCALLTYPE set_RecordSource(BSTR RecordSource/*[in]*/) = 0; // [910]
  virtual HRESULT STDMETHODCALLTYPE get_RecordSource(BSTR* RecordSource/*[out,retval]*/) = 0; // [910]
  virtual HRESULT STDMETHODCALLTYPE set_ControlSource(BSTR ControlSource/*[in]*/) = 0; // [912]
  virtual HRESULT STDMETHODCALLTYPE get_ControlSource(BSTR* ControlSource/*[out,retval]*/) = 0; // [912]
  virtual HRESULT STDMETHODCALLTYPE set_UniqueTable(BSTR UniqueTable/*[in]*/) = 0; // [913]
  virtual HRESULT STDMETHODCALLTYPE get_UniqueTable(BSTR* UniqueTable/*[out,retval]*/) = 0; // [913]
  virtual HRESULT STDMETHODCALLTYPE set_ResyncCommand(BSTR ResyncCommand/*[in]*/) = 0; // [914]
  virtual HRESULT STDMETHODCALLTYPE get_ResyncCommand(BSTR* ResyncCommand/*[out,retval]*/) = 0; // [914]
  virtual HRESULT STDMETHODCALLTYPE set_ServerFilter(BSTR ServerFilter/*[in]*/) = 0; // [916]
  virtual HRESULT STDMETHODCALLTYPE get_ServerFilter(BSTR* ServerFilter/*[out,retval]*/) = 0; // [916]
  virtual HRESULT STDMETHODCALLTYPE SetDesignerFlags(long grfFlags/*[in]*/, VARIANT_BOOL vfSet) = 0; // [930]
  virtual HRESULT STDMETHODCALLTYPE set_Format(BSTR Format/*[in]*/) = 0; // [915]
  virtual HRESULT STDMETHODCALLTYPE get_Format(BSTR* Format/*[out,retval]*/) = 0; // [915]
  virtual HRESULT STDMETHODCALLTYPE FixupNames(BSTR bstrOldSource/*[in]*/, BSTR bstrNewSource, 
                                               BSTR bstrOldDefaultCaption) = 0; // [931]
  virtual HRESULT STDMETHODCALLTYPE set_ElementID(BSTR ElementID/*[in]*/) = 0; // [900]
  virtual HRESULT STDMETHODCALLTYPE set_RecordsetLabel(BSTR RecordsetLabel/*[in]*/) = 0; // [917]
  virtual HRESULT STDMETHODCALLTYPE get_RecordsetLabel(BSTR* RecordsetLabel/*[out,retval]*/) = 0; // [917]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_ElementID(void)
  {
    BSTR ElementID = 0;
    OLECHECK(this->get_ElementID((BSTR*)&ElementID));
    return ElementID;
  }

  VARIANT_BOOL __fastcall get_ConsumesRecordset(void)
  {
    VARIANT_BOOL ConsumesRecordset;
    OLECHECK(this->get_ConsumesRecordset((VARIANT_BOOL*)&ConsumesRecordset));
    return ConsumesRecordset;
  }

  BSTR __fastcall get_AlternateDataSource(void)
  {
    BSTR AlternateDataSource = 0;
    OLECHECK(this->get_AlternateDataSource((BSTR*)&AlternateDataSource));
    return AlternateDataSource;
  }

  BSTR __fastcall get_ListRowSource(void)
  {
    BSTR ListRowSource = 0;
    OLECHECK(this->get_ListRowSource((BSTR*)&ListRowSource));
    return ListRowSource;
  }

  BSTR __fastcall get_ListBoundField(void)
  {
    BSTR BoundField = 0;
    OLECHECK(this->get_ListBoundField((BSTR*)&BoundField));
    return BoundField;
  }

  BSTR __fastcall get_ListDisplayField(void)
  {
    BSTR DisplayField = 0;
    OLECHECK(this->get_ListDisplayField((BSTR*)&DisplayField));
    return DisplayField;
  }

  BSTR __fastcall get_ChildLabel(void)
  {
    BSTR ChildLabel = 0;
    OLECHECK(this->get_ChildLabel((BSTR*)&ChildLabel));
    return ChildLabel;
  }

  Owc10_xp::DscTotalTypeEnum __fastcall get_TotalType(void)
  {
    Owc10_xp::DscTotalTypeEnum TotalType;
    OLECHECK(this->get_TotalType((Owc10_xp::DscTotalTypeEnum*)&TotalType));
    return TotalType;
  }

  BSTR __fastcall get_DefaultValue(void)
  {
    BSTR DefaultValue = 0;
    OLECHECK(this->get_DefaultValue((BSTR*)&DefaultValue));
    return DefaultValue;
  }

  BSTR __fastcall get_RecordSource(void)
  {
    BSTR RecordSource = 0;
    OLECHECK(this->get_RecordSource((BSTR*)&RecordSource));
    return RecordSource;
  }

  BSTR __fastcall get_ControlSource(void)
  {
    BSTR ControlSource = 0;
    OLECHECK(this->get_ControlSource((BSTR*)&ControlSource));
    return ControlSource;
  }

  BSTR __fastcall get_UniqueTable(void)
  {
    BSTR UniqueTable = 0;
    OLECHECK(this->get_UniqueTable((BSTR*)&UniqueTable));
    return UniqueTable;
  }

  BSTR __fastcall get_ResyncCommand(void)
  {
    BSTR ResyncCommand = 0;
    OLECHECK(this->get_ResyncCommand((BSTR*)&ResyncCommand));
    return ResyncCommand;
  }

  BSTR __fastcall get_ServerFilter(void)
  {
    BSTR ServerFilter = 0;
    OLECHECK(this->get_ServerFilter((BSTR*)&ServerFilter));
    return ServerFilter;
  }

  BSTR __fastcall get_Format(void)
  {
    BSTR Format = 0;
    OLECHECK(this->get_Format((BSTR*)&Format));
    return Format;
  }

  BSTR __fastcall get_RecordsetLabel(void)
  {
    BSTR RecordsetLabel = 0;
    OLECHECK(this->get_RecordsetLabel((BSTR*)&RecordsetLabel));
    return RecordsetLabel;
  }


  __property   BSTR            ElementID = {read = get_ElementID};
  __property   VARIANT_BOOL    ConsumesRecordset = {read = get_ConsumesRecordset, write = set_ConsumesRecordset};
  __property   BSTR            AlternateDataSource = {read = get_AlternateDataSource, write = set_AlternateDataSource};
  __property   BSTR            ListRowSource = {read = get_ListRowSource, write = set_ListRowSource};
  __property   BSTR            ListBoundField = {read = get_ListBoundField, write = set_ListBoundField};
  __property   BSTR            ListDisplayField = {read = get_ListDisplayField, write = set_ListDisplayField};
  __property   BSTR            ChildLabel = {read = get_ChildLabel, write = set_ChildLabel};
  __property   Owc10_xp::DscTotalTypeEnum TotalType = {read = get_TotalType, write = set_TotalType};
  __property   BSTR            DefaultValue = {read = get_DefaultValue, write = set_DefaultValue};
  __property   BSTR            RecordSource = {read = get_RecordSource, write = set_RecordSource};
  __property   BSTR            ControlSource = {read = get_ControlSource, write = set_ControlSource};
  __property   BSTR            UniqueTable = {read = get_UniqueTable, write = set_UniqueTable};
  __property   BSTR            ResyncCommand = {read = get_ResyncCommand, write = set_ResyncCommand};
  __property   BSTR            ServerFilter = {read = get_ServerFilter, write = set_ServerFilter};
  __property   BSTR            Format = {read = get_Format, write = set_Format};
  __property   BSTR            RecordsetLabel = {read = get_RecordsetLabel, write = set_RecordsetLabel};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ElementExtensions
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AC9-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface ElementExtensions  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Owc10_xp::ElementExtension** ppElementExtension/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [950]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(VARIANT* Enum/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE Add(BSTR ElementID/*[in]*/, 
                                        VARIANT_BOOL FailIfThere/*[in,def,opt]*/, 
                                        Owc10_xp::ElementExtension** ElementExtension/*[out,retval]*/) = 0; // [951]
  virtual HRESULT STDMETHODCALLTYPE Delete(VARIANT Index/*[in]*/) = 0; // [952]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::ElementExtension* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Owc10_xp::ElementExtension* ppElementExtension;
    OLECHECK(this->get_Item(Index, (Owc10_xp::ElementExtension**)&ppElementExtension));
    return ppElementExtension;
  }

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  VARIANT __fastcall get__NewEnum(void)
  {
    VARIANT Enum;
    OLECHECK(this->get__NewEnum((VARIANT*)&Enum));
    return Enum;
  }

  Owc10_xp::ElementExtension* __fastcall Add(BSTR ElementID/*[in]*/, 
                                             VARIANT_BOOL FailIfThere/*[in,def,opt]*/)
  {
    Owc10_xp::ElementExtension* ElementExtension;
    OLECHECK(this->Add(ElementID, FailIfThere, (Owc10_xp::ElementExtension**)&ElementExtension));
    return ElementExtension;
  }


  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IDataSourceControl
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AAF-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface IDataSourceControl  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_ConnectionString(BSTR ConnectionString/*[in]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_ConnectionString(BSTR* ConnectionString/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_CurrentDirectory(BSTR* CurrentDirectory/*[out,retval]*/) = 0; // [68]
  virtual HRESULT STDMETHODCALLTYPE set_UseRemoteProvider(VARIANT_BOOL RemoteProvider/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_UseRemoteProvider(VARIANT_BOOL* RemoteProvider/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_Connection(Adodb_xp::Connection** Connection/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE set_DataEntry(VARIANT_BOOL DataEntry/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_DataEntry(VARIANT_BOOL* DataEntry/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE set_MaxRecords(long RecordsMax/*[in]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE get_MaxRecords(long* RecordsMax/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE get_DefaultRecordset(Adodb_xp::Recordset** RecordsetDefault/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE Execute(BSTR RecordsetName/*[in]*/, 
                                            Adodb_xp::ExecuteOptionEnum ExecuteOption/*[in,def,opt]*/, 
                                            Owc10_xp::DscFetchTypeEnum FetchType/*[in,def,opt]*/, 
                                            Adodb_xp::Recordset** Recordset/*[out,retval]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE get_SchemaRowsources(Owc10_xp::SchemaRowsources** SchemaRowsources/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_SchemaRelationships(Owc10_xp::SchemaRelationships** SchemaRelationships/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE get_PageRowsources(Owc10_xp::PageRowsources** PageRowsources/*[out,retval]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE get_RecordsetDefs(Owc10_xp::RecordsetDefs** RecordsetDefs/*[out,retval]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE get_RootRecordsetDefs(Owc10_xp::RecordsetDefs** RootRecordsetDefs/*[out,retval]*/) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE get_PivotDefs(LPDISPATCH* PivotDefs/*[out,retval]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE SetDataAssistant(LPDISPATCH DataAssistant/*[in]*/) = 0; // [26]
  virtual HRESULT STDMETHODCALLTYPE DesignAdvise(LPUNKNOWN Advise/*[in]*/, BSTR SinkName/*[in]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE DesignUnAdvise(BSTR SinkName/*[in]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE ProcessDrop(LPUNKNOWN pUnknownDropGoo/*[in]*/, 
                                                BSTR bstrRecordSetDefName/*[in]*/, 
                                                Owc10_xp::DscDropLocationEnum dl/*[in]*/, 
                                                Owc10_xp::DscDropTypeEnum dt/*[in]*/, 
                                                BSTR PageRowsource/*[in]*/, 
                                                BSTR SchemaRelationship/*[in]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE ScriptDrop(VARIANT Rowsources/*[in]*/, 
                                               VARIANT Relationships/*[in]*/, VARIANT Fields/*[in]*/, 
                                               BSTR bstrRecordSetDefName/*[in]*/, 
                                               Owc10_xp::DscDropLocationEnum dl/*[in]*/, 
                                               Owc10_xp::DscDropTypeEnum dt/*[in]*/, 
                                               BSTR PageRowsource/*[in]*/, 
                                               BSTR SchemaRelationship/*[in]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE set_DefaultRecordsetName(BSTR DefaultRecordsetName/*[in]*/) = 0; // [60]
  virtual HRESULT STDMETHODCALLTYPE get_DefaultRecordsetName(BSTR* DefaultRecordsetName/*[out,retval]*/) = 0; // [60]
  virtual HRESULT STDMETHODCALLTYPE set_XMLData(BSTR XMLData/*[in]*/) = 0; // [34]
  virtual HRESULT STDMETHODCALLTYPE get_XMLData(BSTR* XMLData/*[out,retval]*/) = 0; // [34]
  virtual HRESULT STDMETHODCALLTYPE get_GroupLevels(Owc10_xp::GroupLevels** GroupLevels/*[out,retval]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE GetContainingSection(LPDISPATCH Element/*[in]*/, 
                                                         Owc10_xp::Section** Section/*[out,retval]*/) = 0; // [603]
  virtual HRESULT STDMETHODCALLTYPE get_Constants(LPDISPATCH* IDispatchConstants/*[out,retval]*/) = 0; // [35]
  virtual HRESULT STDMETHODCALLTYPE get_ElementExtensions(Owc10_xp::ElementExtensions** ElementExtensions/*[out,retval]*/) = 0; // [40]
  virtual HRESULT STDMETHODCALLTYPE get_IsNew(VARIANT_BOOL* IsNew/*[out,retval]*/) = 0; // [70]
  virtual HRESULT STDMETHODCALLTYPE ScriptValidate(VARIANT Rowsources/*[in]*/, 
                                                   VARIANT Relationships/*[in]*/, 
                                                   VARIANT Fields/*[in]*/, BSTR RecordsetDef/*[in]*/, 
                                                   Owc10_xp::DscDropLocationEnum dl/*[in]*/, 
                                                   Owc10_xp::DscDropTypeEnum dt/*[in]*/, 
                                                   BSTR* DropRowsource/*[out]*/, 
                                                   VARIANT* RowsourcesOut/*[out]*/, 
                                                   VARIANT* RelationshipsOut/*[out]*/) = 0; // [42]
  virtual HRESULT STDMETHODCALLTYPE set_RecordsetType(Owc10_xp::DscRecordsetTypeEnum RecordsetType/*[in]*/) = 0; // [43]
  virtual HRESULT STDMETHODCALLTYPE get_RecordsetType(Owc10_xp::DscRecordsetTypeEnum* RecordsetType/*[out,retval]*/) = 0; // [43]
  virtual HRESULT STDMETHODCALLTYPE ValidateDrop(LPUNKNOWN UnknownDropGoo/*[in]*/, 
                                                 BSTR RecordSetDefName/*[in]*/, 
                                                 Owc10_xp::DscDropLocationEnum Location/*[in]*/, 
                                                 Owc10_xp::DscDropTypeEnum Type/*[in]*/, 
                                                 BSTR* DropRowsource/*[out]*/, 
                                                 VARIANT* RowsourcesOut/*[out]*/, 
                                                 VARIANT* RelationshipsOut/*[out]*/, 
                                                 long* NumberOfDrops/*[out]*/) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE HyperlinkPart(VARIANT Hyperlink/*[in]*/, 
                                                  Owc10_xp::DscHyperlinkPartEnum Part/*[in]*/, 
                                                  BSTR* Ret/*[out,retval]*/) = 0; // [45]
  virtual HRESULT STDMETHODCALLTYPE SchemaRefresh(void) = 0; // [47]
  virtual HRESULT STDMETHODCALLTYPE UpdateElementID(BSTR OldID, BSTR NewID) = 0; // [48]
  virtual HRESULT STDMETHODCALLTYPE get_AllPageFields(Owc10_xp::AllPageFields** AllPageFields/*[out,retval]*/) = 0; // [58]
  virtual HRESULT STDMETHODCALLTYPE get_CurrentSection(Owc10_xp::Section** Section/*[out,retval]*/) = 0; // [61]
  virtual HRESULT STDMETHODCALLTYPE get_ProviderType(VARIANT DataMember/*[in,opt]*/, 
                                                     Owc10_xp::ProviderType* ProviderType/*[out,retval]*/) = 0; // [62]
  virtual HRESULT STDMETHODCALLTYPE get_AllGroupingDefs(Owc10_xp::AllGroupingDefs** AllGroupingDefs/*[out,retval]*/) = 0; // [63]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayAlerts(VARIANT_BOOL DisplayAlerts/*[in]*/) = 0; // [65]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayAlerts(VARIANT_BOOL* DisplayAlerts/*[out,retval]*/) = 0; // [65]
  virtual HRESULT STDMETHODCALLTYPE get_DataPages(Owc10_xp::DataPages** DataPages/*[out,retval]*/) = 0; // [69]
  virtual HRESULT STDMETHODCALLTYPE Reset(void) = 0; // [72]
  virtual HRESULT STDMETHODCALLTYPE getDataMemberName(long lIndex/*[in]*/, 
                                                      Msdatasrc_xp::DataMember* pbstrDM/*[out,retval]*/) = 0; // [73]
  virtual HRESULT STDMETHODCALLTYPE getDataMemberCount(long* plcount/*[out,retval]*/) = 0; // [74]
  virtual HRESULT STDMETHODCALLTYPE set_GridX(long xGrid/*[in]*/) = 0; // [75]
  virtual HRESULT STDMETHODCALLTYPE get_GridX(long* xGrid/*[out,retval]*/) = 0; // [75]
  virtual HRESULT STDMETHODCALLTYPE set_GridY(long yGrid/*[in]*/) = 0; // [76]
  virtual HRESULT STDMETHODCALLTYPE get_GridY(long* yGrid/*[out,retval]*/) = 0; // [76]
  virtual HRESULT STDMETHODCALLTYPE get_LoadError(long* LoadError/*[out,retval]*/) = 0; // [77]
  virtual HRESULT STDMETHODCALLTYPE GetSectionInfo(LPDISPATCH SectionElement/*[in]*/, 
                                                   BSTR* RecordSource/*[out]*/, 
                                                   Owc10_xp::SectTypeEnum* SectionType/*[out]*/, 
                                                   Owc10_xp::GroupLevel** GroupLevel/*[out]*/) = 0; // [78]
  virtual HRESULT STDMETHODCALLTYPE DeleteRecordSourceIfUnused(BSTR RecordSource/*[in]*/) = 0; // [79]
  virtual HRESULT STDMETHODCALLTYPE DeletePageFieldIfUnused(BSTR RecordSource/*[in]*/, 
                                                            BSTR PageField/*[in]*/) = 0; // [80]
  virtual HRESULT STDMETHODCALLTYPE set_DefaultControlType(Owc10_xp::DefaultControlTypeEnum ControlType/*[in]*/) = 0; // [81]
  virtual HRESULT STDMETHODCALLTYPE get_DefaultControlType(Owc10_xp::DefaultControlTypeEnum* ControlType/*[out,retval]*/) = 0; // [81]
  virtual HRESULT STDMETHODCALLTYPE set_IsDirty(VARIANT_BOOL IsDirty/*[in]*/) = 0; // [82]
  virtual HRESULT STDMETHODCALLTYPE get_IsDirty(VARIANT_BOOL* IsDirty/*[out,retval]*/) = 0; // [82]
  virtual HRESULT STDMETHODCALLTYPE get_Busy(VARIANT_BOOL* Busy/*[out,retval]*/) = 0; // [83]
  virtual HRESULT STDMETHODCALLTYPE get_Version(BSTR* Version/*[out,retval]*/) = 0; // [84]
  virtual HRESULT STDMETHODCALLTYPE get_MajorVersion(long* MajorVersion/*[out,retval]*/) = 0; // [85]
  virtual HRESULT STDMETHODCALLTYPE get_MinorVersion(BSTR* MinorVersion/*[out,retval]*/) = 0; // [86]
  virtual HRESULT STDMETHODCALLTYPE get_BuildNumber(BSTR* BuildNumber/*[out,retval]*/) = 0; // [87]
  virtual HRESULT STDMETHODCALLTYPE get_RevisionNumber(BSTR* RevisionNumber/*[out,retval]*/) = 0; // [88]
  virtual HRESULT STDMETHODCALLTYPE ResetRecordset(BSTR bstrRecordset) = 0; // [89]
  virtual HRESULT STDMETHODCALLTYPE set_IsDataModelDirty(VARIANT_BOOL IsDataModelDirty/*[in]*/) = 0; // [71]
  virtual HRESULT STDMETHODCALLTYPE get_IsDataModelDirty(VARIANT_BOOL* IsDataModelDirty/*[out,retval]*/) = 0; // [71]
  virtual HRESULT STDMETHODCALLTYPE GetExportableConnectString(Owc10_xp::ExportableConnectStringEnum ExportType/*[in]*/, 
                                                               BSTR* ConnectString/*[out]*/) = 0; // [91]
  virtual HRESULT STDMETHODCALLTYPE ExportXML(Owc10_xp::DscEncodingEnum eEncoding/*[in,def,opt]*/) = 0; // [93]
  virtual HRESULT STDMETHODCALLTYPE SetRootRecordset(BSTR RecordsetName/*[in]*/, 
                                                     Adodb_xp::Recordset* Recordset/*[in]*/) = 0; // [94]
  virtual HRESULT STDMETHODCALLTYPE GetOfflineDisplayInfo(BSTR* OnlineServer/*[out]*/, 
                                                          BSTR* OnlineDatabase/*[out]*/, 
                                                          BSTR* OfflineServer/*[out]*/, 
                                                          BSTR* OfflineDatabase/*[out]*/) = 0; // [95]
  virtual HRESULT STDMETHODCALLTYPE set_OfflineType(Owc10_xp::DscOfflineTypeEnum Publication/*[in]*/) = 0; // [96]
  virtual HRESULT STDMETHODCALLTYPE get_OfflineType(Owc10_xp::DscOfflineTypeEnum* Publication/*[out,retval]*/) = 0; // [96]
  virtual HRESULT STDMETHODCALLTYPE set_OfflinePublication(BSTR Publication/*[in]*/) = 0; // [97]
  virtual HRESULT STDMETHODCALLTYPE get_OfflinePublication(BSTR* Publication/*[out,retval]*/) = 0; // [97]
  virtual HRESULT STDMETHODCALLTYPE get_Offline(VARIANT_BOOL* IsOffline/*[out,retval]*/) = 0; // [98]
  virtual HRESULT STDMETHODCALLTYPE set_OfflineSource(BSTR Source/*[in]*/) = 0; // [99]
  virtual HRESULT STDMETHODCALLTYPE get_OfflineSource(BSTR* Source/*[out,retval]*/) = 0; // [99]
  virtual HRESULT STDMETHODCALLTYPE set_XMLLocation(Owc10_xp::DscXMLLocationEnum Location/*[in]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_XMLLocation(Owc10_xp::DscXMLLocationEnum* Location/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE set_UseXMLData(VARIANT_BOOL UseXMLData/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_UseXMLData(VARIANT_BOOL* UseXMLData/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_XMLDataTarget(BSTR Source/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_XMLDataTarget(BSTR* Source/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE Refresh(Owc10_xp::RefreshType RefreshType/*[in,def,opt]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE FindRelatedGroupLevel(Owc10_xp::GroupLevel* pGroupLevel/*[in]*/, 
                                                          long fChild/*[in]*/, 
                                                          Owc10_xp::GroupLevel** ppGrouplevel/*[out]*/) = 0; // [92]
  virtual HRESULT STDMETHODCALLTYPE DllNotification(Owc10_xp::NotificationType Notification/*[in]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE SuspendUndo(VARIANT_BOOL Suspend/*[in]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE UpdateFocus(void) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE set_ConnectionFile(BSTR ConnectionFile/*[in]*/) = 0; // [108]
  virtual HRESULT STDMETHODCALLTYPE get_ConnectionFile(BSTR* ConnectionFile/*[out,retval]*/) = 0; // [108]
  virtual HRESULT STDMETHODCALLTYPE IsValidDAPProvider(BSTR ConnectionString/*[in]*/, 
                                                       VARIANT_BOOL* IsValid/*[out,retval]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE get_DefaultRecordsetDefName(BSTR* DefaultRecordsetDefName/*[out,retval]*/) = 0; // [110]
  virtual HRESULT STDMETHODCALLTYPE EuroConvert(double Number/*[in]*/, BSTR SourceCurrency/*[in]*/, 
                                                BSTR TargetCurrency/*[in]*/, 
                                                VARIANT FullPrecision/*[in,opt]*/, 
                                                VARIANT TriangulationPrecision/*[in,opt]*/, 
                                                double* pRet/*[out,retval]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE GetDAPProviders(LPSAFEARRAY* Providers/*[out,retval]*/) = 0; // [112]
  virtual HRESULT STDMETHODCALLTYPE SetSynchronizing(VARIANT_BOOL Synchronizing/*[in]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE get_ConnectionStringFullPath(BSTR* ConnectionStringFullPath/*[out,retval]*/) = 0; // [125]
  virtual HRESULT STDMETHODCALLTYPE SetDisplayError(VARIANT_BOOL DisplayError/*[in]*/) = 0; // [126]
  virtual HRESULT STDMETHODCALLTYPE set_IsNew(VARIANT_BOOL IsNew/*[in]*/) = 0; // [70]
  virtual HRESULT STDMETHODCALLTYPE get_SchemaDiagrams(Owc10_xp::SchemaDiagrams** SchemaDiagrams/*[out,retval]*/) = 0; // [128]
  virtual HRESULT STDMETHODCALLTYPE SuspendXMLReExecute(VARIANT_BOOL Suspend/*[in]*/) = 0; // [129]
  virtual HRESULT STDMETHODCALLTYPE get_DBNSOwnerName(BSTR* OwnerName/*[out,retval]*/) = 0; // [130]
  virtual HRESULT STDMETHODCALLTYPE SetFirePropChange(VARIANT_BOOL FirePropChange/*[in]*/) = 0; // [131]
  virtual HRESULT STDMETHODCALLTYPE Nz(VARIANT Value/*[in]*/, VARIANT ValueIfNull/*[in,opt]*/, 
                                       VARIANT* pRet/*[out,retval]*/) = 0; // [132]
  virtual HRESULT STDMETHODCALLTYPE RefreshJetCache(void) = 0; // [133]
  virtual HRESULT STDMETHODCALLTYPE AutoRefreshOfflineSource(void) = 0; // [1320]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_ConnectionString(void)
  {
    BSTR ConnectionString = 0;
    OLECHECK(this->get_ConnectionString((BSTR*)&ConnectionString));
    return ConnectionString;
  }

  BSTR __fastcall get_CurrentDirectory(void)
  {
    BSTR CurrentDirectory = 0;
    OLECHECK(this->get_CurrentDirectory((BSTR*)&CurrentDirectory));
    return CurrentDirectory;
  }

  VARIANT_BOOL __fastcall get_UseRemoteProvider(void)
  {
    VARIANT_BOOL RemoteProvider;
    OLECHECK(this->get_UseRemoteProvider((VARIANT_BOOL*)&RemoteProvider));
    return RemoteProvider;
  }

  Adodb_xp::Connection* __fastcall get_Connection(void)
  {
    Adodb_xp::Connection* Connection;
    OLECHECK(this->get_Connection((Adodb_xp::Connection**)&Connection));
    return Connection;
  }

  VARIANT_BOOL __fastcall get_DataEntry(void)
  {
    VARIANT_BOOL DataEntry;
    OLECHECK(this->get_DataEntry((VARIANT_BOOL*)&DataEntry));
    return DataEntry;
  }

  long __fastcall get_MaxRecords(void)
  {
    long RecordsMax;
    OLECHECK(this->get_MaxRecords((long*)&RecordsMax));
    return RecordsMax;
  }

  Adodb_xp::Recordset* __fastcall get_DefaultRecordset(void)
  {
    Adodb_xp::Recordset* RecordsetDefault;
    OLECHECK(this->get_DefaultRecordset((Adodb_xp::Recordset**)&RecordsetDefault));
    return RecordsetDefault;
  }

  Adodb_xp::Recordset* __fastcall Execute(BSTR RecordsetName/*[in]*/, 
                                          Adodb_xp::ExecuteOptionEnum ExecuteOption/*[in,def,opt]*/, 
                                          Owc10_xp::DscFetchTypeEnum FetchType/*[in,def,opt]*/)
  {
    Adodb_xp::Recordset* Recordset;
    OLECHECK(this->Execute(RecordsetName, ExecuteOption, FetchType, (Adodb_xp::Recordset**)&Recordset));
    return Recordset;
  }

  Owc10_xp::SchemaRowsources* __fastcall get_SchemaRowsources(void)
  {
    Owc10_xp::SchemaRowsources* SchemaRowsources;
    OLECHECK(this->get_SchemaRowsources((Owc10_xp::SchemaRowsources**)&SchemaRowsources));
    return SchemaRowsources;
  }

  Owc10_xp::SchemaRelationships* __fastcall get_SchemaRelationships(void)
  {
    Owc10_xp::SchemaRelationships* SchemaRelationships;
    OLECHECK(this->get_SchemaRelationships((Owc10_xp::SchemaRelationships**)&SchemaRelationships));
    return SchemaRelationships;
  }

  Owc10_xp::PageRowsources* __fastcall get_PageRowsources(void)
  {
    Owc10_xp::PageRowsources* PageRowsources;
    OLECHECK(this->get_PageRowsources((Owc10_xp::PageRowsources**)&PageRowsources));
    return PageRowsources;
  }

  Owc10_xp::RecordsetDefs* __fastcall get_RecordsetDefs(void)
  {
    Owc10_xp::RecordsetDefs* RecordsetDefs;
    OLECHECK(this->get_RecordsetDefs((Owc10_xp::RecordsetDefs**)&RecordsetDefs));
    return RecordsetDefs;
  }

  Owc10_xp::RecordsetDefs* __fastcall get_RootRecordsetDefs(void)
  {
    Owc10_xp::RecordsetDefs* RootRecordsetDefs;
    OLECHECK(this->get_RootRecordsetDefs((Owc10_xp::RecordsetDefs**)&RootRecordsetDefs));
    return RootRecordsetDefs;
  }

  LPDISPATCH __fastcall get_PivotDefs(void)
  {
    LPDISPATCH PivotDefs;
    OLECHECK(this->get_PivotDefs((LPDISPATCH*)&PivotDefs));
    return PivotDefs;
  }

  BSTR __fastcall get_DefaultRecordsetName(void)
  {
    BSTR DefaultRecordsetName = 0;
    OLECHECK(this->get_DefaultRecordsetName((BSTR*)&DefaultRecordsetName));
    return DefaultRecordsetName;
  }

  BSTR __fastcall get_XMLData(void)
  {
    BSTR XMLData = 0;
    OLECHECK(this->get_XMLData((BSTR*)&XMLData));
    return XMLData;
  }

  Owc10_xp::GroupLevels* __fastcall get_GroupLevels(void)
  {
    Owc10_xp::GroupLevels* GroupLevels;
    OLECHECK(this->get_GroupLevels((Owc10_xp::GroupLevels**)&GroupLevels));
    return GroupLevels;
  }

  Owc10_xp::Section* __fastcall GetContainingSection(LPDISPATCH Element/*[in]*/)
  {
    Owc10_xp::Section* Section;
    OLECHECK(this->GetContainingSection(Element, (Owc10_xp::Section**)&Section));
    return Section;
  }

  LPDISPATCH __fastcall get_Constants(void)
  {
    LPDISPATCH IDispatchConstants;
    OLECHECK(this->get_Constants((LPDISPATCH*)&IDispatchConstants));
    return IDispatchConstants;
  }

  Owc10_xp::ElementExtensions* __fastcall get_ElementExtensions(void)
  {
    Owc10_xp::ElementExtensions* ElementExtensions;
    OLECHECK(this->get_ElementExtensions((Owc10_xp::ElementExtensions**)&ElementExtensions));
    return ElementExtensions;
  }

  VARIANT_BOOL __fastcall get_IsNew(void)
  {
    VARIANT_BOOL IsNew;
    OLECHECK(this->get_IsNew((VARIANT_BOOL*)&IsNew));
    return IsNew;
  }

  Owc10_xp::DscRecordsetTypeEnum __fastcall get_RecordsetType(void)
  {
    Owc10_xp::DscRecordsetTypeEnum RecordsetType;
    OLECHECK(this->get_RecordsetType((Owc10_xp::DscRecordsetTypeEnum*)&RecordsetType));
    return RecordsetType;
  }

  BSTR __fastcall HyperlinkPart(VARIANT Hyperlink/*[in]*/, 
                                Owc10_xp::DscHyperlinkPartEnum Part/*[in]*/)
  {
    BSTR Ret = 0;
    OLECHECK(this->HyperlinkPart(Hyperlink, Part, (BSTR*)&Ret));
    return Ret;
  }

  Owc10_xp::AllPageFields* __fastcall get_AllPageFields(void)
  {
    Owc10_xp::AllPageFields* AllPageFields;
    OLECHECK(this->get_AllPageFields((Owc10_xp::AllPageFields**)&AllPageFields));
    return AllPageFields;
  }

  Owc10_xp::Section* __fastcall get_CurrentSection(void)
  {
    Owc10_xp::Section* Section;
    OLECHECK(this->get_CurrentSection((Owc10_xp::Section**)&Section));
    return Section;
  }

  Owc10_xp::ProviderType __fastcall get_ProviderType(VARIANT DataMember/*[in,opt]*/= TNoParam())
  {
    Owc10_xp::ProviderType ProviderType;
    OLECHECK(this->get_ProviderType(DataMember, (Owc10_xp::ProviderType*)&ProviderType));
    return ProviderType;
  }

  Owc10_xp::AllGroupingDefs* __fastcall get_AllGroupingDefs(void)
  {
    Owc10_xp::AllGroupingDefs* AllGroupingDefs;
    OLECHECK(this->get_AllGroupingDefs((Owc10_xp::AllGroupingDefs**)&AllGroupingDefs));
    return AllGroupingDefs;
  }

  VARIANT_BOOL __fastcall get_DisplayAlerts(void)
  {
    VARIANT_BOOL DisplayAlerts;
    OLECHECK(this->get_DisplayAlerts((VARIANT_BOOL*)&DisplayAlerts));
    return DisplayAlerts;
  }

  Owc10_xp::DataPages* __fastcall get_DataPages(void)
  {
    Owc10_xp::DataPages* DataPages;
    OLECHECK(this->get_DataPages((Owc10_xp::DataPages**)&DataPages));
    return DataPages;
  }

  Msdatasrc_xp::DataMember __fastcall getDataMemberName(long lIndex/*[in]*/)
  {
    Msdatasrc_xp::DataMember pbstrDM;
    OLECHECK(this->getDataMemberName(lIndex, (Msdatasrc_xp::DataMember*)&pbstrDM));
    return pbstrDM;
  }

  long __fastcall getDataMemberCount(void)
  {
    long plcount;
    OLECHECK(this->getDataMemberCount((long*)&plcount));
    return plcount;
  }

  long __fastcall get_GridX(void)
  {
    long xGrid;
    OLECHECK(this->get_GridX((long*)&xGrid));
    return xGrid;
  }

  long __fastcall get_GridY(void)
  {
    long yGrid;
    OLECHECK(this->get_GridY((long*)&yGrid));
    return yGrid;
  }

  long __fastcall get_LoadError(void)
  {
    long LoadError;
    OLECHECK(this->get_LoadError((long*)&LoadError));
    return LoadError;
  }

  Owc10_xp::DefaultControlTypeEnum __fastcall get_DefaultControlType(void)
  {
    Owc10_xp::DefaultControlTypeEnum ControlType;
    OLECHECK(this->get_DefaultControlType((Owc10_xp::DefaultControlTypeEnum*)&ControlType));
    return ControlType;
  }

  VARIANT_BOOL __fastcall get_IsDirty(void)
  {
    VARIANT_BOOL IsDirty;
    OLECHECK(this->get_IsDirty((VARIANT_BOOL*)&IsDirty));
    return IsDirty;
  }

  VARIANT_BOOL __fastcall get_Busy(void)
  {
    VARIANT_BOOL Busy;
    OLECHECK(this->get_Busy((VARIANT_BOOL*)&Busy));
    return Busy;
  }

  BSTR __fastcall get_Version(void)
  {
    BSTR Version = 0;
    OLECHECK(this->get_Version((BSTR*)&Version));
    return Version;
  }

  long __fastcall get_MajorVersion(void)
  {
    long MajorVersion;
    OLECHECK(this->get_MajorVersion((long*)&MajorVersion));
    return MajorVersion;
  }

  BSTR __fastcall get_MinorVersion(void)
  {
    BSTR MinorVersion = 0;
    OLECHECK(this->get_MinorVersion((BSTR*)&MinorVersion));
    return MinorVersion;
  }

  BSTR __fastcall get_BuildNumber(void)
  {
    BSTR BuildNumber = 0;
    OLECHECK(this->get_BuildNumber((BSTR*)&BuildNumber));
    return BuildNumber;
  }

  BSTR __fastcall get_RevisionNumber(void)
  {
    BSTR RevisionNumber = 0;
    OLECHECK(this->get_RevisionNumber((BSTR*)&RevisionNumber));
    return RevisionNumber;
  }

  VARIANT_BOOL __fastcall get_IsDataModelDirty(void)
  {
    VARIANT_BOOL IsDataModelDirty;
    OLECHECK(this->get_IsDataModelDirty((VARIANT_BOOL*)&IsDataModelDirty));
    return IsDataModelDirty;
  }

  Owc10_xp::DscOfflineTypeEnum __fastcall get_OfflineType(void)
  {
    Owc10_xp::DscOfflineTypeEnum Publication;
    OLECHECK(this->get_OfflineType((Owc10_xp::DscOfflineTypeEnum*)&Publication));
    return Publication;
  }

  BSTR __fastcall get_OfflinePublication(void)
  {
    BSTR Publication = 0;
    OLECHECK(this->get_OfflinePublication((BSTR*)&Publication));
    return Publication;
  }

  VARIANT_BOOL __fastcall get_Offline(void)
  {
    VARIANT_BOOL IsOffline;
    OLECHECK(this->get_Offline((VARIANT_BOOL*)&IsOffline));
    return IsOffline;
  }

  BSTR __fastcall get_OfflineSource(void)
  {
    BSTR Source = 0;
    OLECHECK(this->get_OfflineSource((BSTR*)&Source));
    return Source;
  }

  Owc10_xp::DscXMLLocationEnum __fastcall get_XMLLocation(void)
  {
    Owc10_xp::DscXMLLocationEnum Location;
    OLECHECK(this->get_XMLLocation((Owc10_xp::DscXMLLocationEnum*)&Location));
    return Location;
  }

  VARIANT_BOOL __fastcall get_UseXMLData(void)
  {
    VARIANT_BOOL UseXMLData;
    OLECHECK(this->get_UseXMLData((VARIANT_BOOL*)&UseXMLData));
    return UseXMLData;
  }

  BSTR __fastcall get_XMLDataTarget(void)
  {
    BSTR Source = 0;
    OLECHECK(this->get_XMLDataTarget((BSTR*)&Source));
    return Source;
  }

  BSTR __fastcall get_ConnectionFile(void)
  {
    BSTR ConnectionFile = 0;
    OLECHECK(this->get_ConnectionFile((BSTR*)&ConnectionFile));
    return ConnectionFile;
  }

  VARIANT_BOOL __fastcall IsValidDAPProvider(BSTR ConnectionString/*[in]*/)
  {
    VARIANT_BOOL IsValid;
    OLECHECK(this->IsValidDAPProvider(ConnectionString, (VARIANT_BOOL*)&IsValid));
    return IsValid;
  }

  BSTR __fastcall get_DefaultRecordsetDefName(void)
  {
    BSTR DefaultRecordsetDefName = 0;
    OLECHECK(this->get_DefaultRecordsetDefName((BSTR*)&DefaultRecordsetDefName));
    return DefaultRecordsetDefName;
  }

  double __fastcall EuroConvert(double Number/*[in]*/, BSTR SourceCurrency/*[in]*/, 
                                BSTR TargetCurrency/*[in]*/, 
                                VARIANT FullPrecision/*[in,opt]*/= TNoParam(), 
                                VARIANT TriangulationPrecision/*[in,opt]*/= TNoParam())
  {
    double pRet;
    OLECHECK(this->EuroConvert(Number, SourceCurrency, TargetCurrency, FullPrecision, 
                               TriangulationPrecision, (double*)&pRet));
    return pRet;
  }

  LPSAFEARRAY __fastcall GetDAPProviders(void)
  {
    LPSAFEARRAY Providers;
    OLECHECK(this->GetDAPProviders((LPSAFEARRAY*)&Providers));
    return Providers;
  }

  BSTR __fastcall get_ConnectionStringFullPath(void)
  {
    BSTR ConnectionStringFullPath = 0;
    OLECHECK(this->get_ConnectionStringFullPath((BSTR*)&ConnectionStringFullPath));
    return ConnectionStringFullPath;
  }

  Owc10_xp::SchemaDiagrams* __fastcall get_SchemaDiagrams(void)
  {
    Owc10_xp::SchemaDiagrams* SchemaDiagrams;
    OLECHECK(this->get_SchemaDiagrams((Owc10_xp::SchemaDiagrams**)&SchemaDiagrams));
    return SchemaDiagrams;
  }

  BSTR __fastcall get_DBNSOwnerName(void)
  {
    BSTR OwnerName = 0;
    OLECHECK(this->get_DBNSOwnerName((BSTR*)&OwnerName));
    return OwnerName;
  }

  VARIANT __fastcall Nz(VARIANT Value/*[in]*/, VARIANT ValueIfNull/*[in,opt]*/= TNoParam())
  {
    VARIANT pRet;
    OLECHECK(this->Nz(Value, ValueIfNull, (VARIANT*)&pRet));
    return pRet;
  }


  __property   BSTR            ConnectionString = {read = get_ConnectionString, write = set_ConnectionString};
  __property   BSTR            CurrentDirectory = {read = get_CurrentDirectory};
  __property   VARIANT_BOOL    UseRemoteProvider = {read = get_UseRemoteProvider, write = set_UseRemoteProvider};
  __property   Adodb_xp::Connection* Connection = {read = get_Connection};
  __property   VARIANT_BOOL    DataEntry = {read = get_DataEntry, write = set_DataEntry};
  __property   long            MaxRecords = {read = get_MaxRecords, write = set_MaxRecords};
  __property   Adodb_xp::Recordset* DefaultRecordset = {read = get_DefaultRecordset};
  __property   Owc10_xp::SchemaRowsources* SchemaRowsources = {read = get_SchemaRowsources};
  __property   Owc10_xp::SchemaRelationships* SchemaRelationships = {read = get_SchemaRelationships};
  __property   Owc10_xp::PageRowsources* PageRowsources = {read = get_PageRowsources};
  __property   Owc10_xp::RecordsetDefs* RecordsetDefs = {read = get_RecordsetDefs};
  __property   Owc10_xp::RecordsetDefs* RootRecordsetDefs = {read = get_RootRecordsetDefs};
  __property   LPDISPATCH      PivotDefs = {read = get_PivotDefs};
  __property   BSTR            DefaultRecordsetName = {read = get_DefaultRecordsetName, write = set_DefaultRecordsetName};
  __property   BSTR            XMLData = {read = get_XMLData, write = set_XMLData};
  __property   Owc10_xp::GroupLevels* GroupLevels = {read = get_GroupLevels};
  __property   LPDISPATCH      Constants = {read = get_Constants};
  __property   Owc10_xp::ElementExtensions* ElementExtensions = {read = get_ElementExtensions};
  __property   VARIANT_BOOL    IsNew = {read = get_IsNew, write = set_IsNew};
  __property   Owc10_xp::DscRecordsetTypeEnum RecordsetType = {read = get_RecordsetType, write = set_RecordsetType};
  __property   Owc10_xp::AllPageFields* AllPageFields = {read = get_AllPageFields};
  __property   Owc10_xp::Section* CurrentSection = {read = get_CurrentSection};
  __property   Owc10_xp::AllGroupingDefs* AllGroupingDefs = {read = get_AllGroupingDefs};
  __property   VARIANT_BOOL    DisplayAlerts = {read = get_DisplayAlerts, write = set_DisplayAlerts};
  __property   Owc10_xp::DataPages* DataPages = {read = get_DataPages};
  __property   long            GridX = {read = get_GridX, write = set_GridX};
  __property   long            GridY = {read = get_GridY, write = set_GridY};
  __property   long            LoadError = {read = get_LoadError};
  __property   Owc10_xp::DefaultControlTypeEnum DefaultControlType = {read = get_DefaultControlType, write = set_DefaultControlType};
  __property   VARIANT_BOOL    IsDirty = {read = get_IsDirty, write = set_IsDirty};
  __property   VARIANT_BOOL    Busy = {read = get_Busy};
  __property   BSTR            Version = {read = get_Version};
  __property   long            MajorVersion = {read = get_MajorVersion};
  __property   BSTR            MinorVersion = {read = get_MinorVersion};
  __property   BSTR            BuildNumber = {read = get_BuildNumber};
  __property   BSTR            RevisionNumber = {read = get_RevisionNumber};
  __property   VARIANT_BOOL    IsDataModelDirty = {read = get_IsDataModelDirty, write = set_IsDataModelDirty};
  __property   Owc10_xp::DscOfflineTypeEnum OfflineType = {read = get_OfflineType, write = set_OfflineType};
  __property   BSTR            OfflinePublication = {read = get_OfflinePublication, write = set_OfflinePublication};
  __property   VARIANT_BOOL    Offline = {read = get_Offline};
  __property   BSTR            OfflineSource = {read = get_OfflineSource, write = set_OfflineSource};
  __property   Owc10_xp::DscXMLLocationEnum XMLLocation = {read = get_XMLLocation, write = set_XMLLocation};
  __property   VARIANT_BOOL    UseXMLData = {read = get_UseXMLData, write = set_UseXMLData};
  __property   BSTR            XMLDataTarget = {read = get_XMLDataTarget, write = set_XMLDataTarget};
  __property   BSTR            ConnectionFile = {read = get_ConnectionFile, write = set_ConnectionFile};
  __property   BSTR            DefaultRecordsetDefName = {read = get_DefaultRecordsetDefName};
  __property   BSTR            ConnectionStringFullPath = {read = get_ConnectionStringFullPath};
  __property   Owc10_xp::SchemaDiagrams* SchemaDiagrams = {read = get_SchemaDiagrams};
  __property   BSTR            DBNSOwnerName = {read = get_DBNSOwnerName};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: DSCEventInfo
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B06-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface DSCEventInfo  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_DataPage(Owc10_xp::DataPage** DataPage/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Section(Owc10_xp::Section** Section/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Error(Adodb_xp::Error** Error/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ReturnValue(VARIANT_BOOL* ReturnValue/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_ReturnValue(VARIANT_BOOL ReturnValue/*[in]*/) = 0; // [1610743811]
  virtual HRESULT STDMETHODCALLTYPE get_PercentComplete(long* PercentComplete/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Status(Owc10_xp::DscStatusEnum* Status/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayAlert(Owc10_xp::DscDisplayAlert DisplayAlert/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayAlert(Owc10_xp::DscDisplayAlert* DisplayAlert/*[out,retval]*/) = 0; // [1610743815]
  virtual HRESULT STDMETHODCALLTYPE get_Connection(Adodb_xp::Connection** Connection/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::DataPage* __fastcall get_DataPage(void)
  {
    Owc10_xp::DataPage* DataPage;
    OLECHECK(this->get_DataPage((Owc10_xp::DataPage**)&DataPage));
    return DataPage;
  }

  Owc10_xp::Section* __fastcall get_Section(void)
  {
    Owc10_xp::Section* Section;
    OLECHECK(this->get_Section((Owc10_xp::Section**)&Section));
    return Section;
  }

  Adodb_xp::Error* __fastcall get_Error(void)
  {
    Adodb_xp::Error* Error;
    OLECHECK(this->get_Error((Adodb_xp::Error**)&Error));
    return Error;
  }

  VARIANT_BOOL __fastcall get_ReturnValue(void)
  {
    VARIANT_BOOL ReturnValue;
    OLECHECK(this->get_ReturnValue((VARIANT_BOOL*)&ReturnValue));
    return ReturnValue;
  }

  long __fastcall get_PercentComplete(void)
  {
    long PercentComplete;
    OLECHECK(this->get_PercentComplete((long*)&PercentComplete));
    return PercentComplete;
  }

  Owc10_xp::DscStatusEnum __fastcall get_Status(void)
  {
    Owc10_xp::DscStatusEnum Status;
    OLECHECK(this->get_Status((Owc10_xp::DscStatusEnum*)&Status));
    return Status;
  }

  Owc10_xp::DscDisplayAlert __fastcall get_DisplayAlert(void)
  {
    Owc10_xp::DscDisplayAlert DisplayAlert;
    OLECHECK(this->get_DisplayAlert((Owc10_xp::DscDisplayAlert*)&DisplayAlert));
    return DisplayAlert;
  }

  Adodb_xp::Connection* __fastcall get_Connection(void)
  {
    Adodb_xp::Connection* Connection;
    OLECHECK(this->get_Connection((Adodb_xp::Connection**)&Connection));
    return Connection;
  }


  __property   Owc10_xp::DataPage* DataPage = {read = get_DataPage};
  __property   Owc10_xp::Section* Section = {read = get_Section};
  __property   Adodb_xp::Error* Error = {read = get_Error};
  __property   VARIANT_BOOL    ReturnValue = {read = get_ReturnValue, write = set_ReturnValue};
  __property   long            PercentComplete = {read = get_PercentComplete};
  __property   Owc10_xp::DscStatusEnum Status = {read = get_Status};
  __property   Owc10_xp::DscDisplayAlert DisplayAlert = {read = get_DisplayAlert, write = set_DisplayAlert};
  __property   Adodb_xp::Connection* Connection = {read = get_Connection};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _DataSourceControlEvent
// Flags:     (4096) Dispatchable
// GUID:      {F5B39A9B-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface _DataSourceControlEvent : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall Current(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/)
  {
    _TDispID _dispid(/* Current */ DISPID(624));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Owc10_xp::DSCEventInfo*)DSCEventInfo /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall BeforeExpand(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/)
  {
    _TDispID _dispid(/* BeforeExpand */ DISPID(626));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Owc10_xp::DSCEventInfo*)DSCEventInfo /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall BeforeCollapse(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/)
  {
    _TDispID _dispid(/* BeforeCollapse */ DISPID(627));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Owc10_xp::DSCEventInfo*)DSCEventInfo /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall BeforeFirstPage(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/)
  {
    _TDispID _dispid(/* BeforeFirstPage */ DISPID(628));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Owc10_xp::DSCEventInfo*)DSCEventInfo /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall BeforePreviousPage(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/)
  {
    _TDispID _dispid(/* BeforePreviousPage */ DISPID(629));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Owc10_xp::DSCEventInfo*)DSCEventInfo /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall BeforeNextPage(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/)
  {
    _TDispID _dispid(/* BeforeNextPage */ DISPID(630));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Owc10_xp::DSCEventInfo*)DSCEventInfo /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall BeforeLastPage(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/)
  {
    _TDispID _dispid(/* BeforeLastPage */ DISPID(631));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Owc10_xp::DSCEventInfo*)DSCEventInfo /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall DataError(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/)
  {
    _TDispID _dispid(/* DataError */ DISPID(632));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Owc10_xp::DSCEventInfo*)DSCEventInfo /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall DataPageComplete(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/)
  {
    _TDispID _dispid(/* DataPageComplete */ DISPID(633));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Owc10_xp::DSCEventInfo*)DSCEventInfo /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall BeforeInitialBind(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/)
  {
    _TDispID _dispid(/* BeforeInitialBind */ DISPID(634));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Owc10_xp::DSCEventInfo*)DSCEventInfo /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall RecordsetSaveProgress(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/)
  {
    _TDispID _dispid(/* RecordsetSaveProgress */ DISPID(635));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Owc10_xp::DSCEventInfo*)DSCEventInfo /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall AfterDelete(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/)
  {
    _TDispID _dispid(/* AfterDelete */ DISPID(636));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Owc10_xp::DSCEventInfo*)DSCEventInfo /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall AfterInsert(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/)
  {
    _TDispID _dispid(/* AfterInsert */ DISPID(637));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Owc10_xp::DSCEventInfo*)DSCEventInfo /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall AfterUpdate(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/)
  {
    _TDispID _dispid(/* AfterUpdate */ DISPID(638));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Owc10_xp::DSCEventInfo*)DSCEventInfo /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall BeforeDelete(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/)
  {
    _TDispID _dispid(/* BeforeDelete */ DISPID(639));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Owc10_xp::DSCEventInfo*)DSCEventInfo /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall BeforeInsert(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/)
  {
    _TDispID _dispid(/* BeforeInsert */ DISPID(640));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Owc10_xp::DSCEventInfo*)DSCEventInfo /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall BeforeOverwrite(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/)
  {
    _TDispID _dispid(/* BeforeOverwrite */ DISPID(641));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Owc10_xp::DSCEventInfo*)DSCEventInfo /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall BeforeUpdate(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/)
  {
    _TDispID _dispid(/* BeforeUpdate */ DISPID(642));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Owc10_xp::DSCEventInfo*)DSCEventInfo /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Dirty(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/)
  {
    _TDispID _dispid(/* Dirty */ DISPID(643));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Owc10_xp::DSCEventInfo*)DSCEventInfo /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall RecordExit(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/)
  {
    _TDispID _dispid(/* RecordExit */ DISPID(644));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Owc10_xp::DSCEventInfo*)DSCEventInfo /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Undo(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/)
  {
    _TDispID _dispid(/* Undo */ DISPID(647));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Owc10_xp::DSCEventInfo*)DSCEventInfo /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Focus(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/)
  {
    _TDispID _dispid(/* Focus */ DISPID(648));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Owc10_xp::DSCEventInfo*)DSCEventInfo /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: INavigationControl
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AA8-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface INavigationControl  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_DataSource(Msdatasrc_xp::DataSource* DataSource/*[in]*/) = 0; // [700]
  virtual HRESULT STDMETHODCALLTYPE get_DataSource(Msdatasrc_xp::DataSource** DataSource/*[out,retval]*/) = 0; // [700]
  virtual HRESULT STDMETHODCALLTYPE set_RecordSource(Msdatasrc_xp::DataMember RecordSource/*[in]*/) = 0; // [701]
  virtual HRESULT STDMETHODCALLTYPE get_RecordSource(Msdatasrc_xp::DataMember* RecordSource/*[out,retval]*/) = 0; // [701]
  virtual HRESULT STDMETHODCALLTYPE set_RecordsetLabel(BSTR RecordsetLabel/*[in]*/) = 0; // [702]
  virtual HRESULT STDMETHODCALLTYPE get_RecordsetLabel(BSTR* RecordsetLabel/*[out,retval]*/) = 0; // [702]
  virtual HRESULT STDMETHODCALLTYPE set_ShowFirstButton(VARIANT_BOOL Show/*[in]*/) = 0; // [704]
  virtual HRESULT STDMETHODCALLTYPE get_ShowFirstButton(VARIANT_BOOL* Show/*[out,retval]*/) = 0; // [704]
  virtual HRESULT STDMETHODCALLTYPE set_ShowPrevButton(VARIANT_BOOL Show/*[in]*/) = 0; // [705]
  virtual HRESULT STDMETHODCALLTYPE get_ShowPrevButton(VARIANT_BOOL* Show/*[out,retval]*/) = 0; // [705]
  virtual HRESULT STDMETHODCALLTYPE set_ShowNextButton(VARIANT_BOOL Show/*[in]*/) = 0; // [706]
  virtual HRESULT STDMETHODCALLTYPE get_ShowNextButton(VARIANT_BOOL* Show/*[out,retval]*/) = 0; // [706]
  virtual HRESULT STDMETHODCALLTYPE set_ShowLastButton(VARIANT_BOOL Show/*[in]*/) = 0; // [707]
  virtual HRESULT STDMETHODCALLTYPE get_ShowLastButton(VARIANT_BOOL* Show/*[out,retval]*/) = 0; // [707]
  virtual HRESULT STDMETHODCALLTYPE set_ShowNewButton(VARIANT_BOOL Show/*[in]*/) = 0; // [708]
  virtual HRESULT STDMETHODCALLTYPE get_ShowNewButton(VARIANT_BOOL* Show/*[out,retval]*/) = 0; // [708]
  virtual HRESULT STDMETHODCALLTYPE set_ShowDelButton(VARIANT_BOOL Show/*[in]*/) = 0; // [709]
  virtual HRESULT STDMETHODCALLTYPE get_ShowDelButton(VARIANT_BOOL* Show/*[out,retval]*/) = 0; // [709]
  virtual HRESULT STDMETHODCALLTYPE set_ShowSaveButton(VARIANT_BOOL Show/*[in]*/) = 0; // [710]
  virtual HRESULT STDMETHODCALLTYPE get_ShowSaveButton(VARIANT_BOOL* Show/*[out,retval]*/) = 0; // [710]
  virtual HRESULT STDMETHODCALLTYPE set_ShowUndoButton(VARIANT_BOOL Show/*[in]*/) = 0; // [711]
  virtual HRESULT STDMETHODCALLTYPE get_ShowUndoButton(VARIANT_BOOL* Show/*[out,retval]*/) = 0; // [711]
  virtual HRESULT STDMETHODCALLTYPE set_ShowSortAscendingButton(VARIANT_BOOL Show/*[in]*/) = 0; // [712]
  virtual HRESULT STDMETHODCALLTYPE get_ShowSortAscendingButton(VARIANT_BOOL* Show/*[out,retval]*/) = 0; // [712]
  virtual HRESULT STDMETHODCALLTYPE set_ShowSortDescendingButton(VARIANT_BOOL Show/*[in]*/) = 0; // [713]
  virtual HRESULT STDMETHODCALLTYPE get_ShowSortDescendingButton(VARIANT_BOOL* Show/*[out,retval]*/) = 0; // [713]
  virtual HRESULT STDMETHODCALLTYPE set_ShowFilterBySelectionButton(VARIANT_BOOL pfShow/*[in]*/) = 0; // [714]
  virtual HRESULT STDMETHODCALLTYPE get_ShowFilterBySelectionButton(VARIANT_BOOL* pfShow/*[out,retval]*/) = 0; // [714]
  virtual HRESULT STDMETHODCALLTYPE set_ShowToggleFilterButton(VARIANT_BOOL Show/*[in]*/) = 0; // [715]
  virtual HRESULT STDMETHODCALLTYPE get_ShowToggleFilterButton(VARIANT_BOOL* Show/*[out,retval]*/) = 0; // [715]
  virtual HRESULT STDMETHODCALLTYPE set_ShowHelpButton(VARIANT_BOOL Show/*[in]*/) = 0; // [716]
  virtual HRESULT STDMETHODCALLTYPE get_ShowHelpButton(VARIANT_BOOL* Show/*[out,retval]*/) = 0; // [716]
  virtual HRESULT STDMETHODCALLTYPE set_ShowLabel(VARIANT_BOOL Show/*[in]*/) = 0; // [718]
  virtual HRESULT STDMETHODCALLTYPE get_ShowLabel(VARIANT_BOOL* Show/*[out,retval]*/) = 0; // [718]
  virtual HRESULT STDMETHODCALLTYPE IsButtonEnabled(Owc10_xp::NavButtonEnum navbtn/*[in]*/, 
                                                    VARIANT_BOOL* Enabled/*[out,retval]*/) = 0; // [717]
  virtual HRESULT STDMETHODCALLTYPE set_FontName(BSTR FontName/*[in]*/) = 0; // [719]
  virtual HRESULT STDMETHODCALLTYPE get_FontName(BSTR* FontName/*[out,retval]*/) = 0; // [719]
  virtual HRESULT STDMETHODCALLTYPE get__State(BSTR* State/*[out,retval]*/) = 0; // [720]
  virtual HRESULT STDMETHODCALLTYPE set__State(BSTR State/*[in]*/) = 0; // [720]
  virtual HRESULT STDMETHODCALLTYPE Redraw(void) = 0; // [721]
  virtual HRESULT STDMETHODCALLTYPE ReleaseDataPage(void) = 0; // [722]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Msdatasrc_xp::DataSource* __fastcall get_DataSource(void)
  {
    Msdatasrc_xp::DataSource* DataSource;
    OLECHECK(this->get_DataSource((Msdatasrc_xp::DataSource**)&DataSource));
    return DataSource;
  }

  Msdatasrc_xp::DataMember __fastcall get_RecordSource(void)
  {
    Msdatasrc_xp::DataMember RecordSource;
    OLECHECK(this->get_RecordSource((Msdatasrc_xp::DataMember*)&RecordSource));
    return RecordSource;
  }

  BSTR __fastcall get_RecordsetLabel(void)
  {
    BSTR RecordsetLabel = 0;
    OLECHECK(this->get_RecordsetLabel((BSTR*)&RecordsetLabel));
    return RecordsetLabel;
  }

  VARIANT_BOOL __fastcall get_ShowFirstButton(void)
  {
    VARIANT_BOOL Show;
    OLECHECK(this->get_ShowFirstButton((VARIANT_BOOL*)&Show));
    return Show;
  }

  VARIANT_BOOL __fastcall get_ShowPrevButton(void)
  {
    VARIANT_BOOL Show;
    OLECHECK(this->get_ShowPrevButton((VARIANT_BOOL*)&Show));
    return Show;
  }

  VARIANT_BOOL __fastcall get_ShowNextButton(void)
  {
    VARIANT_BOOL Show;
    OLECHECK(this->get_ShowNextButton((VARIANT_BOOL*)&Show));
    return Show;
  }

  VARIANT_BOOL __fastcall get_ShowLastButton(void)
  {
    VARIANT_BOOL Show;
    OLECHECK(this->get_ShowLastButton((VARIANT_BOOL*)&Show));
    return Show;
  }

  VARIANT_BOOL __fastcall get_ShowNewButton(void)
  {
    VARIANT_BOOL Show;
    OLECHECK(this->get_ShowNewButton((VARIANT_BOOL*)&Show));
    return Show;
  }

  VARIANT_BOOL __fastcall get_ShowDelButton(void)
  {
    VARIANT_BOOL Show;
    OLECHECK(this->get_ShowDelButton((VARIANT_BOOL*)&Show));
    return Show;
  }

  VARIANT_BOOL __fastcall get_ShowSaveButton(void)
  {
    VARIANT_BOOL Show;
    OLECHECK(this->get_ShowSaveButton((VARIANT_BOOL*)&Show));
    return Show;
  }

  VARIANT_BOOL __fastcall get_ShowUndoButton(void)
  {
    VARIANT_BOOL Show;
    OLECHECK(this->get_ShowUndoButton((VARIANT_BOOL*)&Show));
    return Show;
  }

  VARIANT_BOOL __fastcall get_ShowSortAscendingButton(void)
  {
    VARIANT_BOOL Show;
    OLECHECK(this->get_ShowSortAscendingButton((VARIANT_BOOL*)&Show));
    return Show;
  }

  VARIANT_BOOL __fastcall get_ShowSortDescendingButton(void)
  {
    VARIANT_BOOL Show;
    OLECHECK(this->get_ShowSortDescendingButton((VARIANT_BOOL*)&Show));
    return Show;
  }

  VARIANT_BOOL __fastcall get_ShowFilterBySelectionButton(void)
  {
    VARIANT_BOOL pfShow;
    OLECHECK(this->get_ShowFilterBySelectionButton((VARIANT_BOOL*)&pfShow));
    return pfShow;
  }

  VARIANT_BOOL __fastcall get_ShowToggleFilterButton(void)
  {
    VARIANT_BOOL Show;
    OLECHECK(this->get_ShowToggleFilterButton((VARIANT_BOOL*)&Show));
    return Show;
  }

  VARIANT_BOOL __fastcall get_ShowHelpButton(void)
  {
    VARIANT_BOOL Show;
    OLECHECK(this->get_ShowHelpButton((VARIANT_BOOL*)&Show));
    return Show;
  }

  VARIANT_BOOL __fastcall get_ShowLabel(void)
  {
    VARIANT_BOOL Show;
    OLECHECK(this->get_ShowLabel((VARIANT_BOOL*)&Show));
    return Show;
  }

  VARIANT_BOOL __fastcall IsButtonEnabled(Owc10_xp::NavButtonEnum navbtn/*[in]*/)
  {
    VARIANT_BOOL Enabled;
    OLECHECK(this->IsButtonEnabled(navbtn, (VARIANT_BOOL*)&Enabled));
    return Enabled;
  }

  BSTR __fastcall get_FontName(void)
  {
    BSTR FontName = 0;
    OLECHECK(this->get_FontName((BSTR*)&FontName));
    return FontName;
  }

  BSTR __fastcall get__State(void)
  {
    BSTR State = 0;
    OLECHECK(this->get__State((BSTR*)&State));
    return State;
  }


  __property   Msdatasrc_xp::DataSource* DataSource = {read = get_DataSource, write = set_DataSource};
  __property   Msdatasrc_xp::DataMember RecordSource = {read = get_RecordSource, write = set_RecordSource};
  __property   BSTR            RecordsetLabel = {read = get_RecordsetLabel, write = set_RecordsetLabel};
  __property   VARIANT_BOOL    ShowFirstButton = {read = get_ShowFirstButton, write = set_ShowFirstButton};
  __property   VARIANT_BOOL    ShowPrevButton = {read = get_ShowPrevButton, write = set_ShowPrevButton};
  __property   VARIANT_BOOL    ShowNextButton = {read = get_ShowNextButton, write = set_ShowNextButton};
  __property   VARIANT_BOOL    ShowLastButton = {read = get_ShowLastButton, write = set_ShowLastButton};
  __property   VARIANT_BOOL    ShowNewButton = {read = get_ShowNewButton, write = set_ShowNewButton};
  __property   VARIANT_BOOL    ShowDelButton = {read = get_ShowDelButton, write = set_ShowDelButton};
  __property   VARIANT_BOOL    ShowSaveButton = {read = get_ShowSaveButton, write = set_ShowSaveButton};
  __property   VARIANT_BOOL    ShowUndoButton = {read = get_ShowUndoButton, write = set_ShowUndoButton};
  __property   VARIANT_BOOL    ShowSortAscendingButton = {read = get_ShowSortAscendingButton, write = set_ShowSortAscendingButton};
  __property   VARIANT_BOOL    ShowSortDescendingButton = {read = get_ShowSortDescendingButton, write = set_ShowSortDescendingButton};
  __property   VARIANT_BOOL    ShowFilterBySelectionButton = {read = get_ShowFilterBySelectionButton, write = set_ShowFilterBySelectionButton};
  __property   VARIANT_BOOL    ShowToggleFilterButton = {read = get_ShowToggleFilterButton, write = set_ShowToggleFilterButton};
  __property   VARIANT_BOOL    ShowHelpButton = {read = get_ShowHelpButton, write = set_ShowHelpButton};
  __property   VARIANT_BOOL    ShowLabel = {read = get_ShowLabel, write = set_ShowLabel};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   BSTR            _State = {read = get__State};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: INavUIHost
// Flags:     (16) Hidden
// GUID:      {F5B39AC5-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface INavUIHost  : public IUnknown
{
public:
  virtual long STDMETHODCALLTYPE IsButtonEnabled(long navbtn) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE BeforeButtonClick(long navbtn, long* Cancel) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE AfterButtonClick(long navbtn) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetDisplayText(BSTR* DisplayText) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE OnNavUIChange(void) = 0; // [-1]
  virtual long STDMETHODCALLTYPE IsFilterOn(void) = 0; // [-1]
  virtual long STDMETHODCALLTYPE IsContextBiDi(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetFontName(BSTR* FontName) = 0; // [-1]
};

// *********************************************************************//
// Interface: _NavigationEvent
// Flags:     (4096) Dispatchable
// GUID:      {4BD09D02-45CC-11D1-B1D1-006097C97F9B}
// *********************************************************************//
interface _NavigationEvent : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall ButtonClick(Owc10_xp::NavButtonEnum NavButton/*[in]*/)
  {
    _TDispID _dispid(/* ButtonClick */ DISPID(740));
    TAutoArgs<1> _args;
    _args[1] = (int)NavButton /*[VT_USERDEFINED:0]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: IDataPageDesigner
// Flags:     (16) Hidden
// GUID:      {F5B39ADD-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface IDataPageDesigner  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE ConnectDataComponents(Owc10_xp::IDataSourceControl* pDataSourceControl) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE CreateSection(Owc10_xp::SectTypeEnum SectType, 
                                                  LPWSTR wzRecordsetName) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE DeleteSection(Owc10_xp::SectTypeEnum SectType, 
                                                  LPWSTR wzRecordsetName, long fInGroupingDefDelete) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE OnGroupLevelAdded(Owc10_xp::GroupLevel* pGroupLevel) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE OnGroupLevelDeleted(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE RebindGroupLevel(Owc10_xp::GroupLevel* pGroupLevel, 
                                                     LPWSTR wzRecordsetNameOld, 
                                                     LPWSTR wzRecordsetNameNew) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetSharedConnectionObject(LPWSTR wzConnectionString, 
                                                              LPUNKNOWN* ppUnknownSharedConnection) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE TWPerformanceMarker(long lMarker) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE IsDatabaseSecure(LPWSTR wzConnectionString, long* pfSecure) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE OnPropChanged(long dispidChanged) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetSharedDBNS(LPWSTR wzConnectionString, 
                                                  LPUNKNOWN* ppUnknownSharedDBNS) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetDatapagePath(BSTR* ppbstrFileName) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE IsDesignMode(long* pfDesignMode) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE RefreshDataTools(Owc10_xp::IDataSourceControl* pRequestingDSC, 
                                                     VARIANT_BOOL vfForceRefresh, 
                                                     Owc10_xp::RefreshType rt) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetFieldListInstanceId(BSTR* ppbstrInstId) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetUndoManager(Owc10_xp::IOleUndoManager** pioum) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE DoRelWiz(Owc10_xp::IDataSourceControl* pDSC, 
                                             BSTR bstrRecordSetDef, BSTR bstrDropRowsource, 
                                             VARIANT varRowsources, VARIANT varRelationships, 
                                             Owc10_xp::PageRowsource** ppprs, 
                                             Owc10_xp::SchemaRelationship** ppsr) = 0; // [-1]
};

// *********************************************************************//
// Interface: IOleUndoManager
// Flags:     (0)
// GUID:      {D001F200-EF97-11CE-9BC9-00AA00608E01}
// *********************************************************************//
interface IOleUndoManager  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE Open(Owc10_xp::IOleUndoUnit* pPUU/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Close(Owc10_xp::IOleUndoUnit* pPUU/*[in]*/, long fCommit/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Add(Owc10_xp::IOleParentUndoUnit* pUU/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetOpenParentState(unsigned_long* pdwState/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE DiscardFrom(Owc10_xp::IOleParentUndoUnit* pUU/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE UndoTo(Owc10_xp::IOleParentUndoUnit* pUU/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE RedoTo(Owc10_xp::IOleParentUndoUnit* pUU/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE EnumUndoable(Owc10_xp::IEnumOleUndoUnits** ppEnum/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE EnumRedoable(Owc10_xp::IEnumOleUndoUnits** ppEnum/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetLastUndoDescription(BSTR* pbstr/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetLastRedoDescription(BSTR* pbstr/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Enable(long fEnable/*[in]*/) = 0; // [-1]
};

// *********************************************************************//
// Interface: IOleUndoUnit
// Flags:     (0)
// GUID:      {894AD3B0-EF97-11CE-9BC9-00AA00608E01}
// *********************************************************************//
interface IOleUndoUnit  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE Do(Owc10_xp::IOleUndoManager* pUndoManager/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetDescription(BSTR* pbstr/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetUnitType(System::TGUID* pClsid/*[out]*/, long* plID/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE OnNextAdd(void) = 0; // [-1]
};

// *********************************************************************//
// Interface: IOleParentUndoUnit
// Flags:     (0)
// GUID:      {A1FAF330-EF97-11CE-9BC9-00AA00608E01}
// *********************************************************************//
interface IOleParentUndoUnit  : public Owc10_xp::IOleUndoUnit
{
public:
  virtual HRESULT STDMETHODCALLTYPE Open(Owc10_xp::IOleUndoUnit* pPUU/*[in]*/) = 0; // [1610743808]
  virtual HRESULT STDMETHODCALLTYPE Close(Owc10_xp::IOleUndoUnit* pPUU/*[in]*/, long fCommit/*[in]*/) = 0; // [1610743809]
  virtual HRESULT STDMETHODCALLTYPE Add(Owc10_xp::IOleParentUndoUnit* pUU/*[in]*/) = 0; // [1610743810]
  virtual HRESULT STDMETHODCALLTYPE FindUnit(Owc10_xp::IOleParentUndoUnit* pUU/*[in]*/) = 0; // [1610743811]
  virtual HRESULT STDMETHODCALLTYPE GetParentState(unsigned_long* pdwState/*[out]*/) = 0; // [1610743812]
};

// *********************************************************************//
// Interface: IEnumOleUndoUnits
// Flags:     (0)
// GUID:      {B3E7C340-EF97-11CE-9BC9-00AA00608E01}
// *********************************************************************//
interface IEnumOleUndoUnits  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE RemoteNext(unsigned_long cElt/*[in]*/, 
                                               Owc10_xp::IOleParentUndoUnit** rgElt/*[out]*/, 
                                               unsigned_long* pcEltFetched/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Skip(unsigned_long cElt/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Reset(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Clone(Owc10_xp::IEnumOleUndoUnits** ppEnum/*[out]*/) = 0; // [-1]
};

// *********************************************************************//
// Interface: ISimpleDataConverter
// Flags:     (16) Hidden
// GUID:      {78667670-3C3D-11D2-91F9-006097C97F9B}
// *********************************************************************//
interface ISimpleDataConverter  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE ConvertData(VARIANT varSrc, long vtDest, 
                                                LPUNKNOWN pUnknownElement, VARIANT* pvarDest) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE CanConvertData(long vt1, long vt2) = 0; // [-1]
};

// *********************************************************************//
// Interface: FieldListHierarchy
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {7BD180A4-0406-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface FieldListHierarchy  : public IDispatch
{
public:
  // [1] method SetHierarchySite
  virtual HRESULT STDMETHODCALLTYPE SetHierarchySite(Owc10_xp::FieldListHierarchySite* pflhs/*[in]*/) = 0;
  // [2] method AddNode
  virtual HRESULT STDMETHODCALLTYPE AddNode(Owc10_xp::FieldListNode* pflnParent/*[in]*/, 
                                            VARIANT_BOOL fInsertFirst/*[in]*/, long nID/*[in]*/, 
                                            BSTR bstrName/*[in]*/, BSTR bstrData/*[in]*/, 
                                            long nType/*[in]*/, 
                                            Owc10_xp::FieldListNode** ppfln/*[out,retval]*/) = 0;
  // [3] method GetNode
  virtual HRESULT STDMETHODCALLTYPE GetNode(long nID/*[in]*/, 
                                            Owc10_xp::FieldListNode** ppfln/*[out,retval]*/) = 0;
  // [4] method RemoveNode
  virtual HRESULT STDMETHODCALLTYPE RemoveNode(Owc10_xp::FieldListNode* pfln/*[in]*/) = 0;
  // [5] property Root
  virtual HRESULT STDMETHODCALLTYPE get_Root(Owc10_xp::FieldListNode** pVal/*[out,retval]*/) = 0;
  // [6] property Visible
  virtual HRESULT STDMETHODCALLTYPE get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [6] property Visible
  virtual HRESULT STDMETHODCALLTYPE set_Visible(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [7] method AddType
  virtual HRESULT STDMETHODCALLTYPE AddType(long nType/*[in]*/, 
                                            Owc10_xp::FieldListType** ppflt/*[out,retval]*/) = 0;
  // [8] method GetType
  virtual HRESULT STDMETHODCALLTYPE GetType(long nTypeId, 
                                            Owc10_xp::FieldListType** ppflt/*[out,retval]*/) = 0;
  // [9] property Selection
  virtual HRESULT STDMETHODCALLTYPE get_Selection(Owc10_xp::FieldListNode** pVal/*[out,retval]*/) = 0;
  // [10] property ConcatenateData
  virtual HRESULT STDMETHODCALLTYPE get_ConcatenateData(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [10] property ConcatenateData
  virtual HRESULT STDMETHODCALLTYPE set_ConcatenateData(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [11] property DataSeparator
  virtual HRESULT STDMETHODCALLTYPE get_DataSeparator(BSTR* pVal/*[out,retval]*/) = 0;
  // [11] property DataSeparator
  virtual HRESULT STDMETHODCALLTYPE set_DataSeparator(BSTR pVal/*[in]*/) = 0;
  // [12] method GetNextSelected
  virtual HRESULT STDMETHODCALLTYPE GetNextSelected(Owc10_xp::FieldListNode* pfln/*[in]*/, 
                                                    Owc10_xp::FieldListNode** ppfln/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::FieldListNode* __fastcall AddNode(Owc10_xp::FieldListNode* pflnParent/*[in]*/, 
                                              VARIANT_BOOL fInsertFirst/*[in]*/, long nID/*[in]*/, 
                                              BSTR bstrName/*[in]*/, BSTR bstrData/*[in]*/, 
                                              long nType/*[in]*/)
  {
    Owc10_xp::FieldListNode* ppfln;
    OLECHECK(this->AddNode(pflnParent, fInsertFirst, nID, bstrName, bstrData, nType, (Owc10_xp::FieldListNode**)&ppfln));
    return ppfln;
  }

  Owc10_xp::FieldListNode* __fastcall GetNode(long nID/*[in]*/)
  {
    Owc10_xp::FieldListNode* ppfln;
    OLECHECK(this->GetNode(nID, (Owc10_xp::FieldListNode**)&ppfln));
    return ppfln;
  }

  Owc10_xp::FieldListNode* __fastcall get_Root(void)
  {
    Owc10_xp::FieldListNode* pVal;
    OLECHECK(this->get_Root((Owc10_xp::FieldListNode**)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_Visible(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_Visible((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  Owc10_xp::FieldListType* __fastcall AddType(long nType/*[in]*/)
  {
    Owc10_xp::FieldListType* ppflt;
    OLECHECK(this->AddType(nType, (Owc10_xp::FieldListType**)&ppflt));
    return ppflt;
  }

  Owc10_xp::FieldListType* __fastcall GetType(long nTypeId)
  {
    Owc10_xp::FieldListType* ppflt;
    OLECHECK(this->GetType(nTypeId, (Owc10_xp::FieldListType**)&ppflt));
    return ppflt;
  }

  Owc10_xp::FieldListNode* __fastcall get_Selection(void)
  {
    Owc10_xp::FieldListNode* pVal;
    OLECHECK(this->get_Selection((Owc10_xp::FieldListNode**)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_ConcatenateData(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_ConcatenateData((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_DataSeparator(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_DataSeparator((BSTR*)&pVal));
    return pVal;
  }

  Owc10_xp::FieldListNode* __fastcall GetNextSelected(Owc10_xp::FieldListNode* pfln/*[in]*/)
  {
    Owc10_xp::FieldListNode* ppfln;
    OLECHECK(this->GetNextSelected(pfln, (Owc10_xp::FieldListNode**)&ppfln));
    return ppfln;
  }


  __property   Owc10_xp::FieldListNode* Root = {read = get_Root};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   Owc10_xp::FieldListNode* Selection = {read = get_Selection};
  __property   VARIANT_BOOL    ConcatenateData = {read = get_ConcatenateData, write = set_ConcatenateData};
  __property   BSTR            DataSeparator = {read = get_DataSeparator};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: FieldListHierarchySite
// Flags:     (272) Hidden OleAutomation
// GUID:      {FA99DB40-2043-11D3-854E-00C04FAC67D7}
// *********************************************************************//
interface FieldListHierarchySite  : public IUnknown
{
public:
  // [-1] method PreSelect
  virtual HRESULT STDMETHODCALLTYPE PreSelect(long nNodeId, long nTypeId, long nOldNodeId, 
                                              long nOldTypeId, long* pfPrevent/*[out]*/) = 0;
  // [-1] method PostSelect
  virtual HRESULT STDMETHODCALLTYPE PostSelect(long nNodeId, long nTypeId, long nOldNodeId, 
                                               long nOldTypeId) = 0;
  // [-1] method PreExpand
  virtual HRESULT STDMETHODCALLTYPE PreExpand(long nNodeId, long nTypeId, long fExpand, 
                                              long* pfPrevent/*[out]*/) = 0;
  // [-1] method PostExpand
  virtual HRESULT STDMETHODCALLTYPE PostExpand(long nNodeId, long nTypeId, long fExpand) = 0;
  // [-1] method PreDrag
  virtual HRESULT STDMETHODCALLTYPE PreDrag(long nNodeId, long nTypeId, LPUNKNOWN* ppobject/*[out]*/, 
                                            LPUNKNOWN* ppPivotView/*[out]*/, 
                                            long* pfPrevent/*[out]*/) = 0;
  // [-1] method PostDrag
  virtual HRESULT STDMETHODCALLTYPE PostDrag(long nNodeId, long nTypeId, HRESULT hRes) = 0;
  // [-1] method PopulateChildren
  virtual HRESULT STDMETHODCALLTYPE PopulateChildren(long nNodeId, long nTypeId) = 0;
  // [-1] method ContextMenu
  virtual HRESULT STDMETHODCALLTYPE ContextMenu(long nNodeId, long nTypeId, unsigned hMenu/*[in]*/, 
                                                long* pfPrevent/*[out]*/) = 0;
  // [-1] method DoCommand
  virtual HRESULT STDMETHODCALLTYPE DoCommand(long nNodeId, long nTypeId, unsigned wid) = 0;
  // [-1] method DoubleClick
  virtual HRESULT STDMETHODCALLTYPE DoubleClick(long nNodeId, long nTypeId) = 0;
  // [-1] method PostDelete
  virtual HRESULT STDMETHODCALLTYPE PostDelete(long nNodeId, long nTypeId) = 0;
  // [-1] method PostMSelect
  virtual HRESULT STDMETHODCALLTYPE PostMSelect(long nSelMask) = 0;
  // [-1] method Click
  virtual HRESULT STDMETHODCALLTYPE Click(long nNodeId, long nTypeId) = 0;
  // [-1] method KeyEvent
  virtual HRESULT STDMETHODCALLTYPE KeyEvent(long nNodeId, long nTypeId, long nMsg, long nwParam, 
                                             long nlParam, long* pfStopProcessing/*[out]*/) = 0;
};

// *********************************************************************//
// Interface: FieldListNode
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F7DDE2F0-0895-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface FieldListNode  : public IDispatch
{
public:
  // [1] property ID
  virtual HRESULT STDMETHODCALLTYPE get_id(long* pVal/*[out,retval]*/) = 0;
  // [2] property Name
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pVal/*[out,retval]*/) = 0;
  // [2] property Name
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR pVal/*[in]*/) = 0;
  // [3] property TypeId
  virtual HRESULT STDMETHODCALLTYPE get_TypeId(long* pVal/*[out,retval]*/) = 0;
  // [4] property Expanded
  virtual HRESULT STDMETHODCALLTYPE get_Expanded(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [4] property Expanded
  virtual HRESULT STDMETHODCALLTYPE set_Expanded(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [5] property Selected
  virtual HRESULT STDMETHODCALLTYPE get_Selected(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [5] property Selected
  virtual HRESULT STDMETHODCALLTYPE set_Selected(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [6] property Parent
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Owc10_xp::FieldListNode** pVal/*[out,retval]*/) = 0;
  // [7] property Child
  virtual HRESULT STDMETHODCALLTYPE get_Child(Owc10_xp::FieldListNode** pVal/*[out,retval]*/) = 0;
  // [8] property NextSibling
  virtual HRESULT STDMETHODCALLTYPE get_NextSibling(Owc10_xp::FieldListNode** pVal/*[out,retval]*/) = 0;
  // [9] property PrevSibling
  virtual HRESULT STDMETHODCALLTYPE get_PrevSibling(Owc10_xp::FieldListNode** pVal/*[out,retval]*/) = 0;
  // [10] property Bold
  virtual HRESULT STDMETHODCALLTYPE get_Bold(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [10] property Bold
  virtual HRESULT STDMETHODCALLTYPE set_Bold(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [11] property Image
  virtual HRESULT STDMETHODCALLTYPE get_Image(int* pVal/*[out,retval]*/) = 0;
  // [11] property Image
  virtual HRESULT STDMETHODCALLTYPE set_Image(int pVal/*[in]*/) = 0;
  // [12] property Populated
  virtual HRESULT STDMETHODCALLTYPE get_Populated(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [12] property Populated
  virtual HRESULT STDMETHODCALLTYPE set_Populated(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [13] property Data
  virtual HRESULT STDMETHODCALLTYPE get_Data(BSTR* pVal/*[out,retval]*/) = 0;
  // [13] property Data
  virtual HRESULT STDMETHODCALLTYPE set_Data(BSTR pVal/*[in]*/) = 0;
  // [14] property InfoTip
  virtual HRESULT STDMETHODCALLTYPE get_InfoTip(BSTR* pVal/*[out,retval]*/) = 0;
  // [14] property InfoTip
  virtual HRESULT STDMETHODCALLTYPE set_InfoTip(BSTR pVal/*[in]*/) = 0;
  // [15] property HasCaret
  virtual HRESULT STDMETHODCALLTYPE get_HasCaret(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [15] property HasCaret
  virtual HRESULT STDMETHODCALLTYPE set_HasCaret(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [16] property Hierarchy
  virtual HRESULT STDMETHODCALLTYPE get_Hierarchy(Owc10_xp::FieldListHierarchy** pVal/*[out,retval]*/) = 0;
  // [17] property OverlayImage
  virtual HRESULT STDMETHODCALLTYPE get_OverlayImage(int* pVal/*[out,retval]*/) = 0;
  // [17] property OverlayImage
  virtual HRESULT STDMETHODCALLTYPE set_OverlayImage(int pVal/*[in]*/) = 0;
  // [18] method SortChildren
  virtual HRESULT STDMETHODCALLTYPE SortChildren(VARIANT_BOOL vbByData) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_id(void)
  {
    long pVal;
    OLECHECK(this->get_id((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Name((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_TypeId(void)
  {
    long pVal;
    OLECHECK(this->get_TypeId((long*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_Expanded(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_Expanded((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_Selected(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_Selected((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  Owc10_xp::FieldListNode* __fastcall get_Parent(void)
  {
    Owc10_xp::FieldListNode* pVal;
    OLECHECK(this->get_Parent((Owc10_xp::FieldListNode**)&pVal));
    return pVal;
  }

  Owc10_xp::FieldListNode* __fastcall get_Child(void)
  {
    Owc10_xp::FieldListNode* pVal;
    OLECHECK(this->get_Child((Owc10_xp::FieldListNode**)&pVal));
    return pVal;
  }

  Owc10_xp::FieldListNode* __fastcall get_NextSibling(void)
  {
    Owc10_xp::FieldListNode* pVal;
    OLECHECK(this->get_NextSibling((Owc10_xp::FieldListNode**)&pVal));
    return pVal;
  }

  Owc10_xp::FieldListNode* __fastcall get_PrevSibling(void)
  {
    Owc10_xp::FieldListNode* pVal;
    OLECHECK(this->get_PrevSibling((Owc10_xp::FieldListNode**)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_Bold(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_Bold((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  int __fastcall get_Image(void)
  {
    int pVal;
    OLECHECK(this->get_Image((int*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_Populated(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_Populated((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Data(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Data((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_InfoTip(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_InfoTip((BSTR*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_HasCaret(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_HasCaret((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  Owc10_xp::FieldListHierarchy* __fastcall get_Hierarchy(void)
  {
    Owc10_xp::FieldListHierarchy* pVal;
    OLECHECK(this->get_Hierarchy((Owc10_xp::FieldListHierarchy**)&pVal));
    return pVal;
  }

  int __fastcall get_OverlayImage(void)
  {
    int pVal;
    OLECHECK(this->get_OverlayImage((int*)&pVal));
    return pVal;
  }


  __property   long            id = {read = get_id};
  __property   BSTR            Name = {read = get_Name};
  __property   long            TypeId = {read = get_TypeId};
  __property   VARIANT_BOOL    Expanded = {read = get_Expanded, write = set_Expanded};
  __property   VARIANT_BOOL    Selected = {read = get_Selected, write = set_Selected};
  __property   Owc10_xp::FieldListNode* Parent = {read = get_Parent};
  __property   Owc10_xp::FieldListNode* Child = {read = get_Child};
  __property   Owc10_xp::FieldListNode* NextSibling = {read = get_NextSibling};
  __property   Owc10_xp::FieldListNode* PrevSibling = {read = get_PrevSibling};
  __property   VARIANT_BOOL    Bold = {read = get_Bold, write = set_Bold};
  __property   int             Image = {read = get_Image, write = set_Image};
  __property   VARIANT_BOOL    Populated = {read = get_Populated, write = set_Populated};
  __property   BSTR            Data = {read = get_Data};
  __property   BSTR            InfoTip = {read = get_InfoTip};
  __property   VARIANT_BOOL    HasCaret = {read = get_HasCaret, write = set_HasCaret};
  __property   Owc10_xp::FieldListHierarchy* Hierarchy = {read = get_Hierarchy};
  __property   int             OverlayImage = {read = get_OverlayImage, write = set_OverlayImage};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: FieldListType
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {63F85AD0-1ACC-11D3-854A-00C04FAC67D7}
// *********************************************************************//
interface FieldListType  : public IDispatch
{
public:
  // [1] property CanDrag
  virtual HRESULT STDMETHODCALLTYPE get_CanDrag(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [1] property CanDrag
  virtual HRESULT STDMETHODCALLTYPE set_CanDrag(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [2] property CallbackForChildren
  virtual HRESULT STDMETHODCALLTYPE get_CallbackForChildren(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [2] property CallbackForChildren
  virtual HRESULT STDMETHODCALLTYPE set_CallbackForChildren(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [3] property TypeMenu
  virtual HRESULT STDMETHODCALLTYPE get_TypeMenu(unsigned* pVal/*[out,retval]*/) = 0;
  // [3] property TypeMenu
  virtual HRESULT STDMETHODCALLTYPE set_TypeMenu(unsigned pVal/*[in]*/) = 0;
  // [4] property Image
  virtual HRESULT STDMETHODCALLTYPE get_Image(int* pVal/*[out,retval]*/) = 0;
  // [4] property Image
  virtual HRESULT STDMETHODCALLTYPE set_Image(int pVal/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_CanDrag(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_CanDrag((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_CallbackForChildren(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_CallbackForChildren((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  unsigned __fastcall get_TypeMenu(void)
  {
    unsigned pVal;
    OLECHECK(this->get_TypeMenu((unsigned*)&pVal));
    return pVal;
  }

  int __fastcall get_Image(void)
  {
    int pVal;
    OLECHECK(this->get_Image((int*)&pVal));
    return pVal;
  }


  __property   VARIANT_BOOL    CanDrag = {read = get_CanDrag, write = set_CanDrag};
  __property   VARIANT_BOOL    CallbackForChildren = {read = get_CallbackForChildren, write = set_CallbackForChildren};
  __property   unsigned        TypeMenu = {read = get_TypeMenu, write = set_TypeMenu};
  __property   int             Image = {read = get_Image, write = set_Image};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: FieldList
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {7BD1809E-0406-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface FieldList  : public IDispatch
{
public:
  // [1] method CreateHierarchy
  virtual HRESULT STDMETHODCALLTYPE CreateHierarchy(VARIANT_BOOL bVisible/*[in]*/, 
                                                    Owc10_xp::FieldListHierarchy** ppflh/*[out,retval]*/) = 0;
  // [2] property ClipboardFormat
  virtual HRESULT STDMETHODCALLTYPE get_ClipboardFormat(int* pVal/*[out,retval]*/) = 0;
  // [3] method AddBitmap
  virtual HRESULT STDMETHODCALLTYPE AddBitmap(int iWidth, int iHeight, IPicture* pip/*[in]*/, 
                                              unsigned_long crMask, int* pIndex/*[out,retval]*/) = 0;
  // [4] property InstanceId
  virtual HRESULT STDMETHODCALLTYPE get_InstanceID(BSTR* pVal/*[out,retval]*/) = 0;
  // [5] property Font
  virtual HRESULT STDMETHODCALLTYPE get_Font(IFont** pVal/*[out,retval]*/) = 0;
  // [5] property Font
  virtual HRESULT STDMETHODCALLTYPE set_Font(IFont* pVal/*[in]*/) = 0;
  // [6] property MultiSelect
  virtual HRESULT STDMETHODCALLTYPE get_MultiSelect(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [6] property MultiSelect
  virtual HRESULT STDMETHODCALLTYPE set_MultiSelect(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [7] property SelectRestriction
  virtual HRESULT STDMETHODCALLTYPE get_SelectRestriction(Owc10_xp::FieldListSelectRestriction* pVal/*[out,retval]*/) = 0;
  // [7] property SelectRestriction
  virtual HRESULT STDMETHODCALLTYPE set_SelectRestriction(Owc10_xp::FieldListSelectRestriction pVal/*[in]*/) = 0;
  // [8] method GetNextSelected
  virtual HRESULT STDMETHODCALLTYPE GetNextSelected(Owc10_xp::FieldListNode* pfln/*[in]*/, 
                                                    Owc10_xp::FieldListNode** ppfln/*[out,retval]*/) = 0;
  // [9] method ClearSelection
  virtual HRESULT STDMETHODCALLTYPE ClearSelection(void) = 0;
  // [10] method SetOverlayImage
  virtual HRESULT STDMETHODCALLTYPE SetOverlayImage(int iImage, int iOverlay) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Owc10_xp::FieldListHierarchy* __fastcall CreateHierarchy(VARIANT_BOOL bVisible/*[in]*/)
  {
    Owc10_xp::FieldListHierarchy* ppflh;
    OLECHECK(this->CreateHierarchy(bVisible, (Owc10_xp::FieldListHierarchy**)&ppflh));
    return ppflh;
  }

  int __fastcall get_ClipboardFormat(void)
  {
    int pVal;
    OLECHECK(this->get_ClipboardFormat((int*)&pVal));
    return pVal;
  }

  int __fastcall AddBitmap(int iWidth, int iHeight, IPicture* pip/*[in]*/, unsigned_long crMask)
  {
    int pIndex;
    OLECHECK(this->AddBitmap(iWidth, iHeight, pip, crMask, (int*)&pIndex));
    return pIndex;
  }

  BSTR __fastcall get_InstanceID(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_InstanceID((BSTR*)&pVal));
    return pVal;
  }

  IFont* __fastcall get_Font(void)
  {
    IFont* pVal;
    OLECHECK(this->get_Font((IFont**)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_MultiSelect(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_MultiSelect((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  Owc10_xp::FieldListSelectRestriction __fastcall get_SelectRestriction(void)
  {
    Owc10_xp::FieldListSelectRestriction pVal;
    OLECHECK(this->get_SelectRestriction((Owc10_xp::FieldListSelectRestriction*)&pVal));
    return pVal;
  }

  Owc10_xp::FieldListNode* __fastcall GetNextSelected(Owc10_xp::FieldListNode* pfln/*[in]*/)
  {
    Owc10_xp::FieldListNode* ppfln;
    OLECHECK(this->GetNextSelected(pfln, (Owc10_xp::FieldListNode**)&ppfln));
    return ppfln;
  }


  __property   int             ClipboardFormat = {read = get_ClipboardFormat};
  __property   BSTR            InstanceID = {read = get_InstanceID};
  __property   IFont*          Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    MultiSelect = {read = get_MultiSelect, write = set_MultiSelect};
  __property   Owc10_xp::FieldListSelectRestriction SelectRestriction = {read = get_SelectRestriction, write = set_SelectRestriction};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: FieldListDragData
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6EAC3754-49CC-11D3-AE50-00C04F613171}
// *********************************************************************//
interface FieldListDragData  : public IDispatch
{
public:
  // [1] property NodeId
  virtual HRESULT STDMETHODCALLTYPE get_NodeId(long* pVal/*[out,retval]*/) = 0;
  // [2] property TypeId
  virtual HRESULT STDMETHODCALLTYPE get_TypeId(long* pVal/*[out,retval]*/) = 0;
  // [3] property Name
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pVal/*[out,retval]*/) = 0;
  // [4] property Data
  virtual HRESULT STDMETHODCALLTYPE get_Data(BSTR* pVal/*[out,retval]*/) = 0;
  // [5] property FieldListInstanceId
  virtual HRESULT STDMETHODCALLTYPE get_FieldListInstanceId(BSTR* pVal/*[out,retval]*/) = 0;
  // [6] property Object
  virtual HRESULT STDMETHODCALLTYPE get_Object(LPUNKNOWN* ppObj/*[out,retval]*/) = 0;
  // [7] property OwnerObject
  virtual HRESULT STDMETHODCALLTYPE get_OwnerObject(LPUNKNOWN* ppOwnerObject/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_NodeId(void)
  {
    long pVal;
    OLECHECK(this->get_NodeId((long*)&pVal));
    return pVal;
  }

  long __fastcall get_TypeId(void)
  {
    long pVal;
    OLECHECK(this->get_TypeId((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Name((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Data(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Data((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_FieldListInstanceId(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_FieldListInstanceId((BSTR*)&pVal));
    return pVal;
  }

  LPUNKNOWN __fastcall get_Object(void)
  {
    LPUNKNOWN ppObj;
    OLECHECK(this->get_Object((LPUNKNOWN*)&ppObj));
    return ppObj;
  }

  LPUNKNOWN __fastcall get_OwnerObject(void)
  {
    LPUNKNOWN ppOwnerObject;
    OLECHECK(this->get_OwnerObject((LPUNKNOWN*)&ppOwnerObject));
    return ppOwnerObject;
  }


  __property   long            NodeId = {read = get_NodeId};
  __property   long            TypeId = {read = get_TypeId};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Data = {read = get_Data};
  __property   BSTR            FieldListInstanceId = {read = get_FieldListInstanceId};
  __property   LPUNKNOWN       Object = {read = get_Object};
  __property   LPUNKNOWN       OwnerObject = {read = get_OwnerObject};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: FieldListDragDataList
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2A9DDE7C-D83E-11D3-AE6C-00C04F613171}
// *********************************************************************//
interface FieldListDragDataList  : public IDispatch
{
public:
  // [1] property Count
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* pVal/*[out,retval]*/) = 0;
  // [2] property Item
  virtual HRESULT STDMETHODCALLTYPE get_Item(long Index/*[in]*/, 
                                             Owc10_xp::FieldListDragData** pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long pVal;
    OLECHECK(this->get_Count((long*)&pVal));
    return pVal;
  }

  Owc10_xp::FieldListDragData* __fastcall get_Item(long Index/*[in]*/)
  {
    Owc10_xp::FieldListDragData* pVal;
    OLECHECK(this->get_Item(Index, (Owc10_xp::FieldListDragData**)&pVal));
    return pVal;
  }


  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IOfflineInfo
// Flags:     (528) Hidden Restricted
// GUID:      {E2AC0C69-7079-11D3-8D01-0050048383A8}
// *********************************************************************//
interface IOfflineInfo  : public IUnknown
{
public:
  // [-1] method PutServerFilter
  virtual HRESULT STDMETHODCALLTYPE PutServerFilter(LPWSTR pwzUrl, LPWSTR pwzServerFilter) = 0;
  // [-1] method GetServerFilter
  virtual HRESULT STDMETHODCALLTYPE GetServerFilter(LPWSTR pwzUrl, LPWSTR* pwzServerFilter) = 0;
  // [-1] method GetIsPageSubscribed
  virtual HRESULT STDMETHODCALLTYPE GetIsPageSubscribed(LPWSTR pwzUrl, long* pfSubscribed) = 0;
  // [-1] method GetOfflineXMLFileLocation
  virtual HRESULT STDMETHODCALLTYPE GetOfflineXMLFileLocation(BSTR* pbstrPath) = 0;
};

// *********************************************************************//
// Interface: ChUserDefinedSelection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {22C1AB70-4BFF-40FB-95EE-C8CA647833C6}
// *********************************************************************//
interface ChUserDefinedSelection  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_id(long* id/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_id(void)
  {
    long id;
    OLECHECK(this->get_id((long*)&id));
    return id;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }


  __property   long            id = {read = get_id};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IAddinHost
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FAA0B9C0-F635-44C7-B825-B805F59B3D66}
// *********************************************************************//
interface IAddinHost  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE CoerceOper(VARIANT* varoper/*[in]*/, 
                                               Owc10_xp::AddinClientTypeEnum grbit/*[in]*/, 
                                               VARIANT* Result/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE RandOper(VARIANT* Result/*[out,retval]*/) = 0; // [2]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT __fastcall CoerceOper(VARIANT* varoper/*[in]*/, 
                                Owc10_xp::AddinClientTypeEnum grbit/*[in]*/)
  {
    VARIANT Result;
    OLECHECK(this->CoerceOper(varoper, grbit, (VARIANT*)&Result));
    return Result;
  }

  VARIANT __fastcall RandOper(void)
  {
    VARIANT Result;
    OLECHECK(this->RandOper((VARIANT*)&Result));
    return Result;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IRangeEvents
// Flags:     (4096) Dispatchable
// GUID:      {B8891063-2B00-48EC-957F-6DEBEADE9D8B}
// *********************************************************************//
interface IRangeEvents : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall Change()
  {
    _TDispID _dispid(/* Change */ DISPID(1510));
    OleProcedure(_dispid);
  }


};
// *********************************************************************//
// Interface: IXRangeEnum
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B09-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface IXRangeEnum  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE Next(unsigned_long cElt/*[in]*/, VARIANT* rgvar/*[out]*/, 
                                         unsigned_long* pcEltFetched/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Skip(unsigned_long cElt/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Reset(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Clone(Owc10_xp::IXRangeEnum** ppEnum/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SetTraversal(unsigned nTraverseCode) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ChangeType(VARIANT* Out/*[out]*/, VARIANT* In/*[in]*/, 
                                               unsigned_short vt/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetElements(unsigned_long cElt/*[in]*/, 
                                                unsigned_long iStart/*[in]*/, 
                                                VARIANT* rvarDest/*[in]*/, 
                                                unsigned_long* pcFetched/*[out]*/, 
                                                unsigned_short vtCoerceTo/*[in]*/, 
                                                unsigned_long vtbCoerceFrom/*[in]*/, 
                                                VARIANT* Fill/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_RowCount(unsigned* NumberOfRows/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ColCount(unsigned* NumberOfColumns/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  unsigned __fastcall get_RowCount(void)
  {
    unsigned NumberOfRows;
    OLECHECK(this->get_RowCount((unsigned*)&NumberOfRows));
    return NumberOfRows;
  }

  unsigned __fastcall get_ColCount(void)
  {
    unsigned NumberOfColumns;
    OLECHECK(this->get_ColCount((unsigned*)&NumberOfColumns));
    return NumberOfColumns;
  }


  __property   unsigned        RowCount = {read = get_RowCount};
  __property   unsigned        ColCount = {read = get_ColCount};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IAddinClient
// Flags:     (320) Dual OleAutomation
// GUID:      {198924BD-4102-4CB0-B7E8-DBF8BE7EB5A1}
// *********************************************************************//
interface IAddinClient  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE GrantAddinHost(VARIANT* vardisp/*[in]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE RemoveAddinHost(void) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE IsSemiCalced(long dispid_/*[in]*/, 
                                                 VARIANT_BOOL* SemiCalced/*[in]*/) = 0; // [3]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IPivotControlEvents
// Flags:     (4096) Dispatchable
// GUID:      {F5B39A87-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
interface IPivotControlEvents : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall SelectionChange()
  {
    _TDispID _dispid(/* SelectionChange */ DISPID(6003));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall ViewChange(Owc10_xp::PivotViewReasonEnum Reason)
  {
    _TDispID _dispid(/* ViewChange */ DISPID(6004));
    TAutoArgs<1> _args;
    _args[1] = (int)Reason /*[VT_USERDEFINED:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall DataChange(Owc10_xp::PivotDataReasonEnum Reason)
  {
    _TDispID _dispid(/* DataChange */ DISPID(6007));
    TAutoArgs<1> _args;
    _args[1] = (int)Reason /*[VT_USERDEFINED:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall PivotTableChange(Owc10_xp::PivotTableReasonEnum Reason)
  {
    _TDispID _dispid(/* PivotTableChange */ DISPID(6021));
    TAutoArgs<1> _args;
    _args[1] = (int)Reason /*[VT_USERDEFINED:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall BeforeQuery()
  {
    _TDispID _dispid(/* BeforeQuery */ DISPID(6043));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall Query()
  {
    _TDispID _dispid(/* Query */ DISPID(6044));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall OnConnect()
  {
    _TDispID _dispid(/* OnConnect */ DISPID(6029));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall OnDisconnect()
  {
    _TDispID _dispid(/* OnDisconnect */ DISPID(6030));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseDown(long Button/*[in]*/, long Shift/*[in]*/, long x/*[in]*/
                                            , long y/*[in]*/)
  {
    _TDispID _dispid(/* MouseDown */ DISPID(6034));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I4:0]*/;
    _args[2] = Shift /*[VT_I4:0]*/;
    _args[3] = x /*[VT_I4:0]*/;
    _args[4] = y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseMove(long Button/*[in]*/, long Shift/*[in]*/, long x/*[in]*/
                                            , long y/*[in]*/)
  {
    _TDispID _dispid(/* MouseMove */ DISPID(6032));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I4:0]*/;
    _args[2] = Shift /*[VT_I4:0]*/;
    _args[3] = x /*[VT_I4:0]*/;
    _args[4] = y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseUp(long Button/*[in]*/, long Shift/*[in]*/, long x/*[in]*/, 
                                          long y/*[in]*/)
  {
    _TDispID _dispid(/* MouseUp */ DISPID(6033));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I4:0]*/;
    _args[2] = Shift /*[VT_I4:0]*/;
    _args[3] = x /*[VT_I4:0]*/;
    _args[4] = y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseWheel(VARIANT_BOOL Page/*[in]*/, long Count/*[in]*/)
  {
    _TDispID _dispid(/* MouseWheel */ DISPID(6035));
    TAutoArgs<2> _args;
    _args[1] = Page /*[VT_BOOL:0]*/;
    _args[2] = Count /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Click()
  {
    _TDispID _dispid(/* Click */ DISPID(6005));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall DblClick()
  {
    _TDispID _dispid(/* DblClick */ DISPID(6006));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall CommandEnabled(VARIANT Command, Owc10_xp::ByRef* Enabled)
  {
    _TDispID _dispid(/* CommandEnabled */ DISPID(1000));
    TAutoArgs<2> _args;
    _args[1] = Command /*[VT_VARIANT:0]*/;
    _args[2] = (LPDISPATCH)(Owc10_xp::ByRef*)Enabled /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall CommandChecked(VARIANT Command, Owc10_xp::ByRef* Checked)
  {
    _TDispID _dispid(/* CommandChecked */ DISPID(1001));
    TAutoArgs<2> _args;
    _args[1] = Command /*[VT_VARIANT:0]*/;
    _args[2] = (LPDISPATCH)(Owc10_xp::ByRef*)Checked /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall CommandTipText(VARIANT Command, Owc10_xp::ByRef* Caption)
  {
    _TDispID _dispid(/* CommandTipText */ DISPID(1002));
    TAutoArgs<2> _args;
    _args[1] = Command /*[VT_VARIANT:0]*/;
    _args[2] = (LPDISPATCH)(Owc10_xp::ByRef*)Caption /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall CommandBeforeExecute(VARIANT Command, Owc10_xp::ByRef* Cancel)
  {
    _TDispID _dispid(/* CommandBeforeExecute */ DISPID(1003));
    TAutoArgs<2> _args;
    _args[1] = Command /*[VT_VARIANT:0]*/;
    _args[2] = (LPDISPATCH)(Owc10_xp::ByRef*)Cancel /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall CommandExecute(VARIANT Command, VARIANT_BOOL Succeeded)
  {
    _TDispID _dispid(/* CommandExecute */ DISPID(1004));
    TAutoArgs<2> _args;
    _args[1] = Command /*[VT_VARIANT:0]*/;
    _args[2] = Succeeded /*[VT_BOOL:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyDown(long KeyCode, long Shift)
  {
    _TDispID _dispid(/* KeyDown */ DISPID(1009));
    TAutoArgs<2> _args;
    _args[1] = KeyCode /*[VT_I4:0]*/;
    _args[2] = Shift /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyUp(long KeyCode, long Shift)
  {
    _TDispID _dispid(/* KeyUp */ DISPID(1008));
    TAutoArgs<2> _args;
    _args[1] = KeyCode /*[VT_I4:0]*/;
    _args[2] = Shift /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyPress(long KeyAscii)
  {
    _TDispID _dispid(/* KeyPress */ DISPID(1010));
    TAutoArgs<1> _args;
    _args[1] = KeyAscii /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall BeforeKeyDown(long KeyCode, long Shift, Owc10_xp::ByRef* Cancel)
  {
    _TDispID _dispid(/* BeforeKeyDown */ DISPID(1006));
    TAutoArgs<3> _args;
    _args[1] = KeyCode /*[VT_I4:0]*/;
    _args[2] = Shift /*[VT_I4:0]*/;
    _args[3] = (LPDISPATCH)(Owc10_xp::ByRef*)Cancel /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall BeforeKeyUp(long KeyCode, long Shift, Owc10_xp::ByRef* Cancel)
  {
    _TDispID _dispid(/* BeforeKeyUp */ DISPID(1005));
    TAutoArgs<3> _args;
    _args[1] = KeyCode /*[VT_I4:0]*/;
    _args[2] = Shift /*[VT_I4:0]*/;
    _args[3] = (LPDISPATCH)(Owc10_xp::ByRef*)Cancel /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall BeforeKeyPress(long KeyAscii, Owc10_xp::ByRef* Cancel)
  {
    _TDispID _dispid(/* BeforeKeyPress */ DISPID(1007));
    TAutoArgs<2> _args;
    _args[1] = KeyAscii /*[VT_I4:0]*/;
    _args[2] = (LPDISPATCH)(Owc10_xp::ByRef*)Cancel /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall BeforeContextMenu(long x, long y, Owc10_xp::ByRef* Menu, 
                                                    Owc10_xp::ByRef* Cancel)
  {
    _TDispID _dispid(/* BeforeContextMenu */ DISPID(1011));
    TAutoArgs<4> _args;
    _args[1] = x /*[VT_I4:0]*/;
    _args[2] = y /*[VT_I4:0]*/;
    _args[3] = (LPDISPATCH)(Owc10_xp::ByRef*)Menu /*[VT_USERDEFINED:1]*/;
    _args[4] = (LPDISPATCH)(Owc10_xp::ByRef*)Cancel /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall StartEdit(LPDISPATCH Selection, LPDISPATCH ActiveObject, 
                                            Owc10_xp::ByRef* InitialValue, 
                                            Owc10_xp::ByRef* ArrowMode, 
                                            Owc10_xp::ByRef* CaretPosition, Owc10_xp::ByRef* Cancel
                                            , Owc10_xp::ByRef* ErrorDescription)
  {
    _TDispID _dispid(/* StartEdit */ DISPID(6045));
    TAutoArgs<7> _args;
    _args[1] = Selection /*[VT_DISPATCH:0]*/;
    _args[2] = ActiveObject /*[VT_DISPATCH:0]*/;
    _args[3] = (LPDISPATCH)(Owc10_xp::ByRef*)InitialValue /*[VT_USERDEFINED:1]*/;
    _args[4] = (LPDISPATCH)(Owc10_xp::ByRef*)ArrowMode /*[VT_USERDEFINED:1]*/;
    _args[5] = (LPDISPATCH)(Owc10_xp::ByRef*)CaretPosition /*[VT_USERDEFINED:1]*/;
    _args[6] = (LPDISPATCH)(Owc10_xp::ByRef*)Cancel /*[VT_USERDEFINED:1]*/;
    _args[7] = (LPDISPATCH)(Owc10_xp::ByRef*)ErrorDescription /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall EndEdit(VARIANT_BOOL Accept, Owc10_xp::ByRef* FinalValue, 
                                          Owc10_xp::ByRef* Cancel, Owc10_xp::ByRef* ErrorDescription)
  {
    _TDispID _dispid(/* EndEdit */ DISPID(6046));
    TAutoArgs<4> _args;
    _args[1] = Accept /*[VT_BOOL:0]*/;
    _args[2] = (LPDISPATCH)(Owc10_xp::ByRef*)FinalValue /*[VT_USERDEFINED:1]*/;
    _args[3] = (LPDISPATCH)(Owc10_xp::ByRef*)Cancel /*[VT_USERDEFINED:1]*/;
    _args[4] = (LPDISPATCH)(Owc10_xp::ByRef*)ErrorDescription /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall BeforeScreenTip(Owc10_xp::ByRef* ScreenTipText, 
                                                  LPDISPATCH SourceObject)
  {
    _TDispID _dispid(/* BeforeScreenTip */ DISPID(6049));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Owc10_xp::ByRef*)ScreenTipText /*[VT_USERDEFINED:1]*/;
    _args[2] = SourceObject /*[VT_DISPATCH:0]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: TextFormat
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {58573A81-5025-11D3-BE84-0050041DB15A}
// *********************************************************************//
interface TextFormat  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_ForeColor(VARIANT* ForeColor/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_ForeColor(VARIANT ForeColor/*[in]*/) = 0; // [1610678272]
  virtual HRESULT STDMETHODCALLTYPE get_BackColor(VARIANT* BackColor/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_BackColor(VARIANT BackColor/*[in]*/) = 0; // [1610678274]
  virtual HRESULT STDMETHODCALLTYPE get_HorizontalAlignment(Owc10_xp::PivotHAlignmentEnum* HorizontalAlignment/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_HorizontalAlignment(Owc10_xp::PivotHAlignmentEnum HorizontalAlignment/*[in]*/) = 0; // [1610678276]
  virtual HRESULT STDMETHODCALLTYPE get_NumberFormat(BSTR* NumberFormat/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_NumberFormat(BSTR NumberFormat/*[in]*/) = 0; // [1610678278]
  virtual HRESULT STDMETHODCALLTYPE get_Font(Owc10_xp::PivotFont** PivotFont/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT __fastcall get_ForeColor(void)
  {
    VARIANT ForeColor;
    OLECHECK(this->get_ForeColor((VARIANT*)&ForeColor));
    return ForeColor;
  }

  VARIANT __fastcall get_BackColor(void)
  {
    VARIANT BackColor;
    OLECHECK(this->get_BackColor((VARIANT*)&BackColor));
    return BackColor;
  }

  Owc10_xp::PivotHAlignmentEnum __fastcall get_HorizontalAlignment(void)
  {
    Owc10_xp::PivotHAlignmentEnum HorizontalAlignment;
    OLECHECK(this->get_HorizontalAlignment((Owc10_xp::PivotHAlignmentEnum*)&HorizontalAlignment));
    return HorizontalAlignment;
  }

  BSTR __fastcall get_NumberFormat(void)
  {
    BSTR NumberFormat = 0;
    OLECHECK(this->get_NumberFormat((BSTR*)&NumberFormat));
    return NumberFormat;
  }

  Owc10_xp::PivotFont* __fastcall get_Font(void)
  {
    Owc10_xp::PivotFont* PivotFont;
    OLECHECK(this->get_Font((Owc10_xp::PivotFont**)&PivotFont));
    return PivotFont;
  }


  __property   Owc10_xp::PivotHAlignmentEnum HorizontalAlignment = {read = get_HorizontalAlignment, write = set_HorizontalAlignment};
  __property   BSTR            NumberFormat = {read = get_NumberFormat};
  __property   Owc10_xp::PivotFont* Font = {read = get_Font};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ViewSurface
// Flags:     (464) Hidden Dual NonExtensible OleAutomation
// GUID:      {EE658610-D8B3-11D2-8F30-00600893B533}
// *********************************************************************//
interface ViewSurface  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_hDC(long* hDC/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_hDCInfo(long* hDCInfo/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Rectangle(long cx1/*[in]*/, long cy1/*[in]*/, long cx2/*[in]*/, 
                                              long cy2/*[in]*/, long Left/*[in]*/, long Top/*[in]*/, 
                                              long Width/*[in]*/, long Height/*[in]*/, 
                                              unsigned_long Color/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Line(long cx1/*[in]*/, long cy1/*[in]*/, long cx2/*[in]*/, 
                                         long cy2/*[in]*/, long x1/*[in]*/, long y1/*[in]*/, 
                                         long x2/*[in]*/, long y2/*[in]*/, 
                                         unsigned_long Color/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_AlphaBlend(unsigned_long Color/*[in]*/, 
                                                   unsigned_long* AlphaBlend/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Text(long cx1/*[in]*/, long cy1/*[in]*/, long cx2/*[in]*/, 
                                         long cy2/*[in]*/, long Left/*[in]*/, long Top/*[in]*/, 
                                         long Width/*[in]*/, long Height/*[in]*/, 
                                         Owc10_xp::TextFormat* TextFormat/*[in]*/, 
                                         VARIANT Text/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_TextHeight(Owc10_xp::TextFormat* TextFormat/*[in]*/, 
                                                   VARIANT Text/*[in]*/, 
                                                   long* TextHeight/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_TextWidth(Owc10_xp::TextFormat* TextFormat/*[in]*/, 
                                                  VARIANT Text/*[in]*/, 
                                                  long* TextWidth/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Picture(long cx1/*[in]*/, long cy1/*[in]*/, long cx2/*[in]*/, 
                                            long cy2/*[in]*/, long Left/*[in]*/, long Top/*[in]*/, 
                                            long Width/*[in]*/, long Height/*[in]*/, 
                                            IPictureDisp* Picture/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE PictureMasked(long cx1/*[in]*/, long cy1/*[in]*/, 
                                                  long cx2/*[in]*/, long cy2/*[in]*/, 
                                                  long Left/*[in]*/, long Top/*[in]*/, 
                                                  long Width/*[in]*/, long Height/*[in]*/, 
                                                  IPictureDisp* Picture/*[in]*/, 
                                                  IPictureDisp* Mask/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_PictureAlphaBlended(IPictureDisp* Picture/*[in]*/, 
                                                            IPictureDisp* Mask/*[in]*/, 
                                                            IPictureDisp** Blended/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ScaleX(long x/*[in]*/, long* ScaleX/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ScaleY(long y/*[in]*/, long* ScaleY/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_hDC(void)
  {
    long hDC;
    OLECHECK(this->get_hDC((long*)&hDC));
    return hDC;
  }

  long __fastcall get_hDCInfo(void)
  {
    long hDCInfo;
    OLECHECK(this->get_hDCInfo((long*)&hDCInfo));
    return hDCInfo;
  }

  unsigned_long __fastcall get_AlphaBlend(unsigned_long Color/*[in]*/)
  {
    unsigned_long AlphaBlend;
    OLECHECK(this->get_AlphaBlend(Color, (unsigned_long*)&AlphaBlend));
    return AlphaBlend;
  }

  long __fastcall get_TextHeight(Owc10_xp::TextFormat* TextFormat/*[in]*/, VARIANT Text/*[in]*/)
  {
    long TextHeight;
    OLECHECK(this->get_TextHeight(TextFormat, Text, (long*)&TextHeight));
    return TextHeight;
  }

  long __fastcall get_TextWidth(Owc10_xp::TextFormat* TextFormat/*[in]*/, VARIANT Text/*[in]*/)
  {
    long TextWidth;
    OLECHECK(this->get_TextWidth(TextFormat, Text, (long*)&TextWidth));
    return TextWidth;
  }

  IPictureDisp* __fastcall get_PictureAlphaBlended(IPictureDisp* Picture/*[in]*/, 
                                                   IPictureDisp* Mask/*[in]*/)
  {
    IPictureDisp* Blended;
    OLECHECK(this->get_PictureAlphaBlended(Picture, Mask, (IPictureDisp**)&Blended));
    return Blended;
  }

  long __fastcall get_ScaleX(long x/*[in]*/)
  {
    long ScaleX;
    OLECHECK(this->get_ScaleX(x, (long*)&ScaleX));
    return ScaleX;
  }

  long __fastcall get_ScaleY(long y/*[in]*/)
  {
    long ScaleY;
    OLECHECK(this->get_ScaleY(y, (long*)&ScaleY));
    return ScaleY;
  }


  __property   long            hDC = {read = get_hDC};
  __property   long            hDCInfo = {read = get_hDCInfo};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ViewObject
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8C950530-C84C-11D2-8F2D-00600893B533}
// *********************************************************************//
interface ViewObject  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE Draw(Owc10_xp::ViewSurface* Surface/*[in]*/, long cx1/*[in]*/, 
                                         long cy1/*[in]*/, long cx2/*[in]*/, long cy2/*[in]*/, 
                                         long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                         long Height/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Query(long x/*[in]*/, long y/*[in]*/, 
                                              LPDISPATCH* Object/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Query(long x/*[in]*/, long y/*[in]*/)
  {
    LPDISPATCH Object;
    OLECHECK(this->get_Query(x, y, (LPDISPATCH*)&Object));
    return Object;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: MouseTarget
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8F8E5640-CDB0-11D2-8F2E-00600893B533}
// *********************************************************************//
interface MouseTarget  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE MouseEnter(long x/*[in]*/, long y/*[in]*/, 
                                               long* Cursor/*[in,out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE MouseOver(long x/*[in]*/, long y/*[in]*/, 
                                              long* Cursor/*[in,out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE MouseLeave(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE MouseDown(long x/*[in]*/, long y/*[in]*/, long Button/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE MouseUp(long x/*[in]*/, long y/*[in]*/, long Button/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE MouseClick(long x/*[in]*/, long y/*[in]*/, long Button/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE MouseDblClick(long x/*[in]*/, long y/*[in]*/, 
                                                  long Button/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE MouseWheel(VARIANT_BOOL Page/*[in]*/, long Count/*[in]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: SelectionHighlight
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {58573A80-5025-11D3-BE84-0050041DB15A}
// *********************************************************************//
interface SelectionHighlight  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE Highlight(Owc10_xp::ViewSurface* ViewSurface) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ActiveObject
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A809B678-545A-11D3-BE86-0050041DB15A}
// *********************************************************************//
interface ActiveObject  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_ActiveObject_(LPDISPATCH* ActiveObject/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_ActiveObject_(LPDISPATCH ActiveObject/*[in]*/) = 0; // [1610743808]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_ActiveObject_(void)
  {
    LPDISPATCH ActiveObject;
    OLECHECK(this->get_ActiveObject_((LPDISPATCH*)&ActiveObject));
    return ActiveObject;
  }


  __property   LPDISPATCH      ActiveObject_ = {read = get_ActiveObject_, write = set_ActiveObject_};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PopupMenu
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {04B21422-1F84-4DD3-8CD6-1C6ECC68E521}
// *********************************************************************//
interface PopupMenu  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_hMenu(long* hMenu/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_hMenu(void)
  {
    long hMenu;
    OLECHECK(this->get_hMenu((long*)&hMenu));
    return hMenu;
  }


  __property   long            hMenu = {read = get_hMenu};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: AutoFitObject
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {99049AFE-271D-4568-95D8-3BC879AA73E3}
// *********************************************************************//
interface AutoFitObject  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE AutoFit(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_BestWidth(long* BestWidth/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_BestHeight(long* BestHeight/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_BestWidth(void)
  {
    long BestWidth;
    OLECHECK(this->get_BestWidth((long*)&BestWidth));
    return BestWidth;
  }

  long __fastcall get_BestHeight(void)
  {
    long BestHeight;
    OLECHECK(this->get_BestHeight((long*)&BestHeight));
    return BestHeight;
  }


  __property   long            BestWidth = {read = get_BestWidth};
  __property   long            BestHeight = {read = get_BestHeight};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Moniker
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {5055F752-6848-4CEA-9BAB-265EC4B5380A}
// *********************************************************************//
interface Moniker  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Moniker_(LPDISPATCH RelativeTo/*[in,def,opt]*/, 
                                                 BSTR* Moniker/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Parse(BSTR Moniker/*[in]*/, 
                                              LPDISPATCH* Object/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Moniker_(LPDISPATCH RelativeTo/*[in,def,opt]*/)
  {
    BSTR Moniker = 0;
    OLECHECK(this->get_Moniker_(RelativeTo, (BSTR*)&Moniker));
    return Moniker;
  }

  LPDISPATCH __fastcall get_Parse(BSTR Moniker/*[in]*/)
  {
    LPDISPATCH Object;
    OLECHECK(this->get_Parse(Moniker, (LPDISPATCH*)&Object));
    return Object;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: InplaceObject
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {EDAC92DC-84DB-4CD1-AE98-EB436F4D99EB}
// *********************************************************************//
interface InplaceObject  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE Activate(long Hwnd) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Deactivate(void) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PropertyNotify
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {7BB4EDA1-862A-4AB2-92F2-557E1BAB3408}
// *********************************************************************//
interface PropertyNotify  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE OnPropertyChange(LPDISPATCH Object, long dispid_) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: MutualExpando
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F9328F0C-1862-4BD5-81D8-2052A7EC80FA}
// *********************************************************************//
interface MutualExpando  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE Expand(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Collapse(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Left(long* Left/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Top(long* Top/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Width(long* Width/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Height(long* Height/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Left(void)
  {
    long Left;
    OLECHECK(this->get_Left((long*)&Left));
    return Left;
  }

  long __fastcall get_Top(void)
  {
    long Top;
    OLECHECK(this->get_Top((long*)&Top));
    return Top;
  }

  long __fastcall get_Width(void)
  {
    long Width;
    OLECHECK(this->get_Width((long*)&Width));
    return Width;
  }

  long __fastcall get_Height(void)
  {
    long Height;
    OLECHECK(this->get_Height((long*)&Height));
    return Height;
  }


  __property   long            Left = {read = get_Left};
  __property   long            Top = {read = get_Top};
  __property   long            Width = {read = get_Width};
  __property   long            Height = {read = get_Height};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: EditableObject
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {EB3286D3-226C-48F0-8049-2DB1E01DEE9C}
// *********************************************************************//
interface EditableObject  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE StartEdit(VARIANT InitialValue/*[in]*/, 
                                              VARIANT_BOOL ArrowMode/*[in]*/, 
                                              long CaretPosition/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Value(VARIANT* Value/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Value(VARIANT Value/*[in]*/) = 0; // [1610743809]
  virtual HRESULT STDMETHODCALLTYPE EndEdit(VARIANT_BOOL Accept/*[in]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT __fastcall get_Value(void)
  {
    VARIANT Value;
    OLECHECK(this->get_Value((VARIANT*)&Value));
    return Value;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: TipProvider
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8966D336-AACA-4ADB-9315-F3A541B16917}
// *********************************************************************//
interface TipProvider  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_TipText(BSTR* TipText/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_TipText(void)
  {
    BSTR TipText = 0;
    OLECHECK(this->get_TipText((BSTR*)&TipText));
    return TipText;
  }


  __property   BSTR            TipText = {read = get_TipText};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IPivotCopy
// Flags:     (464) Hidden Dual NonExtensible OleAutomation
// GUID:      {CD44E547-FEC9-4ADC-AB6A-3129B44801BA}
// *********************************************************************//
interface IPivotCopy  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE Render(long Format/*[in]*/, BSTR* Output/*[in,out,def,opt]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// DispIntf:  IChartEvents
// Flags:     (4096) Dispatchable
// GUID:      {F5B39A7A-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T>
class IChartEventsDispT : public TAutoDriver<IChartEvents>
{
public:
  IChartEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall DataSetChange();
  void /*[VT_VOID:0]*/ __fastcall DblClick();
  void /*[VT_VOID:0]*/ __fastcall Click();
  void /*[VT_VOID:0]*/ __fastcall KeyDown(long KeyCode, long Shift);
  void /*[VT_VOID:0]*/ __fastcall KeyUp(long KeyCode, long Shift);
  void /*[VT_VOID:0]*/ __fastcall KeyPress(long KeyAscii);
  void /*[VT_VOID:0]*/ __fastcall BeforeKeyDown(long KeyCode, long Shift, Owc10_xp::ByRef* Cancel);
  void /*[VT_VOID:0]*/ __fastcall BeforeKeyUp(long KeyCode, long Shift, Owc10_xp::ByRef* Cancel);
  void /*[VT_VOID:0]*/ __fastcall BeforeKeyPress(long KeyAscii, Owc10_xp::ByRef* Cancel);
  void /*[VT_VOID:0]*/ __fastcall MouseDown(long Button/*[in]*/, long Shift/*[in]*/, long x/*[in]*/
                                            , long y/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall MouseMove(long Button/*[in]*/, long Shift/*[in]*/, long x/*[in]*/
                                            , long y/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall MouseUp(long Button/*[in]*/, long Shift/*[in]*/, long x/*[in]*/, 
                                          long y/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall MouseWheel(VARIANT_BOOL Page/*[in]*/, long Count/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall SelectionChange();
  void /*[VT_VOID:0]*/ __fastcall BeforeScreenTip(Owc10_xp::ByRef* TipText, LPDISPATCH ContextObject);
  void /*[VT_VOID:0]*/ __fastcall CommandEnabled(VARIANT Command, Owc10_xp::ByRef* Enabled);
  void /*[VT_VOID:0]*/ __fastcall CommandChecked(VARIANT Command, Owc10_xp::ByRef* Checked);
  void /*[VT_VOID:0]*/ __fastcall CommandTipText(VARIANT Command, Owc10_xp::ByRef* Caption);
  void /*[VT_VOID:0]*/ __fastcall CommandBeforeExecute(VARIANT Command, Owc10_xp::ByRef* Cancel);
  void /*[VT_VOID:0]*/ __fastcall CommandExecute(VARIANT Command, VARIANT_BOOL Succeeded);
  void /*[VT_VOID:0]*/ __fastcall BeforeContextMenu(long x, long y, Owc10_xp::ByRef* Menu, 
                                                    Owc10_xp::ByRef* Cancel);
  void /*[VT_VOID:0]*/ __fastcall BeforeRender(Owc10_xp::ChChartDraw* drawObject/*[in]*/, 
                                               LPDISPATCH chartObject/*[in]*/, 
                                               Owc10_xp::ByRef* Cancel/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall AfterRender(Owc10_xp::ChChartDraw* drawObject/*[in]*/, 
                                              LPDISPATCH chartObject/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall AfterFinalRender(Owc10_xp::ChChartDraw* drawObject/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall AfterLayout(Owc10_xp::ChChartDraw* drawObject/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall ViewChange();

};
typedef IChartEventsDispT<IChartEvents> IChartEventsDisp;

typedef TComInterface<ByRef>  TCOMByRef;

// *********************************************************************//
// DispIntf:  ByRef
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0B817E8E-5A5A-11D3-BE88-0050041DB15A}
// *********************************************************************//
template<class T>
class ByRefDispT : public TAutoDriver<ByRef>
{
public:
  ByRefDispT(){}

  ByRefDispT(ByRef *pintf)
  {
    TAutoDriver<ByRef>::Bind(pintf, false);
  }

  ByRefDispT(ByRefPtr pintf)
  {
    TAutoDriver<ByRef>::Bind(pintf, true);
  }

  ByRefDispT& operator=(ByRef *pintf)
  {
    TAutoDriver<ByRef>::Bind(pintf, false);
    return *this;
  }

  ByRefDispT& operator=(ByRefPtr pintf)
  {
    TAutoDriver<ByRef>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(VARIANT Value/*[in]*/);

};
typedef ByRefDispT<ByRef> ByRefDisp;

typedef TComInterface<ChChartDraw>  TCOMChChartDraw;

// *********************************************************************//
// DispIntf:  ChChartDraw
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {278585C3-D74B-4E30-ACEB-77D4777639E6}
// *********************************************************************//
template<class T>
class ChChartDrawDispT : public TAutoDriver<ChChartDraw>
{
public:
  ChChartDrawDispT(){}

  ChChartDrawDispT(ChChartDraw *pintf)
  {
    TAutoDriver<ChChartDraw>::Bind(pintf, false);
  }

  ChChartDrawDispT(ChChartDrawPtr pintf)
  {
    TAutoDriver<ChChartDraw>::Bind(pintf, true);
  }

  ChChartDrawDispT& operator=(ChChartDraw *pintf)
  {
    TAutoDriver<ChChartDraw>::Bind(pintf, false);
    return *this;
  }

  ChChartDrawDispT& operator=(ChChartDrawPtr pintf)
  {
    TAutoDriver<ChChartDraw>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Interior(Owc10_xp::ChInterior** ppinterior/*[out,retval]*/);
  Owc10_xp::ChInterior* __fastcall get_Interior(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Border(Owc10_xp::ChBorder** ppline/*[out,retval]*/);
  Owc10_xp::ChBorder* __fastcall get_Border(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Font(Owc10_xp::ChFont** ppfont/*[out,retval]*/);
  Owc10_xp::ChFont* __fastcall get_Font(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Line(Owc10_xp::ChLine** ppline/*[out,retval]*/);
  Owc10_xp::ChLine* __fastcall get_Line(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DrawType(Owc10_xp::ChartDrawModesEnum* pdrawmodesenum/*[out,retval]*/);
  Owc10_xp::ChartDrawModesEnum __fastcall get_DrawType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_hDC(long* phdc/*[out,retval]*/);
  long            __fastcall get_hDC(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall BeginObject(long id/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall EndObject();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DrawLine(long x0/*[in]*/, long y0/*[in]*/, long x1/*[in]*/, 
                                                 long y1/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DrawRectangle(long Left/*[in]*/, long Top/*[in]*/, 
                                                      long Right/*[in]*/, long Bottom/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DrawEllipse(long Left/*[in]*/, long Top/*[in]*/, 
                                                    long Right/*[in]*/, long Bottom/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DrawText(BSTR bstrText/*[in]*/, long Left/*[in]*/, 
                                                 long Top/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DrawPolyLine(VARIANT xValues/*[in]*/, 
                                                     VARIANT yValues/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DrawPolygon(VARIANT xValues/*[in]*/, VARIANT yValues/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall TextWidth(BSTR Text/*[in]*/, VARIANT* Width/*[out,retval]*/);
  VARIANT         __fastcall TextWidth(BSTR Text/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall TextHeight(BSTR Text/*[in]*/, 
                                                   VARIANT* Height/*[out,retval]*/);
  VARIANT         __fastcall TextHeight(BSTR Text/*[in]*/);

  __property   Owc10_xp::ChInterior* Interior = {read = get_Interior};
  __property   Owc10_xp::ChBorder* Border = {read = get_Border};
  __property   Owc10_xp::ChFont* Font = {read = get_Font};
  __property   Owc10_xp::ChLine* Line = {read = get_Line};
  __property   Owc10_xp::ChartDrawModesEnum DrawType = {read = get_DrawType};
  __property   long            hDC = {read = get_hDC};
};
typedef ChChartDrawDispT<ChChartDraw> ChChartDrawDisp;

typedef TComInterface<ChInterior>  TCOMChInterior;

// *********************************************************************//
// DispIntf:  ChInterior
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {56C833A6-3E1C-11D3-831A-00C04F991C70}
// *********************************************************************//
template<class T>
class ChInteriorDispT : public TAutoDriver<ChInterior>
{
public:
  ChInteriorDispT(){}

  ChInteriorDispT(ChInterior *pintf)
  {
    TAutoDriver<ChInterior>::Bind(pintf, false);
  }

  ChInteriorDispT(ChInteriorPtr pintf)
  {
    TAutoDriver<ChInterior>::Bind(pintf, true);
  }

  ChInteriorDispT& operator=(ChInterior *pintf)
  {
    TAutoDriver<ChInterior>::Bind(pintf, false);
    return *this;
  }

  ChInteriorDispT& operator=(ChInteriorPtr pintf)
  {
    TAutoDriver<ChInterior>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Color(VARIANT* Color/*[out,retval]*/);
  VARIANT         __fastcall get_Color(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Color(VARIANT Color/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DefaultColor(VARIANT* Color/*[out,retval]*/);
  VARIANT         __fastcall get_DefaultColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackColor(VARIANT* BackColor/*[out,retval]*/);
  VARIANT         __fastcall get_BackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackColor(VARIANT BackColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Pattern(Owc10_xp::ChartPatternTypeEnum* pwcpt/*[out,retval]*/);
  Owc10_xp::ChartPatternTypeEnum __fastcall get_Pattern(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FillType(Owc10_xp::ChartFillTypeEnum* pwcft/*[out,retval]*/);
  Owc10_xp::ChartFillTypeEnum __fastcall get_FillType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PresetGradientType(Owc10_xp::ChartPresetGradientTypeEnum* pwcpt/*[out,retval]*/);
  Owc10_xp::ChartPresetGradientTypeEnum __fastcall get_PresetGradientType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GradientStyle(Owc10_xp::ChartGradientStyleEnum* pwcgs/*[out,retval]*/);
  Owc10_xp::ChartGradientStyleEnum __fastcall get_GradientStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GradientVariant(Owc10_xp::ChartGradientVariantEnum* pwcgv/*[out,retval]*/);
  Owc10_xp::ChartGradientVariantEnum __fastcall get_GradientVariant(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GradientDegree(double* GradientDegree/*[out,retval]*/);
  double          __fastcall get_GradientDegree(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PresetTexture(Owc10_xp::ChartPresetTextureEnum* pwcpt/*[out,retval]*/);
  Owc10_xp::ChartPresetTextureEnum __fastcall get_PresetTexture(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextureName(BSTR* pbstr/*[out,retval]*/);
  BSTR            __fastcall get_TextureName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextureFormat(Owc10_xp::ChartTextureFormatEnum* pwctf/*[out,retval]*/);
  Owc10_xp::ChartTextureFormatEnum __fastcall get_TextureFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextureStackUnit(double* dStackUnit/*[out,retval]*/);
  double          __fastcall get_TextureStackUnit(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TexturePlacement(Owc10_xp::ChartTexturePlacementEnum* wcctp/*[out,retval]*/);
  Owc10_xp::ChartTexturePlacementEnum __fastcall get_TexturePlacement(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetPatterned(Owc10_xp::ChartPatternTypeEnum patternType/*[in]*/
                                                     , VARIANT Color/*[in,opt]*/= TNoParam(), 
                                                     VARIANT BackColor/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetPresetGradient(Owc10_xp::ChartGradientStyleEnum GradientStyle/*[in]*/
                                                          , 
                                                          Owc10_xp::ChartGradientVariantEnum gradientVarient/*[in]*/
                                                          , 
                                                          Owc10_xp::ChartPresetGradientTypeEnum gradientPreset/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetTextured(VARIANT textureFile/*[in]*/, 
                                                    Owc10_xp::ChartTextureFormatEnum TextureFormat/*[in,def,opt]*/
                                                    , double stackUnit/*[in,def,opt]*/, 
                                                    Owc10_xp::ChartTexturePlacementEnum TexturePlacement/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetOneColorGradient(Owc10_xp::ChartGradientStyleEnum GradientStyle/*[in]*/
                                                            , 
                                                            Owc10_xp::ChartGradientVariantEnum GradientVariant/*[in]*/
                                                            , double GradientDegree/*[in]*/, 
                                                            VARIANT Color/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetSolid(VARIANT Color/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetTwoColorGradient(Owc10_xp::ChartGradientStyleEnum GradientStyle/*[in]*/
                                                            , 
                                                            Owc10_xp::ChartGradientVariantEnum GradientVariant/*[in]*/
                                                            , VARIANT Color/*[in,opt]*/= TNoParam()
                                                            , 
                                                            VARIANT BackColor/*[in,opt]*/= TNoParam());

  __property   Owc10_xp::ChartPatternTypeEnum Pattern = {read = get_Pattern};
  __property   Owc10_xp::ChartFillTypeEnum FillType = {read = get_FillType};
  __property   Owc10_xp::ChartPresetGradientTypeEnum PresetGradientType = {read = get_PresetGradientType};
  __property   Owc10_xp::ChartGradientStyleEnum GradientStyle = {read = get_GradientStyle};
  __property   Owc10_xp::ChartGradientVariantEnum GradientVariant = {read = get_GradientVariant};
  __property   double          GradientDegree = {read = get_GradientDegree};
  __property   Owc10_xp::ChartPresetTextureEnum PresetTexture = {read = get_PresetTexture};
  __property   BSTR            TextureName = {read = get_TextureName};
  __property   Owc10_xp::ChartTextureFormatEnum TextureFormat = {read = get_TextureFormat};
  __property   double          TextureStackUnit = {read = get_TextureStackUnit};
  __property   Owc10_xp::ChartTexturePlacementEnum TexturePlacement = {read = get_TexturePlacement};
};
typedef ChInteriorDispT<ChInterior> ChInteriorDisp;

typedef TComInterface<ChBorder>  TCOMChBorder;

// *********************************************************************//
// DispIntf:  ChBorder
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A72-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class ChBorderDispT : public TAutoDriver<ChBorder>
{
public:
  ChBorderDispT(){}

  ChBorderDispT(ChBorder *pintf)
  {
    TAutoDriver<ChBorder>::Bind(pintf, false);
  }

  ChBorderDispT(ChBorderPtr pintf)
  {
    TAutoDriver<ChBorder>::Bind(pintf, true);
  }

  ChBorderDispT& operator=(ChBorder *pintf)
  {
    TAutoDriver<ChBorder>::Bind(pintf, false);
    return *this;
  }

  ChBorderDispT& operator=(ChBorderPtr pintf)
  {
    TAutoDriver<ChBorder>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Color(VARIANT* Color/*[out,retval]*/);
  VARIANT         __fastcall get_Color(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Color(VARIANT Color/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DashStyle(Owc10_xp::ChartLineDashStyleEnum* pwclds/*[out,retval]*/);
  Owc10_xp::ChartLineDashStyleEnum __fastcall get_DashStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DashStyle(Owc10_xp::ChartLineDashStyleEnum pwclds/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Weight(VARIANT* LineWeight/*[out,retval]*/);
  VARIANT         __fastcall get_Weight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Weight(Owc10_xp::LineWeightEnum LineWeight/*[in]*/);

  __property   Owc10_xp::ChartLineDashStyleEnum DashStyle = {read = get_DashStyle, write = set_DashStyle};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Owc10_xp::LineWeightEnum Weight = {write = set_Weight};
};
typedef ChBorderDispT<ChBorder> ChBorderDisp;

typedef TComInterface<ChFont>  TCOMChFont;

// *********************************************************************//
// DispIntf:  ChFont
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A86-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class ChFontDispT : public TAutoDriver<ChFont>
{
public:
  ChFontDispT(){}

  ChFontDispT(ChFont *pintf)
  {
    TAutoDriver<ChFont>::Bind(pintf, false);
  }

  ChFontDispT(ChFontPtr pintf)
  {
    TAutoDriver<ChFont>::Bind(pintf, true);
  }

  ChFontDispT& operator=(ChFont *pintf)
  {
    TAutoDriver<ChFont>::Bind(pintf, false);
    return *this;
  }

  ChFontDispT& operator=(ChFontPtr pintf)
  {
    TAutoDriver<ChFont>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Bold(VARIANT_BOOL* Bold/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Bold(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Bold(VARIANT_BOOL Bold/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Color(VARIANT* Color/*[out,retval]*/);
  VARIANT         __fastcall get_Color(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Color(VARIANT Color/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Italic(VARIANT_BOOL* Italic/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Italic(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Italic(VARIANT_BOOL Italic/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Size(long* Size/*[out,retval]*/);
  long            __fastcall get_Size(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Size(long Size/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Underline(Owc10_xp::UnderlineStyleEnum* UnderlineStyle/*[out,retval]*/);
  Owc10_xp::UnderlineStyleEnum __fastcall get_Underline(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Underline(Owc10_xp::UnderlineStyleEnum UnderlineStyle/*[in]*/);

  __property   VARIANT_BOOL    Bold = {read = get_Bold, write = set_Bold};
  __property   VARIANT_BOOL    Italic = {read = get_Italic, write = set_Italic};
  __property   BSTR            Name = {read = get_Name};
  __property   long            Size = {read = get_Size, write = set_Size};
  __property   Owc10_xp::UnderlineStyleEnum Underline = {read = get_Underline, write = set_Underline};
};
typedef ChFontDispT<ChFont> ChFontDisp;

typedef TComInterface<ChLine>  TCOMChLine;

// *********************************************************************//
// DispIntf:  ChLine
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {966CCC26-4469-11D3-8324-00C04F991C70}
// *********************************************************************//
template<class T>
class ChLineDispT : public TAutoDriver<ChLine>
{
public:
  ChLineDispT(){}

  ChLineDispT(ChLine *pintf)
  {
    TAutoDriver<ChLine>::Bind(pintf, false);
  }

  ChLineDispT(ChLinePtr pintf)
  {
    TAutoDriver<ChLine>::Bind(pintf, true);
  }

  ChLineDispT& operator=(ChLine *pintf)
  {
    TAutoDriver<ChLine>::Bind(pintf, false);
    return *this;
  }

  ChLineDispT& operator=(ChLinePtr pintf)
  {
    TAutoDriver<ChLine>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Color(VARIANT* Color/*[out,retval]*/);
  VARIANT         __fastcall get_Color(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Color(VARIANT Color/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DashStyle(Owc10_xp::ChartLineDashStyleEnum* pwclds/*[out,retval]*/);
  Owc10_xp::ChartLineDashStyleEnum __fastcall get_DashStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DashStyle(Owc10_xp::ChartLineDashStyleEnum pwclds/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Weight(VARIANT* LineWeight/*[out,retval]*/);
  VARIANT         __fastcall get_Weight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Weight(Owc10_xp::LineWeightEnum LineWeight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Miter(Owc10_xp::ChartLineMiterEnum* pwclm/*[out,retval]*/);
  Owc10_xp::ChartLineMiterEnum __fastcall get_Miter(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Miter(Owc10_xp::ChartLineMiterEnum pwclm/*[in]*/);

  __property   Owc10_xp::ChartLineDashStyleEnum DashStyle = {read = get_DashStyle, write = set_DashStyle};
  __property   Owc10_xp::LineWeightEnum Weight = {write = set_Weight};
  __property   Owc10_xp::ChartLineMiterEnum Miter = {read = get_Miter, write = set_Miter};
};
typedef ChLineDispT<ChLine> ChLineDisp;

// *********************************************************************//
// SmartIntf: TCOMChChartSpace
// Interface: ChChartSpace
// *********************************************************************//
template <class T /* ChChartSpace */ >
class TCOMChChartSpaceT : public TComInterface<ChChartSpace>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMChChartSpaceT() {}
  TCOMChChartSpaceT(ChChartSpace *intf, bool addRef = false) : TComInterface<ChChartSpace>(intf, addRef) {}
  TCOMChChartSpaceT(const TCOMChChartSpaceT& src) : TComInterface<ChChartSpace>(src) {}
  TCOMChChartSpaceT& operator=(const TCOMChChartSpaceT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall set_ChartLayout(Owc10_xp::ChartChartLayoutEnum pChartChartLayout/*[in]*/);
  HRESULT         __fastcall get_ChartLayout(Owc10_xp::ChartChartLayoutEnum* pChartChartLayout/*[out,retval]*/);
  Owc10_xp::ChartChartLayoutEnum __fastcall get_ChartLayout(void);
  HRESULT         __fastcall set_ChartWrapCount(long plcount/*[in]*/);
  HRESULT         __fastcall get_ChartWrapCount(long* plcount/*[out,retval]*/);
  long            __fastcall get_ChartWrapCount(void);
  HRESULT         __fastcall set_EnableEvents(VARIANT_BOOL pfEnableEvents/*[in]*/);
  HRESULT         __fastcall set_EnableEvents(TOLEBOOL pfEnableEvents/*[in]*/);
  HRESULT         __fastcall get_EnableEvents(VARIANT_BOOL* pfEnableEvents/*[out,retval]*/);
  HRESULT         __fastcall get_EnableEvents(TOLEBOOL* pfEnableEvents/*[out,retval]*/);
  TOLEBOOL        __fastcall get_EnableEvents(void);
  HRESULT         __fastcall set_HasChartSpaceLegend(VARIANT_BOOL pfHasChartSpaceLegend/*[in]*/);
  HRESULT         __fastcall set_HasChartSpaceLegend(TOLEBOOL pfHasChartSpaceLegend/*[in]*/);
  HRESULT         __fastcall get_HasChartSpaceLegend(VARIANT_BOOL* pfHasChartSpaceLegend/*[out,retval]*/);
  HRESULT         __fastcall get_HasChartSpaceLegend(TOLEBOOL* pfHasChartSpaceLegend/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HasChartSpaceLegend(void);
  HRESULT         __fastcall get_MajorVersion(long* plMajorVersion/*[out,retval]*/);
  long            __fastcall get_MajorVersion(void);
  HRESULT         __fastcall get_MinorVersion(BSTR* pbstrMinorVersion/*[out,retval]*/);
  BSTR            __fastcall get_MinorVersion(void);
  HRESULT         __fastcall get_BuildNumber(BSTR* pbstrBuildNumber/*[out,retval]*/);
  BSTR            __fastcall get_BuildNumber(void);
  HRESULT         __fastcall set_ScreenUpdating(VARIANT_BOOL pfUpdate/*[in]*/);
  HRESULT         __fastcall set_ScreenUpdating(TOLEBOOL pfUpdate/*[in]*/);
  HRESULT         __fastcall get_ScreenUpdating(VARIANT_BOOL* pfUpdate/*[out,retval]*/);
  HRESULT         __fastcall get_ScreenUpdating(TOLEBOOL* pfUpdate/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ScreenUpdating(void);
  HRESULT         __fastcall get_Border(Owc10_xp::ChBorder** ppline/*[out,retval]*/);
  HRESULT         __fastcall get_Border(Owc10_xp::ChBorderPtr* ppline/*[out,retval]*/);
  Owc10_xp::ChBorderPtr __fastcall get_Border(void);
  HRESULT         __fastcall get_Charts(Owc10_xp::ChCharts** ppcharts/*[out,retval]*/);
  HRESULT         __fastcall get_Charts(Owc10_xp::ChChartsPtr* ppcharts/*[out,retval]*/);
  Owc10_xp::ChChartsPtr __fastcall get_Charts(void);
  HRESULT         __fastcall _set_DataSource(Msdatasrc_xp::DataSource* ppidatasource/*[in]*/);
  HRESULT         __fastcall _set_DataSource(Msdatasrc_xp::DataSourcePtr ppidatasource/*[in]*/);
  HRESULT         __fastcall set_DataSource(Msdatasrc_xp::DataSource* ppidatasource/*[in]*/);
  HRESULT         __fastcall set_DataSource(Msdatasrc_xp::DataSourcePtr ppidatasource/*[in]*/);
  HRESULT         __fastcall get_DataSource(Msdatasrc_xp::DataSource** ppidatasource/*[out,retval]*/);
  HRESULT         __fastcall get_DataSource(Msdatasrc_xp::DataSourcePtr* ppidatasource/*[out,retval]*/);
  Msdatasrc_xp::DataSourcePtr __fastcall get_DataSource(void);
  HRESULT         __fastcall set_DataMember(Msdatasrc_xp::DataMember pdatamember/*[in]*/);
  HRESULT         __fastcall get_DataMember(Msdatasrc_xp::DataMember* pdatamember/*[out,retval]*/);
  Msdatasrc_xp::DataMember __fastcall get_DataMember(void);
  HRESULT         __fastcall get_DataSourceType(Owc10_xp::ChartDataSourceTypeEnum* pocpDST/*[out,retval]*/);
  Owc10_xp::ChartDataSourceTypeEnum __fastcall get_DataSourceType(void);
  HRESULT         __fastcall set_HasChartSpaceTitle(VARIANT_BOOL pfHasChartSpaceTitle/*[in]*/);
  HRESULT         __fastcall set_HasChartSpaceTitle(TOLEBOOL pfHasChartSpaceTitle/*[in]*/);
  HRESULT         __fastcall get_HasChartSpaceTitle(VARIANT_BOOL* pfHasChartSpaceTitle/*[out,retval]*/);
  HRESULT         __fastcall get_HasChartSpaceTitle(TOLEBOOL* pfHasChartSpaceTitle/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HasChartSpaceTitle(void);
  HRESULT         __fastcall get_Interior(Owc10_xp::ChInterior** ppinterior/*[out,retval]*/);
  HRESULT         __fastcall get_Interior(Owc10_xp::ChInteriorPtr* ppinterior/*[out,retval]*/);
  Owc10_xp::ChInteriorPtr __fastcall get_Interior(void);
  HRESULT         __fastcall get_ChartSpaceLegend(Owc10_xp::ChLegend** pplegend/*[out,retval]*/);
  HRESULT         __fastcall get_ChartSpaceLegend(Owc10_xp::ChLegendPtr* pplegend/*[out,retval]*/);
  Owc10_xp::ChLegendPtr __fastcall get_ChartSpaceLegend(void);
  HRESULT         __fastcall get_Selection(LPDISPATCH* ppobject/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Selection(void);
  HRESULT         __fastcall get_SelectionType(Owc10_xp::ChartSelectionsEnum* itype/*[out,retval]*/);
  Owc10_xp::ChartSelectionsEnum __fastcall get_SelectionType(void);
  HRESULT         __fastcall set_HasSelectionMarks(Owc10_xp::ChartSelectionMarksEnum fMarks/*[in]*/);
  HRESULT         __fastcall get_HasSelectionMarks(Owc10_xp::ChartSelectionMarksEnum* fMarks/*[out,retval]*/);
  Owc10_xp::ChartSelectionMarksEnum __fastcall get_HasSelectionMarks(void);
  HRESULT         __fastcall set_DisplayPropertyToolbox(VARIANT_BOOL fMenu/*[in]*/);
  HRESULT         __fastcall set_DisplayPropertyToolbox(TOLEBOOL fMenu/*[in]*/);
  HRESULT         __fastcall get_DisplayPropertyToolbox(VARIANT_BOOL* fMenu/*[out,retval]*/);
  HRESULT         __fastcall get_DisplayPropertyToolbox(TOLEBOOL* fMenu/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DisplayPropertyToolbox(void);
  HRESULT         __fastcall get_ChartSpaceTitle(Owc10_xp::ChTitle** pptitle/*[out,retval]*/);
  HRESULT         __fastcall get_ChartSpaceTitle(Owc10_xp::ChTitlePtr* pptitle/*[out,retval]*/);
  Owc10_xp::ChTitlePtr __fastcall get_ChartSpaceTitle(void);
  HRESULT         __fastcall get_Version(BSTR* pbstr/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT         __fastcall get_XMLData(BSTR* pbstrHTML/*[out,retval]*/);
  BSTR            __fastcall get_XMLData(void);
  HRESULT         __fastcall set_XMLData(BSTR pbstrHTML/*[in]*/);
  HRESULT         __fastcall get_Constants(LPDISPATCH* ppIDispatchConstants/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Constants(void);
  HRESULT         __fastcall get_CanUndo(VARIANT_BOOL* pfCanUndo/*[out,retval]*/);
  HRESULT         __fastcall get_CanUndo(TOLEBOOL* pfCanUndo/*[out,retval]*/);
  TOLEBOOL        __fastcall get_CanUndo(void);
  HRESULT         __fastcall get_AllowLayoutEvents(VARIANT_BOOL* pvbAllowLayoutEvents/*[out,retval]*/);
  HRESULT         __fastcall get_AllowLayoutEvents(TOLEBOOL* pvbAllowLayoutEvents/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AllowLayoutEvents(void);
  HRESULT         __fastcall set_AllowLayoutEvents(VARIANT_BOOL pvbAllowLayoutEvents/*[in]*/);
  HRESULT         __fastcall set_AllowLayoutEvents(TOLEBOOL pvbAllowLayoutEvents/*[in]*/);
  HRESULT         __fastcall get_AllowRenderEvents(VARIANT_BOOL* pvbAllowRenderEvents/*[out,retval]*/);
  HRESULT         __fastcall get_AllowRenderEvents(TOLEBOOL* pvbAllowRenderEvents/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AllowRenderEvents(void);
  HRESULT         __fastcall set_AllowRenderEvents(VARIANT_BOOL pvbAllowRenderEvents/*[in]*/);
  HRESULT         __fastcall set_AllowRenderEvents(TOLEBOOL pvbAllowRenderEvents/*[in]*/);
  HRESULT         __fastcall get_AllowPointRenderEvents(VARIANT_BOOL* pvbAllowPointRenderEvents/*[out,retval]*/);
  HRESULT         __fastcall get_AllowPointRenderEvents(TOLEBOOL* pvbAllowPointRenderEvents/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AllowPointRenderEvents(void);
  HRESULT         __fastcall set_AllowPointRenderEvents(VARIANT_BOOL pvbAllowPointRenderEvents/*[in]*/);
  HRESULT         __fastcall set_AllowPointRenderEvents(TOLEBOOL pvbAllowPointRenderEvents/*[in]*/);
  HRESULT         __fastcall BuildLitChart(void);
  HRESULT         __fastcall Load(BSTR Filename/*[in]*/);
  HRESULT         __fastcall Clear(void);
  HRESULT         __fastcall ShowHelp(long iTopic/*[in]*/);
  HRESULT         __fastcall ExportPicture(BSTR Filename/*[in,def,opt]*/, 
                                           BSTR FilterName/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall Refresh(void);
  HRESULT         __fastcall Select(void);
  HRESULT         __fastcall BeginUndo(void);
  HRESULT         __fastcall EndUndo(void);
  HRESULT         __fastcall Undo(void);
  HRESULT         __fastcall RangeFromPoint(int x/*[in]*/, int y/*[in]*/, 
                                            LPDISPATCH* ppobject/*[out,retval]*/);
  LPDISPATCH      __fastcall RangeFromPoint(int x/*[in]*/, int y/*[in]*/);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL fEnabled/*[in]*/);
  HRESULT         __fastcall set_Enabled(TOLEBOOL fEnabled/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* fEnabled/*[out,retval]*/);
  HRESULT         __fastcall get_Enabled(TOLEBOOL* fEnabled/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT         __fastcall get_RevisionNumber(BSTR* pbstrRevisionNumber/*[out,retval]*/);
  BSTR            __fastcall get_RevisionNumber(void);
  HRESULT         __fastcall set_PrintQuality3D(double prquality/*[in]*/);
  HRESULT         __fastcall get_PrintQuality3D(double* prquality/*[out,retval]*/);
  double          __fastcall get_PrintQuality3D(void);
  HRESULT         __fastcall set_DisplayScreenTips(VARIANT_BOOL pfDisplayScreenTips/*[in]*/);
  HRESULT         __fastcall set_DisplayScreenTips(TOLEBOOL pfDisplayScreenTips/*[in]*/);
  HRESULT         __fastcall get_DisplayScreenTips(VARIANT_BOOL* pfDisplayScreenTips/*[out,retval]*/);
  HRESULT         __fastcall get_DisplayScreenTips(TOLEBOOL* pfDisplayScreenTips/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DisplayScreenTips(void);
  HRESULT         __fastcall set_ConnectionString(BSTR ConnectionString/*[in]*/);
  HRESULT         __fastcall get_ConnectionString(BSTR* ConnectionString/*[out,retval]*/);
  BSTR            __fastcall get_ConnectionString(void);
  HRESULT         __fastcall set_CommandText(BSTR CommandText/*[in]*/);
  HRESULT         __fastcall get_CommandText(BSTR* CommandText/*[out,retval]*/);
  BSTR            __fastcall get_CommandText(void);
  HRESULT         __fastcall get_InternalPivotTable(LPDISPATCH* PivotTable/*[out,retval]*/);
  LPDISPATCH      __fastcall get_InternalPivotTable(void);
  HRESULT         __fastcall SetData(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/, 
                                     long DataSourceIndex/*[in]*/, 
                                     VARIANT DataReference/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall set_HasSeriesByRows(VARIANT_BOOL HasSeriesByRows/*[in]*/);
  HRESULT         __fastcall set_HasSeriesByRows(TOLEBOOL HasSeriesByRows/*[in]*/);
  HRESULT         __fastcall get_HasSeriesByRows(VARIANT_BOOL* HasSeriesByRows/*[out,retval]*/);
  HRESULT         __fastcall get_HasSeriesByRows(TOLEBOOL* HasSeriesByRows/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HasSeriesByRows(void);
  HRESULT         __fastcall set_PlotAllAggregates(Owc10_xp::ChartPlotAggregatesEnum PlotMultipleAggregates/*[in]*/);
  HRESULT         __fastcall get_PlotAllAggregates(Owc10_xp::ChartPlotAggregatesEnum* PlotMultipleAggregates/*[out,retval]*/);
  Owc10_xp::ChartPlotAggregatesEnum __fastcall get_PlotAllAggregates(void);
  HRESULT         __fastcall set_HasMultipleCharts(VARIANT_BOOL HasMultiplePlots/*[in]*/);
  HRESULT         __fastcall set_HasMultipleCharts(TOLEBOOL HasMultiplePlots/*[in]*/);
  HRESULT         __fastcall get_HasMultipleCharts(VARIANT_BOOL* HasMultiplePlots/*[out,retval]*/);
  HRESULT         __fastcall get_HasMultipleCharts(TOLEBOOL* HasMultiplePlots/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HasMultipleCharts(void);
  HRESULT         __fastcall set_DisplayFieldList(VARIANT_BOOL DisplayFieldList/*[in]*/);
  HRESULT         __fastcall set_DisplayFieldList(TOLEBOOL DisplayFieldList/*[in]*/);
  HRESULT         __fastcall get_DisplayFieldList(VARIANT_BOOL* DisplayFieldList/*[out,retval]*/);
  HRESULT         __fastcall get_DisplayFieldList(TOLEBOOL* DisplayFieldList/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DisplayFieldList(void);
  HRESULT         __fastcall set_HasPassiveAlerts(VARIANT_BOOL pfHasPassiveAlerts/*[in]*/);
  HRESULT         __fastcall set_HasPassiveAlerts(TOLEBOOL pfHasPassiveAlerts/*[in]*/);
  HRESULT         __fastcall get_HasPassiveAlerts(VARIANT_BOOL* pfHasPassiveAlerts/*[out,retval]*/);
  HRESULT         __fastcall get_HasPassiveAlerts(TOLEBOOL* pfHasPassiveAlerts/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HasPassiveAlerts(void);
  HRESULT         __fastcall DropZones(Owc10_xp::ChartDropZonesEnum dz/*[in]*/, 
                                       Owc10_xp::ChDropZone** ppwcdz/*[out,retval]*/);
  Owc10_xp::ChDropZone* __fastcall DropZones(Owc10_xp::ChartDropZonesEnum dz/*[in]*/);
  HRESULT         __fastcall set_DataSourceName(BSTR pbstrDSName/*[in]*/);
  HRESULT         __fastcall get_DataSourceName(BSTR* pbstrDSName/*[out,retval]*/);
  BSTR            __fastcall get_DataSourceName(void);
  HRESULT         __fastcall set_DisplayFieldButtons(VARIANT_BOOL DisplayFieldButtons/*[in]*/);
  HRESULT         __fastcall set_DisplayFieldButtons(TOLEBOOL DisplayFieldButtons/*[in]*/);
  HRESULT         __fastcall get_DisplayFieldButtons(VARIANT_BOOL* DisplayFieldButtons/*[out,retval]*/);
  HRESULT         __fastcall get_DisplayFieldButtons(TOLEBOOL* DisplayFieldButtons/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DisplayFieldButtons(void);
  HRESULT         __fastcall get_SelectionList(VARIANT* SelectionList/*[out,retval]*/);
  VARIANT         __fastcall get_SelectionList(void);
  HRESULT         __fastcall set_HasPlotDetails(VARIANT_BOOL pvbPlotDetails/*[in]*/);
  HRESULT         __fastcall set_HasPlotDetails(TOLEBOOL pvbPlotDetails/*[in]*/);
  HRESULT         __fastcall get_HasPlotDetails(VARIANT_BOOL* pvbPlotDetails/*[out,retval]*/);
  HRESULT         __fastcall get_HasPlotDetails(TOLEBOOL* pvbPlotDetails/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HasPlotDetails(void);
  HRESULT         __fastcall FieldListAddTo(LPUNKNOWN punk/*[in]*/, long lPos);
  HRESULT         __fastcall set_AllowScreenTipEvents(VARIANT_BOOL pfAllowScreenTipEvents/*[in]*/);
  HRESULT         __fastcall set_AllowScreenTipEvents(TOLEBOOL pfAllowScreenTipEvents/*[in]*/);
  HRESULT         __fastcall get_AllowScreenTipEvents(VARIANT_BOOL* pfAllowScreenTipEvents/*[out,retval]*/);
  HRESULT         __fastcall get_AllowScreenTipEvents(TOLEBOOL* pfAllowScreenTipEvents/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AllowScreenTipEvents(void);
  HRESULT         __fastcall get_Commands(Owc10_xp::OCCommands** Commands/*[out,retval]*/);
  HRESULT         __fastcall get_Commands(Owc10_xp::OCCommandsPtr* Commands/*[out,retval]*/);
  Owc10_xp::OCCommandsPtr __fastcall get_Commands(void);
  HRESULT         __fastcall set_AllowPropertyToolbox(VARIANT_BOOL fMenu/*[in]*/);
  HRESULT         __fastcall set_AllowPropertyToolbox(TOLEBOOL fMenu/*[in]*/);
  HRESULT         __fastcall get_AllowPropertyToolbox(VARIANT_BOOL* fMenu/*[out,retval]*/);
  HRESULT         __fastcall get_AllowPropertyToolbox(TOLEBOOL* fMenu/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AllowPropertyToolbox(void);
  HRESULT         __fastcall get_AllowGrouping(VARIANT_BOOL* AllowGrouping/*[out,retval]*/);
  HRESULT         __fastcall get_AllowGrouping(TOLEBOOL* AllowGrouping/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AllowGrouping(void);
  HRESULT         __fastcall set_AllowGrouping(VARIANT_BOOL AllowGrouping/*[in]*/);
  HRESULT         __fastcall set_AllowGrouping(TOLEBOOL AllowGrouping/*[in]*/);
  HRESULT         __fastcall get_AllowFiltering(VARIANT_BOOL* AllowFiltering/*[out,retval]*/);
  HRESULT         __fastcall get_AllowFiltering(TOLEBOOL* AllowFiltering/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AllowFiltering(void);
  HRESULT         __fastcall set_AllowFiltering(VARIANT_BOOL AllowFiltering/*[in]*/);
  HRESULT         __fastcall set_AllowFiltering(TOLEBOOL AllowFiltering/*[in]*/);
  HRESULT         __fastcall get_Top(long* ptop/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall get_Left(long* pleft/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall get_Bottom(long* pbottom/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT         __fastcall get_Right(long* pright/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT         __fastcall get_HasUnifiedScales(VARIANT_BOOL* HasUnifiedScales/*[out,retval]*/);
  HRESULT         __fastcall get_HasUnifiedScales(TOLEBOOL* HasUnifiedScales/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HasUnifiedScales(void);
  HRESULT         __fastcall set_HasUnifiedScales(VARIANT_BOOL HasUnifiedScales/*[in]*/);
  HRESULT         __fastcall set_HasUnifiedScales(TOLEBOOL HasUnifiedScales/*[in]*/);
  HRESULT         __fastcall get_DisplayToolbar(VARIANT_BOOL* DisplayToolbar/*[out,retval]*/);
  HRESULT         __fastcall get_DisplayToolbar(TOLEBOOL* DisplayToolbar/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DisplayToolbar(void);
  HRESULT         __fastcall set_DisplayToolbar(VARIANT_BOOL DisplayToolbar/*[in]*/);
  HRESULT         __fastcall set_DisplayToolbar(TOLEBOOL DisplayToolbar/*[in]*/);
  HRESULT         __fastcall get_Toolbar(Mscomctllib_xp::IToolbar** Toolbar/*[out,retval]*/);
  HRESULT         __fastcall get_Toolbar(Mscomctllib_xp::IToolbarPtr* Toolbar/*[out,retval]*/);
  Mscomctllib_xp::IToolbarPtr __fastcall get_Toolbar(void);
  HRESULT         __fastcall get_ViewOnlyMode(VARIANT_BOOL* ViewOnlyMode/*[out,retval]*/);
  HRESULT         __fastcall get_ViewOnlyMode(TOLEBOOL* ViewOnlyMode/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ViewOnlyMode(void);
  HRESULT         __fastcall LocateDataSource(void);
  HRESULT         __fastcall ShowContextMenu(long x/*[in]*/, long y/*[in]*/, VARIANT Menu/*[in]*/);
  HRESULT         __fastcall GetPicture(BSTR FilterName/*[in,def,opt]*/, long Width/*[in,def,opt]*/, 
                                        long Height/*[in,def,opt]*/, 
                                        VARIANT* pvarArray/*[out,retval]*/);
  VARIANT         __fastcall GetPicture(BSTR FilterName/*[in,def,opt]*/, long Width/*[in,def,opt]*/, 
                                        long Height/*[in,def,opt]*/);
  HRESULT         __fastcall SetSpreadsheetData(BSTR DataReference/*[in]*/, 
                                                VARIANT_BOOL SeriesByRows/*[in,def,opt]*/);
  HRESULT         __fastcall Repaint(void);
  HRESULT         __fastcall get_IsDirty(VARIANT_BOOL* IsDirty/*[out,retval]*/);
  HRESULT         __fastcall get_IsDirty(TOLEBOOL* IsDirty/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsDirty(void);
  HRESULT         __fastcall set_IsDirty(VARIANT_BOOL IsDirty/*[in]*/);
  HRESULT         __fastcall set_IsDirty(TOLEBOOL IsDirty/*[in]*/);
  HRESULT         __fastcall get_International(VARIANT Index/*[in]*/, VARIANT* info/*[out,retval]*/);
  VARIANT         __fastcall get_International(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_LanguageSettings(Owc10_xp::OWCLanguageSettings** langset/*[out,retval]*/);
  HRESULT         __fastcall get_LanguageSettings(Owc10_xp::OWCLanguageSettingsPtr* langset/*[out,retval]*/);
  Owc10_xp::OWCLanguageSettingsPtr __fastcall get_LanguageSettings(void);
  HRESULT         __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall GetDataSourceIndex(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/, 
                                                long* DataSourceIndex/*[out,retval]*/);
  long            __fastcall GetDataSourceIndex(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/);
  HRESULT         __fastcall get_HasRuntimeSelection(VARIANT_BOOL* pvb/*[out,retval]*/);
  HRESULT         __fastcall get_HasRuntimeSelection(TOLEBOOL* pvb/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HasRuntimeSelection(void);
  HRESULT         __fastcall set_HasRuntimeSelection(VARIANT_BOOL pvb/*[in]*/);
  HRESULT         __fastcall set_HasRuntimeSelection(TOLEBOOL pvb/*[in]*/);
  HRESULT         __fastcall ClearUndo(void);
  HRESULT         __fastcall get_DisplayBranding(VARIANT_BOOL* DisplayBranding/*[out,retval]*/);
  HRESULT         __fastcall get_DisplayBranding(TOLEBOOL* DisplayBranding/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DisplayBranding(void);
  HRESULT         __fastcall set_DisplayBranding(VARIANT_BOOL DisplayBranding/*[in]*/);
  HRESULT         __fastcall set_DisplayBranding(TOLEBOOL DisplayBranding/*[in]*/);
  HRESULT         __fastcall get_DisplayOfficeLogo(VARIANT_BOOL* DisplayOfficeLogo/*[out,retval]*/);
  HRESULT         __fastcall get_DisplayOfficeLogo(TOLEBOOL* DisplayOfficeLogo/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DisplayOfficeLogo(void);
  HRESULT         __fastcall set_DisplayOfficeLogo(VARIANT_BOOL DisplayOfficeLogo/*[in]*/);
  HRESULT         __fastcall set_DisplayOfficeLogo(TOLEBOOL DisplayOfficeLogo/*[in]*/);
  HRESULT         __fastcall OkToBindToControlByName(void);
  HRESULT         __fastcall get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/);
  Owc10_xp::ChartSelectionsEnum __fastcall get_ObjectType(void);

  __property   Owc10_xp::ChartChartLayoutEnum ChartLayout = {read = get_ChartLayout, write = set_ChartLayout};
  __property   long            ChartWrapCount = {read = get_ChartWrapCount, write = set_ChartWrapCount};
  __property   TOLEBOOL        EnableEvents = {write = set_EnableEvents};
  __property   TOLEBOOL        HasChartSpaceLegend = {write = set_HasChartSpaceLegend};
  __property   long            MajorVersion = {read = get_MajorVersion};
  __property   BSTR            MinorVersion = {read = get_MinorVersion};
  __property   BSTR            BuildNumber = {read = get_BuildNumber};
  __property   TOLEBOOL        ScreenUpdating = {write = set_ScreenUpdating};
  __property   Owc10_xp::ChBorderPtr Border = {read = get_Border};
  __property   Owc10_xp::ChChartsPtr Charts = {read = get_Charts};
  __property   Msdatasrc_xp::DataSourcePtr DataSource = {write = set_DataSource};
  __property   Msdatasrc_xp::DataMember DataMember = {read = get_DataMember, write = set_DataMember};
  __property   Owc10_xp::ChartDataSourceTypeEnum DataSourceType = {read = get_DataSourceType};
  __property   TOLEBOOL        HasChartSpaceTitle = {write = set_HasChartSpaceTitle};
  __property   Owc10_xp::ChInteriorPtr Interior = {read = get_Interior};
  __property   Owc10_xp::ChLegendPtr ChartSpaceLegend = {read = get_ChartSpaceLegend};
  __property   LPDISPATCH      Selection = {read = get_Selection};
  __property   Owc10_xp::ChartSelectionsEnum SelectionType = {read = get_SelectionType};
  __property   Owc10_xp::ChartSelectionMarksEnum HasSelectionMarks = {read = get_HasSelectionMarks, write = set_HasSelectionMarks};
  __property   TOLEBOOL        DisplayPropertyToolbox = {write = set_DisplayPropertyToolbox};
  __property   Owc10_xp::ChTitlePtr ChartSpaceTitle = {read = get_ChartSpaceTitle};
  __property   BSTR            Version = {read = get_Version};
  __property   BSTR            XMLData = {read = get_XMLData};
  __property   LPDISPATCH      Constants = {read = get_Constants};
  __property   TOLEBOOL        CanUndo = {read = get_CanUndo};
  __property   TOLEBOOL        AllowLayoutEvents = {read = get_AllowLayoutEvents, write = set_AllowLayoutEvents};
  __property   TOLEBOOL        AllowRenderEvents = {read = get_AllowRenderEvents, write = set_AllowRenderEvents};
  __property   TOLEBOOL        AllowPointRenderEvents = {read = get_AllowPointRenderEvents, write = set_AllowPointRenderEvents};
  __property   TOLEBOOL        Enabled = {write = set_Enabled};
  __property   BSTR            RevisionNumber = {read = get_RevisionNumber};
  __property   double          PrintQuality3D = {read = get_PrintQuality3D, write = set_PrintQuality3D};
  __property   TOLEBOOL        DisplayScreenTips = {write = set_DisplayScreenTips};
  __property   BSTR            ConnectionString = {read = get_ConnectionString, write = set_ConnectionString};
  __property   BSTR            CommandText = {read = get_CommandText, write = set_CommandText};
  __property   LPDISPATCH      InternalPivotTable = {read = get_InternalPivotTable};
  __property   TOLEBOOL        HasSeriesByRows = {write = set_HasSeriesByRows};
  __property   Owc10_xp::ChartPlotAggregatesEnum PlotAllAggregates = {read = get_PlotAllAggregates, write = set_PlotAllAggregates};
  __property   TOLEBOOL        HasMultipleCharts = {write = set_HasMultipleCharts};
  __property   TOLEBOOL        DisplayFieldList = {write = set_DisplayFieldList};
  __property   TOLEBOOL        HasPassiveAlerts = {write = set_HasPassiveAlerts};
  __property   BSTR            DataSourceName = {read = get_DataSourceName, write = set_DataSourceName};
  __property   TOLEBOOL        DisplayFieldButtons = {write = set_DisplayFieldButtons};
  __property   TOLEBOOL        HasPlotDetails = {write = set_HasPlotDetails};
  __property   TOLEBOOL        AllowScreenTipEvents = {write = set_AllowScreenTipEvents};
  __property   Owc10_xp::OCCommandsPtr Commands = {read = get_Commands};
  __property   TOLEBOOL        AllowPropertyToolbox = {write = set_AllowPropertyToolbox};
  __property   TOLEBOOL        AllowGrouping = {read = get_AllowGrouping, write = set_AllowGrouping};
  __property   TOLEBOOL        AllowFiltering = {read = get_AllowFiltering, write = set_AllowFiltering};
  __property   long            Top = {read = get_Top};
  __property   long            Left = {read = get_Left};
  __property   long            Bottom = {read = get_Bottom};
  __property   long            Right = {read = get_Right};
  __property   TOLEBOOL        HasUnifiedScales = {read = get_HasUnifiedScales, write = set_HasUnifiedScales};
  __property   TOLEBOOL        DisplayToolbar = {read = get_DisplayToolbar, write = set_DisplayToolbar};
  __property   Mscomctllib_xp::IToolbarPtr Toolbar = {read = get_Toolbar};
  __property   TOLEBOOL        ViewOnlyMode = {read = get_ViewOnlyMode};
  __property   TOLEBOOL        IsDirty = {read = get_IsDirty, write = set_IsDirty};
  __property   Owc10_xp::OWCLanguageSettingsPtr LanguageSettings = {read = get_LanguageSettings};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   TOLEBOOL        HasRuntimeSelection = {read = get_HasRuntimeSelection, write = set_HasRuntimeSelection};
  __property   TOLEBOOL        DisplayBranding = {read = get_DisplayBranding, write = set_DisplayBranding};
  __property   TOLEBOOL        DisplayOfficeLogo = {read = get_DisplayOfficeLogo, write = set_DisplayOfficeLogo};
  __property   Owc10_xp::ChartSelectionsEnum ObjectType = {read = get_ObjectType};
};
typedef TCOMChChartSpaceT<ChChartSpace> TCOMChChartSpace;

// *********************************************************************//
// DispIntf:  ChChartSpace
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A82-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class ChChartSpaceDispT : public TAutoDriver<ChChartSpace>
{
public:
  ChChartSpaceDispT(){}

  ChChartSpaceDispT(ChChartSpace *pintf)
  {
    TAutoDriver<ChChartSpace>::Bind(pintf, false);
  }

  ChChartSpaceDispT(ChChartSpacePtr pintf)
  {
    TAutoDriver<ChChartSpace>::Bind(pintf, true);
  }

  ChChartSpaceDispT& operator=(ChChartSpace *pintf)
  {
    TAutoDriver<ChChartSpace>::Bind(pintf, false);
    return *this;
  }

  ChChartSpaceDispT& operator=(ChChartSpacePtr pintf)
  {
    TAutoDriver<ChChartSpace>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ChartSpace));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ChartSpace);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ChartLayout(Owc10_xp::ChartChartLayoutEnum pChartChartLayout/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ChartLayout(Owc10_xp::ChartChartLayoutEnum* pChartChartLayout/*[out,retval]*/);
  Owc10_xp::ChartChartLayoutEnum __fastcall get_ChartLayout(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ChartWrapCount(long plcount/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ChartWrapCount(long* plcount/*[out,retval]*/);
  long            __fastcall get_ChartWrapCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EnableEvents(VARIANT_BOOL pfEnableEvents/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EnableEvents(VARIANT_BOOL* pfEnableEvents/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EnableEvents(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasChartSpaceLegend(VARIANT_BOOL pfHasChartSpaceLegend/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasChartSpaceLegend(VARIANT_BOOL* pfHasChartSpaceLegend/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HasChartSpaceLegend(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MajorVersion(long* plMajorVersion/*[out,retval]*/);
  long            __fastcall get_MajorVersion(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MinorVersion(BSTR* pbstrMinorVersion/*[out,retval]*/);
  BSTR            __fastcall get_MinorVersion(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BuildNumber(BSTR* pbstrBuildNumber/*[out,retval]*/);
  BSTR            __fastcall get_BuildNumber(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ScreenUpdating(VARIANT_BOOL pfUpdate/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ScreenUpdating(VARIANT_BOOL* pfUpdate/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ScreenUpdating(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Border(Owc10_xp::ChBorder** ppline/*[out,retval]*/);
  Owc10_xp::ChBorder* __fastcall get_Border(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Charts(Owc10_xp::ChCharts** ppcharts/*[out,retval]*/);
  Owc10_xp::ChCharts* __fastcall get_Charts(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_DataSource(Msdatasrc_xp::DataSource* ppidatasource/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DataSource(Msdatasrc_xp::DataSource* ppidatasource/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DataSource(Msdatasrc_xp::DataSource** ppidatasource/*[out,retval]*/);
  Msdatasrc_xp::DataSource* __fastcall get_DataSource(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DataMember(Msdatasrc_xp::DataMember pdatamember/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DataMember(Msdatasrc_xp::DataMember* pdatamember/*[out,retval]*/);
  Msdatasrc_xp::DataMember __fastcall get_DataMember(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DataSourceType(Owc10_xp::ChartDataSourceTypeEnum* pocpDST/*[out,retval]*/);
  Owc10_xp::ChartDataSourceTypeEnum __fastcall get_DataSourceType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasChartSpaceTitle(VARIANT_BOOL pfHasChartSpaceTitle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasChartSpaceTitle(VARIANT_BOOL* pfHasChartSpaceTitle/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HasChartSpaceTitle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Interior(Owc10_xp::ChInterior** ppinterior/*[out,retval]*/);
  Owc10_xp::ChInterior* __fastcall get_Interior(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ChartSpaceLegend(Owc10_xp::ChLegend** pplegend/*[out,retval]*/);
  Owc10_xp::ChLegend* __fastcall get_ChartSpaceLegend(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Selection(LPDISPATCH* ppobject/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Selection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SelectionType(Owc10_xp::ChartSelectionsEnum* itype/*[out,retval]*/);
  Owc10_xp::ChartSelectionsEnum __fastcall get_SelectionType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasSelectionMarks(Owc10_xp::ChartSelectionMarksEnum fMarks/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasSelectionMarks(Owc10_xp::ChartSelectionMarksEnum* fMarks/*[out,retval]*/);
  Owc10_xp::ChartSelectionMarksEnum __fastcall get_HasSelectionMarks(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayPropertyToolbox(VARIANT_BOOL fMenu/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayPropertyToolbox(VARIANT_BOOL* fMenu/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayPropertyToolbox(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ChartSpaceTitle(Owc10_xp::ChTitle** pptitle/*[out,retval]*/);
  Owc10_xp::ChTitle* __fastcall get_ChartSpaceTitle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Version(BSTR* pbstr/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_XMLData(BSTR* pbstrHTML/*[out,retval]*/);
  BSTR            __fastcall get_XMLData(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_XMLData(BSTR pbstrHTML/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Constants(LPDISPATCH* ppIDispatchConstants/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Constants(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CanUndo(VARIANT_BOOL* pfCanUndo/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CanUndo(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllowLayoutEvents(VARIANT_BOOL* pvbAllowLayoutEvents/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllowLayoutEvents(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AllowLayoutEvents(VARIANT_BOOL pvbAllowLayoutEvents/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllowRenderEvents(VARIANT_BOOL* pvbAllowRenderEvents/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllowRenderEvents(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AllowRenderEvents(VARIANT_BOOL pvbAllowRenderEvents/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllowPointRenderEvents(VARIANT_BOOL* pvbAllowPointRenderEvents/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllowPointRenderEvents(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AllowPointRenderEvents(VARIANT_BOOL pvbAllowPointRenderEvents/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall BuildLitChart();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Load(BSTR Filename/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Clear();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ShowHelp(long iTopic/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ExportPicture(BSTR Filename/*[in,def,opt]*/, 
                                                      BSTR FilterName/*[in,def,opt]*/, 
                                                      long Width/*[in,def,opt]*/, 
                                                      long Height/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Refresh();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Select();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall BeginUndo();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall EndUndo();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Undo();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RangeFromPoint(int x/*[in]*/, int y/*[in]*/, 
                                                       LPDISPATCH* ppobject/*[out,retval]*/);
  LPDISPATCH      __fastcall RangeFromPoint(int x/*[in]*/, int y/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(VARIANT_BOOL fEnabled/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(VARIANT_BOOL* fEnabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RevisionNumber(BSTR* pbstrRevisionNumber/*[out,retval]*/);
  BSTR            __fastcall get_RevisionNumber(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PrintQuality3D(double prquality/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PrintQuality3D(double* prquality/*[out,retval]*/);
  double          __fastcall get_PrintQuality3D(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayScreenTips(VARIANT_BOOL pfDisplayScreenTips/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayScreenTips(VARIANT_BOOL* pfDisplayScreenTips/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayScreenTips(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ConnectionString(BSTR ConnectionString/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ConnectionString(BSTR* ConnectionString/*[out,retval]*/);
  BSTR            __fastcall get_ConnectionString(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CommandText(BSTR CommandText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CommandText(BSTR* CommandText/*[out,retval]*/);
  BSTR            __fastcall get_CommandText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InternalPivotTable(LPDISPATCH* PivotTable/*[out,retval]*/);
  LPDISPATCH      __fastcall get_InternalPivotTable(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetData(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/, 
                                                long DataSourceIndex/*[in]*/, 
                                                VARIANT DataReference/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasSeriesByRows(VARIANT_BOOL HasSeriesByRows/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasSeriesByRows(VARIANT_BOOL* HasSeriesByRows/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HasSeriesByRows(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PlotAllAggregates(Owc10_xp::ChartPlotAggregatesEnum PlotMultipleAggregates/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PlotAllAggregates(Owc10_xp::ChartPlotAggregatesEnum* PlotMultipleAggregates/*[out,retval]*/);
  Owc10_xp::ChartPlotAggregatesEnum __fastcall get_PlotAllAggregates(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasMultipleCharts(VARIANT_BOOL HasMultiplePlots/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasMultipleCharts(VARIANT_BOOL* HasMultiplePlots/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HasMultipleCharts(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayFieldList(VARIANT_BOOL DisplayFieldList/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayFieldList(VARIANT_BOOL* DisplayFieldList/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayFieldList(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasPassiveAlerts(VARIANT_BOOL pfHasPassiveAlerts/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasPassiveAlerts(VARIANT_BOOL* pfHasPassiveAlerts/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HasPassiveAlerts(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DropZones(Owc10_xp::ChartDropZonesEnum dz/*[in]*/, 
                                                  Owc10_xp::ChDropZone** ppwcdz/*[out,retval]*/);
  Owc10_xp::ChDropZone* __fastcall DropZones(Owc10_xp::ChartDropZonesEnum dz/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DataSourceName(BSTR pbstrDSName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DataSourceName(BSTR* pbstrDSName/*[out,retval]*/);
  BSTR            __fastcall get_DataSourceName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayFieldButtons(VARIANT_BOOL DisplayFieldButtons/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayFieldButtons(VARIANT_BOOL* DisplayFieldButtons/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayFieldButtons(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SelectionList(VARIANT* SelectionList/*[out,retval]*/);
  VARIANT         __fastcall get_SelectionList(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasPlotDetails(VARIANT_BOOL pvbPlotDetails/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasPlotDetails(VARIANT_BOOL* pvbPlotDetails/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HasPlotDetails(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall FieldListAddTo(LPUNKNOWN punk/*[in]*/, long lPos);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AllowScreenTipEvents(VARIANT_BOOL pfAllowScreenTipEvents/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllowScreenTipEvents(VARIANT_BOOL* pfAllowScreenTipEvents/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllowScreenTipEvents(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Commands(Owc10_xp::OCCommands** Commands/*[out,retval]*/);
  Owc10_xp::OCCommands* __fastcall get_Commands(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AllowPropertyToolbox(VARIANT_BOOL fMenu/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllowPropertyToolbox(VARIANT_BOOL* fMenu/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllowPropertyToolbox(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllowGrouping(VARIANT_BOOL* AllowGrouping/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllowGrouping(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AllowGrouping(VARIANT_BOOL AllowGrouping/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllowFiltering(VARIANT_BOOL* AllowFiltering/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllowFiltering(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AllowFiltering(VARIANT_BOOL AllowFiltering/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(long* ptop/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(long* pleft/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Bottom(long* pbottom/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Right(long* pright/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasUnifiedScales(VARIANT_BOOL* HasUnifiedScales/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HasUnifiedScales(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasUnifiedScales(VARIANT_BOOL HasUnifiedScales/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayToolbar(VARIANT_BOOL* DisplayToolbar/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayToolbar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayToolbar(VARIANT_BOOL DisplayToolbar/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Toolbar(Mscomctllib_xp::IToolbar** Toolbar/*[out,retval]*/);
  Mscomctllib_xp::IToolbar* __fastcall get_Toolbar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ViewOnlyMode(VARIANT_BOOL* ViewOnlyMode/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ViewOnlyMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall LocateDataSource();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ShowContextMenu(long x/*[in]*/, long y/*[in]*/, 
                                                        VARIANT Menu/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetPicture(BSTR FilterName/*[in,def,opt]*/, 
                                                   long Width/*[in,def,opt]*/, 
                                                   long Height/*[in,def,opt]*/, 
                                                   VARIANT* pvarArray/*[out,retval]*/);
  VARIANT         __fastcall GetPicture(BSTR FilterName/*[in,def,opt]*/, long Width/*[in,def,opt]*/, 
                                        long Height/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetSpreadsheetData(BSTR DataReference/*[in]*/, 
                                                           VARIANT_BOOL SeriesByRows/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Repaint();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsDirty(VARIANT_BOOL* IsDirty/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsDirty(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IsDirty(VARIANT_BOOL IsDirty/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_International(VARIANT Index/*[in]*/, 
                                                          VARIANT* info/*[out,retval]*/);
  VARIANT         __fastcall get_International(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LanguageSettings(Owc10_xp::OWCLanguageSettings** langset/*[out,retval]*/);
  Owc10_xp::OWCLanguageSettings* __fastcall get_LanguageSettings(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetDataSourceIndex(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/
                                                           , long* DataSourceIndex/*[out,retval]*/);
  long            __fastcall GetDataSourceIndex(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasRuntimeSelection(VARIANT_BOOL* pvb/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HasRuntimeSelection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasRuntimeSelection(VARIANT_BOOL pvb/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ClearUndo();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayBranding(VARIANT_BOOL* DisplayBranding/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayBranding(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayBranding(VARIANT_BOOL DisplayBranding/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayOfficeLogo(VARIANT_BOOL* DisplayOfficeLogo/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayOfficeLogo(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayOfficeLogo(VARIANT_BOOL DisplayOfficeLogo/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall OkToBindToControlByName();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/);
  Owc10_xp::ChartSelectionsEnum __fastcall get_ObjectType(void);

  __property   Owc10_xp::ChartChartLayoutEnum ChartLayout = {read = get_ChartLayout, write = set_ChartLayout};
  __property   long            ChartWrapCount = {read = get_ChartWrapCount, write = set_ChartWrapCount};
  __property   VARIANT_BOOL    EnableEvents = {read = get_EnableEvents, write = set_EnableEvents};
  __property   VARIANT_BOOL    HasChartSpaceLegend = {read = get_HasChartSpaceLegend, write = set_HasChartSpaceLegend};
  __property   long            MajorVersion = {read = get_MajorVersion};
  __property   BSTR            MinorVersion = {read = get_MinorVersion};
  __property   BSTR            BuildNumber = {read = get_BuildNumber};
  __property   VARIANT_BOOL    ScreenUpdating = {read = get_ScreenUpdating, write = set_ScreenUpdating};
  __property   Owc10_xp::ChBorder* Border = {read = get_Border};
  __property   Owc10_xp::ChCharts* Charts = {read = get_Charts};
  __property   Msdatasrc_xp::DataSource* DataSource = {read = get_DataSource, write = set_DataSource};
  __property   Msdatasrc_xp::DataMember DataMember = {read = get_DataMember, write = set_DataMember};
  __property   Owc10_xp::ChartDataSourceTypeEnum DataSourceType = {read = get_DataSourceType};
  __property   VARIANT_BOOL    HasChartSpaceTitle = {read = get_HasChartSpaceTitle, write = set_HasChartSpaceTitle};
  __property   Owc10_xp::ChInterior* Interior = {read = get_Interior};
  __property   Owc10_xp::ChLegend* ChartSpaceLegend = {read = get_ChartSpaceLegend};
  __property   LPDISPATCH      Selection = {read = get_Selection};
  __property   Owc10_xp::ChartSelectionsEnum SelectionType = {read = get_SelectionType};
  __property   Owc10_xp::ChartSelectionMarksEnum HasSelectionMarks = {read = get_HasSelectionMarks, write = set_HasSelectionMarks};
  __property   VARIANT_BOOL    DisplayPropertyToolbox = {read = get_DisplayPropertyToolbox, write = set_DisplayPropertyToolbox};
  __property   Owc10_xp::ChTitle* ChartSpaceTitle = {read = get_ChartSpaceTitle};
  __property   BSTR            Version = {read = get_Version};
  __property   BSTR            XMLData = {read = get_XMLData};
  __property   LPDISPATCH      Constants = {read = get_Constants};
  __property   VARIANT_BOOL    CanUndo = {read = get_CanUndo};
  __property   VARIANT_BOOL    AllowLayoutEvents = {read = get_AllowLayoutEvents, write = set_AllowLayoutEvents};
  __property   VARIANT_BOOL    AllowRenderEvents = {read = get_AllowRenderEvents, write = set_AllowRenderEvents};
  __property   VARIANT_BOOL    AllowPointRenderEvents = {read = get_AllowPointRenderEvents, write = set_AllowPointRenderEvents};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   BSTR            RevisionNumber = {read = get_RevisionNumber};
  __property   double          PrintQuality3D = {read = get_PrintQuality3D, write = set_PrintQuality3D};
  __property   VARIANT_BOOL    DisplayScreenTips = {read = get_DisplayScreenTips, write = set_DisplayScreenTips};
  __property   BSTR            ConnectionString = {read = get_ConnectionString, write = set_ConnectionString};
  __property   BSTR            CommandText = {read = get_CommandText, write = set_CommandText};
  __property   LPDISPATCH      InternalPivotTable = {read = get_InternalPivotTable};
  __property   VARIANT_BOOL    HasSeriesByRows = {read = get_HasSeriesByRows, write = set_HasSeriesByRows};
  __property   Owc10_xp::ChartPlotAggregatesEnum PlotAllAggregates = {read = get_PlotAllAggregates, write = set_PlotAllAggregates};
  __property   VARIANT_BOOL    HasMultipleCharts = {read = get_HasMultipleCharts, write = set_HasMultipleCharts};
  __property   VARIANT_BOOL    DisplayFieldList = {read = get_DisplayFieldList, write = set_DisplayFieldList};
  __property   VARIANT_BOOL    HasPassiveAlerts = {read = get_HasPassiveAlerts, write = set_HasPassiveAlerts};
  __property   BSTR            DataSourceName = {read = get_DataSourceName, write = set_DataSourceName};
  __property   VARIANT_BOOL    DisplayFieldButtons = {read = get_DisplayFieldButtons, write = set_DisplayFieldButtons};
  __property   VARIANT_BOOL    HasPlotDetails = {read = get_HasPlotDetails, write = set_HasPlotDetails};
  __property   VARIANT_BOOL    AllowScreenTipEvents = {read = get_AllowScreenTipEvents, write = set_AllowScreenTipEvents};
  __property   Owc10_xp::OCCommands* Commands = {read = get_Commands};
  __property   VARIANT_BOOL    AllowPropertyToolbox = {read = get_AllowPropertyToolbox, write = set_AllowPropertyToolbox};
  __property   VARIANT_BOOL    AllowGrouping = {read = get_AllowGrouping, write = set_AllowGrouping};
  __property   VARIANT_BOOL    AllowFiltering = {read = get_AllowFiltering, write = set_AllowFiltering};
  __property   long            Top = {read = get_Top};
  __property   long            Left = {read = get_Left};
  __property   long            Bottom = {read = get_Bottom};
  __property   long            Right = {read = get_Right};
  __property   VARIANT_BOOL    HasUnifiedScales = {read = get_HasUnifiedScales, write = set_HasUnifiedScales};
  __property   VARIANT_BOOL    DisplayToolbar = {read = get_DisplayToolbar, write = set_DisplayToolbar};
  __property   Mscomctllib_xp::IToolbar* Toolbar = {read = get_Toolbar};
  __property   VARIANT_BOOL    ViewOnlyMode = {read = get_ViewOnlyMode};
  __property   VARIANT_BOOL    IsDirty = {read = get_IsDirty, write = set_IsDirty};
  __property   Owc10_xp::OWCLanguageSettings* LanguageSettings = {read = get_LanguageSettings};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   VARIANT_BOOL    HasRuntimeSelection = {read = get_HasRuntimeSelection, write = set_HasRuntimeSelection};
  __property   VARIANT_BOOL    DisplayBranding = {read = get_DisplayBranding, write = set_DisplayBranding};
  __property   VARIANT_BOOL    DisplayOfficeLogo = {read = get_DisplayOfficeLogo, write = set_DisplayOfficeLogo};
  __property   Owc10_xp::ChartSelectionsEnum ObjectType = {read = get_ObjectType};
};
typedef ChChartSpaceDispT<ChChartSpace> ChChartSpaceDisp;

typedef TComInterface<ChCharts>  TCOMChCharts;

// *********************************************************************//
// DispIntf:  ChCharts
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AE4-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class ChChartsDispT : public TAutoDriver<ChCharts>
{
public:
  ChChartsDispT(){}

  ChChartsDispT(ChCharts *pintf)
  {
    TAutoDriver<ChCharts>::Bind(pintf, false);
  }

  ChChartsDispT(ChChartsPtr pintf)
  {
    TAutoDriver<ChCharts>::Bind(pintf, true);
  }

  ChChartsDispT& operator=(ChCharts *pintf)
  {
    TAutoDriver<ChCharts>::Bind(pintf, false);
    return *this;
  }

  ChChartsDispT& operator=(ChChartsPtr pintf)
  {
    TAutoDriver<ChCharts>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* pCount/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* ppiwebchart/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(long Index/*[in,def,opt]*/, 
                                            Owc10_xp::ChChart** ppchart/*[out,retval]*/);
  Owc10_xp::ChChart* __fastcall Add(long Index/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT Index/*[in]*/, 
                                                 Owc10_xp::ChChart** ppchart/*[out,retval]*/);
  Owc10_xp::ChChart* __fastcall get_Item(VARIANT Index/*[in]*/);

  __property   long            Count = {read = get_Count};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef ChChartsDispT<ChCharts> ChChartsDisp;

typedef TComInterface<ChChart>  TCOMChChart;

// *********************************************************************//
// DispIntf:  ChChart
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AE5-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class ChChartDispT : public TAutoDriver<ChChart>
{
public:
  ChChartDispT(){}

  ChChartDispT(ChChart *pintf)
  {
    TAutoDriver<ChChart>::Bind(pintf, false);
  }

  ChChartDispT(ChChartPtr pintf)
  {
    TAutoDriver<ChChart>::Bind(pintf, true);
  }

  ChChartDispT& operator=(ChChart *pintf)
  {
    TAutoDriver<ChChart>::Bind(pintf, false);
    return *this;
  }

  ChChartDispT& operator=(ChChartPtr pintf)
  {
    TAutoDriver<ChChart>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Axes(Owc10_xp::ChAxes** ppaxes/*[out,retval]*/);
  Owc10_xp::ChAxes* __fastcall get_Axes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Border(Owc10_xp::ChBorder** ppline/*[out,retval]*/);
  Owc10_xp::ChBorder* __fastcall get_Border(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasLegend(VARIANT_BOOL pfHasLegend/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasLegend(VARIANT_BOOL* pfHasLegend/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HasLegend(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasTitle(VARIANT_BOOL pfHasTitle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasTitle(VARIANT_BOOL* pfHasTitle/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HasTitle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_WidthRatio(long pratio/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_WidthRatio(long* pratio/*[out,retval]*/);
  long            __fastcall get_WidthRatio(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HeightRatio(long pratio/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HeightRatio(long* pratio/*[out,retval]*/);
  long            __fastcall get_HeightRatio(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Index(long* piChart/*[out,retval]*/);
  long            __fastcall get_Index(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Interior(Owc10_xp::ChInterior** ppinterior/*[out,retval]*/);
  Owc10_xp::ChInterior* __fastcall get_Interior(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Legend(Owc10_xp::ChLegend** pplegend/*[out,retval]*/);
  Owc10_xp::ChLegend* __fastcall get_Legend(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pbstr/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbstr/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* ppwcwebchart/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PlotArea(Owc10_xp::ChPlotArea** ppplotarea/*[out,retval]*/);
  Owc10_xp::ChPlotArea* __fastcall get_PlotArea(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Title(Owc10_xp::ChTitle** pptitle/*[out,retval]*/);
  Owc10_xp::ChTitle* __fastcall get_Title(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ExtrudeAngle(double protation/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ExtrudeAngle(double* protation/*[out,retval]*/);
  double          __fastcall get_ExtrudeAngle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DirectionalLightRotation(double protation/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DirectionalLightRotation(double* protation/*[out,retval]*/);
  double          __fastcall get_DirectionalLightRotation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DirectionalLightInclination(double pinclination/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DirectionalLightInclination(double* pinclination/*[out,retval]*/);
  double          __fastcall get_DirectionalLightInclination(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DirectionalLightIntensity(double pintensity/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DirectionalLightIntensity(double* pintensity/*[out,retval]*/);
  double          __fastcall get_DirectionalLightIntensity(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AmbientLightIntensity(double pintensity/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AmbientLightIntensity(double* pintensity/*[out,retval]*/);
  double          __fastcall get_AmbientLightIntensity(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LightNormal(double pnormal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LightNormal(double* pnormal/*[out,retval]*/);
  double          __fastcall get_LightNormal(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ProjectionMode(Owc10_xp::ChartProjectionModeEnum pmode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ProjectionMode(Owc10_xp::ChartProjectionModeEnum* pmode/*[out,retval]*/);
  Owc10_xp::ChartProjectionModeEnum __fastcall get_ProjectionMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Inclination(double pinclination/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Inclination(double* pinclination/*[out,retval]*/);
  double          __fastcall get_Inclination(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Rotation(double protation/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Rotation(double* protation/*[out,retval]*/);
  double          __fastcall get_Rotation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Perspective(long pperspective/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Perspective(long* pperspective/*[out,retval]*/);
  long            __fastcall get_Perspective(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GapDepth(long pgapdepth/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GapDepth(long* pgapdepth/*[out,retval]*/);
  long            __fastcall get_GapDepth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasAutoChartDepth(VARIANT_BOOL pfHasAutoChartDepth/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasAutoChartDepth(VARIANT_BOOL* pfHasAutoChartDepth/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HasAutoChartDepth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasAutoAspectRatio(VARIANT_BOOL pfHasAutoAspectRatio/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasAutoAspectRatio(VARIANT_BOOL* pfHasAutoAspectRatio/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HasAutoAspectRatio(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ChartDepth(long pchartdepth/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ChartDepth(long* pchartdepth/*[out,retval]*/);
  long            __fastcall get_ChartDepth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AspectRatio(long paspectratio/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AspectRatio(long* paspectratio/*[out,retval]*/);
  long            __fastcall get_AspectRatio(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Select();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BubbleScale(double pdBubbleScalew/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BubbleScale(double* pdBubbleScalew/*[out,retval]*/);
  double          __fastcall get_BubbleScale(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FirstSliceAngle(long panFirst/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FirstSliceAngle(long* panFirst/*[out,retval]*/);
  long            __fastcall get_FirstSliceAngle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GapWidth(long plGapWidth/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GapWidth(long* plGapWidth/*[out,retval]*/);
  long            __fastcall get_GapWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HoleSize(long plHoleSize/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HoleSize(long* plHoleSize/*[out,retval]*/);
  long            __fastcall get_HoleSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Overlap(long plOverlap/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Overlap(long* plOverlap/*[out,retval]*/);
  long            __fastcall get_Overlap(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SeriesCollection(Owc10_xp::ChSeriesCollection** ppseriesCollection/*[out,retval]*/);
  Owc10_xp::ChSeriesCollection* __fastcall get_SeriesCollection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SizeRepresents(Owc10_xp::ChartSizeRepresentsEnum pocpSR/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SizeRepresents(Owc10_xp::ChartSizeRepresentsEnum* pocpSR/*[out,retval]*/);
  Owc10_xp::ChartSizeRepresentsEnum __fastcall get_SizeRepresents(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Scalings(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/
                                                     , 
                                                     Owc10_xp::ChScaling** ppwcscaling/*[out,retval]*/);
  Owc10_xp::ChScaling* __fastcall get_Scalings(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Type(Owc10_xp::ChartChartTypeEnum pocpGT/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Owc10_xp::ChartChartTypeEnum* pocpGT/*[out,retval]*/);
  Owc10_xp::ChartChartTypeEnum __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetData(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/, 
                                                long DataSourceIndex/*[in]*/, 
                                                VARIANT DataReference/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetDataReference(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/
                                                         , BSTR* DataSourceReference/*[out,retval]*/);
  BSTR            __fastcall GetDataReference(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetDataSourceIndex(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/
                                                           , long* DataSourceIndex/*[out,retval]*/);
  long            __fastcall GetDataSourceIndex(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetData(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/, 
                                                VARIANT* DataSourceIndex/*[out]*/, 
                                                VARIANT* DataReference/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LayerCount(long* playercount/*[out,retval]*/);
  long            __fastcall get_LayerCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(long* ptop/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(long ptop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(long* pleft/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(long pleft/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Bottom(long* pbottom/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Right(long* pright/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TypeFlags(int* pgrbit/*[out,retval]*/);
  int             __fastcall get_TypeFlags(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetSpreadsheetData(BSTR DataReference/*[in]*/, 
                                                           VARIANT_BOOL SeriesByRows/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DuplicateFormat();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/);
  Owc10_xp::ChartSelectionsEnum __fastcall get_ObjectType(void);

  __property   Owc10_xp::ChAxes* Axes = {read = get_Axes};
  __property   Owc10_xp::ChBorder* Border = {read = get_Border};
  __property   VARIANT_BOOL    HasLegend = {read = get_HasLegend, write = set_HasLegend};
  __property   VARIANT_BOOL    HasTitle = {read = get_HasTitle, write = set_HasTitle};
  __property   long            WidthRatio = {read = get_WidthRatio, write = set_WidthRatio};
  __property   long            HeightRatio = {read = get_HeightRatio, write = set_HeightRatio};
  __property   long            Index = {read = get_Index};
  __property   Owc10_xp::ChInterior* Interior = {read = get_Interior};
  __property   Owc10_xp::ChLegend* Legend = {read = get_Legend};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Owc10_xp::ChPlotArea* PlotArea = {read = get_PlotArea};
  __property   Owc10_xp::ChTitle* Title = {read = get_Title};
  __property   double          ExtrudeAngle = {read = get_ExtrudeAngle, write = set_ExtrudeAngle};
  __property   double          DirectionalLightRotation = {read = get_DirectionalLightRotation, write = set_DirectionalLightRotation};
  __property   double          DirectionalLightInclination = {read = get_DirectionalLightInclination, write = set_DirectionalLightInclination};
  __property   double          DirectionalLightIntensity = {read = get_DirectionalLightIntensity, write = set_DirectionalLightIntensity};
  __property   double          AmbientLightIntensity = {read = get_AmbientLightIntensity, write = set_AmbientLightIntensity};
  __property   double          LightNormal = {read = get_LightNormal, write = set_LightNormal};
  __property   Owc10_xp::ChartProjectionModeEnum ProjectionMode = {read = get_ProjectionMode, write = set_ProjectionMode};
  __property   double          Inclination = {read = get_Inclination, write = set_Inclination};
  __property   double          Rotation = {read = get_Rotation, write = set_Rotation};
  __property   long            Perspective = {read = get_Perspective, write = set_Perspective};
  __property   long            GapDepth = {read = get_GapDepth, write = set_GapDepth};
  __property   VARIANT_BOOL    HasAutoChartDepth = {read = get_HasAutoChartDepth, write = set_HasAutoChartDepth};
  __property   VARIANT_BOOL    HasAutoAspectRatio = {read = get_HasAutoAspectRatio, write = set_HasAutoAspectRatio};
  __property   long            ChartDepth = {read = get_ChartDepth, write = set_ChartDepth};
  __property   long            AspectRatio = {read = get_AspectRatio, write = set_AspectRatio};
  __property   double          BubbleScale = {read = get_BubbleScale, write = set_BubbleScale};
  __property   long            FirstSliceAngle = {read = get_FirstSliceAngle, write = set_FirstSliceAngle};
  __property   long            GapWidth = {read = get_GapWidth, write = set_GapWidth};
  __property   long            HoleSize = {read = get_HoleSize, write = set_HoleSize};
  __property   long            Overlap = {read = get_Overlap, write = set_Overlap};
  __property   Owc10_xp::ChSeriesCollection* SeriesCollection = {read = get_SeriesCollection};
  __property   Owc10_xp::ChartSizeRepresentsEnum SizeRepresents = {read = get_SizeRepresents, write = set_SizeRepresents};
  __property   Owc10_xp::ChartChartTypeEnum Type = {read = get_Type, write = set_Type};
  __property   long            LayerCount = {read = get_LayerCount};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Bottom = {read = get_Bottom};
  __property   long            Right = {read = get_Right};
  __property   int             TypeFlags = {read = get_TypeFlags};
  __property   Owc10_xp::ChartSelectionsEnum ObjectType = {read = get_ObjectType};
};
typedef ChChartDispT<ChChart> ChChartDisp;

typedef TComInterface<ChAxes>  TCOMChAxes;

// *********************************************************************//
// DispIntf:  ChAxes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AE6-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class ChAxesDispT : public TAutoDriver<ChAxes>
{
public:
  ChAxesDispT(){}

  ChAxesDispT(ChAxes *pintf)
  {
    TAutoDriver<ChAxes>::Bind(pintf, false);
  }

  ChAxesDispT(ChAxesPtr pintf)
  {
    TAutoDriver<ChAxes>::Bind(pintf, true);
  }

  ChAxesDispT& operator=(ChAxes *pintf)
  {
    TAutoDriver<ChAxes>::Bind(pintf, false);
    return *this;
  }

  ChAxesDispT& operator=(ChAxesPtr pintf)
  {
    TAutoDriver<ChAxes>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* pcaxis/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Owc10_xp::ChChart** ppchart/*[out,retval]*/);
  Owc10_xp::ChChart* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(Owc10_xp::ChScaling* Scaling/*[in]*/, 
                                            Owc10_xp::ChAxis** ppaxis/*[out,retval]*/);
  Owc10_xp::ChAxis* __fastcall Add(Owc10_xp::ChScaling* Scaling/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT Index/*[in]*/, 
                                                 Owc10_xp::ChAxis** ppaxis/*[out,retval]*/);
  Owc10_xp::ChAxis* __fastcall get_Item(VARIANT Index/*[in]*/);

  __property   long            Count = {read = get_Count};
  __property   Owc10_xp::ChChart* Parent = {read = get_Parent};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef ChAxesDispT<ChAxes> ChAxesDisp;

typedef TComInterface<ChScaling>  TCOMChScaling;

// *********************************************************************//
// DispIntf:  ChScaling
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39ABB-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class ChScalingDispT : public TAutoDriver<ChScaling>
{
public:
  ChScalingDispT(){}

  ChScalingDispT(ChScaling *pintf)
  {
    TAutoDriver<ChScaling>::Bind(pintf, false);
  }

  ChScalingDispT(ChScalingPtr pintf)
  {
    TAutoDriver<ChScaling>::Bind(pintf, true);
  }

  ChScalingDispT& operator=(ChScaling *pintf)
  {
    TAutoDriver<ChScaling>::Bind(pintf, false);
    return *this;
  }

  ChScalingDispT& operator=(ChScalingPtr pintf)
  {
    TAutoDriver<ChScaling>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasAutoMaximum(VARIANT_BOOL pfAutoMax/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasAutoMaximum(VARIANT_BOOL* pfAutoMax/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HasAutoMaximum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasAutoMinimum(VARIANT_BOOL pfHasAutoMinimum/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasAutoMinimum(VARIANT_BOOL* pfHasAutoMinimum/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HasAutoMinimum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasSplit(VARIANT_BOOL pfHasSplit/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasSplit(VARIANT_BOOL* pfHasSplit/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HasSplit(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LogBase(double pdLogBase/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LogBase(double* pdLogBase/*[out,retval]*/);
  double          __fastcall get_LogBase(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Maximum(double pdMax/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Maximum(double* pdMax/*[out,retval]*/);
  double          __fastcall get_Maximum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Minimum(double pdMin/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Minimum(double* pdMin/*[out,retval]*/);
  double          __fastcall get_Minimum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Orientation(Owc10_xp::ChartScaleOrientationEnum pocpSO/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Orientation(Owc10_xp::ChartScaleOrientationEnum* pocpSO/*[out,retval]*/);
  Owc10_xp::ChartScaleOrientationEnum __fastcall get_Orientation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Type(Owc10_xp::ChartScaleTypeEnum pocpST/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Owc10_xp::ChartScaleTypeEnum* pocpST/*[out,retval]*/);
  Owc10_xp::ChartScaleTypeEnum __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SplitMaximum(double pdSplitMax/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SplitMaximum(double* pdSplitMax/*[out,retval]*/);
  double          __fastcall get_SplitMaximum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SplitMinimum(double pdSplitMin/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SplitMinimum(double* pdSplitMin/*[out,retval]*/);
  double          __fastcall get_SplitMinimum(void);

  __property   VARIANT_BOOL    HasAutoMaximum = {read = get_HasAutoMaximum, write = set_HasAutoMaximum};
  __property   VARIANT_BOOL    HasAutoMinimum = {read = get_HasAutoMinimum, write = set_HasAutoMinimum};
  __property   VARIANT_BOOL    HasSplit = {read = get_HasSplit, write = set_HasSplit};
  __property   double          LogBase = {read = get_LogBase, write = set_LogBase};
  __property   double          Maximum = {read = get_Maximum, write = set_Maximum};
  __property   double          Minimum = {read = get_Minimum, write = set_Minimum};
  __property   Owc10_xp::ChartScaleOrientationEnum Orientation = {read = get_Orientation, write = set_Orientation};
  __property   Owc10_xp::ChartScaleTypeEnum Type = {read = get_Type, write = set_Type};
  __property   double          SplitMaximum = {read = get_SplitMaximum, write = set_SplitMaximum};
  __property   double          SplitMinimum = {read = get_SplitMinimum, write = set_SplitMinimum};
};
typedef ChScalingDispT<ChScaling> ChScalingDisp;

typedef TComInterface<ChAxis>  TCOMChAxis;

// *********************************************************************//
// DispIntf:  ChAxis
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AE7-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class ChAxisDispT : public TAutoDriver<ChAxis>
{
public:
  ChAxisDispT(){}

  ChAxisDispT(ChAxis *pintf)
  {
    TAutoDriver<ChAxis>::Bind(pintf, false);
  }

  ChAxisDispT(ChAxisPtr pintf)
  {
    TAutoDriver<ChAxis>::Bind(pintf, true);
  }

  ChAxisDispT& operator=(ChAxis *pintf)
  {
    TAutoDriver<ChAxis>::Bind(pintf, false);
    return *this;
  }

  ChAxisDispT& operator=(ChAxisPtr pintf)
  {
    TAutoDriver<ChAxis>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Crosses(Owc10_xp::ChartAxisCrossesEnum pocpACT/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Crosses(Owc10_xp::ChartAxisCrossesEnum* pocpACT/*[out,retval]*/);
  Owc10_xp::ChartAxisCrossesEnum __fastcall get_Crosses(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CrossesAtValue(double pdCrossesAt/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CrossesAtValue(double* pdCrossesAt/*[out,retval]*/);
  double          __fastcall get_CrossesAtValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CrossingAxis(Owc10_xp::ChAxis* ppaxis/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CrossingAxis(Owc10_xp::ChAxis** ppaxis/*[out,retval]*/);
  Owc10_xp::ChAxis* __fastcall get_CrossingAxis(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Font(Owc10_xp::ChFont** ppfont/*[out,retval]*/);
  Owc10_xp::ChFont* __fastcall get_Font(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasAutoMajorUnit(VARIANT_BOOL pfHasAutoMajorUnit/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasAutoMajorUnit(VARIANT_BOOL* pfHasAutoMajorUnit/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HasAutoMajorUnit(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasAutoMinorUnit(VARIANT_BOOL pfHasAutoMinorUnit/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasAutoMinorUnit(VARIANT_BOOL* pfHasAutoMinorUnit/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HasAutoMinorUnit(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasMajorGridlines(VARIANT_BOOL pfHasMajorGridlines/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasMajorGridlines(VARIANT_BOOL* pfHasMajorGridlines/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HasMajorGridlines(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasMinorGridlines(VARIANT_BOOL pfHasMinorGridlines/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasMinorGridlines(VARIANT_BOOL* pfHasMinorGridlines/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HasMinorGridlines(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasTitle(VARIANT_BOOL pfHasTitle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasTitle(VARIANT_BOOL* pfHasTitle/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HasTitle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Line(Owc10_xp::ChLine** ppline/*[out,retval]*/);
  Owc10_xp::ChLine* __fastcall get_Line(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MajorGridlines(Owc10_xp::ChGridlines** ppgridlines/*[out,retval]*/);
  Owc10_xp::ChGridlines* __fastcall get_MajorGridlines(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MajorTickMarks(Owc10_xp::ChartTickMarkEnum pocpTMT/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MajorTickMarks(Owc10_xp::ChartTickMarkEnum* pocpTMT/*[out,retval]*/);
  Owc10_xp::ChartTickMarkEnum __fastcall get_MajorTickMarks(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MajorUnit(double pdMajorUnit/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MajorUnit(double* pdMajorUnit/*[out,retval]*/);
  double          __fastcall get_MajorUnit(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MinorGridlines(Owc10_xp::ChGridlines** ppgridlines/*[out,retval]*/);
  Owc10_xp::ChGridlines* __fastcall get_MinorGridlines(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MinorTickMarks(Owc10_xp::ChartTickMarkEnum pocpTMT/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MinorTickMarks(Owc10_xp::ChartTickMarkEnum* pocpTMT/*[out,retval]*/);
  Owc10_xp::ChartTickMarkEnum __fastcall get_MinorTickMarks(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MinorUnit(double pdMinorUnit/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MinorUnit(double* pdMinorUnit/*[out,retval]*/);
  double          __fastcall get_MinorUnit(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pbstr/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbstr/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Owc10_xp::ChChart** ppchart/*[out,retval]*/);
  Owc10_xp::ChChart* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Position(Owc10_xp::ChartAxisPositionEnum pChartAxisPosition/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Position(Owc10_xp::ChartAxisPositionEnum* pChartAxisPosition/*[out,retval]*/);
  Owc10_xp::ChartAxisPositionEnum __fastcall get_Position(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Scaling(Owc10_xp::ChScaling** ppscaling/*[out,retval]*/);
  Owc10_xp::ChScaling* __fastcall get_Scaling(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasTickLabels(VARIANT_BOOL pfLabels/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasTickLabels(VARIANT_BOOL* pfLabels/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HasTickLabels(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TickLabelSpacing(long pcCat/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TickLabelSpacing(long* pcCat/*[out,retval]*/);
  long            __fastcall get_TickLabelSpacing(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TickMarkSpacing(long pcCat/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TickMarkSpacing(long* pcCat/*[out,retval]*/);
  long            __fastcall get_TickMarkSpacing(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Title(Owc10_xp::ChTitle** pptitle/*[out,retval]*/);
  Owc10_xp::ChTitle* __fastcall get_Title(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Owc10_xp::ChartAxisTypeEnum* pocpAT/*[out,retval]*/);
  Owc10_xp::ChartAxisTypeEnum __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Index(long* piAxis/*[out,retval]*/);
  long            __fastcall get_Index(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_NumberFormat(BSTR pbstrNumberFormat/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NumberFormat(BSTR* pbstrNumberFormat/*[out,retval]*/);
  BSTR            __fastcall get_NumberFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Select();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupingType(Owc10_xp::ChartAxisGroupingEnum* pgroupenum/*[out,retval]*/);
  Owc10_xp::ChartAxisGroupingEnum __fastcall get_GroupingType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GroupingType(Owc10_xp::ChartAxisGroupingEnum pgroupenum/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TickLabelUnitType(Owc10_xp::ChartAxisUnitTypeEnum* punittype/*[out,retval]*/);
  Owc10_xp::ChartAxisUnitTypeEnum __fastcall get_TickLabelUnitType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TickLabelUnitType(Owc10_xp::ChartAxisUnitTypeEnum punittype/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TickMarkUnitType(Owc10_xp::ChartAxisUnitTypeEnum* punittype/*[out,retval]*/);
  Owc10_xp::ChartAxisUnitTypeEnum __fastcall get_TickMarkUnitType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TickMarkUnitType(Owc10_xp::ChartAxisUnitTypeEnum punittype/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupingUnit(long* GroupingUnit/*[out,retval]*/);
  long            __fastcall get_GroupingUnit(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GroupingUnit(long GroupingUnit/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupingUnitType(Owc10_xp::ChartAxisUnitTypeEnum* proupingUnitType/*[out,retval]*/);
  Owc10_xp::ChartAxisUnitTypeEnum __fastcall get_GroupingUnitType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GroupingUnitType(Owc10_xp::ChartAxisUnitTypeEnum proupingUnitType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupingTotalFunction(Owc10_xp::ChartGroupingTotalFunctionEnum* ptotal/*[out,retval]*/);
  Owc10_xp::ChartGroupingTotalFunctionEnum __fastcall get_GroupingTotalFunction(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GroupingTotalFunction(Owc10_xp::ChartGroupingTotalFunctionEnum ptotal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Orientation(long porientation/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Orientation(long* porientation/*[out,retval]*/);
  long            __fastcall get_Orientation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(long* ptop/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(long ptop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(long* pleft/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(long pleft/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Bottom(long* pbottom/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Right(long* pright/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CategoryLabels(Owc10_xp::ChCategoryLabels** ppCategoryLabels/*[out,retval]*/);
  Owc10_xp::ChCategoryLabels* __fastcall get_CategoryLabels(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ValueToPoint(VARIANT Value/*[in]*/, 
                                                     Owc10_xp::Coordinate** ppCoord/*[out,retval]*/);
  Owc10_xp::Coordinate* __fastcall ValueToPoint(VARIANT Value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/);
  Owc10_xp::ChartSelectionsEnum __fastcall get_ObjectType(void);

  __property   Owc10_xp::ChartAxisCrossesEnum Crosses = {read = get_Crosses, write = set_Crosses};
  __property   double          CrossesAtValue = {read = get_CrossesAtValue, write = set_CrossesAtValue};
  __property   Owc10_xp::ChAxis* CrossingAxis = {read = get_CrossingAxis, write = set_CrossingAxis};
  __property   Owc10_xp::ChFont* Font = {read = get_Font};
  __property   VARIANT_BOOL    HasAutoMajorUnit = {read = get_HasAutoMajorUnit, write = set_HasAutoMajorUnit};
  __property   VARIANT_BOOL    HasAutoMinorUnit = {read = get_HasAutoMinorUnit, write = set_HasAutoMinorUnit};
  __property   VARIANT_BOOL    HasMajorGridlines = {read = get_HasMajorGridlines, write = set_HasMajorGridlines};
  __property   VARIANT_BOOL    HasMinorGridlines = {read = get_HasMinorGridlines, write = set_HasMinorGridlines};
  __property   VARIANT_BOOL    HasTitle = {read = get_HasTitle, write = set_HasTitle};
  __property   Owc10_xp::ChLine* Line = {read = get_Line};
  __property   Owc10_xp::ChGridlines* MajorGridlines = {read = get_MajorGridlines};
  __property   Owc10_xp::ChartTickMarkEnum MajorTickMarks = {read = get_MajorTickMarks, write = set_MajorTickMarks};
  __property   double          MajorUnit = {read = get_MajorUnit, write = set_MajorUnit};
  __property   Owc10_xp::ChGridlines* MinorGridlines = {read = get_MinorGridlines};
  __property   Owc10_xp::ChartTickMarkEnum MinorTickMarks = {read = get_MinorTickMarks, write = set_MinorTickMarks};
  __property   double          MinorUnit = {read = get_MinorUnit, write = set_MinorUnit};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   Owc10_xp::ChChart* Parent = {read = get_Parent};
  __property   Owc10_xp::ChartAxisPositionEnum Position = {read = get_Position, write = set_Position};
  __property   Owc10_xp::ChScaling* Scaling = {read = get_Scaling};
  __property   VARIANT_BOOL    HasTickLabels = {read = get_HasTickLabels, write = set_HasTickLabels};
  __property   long            TickLabelSpacing = {read = get_TickLabelSpacing, write = set_TickLabelSpacing};
  __property   long            TickMarkSpacing = {read = get_TickMarkSpacing, write = set_TickMarkSpacing};
  __property   Owc10_xp::ChTitle* Title = {read = get_Title};
  __property   Owc10_xp::ChartAxisTypeEnum Type = {read = get_Type};
  __property   long            Index = {read = get_Index};
  __property   BSTR            NumberFormat = {read = get_NumberFormat, write = set_NumberFormat};
  __property   Owc10_xp::ChartAxisGroupingEnum GroupingType = {read = get_GroupingType, write = set_GroupingType};
  __property   Owc10_xp::ChartAxisUnitTypeEnum TickLabelUnitType = {read = get_TickLabelUnitType, write = set_TickLabelUnitType};
  __property   Owc10_xp::ChartAxisUnitTypeEnum TickMarkUnitType = {read = get_TickMarkUnitType, write = set_TickMarkUnitType};
  __property   long            GroupingUnit = {read = get_GroupingUnit, write = set_GroupingUnit};
  __property   Owc10_xp::ChartAxisUnitTypeEnum GroupingUnitType = {read = get_GroupingUnitType, write = set_GroupingUnitType};
  __property   Owc10_xp::ChartGroupingTotalFunctionEnum GroupingTotalFunction = {read = get_GroupingTotalFunction, write = set_GroupingTotalFunction};
  __property   long            Orientation = {read = get_Orientation, write = set_Orientation};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Bottom = {read = get_Bottom};
  __property   long            Right = {read = get_Right};
  __property   Owc10_xp::ChCategoryLabels* CategoryLabels = {read = get_CategoryLabels};
  __property   Owc10_xp::ChartSelectionsEnum ObjectType = {read = get_ObjectType};
};
typedef ChAxisDispT<ChAxis> ChAxisDisp;

typedef TComInterface<ChGridlines>  TCOMChGridlines;

// *********************************************************************//
// DispIntf:  ChGridlines
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AC4-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class ChGridlinesDispT : public TAutoDriver<ChGridlines>
{
public:
  ChGridlinesDispT(){}

  ChGridlinesDispT(ChGridlines *pintf)
  {
    TAutoDriver<ChGridlines>::Bind(pintf, false);
  }

  ChGridlinesDispT(ChGridlinesPtr pintf)
  {
    TAutoDriver<ChGridlines>::Bind(pintf, true);
  }

  ChGridlinesDispT& operator=(ChGridlines *pintf)
  {
    TAutoDriver<ChGridlines>::Bind(pintf, false);
    return *this;
  }

  ChGridlinesDispT& operator=(ChGridlinesPtr pintf)
  {
    TAutoDriver<ChGridlines>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Line(Owc10_xp::ChLine** ppline/*[out,retval]*/);
  Owc10_xp::ChLine* __fastcall get_Line(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Owc10_xp::ChAxis** ppaxis/*[out,retval]*/);
  Owc10_xp::ChAxis* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Select();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/);
  Owc10_xp::ChartSelectionsEnum __fastcall get_ObjectType(void);

  __property   Owc10_xp::ChLine* Line = {read = get_Line};
  __property   Owc10_xp::ChAxis* Parent = {read = get_Parent};
  __property   Owc10_xp::ChartSelectionsEnum ObjectType = {read = get_ObjectType};
};
typedef ChGridlinesDispT<ChGridlines> ChGridlinesDisp;

typedef TComInterface<ChTitle>  TCOMChTitle;

// *********************************************************************//
// DispIntf:  ChTitle
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39ABE-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class ChTitleDispT : public TAutoDriver<ChTitle>
{
public:
  ChTitleDispT(){}

  ChTitleDispT(ChTitle *pintf)
  {
    TAutoDriver<ChTitle>::Bind(pintf, false);
  }

  ChTitleDispT(ChTitlePtr pintf)
  {
    TAutoDriver<ChTitle>::Bind(pintf, true);
  }

  ChTitleDispT& operator=(ChTitle *pintf)
  {
    TAutoDriver<ChTitle>::Bind(pintf, false);
    return *this;
  }

  ChTitleDispT& operator=(ChTitlePtr pintf)
  {
    TAutoDriver<ChTitle>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Border(Owc10_xp::ChBorder** ppline/*[out,retval]*/);
  Owc10_xp::ChBorder* __fastcall get_Border(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Caption(BSTR pbstr/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* pbstr/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Font(Owc10_xp::ChFont** ppfont/*[out,retval]*/);
  Owc10_xp::ChFont* __fastcall get_Font(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Interior(Owc10_xp::ChInterior** ppinterior/*[out,retval]*/);
  Owc10_xp::ChInterior* __fastcall get_Interior(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* ppidispatch/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Position(Owc10_xp::ChartTitlePositionEnum pocpPos/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Position(Owc10_xp::ChartTitlePositionEnum* pocpPos/*[out,retval]*/);
  Owc10_xp::ChartTitlePositionEnum __fastcall get_Position(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Select();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(long* ptop/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(long ptop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(long* pleft/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(long pleft/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Bottom(long* pbottom/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Right(long* pright/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/);
  Owc10_xp::ChartSelectionsEnum __fastcall get_ObjectType(void);

  __property   Owc10_xp::ChBorder* Border = {read = get_Border};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   Owc10_xp::ChFont* Font = {read = get_Font};
  __property   Owc10_xp::ChInterior* Interior = {read = get_Interior};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Owc10_xp::ChartTitlePositionEnum Position = {read = get_Position, write = set_Position};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Bottom = {read = get_Bottom};
  __property   long            Right = {read = get_Right};
  __property   Owc10_xp::ChartSelectionsEnum ObjectType = {read = get_ObjectType};
};
typedef ChTitleDispT<ChTitle> ChTitleDisp;

typedef TComInterface<ChCategoryLabels>  TCOMChCategoryLabels;

// *********************************************************************//
// DispIntf:  ChCategoryLabels
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {EDF774DC-D540-40F4-99F2-75C83379CAA8}
// *********************************************************************//
template<class T>
class ChCategoryLabelsDispT : public TAutoDriver<ChCategoryLabels>
{
public:
  ChCategoryLabelsDispT(){}

  ChCategoryLabelsDispT(ChCategoryLabels *pintf)
  {
    TAutoDriver<ChCategoryLabels>::Bind(pintf, false);
  }

  ChCategoryLabelsDispT(ChCategoryLabelsPtr pintf)
  {
    TAutoDriver<ChCategoryLabels>::Bind(pintf, true);
  }

  ChCategoryLabelsDispT& operator=(ChCategoryLabels *pintf)
  {
    TAutoDriver<ChCategoryLabels>::Bind(pintf, false);
    return *this;
  }

  ChCategoryLabelsDispT& operator=(ChCategoryLabelsPtr pintf)
  {
    TAutoDriver<ChCategoryLabels>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LevelCount(long* pclabel/*[out,retval]*/);
  long            __fastcall get_LevelCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ItemCount(long Level/*[in,def,opt]*/, 
                                                      long* pcitem/*[out,retval]*/);
  long            __fastcall get_ItemCount(long Level/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Owc10_xp::ChAxis** ppaxis/*[out,retval]*/);
  Owc10_xp::ChAxis* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT Index/*[in]*/, long Level/*[in,def,opt]*/, 
                                                 Owc10_xp::ChCategoryLabel** ppCategoryLabel/*[out,retval]*/);
  Owc10_xp::ChCategoryLabel* __fastcall get_Item(VARIANT Index/*[in]*/, long Level/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PivotAxis(Owc10_xp::PivotResultAxis** ppaxis/*[out,retval]*/);
  Owc10_xp::PivotResultAxis* __fastcall get_PivotAxis(void);

  __property   long            LevelCount = {read = get_LevelCount};
  __property   Owc10_xp::ChAxis* Parent = {read = get_Parent};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   Owc10_xp::PivotResultAxis* PivotAxis = {read = get_PivotAxis};
};
typedef ChCategoryLabelsDispT<ChCategoryLabels> ChCategoryLabelsDisp;

typedef TComInterface<ChCategoryLabel>  TCOMChCategoryLabel;

// *********************************************************************//
// DispIntf:  ChCategoryLabel
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D4765783-5F64-4A53-BD65-66839B65B4C9}
// *********************************************************************//
template<class T>
class ChCategoryLabelDispT : public TAutoDriver<ChCategoryLabel>
{
public:
  ChCategoryLabelDispT(){}

  ChCategoryLabelDispT(ChCategoryLabel *pintf)
  {
    TAutoDriver<ChCategoryLabel>::Bind(pintf, false);
  }

  ChCategoryLabelDispT(ChCategoryLabelPtr pintf)
  {
    TAutoDriver<ChCategoryLabel>::Bind(pintf, true);
  }

  ChCategoryLabelDispT& operator=(ChCategoryLabel *pintf)
  {
    TAutoDriver<ChCategoryLabel>::Bind(pintf, false);
    return *this;
  }

  ChCategoryLabelDispT& operator=(ChCategoryLabelPtr pintf)
  {
    TAutoDriver<ChCategoryLabel>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* pbstr/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PivotObject(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PivotObject(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Level(long* pLevel/*[out,retval]*/);
  long            __fastcall get_Level(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Index(long* pIndex/*[out,retval]*/);
  long            __fastcall get_Index(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Owc10_xp::ChAxis** ppaxis/*[out,retval]*/);
  Owc10_xp::ChAxis* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ParentLabel(Owc10_xp::ChCategoryLabel** pplabel/*[out,retval]*/);
  Owc10_xp::ChCategoryLabel* __fastcall get_ParentLabel(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Select();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(long* ptop/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(long* pleft/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Bottom(long* pbottom/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Right(long* pright/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/);
  Owc10_xp::ChartSelectionsEnum __fastcall get_ObjectType(void);

  __property   BSTR            Caption = {read = get_Caption};
  __property   LPDISPATCH      PivotObject = {read = get_PivotObject};
  __property   long            Level = {read = get_Level};
  __property   long            Index = {read = get_Index};
  __property   Owc10_xp::ChAxis* Parent = {read = get_Parent};
  __property   Owc10_xp::ChCategoryLabel* ParentLabel = {read = get_ParentLabel};
  __property   long            Top = {read = get_Top};
  __property   long            Left = {read = get_Left};
  __property   long            Bottom = {read = get_Bottom};
  __property   long            Right = {read = get_Right};
  __property   Owc10_xp::ChartSelectionsEnum ObjectType = {read = get_ObjectType};
};
typedef ChCategoryLabelDispT<ChCategoryLabel> ChCategoryLabelDisp;

typedef TComInterface<PivotResultAxis>  TCOMPivotResultAxis;

// *********************************************************************//
// DispIntf:  PivotResultAxis
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D1AFFCE4-FCE5-11D2-8F35-00600893B533}
// *********************************************************************//
template<class T>
class PivotResultAxisDispT : public TAutoDriver<PivotResultAxis>
{
public:
  PivotResultAxisDispT(){}

  PivotResultAxisDispT(PivotResultAxis *pintf)
  {
    TAutoDriver<PivotResultAxis>::Bind(pintf, false);
  }

  PivotResultAxisDispT(PivotResultAxisPtr pintf)
  {
    TAutoDriver<PivotResultAxis>::Bind(pintf, true);
  }

  PivotResultAxisDispT& operator=(PivotResultAxis *pintf)
  {
    TAutoDriver<PivotResultAxis>::Bind(pintf, false);
    return *this;
  }

  PivotResultAxisDispT& operator=(PivotResultAxisPtr pintf)
  {
    TAutoDriver<PivotResultAxis>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Data(Owc10_xp::PivotData** Data/*[out,retval]*/);
  Owc10_xp::PivotData* __fastcall get_Data(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SourceAxis(Owc10_xp::PivotGroupAxis** Axis/*[out,retval]*/);
  Owc10_xp::PivotGroupAxis* __fastcall get_SourceAxis(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Label(Owc10_xp::PivotResultLabel** Label/*[out,retval]*/);
  Owc10_xp::PivotResultLabel* __fastcall get_Label(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(long* Left/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(long* Top/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(long* Width/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(long* Height/*[out,retval]*/);
  long            __fastcall get_Height(void);

  __property   Owc10_xp::PivotData* Data = {read = get_Data};
  __property   Owc10_xp::PivotGroupAxis* SourceAxis = {read = get_SourceAxis};
  __property   Owc10_xp::PivotResultLabel* Label = {read = get_Label};
  __property   long            Left = {read = get_Left};
  __property   long            Top = {read = get_Top};
  __property   long            Width = {read = get_Width};
  __property   long            Height = {read = get_Height};
};
typedef PivotResultAxisDispT<PivotResultAxis> PivotResultAxisDisp;

typedef TComInterface<PivotResultGroupAxis>  TCOMPivotResultGroupAxis;

// *********************************************************************//
// DispIntf:  PivotResultGroupAxis
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2C8CED10-01AF-11D3-8F35-00600893B533}
// *********************************************************************//
template<class T>
class PivotResultGroupAxisDispT : public TAutoDriver<PivotResultGroupAxis>
{
public:
  PivotResultGroupAxisDispT(){}

  PivotResultGroupAxisDispT(PivotResultGroupAxis *pintf)
  {
    TAutoDriver<PivotResultGroupAxis>::Bind(pintf, false);
  }

  PivotResultGroupAxisDispT(PivotResultGroupAxisPtr pintf)
  {
    TAutoDriver<PivotResultGroupAxis>::Bind(pintf, true);
  }

  PivotResultGroupAxisDispT& operator=(PivotResultGroupAxis *pintf)
  {
    TAutoDriver<PivotResultGroupAxis>::Bind(pintf, false);
    return *this;
  }

  PivotResultGroupAxisDispT& operator=(PivotResultGroupAxisPtr pintf)
  {
    TAutoDriver<PivotResultGroupAxis>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Fields(Owc10_xp::PivotFields** Fields/*[out,retval]*/);
  Owc10_xp::PivotFields* __fastcall get_Fields(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupFields(Owc10_xp::PivotResultGroupFields** GroupFields/*[out,retval]*/);
  Owc10_xp::PivotResultGroupFields* __fastcall get_GroupFields(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Member(Owc10_xp::PivotRowMember** Member/*[out,retval]*/);
  Owc10_xp::PivotRowMember* __fastcall get_Member(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Data(Owc10_xp::PivotData** Data/*[out,retval]*/);
  Owc10_xp::PivotData* __fastcall get_Data(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SourceAxis(Owc10_xp::PivotGroupAxis** Axis/*[out,retval]*/);
  Owc10_xp::PivotGroupAxis* __fastcall get_SourceAxis(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Label(Owc10_xp::PivotResultLabel** Label/*[out,retval]*/);
  Owc10_xp::PivotResultLabel* __fastcall get_Label(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(long* Left/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(long* Top/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(long* Width/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(long* Height/*[out,retval]*/);
  long            __fastcall get_Height(void);

  __property   Owc10_xp::PivotFields* Fields = {read = get_Fields};
  __property   Owc10_xp::PivotResultGroupFields* GroupFields = {read = get_GroupFields};
  __property   Owc10_xp::PivotRowMember* Member = {read = get_Member};

  __property   Owc10_xp::PivotData* Data = {read = get_Data};
  __property   Owc10_xp::PivotGroupAxis* SourceAxis = {read = get_SourceAxis};
  __property   Owc10_xp::PivotResultLabel* Label = {read = get_Label};
  __property   long            Left = {read = get_Left};
  __property   long            Top = {read = get_Top};
  __property   long            Width = {read = get_Width};
  __property   long            Height = {read = get_Height};
};
typedef PivotResultGroupAxisDispT<PivotResultGroupAxis> PivotResultGroupAxisDisp;

typedef TComInterface<PivotData>  TCOMPivotData;

// *********************************************************************//
// DispIntf:  PivotData
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B30-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class PivotDataDispT : public TAutoDriver<PivotData>
{
public:
  PivotDataDispT(){}

  PivotDataDispT(PivotData *pintf)
  {
    TAutoDriver<PivotData>::Bind(pintf, false);
  }

  PivotDataDispT(PivotDataPtr pintf)
  {
    TAutoDriver<PivotData>::Bind(pintf, true);
  }

  PivotDataDispT& operator=(PivotData *pintf)
  {
    TAutoDriver<PivotData>::Bind(pintf, false);
    return *this;
  }

  PivotDataDispT& operator=(PivotDataPtr pintf)
  {
    TAutoDriver<PivotData>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_View(Owc10_xp::PivotView** View/*[out,retval]*/);
  Owc10_xp::PivotView* __fastcall get_View(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RowAxis(Owc10_xp::PivotResultRowAxis** RowAxis/*[out,retval]*/);
  Owc10_xp::PivotResultRowAxis* __fastcall get_RowAxis(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnAxis(Owc10_xp::PivotResultColumnAxis** ColumnAxis/*[out,retval]*/);
  Owc10_xp::PivotResultColumnAxis* __fastcall get_ColumnAxis(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FilterAxis(Owc10_xp::PivotResultFilterAxis** FilterAxis/*[out,retval]*/);
  Owc10_xp::PivotResultFilterAxis* __fastcall get_FilterAxis(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DataAxis(Owc10_xp::PivotResultDataAxis** DataAxis/*[out,retval]*/);
  Owc10_xp::PivotResultDataAxis* __fastcall get_DataAxis(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(Owc10_xp::PivotColumnMember** Left/*[out,retval]*/);
  Owc10_xp::PivotColumnMember* __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Left(Owc10_xp::PivotColumnMember* Left/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(Owc10_xp::PivotAxisMember** Top/*[out,retval]*/);
  Owc10_xp::PivotAxisMember* __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Top(Owc10_xp::PivotAxisMember* Top/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Cells(Owc10_xp::PivotAxisMember* Row/*[in]*/, 
                                                  Owc10_xp::PivotColumnMember* Column/*[in]*/, 
                                                  Owc10_xp::PivotCell** Cell/*[out,retval]*/);
  Owc10_xp::PivotCell* __fastcall get_Cells(Owc10_xp::PivotAxisMember* Row/*[in]*/, 
                                            Owc10_xp::PivotColumnMember* Column/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DetailLeft(Owc10_xp::PivotColumnMember* Column/*[in]*/, 
                                                       long* DetailLeft/*[out,retval]*/);
  long            __fastcall get_DetailLeft(Owc10_xp::PivotColumnMember* Column/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DetailLeft(Owc10_xp::PivotColumnMember* Column/*[in]*/, 
                                                       long DetailLeft/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Range(Owc10_xp::PivotCell* TopLeft/*[in]*/, 
                                                  Owc10_xp::PivotCell* BottomRight/*[in]*/, 
                                                  Owc10_xp::PivotRange** Range/*[out,retval]*/);
  Owc10_xp::PivotRange* __fastcall get_Range(Owc10_xp::PivotCell* TopLeft/*[in]*/, 
                                             Owc10_xp::PivotCell* BottomRight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left2(long* Left2/*[out,retval]*/);
  long            __fastcall get_Left2(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top2(long* Top2/*[out,retval]*/);
  long            __fastcall get_Top2(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Label(Owc10_xp::PivotResultLabel** Label/*[out,retval]*/);
  Owc10_xp::PivotResultLabel* __fastcall get_Label(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall MoveTop(Owc10_xp::PivotAxisMember* Top/*[in]*/, 
                                                long TopOffset/*[in]*/, 
                                                VARIANT_BOOL Update/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall MoveLeft(Owc10_xp::PivotColumnMember* Left/*[in]*/, 
                                                 long LeftOffset/*[in]*/, 
                                                 VARIANT_BOOL Update/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Control(Owc10_xp::IPivotControl** Control/*[out,retval]*/);
  Owc10_xp::IPivotControl* __fastcall get_Control(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RowMembers(Owc10_xp::PivotRowMembers** RowMembers/*[out,retval]*/);
  Owc10_xp::PivotRowMembers* __fastcall get_RowMembers(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnMembers(Owc10_xp::PivotColumnMembers** ColumnMembers/*[out,retval]*/);
  Owc10_xp::PivotColumnMembers* __fastcall get_ColumnMembers(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CurrentCell(Owc10_xp::PivotCell** Cell/*[out,retval]*/);
  Owc10_xp::PivotCell* __fastcall get_CurrentCell(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LeftOffset(long* LeftOffset/*[out,retval]*/);
  long            __fastcall get_LeftOffset(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LeftOffset(long LeftOffset/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TopOffset(long* TopOffset/*[out,retval]*/);
  long            __fastcall get_TopOffset(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TopOffset(long TopOffset/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ViewportTop(long* ViewportTop/*[out,retval]*/);
  long            __fastcall get_ViewportTop(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ViewportTop(long ViewportTop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ViewportLeft(long* ViewportLeft/*[out,retval]*/);
  long            __fastcall get_ViewportLeft(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ViewportLeft(long ViewportLeft/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CellsEx(Owc10_xp::PivotAxisMember* Row/*[in]*/, 
                                                    Owc10_xp::PivotColumnMember* Column/*[in]*/, 
                                                    Owc10_xp::PivotPageMember* Page/*[in]*/, 
                                                    Owc10_xp::PivotCell** Cell/*[out,retval]*/);
  Owc10_xp::PivotCell* __fastcall get_CellsEx(Owc10_xp::PivotAxisMember* Row/*[in]*/, 
                                              Owc10_xp::PivotColumnMember* Column/*[in]*/, 
                                              Owc10_xp::PivotPageMember* Page/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PageAxis(Owc10_xp::PivotResultPageAxis** PageAxis/*[out,retval]*/);
  Owc10_xp::PivotResultPageAxis* __fastcall get_PageAxis(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Recordset(Adodb_xp::Recordset** Recordset/*[out,retval]*/);
  Adodb_xp::Recordset* __fastcall get_Recordset(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ShowDetails();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall HideDetails();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsConsistent(VARIANT_BOOL* IsConsistent/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsConsistent(void);

  __property   Owc10_xp::PivotView* View = {read = get_View};
  __property   Owc10_xp::PivotResultRowAxis* RowAxis = {read = get_RowAxis};
  __property   Owc10_xp::PivotResultColumnAxis* ColumnAxis = {read = get_ColumnAxis};
  __property   Owc10_xp::PivotResultFilterAxis* FilterAxis = {read = get_FilterAxis};
  __property   Owc10_xp::PivotResultDataAxis* DataAxis = {read = get_DataAxis};
  __property   Owc10_xp::PivotColumnMember* Left = {read = get_Left, write = _set_Left};
  __property   Owc10_xp::PivotAxisMember* Top = {read = get_Top, write = _set_Top};
  __property   long            Left2 = {read = get_Left2};
  __property   long            Top2 = {read = get_Top2};
  __property   Owc10_xp::PivotResultLabel* Label = {read = get_Label};
  __property   Owc10_xp::IPivotControl* Control = {read = get_Control};
  __property   Owc10_xp::PivotRowMembers* RowMembers = {read = get_RowMembers};
  __property   Owc10_xp::PivotColumnMembers* ColumnMembers = {read = get_ColumnMembers};
  __property   Owc10_xp::PivotCell* CurrentCell = {read = get_CurrentCell};
  __property   long            LeftOffset = {read = get_LeftOffset, write = set_LeftOffset};
  __property   long            TopOffset = {read = get_TopOffset, write = set_TopOffset};
  __property   long            ViewportTop = {read = get_ViewportTop, write = set_ViewportTop};
  __property   long            ViewportLeft = {read = get_ViewportLeft, write = set_ViewportLeft};
  __property   Owc10_xp::PivotResultPageAxis* PageAxis = {read = get_PageAxis};
  __property   Adodb_xp::Recordset* Recordset = {read = get_Recordset};
  __property   VARIANT_BOOL    IsConsistent = {read = get_IsConsistent};
};
typedef PivotDataDispT<PivotData> PivotDataDisp;

typedef TComInterface<PivotView>  TCOMPivotView;

// *********************************************************************//
// DispIntf:  PivotView
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B29-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class PivotViewDispT : public TAutoDriver<PivotView>
{
public:
  PivotViewDispT(){}

  PivotViewDispT(PivotView *pintf)
  {
    TAutoDriver<PivotView>::Bind(pintf, false);
  }

  PivotViewDispT(PivotViewPtr pintf)
  {
    TAutoDriver<PivotView>::Bind(pintf, true);
  }

  PivotViewDispT& operator=(PivotView *pintf)
  {
    TAutoDriver<PivotView>::Bind(pintf, false);
    return *this;
  }

  PivotViewDispT& operator=(PivotViewPtr pintf)
  {
    TAutoDriver<PivotView>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FieldSets(Owc10_xp::PivotFieldSets** FieldSets/*[out,retval]*/);
  Owc10_xp::PivotFieldSets* __fastcall get_FieldSets(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RowAxis(Owc10_xp::PivotAxis** Axis/*[out,retval]*/);
  Owc10_xp::PivotAxis* __fastcall get_RowAxis(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnAxis(Owc10_xp::PivotAxis** Axis/*[out,retval]*/);
  Owc10_xp::PivotAxis* __fastcall get_ColumnAxis(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DataAxis(Owc10_xp::PivotDataAxis** Axis/*[out,retval]*/);
  Owc10_xp::PivotDataAxis* __fastcall get_DataAxis(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FilterAxis(Owc10_xp::PivotFilterAxis** Axis/*[out,retval]*/);
  Owc10_xp::PivotFilterAxis* __fastcall get_FilterAxis(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Label(Owc10_xp::PivotLabel** Label/*[out,retval]*/);
  Owc10_xp::PivotLabel* __fastcall get_Label(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TitleBar(Owc10_xp::PivotLabel** Label/*[out,retval]*/);
  Owc10_xp::PivotLabel* __fastcall get_TitleBar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Totals(Owc10_xp::PivotTotals** Totals/*[out,retval]*/);
  Owc10_xp::PivotTotals* __fastcall get_Totals(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TotalFont(Owc10_xp::PivotFont** Font/*[out,retval]*/);
  Owc10_xp::PivotFont* __fastcall get_TotalFont(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TotalForeColor(VARIANT* Color/*[out,retval]*/);
  VARIANT         __fastcall get_TotalForeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TotalForeColor(VARIANT Color/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TotalBackColor(VARIANT* Color/*[out,retval]*/);
  VARIANT         __fastcall get_TotalBackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TotalBackColor(VARIANT Color/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HeaderFont(Owc10_xp::PivotFont** Font/*[out,retval]*/);
  Owc10_xp::PivotFont* __fastcall get_HeaderFont(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HeaderForeColor(VARIANT* Color/*[out,retval]*/);
  VARIANT         __fastcall get_HeaderForeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HeaderForeColor(VARIANT Color/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HeaderBackColor(VARIANT* Color/*[out,retval]*/);
  VARIANT         __fastcall get_HeaderBackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HeaderBackColor(VARIANT Color/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HeaderHAlignment(Owc10_xp::PivotHAlignmentEnum* HAlignment/*[out,retval]*/);
  Owc10_xp::PivotHAlignmentEnum __fastcall get_HeaderHAlignment(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HeaderHAlignment(Owc10_xp::PivotHAlignmentEnum HAlignment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HeaderHeight(long* Height/*[out,retval]*/);
  long            __fastcall get_HeaderHeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FieldLabelFont(Owc10_xp::PivotFont** Font/*[out,retval]*/);
  Owc10_xp::PivotFont* __fastcall get_FieldLabelFont(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FieldLabelForeColor(VARIANT* Color/*[out,retval]*/);
  VARIANT         __fastcall get_FieldLabelForeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FieldLabelForeColor(VARIANT Color/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FieldLabelBackColor(VARIANT* Color/*[out,retval]*/);
  VARIANT         __fastcall get_FieldLabelBackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FieldLabelBackColor(VARIANT Color/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FieldLabelHeight(long* Height/*[out,retval]*/);
  long            __fastcall get_FieldLabelHeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DetailRowHeight(long* Height/*[out,retval]*/);
  long            __fastcall get_DetailRowHeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DetailRowHeight(long Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DetailSortOrder(VARIANT* DetailSortOrder/*[out,retval]*/);
  VARIANT         __fastcall get_DetailSortOrder(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DetailSortOrder(VARIANT DetailSortOrder/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TotalOrientation(Owc10_xp::PivotViewTotalOrientationEnum* TotalOrientation/*[out,retval]*/);
  Owc10_xp::PivotViewTotalOrientationEnum __fastcall get_TotalOrientation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TotalOrientation(Owc10_xp::PivotViewTotalOrientationEnum TotalOrientation/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddTotal(BSTR Name/*[in]*/, 
                                                 Owc10_xp::PivotField* Field/*[in]*/, 
                                                 Owc10_xp::PivotTotalFunctionEnum Function/*[in]*/, 
                                                 Owc10_xp::PivotTotal** Total/*[out,retval]*/);
  Owc10_xp::PivotTotal* __fastcall AddTotal(BSTR Name/*[in]*/, Owc10_xp::PivotField* Field/*[in]*/, 
                                            Owc10_xp::PivotTotalFunctionEnum Function/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DeleteTotal(VARIANT Total/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddFieldSet(BSTR Name/*[in]*/, 
                                                    Owc10_xp::PivotFieldSet** FieldSet/*[out,retval]*/);
  Owc10_xp::PivotFieldSet* __fastcall AddFieldSet(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DeleteFieldSet(VARIANT FieldSet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AutoLayout(long MaxDataFields/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TotalAllMembers(VARIANT_BOOL* TotalAllMembers/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TotalAllMembers(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TotalAllMembers(VARIANT_BOOL TotalAllMembers/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DetailMaxWidth(long* DetailMaxWidth/*[out,retval]*/);
  long            __fastcall get_DetailMaxWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DetailMaxWidth(long DetailMaxWidth/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DetailMaxHeight(long* DetailMaxHeight/*[out,retval]*/);
  long            __fastcall get_DetailMaxHeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DetailMaxHeight(long DetailMaxHeight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DetailAutoFit(VARIANT_BOOL* DetailAutoFit/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DetailAutoFit(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DetailAutoFit(VARIANT_BOOL DetailAutoFit/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsFiltered(VARIANT_BOOL* IsFiltered/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsFiltered(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IsFiltered(VARIANT_BOOL IsFiltered/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayCalculatedMembers(VARIANT_BOOL* DisplayCalculatedMembers/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayCalculatedMembers(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayCalculatedMembers(VARIANT_BOOL DisplayCalculatedMembers/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_UseProviderFormatting(VARIANT_BOOL* UseProviderFormatting/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_UseProviderFormatting(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_UseProviderFormatting(VARIANT_BOOL UseProviderFormatting/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ExpandDetails(Owc10_xp::PivotTableExpandEnum* ExpandDetails/*[out,retval]*/);
  Owc10_xp::PivotTableExpandEnum __fastcall get_ExpandDetails(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ExpandDetails(Owc10_xp::PivotTableExpandEnum ExpandDetails/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Control(Owc10_xp::IPivotControl** Control/*[out,retval]*/);
  Owc10_xp::IPivotControl* __fastcall get_Control(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddCalculatedTotal(BSTR Name/*[in]*/, BSTR Caption/*[in]*/, 
                                                           BSTR Expression/*[in]*/, 
                                                           long SolveOrder/*[in,def,opt]*/, 
                                                           Owc10_xp::PivotTotal** Total/*[out,retval]*/);
  Owc10_xp::PivotTotal* __fastcall AddCalculatedTotal(BSTR Name/*[in]*/, BSTR Caption/*[in]*/, 
                                                      BSTR Expression/*[in]*/, 
                                                      long SolveOrder/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PageAxis(Owc10_xp::PivotAxis** Axis/*[out,retval]*/);
  Owc10_xp::PivotAxis* __fastcall get_PageAxis(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ExpandMembers(Owc10_xp::PivotTableExpandEnum* ExpandDetails/*[out,retval]*/);
  Owc10_xp::PivotTableExpandEnum __fastcall get_ExpandMembers(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ExpandMembers(Owc10_xp::PivotTableExpandEnum ExpandDetails/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllowEdits(VARIANT_BOOL* AllowEdits/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllowEdits(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AllowEdits(VARIANT_BOOL AllowEdits/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllowAdditions(VARIANT_BOOL* AllowAdditions/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllowAdditions(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AllowAdditions(VARIANT_BOOL AllowAdditions/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllowDeletions(VARIANT_BOOL* AllowDeletions/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllowDeletions(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AllowDeletions(VARIANT_BOOL AllowDeletions/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PropertyCaptionFont(Owc10_xp::PivotFont** Font/*[out,retval]*/);
  Owc10_xp::PivotFont* __fastcall get_PropertyCaptionFont(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PropertyValueFont(Owc10_xp::PivotFont** Font/*[out,retval]*/);
  Owc10_xp::PivotFont* __fastcall get_PropertyValueFont(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PropertyCaptionHAlignment(Owc10_xp::PivotHAlignmentEnum* HAlignment/*[out,retval]*/);
  Owc10_xp::PivotHAlignmentEnum __fastcall get_PropertyCaptionHAlignment(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PropertyCaptionHAlignment(Owc10_xp::PivotHAlignmentEnum HAlignment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PropertyValueHAlignment(Owc10_xp::PivotHAlignmentEnum* HAlignment/*[out,retval]*/);
  Owc10_xp::PivotHAlignmentEnum __fastcall get_PropertyValueHAlignment(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PropertyValueHAlignment(Owc10_xp::PivotHAlignmentEnum HAlignment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayCellColor(VARIANT_BOOL* DisplayCellColor/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayCellColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayCellColor(VARIANT_BOOL DisplayCellColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FilterCrossJoins(VARIANT_BOOL* FilterCrossJoins/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FilterCrossJoins(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FilterCrossJoins(VARIANT_BOOL FilterCrossJoins/*[in]*/);

  __property   Owc10_xp::PivotFieldSets* FieldSets = {read = get_FieldSets};
  __property   Owc10_xp::PivotAxis* RowAxis = {read = get_RowAxis};
  __property   Owc10_xp::PivotAxis* ColumnAxis = {read = get_ColumnAxis};
  __property   Owc10_xp::PivotDataAxis* DataAxis = {read = get_DataAxis};
  __property   Owc10_xp::PivotFilterAxis* FilterAxis = {read = get_FilterAxis};
  __property   Owc10_xp::PivotLabel* Label = {read = get_Label};
  __property   Owc10_xp::PivotLabel* TitleBar = {read = get_TitleBar};
  __property   Owc10_xp::PivotTotals* Totals = {read = get_Totals};
  __property   Owc10_xp::PivotFont* TotalFont = {read = get_TotalFont};
  __property   Owc10_xp::PivotFont* HeaderFont = {read = get_HeaderFont};
  __property   Owc10_xp::PivotHAlignmentEnum HeaderHAlignment = {read = get_HeaderHAlignment, write = set_HeaderHAlignment};
  __property   long            HeaderHeight = {read = get_HeaderHeight};
  __property   Owc10_xp::PivotFont* FieldLabelFont = {read = get_FieldLabelFont};
  __property   long            FieldLabelHeight = {read = get_FieldLabelHeight};
  __property   long            DetailRowHeight = {read = get_DetailRowHeight, write = set_DetailRowHeight};
  __property   Owc10_xp::PivotViewTotalOrientationEnum TotalOrientation = {read = get_TotalOrientation, write = set_TotalOrientation};
  __property   VARIANT_BOOL    TotalAllMembers = {read = get_TotalAllMembers, write = set_TotalAllMembers};
  __property   long            DetailMaxWidth = {read = get_DetailMaxWidth, write = set_DetailMaxWidth};
  __property   long            DetailMaxHeight = {read = get_DetailMaxHeight, write = set_DetailMaxHeight};
  __property   VARIANT_BOOL    DetailAutoFit = {read = get_DetailAutoFit, write = set_DetailAutoFit};
  __property   VARIANT_BOOL    IsFiltered = {read = get_IsFiltered, write = set_IsFiltered};
  __property   VARIANT_BOOL    DisplayCalculatedMembers = {read = get_DisplayCalculatedMembers, write = set_DisplayCalculatedMembers};
  __property   VARIANT_BOOL    UseProviderFormatting = {read = get_UseProviderFormatting, write = set_UseProviderFormatting};
  __property   Owc10_xp::PivotTableExpandEnum ExpandDetails = {read = get_ExpandDetails, write = set_ExpandDetails};
  __property   Owc10_xp::IPivotControl* Control = {read = get_Control};
  __property   Owc10_xp::PivotAxis* PageAxis = {read = get_PageAxis};
  __property   Owc10_xp::PivotTableExpandEnum ExpandMembers = {read = get_ExpandMembers, write = set_ExpandMembers};
  __property   VARIANT_BOOL    AllowEdits = {read = get_AllowEdits, write = set_AllowEdits};
  __property   VARIANT_BOOL    AllowAdditions = {read = get_AllowAdditions, write = set_AllowAdditions};
  __property   VARIANT_BOOL    AllowDeletions = {read = get_AllowDeletions, write = set_AllowDeletions};
  __property   Owc10_xp::PivotFont* PropertyCaptionFont = {read = get_PropertyCaptionFont};
  __property   Owc10_xp::PivotFont* PropertyValueFont = {read = get_PropertyValueFont};
  __property   Owc10_xp::PivotHAlignmentEnum PropertyCaptionHAlignment = {read = get_PropertyCaptionHAlignment, write = set_PropertyCaptionHAlignment};
  __property   Owc10_xp::PivotHAlignmentEnum PropertyValueHAlignment = {read = get_PropertyValueHAlignment, write = set_PropertyValueHAlignment};
  __property   VARIANT_BOOL    DisplayCellColor = {read = get_DisplayCellColor, write = set_DisplayCellColor};
  __property   VARIANT_BOOL    FilterCrossJoins = {read = get_FilterCrossJoins, write = set_FilterCrossJoins};
};
typedef PivotViewDispT<PivotView> PivotViewDisp;

typedef TComInterface<PivotFieldSets>  TCOMPivotFieldSets;

// *********************************************************************//
// DispIntf:  PivotFieldSets
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AAD-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class PivotFieldSetsDispT : public TAutoDriver<PivotFieldSets>
{
public:
  PivotFieldSetsDispT(){}

  PivotFieldSetsDispT(PivotFieldSets *pintf)
  {
    TAutoDriver<PivotFieldSets>::Bind(pintf, false);
  }

  PivotFieldSetsDispT(PivotFieldSetsPtr pintf)
  {
    TAutoDriver<PivotFieldSets>::Bind(pintf, true);
  }

  PivotFieldSetsDispT& operator=(PivotFieldSets *pintf)
  {
    TAutoDriver<PivotFieldSets>::Bind(pintf, false);
    return *this;
  }

  PivotFieldSetsDispT& operator=(PivotFieldSetsPtr pintf)
  {
    TAutoDriver<PivotFieldSets>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT Index/*[in]*/, 
                                                 Owc10_xp::PivotFieldSet** FieldSet/*[out,retval]*/);
  Owc10_xp::PivotFieldSet* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef PivotFieldSetsDispT<PivotFieldSets> PivotFieldSetsDisp;

typedef TComInterface<PivotFieldSet>  TCOMPivotFieldSet;

// *********************************************************************//
// DispIntf:  PivotFieldSet
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AAE-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class PivotFieldSetDispT : public TAutoDriver<PivotFieldSet>
{
public:
  PivotFieldSetDispT(){}

  PivotFieldSetDispT(PivotFieldSet *pintf)
  {
    TAutoDriver<PivotFieldSet>::Bind(pintf, false);
  }

  PivotFieldSetDispT(PivotFieldSetPtr pintf)
  {
    TAutoDriver<PivotFieldSet>::Bind(pintf, true);
  }

  PivotFieldSetDispT& operator=(PivotFieldSet *pintf)
  {
    TAutoDriver<PivotFieldSet>::Bind(pintf, false);
    return *this;
  }

  PivotFieldSetDispT& operator=(PivotFieldSetPtr pintf)
  {
    TAutoDriver<PivotFieldSet>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* Caption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Caption(BSTR Caption/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Fields(Owc10_xp::PivotFields** Fields/*[out,retval]*/);
  Owc10_xp::PivotFields* __fastcall get_Fields(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Members(Owc10_xp::PivotMembers** Members/*[out,retval]*/);
  Owc10_xp::PivotMembers* __fastcall get_Members(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Orientation(Owc10_xp::PivotFieldSetOrientationEnum* Orientation/*[out,retval]*/);
  Owc10_xp::PivotFieldSetOrientationEnum __fastcall get_Orientation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Owc10_xp::PivotFieldSetTypeEnum* Type/*[out,retval]*/);
  Owc10_xp::PivotFieldSetTypeEnum __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddCalculatedField(BSTR Name/*[in]*/, BSTR Caption/*[in]*/, 
                                                           BSTR DataField/*[in]*/, 
                                                           BSTR Expression/*[in]*/, 
                                                           Owc10_xp::PivotField** Field/*[out,retval]*/);
  Owc10_xp::PivotField* __fastcall AddCalculatedField(BSTR Name/*[in]*/, BSTR Caption/*[in]*/, 
                                                      BSTR DataField/*[in]*/, 
                                                      BSTR Expression/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BoundField(Owc10_xp::PivotField** Field/*[out,retval]*/);
  Owc10_xp::PivotField* __fastcall get_BoundField(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_UniqueName(BSTR* UniqueName/*[out,retval]*/);
  BSTR            __fastcall get_UniqueName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(long* Width/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(long Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DefaultMember(Owc10_xp::PivotMember** DefaultMember/*[out,retval]*/);
  Owc10_xp::PivotMember* __fastcall get_DefaultMember(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Member(Owc10_xp::PivotMember** Member/*[out,retval]*/);
  Owc10_xp::PivotMember* __fastcall get_Member(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllMember(Owc10_xp::PivotMember** AllMember/*[out,retval]*/);
  Owc10_xp::PivotMember* __fastcall get_AllMember(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CompareOrderedMembersBy(Owc10_xp::PivotMembersCompareByEnum* CompareOrderedMembersBy/*[out,retval]*/);
  Owc10_xp::PivotMembersCompareByEnum __fastcall get_CompareOrderedMembersBy(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CompareOrderedMembersBy(Owc10_xp::PivotMembersCompareByEnum CompareOrderedMembersBy/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_View(Owc10_xp::PivotView** View/*[out,retval]*/);
  Owc10_xp::PivotView* __fastcall get_View(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CreateFilterUpdate(Owc10_xp::PivotFilterUpdate** FilterUpdate/*[out,retval]*/);
  Owc10_xp::PivotFilterUpdate* __fastcall get_CreateFilterUpdate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllowMultiFilter(VARIANT_BOOL* Allow/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllowMultiFilter(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AllowMultiFilter(VARIANT_BOOL Allow/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FilterCaption(BSTR* FilterCaption/*[out,retval]*/);
  BSTR            __fastcall get_FilterCaption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllIncludeExclude(Owc10_xp::PivotFieldSetAllIncludeExcludeEnum* AllIncludeExclude/*[out,retval]*/);
  Owc10_xp::PivotFieldSetAllIncludeExcludeEnum __fastcall get_AllIncludeExclude(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AllIncludeExclude(Owc10_xp::PivotFieldSetAllIncludeExcludeEnum AllIncludeExclude/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddCustomGroupField(BSTR Name/*[in,def,opt]*/, 
                                                            BSTR Caption/*[in,def,opt]*/, 
                                                            VARIANT Before/*[in,def,opt]*/, 
                                                            Owc10_xp::PivotField** Field/*[out,retval]*/);
  Owc10_xp::PivotField* __fastcall AddCustomGroupField(BSTR Name/*[in,def,opt]*/, 
                                                       BSTR Caption/*[in,def,opt]*/, 
                                                       VARIANT Before/*[in,def,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DeleteField(VARIANT Field/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CompareMemberCaptionsBy(Owc10_xp::PivotMembersCompareByEnum* CompareMemberCaptionsBy/*[out,retval]*/);
  Owc10_xp::PivotMembersCompareByEnum __fastcall get_CompareMemberCaptionsBy(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CompareMemberCaptionsBy(Owc10_xp::PivotMembersCompareByEnum CompareMemberCaptionsBy/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayInFieldList(VARIANT_BOOL* DisplayInFieldList/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayInFieldList(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayInFieldList(VARIANT_BOOL DisplayInFieldList/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AlwaysIncludeInCube(VARIANT_BOOL* AlwaysInclude/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AlwaysIncludeInCube(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AlwaysIncludeInCube(VARIANT_BOOL AlwaysInclude/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FindMember(VARIANT NameOrPath/*[in]*/, 
                                                       Owc10_xp::PivotMemberFindFormatEnum Format/*[in,def,opt]*/
                                                       , 
                                                       Owc10_xp::PivotMember** Member/*[out,retval]*/);
  Owc10_xp::PivotMember* __fastcall get_FindMember(VARIANT NameOrPath/*[in]*/, 
                                                   Owc10_xp::PivotMemberFindFormatEnum Format/*[in,def,opt]*/);

  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Caption = {read = get_Caption};
  __property   Owc10_xp::PivotFields* Fields = {read = get_Fields};
  __property   Owc10_xp::PivotMembers* Members = {read = get_Members};
  __property   Owc10_xp::PivotFieldSetOrientationEnum Orientation = {read = get_Orientation};
  __property   Owc10_xp::PivotFieldSetTypeEnum Type = {read = get_Type};
  __property   Owc10_xp::PivotField* BoundField = {read = get_BoundField};
  __property   BSTR            UniqueName = {read = get_UniqueName};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   Owc10_xp::PivotMember* DefaultMember = {read = get_DefaultMember};
  __property   Owc10_xp::PivotMember* Member = {read = get_Member};
  __property   Owc10_xp::PivotMember* AllMember = {read = get_AllMember};
  __property   Owc10_xp::PivotMembersCompareByEnum CompareOrderedMembersBy = {read = get_CompareOrderedMembersBy, write = set_CompareOrderedMembersBy};
  __property   Owc10_xp::PivotView* View = {read = get_View};
  __property   Owc10_xp::PivotFilterUpdate* CreateFilterUpdate = {read = get_CreateFilterUpdate};
  __property   VARIANT_BOOL    AllowMultiFilter = {read = get_AllowMultiFilter, write = set_AllowMultiFilter};
  __property   BSTR            FilterCaption = {read = get_FilterCaption};
  __property   Owc10_xp::PivotFieldSetAllIncludeExcludeEnum AllIncludeExclude = {read = get_AllIncludeExclude, write = set_AllIncludeExclude};
  __property   Owc10_xp::PivotMembersCompareByEnum CompareMemberCaptionsBy = {read = get_CompareMemberCaptionsBy, write = set_CompareMemberCaptionsBy};
  __property   VARIANT_BOOL    DisplayInFieldList = {read = get_DisplayInFieldList, write = set_DisplayInFieldList};
  __property   VARIANT_BOOL    AlwaysIncludeInCube = {read = get_AlwaysIncludeInCube, write = set_AlwaysIncludeInCube};
};
typedef PivotFieldSetDispT<PivotFieldSet> PivotFieldSetDisp;

typedef TComInterface<PivotFields>  TCOMPivotFields;

// *********************************************************************//
// DispIntf:  PivotFields
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B2A-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class PivotFieldsDispT : public TAutoDriver<PivotFields>
{
public:
  PivotFieldsDispT(){}

  PivotFieldsDispT(PivotFields *pintf)
  {
    TAutoDriver<PivotFields>::Bind(pintf, false);
  }

  PivotFieldsDispT(PivotFieldsPtr pintf)
  {
    TAutoDriver<PivotFields>::Bind(pintf, true);
  }

  PivotFieldsDispT& operator=(PivotFields *pintf)
  {
    TAutoDriver<PivotFields>::Bind(pintf, false);
    return *this;
  }

  PivotFieldsDispT& operator=(PivotFieldsPtr pintf)
  {
    TAutoDriver<PivotFields>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT Index/*[in]*/, 
                                                 Owc10_xp::PivotField** Field/*[out,retval]*/);
  Owc10_xp::PivotField* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef PivotFieldsDispT<PivotFields> PivotFieldsDisp;

typedef TComInterface<PivotField>  TCOMPivotField;

// *********************************************************************//
// DispIntf:  PivotField
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B2C-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class PivotFieldDispT : public TAutoDriver<PivotField>
{
public:
  PivotFieldDispT(){}

  PivotFieldDispT(PivotField *pintf)
  {
    TAutoDriver<PivotField>::Bind(pintf, false);
  }

  PivotFieldDispT(PivotFieldPtr pintf)
  {
    TAutoDriver<PivotField>::Bind(pintf, true);
  }

  PivotFieldDispT& operator=(PivotField *pintf)
  {
    TAutoDriver<PivotField>::Bind(pintf, false);
    return *this;
  }

  PivotFieldDispT& operator=(PivotFieldPtr pintf)
  {
    TAutoDriver<PivotField>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* Caption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Caption(BSTR Caption/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BaseName(BSTR* BaseName/*[out,retval]*/);
  BSTR            __fastcall get_BaseName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DataType(Adodb_xp::DataTypeEnum* Type/*[out,retval]*/);
  Adodb_xp::DataTypeEnum __fastcall get_DataType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DetailWidth(long* Width/*[out,retval]*/);
  long            __fastcall get_DetailWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DetailWidth(long Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupedWidth(long* Width/*[out,retval]*/);
  long            __fastcall get_GroupedWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GroupedWidth(long Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Subtotals(long Subtotals/*[in]*/, 
                                                      VARIANT_BOOL* Display/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Subtotals(long Subtotals/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Subtotals(long Subtotals/*[in]*/, 
                                                      VARIANT_BOOL Display/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DetailFont(Owc10_xp::PivotFont** Font/*[out,retval]*/);
  Owc10_xp::PivotFont* __fastcall get_DetailFont(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DetailForeColor(VARIANT* Color/*[out,retval]*/);
  VARIANT         __fastcall get_DetailForeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DetailForeColor(VARIANT Color/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DetailBackColor(VARIANT* Color/*[out,retval]*/);
  VARIANT         __fastcall get_DetailBackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DetailBackColor(VARIANT Color/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DetailHAlignment(Owc10_xp::PivotHAlignmentEnum* HAlignment/*[out,retval]*/);
  Owc10_xp::PivotHAlignmentEnum __fastcall get_DetailHAlignment(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DetailHAlignment(Owc10_xp::PivotHAlignmentEnum HAlignment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SubtotalFont(Owc10_xp::PivotFont** Font/*[out,retval]*/);
  Owc10_xp::PivotFont* __fastcall get_SubtotalFont(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SubtotalForeColor(VARIANT* Color/*[out,retval]*/);
  VARIANT         __fastcall get_SubtotalForeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SubtotalForeColor(VARIANT Color/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SubtotalBackColor(VARIANT* Color/*[out,retval]*/);
  VARIANT         __fastcall get_SubtotalBackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SubtotalBackColor(VARIANT Color/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupOn(Owc10_xp::PivotFieldGroupOnEnum* GroupOn/*[out,retval]*/);
  Owc10_xp::PivotFieldGroupOnEnum __fastcall get_GroupOn(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GroupOn(Owc10_xp::PivotFieldGroupOnEnum GroupOn/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupInterval(double* GroupInterval/*[out,retval]*/);
  double          __fastcall get_GroupInterval(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GroupInterval(double GroupInterval/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Expression(BSTR* Expression/*[out,retval]*/);
  BSTR            __fastcall get_Expression(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Expression(BSTR Expression/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NumberFormat(BSTR* NumberFormat/*[out,retval]*/);
  BSTR            __fastcall get_NumberFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_NumberFormat(BSTR NumberFormat/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DataField(BSTR* DataField/*[out,retval]*/);
  BSTR            __fastcall get_DataField(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsIncluded(VARIANT_BOOL* IsIncluded/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsIncluded(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IsIncluded(VARIANT_BOOL IsIncluded/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SortDirection(Owc10_xp::PivotFieldSortDirectionEnum* SortDirection/*[out,retval]*/);
  Owc10_xp::PivotFieldSortDirectionEnum __fastcall get_SortDirection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SortDirection(Owc10_xp::PivotFieldSortDirectionEnum SortDirection/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OrderedMembers(VARIANT OrderedMembers/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OrderedMembers(VARIANT* OrderedMembers/*[out,retval]*/);
  VARIANT         __fastcall get_OrderedMembers(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MemberCaptions(VARIANT MemberCaptions/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MemberCaptions(VARIANT* MemberCaptions/*[out,retval]*/);
  VARIANT         __fastcall get_MemberCaptions(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Owc10_xp::PivotFieldTypeEnum* Type/*[out,retval]*/);
  Owc10_xp::PivotFieldTypeEnum __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FilterFunction(Owc10_xp::PivotFieldFilterFunctionEnum* FilterFunction/*[out,retval]*/);
  Owc10_xp::PivotFieldFilterFunctionEnum __fastcall get_FilterFunction(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FilterFunction(Owc10_xp::PivotFieldFilterFunctionEnum FilterFunction/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DetailAutoFit(VARIANT_BOOL* AutoFit/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DetailAutoFit(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DetailAutoFit(VARIANT_BOOL AutoFit/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupedAutoFit(VARIANT_BOOL* AutoFit/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_GroupedAutoFit(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GroupedAutoFit(VARIANT_BOOL AutoFit/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FieldSet(Owc10_xp::PivotFieldSet** FieldSet/*[out,retval]*/);
  Owc10_xp::PivotFieldSet* __fastcall get_FieldSet(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Expanded(VARIANT_BOOL* Expanded/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Expanded(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Expanded(VARIANT_BOOL Expanded/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SortOn(Owc10_xp::PivotTotal** Total/*[out,retval]*/);
  Owc10_xp::PivotTotal* __fastcall get_SortOn(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_SortOn(Owc10_xp::PivotTotal* Total/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SortOnScope(VARIANT* Scope/*[out,retval]*/);
  VARIANT         __fastcall get_SortOnScope(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SortOnScope(VARIANT Scope/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsHyperlink(VARIANT_BOOL* IsHyperlink/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsHyperlink(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IsHyperlink(VARIANT_BOOL IsHyperlink/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_UniqueName(BSTR* UniqueName/*[out,retval]*/);
  BSTR            __fastcall get_UniqueName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupStart(VARIANT* GroupStart/*[out,retval]*/);
  VARIANT         __fastcall get_GroupStart(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GroupStart(VARIANT GroupStart/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupEnd(VARIANT* GroupEnd/*[out,retval]*/);
  VARIANT         __fastcall get_GroupEnd(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GroupEnd(VARIANT GroupEnd/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IncludedMembers(VARIANT* Members/*[out,retval]*/);
  VARIANT         __fastcall get_IncludedMembers(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IncludedMembers(VARIANT Members/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ExcludedMembers(VARIANT* Members/*[out,retval]*/);
  VARIANT         __fastcall get_ExcludedMembers(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ExcludedMembers(VARIANT Members/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MemberProperties(Owc10_xp::PivotMemberProperties** MemberProperties/*[out,retval]*/);
  Owc10_xp::PivotMemberProperties* __fastcall get_MemberProperties(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MemberPropertiesOrder(VARIANT* MemberPropertiesOrder/*[out,retval]*/);
  VARIANT         __fastcall get_MemberPropertiesOrder(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MemberPropertiesOrder(VARIANT MemberPropertiesOrder/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PropertyCaptionWidth(long* Width/*[out,retval]*/);
  long            __fastcall get_PropertyCaptionWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PropertyCaptionWidth(long Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupedHeight(long* Height/*[out,retval]*/);
  long            __fastcall get_GroupedHeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GroupedHeight(long Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PropertyValueWidth(long* Width/*[out,retval]*/);
  long            __fastcall get_PropertyValueWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PropertyValueWidth(long Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PropertyHeight(long* Height/*[out,retval]*/);
  long            __fastcall get_PropertyHeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PropertyHeight(long Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FilterContext(Owc10_xp::PivotField** Field/*[out,retval]*/);
  Owc10_xp::PivotField* __fastcall get_FilterContext(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_FilterContext(Owc10_xp::PivotField* Field/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FilterOn(Owc10_xp::PivotTotal** Total/*[out,retval]*/);
  Owc10_xp::PivotTotal* __fastcall get_FilterOn(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_FilterOn(Owc10_xp::PivotTotal* Total/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FilterOnScope(VARIANT* Scope/*[out,retval]*/);
  VARIANT         __fastcall get_FilterOnScope(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FilterOnScope(VARIANT Scope/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FilterFunctionValue(VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall get_FilterFunctionValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FilterFunctionValue(VARIANT Value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupedFont(Owc10_xp::PivotFont** Font/*[out,retval]*/);
  Owc10_xp::PivotFont* __fastcall get_GroupedFont(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupedForeColor(VARIANT* Color/*[out,retval]*/);
  VARIANT         __fastcall get_GroupedForeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GroupedForeColor(VARIANT Color/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupedBackColor(VARIANT* Color/*[out,retval]*/);
  VARIANT         __fastcall get_GroupedBackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GroupedBackColor(VARIANT Color/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupedHAlignment(Owc10_xp::PivotHAlignmentEnum* HAlignment/*[out,retval]*/);
  Owc10_xp::PivotHAlignmentEnum __fastcall get_GroupedHAlignment(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GroupedHAlignment(Owc10_xp::PivotHAlignmentEnum HAlignment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddCustomGroupMember(VARIANT Parent/*[in]*/, 
                                                             VARIANT varChildMembers/*[in]*/, 
                                                             BSTR bstrCaption/*[in,def,opt]*/, 
                                                             Owc10_xp::PivotMember** ppCustomGroupMember/*[out,retval]*/);
  Owc10_xp::PivotMember* __fastcall AddCustomGroupMember(VARIANT Parent/*[in]*/, 
                                                         VARIANT varChildMembers/*[in]*/, 
                                                         BSTR bstrCaption/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DeleteCustomGroupMember(VARIANT CustomGroupMember/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CustomGroupMembers(Owc10_xp::PivotMembers** Members/*[out,retval]*/);
  Owc10_xp::PivotMembers* __fastcall get_CustomGroupMembers(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DefaultValue(VARIANT* DefaultValue/*[out,retval]*/);
  VARIANT         __fastcall get_DefaultValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DefaultValue(VARIANT DefaultValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SubtotalLabelFont(Owc10_xp::PivotFont** Font/*[out,retval]*/);
  Owc10_xp::PivotFont* __fastcall get_SubtotalLabelFont(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SubtotalLabelForeColor(VARIANT* Color/*[out,retval]*/);
  VARIANT         __fastcall get_SubtotalLabelForeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SubtotalLabelForeColor(VARIANT Color/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SubtotalLabelBackColor(VARIANT* Color/*[out,retval]*/);
  VARIANT         __fastcall get_SubtotalLabelBackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SubtotalLabelBackColor(VARIANT Color/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SubtotalLabelHAlignment(Owc10_xp::PivotHAlignmentEnum* HAlignment/*[out,retval]*/);
  Owc10_xp::PivotHAlignmentEnum __fastcall get_SubtotalLabelHAlignment(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SubtotalLabelHAlignment(Owc10_xp::PivotHAlignmentEnum HAlignment/*[in]*/);

  __property   BSTR            Caption = {read = get_Caption};
  __property   BSTR            BaseName = {read = get_BaseName};
  __property   Adodb_xp::DataTypeEnum DataType = {read = get_DataType};
  __property   BSTR            Name = {read = get_Name};
  __property   long            DetailWidth = {read = get_DetailWidth, write = set_DetailWidth};
  __property   long            GroupedWidth = {read = get_GroupedWidth, write = set_GroupedWidth};
  __property   Owc10_xp::PivotFont* DetailFont = {read = get_DetailFont};
  __property   Owc10_xp::PivotHAlignmentEnum DetailHAlignment = {read = get_DetailHAlignment, write = set_DetailHAlignment};
  __property   Owc10_xp::PivotFont* SubtotalFont = {read = get_SubtotalFont};
  __property   Owc10_xp::PivotFieldGroupOnEnum GroupOn = {read = get_GroupOn, write = set_GroupOn};
  __property   double          GroupInterval = {read = get_GroupInterval, write = set_GroupInterval};
  __property   BSTR            Expression = {read = get_Expression};
  __property   BSTR            NumberFormat = {read = get_NumberFormat};
  __property   BSTR            DataField = {read = get_DataField};
  __property   VARIANT_BOOL    IsIncluded = {read = get_IsIncluded, write = set_IsIncluded};
  __property   Owc10_xp::PivotFieldSortDirectionEnum SortDirection = {read = get_SortDirection, write = set_SortDirection};
  __property   Owc10_xp::PivotFieldTypeEnum Type = {read = get_Type};
  __property   Owc10_xp::PivotFieldFilterFunctionEnum FilterFunction = {read = get_FilterFunction, write = set_FilterFunction};
  __property   VARIANT_BOOL    DetailAutoFit = {read = get_DetailAutoFit, write = set_DetailAutoFit};
  __property   VARIANT_BOOL    GroupedAutoFit = {read = get_GroupedAutoFit, write = set_GroupedAutoFit};
  __property   Owc10_xp::PivotFieldSet* FieldSet = {read = get_FieldSet};
  __property   VARIANT_BOOL    Expanded = {read = get_Expanded, write = set_Expanded};
  __property   Owc10_xp::PivotTotal* SortOn = {read = get_SortOn, write = _set_SortOn};
  __property   VARIANT_BOOL    IsHyperlink = {read = get_IsHyperlink, write = set_IsHyperlink};
  __property   BSTR            UniqueName = {read = get_UniqueName};
  __property   Owc10_xp::PivotMemberProperties* MemberProperties = {read = get_MemberProperties};
  __property   long            PropertyCaptionWidth = {read = get_PropertyCaptionWidth, write = set_PropertyCaptionWidth};
  __property   long            GroupedHeight = {read = get_GroupedHeight, write = set_GroupedHeight};
  __property   long            PropertyValueWidth = {read = get_PropertyValueWidth, write = set_PropertyValueWidth};
  __property   long            PropertyHeight = {read = get_PropertyHeight, write = set_PropertyHeight};
  __property   Owc10_xp::PivotField* FilterContext = {read = get_FilterContext, write = _set_FilterContext};
  __property   Owc10_xp::PivotTotal* FilterOn = {read = get_FilterOn, write = _set_FilterOn};
  __property   Owc10_xp::PivotFont* GroupedFont = {read = get_GroupedFont};
  __property   Owc10_xp::PivotHAlignmentEnum GroupedHAlignment = {read = get_GroupedHAlignment, write = set_GroupedHAlignment};
  __property   Owc10_xp::PivotMembers* CustomGroupMembers = {read = get_CustomGroupMembers};
  __property   Owc10_xp::PivotFont* SubtotalLabelFont = {read = get_SubtotalLabelFont};
  __property   Owc10_xp::PivotHAlignmentEnum SubtotalLabelHAlignment = {read = get_SubtotalLabelHAlignment, write = set_SubtotalLabelHAlignment};
};
typedef PivotFieldDispT<PivotField> PivotFieldDisp;

typedef TComInterface<PivotFont>  TCOMPivotFont;

// *********************************************************************//
// DispIntf:  PivotFont
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B01-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class PivotFontDispT : public TAutoDriver<PivotFont>
{
public:
  PivotFontDispT(){}

  PivotFontDispT(PivotFont *pintf)
  {
    TAutoDriver<PivotFont>::Bind(pintf, false);
  }

  PivotFontDispT(PivotFontPtr pintf)
  {
    TAutoDriver<PivotFont>::Bind(pintf, true);
  }

  PivotFontDispT& operator=(PivotFont *pintf)
  {
    TAutoDriver<PivotFont>::Bind(pintf, false);
    return *this;
  }

  PivotFontDispT& operator=(PivotFontPtr pintf)
  {
    TAutoDriver<PivotFont>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Size(long* Size/*[out,retval]*/);
  long            __fastcall get_Size(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Size(long Size/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Bold(VARIANT_BOOL* Bold/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Bold(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Bold(VARIANT_BOOL Bold/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Italic(VARIANT_BOOL* Italic/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Italic(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Italic(VARIANT_BOOL Italic/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Underline(Owc10_xp::UnderlineStyleEnum* Underline/*[out,retval]*/);
  Owc10_xp::UnderlineStyleEnum __fastcall get_Underline(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Underline(Owc10_xp::UnderlineStyleEnum Underline/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Color(VARIANT* Color/*[out,retval]*/);
  VARIANT         __fastcall get_Color(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Color(VARIANT Color/*[in]*/);

  __property   BSTR            Name = {read = get_Name};
  __property   long            Size = {read = get_Size, write = set_Size};
  __property   VARIANT_BOOL    Bold = {read = get_Bold, write = set_Bold};
  __property   VARIANT_BOOL    Italic = {read = get_Italic, write = set_Italic};
  __property   Owc10_xp::UnderlineStyleEnum Underline = {read = get_Underline, write = set_Underline};
};
typedef PivotFontDispT<PivotFont> PivotFontDisp;

typedef TComInterface<PivotTotal>  TCOMPivotTotal;

// *********************************************************************//
// DispIntf:  PivotTotal
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B2F-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class PivotTotalDispT : public TAutoDriver<PivotTotal>
{
public:
  PivotTotalDispT(){}

  PivotTotalDispT(PivotTotal *pintf)
  {
    TAutoDriver<PivotTotal>::Bind(pintf, false);
  }

  PivotTotalDispT(PivotTotalPtr pintf)
  {
    TAutoDriver<PivotTotal>::Bind(pintf, true);
  }

  PivotTotalDispT& operator=(PivotTotal *pintf)
  {
    TAutoDriver<PivotTotal>::Bind(pintf, false);
    return *this;
  }

  PivotTotalDispT& operator=(PivotTotalPtr pintf)
  {
    TAutoDriver<PivotTotal>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Field(Owc10_xp::PivotField** Field/*[out,retval]*/);
  Owc10_xp::PivotField* __fastcall get_Field(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Function(Owc10_xp::PivotTotalFunctionEnum* Function/*[out,retval]*/);
  Owc10_xp::PivotTotalFunctionEnum __fastcall get_Function(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Function(Owc10_xp::PivotTotalFunctionEnum Function/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* Caption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Caption(BSTR Caption/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(long* Width/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(long Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NumberFormat(BSTR* NumberFormat/*[out,retval]*/);
  BSTR            __fastcall get_NumberFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_NumberFormat(BSTR NumberFormat/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HAlignment(Owc10_xp::PivotHAlignmentEnum* HAlignment/*[out,retval]*/);
  Owc10_xp::PivotHAlignmentEnum __fastcall get_HAlignment(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HAlignment(Owc10_xp::PivotHAlignmentEnum HAlignment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CaptionHAlignment(Owc10_xp::PivotHAlignmentEnum* CaptionHAlignment/*[out,retval]*/);
  Owc10_xp::PivotHAlignmentEnum __fastcall get_CaptionHAlignment(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CaptionHAlignment(Owc10_xp::PivotHAlignmentEnum CaptionHAlignment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Owc10_xp::PivotTotalTypeEnum* Type/*[out,retval]*/);
  Owc10_xp::PivotTotalTypeEnum __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoFit(VARIANT_BOOL* AutoFit/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoFit(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoFit(VARIANT_BOOL AutoFit/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_UniqueName(BSTR* UniqueName/*[out,retval]*/);
  BSTR            __fastcall get_UniqueName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_View(Owc10_xp::PivotView** View/*[out,retval]*/);
  Owc10_xp::PivotView* __fastcall get_View(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Expression(BSTR* Expression/*[out,retval]*/);
  BSTR            __fastcall get_Expression(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Expression(BSTR Expression/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SolveOrder(long* SolveOrder/*[out,retval]*/);
  long            __fastcall get_SolveOrder(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SolveOrder(long SolveOrder/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowAs(Owc10_xp::PivotShowAsEnum* ShowAs/*[out,retval]*/);
  Owc10_xp::PivotShowAsEnum __fastcall get_ShowAs(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowAs(Owc10_xp::PivotShowAsEnum ShowAs/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayInFieldList(VARIANT_BOOL* DisplayInFieldList/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayInFieldList(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayInFieldList(VARIANT_BOOL DisplayInFieldList/*[in]*/);

  __property   Owc10_xp::PivotField* Field = {read = get_Field};
  __property   Owc10_xp::PivotTotalFunctionEnum Function = {read = get_Function, write = set_Function};
  __property   BSTR            Caption = {read = get_Caption};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            NumberFormat = {read = get_NumberFormat};
  __property   Owc10_xp::PivotHAlignmentEnum HAlignment = {read = get_HAlignment, write = set_HAlignment};
  __property   Owc10_xp::PivotHAlignmentEnum CaptionHAlignment = {read = get_CaptionHAlignment, write = set_CaptionHAlignment};
  __property   Owc10_xp::PivotTotalTypeEnum Type = {read = get_Type};
  __property   VARIANT_BOOL    AutoFit = {read = get_AutoFit, write = set_AutoFit};
  __property   BSTR            UniqueName = {read = get_UniqueName};
  __property   Owc10_xp::PivotView* View = {read = get_View};
  __property   BSTR            Expression = {read = get_Expression};
  __property   long            SolveOrder = {read = get_SolveOrder, write = set_SolveOrder};
  __property   Owc10_xp::PivotShowAsEnum ShowAs = {read = get_ShowAs, write = set_ShowAs};
  __property   VARIANT_BOOL    DisplayInFieldList = {read = get_DisplayInFieldList, write = set_DisplayInFieldList};
};
typedef PivotTotalDispT<PivotTotal> PivotTotalDisp;

typedef TComInterface<PivotMemberProperties>  TCOMPivotMemberProperties;

// *********************************************************************//
// DispIntf:  PivotMemberProperties
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0F57F292-726F-4817-A78B-52D452498519}
// *********************************************************************//
template<class T>
class PivotMemberPropertiesDispT : public TAutoDriver<PivotMemberProperties>
{
public:
  PivotMemberPropertiesDispT(){}

  PivotMemberPropertiesDispT(PivotMemberProperties *pintf)
  {
    TAutoDriver<PivotMemberProperties>::Bind(pintf, false);
  }

  PivotMemberPropertiesDispT(PivotMemberPropertiesPtr pintf)
  {
    TAutoDriver<PivotMemberProperties>::Bind(pintf, true);
  }

  PivotMemberPropertiesDispT& operator=(PivotMemberProperties *pintf)
  {
    TAutoDriver<PivotMemberProperties>::Bind(pintf, false);
    return *this;
  }

  PivotMemberPropertiesDispT& operator=(PivotMemberPropertiesPtr pintf)
  {
    TAutoDriver<PivotMemberProperties>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT varIndex/*[in]*/, 
                                                 Owc10_xp::PivotMemberProperty** Item/*[out,retval]*/);
  Owc10_xp::PivotMemberProperty* __fastcall get_Item(VARIANT varIndex/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef PivotMemberPropertiesDispT<PivotMemberProperties> PivotMemberPropertiesDisp;

typedef TComInterface<PivotMemberProperty>  TCOMPivotMemberProperty;

// *********************************************************************//
// DispIntf:  PivotMemberProperty
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6ADF4A9E-5E7D-47EE-A3B8-CE06023D6A14}
// *********************************************************************//
template<class T>
class PivotMemberPropertyDispT : public TAutoDriver<PivotMemberProperty>
{
public:
  PivotMemberPropertyDispT(){}

  PivotMemberPropertyDispT(PivotMemberProperty *pintf)
  {
    TAutoDriver<PivotMemberProperty>::Bind(pintf, false);
  }

  PivotMemberPropertyDispT(PivotMemberPropertyPtr pintf)
  {
    TAutoDriver<PivotMemberProperty>::Bind(pintf, true);
  }

  PivotMemberPropertyDispT& operator=(PivotMemberProperty *pintf)
  {
    TAutoDriver<PivotMemberProperty>::Bind(pintf, false);
    return *this;
  }

  PivotMemberPropertyDispT& operator=(PivotMemberPropertyPtr pintf)
  {
    TAutoDriver<PivotMemberProperty>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Caption(BSTR Caption/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* Caption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IsIncluded(VARIANT_BOOL IsIncluded/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsIncluded(VARIANT_BOOL* IsIncluded/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsIncluded(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayIn(Owc10_xp::PivotMemberPropertyDisplayEnum DisplayIn/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayIn(Owc10_xp::PivotMemberPropertyDisplayEnum* DisplayIn/*[out,retval]*/);
  Owc10_xp::PivotMemberPropertyDisplayEnum __fastcall get_DisplayIn(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NumberFormat(BSTR* NumberFormat/*[out,retval]*/);
  BSTR            __fastcall get_NumberFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_NumberFormat(BSTR NumberFormat/*[in]*/);

  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   VARIANT_BOOL    IsIncluded = {read = get_IsIncluded, write = set_IsIncluded};
  __property   Owc10_xp::PivotMemberPropertyDisplayEnum DisplayIn = {read = get_DisplayIn, write = set_DisplayIn};
  __property   BSTR            NumberFormat = {read = get_NumberFormat};
};
typedef PivotMemberPropertyDispT<PivotMemberProperty> PivotMemberPropertyDisp;

typedef TComInterface<PivotMember>  TCOMPivotMember;

// *********************************************************************//
// DispIntf:  PivotMember
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B33-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class PivotMemberDispT : public TAutoDriver<PivotMember>
{
public:
  PivotMemberDispT(){}

  PivotMemberDispT(PivotMember *pintf)
  {
    TAutoDriver<PivotMember>::Bind(pintf, false);
  }

  PivotMemberDispT(PivotMemberPtr pintf)
  {
    TAutoDriver<PivotMember>::Bind(pintf, true);
  }

  PivotMemberDispT& operator=(PivotMember *pintf)
  {
    TAutoDriver<PivotMember>::Bind(pintf, false);
    return *this;
  }

  PivotMemberDispT& operator=(PivotMemberPtr pintf)
  {
    TAutoDriver<PivotMember>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_View(Owc10_xp::PivotView** View/*[out,retval]*/);
  Owc10_xp::PivotView* __fastcall get_View(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ChildMembers(Owc10_xp::PivotMembers** Members/*[out,retval]*/);
  Owc10_xp::PivotMembers* __fastcall get_ChildMembers(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ParentMember(Owc10_xp::PivotMember** Member/*[out,retval]*/);
  Owc10_xp::PivotMember* __fastcall get_ParentMember(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FindMember(BSTR Path/*[in]*/, 
                                                       Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/
                                                       , 
                                                       Owc10_xp::PivotMember** Member/*[out,retval]*/);
  Owc10_xp::PivotMember* __fastcall get_FindMember(BSTR Path/*[in]*/, 
                                                   Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* Caption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_UniqueName(BSTR* UniqueName/*[out,retval]*/);
  BSTR            __fastcall get_UniqueName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Field(Owc10_xp::PivotField** Field/*[out,retval]*/);
  Owc10_xp::PivotField* __fastcall get_Field(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Path(Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/
                                                 , BSTR* Path/*[out,retval]*/);
  BSTR            __fastcall get_Path(Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TimeValue(VARIANT* TimeValue/*[out,retval]*/);
  VARIANT         __fastcall get_TimeValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsValid(VARIANT_BOOL* Valid/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsValid(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CustomGroupType(Owc10_xp::PivotMemberCustomGroupTypeEnum* Type/*[out,retval]*/);
  Owc10_xp::PivotMemberCustomGroupTypeEnum __fastcall get_CustomGroupType(void);

  __property   Owc10_xp::PivotView* View = {read = get_View};
  __property   Owc10_xp::PivotMembers* ChildMembers = {read = get_ChildMembers};
  __property   Owc10_xp::PivotMember* ParentMember = {read = get_ParentMember};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Caption = {read = get_Caption};
  __property   BSTR            UniqueName = {read = get_UniqueName};
  __property   Owc10_xp::PivotField* Field = {read = get_Field};
  __property   VARIANT_BOOL    IsValid = {read = get_IsValid};
  __property   Owc10_xp::PivotMemberCustomGroupTypeEnum CustomGroupType = {read = get_CustomGroupType};
};
typedef PivotMemberDispT<PivotMember> PivotMemberDisp;

typedef TComInterface<PivotMembers>  TCOMPivotMembers;

// *********************************************************************//
// DispIntf:  PivotMembers
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B32-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class PivotMembersDispT : public TAutoDriver<PivotMembers>
{
public:
  PivotMembersDispT(){}

  PivotMembersDispT(PivotMembers *pintf)
  {
    TAutoDriver<PivotMembers>::Bind(pintf, false);
  }

  PivotMembersDispT(PivotMembersPtr pintf)
  {
    TAutoDriver<PivotMembers>::Bind(pintf, true);
  }

  PivotMembersDispT& operator=(PivotMembers *pintf)
  {
    TAutoDriver<PivotMembers>::Bind(pintf, false);
    return *this;
  }

  PivotMembersDispT& operator=(PivotMembersPtr pintf)
  {
    TAutoDriver<PivotMembers>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT Index/*[in]*/, 
                                                 Owc10_xp::PivotMember** Member/*[out,retval]*/);
  Owc10_xp::PivotMember* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef PivotMembersDispT<PivotMembers> PivotMembersDisp;

typedef TComInterface<PivotFilterUpdate>  TCOMPivotFilterUpdate;

// *********************************************************************//
// DispIntf:  PivotFilterUpdate
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A5E83EE4-5A92-11D3-BF58-00C04F61319A}
// *********************************************************************//
template<class T>
class PivotFilterUpdateDispT : public TAutoDriver<PivotFilterUpdate>
{
public:
  PivotFilterUpdateDispT(){}

  PivotFilterUpdateDispT(PivotFilterUpdate *pintf)
  {
    TAutoDriver<PivotFilterUpdate>::Bind(pintf, false);
  }

  PivotFilterUpdateDispT(PivotFilterUpdatePtr pintf)
  {
    TAutoDriver<PivotFilterUpdate>::Bind(pintf, true);
  }

  PivotFilterUpdateDispT& operator=(PivotFilterUpdate *pintf)
  {
    TAutoDriver<PivotFilterUpdate>::Bind(pintf, false);
    return *this;
  }

  PivotFilterUpdateDispT& operator=(PivotFilterUpdatePtr pintf)
  {
    TAutoDriver<PivotFilterUpdate>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_StateOf(Owc10_xp::PivotMember* Member/*[in]*/, 
                                                    Owc10_xp::PivotFilterUpdateMemberStateEnum* MemberState/*[out,retval]*/);
  Owc10_xp::PivotFilterUpdateMemberStateEnum __fastcall get_StateOf(Owc10_xp::PivotMember* Member/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Click(Owc10_xp::PivotMember* Member/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ClickFromTo(Owc10_xp::PivotMember* Member/*[in]*/, 
                                                    Owc10_xp::PivotFilterUpdateMemberStateEnum OldMemberState/*[in]*/
                                                    , 
                                                    Owc10_xp::PivotFilterUpdateMemberStateEnum NewMemberState/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsDirty(VARIANT_BOOL* IsDirty/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsDirty(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Apply();

  __property   VARIANT_BOOL    IsDirty = {read = get_IsDirty};
};
typedef PivotFilterUpdateDispT<PivotFilterUpdate> PivotFilterUpdateDisp;

typedef TComInterface<PivotAxis>  TCOMPivotAxis;

// *********************************************************************//
// DispIntf:  PivotAxis
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B2B-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class PivotAxisDispT : public TAutoDriver<PivotAxis>
{
public:
  PivotAxisDispT(){}

  PivotAxisDispT(PivotAxis *pintf)
  {
    TAutoDriver<PivotAxis>::Bind(pintf, false);
  }

  PivotAxisDispT(PivotAxisPtr pintf)
  {
    TAutoDriver<PivotAxis>::Bind(pintf, true);
  }

  PivotAxisDispT& operator=(PivotAxis *pintf)
  {
    TAutoDriver<PivotAxis>::Bind(pintf, false);
    return *this;
  }

  PivotAxisDispT& operator=(PivotAxisPtr pintf)
  {
    TAutoDriver<PivotAxis>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_View(Owc10_xp::PivotView** View/*[out,retval]*/);
  Owc10_xp::PivotView* __fastcall get_View(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FieldSets(Owc10_xp::PivotFieldSets** FieldSets/*[out,retval]*/);
  Owc10_xp::PivotFieldSets* __fastcall get_FieldSets(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall InsertFieldSet(Owc10_xp::PivotFieldSet* FieldSet/*[in]*/, 
                                                       VARIANT Before/*[in,opt]*/, 
                                                       VARIANT_BOOL Remove/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RemoveFieldSet(VARIANT FieldSet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Label(Owc10_xp::PivotLabel** Label/*[out,retval]*/);
  Owc10_xp::PivotLabel* __fastcall get_Label(void);

  __property   Owc10_xp::PivotView* View = {read = get_View};
  __property   Owc10_xp::PivotFieldSets* FieldSets = {read = get_FieldSets};
  __property   Owc10_xp::PivotLabel* Label = {read = get_Label};
};
typedef PivotAxisDispT<PivotAxis> PivotAxisDisp;

typedef TComInterface<PivotGroupAxis>  TCOMPivotGroupAxis;

// *********************************************************************//
// DispIntf:  PivotGroupAxis
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AA7-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class PivotGroupAxisDispT : public TAutoDriver<PivotGroupAxis>
{
public:
  PivotGroupAxisDispT(){}

  PivotGroupAxisDispT(PivotGroupAxis *pintf)
  {
    TAutoDriver<PivotGroupAxis>::Bind(pintf, false);
  }

  PivotGroupAxisDispT(PivotGroupAxisPtr pintf)
  {
    TAutoDriver<PivotGroupAxis>::Bind(pintf, true);
  }

  PivotGroupAxisDispT& operator=(PivotGroupAxis *pintf)
  {
    TAutoDriver<PivotGroupAxis>::Bind(pintf, false);
    return *this;
  }

  PivotGroupAxisDispT& operator=(PivotGroupAxisPtr pintf)
  {
    TAutoDriver<PivotGroupAxis>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayEmptyMembers(VARIANT_BOOL* DisplayEmptyMembers/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayEmptyMembers(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayEmptyMembers(VARIANT_BOOL DisplayEmptyMembers/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_View(Owc10_xp::PivotView** View/*[out,retval]*/);
  Owc10_xp::PivotView* __fastcall get_View(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FieldSets(Owc10_xp::PivotFieldSets** FieldSets/*[out,retval]*/);
  Owc10_xp::PivotFieldSets* __fastcall get_FieldSets(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall InsertFieldSet(Owc10_xp::PivotFieldSet* FieldSet/*[in]*/, 
                                                       VARIANT Before/*[in,opt]*/, 
                                                       VARIANT_BOOL Remove/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RemoveFieldSet(VARIANT FieldSet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Label(Owc10_xp::PivotLabel** Label/*[out,retval]*/);
  Owc10_xp::PivotLabel* __fastcall get_Label(void);

  __property   VARIANT_BOOL    DisplayEmptyMembers = {read = get_DisplayEmptyMembers, write = set_DisplayEmptyMembers};

  __property   Owc10_xp::PivotView* View = {read = get_View};
  __property   Owc10_xp::PivotFieldSets* FieldSets = {read = get_FieldSets};
  __property   Owc10_xp::PivotLabel* Label = {read = get_Label};
};
typedef PivotGroupAxisDispT<PivotGroupAxis> PivotGroupAxisDisp;

typedef TComInterface<PivotLabel>  TCOMPivotLabel;

// *********************************************************************//
// DispIntf:  PivotLabel
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B2D-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class PivotLabelDispT : public TAutoDriver<PivotLabel>
{
public:
  PivotLabelDispT(){}

  PivotLabelDispT(PivotLabel *pintf)
  {
    TAutoDriver<PivotLabel>::Bind(pintf, false);
  }

  PivotLabelDispT(PivotLabelPtr pintf)
  {
    TAutoDriver<PivotLabel>::Bind(pintf, true);
  }

  PivotLabelDispT& operator=(PivotLabel *pintf)
  {
    TAutoDriver<PivotLabel>::Bind(pintf, false);
    return *this;
  }

  PivotLabelDispT& operator=(PivotLabelPtr pintf)
  {
    TAutoDriver<PivotLabel>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* Caption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Caption(BSTR Caption/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HAlignment(Owc10_xp::PivotHAlignmentEnum* HAlignment/*[out,retval]*/);
  Owc10_xp::PivotHAlignmentEnum __fastcall get_HAlignment(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HAlignment(Owc10_xp::PivotHAlignmentEnum HAlignment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ForeColor(VARIANT* Color/*[out,retval]*/);
  VARIANT         __fastcall get_ForeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ForeColor(VARIANT Color/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackColor(VARIANT* Color/*[out,retval]*/);
  VARIANT         __fastcall get_BackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackColor(VARIANT Color/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(VARIANT_BOOL* Visible/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(VARIANT_BOOL Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Font(Owc10_xp::PivotFont** Font/*[out,retval]*/);
  Owc10_xp::PivotFont* __fastcall get_Font(void);

  __property   BSTR            Caption = {read = get_Caption};
  __property   Owc10_xp::PivotHAlignmentEnum HAlignment = {read = get_HAlignment, write = set_HAlignment};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   Owc10_xp::PivotFont* Font = {read = get_Font};
};
typedef PivotLabelDispT<PivotLabel> PivotLabelDisp;

typedef TComInterface<PivotDataAxis>  TCOMPivotDataAxis;

// *********************************************************************//
// DispIntf:  PivotDataAxis
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B43-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class PivotDataAxisDispT : public TAutoDriver<PivotDataAxis>
{
public:
  PivotDataAxisDispT(){}

  PivotDataAxisDispT(PivotDataAxis *pintf)
  {
    TAutoDriver<PivotDataAxis>::Bind(pintf, false);
  }

  PivotDataAxisDispT(PivotDataAxisPtr pintf)
  {
    TAutoDriver<PivotDataAxis>::Bind(pintf, true);
  }

  PivotDataAxisDispT& operator=(PivotDataAxis *pintf)
  {
    TAutoDriver<PivotDataAxis>::Bind(pintf, false);
    return *this;
  }

  PivotDataAxisDispT& operator=(PivotDataAxisPtr pintf)
  {
    TAutoDriver<PivotDataAxis>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Totals(Owc10_xp::PivotTotals** Totals/*[out,retval]*/);
  Owc10_xp::PivotTotals* __fastcall get_Totals(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall InsertTotal(Owc10_xp::PivotTotal* Total/*[in]*/, 
                                                    VARIANT Before/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RemoveTotal(VARIANT Total/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_View(Owc10_xp::PivotView** View/*[out,retval]*/);
  Owc10_xp::PivotView* __fastcall get_View(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FieldSets(Owc10_xp::PivotFieldSets** FieldSets/*[out,retval]*/);
  Owc10_xp::PivotFieldSets* __fastcall get_FieldSets(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall InsertFieldSet(Owc10_xp::PivotFieldSet* FieldSet/*[in]*/, 
                                                       VARIANT Before/*[in,opt]*/, 
                                                       VARIANT_BOOL Remove/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RemoveFieldSet(VARIANT FieldSet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Label(Owc10_xp::PivotLabel** Label/*[out,retval]*/);
  Owc10_xp::PivotLabel* __fastcall get_Label(void);

  __property   Owc10_xp::PivotTotals* Totals = {read = get_Totals};

  __property   Owc10_xp::PivotView* View = {read = get_View};
  __property   Owc10_xp::PivotFieldSets* FieldSets = {read = get_FieldSets};
  __property   Owc10_xp::PivotLabel* Label = {read = get_Label};
};
typedef PivotDataAxisDispT<PivotDataAxis> PivotDataAxisDisp;

typedef TComInterface<PivotTotals>  TCOMPivotTotals;

// *********************************************************************//
// DispIntf:  PivotTotals
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B2E-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class PivotTotalsDispT : public TAutoDriver<PivotTotals>
{
public:
  PivotTotalsDispT(){}

  PivotTotalsDispT(PivotTotals *pintf)
  {
    TAutoDriver<PivotTotals>::Bind(pintf, false);
  }

  PivotTotalsDispT(PivotTotalsPtr pintf)
  {
    TAutoDriver<PivotTotals>::Bind(pintf, true);
  }

  PivotTotalsDispT& operator=(PivotTotals *pintf)
  {
    TAutoDriver<PivotTotals>::Bind(pintf, false);
    return *this;
  }

  PivotTotalsDispT& operator=(PivotTotalsPtr pintf)
  {
    TAutoDriver<PivotTotals>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT Index/*[in]*/, 
                                                 Owc10_xp::PivotTotal** Total/*[out,retval]*/);
  Owc10_xp::PivotTotal* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef PivotTotalsDispT<PivotTotals> PivotTotalsDisp;

typedef TComInterface<PivotFilterAxis>  TCOMPivotFilterAxis;

// *********************************************************************//
// DispIntf:  PivotFilterAxis
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AFD-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class PivotFilterAxisDispT : public TAutoDriver<PivotFilterAxis>
{
public:
  PivotFilterAxisDispT(){}

  PivotFilterAxisDispT(PivotFilterAxis *pintf)
  {
    TAutoDriver<PivotFilterAxis>::Bind(pintf, false);
  }

  PivotFilterAxisDispT(PivotFilterAxisPtr pintf)
  {
    TAutoDriver<PivotFilterAxis>::Bind(pintf, true);
  }

  PivotFilterAxisDispT& operator=(PivotFilterAxis *pintf)
  {
    TAutoDriver<PivotFilterAxis>::Bind(pintf, false);
    return *this;
  }

  PivotFilterAxisDispT& operator=(PivotFilterAxisPtr pintf)
  {
    TAutoDriver<PivotFilterAxis>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_View(Owc10_xp::PivotView** View/*[out,retval]*/);
  Owc10_xp::PivotView* __fastcall get_View(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FieldSets(Owc10_xp::PivotFieldSets** FieldSets/*[out,retval]*/);
  Owc10_xp::PivotFieldSets* __fastcall get_FieldSets(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall InsertFieldSet(Owc10_xp::PivotFieldSet* FieldSet/*[in]*/, 
                                                       VARIANT Before/*[in,opt]*/, 
                                                       VARIANT_BOOL Remove/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RemoveFieldSet(VARIANT FieldSet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Label(Owc10_xp::PivotLabel** Label/*[out,retval]*/);
  Owc10_xp::PivotLabel* __fastcall get_Label(void);


  __property   Owc10_xp::PivotView* View = {read = get_View};
  __property   Owc10_xp::PivotFieldSets* FieldSets = {read = get_FieldSets};
  __property   Owc10_xp::PivotLabel* Label = {read = get_Label};
};
typedef PivotFilterAxisDispT<PivotFilterAxis> PivotFilterAxisDisp;

// *********************************************************************//
// SmartIntf: TCOMIPivotControl
// Interface: IPivotControl
// *********************************************************************//
template <class T /* IPivotControl */ >
class TCOMIPivotControlT : public TComInterface<IPivotControl>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIPivotControlT() {}
  TCOMIPivotControlT(IPivotControl *intf, bool addRef = false) : TComInterface<IPivotControl>(intf, addRef) {}
  TCOMIPivotControlT(const TCOMIPivotControlT& src) : TComInterface<IPivotControl>(src) {}
  TCOMIPivotControlT& operator=(const TCOMIPivotControlT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_ActiveView(Owc10_xp::PivotView** View/*[out,retval]*/);
  HRESULT         __fastcall get_ActiveView(Owc10_xp::PivotViewPtr* View/*[out,retval]*/);
  Owc10_xp::PivotViewPtr __fastcall get_ActiveView(void);
  HRESULT         __fastcall get_Selection(LPDISPATCH* Selection/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Selection(void);
  HRESULT         __fastcall _set_Selection(LPDISPATCH Selection/*[in]*/);
  HRESULT         __fastcall get_DataMember(Msdatasrc_xp::DataMember* DataMember/*[out,retval]*/);
  Msdatasrc_xp::DataMember __fastcall get_DataMember(void);
  HRESULT         __fastcall set_DataMember(Msdatasrc_xp::DataMember DataMember/*[in]*/);
  HRESULT         __fastcall get_ActiveData(Owc10_xp::PivotData** Data/*[out,retval]*/);
  HRESULT         __fastcall get_ActiveData(Owc10_xp::PivotDataPtr* Data/*[out,retval]*/);
  Owc10_xp::PivotDataPtr __fastcall get_ActiveData(void);
  HRESULT         __fastcall get_Version(BSTR* Version/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT         __fastcall get_HasDetails(VARIANT_BOOL* HasDetails/*[out,retval]*/);
  HRESULT         __fastcall get_HasDetails(TOLEBOOL* HasDetails/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HasDetails(void);
  HRESULT         __fastcall get_DisplayToolbar(VARIANT_BOOL* DisplayToolbar/*[out,retval]*/);
  HRESULT         __fastcall get_DisplayToolbar(TOLEBOOL* DisplayToolbar/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DisplayToolbar(void);
  HRESULT         __fastcall set_DisplayToolbar(VARIANT_BOOL DisplayToolbar/*[in]*/);
  HRESULT         __fastcall set_DisplayToolbar(TOLEBOOL DisplayToolbar/*[in]*/);
  HRESULT         __fastcall get_AllowGrouping(VARIANT_BOOL* AllowGrouping/*[out,retval]*/);
  HRESULT         __fastcall get_AllowGrouping(TOLEBOOL* AllowGrouping/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AllowGrouping(void);
  HRESULT         __fastcall set_AllowGrouping(VARIANT_BOOL AllowGrouping/*[in]*/);
  HRESULT         __fastcall set_AllowGrouping(TOLEBOOL AllowGrouping/*[in]*/);
  HRESULT         __fastcall get_AllowFiltering(VARIANT_BOOL* AllowFiltering/*[out,retval]*/);
  HRESULT         __fastcall get_AllowFiltering(TOLEBOOL* AllowFiltering/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AllowFiltering(void);
  HRESULT         __fastcall set_AllowFiltering(VARIANT_BOOL AllowFiltering/*[in]*/);
  HRESULT         __fastcall set_AllowFiltering(TOLEBOOL AllowFiltering/*[in]*/);
  HRESULT         __fastcall get_AllowDetails(VARIANT_BOOL* EnableDetails/*[out,retval]*/);
  HRESULT         __fastcall get_AllowDetails(TOLEBOOL* EnableDetails/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AllowDetails(void);
  HRESULT         __fastcall set_AllowDetails(VARIANT_BOOL EnableDetails/*[in]*/);
  HRESULT         __fastcall set_AllowDetails(TOLEBOOL EnableDetails/*[in]*/);
  HRESULT         __fastcall get_AllowPropertyToolbox(VARIANT_BOOL* AllowPropertyToolbox/*[out,retval]*/);
  HRESULT         __fastcall get_AllowPropertyToolbox(TOLEBOOL* AllowPropertyToolbox/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AllowPropertyToolbox(void);
  HRESULT         __fastcall set_AllowPropertyToolbox(VARIANT_BOOL AllowPropertyToolbox/*[in]*/);
  HRESULT         __fastcall set_AllowPropertyToolbox(TOLEBOOL AllowPropertyToolbox/*[in]*/);
  HRESULT         __fastcall get_AllowCustomOrdering(VARIANT_BOOL* AllowCustomOrdering/*[out,retval]*/);
  HRESULT         __fastcall get_AllowCustomOrdering(TOLEBOOL* AllowCustomOrdering/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AllowCustomOrdering(void);
  HRESULT         __fastcall set_AllowCustomOrdering(VARIANT_BOOL AllowCustomOrdering/*[in]*/);
  HRESULT         __fastcall set_AllowCustomOrdering(TOLEBOOL AllowCustomOrdering/*[in]*/);
  HRESULT         __fastcall get_AutoFit(VARIANT_BOOL* AutoFit/*[out,retval]*/);
  HRESULT         __fastcall get_AutoFit(TOLEBOOL* AutoFit/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoFit(void);
  HRESULT         __fastcall set_AutoFit(VARIANT_BOOL AutoFit/*[in]*/);
  HRESULT         __fastcall set_AutoFit(TOLEBOOL AutoFit/*[in]*/);
  HRESULT         __fastcall Export(BSTR Filename/*[in,def,opt]*/, 
                                    Owc10_xp::PivotExportActionEnum Action/*[in,def,opt]*/);
  HRESULT         __fastcall set_DataSource(Msdatasrc_xp::DataSource* DataSource/*[in]*/);
  HRESULT         __fastcall set_DataSource(Msdatasrc_xp::DataSourcePtr DataSource/*[in]*/);
  HRESULT         __fastcall _set_DataSource(Msdatasrc_xp::DataSource* DataSource/*[in]*/);
  HRESULT         __fastcall _set_DataSource(Msdatasrc_xp::DataSourcePtr DataSource/*[in]*/);
  HRESULT         __fastcall get_DataSource(Msdatasrc_xp::DataSource** DataSource/*[out,retval]*/);
  HRESULT         __fastcall get_DataSource(Msdatasrc_xp::DataSourcePtr* DataSource/*[out,retval]*/);
  Msdatasrc_xp::DataSourcePtr __fastcall get_DataSource(void);
  HRESULT         __fastcall get_BackColor(VARIANT* BackColor/*[out,retval]*/);
  VARIANT         __fastcall get_BackColor(void);
  HRESULT         __fastcall set_BackColor(VARIANT BackColor/*[in]*/);
  HRESULT         __fastcall get_DisplayExpandIndicator(VARIANT_BOOL* DisplayExpandIndicator/*[out,retval]*/);
  HRESULT         __fastcall get_DisplayExpandIndicator(TOLEBOOL* DisplayExpandIndicator/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DisplayExpandIndicator(void);
  HRESULT         __fastcall set_DisplayExpandIndicator(VARIANT_BOOL DisplayExpandIndicator/*[in]*/);
  HRESULT         __fastcall set_DisplayExpandIndicator(TOLEBOOL DisplayExpandIndicator/*[in]*/);
  HRESULT         __fastcall get_RightToLeft(VARIANT_BOOL* RightToLeft/*[out,retval]*/);
  HRESULT         __fastcall get_RightToLeft(TOLEBOOL* RightToLeft/*[out,retval]*/);
  TOLEBOOL        __fastcall get_RightToLeft(void);
  HRESULT         __fastcall set_RightToLeft(VARIANT_BOOL RightToLeft/*[in]*/);
  HRESULT         __fastcall set_RightToLeft(TOLEBOOL RightToLeft/*[in]*/);
  HRESULT         __fastcall get_MaxWidth(long* MaxWidth/*[out,retval]*/);
  long            __fastcall get_MaxWidth(void);
  HRESULT         __fastcall set_MaxWidth(long MaxWidth/*[in]*/);
  HRESULT         __fastcall get_MaxHeight(long* MaxHeight/*[out,retval]*/);
  long            __fastcall get_MaxHeight(void);
  HRESULT         __fastcall set_MaxHeight(long MaxHeight/*[in]*/);
  HRESULT         __fastcall get_Width(long* Width/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long Width/*[in]*/);
  HRESULT         __fastcall get_Height(long* Height/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(long Height/*[in]*/);
  HRESULT         __fastcall get_XMLData(BSTR* XMLData/*[out,retval]*/);
  BSTR            __fastcall get_XMLData(void);
  HRESULT         __fastcall set_XMLData(BSTR XMLData/*[in]*/);
  HRESULT         __fastcall Refresh(void);
  HRESULT         __fastcall get_DisplayPropertyToolbox(VARIANT_BOOL* DisplayPropertyToolbox/*[out,retval]*/);
  HRESULT         __fastcall get_DisplayPropertyToolbox(TOLEBOOL* DisplayPropertyToolbox/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DisplayPropertyToolbox(void);
  HRESULT         __fastcall set_DisplayPropertyToolbox(VARIANT_BOOL DisplayPropertyToolbox/*[in]*/);
  HRESULT         __fastcall set_DisplayPropertyToolbox(TOLEBOOL DisplayPropertyToolbox/*[in]*/);
  HRESULT         __fastcall get_DisplayFieldList(VARIANT_BOOL* DisplayFieldList/*[out,retval]*/);
  HRESULT         __fastcall get_DisplayFieldList(TOLEBOOL* DisplayFieldList/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DisplayFieldList(void);
  HRESULT         __fastcall set_DisplayFieldList(VARIANT_BOOL DisplayFieldList/*[in]*/);
  HRESULT         __fastcall set_DisplayFieldList(TOLEBOOL DisplayFieldList/*[in]*/);
  HRESULT         __fastcall get_Constants(LPDISPATCH* Constants/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Constants(void);
  HRESULT         __fastcall get_MajorVersion(long* MajorVersion/*[out,retval]*/);
  long            __fastcall get_MajorVersion(void);
  HRESULT         __fastcall get_MinorVersion(BSTR* MinorVersion/*[out,retval]*/);
  BSTR            __fastcall get_MinorVersion(void);
  HRESULT         __fastcall get_BuildNumber(BSTR* BuildNumber/*[out,retval]*/);
  BSTR            __fastcall get_BuildNumber(void);
  HRESULT         __fastcall ExportPicture(BSTR Filename/*[in,def,opt]*/, 
                                           BSTR FilterName/*[in,def,opt]*/, 
                                           long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/);
  HRESULT         __fastcall get_ConnectionString(BSTR* ConnectionString/*[out,retval]*/);
  BSTR            __fastcall get_ConnectionString(void);
  HRESULT         __fastcall set_ConnectionString(BSTR ConnectionString/*[in]*/);
  HRESULT         __fastcall get_CommandText(BSTR* CommandText/*[out,retval]*/);
  BSTR            __fastcall get_CommandText(void);
  HRESULT         __fastcall set_CommandText(BSTR CommandText/*[in]*/);
  HRESULT         __fastcall get_ProviderType(Owc10_xp::ProviderType* ProviderType/*[out,retval]*/);
  Owc10_xp::ProviderType __fastcall get_ProviderType(void);
  HRESULT         __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_MemberExpand(Owc10_xp::PivotTableMemberExpandEnum* MemberExpand/*[out,retval]*/);
  Owc10_xp::PivotTableMemberExpandEnum __fastcall get_MemberExpand(void);
  HRESULT         __fastcall set_MemberExpand(Owc10_xp::PivotTableMemberExpandEnum MemberExpand/*[in]*/);
  HRESULT         __fastcall LocateDataSource(void);
  HRESULT         __fastcall _set_Connection(Adodb_xp::Connection* Connection/*[in]*/);
  HRESULT         __fastcall _set_Connection(Adodb_xp::ConnectionPtr Connection/*[in]*/);
  HRESULT         __fastcall get_Connection(Adodb_xp::Connection** Connection/*[out,retval]*/);
  HRESULT         __fastcall get_Connection(Adodb_xp::ConnectionPtr* Connection/*[out,retval]*/);
  Adodb_xp::ConnectionPtr __fastcall get_Connection(void);
  HRESULT         __fastcall Copy(LPDISPATCH Selection/*[in,def,opt]*/);
  HRESULT         __fastcall get_RevisionNumber(BSTR* RevisionNumber/*[out,retval]*/);
  BSTR            __fastcall get_RevisionNumber(void);
  HRESULT         __fastcall get_DisplayAlerts(VARIANT_BOOL* DisplayAlerts/*[out,retval]*/);
  HRESULT         __fastcall get_DisplayAlerts(TOLEBOOL* DisplayAlerts/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DisplayAlerts(void);
  HRESULT         __fastcall set_DisplayAlerts(VARIANT_BOOL DisplayAlerts/*[in]*/);
  HRESULT         __fastcall set_DisplayAlerts(TOLEBOOL DisplayAlerts/*[in]*/);
  HRESULT         __fastcall get_DataMemberStrings(VARIANT* DataMemberStrings/*[out,retval]*/);
  VARIANT         __fastcall get_DataMemberStrings(void);
  HRESULT         __fastcall get_ClassFactory(Owc10_xp::PivotClassFactory** ClassFactory/*[out,retval]*/);
  HRESULT         __fastcall get_ClassFactory(Owc10_xp::PivotClassFactoryPtr* ClassFactory/*[out,retval]*/);
  Owc10_xp::PivotClassFactoryPtr __fastcall get_ClassFactory(void);
  HRESULT         __fastcall _set_ClassFactory(Owc10_xp::PivotClassFactory* ClassFactory/*[in]*/);
  HRESULT         __fastcall _set_ClassFactory(Owc10_xp::PivotClassFactoryPtr ClassFactory/*[in]*/);
  HRESULT         __fastcall get_Left(long* Left/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall get_Top(long* Top/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall get_Hwnd(long* Hwnd/*[out,retval]*/);
  long            __fastcall get_Hwnd(void);
  HRESULT         __fastcall DoDragDrop(Owc10_xp::DropSource* Source/*[in]*/, 
                                        LPDISPATCH DragItem/*[in]*/, 
                                        Owc10_xp::DropTarget* Target/*[in]*/, 
                                        long dwLegalEffect/*[in]*/);
  HRESULT         __fastcall Select(LPDISPATCH Selection/*[in]*/, LPDISPATCH ActiveObject/*[in]*/, 
                                    Owc10_xp::PivotScrollTypeEnum ScrollType/*[in,def,opt]*/, 
                                    VARIANT_BOOL Update/*[in,def,opt]*/, 
                                    VARIANT_BOOL Notify/*[in,def,opt]*/);
  HRESULT         __fastcall get_ActiveObject(LPDISPATCH* ActiveObject/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ActiveObject(void);
  HRESULT         __fastcall _set_ActiveObject(LPDISPATCH ActiveObject/*[in]*/);
  HRESULT         __fastcall get_Commands(Owc10_xp::OCCommands** Commands/*[out,retval]*/);
  HRESULT         __fastcall get_Commands(Owc10_xp::OCCommandsPtr* Commands/*[out,retval]*/);
  Owc10_xp::OCCommandsPtr __fastcall get_Commands(void);
  HRESULT         __fastcall ShowHelp(long Topic/*[in]*/);
  HRESULT         __fastcall ShowAbout(void);
  HRESULT         __fastcall get_UserMode(VARIANT_BOOL* UserMode/*[out,retval]*/);
  HRESULT         __fastcall get_UserMode(TOLEBOOL* UserMode/*[out,retval]*/);
  TOLEBOOL        __fastcall get_UserMode(void);
  HRESULT         __fastcall ShowContextMenu(long x/*[in]*/, long y/*[in]*/, VARIANT Menu/*[in]*/);
  HRESULT         __fastcall get_DataMemberCaption(BSTR* Caption/*[out,retval]*/);
  BSTR            __fastcall get_DataMemberCaption(void);
  HRESULT         __fastcall set_DataMemberCaption(BSTR Caption/*[in]*/);
  HRESULT         __fastcall get_DataSourceEx(LPDISPATCH* DataSourceEx/*[out,retval]*/);
  LPDISPATCH      __fastcall get_DataSourceEx(void);
  HRESULT         __fastcall _set_DataSourceEx(LPDISPATCH DataSourceEx/*[in]*/);
  HRESULT         __fastcall StartEdit(VARIANT InitialValue/*[in,opt]*/, 
                                       Owc10_xp::PivotArrowModeEnum ArrowMode/*[in,def,opt]*/, 
                                       Owc10_xp::PivotCaretPositionEnum CaretPosition/*[in,def,opt]*/);
  HRESULT         __fastcall EndEdit(VARIANT_BOOL Accept/*[in,def,opt]*/);
  HRESULT         __fastcall CancelDragDrop(void);
  HRESULT         __fastcall get_IsDirty(VARIANT_BOOL* IsDirty/*[out,retval]*/);
  HRESULT         __fastcall get_IsDirty(TOLEBOOL* IsDirty/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsDirty(void);
  HRESULT         __fastcall set_IsDirty(VARIANT_BOOL IsDirty/*[in]*/);
  HRESULT         __fastcall set_IsDirty(TOLEBOOL IsDirty/*[in]*/);
  HRESULT         __fastcall get_CubeProvider(BSTR* CubeProvider/*[out,retval]*/);
  BSTR            __fastcall get_CubeProvider(void);
  HRESULT         __fastcall set_CubeProvider(BSTR CubeProvider/*[in]*/);
  HRESULT         __fastcall get_SelectionType(BSTR* SelectionType/*[out,retval]*/);
  BSTR            __fastcall get_SelectionType(void);
  HRESULT         __fastcall get_DisplayScreenTips(VARIANT_BOOL* DisplayScreenTips/*[out,retval]*/);
  HRESULT         __fastcall get_DisplayScreenTips(TOLEBOOL* DisplayScreenTips/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DisplayScreenTips(void);
  HRESULT         __fastcall set_DisplayScreenTips(VARIANT_BOOL DisplayScreenTips/*[in]*/);
  HRESULT         __fastcall set_DisplayScreenTips(TOLEBOOL DisplayScreenTips/*[in]*/);
  HRESULT         __fastcall get_ViewOnlyMode(VARIANT_BOOL* ViewOnlyMode/*[out,retval]*/);
  HRESULT         __fastcall get_ViewOnlyMode(TOLEBOOL* ViewOnlyMode/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ViewOnlyMode(void);
  HRESULT         __fastcall get_DisplayDesignTimeUI(VARIANT_BOOL* DisplayDesignTimeUI/*[out,retval]*/);
  HRESULT         __fastcall get_DisplayDesignTimeUI(TOLEBOOL* DisplayDesignTimeUI/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DisplayDesignTimeUI(void);
  HRESULT         __fastcall set_DisplayDesignTimeUI(VARIANT_BOOL DisplayDesignTimeUI/*[in]*/);
  HRESULT         __fastcall set_DisplayDesignTimeUI(TOLEBOOL DisplayDesignTimeUI/*[in]*/);
  HRESULT         __fastcall get_Toolbar(Mscomctllib_xp::IToolbar** Toolbar/*[out,retval]*/);
  HRESULT         __fastcall get_Toolbar(Mscomctllib_xp::IToolbarPtr* Toolbar/*[out,retval]*/);
  Mscomctllib_xp::IToolbarPtr __fastcall get_Toolbar(void);
  HRESULT         __fastcall get_EditMode(Owc10_xp::PivotEditModeEnum* EditMode/*[out,retval]*/);
  Owc10_xp::PivotEditModeEnum __fastcall get_EditMode(void);
  HRESULT         __fastcall get_HTMLData(BSTR* HTMLData/*[out,retval]*/);
  BSTR            __fastcall get_HTMLData(void);
  HRESULT         __fastcall get_DataSourceName(BSTR* DataSourceName/*[out,retval]*/);
  BSTR            __fastcall get_DataSourceName(void);
  HRESULT         __fastcall set_DataSourceName(BSTR DataSourceName/*[in]*/);
  HRESULT         __fastcall get_DisplayBranding(VARIANT_BOOL* DisplayBranding/*[out,retval]*/);
  HRESULT         __fastcall get_DisplayBranding(TOLEBOOL* DisplayBranding/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DisplayBranding(void);
  HRESULT         __fastcall set_DisplayBranding(VARIANT_BOOL DisplayBranding/*[in]*/);
  HRESULT         __fastcall set_DisplayBranding(TOLEBOOL DisplayBranding/*[in]*/);
  HRESULT         __fastcall get_DisplayOfficeLogo(VARIANT_BOOL* DisplayOfficeLogo/*[out,retval]*/);
  HRESULT         __fastcall get_DisplayOfficeLogo(TOLEBOOL* DisplayOfficeLogo/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DisplayOfficeLogo(void);
  HRESULT         __fastcall set_DisplayOfficeLogo(VARIANT_BOOL DisplayOfficeLogo/*[in]*/);
  HRESULT         __fastcall set_DisplayOfficeLogo(TOLEBOOL DisplayOfficeLogo/*[in]*/);
  HRESULT         __fastcall OkToBindToControlByName(void);

  __property   Owc10_xp::PivotViewPtr ActiveView = {read = get_ActiveView};
  __property   LPDISPATCH      Selection = {read = get_Selection, write = _set_Selection};
  __property   Msdatasrc_xp::DataMember DataMember = {read = get_DataMember, write = set_DataMember};
  __property   Owc10_xp::PivotDataPtr ActiveData = {read = get_ActiveData};
  __property   BSTR            Version = {read = get_Version};
  __property   TOLEBOOL        HasDetails = {read = get_HasDetails};
  __property   TOLEBOOL        DisplayToolbar = {read = get_DisplayToolbar, write = set_DisplayToolbar};
  __property   TOLEBOOL        AllowGrouping = {read = get_AllowGrouping, write = set_AllowGrouping};
  __property   TOLEBOOL        AllowFiltering = {read = get_AllowFiltering, write = set_AllowFiltering};
  __property   TOLEBOOL        AllowDetails = {read = get_AllowDetails, write = set_AllowDetails};
  __property   TOLEBOOL        AllowPropertyToolbox = {read = get_AllowPropertyToolbox, write = set_AllowPropertyToolbox};
  __property   TOLEBOOL        AllowCustomOrdering = {read = get_AllowCustomOrdering, write = set_AllowCustomOrdering};
  __property   TOLEBOOL        AutoFit = {read = get_AutoFit, write = set_AutoFit};
  __property   Msdatasrc_xp::DataSourcePtr DataSource = {write = set_DataSource};
  __property   TOLEBOOL        DisplayExpandIndicator = {read = get_DisplayExpandIndicator, write = set_DisplayExpandIndicator};
  __property   TOLEBOOL        RightToLeft = {read = get_RightToLeft, write = set_RightToLeft};
  __property   long            MaxWidth = {read = get_MaxWidth, write = set_MaxWidth};
  __property   long            MaxHeight = {read = get_MaxHeight, write = set_MaxHeight};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   BSTR            XMLData = {read = get_XMLData};
  __property   TOLEBOOL        DisplayPropertyToolbox = {read = get_DisplayPropertyToolbox, write = set_DisplayPropertyToolbox};
  __property   TOLEBOOL        DisplayFieldList = {read = get_DisplayFieldList, write = set_DisplayFieldList};
  __property   LPDISPATCH      Constants = {read = get_Constants};
  __property   long            MajorVersion = {read = get_MajorVersion};
  __property   BSTR            MinorVersion = {read = get_MinorVersion};
  __property   BSTR            BuildNumber = {read = get_BuildNumber};
  __property   BSTR            ConnectionString = {read = get_ConnectionString};
  __property   BSTR            CommandText = {read = get_CommandText};
  __property   Owc10_xp::ProviderType ProviderType = {read = get_ProviderType};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Owc10_xp::PivotTableMemberExpandEnum MemberExpand = {read = get_MemberExpand, write = set_MemberExpand};
  __property   Adodb_xp::ConnectionPtr Connection = {write = _set_Connection};
  __property   BSTR            RevisionNumber = {read = get_RevisionNumber};
  __property   TOLEBOOL        DisplayAlerts = {read = get_DisplayAlerts, write = set_DisplayAlerts};
  __property   Owc10_xp::PivotClassFactoryPtr ClassFactory = {read = get_ClassFactory, write = _set_ClassFactory};
  __property   long            Left = {read = get_Left};
  __property   long            Top = {read = get_Top};
  __property   long            Hwnd = {read = get_Hwnd};
  __property   LPDISPATCH      ActiveObject = {read = get_ActiveObject, write = _set_ActiveObject};
  __property   Owc10_xp::OCCommandsPtr Commands = {read = get_Commands};
  __property   TOLEBOOL        UserMode = {read = get_UserMode};
  __property   BSTR            DataMemberCaption = {read = get_DataMemberCaption};
  __property   LPDISPATCH      DataSourceEx = {read = get_DataSourceEx, write = _set_DataSourceEx};
  __property   TOLEBOOL        IsDirty = {read = get_IsDirty, write = set_IsDirty};
  __property   BSTR            CubeProvider = {read = get_CubeProvider};
  __property   BSTR            SelectionType = {read = get_SelectionType};
  __property   TOLEBOOL        DisplayScreenTips = {read = get_DisplayScreenTips, write = set_DisplayScreenTips};
  __property   TOLEBOOL        ViewOnlyMode = {read = get_ViewOnlyMode};
  __property   TOLEBOOL        DisplayDesignTimeUI = {read = get_DisplayDesignTimeUI, write = set_DisplayDesignTimeUI};
  __property   Mscomctllib_xp::IToolbarPtr Toolbar = {read = get_Toolbar};
  __property   Owc10_xp::PivotEditModeEnum EditMode = {read = get_EditMode};
  __property   BSTR            HTMLData = {read = get_HTMLData};
  __property   BSTR            DataSourceName = {read = get_DataSourceName};
  __property   TOLEBOOL        DisplayBranding = {read = get_DisplayBranding, write = set_DisplayBranding};
  __property   TOLEBOOL        DisplayOfficeLogo = {read = get_DisplayOfficeLogo, write = set_DisplayOfficeLogo};
};
typedef TCOMIPivotControlT<IPivotControl> TCOMIPivotControl;

// *********************************************************************//
// DispIntf:  IPivotControl
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B08-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class IPivotControlDispT : public TAutoDriver<IPivotControl>
{
public:
  IPivotControlDispT(){}

  IPivotControlDispT(IPivotControl *pintf)
  {
    TAutoDriver<IPivotControl>::Bind(pintf, false);
  }

  IPivotControlDispT(IPivotControlPtr pintf)
  {
    TAutoDriver<IPivotControl>::Bind(pintf, true);
  }

  IPivotControlDispT& operator=(IPivotControl *pintf)
  {
    TAutoDriver<IPivotControl>::Bind(pintf, false);
    return *this;
  }

  IPivotControlDispT& operator=(IPivotControlPtr pintf)
  {
    TAutoDriver<IPivotControl>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_PivotTable));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_PivotTable);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActiveView(Owc10_xp::PivotView** View/*[out,retval]*/);
  Owc10_xp::PivotView* __fastcall get_ActiveView(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Selection(LPDISPATCH* Selection/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Selection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Selection(LPDISPATCH Selection/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DataMember(Msdatasrc_xp::DataMember* DataMember/*[out,retval]*/);
  Msdatasrc_xp::DataMember __fastcall get_DataMember(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DataMember(Msdatasrc_xp::DataMember DataMember/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActiveData(Owc10_xp::PivotData** Data/*[out,retval]*/);
  Owc10_xp::PivotData* __fastcall get_ActiveData(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Version(BSTR* Version/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasDetails(VARIANT_BOOL* HasDetails/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HasDetails(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayToolbar(VARIANT_BOOL* DisplayToolbar/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayToolbar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayToolbar(VARIANT_BOOL DisplayToolbar/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllowGrouping(VARIANT_BOOL* AllowGrouping/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllowGrouping(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AllowGrouping(VARIANT_BOOL AllowGrouping/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllowFiltering(VARIANT_BOOL* AllowFiltering/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllowFiltering(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AllowFiltering(VARIANT_BOOL AllowFiltering/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllowDetails(VARIANT_BOOL* EnableDetails/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllowDetails(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AllowDetails(VARIANT_BOOL EnableDetails/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllowPropertyToolbox(VARIANT_BOOL* AllowPropertyToolbox/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllowPropertyToolbox(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AllowPropertyToolbox(VARIANT_BOOL AllowPropertyToolbox/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllowCustomOrdering(VARIANT_BOOL* AllowCustomOrdering/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllowCustomOrdering(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AllowCustomOrdering(VARIANT_BOOL AllowCustomOrdering/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoFit(VARIANT_BOOL* AutoFit/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoFit(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoFit(VARIANT_BOOL AutoFit/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Export(BSTR Filename/*[in,def,opt]*/, 
                                               Owc10_xp::PivotExportActionEnum Action/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DataSource(Msdatasrc_xp::DataSource* DataSource/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_DataSource(Msdatasrc_xp::DataSource* DataSource/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DataSource(Msdatasrc_xp::DataSource** DataSource/*[out,retval]*/);
  Msdatasrc_xp::DataSource* __fastcall get_DataSource(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackColor(VARIANT* BackColor/*[out,retval]*/);
  VARIANT         __fastcall get_BackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackColor(VARIANT BackColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayExpandIndicator(VARIANT_BOOL* DisplayExpandIndicator/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayExpandIndicator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayExpandIndicator(VARIANT_BOOL DisplayExpandIndicator/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RightToLeft(VARIANT_BOOL* RightToLeft/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RightToLeft(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RightToLeft(VARIANT_BOOL RightToLeft/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MaxWidth(long* MaxWidth/*[out,retval]*/);
  long            __fastcall get_MaxWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MaxWidth(long MaxWidth/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MaxHeight(long* MaxHeight/*[out,retval]*/);
  long            __fastcall get_MaxHeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MaxHeight(long MaxHeight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(long* Width/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(long Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(long* Height/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(long Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_XMLData(BSTR* XMLData/*[out,retval]*/);
  BSTR            __fastcall get_XMLData(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_XMLData(BSTR XMLData/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Refresh();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayPropertyToolbox(VARIANT_BOOL* DisplayPropertyToolbox/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayPropertyToolbox(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayPropertyToolbox(VARIANT_BOOL DisplayPropertyToolbox/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayFieldList(VARIANT_BOOL* DisplayFieldList/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayFieldList(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayFieldList(VARIANT_BOOL DisplayFieldList/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Constants(LPDISPATCH* Constants/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Constants(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MajorVersion(long* MajorVersion/*[out,retval]*/);
  long            __fastcall get_MajorVersion(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MinorVersion(BSTR* MinorVersion/*[out,retval]*/);
  BSTR            __fastcall get_MinorVersion(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BuildNumber(BSTR* BuildNumber/*[out,retval]*/);
  BSTR            __fastcall get_BuildNumber(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ExportPicture(BSTR Filename/*[in,def,opt]*/, 
                                                      BSTR FilterName/*[in,def,opt]*/, 
                                                      long Width/*[in,def,opt]*/, 
                                                      long Height/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ConnectionString(BSTR* ConnectionString/*[out,retval]*/);
  BSTR            __fastcall get_ConnectionString(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ConnectionString(BSTR ConnectionString/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CommandText(BSTR* CommandText/*[out,retval]*/);
  BSTR            __fastcall get_CommandText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CommandText(BSTR CommandText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ProviderType(Owc10_xp::ProviderType* ProviderType/*[out,retval]*/);
  Owc10_xp::ProviderType __fastcall get_ProviderType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MemberExpand(Owc10_xp::PivotTableMemberExpandEnum* MemberExpand/*[out,retval]*/);
  Owc10_xp::PivotTableMemberExpandEnum __fastcall get_MemberExpand(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MemberExpand(Owc10_xp::PivotTableMemberExpandEnum MemberExpand/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall LocateDataSource();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Connection(Adodb_xp::Connection* Connection/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Connection(Adodb_xp::Connection** Connection/*[out,retval]*/);
  Adodb_xp::Connection* __fastcall get_Connection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Copy(LPDISPATCH Selection/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RevisionNumber(BSTR* RevisionNumber/*[out,retval]*/);
  BSTR            __fastcall get_RevisionNumber(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayAlerts(VARIANT_BOOL* DisplayAlerts/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayAlerts(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayAlerts(VARIANT_BOOL DisplayAlerts/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DataMemberStrings(VARIANT* DataMemberStrings/*[out,retval]*/);
  VARIANT         __fastcall get_DataMemberStrings(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ClassFactory(Owc10_xp::PivotClassFactory** ClassFactory/*[out,retval]*/);
  Owc10_xp::PivotClassFactory* __fastcall get_ClassFactory(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_ClassFactory(Owc10_xp::PivotClassFactory* ClassFactory/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(long* Left/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(long* Top/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Hwnd(long* Hwnd/*[out,retval]*/);
  long            __fastcall get_Hwnd(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DoDragDrop(Owc10_xp::DropSource* Source/*[in]*/, 
                                                   LPDISPATCH DragItem/*[in]*/, 
                                                   Owc10_xp::DropTarget* Target/*[in]*/, 
                                                   long dwLegalEffect/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Select(LPDISPATCH Selection/*[in]*/, 
                                               LPDISPATCH ActiveObject/*[in]*/, 
                                               Owc10_xp::PivotScrollTypeEnum ScrollType/*[in,def,opt]*/
                                               , VARIANT_BOOL Update/*[in,def,opt]*/, 
                                               VARIANT_BOOL Notify/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActiveObject(LPDISPATCH* ActiveObject/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ActiveObject(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_ActiveObject(LPDISPATCH ActiveObject/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Commands(Owc10_xp::OCCommands** Commands/*[out,retval]*/);
  Owc10_xp::OCCommands* __fastcall get_Commands(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ShowHelp(long Topic/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ShowAbout();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_UserMode(VARIANT_BOOL* UserMode/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_UserMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ShowContextMenu(long x/*[in]*/, long y/*[in]*/, 
                                                        VARIANT Menu/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DataMemberCaption(BSTR* Caption/*[out,retval]*/);
  BSTR            __fastcall get_DataMemberCaption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DataMemberCaption(BSTR Caption/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DataSourceEx(LPDISPATCH* DataSourceEx/*[out,retval]*/);
  LPDISPATCH      __fastcall get_DataSourceEx(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_DataSourceEx(LPDISPATCH DataSourceEx/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall StartEdit(VARIANT InitialValue/*[in,opt]*/, 
                                                  Owc10_xp::PivotArrowModeEnum ArrowMode/*[in,def,opt]*/
                                                  , 
                                                  Owc10_xp::PivotCaretPositionEnum CaretPosition/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall EndEdit(VARIANT_BOOL Accept/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CancelDragDrop();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsDirty(VARIANT_BOOL* IsDirty/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsDirty(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IsDirty(VARIANT_BOOL IsDirty/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CubeProvider(BSTR* CubeProvider/*[out,retval]*/);
  BSTR            __fastcall get_CubeProvider(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CubeProvider(BSTR CubeProvider/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SelectionType(BSTR* SelectionType/*[out,retval]*/);
  BSTR            __fastcall get_SelectionType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayScreenTips(VARIANT_BOOL* DisplayScreenTips/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayScreenTips(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayScreenTips(VARIANT_BOOL DisplayScreenTips/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ViewOnlyMode(VARIANT_BOOL* ViewOnlyMode/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ViewOnlyMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayDesignTimeUI(VARIANT_BOOL* DisplayDesignTimeUI/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayDesignTimeUI(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayDesignTimeUI(VARIANT_BOOL DisplayDesignTimeUI/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Toolbar(Mscomctllib_xp::IToolbar** Toolbar/*[out,retval]*/);
  Mscomctllib_xp::IToolbar* __fastcall get_Toolbar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EditMode(Owc10_xp::PivotEditModeEnum* EditMode/*[out,retval]*/);
  Owc10_xp::PivotEditModeEnum __fastcall get_EditMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HTMLData(BSTR* HTMLData/*[out,retval]*/);
  BSTR            __fastcall get_HTMLData(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DataSourceName(BSTR* DataSourceName/*[out,retval]*/);
  BSTR            __fastcall get_DataSourceName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DataSourceName(BSTR DataSourceName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayBranding(VARIANT_BOOL* DisplayBranding/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayBranding(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayBranding(VARIANT_BOOL DisplayBranding/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayOfficeLogo(VARIANT_BOOL* DisplayOfficeLogo/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayOfficeLogo(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayOfficeLogo(VARIANT_BOOL DisplayOfficeLogo/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall OkToBindToControlByName();

  __property   Owc10_xp::PivotView* ActiveView = {read = get_ActiveView};
  __property   LPDISPATCH      Selection = {read = get_Selection, write = _set_Selection};
  __property   Msdatasrc_xp::DataMember DataMember = {read = get_DataMember, write = set_DataMember};
  __property   Owc10_xp::PivotData* ActiveData = {read = get_ActiveData};
  __property   BSTR            Version = {read = get_Version};
  __property   VARIANT_BOOL    HasDetails = {read = get_HasDetails};
  __property   VARIANT_BOOL    DisplayToolbar = {read = get_DisplayToolbar, write = set_DisplayToolbar};
  __property   VARIANT_BOOL    AllowGrouping = {read = get_AllowGrouping, write = set_AllowGrouping};
  __property   VARIANT_BOOL    AllowFiltering = {read = get_AllowFiltering, write = set_AllowFiltering};
  __property   VARIANT_BOOL    AllowDetails = {read = get_AllowDetails, write = set_AllowDetails};
  __property   VARIANT_BOOL    AllowPropertyToolbox = {read = get_AllowPropertyToolbox, write = set_AllowPropertyToolbox};
  __property   VARIANT_BOOL    AllowCustomOrdering = {read = get_AllowCustomOrdering, write = set_AllowCustomOrdering};
  __property   VARIANT_BOOL    AutoFit = {read = get_AutoFit, write = set_AutoFit};
  __property   Msdatasrc_xp::DataSource* DataSource = {read = get_DataSource, write = set_DataSource};
  __property   VARIANT_BOOL    DisplayExpandIndicator = {read = get_DisplayExpandIndicator, write = set_DisplayExpandIndicator};
  __property   VARIANT_BOOL    RightToLeft = {read = get_RightToLeft, write = set_RightToLeft};
  __property   long            MaxWidth = {read = get_MaxWidth, write = set_MaxWidth};
  __property   long            MaxHeight = {read = get_MaxHeight, write = set_MaxHeight};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   BSTR            XMLData = {read = get_XMLData};
  __property   VARIANT_BOOL    DisplayPropertyToolbox = {read = get_DisplayPropertyToolbox, write = set_DisplayPropertyToolbox};
  __property   VARIANT_BOOL    DisplayFieldList = {read = get_DisplayFieldList, write = set_DisplayFieldList};
  __property   LPDISPATCH      Constants = {read = get_Constants};
  __property   long            MajorVersion = {read = get_MajorVersion};
  __property   BSTR            MinorVersion = {read = get_MinorVersion};
  __property   BSTR            BuildNumber = {read = get_BuildNumber};
  __property   BSTR            ConnectionString = {read = get_ConnectionString};
  __property   BSTR            CommandText = {read = get_CommandText};
  __property   Owc10_xp::ProviderType ProviderType = {read = get_ProviderType};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Owc10_xp::PivotTableMemberExpandEnum MemberExpand = {read = get_MemberExpand, write = set_MemberExpand};
  __property   Adodb_xp::Connection* Connection = {read = get_Connection, write = _set_Connection};
  __property   BSTR            RevisionNumber = {read = get_RevisionNumber};
  __property   VARIANT_BOOL    DisplayAlerts = {read = get_DisplayAlerts, write = set_DisplayAlerts};
  __property   Owc10_xp::PivotClassFactory* ClassFactory = {read = get_ClassFactory, write = _set_ClassFactory};
  __property   long            Left = {read = get_Left};
  __property   long            Top = {read = get_Top};
  __property   long            Hwnd = {read = get_Hwnd};
  __property   LPDISPATCH      ActiveObject = {read = get_ActiveObject, write = _set_ActiveObject};
  __property   Owc10_xp::OCCommands* Commands = {read = get_Commands};
  __property   VARIANT_BOOL    UserMode = {read = get_UserMode};
  __property   BSTR            DataMemberCaption = {read = get_DataMemberCaption};
  __property   LPDISPATCH      DataSourceEx = {read = get_DataSourceEx, write = _set_DataSourceEx};
  __property   VARIANT_BOOL    IsDirty = {read = get_IsDirty, write = set_IsDirty};
  __property   BSTR            CubeProvider = {read = get_CubeProvider};
  __property   BSTR            SelectionType = {read = get_SelectionType};
  __property   VARIANT_BOOL    DisplayScreenTips = {read = get_DisplayScreenTips, write = set_DisplayScreenTips};
  __property   VARIANT_BOOL    ViewOnlyMode = {read = get_ViewOnlyMode};
  __property   VARIANT_BOOL    DisplayDesignTimeUI = {read = get_DisplayDesignTimeUI, write = set_DisplayDesignTimeUI};
  __property   Mscomctllib_xp::IToolbar* Toolbar = {read = get_Toolbar};
  __property   Owc10_xp::PivotEditModeEnum EditMode = {read = get_EditMode};
  __property   BSTR            HTMLData = {read = get_HTMLData};
  __property   BSTR            DataSourceName = {read = get_DataSourceName};
  __property   VARIANT_BOOL    DisplayBranding = {read = get_DisplayBranding, write = set_DisplayBranding};
  __property   VARIANT_BOOL    DisplayOfficeLogo = {read = get_DisplayOfficeLogo, write = set_DisplayOfficeLogo};
};
typedef IPivotControlDispT<IPivotControl> IPivotControlDisp;

typedef TComInterface<PivotClassFactory>  TCOMPivotClassFactory;

// *********************************************************************//
// DispIntf:  PivotClassFactory
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {73F4D511-C851-11D2-8F2D-00600893B533}
// *********************************************************************//
template<class T>
class PivotClassFactoryDispT : public TAutoDriver<PivotClassFactory>
{
public:
  PivotClassFactoryDispT(){}

  PivotClassFactoryDispT(PivotClassFactory *pintf)
  {
    TAutoDriver<PivotClassFactory>::Bind(pintf, false);
  }

  PivotClassFactoryDispT(PivotClassFactoryPtr pintf)
  {
    TAutoDriver<PivotClassFactory>::Bind(pintf, true);
  }

  PivotClassFactoryDispT& operator=(PivotClassFactory *pintf)
  {
    TAutoDriver<PivotClassFactory>::Bind(pintf, false);
    return *this;
  }

  PivotClassFactoryDispT& operator=(PivotClassFactoryPtr pintf)
  {
    TAutoDriver<PivotClassFactory>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NewDetailCell(Owc10_xp::PivotDetailCell* DetailCell/*[in]*/
                                                          , 
                                                          LPDISPATCH* NewDetailCell/*[out,retval]*/);
  LPDISPATCH      __fastcall get_NewDetailCell(Owc10_xp::PivotDetailCell* DetailCell/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NewAggregate(Owc10_xp::PivotAggregate* Aggregate/*[in]*/
                                                         , LPDISPATCH* NewAggregate/*[out,retval]*/);
  LPDISPATCH      __fastcall get_NewAggregate(Owc10_xp::PivotAggregate* Aggregate/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NewRowMember(Owc10_xp::PivotAxisMember* RowMember/*[in]*/
                                                         , LPDISPATCH* NewRowMember/*[out,retval]*/);
  LPDISPATCH      __fastcall get_NewRowMember(Owc10_xp::PivotAxisMember* RowMember/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NewColumnMember(Owc10_xp::PivotColumnMember* ColumnMember/*[in]*/
                                                            , 
                                                            LPDISPATCH* NewColumnMember/*[out,retval]*/);
  LPDISPATCH      __fastcall get_NewColumnMember(Owc10_xp::PivotColumnMember* ColumnMember/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NewCell(Owc10_xp::PivotCell* Cell/*[in]*/, 
                                                    LPDISPATCH* NewCell/*[out,retval]*/);
  LPDISPATCH      __fastcall get_NewCell(Owc10_xp::PivotCell* Cell/*[in]*/);

};
typedef PivotClassFactoryDispT<PivotClassFactory> PivotClassFactoryDisp;

typedef TComInterface<PivotDetailCell>  TCOMPivotDetailCell;

// *********************************************************************//
// DispIntf:  PivotDetailCell
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B48-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class PivotDetailCellDispT : public TAutoDriver<PivotDetailCell>
{
public:
  PivotDetailCellDispT(){}

  PivotDetailCellDispT(PivotDetailCell *pintf)
  {
    TAutoDriver<PivotDetailCell>::Bind(pintf, false);
  }

  PivotDetailCellDispT(PivotDetailCellPtr pintf)
  {
    TAutoDriver<PivotDetailCell>::Bind(pintf, true);
  }

  PivotDetailCellDispT& operator=(PivotDetailCell *pintf)
  {
    TAutoDriver<PivotDetailCell>::Bind(pintf, false);
    return *this;
  }

  PivotDetailCellDispT& operator=(PivotDetailCellPtr pintf)
  {
    TAutoDriver<PivotDetailCell>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(VARIANT Value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Text(BSTR* Text/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Cell(Owc10_xp::PivotCell** Cell/*[out,retval]*/);
  Owc10_xp::PivotCell* __fastcall get_Cell(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Field(Owc10_xp::PivotField** Field/*[out,retval]*/);
  Owc10_xp::PivotField* __fastcall get_Field(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Row(long* Row/*[out,retval]*/);
  long            __fastcall get_Row(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(long* Left/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(long* Top/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(long* Width/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(long* Height/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Column(long* Column/*[out,retval]*/);
  long            __fastcall get_Column(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Hyperlink(Owc10_xp::PivotHyperlink** Hyperlink/*[out,retval]*/);
  Owc10_xp::PivotHyperlink* __fastcall get_Hyperlink(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Bookmark(VARIANT* pvar/*[out,retval]*/);
  VARIANT         __fastcall get_Bookmark(void);

  __property   BSTR            Text = {read = get_Text};
  __property   Owc10_xp::PivotCell* Cell = {read = get_Cell};
  __property   Owc10_xp::PivotField* Field = {read = get_Field};
  __property   long            Row = {read = get_Row};
  __property   long            Left = {read = get_Left};
  __property   long            Top = {read = get_Top};
  __property   long            Width = {read = get_Width};
  __property   long            Height = {read = get_Height};
  __property   long            Column = {read = get_Column};
  __property   Owc10_xp::PivotHyperlink* Hyperlink = {read = get_Hyperlink};
};
typedef PivotDetailCellDispT<PivotDetailCell> PivotDetailCellDisp;

typedef TComInterface<PivotCell>  TCOMPivotCell;

// *********************************************************************//
// DispIntf:  PivotCell
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B31-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class PivotCellDispT : public TAutoDriver<PivotCell>
{
public:
  PivotCellDispT(){}

  PivotCellDispT(PivotCell *pintf)
  {
    TAutoDriver<PivotCell>::Bind(pintf, false);
  }

  PivotCellDispT(PivotCellPtr pintf)
  {
    TAutoDriver<PivotCell>::Bind(pintf, true);
  }

  PivotCellDispT& operator=(PivotCell *pintf)
  {
    TAutoDriver<PivotCell>::Bind(pintf, false);
    return *this;
  }

  PivotCellDispT& operator=(PivotCellPtr pintf)
  {
    TAutoDriver<PivotCell>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Aggregates(Owc10_xp::PivotAggregates** Aggregates/*[out,retval]*/);
  Owc10_xp::PivotAggregates* __fastcall get_Aggregates(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Expanded(VARIANT_BOOL* Expanded/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Expanded(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Expanded(VARIANT_BOOL Expanded/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Recordset(Adodb_xp::Recordset** Recordset/*[out,retval]*/);
  Adodb_xp::Recordset* __fastcall get_Recordset(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RowMember(Owc10_xp::PivotAxisMember** Member/*[out,retval]*/);
  Owc10_xp::PivotAxisMember* __fastcall get_RowMember(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnMember(Owc10_xp::PivotColumnMember** Member/*[out,retval]*/);
  Owc10_xp::PivotColumnMember* __fastcall get_ColumnMember(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DetailTop(long* DetailTop/*[out,retval]*/);
  long            __fastcall get_DetailTop(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DetailTop(long DetailTop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DetailCells(long Row/*[in]*/, long Column/*[in]*/, 
                                                        Owc10_xp::PivotDetailCell** Cell/*[out,retval]*/);
  Owc10_xp::PivotDetailCell* __fastcall get_DetailCells(long Row/*[in]*/, long Column/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DetailRange(Owc10_xp::PivotDetailCell* TopLeft/*[in]*/, 
                                                        Owc10_xp::PivotDetailCell* BottomRight/*[in]*/
                                                        , 
                                                        Owc10_xp::PivotDetailRange** Range/*[out,retval]*/);
  Owc10_xp::PivotDetailRange* __fastcall get_DetailRange(Owc10_xp::PivotDetailCell* TopLeft/*[in]*/, 
                                                         Owc10_xp::PivotDetailCell* BottomRight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Data(Owc10_xp::PivotData** Data/*[out,retval]*/);
  Owc10_xp::PivotData* __fastcall get_Data(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DetailTopOffset(long* DetailTopOffset/*[out,retval]*/);
  long            __fastcall get_DetailTopOffset(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DetailTopOffset(long DetailTopOffset/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall MoveDetailTop(long DetailTop/*[in]*/, 
                                                      long DetailTopOffset/*[in]*/, 
                                                      VARIANT_BOOL Update/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DetailRowCount(long* DetailRowCount/*[out,retval]*/);
  long            __fastcall get_DetailRowCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DetailColumnCount(long* DetailColumnCount/*[out,retval]*/);
  long            __fastcall get_DetailColumnCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PageMember(Owc10_xp::PivotPageMember** Member/*[out,retval]*/);
  Owc10_xp::PivotPageMember* __fastcall get_PageMember(void);

  __property   Owc10_xp::PivotAggregates* Aggregates = {read = get_Aggregates};
  __property   VARIANT_BOOL    Expanded = {read = get_Expanded, write = set_Expanded};
  __property   Adodb_xp::Recordset* Recordset = {read = get_Recordset};
  __property   Owc10_xp::PivotAxisMember* RowMember = {read = get_RowMember};
  __property   Owc10_xp::PivotColumnMember* ColumnMember = {read = get_ColumnMember};
  __property   long            DetailTop = {read = get_DetailTop, write = set_DetailTop};
  __property   Owc10_xp::PivotData* Data = {read = get_Data};
  __property   long            DetailTopOffset = {read = get_DetailTopOffset, write = set_DetailTopOffset};
  __property   long            DetailRowCount = {read = get_DetailRowCount};
  __property   long            DetailColumnCount = {read = get_DetailColumnCount};
  __property   Owc10_xp::PivotPageMember* PageMember = {read = get_PageMember};
};
typedef PivotCellDispT<PivotCell> PivotCellDisp;

typedef TComInterface<PivotAggregates>  TCOMPivotAggregates;

// *********************************************************************//
// DispIntf:  PivotAggregates
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A77-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class PivotAggregatesDispT : public TAutoDriver<PivotAggregates>
{
public:
  PivotAggregatesDispT(){}

  PivotAggregatesDispT(PivotAggregates *pintf)
  {
    TAutoDriver<PivotAggregates>::Bind(pintf, false);
  }

  PivotAggregatesDispT(PivotAggregatesPtr pintf)
  {
    TAutoDriver<PivotAggregates>::Bind(pintf, true);
  }

  PivotAggregatesDispT& operator=(PivotAggregates *pintf)
  {
    TAutoDriver<PivotAggregates>::Bind(pintf, false);
    return *this;
  }

  PivotAggregatesDispT& operator=(PivotAggregatesPtr pintf)
  {
    TAutoDriver<PivotAggregates>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT Index/*[in]*/, 
                                                 Owc10_xp::PivotAggregate** Aggregate/*[out,retval]*/);
  Owc10_xp::PivotAggregate* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef PivotAggregatesDispT<PivotAggregates> PivotAggregatesDisp;

typedef TComInterface<PivotAggregate>  TCOMPivotAggregate;

// *********************************************************************//
// DispIntf:  PivotAggregate
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A78-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class PivotAggregateDispT : public TAutoDriver<PivotAggregate>
{
public:
  PivotAggregateDispT(){}

  PivotAggregateDispT(PivotAggregate *pintf)
  {
    TAutoDriver<PivotAggregate>::Bind(pintf, false);
  }

  PivotAggregateDispT(PivotAggregatePtr pintf)
  {
    TAutoDriver<PivotAggregate>::Bind(pintf, true);
  }

  PivotAggregateDispT& operator=(PivotAggregate *pintf)
  {
    TAutoDriver<PivotAggregate>::Bind(pintf, false);
    return *this;
  }

  PivotAggregateDispT& operator=(PivotAggregatePtr pintf)
  {
    TAutoDriver<PivotAggregate>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Text(BSTR* Text/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Cell(Owc10_xp::PivotCell** Cell/*[out,retval]*/);
  Owc10_xp::PivotCell* __fastcall get_Cell(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Total(Owc10_xp::PivotTotal** Total/*[out,retval]*/);
  Owc10_xp::PivotTotal* __fastcall get_Total(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(long* Left/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(long* Top/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(long* Width/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(long* Height/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowAsValue(VARIANT* ShowAsValue/*[out,retval]*/);
  VARIANT         __fastcall get_ShowAsValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ProviderFormattedValue(VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall get_ProviderFormattedValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ForeColor(VARIANT* Color/*[out,retval]*/);
  VARIANT         __fastcall get_ForeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackColor(VARIANT* Color/*[out,retval]*/);
  VARIANT         __fastcall get_BackColor(void);

  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Text = {read = get_Text};
  __property   Owc10_xp::PivotCell* Cell = {read = get_Cell};
  __property   Owc10_xp::PivotTotal* Total = {read = get_Total};
  __property   long            Left = {read = get_Left};
  __property   long            Top = {read = get_Top};
  __property   long            Width = {read = get_Width};
  __property   long            Height = {read = get_Height};
};
typedef PivotAggregateDispT<PivotAggregate> PivotAggregateDisp;

typedef TComInterface<PivotAxisMember>  TCOMPivotAxisMember;

// *********************************************************************//
// DispIntf:  PivotAxisMember
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1D40A583-EBA2-11D2-8F35-00600893B533}
// *********************************************************************//
template<class T>
class PivotAxisMemberDispT : public TAutoDriver<PivotAxisMember>
{
public:
  PivotAxisMemberDispT(){}

  PivotAxisMemberDispT(PivotAxisMember *pintf)
  {
    TAutoDriver<PivotAxisMember>::Bind(pintf, false);
  }

  PivotAxisMemberDispT(PivotAxisMemberPtr pintf)
  {
    TAutoDriver<PivotAxisMember>::Bind(pintf, true);
  }

  PivotAxisMemberDispT& operator=(PivotAxisMember *pintf)
  {
    TAutoDriver<PivotAxisMember>::Bind(pintf, false);
    return *this;
  }

  PivotAxisMemberDispT& operator=(PivotAxisMemberPtr pintf)
  {
    TAutoDriver<PivotAxisMember>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ChildAxisMembers(Owc10_xp::PivotAxisMembers** Members/*[out,retval]*/);
  Owc10_xp::PivotAxisMembers* __fastcall get_ChildAxisMembers(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ParentAxisMember(Owc10_xp::PivotRowMember** ParentAxisMember/*[out,retval]*/);
  Owc10_xp::PivotRowMember* __fastcall get_ParentAxisMember(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FindAxisMember(BSTR Path/*[in]*/, 
                                                           Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/
                                                           , 
                                                           Owc10_xp::PivotRowMember** Member/*[out,retval]*/);
  Owc10_xp::PivotRowMember* __fastcall get_FindAxisMember(BSTR Path/*[in]*/, 
                                                          Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TotalMember(Owc10_xp::PivotRowMember** TotalMember/*[out,retval]*/);
  Owc10_xp::PivotRowMember* __fastcall get_TotalMember(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Axis(Owc10_xp::PivotResultAxis** Axis/*[out,retval]*/);
  Owc10_xp::PivotResultAxis* __fastcall get_Axis(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Expanded(VARIANT_BOOL* Expanded/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Expanded(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Expanded(VARIANT_BOOL Expanded/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(long* Top/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(long* Left/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(long* Width/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(long Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(long* Height/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(long Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoFit(VARIANT_BOOL* AutoFit/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoFit(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoFit(VARIANT_BOOL AutoFit/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Hyperlink(Owc10_xp::PivotHyperlink** Hyperlink/*[out,retval]*/);
  Owc10_xp::PivotHyperlink* __fastcall get_Hyperlink(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MemberProperties(Owc10_xp::PivotResultMemberProperties** MemberProperties/*[out,retval]*/);
  Owc10_xp::PivotResultMemberProperties* __fastcall get_MemberProperties(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupField(Owc10_xp::PivotResultField** GroupField/*[out,retval]*/);
  Owc10_xp::PivotResultField* __fastcall get_GroupField(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ShowDetails();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall HideDetails();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsTotal(VARIANT_BOOL* IsTotal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsTotal(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SourceMember(Owc10_xp::PivotMember** SourceMember/*[out,retval]*/);
  Owc10_xp::PivotMember* __fastcall get_SourceMember(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_View(Owc10_xp::PivotView** View/*[out,retval]*/);
  Owc10_xp::PivotView* __fastcall get_View(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ChildMembers(Owc10_xp::PivotMembers** Members/*[out,retval]*/);
  Owc10_xp::PivotMembers* __fastcall get_ChildMembers(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ParentMember(Owc10_xp::PivotMember** Member/*[out,retval]*/);
  Owc10_xp::PivotMember* __fastcall get_ParentMember(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FindMember(BSTR Path/*[in]*/, 
                                                       Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/
                                                       , 
                                                       Owc10_xp::PivotMember** Member/*[out,retval]*/);
  Owc10_xp::PivotMember* __fastcall get_FindMember(BSTR Path/*[in]*/, 
                                                   Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* Caption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_UniqueName(BSTR* UniqueName/*[out,retval]*/);
  BSTR            __fastcall get_UniqueName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Field(Owc10_xp::PivotField** Field/*[out,retval]*/);
  Owc10_xp::PivotField* __fastcall get_Field(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Path(Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/
                                                 , BSTR* Path/*[out,retval]*/);
  BSTR            __fastcall get_Path(Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TimeValue(VARIANT* TimeValue/*[out,retval]*/);
  VARIANT         __fastcall get_TimeValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsValid(VARIANT_BOOL* Valid/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsValid(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CustomGroupType(Owc10_xp::PivotMemberCustomGroupTypeEnum* Type/*[out,retval]*/);
  Owc10_xp::PivotMemberCustomGroupTypeEnum __fastcall get_CustomGroupType(void);

  __property   Owc10_xp::PivotAxisMembers* ChildAxisMembers = {read = get_ChildAxisMembers};
  __property   Owc10_xp::PivotRowMember* ParentAxisMember = {read = get_ParentAxisMember};
  __property   Owc10_xp::PivotRowMember* TotalMember = {read = get_TotalMember};
  __property   Owc10_xp::PivotResultAxis* Axis = {read = get_Axis};
  __property   VARIANT_BOOL    Expanded = {read = get_Expanded, write = set_Expanded};
  __property   long            Top = {read = get_Top};
  __property   long            Left = {read = get_Left};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   VARIANT_BOOL    AutoFit = {read = get_AutoFit, write = set_AutoFit};
  __property   Owc10_xp::PivotHyperlink* Hyperlink = {read = get_Hyperlink};
  __property   Owc10_xp::PivotResultMemberProperties* MemberProperties = {read = get_MemberProperties};
  __property   Owc10_xp::PivotResultField* GroupField = {read = get_GroupField};
  __property   VARIANT_BOOL    IsTotal = {read = get_IsTotal};
  __property   Owc10_xp::PivotMember* SourceMember = {read = get_SourceMember};

  __property   Owc10_xp::PivotView* View = {read = get_View};
  __property   Owc10_xp::PivotMembers* ChildMembers = {read = get_ChildMembers};
  __property   Owc10_xp::PivotMember* ParentMember = {read = get_ParentMember};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Caption = {read = get_Caption};
  __property   BSTR            UniqueName = {read = get_UniqueName};
  __property   Owc10_xp::PivotField* Field = {read = get_Field};
  __property   VARIANT_BOOL    IsValid = {read = get_IsValid};
  __property   Owc10_xp::PivotMemberCustomGroupTypeEnum CustomGroupType = {read = get_CustomGroupType};
};
typedef PivotAxisMemberDispT<PivotAxisMember> PivotAxisMemberDisp;

typedef TComInterface<PivotRowMember>  TCOMPivotRowMember;

// *********************************************************************//
// DispIntf:  PivotRowMember
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1D40A584-EBA2-11D2-8F35-00600893B533}
// *********************************************************************//
template<class T>
class PivotRowMemberDispT : public TAutoDriver<PivotRowMember>
{
public:
  PivotRowMemberDispT(){}

  PivotRowMemberDispT(PivotRowMember *pintf)
  {
    TAutoDriver<PivotRowMember>::Bind(pintf, false);
  }

  PivotRowMemberDispT(PivotRowMemberPtr pintf)
  {
    TAutoDriver<PivotRowMember>::Bind(pintf, true);
  }

  PivotRowMemberDispT& operator=(PivotRowMember *pintf)
  {
    TAutoDriver<PivotRowMember>::Bind(pintf, false);
    return *this;
  }

  PivotRowMemberDispT& operator=(PivotRowMemberPtr pintf)
  {
    TAutoDriver<PivotRowMember>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ChildRowMembers(Owc10_xp::PivotRowMembers** Members/*[out,retval]*/);
  Owc10_xp::PivotRowMembers* __fastcall get_ChildRowMembers(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ParentRowMember(Owc10_xp::PivotAxisMember** ParentRowMember/*[out,retval]*/);
  Owc10_xp::PivotAxisMember* __fastcall get_ParentRowMember(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FindRowMember(BSTR Path/*[in]*/, 
                                                          Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/
                                                          , 
                                                          Owc10_xp::PivotAxisMember** Member/*[out,retval]*/);
  Owc10_xp::PivotAxisMember* __fastcall get_FindRowMember(BSTR Path/*[in]*/, 
                                                          Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TotalRowMember(Owc10_xp::PivotAxisMember** TotalMember/*[out,retval]*/);
  Owc10_xp::PivotAxisMember* __fastcall get_TotalRowMember(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TotalRowHeight(long* TotalRowHeight/*[out,retval]*/);
  long            __fastcall get_TotalRowHeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TotalRowHeight(long TotalRowHeight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ChildAxisMembers(Owc10_xp::PivotAxisMembers** Members/*[out,retval]*/);
  Owc10_xp::PivotAxisMembers* __fastcall get_ChildAxisMembers(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ParentAxisMember(Owc10_xp::PivotRowMember** ParentAxisMember/*[out,retval]*/);
  Owc10_xp::PivotRowMember* __fastcall get_ParentAxisMember(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FindAxisMember(BSTR Path/*[in]*/, 
                                                           Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/
                                                           , 
                                                           Owc10_xp::PivotRowMember** Member/*[out,retval]*/);
  Owc10_xp::PivotRowMember* __fastcall get_FindAxisMember(BSTR Path/*[in]*/, 
                                                          Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TotalMember(Owc10_xp::PivotRowMember** TotalMember/*[out,retval]*/);
  Owc10_xp::PivotRowMember* __fastcall get_TotalMember(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Axis(Owc10_xp::PivotResultAxis** Axis/*[out,retval]*/);
  Owc10_xp::PivotResultAxis* __fastcall get_Axis(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Expanded(VARIANT_BOOL* Expanded/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Expanded(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Expanded(VARIANT_BOOL Expanded/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(long* Top/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(long* Left/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(long* Width/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(long Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(long* Height/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(long Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoFit(VARIANT_BOOL* AutoFit/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoFit(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoFit(VARIANT_BOOL AutoFit/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Hyperlink(Owc10_xp::PivotHyperlink** Hyperlink/*[out,retval]*/);
  Owc10_xp::PivotHyperlink* __fastcall get_Hyperlink(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MemberProperties(Owc10_xp::PivotResultMemberProperties** MemberProperties/*[out,retval]*/);
  Owc10_xp::PivotResultMemberProperties* __fastcall get_MemberProperties(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupField(Owc10_xp::PivotResultField** GroupField/*[out,retval]*/);
  Owc10_xp::PivotResultField* __fastcall get_GroupField(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ShowDetails();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall HideDetails();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsTotal(VARIANT_BOOL* IsTotal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsTotal(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SourceMember(Owc10_xp::PivotMember** SourceMember/*[out,retval]*/);
  Owc10_xp::PivotMember* __fastcall get_SourceMember(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_View(Owc10_xp::PivotView** View/*[out,retval]*/);
  Owc10_xp::PivotView* __fastcall get_View(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ChildMembers(Owc10_xp::PivotMembers** Members/*[out,retval]*/);
  Owc10_xp::PivotMembers* __fastcall get_ChildMembers(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ParentMember(Owc10_xp::PivotMember** Member/*[out,retval]*/);
  Owc10_xp::PivotMember* __fastcall get_ParentMember(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FindMember(BSTR Path/*[in]*/, 
                                                       Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/
                                                       , 
                                                       Owc10_xp::PivotMember** Member/*[out,retval]*/);
  Owc10_xp::PivotMember* __fastcall get_FindMember(BSTR Path/*[in]*/, 
                                                   Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* Caption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_UniqueName(BSTR* UniqueName/*[out,retval]*/);
  BSTR            __fastcall get_UniqueName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Field(Owc10_xp::PivotField** Field/*[out,retval]*/);
  Owc10_xp::PivotField* __fastcall get_Field(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Path(Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/
                                                 , BSTR* Path/*[out,retval]*/);
  BSTR            __fastcall get_Path(Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TimeValue(VARIANT* TimeValue/*[out,retval]*/);
  VARIANT         __fastcall get_TimeValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsValid(VARIANT_BOOL* Valid/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsValid(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CustomGroupType(Owc10_xp::PivotMemberCustomGroupTypeEnum* Type/*[out,retval]*/);
  Owc10_xp::PivotMemberCustomGroupTypeEnum __fastcall get_CustomGroupType(void);

  __property   Owc10_xp::PivotRowMembers* ChildRowMembers = {read = get_ChildRowMembers};
  __property   Owc10_xp::PivotAxisMember* ParentRowMember = {read = get_ParentRowMember};
  __property   Owc10_xp::PivotAxisMember* TotalRowMember = {read = get_TotalRowMember};
  __property   long            TotalRowHeight = {read = get_TotalRowHeight, write = set_TotalRowHeight};

  __property   Owc10_xp::PivotAxisMembers* ChildAxisMembers = {read = get_ChildAxisMembers};
  __property   Owc10_xp::PivotRowMember* ParentAxisMember = {read = get_ParentAxisMember};
  __property   Owc10_xp::PivotRowMember* TotalMember = {read = get_TotalMember};
  __property   Owc10_xp::PivotResultAxis* Axis = {read = get_Axis};
  __property   VARIANT_BOOL    Expanded = {read = get_Expanded, write = set_Expanded};
  __property   long            Top = {read = get_Top};
  __property   long            Left = {read = get_Left};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   VARIANT_BOOL    AutoFit = {read = get_AutoFit, write = set_AutoFit};
  __property   Owc10_xp::PivotHyperlink* Hyperlink = {read = get_Hyperlink};
  __property   Owc10_xp::PivotResultMemberProperties* MemberProperties = {read = get_MemberProperties};
  __property   Owc10_xp::PivotResultField* GroupField = {read = get_GroupField};
  __property   VARIANT_BOOL    IsTotal = {read = get_IsTotal};
  __property   Owc10_xp::PivotMember* SourceMember = {read = get_SourceMember};

  __property   Owc10_xp::PivotView* View = {read = get_View};
  __property   Owc10_xp::PivotMembers* ChildMembers = {read = get_ChildMembers};
  __property   Owc10_xp::PivotMember* ParentMember = {read = get_ParentMember};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Caption = {read = get_Caption};
  __property   BSTR            UniqueName = {read = get_UniqueName};
  __property   Owc10_xp::PivotField* Field = {read = get_Field};
  __property   VARIANT_BOOL    IsValid = {read = get_IsValid};
  __property   Owc10_xp::PivotMemberCustomGroupTypeEnum CustomGroupType = {read = get_CustomGroupType};
};
typedef PivotRowMemberDispT<PivotRowMember> PivotRowMemberDisp;

typedef TComInterface<PivotAxisMembers>  TCOMPivotAxisMembers;

// *********************************************************************//
// DispIntf:  PivotAxisMembers
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {30971540-EEB8-11D2-8F35-00600893B533}
// *********************************************************************//
template<class T>
class PivotAxisMembersDispT : public TAutoDriver<PivotAxisMembers>
{
public:
  PivotAxisMembersDispT(){}

  PivotAxisMembersDispT(PivotAxisMembers *pintf)
  {
    TAutoDriver<PivotAxisMembers>::Bind(pintf, false);
  }

  PivotAxisMembersDispT(PivotAxisMembersPtr pintf)
  {
    TAutoDriver<PivotAxisMembers>::Bind(pintf, true);
  }

  PivotAxisMembersDispT& operator=(PivotAxisMembers *pintf)
  {
    TAutoDriver<PivotAxisMembers>::Bind(pintf, false);
    return *this;
  }

  PivotAxisMembersDispT& operator=(PivotAxisMembersPtr pintf)
  {
    TAutoDriver<PivotAxisMembers>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT Index/*[in]*/, 
                                                 Owc10_xp::PivotRowMember** Member/*[out,retval]*/);
  Owc10_xp::PivotRowMember* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef PivotAxisMembersDispT<PivotAxisMembers> PivotAxisMembersDisp;

typedef TComInterface<PivotHyperlink>  TCOMPivotHyperlink;

// *********************************************************************//
// DispIntf:  PivotHyperlink
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A9C-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class PivotHyperlinkDispT : public TAutoDriver<PivotHyperlink>
{
public:
  PivotHyperlinkDispT(){}

  PivotHyperlinkDispT(PivotHyperlink *pintf)
  {
    TAutoDriver<PivotHyperlink>::Bind(pintf, false);
  }

  PivotHyperlinkDispT(PivotHyperlinkPtr pintf)
  {
    TAutoDriver<PivotHyperlink>::Bind(pintf, true);
  }

  PivotHyperlinkDispT& operator=(PivotHyperlink *pintf)
  {
    TAutoDriver<PivotHyperlink>::Bind(pintf, false);
    return *this;
  }

  PivotHyperlinkDispT& operator=(PivotHyperlinkPtr pintf)
  {
    TAutoDriver<PivotHyperlink>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Follow(VARIANT_BOOL NewWindow/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Address(BSTR* Address/*[out,retval]*/);
  BSTR            __fastcall get_Address(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Address(BSTR Address/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SubAddress(BSTR* SubAddress/*[out,retval]*/);
  BSTR            __fastcall get_SubAddress(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SubAddress(BSTR SubAddress/*[in]*/);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Address = {read = get_Address};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            SubAddress = {read = get_SubAddress};
};
typedef PivotHyperlinkDispT<PivotHyperlink> PivotHyperlinkDisp;

typedef TComInterface<PivotResultMemberProperties>  TCOMPivotResultMemberProperties;

// *********************************************************************//
// DispIntf:  PivotResultMemberProperties
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {23E41747-B2E7-4A36-9CEB-99799D619D02}
// *********************************************************************//
template<class T>
class PivotResultMemberPropertiesDispT : public TAutoDriver<PivotResultMemberProperties>
{
public:
  PivotResultMemberPropertiesDispT(){}

  PivotResultMemberPropertiesDispT(PivotResultMemberProperties *pintf)
  {
    TAutoDriver<PivotResultMemberProperties>::Bind(pintf, false);
  }

  PivotResultMemberPropertiesDispT(PivotResultMemberPropertiesPtr pintf)
  {
    TAutoDriver<PivotResultMemberProperties>::Bind(pintf, true);
  }

  PivotResultMemberPropertiesDispT& operator=(PivotResultMemberProperties *pintf)
  {
    TAutoDriver<PivotResultMemberProperties>::Bind(pintf, false);
    return *this;
  }

  PivotResultMemberPropertiesDispT& operator=(PivotResultMemberPropertiesPtr pintf)
  {
    TAutoDriver<PivotResultMemberProperties>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT varIndex/*[in]*/, 
                                                 Owc10_xp::PivotResultMemberProperty** Item/*[out,retval]*/);
  Owc10_xp::PivotResultMemberProperty* __fastcall get_Item(VARIANT varIndex/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef PivotResultMemberPropertiesDispT<PivotResultMemberProperties> PivotResultMemberPropertiesDisp;

typedef TComInterface<PivotResultMemberProperty>  TCOMPivotResultMemberProperty;

// *********************************************************************//
// DispIntf:  PivotResultMemberProperty
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {07C8959F-2E2A-4149-B6EA-6C511B21F485}
// *********************************************************************//
template<class T>
class PivotResultMemberPropertyDispT : public TAutoDriver<PivotResultMemberProperty>
{
public:
  PivotResultMemberPropertyDispT(){}

  PivotResultMemberPropertyDispT(PivotResultMemberProperty *pintf)
  {
    TAutoDriver<PivotResultMemberProperty>::Bind(pintf, false);
  }

  PivotResultMemberPropertyDispT(PivotResultMemberPropertyPtr pintf)
  {
    TAutoDriver<PivotResultMemberProperty>::Bind(pintf, true);
  }

  PivotResultMemberPropertyDispT& operator=(PivotResultMemberProperty *pintf)
  {
    TAutoDriver<PivotResultMemberProperty>::Bind(pintf, false);
    return *this;
  }

  PivotResultMemberPropertyDispT& operator=(PivotResultMemberPropertyPtr pintf)
  {
    TAutoDriver<PivotResultMemberProperty>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* Caption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MemberProperty(Owc10_xp::PivotMemberProperty** MemberProperty/*[out,retval]*/);
  Owc10_xp::PivotMemberProperty* __fastcall get_MemberProperty(void);

  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Caption = {read = get_Caption};
  __property   Owc10_xp::PivotMemberProperty* MemberProperty = {read = get_MemberProperty};
};
typedef PivotResultMemberPropertyDispT<PivotResultMemberProperty> PivotResultMemberPropertyDisp;

typedef TComInterface<PivotResultField>  TCOMPivotResultField;

// *********************************************************************//
// DispIntf:  PivotResultField
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {682A2445-8F22-4E2D-A73B-D04E4CC273B5}
// *********************************************************************//
template<class T>
class PivotResultFieldDispT : public TAutoDriver<PivotResultField>
{
public:
  PivotResultFieldDispT(){}

  PivotResultFieldDispT(PivotResultField *pintf)
  {
    TAutoDriver<PivotResultField>::Bind(pintf, false);
  }

  PivotResultFieldDispT(PivotResultFieldPtr pintf)
  {
    TAutoDriver<PivotResultField>::Bind(pintf, true);
  }

  PivotResultFieldDispT& operator=(PivotResultField *pintf)
  {
    TAutoDriver<PivotResultField>::Bind(pintf, false);
    return *this;
  }

  PivotResultFieldDispT& operator=(PivotResultFieldPtr pintf)
  {
    TAutoDriver<PivotResultField>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SourceField(Owc10_xp::PivotField** Field/*[out,retval]*/);
  Owc10_xp::PivotField* __fastcall get_SourceField(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Axis(Owc10_xp::PivotResultGroupAxis** Axis/*[out,retval]*/);
  Owc10_xp::PivotResultGroupAxis* __fastcall get_Axis(void);

  __property   Owc10_xp::PivotField* SourceField = {read = get_SourceField};
  __property   Owc10_xp::PivotResultGroupAxis* Axis = {read = get_Axis};
};
typedef PivotResultFieldDispT<PivotResultField> PivotResultFieldDisp;

typedef TComInterface<PivotResultGroupField>  TCOMPivotResultGroupField;

// *********************************************************************//
// DispIntf:  PivotResultGroupField
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {DC0342FE-039A-4D2D-80BF-BCA659270822}
// *********************************************************************//
template<class T>
class PivotResultGroupFieldDispT : public TAutoDriver<PivotResultGroupField>
{
public:
  PivotResultGroupFieldDispT(){}

  PivotResultGroupFieldDispT(PivotResultGroupField *pintf)
  {
    TAutoDriver<PivotResultGroupField>::Bind(pintf, false);
  }

  PivotResultGroupFieldDispT(PivotResultGroupFieldPtr pintf)
  {
    TAutoDriver<PivotResultGroupField>::Bind(pintf, true);
  }

  PivotResultGroupFieldDispT& operator=(PivotResultGroupField *pintf)
  {
    TAutoDriver<PivotResultGroupField>::Bind(pintf, false);
    return *this;
  }

  PivotResultGroupFieldDispT& operator=(PivotResultGroupFieldPtr pintf)
  {
    TAutoDriver<PivotResultGroupField>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayTotal(VARIANT_BOOL* DisplayTotal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayTotal(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SourceField(Owc10_xp::PivotField** Field/*[out,retval]*/);
  Owc10_xp::PivotField* __fastcall get_SourceField(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Axis(Owc10_xp::PivotResultGroupAxis** Axis/*[out,retval]*/);
  Owc10_xp::PivotResultGroupAxis* __fastcall get_Axis(void);

  __property   VARIANT_BOOL    DisplayTotal = {read = get_DisplayTotal};

  __property   Owc10_xp::PivotField* SourceField = {read = get_SourceField};
  __property   Owc10_xp::PivotResultGroupAxis* Axis = {read = get_Axis};
};
typedef PivotResultGroupFieldDispT<PivotResultGroupField> PivotResultGroupFieldDisp;

typedef TComInterface<PivotRowMembers>  TCOMPivotRowMembers;

// *********************************************************************//
// DispIntf:  PivotRowMembers
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {30971541-EEB8-11D2-8F35-00600893B533}
// *********************************************************************//
template<class T>
class PivotRowMembersDispT : public TAutoDriver<PivotRowMembers>
{
public:
  PivotRowMembersDispT(){}

  PivotRowMembersDispT(PivotRowMembers *pintf)
  {
    TAutoDriver<PivotRowMembers>::Bind(pintf, false);
  }

  PivotRowMembersDispT(PivotRowMembersPtr pintf)
  {
    TAutoDriver<PivotRowMembers>::Bind(pintf, true);
  }

  PivotRowMembersDispT& operator=(PivotRowMembers *pintf)
  {
    TAutoDriver<PivotRowMembers>::Bind(pintf, false);
    return *this;
  }

  PivotRowMembersDispT& operator=(PivotRowMembersPtr pintf)
  {
    TAutoDriver<PivotRowMembers>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT Index/*[in]*/, 
                                                 Owc10_xp::PivotAxisMember** Member/*[out,retval]*/);
  Owc10_xp::PivotAxisMember* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef PivotRowMembersDispT<PivotRowMembers> PivotRowMembersDisp;

typedef TComInterface<PivotColumnMember>  TCOMPivotColumnMember;

// *********************************************************************//
// DispIntf:  PivotColumnMember
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1D40A585-EBA2-11D2-8F35-00600893B533}
// *********************************************************************//
template<class T>
class PivotColumnMemberDispT : public TAutoDriver<PivotColumnMember>
{
public:
  PivotColumnMemberDispT(){}

  PivotColumnMemberDispT(PivotColumnMember *pintf)
  {
    TAutoDriver<PivotColumnMember>::Bind(pintf, false);
  }

  PivotColumnMemberDispT(PivotColumnMemberPtr pintf)
  {
    TAutoDriver<PivotColumnMember>::Bind(pintf, true);
  }

  PivotColumnMemberDispT& operator=(PivotColumnMember *pintf)
  {
    TAutoDriver<PivotColumnMember>::Bind(pintf, false);
    return *this;
  }

  PivotColumnMemberDispT& operator=(PivotColumnMemberPtr pintf)
  {
    TAutoDriver<PivotColumnMember>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ChildColumnMembers(Owc10_xp::PivotColumnMembers** Members/*[out,retval]*/);
  Owc10_xp::PivotColumnMembers* __fastcall get_ChildColumnMembers(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ParentColumnMember(Owc10_xp::PivotColumnMember** ParentColumnMember/*[out,retval]*/);
  Owc10_xp::PivotColumnMember* __fastcall get_ParentColumnMember(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FindColumnMember(BSTR Path/*[in]*/, 
                                                             Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/
                                                             , 
                                                             Owc10_xp::PivotColumnMember** Member/*[out,retval]*/);
  Owc10_xp::PivotColumnMember* __fastcall get_FindColumnMember(BSTR Path/*[in]*/, 
                                                               Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TotalColumnMember(Owc10_xp::PivotColumnMember** TotalMember/*[out,retval]*/);
  Owc10_xp::PivotColumnMember* __fastcall get_TotalColumnMember(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DetailLeft(long* DetailLeft/*[out,retval]*/);
  long            __fastcall get_DetailLeft(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DetailLeft(long DetailLeft/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DetailLeftOffset(long* DetailLeftOffset/*[out,retval]*/);
  long            __fastcall get_DetailLeftOffset(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DetailLeftOffset(long DetailLeftOffset/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall MoveDetailLeft(long DetailLeft/*[in]*/, 
                                                       long DetailLeftOffset/*[in]*/, 
                                                       VARIANT_BOOL Update/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DetailsExpanded(VARIANT_BOOL* DetailsExpanded/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DetailsExpanded(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ChildAxisMembers(Owc10_xp::PivotAxisMembers** Members/*[out,retval]*/);
  Owc10_xp::PivotAxisMembers* __fastcall get_ChildAxisMembers(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ParentAxisMember(Owc10_xp::PivotRowMember** ParentAxisMember/*[out,retval]*/);
  Owc10_xp::PivotRowMember* __fastcall get_ParentAxisMember(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FindAxisMember(BSTR Path/*[in]*/, 
                                                           Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/
                                                           , 
                                                           Owc10_xp::PivotRowMember** Member/*[out,retval]*/);
  Owc10_xp::PivotRowMember* __fastcall get_FindAxisMember(BSTR Path/*[in]*/, 
                                                          Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TotalMember(Owc10_xp::PivotRowMember** TotalMember/*[out,retval]*/);
  Owc10_xp::PivotRowMember* __fastcall get_TotalMember(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Axis(Owc10_xp::PivotResultAxis** Axis/*[out,retval]*/);
  Owc10_xp::PivotResultAxis* __fastcall get_Axis(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Expanded(VARIANT_BOOL* Expanded/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Expanded(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Expanded(VARIANT_BOOL Expanded/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(long* Top/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(long* Left/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(long* Width/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(long Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(long* Height/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(long Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoFit(VARIANT_BOOL* AutoFit/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoFit(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoFit(VARIANT_BOOL AutoFit/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Hyperlink(Owc10_xp::PivotHyperlink** Hyperlink/*[out,retval]*/);
  Owc10_xp::PivotHyperlink* __fastcall get_Hyperlink(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MemberProperties(Owc10_xp::PivotResultMemberProperties** MemberProperties/*[out,retval]*/);
  Owc10_xp::PivotResultMemberProperties* __fastcall get_MemberProperties(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupField(Owc10_xp::PivotResultField** GroupField/*[out,retval]*/);
  Owc10_xp::PivotResultField* __fastcall get_GroupField(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ShowDetails();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall HideDetails();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsTotal(VARIANT_BOOL* IsTotal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsTotal(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SourceMember(Owc10_xp::PivotMember** SourceMember/*[out,retval]*/);
  Owc10_xp::PivotMember* __fastcall get_SourceMember(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_View(Owc10_xp::PivotView** View/*[out,retval]*/);
  Owc10_xp::PivotView* __fastcall get_View(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ChildMembers(Owc10_xp::PivotMembers** Members/*[out,retval]*/);
  Owc10_xp::PivotMembers* __fastcall get_ChildMembers(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ParentMember(Owc10_xp::PivotMember** Member/*[out,retval]*/);
  Owc10_xp::PivotMember* __fastcall get_ParentMember(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FindMember(BSTR Path/*[in]*/, 
                                                       Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/
                                                       , 
                                                       Owc10_xp::PivotMember** Member/*[out,retval]*/);
  Owc10_xp::PivotMember* __fastcall get_FindMember(BSTR Path/*[in]*/, 
                                                   Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* Caption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_UniqueName(BSTR* UniqueName/*[out,retval]*/);
  BSTR            __fastcall get_UniqueName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Field(Owc10_xp::PivotField** Field/*[out,retval]*/);
  Owc10_xp::PivotField* __fastcall get_Field(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Path(Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/
                                                 , BSTR* Path/*[out,retval]*/);
  BSTR            __fastcall get_Path(Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TimeValue(VARIANT* TimeValue/*[out,retval]*/);
  VARIANT         __fastcall get_TimeValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsValid(VARIANT_BOOL* Valid/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsValid(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CustomGroupType(Owc10_xp::PivotMemberCustomGroupTypeEnum* Type/*[out,retval]*/);
  Owc10_xp::PivotMemberCustomGroupTypeEnum __fastcall get_CustomGroupType(void);

  __property   Owc10_xp::PivotColumnMembers* ChildColumnMembers = {read = get_ChildColumnMembers};
  __property   Owc10_xp::PivotColumnMember* ParentColumnMember = {read = get_ParentColumnMember};
  __property   Owc10_xp::PivotColumnMember* TotalColumnMember = {read = get_TotalColumnMember};
  __property   long            DetailLeft = {read = get_DetailLeft, write = set_DetailLeft};
  __property   long            DetailLeftOffset = {read = get_DetailLeftOffset, write = set_DetailLeftOffset};
  __property   VARIANT_BOOL    DetailsExpanded = {read = get_DetailsExpanded};

  __property   Owc10_xp::PivotAxisMembers* ChildAxisMembers = {read = get_ChildAxisMembers};
  __property   Owc10_xp::PivotRowMember* ParentAxisMember = {read = get_ParentAxisMember};
  __property   Owc10_xp::PivotRowMember* TotalMember = {read = get_TotalMember};
  __property   Owc10_xp::PivotResultAxis* Axis = {read = get_Axis};
  __property   VARIANT_BOOL    Expanded = {read = get_Expanded, write = set_Expanded};
  __property   long            Top = {read = get_Top};
  __property   long            Left = {read = get_Left};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   VARIANT_BOOL    AutoFit = {read = get_AutoFit, write = set_AutoFit};
  __property   Owc10_xp::PivotHyperlink* Hyperlink = {read = get_Hyperlink};
  __property   Owc10_xp::PivotResultMemberProperties* MemberProperties = {read = get_MemberProperties};
  __property   Owc10_xp::PivotResultField* GroupField = {read = get_GroupField};
  __property   VARIANT_BOOL    IsTotal = {read = get_IsTotal};
  __property   Owc10_xp::PivotMember* SourceMember = {read = get_SourceMember};

  __property   Owc10_xp::PivotView* View = {read = get_View};
  __property   Owc10_xp::PivotMembers* ChildMembers = {read = get_ChildMembers};
  __property   Owc10_xp::PivotMember* ParentMember = {read = get_ParentMember};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Caption = {read = get_Caption};
  __property   BSTR            UniqueName = {read = get_UniqueName};
  __property   Owc10_xp::PivotField* Field = {read = get_Field};
  __property   VARIANT_BOOL    IsValid = {read = get_IsValid};
  __property   Owc10_xp::PivotMemberCustomGroupTypeEnum CustomGroupType = {read = get_CustomGroupType};
};
typedef PivotColumnMemberDispT<PivotColumnMember> PivotColumnMemberDisp;

typedef TComInterface<PivotColumnMembers>  TCOMPivotColumnMembers;

// *********************************************************************//
// DispIntf:  PivotColumnMembers
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {30971542-EEB8-11D2-8F35-00600893B533}
// *********************************************************************//
template<class T>
class PivotColumnMembersDispT : public TAutoDriver<PivotColumnMembers>
{
public:
  PivotColumnMembersDispT(){}

  PivotColumnMembersDispT(PivotColumnMembers *pintf)
  {
    TAutoDriver<PivotColumnMembers>::Bind(pintf, false);
  }

  PivotColumnMembersDispT(PivotColumnMembersPtr pintf)
  {
    TAutoDriver<PivotColumnMembers>::Bind(pintf, true);
  }

  PivotColumnMembersDispT& operator=(PivotColumnMembers *pintf)
  {
    TAutoDriver<PivotColumnMembers>::Bind(pintf, false);
    return *this;
  }

  PivotColumnMembersDispT& operator=(PivotColumnMembersPtr pintf)
  {
    TAutoDriver<PivotColumnMembers>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT Index/*[in]*/, 
                                                 Owc10_xp::PivotColumnMember** Member/*[out,retval]*/);
  Owc10_xp::PivotColumnMember* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef PivotColumnMembersDispT<PivotColumnMembers> PivotColumnMembersDisp;

typedef TComInterface<PivotDetailRange>  TCOMPivotDetailRange;

// *********************************************************************//
// DispIntf:  PivotDetailRange
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B47-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class PivotDetailRangeDispT : public TAutoDriver<PivotDetailRange>
{
public:
  PivotDetailRangeDispT(){}

  PivotDetailRangeDispT(PivotDetailRange *pintf)
  {
    TAutoDriver<PivotDetailRange>::Bind(pintf, false);
  }

  PivotDetailRangeDispT(PivotDetailRangePtr pintf)
  {
    TAutoDriver<PivotDetailRange>::Bind(pintf, true);
  }

  PivotDetailRangeDispT& operator=(PivotDetailRange *pintf)
  {
    TAutoDriver<PivotDetailRange>::Bind(pintf, false);
    return *this;
  }

  PivotDetailRangeDispT& operator=(PivotDetailRangePtr pintf)
  {
    TAutoDriver<PivotDetailRange>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Cell(Owc10_xp::PivotCell** Cell/*[out,retval]*/);
  Owc10_xp::PivotCell* __fastcall get_Cell(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TopLeft(Owc10_xp::PivotDetailCell** TopLeft/*[out,retval]*/);
  Owc10_xp::PivotDetailCell* __fastcall get_TopLeft(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BottomRight(Owc10_xp::PivotDetailCell** BottomRight/*[out,retval]*/);
  Owc10_xp::PivotDetailCell* __fastcall get_BottomRight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Fields(Owc10_xp::PivotFields** ppPF/*[out,retval]*/);
  Owc10_xp::PivotFields* __fastcall get_Fields(void);

  __property   Owc10_xp::PivotCell* Cell = {read = get_Cell};
  __property   Owc10_xp::PivotDetailCell* TopLeft = {read = get_TopLeft};
  __property   Owc10_xp::PivotDetailCell* BottomRight = {read = get_BottomRight};
  __property   Owc10_xp::PivotFields* Fields = {read = get_Fields};
};
typedef PivotDetailRangeDispT<PivotDetailRange> PivotDetailRangeDisp;

typedef TComInterface<PivotPageMember>  TCOMPivotPageMember;

// *********************************************************************//
// DispIntf:  PivotPageMember
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C575AE1E-3959-441A-BED4-D3DEA9EB8037}
// *********************************************************************//
template<class T>
class PivotPageMemberDispT : public TAutoDriver<PivotPageMember>
{
public:
  PivotPageMemberDispT(){}

  PivotPageMemberDispT(PivotPageMember *pintf)
  {
    TAutoDriver<PivotPageMember>::Bind(pintf, false);
  }

  PivotPageMemberDispT(PivotPageMemberPtr pintf)
  {
    TAutoDriver<PivotPageMember>::Bind(pintf, true);
  }

  PivotPageMemberDispT& operator=(PivotPageMember *pintf)
  {
    TAutoDriver<PivotPageMember>::Bind(pintf, false);
    return *this;
  }

  PivotPageMemberDispT& operator=(PivotPageMemberPtr pintf)
  {
    TAutoDriver<PivotPageMember>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ChildPageMembers(Owc10_xp::PivotPageMembers** Members/*[out,retval]*/);
  Owc10_xp::PivotPageMembers* __fastcall get_ChildPageMembers(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ParentPageMember(Owc10_xp::PivotPageMember** ParentPageMember/*[out,retval]*/);
  Owc10_xp::PivotPageMember* __fastcall get_ParentPageMember(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FindPageMember(BSTR Path/*[in]*/, 
                                                           Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/
                                                           , 
                                                           Owc10_xp::PivotPageMember** Member/*[out,retval]*/);
  Owc10_xp::PivotPageMember* __fastcall get_FindPageMember(BSTR Path/*[in]*/, 
                                                           Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TotalPageMember(Owc10_xp::PivotPageMember** TotalMember/*[out,retval]*/);
  Owc10_xp::PivotPageMember* __fastcall get_TotalPageMember(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ChildAxisMembers(Owc10_xp::PivotAxisMembers** Members/*[out,retval]*/);
  Owc10_xp::PivotAxisMembers* __fastcall get_ChildAxisMembers(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ParentAxisMember(Owc10_xp::PivotRowMember** ParentAxisMember/*[out,retval]*/);
  Owc10_xp::PivotRowMember* __fastcall get_ParentAxisMember(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FindAxisMember(BSTR Path/*[in]*/, 
                                                           Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/
                                                           , 
                                                           Owc10_xp::PivotRowMember** Member/*[out,retval]*/);
  Owc10_xp::PivotRowMember* __fastcall get_FindAxisMember(BSTR Path/*[in]*/, 
                                                          Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TotalMember(Owc10_xp::PivotRowMember** TotalMember/*[out,retval]*/);
  Owc10_xp::PivotRowMember* __fastcall get_TotalMember(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Axis(Owc10_xp::PivotResultAxis** Axis/*[out,retval]*/);
  Owc10_xp::PivotResultAxis* __fastcall get_Axis(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Expanded(VARIANT_BOOL* Expanded/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Expanded(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Expanded(VARIANT_BOOL Expanded/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(long* Top/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(long* Left/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(long* Width/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(long Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(long* Height/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(long Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoFit(VARIANT_BOOL* AutoFit/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoFit(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoFit(VARIANT_BOOL AutoFit/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Hyperlink(Owc10_xp::PivotHyperlink** Hyperlink/*[out,retval]*/);
  Owc10_xp::PivotHyperlink* __fastcall get_Hyperlink(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MemberProperties(Owc10_xp::PivotResultMemberProperties** MemberProperties/*[out,retval]*/);
  Owc10_xp::PivotResultMemberProperties* __fastcall get_MemberProperties(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupField(Owc10_xp::PivotResultField** GroupField/*[out,retval]*/);
  Owc10_xp::PivotResultField* __fastcall get_GroupField(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ShowDetails();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall HideDetails();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsTotal(VARIANT_BOOL* IsTotal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsTotal(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SourceMember(Owc10_xp::PivotMember** SourceMember/*[out,retval]*/);
  Owc10_xp::PivotMember* __fastcall get_SourceMember(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_View(Owc10_xp::PivotView** View/*[out,retval]*/);
  Owc10_xp::PivotView* __fastcall get_View(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ChildMembers(Owc10_xp::PivotMembers** Members/*[out,retval]*/);
  Owc10_xp::PivotMembers* __fastcall get_ChildMembers(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ParentMember(Owc10_xp::PivotMember** Member/*[out,retval]*/);
  Owc10_xp::PivotMember* __fastcall get_ParentMember(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FindMember(BSTR Path/*[in]*/, 
                                                       Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/
                                                       , 
                                                       Owc10_xp::PivotMember** Member/*[out,retval]*/);
  Owc10_xp::PivotMember* __fastcall get_FindMember(BSTR Path/*[in]*/, 
                                                   Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* Caption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_UniqueName(BSTR* UniqueName/*[out,retval]*/);
  BSTR            __fastcall get_UniqueName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Field(Owc10_xp::PivotField** Field/*[out,retval]*/);
  Owc10_xp::PivotField* __fastcall get_Field(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Path(Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/
                                                 , BSTR* Path/*[out,retval]*/);
  BSTR            __fastcall get_Path(Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TimeValue(VARIANT* TimeValue/*[out,retval]*/);
  VARIANT         __fastcall get_TimeValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsValid(VARIANT_BOOL* Valid/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsValid(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CustomGroupType(Owc10_xp::PivotMemberCustomGroupTypeEnum* Type/*[out,retval]*/);
  Owc10_xp::PivotMemberCustomGroupTypeEnum __fastcall get_CustomGroupType(void);

  __property   Owc10_xp::PivotPageMembers* ChildPageMembers = {read = get_ChildPageMembers};
  __property   Owc10_xp::PivotPageMember* ParentPageMember = {read = get_ParentPageMember};
  __property   Owc10_xp::PivotPageMember* TotalPageMember = {read = get_TotalPageMember};

  __property   Owc10_xp::PivotAxisMembers* ChildAxisMembers = {read = get_ChildAxisMembers};
  __property   Owc10_xp::PivotRowMember* ParentAxisMember = {read = get_ParentAxisMember};
  __property   Owc10_xp::PivotRowMember* TotalMember = {read = get_TotalMember};
  __property   Owc10_xp::PivotResultAxis* Axis = {read = get_Axis};
  __property   VARIANT_BOOL    Expanded = {read = get_Expanded, write = set_Expanded};
  __property   long            Top = {read = get_Top};
  __property   long            Left = {read = get_Left};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   VARIANT_BOOL    AutoFit = {read = get_AutoFit, write = set_AutoFit};
  __property   Owc10_xp::PivotHyperlink* Hyperlink = {read = get_Hyperlink};
  __property   Owc10_xp::PivotResultMemberProperties* MemberProperties = {read = get_MemberProperties};
  __property   Owc10_xp::PivotResultField* GroupField = {read = get_GroupField};
  __property   VARIANT_BOOL    IsTotal = {read = get_IsTotal};
  __property   Owc10_xp::PivotMember* SourceMember = {read = get_SourceMember};

  __property   Owc10_xp::PivotView* View = {read = get_View};
  __property   Owc10_xp::PivotMembers* ChildMembers = {read = get_ChildMembers};
  __property   Owc10_xp::PivotMember* ParentMember = {read = get_ParentMember};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Caption = {read = get_Caption};
  __property   BSTR            UniqueName = {read = get_UniqueName};
  __property   Owc10_xp::PivotField* Field = {read = get_Field};
  __property   VARIANT_BOOL    IsValid = {read = get_IsValid};
  __property   Owc10_xp::PivotMemberCustomGroupTypeEnum CustomGroupType = {read = get_CustomGroupType};
};
typedef PivotPageMemberDispT<PivotPageMember> PivotPageMemberDisp;

typedef TComInterface<PivotPageMembers>  TCOMPivotPageMembers;

// *********************************************************************//
// DispIntf:  PivotPageMembers
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E3AB2FF8-B95F-4C05-BF3F-6E9BA007F81C}
// *********************************************************************//
template<class T>
class PivotPageMembersDispT : public TAutoDriver<PivotPageMembers>
{
public:
  PivotPageMembersDispT(){}

  PivotPageMembersDispT(PivotPageMembers *pintf)
  {
    TAutoDriver<PivotPageMembers>::Bind(pintf, false);
  }

  PivotPageMembersDispT(PivotPageMembersPtr pintf)
  {
    TAutoDriver<PivotPageMembers>::Bind(pintf, true);
  }

  PivotPageMembersDispT& operator=(PivotPageMembers *pintf)
  {
    TAutoDriver<PivotPageMembers>::Bind(pintf, false);
    return *this;
  }

  PivotPageMembersDispT& operator=(PivotPageMembersPtr pintf)
  {
    TAutoDriver<PivotPageMembers>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT Index/*[in]*/, 
                                                 Owc10_xp::PivotPageMember** Member/*[out,retval]*/);
  Owc10_xp::PivotPageMember* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef PivotPageMembersDispT<PivotPageMembers> PivotPageMembersDisp;

typedef TComInterface<DropSource>  TCOMDropSource;

// *********************************************************************//
// DispIntf:  DropSource
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D6CE4620-E224-11D2-8F35-00600893B533}
// *********************************************************************//
template<class T>
class DropSourceDispT : public TAutoDriver<DropSource>
{
public:
  DropSourceDispT(){}

  DropSourceDispT(DropSource *pintf)
  {
    TAutoDriver<DropSource>::Bind(pintf, false);
  }

  DropSourceDispT(DropSourcePtr pintf)
  {
    TAutoDriver<DropSource>::Bind(pintf, true);
  }

  DropSourceDispT& operator=(DropSource *pintf)
  {
    TAutoDriver<DropSource>::Bind(pintf, false);
    return *this;
  }

  DropSourceDispT& operator=(DropSourcePtr pintf)
  {
    TAutoDriver<DropSource>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall GiveFeedback(unsigned_long dwEffect);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall QueryContinueDrag(VARIANT_BOOL EscapePressed, long KeyState);

};
typedef DropSourceDispT<DropSource> DropSourceDisp;

typedef TComInterface<DropTarget>  TCOMDropTarget;

// *********************************************************************//
// DispIntf:  DropTarget
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {77186960-CDB1-11D2-8F2E-00600893B533}
// *********************************************************************//
template<class T>
class DropTargetDispT : public TAutoDriver<DropTarget>
{
public:
  DropTargetDispT(){}

  DropTargetDispT(DropTarget *pintf)
  {
    TAutoDriver<DropTarget>::Bind(pintf, false);
  }

  DropTargetDispT(DropTargetPtr pintf)
  {
    TAutoDriver<DropTarget>::Bind(pintf, true);
  }

  DropTargetDispT& operator=(DropTarget *pintf)
  {
    TAutoDriver<DropTarget>::Bind(pintf, false);
    return *this;
  }

  DropTargetDispT& operator=(DropTargetPtr pintf)
  {
    TAutoDriver<DropTarget>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall DragEnter(long x/*[in]*/, long y/*[in]*/, 
                                                  long KeyState/*[in]*/, 
                                                  unsigned_long* Effect/*[in,out]*/, 
                                                  LPDISPATCH Object/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DragOver(long x/*[in]*/, long y/*[in]*/, 
                                                 long KeyState/*[in]*/, 
                                                 unsigned_long* Effect/*[in,out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DragLeave();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Drop(long x/*[in]*/, long y/*[in]*/, long KeyState/*[in]*/, 
                                             unsigned_long* Effect/*[in,out]*/);

};
typedef DropTargetDispT<DropTarget> DropTargetDisp;

typedef TComInterface<OCCommands>  TCOMOCCommands;

// *********************************************************************//
// DispIntf:  OCCommands
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {85FE02E2-51A7-11D3-BE84-0050041DB15A}
// *********************************************************************//
template<class T>
class OCCommandsDispT : public TAutoDriver<OCCommands>
{
public:
  OCCommandsDispT(){}

  OCCommandsDispT(OCCommands *pintf)
  {
    TAutoDriver<OCCommands>::Bind(pintf, false);
  }

  OCCommandsDispT(OCCommandsPtr pintf)
  {
    TAutoDriver<OCCommands>::Bind(pintf, true);
  }

  OCCommandsDispT& operator=(OCCommands *pintf)
  {
    TAutoDriver<OCCommands>::Bind(pintf, false);
    return *this;
  }

  OCCommandsDispT& operator=(OCCommandsPtr pintf)
  {
    TAutoDriver<OCCommands>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT Index/*[in]*/, 
                                                 Owc10_xp::OCCommand** Item/*[out,retval]*/);
  Owc10_xp::OCCommand* __fastcall get_Item(VARIANT Index/*[in]*/);

};
typedef OCCommandsDispT<OCCommands> OCCommandsDisp;

typedef TComInterface<OCCommand>  TCOMOCCommand;

// *********************************************************************//
// DispIntf:  OCCommand
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B9B7C776-51A7-11D3-BE84-0050041DB15A}
// *********************************************************************//
template<class T>
class OCCommandDispT : public TAutoDriver<OCCommand>
{
public:
  OCCommandDispT(){}

  OCCommandDispT(OCCommand *pintf)
  {
    TAutoDriver<OCCommand>::Bind(pintf, false);
  }

  OCCommandDispT(OCCommandPtr pintf)
  {
    TAutoDriver<OCCommand>::Bind(pintf, true);
  }

  OCCommandDispT& operator=(OCCommand *pintf)
  {
    TAutoDriver<OCCommand>::Bind(pintf, false);
    return *this;
  }

  OCCommandDispT& operator=(OCCommandPtr pintf)
  {
    TAutoDriver<OCCommand>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Checked(VARIANT_BOOL* Checked/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Checked(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TipText(BSTR* TipText/*[out,retval]*/);
  BSTR            __fastcall get_TipText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Execute();

  __property   VARIANT_BOOL    Enabled = {read = get_Enabled};
  __property   VARIANT_BOOL    Checked = {read = get_Checked};
  __property   BSTR            TipText = {read = get_TipText};
};
typedef OCCommandDispT<OCCommand> OCCommandDisp;

typedef TComInterface<PivotResultRowAxis>  TCOMPivotResultRowAxis;

// *********************************************************************//
// DispIntf:  PivotResultRowAxis
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2C8CED11-01AF-11D3-8F35-00600893B533}
// *********************************************************************//
template<class T>
class PivotResultRowAxisDispT : public TAutoDriver<PivotResultRowAxis>
{
public:
  PivotResultRowAxisDispT(){}

  PivotResultRowAxisDispT(PivotResultRowAxis *pintf)
  {
    TAutoDriver<PivotResultRowAxis>::Bind(pintf, false);
  }

  PivotResultRowAxisDispT(PivotResultRowAxisPtr pintf)
  {
    TAutoDriver<PivotResultRowAxis>::Bind(pintf, true);
  }

  PivotResultRowAxisDispT& operator=(PivotResultRowAxis *pintf)
  {
    TAutoDriver<PivotResultRowAxis>::Bind(pintf, false);
    return *this;
  }

  PivotResultRowAxisDispT& operator=(PivotResultRowAxisPtr pintf)
  {
    TAutoDriver<PivotResultRowAxis>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SourceRowAxis(Owc10_xp::PivotAxis** Axis/*[out,retval]*/);
  Owc10_xp::PivotAxis* __fastcall get_SourceRowAxis(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RowMember(Owc10_xp::PivotAxisMember** Member/*[out,retval]*/);
  Owc10_xp::PivotAxisMember* __fastcall get_RowMember(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Fields(Owc10_xp::PivotFields** Fields/*[out,retval]*/);
  Owc10_xp::PivotFields* __fastcall get_Fields(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupFields(Owc10_xp::PivotResultGroupFields** GroupFields/*[out,retval]*/);
  Owc10_xp::PivotResultGroupFields* __fastcall get_GroupFields(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Member(Owc10_xp::PivotRowMember** Member/*[out,retval]*/);
  Owc10_xp::PivotRowMember* __fastcall get_Member(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Data(Owc10_xp::PivotData** Data/*[out,retval]*/);
  Owc10_xp::PivotData* __fastcall get_Data(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SourceAxis(Owc10_xp::PivotGroupAxis** Axis/*[out,retval]*/);
  Owc10_xp::PivotGroupAxis* __fastcall get_SourceAxis(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Label(Owc10_xp::PivotResultLabel** Label/*[out,retval]*/);
  Owc10_xp::PivotResultLabel* __fastcall get_Label(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(long* Left/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(long* Top/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(long* Width/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(long* Height/*[out,retval]*/);
  long            __fastcall get_Height(void);

  __property   Owc10_xp::PivotAxis* SourceRowAxis = {read = get_SourceRowAxis};
  __property   Owc10_xp::PivotAxisMember* RowMember = {read = get_RowMember};

  __property   Owc10_xp::PivotFields* Fields = {read = get_Fields};
  __property   Owc10_xp::PivotResultGroupFields* GroupFields = {read = get_GroupFields};
  __property   Owc10_xp::PivotRowMember* Member = {read = get_Member};

  __property   Owc10_xp::PivotData* Data = {read = get_Data};
  __property   Owc10_xp::PivotGroupAxis* SourceAxis = {read = get_SourceAxis};
  __property   Owc10_xp::PivotResultLabel* Label = {read = get_Label};
  __property   long            Left = {read = get_Left};
  __property   long            Top = {read = get_Top};
  __property   long            Width = {read = get_Width};
  __property   long            Height = {read = get_Height};
};
typedef PivotResultRowAxisDispT<PivotResultRowAxis> PivotResultRowAxisDisp;

typedef TComInterface<PivotResultColumnAxis>  TCOMPivotResultColumnAxis;

// *********************************************************************//
// DispIntf:  PivotResultColumnAxis
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2C8CED12-01AF-11D3-8F35-00600893B533}
// *********************************************************************//
template<class T>
class PivotResultColumnAxisDispT : public TAutoDriver<PivotResultColumnAxis>
{
public:
  PivotResultColumnAxisDispT(){}

  PivotResultColumnAxisDispT(PivotResultColumnAxis *pintf)
  {
    TAutoDriver<PivotResultColumnAxis>::Bind(pintf, false);
  }

  PivotResultColumnAxisDispT(PivotResultColumnAxisPtr pintf)
  {
    TAutoDriver<PivotResultColumnAxis>::Bind(pintf, true);
  }

  PivotResultColumnAxisDispT& operator=(PivotResultColumnAxis *pintf)
  {
    TAutoDriver<PivotResultColumnAxis>::Bind(pintf, false);
    return *this;
  }

  PivotResultColumnAxisDispT& operator=(PivotResultColumnAxisPtr pintf)
  {
    TAutoDriver<PivotResultColumnAxis>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SourceColumnAxis(Owc10_xp::PivotAxis** Axis/*[out,retval]*/);
  Owc10_xp::PivotAxis* __fastcall get_SourceColumnAxis(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnMember(Owc10_xp::PivotColumnMember** Member/*[out,retval]*/);
  Owc10_xp::PivotColumnMember* __fastcall get_ColumnMember(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Fields(Owc10_xp::PivotFields** Fields/*[out,retval]*/);
  Owc10_xp::PivotFields* __fastcall get_Fields(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupFields(Owc10_xp::PivotResultGroupFields** GroupFields/*[out,retval]*/);
  Owc10_xp::PivotResultGroupFields* __fastcall get_GroupFields(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Member(Owc10_xp::PivotRowMember** Member/*[out,retval]*/);
  Owc10_xp::PivotRowMember* __fastcall get_Member(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Data(Owc10_xp::PivotData** Data/*[out,retval]*/);
  Owc10_xp::PivotData* __fastcall get_Data(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SourceAxis(Owc10_xp::PivotGroupAxis** Axis/*[out,retval]*/);
  Owc10_xp::PivotGroupAxis* __fastcall get_SourceAxis(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Label(Owc10_xp::PivotResultLabel** Label/*[out,retval]*/);
  Owc10_xp::PivotResultLabel* __fastcall get_Label(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(long* Left/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(long* Top/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(long* Width/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(long* Height/*[out,retval]*/);
  long            __fastcall get_Height(void);

  __property   Owc10_xp::PivotAxis* SourceColumnAxis = {read = get_SourceColumnAxis};
  __property   Owc10_xp::PivotColumnMember* ColumnMember = {read = get_ColumnMember};

  __property   Owc10_xp::PivotFields* Fields = {read = get_Fields};
  __property   Owc10_xp::PivotResultGroupFields* GroupFields = {read = get_GroupFields};
  __property   Owc10_xp::PivotRowMember* Member = {read = get_Member};

  __property   Owc10_xp::PivotData* Data = {read = get_Data};
  __property   Owc10_xp::PivotGroupAxis* SourceAxis = {read = get_SourceAxis};
  __property   Owc10_xp::PivotResultLabel* Label = {read = get_Label};
  __property   long            Left = {read = get_Left};
  __property   long            Top = {read = get_Top};
  __property   long            Width = {read = get_Width};
  __property   long            Height = {read = get_Height};
};
typedef PivotResultColumnAxisDispT<PivotResultColumnAxis> PivotResultColumnAxisDisp;

typedef TComInterface<PivotResultFilterAxis>  TCOMPivotResultFilterAxis;

// *********************************************************************//
// DispIntf:  PivotResultFilterAxis
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2C8CED13-01AF-11D3-8F35-00600893B533}
// *********************************************************************//
template<class T>
class PivotResultFilterAxisDispT : public TAutoDriver<PivotResultFilterAxis>
{
public:
  PivotResultFilterAxisDispT(){}

  PivotResultFilterAxisDispT(PivotResultFilterAxis *pintf)
  {
    TAutoDriver<PivotResultFilterAxis>::Bind(pintf, false);
  }

  PivotResultFilterAxisDispT(PivotResultFilterAxisPtr pintf)
  {
    TAutoDriver<PivotResultFilterAxis>::Bind(pintf, true);
  }

  PivotResultFilterAxisDispT& operator=(PivotResultFilterAxis *pintf)
  {
    TAutoDriver<PivotResultFilterAxis>::Bind(pintf, false);
    return *this;
  }

  PivotResultFilterAxisDispT& operator=(PivotResultFilterAxisPtr pintf)
  {
    TAutoDriver<PivotResultFilterAxis>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SourceFilterAxis(Owc10_xp::PivotFilterAxis** Axis/*[out,retval]*/);
  Owc10_xp::PivotFilterAxis* __fastcall get_SourceFilterAxis(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FieldSets(Owc10_xp::PivotFieldSets** FieldSets/*[out,retval]*/);
  Owc10_xp::PivotFieldSets* __fastcall get_FieldSets(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Data(Owc10_xp::PivotData** Data/*[out,retval]*/);
  Owc10_xp::PivotData* __fastcall get_Data(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SourceAxis(Owc10_xp::PivotGroupAxis** Axis/*[out,retval]*/);
  Owc10_xp::PivotGroupAxis* __fastcall get_SourceAxis(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Label(Owc10_xp::PivotResultLabel** Label/*[out,retval]*/);
  Owc10_xp::PivotResultLabel* __fastcall get_Label(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(long* Left/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(long* Top/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(long* Width/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(long* Height/*[out,retval]*/);
  long            __fastcall get_Height(void);

  __property   Owc10_xp::PivotFilterAxis* SourceFilterAxis = {read = get_SourceFilterAxis};
  __property   Owc10_xp::PivotFieldSets* FieldSets = {read = get_FieldSets};

  __property   Owc10_xp::PivotData* Data = {read = get_Data};
  __property   Owc10_xp::PivotGroupAxis* SourceAxis = {read = get_SourceAxis};
  __property   Owc10_xp::PivotResultLabel* Label = {read = get_Label};
  __property   long            Left = {read = get_Left};
  __property   long            Top = {read = get_Top};
  __property   long            Width = {read = get_Width};
  __property   long            Height = {read = get_Height};
};
typedef PivotResultFilterAxisDispT<PivotResultFilterAxis> PivotResultFilterAxisDisp;

typedef TComInterface<PivotResultDataAxis>  TCOMPivotResultDataAxis;

// *********************************************************************//
// DispIntf:  PivotResultDataAxis
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2C8CED15-01AF-11D3-8F35-00600893B533}
// *********************************************************************//
template<class T>
class PivotResultDataAxisDispT : public TAutoDriver<PivotResultDataAxis>
{
public:
  PivotResultDataAxisDispT(){}

  PivotResultDataAxisDispT(PivotResultDataAxis *pintf)
  {
    TAutoDriver<PivotResultDataAxis>::Bind(pintf, false);
  }

  PivotResultDataAxisDispT(PivotResultDataAxisPtr pintf)
  {
    TAutoDriver<PivotResultDataAxis>::Bind(pintf, true);
  }

  PivotResultDataAxisDispT& operator=(PivotResultDataAxis *pintf)
  {
    TAutoDriver<PivotResultDataAxis>::Bind(pintf, false);
    return *this;
  }

  PivotResultDataAxisDispT& operator=(PivotResultDataAxisPtr pintf)
  {
    TAutoDriver<PivotResultDataAxis>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SourceDataAxis(Owc10_xp::PivotDataAxis** Axis/*[out,retval]*/);
  Owc10_xp::PivotDataAxis* __fastcall get_SourceDataAxis(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Fields(Owc10_xp::PivotFields** Fields/*[out,retval]*/);
  Owc10_xp::PivotFields* __fastcall get_Fields(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Totals(Owc10_xp::PivotTotals** Totals/*[out,retval]*/);
  Owc10_xp::PivotTotals* __fastcall get_Totals(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Data(Owc10_xp::PivotData** Data/*[out,retval]*/);
  Owc10_xp::PivotData* __fastcall get_Data(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SourceAxis(Owc10_xp::PivotGroupAxis** Axis/*[out,retval]*/);
  Owc10_xp::PivotGroupAxis* __fastcall get_SourceAxis(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Label(Owc10_xp::PivotResultLabel** Label/*[out,retval]*/);
  Owc10_xp::PivotResultLabel* __fastcall get_Label(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(long* Left/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(long* Top/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(long* Width/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(long* Height/*[out,retval]*/);
  long            __fastcall get_Height(void);

  __property   Owc10_xp::PivotDataAxis* SourceDataAxis = {read = get_SourceDataAxis};
  __property   Owc10_xp::PivotFields* Fields = {read = get_Fields};
  __property   Owc10_xp::PivotTotals* Totals = {read = get_Totals};

  __property   Owc10_xp::PivotData* Data = {read = get_Data};
  __property   Owc10_xp::PivotGroupAxis* SourceAxis = {read = get_SourceAxis};
  __property   Owc10_xp::PivotResultLabel* Label = {read = get_Label};
  __property   long            Left = {read = get_Left};
  __property   long            Top = {read = get_Top};
  __property   long            Width = {read = get_Width};
  __property   long            Height = {read = get_Height};
};
typedef PivotResultDataAxisDispT<PivotResultDataAxis> PivotResultDataAxisDisp;

typedef TComInterface<PivotRange>  TCOMPivotRange;

// *********************************************************************//
// DispIntf:  PivotRange
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B4A-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class PivotRangeDispT : public TAutoDriver<PivotRange>
{
public:
  PivotRangeDispT(){}

  PivotRangeDispT(PivotRange *pintf)
  {
    TAutoDriver<PivotRange>::Bind(pintf, false);
  }

  PivotRangeDispT(PivotRangePtr pintf)
  {
    TAutoDriver<PivotRange>::Bind(pintf, true);
  }

  PivotRangeDispT& operator=(PivotRange *pintf)
  {
    TAutoDriver<PivotRange>::Bind(pintf, false);
    return *this;
  }

  PivotRangeDispT& operator=(PivotRangePtr pintf)
  {
    TAutoDriver<PivotRange>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TopLeft(Owc10_xp::PivotCell** Cell/*[out,retval]*/);
  Owc10_xp::PivotCell* __fastcall get_TopLeft(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BottomRight(Owc10_xp::PivotCell** Cell/*[out,retval]*/);
  Owc10_xp::PivotCell* __fastcall get_BottomRight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RowMembers(Owc10_xp::PivotRowMembers** RowMembers/*[out,retval]*/);
  Owc10_xp::PivotRowMembers* __fastcall get_RowMembers(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnMembers(Owc10_xp::PivotColumnMembers** ColumnMembers/*[out,retval]*/);
  Owc10_xp::PivotColumnMembers* __fastcall get_ColumnMembers(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Cells(Owc10_xp::PivotAxisMember* Row/*[in]*/, 
                                                  Owc10_xp::PivotColumnMember* Column/*[in]*/, 
                                                  Owc10_xp::PivotCell** Cell/*[out,retval]*/);
  Owc10_xp::PivotCell* __fastcall get_Cells(Owc10_xp::PivotAxisMember* Row/*[in]*/, 
                                            Owc10_xp::PivotColumnMember* Column/*[in]*/);

  __property   Owc10_xp::PivotCell* TopLeft = {read = get_TopLeft};
  __property   Owc10_xp::PivotCell* BottomRight = {read = get_BottomRight};
  __property   Owc10_xp::PivotRowMembers* RowMembers = {read = get_RowMembers};
  __property   Owc10_xp::PivotColumnMembers* ColumnMembers = {read = get_ColumnMembers};
};
typedef PivotRangeDispT<PivotRange> PivotRangeDisp;

typedef TComInterface<PivotResultLabel>  TCOMPivotResultLabel;

// *********************************************************************//
// DispIntf:  PivotResultLabel
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D5A2B201-0334-11D3-8F39-00600893B533}
// *********************************************************************//
template<class T>
class PivotResultLabelDispT : public TAutoDriver<PivotResultLabel>
{
public:
  PivotResultLabelDispT(){}

  PivotResultLabelDispT(PivotResultLabel *pintf)
  {
    TAutoDriver<PivotResultLabel>::Bind(pintf, false);
  }

  PivotResultLabelDispT(PivotResultLabelPtr pintf)
  {
    TAutoDriver<PivotResultLabel>::Bind(pintf, true);
  }

  PivotResultLabelDispT& operator=(PivotResultLabel *pintf)
  {
    TAutoDriver<PivotResultLabel>::Bind(pintf, false);
    return *this;
  }

  PivotResultLabelDispT& operator=(PivotResultLabelPtr pintf)
  {
    TAutoDriver<PivotResultLabel>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SourceLabel(Owc10_xp::PivotLabel** SourceLabel/*[out,retval]*/);
  Owc10_xp::PivotLabel* __fastcall get_SourceLabel(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(long* Top/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(long* Left/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(long* Width/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(long* Height/*[out,retval]*/);
  long            __fastcall get_Height(void);

  __property   Owc10_xp::PivotLabel* SourceLabel = {read = get_SourceLabel};
  __property   long            Top = {read = get_Top};
  __property   long            Left = {read = get_Left};
  __property   long            Width = {read = get_Width};
  __property   long            Height = {read = get_Height};
};
typedef PivotResultLabelDispT<PivotResultLabel> PivotResultLabelDisp;

typedef TComInterface<PivotResultPageAxis>  TCOMPivotResultPageAxis;

// *********************************************************************//
// DispIntf:  PivotResultPageAxis
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2719FF1C-6999-4C17-94B3-887FCA2DCFA0}
// *********************************************************************//
template<class T>
class PivotResultPageAxisDispT : public TAutoDriver<PivotResultPageAxis>
{
public:
  PivotResultPageAxisDispT(){}

  PivotResultPageAxisDispT(PivotResultPageAxis *pintf)
  {
    TAutoDriver<PivotResultPageAxis>::Bind(pintf, false);
  }

  PivotResultPageAxisDispT(PivotResultPageAxisPtr pintf)
  {
    TAutoDriver<PivotResultPageAxis>::Bind(pintf, true);
  }

  PivotResultPageAxisDispT& operator=(PivotResultPageAxis *pintf)
  {
    TAutoDriver<PivotResultPageAxis>::Bind(pintf, false);
    return *this;
  }

  PivotResultPageAxisDispT& operator=(PivotResultPageAxisPtr pintf)
  {
    TAutoDriver<PivotResultPageAxis>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SourcePageAxis(Owc10_xp::PivotAxis** Axis/*[out,retval]*/);
  Owc10_xp::PivotAxis* __fastcall get_SourcePageAxis(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PageMember(Owc10_xp::PivotPageMember** Member/*[out,retval]*/);
  Owc10_xp::PivotPageMember* __fastcall get_PageMember(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Fields(Owc10_xp::PivotFields** Fields/*[out,retval]*/);
  Owc10_xp::PivotFields* __fastcall get_Fields(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupFields(Owc10_xp::PivotResultGroupFields** GroupFields/*[out,retval]*/);
  Owc10_xp::PivotResultGroupFields* __fastcall get_GroupFields(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Member(Owc10_xp::PivotRowMember** Member/*[out,retval]*/);
  Owc10_xp::PivotRowMember* __fastcall get_Member(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Data(Owc10_xp::PivotData** Data/*[out,retval]*/);
  Owc10_xp::PivotData* __fastcall get_Data(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SourceAxis(Owc10_xp::PivotGroupAxis** Axis/*[out,retval]*/);
  Owc10_xp::PivotGroupAxis* __fastcall get_SourceAxis(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Label(Owc10_xp::PivotResultLabel** Label/*[out,retval]*/);
  Owc10_xp::PivotResultLabel* __fastcall get_Label(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(long* Left/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(long* Top/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(long* Width/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(long* Height/*[out,retval]*/);
  long            __fastcall get_Height(void);

  __property   Owc10_xp::PivotAxis* SourcePageAxis = {read = get_SourcePageAxis};
  __property   Owc10_xp::PivotPageMember* PageMember = {read = get_PageMember};

  __property   Owc10_xp::PivotFields* Fields = {read = get_Fields};
  __property   Owc10_xp::PivotResultGroupFields* GroupFields = {read = get_GroupFields};
  __property   Owc10_xp::PivotRowMember* Member = {read = get_Member};

  __property   Owc10_xp::PivotData* Data = {read = get_Data};
  __property   Owc10_xp::PivotGroupAxis* SourceAxis = {read = get_SourceAxis};
  __property   Owc10_xp::PivotResultLabel* Label = {read = get_Label};
  __property   long            Left = {read = get_Left};
  __property   long            Top = {read = get_Top};
  __property   long            Width = {read = get_Width};
  __property   long            Height = {read = get_Height};
};
typedef PivotResultPageAxisDispT<PivotResultPageAxis> PivotResultPageAxisDisp;

typedef TComInterface<PivotResultGroupFields>  TCOMPivotResultGroupFields;

// *********************************************************************//
// DispIntf:  PivotResultGroupFields
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3A3AF091-8C35-4CC7-A1F4-B70D239D773B}
// *********************************************************************//
template<class T>
class PivotResultGroupFieldsDispT : public TAutoDriver<PivotResultGroupFields>
{
public:
  PivotResultGroupFieldsDispT(){}

  PivotResultGroupFieldsDispT(PivotResultGroupFields *pintf)
  {
    TAutoDriver<PivotResultGroupFields>::Bind(pintf, false);
  }

  PivotResultGroupFieldsDispT(PivotResultGroupFieldsPtr pintf)
  {
    TAutoDriver<PivotResultGroupFields>::Bind(pintf, true);
  }

  PivotResultGroupFieldsDispT& operator=(PivotResultGroupFields *pintf)
  {
    TAutoDriver<PivotResultGroupFields>::Bind(pintf, false);
    return *this;
  }

  PivotResultGroupFieldsDispT& operator=(PivotResultGroupFieldsPtr pintf)
  {
    TAutoDriver<PivotResultGroupFields>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT Index/*[in]*/, 
                                                 Owc10_xp::PivotResultField** Field/*[out,retval]*/);
  Owc10_xp::PivotResultField* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef PivotResultGroupFieldsDispT<PivotResultGroupFields> PivotResultGroupFieldsDisp;

typedef TComInterface<Coordinate>  TCOMCoordinate;

// *********************************************************************//
// DispIntf:  Coordinate
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {08801567-AFB8-45B0-A076-CC91579EC10E}
// *********************************************************************//
template<class T>
class CoordinateDispT : public TAutoDriver<Coordinate>
{
public:
  CoordinateDispT(){}

  CoordinateDispT(Coordinate *pintf)
  {
    TAutoDriver<Coordinate>::Bind(pintf, false);
  }

  CoordinateDispT(CoordinatePtr pintf)
  {
    TAutoDriver<Coordinate>::Bind(pintf, true);
  }

  CoordinateDispT& operator=(Coordinate *pintf)
  {
    TAutoDriver<Coordinate>::Bind(pintf, false);
    return *this;
  }

  CoordinateDispT& operator=(CoordinatePtr pintf)
  {
    TAutoDriver<Coordinate>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_x(long* pl/*[out,retval]*/);
  long            __fastcall get_x(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_y(long* pl/*[out,retval]*/);
  long            __fastcall get_y(void);

  __property   long            x = {read = get_x};
  __property   long            y = {read = get_y};
};
typedef CoordinateDispT<Coordinate> CoordinateDisp;

typedef TComInterface<ChLegend>  TCOMChLegend;

// *********************************************************************//
// DispIntf:  ChLegend
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AEC-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class ChLegendDispT : public TAutoDriver<ChLegend>
{
public:
  ChLegendDispT(){}

  ChLegendDispT(ChLegend *pintf)
  {
    TAutoDriver<ChLegend>::Bind(pintf, false);
  }

  ChLegendDispT(ChLegendPtr pintf)
  {
    TAutoDriver<ChLegend>::Bind(pintf, true);
  }

  ChLegendDispT& operator=(ChLegend *pintf)
  {
    TAutoDriver<ChLegend>::Bind(pintf, false);
    return *this;
  }

  ChLegendDispT& operator=(ChLegendPtr pintf)
  {
    TAutoDriver<ChLegend>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Border(Owc10_xp::ChBorder** ppline/*[out,retval]*/);
  Owc10_xp::ChBorder* __fastcall get_Border(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Font(Owc10_xp::ChFont** pfont/*[out,retval]*/);
  Owc10_xp::ChFont* __fastcall get_Font(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Interior(Owc10_xp::ChInterior** ppinterior/*[out,retval]*/);
  Owc10_xp::ChInterior* __fastcall get_Interior(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LegendEntries(Owc10_xp::ChLegendEntries** pplegendentries/*[out,retval]*/);
  Owc10_xp::ChLegendEntries* __fastcall get_LegendEntries(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* ppidispatch/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Position(Owc10_xp::ChartLegendPositionEnum pocpPos/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Position(Owc10_xp::ChartLegendPositionEnum* pocpPos/*[out,retval]*/);
  Owc10_xp::ChartLegendPositionEnum __fastcall get_Position(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Select();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(long* ptop/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(long ptop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(long* pleft/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(long pleft/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Bottom(long* pbottom/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Right(long* pright/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/);
  Owc10_xp::ChartSelectionsEnum __fastcall get_ObjectType(void);

  __property   Owc10_xp::ChBorder* Border = {read = get_Border};
  __property   Owc10_xp::ChFont* Font = {read = get_Font};
  __property   Owc10_xp::ChInterior* Interior = {read = get_Interior};
  __property   Owc10_xp::ChLegendEntries* LegendEntries = {read = get_LegendEntries};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Owc10_xp::ChartLegendPositionEnum Position = {read = get_Position, write = set_Position};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Bottom = {read = get_Bottom};
  __property   long            Right = {read = get_Right};
  __property   Owc10_xp::ChartSelectionsEnum ObjectType = {read = get_ObjectType};
};
typedef ChLegendDispT<ChLegend> ChLegendDisp;

typedef TComInterface<ChLegendEntries>  TCOMChLegendEntries;

// *********************************************************************//
// DispIntf:  ChLegendEntries
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AB8-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class ChLegendEntriesDispT : public TAutoDriver<ChLegendEntries>
{
public:
  ChLegendEntriesDispT(){}

  ChLegendEntriesDispT(ChLegendEntries *pintf)
  {
    TAutoDriver<ChLegendEntries>::Bind(pintf, false);
  }

  ChLegendEntriesDispT(ChLegendEntriesPtr pintf)
  {
    TAutoDriver<ChLegendEntries>::Bind(pintf, true);
  }

  ChLegendEntriesDispT& operator=(ChLegendEntries *pintf)
  {
    TAutoDriver<ChLegendEntries>::Bind(pintf, false);
    return *this;
  }

  ChLegendEntriesDispT& operator=(ChLegendEntriesPtr pintf)
  {
    TAutoDriver<ChLegendEntries>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* cLegendEntries/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(long Index/*[in]*/, 
                                                 Owc10_xp::ChLegendEntry** pplegendentry/*[out,retval]*/);
  Owc10_xp::ChLegendEntry* __fastcall get_Item(long Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Owc10_xp::ChLegend** pplegend/*[out,retval]*/);
  Owc10_xp::ChLegend* __fastcall get_Parent(void);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
  __property   Owc10_xp::ChLegend* Parent = {read = get_Parent};
};
typedef ChLegendEntriesDispT<ChLegendEntries> ChLegendEntriesDisp;

typedef TComInterface<ChLegendEntry>  TCOMChLegendEntry;

// *********************************************************************//
// DispIntf:  ChLegendEntry
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AB9-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class ChLegendEntryDispT : public TAutoDriver<ChLegendEntry>
{
public:
  ChLegendEntryDispT(){}

  ChLegendEntryDispT(ChLegendEntry *pintf)
  {
    TAutoDriver<ChLegendEntry>::Bind(pintf, false);
  }

  ChLegendEntryDispT(ChLegendEntryPtr pintf)
  {
    TAutoDriver<ChLegendEntry>::Bind(pintf, true);
  }

  ChLegendEntryDispT& operator=(ChLegendEntry *pintf)
  {
    TAutoDriver<ChLegendEntry>::Bind(pintf, false);
    return *this;
  }

  ChLegendEntryDispT& operator=(ChLegendEntryPtr pintf)
  {
    TAutoDriver<ChLegendEntry>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Font(Owc10_xp::ChFont** ppfont/*[out,retval]*/);
  Owc10_xp::ChFont* __fastcall get_Font(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(VARIANT_BOOL pfVisible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(VARIANT_BOOL* pfVisible/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Index(long* pilegendentry/*[out,retval]*/);
  long            __fastcall get_Index(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Owc10_xp::ChLegend** pplegend/*[out,retval]*/);
  Owc10_xp::ChLegend* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Select();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PivotObject(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PivotObject(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(long* ptop/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(long* pleft/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Bottom(long* pbottom/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Right(long* pright/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/);
  Owc10_xp::ChartSelectionsEnum __fastcall get_ObjectType(void);

  __property   Owc10_xp::ChFont* Font = {read = get_Font};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   long            Index = {read = get_Index};
  __property   Owc10_xp::ChLegend* Parent = {read = get_Parent};
  __property   LPDISPATCH      PivotObject = {read = get_PivotObject};
  __property   long            Top = {read = get_Top};
  __property   long            Left = {read = get_Left};
  __property   long            Bottom = {read = get_Bottom};
  __property   long            Right = {read = get_Right};
  __property   Owc10_xp::ChartSelectionsEnum ObjectType = {read = get_ObjectType};
};
typedef ChLegendEntryDispT<ChLegendEntry> ChLegendEntryDisp;

typedef TComInterface<ChPlotArea>  TCOMChPlotArea;

// *********************************************************************//
// DispIntf:  ChPlotArea
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39ABA-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class ChPlotAreaDispT : public TAutoDriver<ChPlotArea>
{
public:
  ChPlotAreaDispT(){}

  ChPlotAreaDispT(ChPlotArea *pintf)
  {
    TAutoDriver<ChPlotArea>::Bind(pintf, false);
  }

  ChPlotAreaDispT(ChPlotAreaPtr pintf)
  {
    TAutoDriver<ChPlotArea>::Bind(pintf, true);
  }

  ChPlotAreaDispT& operator=(ChPlotArea *pintf)
  {
    TAutoDriver<ChPlotArea>::Bind(pintf, false);
    return *this;
  }

  ChPlotAreaDispT& operator=(ChPlotAreaPtr pintf)
  {
    TAutoDriver<ChPlotArea>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Border(Owc10_xp::ChBorder** ppline/*[out,retval]*/);
  Owc10_xp::ChBorder* __fastcall get_Border(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Interior(Owc10_xp::ChInterior** ppinterior/*[out,retval]*/);
  Owc10_xp::ChInterior* __fastcall get_Interior(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Owc10_xp::ChChart** ppchart/*[out,retval]*/);
  Owc10_xp::ChChart* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall FlipHorizontal();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall FlipVertical();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RotateClockwise();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RotateCounterClockwise();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Select();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(long* ptop/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(long ptop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(long* pleft/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(long pleft/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Bottom(long* pbottom/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Bottom(long pbottom/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Right(long* pright/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Right(long pright/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackWall(Owc10_xp::ChSurface** psurface/*[out,retval]*/);
  Owc10_xp::ChSurface* __fastcall get_BackWall(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SideWall(Owc10_xp::ChSurface** psurface/*[out,retval]*/);
  Owc10_xp::ChSurface* __fastcall get_SideWall(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Floor(Owc10_xp::ChSurface** psurface/*[out,retval]*/);
  Owc10_xp::ChSurface* __fastcall get_Floor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/);
  Owc10_xp::ChartSelectionsEnum __fastcall get_ObjectType(void);

  __property   Owc10_xp::ChBorder* Border = {read = get_Border};
  __property   Owc10_xp::ChInterior* Interior = {read = get_Interior};
  __property   Owc10_xp::ChChart* Parent = {read = get_Parent};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Bottom = {read = get_Bottom, write = set_Bottom};
  __property   long            Right = {read = get_Right, write = set_Right};
  __property   Owc10_xp::ChSurface* BackWall = {read = get_BackWall};
  __property   Owc10_xp::ChSurface* SideWall = {read = get_SideWall};
  __property   Owc10_xp::ChSurface* Floor = {read = get_Floor};
  __property   Owc10_xp::ChartSelectionsEnum ObjectType = {read = get_ObjectType};
};
typedef ChPlotAreaDispT<ChPlotArea> ChPlotAreaDisp;

typedef TComInterface<ChSurface>  TCOMChSurface;

// *********************************************************************//
// DispIntf:  ChSurface
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C592C1D2-448A-11D3-82BA-00C04F4C2A96}
// *********************************************************************//
template<class T>
class ChSurfaceDispT : public TAutoDriver<ChSurface>
{
public:
  ChSurfaceDispT(){}

  ChSurfaceDispT(ChSurface *pintf)
  {
    TAutoDriver<ChSurface>::Bind(pintf, false);
  }

  ChSurfaceDispT(ChSurfacePtr pintf)
  {
    TAutoDriver<ChSurface>::Bind(pintf, true);
  }

  ChSurfaceDispT& operator=(ChSurface *pintf)
  {
    TAutoDriver<ChSurface>::Bind(pintf, false);
    return *this;
  }

  ChSurfaceDispT& operator=(ChSurfacePtr pintf)
  {
    TAutoDriver<ChSurface>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Border(Owc10_xp::ChBorder** ppline/*[out,retval]*/);
  Owc10_xp::ChBorder* __fastcall get_Border(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Thickness(long pl/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Thickness(long* pl/*[out,retval]*/);
  long            __fastcall get_Thickness(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Interior(Owc10_xp::ChInterior** ppinterior/*[out,retval]*/);
  Owc10_xp::ChInterior* __fastcall get_Interior(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Select();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Owc10_xp::ChPlotArea** ppplotarea/*[out,retval]*/);
  Owc10_xp::ChPlotArea* __fastcall get_Parent(void);

  __property   Owc10_xp::ChBorder* Border = {read = get_Border};
  __property   long            Thickness = {read = get_Thickness, write = set_Thickness};
  __property   Owc10_xp::ChInterior* Interior = {read = get_Interior};
  __property   Owc10_xp::ChPlotArea* Parent = {read = get_Parent};
};
typedef ChSurfaceDispT<ChSurface> ChSurfaceDisp;

typedef TComInterface<ChSeriesCollection>  TCOMChSeriesCollection;

// *********************************************************************//
// DispIntf:  ChSeriesCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39ABD-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class ChSeriesCollectionDispT : public TAutoDriver<ChSeriesCollection>
{
public:
  ChSeriesCollectionDispT(){}

  ChSeriesCollectionDispT(ChSeriesCollection *pintf)
  {
    TAutoDriver<ChSeriesCollection>::Bind(pintf, false);
  }

  ChSeriesCollectionDispT(ChSeriesCollectionPtr pintf)
  {
    TAutoDriver<ChSeriesCollection>::Bind(pintf, true);
  }

  ChSeriesCollectionDispT& operator=(ChSeriesCollection *pintf)
  {
    TAutoDriver<ChSeriesCollection>::Bind(pintf, false);
    return *this;
  }

  ChSeriesCollectionDispT& operator=(ChSeriesCollectionPtr pintf)
  {
    TAutoDriver<ChSeriesCollection>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* cSeries/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT Index/*[in]*/, 
                                                 Owc10_xp::ChSeries** ppseries/*[out,retval]*/);
  Owc10_xp::ChSeries* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Owc10_xp::ChChart** ppchart/*[out,retval]*/);
  Owc10_xp::ChChart* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(long Index/*[in,def,opt]*/, 
                                            Owc10_xp::ChSeries** ppseries/*[out,retval]*/);
  Owc10_xp::ChSeries* __fastcall Add(long Index/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PivotAxis(Owc10_xp::PivotResultAxis** ppaxis/*[out,retval]*/);
  Owc10_xp::PivotResultAxis* __fastcall get_PivotAxis(void);

  __property   long            Count = {read = get_Count};
  __property   Owc10_xp::ChChart* Parent = {read = get_Parent};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   Owc10_xp::PivotResultAxis* PivotAxis = {read = get_PivotAxis};
};
typedef ChSeriesCollectionDispT<ChSeriesCollection> ChSeriesCollectionDisp;

typedef TComInterface<ChSeries>  TCOMChSeries;

// *********************************************************************//
// DispIntf:  ChSeries
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AC1-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class ChSeriesDispT : public TAutoDriver<ChSeries>
{
public:
  ChSeriesDispT(){}

  ChSeriesDispT(ChSeries *pintf)
  {
    TAutoDriver<ChSeries>::Bind(pintf, false);
  }

  ChSeriesDispT(ChSeriesPtr pintf)
  {
    TAutoDriver<ChSeries>::Bind(pintf, true);
  }

  ChSeriesDispT& operator=(ChSeries *pintf)
  {
    TAutoDriver<ChSeries>::Bind(pintf, false);
    return *this;
  }

  ChSeriesDispT& operator=(ChSeriesPtr pintf)
  {
    TAutoDriver<ChSeries>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Border(Owc10_xp::ChBorder** ppline/*[out,retval]*/);
  Owc10_xp::ChBorder* __fastcall get_Border(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DataLabelsCollection(Owc10_xp::ChDataLabelsCollection** ppdatalabels/*[out,retval]*/);
  Owc10_xp::ChDataLabelsCollection* __fastcall get_DataLabelsCollection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Points(Owc10_xp::ChPoints** pppoints/*[out,retval]*/);
  Owc10_xp::ChPoints* __fastcall get_Points(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Caption(BSTR pbstr/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* pbstr/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Explosion(long pl/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Explosion(long* pl/*[out,retval]*/);
  long            __fastcall get_Explosion(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Thickness(long pl/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Thickness(long* pl/*[out,retval]*/);
  long            __fastcall get_Thickness(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ErrorBarsCollection(Owc10_xp::ChErrorBarsCollection** pperrorbars/*[out,retval]*/);
  Owc10_xp::ChErrorBarsCollection* __fastcall get_ErrorBarsCollection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Index(long* pIndex/*[out,retval]*/);
  long            __fastcall get_Index(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Interior(Owc10_xp::ChInterior** ppinterior/*[out,retval]*/);
  Owc10_xp::ChInterior* __fastcall get_Interior(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Line(Owc10_xp::ChLine** ppline/*[out,retval]*/);
  Owc10_xp::ChLine* __fastcall get_Line(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Marker(Owc10_xp::ChMarker** ppMarker/*[out,retval]*/);
  Owc10_xp::ChMarker* __fastcall get_Marker(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Owc10_xp::ChChart** ppchart/*[out,retval]*/);
  Owc10_xp::ChChart* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pbstr/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbstr/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Scalings(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/
                                                     , 
                                                     Owc10_xp::ChScaling** ppwcscaling/*[out,retval]*/);
  Owc10_xp::ChScaling* __fastcall get_Scalings(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Trendlines(Owc10_xp::ChTrendlines** pptrendlines/*[out,retval]*/);
  Owc10_xp::ChTrendlines* __fastcall get_Trendlines(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Type(Owc10_xp::ChartChartTypeEnum pocpGT/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Owc10_xp::ChartChartTypeEnum* pocpGT/*[out,retval]*/);
  Owc10_xp::ChartChartTypeEnum __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetData(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/, 
                                                long DataSourceIndex/*[in]*/, 
                                                VARIANT DataReference/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetDataReference(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/
                                                         , BSTR* DataSourceReference/*[out,retval]*/);
  BSTR            __fastcall GetDataReference(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetDataSourceIndex(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/
                                                           , long* DataSourceIndex/*[out,retval]*/);
  long            __fastcall GetDataSourceIndex(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetData(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/, 
                                                VARIANT* DataSourceIndex/*[out]*/, 
                                                VARIANT* DataReference/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Select();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Index(long pIndex);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Ungroup(VARIANT_BOOL UseNewScaling/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Group(Owc10_xp::ChSeries* Series);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ZOrder(long pzorder/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ZOrder(long* pzorder/*[out,retval]*/);
  long            __fastcall get_ZOrder(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PivotObject(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PivotObject(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GapWidth(long plGapWidth/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GapWidth(long* plGapWidth/*[out,retval]*/);
  long            __fastcall get_GapWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Overlap(long plOverlap/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Overlap(long* plOverlap/*[out,retval]*/);
  long            __fastcall get_Overlap(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FormatMap(Owc10_xp::ChFormatMap** ppformatmap/*[out,retval]*/);
  Owc10_xp::ChFormatMap* __fastcall get_FormatMap(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TipText(BSTR pbstr/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TipText(BSTR* pbstr/*[out,retval]*/);
  BSTR            __fastcall get_TipText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(long* ptop/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(long* pleft/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Bottom(long* pbottom/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Right(long* pright/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LayerIndex(long* pIndex/*[out,retval]*/);
  long            __fastcall get_LayerIndex(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ValueToPoint(VARIANT xvalue/*[in]*/, VARIANT yvalue/*[in]*/
                                                     , VARIANT zvalue/*[in,opt]*/, 
                                                     Owc10_xp::Coordinate** ppCoord/*[out,retval]*/);
  Owc10_xp::Coordinate* __fastcall ValueToPoint(VARIANT xvalue/*[in]*/, VARIANT yvalue/*[in]*/, 
                                                VARIANT zvalue/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TypeFlags(int* pgrbit/*[out,retval]*/);
  int             __fastcall get_TypeFlags(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/);
  Owc10_xp::ChartSelectionsEnum __fastcall get_ObjectType(void);

  __property   Owc10_xp::ChBorder* Border = {read = get_Border};
  __property   Owc10_xp::ChDataLabelsCollection* DataLabelsCollection = {read = get_DataLabelsCollection};
  __property   Owc10_xp::ChPoints* Points = {read = get_Points};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   long            Explosion = {read = get_Explosion, write = set_Explosion};
  __property   long            Thickness = {read = get_Thickness, write = set_Thickness};
  __property   Owc10_xp::ChErrorBarsCollection* ErrorBarsCollection = {read = get_ErrorBarsCollection};
  __property   long            Index = {read = get_Index, write = set_Index};
  __property   Owc10_xp::ChInterior* Interior = {read = get_Interior};
  __property   Owc10_xp::ChLine* Line = {read = get_Line};
  __property   Owc10_xp::ChMarker* Marker = {read = get_Marker};
  __property   Owc10_xp::ChChart* Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   Owc10_xp::ChTrendlines* Trendlines = {read = get_Trendlines};
  __property   Owc10_xp::ChartChartTypeEnum Type = {read = get_Type, write = set_Type};
  __property   long            ZOrder = {read = get_ZOrder, write = set_ZOrder};
  __property   LPDISPATCH      PivotObject = {read = get_PivotObject};
  __property   long            GapWidth = {read = get_GapWidth, write = set_GapWidth};
  __property   long            Overlap = {read = get_Overlap, write = set_Overlap};
  __property   Owc10_xp::ChFormatMap* FormatMap = {read = get_FormatMap};
  __property   BSTR            TipText = {read = get_TipText, write = set_TipText};
  __property   long            Top = {read = get_Top};
  __property   long            Left = {read = get_Left};
  __property   long            Bottom = {read = get_Bottom};
  __property   long            Right = {read = get_Right};
  __property   long            LayerIndex = {read = get_LayerIndex};
  __property   int             TypeFlags = {read = get_TypeFlags};
  __property   Owc10_xp::ChartSelectionsEnum ObjectType = {read = get_ObjectType};
};
typedef ChSeriesDispT<ChSeries> ChSeriesDisp;

typedef TComInterface<ChDataLabelsCollection>  TCOMChDataLabelsCollection;

// *********************************************************************//
// DispIntf:  ChDataLabelsCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A71-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class ChDataLabelsCollectionDispT : public TAutoDriver<ChDataLabelsCollection>
{
public:
  ChDataLabelsCollectionDispT(){}

  ChDataLabelsCollectionDispT(ChDataLabelsCollection *pintf)
  {
    TAutoDriver<ChDataLabelsCollection>::Bind(pintf, false);
  }

  ChDataLabelsCollectionDispT(ChDataLabelsCollectionPtr pintf)
  {
    TAutoDriver<ChDataLabelsCollection>::Bind(pintf, true);
  }

  ChDataLabelsCollectionDispT& operator=(ChDataLabelsCollection *pintf)
  {
    TAutoDriver<ChDataLabelsCollection>::Bind(pintf, false);
    return *this;
  }

  ChDataLabelsCollectionDispT& operator=(ChDataLabelsCollectionPtr pintf)
  {
    TAutoDriver<ChDataLabelsCollection>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Owc10_xp::ChSeries** ppseries/*[out,retval]*/);
  Owc10_xp::ChSeries* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(long Index/*[in]*/, 
                                                 Owc10_xp::ChDataLabels** ppdatalabels/*[out,retval]*/);
  Owc10_xp::ChDataLabels* __fastcall get_Item(long Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(Owc10_xp::ChDataLabels** ppdatalabels/*[out,retval]*/);
  Owc10_xp::ChDataLabels* __fastcall Add(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(long Index/*[in]*/);

  __property   Owc10_xp::ChSeries* Parent = {read = get_Parent};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef ChDataLabelsCollectionDispT<ChDataLabelsCollection> ChDataLabelsCollectionDisp;

typedef TComInterface<ChDataLabels>  TCOMChDataLabels;

// *********************************************************************//
// DispIntf:  ChDataLabels
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AC2-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class ChDataLabelsDispT : public TAutoDriver<ChDataLabels>
{
public:
  ChDataLabelsDispT(){}

  ChDataLabelsDispT(ChDataLabels *pintf)
  {
    TAutoDriver<ChDataLabels>::Bind(pintf, false);
  }

  ChDataLabelsDispT(ChDataLabelsPtr pintf)
  {
    TAutoDriver<ChDataLabels>::Bind(pintf, true);
  }

  ChDataLabelsDispT& operator=(ChDataLabels *pintf)
  {
    TAutoDriver<ChDataLabels>::Bind(pintf, false);
    return *this;
  }

  ChDataLabelsDispT& operator=(ChDataLabelsPtr pintf)
  {
    TAutoDriver<ChDataLabels>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Border(Owc10_xp::ChBorder** ppline/*[out,retval]*/);
  Owc10_xp::ChBorder* __fastcall get_Border(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Font(Owc10_xp::ChFont** ppfont/*[out,retval]*/);
  Owc10_xp::ChFont* __fastcall get_Font(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasBubbleSize(VARIANT_BOOL pfHasBubbleSize/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasBubbleSize(VARIANT_BOOL* pfHasBubbleSize/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HasBubbleSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasCategoryName(VARIANT_BOOL pfHasCategoryName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasCategoryName(VARIANT_BOOL* pfHasCategoryName/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HasCategoryName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasPercentage(VARIANT_BOOL pfHasPercentage/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasPercentage(VARIANT_BOOL* pfHasPercentage/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HasPercentage(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasSeriesName(VARIANT_BOOL pfHasSeriesName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasSeriesName(VARIANT_BOOL* pfHasSeriesName/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HasSeriesName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasValue(VARIANT_BOOL pfHasValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasValue(VARIANT_BOOL* pfHasValue/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HasValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Interior(Owc10_xp::ChInterior** ppinterior/*[out,retval]*/);
  Owc10_xp::ChInterior* __fastcall get_Interior(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_NumberFormat(BSTR pbstrNumberFormat/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NumberFormat(BSTR* pbstrNumberFormat/*[out,retval]*/);
  BSTR            __fastcall get_NumberFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Owc10_xp::ChSeries** ppseries/*[out,retval]*/);
  Owc10_xp::ChSeries* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Position(Owc10_xp::ChartDataLabelPositionEnum pocpDLP/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Position(Owc10_xp::ChartDataLabelPositionEnum* pocpDLP/*[out,retval]*/);
  Owc10_xp::ChartDataLabelPositionEnum __fastcall get_Position(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Separator(BSTR pbstrSeperator/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Separator(BSTR* pbstrSeperator/*[out,retval]*/);
  BSTR            __fastcall get_Separator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Select();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Index(long* pIndex/*[out,retval]*/);
  long            __fastcall get_Index(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(long Index/*[in]*/, 
                                                 Owc10_xp::ChDataLabel** ppdatalabel/*[out,retval]*/);
  Owc10_xp::ChDataLabel* __fastcall get_Item(long Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(long* ptop/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(long* pleft/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Bottom(long* pbottom/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Right(long* pright/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/);
  Owc10_xp::ChartSelectionsEnum __fastcall get_ObjectType(void);

  __property   Owc10_xp::ChBorder* Border = {read = get_Border};
  __property   Owc10_xp::ChFont* Font = {read = get_Font};
  __property   VARIANT_BOOL    HasBubbleSize = {read = get_HasBubbleSize, write = set_HasBubbleSize};
  __property   VARIANT_BOOL    HasCategoryName = {read = get_HasCategoryName, write = set_HasCategoryName};
  __property   VARIANT_BOOL    HasPercentage = {read = get_HasPercentage, write = set_HasPercentage};
  __property   VARIANT_BOOL    HasSeriesName = {read = get_HasSeriesName, write = set_HasSeriesName};
  __property   VARIANT_BOOL    HasValue = {read = get_HasValue, write = set_HasValue};
  __property   Owc10_xp::ChInterior* Interior = {read = get_Interior};
  __property   BSTR            NumberFormat = {read = get_NumberFormat, write = set_NumberFormat};
  __property   Owc10_xp::ChSeries* Parent = {read = get_Parent};
  __property   Owc10_xp::ChartDataLabelPositionEnum Position = {read = get_Position, write = set_Position};
  __property   BSTR            Separator = {read = get_Separator, write = set_Separator};
  __property   long            Index = {read = get_Index};
  __property   long            Count = {read = get_Count};
  __property   long            Top = {read = get_Top};
  __property   long            Left = {read = get_Left};
  __property   long            Bottom = {read = get_Bottom};
  __property   long            Right = {read = get_Right};
  __property   Owc10_xp::ChartSelectionsEnum ObjectType = {read = get_ObjectType};
};
typedef ChDataLabelsDispT<ChDataLabels> ChDataLabelsDisp;

typedef TComInterface<ChDataLabel>  TCOMChDataLabel;

// *********************************************************************//
// DispIntf:  ChDataLabel
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AE8-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class ChDataLabelDispT : public TAutoDriver<ChDataLabel>
{
public:
  ChDataLabelDispT(){}

  ChDataLabelDispT(ChDataLabel *pintf)
  {
    TAutoDriver<ChDataLabel>::Bind(pintf, false);
  }

  ChDataLabelDispT(ChDataLabelPtr pintf)
  {
    TAutoDriver<ChDataLabel>::Bind(pintf, true);
  }

  ChDataLabelDispT& operator=(ChDataLabel *pintf)
  {
    TAutoDriver<ChDataLabel>::Bind(pintf, false);
    return *this;
  }

  ChDataLabelDispT& operator=(ChDataLabelPtr pintf)
  {
    TAutoDriver<ChDataLabel>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Font(Owc10_xp::ChFont** ppfont/*[out,retval]*/);
  Owc10_xp::ChFont* __fastcall get_Font(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Interior(Owc10_xp::ChInterior** ppinterior/*[out,retval]*/);
  Owc10_xp::ChInterior* __fastcall get_Interior(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Border(Owc10_xp::ChBorder** ppline/*[out,retval]*/);
  Owc10_xp::ChBorder* __fastcall get_Border(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(VARIANT_BOOL* pfVisible/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(VARIANT_BOOL pfVisible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(long* ptop/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(long* pleft/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Bottom(long* pbottom/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Right(long* pright/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Select();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Owc10_xp::ChDataLabels** Parent/*[out,retval]*/);
  Owc10_xp::ChDataLabels* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Index(long* pIndex/*[out,retval]*/);
  long            __fastcall get_Index(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/);
  Owc10_xp::ChartSelectionsEnum __fastcall get_ObjectType(void);

  __property   Owc10_xp::ChFont* Font = {read = get_Font};
  __property   Owc10_xp::ChInterior* Interior = {read = get_Interior};
  __property   Owc10_xp::ChBorder* Border = {read = get_Border};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   long            Top = {read = get_Top};
  __property   long            Left = {read = get_Left};
  __property   long            Bottom = {read = get_Bottom};
  __property   long            Right = {read = get_Right};
  __property   Owc10_xp::ChDataLabels* Parent = {read = get_Parent};
  __property   long            Index = {read = get_Index};
  __property   Owc10_xp::ChartSelectionsEnum ObjectType = {read = get_ObjectType};
};
typedef ChDataLabelDispT<ChDataLabel> ChDataLabelDisp;

typedef TComInterface<ChPoints>  TCOMChPoints;

// *********************************************************************//
// DispIntf:  ChPoints
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AEA-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class ChPointsDispT : public TAutoDriver<ChPoints>
{
public:
  ChPointsDispT(){}

  ChPointsDispT(ChPoints *pintf)
  {
    TAutoDriver<ChPoints>::Bind(pintf, false);
  }

  ChPointsDispT(ChPointsPtr pintf)
  {
    TAutoDriver<ChPoints>::Bind(pintf, true);
  }

  ChPointsDispT& operator=(ChPoints *pintf)
  {
    TAutoDriver<ChPoints>::Bind(pintf, false);
    return *this;
  }

  ChPointsDispT& operator=(ChPointsPtr pintf)
  {
    TAutoDriver<ChPoints>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Owc10_xp::ChSeries** ppseries/*[out,retval]*/);
  Owc10_xp::ChSeries* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT Index/*[in]*/, 
                                                 Owc10_xp::ChPoint** pppoint/*[out,retval]*/);
  Owc10_xp::ChPoint* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Owc10_xp::ChSeries* Parent = {read = get_Parent};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef ChPointsDispT<ChPoints> ChPointsDisp;

typedef TComInterface<ChPoint>  TCOMChPoint;

// *********************************************************************//
// DispIntf:  ChPoint
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AE9-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class ChPointDispT : public TAutoDriver<ChPoint>
{
public:
  ChPointDispT(){}

  ChPointDispT(ChPoint *pintf)
  {
    TAutoDriver<ChPoint>::Bind(pintf, false);
  }

  ChPointDispT(ChPointPtr pintf)
  {
    TAutoDriver<ChPoint>::Bind(pintf, true);
  }

  ChPointDispT& operator=(ChPoint *pintf)
  {
    TAutoDriver<ChPoint>::Bind(pintf, false);
    return *this;
  }

  ChPointDispT& operator=(ChPointPtr pintf)
  {
    TAutoDriver<ChPoint>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Border(Owc10_xp::ChBorder** ppline/*[out,retval]*/);
  Owc10_xp::ChBorder* __fastcall get_Border(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Explosion(long pExplode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Explosion(long* pExplode/*[out,retval]*/);
  long            __fastcall get_Explosion(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Interior(Owc10_xp::ChInterior** ppinterior/*[out,retval]*/);
  Owc10_xp::ChInterior* __fastcall get_Interior(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Owc10_xp::ChSeries** ppseries/*[out,retval]*/);
  Owc10_xp::ChSeries* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Index(long* piDataSource/*[out,retval]*/);
  long            __fastcall get_Index(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Select();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetValue(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/, 
                                                 VARIANT scaled/*[in,opt]*/, 
                                                 VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall GetValue(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/, 
                                      VARIANT scaled/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Line(Owc10_xp::ChLine** ppline/*[out,retval]*/);
  Owc10_xp::ChLine* __fastcall get_Line(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PivotObject(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/
                                                        , LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PivotObject(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(long* ptop/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(long* pleft/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Bottom(long* pbottom/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Right(long* pright/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/);
  Owc10_xp::ChartSelectionsEnum __fastcall get_ObjectType(void);

  __property   Owc10_xp::ChBorder* Border = {read = get_Border};
  __property   long            Explosion = {read = get_Explosion, write = set_Explosion};
  __property   Owc10_xp::ChInterior* Interior = {read = get_Interior};
  __property   Owc10_xp::ChSeries* Parent = {read = get_Parent};
  __property   long            Index = {read = get_Index};
  __property   Owc10_xp::ChLine* Line = {read = get_Line};
  __property   long            Top = {read = get_Top};
  __property   long            Left = {read = get_Left};
  __property   long            Bottom = {read = get_Bottom};
  __property   long            Right = {read = get_Right};
  __property   Owc10_xp::ChartSelectionsEnum ObjectType = {read = get_ObjectType};
};
typedef ChPointDispT<ChPoint> ChPointDisp;

typedef TComInterface<ChErrorBarsCollection>  TCOMChErrorBarsCollection;

// *********************************************************************//
// DispIntf:  ChErrorBarsCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AB7-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class ChErrorBarsCollectionDispT : public TAutoDriver<ChErrorBarsCollection>
{
public:
  ChErrorBarsCollectionDispT(){}

  ChErrorBarsCollectionDispT(ChErrorBarsCollection *pintf)
  {
    TAutoDriver<ChErrorBarsCollection>::Bind(pintf, false);
  }

  ChErrorBarsCollectionDispT(ChErrorBarsCollectionPtr pintf)
  {
    TAutoDriver<ChErrorBarsCollection>::Bind(pintf, true);
  }

  ChErrorBarsCollectionDispT& operator=(ChErrorBarsCollection *pintf)
  {
    TAutoDriver<ChErrorBarsCollection>::Bind(pintf, false);
    return *this;
  }

  ChErrorBarsCollectionDispT& operator=(ChErrorBarsCollectionPtr pintf)
  {
    TAutoDriver<ChErrorBarsCollection>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* cErrorbars/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(long Index/*[in]*/, 
                                                 Owc10_xp::ChErrorBars** pptrendline/*[out,retval]*/);
  Owc10_xp::ChErrorBars* __fastcall get_Item(long Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Owc10_xp::ChSeries** ppseries/*[out,retval]*/);
  Owc10_xp::ChSeries* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(Owc10_xp::ChErrorBars** pptrendline/*[out,retval]*/);
  Owc10_xp::ChErrorBars* __fastcall Add(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(long Index/*[in]*/);

  __property   long            Count = {read = get_Count};
  __property   Owc10_xp::ChSeries* Parent = {read = get_Parent};
};
typedef ChErrorBarsCollectionDispT<ChErrorBarsCollection> ChErrorBarsCollectionDisp;

typedef TComInterface<ChErrorBars>  TCOMChErrorBars;

// *********************************************************************//
// DispIntf:  ChErrorBars
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AEB-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class ChErrorBarsDispT : public TAutoDriver<ChErrorBars>
{
public:
  ChErrorBarsDispT(){}

  ChErrorBarsDispT(ChErrorBars *pintf)
  {
    TAutoDriver<ChErrorBars>::Bind(pintf, false);
  }

  ChErrorBarsDispT(ChErrorBarsPtr pintf)
  {
    TAutoDriver<ChErrorBars>::Bind(pintf, true);
  }

  ChErrorBarsDispT& operator=(ChErrorBars *pintf)
  {
    TAutoDriver<ChErrorBars>::Bind(pintf, false);
    return *this;
  }

  ChErrorBarsDispT& operator=(ChErrorBarsPtr pintf)
  {
    TAutoDriver<ChErrorBars>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EndStyle(Owc10_xp::ChartEndStyleEnum pocpESC/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EndStyle(Owc10_xp::ChartEndStyleEnum* pocpESC/*[out,retval]*/);
  Owc10_xp::ChartEndStyleEnum __fastcall get_EndStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Direction(Owc10_xp::ChartErrorBarDirectionEnum pocpdir/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Direction(Owc10_xp::ChartErrorBarDirectionEnum* pocpdir/*[out,retval]*/);
  Owc10_xp::ChartErrorBarDirectionEnum __fastcall get_Direction(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Index(long* pIndex/*[out,retval]*/);
  long            __fastcall get_Index(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Line(Owc10_xp::ChLine** ppline/*[out,retval]*/);
  Owc10_xp::ChLine* __fastcall get_Line(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Owc10_xp::ChSeries** ppseries/*[out,retval]*/);
  Owc10_xp::ChSeries* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Amount(double pramount/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Amount(double* pramount/*[out,retval]*/);
  double          __fastcall get_Amount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Include(Owc10_xp::ChartErrorBarIncludeEnum pocpEBI/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Include(Owc10_xp::ChartErrorBarIncludeEnum* pocpEBI/*[out,retval]*/);
  Owc10_xp::ChartErrorBarIncludeEnum __fastcall get_Include(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Type(Owc10_xp::ChartErrorBarTypeEnum pocpEBT/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Owc10_xp::ChartErrorBarTypeEnum* pocpEBT/*[out,retval]*/);
  Owc10_xp::ChartErrorBarTypeEnum __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetData(Owc10_xp::ChartErrorBarCustomValuesEnum Dimension/*[in]*/
                                                , long DataSourceIndex/*[in]*/, 
                                                VARIANT DataReference/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetDataReference(Owc10_xp::ChartErrorBarCustomValuesEnum ErrorBarDirection/*[in]*/
                                                         , BSTR* DataSourceReference/*[out,retval]*/);
  BSTR            __fastcall GetDataReference(Owc10_xp::ChartErrorBarCustomValuesEnum ErrorBarDirection/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetDataSourceIndex(Owc10_xp::ChartErrorBarCustomValuesEnum ErrorBarDirection/*[in]*/
                                                           , long* DataSourceIndex/*[out,retval]*/);
  long            __fastcall GetDataSourceIndex(Owc10_xp::ChartErrorBarCustomValuesEnum ErrorBarDirection/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetData(Owc10_xp::ChartErrorBarCustomValuesEnum ErrorBarDirection/*[in]*/
                                                , VARIANT* DataSourceIndex/*[out]*/, 
                                                VARIANT* DataReference/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Select();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(long* ptop/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(long* pleft/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Bottom(long* pbottom/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Right(long* pright/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/);
  Owc10_xp::ChartSelectionsEnum __fastcall get_ObjectType(void);

  __property   Owc10_xp::ChartEndStyleEnum EndStyle = {read = get_EndStyle, write = set_EndStyle};
  __property   Owc10_xp::ChartErrorBarDirectionEnum Direction = {read = get_Direction, write = set_Direction};
  __property   long            Index = {read = get_Index};
  __property   Owc10_xp::ChLine* Line = {read = get_Line};
  __property   Owc10_xp::ChSeries* Parent = {read = get_Parent};
  __property   double          Amount = {read = get_Amount, write = set_Amount};
  __property   Owc10_xp::ChartErrorBarIncludeEnum Include = {read = get_Include, write = set_Include};
  __property   Owc10_xp::ChartErrorBarTypeEnum Type = {read = get_Type, write = set_Type};
  __property   long            Top = {read = get_Top};
  __property   long            Left = {read = get_Left};
  __property   long            Bottom = {read = get_Bottom};
  __property   long            Right = {read = get_Right};
  __property   Owc10_xp::ChartSelectionsEnum ObjectType = {read = get_ObjectType};
};
typedef ChErrorBarsDispT<ChErrorBars> ChErrorBarsDisp;

typedef TComInterface<ChMarker>  TCOMChMarker;

// *********************************************************************//
// DispIntf:  ChMarker
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39ABC-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class ChMarkerDispT : public TAutoDriver<ChMarker>
{
public:
  ChMarkerDispT(){}

  ChMarkerDispT(ChMarker *pintf)
  {
    TAutoDriver<ChMarker>::Bind(pintf, false);
  }

  ChMarkerDispT(ChMarkerPtr pintf)
  {
    TAutoDriver<ChMarker>::Bind(pintf, true);
  }

  ChMarkerDispT& operator=(ChMarker *pintf)
  {
    TAutoDriver<ChMarker>::Bind(pintf, false);
    return *this;
  }

  ChMarkerDispT& operator=(ChMarkerPtr pintf)
  {
    TAutoDriver<ChMarker>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Style(Owc10_xp::ChartMarkerStyleEnum plStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Style(Owc10_xp::ChartMarkerStyleEnum* plStyle/*[out,retval]*/);
  Owc10_xp::ChartMarkerStyleEnum __fastcall get_Style(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Size(long plSize/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Size(long* plSize/*[out,retval]*/);
  long            __fastcall get_Size(void);

  __property   Owc10_xp::ChartMarkerStyleEnum Style = {read = get_Style, write = set_Style};
  __property   long            Size = {read = get_Size, write = set_Size};
};
typedef ChMarkerDispT<ChMarker> ChMarkerDisp;

typedef TComInterface<ChTrendlines>  TCOMChTrendlines;

// *********************************************************************//
// DispIntf:  ChTrendlines
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AC0-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class ChTrendlinesDispT : public TAutoDriver<ChTrendlines>
{
public:
  ChTrendlinesDispT(){}

  ChTrendlinesDispT(ChTrendlines *pintf)
  {
    TAutoDriver<ChTrendlines>::Bind(pintf, false);
  }

  ChTrendlinesDispT(ChTrendlinesPtr pintf)
  {
    TAutoDriver<ChTrendlines>::Bind(pintf, true);
  }

  ChTrendlinesDispT& operator=(ChTrendlines *pintf)
  {
    TAutoDriver<ChTrendlines>::Bind(pintf, false);
    return *this;
  }

  ChTrendlinesDispT& operator=(ChTrendlinesPtr pintf)
  {
    TAutoDriver<ChTrendlines>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* cScaling/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(long Index/*[in]*/, 
                                                 Owc10_xp::ChTrendline** pptrendline/*[out,retval]*/);
  Owc10_xp::ChTrendline* __fastcall get_Item(long Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Owc10_xp::ChSeries** ppseries/*[out,retval]*/);
  Owc10_xp::ChSeries* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(Owc10_xp::ChTrendline** pptrendline/*[out,retval]*/);
  Owc10_xp::ChTrendline* __fastcall Add(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(long Index/*[in]*/);

  __property   long            Count = {read = get_Count};
  __property   Owc10_xp::ChSeries* Parent = {read = get_Parent};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef ChTrendlinesDispT<ChTrendlines> ChTrendlinesDisp;

typedef TComInterface<ChTrendline>  TCOMChTrendline;

// *********************************************************************//
// DispIntf:  ChTrendline
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39ABF-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class ChTrendlineDispT : public TAutoDriver<ChTrendline>
{
public:
  ChTrendlineDispT(){}

  ChTrendlineDispT(ChTrendline *pintf)
  {
    TAutoDriver<ChTrendline>::Bind(pintf, false);
  }

  ChTrendlineDispT(ChTrendlinePtr pintf)
  {
    TAutoDriver<ChTrendline>::Bind(pintf, true);
  }

  ChTrendlineDispT& operator=(ChTrendline *pintf)
  {
    TAutoDriver<ChTrendline>::Bind(pintf, false);
    return *this;
  }

  ChTrendlineDispT& operator=(ChTrendlinePtr pintf)
  {
    TAutoDriver<ChTrendline>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DataLabel(Owc10_xp::ChDataLabel** ppdatalabel/*[out,retval]*/);
  Owc10_xp::ChDataLabel* __fastcall get_DataLabel(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Index(long* pIndex/*[out,retval]*/);
  long            __fastcall get_Index(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IsDisplayingEquation(VARIANT_BOOL pfIsDisplEquation/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsDisplayingEquation(VARIANT_BOOL* pfIsDisplEquation/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsDisplayingEquation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IsDisplayingRSquared(VARIANT_BOOL pfIsDisplRSquared/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsDisplayingRSquared(VARIANT_BOOL* pfIsDisplRSquared/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsDisplayingRSquared(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Line(Owc10_xp::ChLine** ppline/*[out,retval]*/);
  Owc10_xp::ChLine* __fastcall get_Line(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Order(long plOrder/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Order(long* plOrder/*[out,retval]*/);
  long            __fastcall get_Order(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Period(long plPeriod/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Period(long* plPeriod/*[out,retval]*/);
  long            __fastcall get_Period(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Owc10_xp::ChSeries** ppseries/*[out,retval]*/);
  Owc10_xp::ChSeries* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Type(Owc10_xp::ChartTrendlineTypeEnum pocpTT/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Owc10_xp::ChartTrendlineTypeEnum* pocpTT/*[out,retval]*/);
  Owc10_xp::ChartTrendlineTypeEnum __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Caption(BSTR pbstr/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* pbstr/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasAutoCaption(VARIANT_BOOL pfAuto/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasAutoCaption(VARIANT_BOOL* pfAuto/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HasAutoCaption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Select();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(long* ptop/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(long* pleft/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Bottom(long* pbottom/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Right(long* pright/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/);
  Owc10_xp::ChartSelectionsEnum __fastcall get_ObjectType(void);

  __property   Owc10_xp::ChDataLabel* DataLabel = {read = get_DataLabel};
  __property   long            Index = {read = get_Index};
  __property   VARIANT_BOOL    IsDisplayingEquation = {read = get_IsDisplayingEquation, write = set_IsDisplayingEquation};
  __property   VARIANT_BOOL    IsDisplayingRSquared = {read = get_IsDisplayingRSquared, write = set_IsDisplayingRSquared};
  __property   Owc10_xp::ChLine* Line = {read = get_Line};
  __property   long            Order = {read = get_Order, write = set_Order};
  __property   long            Period = {read = get_Period, write = set_Period};
  __property   Owc10_xp::ChSeries* Parent = {read = get_Parent};
  __property   Owc10_xp::ChartTrendlineTypeEnum Type = {read = get_Type, write = set_Type};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   VARIANT_BOOL    HasAutoCaption = {read = get_HasAutoCaption, write = set_HasAutoCaption};
  __property   long            Top = {read = get_Top};
  __property   long            Left = {read = get_Left};
  __property   long            Bottom = {read = get_Bottom};
  __property   long            Right = {read = get_Right};
  __property   Owc10_xp::ChartSelectionsEnum ObjectType = {read = get_ObjectType};
};
typedef ChTrendlineDispT<ChTrendline> ChTrendlineDisp;

typedef TComInterface<ChFormatMap>  TCOMChFormatMap;

// *********************************************************************//
// DispIntf:  ChFormatMap
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BEAE3F40-6FB5-11D2-A8FF-00C04FAC6830}
// *********************************************************************//
template<class T>
class ChFormatMapDispT : public TAutoDriver<ChFormatMap>
{
public:
  ChFormatMapDispT(){}

  ChFormatMapDispT(ChFormatMap *pintf)
  {
    TAutoDriver<ChFormatMap>::Bind(pintf, false);
  }

  ChFormatMapDispT(ChFormatMapPtr pintf)
  {
    TAutoDriver<ChFormatMap>::Bind(pintf, true);
  }

  ChFormatMapDispT& operator=(ChFormatMap *pintf)
  {
    TAutoDriver<ChFormatMap>::Bind(pintf, false);
    return *this;
  }

  ChFormatMapDispT& operator=(ChFormatMapPtr pintf)
  {
    TAutoDriver<ChFormatMap>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Segments(Owc10_xp::ChSegments** ppsegments/*[out,retval]*/);
  Owc10_xp::ChSegments* __fastcall get_Segments(void);

  __property   Owc10_xp::ChSegments* Segments = {read = get_Segments};
};
typedef ChFormatMapDispT<ChFormatMap> ChFormatMapDisp;

typedef TComInterface<ChSegments>  TCOMChSegments;

// *********************************************************************//
// DispIntf:  ChSegments
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BEAE3F41-6FB5-11D2-A8FF-00C04FAC6830}
// *********************************************************************//
template<class T>
class ChSegmentsDispT : public TAutoDriver<ChSegments>
{
public:
  ChSegmentsDispT(){}

  ChSegmentsDispT(ChSegments *pintf)
  {
    TAutoDriver<ChSegments>::Bind(pintf, false);
  }

  ChSegmentsDispT(ChSegmentsPtr pintf)
  {
    TAutoDriver<ChSegments>::Bind(pintf, true);
  }

  ChSegmentsDispT& operator=(ChSegments *pintf)
  {
    TAutoDriver<ChSegments>::Bind(pintf, false);
    return *this;
  }

  ChSegmentsDispT& operator=(ChSegmentsPtr pintf)
  {
    TAutoDriver<ChSegments>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* cDoodads/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Owc10_xp::ChFormatMap** ppformatmap/*[out,retval]*/);
  Owc10_xp::ChFormatMap* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(Owc10_xp::ChSegment** ppsegment/*[out,retval]*/);
  Owc10_xp::ChSegment* __fastcall Add(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(long Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(long Index/*[in]*/, 
                                                 Owc10_xp::ChSegment** ppsegment/*[out,retval]*/);
  Owc10_xp::ChSegment* __fastcall get_Item(long Index/*[in]*/);

  __property   long            Count = {read = get_Count};
  __property   Owc10_xp::ChFormatMap* Parent = {read = get_Parent};
};
typedef ChSegmentsDispT<ChSegments> ChSegmentsDisp;

typedef TComInterface<ChSegment>  TCOMChSegment;

// *********************************************************************//
// DispIntf:  ChSegment
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {EB509C25-4748-4D52-A6FE-137BA0642027}
// *********************************************************************//
template<class T>
class ChSegmentDispT : public TAutoDriver<ChSegment>
{
public:
  ChSegmentDispT(){}

  ChSegmentDispT(ChSegment *pintf)
  {
    TAutoDriver<ChSegment>::Bind(pintf, false);
  }

  ChSegmentDispT(ChSegmentPtr pintf)
  {
    TAutoDriver<ChSegment>::Bind(pintf, true);
  }

  ChSegmentDispT& operator=(ChSegment *pintf)
  {
    TAutoDriver<ChSegment>::Bind(pintf, false);
    return *this;
  }

  ChSegmentDispT& operator=(ChSegmentPtr pintf)
  {
    TAutoDriver<ChSegment>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Begin(Owc10_xp::ChSegmentBoundary** ppsegbound/*[out,retval]*/);
  Owc10_xp::ChSegmentBoundary* __fastcall get_Begin(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_End(Owc10_xp::ChSegmentBoundary** ppsegbound/*[out,retval]*/);
  Owc10_xp::ChSegmentBoundary* __fastcall get_End(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasAbsoluteLabels(VARIANT_BOOL* pfAbsolute/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HasAbsoluteLabels(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasAbsoluteLabels(VARIANT_BOOL pfAbsolute/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasDiscreteDivisions(VARIANT_BOOL* pfDiscrete/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HasDiscreteDivisions(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasDiscreteDivisions(VARIANT_BOOL pfDiscrete/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasAutoDivisions(VARIANT_BOOL* pfAuto/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HasAutoDivisions(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasAutoDivisions(VARIANT_BOOL pfAuto/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Divisions(long* pDivisions/*[out,retval]*/);
  long            __fastcall get_Divisions(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Divisions(long pDivisions/*[in]*/);

  __property   Owc10_xp::ChSegmentBoundary* Begin = {read = get_Begin};
  __property   Owc10_xp::ChSegmentBoundary* End = {read = get_End};
  __property   VARIANT_BOOL    HasAbsoluteLabels = {read = get_HasAbsoluteLabels, write = set_HasAbsoluteLabels};
  __property   VARIANT_BOOL    HasDiscreteDivisions = {read = get_HasDiscreteDivisions, write = set_HasDiscreteDivisions};
  __property   VARIANT_BOOL    HasAutoDivisions = {read = get_HasAutoDivisions, write = set_HasAutoDivisions};
  __property   long            Divisions = {read = get_Divisions, write = set_Divisions};
};
typedef ChSegmentDispT<ChSegment> ChSegmentDisp;

typedef TComInterface<ChSegmentBoundary>  TCOMChSegmentBoundary;

// *********************************************************************//
// DispIntf:  ChSegmentBoundary
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {186FEDB0-6FB6-11D2-A8FF-00C04FAC6830}
// *********************************************************************//
template<class T>
class ChSegmentBoundaryDispT : public TAutoDriver<ChSegmentBoundary>
{
public:
  ChSegmentBoundaryDispT(){}

  ChSegmentBoundaryDispT(ChSegmentBoundary *pintf)
  {
    TAutoDriver<ChSegmentBoundary>::Bind(pintf, false);
  }

  ChSegmentBoundaryDispT(ChSegmentBoundaryPtr pintf)
  {
    TAutoDriver<ChSegmentBoundary>::Bind(pintf, true);
  }

  ChSegmentBoundaryDispT& operator=(ChSegmentBoundary *pintf)
  {
    TAutoDriver<ChSegmentBoundary>::Bind(pintf, false);
    return *this;
  }

  ChSegmentBoundaryDispT& operator=(ChSegmentBoundaryPtr pintf)
  {
    TAutoDriver<ChSegmentBoundary>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Border(Owc10_xp::ChBorder** ppline/*[out,retval]*/);
  Owc10_xp::ChBorder* __fastcall get_Border(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Interior(Owc10_xp::ChInterior** ppinterior/*[out,retval]*/);
  Owc10_xp::ChInterior* __fastcall get_Interior(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Line(Owc10_xp::ChLine** ppline/*[out,retval]*/);
  Owc10_xp::ChLine* __fastcall get_Line(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(double* prvalue/*[out,retval]*/);
  double          __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(double prvalue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ValueType(Owc10_xp::ChartBoundaryValueTypeEnum* pvt/*[out,retval]*/);
  Owc10_xp::ChartBoundaryValueTypeEnum __fastcall get_ValueType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ValueType(Owc10_xp::ChartBoundaryValueTypeEnum pvt/*[in]*/);

  __property   Owc10_xp::ChBorder* Border = {read = get_Border};
  __property   Owc10_xp::ChInterior* Interior = {read = get_Interior};
  __property   Owc10_xp::ChLine* Line = {read = get_Line};
  __property   double          Value = {read = get_Value, write = set_Value};
  __property   Owc10_xp::ChartBoundaryValueTypeEnum ValueType = {read = get_ValueType, write = set_ValueType};
};
typedef ChSegmentBoundaryDispT<ChSegmentBoundary> ChSegmentBoundaryDisp;

typedef TComInterface<ChDropZone>  TCOMChDropZone;

// *********************************************************************//
// DispIntf:  ChDropZone
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F0706B76-6BB3-11D3-A18A-00C04F612970}
// *********************************************************************//
template<class T>
class ChDropZoneDispT : public TAutoDriver<ChDropZone>
{
public:
  ChDropZoneDispT(){}

  ChDropZoneDispT(ChDropZone *pintf)
  {
    TAutoDriver<ChDropZone>::Bind(pintf, false);
  }

  ChDropZoneDispT(ChDropZonePtr pintf)
  {
    TAutoDriver<ChDropZone>::Bind(pintf, true);
  }

  ChDropZoneDispT& operator=(ChDropZone *pintf)
  {
    TAutoDriver<ChDropZone>::Bind(pintf, false);
    return *this;
  }

  ChDropZoneDispT& operator=(ChDropZonePtr pintf)
  {
    TAutoDriver<ChDropZone>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ButtonFont(Owc10_xp::ChFont** ppfont/*[out,retval]*/);
  Owc10_xp::ChFont* __fastcall get_ButtonFont(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ButtonInterior(Owc10_xp::ChInterior** ppinterior/*[out,retval]*/);
  Owc10_xp::ChInterior* __fastcall get_ButtonInterior(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ButtonBorder(Owc10_xp::ChBorder** ppborder/*[out,retval]*/);
  Owc10_xp::ChBorder* __fastcall get_ButtonBorder(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_WatermarkFont(Owc10_xp::ChFont** ppfont/*[out,retval]*/);
  Owc10_xp::ChFont* __fastcall get_WatermarkFont(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_WatermarkInterior(Owc10_xp::ChInterior** ppinterior/*[out,retval]*/);
  Owc10_xp::ChInterior* __fastcall get_WatermarkInterior(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_WatermarkBorder(Owc10_xp::ChBorder** ppborder/*[out,retval]*/);
  Owc10_xp::ChBorder* __fastcall get_WatermarkBorder(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ChartFields(Owc10_xp::ChChartFields** ppwcfields/*[out,retval]*/);
  Owc10_xp::ChChartFields* __fastcall get_ChartFields(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* ppwcwebchart/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(long* ptop/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(long ptop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(long* pleft/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(long pleft/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Bottom(long* pbottom/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Right(long* pright/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Index(Owc10_xp::ChartDropZonesEnum* pIndex/*[out,retval]*/);
  Owc10_xp::ChartDropZonesEnum __fastcall get_Index(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/);
  Owc10_xp::ChartSelectionsEnum __fastcall get_ObjectType(void);

  __property   Owc10_xp::ChFont* ButtonFont = {read = get_ButtonFont};
  __property   Owc10_xp::ChInterior* ButtonInterior = {read = get_ButtonInterior};
  __property   Owc10_xp::ChBorder* ButtonBorder = {read = get_ButtonBorder};
  __property   Owc10_xp::ChFont* WatermarkFont = {read = get_WatermarkFont};
  __property   Owc10_xp::ChInterior* WatermarkInterior = {read = get_WatermarkInterior};
  __property   Owc10_xp::ChBorder* WatermarkBorder = {read = get_WatermarkBorder};
  __property   Owc10_xp::ChChartFields* ChartFields = {read = get_ChartFields};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Bottom = {read = get_Bottom};
  __property   long            Right = {read = get_Right};
  __property   Owc10_xp::ChartDropZonesEnum Index = {read = get_Index};
  __property   Owc10_xp::ChartSelectionsEnum ObjectType = {read = get_ObjectType};
};
typedef ChDropZoneDispT<ChDropZone> ChDropZoneDisp;

typedef TComInterface<ChChartFields>  TCOMChChartFields;

// *********************************************************************//
// DispIntf:  ChChartFields
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BB4C16FA-6BEC-11D3-A18A-00C04F612970}
// *********************************************************************//
template<class T>
class ChChartFieldsDispT : public TAutoDriver<ChChartFields>
{
public:
  ChChartFieldsDispT(){}

  ChChartFieldsDispT(ChChartFields *pintf)
  {
    TAutoDriver<ChChartFields>::Bind(pintf, false);
  }

  ChChartFieldsDispT(ChChartFieldsPtr pintf)
  {
    TAutoDriver<ChChartFields>::Bind(pintf, true);
  }

  ChChartFieldsDispT& operator=(ChChartFields *pintf)
  {
    TAutoDriver<ChChartFields>::Bind(pintf, false);
    return *this;
  }

  ChChartFieldsDispT& operator=(ChChartFieldsPtr pintf)
  {
    TAutoDriver<ChChartFields>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(long Index/*[in]*/, 
                                                 Owc10_xp::ChChartField** ppwcfield/*[out,retval]*/);
  Owc10_xp::ChChartField* __fastcall get_Item(long Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* pcfields/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Owc10_xp::ChDropZone** ppchdz/*[out,retval]*/);
  Owc10_xp::ChDropZone* __fastcall get_Parent(void);

  __property   long            Count = {read = get_Count};
  __property   Owc10_xp::ChDropZone* Parent = {read = get_Parent};
};
typedef ChChartFieldsDispT<ChChartFields> ChChartFieldsDisp;

typedef TComInterface<ChChartField>  TCOMChChartField;

// *********************************************************************//
// DispIntf:  ChChartField
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D7842C36-6BEC-11D3-A18A-00C04F612970}
// *********************************************************************//
template<class T>
class ChChartFieldDispT : public TAutoDriver<ChChartField>
{
public:
  ChChartFieldDispT(){}

  ChChartFieldDispT(ChChartField *pintf)
  {
    TAutoDriver<ChChartField>::Bind(pintf, false);
  }

  ChChartFieldDispT(ChChartFieldPtr pintf)
  {
    TAutoDriver<ChChartField>::Bind(pintf, true);
  }

  ChChartFieldDispT& operator=(ChChartField *pintf)
  {
    TAutoDriver<ChChartField>::Bind(pintf, false);
    return *this;
  }

  ChChartFieldDispT& operator=(ChChartFieldPtr pintf)
  {
    TAutoDriver<ChChartField>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PivotObject(LPDISPATCH* ppdispObj/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PivotObject(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Owc10_xp::ChDropZone** ppchdz/*[out,retval]*/);
  Owc10_xp::ChDropZone* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Select();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(long* ptop/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(long* pleft/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Bottom(long* pbottom/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Right(long* pright/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/);
  Owc10_xp::ChartSelectionsEnum __fastcall get_ObjectType(void);

  __property   LPDISPATCH      PivotObject = {read = get_PivotObject};
  __property   Owc10_xp::ChDropZone* Parent = {read = get_Parent};
  __property   long            Top = {read = get_Top};
  __property   long            Left = {read = get_Left};
  __property   long            Bottom = {read = get_Bottom};
  __property   long            Right = {read = get_Right};
  __property   Owc10_xp::ChartSelectionsEnum ObjectType = {read = get_ObjectType};
};
typedef ChChartFieldDispT<ChChartField> ChChartFieldDisp;

typedef TComInterface<OWCLanguageSettings>  TCOMOWCLanguageSettings;

// *********************************************************************//
// DispIntf:  OWCLanguageSettings
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6F5A76C3-0AC7-4DED-9A6B-A3547FD7B7BB}
// *********************************************************************//
template<class T>
class OWCLanguageSettingsDispT : public TAutoDriver<OWCLanguageSettings>
{
public:
  OWCLanguageSettingsDispT(){}

  OWCLanguageSettingsDispT(OWCLanguageSettings *pintf)
  {
    TAutoDriver<OWCLanguageSettings>::Bind(pintf, false);
  }

  OWCLanguageSettingsDispT(OWCLanguageSettingsPtr pintf)
  {
    TAutoDriver<OWCLanguageSettings>::Bind(pintf, true);
  }

  OWCLanguageSettingsDispT& operator=(OWCLanguageSettings *pintf)
  {
    TAutoDriver<OWCLanguageSettings>::Bind(pintf, false);
    return *this;
  }

  OWCLanguageSettingsDispT& operator=(OWCLanguageSettingsPtr pintf)
  {
    TAutoDriver<OWCLanguageSettings>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* Dispatch/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LanguageID(Owc10_xp::MsoAppLanguageID id/*[in]*/, 
                                                       long* lid/*[out,retval]*/);
  long            __fastcall get_LanguageID(Owc10_xp::MsoAppLanguageID id/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LanguagePreferredForEditing(Owc10_xp::MsoLanguageID lid/*[in]*/
                                                                        , 
                                                                        VARIANT_BOOL* f/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_LanguagePreferredForEditing(Owc10_xp::MsoLanguageID lid/*[in]*/);

  __property   LPDISPATCH      Application = {read = get_Application};
};
typedef OWCLanguageSettingsDispT<OWCLanguageSettings> OWCLanguageSettingsDisp;

// *********************************************************************//
// DispIntf:  ISpreadsheetEventSink
// Flags:     (4096) Dispatchable
// GUID:      {F5B39A75-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T>
class ISpreadsheetEventSinkDispT : public TAutoDriver<ISpreadsheetEventSink>
{
public:
  ISpreadsheetEventSinkDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall BeforeContextMenu(long x, long y, Owc10_xp::ByRef* Menu, 
                                                    Owc10_xp::ByRef* Cancel);
  void /*[VT_VOID:0]*/ __fastcall BeforeKeyDown(long KeyCode, long Shift, Owc10_xp::ByRef* Cancel);
  void /*[VT_VOID:0]*/ __fastcall BeforeKeyPress(long KeyAscii, Owc10_xp::ByRef* Cancel);
  void /*[VT_VOID:0]*/ __fastcall BeforeKeyUp(long KeyCode, long Shift, Owc10_xp::ByRef* Cancel);
  void /*[VT_VOID:0]*/ __fastcall Click();
  void /*[VT_VOID:0]*/ __fastcall CommandEnabled(VARIANT Command, Owc10_xp::ByRef* Enabled);
  void /*[VT_VOID:0]*/ __fastcall CommandChecked(VARIANT Command, Owc10_xp::ByRef* Checked);
  void /*[VT_VOID:0]*/ __fastcall CommandTipText(VARIANT Command, Owc10_xp::ByRef* Caption);
  void /*[VT_VOID:0]*/ __fastcall CommandBeforeExecute(VARIANT Command, Owc10_xp::ByRef* Cancel);
  void /*[VT_VOID:0]*/ __fastcall CommandExecute(VARIANT Command, VARIANT_BOOL Succeeded);
  void /*[VT_VOID:0]*/ __fastcall DblClick();
  void /*[VT_VOID:0]*/ __fastcall EndEdit(VARIANT_BOOL Accept, Owc10_xp::ByRef* FinalValue, 
                                          Owc10_xp::ByRef* Cancel, Owc10_xp::ByRef* ErrorDescription);
  void /*[VT_VOID:0]*/ __fastcall Initialize();
  void /*[VT_VOID:0]*/ __fastcall KeyDown(long KeyCode, long Shift);
  void /*[VT_VOID:0]*/ __fastcall KeyPress(long KeyAscii);
  void /*[VT_VOID:0]*/ __fastcall KeyUp(long KeyCode, long Shift);
  void /*[VT_VOID:0]*/ __fastcall LoadCompleted();
  void /*[VT_VOID:0]*/ __fastcall MouseDown(long Button, long Shift, long x, long y);
  void /*[VT_VOID:0]*/ __fastcall MouseOut(long Button, long Shift, Owc10_xp::_Range* Target);
  void /*[VT_VOID:0]*/ __fastcall MouseOver(long Button, long Shift, Owc10_xp::_Range* Target);
  void /*[VT_VOID:0]*/ __fastcall MouseUp(long Button, long Shift, long x, long y);
  void /*[VT_VOID:0]*/ __fastcall MouseWheel(VARIANT_BOOL Page, long Count);
  void /*[VT_VOID:0]*/ __fastcall SelectionChange();
  void /*[VT_VOID:0]*/ __fastcall SelectionChanging(Owc10_xp::_Range* Range);
  void /*[VT_VOID:0]*/ __fastcall SheetActivate(Owc10_xp::Worksheet* Sh);
  void /*[VT_VOID:0]*/ __fastcall SheetCalculate(Owc10_xp::Worksheet* Sh);
  void /*[VT_VOID:0]*/ __fastcall SheetChange(Owc10_xp::Worksheet* Sh, Owc10_xp::_Range* Target);
  void /*[VT_VOID:0]*/ __fastcall SheetDeactivate(Owc10_xp::Worksheet* Sh);
  void /*[VT_VOID:0]*/ __fastcall SheetFollowHyperlink(Owc10_xp::Worksheet* Sh, 
                                                       Owc10_xp::Hyperlink* Target);
  void /*[VT_VOID:0]*/ __fastcall StartEdit(LPDISPATCH Selection, Owc10_xp::ByRef* InitialValue, 
                                            Owc10_xp::ByRef* Cancel, 
                                            Owc10_xp::ByRef* ErrorDescription);
  void /*[VT_VOID:0]*/ __fastcall ViewChange(Owc10_xp::_Range* Target);

};
typedef ISpreadsheetEventSinkDispT<ISpreadsheetEventSink> ISpreadsheetEventSinkDisp;

// *********************************************************************//
// SmartIntf: TCOM_Range
// Interface: _Range
// *********************************************************************//
template <class T /* _Range */ >
class TCOM_RangeT : public TComInterface<_Range>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_RangeT() {}
  TCOM_RangeT(_Range *intf, bool addRef = false) : TComInterface<_Range>(intf, addRef) {}
  TCOM_RangeT(const TCOM_RangeT& src) : TComInterface<_Range>(src) {}
  TCOM_RangeT& operator=(const TCOM_RangeT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall Activate(void);
  HRESULT         __fastcall AutoFilter(VARIANT* Field/*[in,opt]*/= TNoParam(), 
                                        VARIANT* Criteria1/*[in,opt]*/= TNoParam(), 
                                        VARIANT* Operator/*[in,opt]*/= TNoParam(), 
                                        VARIANT* Criteria2/*[in,opt]*/= TNoParam(), 
                                        VARIANT* VisibleDropDown/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall AutoFit(void);
  HRESULT         __fastcall BorderAround(VARIANT LineStyle/*[in,opt]*/, 
                                          Owc10_xp::XlBorderWeight Weight/*[in,def,opt]*/, 
                                          Owc10_xp::XlColorIndex ColorIndex/*[in,def,opt]*/, 
                                          VARIANT Color/*[in,opt]*/);
  HRESULT         __fastcall Calculate(void);
  HRESULT         __fastcall Clear(void);
  HRESULT         __fastcall ClearFormats(void);
  HRESULT         __fastcall ClearContents(void);
  HRESULT         __fastcall Copy(VARIANT Destination/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall CopyFromRecordset(LPUNKNOWN Data/*[in]*/, VARIANT MaxRows/*[in,opt]*/, 
                                               VARIANT MaxColumns/*[in,opt]*/, 
                                               int* pcrowRetrieved/*[out,retval]*/);
  int             __fastcall CopyFromRecordset(LPUNKNOWN Data/*[in]*/, 
                                               VARIANT MaxRows/*[in,opt]*/= TNoParam(), 
                                               VARIANT MaxColumns/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall Cut(VARIANT Destination/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall Delete(VARIANT* Shift/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall FillDown(void);
  HRESULT         __fastcall FillRight(void);
  HRESULT         __fastcall Find(VARIANT What/*[in]*/, VARIANT* After/*[in,opt]*/, 
                                  VARIANT* LookIn/*[in,opt]*/, VARIANT* LookAt/*[in,opt]*/, 
                                  VARIANT* SearchOrder/*[in,opt]*/, 
                                  Owc10_xp::XlSearchDirection SearchDirection/*[in,def,opt]*/, 
                                  VARIANT* MatchCase/*[in,opt]*/, VARIANT* MatchByte/*[in,opt]*/, 
                                  Owc10_xp::_Range** Range/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall Find(VARIANT What/*[in]*/, VARIANT* After/*[in,opt]*/, 
                                    VARIANT* LookIn/*[in,opt]*/, VARIANT* LookAt/*[in,opt]*/, 
                                    VARIANT* SearchOrder/*[in,opt]*/, 
                                    Owc10_xp::XlSearchDirection SearchDirection/*[in,def,opt]*/, 
                                    VARIANT* MatchCase/*[in,opt]*/, VARIANT* MatchByte/*[in,opt]*/);
  HRESULT         __fastcall FindNext(VARIANT* After/*[in,opt]*/, 
                                      Owc10_xp::_Range** Range/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall FindNext(VARIANT* After/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall FindPrevious(VARIANT* After/*[in,opt]*/, 
                                          Owc10_xp::_Range** Range/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall FindPrevious(VARIANT* After/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall Insert(VARIANT* Shift/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall LoadText(BSTR File/*[in]*/, BSTR Delimiters/*[in,def,opt]*/, 
                                      VARIANT_BOOL ConsecutiveDelimAsOne/*[in,def,opt]*/, 
                                      BSTR TextQualifier/*[in,def,opt]*/);
  HRESULT         __fastcall Merge(VARIANT* Across/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall ParseText(BSTR Text/*[in]*/, BSTR Delimiters/*[in,def,opt]*/, 
                                       VARIANT_BOOL ConsecutiveDelimAsOne/*[in,def,opt]*/, 
                                       BSTR TextQualifier/*[in,def,opt]*/);
  HRESULT         __fastcall Paste(void);
  HRESULT         __fastcall Select(void);
  HRESULT         __fastcall Show(void);
  HRESULT         __fastcall Sort(int ColumnKey/*[in,def,opt]*/, 
                                  Owc10_xp::XlSortOrder Order/*[in,def,opt]*/, 
                                  Owc10_xp::XlYesNoGuess Header/*[in,def,opt]*/);
  HRESULT         __fastcall UnMerge(void);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get__Default(VARIANT Row/*[in,opt]*/, VARIANT Column/*[in,opt]*/, 
                                          VARIANT* var/*[out,retval]*/);
  VARIANT         __fastcall get__Default(VARIANT Row/*[in,opt]*/= TNoParam(), 
                                          VARIANT Column/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall set__Default(VARIANT Row/*[in,opt]*/, VARIANT Column/*[in,opt]*/, 
                                          VARIANT var/*[in]*/);
  HRESULT         __fastcall get_Address(VARIANT* RowAbsolute/*[in,opt]*/, 
                                         VARIANT* ColumnAbsolute/*[in,opt]*/, 
                                         Owc10_xp::XlReferenceStyle ReferenceStyle/*[in,def,opt]*/, 
                                         VARIANT* External/*[in,opt]*/, 
                                         VARIANT* RelativeTo/*[in,opt]*/, 
                                         BSTR* Address/*[out,retval]*/);
  BSTR            __fastcall get_Address(VARIANT* RowAbsolute/*[in,opt]*/, 
                                         VARIANT* ColumnAbsolute/*[in,opt]*/, 
                                         Owc10_xp::XlReferenceStyle ReferenceStyle/*[in,def,opt]*/, 
                                         VARIANT* External/*[in,opt]*/, 
                                         VARIANT* RelativeTo/*[in,opt]*/);
  HRESULT         __fastcall get_Application(Owc10_xp::ISpreadsheet** ppApp/*[out,retval]*/);
  HRESULT         __fastcall get_Application(Owc10_xp::ISpreadsheetPtr* ppApp/*[out,retval]*/);
  Owc10_xp::ISpreadsheetPtr __fastcall get_Application(void);
  HRESULT         __fastcall get_Borders(Owc10_xp::Borders** Borders/*[out,retval]*/);
  HRESULT         __fastcall get_Borders(Owc10_xp::BordersPtr* Borders/*[out,retval]*/);
  Owc10_xp::BordersPtr __fastcall get_Borders(void);
  HRESULT         __fastcall get_Cells(Owc10_xp::_Range** Range/*[out,retval]*/);
  HRESULT         __fastcall get_Cells(Owc10_xp::_RangePtr* Range/*[out,retval]*/);
  Owc10_xp::_RangePtr __fastcall get_Cells(void);
  HRESULT         __fastcall get_Column(long* Column/*[out,retval]*/);
  long            __fastcall get_Column(void);
  HRESULT         __fastcall get_Columns(Owc10_xp::_Range** Range/*[out,retval]*/);
  HRESULT         __fastcall get_Columns(Owc10_xp::_RangePtr* Range/*[out,retval]*/);
  Owc10_xp::_RangePtr __fastcall get_Columns(void);
  HRESULT         __fastcall get_ColumnWidth(VARIANT* ColumnWidth/*[out,retval]*/);
  VARIANT         __fastcall get_ColumnWidth(void);
  HRESULT         __fastcall set_ColumnWidth(double ColumnWidth/*[in]*/);
  HRESULT         __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall get_CurrentArray(Owc10_xp::_Range** CurrentRange/*[out,retval]*/);
  HRESULT         __fastcall get_CurrentArray(Owc10_xp::_RangePtr* CurrentRange/*[out,retval]*/);
  Owc10_xp::_RangePtr __fastcall get_CurrentArray(void);
  HRESULT         __fastcall get_CurrentRegion(Owc10_xp::_Range** CurrentRegion/*[out,retval]*/);
  HRESULT         __fastcall get_CurrentRegion(Owc10_xp::_RangePtr* CurrentRegion/*[out,retval]*/);
  Owc10_xp::_RangePtr __fastcall get_CurrentRegion(void);
  HRESULT         __fastcall get_End(Owc10_xp::XlDirection Direction/*[in]*/, 
                                     Owc10_xp::_Range** Range/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall get_End(Owc10_xp::XlDirection Direction/*[in]*/);
  HRESULT         __fastcall get_EntireColumn(Owc10_xp::_Range** Range/*[out,retval]*/);
  HRESULT         __fastcall get_EntireColumn(Owc10_xp::_RangePtr* Range/*[out,retval]*/);
  Owc10_xp::_RangePtr __fastcall get_EntireColumn(void);
  HRESULT         __fastcall get_EntireRow(Owc10_xp::_Range** Range/*[out,retval]*/);
  HRESULT         __fastcall get_EntireRow(Owc10_xp::_RangePtr* Range/*[out,retval]*/);
  Owc10_xp::_RangePtr __fastcall get_EntireRow(void);
  HRESULT         __fastcall get_Font(Owc10_xp::Font** Font/*[out,retval]*/);
  HRESULT         __fastcall get_Font(Owc10_xp::FontPtr* Font/*[out,retval]*/);
  Owc10_xp::FontPtr __fastcall get_Font(void);
  HRESULT         __fastcall get_Formula(VARIANT* Formula/*[out,retval]*/);
  VARIANT         __fastcall get_Formula(void);
  HRESULT         __fastcall set_Formula(VARIANT Formula/*[in]*/);
  HRESULT         __fastcall get_FormulaArray(VARIANT* FormulaArray/*[out,retval]*/);
  VARIANT         __fastcall get_FormulaArray(void);
  HRESULT         __fastcall set_FormulaArray(VARIANT FormulaArray/*[in]*/);
  HRESULT         __fastcall get_FormulaLocal(VARIANT* Formula/*[out,retval]*/);
  VARIANT         __fastcall get_FormulaLocal(void);
  HRESULT         __fastcall set_FormulaLocal(VARIANT Formula/*[in]*/);
  HRESULT         __fastcall get_HasArray(VARIANT* HasArray/*[out,retval]*/);
  VARIANT         __fastcall get_HasArray(void);
  HRESULT         __fastcall get_HasFormula(VARIANT* HasFormula/*[out,retval]*/);
  VARIANT         __fastcall get_HasFormula(void);
  HRESULT         __fastcall get_Height(VARIANT* Height/*[out,retval]*/);
  VARIANT         __fastcall get_Height(void);
  HRESULT         __fastcall get_Hidden(VARIANT_BOOL* Hidden/*[out,retval]*/);
  HRESULT         __fastcall get_Hidden(TOLEBOOL* Hidden/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Hidden(void);
  HRESULT         __fastcall set_Hidden(VARIANT_BOOL Hidden/*[in]*/);
  HRESULT         __fastcall set_Hidden(TOLEBOOL Hidden/*[in]*/);
  HRESULT         __fastcall get_HorizontalAlignment(VARIANT* HAlign/*[out,retval]*/);
  VARIANT         __fastcall get_HorizontalAlignment(void);
  HRESULT         __fastcall set_HorizontalAlignment(Owc10_xp::XlHAlign HAlign/*[in]*/);
  HRESULT         __fastcall get_HTMLData(BSTR* HTMLData/*[out,retval]*/);
  BSTR            __fastcall get_HTMLData(void);
  HRESULT         __fastcall get_Hyperlink(Owc10_xp::Hyperlink** Hyperlink/*[out,retval]*/);
  HRESULT         __fastcall get_Hyperlink(Owc10_xp::HyperlinkPtr* Hyperlink/*[out,retval]*/);
  Owc10_xp::HyperlinkPtr __fastcall get_Hyperlink(void);
  HRESULT         __fastcall get_Interior(Owc10_xp::Interior** Interior/*[out,retval]*/);
  HRESULT         __fastcall get_Interior(Owc10_xp::InteriorPtr* Interior/*[out,retval]*/);
  Owc10_xp::InteriorPtr __fastcall get_Interior(void);
  HRESULT         __fastcall get_Item(VARIANT RowIndex/*[in]*/, VARIANT ColumnIndex/*[in,opt]*/, 
                                      Owc10_xp::_Range** Range/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall get_Item(VARIANT RowIndex/*[in]*/, 
                                        VARIANT ColumnIndex/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall get_Left(VARIANT* Left/*[out,retval]*/);
  VARIANT         __fastcall get_Left(void);
  HRESULT         __fastcall get_Locked(VARIANT* Locked/*[out,retval]*/);
  VARIANT         __fastcall get_Locked(void);
  HRESULT         __fastcall set_Locked(VARIANT_BOOL Locked/*[in]*/);
  HRESULT         __fastcall set_Locked(TOLEBOOL Locked/*[in]*/);
  HRESULT         __fastcall get_MergeArea(Owc10_xp::_Range** Range/*[out,retval]*/);
  HRESULT         __fastcall get_MergeArea(Owc10_xp::_RangePtr* Range/*[out,retval]*/);
  Owc10_xp::_RangePtr __fastcall get_MergeArea(void);
  HRESULT         __fastcall get_MergeCells(VARIANT* MergeCells/*[out,retval]*/);
  VARIANT         __fastcall get_MergeCells(void);
  HRESULT         __fastcall set_MergeCells(VARIANT_BOOL MergeCells/*[in]*/);
  HRESULT         __fastcall set_MergeCells(TOLEBOOL MergeCells/*[in]*/);
  HRESULT         __fastcall get_Name(Owc10_xp::Name** Name/*[out,retval]*/);
  HRESULT         __fastcall get_Name(Owc10_xp::NamePtr* Name/*[out,retval]*/);
  Owc10_xp::NamePtr __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT         __fastcall get_Next(Owc10_xp::_Range** Range/*[out,retval]*/);
  HRESULT         __fastcall get_Next(Owc10_xp::_RangePtr* Range/*[out,retval]*/);
  Owc10_xp::_RangePtr __fastcall get_Next(void);
  HRESULT         __fastcall get_NumberFormat(VARIANT* NumberFormat/*[out,retval]*/);
  VARIANT         __fastcall get_NumberFormat(void);
  HRESULT         __fastcall set_NumberFormat(BSTR NumberFormat/*[in]*/);
  HRESULT         __fastcall get_Offset(VARIANT RowOffset/*[in,opt]*/, 
                                        VARIANT ColumnOffset/*[in,opt]*/, 
                                        Owc10_xp::_Range** Range/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall get_Offset(VARIANT RowOffset/*[in,opt]*/= TNoParam(), 
                                          VARIANT ColumnOffset/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall get_Parent(Owc10_xp::Worksheet** Sheet/*[out,retval]*/);
  HRESULT         __fastcall get_Parent(Owc10_xp::WorksheetPtr* Sheet/*[out,retval]*/);
  Owc10_xp::WorksheetPtr __fastcall get_Parent(void);
  HRESULT         __fastcall get_PrefixCharacter(VARIANT* str/*[out,retval]*/);
  VARIANT         __fastcall get_PrefixCharacter(void);
  HRESULT         __fastcall get_Previous(Owc10_xp::_Range** Range/*[out,retval]*/);
  HRESULT         __fastcall get_Previous(Owc10_xp::_RangePtr* Range/*[out,retval]*/);
  Owc10_xp::_RangePtr __fastcall get_Previous(void);
  HRESULT         __fastcall get_Range(VARIANT Cell1/*[in]*/, VARIANT Cell2/*[in,opt]*/, 
                                       Owc10_xp::_Range** Range/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall get_Range(VARIANT Cell1/*[in]*/, 
                                         VARIANT Cell2/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall get_ReadingOrder(VARIANT* ReadingOrder/*[out,retval]*/);
  VARIANT         __fastcall get_ReadingOrder(void);
  HRESULT         __fastcall set_ReadingOrder(Owc10_xp::XlReadingOrder ReadingOrder/*[in]*/);
  HRESULT         __fastcall get_Row(long* Row/*[out,retval]*/);
  long            __fastcall get_Row(void);
  HRESULT         __fastcall get_RowHeight(VARIANT* RowHeight/*[out,retval]*/);
  VARIANT         __fastcall get_RowHeight(void);
  HRESULT         __fastcall set_RowHeight(double RowHeight/*[in]*/);
  HRESULT         __fastcall get_Rows(Owc10_xp::_Range** Range/*[out,retval]*/);
  HRESULT         __fastcall get_Rows(Owc10_xp::_RangePtr* Range/*[out,retval]*/);
  Owc10_xp::_RangePtr __fastcall get_Rows(void);
  HRESULT         __fastcall get_Text(VARIANT* Text/*[out,retval]*/);
  VARIANT         __fastcall get_Text(void);
  HRESULT         __fastcall get_Top(VARIANT* Top/*[out,retval]*/);
  VARIANT         __fastcall get_Top(void);
  HRESULT         __fastcall get_UseStandardHeight(VARIANT* pbool/*[out,retval]*/);
  VARIANT         __fastcall get_UseStandardHeight(void);
  HRESULT         __fastcall set_UseStandardHeight(VARIANT_BOOL pbool/*[in]*/);
  HRESULT         __fastcall set_UseStandardHeight(TOLEBOOL pbool/*[in]*/);
  HRESULT         __fastcall get_UseStandardWidth(VARIANT* pbool/*[out,retval]*/);
  VARIANT         __fastcall get_UseStandardWidth(void);
  HRESULT         __fastcall set_UseStandardWidth(VARIANT_BOOL pbool/*[in]*/);
  HRESULT         __fastcall set_UseStandardWidth(TOLEBOOL pbool/*[in]*/);
  HRESULT         __fastcall get_Value(VARIANT RangeValueDataType/*[in,opt]*/, 
                                       VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall get_Value(VARIANT RangeValueDataType/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall set_Value(VARIANT RangeValueDataType/*[in,opt]*/, VARIANT Value/*[in]*/);
  HRESULT         __fastcall get_Value2(VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall get_Value2(void);
  HRESULT         __fastcall set_Value2(VARIANT Value/*[in]*/);
  HRESULT         __fastcall get_VerticalAlignment(VARIANT* VAlignment/*[out,retval]*/);
  VARIANT         __fastcall get_VerticalAlignment(void);
  HRESULT         __fastcall set_VerticalAlignment(Owc10_xp::XlVAlign VAlignment/*[in]*/);
  HRESULT         __fastcall get_Width(VARIANT* Width/*[out,retval]*/);
  VARIANT         __fastcall get_Width(void);
  HRESULT         __fastcall get_Worksheet(Owc10_xp::Worksheet** Sheet/*[out,retval]*/);
  HRESULT         __fastcall get_Worksheet(Owc10_xp::WorksheetPtr* Sheet/*[out,retval]*/);
  Owc10_xp::WorksheetPtr __fastcall get_Worksheet(void);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   Owc10_xp::ISpreadsheetPtr Application = {read = get_Application};
  __property   Owc10_xp::BordersPtr Borders = {read = get_Borders};
  __property   Owc10_xp::_RangePtr Cells = {read = get_Cells};
  __property   long            Column = {read = get_Column};
  __property   Owc10_xp::_RangePtr Columns = {read = get_Columns};
  __property   double          ColumnWidth = {write = set_ColumnWidth};
  __property   long            Count = {read = get_Count};
  __property   Owc10_xp::_RangePtr CurrentArray = {read = get_CurrentArray};
  __property   Owc10_xp::_RangePtr CurrentRegion = {read = get_CurrentRegion};
  __property   Owc10_xp::_RangePtr EntireColumn = {read = get_EntireColumn};
  __property   Owc10_xp::_RangePtr EntireRow = {read = get_EntireRow};
  __property   Owc10_xp::FontPtr Font = {read = get_Font};
  __property   TOLEBOOL        Hidden = {read = get_Hidden, write = set_Hidden};
  __property   Owc10_xp::XlHAlign HorizontalAlignment = {write = set_HorizontalAlignment};
  __property   BSTR            HTMLData = {read = get_HTMLData};
  __property   Owc10_xp::HyperlinkPtr Hyperlink = {read = get_Hyperlink};
  __property   Owc10_xp::InteriorPtr Interior = {read = get_Interior};
  __property   TOLEBOOL        Locked = {write = set_Locked};
  __property   Owc10_xp::_RangePtr MergeArea = {read = get_MergeArea};
  __property   TOLEBOOL        MergeCells = {write = set_MergeCells};
  __property   Owc10_xp::NamePtr Name = {read = get_Name};
  __property   Owc10_xp::_RangePtr Next = {read = get_Next};
  __property   BSTR            NumberFormat = {write = set_NumberFormat};
  __property   Owc10_xp::WorksheetPtr Parent = {read = get_Parent};
  __property   Owc10_xp::_RangePtr Previous = {read = get_Previous};
  __property   Owc10_xp::XlReadingOrder ReadingOrder = {write = set_ReadingOrder};
  __property   long            Row = {read = get_Row};
  __property   double          RowHeight = {write = set_RowHeight};
  __property   Owc10_xp::_RangePtr Rows = {read = get_Rows};
  __property   TOLEBOOL        UseStandardHeight = {write = set_UseStandardHeight};
  __property   TOLEBOOL        UseStandardWidth = {write = set_UseStandardWidth};
  __property   Owc10_xp::XlVAlign VerticalAlignment = {write = set_VerticalAlignment};
  __property   Owc10_xp::WorksheetPtr Worksheet = {read = get_Worksheet};
};
typedef TCOM_RangeT<_Range> TCOM_Range;

// *********************************************************************//
// DispIntf:  _Range
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B05-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class _RangeDispT : public TAutoDriver<_Range>
{
public:
  _RangeDispT(){}

  _RangeDispT(_Range *pintf)
  {
    TAutoDriver<_Range>::Bind(pintf, false);
  }

  _RangeDispT(_RangePtr pintf)
  {
    TAutoDriver<_Range>::Bind(pintf, true);
  }

  _RangeDispT& operator=(_Range *pintf)
  {
    TAutoDriver<_Range>::Bind(pintf, false);
    return *this;
  }

  _RangeDispT& operator=(_RangePtr pintf)
  {
    TAutoDriver<_Range>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Range));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Range);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall Activate();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AutoFilter(VARIANT* Field/*[in,opt]*/= TNoParam(), 
                                                   VARIANT* Criteria1/*[in,opt]*/= TNoParam(), 
                                                   VARIANT* Operator/*[in,opt]*/= TNoParam(), 
                                                   VARIANT* Criteria2/*[in,opt]*/= TNoParam(), 
                                                   VARIANT* VisibleDropDown/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AutoFit();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall BorderAround(VARIANT LineStyle/*[in,opt]*/, 
                                                     Owc10_xp::XlBorderWeight Weight/*[in,def,opt]*/
                                                     , 
                                                     Owc10_xp::XlColorIndex ColorIndex/*[in,def,opt]*/
                                                     , VARIANT Color/*[in,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Calculate();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Clear();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ClearFormats();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ClearContents();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Copy(VARIANT Destination/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CopyFromRecordset(LPUNKNOWN Data/*[in]*/, 
                                                          VARIANT MaxRows/*[in,opt]*/, 
                                                          VARIANT MaxColumns/*[in,opt]*/, 
                                                          int* pcrowRetrieved/*[out,retval]*/);
  int             __fastcall CopyFromRecordset(LPUNKNOWN Data/*[in]*/, 
                                               VARIANT MaxRows/*[in,opt]*/= TNoParam(), 
                                               VARIANT MaxColumns/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Cut(VARIANT Destination/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(VARIANT* Shift/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall FillDown();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall FillRight();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Find(VARIANT What/*[in]*/, VARIANT* After/*[in,opt]*/, 
                                             VARIANT* LookIn/*[in,opt]*/, 
                                             VARIANT* LookAt/*[in,opt]*/, 
                                             VARIANT* SearchOrder/*[in,opt]*/, 
                                             Owc10_xp::XlSearchDirection SearchDirection/*[in,def,opt]*/
                                             , VARIANT* MatchCase/*[in,opt]*/, 
                                             VARIANT* MatchByte/*[in,opt]*/, 
                                             Owc10_xp::_Range** Range/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall Find(VARIANT What/*[in]*/, VARIANT* After/*[in,opt]*/, 
                                    VARIANT* LookIn/*[in,opt]*/, VARIANT* LookAt/*[in,opt]*/, 
                                    VARIANT* SearchOrder/*[in,opt]*/, 
                                    Owc10_xp::XlSearchDirection SearchDirection/*[in,def,opt]*/, 
                                    VARIANT* MatchCase/*[in,opt]*/, VARIANT* MatchByte/*[in,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall FindNext(VARIANT* After/*[in,opt]*/, 
                                                 Owc10_xp::_Range** Range/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall FindNext(VARIANT* After/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall FindPrevious(VARIANT* After/*[in,opt]*/, 
                                                     Owc10_xp::_Range** Range/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall FindPrevious(VARIANT* After/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Insert(VARIANT* Shift/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall LoadText(BSTR File/*[in]*/, BSTR Delimiters/*[in,def,opt]*/
                                                 , 
                                                 VARIANT_BOOL ConsecutiveDelimAsOne/*[in,def,opt]*/
                                                 , BSTR TextQualifier/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Merge(VARIANT* Across/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ParseText(BSTR Text/*[in]*/, BSTR Delimiters/*[in,def,opt]*/
                                                  , 
                                                  VARIANT_BOOL ConsecutiveDelimAsOne/*[in,def,opt]*/
                                                  , BSTR TextQualifier/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Paste();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Select();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Show();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Sort(int ColumnKey/*[in,def,opt]*/, 
                                             Owc10_xp::XlSortOrder Order/*[in,def,opt]*/, 
                                             Owc10_xp::XlYesNoGuess Header/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall UnMerge();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__Default(VARIANT Row/*[in,opt]*/, 
                                                     VARIANT Column/*[in,opt]*/, 
                                                     VARIANT* var/*[out,retval]*/);
  VARIANT         __fastcall get__Default(VARIANT Row/*[in,opt]*/= TNoParam(), 
                                          VARIANT Column/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set__Default(VARIANT Row/*[in,opt]*/, 
                                                     VARIANT Column/*[in,opt]*/, VARIANT var/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Address(VARIANT* RowAbsolute/*[in,opt]*/, 
                                                    VARIANT* ColumnAbsolute/*[in,opt]*/, 
                                                    Owc10_xp::XlReferenceStyle ReferenceStyle/*[in,def,opt]*/
                                                    , VARIANT* External/*[in,opt]*/, 
                                                    VARIANT* RelativeTo/*[in,opt]*/, 
                                                    BSTR* Address/*[out,retval]*/);
  BSTR            __fastcall get_Address(VARIANT* RowAbsolute/*[in,opt]*/, 
                                         VARIANT* ColumnAbsolute/*[in,opt]*/, 
                                         Owc10_xp::XlReferenceStyle ReferenceStyle/*[in,def,opt]*/, 
                                         VARIANT* External/*[in,opt]*/, 
                                         VARIANT* RelativeTo/*[in,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Owc10_xp::ISpreadsheet** ppApp/*[out,retval]*/);
  Owc10_xp::ISpreadsheet* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Borders(Owc10_xp::Borders** Borders/*[out,retval]*/);
  Owc10_xp::Borders* __fastcall get_Borders(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Cells(Owc10_xp::_Range** Range/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall get_Cells(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Column(long* Column/*[out,retval]*/);
  long            __fastcall get_Column(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Columns(Owc10_xp::_Range** Range/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall get_Columns(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnWidth(VARIANT* ColumnWidth/*[out,retval]*/);
  VARIANT         __fastcall get_ColumnWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColumnWidth(double ColumnWidth/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CurrentArray(Owc10_xp::_Range** CurrentRange/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall get_CurrentArray(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CurrentRegion(Owc10_xp::_Range** CurrentRegion/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall get_CurrentRegion(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_End(Owc10_xp::XlDirection Direction/*[in]*/, 
                                                Owc10_xp::_Range** Range/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall get_End(Owc10_xp::XlDirection Direction/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EntireColumn(Owc10_xp::_Range** Range/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall get_EntireColumn(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EntireRow(Owc10_xp::_Range** Range/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall get_EntireRow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Font(Owc10_xp::Font** Font/*[out,retval]*/);
  Owc10_xp::Font* __fastcall get_Font(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Formula(VARIANT* Formula/*[out,retval]*/);
  VARIANT         __fastcall get_Formula(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Formula(VARIANT Formula/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FormulaArray(VARIANT* FormulaArray/*[out,retval]*/);
  VARIANT         __fastcall get_FormulaArray(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FormulaArray(VARIANT FormulaArray/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FormulaLocal(VARIANT* Formula/*[out,retval]*/);
  VARIANT         __fastcall get_FormulaLocal(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FormulaLocal(VARIANT Formula/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasArray(VARIANT* HasArray/*[out,retval]*/);
  VARIANT         __fastcall get_HasArray(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasFormula(VARIANT* HasFormula/*[out,retval]*/);
  VARIANT         __fastcall get_HasFormula(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(VARIANT* Height/*[out,retval]*/);
  VARIANT         __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Hidden(VARIANT_BOOL* Hidden/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Hidden(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Hidden(VARIANT_BOOL Hidden/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HorizontalAlignment(VARIANT* HAlign/*[out,retval]*/);
  VARIANT         __fastcall get_HorizontalAlignment(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HorizontalAlignment(Owc10_xp::XlHAlign HAlign/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HTMLData(BSTR* HTMLData/*[out,retval]*/);
  BSTR            __fastcall get_HTMLData(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Hyperlink(Owc10_xp::Hyperlink** Hyperlink/*[out,retval]*/);
  Owc10_xp::Hyperlink* __fastcall get_Hyperlink(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Interior(Owc10_xp::Interior** Interior/*[out,retval]*/);
  Owc10_xp::Interior* __fastcall get_Interior(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT RowIndex/*[in]*/, 
                                                 VARIANT ColumnIndex/*[in,opt]*/, 
                                                 Owc10_xp::_Range** Range/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall get_Item(VARIANT RowIndex/*[in]*/, 
                                        VARIANT ColumnIndex/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(VARIANT* Left/*[out,retval]*/);
  VARIANT         __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Locked(VARIANT* Locked/*[out,retval]*/);
  VARIANT         __fastcall get_Locked(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Locked(VARIANT_BOOL Locked/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MergeArea(Owc10_xp::_Range** Range/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall get_MergeArea(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MergeCells(VARIANT* MergeCells/*[out,retval]*/);
  VARIANT         __fastcall get_MergeCells(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MergeCells(VARIANT_BOOL MergeCells/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(Owc10_xp::Name** Name/*[out,retval]*/);
  Owc10_xp::Name* __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Next(Owc10_xp::_Range** Range/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall get_Next(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NumberFormat(VARIANT* NumberFormat/*[out,retval]*/);
  VARIANT         __fastcall get_NumberFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_NumberFormat(BSTR NumberFormat/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Offset(VARIANT RowOffset/*[in,opt]*/, 
                                                   VARIANT ColumnOffset/*[in,opt]*/, 
                                                   Owc10_xp::_Range** Range/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall get_Offset(VARIANT RowOffset/*[in,opt]*/= TNoParam(), 
                                          VARIANT ColumnOffset/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Owc10_xp::Worksheet** Sheet/*[out,retval]*/);
  Owc10_xp::Worksheet* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PrefixCharacter(VARIANT* str/*[out,retval]*/);
  VARIANT         __fastcall get_PrefixCharacter(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Previous(Owc10_xp::_Range** Range/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall get_Previous(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Range(VARIANT Cell1/*[in]*/, VARIANT Cell2/*[in,opt]*/, 
                                                  Owc10_xp::_Range** Range/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall get_Range(VARIANT Cell1/*[in]*/, 
                                         VARIANT Cell2/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ReadingOrder(VARIANT* ReadingOrder/*[out,retval]*/);
  VARIANT         __fastcall get_ReadingOrder(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ReadingOrder(Owc10_xp::XlReadingOrder ReadingOrder/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Row(long* Row/*[out,retval]*/);
  long            __fastcall get_Row(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RowHeight(VARIANT* RowHeight/*[out,retval]*/);
  VARIANT         __fastcall get_RowHeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RowHeight(double RowHeight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Rows(Owc10_xp::_Range** Range/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall get_Rows(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Text(VARIANT* Text/*[out,retval]*/);
  VARIANT         __fastcall get_Text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(VARIANT* Top/*[out,retval]*/);
  VARIANT         __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_UseStandardHeight(VARIANT* pbool/*[out,retval]*/);
  VARIANT         __fastcall get_UseStandardHeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_UseStandardHeight(VARIANT_BOOL pbool/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_UseStandardWidth(VARIANT* pbool/*[out,retval]*/);
  VARIANT         __fastcall get_UseStandardWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_UseStandardWidth(VARIANT_BOOL pbool/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(VARIANT RangeValueDataType/*[in,opt]*/, 
                                                  VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall get_Value(VARIANT RangeValueDataType/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(VARIANT RangeValueDataType/*[in,opt]*/, 
                                                  VARIANT Value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value2(VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall get_Value2(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value2(VARIANT Value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VerticalAlignment(VARIANT* VAlignment/*[out,retval]*/);
  VARIANT         __fastcall get_VerticalAlignment(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_VerticalAlignment(Owc10_xp::XlVAlign VAlignment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(VARIANT* Width/*[out,retval]*/);
  VARIANT         __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Worksheet(Owc10_xp::Worksheet** Sheet/*[out,retval]*/);
  Owc10_xp::Worksheet* __fastcall get_Worksheet(void);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   Owc10_xp::Borders* Borders = {read = get_Borders};
  __property   Owc10_xp::_Range* Cells = {read = get_Cells};
  __property   long            Column = {read = get_Column};
  __property   Owc10_xp::_Range* Columns = {read = get_Columns};
  __property   double          ColumnWidth = {write = set_ColumnWidth};
  __property   long            Count = {read = get_Count};
  __property   Owc10_xp::_Range* CurrentArray = {read = get_CurrentArray};
  __property   Owc10_xp::_Range* CurrentRegion = {read = get_CurrentRegion};
  __property   Owc10_xp::_Range* EntireColumn = {read = get_EntireColumn};
  __property   Owc10_xp::_Range* EntireRow = {read = get_EntireRow};
  __property   Owc10_xp::Font* Font = {read = get_Font};
  __property   VARIANT_BOOL    Hidden = {read = get_Hidden, write = set_Hidden};
  __property   Owc10_xp::XlHAlign HorizontalAlignment = {write = set_HorizontalAlignment};
  __property   BSTR            HTMLData = {read = get_HTMLData};
  __property   Owc10_xp::Hyperlink* Hyperlink = {read = get_Hyperlink};
  __property   Owc10_xp::Interior* Interior = {read = get_Interior};
  __property   VARIANT_BOOL    Locked = {write = set_Locked};
  __property   Owc10_xp::_Range* MergeArea = {read = get_MergeArea};
  __property   VARIANT_BOOL    MergeCells = {write = set_MergeCells};
  __property   Owc10_xp::Name* Name = {read = get_Name};
  __property   Owc10_xp::_Range* Next = {read = get_Next};
  __property   BSTR            NumberFormat = {write = set_NumberFormat};
  __property   Owc10_xp::Worksheet* Parent = {read = get_Parent};
  __property   Owc10_xp::_Range* Previous = {read = get_Previous};
  __property   Owc10_xp::XlReadingOrder ReadingOrder = {write = set_ReadingOrder};
  __property   long            Row = {read = get_Row};
  __property   double          RowHeight = {write = set_RowHeight};
  __property   Owc10_xp::_Range* Rows = {read = get_Rows};
  __property   VARIANT_BOOL    UseStandardHeight = {write = set_UseStandardHeight};
  __property   VARIANT_BOOL    UseStandardWidth = {write = set_UseStandardWidth};
  __property   Owc10_xp::XlVAlign VerticalAlignment = {write = set_VerticalAlignment};
  __property   Owc10_xp::Worksheet* Worksheet = {read = get_Worksheet};
};
typedef _RangeDispT<_Range> _RangeDisp;

// *********************************************************************//
// SmartIntf: TCOMISpreadsheet
// Interface: ISpreadsheet
// *********************************************************************//
template <class T /* ISpreadsheet */ >
class TCOMISpreadsheetT : public TComInterface<ISpreadsheet>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMISpreadsheetT() {}
  TCOMISpreadsheetT(ISpreadsheet *intf, bool addRef = false) : TComInterface<ISpreadsheet>(intf, addRef) {}
  TCOMISpreadsheetT(const TCOMISpreadsheetT& src) : TComInterface<ISpreadsheet>(src) {}
  TCOMISpreadsheetT& operator=(const TCOMISpreadsheetT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall AddIn(LPDISPATCH AddIn/*[in]*/);
  HRESULT         __fastcall BeginUndo(void);
  HRESULT         __fastcall Calculate(void);
  HRESULT         __fastcall CalculateFull(void);
  HRESULT         __fastcall EndUndo(VARIANT_BOOL Cancel/*[in,def,opt]*/);
  HRESULT         __fastcall _Evaluate(VARIANT Expression/*[in]*/, VARIANT* Result/*[out,retval]*/);
  VARIANT         __fastcall _Evaluate(VARIANT Expression/*[in]*/);
  HRESULT         __fastcall Evaluate(VARIANT Expression/*[in]*/, VARIANT* Result/*[out,retval]*/);
  VARIANT         __fastcall Evaluate(VARIANT Expression/*[in]*/);
  HRESULT         __fastcall Export(BSTR Filename/*[in,def,opt]*/, 
                                    Owc10_xp::SheetExportActionEnum Action/*[in,def,opt]*/, 
                                    Owc10_xp::SheetExportFormat Format/*[in,def,opt]*/);
  HRESULT         __fastcall LocateDataSource(void);
  HRESULT         __fastcall msDataSourceObject(BSTR bstr/*[in]*/, LPUNKNOWN* Object/*[out,retval]*/);
  LPUNKNOWN       __fastcall msDataSourceObject(BSTR bstr/*[in]*/);
  HRESULT         __fastcall RectIntersect(Owc10_xp::_Range* Range1/*[in]*/, 
                                           Owc10_xp::_Range* Range2/*[in]*/, 
                                           Owc10_xp::_Range** RangeOut/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall RectIntersect(Owc10_xp::_Range* Range1/*[in]*/, 
                                             Owc10_xp::_Range* Range2/*[in]*/);
  HRESULT         __fastcall RectUnion(Owc10_xp::_Range* Range1/*[in]*/, 
                                       Owc10_xp::_Range* Range2/*[in]*/, 
                                       Owc10_xp::_Range** RangeOut/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall RectUnion(Owc10_xp::_Range* Range1/*[in]*/, 
                                         Owc10_xp::_Range* Range2/*[in]*/);
  HRESULT         __fastcall Refresh(void);
  HRESULT         __fastcall Repaint(void);
  HRESULT         __fastcall ShowAbout(void);
  HRESULT         __fastcall ShowContextMenu(long x/*[in]*/, long y/*[in]*/, VARIANT Menu/*[in]*/);
  HRESULT         __fastcall ShowHelp(long Topic/*[in]*/);
  HRESULT         __fastcall Undo(void);
  HRESULT         __fastcall UpdatePropertyToolbox(void);
  HRESULT         __fastcall get_ActiveCell(Owc10_xp::_Range** Range/*[out,retval]*/);
  HRESULT         __fastcall get_ActiveCell(Owc10_xp::_RangePtr* Range/*[out,retval]*/);
  Owc10_xp::_RangePtr __fastcall get_ActiveCell(void);
  HRESULT         __fastcall get_ActiveSheet(Owc10_xp::Worksheet** Sheet/*[out,retval]*/);
  HRESULT         __fastcall get_ActiveSheet(Owc10_xp::WorksheetPtr* Sheet/*[out,retval]*/);
  Owc10_xp::WorksheetPtr __fastcall get_ActiveSheet(void);
  HRESULT         __fastcall get_ActiveWindow(Owc10_xp::WINDOW** Window/*[out,retval]*/);
  HRESULT         __fastcall get_ActiveWindow(Owc10_xp::WINDOWPtr* Window/*[out,retval]*/);
  Owc10_xp::WINDOWPtr __fastcall get_ActiveWindow(void);
  HRESULT         __fastcall get_ActiveWorkbook(Owc10_xp::Workbook** Workbook/*[out,retval]*/);
  HRESULT         __fastcall get_ActiveWorkbook(Owc10_xp::WorkbookPtr* Workbook/*[out,retval]*/);
  Owc10_xp::WorkbookPtr __fastcall get_ActiveWorkbook(void);
  HRESULT         __fastcall get_AllowPropertyToolbox(VARIANT_BOOL* AllowPropertyToolbox/*[out,retval]*/);
  HRESULT         __fastcall get_AllowPropertyToolbox(TOLEBOOL* AllowPropertyToolbox/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AllowPropertyToolbox(void);
  HRESULT         __fastcall set_AllowPropertyToolbox(VARIANT_BOOL AllowPropertyToolbox/*[in]*/);
  HRESULT         __fastcall set_AllowPropertyToolbox(TOLEBOOL AllowPropertyToolbox/*[in]*/);
  HRESULT         __fastcall get_Application(Owc10_xp::ISpreadsheet** ppApp/*[out,retval]*/);
  HRESULT         __fastcall get_Application(Owc10_xp::ISpreadsheetPtr* ppApp/*[out,retval]*/);
  Owc10_xp::ISpreadsheetPtr __fastcall get_Application(void);
  HRESULT         __fastcall get_AutoFit(VARIANT_BOOL* AutoFit/*[out,retval]*/);
  HRESULT         __fastcall get_AutoFit(TOLEBOOL* AutoFit/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoFit(void);
  HRESULT         __fastcall set_AutoFit(VARIANT_BOOL AutoFit/*[in]*/);
  HRESULT         __fastcall set_AutoFit(TOLEBOOL AutoFit/*[in]*/);
  HRESULT         __fastcall get_Build(long* BuildNumber/*[out,retval]*/);
  long            __fastcall get_Build(void);
  HRESULT         __fastcall get_BuildNumber(BSTR* BuildNumber/*[out,retval]*/);
  BSTR            __fastcall get_BuildNumber(void);
  HRESULT         __fastcall get_Calculation(Owc10_xp::XlCalculation* calc/*[out,retval]*/);
  Owc10_xp::XlCalculation __fastcall get_Calculation(void);
  HRESULT         __fastcall set_Calculation(Owc10_xp::XlCalculation calc/*[in]*/);
  HRESULT         __fastcall get_CalculationVersion(long* ver/*[out,retval]*/);
  long            __fastcall get_CalculationVersion(void);
  HRESULT         __fastcall get_CanUndo(VARIANT_BOOL* CanUndo/*[out,retval]*/);
  HRESULT         __fastcall get_CanUndo(TOLEBOOL* CanUndo/*[out,retval]*/);
  TOLEBOOL        __fastcall get_CanUndo(void);
  HRESULT         __fastcall get_Caption(BSTR* Caption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT         __fastcall set_Caption(BSTR Caption/*[in]*/);
  HRESULT         __fastcall get_Cells(Owc10_xp::_Range** Range/*[out,retval]*/);
  HRESULT         __fastcall get_Cells(Owc10_xp::_RangePtr* Range/*[out,retval]*/);
  Owc10_xp::_RangePtr __fastcall get_Cells(void);
  HRESULT         __fastcall get_Columns(Owc10_xp::_Range** Range/*[out,retval]*/);
  HRESULT         __fastcall get_Columns(Owc10_xp::_RangePtr* Range/*[out,retval]*/);
  Owc10_xp::_RangePtr __fastcall get_Columns(void);
  HRESULT         __fastcall get_Commands(Owc10_xp::OCCommands** Commands/*[out,retval]*/);
  HRESULT         __fastcall get_Commands(Owc10_xp::OCCommandsPtr* Commands/*[out,retval]*/);
  Owc10_xp::OCCommandsPtr __fastcall get_Commands(void);
  HRESULT         __fastcall get_Constants(LPDISPATCH* Constants/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Constants(void);
  HRESULT         __fastcall get_CSVData(BSTR* Data/*[out,retval]*/);
  BSTR            __fastcall get_CSVData(void);
  HRESULT         __fastcall set_CSVData(BSTR Data/*[in]*/);
  HRESULT         __fastcall get_CSVURL(BSTR* URL/*[out,retval]*/);
  BSTR            __fastcall get_CSVURL(void);
  HRESULT         __fastcall set_CSVURL(BSTR URL/*[in]*/);
  HRESULT         __fastcall get_DataMember(Msdatasrc_xp::DataMember* DataMember/*[out,retval]*/);
  Msdatasrc_xp::DataMember __fastcall get_DataMember(void);
  HRESULT         __fastcall set_DataMember(Msdatasrc_xp::DataMember DataMember/*[in]*/);
  HRESULT         __fastcall get_DataSource(Msdatasrc_xp::DataSource** DataSource/*[out,retval]*/);
  HRESULT         __fastcall get_DataSource(Msdatasrc_xp::DataSourcePtr* DataSource/*[out,retval]*/);
  Msdatasrc_xp::DataSourcePtr __fastcall get_DataSource(void);
  HRESULT         __fastcall set_DataSource(Msdatasrc_xp::DataSource* DataSource/*[in]*/);
  HRESULT         __fastcall set_DataSource(Msdatasrc_xp::DataSourcePtr DataSource/*[in]*/);
  HRESULT         __fastcall _set_DataSource(Msdatasrc_xp::DataSource* DataSource/*[in]*/);
  HRESULT         __fastcall _set_DataSource(Msdatasrc_xp::DataSourcePtr DataSource/*[in]*/);
  HRESULT         __fastcall get_DataType(BSTR* DataType/*[out,retval]*/);
  BSTR            __fastcall get_DataType(void);
  HRESULT         __fastcall set_DataType(BSTR DataType/*[in]*/);
  HRESULT         __fastcall get_DesignMode(VARIANT_BOOL* DesignMode/*[out,retval]*/);
  HRESULT         __fastcall get_DesignMode(TOLEBOOL* DesignMode/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DesignMode(void);
  HRESULT         __fastcall get_Dirty(VARIANT_BOOL* Dirty/*[out,retval]*/);
  HRESULT         __fastcall get_Dirty(TOLEBOOL* Dirty/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Dirty(void);
  HRESULT         __fastcall set_Dirty(VARIANT_BOOL Dirty/*[in]*/);
  HRESULT         __fastcall set_Dirty(TOLEBOOL Dirty/*[in]*/);
  HRESULT         __fastcall get_DisplayBranding(VARIANT_BOOL* DisplayBranding/*[out,retval]*/);
  HRESULT         __fastcall get_DisplayBranding(TOLEBOOL* DisplayBranding/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DisplayBranding(void);
  HRESULT         __fastcall set_DisplayBranding(VARIANT_BOOL DisplayBranding/*[in]*/);
  HRESULT         __fastcall set_DisplayBranding(TOLEBOOL DisplayBranding/*[in]*/);
  HRESULT         __fastcall get_DisplayColumnHeadings(VARIANT_BOOL* pf/*[out,retval]*/);
  HRESULT         __fastcall get_DisplayColumnHeadings(TOLEBOOL* pf/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DisplayColumnHeadings(void);
  HRESULT         __fastcall set_DisplayColumnHeadings(VARIANT_BOOL pf/*[in]*/);
  HRESULT         __fastcall set_DisplayColumnHeadings(TOLEBOOL pf/*[in]*/);
  HRESULT         __fastcall get_DisplayDesignTimeUI(VARIANT_BOOL* DisplayDesignTimeUI/*[out,retval]*/);
  HRESULT         __fastcall get_DisplayDesignTimeUI(TOLEBOOL* DisplayDesignTimeUI/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DisplayDesignTimeUI(void);
  HRESULT         __fastcall set_DisplayDesignTimeUI(VARIANT_BOOL DisplayDesignTimeUI/*[in]*/);
  HRESULT         __fastcall set_DisplayDesignTimeUI(TOLEBOOL DisplayDesignTimeUI/*[in]*/);
  HRESULT         __fastcall get_DisplayGridlines(VARIANT_BOOL* pf/*[out,retval]*/);
  HRESULT         __fastcall get_DisplayGridlines(TOLEBOOL* pf/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DisplayGridlines(void);
  HRESULT         __fastcall set_DisplayGridlines(VARIANT_BOOL pf/*[in]*/);
  HRESULT         __fastcall set_DisplayGridlines(TOLEBOOL pf/*[in]*/);
  HRESULT         __fastcall get_DisplayHorizontalScrollBar(VARIANT_BOOL* pf/*[out,retval]*/);
  HRESULT         __fastcall get_DisplayHorizontalScrollBar(TOLEBOOL* pf/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DisplayHorizontalScrollBar(void);
  HRESULT         __fastcall set_DisplayHorizontalScrollBar(VARIANT_BOOL pf/*[in]*/);
  HRESULT         __fastcall set_DisplayHorizontalScrollBar(TOLEBOOL pf/*[in]*/);
  HRESULT         __fastcall get_DisplayOfficeLogo(VARIANT_BOOL* DisplayOfficeLogo/*[out,retval]*/);
  HRESULT         __fastcall get_DisplayOfficeLogo(TOLEBOOL* DisplayOfficeLogo/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DisplayOfficeLogo(void);
  HRESULT         __fastcall set_DisplayOfficeLogo(VARIANT_BOOL DisplayOfficeLogo/*[in]*/);
  HRESULT         __fastcall set_DisplayOfficeLogo(TOLEBOOL DisplayOfficeLogo/*[in]*/);
  HRESULT         __fastcall get_DisplayPropertyToolbox(VARIANT_BOOL* pf/*[out,retval]*/);
  HRESULT         __fastcall get_DisplayPropertyToolbox(TOLEBOOL* pf/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DisplayPropertyToolbox(void);
  HRESULT         __fastcall set_DisplayPropertyToolbox(VARIANT_BOOL pf/*[in]*/);
  HRESULT         __fastcall set_DisplayPropertyToolbox(TOLEBOOL pf/*[in]*/);
  HRESULT         __fastcall get_DisplayRowHeadings(VARIANT_BOOL* pf/*[out,retval]*/);
  HRESULT         __fastcall get_DisplayRowHeadings(TOLEBOOL* pf/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DisplayRowHeadings(void);
  HRESULT         __fastcall set_DisplayRowHeadings(VARIANT_BOOL pf/*[in]*/);
  HRESULT         __fastcall set_DisplayRowHeadings(TOLEBOOL pf/*[in]*/);
  HRESULT         __fastcall get_DisplayTitleBar(VARIANT_BOOL* DisplayTitleBar/*[out,retval]*/);
  HRESULT         __fastcall get_DisplayTitleBar(TOLEBOOL* DisplayTitleBar/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DisplayTitleBar(void);
  HRESULT         __fastcall set_DisplayTitleBar(VARIANT_BOOL DisplayTitleBar/*[in]*/);
  HRESULT         __fastcall set_DisplayTitleBar(TOLEBOOL DisplayTitleBar/*[in]*/);
  HRESULT         __fastcall get_DisplayToolbar(VARIANT_BOOL* DisplayToolbar/*[out,retval]*/);
  HRESULT         __fastcall get_DisplayToolbar(TOLEBOOL* DisplayToolbar/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DisplayToolbar(void);
  HRESULT         __fastcall set_DisplayToolbar(VARIANT_BOOL DisplayToolbar/*[in]*/);
  HRESULT         __fastcall set_DisplayToolbar(TOLEBOOL DisplayToolbar/*[in]*/);
  HRESULT         __fastcall get_DisplayVerticalScrollBar(VARIANT_BOOL* pf/*[out,retval]*/);
  HRESULT         __fastcall get_DisplayVerticalScrollBar(TOLEBOOL* pf/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DisplayVerticalScrollBar(void);
  HRESULT         __fastcall set_DisplayVerticalScrollBar(VARIANT_BOOL pf/*[in]*/);
  HRESULT         __fastcall set_DisplayVerticalScrollBar(TOLEBOOL pf/*[in]*/);
  HRESULT         __fastcall get_DisplayWorkbookTabs(VARIANT_BOOL* pf/*[out,retval]*/);
  HRESULT         __fastcall get_DisplayWorkbookTabs(TOLEBOOL* pf/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DisplayWorkbookTabs(void);
  HRESULT         __fastcall set_DisplayWorkbookTabs(VARIANT_BOOL pf/*[in]*/);
  HRESULT         __fastcall set_DisplayWorkbookTabs(TOLEBOOL pf/*[in]*/);
  HRESULT         __fastcall get_EnableEvents(VARIANT_BOOL* EnableEvents/*[out,retval]*/);
  HRESULT         __fastcall get_EnableEvents(TOLEBOOL* EnableEvents/*[out,retval]*/);
  TOLEBOOL        __fastcall get_EnableEvents(void);
  HRESULT         __fastcall set_EnableEvents(VARIANT_BOOL EnableEvents/*[in]*/);
  HRESULT         __fastcall set_EnableEvents(TOLEBOOL EnableEvents/*[in]*/);
  HRESULT         __fastcall get_EnableUndo(VARIANT_BOOL* EnableUndo/*[out,retval]*/);
  HRESULT         __fastcall get_EnableUndo(TOLEBOOL* EnableUndo/*[out,retval]*/);
  TOLEBOOL        __fastcall get_EnableUndo(void);
  HRESULT         __fastcall set_EnableUndo(VARIANT_BOOL EnableUndo/*[in]*/);
  HRESULT         __fastcall set_EnableUndo(TOLEBOOL EnableUndo/*[in]*/);
  HRESULT         __fastcall get_HTMLData(BSTR* Data/*[out,retval]*/);
  BSTR            __fastcall get_HTMLData(void);
  HRESULT         __fastcall set_HTMLData(BSTR Data/*[in]*/);
  HRESULT         __fastcall get_HTMLURL(BSTR* URL/*[out,retval]*/);
  BSTR            __fastcall get_HTMLURL(void);
  HRESULT         __fastcall set_HTMLURL(BSTR URL/*[in]*/);
  HRESULT         __fastcall get_InstanceID(unsigned_long* InstanceID/*[out,retval]*/);
  unsigned_long   __fastcall get_InstanceID(void);
  HRESULT         __fastcall get_International(VARIANT Index/*[in]*/, VARIANT* info/*[out,retval]*/);
  VARIANT         __fastcall get_International(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_LanguageSettings(Owc10_xp::OWCLanguageSettings** langset/*[out,retval]*/);
  HRESULT         __fastcall get_LanguageSettings(Owc10_xp::OWCLanguageSettingsPtr* langset/*[out,retval]*/);
  Owc10_xp::OWCLanguageSettingsPtr __fastcall get_LanguageSettings(void);
  HRESULT         __fastcall get_MaxHeight(VARIANT* MaxHeight/*[out,retval]*/);
  VARIANT         __fastcall get_MaxHeight(void);
  HRESULT         __fastcall set_MaxHeight(VARIANT MaxHeight/*[in]*/);
  HRESULT         __fastcall get_MaxWidth(VARIANT* MaxWidth/*[out,retval]*/);
  VARIANT         __fastcall get_MaxWidth(void);
  HRESULT         __fastcall set_MaxWidth(VARIANT MaxWidth/*[in]*/);
  HRESULT         __fastcall get_MajorVersion(long* MajorVersion/*[out,retval]*/);
  long            __fastcall get_MajorVersion(void);
  HRESULT         __fastcall get_MinorVersion(BSTR* MinorVersion/*[out,retval]*/);
  BSTR            __fastcall get_MinorVersion(void);
  HRESULT         __fastcall get_MoveAfterReturn(VARIANT_BOOL* MoveAfterReturn/*[out,retval]*/);
  HRESULT         __fastcall get_MoveAfterReturn(TOLEBOOL* MoveAfterReturn/*[out,retval]*/);
  TOLEBOOL        __fastcall get_MoveAfterReturn(void);
  HRESULT         __fastcall set_MoveAfterReturn(VARIANT_BOOL MoveAfterReturn/*[in]*/);
  HRESULT         __fastcall set_MoveAfterReturn(TOLEBOOL MoveAfterReturn/*[in]*/);
  HRESULT         __fastcall get_MoveAfterReturnDirection(Owc10_xp::XlDirection* MoveAfterReturnDirection/*[out,retval]*/);
  Owc10_xp::XlDirection __fastcall get_MoveAfterReturnDirection(void);
  HRESULT         __fastcall set_MoveAfterReturnDirection(Owc10_xp::XlDirection MoveAfterReturnDirection/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall get_Names(Owc10_xp::Names** Names/*[out,retval]*/);
  HRESULT         __fastcall get_Names(Owc10_xp::NamesPtr* Names/*[out,retval]*/);
  Owc10_xp::NamesPtr __fastcall get_Names(void);
  HRESULT         __fastcall get_Range(VARIANT Cell1/*[in]*/, VARIANT Cell2/*[in,opt]*/, 
                                       Owc10_xp::_Range** Range/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall get_Range(VARIANT Cell1/*[in]*/, 
                                         VARIANT Cell2/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall get_RevisionNumber(BSTR* RevisionNumber/*[out,retval]*/);
  BSTR            __fastcall get_RevisionNumber(void);
  HRESULT         __fastcall get_RightToLeft(VARIANT_BOOL* RightToLeft/*[out,retval]*/);
  HRESULT         __fastcall get_RightToLeft(TOLEBOOL* RightToLeft/*[out,retval]*/);
  TOLEBOOL        __fastcall get_RightToLeft(void);
  HRESULT         __fastcall set_RightToLeft(VARIANT_BOOL RightToLeft/*[in]*/);
  HRESULT         __fastcall set_RightToLeft(TOLEBOOL RightToLeft/*[in]*/);
  HRESULT         __fastcall get_Rows(Owc10_xp::_Range** Range/*[out,retval]*/);
  HRESULT         __fastcall get_Rows(Owc10_xp::_RangePtr* Range/*[out,retval]*/);
  Owc10_xp::_RangePtr __fastcall get_Rows(void);
  HRESULT         __fastcall get_ScreenUpdating(VARIANT_BOOL* ScreenUpdating/*[out,retval]*/);
  HRESULT         __fastcall get_ScreenUpdating(TOLEBOOL* ScreenUpdating/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ScreenUpdating(void);
  HRESULT         __fastcall set_ScreenUpdating(VARIANT_BOOL ScreenUpdating/*[in]*/);
  HRESULT         __fastcall set_ScreenUpdating(TOLEBOOL ScreenUpdating/*[in]*/);
  HRESULT         __fastcall get_Selection(Owc10_xp::_Range** Range/*[out,retval]*/);
  HRESULT         __fastcall get_Selection(Owc10_xp::_RangePtr* Range/*[out,retval]*/);
  Owc10_xp::_RangePtr __fastcall get_Selection(void);
  HRESULT         __fastcall get_Sheets(Owc10_xp::Sheets** Sheets/*[out,retval]*/);
  HRESULT         __fastcall get_Sheets(Owc10_xp::SheetsPtr* Sheets/*[out,retval]*/);
  Owc10_xp::SheetsPtr __fastcall get_Sheets(void);
  HRESULT         __fastcall get_TitleBar(Owc10_xp::TitleBar** TitleBar/*[out,retval]*/);
  HRESULT         __fastcall get_TitleBar(Owc10_xp::TitleBarPtr* TitleBar/*[out,retval]*/);
  Owc10_xp::TitleBarPtr __fastcall get_TitleBar(void);
  HRESULT         __fastcall get_Toolbar(Mscomctllib_xp::IToolbar** Toolbar/*[out,retval]*/);
  HRESULT         __fastcall get_Toolbar(Mscomctllib_xp::IToolbarPtr* Toolbar/*[out,retval]*/);
  Mscomctllib_xp::IToolbarPtr __fastcall get_Toolbar(void);
  HRESULT         __fastcall get_Value(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Value(void);
  HRESULT         __fastcall get_Version(BSTR* Version/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT         __fastcall get_ViewableRange(BSTR* ViewableRange/*[out,retval]*/);
  BSTR            __fastcall get_ViewableRange(void);
  HRESULT         __fastcall set_ViewableRange(BSTR ViewableRange/*[in]*/);
  HRESULT         __fastcall get_ViewOnlyMode(VARIANT_BOOL* ViewOnlyMode/*[out,retval]*/);
  HRESULT         __fastcall get_ViewOnlyMode(TOLEBOOL* ViewOnlyMode/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ViewOnlyMode(void);
  HRESULT         __fastcall get_Windows(Owc10_xp::Windows** Windows/*[out,retval]*/);
  HRESULT         __fastcall get_Windows(Owc10_xp::WindowsPtr* Windows/*[out,retval]*/);
  Owc10_xp::WindowsPtr __fastcall get_Windows(void);
  HRESULT         __fastcall get_Workbooks(Owc10_xp::Workbooks** Workbooks/*[out,retval]*/);
  HRESULT         __fastcall get_Workbooks(Owc10_xp::WorkbooksPtr* Workbooks/*[out,retval]*/);
  Owc10_xp::WorkbooksPtr __fastcall get_Workbooks(void);
  HRESULT         __fastcall get_Worksheets(Owc10_xp::Worksheets** Worksheets/*[out,retval]*/);
  HRESULT         __fastcall get_Worksheets(Owc10_xp::WorksheetsPtr* Worksheets/*[out,retval]*/);
  Owc10_xp::WorksheetsPtr __fastcall get_Worksheets(void);
  HRESULT         __fastcall get_XMLData(BSTR* Data/*[out,retval]*/);
  BSTR            __fastcall get_XMLData(void);
  HRESULT         __fastcall set_XMLData(BSTR Data/*[in]*/);
  HRESULT         __fastcall get_XMLURL(BSTR* URL/*[out,retval]*/);
  BSTR            __fastcall get_XMLURL(void);
  HRESULT         __fastcall set_XMLURL(BSTR URL/*[in]*/);

  __property   Owc10_xp::_RangePtr ActiveCell = {read = get_ActiveCell};
  __property   Owc10_xp::WorksheetPtr ActiveSheet = {read = get_ActiveSheet};
  __property   Owc10_xp::WINDOWPtr ActiveWindow = {read = get_ActiveWindow};
  __property   Owc10_xp::WorkbookPtr ActiveWorkbook = {read = get_ActiveWorkbook};
  __property   TOLEBOOL        AllowPropertyToolbox = {read = get_AllowPropertyToolbox, write = set_AllowPropertyToolbox};
  __property   Owc10_xp::ISpreadsheetPtr Application = {read = get_Application};
  __property   TOLEBOOL        AutoFit = {read = get_AutoFit, write = set_AutoFit};
  __property   long            Build = {read = get_Build};
  __property   BSTR            BuildNumber = {read = get_BuildNumber};
  __property   Owc10_xp::XlCalculation Calculation = {read = get_Calculation, write = set_Calculation};
  __property   long            CalculationVersion = {read = get_CalculationVersion};
  __property   TOLEBOOL        CanUndo = {read = get_CanUndo};
  __property   BSTR            Caption = {read = get_Caption};
  __property   Owc10_xp::_RangePtr Cells = {read = get_Cells};
  __property   Owc10_xp::_RangePtr Columns = {read = get_Columns};
  __property   Owc10_xp::OCCommandsPtr Commands = {read = get_Commands};
  __property   LPDISPATCH      Constants = {read = get_Constants};
  __property   BSTR            CSVData = {read = get_CSVData};
  __property   BSTR            CSVURL = {read = get_CSVURL};
  __property   Msdatasrc_xp::DataMember DataMember = {read = get_DataMember, write = set_DataMember};
  __property   Msdatasrc_xp::DataSourcePtr DataSource = {read = get_DataSource, write = set_DataSource};
  __property   BSTR            DataType = {read = get_DataType};
  __property   TOLEBOOL        DesignMode = {read = get_DesignMode};
  __property   TOLEBOOL        Dirty = {read = get_Dirty, write = set_Dirty};
  __property   TOLEBOOL        DisplayBranding = {read = get_DisplayBranding, write = set_DisplayBranding};
  __property   TOLEBOOL        DisplayColumnHeadings = {read = get_DisplayColumnHeadings, write = set_DisplayColumnHeadings};
  __property   TOLEBOOL        DisplayDesignTimeUI = {read = get_DisplayDesignTimeUI, write = set_DisplayDesignTimeUI};
  __property   TOLEBOOL        DisplayGridlines = {read = get_DisplayGridlines, write = set_DisplayGridlines};
  __property   TOLEBOOL        DisplayHorizontalScrollBar = {read = get_DisplayHorizontalScrollBar, write = set_DisplayHorizontalScrollBar};
  __property   TOLEBOOL        DisplayOfficeLogo = {read = get_DisplayOfficeLogo, write = set_DisplayOfficeLogo};
  __property   TOLEBOOL        DisplayPropertyToolbox = {read = get_DisplayPropertyToolbox, write = set_DisplayPropertyToolbox};
  __property   TOLEBOOL        DisplayRowHeadings = {read = get_DisplayRowHeadings, write = set_DisplayRowHeadings};
  __property   TOLEBOOL        DisplayTitleBar = {read = get_DisplayTitleBar, write = set_DisplayTitleBar};
  __property   TOLEBOOL        DisplayToolbar = {read = get_DisplayToolbar, write = set_DisplayToolbar};
  __property   TOLEBOOL        DisplayVerticalScrollBar = {read = get_DisplayVerticalScrollBar, write = set_DisplayVerticalScrollBar};
  __property   TOLEBOOL        DisplayWorkbookTabs = {read = get_DisplayWorkbookTabs, write = set_DisplayWorkbookTabs};
  __property   TOLEBOOL        EnableEvents = {read = get_EnableEvents, write = set_EnableEvents};
  __property   TOLEBOOL        EnableUndo = {read = get_EnableUndo, write = set_EnableUndo};
  __property   BSTR            HTMLData = {read = get_HTMLData};
  __property   BSTR            HTMLURL = {read = get_HTMLURL};
  __property   unsigned_long   InstanceID = {read = get_InstanceID};
  __property   Owc10_xp::OWCLanguageSettingsPtr LanguageSettings = {read = get_LanguageSettings};
  __property   long            MajorVersion = {read = get_MajorVersion};
  __property   BSTR            MinorVersion = {read = get_MinorVersion};
  __property   TOLEBOOL        MoveAfterReturn = {read = get_MoveAfterReturn, write = set_MoveAfterReturn};
  __property   Owc10_xp::XlDirection MoveAfterReturnDirection = {read = get_MoveAfterReturnDirection, write = set_MoveAfterReturnDirection};
  __property   BSTR            Name = {read = get_Name};
  __property   Owc10_xp::NamesPtr Names = {read = get_Names};
  __property   BSTR            RevisionNumber = {read = get_RevisionNumber};
  __property   TOLEBOOL        RightToLeft = {read = get_RightToLeft, write = set_RightToLeft};
  __property   Owc10_xp::_RangePtr Rows = {read = get_Rows};
  __property   TOLEBOOL        ScreenUpdating = {read = get_ScreenUpdating, write = set_ScreenUpdating};
  __property   Owc10_xp::_RangePtr Selection = {read = get_Selection};
  __property   Owc10_xp::SheetsPtr Sheets = {read = get_Sheets};
  __property   Owc10_xp::TitleBarPtr TitleBar = {read = get_TitleBar};
  __property   Mscomctllib_xp::IToolbarPtr Toolbar = {read = get_Toolbar};
  __property   BSTR            Value = {read = get_Value};
  __property   BSTR            Version = {read = get_Version};
  __property   BSTR            ViewableRange = {read = get_ViewableRange};
  __property   TOLEBOOL        ViewOnlyMode = {read = get_ViewOnlyMode};
  __property   Owc10_xp::WindowsPtr Windows = {read = get_Windows};
  __property   Owc10_xp::WorkbooksPtr Workbooks = {read = get_Workbooks};
  __property   Owc10_xp::WorksheetsPtr Worksheets = {read = get_Worksheets};
  __property   BSTR            XMLData = {read = get_XMLData};
  __property   BSTR            XMLURL = {read = get_XMLURL};
};
typedef TCOMISpreadsheetT<ISpreadsheet> TCOMISpreadsheet;

// *********************************************************************//
// DispIntf:  ISpreadsheet
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A79-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class ISpreadsheetDispT : public TAutoDriver<ISpreadsheet>
{
public:
  ISpreadsheetDispT(){}

  ISpreadsheetDispT(ISpreadsheet *pintf)
  {
    TAutoDriver<ISpreadsheet>::Bind(pintf, false);
  }

  ISpreadsheetDispT(ISpreadsheetPtr pintf)
  {
    TAutoDriver<ISpreadsheet>::Bind(pintf, true);
  }

  ISpreadsheetDispT& operator=(ISpreadsheet *pintf)
  {
    TAutoDriver<ISpreadsheet>::Bind(pintf, false);
    return *this;
  }

  ISpreadsheetDispT& operator=(ISpreadsheetPtr pintf)
  {
    TAutoDriver<ISpreadsheet>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Spreadsheet));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Spreadsheet);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddIn(LPDISPATCH AddIn/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall BeginUndo();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Calculate();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CalculateFull();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall EndUndo(VARIANT_BOOL Cancel/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Evaluate(VARIANT Expression/*[in]*/, 
                                                  VARIANT* Result/*[out,retval]*/);
  VARIANT         __fastcall _Evaluate(VARIANT Expression/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Evaluate(VARIANT Expression/*[in]*/, 
                                                 VARIANT* Result/*[out,retval]*/);
  VARIANT         __fastcall Evaluate(VARIANT Expression/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Export(BSTR Filename/*[in,def,opt]*/, 
                                               Owc10_xp::SheetExportActionEnum Action/*[in,def,opt]*/
                                               , Owc10_xp::SheetExportFormat Format/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall LocateDataSource();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall msDataSourceObject(BSTR bstr/*[in]*/, 
                                                           LPUNKNOWN* Object/*[out,retval]*/);
  LPUNKNOWN       __fastcall msDataSourceObject(BSTR bstr/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RectIntersect(Owc10_xp::_Range* Range1/*[in]*/, 
                                                      Owc10_xp::_Range* Range2/*[in]*/, 
                                                      Owc10_xp::_Range** RangeOut/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall RectIntersect(Owc10_xp::_Range* Range1/*[in]*/, 
                                             Owc10_xp::_Range* Range2/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RectUnion(Owc10_xp::_Range* Range1/*[in]*/, 
                                                  Owc10_xp::_Range* Range2/*[in]*/, 
                                                  Owc10_xp::_Range** RangeOut/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall RectUnion(Owc10_xp::_Range* Range1/*[in]*/, 
                                         Owc10_xp::_Range* Range2/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Refresh();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Repaint();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ShowAbout();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ShowContextMenu(long x/*[in]*/, long y/*[in]*/, 
                                                        VARIANT Menu/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ShowHelp(long Topic/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Undo();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall UpdatePropertyToolbox();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActiveCell(Owc10_xp::_Range** Range/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall get_ActiveCell(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActiveSheet(Owc10_xp::Worksheet** Sheet/*[out,retval]*/);
  Owc10_xp::Worksheet* __fastcall get_ActiveSheet(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActiveWindow(Owc10_xp::WINDOW** Window/*[out,retval]*/);
  Owc10_xp::WINDOW* __fastcall get_ActiveWindow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActiveWorkbook(Owc10_xp::Workbook** Workbook/*[out,retval]*/);
  Owc10_xp::Workbook* __fastcall get_ActiveWorkbook(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllowPropertyToolbox(VARIANT_BOOL* AllowPropertyToolbox/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllowPropertyToolbox(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AllowPropertyToolbox(VARIANT_BOOL AllowPropertyToolbox/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Owc10_xp::ISpreadsheet** ppApp/*[out,retval]*/);
  Owc10_xp::ISpreadsheet* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoFit(VARIANT_BOOL* AutoFit/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoFit(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoFit(VARIANT_BOOL AutoFit/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Build(long* BuildNumber/*[out,retval]*/);
  long            __fastcall get_Build(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BuildNumber(BSTR* BuildNumber/*[out,retval]*/);
  BSTR            __fastcall get_BuildNumber(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Calculation(Owc10_xp::XlCalculation* calc/*[out,retval]*/);
  Owc10_xp::XlCalculation __fastcall get_Calculation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Calculation(Owc10_xp::XlCalculation calc/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CalculationVersion(long* ver/*[out,retval]*/);
  long            __fastcall get_CalculationVersion(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CanUndo(VARIANT_BOOL* CanUndo/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CanUndo(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* Caption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Caption(BSTR Caption/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Cells(Owc10_xp::_Range** Range/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall get_Cells(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Columns(Owc10_xp::_Range** Range/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall get_Columns(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Commands(Owc10_xp::OCCommands** Commands/*[out,retval]*/);
  Owc10_xp::OCCommands* __fastcall get_Commands(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Constants(LPDISPATCH* Constants/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Constants(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CSVData(BSTR* Data/*[out,retval]*/);
  BSTR            __fastcall get_CSVData(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CSVData(BSTR Data/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CSVURL(BSTR* URL/*[out,retval]*/);
  BSTR            __fastcall get_CSVURL(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CSVURL(BSTR URL/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DataMember(Msdatasrc_xp::DataMember* DataMember/*[out,retval]*/);
  Msdatasrc_xp::DataMember __fastcall get_DataMember(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DataMember(Msdatasrc_xp::DataMember DataMember/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DataSource(Msdatasrc_xp::DataSource** DataSource/*[out,retval]*/);
  Msdatasrc_xp::DataSource* __fastcall get_DataSource(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DataSource(Msdatasrc_xp::DataSource* DataSource/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_DataSource(Msdatasrc_xp::DataSource* DataSource/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DataType(BSTR* DataType/*[out,retval]*/);
  BSTR            __fastcall get_DataType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DataType(BSTR DataType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DesignMode(VARIANT_BOOL* DesignMode/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DesignMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Dirty(VARIANT_BOOL* Dirty/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Dirty(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Dirty(VARIANT_BOOL Dirty/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayBranding(VARIANT_BOOL* DisplayBranding/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayBranding(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayBranding(VARIANT_BOOL DisplayBranding/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayColumnHeadings(VARIANT_BOOL* pf/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayColumnHeadings(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayColumnHeadings(VARIANT_BOOL pf/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayDesignTimeUI(VARIANT_BOOL* DisplayDesignTimeUI/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayDesignTimeUI(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayDesignTimeUI(VARIANT_BOOL DisplayDesignTimeUI/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayGridlines(VARIANT_BOOL* pf/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayGridlines(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayGridlines(VARIANT_BOOL pf/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayHorizontalScrollBar(VARIANT_BOOL* pf/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayHorizontalScrollBar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayHorizontalScrollBar(VARIANT_BOOL pf/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayOfficeLogo(VARIANT_BOOL* DisplayOfficeLogo/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayOfficeLogo(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayOfficeLogo(VARIANT_BOOL DisplayOfficeLogo/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayPropertyToolbox(VARIANT_BOOL* pf/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayPropertyToolbox(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayPropertyToolbox(VARIANT_BOOL pf/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayRowHeadings(VARIANT_BOOL* pf/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayRowHeadings(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayRowHeadings(VARIANT_BOOL pf/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayTitleBar(VARIANT_BOOL* DisplayTitleBar/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayTitleBar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayTitleBar(VARIANT_BOOL DisplayTitleBar/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayToolbar(VARIANT_BOOL* DisplayToolbar/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayToolbar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayToolbar(VARIANT_BOOL DisplayToolbar/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayVerticalScrollBar(VARIANT_BOOL* pf/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayVerticalScrollBar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayVerticalScrollBar(VARIANT_BOOL pf/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayWorkbookTabs(VARIANT_BOOL* pf/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayWorkbookTabs(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayWorkbookTabs(VARIANT_BOOL pf/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EnableEvents(VARIANT_BOOL* EnableEvents/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EnableEvents(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EnableEvents(VARIANT_BOOL EnableEvents/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EnableUndo(VARIANT_BOOL* EnableUndo/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EnableUndo(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EnableUndo(VARIANT_BOOL EnableUndo/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HTMLData(BSTR* Data/*[out,retval]*/);
  BSTR            __fastcall get_HTMLData(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HTMLData(BSTR Data/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HTMLURL(BSTR* URL/*[out,retval]*/);
  BSTR            __fastcall get_HTMLURL(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HTMLURL(BSTR URL/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InstanceID(unsigned_long* InstanceID/*[out,retval]*/);
  unsigned_long   __fastcall get_InstanceID(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_International(VARIANT Index/*[in]*/, 
                                                          VARIANT* info/*[out,retval]*/);
  VARIANT         __fastcall get_International(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LanguageSettings(Owc10_xp::OWCLanguageSettings** langset/*[out,retval]*/);
  Owc10_xp::OWCLanguageSettings* __fastcall get_LanguageSettings(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MaxHeight(VARIANT* MaxHeight/*[out,retval]*/);
  VARIANT         __fastcall get_MaxHeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MaxHeight(VARIANT MaxHeight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MaxWidth(VARIANT* MaxWidth/*[out,retval]*/);
  VARIANT         __fastcall get_MaxWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MaxWidth(VARIANT MaxWidth/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MajorVersion(long* MajorVersion/*[out,retval]*/);
  long            __fastcall get_MajorVersion(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MinorVersion(BSTR* MinorVersion/*[out,retval]*/);
  BSTR            __fastcall get_MinorVersion(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MoveAfterReturn(VARIANT_BOOL* MoveAfterReturn/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MoveAfterReturn(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MoveAfterReturn(VARIANT_BOOL MoveAfterReturn/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MoveAfterReturnDirection(Owc10_xp::XlDirection* MoveAfterReturnDirection/*[out,retval]*/);
  Owc10_xp::XlDirection __fastcall get_MoveAfterReturnDirection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MoveAfterReturnDirection(Owc10_xp::XlDirection MoveAfterReturnDirection/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Names(Owc10_xp::Names** Names/*[out,retval]*/);
  Owc10_xp::Names* __fastcall get_Names(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Range(VARIANT Cell1/*[in]*/, VARIANT Cell2/*[in,opt]*/, 
                                                  Owc10_xp::_Range** Range/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall get_Range(VARIANT Cell1/*[in]*/, 
                                         VARIANT Cell2/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RevisionNumber(BSTR* RevisionNumber/*[out,retval]*/);
  BSTR            __fastcall get_RevisionNumber(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RightToLeft(VARIANT_BOOL* RightToLeft/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RightToLeft(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RightToLeft(VARIANT_BOOL RightToLeft/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Rows(Owc10_xp::_Range** Range/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall get_Rows(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ScreenUpdating(VARIANT_BOOL* ScreenUpdating/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ScreenUpdating(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ScreenUpdating(VARIANT_BOOL ScreenUpdating/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Selection(Owc10_xp::_Range** Range/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall get_Selection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Sheets(Owc10_xp::Sheets** Sheets/*[out,retval]*/);
  Owc10_xp::Sheets* __fastcall get_Sheets(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TitleBar(Owc10_xp::TitleBar** TitleBar/*[out,retval]*/);
  Owc10_xp::TitleBar* __fastcall get_TitleBar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Toolbar(Mscomctllib_xp::IToolbar** Toolbar/*[out,retval]*/);
  Mscomctllib_xp::IToolbar* __fastcall get_Toolbar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Version(BSTR* Version/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ViewableRange(BSTR* ViewableRange/*[out,retval]*/);
  BSTR            __fastcall get_ViewableRange(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ViewableRange(BSTR ViewableRange/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ViewOnlyMode(VARIANT_BOOL* ViewOnlyMode/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ViewOnlyMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Windows(Owc10_xp::Windows** Windows/*[out,retval]*/);
  Owc10_xp::Windows* __fastcall get_Windows(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Workbooks(Owc10_xp::Workbooks** Workbooks/*[out,retval]*/);
  Owc10_xp::Workbooks* __fastcall get_Workbooks(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Worksheets(Owc10_xp::Worksheets** Worksheets/*[out,retval]*/);
  Owc10_xp::Worksheets* __fastcall get_Worksheets(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_XMLData(BSTR* Data/*[out,retval]*/);
  BSTR            __fastcall get_XMLData(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_XMLData(BSTR Data/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_XMLURL(BSTR* URL/*[out,retval]*/);
  BSTR            __fastcall get_XMLURL(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_XMLURL(BSTR URL/*[in]*/);

  __property   Owc10_xp::_Range* ActiveCell = {read = get_ActiveCell};
  __property   Owc10_xp::Worksheet* ActiveSheet = {read = get_ActiveSheet};
  __property   Owc10_xp::WINDOW* ActiveWindow = {read = get_ActiveWindow};
  __property   Owc10_xp::Workbook* ActiveWorkbook = {read = get_ActiveWorkbook};
  __property   VARIANT_BOOL    AllowPropertyToolbox = {read = get_AllowPropertyToolbox, write = set_AllowPropertyToolbox};
  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   VARIANT_BOOL    AutoFit = {read = get_AutoFit, write = set_AutoFit};
  __property   long            Build = {read = get_Build};
  __property   BSTR            BuildNumber = {read = get_BuildNumber};
  __property   Owc10_xp::XlCalculation Calculation = {read = get_Calculation, write = set_Calculation};
  __property   long            CalculationVersion = {read = get_CalculationVersion};
  __property   VARIANT_BOOL    CanUndo = {read = get_CanUndo};
  __property   BSTR            Caption = {read = get_Caption};
  __property   Owc10_xp::_Range* Cells = {read = get_Cells};
  __property   Owc10_xp::_Range* Columns = {read = get_Columns};
  __property   Owc10_xp::OCCommands* Commands = {read = get_Commands};
  __property   LPDISPATCH      Constants = {read = get_Constants};
  __property   BSTR            CSVData = {read = get_CSVData};
  __property   BSTR            CSVURL = {read = get_CSVURL};
  __property   Msdatasrc_xp::DataMember DataMember = {read = get_DataMember, write = set_DataMember};
  __property   Msdatasrc_xp::DataSource* DataSource = {read = get_DataSource, write = set_DataSource};
  __property   BSTR            DataType = {read = get_DataType};
  __property   VARIANT_BOOL    DesignMode = {read = get_DesignMode};
  __property   VARIANT_BOOL    Dirty = {read = get_Dirty, write = set_Dirty};
  __property   VARIANT_BOOL    DisplayBranding = {read = get_DisplayBranding, write = set_DisplayBranding};
  __property   VARIANT_BOOL    DisplayColumnHeadings = {read = get_DisplayColumnHeadings, write = set_DisplayColumnHeadings};
  __property   VARIANT_BOOL    DisplayDesignTimeUI = {read = get_DisplayDesignTimeUI, write = set_DisplayDesignTimeUI};
  __property   VARIANT_BOOL    DisplayGridlines = {read = get_DisplayGridlines, write = set_DisplayGridlines};
  __property   VARIANT_BOOL    DisplayHorizontalScrollBar = {read = get_DisplayHorizontalScrollBar, write = set_DisplayHorizontalScrollBar};
  __property   VARIANT_BOOL    DisplayOfficeLogo = {read = get_DisplayOfficeLogo, write = set_DisplayOfficeLogo};
  __property   VARIANT_BOOL    DisplayPropertyToolbox = {read = get_DisplayPropertyToolbox, write = set_DisplayPropertyToolbox};
  __property   VARIANT_BOOL    DisplayRowHeadings = {read = get_DisplayRowHeadings, write = set_DisplayRowHeadings};
  __property   VARIANT_BOOL    DisplayTitleBar = {read = get_DisplayTitleBar, write = set_DisplayTitleBar};
  __property   VARIANT_BOOL    DisplayToolbar = {read = get_DisplayToolbar, write = set_DisplayToolbar};
  __property   VARIANT_BOOL    DisplayVerticalScrollBar = {read = get_DisplayVerticalScrollBar, write = set_DisplayVerticalScrollBar};
  __property   VARIANT_BOOL    DisplayWorkbookTabs = {read = get_DisplayWorkbookTabs, write = set_DisplayWorkbookTabs};
  __property   VARIANT_BOOL    EnableEvents = {read = get_EnableEvents, write = set_EnableEvents};
  __property   VARIANT_BOOL    EnableUndo = {read = get_EnableUndo, write = set_EnableUndo};
  __property   BSTR            HTMLData = {read = get_HTMLData};
  __property   BSTR            HTMLURL = {read = get_HTMLURL};
  __property   unsigned_long   InstanceID = {read = get_InstanceID};
  __property   Owc10_xp::OWCLanguageSettings* LanguageSettings = {read = get_LanguageSettings};
  __property   long            MajorVersion = {read = get_MajorVersion};
  __property   BSTR            MinorVersion = {read = get_MinorVersion};
  __property   VARIANT_BOOL    MoveAfterReturn = {read = get_MoveAfterReturn, write = set_MoveAfterReturn};
  __property   Owc10_xp::XlDirection MoveAfterReturnDirection = {read = get_MoveAfterReturnDirection, write = set_MoveAfterReturnDirection};
  __property   BSTR            Name = {read = get_Name};
  __property   Owc10_xp::Names* Names = {read = get_Names};
  __property   BSTR            RevisionNumber = {read = get_RevisionNumber};
  __property   VARIANT_BOOL    RightToLeft = {read = get_RightToLeft, write = set_RightToLeft};
  __property   Owc10_xp::_Range* Rows = {read = get_Rows};
  __property   VARIANT_BOOL    ScreenUpdating = {read = get_ScreenUpdating, write = set_ScreenUpdating};
  __property   Owc10_xp::_Range* Selection = {read = get_Selection};
  __property   Owc10_xp::Sheets* Sheets = {read = get_Sheets};
  __property   Owc10_xp::TitleBar* TitleBar = {read = get_TitleBar};
  __property   Mscomctllib_xp::IToolbar* Toolbar = {read = get_Toolbar};
  __property   BSTR            Value = {read = get_Value};
  __property   BSTR            Version = {read = get_Version};
  __property   BSTR            ViewableRange = {read = get_ViewableRange};
  __property   VARIANT_BOOL    ViewOnlyMode = {read = get_ViewOnlyMode};
  __property   Owc10_xp::Windows* Windows = {read = get_Windows};
  __property   Owc10_xp::Workbooks* Workbooks = {read = get_Workbooks};
  __property   Owc10_xp::Worksheets* Worksheets = {read = get_Worksheets};
  __property   BSTR            XMLData = {read = get_XMLData};
  __property   BSTR            XMLURL = {read = get_XMLURL};
};
typedef ISpreadsheetDispT<ISpreadsheet> ISpreadsheetDisp;

typedef TComInterface<Worksheet>  TCOMWorksheet;

// *********************************************************************//
// DispIntf:  Worksheet
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A88-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class WorksheetDispT : public TAutoDriver<Worksheet>
{
public:
  WorksheetDispT(){}

  WorksheetDispT(Worksheet *pintf)
  {
    TAutoDriver<Worksheet>::Bind(pintf, false);
  }

  WorksheetDispT(WorksheetPtr pintf)
  {
    TAutoDriver<Worksheet>::Bind(pintf, true);
  }

  WorksheetDispT& operator=(Worksheet *pintf)
  {
    TAutoDriver<Worksheet>::Bind(pintf, false);
    return *this;
  }

  WorksheetDispT& operator=(WorksheetPtr pintf)
  {
    TAutoDriver<Worksheet>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall Activate();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Calculate();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Copy(VARIANT Before/*[in,opt]*/= TNoParam(), 
                                             VARIANT After/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DumpStringTable();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Evaluate(VARIANT Expression/*[in]*/, 
                                                  VARIANT* Result/*[out,retval]*/);
  VARIANT         __fastcall _Evaluate(VARIANT Expression/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Evaluate(VARIANT Expression/*[in]*/, 
                                                 VARIANT* Result/*[out,retval]*/);
  VARIANT         __fastcall Evaluate(VARIANT Expression/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Move(VARIANT Before/*[in,opt]*/= TNoParam(), 
                                             VARIANT After/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Paste(VARIANT* Destination/*[in,opt]*/= TNoParam(), 
                                              VARIANT* Link/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Protect(VARIANT* Password/*[in,opt]*/= TNoParam(), 
                                                VARIANT* DrawingObjects/*[in,opt]*/= TNoParam(), 
                                                VARIANT* Contents/*[in,opt]*/= TNoParam(), 
                                                VARIANT* Scenarios/*[in,opt]*/= TNoParam(), 
                                                VARIANT* UserInterfaceOnly/*[in,opt]*/= TNoParam(), 
                                                VARIANT* AllowFormattingCells/*[in,opt]*/= TNoParam()
                                                , 
                                                VARIANT* AllowFormattingColumns/*[in,opt]*/= TNoParam()
                                                , 
                                                VARIANT* AllowFormattingRows/*[in,opt]*/= TNoParam()
                                                , 
                                                VARIANT* AllowInsertingColumns/*[in,opt]*/= TNoParam()
                                                , 
                                                VARIANT* AllowInsertingRows/*[in,opt]*/= TNoParam()
                                                , 
                                                VARIANT* AllowInsertingHyperlinks/*[in,opt]*/= TNoParam()
                                                , 
                                                VARIANT* AllowDeletingColumns/*[in,opt]*/= TNoParam()
                                                , VARIANT* AllowDeletingRows/*[in,opt]*/= TNoParam()
                                                , VARIANT* AllowSorting/*[in,opt]*/= TNoParam(), 
                                                VARIANT* AllowFiltering/*[in,opt]*/= TNoParam(), 
                                                VARIANT* AllowUsingPivotTableReports/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Refresh();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Select(VARIANT* Replace/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ShowAllData();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Unprotect(VARIANT* Password/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Owc10_xp::ISpreadsheet** ppApp/*[out,retval]*/);
  Owc10_xp::ISpreadsheet* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoFilter(Owc10_xp::AutoFilter** AutoFilter/*[out,retval]*/);
  Owc10_xp::AutoFilter* __fastcall get_AutoFilter(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoFilterMode(VARIANT_BOOL* AutoFilterMode/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoFilterMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoFilterMode(VARIANT_BOOL AutoFilterMode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Cells(Owc10_xp::_Range** Range/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall get_Cells(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Columns(Owc10_xp::_Range** Range/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall get_Columns(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CommandText(BSTR* CommandText/*[out,retval]*/);
  BSTR            __fastcall get_CommandText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CommandText(BSTR CommandText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ConnectionString(BSTR* ConnectionString/*[out,retval]*/);
  BSTR            __fastcall get_ConnectionString(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ConnectionString(BSTR ConnectionString/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DataMember(Msdatasrc_xp::DataMember* DataMember/*[out,retval]*/);
  Msdatasrc_xp::DataMember __fastcall get_DataMember(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DataMember(Msdatasrc_xp::DataMember DataMember/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EnableAutoFilter(VARIANT_BOOL* EnableAutoFilter/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EnableAutoFilter(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EnableAutoFilter(VARIANT_BOOL EnableAutoFilter/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FilterMode(VARIANT_BOOL* FilterMode/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FilterMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Index(long* Index/*[out,retval]*/);
  long            __fastcall get_Index(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsDataBound(VARIANT_BOOL* pf/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsDataBound(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IsDataBound(VARIANT_BOOL pf/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Names(Owc10_xp::Names** Names/*[out,retval]*/);
  Owc10_xp::Names* __fastcall get_Names(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Next(Owc10_xp::Worksheet** wks/*[out,retval]*/);
  Owc10_xp::Worksheet* __fastcall get_Next(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Owc10_xp::Workbook** Parent/*[out,retval]*/);
  Owc10_xp::Workbook* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Previous(Owc10_xp::Worksheet** wks/*[out,retval]*/);
  Owc10_xp::Worksheet* __fastcall get_Previous(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ProtectContents(VARIANT_BOOL* prot/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ProtectContents(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Protection(Owc10_xp::Protection** prot/*[out,retval]*/);
  Owc10_xp::Protection* __fastcall get_Protection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ProtectionMode(VARIANT_BOOL* prot/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ProtectionMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Range(VARIANT Cell1/*[in]*/, VARIANT Cell2/*[in,opt]*/, 
                                                  Owc10_xp::_Range** Range/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall get_Range(VARIANT Cell1/*[in]*/, 
                                         VARIANT Cell2/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Rows(Owc10_xp::_Range** Range/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall get_Rows(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_StandardHeight(double* hgt/*[out,retval]*/);
  double          __fastcall get_StandardHeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_StandardWidth(double* wid/*[out,retval]*/);
  double          __fastcall get_StandardWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_StandardWidth(double wid/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Owc10_xp::XlSheetType* typ/*[out,retval]*/);
  Owc10_xp::XlSheetType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_UsedRange(Owc10_xp::_Range** Range/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall get_UsedRange(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Owc10_xp::XlSheetVisibility* vis/*[out,retval]*/);
  Owc10_xp::XlSheetVisibility __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Owc10_xp::XlSheetVisibility vis/*[in]*/);

  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   Owc10_xp::AutoFilter* AutoFilter = {read = get_AutoFilter};
  __property   VARIANT_BOOL    AutoFilterMode = {read = get_AutoFilterMode, write = set_AutoFilterMode};
  __property   Owc10_xp::_Range* Cells = {read = get_Cells};
  __property   Owc10_xp::_Range* Columns = {read = get_Columns};
  __property   BSTR            CommandText = {read = get_CommandText};
  __property   BSTR            ConnectionString = {read = get_ConnectionString};
  __property   Msdatasrc_xp::DataMember DataMember = {read = get_DataMember, write = set_DataMember};
  __property   VARIANT_BOOL    EnableAutoFilter = {read = get_EnableAutoFilter, write = set_EnableAutoFilter};
  __property   VARIANT_BOOL    FilterMode = {read = get_FilterMode};
  __property   long            Index = {read = get_Index};
  __property   VARIANT_BOOL    IsDataBound = {read = get_IsDataBound, write = set_IsDataBound};
  __property   BSTR            Name = {read = get_Name};
  __property   Owc10_xp::Names* Names = {read = get_Names};
  __property   Owc10_xp::Worksheet* Next = {read = get_Next};
  __property   Owc10_xp::Workbook* Parent = {read = get_Parent};
  __property   Owc10_xp::Worksheet* Previous = {read = get_Previous};
  __property   VARIANT_BOOL    ProtectContents = {read = get_ProtectContents};
  __property   Owc10_xp::Protection* Protection = {read = get_Protection};
  __property   VARIANT_BOOL    ProtectionMode = {read = get_ProtectionMode};
  __property   Owc10_xp::_Range* Rows = {read = get_Rows};
  __property   double          StandardHeight = {read = get_StandardHeight};
  __property   double          StandardWidth = {read = get_StandardWidth, write = set_StandardWidth};
  __property   Owc10_xp::XlSheetType Type = {read = get_Type};
  __property   Owc10_xp::_Range* UsedRange = {read = get_UsedRange};
  __property   Owc10_xp::XlSheetVisibility Visible = {read = get_Visible, write = set_Visible};
};
typedef WorksheetDispT<Worksheet> WorksheetDisp;

typedef TComInterface<AutoFilter>  TCOMAutoFilter;

// *********************************************************************//
// DispIntf:  AutoFilter
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B0E-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class AutoFilterDispT : public TAutoDriver<AutoFilter>
{
public:
  AutoFilterDispT(){}

  AutoFilterDispT(AutoFilter *pintf)
  {
    TAutoDriver<AutoFilter>::Bind(pintf, false);
  }

  AutoFilterDispT(AutoFilterPtr pintf)
  {
    TAutoDriver<AutoFilter>::Bind(pintf, true);
  }

  AutoFilterDispT& operator=(AutoFilter *pintf)
  {
    TAutoDriver<AutoFilter>::Bind(pintf, false);
    return *this;
  }

  AutoFilterDispT& operator=(AutoFilterPtr pintf)
  {
    TAutoDriver<AutoFilter>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/);
  Owc10_xp::ISpreadsheet* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Filters(Owc10_xp::Filters** Filters/*[out,retval]*/);
  Owc10_xp::Filters* __fastcall get_Filters(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Owc10_xp::Worksheet** Dispatch/*[out,retval]*/);
  Owc10_xp::Worksheet* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Range(Owc10_xp::_Range** Range/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall get_Range(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Apply();

  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   Owc10_xp::Filters* Filters = {read = get_Filters};
  __property   Owc10_xp::Worksheet* Parent = {read = get_Parent};
  __property   Owc10_xp::_Range* Range = {read = get_Range};
};
typedef AutoFilterDispT<AutoFilter> AutoFilterDisp;

typedef TComInterface<Filters>  TCOMFilters;

// *********************************************************************//
// DispIntf:  Filters
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B04-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class FiltersDispT : public TAutoDriver<Filters>
{
public:
  FiltersDispT(){}

  FiltersDispT(Filters *pintf)
  {
    TAutoDriver<Filters>::Bind(pintf, false);
  }

  FiltersDispT(FiltersPtr pintf)
  {
    TAutoDriver<Filters>::Bind(pintf, true);
  }

  FiltersDispT& operator=(Filters *pintf)
  {
    TAutoDriver<Filters>::Bind(pintf, false);
    return *this;
  }

  FiltersDispT& operator=(FiltersPtr pintf)
  {
    TAutoDriver<Filters>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* punk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/);
  Owc10_xp::ISpreadsheet* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(long Index/*[in]*/, 
                                                 Owc10_xp::Filter** Filter/*[out,retval]*/);
  Owc10_xp::Filter* __fastcall get_Item(long Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Owc10_xp::AutoFilter** Dispatch/*[out,retval]*/);
  Owc10_xp::AutoFilter* __fastcall get_Parent(void);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   long            Count = {read = get_Count};
  __property   Owc10_xp::AutoFilter* Parent = {read = get_Parent};
};
typedef FiltersDispT<Filters> FiltersDisp;

typedef TComInterface<Filter>  TCOMFilter;

// *********************************************************************//
// DispIntf:  Filter
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B03-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class FilterDispT : public TAutoDriver<Filter>
{
public:
  FilterDispT(){}

  FilterDispT(Filter *pintf)
  {
    TAutoDriver<Filter>::Bind(pintf, false);
  }

  FilterDispT(FilterPtr pintf)
  {
    TAutoDriver<Filter>::Bind(pintf, true);
  }

  FilterDispT& operator=(Filter *pintf)
  {
    TAutoDriver<Filter>::Bind(pintf, false);
    return *this;
  }

  FilterDispT& operator=(FilterPtr pintf)
  {
    TAutoDriver<Filter>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/);
  Owc10_xp::ISpreadsheet* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Criteria(Owc10_xp::Criteria** Criteria/*[out,retval]*/);
  Owc10_xp::Criteria* __fastcall get_Criteria(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Owc10_xp::AutoFilter** Dispatch/*[out,retval]*/);
  Owc10_xp::AutoFilter* __fastcall get_Parent(void);

  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   Owc10_xp::Criteria* Criteria = {read = get_Criteria};
  __property   Owc10_xp::AutoFilter* Parent = {read = get_Parent};
};
typedef FilterDispT<Filter> FilterDisp;

typedef TComInterface<Criteria>  TCOMCriteria;

// *********************************************************************//
// DispIntf:  Criteria
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B02-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class CriteriaDispT : public TAutoDriver<Criteria>
{
public:
  CriteriaDispT(){}

  CriteriaDispT(Criteria *pintf)
  {
    TAutoDriver<Criteria>::Bind(pintf, false);
  }

  CriteriaDispT(CriteriaPtr pintf)
  {
    TAutoDriver<Criteria>::Bind(pintf, true);
  }

  CriteriaDispT& operator=(Criteria *pintf)
  {
    TAutoDriver<Criteria>::Bind(pintf, false);
    return *this;
  }

  CriteriaDispT& operator=(CriteriaPtr pintf)
  {
    TAutoDriver<Criteria>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* punk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/);
  Owc10_xp::ISpreadsheet* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FilterFunction(Owc10_xp::SheetFilterFunction* FilterFunction/*[out,retval]*/);
  Owc10_xp::SheetFilterFunction __fastcall get_FilterFunction(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FilterFunction(Owc10_xp::SheetFilterFunction FilterFunction/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(long Index/*[in]*/, 
                                                 VARIANT* Criterion/*[out,retval]*/);
  VARIANT         __fastcall get_Item(long Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Owc10_xp::Filter** Dispatch/*[out,retval]*/);
  Owc10_xp::Filter* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowAll(VARIANT_BOOL* ShowAll/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowAll(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowAll(VARIANT_BOOL ShowAll/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(BSTR Criterion/*[in]*/);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   long            Count = {read = get_Count};
  __property   Owc10_xp::SheetFilterFunction FilterFunction = {read = get_FilterFunction, write = set_FilterFunction};
  __property   Owc10_xp::Filter* Parent = {read = get_Parent};
  __property   VARIANT_BOOL    ShowAll = {read = get_ShowAll, write = set_ShowAll};
};
typedef CriteriaDispT<Criteria> CriteriaDisp;

typedef TComInterface<Names>  TCOMNames;

// *********************************************************************//
// DispIntf:  Names
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39BAD-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class NamesDispT : public TAutoDriver<Names>
{
public:
  NamesDispT(){}

  NamesDispT(Names *pintf)
  {
    TAutoDriver<Names>::Bind(pintf, false);
  }

  NamesDispT(NamesPtr pintf)
  {
    TAutoDriver<Names>::Bind(pintf, true);
  }

  NamesDispT& operator=(Names *pintf)
  {
    TAutoDriver<Names>::Bind(pintf, false);
    return *this;
  }

  NamesDispT& operator=(NamesPtr pintf)
  {
    TAutoDriver<Names>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* punk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/);
  Owc10_xp::ISpreadsheet* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* pc/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* ppXSheet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(VARIANT Index/*[in,opt]*/, 
                                             VARIANT IndexLocal/*[in,opt]*/, 
                                             VARIANT RefersTo/*[in,opt]*/, 
                                             Owc10_xp::Name** ppXName/*[out,retval]*/);
  Owc10_xp::Name* __fastcall Item(VARIANT Index/*[in,opt]*/= TNoParam(), 
                                  VARIANT IndexLocal/*[in,opt]*/= TNoParam(), 
                                  VARIANT RefersTo/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(VARIANT Name/*[in,opt]*/= TNoParam(), 
                                            VARIANT RefersTo/*[in,opt]*/= TNoParam(), 
                                            VARIANT Visible/*[in,opt]*/= TNoParam(), 
                                            VARIANT MacroType/*[in,opt]*/= TNoParam(), 
                                            VARIANT ShortcutKey/*[in,opt]*/= TNoParam(), 
                                            VARIANT Category/*[in,opt]*/= TNoParam(), 
                                            VARIANT NameLocal/*[in,opt]*/= TNoParam(), 
                                            VARIANT RefersToLocal/*[in,opt]*/= TNoParam(), 
                                            VARIANT CategoryLocal/*[in,opt]*/= TNoParam(), 
                                            VARIANT RefersToR1C1/*[in,opt]*/= TNoParam(), 
                                            VARIANT RefersToR1C1Local/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddUI(VARIANT varName/*[in,opt]*/= TNoParam(), 
                                              VARIANT varRefersTo/*[in,opt]*/= TNoParam(), 
                                              VARIANT varVisible/*[in,opt]*/= TNoParam(), 
                                              VARIANT varMacroType/*[in,opt]*/= TNoParam(), 
                                              VARIANT varShortcutKey/*[in,opt]*/= TNoParam(), 
                                              VARIANT varCategory/*[in,opt]*/= TNoParam(), 
                                              VARIANT varNameLocal/*[in,opt]*/= TNoParam(), 
                                              VARIANT varRefersToLocal/*[in,opt]*/= TNoParam(), 
                                              VARIANT varCategoryLocal/*[in,opt]*/= TNoParam(), 
                                              VARIANT varRefersToR1C1/*[in,opt]*/= TNoParam(), 
                                              VARIANT varRefersToR1C1Local/*[in,opt]*/= TNoParam());

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   long            Count = {read = get_Count};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef NamesDispT<Names> NamesDisp;

typedef TComInterface<Name>  TCOMName;

// *********************************************************************//
// DispIntf:  Name
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39BAC-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class NameDispT : public TAutoDriver<Name>
{
public:
  NameDispT(){}

  NameDispT(Name *pintf)
  {
    TAutoDriver<Name>::Bind(pintf, false);
  }

  NameDispT(NamePtr pintf)
  {
    TAutoDriver<Name>::Bind(pintf, true);
  }

  NameDispT& operator=(Name *pintf)
  {
    TAutoDriver<Name>::Bind(pintf, false);
    return *this;
  }

  NameDispT& operator=(NamePtr pintf)
  {
    TAutoDriver<Name>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/);
  Owc10_xp::ISpreadsheet* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Index(long* pc/*[out,retval]*/);
  long            __fastcall get_Index(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name_(BSTR* pbstr/*[out,retval]*/);
  BSTR            __fastcall get_Name_(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name_(BSTR pbstr/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RefersTo(VARIANT* pvarVal/*[out,retval]*/);
  VARIANT         __fastcall get_RefersTo(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RefersTo(VARIANT pvarVal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RefersToLocal(VARIANT* pvarVal/*[out,retval]*/);
  VARIANT         __fastcall get_RefersToLocal(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RefersToLocal(VARIANT pvarVal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RefersToRange(Owc10_xp::_Range** ppIDispatchXRange/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall get_RefersToRange(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(BSTR* pBstrOut/*[out,retval]*/);
  BSTR            __fastcall get_Value(void);

  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   long            Index = {read = get_Index};
  __property   BSTR            Name_ = {read = get_Name_};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Owc10_xp::_Range* RefersToRange = {read = get_RefersToRange};
  __property   BSTR            Value = {read = get_Value};
};
typedef NameDispT<Name> NameDisp;

typedef TComInterface<Workbook>  TCOMWorkbook;

// *********************************************************************//
// DispIntf:  Workbook
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39BA6-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class WorkbookDispT : public TAutoDriver<Workbook>
{
public:
  WorkbookDispT(){}

  WorkbookDispT(Workbook *pintf)
  {
    TAutoDriver<Workbook>::Bind(pintf, false);
  }

  WorkbookDispT(WorkbookPtr pintf)
  {
    TAutoDriver<Workbook>::Bind(pintf, true);
  }

  WorkbookDispT& operator=(Workbook *pintf)
  {
    TAutoDriver<Workbook>::Bind(pintf, false);
    return *this;
  }

  WorkbookDispT& operator=(WorkbookPtr pintf)
  {
    TAutoDriver<Workbook>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActiveSheet(Owc10_xp::Worksheet** Worksheet/*[out,retval]*/);
  Owc10_xp::Worksheet* __fastcall get_ActiveSheet(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/);
  Owc10_xp::ISpreadsheet* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CalculationVersion(long* Version/*[out,retval]*/);
  long            __fastcall get_CalculationVersion(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Colors(VARIANT Index/*[in,opt]*/, 
                                                   VARIANT* Color/*[out,retval]*/);
  VARIANT         __fastcall get_Colors(VARIANT Index/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Colors(VARIANT Index/*[in,opt]*/, VARIANT Color/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Names(Owc10_xp::Names** Names/*[out,retval]*/);
  Owc10_xp::Names* __fastcall get_Names(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/);
  Owc10_xp::ISpreadsheet* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ProtectStructure(VARIANT_BOOL* ProtectStructure/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ProtectStructure(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Sheets(Owc10_xp::Sheets** Sheets/*[out,retval]*/);
  Owc10_xp::Sheets* __fastcall get_Sheets(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Windows(Owc10_xp::Windows** Windows/*[out,retval]*/);
  Owc10_xp::Windows* __fastcall get_Windows(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Worksheets(Owc10_xp::Worksheets** Worksheets/*[out,retval]*/);
  Owc10_xp::Worksheets* __fastcall get_Worksheets(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Protect(VARIANT Password/*[in,opt]*/= TNoParam(), 
                                                VARIANT Structure/*[in,opt]*/= TNoParam(), 
                                                VARIANT Windows/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ResetColors();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Unprotect(VARIANT Password/*[in,opt]*/= TNoParam());

  __property   Owc10_xp::Worksheet* ActiveSheet = {read = get_ActiveSheet};
  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   long            CalculationVersion = {read = get_CalculationVersion};
  __property   BSTR            Name = {read = get_Name};
  __property   Owc10_xp::Names* Names = {read = get_Names};
  __property   Owc10_xp::ISpreadsheet* Parent = {read = get_Parent};
  __property   VARIANT_BOOL    ProtectStructure = {read = get_ProtectStructure};
  __property   Owc10_xp::Sheets* Sheets = {read = get_Sheets};
  __property   Owc10_xp::Windows* Windows = {read = get_Windows};
  __property   Owc10_xp::Worksheets* Worksheets = {read = get_Worksheets};
};
typedef WorkbookDispT<Workbook> WorkbookDisp;

typedef TComInterface<Sheets>  TCOMSheets;

// *********************************************************************//
// DispIntf:  Sheets
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39BA7-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class SheetsDispT : public TAutoDriver<Sheets>
{
public:
  SheetsDispT(){}

  SheetsDispT(Sheets *pintf)
  {
    TAutoDriver<Sheets>::Bind(pintf, false);
  }

  SheetsDispT(SheetsPtr pintf)
  {
    TAutoDriver<Sheets>::Bind(pintf, true);
  }

  SheetsDispT& operator=(Sheets *pintf)
  {
    TAutoDriver<Sheets>::Bind(pintf, false);
    return *this;
  }

  SheetsDispT& operator=(SheetsPtr pintf)
  {
    TAutoDriver<Sheets>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/);
  Owc10_xp::ISpreadsheet* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT Index/*[in]*/, 
                                                 LPDISPATCH* Dispatch/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Owc10_xp::Workbook** Dispatch/*[out,retval]*/);
  Owc10_xp::Workbook* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(VARIANT* Visible/*[out,retval]*/);
  VARIANT         __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(VARIANT Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(VARIANT Before/*[in,opt]*/, VARIANT After/*[in,opt]*/, 
                                            VARIANT Count/*[in,opt]*/, VARIANT Type/*[in,opt]*/, 
                                            LPDISPATCH* Dispatch/*[out,retval]*/);
  LPDISPATCH      __fastcall Add(VARIANT Before/*[in,opt]*/= TNoParam(), 
                                 VARIANT After/*[in,opt]*/= TNoParam(), 
                                 VARIANT Count/*[in,opt]*/= TNoParam(), 
                                 VARIANT Type/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Copy(VARIANT Before/*[in,opt]*/= TNoParam(), 
                                             VARIANT After/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Move(VARIANT Before/*[in,opt]*/= TNoParam(), 
                                             VARIANT After/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Select(VARIANT Replace/*[in,opt]*/= TNoParam());

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   long            Count = {read = get_Count};
  __property   Owc10_xp::Workbook* Parent = {read = get_Parent};
};
typedef SheetsDispT<Sheets> SheetsDisp;

typedef TComInterface<Windows>  TCOMWindows;

// *********************************************************************//
// DispIntf:  Windows
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39BAB-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class WindowsDispT : public TAutoDriver<Windows>
{
public:
  WindowsDispT(){}

  WindowsDispT(Windows *pintf)
  {
    TAutoDriver<Windows>::Bind(pintf, false);
  }

  WindowsDispT(WindowsPtr pintf)
  {
    TAutoDriver<Windows>::Bind(pintf, true);
  }

  WindowsDispT& operator=(Windows *pintf)
  {
    TAutoDriver<Windows>::Bind(pintf, false);
    return *this;
  }

  WindowsDispT& operator=(WindowsPtr pintf)
  {
    TAutoDriver<Windows>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/);
  Owc10_xp::ISpreadsheet* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Dispatch/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(long Index/*[in]*/, 
                                                 Owc10_xp::WINDOW** wndw/*[out,retval]*/);
  Owc10_xp::WINDOW* __fastcall get_Item(long Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef WindowsDispT<Windows> WindowsDisp;

typedef TComInterface<WINDOW>  TCOMWINDOW;

// *********************************************************************//
// DispIntf:  Window
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39BAA-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class WINDOWDispT : public TAutoDriver<WINDOW>
{
public:
  WINDOWDispT(){}

  WINDOWDispT(WINDOW *pintf)
  {
    TAutoDriver<WINDOW>::Bind(pintf, false);
  }

  WINDOWDispT(WINDOWPtr pintf)
  {
    TAutoDriver<WINDOW>::Bind(pintf, true);
  }

  WINDOWDispT& operator=(WINDOW *pintf)
  {
    TAutoDriver<WINDOW>::Bind(pintf, false);
    return *this;
  }

  WINDOWDispT& operator=(WINDOWPtr pintf)
  {
    TAutoDriver<WINDOW>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/);
  Owc10_xp::ISpreadsheet* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Owc10_xp::Workbook** Dispatch/*[out,retval]*/);
  Owc10_xp::Workbook* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActiveCell(Owc10_xp::_Range** Range/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall get_ActiveCell(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActivePane(Owc10_xp::Pane** Pane/*[out,retval]*/);
  Owc10_xp::Pane* __fastcall get_ActivePane(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActiveSheet(Owc10_xp::Worksheet** Sheet/*[out,retval]*/);
  Owc10_xp::Worksheet* __fastcall get_ActiveSheet(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnHeadings(Owc10_xp::Headings** hdgs/*[out,retval]*/);
  Owc10_xp::Headings* __fastcall get_ColumnHeadings(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayColumnHeadings(VARIANT_BOOL* pf/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayColumnHeadings(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayColumnHeadings(VARIANT_BOOL pf/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayCustomHeadings(VARIANT_BOOL* pf/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayCustomHeadings(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayCustomHeadings(VARIANT_BOOL pf/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayGridlines(VARIANT_BOOL* pf/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayGridlines(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayGridlines(VARIANT_BOOL pf/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayHeadings(VARIANT_BOOL* pf/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayHeadings(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayHeadings(VARIANT_BOOL pf/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayHorizontalScrollBar(VARIANT_BOOL* pf/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayHorizontalScrollBar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayHorizontalScrollBar(VARIANT_BOOL pf/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayRowHeadings(VARIANT_BOOL* pf/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayRowHeadings(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayRowHeadings(VARIANT_BOOL pf/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayVerticalScrollBar(VARIANT_BOOL* pf/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayVerticalScrollBar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayVerticalScrollBar(VARIANT_BOOL pf/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayWorkbookTabs(VARIANT_BOOL* pf/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayWorkbookTabs(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayWorkbookTabs(VARIANT_BOOL pf/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayZeros(VARIANT_BOOL* pf/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayZeros(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayZeros(VARIANT_BOOL pf/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EnableResize(VARIANT_BOOL* pf/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EnableResize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EnableResize(VARIANT_BOOL pf/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FreezePanes(VARIANT_BOOL* pf/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FreezePanes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FreezePanes(VARIANT_BOOL pf/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GridlineColor(long* clr/*[out,retval]*/);
  long            __fastcall get_GridlineColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GridlineColor(VARIANT* clr/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GridlineColorIndex(Owc10_xp::XlColorIndex* iclr/*[out,retval]*/);
  Owc10_xp::XlColorIndex __fastcall get_GridlineColorIndex(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GridlineColorIndex(Owc10_xp::XlColorIndex iclr/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(double* hgt/*[out,retval]*/);
  double          __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Index(long* Index/*[out,retval]*/);
  long            __fastcall get_Index(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(double* lft/*[out,retval]*/);
  double          __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Panes(Owc10_xp::Panes** Panes/*[out,retval]*/);
  Owc10_xp::Panes* __fastcall get_Panes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RangeSelection(Owc10_xp::_Range** rng/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall get_RangeSelection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RowHeadings(Owc10_xp::Headings** hdgs/*[out,retval]*/);
  Owc10_xp::Headings* __fastcall get_RowHeadings(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ScrollColumn(long* col/*[out,retval]*/);
  long            __fastcall get_ScrollColumn(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ScrollColumn(long col/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ScrollRow(long* Row/*[out,retval]*/);
  long            __fastcall get_ScrollRow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ScrollRow(long Row/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SelectedSheets(Owc10_xp::Sheets** shts/*[out,retval]*/);
  Owc10_xp::Sheets* __fastcall get_SelectedSheets(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Selection(Owc10_xp::_Range** rng/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall get_Selection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TabRatio(double* ratio/*[out,retval]*/);
  double          __fastcall get_TabRatio(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TabRatio(double ratio/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(double* Top/*[out,retval]*/);
  double          __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Owc10_xp::XlWindowType* typ/*[out,retval]*/);
  Owc10_xp::XlWindowType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_UsableHeight(double* hgt/*[out,retval]*/);
  double          __fastcall get_UsableHeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_UsableWidth(double* wid/*[out,retval]*/);
  double          __fastcall get_UsableWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ViewableRange(BSTR* rng/*[out,retval]*/);
  BSTR            __fastcall get_ViewableRange(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ViewableRange(BSTR rng/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(VARIANT_BOOL* pf/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VisibleRange(Owc10_xp::_Range** rng/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall get_VisibleRange(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(double* wid/*[out,retval]*/);
  double          __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_WindowNumber(long* num/*[out,retval]*/);
  long            __fastcall get_WindowNumber(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall LargeScroll(VARIANT* Down/*[in,opt]*/= TNoParam(), 
                                                    VARIANT* Up/*[in,opt]*/= TNoParam(), 
                                                    VARIANT* ToRight/*[in,opt]*/= TNoParam(), 
                                                    VARIANT* ToLeft/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PointsToScreenPixelsX(long Points/*[in]*/, 
                                                              long* pixels/*[out,retval]*/);
  long            __fastcall PointsToScreenPixelsX(long Points/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PointsToScreenPixelsY(long Points/*[in]*/, 
                                                              long* pixels/*[out,retval]*/);
  long            __fastcall PointsToScreenPixelsY(long Points/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RangeFromPoint(long x/*[in]*/, long y/*[in]*/, 
                                                       Owc10_xp::_Range** rng/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall RangeFromPoint(long x/*[in]*/, long y/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ResetHeadings();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ScrollIntoView(long Left/*[in]*/, long Top/*[in]*/, 
                                                       long Width/*[in]*/, long Height/*[in]*/, 
                                                       VARIANT* Start/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SmallScroll(VARIANT* Down/*[in,opt]*/= TNoParam(), 
                                                    VARIANT* Up/*[in,opt]*/= TNoParam(), 
                                                    VARIANT* ToRight/*[in,opt]*/= TNoParam(), 
                                                    VARIANT* ToLeft/*[in,opt]*/= TNoParam());

  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   Owc10_xp::Workbook* Parent = {read = get_Parent};
  __property   Owc10_xp::_Range* ActiveCell = {read = get_ActiveCell};
  __property   Owc10_xp::Pane* ActivePane = {read = get_ActivePane};
  __property   Owc10_xp::Worksheet* ActiveSheet = {read = get_ActiveSheet};
  __property   Owc10_xp::Headings* ColumnHeadings = {read = get_ColumnHeadings};
  __property   VARIANT_BOOL    DisplayColumnHeadings = {read = get_DisplayColumnHeadings, write = set_DisplayColumnHeadings};
  __property   VARIANT_BOOL    DisplayCustomHeadings = {read = get_DisplayCustomHeadings, write = set_DisplayCustomHeadings};
  __property   VARIANT_BOOL    DisplayGridlines = {read = get_DisplayGridlines, write = set_DisplayGridlines};
  __property   VARIANT_BOOL    DisplayHeadings = {read = get_DisplayHeadings, write = set_DisplayHeadings};
  __property   VARIANT_BOOL    DisplayHorizontalScrollBar = {read = get_DisplayHorizontalScrollBar, write = set_DisplayHorizontalScrollBar};
  __property   VARIANT_BOOL    DisplayRowHeadings = {read = get_DisplayRowHeadings, write = set_DisplayRowHeadings};
  __property   VARIANT_BOOL    DisplayVerticalScrollBar = {read = get_DisplayVerticalScrollBar, write = set_DisplayVerticalScrollBar};
  __property   VARIANT_BOOL    DisplayWorkbookTabs = {read = get_DisplayWorkbookTabs, write = set_DisplayWorkbookTabs};
  __property   VARIANT_BOOL    DisplayZeros = {read = get_DisplayZeros, write = set_DisplayZeros};
  __property   VARIANT_BOOL    EnableResize = {read = get_EnableResize, write = set_EnableResize};
  __property   VARIANT_BOOL    FreezePanes = {read = get_FreezePanes, write = set_FreezePanes};
  __property   long            GridlineColor = {read = get_GridlineColor};
  __property   Owc10_xp::XlColorIndex GridlineColorIndex = {read = get_GridlineColorIndex, write = set_GridlineColorIndex};
  __property   double          Height = {read = get_Height};
  __property   long            Index = {read = get_Index};
  __property   double          Left = {read = get_Left};
  __property   Owc10_xp::Panes* Panes = {read = get_Panes};
  __property   Owc10_xp::_Range* RangeSelection = {read = get_RangeSelection};
  __property   Owc10_xp::Headings* RowHeadings = {read = get_RowHeadings};
  __property   long            ScrollColumn = {read = get_ScrollColumn, write = set_ScrollColumn};
  __property   long            ScrollRow = {read = get_ScrollRow, write = set_ScrollRow};
  __property   Owc10_xp::Sheets* SelectedSheets = {read = get_SelectedSheets};
  __property   Owc10_xp::_Range* Selection = {read = get_Selection};
  __property   double          TabRatio = {read = get_TabRatio, write = set_TabRatio};
  __property   double          Top = {read = get_Top};
  __property   Owc10_xp::XlWindowType Type = {read = get_Type};
  __property   double          UsableHeight = {read = get_UsableHeight};
  __property   double          UsableWidth = {read = get_UsableWidth};
  __property   BSTR            ViewableRange = {read = get_ViewableRange};
  __property   VARIANT_BOOL    Visible = {read = get_Visible};
  __property   Owc10_xp::_Range* VisibleRange = {read = get_VisibleRange};
  __property   double          Width = {read = get_Width};
  __property   long            WindowNumber = {read = get_WindowNumber};
};
typedef WINDOWDispT<WINDOW> WINDOWDisp;

typedef TComInterface<Pane>  TCOMPane;

// *********************************************************************//
// DispIntf:  Pane
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AB2-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class PaneDispT : public TAutoDriver<Pane>
{
public:
  PaneDispT(){}

  PaneDispT(Pane *pintf)
  {
    TAutoDriver<Pane>::Bind(pintf, false);
  }

  PaneDispT(PanePtr pintf)
  {
    TAutoDriver<Pane>::Bind(pintf, true);
  }

  PaneDispT& operator=(Pane *pintf)
  {
    TAutoDriver<Pane>::Bind(pintf, false);
    return *this;
  }

  PaneDispT& operator=(PanePtr pintf)
  {
    TAutoDriver<Pane>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Owc10_xp::ISpreadsheet** ppApp/*[out,retval]*/);
  Owc10_xp::ISpreadsheet* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Index(long* Index/*[out,retval]*/);
  long            __fastcall get_Index(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Owc10_xp::WINDOW** Parent/*[out,retval]*/);
  Owc10_xp::WINDOW* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VisibleRange(Owc10_xp::_Range** Range/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall get_VisibleRange(void);

  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   long            Index = {read = get_Index};
  __property   Owc10_xp::WINDOW* Parent = {read = get_Parent};
  __property   Owc10_xp::_Range* VisibleRange = {read = get_VisibleRange};
};
typedef PaneDispT<Pane> PaneDisp;

typedef TComInterface<Headings>  TCOMHeadings;

// *********************************************************************//
// DispIntf:  Headings
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39BA3-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class HeadingsDispT : public TAutoDriver<Headings>
{
public:
  HeadingsDispT(){}

  HeadingsDispT(Headings *pintf)
  {
    TAutoDriver<Headings>::Bind(pintf, false);
  }

  HeadingsDispT(HeadingsPtr pintf)
  {
    TAutoDriver<Headings>::Bind(pintf, true);
  }

  HeadingsDispT& operator=(Headings *pintf)
  {
    TAutoDriver<Headings>::Bind(pintf, false);
    return *this;
  }

  HeadingsDispT& operator=(HeadingsPtr pintf)
  {
    TAutoDriver<Headings>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/);
  Owc10_xp::ISpreadsheet* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Owc10_xp::WINDOW** Dispatch/*[out,retval]*/);
  Owc10_xp::WINDOW* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT* Index/*[in]*/, 
                                                 Owc10_xp::Heading** Heading/*[out,retval]*/);
  Owc10_xp::Heading* __fastcall get_Item(VARIANT* Index/*[in]*/);

  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   Owc10_xp::WINDOW* Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};
};
typedef HeadingsDispT<Headings> HeadingsDisp;

typedef TComInterface<Heading>  TCOMHeading;

// *********************************************************************//
// DispIntf:  Heading
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39BA4-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class HeadingDispT : public TAutoDriver<Heading>
{
public:
  HeadingDispT(){}

  HeadingDispT(Heading *pintf)
  {
    TAutoDriver<Heading>::Bind(pintf, false);
  }

  HeadingDispT(HeadingPtr pintf)
  {
    TAutoDriver<Heading>::Bind(pintf, true);
  }

  HeadingDispT& operator=(Heading *pintf)
  {
    TAutoDriver<Heading>::Bind(pintf, false);
    return *this;
  }

  HeadingDispT& operator=(HeadingPtr pintf)
  {
    TAutoDriver<Heading>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/);
  Owc10_xp::ISpreadsheet* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Owc10_xp::WINDOW** Parent/*[out,retval]*/);
  Owc10_xp::WINDOW* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* bstr/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Caption(BSTR bstr/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Index(long* Index/*[out,retval]*/);
  long            __fastcall get_Index(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reset();

  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   Owc10_xp::WINDOW* Parent = {read = get_Parent};
  __property   BSTR            Caption = {read = get_Caption};
  __property   long            Index = {read = get_Index};
};
typedef HeadingDispT<Heading> HeadingDisp;

typedef TComInterface<Panes>  TCOMPanes;

// *********************************************************************//
// DispIntf:  Panes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AB5-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class PanesDispT : public TAutoDriver<Panes>
{
public:
  PanesDispT(){}

  PanesDispT(Panes *pintf)
  {
    TAutoDriver<Panes>::Bind(pintf, false);
  }

  PanesDispT(PanesPtr pintf)
  {
    TAutoDriver<Panes>::Bind(pintf, true);
  }

  PanesDispT& operator=(Panes *pintf)
  {
    TAutoDriver<Panes>::Bind(pintf, false);
    return *this;
  }

  PanesDispT& operator=(PanesPtr pintf)
  {
    TAutoDriver<Panes>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Owc10_xp::ISpreadsheet** ppApp/*[out,retval]*/);
  Owc10_xp::ISpreadsheet* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(long Index/*[in]*/, 
                                                 Owc10_xp::Pane** Pane/*[out,retval]*/);
  Owc10_xp::Pane* __fastcall get_Item(long Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Owc10_xp::WINDOW** Parent/*[out,retval]*/);
  Owc10_xp::WINDOW* __fastcall get_Parent(void);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   long            Count = {read = get_Count};
  __property   Owc10_xp::WINDOW* Parent = {read = get_Parent};
};
typedef PanesDispT<Panes> PanesDisp;

typedef TComInterface<Worksheets>  TCOMWorksheets;

// *********************************************************************//
// DispIntf:  Worksheets
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39BA8-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class WorksheetsDispT : public TAutoDriver<Worksheets>
{
public:
  WorksheetsDispT(){}

  WorksheetsDispT(Worksheets *pintf)
  {
    TAutoDriver<Worksheets>::Bind(pintf, false);
  }

  WorksheetsDispT(WorksheetsPtr pintf)
  {
    TAutoDriver<Worksheets>::Bind(pintf, true);
  }

  WorksheetsDispT& operator=(Worksheets *pintf)
  {
    TAutoDriver<Worksheets>::Bind(pintf, false);
    return *this;
  }

  WorksheetsDispT& operator=(WorksheetsPtr pintf)
  {
    TAutoDriver<Worksheets>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/);
  Owc10_xp::ISpreadsheet* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT Index/*[in]*/, 
                                                 LPDISPATCH* Dispatch/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Owc10_xp::Workbook** Dispatch/*[out,retval]*/);
  Owc10_xp::Workbook* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(VARIANT* Visible/*[out,retval]*/);
  VARIANT         __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(VARIANT Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(VARIANT Before/*[in,opt]*/, VARIANT After/*[in,opt]*/, 
                                            VARIANT Count/*[in,opt]*/, VARIANT Type/*[in,opt]*/, 
                                            LPDISPATCH* Dispatch/*[out,retval]*/);
  LPDISPATCH      __fastcall Add(VARIANT Before/*[in,opt]*/= TNoParam(), 
                                 VARIANT After/*[in,opt]*/= TNoParam(), 
                                 VARIANT Count/*[in,opt]*/= TNoParam(), 
                                 VARIANT Type/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Copy(VARIANT Before/*[in,opt]*/= TNoParam(), 
                                             VARIANT After/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Move(VARIANT Before/*[in,opt]*/= TNoParam(), 
                                             VARIANT After/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Select(VARIANT Replace/*[in,opt]*/= TNoParam());

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   long            Count = {read = get_Count};
  __property   Owc10_xp::Workbook* Parent = {read = get_Parent};
};
typedef WorksheetsDispT<Worksheets> WorksheetsDisp;

typedef TComInterface<Protection>  TCOMProtection;

// *********************************************************************//
// DispIntf:  Protection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B3D-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class ProtectionDispT : public TAutoDriver<Protection>
{
public:
  ProtectionDispT(){}

  ProtectionDispT(Protection *pintf)
  {
    TAutoDriver<Protection>::Bind(pintf, false);
  }

  ProtectionDispT(ProtectionPtr pintf)
  {
    TAutoDriver<Protection>::Bind(pintf, true);
  }

  ProtectionDispT& operator=(Protection *pintf)
  {
    TAutoDriver<Protection>::Bind(pintf, false);
    return *this;
  }

  ProtectionDispT& operator=(ProtectionPtr pintf)
  {
    TAutoDriver<Protection>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/);
  Owc10_xp::ISpreadsheet* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Owc10_xp::Worksheet** Dispatch/*[out,retval]*/);
  Owc10_xp::Worksheet* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(VARIANT_BOOL Enabled/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllowFormattingRows(VARIANT_BOOL* pf/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllowFormattingRows(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AllowFormattingRows(VARIANT_BOOL pf/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllowFormattingColumns(VARIANT_BOOL* pf/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllowFormattingColumns(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AllowFormattingColumns(VARIANT_BOOL pf/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllowInsertingRows(VARIANT_BOOL* pf/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllowInsertingRows(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AllowInsertingRows(VARIANT_BOOL pf/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllowInsertingColumns(VARIANT_BOOL* pf/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllowInsertingColumns(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AllowInsertingColumns(VARIANT_BOOL pf/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllowDeletingRows(VARIANT_BOOL* pf/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllowDeletingRows(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AllowDeletingRows(VARIANT_BOOL pf/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllowDeletingColumns(VARIANT_BOOL* pf/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllowDeletingColumns(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AllowDeletingColumns(VARIANT_BOOL pf/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllowSorting(VARIANT_BOOL* pf/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllowSorting(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AllowSorting(VARIANT_BOOL pf/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllowFiltering(VARIANT_BOOL* pf/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllowFiltering(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AllowFiltering(VARIANT_BOOL pf/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllowHeadingRename(VARIANT_BOOL* pf/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllowHeadingRename(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AllowHeadingRename(VARIANT_BOOL pf/*[in]*/);

  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   Owc10_xp::Worksheet* Parent = {read = get_Parent};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   VARIANT_BOOL    AllowFormattingRows = {read = get_AllowFormattingRows, write = set_AllowFormattingRows};
  __property   VARIANT_BOOL    AllowFormattingColumns = {read = get_AllowFormattingColumns, write = set_AllowFormattingColumns};
  __property   VARIANT_BOOL    AllowInsertingRows = {read = get_AllowInsertingRows, write = set_AllowInsertingRows};
  __property   VARIANT_BOOL    AllowInsertingColumns = {read = get_AllowInsertingColumns, write = set_AllowInsertingColumns};
  __property   VARIANT_BOOL    AllowDeletingRows = {read = get_AllowDeletingRows, write = set_AllowDeletingRows};
  __property   VARIANT_BOOL    AllowDeletingColumns = {read = get_AllowDeletingColumns, write = set_AllowDeletingColumns};
  __property   VARIANT_BOOL    AllowSorting = {read = get_AllowSorting, write = set_AllowSorting};
  __property   VARIANT_BOOL    AllowFiltering = {read = get_AllowFiltering, write = set_AllowFiltering};
  __property   VARIANT_BOOL    AllowHeadingRename = {read = get_AllowHeadingRename, write = set_AllowHeadingRename};
};
typedef ProtectionDispT<Protection> ProtectionDisp;

typedef TComInterface<TitleBar>  TCOMTitleBar;

// *********************************************************************//
// DispIntf:  TitleBar
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B0B-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class TitleBarDispT : public TAutoDriver<TitleBar>
{
public:
  TitleBarDispT(){}

  TitleBarDispT(TitleBar *pintf)
  {
    TAutoDriver<TitleBar>::Bind(pintf, false);
  }

  TitleBarDispT(TitleBarPtr pintf)
  {
    TAutoDriver<TitleBar>::Bind(pintf, true);
  }

  TitleBarDispT& operator=(TitleBar *pintf)
  {
    TAutoDriver<TitleBar>::Bind(pintf, false);
    return *this;
  }

  TitleBarDispT& operator=(TitleBarPtr pintf)
  {
    TAutoDriver<TitleBar>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Owc10_xp::ISpreadsheet** ppApp/*[out,retval]*/);
  Owc10_xp::ISpreadsheet* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* Caption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Caption(BSTR Caption/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Font(Owc10_xp::Font** Font/*[out,retval]*/);
  Owc10_xp::Font* __fastcall get_Font(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Interior(Owc10_xp::Interior** Interior/*[out,retval]*/);
  Owc10_xp::Interior* __fastcall get_Interior(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Owc10_xp::ISpreadsheet** Parent/*[out,retval]*/);
  Owc10_xp::ISpreadsheet* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(VARIANT_BOOL* Visible/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(VARIANT_BOOL Visible/*[in]*/);

  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   BSTR            Caption = {read = get_Caption};
  __property   Owc10_xp::Font* Font = {read = get_Font};
  __property   Owc10_xp::Interior* Interior = {read = get_Interior};
  __property   Owc10_xp::ISpreadsheet* Parent = {read = get_Parent};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
};
typedef TitleBarDispT<TitleBar> TitleBarDisp;

typedef TComInterface<Font>  TCOMFont;

// *********************************************************************//
// DispIntf:  Font
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6F5A761A-0AC7-4DED-9A6B-A3547FD7B7BB}
// *********************************************************************//
template<class T>
class FontDispT : public TAutoDriver<Font>
{
public:
  FontDispT(){}

  FontDispT(Font *pintf)
  {
    TAutoDriver<Font>::Bind(pintf, false);
  }

  FontDispT(FontPtr pintf)
  {
    TAutoDriver<Font>::Bind(pintf, true);
  }

  FontDispT& operator=(Font *pintf)
  {
    TAutoDriver<Font>::Bind(pintf, false);
    return *this;
  }

  FontDispT& operator=(FontPtr pintf)
  {
    TAutoDriver<Font>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Owc10_xp::ISpreadsheet** ppApp/*[out,retval]*/);
  Owc10_xp::ISpreadsheet* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Bold(VARIANT* Bold/*[out,retval]*/);
  VARIANT         __fastcall get_Bold(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Bold(VARIANT_BOOL Bold/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Color(VARIANT* Color/*[out,retval]*/);
  VARIANT         __fastcall get_Color(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Color(VARIANT* Color/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColorIndex(VARIANT* ColorIndex/*[out,retval]*/);
  VARIANT         __fastcall get_ColorIndex(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColorIndex(int ColorIndex/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Italic(VARIANT* Italic/*[out,retval]*/);
  VARIANT         __fastcall get_Italic(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Italic(VARIANT_BOOL Italic/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(VARIANT* Name/*[out,retval]*/);
  VARIANT         __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* ppidispatch/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Size(VARIANT* Size/*[out,retval]*/);
  VARIANT         __fastcall get_Size(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Size(double Size/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Underline(VARIANT* UnderlineStyle/*[out,retval]*/);
  VARIANT         __fastcall get_Underline(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Underline(Owc10_xp::XlUnderlineStyle UnderlineStyle/*[in]*/);

  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   VARIANT_BOOL    Bold = {write = set_Bold};
  __property   int             ColorIndex = {write = set_ColorIndex};
  __property   VARIANT_BOOL    Italic = {write = set_Italic};
  __property   BSTR            Name = {write = set_Name};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   double          Size = {write = set_Size};
  __property   Owc10_xp::XlUnderlineStyle Underline = {write = set_Underline};
};
typedef FontDispT<Font> FontDisp;

typedef TComInterface<Interior>  TCOMInterior;

// *********************************************************************//
// DispIntf:  Interior
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6F5A761B-0AC7-4DED-9A6B-A3547FD7B7BB}
// *********************************************************************//
template<class T>
class InteriorDispT : public TAutoDriver<Interior>
{
public:
  InteriorDispT(){}

  InteriorDispT(Interior *pintf)
  {
    TAutoDriver<Interior>::Bind(pintf, false);
  }

  InteriorDispT(InteriorPtr pintf)
  {
    TAutoDriver<Interior>::Bind(pintf, true);
  }

  InteriorDispT& operator=(Interior *pintf)
  {
    TAutoDriver<Interior>::Bind(pintf, false);
    return *this;
  }

  InteriorDispT& operator=(InteriorPtr pintf)
  {
    TAutoDriver<Interior>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Owc10_xp::ISpreadsheet** ppApp/*[out,retval]*/);
  Owc10_xp::ISpreadsheet* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Color(VARIANT* Color/*[out,retval]*/);
  VARIANT         __fastcall get_Color(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Color(VARIANT* Color/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColorIndex(VARIANT* ColorIndex/*[out,retval]*/);
  VARIANT         __fastcall get_ColorIndex(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColorIndex(int ColorIndex/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);

  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   int             ColorIndex = {write = set_ColorIndex};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef InteriorDispT<Interior> InteriorDisp;

typedef TComInterface<Workbooks>  TCOMWorkbooks;

// *********************************************************************//
// DispIntf:  Workbooks
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39BA5-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class WorkbooksDispT : public TAutoDriver<Workbooks>
{
public:
  WorkbooksDispT(){}

  WorkbooksDispT(Workbooks *pintf)
  {
    TAutoDriver<Workbooks>::Bind(pintf, false);
  }

  WorkbooksDispT(WorkbooksPtr pintf)
  {
    TAutoDriver<Workbooks>::Bind(pintf, true);
  }

  WorkbooksDispT& operator=(Workbooks *pintf)
  {
    TAutoDriver<Workbooks>::Bind(pintf, false);
    return *this;
  }

  WorkbooksDispT& operator=(WorkbooksPtr pintf)
  {
    TAutoDriver<Workbooks>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/);
  Owc10_xp::ISpreadsheet* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/);
  Owc10_xp::ISpreadsheet* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT Index/*[in]*/, 
                                                 Owc10_xp::Workbook** Workbook/*[out,retval]*/);
  Owc10_xp::Workbook* __fastcall get_Item(VARIANT Index/*[in]*/);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   Owc10_xp::ISpreadsheet* Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};
};
typedef WorkbooksDispT<Workbooks> WorkbooksDisp;

typedef TComInterface<Borders>  TCOMBorders;

// *********************************************************************//
// DispIntf:  Borders
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A7D-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class BordersDispT : public TAutoDriver<Borders>
{
public:
  BordersDispT(){}

  BordersDispT(Borders *pintf)
  {
    TAutoDriver<Borders>::Bind(pintf, false);
  }

  BordersDispT(BordersPtr pintf)
  {
    TAutoDriver<Borders>::Bind(pintf, true);
  }

  BordersDispT& operator=(Borders *pintf)
  {
    TAutoDriver<Borders>::Bind(pintf, false);
    return *this;
  }

  BordersDispT& operator=(BordersPtr pintf)
  {
    TAutoDriver<Borders>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Owc10_xp::ISpreadsheet** ppApp/*[out,retval]*/);
  Owc10_xp::ISpreadsheet* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Color(VARIANT* Color/*[out,retval]*/);
  VARIANT         __fastcall get_Color(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Color(VARIANT* Color/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColorIndex(VARIANT* ColorIndex/*[out,retval]*/);
  VARIANT         __fastcall get_ColorIndex(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColorIndex(int ColorIndex/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(Owc10_xp::XlBordersIndex Index/*[in]*/, 
                                                 Owc10_xp::Border** Border/*[out,retval]*/);
  Owc10_xp::Border* __fastcall get_Item(Owc10_xp::XlBordersIndex Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LineStyle(VARIANT* LineStyle/*[out,retval]*/);
  VARIANT         __fastcall get_LineStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LineStyle(Owc10_xp::XlLineStyle LineStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Owc10_xp::_Range** Parent/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(VARIANT* LineStyle/*[out,retval]*/);
  VARIANT         __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(Owc10_xp::XlLineStyle LineStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Weight(VARIANT* LineWeight/*[out,retval]*/);
  VARIANT         __fastcall get_Weight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Weight(Owc10_xp::XlBorderWeight LineWeight/*[in]*/);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   int             ColorIndex = {write = set_ColorIndex};
  __property   long            Count = {read = get_Count};
  __property   Owc10_xp::XlLineStyle LineStyle = {write = set_LineStyle};
  __property   Owc10_xp::_Range* Parent = {read = get_Parent};
  __property   Owc10_xp::XlLineStyle Value = {write = set_Value};
  __property   Owc10_xp::XlBorderWeight Weight = {write = set_Weight};
};
typedef BordersDispT<Borders> BordersDisp;

typedef TComInterface<Border>  TCOMBorder;

// *********************************************************************//
// DispIntf:  Border
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6F5A7618-0AC7-4DED-9A6B-A3547FD7B7BB}
// *********************************************************************//
template<class T>
class BorderDispT : public TAutoDriver<Border>
{
public:
  BorderDispT(){}

  BorderDispT(Border *pintf)
  {
    TAutoDriver<Border>::Bind(pintf, false);
  }

  BorderDispT(BorderPtr pintf)
  {
    TAutoDriver<Border>::Bind(pintf, true);
  }

  BorderDispT& operator=(Border *pintf)
  {
    TAutoDriver<Border>::Bind(pintf, false);
    return *this;
  }

  BorderDispT& operator=(BorderPtr pintf)
  {
    TAutoDriver<Border>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Owc10_xp::ISpreadsheet** ppApp/*[out,retval]*/);
  Owc10_xp::ISpreadsheet* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Color(VARIANT* Color/*[out,retval]*/);
  VARIANT         __fastcall get_Color(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Color(VARIANT* Color/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColorIndex(VARIANT* ColorIndex/*[out,retval]*/);
  VARIANT         __fastcall get_ColorIndex(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColorIndex(int ColorIndex/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LineStyle(VARIANT* LineStyle/*[out,retval]*/);
  VARIANT         __fastcall get_LineStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LineStyle(Owc10_xp::XlLineStyle LineStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Owc10_xp::_Range** Parent/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Weight(VARIANT* LineWeight/*[out,retval]*/);
  VARIANT         __fastcall get_Weight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Weight(Owc10_xp::XlBorderWeight LineWeight/*[in]*/);

  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   int             ColorIndex = {write = set_ColorIndex};
  __property   Owc10_xp::XlLineStyle LineStyle = {write = set_LineStyle};
  __property   Owc10_xp::_Range* Parent = {read = get_Parent};
  __property   Owc10_xp::XlBorderWeight Weight = {write = set_Weight};
};
typedef BorderDispT<Border> BorderDisp;

typedef TComInterface<Hyperlink>  TCOMHyperlink;

// *********************************************************************//
// DispIntf:  Hyperlink
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6F5A7620-0AC7-4DED-9A6B-A3547FD7B7BB}
// *********************************************************************//
template<class T>
class HyperlinkDispT : public TAutoDriver<Hyperlink>
{
public:
  HyperlinkDispT(){}

  HyperlinkDispT(Hyperlink *pintf)
  {
    TAutoDriver<Hyperlink>::Bind(pintf, false);
  }

  HyperlinkDispT(HyperlinkPtr pintf)
  {
    TAutoDriver<Hyperlink>::Bind(pintf, true);
  }

  HyperlinkDispT& operator=(Hyperlink *pintf)
  {
    TAutoDriver<Hyperlink>::Bind(pintf, false);
    return *this;
  }

  HyperlinkDispT& operator=(HyperlinkPtr pintf)
  {
    TAutoDriver<Hyperlink>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Owc10_xp::ISpreadsheet** ppApp/*[out,retval]*/);
  Owc10_xp::ISpreadsheet* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Address(BSTR* Address/*[out,retval]*/);
  BSTR            __fastcall get_Address(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Address(BSTR Address/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Owc10_xp::_Range** Parent/*[out,retval]*/);
  Owc10_xp::_Range* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SubAddress(BSTR* SubAddress/*[out,retval]*/);
  BSTR            __fastcall get_SubAddress(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SubAddress(BSTR SubAddress/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Follow(VARIANT* NewWindow/*[in,opt]*/= TNoParam(), 
                                               VARIANT* AddHistory/*[in,opt]*/= TNoParam(), 
                                               VARIANT* ExtraInfo/*[in,opt]*/= TNoParam(), 
                                               VARIANT* Method/*[in,opt]*/= TNoParam(), 
                                               VARIANT* HeaderInfo/*[in,opt]*/= TNoParam());

  __property   Owc10_xp::ISpreadsheet* Application = {read = get_Application};
  __property   BSTR            Address = {read = get_Address};
  __property   BSTR            Name = {read = get_Name};
  __property   Owc10_xp::_Range* Parent = {read = get_Parent};
  __property   BSTR            SubAddress = {read = get_SubAddress};
};
typedef HyperlinkDispT<Hyperlink> HyperlinkDisp;

typedef TComInterface<IOleCommandTargetArgument>  TCOMIOleCommandTargetArgument;

// *********************************************************************//
// DispIntf:  IOleCommandTargetArgument
// Flags:     (464) Hidden Dual NonExtensible OleAutomation
// GUID:      {FB8D568A-AE5F-4136-8223-6E24ABE10A28}
// *********************************************************************//
template<class T>
class IOleCommandTargetArgumentDispT : public TAutoDriver<IOleCommandTargetArgument>
{
public:
  IOleCommandTargetArgumentDispT(){}

  IOleCommandTargetArgumentDispT(IOleCommandTargetArgument *pintf)
  {
    TAutoDriver<IOleCommandTargetArgument>::Bind(pintf, false);
  }

  IOleCommandTargetArgumentDispT(IOleCommandTargetArgumentPtr pintf)
  {
    TAutoDriver<IOleCommandTargetArgument>::Bind(pintf, true);
  }

  IOleCommandTargetArgumentDispT& operator=(IOleCommandTargetArgument *pintf)
  {
    TAutoDriver<IOleCommandTargetArgument>::Bind(pintf, false);
    return *this;
  }

  IOleCommandTargetArgumentDispT& operator=(IOleCommandTargetArgumentPtr pintf)
  {
    TAutoDriver<IOleCommandTargetArgument>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(VARIANT Value/*[in]*/);

};
typedef IOleCommandTargetArgumentDispT<IOleCommandTargetArgument> IOleCommandTargetArgumentDisp;

// *********************************************************************//
// SmartIntf: TCOM_NumberFormat
// Interface: _NumberFormat
// *********************************************************************//
template <class T /* _NumberFormat */ >
class TCOM_NumberFormatT : public TComInterface<_NumberFormat>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_NumberFormatT() {}
  TCOM_NumberFormatT(_NumberFormat *intf, bool addRef = false) : TComInterface<_NumberFormat>(intf, addRef) {}
  TCOM_NumberFormatT(const TCOM_NumberFormatT& src) : TComInterface<_NumberFormat>(src) {}
  TCOM_NumberFormatT& operator=(const TCOM_NumberFormatT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT         __fastcall get_Code(BSTR* Code/*[out,retval]*/);
  BSTR            __fastcall get_Code(void);
  HRESULT         __fastcall set_Code(BSTR Code/*[in]*/);
  HRESULT         __fastcall get_Format(VARIANT Value/*[in]*/, long Count/*[in,def,opt]*/, 
                                        BSTR* Format/*[out,retval]*/);
  BSTR            __fastcall get_Format(VARIANT Value/*[in]*/, long Count/*[in,def,opt]*/);
  HRESULT         __fastcall get_Width(long hDC/*[in]*/, VARIANT Value/*[in]*/, 
                                       long* Width/*[out,retval]*/);
  long            __fastcall get_Width(long hDC/*[in]*/, VARIANT Value/*[in]*/);
  HRESULT         __fastcall get_Height(long hDC/*[in]*/, VARIANT Value/*[in]*/, 
                                        long* Height/*[out,retval]*/);
  long            __fastcall get_Height(long hDC/*[in]*/, VARIANT Value/*[in]*/);
  HRESULT         __fastcall Render(long hDC/*[in]*/, long hDCInfo/*[in]*/, long cx1/*[in]*/, 
                                    long cy1/*[in]*/, long cx2/*[in]*/, long cy2/*[in]*/, 
                                    long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                    long Height/*[in]*/, long HorizontalAlignment/*[in]*/, 
                                    long VerticalAlignment/*[in]*/, VARIANT Value/*[in]*/);

  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Code = {read = get_Code};
};
typedef TCOM_NumberFormatT<_NumberFormat> TCOM_NumberFormat;

// *********************************************************************//
// DispIntf:  _NumberFormat
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {81FDD9FE-6464-4A19-82AB-878823E85A5E}
// *********************************************************************//
template<class T>
class _NumberFormatDispT : public TAutoDriver<_NumberFormat>
{
public:
  _NumberFormatDispT(){}

  _NumberFormatDispT(_NumberFormat *pintf)
  {
    TAutoDriver<_NumberFormat>::Bind(pintf, false);
  }

  _NumberFormatDispT(_NumberFormatPtr pintf)
  {
    TAutoDriver<_NumberFormat>::Bind(pintf, true);
  }

  _NumberFormatDispT& operator=(_NumberFormat *pintf)
  {
    TAutoDriver<_NumberFormat>::Bind(pintf, false);
    return *this;
  }

  _NumberFormatDispT& operator=(_NumberFormatPtr pintf)
  {
    TAutoDriver<_NumberFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_NumberFormat));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_NumberFormat);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Code(BSTR* Code/*[out,retval]*/);
  BSTR            __fastcall get_Code(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Code(BSTR Code/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Format(VARIANT Value/*[in]*/, long Count/*[in,def,opt]*/
                                                   , BSTR* Format/*[out,retval]*/);
  BSTR            __fastcall get_Format(VARIANT Value/*[in]*/, long Count/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(long hDC/*[in]*/, VARIANT Value/*[in]*/, 
                                                  long* Width/*[out,retval]*/);
  long            __fastcall get_Width(long hDC/*[in]*/, VARIANT Value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(long hDC/*[in]*/, VARIANT Value/*[in]*/, 
                                                   long* Height/*[out,retval]*/);
  long            __fastcall get_Height(long hDC/*[in]*/, VARIANT Value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Render(long hDC/*[in]*/, long hDCInfo/*[in]*/, 
                                               long cx1/*[in]*/, long cy1/*[in]*/, long cx2/*[in]*/
                                               , long cy2/*[in]*/, long Left/*[in]*/, 
                                               long Top/*[in]*/, long Width/*[in]*/, 
                                               long Height/*[in]*/, long HorizontalAlignment/*[in]*/
                                               , long VerticalAlignment/*[in]*/, 
                                               VARIANT Value/*[in]*/);

  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Code = {read = get_Code};
};
typedef _NumberFormatDispT<_NumberFormat> _NumberFormatDisp;

typedef TComInterface<OCDirty>  TCOMOCDirty;

typedef TComInterface<IOMEvent>  TCOMIOMEvent;

// *********************************************************************//
// DispIntf:  IOMEvent
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F5B39AE3-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class IOMEventDispT : public TAutoDriver<IOMEvent>
{
public:
  IOMEventDispT(){}

  IOMEventDispT(IOMEvent *pintf)
  {
    TAutoDriver<IOMEvent>::Bind(pintf, false);
  }

  IOMEventDispT(IOMEventPtr pintf)
  {
    TAutoDriver<IOMEvent>::Bind(pintf, true);
  }

  IOMEventDispT& operator=(IOMEvent *pintf)
  {
    TAutoDriver<IOMEvent>::Bind(pintf, false);
    return *this;
  }

  IOMEventDispT& operator=(IOMEventPtr pintf)
  {
    TAutoDriver<IOMEvent>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_x(long* px/*[out,retval]*/);
  long            __fastcall get_x(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_y(long* py/*[out,retval]*/);
  long            __fastcall get_y(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_KeyCode(long* pvk/*[out,retval]*/);
  long            __fastcall get_KeyCode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_KeyChar(BSTR* Char/*[out,retval]*/);
  BSTR            __fastcall get_KeyChar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Button(long* pbutton/*[out,retval]*/);
  long            __fastcall get_Button(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AltKey(VARIANT_BOOL* pvb/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AltKey(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CtrlKey(VARIANT_BOOL* pvb/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CtrlKey(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShiftKey(VARIANT_BOOL* pvb/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShiftKey(void);

  __property   long            x = {read = get_x};
  __property   long            y = {read = get_y};
  __property   long            KeyCode = {read = get_KeyCode};
  __property   BSTR            KeyChar = {read = get_KeyChar};
  __property   long            Button = {read = get_Button};
  __property   VARIANT_BOOL    AltKey = {read = get_AltKey};
  __property   VARIANT_BOOL    CtrlKey = {read = get_CtrlKey};
  __property   VARIANT_BOOL    ShiftKey = {read = get_ShiftKey};
};
typedef IOMEventDispT<IOMEvent> IOMEventDisp;

typedef TComInterface<DesignAdviseSink>  TCOMDesignAdviseSink;

typedef TComInterface<SchemaFields>  TCOMSchemaFields;

// *********************************************************************//
// DispIntf:  SchemaFields
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AA3-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class SchemaFieldsDispT : public TAutoDriver<SchemaFields>
{
public:
  SchemaFieldsDispT(){}

  SchemaFieldsDispT(SchemaFields *pintf)
  {
    TAutoDriver<SchemaFields>::Bind(pintf, false);
  }

  SchemaFieldsDispT(SchemaFieldsPtr pintf)
  {
    TAutoDriver<SchemaFields>::Bind(pintf, true);
  }

  SchemaFieldsDispT& operator=(SchemaFields *pintf)
  {
    TAutoDriver<SchemaFields>::Bind(pintf, false);
    return *this;
  }

  SchemaFieldsDispT& operator=(SchemaFieldsPtr pintf)
  {
    TAutoDriver<SchemaFields>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT Index/*[in]*/, 
                                                 Owc10_xp::SchemaField** SchemaField/*[out,retval]*/);
  Owc10_xp::SchemaField* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(BSTR Name/*[in]*/, 
                                            Adodb_xp::DataTypeEnum DataType/*[in]*/, 
                                            VARIANT Length/*[in,opt]*/, 
                                            Owc10_xp::SchemaField** SchemaField/*[out,retval]*/);
  Owc10_xp::SchemaField* __fastcall Add(BSTR Name/*[in]*/, Adodb_xp::DataTypeEnum DataType/*[in]*/, 
                                        VARIANT Length/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef SchemaFieldsDispT<SchemaFields> SchemaFieldsDisp;

typedef TComInterface<SchemaField>  TCOMSchemaField;

// *********************************************************************//
// DispIntf:  SchemaField
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A67-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class SchemaFieldDispT : public TAutoDriver<SchemaField>
{
public:
  SchemaFieldDispT(){}

  SchemaFieldDispT(SchemaField *pintf)
  {
    TAutoDriver<SchemaField>::Bind(pintf, false);
  }

  SchemaFieldDispT(SchemaFieldPtr pintf)
  {
    TAutoDriver<SchemaField>::Bind(pintf, true);
  }

  SchemaFieldDispT& operator=(SchemaField *pintf)
  {
    TAutoDriver<SchemaField>::Bind(pintf, false);
    return *this;
  }

  SchemaFieldDispT& operator=(SchemaFieldPtr pintf)
  {
    TAutoDriver<SchemaField>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DataType(Adodb_xp::DataTypeEnum DataType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DataType(Adodb_xp::DataTypeEnum* DataType/*[out,retval]*/);
  Adodb_xp::DataTypeEnum __fastcall get_DataType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Length(long Length/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Length(long* Length/*[out,retval]*/);
  long            __fastcall get_Length(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IsKey(VARIANT_BOOL IsKey/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsKey(VARIANT_BOOL* IsKey/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsKey(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsRenamed(VARIANT_BOOL* IsRenamed/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsRenamed(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Properties(Owc10_xp::SchemaProperties** SchemaProperties/*[out,retval]*/);
  Owc10_xp::SchemaProperties* __fastcall get_Properties(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsHyperlink(VARIANT_BOOL* IsHyperlink/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsHyperlink(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BaseTableName(BSTR* BaseTableName/*[out,retval]*/);
  BSTR            __fastcall get_BaseTableName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BaseColumnName(BSTR* BaseColumnName/*[out,retval]*/);
  BSTR            __fastcall get_BaseColumnName(void);

  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   Adodb_xp::DataTypeEnum DataType = {read = get_DataType, write = set_DataType};
  __property   long            Length = {read = get_Length, write = set_Length};
  __property   VARIANT_BOOL    IsKey = {read = get_IsKey, write = set_IsKey};
  __property   VARIANT_BOOL    IsRenamed = {read = get_IsRenamed};
  __property   Owc10_xp::SchemaProperties* Properties = {read = get_Properties};
  __property   VARIANT_BOOL    IsHyperlink = {read = get_IsHyperlink};
  __property   BSTR            BaseTableName = {read = get_BaseTableName};
  __property   BSTR            BaseColumnName = {read = get_BaseColumnName};
};
typedef SchemaFieldDispT<SchemaField> SchemaFieldDisp;

typedef TComInterface<SchemaProperties>  TCOMSchemaProperties;

// *********************************************************************//
// DispIntf:  SchemaProperties
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C233A511-A2BB-11D3-80F9-0050041DC1A6}
// *********************************************************************//
template<class T>
class SchemaPropertiesDispT : public TAutoDriver<SchemaProperties>
{
public:
  SchemaPropertiesDispT(){}

  SchemaPropertiesDispT(SchemaProperties *pintf)
  {
    TAutoDriver<SchemaProperties>::Bind(pintf, false);
  }

  SchemaPropertiesDispT(SchemaPropertiesPtr pintf)
  {
    TAutoDriver<SchemaProperties>::Bind(pintf, true);
  }

  SchemaPropertiesDispT& operator=(SchemaProperties *pintf)
  {
    TAutoDriver<SchemaProperties>::Bind(pintf, false);
    return *this;
  }

  SchemaPropertiesDispT& operator=(SchemaPropertiesPtr pintf)
  {
    TAutoDriver<SchemaProperties>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT Index/*[in]*/, 
                                                 Owc10_xp::SchemaProperty** SchemaProperty/*[out,retval]*/);
  Owc10_xp::SchemaProperty* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef SchemaPropertiesDispT<SchemaProperties> SchemaPropertiesDisp;

typedef TComInterface<SchemaProperty>  TCOMSchemaProperty;

// *********************************************************************//
// DispIntf:  SchemaProperty
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C233A512-A2BB-11D3-80F9-0050041DC1A6}
// *********************************************************************//
template<class T>
class SchemaPropertyDispT : public TAutoDriver<SchemaProperty>
{
public:
  SchemaPropertyDispT(){}

  SchemaPropertyDispT(SchemaProperty *pintf)
  {
    TAutoDriver<SchemaProperty>::Bind(pintf, false);
  }

  SchemaPropertyDispT(SchemaPropertyPtr pintf)
  {
    TAutoDriver<SchemaProperty>::Bind(pintf, true);
  }

  SchemaPropertyDispT& operator=(SchemaProperty *pintf)
  {
    TAutoDriver<SchemaProperty>::Bind(pintf, false);
    return *this;
  }

  SchemaPropertyDispT& operator=(SchemaPropertyPtr pintf)
  {
    TAutoDriver<SchemaProperty>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall get_Value(void);

  __property   BSTR            Name = {read = get_Name};
};
typedef SchemaPropertyDispT<SchemaProperty> SchemaPropertyDisp;

typedef TComInterface<SchemaDiagram>  TCOMSchemaDiagram;

// *********************************************************************//
// DispIntf:  SchemaDiagram
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {30C37029-25CD-11D4-8D9D-00500483860C}
// *********************************************************************//
template<class T>
class SchemaDiagramDispT : public TAutoDriver<SchemaDiagram>
{
public:
  SchemaDiagramDispT(){}

  SchemaDiagramDispT(SchemaDiagram *pintf)
  {
    TAutoDriver<SchemaDiagram>::Bind(pintf, false);
  }

  SchemaDiagramDispT(SchemaDiagramPtr pintf)
  {
    TAutoDriver<SchemaDiagram>::Bind(pintf, true);
  }

  SchemaDiagramDispT& operator=(SchemaDiagram *pintf)
  {
    TAutoDriver<SchemaDiagram>::Bind(pintf, false);
    return *this;
  }

  SchemaDiagramDispT& operator=(SchemaDiagramPtr pintf)
  {
    TAutoDriver<SchemaDiagram>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SchemaRowsources(Owc10_xp::SchemaRowsources** SchemaRowsources/*[out,retval]*/);
  Owc10_xp::SchemaRowsources* __fastcall get_SchemaRowsources(void);

  __property   BSTR            Name = {read = get_Name};
  __property   Owc10_xp::SchemaRowsources* SchemaRowsources = {read = get_SchemaRowsources};
};
typedef SchemaDiagramDispT<SchemaDiagram> SchemaDiagramDisp;

typedef TComInterface<SchemaRowsources>  TCOMSchemaRowsources;

// *********************************************************************//
// DispIntf:  SchemaRowsources
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AA4-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class SchemaRowsourcesDispT : public TAutoDriver<SchemaRowsources>
{
public:
  SchemaRowsourcesDispT(){}

  SchemaRowsourcesDispT(SchemaRowsources *pintf)
  {
    TAutoDriver<SchemaRowsources>::Bind(pintf, false);
  }

  SchemaRowsourcesDispT(SchemaRowsourcesPtr pintf)
  {
    TAutoDriver<SchemaRowsources>::Bind(pintf, true);
  }

  SchemaRowsourcesDispT& operator=(SchemaRowsources *pintf)
  {
    TAutoDriver<SchemaRowsources>::Bind(pintf, false);
    return *this;
  }

  SchemaRowsourcesDispT& operator=(SchemaRowsourcesPtr pintf)
  {
    TAutoDriver<SchemaRowsources>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT Index/*[in]*/, 
                                                 Owc10_xp::SchemaRowsource** SchemaRowsource/*[out,retval]*/);
  Owc10_xp::SchemaRowsource* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(BSTR Name/*[in]*/, 
                                            Owc10_xp::DscRowsourceTypeEnum RowsourceType/*[in]*/, 
                                            VARIANT CommandText/*[in,opt]*/, 
                                            Owc10_xp::SchemaRowsource** SchemaRowsource/*[out,retval]*/);
  Owc10_xp::SchemaRowsource* __fastcall Add(BSTR Name/*[in]*/, 
                                            Owc10_xp::DscRowsourceTypeEnum RowsourceType/*[in]*/, 
                                            VARIANT CommandText/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddNew(BSTR Name/*[in]*/, 
                                               Owc10_xp::DscRowsourceTypeEnum RowsourceType/*[in]*/
                                               , VARIANT CommandText/*[in,opt]*/, 
                                               Owc10_xp::SchemaRowsource** SchemaRowsource/*[out,retval]*/);
  Owc10_xp::SchemaRowsource* __fastcall AddNew(BSTR Name/*[in]*/, 
                                               Owc10_xp::DscRowsourceTypeEnum RowsourceType/*[in]*/, 
                                               VARIANT CommandText/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef SchemaRowsourcesDispT<SchemaRowsources> SchemaRowsourcesDisp;

typedef TComInterface<SchemaRowsource>  TCOMSchemaRowsource;

// *********************************************************************//
// DispIntf:  SchemaRowsource
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AC8-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class SchemaRowsourceDispT : public TAutoDriver<SchemaRowsource>
{
public:
  SchemaRowsourceDispT(){}

  SchemaRowsourceDispT(SchemaRowsource *pintf)
  {
    TAutoDriver<SchemaRowsource>::Bind(pintf, false);
  }

  SchemaRowsourceDispT(SchemaRowsourcePtr pintf)
  {
    TAutoDriver<SchemaRowsource>::Bind(pintf, true);
  }

  SchemaRowsourceDispT& operator=(SchemaRowsource *pintf)
  {
    TAutoDriver<SchemaRowsource>::Bind(pintf, false);
    return *this;
  }

  SchemaRowsourceDispT& operator=(SchemaRowsourcePtr pintf)
  {
    TAutoDriver<SchemaRowsource>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Type(Owc10_xp::DscRowsourceTypeEnum RowsourceType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Owc10_xp::DscRowsourceTypeEnum* RowsourceType/*[out,retval]*/);
  Owc10_xp::DscRowsourceTypeEnum __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CommandText(BSTR* CommandText/*[out,retval]*/);
  BSTR            __fastcall get_CommandText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SchemaFields(Owc10_xp::SchemaFields** SchemaFields/*[out,retval]*/);
  Owc10_xp::SchemaFields* __fastcall get_SchemaFields(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LookupSchemaRelationships(Owc10_xp::LookupSchemaRelationships** LookupSchemaRelationships/*[out,retval]*/);
  Owc10_xp::LookupSchemaRelationships* __fastcall get_LookupSchemaRelationships(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SublistSchemaRelationships(Owc10_xp::SublistSchemaRelationships** SublistSchemaRelationships/*[out,retval]*/);
  Owc10_xp::SublistSchemaRelationships* __fastcall get_SublistSchemaRelationships(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SchemaParameters(Owc10_xp::SchemaParameters** SchemaParameters/*[out,retval]*/);
  Owc10_xp::SchemaParameters* __fastcall get_SchemaParameters(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Properties(Owc10_xp::SchemaProperties** SchemaProperties/*[out,retval]*/);
  Owc10_xp::SchemaProperties* __fastcall get_Properties(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsHidden(VARIANT_BOOL* pvfHidden/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsHidden(void);

  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   Owc10_xp::DscRowsourceTypeEnum Type = {read = get_Type, write = set_Type};
  __property   BSTR            CommandText = {read = get_CommandText};
  __property   Owc10_xp::SchemaFields* SchemaFields = {read = get_SchemaFields};
  __property   Owc10_xp::LookupSchemaRelationships* LookupSchemaRelationships = {read = get_LookupSchemaRelationships};
  __property   Owc10_xp::SublistSchemaRelationships* SublistSchemaRelationships = {read = get_SublistSchemaRelationships};
  __property   Owc10_xp::SchemaParameters* SchemaParameters = {read = get_SchemaParameters};
  __property   Owc10_xp::SchemaProperties* Properties = {read = get_Properties};
  __property   VARIANT_BOOL    IsHidden = {read = get_IsHidden};
};
typedef SchemaRowsourceDispT<SchemaRowsource> SchemaRowsourceDisp;

typedef TComInterface<LookupSchemaRelationships>  TCOMLookupSchemaRelationships;

// *********************************************************************//
// DispIntf:  LookupSchemaRelationships
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AF1-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class LookupSchemaRelationshipsDispT : public TAutoDriver<LookupSchemaRelationships>
{
public:
  LookupSchemaRelationshipsDispT(){}

  LookupSchemaRelationshipsDispT(LookupSchemaRelationships *pintf)
  {
    TAutoDriver<LookupSchemaRelationships>::Bind(pintf, false);
  }

  LookupSchemaRelationshipsDispT(LookupSchemaRelationshipsPtr pintf)
  {
    TAutoDriver<LookupSchemaRelationships>::Bind(pintf, true);
  }

  LookupSchemaRelationshipsDispT& operator=(LookupSchemaRelationships *pintf)
  {
    TAutoDriver<LookupSchemaRelationships>::Bind(pintf, false);
    return *this;
  }

  LookupSchemaRelationshipsDispT& operator=(LookupSchemaRelationshipsPtr pintf)
  {
    TAutoDriver<LookupSchemaRelationships>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT Index/*[in]*/, 
                                                 Owc10_xp::SchemaRelationship** SchemaRelationship/*[out,retval]*/);
  Owc10_xp::SchemaRelationship* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef LookupSchemaRelationshipsDispT<LookupSchemaRelationships> LookupSchemaRelationshipsDisp;

typedef TComInterface<SchemaRelationship>  TCOMSchemaRelationship;

// *********************************************************************//
// DispIntf:  SchemaRelationship
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AEE-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class SchemaRelationshipDispT : public TAutoDriver<SchemaRelationship>
{
public:
  SchemaRelationshipDispT(){}

  SchemaRelationshipDispT(SchemaRelationship *pintf)
  {
    TAutoDriver<SchemaRelationship>::Bind(pintf, false);
  }

  SchemaRelationshipDispT(SchemaRelationshipPtr pintf)
  {
    TAutoDriver<SchemaRelationship>::Bind(pintf, true);
  }

  SchemaRelationshipDispT& operator=(SchemaRelationship *pintf)
  {
    TAutoDriver<SchemaRelationship>::Bind(pintf, false);
    return *this;
  }

  SchemaRelationshipDispT& operator=(SchemaRelationshipPtr pintf)
  {
    TAutoDriver<SchemaRelationship>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ManySide(BSTR* ManySchemaRowsource/*[out,retval]*/);
  BSTR            __fastcall get_ManySide(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OneSide(BSTR* OneSchemaRowsource/*[out,retval]*/);
  BSTR            __fastcall get_OneSide(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SchemaRelatedFields(Owc10_xp::SchemaRelatedFields** SchemaRelatedFields/*[out,retval]*/);
  Owc10_xp::SchemaRelatedFields* __fastcall get_SchemaRelatedFields(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Location(Owc10_xp::DscLocationEnum plocation/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Location(Owc10_xp::DscLocationEnum* plocation/*[out,retval]*/);
  Owc10_xp::DscLocationEnum __fastcall get_Location(void);

  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            ManySide = {read = get_ManySide};
  __property   BSTR            OneSide = {read = get_OneSide};
  __property   Owc10_xp::SchemaRelatedFields* SchemaRelatedFields = {read = get_SchemaRelatedFields};
  __property   Owc10_xp::DscLocationEnum Location = {read = get_Location, write = set_Location};
};
typedef SchemaRelationshipDispT<SchemaRelationship> SchemaRelationshipDisp;

typedef TComInterface<SchemaRelatedFields>  TCOMSchemaRelatedFields;

// *********************************************************************//
// DispIntf:  SchemaRelatedFields
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A6D-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class SchemaRelatedFieldsDispT : public TAutoDriver<SchemaRelatedFields>
{
public:
  SchemaRelatedFieldsDispT(){}

  SchemaRelatedFieldsDispT(SchemaRelatedFields *pintf)
  {
    TAutoDriver<SchemaRelatedFields>::Bind(pintf, false);
  }

  SchemaRelatedFieldsDispT(SchemaRelatedFieldsPtr pintf)
  {
    TAutoDriver<SchemaRelatedFields>::Bind(pintf, true);
  }

  SchemaRelatedFieldsDispT& operator=(SchemaRelatedFields *pintf)
  {
    TAutoDriver<SchemaRelatedFields>::Bind(pintf, false);
    return *this;
  }

  SchemaRelatedFieldsDispT& operator=(SchemaRelatedFieldsPtr pintf)
  {
    TAutoDriver<SchemaRelatedFields>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT Index/*[in]*/, 
                                                 Owc10_xp::SchemaRelatedField** ppSchemaRelatedField/*[out,retval]*/);
  Owc10_xp::SchemaRelatedField* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(BSTR ManySchemaField/*[in]*/, 
                                            BSTR OneSchemaField/*[in]*/, 
                                            Owc10_xp::SchemaRelatedField** SchemaRelatedField/*[out,retval]*/);
  Owc10_xp::SchemaRelatedField* __fastcall Add(BSTR ManySchemaField/*[in]*/, 
                                               BSTR OneSchemaField/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef SchemaRelatedFieldsDispT<SchemaRelatedFields> SchemaRelatedFieldsDisp;

typedef TComInterface<SchemaRelatedField>  TCOMSchemaRelatedField;

// *********************************************************************//
// DispIntf:  SchemaRelatedField
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A6E-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class SchemaRelatedFieldDispT : public TAutoDriver<SchemaRelatedField>
{
public:
  SchemaRelatedFieldDispT(){}

  SchemaRelatedFieldDispT(SchemaRelatedField *pintf)
  {
    TAutoDriver<SchemaRelatedField>::Bind(pintf, false);
  }

  SchemaRelatedFieldDispT(SchemaRelatedFieldPtr pintf)
  {
    TAutoDriver<SchemaRelatedField>::Bind(pintf, true);
  }

  SchemaRelatedFieldDispT& operator=(SchemaRelatedField *pintf)
  {
    TAutoDriver<SchemaRelatedField>::Bind(pintf, false);
    return *this;
  }

  SchemaRelatedFieldDispT& operator=(SchemaRelatedFieldPtr pintf)
  {
    TAutoDriver<SchemaRelatedField>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ManySide(BSTR* ManySchemaField/*[out,retval]*/);
  BSTR            __fastcall get_ManySide(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OneSide(BSTR* OneSchemaField/*[out,retval]*/);
  BSTR            __fastcall get_OneSide(void);

  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            ManySide = {read = get_ManySide};
  __property   BSTR            OneSide = {read = get_OneSide};
};
typedef SchemaRelatedFieldDispT<SchemaRelatedField> SchemaRelatedFieldDisp;

typedef TComInterface<SublistSchemaRelationships>  TCOMSublistSchemaRelationships;

// *********************************************************************//
// DispIntf:  SublistSchemaRelationships
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AF0-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class SublistSchemaRelationshipsDispT : public TAutoDriver<SublistSchemaRelationships>
{
public:
  SublistSchemaRelationshipsDispT(){}

  SublistSchemaRelationshipsDispT(SublistSchemaRelationships *pintf)
  {
    TAutoDriver<SublistSchemaRelationships>::Bind(pintf, false);
  }

  SublistSchemaRelationshipsDispT(SublistSchemaRelationshipsPtr pintf)
  {
    TAutoDriver<SublistSchemaRelationships>::Bind(pintf, true);
  }

  SublistSchemaRelationshipsDispT& operator=(SublistSchemaRelationships *pintf)
  {
    TAutoDriver<SublistSchemaRelationships>::Bind(pintf, false);
    return *this;
  }

  SublistSchemaRelationshipsDispT& operator=(SublistSchemaRelationshipsPtr pintf)
  {
    TAutoDriver<SublistSchemaRelationships>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT Index/*[in]*/, 
                                                 Owc10_xp::SchemaRelationship** SchemaRelationship/*[out,retval]*/);
  Owc10_xp::SchemaRelationship* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef SublistSchemaRelationshipsDispT<SublistSchemaRelationships> SublistSchemaRelationshipsDisp;

typedef TComInterface<SchemaParameters>  TCOMSchemaParameters;

// *********************************************************************//
// DispIntf:  SchemaParameters
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AED-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class SchemaParametersDispT : public TAutoDriver<SchemaParameters>
{
public:
  SchemaParametersDispT(){}

  SchemaParametersDispT(SchemaParameters *pintf)
  {
    TAutoDriver<SchemaParameters>::Bind(pintf, false);
  }

  SchemaParametersDispT(SchemaParametersPtr pintf)
  {
    TAutoDriver<SchemaParameters>::Bind(pintf, true);
  }

  SchemaParametersDispT& operator=(SchemaParameters *pintf)
  {
    TAutoDriver<SchemaParameters>::Bind(pintf, false);
    return *this;
  }

  SchemaParametersDispT& operator=(SchemaParametersPtr pintf)
  {
    TAutoDriver<SchemaParameters>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT Index/*[in]*/, 
                                                 Owc10_xp::SchemaParameter** Parameter/*[out,retval]*/);
  Owc10_xp::SchemaParameter* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(BSTR Name/*[in]*/, VARIANT DataType/*[in,opt]*/, 
                                            VARIANT Size/*[in,opt]*/, VARIANT Scale/*[in,opt]*/, 
                                            VARIANT Precision/*[in,opt]*/, 
                                            VARIANT Direction/*[in,opt]*/, 
                                            Owc10_xp::SchemaParameter** SchemaParameter/*[out,retval]*/);
  Owc10_xp::SchemaParameter* __fastcall Add(BSTR Name/*[in]*/, 
                                            VARIANT DataType/*[in,opt]*/= TNoParam(), 
                                            VARIANT Size/*[in,opt]*/= TNoParam(), 
                                            VARIANT Scale/*[in,opt]*/= TNoParam(), 
                                            VARIANT Precision/*[in,opt]*/= TNoParam(), 
                                            VARIANT Direction/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef SchemaParametersDispT<SchemaParameters> SchemaParametersDisp;

typedef TComInterface<SchemaParameter>  TCOMSchemaParameter;

// *********************************************************************//
// DispIntf:  SchemaParameter
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A89-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class SchemaParameterDispT : public TAutoDriver<SchemaParameter>
{
public:
  SchemaParameterDispT(){}

  SchemaParameterDispT(SchemaParameter *pintf)
  {
    TAutoDriver<SchemaParameter>::Bind(pintf, false);
  }

  SchemaParameterDispT(SchemaParameterPtr pintf)
  {
    TAutoDriver<SchemaParameter>::Bind(pintf, true);
  }

  SchemaParameterDispT& operator=(SchemaParameter *pintf)
  {
    TAutoDriver<SchemaParameter>::Bind(pintf, false);
    return *this;
  }

  SchemaParameterDispT& operator=(SchemaParameterPtr pintf)
  {
    TAutoDriver<SchemaParameter>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NumericScale(long* Scale/*[out,retval]*/);
  long            __fastcall get_NumericScale(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Precision(long* Precision/*[out,retval]*/);
  long            __fastcall get_Precision(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Direction(Adodb_xp::ParameterDirectionEnum* Direction/*[out,retval]*/);
  Adodb_xp::ParameterDirectionEnum __fastcall get_Direction(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DataType(Adodb_xp::DataTypeEnum DataType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DataType(Adodb_xp::DataTypeEnum* DataType/*[out,retval]*/);
  Adodb_xp::DataTypeEnum __fastcall get_DataType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Length(long Length/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Length(long* Length/*[out,retval]*/);
  long            __fastcall get_Length(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IsKey(VARIANT_BOOL IsKey/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsKey(VARIANT_BOOL* IsKey/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsKey(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsRenamed(VARIANT_BOOL* IsRenamed/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsRenamed(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Properties(Owc10_xp::SchemaProperties** SchemaProperties/*[out,retval]*/);
  Owc10_xp::SchemaProperties* __fastcall get_Properties(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsHyperlink(VARIANT_BOOL* IsHyperlink/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsHyperlink(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BaseTableName(BSTR* BaseTableName/*[out,retval]*/);
  BSTR            __fastcall get_BaseTableName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BaseColumnName(BSTR* BaseColumnName/*[out,retval]*/);
  BSTR            __fastcall get_BaseColumnName(void);

  __property   long            NumericScale = {read = get_NumericScale};
  __property   long            Precision = {read = get_Precision};
  __property   Adodb_xp::ParameterDirectionEnum Direction = {read = get_Direction};

  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   Adodb_xp::DataTypeEnum DataType = {read = get_DataType, write = set_DataType};
  __property   long            Length = {read = get_Length, write = set_Length};
  __property   VARIANT_BOOL    IsKey = {read = get_IsKey, write = set_IsKey};
  __property   VARIANT_BOOL    IsRenamed = {read = get_IsRenamed};
  __property   Owc10_xp::SchemaProperties* Properties = {read = get_Properties};
  __property   VARIANT_BOOL    IsHyperlink = {read = get_IsHyperlink};
  __property   BSTR            BaseTableName = {read = get_BaseTableName};
  __property   BSTR            BaseColumnName = {read = get_BaseColumnName};
};
typedef SchemaParameterDispT<SchemaParameter> SchemaParameterDisp;

typedef TComInterface<SchemaDiagrams>  TCOMSchemaDiagrams;

// *********************************************************************//
// DispIntf:  SchemaDiagrams
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {30C37028-25CD-11D4-8D9D-00500483860C}
// *********************************************************************//
template<class T>
class SchemaDiagramsDispT : public TAutoDriver<SchemaDiagrams>
{
public:
  SchemaDiagramsDispT(){}

  SchemaDiagramsDispT(SchemaDiagrams *pintf)
  {
    TAutoDriver<SchemaDiagrams>::Bind(pintf, false);
  }

  SchemaDiagramsDispT(SchemaDiagramsPtr pintf)
  {
    TAutoDriver<SchemaDiagrams>::Bind(pintf, true);
  }

  SchemaDiagramsDispT& operator=(SchemaDiagrams *pintf)
  {
    TAutoDriver<SchemaDiagrams>::Bind(pintf, false);
    return *this;
  }

  SchemaDiagramsDispT& operator=(SchemaDiagramsPtr pintf)
  {
    TAutoDriver<SchemaDiagrams>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT Index/*[in]*/, 
                                                 Owc10_xp::SchemaDiagram** SchemaDiagram/*[out,retval]*/);
  Owc10_xp::SchemaDiagram* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef SchemaDiagramsDispT<SchemaDiagrams> SchemaDiagramsDisp;

typedef TComInterface<SchemaRelationships>  TCOMSchemaRelationships;

// *********************************************************************//
// DispIntf:  SchemaRelationships
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A6C-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class SchemaRelationshipsDispT : public TAutoDriver<SchemaRelationships>
{
public:
  SchemaRelationshipsDispT(){}

  SchemaRelationshipsDispT(SchemaRelationships *pintf)
  {
    TAutoDriver<SchemaRelationships>::Bind(pintf, false);
  }

  SchemaRelationshipsDispT(SchemaRelationshipsPtr pintf)
  {
    TAutoDriver<SchemaRelationships>::Bind(pintf, true);
  }

  SchemaRelationshipsDispT& operator=(SchemaRelationships *pintf)
  {
    TAutoDriver<SchemaRelationships>::Bind(pintf, false);
    return *this;
  }

  SchemaRelationshipsDispT& operator=(SchemaRelationshipsPtr pintf)
  {
    TAutoDriver<SchemaRelationships>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT Index/*[in]*/, 
                                                 Owc10_xp::SchemaRelationship** SchemaRelationship/*[out,retval]*/);
  Owc10_xp::SchemaRelationship* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(BSTR Name/*[in]*/, BSTR ManySchemaRowsource/*[in]*/, 
                                            BSTR OneSchemaRowsource/*[in]*/, 
                                            BSTR ManySchemaField/*[in]*/, 
                                            BSTR OneSchemaField/*[in]*/, 
                                            Owc10_xp::SchemaRelationship** SchemaRelationship/*[out,retval]*/);
  Owc10_xp::SchemaRelationship* __fastcall Add(BSTR Name/*[in]*/, BSTR ManySchemaRowsource/*[in]*/, 
                                               BSTR OneSchemaRowsource/*[in]*/, 
                                               BSTR ManySchemaField/*[in]*/, 
                                               BSTR OneSchemaField/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddNew(BSTR Name/*[in]*/, BSTR ManySchemaRowsource/*[in]*/, 
                                               BSTR OneSchemaRowsource/*[in]*/, 
                                               BSTR ManySchemaField/*[in]*/, 
                                               BSTR OneSchemaField/*[in]*/, 
                                               Owc10_xp::SchemaRelationship** SchemaRelationship/*[out,retval]*/);
  Owc10_xp::SchemaRelationship* __fastcall AddNew(BSTR Name/*[in]*/, 
                                                  BSTR ManySchemaRowsource/*[in]*/, 
                                                  BSTR OneSchemaRowsource/*[in]*/, 
                                                  BSTR ManySchemaField/*[in]*/, 
                                                  BSTR OneSchemaField/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef SchemaRelationshipsDispT<SchemaRelationships> SchemaRelationshipsDisp;

typedef TComInterface<PageRowsources>  TCOMPageRowsources;

// *********************************************************************//
// DispIntf:  PageRowsources
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AA5-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class PageRowsourcesDispT : public TAutoDriver<PageRowsources>
{
public:
  PageRowsourcesDispT(){}

  PageRowsourcesDispT(PageRowsources *pintf)
  {
    TAutoDriver<PageRowsources>::Bind(pintf, false);
  }

  PageRowsourcesDispT(PageRowsourcesPtr pintf)
  {
    TAutoDriver<PageRowsources>::Bind(pintf, true);
  }

  PageRowsourcesDispT& operator=(PageRowsources *pintf)
  {
    TAutoDriver<PageRowsources>::Bind(pintf, false);
    return *this;
  }

  PageRowsourcesDispT& operator=(PageRowsourcesPtr pintf)
  {
    TAutoDriver<PageRowsources>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT Index/*[in]*/, 
                                                 Owc10_xp::PageRowsource** PageRowsource/*[out,retval]*/);
  Owc10_xp::PageRowsource* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef PageRowsourcesDispT<PageRowsources> PageRowsourcesDisp;

typedef TComInterface<PageRowsource>  TCOMPageRowsource;

// *********************************************************************//
// DispIntf:  PageRowsource
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A9F-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class PageRowsourceDispT : public TAutoDriver<PageRowsource>
{
public:
  PageRowsourceDispT(){}

  PageRowsourceDispT(PageRowsource *pintf)
  {
    TAutoDriver<PageRowsource>::Bind(pintf, false);
  }

  PageRowsourceDispT(PageRowsourcePtr pintf)
  {
    TAutoDriver<PageRowsource>::Bind(pintf, true);
  }

  PageRowsourceDispT& operator=(PageRowsource *pintf)
  {
    TAutoDriver<PageRowsource>::Bind(pintf, false);
    return *this;
  }

  PageRowsourceDispT& operator=(PageRowsourcePtr pintf)
  {
    TAutoDriver<PageRowsource>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Source(BSTR Source/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Source(BSTR* Source/*[out,retval]*/);
  BSTR            __fastcall get_Source(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RecordsetDef(Owc10_xp::RecordsetDef** RecordsetDef/*[out,retval]*/);
  Owc10_xp::RecordsetDef* __fastcall get_RecordsetDef(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PageFields(Owc10_xp::PageFields** PageFields/*[out,retval]*/);
  Owc10_xp::PageFields* __fastcall get_PageFields(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LookupRelationships(Owc10_xp::LookupRelationships** LookupRelationships/*[out,retval]*/);
  Owc10_xp::LookupRelationships* __fastcall get_LookupRelationships(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Promote(Owc10_xp::RecordsetDef** RecordsetDef/*[out,retval]*/);
  Owc10_xp::RecordsetDef* __fastcall Promote(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IsBound(VARIANT_BOOL* IsBound/*[out,retval]*/);
  VARIANT_BOOL    __fastcall IsBound(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();

  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Source = {read = get_Source, write = set_Source};
  __property   Owc10_xp::RecordsetDef* RecordsetDef = {read = get_RecordsetDef};
  __property   Owc10_xp::PageFields* PageFields = {read = get_PageFields};
  __property   Owc10_xp::LookupRelationships* LookupRelationships = {read = get_LookupRelationships};
};
typedef PageRowsourceDispT<PageRowsource> PageRowsourceDisp;

typedef TComInterface<RecordsetDef>  TCOMRecordsetDef;

// *********************************************************************//
// DispIntf:  RecordsetDef
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A9D-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class RecordsetDefDispT : public TAutoDriver<RecordsetDef>
{
public:
  RecordsetDefDispT(){}

  RecordsetDefDispT(RecordsetDef *pintf)
  {
    TAutoDriver<RecordsetDef>::Bind(pintf, false);
  }

  RecordsetDefDispT(RecordsetDefPtr pintf)
  {
    TAutoDriver<RecordsetDef>::Bind(pintf, true);
  }

  RecordsetDefDispT& operator=(RecordsetDef *pintf)
  {
    TAutoDriver<RecordsetDef>::Bind(pintf, false);
    return *this;
  }

  RecordsetDefDispT& operator=(RecordsetDefPtr pintf)
  {
    TAutoDriver<RecordsetDef>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShapeText(Owc10_xp::DscFetchTypeEnum FetchType/*[in,def,opt]*/
                                                      , BSTR* ShapeText/*[out,retval]*/);
  BSTR            __fastcall get_ShapeText(Owc10_xp::DscFetchTypeEnum FetchType/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CommandText(BSTR* CommandText/*[out,retval]*/);
  BSTR            __fastcall get_CommandText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DataEntry(VARIANT_BOOL DataEntry/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DataEntry(VARIANT_BOOL* DataEntry/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DataEntry(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ServerFilter(BSTR ServerFilter/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ServerFilter(BSTR* ServerFilter/*[out,retval]*/);
  BSTR            __fastcall get_ServerFilter(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PrimaryPageRowsource(Owc10_xp::PageRowsource** PageRowsource/*[out,retval]*/);
  Owc10_xp::PageRowsource* __fastcall get_PrimaryPageRowsource(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SublistRelationships(Owc10_xp::SublistRelationships** SublistRelationships/*[out,retval]*/);
  Owc10_xp::SublistRelationships* __fastcall get_SublistRelationships(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PageFields(Owc10_xp::PageFields** PageFields/*[out,retval]*/);
  Owc10_xp::PageFields* __fastcall get_PageFields(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ParentRecordsetDef(Owc10_xp::RecordsetDef** RecordsetDef/*[out,retval]*/);
  Owc10_xp::RecordsetDef* __fastcall get_ParentRecordsetDef(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Demote(Owc10_xp::RecordsetDef** RecordsetDef/*[out,retval]*/);
  Owc10_xp::RecordsetDef* __fastcall Demote(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupingDefs(Owc10_xp::GroupingDefs** GroupingDefs/*[out,retval]*/);
  Owc10_xp::GroupingDefs* __fastcall get_GroupingDefs(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ParameterValues(Owc10_xp::ParameterValues** ParameterValues/*[out,retval]*/);
  Owc10_xp::ParameterValues* __fastcall get_ParameterValues(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PageRowsources(Owc10_xp::PageRowsources** PageRowsources/*[out,retval]*/);
  Owc10_xp::PageRowsources* __fastcall get_PageRowsources(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_UniqueTable(BSTR TableName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_UniqueTable(BSTR* TableName/*[out,retval]*/);
  BSTR            __fastcall get_UniqueTable(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ResyncCommand(BSTR Command/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ResyncCommand(BSTR* Command/*[out,retval]*/);
  BSTR            __fastcall get_ResyncCommand(void);

  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            CommandText = {read = get_CommandText};
  __property   VARIANT_BOOL    DataEntry = {read = get_DataEntry, write = set_DataEntry};
  __property   BSTR            ServerFilter = {read = get_ServerFilter, write = set_ServerFilter};
  __property   Owc10_xp::PageRowsource* PrimaryPageRowsource = {read = get_PrimaryPageRowsource};
  __property   Owc10_xp::SublistRelationships* SublistRelationships = {read = get_SublistRelationships};
  __property   Owc10_xp::PageFields* PageFields = {read = get_PageFields};
  __property   Owc10_xp::RecordsetDef* ParentRecordsetDef = {read = get_ParentRecordsetDef};
  __property   Owc10_xp::GroupingDefs* GroupingDefs = {read = get_GroupingDefs};
  __property   Owc10_xp::ParameterValues* ParameterValues = {read = get_ParameterValues};
  __property   Owc10_xp::PageRowsources* PageRowsources = {read = get_PageRowsources};
  __property   BSTR            UniqueTable = {read = get_UniqueTable, write = set_UniqueTable};
  __property   BSTR            ResyncCommand = {read = get_ResyncCommand, write = set_ResyncCommand};
};
typedef RecordsetDefDispT<RecordsetDef> RecordsetDefDisp;

typedef TComInterface<SublistRelationships>  TCOMSublistRelationships;

// *********************************************************************//
// DispIntf:  SublistRelationships
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AE1-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class SublistRelationshipsDispT : public TAutoDriver<SublistRelationships>
{
public:
  SublistRelationshipsDispT(){}

  SublistRelationshipsDispT(SublistRelationships *pintf)
  {
    TAutoDriver<SublistRelationships>::Bind(pintf, false);
  }

  SublistRelationshipsDispT(SublistRelationshipsPtr pintf)
  {
    TAutoDriver<SublistRelationships>::Bind(pintf, true);
  }

  SublistRelationshipsDispT& operator=(SublistRelationships *pintf)
  {
    TAutoDriver<SublistRelationships>::Bind(pintf, false);
    return *this;
  }

  SublistRelationshipsDispT& operator=(SublistRelationshipsPtr pintf)
  {
    TAutoDriver<SublistRelationships>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT Index/*[in]*/, 
                                                 Owc10_xp::PageRelationship** PageRelationship/*[out,retval]*/);
  Owc10_xp::PageRelationship* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(Owc10_xp::PageRowsource* PageRowsource/*[in]*/, 
                                            Owc10_xp::SchemaRelationship* SchemaRelationship/*[in]*/
                                            , 
                                            Owc10_xp::PageRelationship** PageRelationship/*[out,retval]*/);
  Owc10_xp::PageRelationship* __fastcall Add(Owc10_xp::PageRowsource* PageRowsource/*[in]*/, 
                                             Owc10_xp::SchemaRelationship* SchemaRelationship/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef SublistRelationshipsDispT<SublistRelationships> SublistRelationshipsDisp;

typedef TComInterface<PageRelationship>  TCOMPageRelationship;

// *********************************************************************//
// DispIntf:  PageRelationship
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A6B-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class PageRelationshipDispT : public TAutoDriver<PageRelationship>
{
public:
  PageRelationshipDispT(){}

  PageRelationshipDispT(PageRelationship *pintf)
  {
    TAutoDriver<PageRelationship>::Bind(pintf, false);
  }

  PageRelationshipDispT(PageRelationshipPtr pintf)
  {
    TAutoDriver<PageRelationship>::Bind(pintf, true);
  }

  PageRelationshipDispT& operator=(PageRelationship *pintf)
  {
    TAutoDriver<PageRelationship>::Bind(pintf, false);
    return *this;
  }

  PageRelationshipDispT& operator=(PageRelationshipPtr pintf)
  {
    TAutoDriver<PageRelationship>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Owc10_xp::DscPageRelTypeEnum* Reltype/*[out,retval]*/);
  Owc10_xp::DscPageRelTypeEnum __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_JoinType(Owc10_xp::DscJoinTypeEnum JoinType);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_JoinType(Owc10_xp::DscJoinTypeEnum* JoinType/*[out,retval]*/);
  Owc10_xp::DscJoinTypeEnum __fastcall get_JoinType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ManySide(Owc10_xp::PageRowsource** PageRowsource/*[out,retval]*/);
  Owc10_xp::PageRowsource* __fastcall get_ManySide(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OneSide(Owc10_xp::PageRowsource** PageRowsource/*[out,retval]*/);
  Owc10_xp::PageRowsource* __fastcall get_OneSide(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PageRelatedFields(Owc10_xp::PageRelatedFields** PageRelatedFields/*[out,retval]*/);
  Owc10_xp::PageRelatedFields* __fastcall get_PageRelatedFields(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();

  __property   BSTR            Name = {read = get_Name};
  __property   Owc10_xp::DscPageRelTypeEnum Type = {read = get_Type};
  __property   Owc10_xp::DscJoinTypeEnum JoinType = {read = get_JoinType, write = set_JoinType};
  __property   Owc10_xp::PageRowsource* ManySide = {read = get_ManySide};
  __property   Owc10_xp::PageRowsource* OneSide = {read = get_OneSide};
  __property   Owc10_xp::PageRelatedFields* PageRelatedFields = {read = get_PageRelatedFields};
};
typedef PageRelationshipDispT<PageRelationship> PageRelationshipDisp;

typedef TComInterface<PageRelatedFields>  TCOMPageRelatedFields;

// *********************************************************************//
// DispIntf:  PageRelatedFields
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A6F-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class PageRelatedFieldsDispT : public TAutoDriver<PageRelatedFields>
{
public:
  PageRelatedFieldsDispT(){}

  PageRelatedFieldsDispT(PageRelatedFields *pintf)
  {
    TAutoDriver<PageRelatedFields>::Bind(pintf, false);
  }

  PageRelatedFieldsDispT(PageRelatedFieldsPtr pintf)
  {
    TAutoDriver<PageRelatedFields>::Bind(pintf, true);
  }

  PageRelatedFieldsDispT& operator=(PageRelatedFields *pintf)
  {
    TAutoDriver<PageRelatedFields>::Bind(pintf, false);
    return *this;
  }

  PageRelatedFieldsDispT& operator=(PageRelatedFieldsPtr pintf)
  {
    TAutoDriver<PageRelatedFields>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT Index/*[in]*/, 
                                                 Owc10_xp::PageRelatedField** PageRelatedField/*[out,retval]*/);
  Owc10_xp::PageRelatedField* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef PageRelatedFieldsDispT<PageRelatedFields> PageRelatedFieldsDisp;

typedef TComInterface<PageRelatedField>  TCOMPageRelatedField;

// *********************************************************************//
// DispIntf:  PageRelatedField
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A70-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class PageRelatedFieldDispT : public TAutoDriver<PageRelatedField>
{
public:
  PageRelatedFieldDispT(){}

  PageRelatedFieldDispT(PageRelatedField *pintf)
  {
    TAutoDriver<PageRelatedField>::Bind(pintf, false);
  }

  PageRelatedFieldDispT(PageRelatedFieldPtr pintf)
  {
    TAutoDriver<PageRelatedField>::Bind(pintf, true);
  }

  PageRelatedFieldDispT& operator=(PageRelatedField *pintf)
  {
    TAutoDriver<PageRelatedField>::Bind(pintf, false);
    return *this;
  }

  PageRelatedFieldDispT& operator=(PageRelatedFieldPtr pintf)
  {
    TAutoDriver<PageRelatedField>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ManySide(Owc10_xp::PageField** PageField/*[out,retval]*/);
  Owc10_xp::PageField* __fastcall get_ManySide(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OneSide(Owc10_xp::PageField** PageField/*[out,retval]*/);
  Owc10_xp::PageField* __fastcall get_OneSide(void);

  __property   Owc10_xp::PageField* ManySide = {read = get_ManySide};
  __property   Owc10_xp::PageField* OneSide = {read = get_OneSide};
};
typedef PageRelatedFieldDispT<PageRelatedField> PageRelatedFieldDisp;

typedef TComInterface<PageField>  TCOMPageField;

// *********************************************************************//
// DispIntf:  PageField
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AC7-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class PageFieldDispT : public TAutoDriver<PageField>
{
public:
  PageFieldDispT(){}

  PageFieldDispT(PageField *pintf)
  {
    TAutoDriver<PageField>::Bind(pintf, false);
  }

  PageFieldDispT(PageFieldPtr pintf)
  {
    TAutoDriver<PageField>::Bind(pintf, true);
  }

  PageFieldDispT& operator=(PageField *pintf)
  {
    TAutoDriver<PageField>::Bind(pintf, false);
    return *this;
  }

  PageFieldDispT& operator=(PageFieldPtr pintf)
  {
    TAutoDriver<PageField>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FieldType(Owc10_xp::DscFieldTypeEnum* FieldType/*[out,retval]*/);
  Owc10_xp::DscFieldTypeEnum __fastcall get_FieldType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TotalType(Owc10_xp::DscTotalTypeEnum TotalType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TotalType(Owc10_xp::DscTotalTypeEnum* TotalType/*[out,retval]*/);
  Owc10_xp::DscTotalTypeEnum __fastcall get_TotalType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GroupOn(Owc10_xp::DscGroupOnEnum GroupOn/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupOn(Owc10_xp::DscGroupOnEnum* GroupOn/*[out,retval]*/);
  Owc10_xp::DscGroupOnEnum __fastcall get_GroupOn(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GroupInterval(double Interval/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupInterval(double* Interval/*[out,retval]*/);
  double          __fastcall get_GroupInterval(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PageRowsource(Owc10_xp::PageRowsource** PageRowsource/*[out,retval]*/);
  Owc10_xp::PageRowsource* __fastcall get_PageRowsource(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RecordsetDef(Owc10_xp::RecordsetDef** RecordsetDef/*[out,retval]*/);
  Owc10_xp::RecordsetDef* __fastcall get_RecordsetDef(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall MoveGrouping(BSTR GroupingDefDest/*[in]*/, 
                                                     VARIANT Index/*[in,opt]*/, 
                                                     Owc10_xp::GroupingDef** GroupingDef/*[out,retval]*/);
  Owc10_xp::GroupingDef* __fastcall MoveGrouping(BSTR GroupingDefDest/*[in]*/, 
                                                 VARIANT Index/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Location(Owc10_xp::DscLocationEnum Location/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Location(Owc10_xp::DscLocationEnum* Location/*[out,retval]*/);
  Owc10_xp::DscLocationEnum __fastcall get_Location(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Source(BSTR Source/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Source(BSTR* Source/*[out,retval]*/);
  BSTR            __fastcall get_Source(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DataType(Adodb_xp::DataTypeEnum* DataType/*[out,retval]*/);
  Adodb_xp::DataTypeEnum __fastcall get_DataType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Length(long* Length/*[out,retval]*/);
  long            __fastcall get_Length(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SchemaField(Owc10_xp::SchemaField** SchemaField/*[out,retval]*/);
  Owc10_xp::SchemaField* __fastcall get_SchemaField(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IsBound(VARIANT_BOOL* IsBound/*[out,retval]*/);
  VARIANT_BOOL    __fastcall IsBound(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ValidateTotalType(Owc10_xp::DscTotalTypeEnum TotalType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DefaultName(BSTR* DefaultName/*[out,retval]*/);
  BSTR            __fastcall DefaultName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DefaultCaption(BSTR* DefaultCaption/*[out,retval]*/);
  BSTR            __fastcall DefaultCaption(void);

  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   Owc10_xp::DscFieldTypeEnum FieldType = {read = get_FieldType};
  __property   Owc10_xp::DscTotalTypeEnum TotalType = {read = get_TotalType, write = set_TotalType};
  __property   Owc10_xp::DscGroupOnEnum GroupOn = {read = get_GroupOn, write = set_GroupOn};
  __property   double          GroupInterval = {read = get_GroupInterval, write = set_GroupInterval};
  __property   Owc10_xp::PageRowsource* PageRowsource = {read = get_PageRowsource};
  __property   Owc10_xp::RecordsetDef* RecordsetDef = {read = get_RecordsetDef};
  __property   Owc10_xp::DscLocationEnum Location = {read = get_Location, write = set_Location};
  __property   BSTR            Source = {read = get_Source, write = set_Source};
  __property   Adodb_xp::DataTypeEnum DataType = {read = get_DataType};
  __property   long            Length = {read = get_Length};
  __property   Owc10_xp::SchemaField* SchemaField = {read = get_SchemaField};
};
typedef PageFieldDispT<PageField> PageFieldDisp;

typedef TComInterface<GroupingDef>  TCOMGroupingDef;

// *********************************************************************//
// DispIntf:  GroupingDef
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A7B-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class GroupingDefDispT : public TAutoDriver<GroupingDef>
{
public:
  GroupingDefDispT(){}

  GroupingDefDispT(GroupingDef *pintf)
  {
    TAutoDriver<GroupingDef>::Bind(pintf, false);
  }

  GroupingDefDispT(GroupingDefPtr pintf)
  {
    TAutoDriver<GroupingDef>::Bind(pintf, true);
  }

  GroupingDefDispT& operator=(GroupingDef *pintf)
  {
    TAutoDriver<GroupingDef>::Bind(pintf, false);
    return *this;
  }

  GroupingDefDispT& operator=(GroupingDefPtr pintf)
  {
    TAutoDriver<GroupingDef>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PageFields(Owc10_xp::PageFields** PageFields/*[out,retval]*/);
  Owc10_xp::PageFields* __fastcall get_PageFields(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();

  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   Owc10_xp::PageFields* PageFields = {read = get_PageFields};
};
typedef GroupingDefDispT<GroupingDef> GroupingDefDisp;

typedef TComInterface<PageFields>  TCOMPageFields;

// *********************************************************************//
// DispIntf:  PageFields
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AB1-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class PageFieldsDispT : public TAutoDriver<PageFields>
{
public:
  PageFieldsDispT(){}

  PageFieldsDispT(PageFields *pintf)
  {
    TAutoDriver<PageFields>::Bind(pintf, false);
  }

  PageFieldsDispT(PageFieldsPtr pintf)
  {
    TAutoDriver<PageFields>::Bind(pintf, true);
  }

  PageFieldsDispT& operator=(PageFields *pintf)
  {
    TAutoDriver<PageFields>::Bind(pintf, false);
    return *this;
  }

  PageFieldsDispT& operator=(PageFieldsPtr pintf)
  {
    TAutoDriver<PageFields>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT Index/*[in]*/, 
                                                 Owc10_xp::PageField** PageField/*[out,retval]*/);
  Owc10_xp::PageField* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(VARIANT Source/*[in]*/, VARIANT FieldType/*[in,opt]*/, 
                                            VARIANT Name/*[in,opt]*/, 
                                            Owc10_xp::DscTotalTypeEnum TotalType/*[in,def,opt]*/, 
                                            VARIANT Index/*[in,opt]*/, 
                                            Owc10_xp::PageField** PageField/*[out,retval]*/);
  Owc10_xp::PageField* __fastcall Add(VARIANT Source/*[in]*/, VARIANT FieldType/*[in,opt]*/, 
                                      VARIANT Name/*[in,opt]*/, 
                                      Owc10_xp::DscTotalTypeEnum TotalType/*[in,def,opt]*/, 
                                      VARIANT Index/*[in,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddBroken(VARIANT Source/*[in]*/, 
                                                  VARIANT FieldType/*[in,opt]*/, 
                                                  VARIANT Name/*[in,opt]*/, 
                                                  Owc10_xp::DscTotalTypeEnum TotalType/*[in,def,opt]*/
                                                  , VARIANT Index/*[in,opt]*/, 
                                                  Owc10_xp::PageField** PageField/*[out,retval]*/);
  Owc10_xp::PageField* __fastcall AddBroken(VARIANT Source/*[in]*/, VARIANT FieldType/*[in,opt]*/, 
                                            VARIANT Name/*[in,opt]*/, 
                                            Owc10_xp::DscTotalTypeEnum TotalType/*[in,def,opt]*/, 
                                            VARIANT Index/*[in,opt]*/);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef PageFieldsDispT<PageFields> PageFieldsDisp;

typedef TComInterface<GroupingDefs>  TCOMGroupingDefs;

// *********************************************************************//
// DispIntf:  GroupingDefs
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A7C-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class GroupingDefsDispT : public TAutoDriver<GroupingDefs>
{
public:
  GroupingDefsDispT(){}

  GroupingDefsDispT(GroupingDefs *pintf)
  {
    TAutoDriver<GroupingDefs>::Bind(pintf, false);
  }

  GroupingDefsDispT(GroupingDefsPtr pintf)
  {
    TAutoDriver<GroupingDefs>::Bind(pintf, true);
  }

  GroupingDefsDispT& operator=(GroupingDefs *pintf)
  {
    TAutoDriver<GroupingDefs>::Bind(pintf, false);
    return *this;
  }

  GroupingDefsDispT& operator=(GroupingDefsPtr pintf)
  {
    TAutoDriver<GroupingDefs>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT Index/*[in]*/, 
                                                 Owc10_xp::GroupingDef** GroupingDef/*[out,retval]*/);
  Owc10_xp::GroupingDef* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(BSTR GroupingDefName/*[in]*/, 
                                            BSTR GroupingFieldName/*[in]*/, 
                                            BSTR PageFieldName/*[in]*/, VARIANT Index/*[in,opt]*/, 
                                            Owc10_xp::GroupingDef** GroupingDef/*[out,retval]*/);
  Owc10_xp::GroupingDef* __fastcall Add(BSTR GroupingDefName/*[in]*/, BSTR GroupingFieldName/*[in]*/, 
                                        BSTR PageFieldName/*[in]*/, 
                                        VARIANT Index/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddTotal(BSTR GroupingDefName/*[in]*/, 
                                                 BSTR GroupingFieldName/*[in]*/, 
                                                 BSTR PageFieldName/*[in]*/, 
                                                 Owc10_xp::DscTotalTypeEnum TotalType/*[in]*/, 
                                                 VARIANT Index/*[in,opt]*/, 
                                                 Owc10_xp::GroupingDef** GroupingDef/*[out,retval]*/);
  Owc10_xp::GroupingDef* __fastcall AddTotal(BSTR GroupingDefName/*[in]*/, 
                                             BSTR GroupingFieldName/*[in]*/, 
                                             BSTR PageFieldName/*[in]*/, 
                                             Owc10_xp::DscTotalTypeEnum TotalType/*[in]*/, 
                                             VARIANT Index/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef GroupingDefsDispT<GroupingDefs> GroupingDefsDisp;

typedef TComInterface<ParameterValues>  TCOMParameterValues;

// *********************************************************************//
// DispIntf:  ParameterValues
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AFF-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class ParameterValuesDispT : public TAutoDriver<ParameterValues>
{
public:
  ParameterValuesDispT(){}

  ParameterValuesDispT(ParameterValues *pintf)
  {
    TAutoDriver<ParameterValues>::Bind(pintf, false);
  }

  ParameterValuesDispT(ParameterValuesPtr pintf)
  {
    TAutoDriver<ParameterValues>::Bind(pintf, true);
  }

  ParameterValuesDispT& operator=(ParameterValues *pintf)
  {
    TAutoDriver<ParameterValues>::Bind(pintf, false);
    return *this;
  }

  ParameterValuesDispT& operator=(ParameterValuesPtr pintf)
  {
    TAutoDriver<ParameterValues>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT Index/*[in]*/, 
                                                 Owc10_xp::ParameterValue** ParameterValue/*[out,retval]*/);
  Owc10_xp::ParameterValue* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(BSTR ParameterName/*[in]*/, VARIANT Value/*[in,opt]*/, 
                                            Owc10_xp::ParameterValue** ppPV/*[out,retval]*/);
  Owc10_xp::ParameterValue* __fastcall Add(BSTR ParameterName/*[in]*/, 
                                           VARIANT Value/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef ParameterValuesDispT<ParameterValues> ParameterValuesDisp;

typedef TComInterface<ParameterValue>  TCOMParameterValue;

// *********************************************************************//
// DispIntf:  ParameterValue
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B0F-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class ParameterValueDispT : public TAutoDriver<ParameterValue>
{
public:
  ParameterValueDispT(){}

  ParameterValueDispT(ParameterValue *pintf)
  {
    TAutoDriver<ParameterValue>::Bind(pintf, false);
  }

  ParameterValueDispT(ParameterValuePtr pintf)
  {
    TAutoDriver<ParameterValue>::Bind(pintf, true);
  }

  ParameterValueDispT& operator=(ParameterValue *pintf)
  {
    TAutoDriver<ParameterValue>::Bind(pintf, false);
    return *this;
  }

  ParameterValueDispT& operator=(ParameterValuePtr pintf)
  {
    TAutoDriver<ParameterValue>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Expression(BSTR* Expression/*[out,retval]*/);
  BSTR            __fastcall get_Expression(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Expression(BSTR Expression/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(VARIANT Value/*[in]*/);

  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Expression = {read = get_Expression};
};
typedef ParameterValueDispT<ParameterValue> ParameterValueDisp;

typedef TComInterface<LookupRelationships>  TCOMLookupRelationships;

// *********************************************************************//
// DispIntf:  LookupRelationships
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A74-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class LookupRelationshipsDispT : public TAutoDriver<LookupRelationships>
{
public:
  LookupRelationshipsDispT(){}

  LookupRelationshipsDispT(LookupRelationships *pintf)
  {
    TAutoDriver<LookupRelationships>::Bind(pintf, false);
  }

  LookupRelationshipsDispT(LookupRelationshipsPtr pintf)
  {
    TAutoDriver<LookupRelationships>::Bind(pintf, true);
  }

  LookupRelationshipsDispT& operator=(LookupRelationships *pintf)
  {
    TAutoDriver<LookupRelationships>::Bind(pintf, false);
    return *this;
  }

  LookupRelationshipsDispT& operator=(LookupRelationshipsPtr pintf)
  {
    TAutoDriver<LookupRelationships>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT Index/*[in]*/, 
                                                 Owc10_xp::PageRelationship** PageRelationship/*[out,retval]*/);
  Owc10_xp::PageRelationship* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(Owc10_xp::PageRowsource* PageRowsource/*[in]*/, 
                                            Owc10_xp::SchemaRelationship* SchemaRelationship/*[in]*/
                                            , 
                                            Owc10_xp::PageRelationship** PageRelationship/*[out,retval]*/);
  Owc10_xp::PageRelationship* __fastcall Add(Owc10_xp::PageRowsource* PageRowsource/*[in]*/, 
                                             Owc10_xp::SchemaRelationship* SchemaRelationship/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef LookupRelationshipsDispT<LookupRelationships> LookupRelationshipsDisp;

typedef TComInterface<RecordsetDefs>  TCOMRecordsetDefs;

// *********************************************************************//
// DispIntf:  RecordsetDefs
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AA2-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class RecordsetDefsDispT : public TAutoDriver<RecordsetDefs>
{
public:
  RecordsetDefsDispT(){}

  RecordsetDefsDispT(RecordsetDefs *pintf)
  {
    TAutoDriver<RecordsetDefs>::Bind(pintf, false);
  }

  RecordsetDefsDispT(RecordsetDefsPtr pintf)
  {
    TAutoDriver<RecordsetDefs>::Bind(pintf, true);
  }

  RecordsetDefsDispT& operator=(RecordsetDefs *pintf)
  {
    TAutoDriver<RecordsetDefs>::Bind(pintf, false);
    return *this;
  }

  RecordsetDefsDispT& operator=(RecordsetDefsPtr pintf)
  {
    TAutoDriver<RecordsetDefs>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT Index/*[in]*/, 
                                                 Owc10_xp::RecordsetDef** RecordsetDef/*[out,retval]*/);
  Owc10_xp::RecordsetDef* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(VARIANT SchemaRowsource/*[in]*/, 
                                            VARIANT Name/*[in,opt]*/, 
                                            Owc10_xp::RecordsetDef** RecordsetDef/*[out,retval]*/);
  Owc10_xp::RecordsetDef* __fastcall Add(VARIANT SchemaRowsource/*[in]*/, 
                                         VARIANT Name/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddNew(BSTR Source/*[in]*/, 
                                               VARIANT RowsourceType/*[in,opt]*/, 
                                               VARIANT Name/*[in,opt]*/, 
                                               Owc10_xp::RecordsetDef** RecordsetDef/*[out,retval]*/);
  Owc10_xp::RecordsetDef* __fastcall AddNew(BSTR Source/*[in]*/, 
                                            VARIANT RowsourceType/*[in,opt]*/= TNoParam(), 
                                            VARIANT Name/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef RecordsetDefsDispT<RecordsetDefs> RecordsetDefsDisp;

typedef TComInterface<AllPageFields>  TCOMAllPageFields;

// *********************************************************************//
// DispIntf:  AllPageFields
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B45-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class AllPageFieldsDispT : public TAutoDriver<AllPageFields>
{
public:
  AllPageFieldsDispT(){}

  AllPageFieldsDispT(AllPageFields *pintf)
  {
    TAutoDriver<AllPageFields>::Bind(pintf, false);
  }

  AllPageFieldsDispT(AllPageFieldsPtr pintf)
  {
    TAutoDriver<AllPageFields>::Bind(pintf, true);
  }

  AllPageFieldsDispT& operator=(AllPageFields *pintf)
  {
    TAutoDriver<AllPageFields>::Bind(pintf, false);
    return *this;
  }

  AllPageFieldsDispT& operator=(AllPageFieldsPtr pintf)
  {
    TAutoDriver<AllPageFields>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT Index/*[in]*/, 
                                                 Owc10_xp::PageField** PageField/*[out,retval]*/);
  Owc10_xp::PageField* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef AllPageFieldsDispT<AllPageFields> AllPageFieldsDisp;

typedef TComInterface<AllGroupingDefs>  TCOMAllGroupingDefs;

// *********************************************************************//
// DispIntf:  AllGroupingDefs
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AF9-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class AllGroupingDefsDispT : public TAutoDriver<AllGroupingDefs>
{
public:
  AllGroupingDefsDispT(){}

  AllGroupingDefsDispT(AllGroupingDefs *pintf)
  {
    TAutoDriver<AllGroupingDefs>::Bind(pintf, false);
  }

  AllGroupingDefsDispT(AllGroupingDefsPtr pintf)
  {
    TAutoDriver<AllGroupingDefs>::Bind(pintf, true);
  }

  AllGroupingDefsDispT& operator=(AllGroupingDefs *pintf)
  {
    TAutoDriver<AllGroupingDefs>::Bind(pintf, false);
    return *this;
  }

  AllGroupingDefsDispT& operator=(AllGroupingDefsPtr pintf)
  {
    TAutoDriver<AllGroupingDefs>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT Index/*[in]*/, 
                                                 Owc10_xp::GroupingDef** GroupingDef/*[out,retval]*/);
  Owc10_xp::GroupingDef* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef AllGroupingDefsDispT<AllGroupingDefs> AllGroupingDefsDisp;

typedef TComInterface<IDARef>  TCOMIDARef;

// *********************************************************************//
// DispIntf:  IDARef
// Flags:     (5072) Hidden Dual NonExtensible OleAutomation Restricted Dispatchable
// GUID:      {97D6D375-23BB-11D1-A0E1-00C04FC9E20F}
// *********************************************************************//
template<class T>
class IDARefDispT : public TAutoDriver<IDARef>
{
public:
  IDARefDispT(){}

  IDARefDispT(IDARef *pintf)
  {
    TAutoDriver<IDARef>::Bind(pintf, false);
  }

  IDARefDispT(IDARefPtr pintf)
  {
    TAutoDriver<IDARef>::Bind(pintf, true);
  }

  IDARefDispT& operator=(IDARef *pintf)
  {
    TAutoDriver<IDARef>::Bind(pintf, false);
    return *this;
  }

  IDARefDispT& operator=(IDARefPtr pintf)
  {
    TAutoDriver<IDARef>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ObjType(long* pVal/*[out,retval]*/);
  long            __fastcall get_ObjType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ItemMoniker(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ItemMoniker(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DAId(BSTR* pbstrDaid/*[out,retval]*/);
  BSTR            __fastcall get_DAId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Reltype(Owc10_xp::FieldListRelationshipTypeEnum* pfl/*[out,retval]*/);
  Owc10_xp::FieldListRelationshipTypeEnum __fastcall get_Reltype(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RelName(BSTR* bstr/*[out,retval]*/);
  BSTR            __fastcall get_RelName(void);

  __property   long            ObjType = {read = get_ObjType};
  __property   BSTR            ItemMoniker = {read = get_ItemMoniker};
  __property   BSTR            DAId = {read = get_DAId};
  __property   Owc10_xp::FieldListRelationshipTypeEnum Reltype = {read = get_Reltype};
  __property   BSTR            RelName = {read = get_RelName};
};
typedef IDARefDispT<IDARef> IDARefDisp;

typedef TComInterface<Section>  TCOMSection;

// *********************************************************************//
// DispIntf:  Section
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A68-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class SectionDispT : public TAutoDriver<Section>
{
public:
  SectionDispT(){}

  SectionDispT(Section *pintf)
  {
    TAutoDriver<Section>::Bind(pintf, false);
  }

  SectionDispT(SectionPtr pintf)
  {
    TAutoDriver<Section>::Bind(pintf, true);
  }

  SectionDispT& operator=(Section *pintf)
  {
    TAutoDriver<Section>::Bind(pintf, false);
    return *this;
  }

  SectionDispT& operator=(SectionPtr pintf)
  {
    TAutoDriver<Section>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Owc10_xp::SectTypeEnum* SectType/*[out,retval]*/);
  Owc10_xp::SectTypeEnum __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DataPage(Owc10_xp::DataPage** DataPage/*[out,retval]*/);
  Owc10_xp::DataPage* __fastcall get_DataPage(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HTMLContainer(LPDISPATCH* HTMLContainer/*[out,retval]*/);
  LPDISPATCH      __fastcall get_HTMLContainer(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ParentSection(Owc10_xp::Section** Section/*[out,retval]*/);
  Owc10_xp::Section* __fastcall get_ParentSection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ChildSection(Owc10_xp::Section** Section/*[out,retval]*/);
  Owc10_xp::Section* __fastcall get_ChildSection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NextSibling(Owc10_xp::Section** Section/*[out,retval]*/);
  Owc10_xp::Section* __fastcall get_NextSibling(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PreviousSibling(Owc10_xp::Section** Section/*[out,retval]*/);
  Owc10_xp::Section* __fastcall get_PreviousSibling(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NextSection(Owc10_xp::Section** Section/*[out,retval]*/);
  Owc10_xp::Section* __fastcall get_NextSection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PreviousSection(Owc10_xp::Section** Section/*[out,retval]*/);
  Owc10_xp::Section* __fastcall get_PreviousSection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsExpanded(VARIANT_BOOL* IsExpanded/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsExpanded(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Expand();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Collapse();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall MakeCurrent(VARIANT_BOOL ScrollIntoView/*[in,def,opt]*/);

  __property   Owc10_xp::SectTypeEnum Type = {read = get_Type};
  __property   Owc10_xp::DataPage* DataPage = {read = get_DataPage};
  __property   LPDISPATCH      HTMLContainer = {read = get_HTMLContainer};
  __property   Owc10_xp::Section* ParentSection = {read = get_ParentSection};
  __property   Owc10_xp::Section* ChildSection = {read = get_ChildSection};
  __property   Owc10_xp::Section* NextSibling = {read = get_NextSibling};
  __property   Owc10_xp::Section* PreviousSibling = {read = get_PreviousSibling};
  __property   Owc10_xp::Section* NextSection = {read = get_NextSection};
  __property   Owc10_xp::Section* PreviousSection = {read = get_PreviousSection};
  __property   VARIANT_BOOL    IsExpanded = {read = get_IsExpanded};
};
typedef SectionDispT<Section> SectionDisp;

typedef TComInterface<DataPage>  TCOMDataPage;

// *********************************************************************//
// DispIntf:  DataPage
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AB4-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class DataPageDispT : public TAutoDriver<DataPage>
{
public:
  DataPageDispT(){}

  DataPageDispT(DataPage *pintf)
  {
    TAutoDriver<DataPage>::Bind(pintf, false);
  }

  DataPageDispT(DataPagePtr pintf)
  {
    TAutoDriver<DataPage>::Bind(pintf, true);
  }

  DataPageDispT& operator=(DataPage *pintf)
  {
    TAutoDriver<DataPage>::Bind(pintf, false);
    return *this;
  }

  DataPageDispT& operator=(DataPagePtr pintf)
  {
    TAutoDriver<DataPage>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupLevel(Owc10_xp::GroupLevel** GroupLevel/*[out,retval]*/);
  Owc10_xp::GroupLevel* __fastcall get_GroupLevel(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Recordset(Adodb_xp::Recordset** Recordset/*[out,retval]*/);
  Adodb_xp::Recordset* __fastcall get_Recordset(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Filter(VARIANT Criteria/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Filter(VARIANT* Criteria/*[out,retval]*/);
  VARIANT         __fastcall get_Filter(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IsFilterOn(VARIANT_BOOL IsFilterOn/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsFilterOn(VARIANT_BOOL* IsFilterOn/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsFilterOn(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall MoveFirst();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall MoveLast();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall MoveNext();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall MovePrevious();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall NewRecord();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DeleteRecord();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FirstSection(Owc10_xp::Section** Section/*[out,retval]*/);
  Owc10_xp::Section* __fastcall get_FirstSection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Save();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Undo();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Requery();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SortAscending();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SortDescending();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ApplyFilter();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ToggleFilter();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Help();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IsButtonEnabled(Owc10_xp::NavButtonEnum Button/*[in]*/, 
                                                        VARIANT_BOOL* Enabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall IsButtonEnabled(Owc10_xp::NavButtonEnum Button/*[in]*/);

  __property   Owc10_xp::GroupLevel* GroupLevel = {read = get_GroupLevel};
  __property   Adodb_xp::Recordset* Recordset = {read = get_Recordset};
  __property   VARIANT_BOOL    IsFilterOn = {read = get_IsFilterOn, write = set_IsFilterOn};
  __property   Owc10_xp::Section* FirstSection = {read = get_FirstSection};
};
typedef DataPageDispT<DataPage> DataPageDisp;

typedef TComInterface<GroupLevel>  TCOMGroupLevel;

// *********************************************************************//
// DispIntf:  GroupLevel
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A76-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class GroupLevelDispT : public TAutoDriver<GroupLevel>
{
public:
  GroupLevelDispT(){}

  GroupLevelDispT(GroupLevel *pintf)
  {
    TAutoDriver<GroupLevel>::Bind(pintf, false);
  }

  GroupLevelDispT(GroupLevelPtr pintf)
  {
    TAutoDriver<GroupLevel>::Bind(pintf, true);
  }

  GroupLevelDispT& operator=(GroupLevel *pintf)
  {
    TAutoDriver<GroupLevel>::Bind(pintf, false);
    return *this;
  }

  GroupLevelDispT& operator=(GroupLevelPtr pintf)
  {
    TAutoDriver<GroupLevel>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GroupOn(Owc10_xp::DscGroupOnEnum GroupOn/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupOn(Owc10_xp::DscGroupOnEnum* GroupOn/*[out,retval]*/);
  Owc10_xp::DscGroupOnEnum __fastcall get_GroupOn(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GroupInterval(double Interval/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupInterval(double* Interval/*[out,retval]*/);
  double          __fastcall get_GroupInterval(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GroupHeader(VARIANT_BOOL Header/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupHeader(VARIANT_BOOL* Header/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_GroupHeader(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GroupFooter(VARIANT_BOOL Footer/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupFooter(VARIANT_BOOL* Footer/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_GroupFooter(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CaptionSection(VARIANT_BOOL CaptionSection/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CaptionSection(VARIANT_BOOL* CaptionSection/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CaptionSection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RecordNavigationSection(VARIANT_BOOL RecNavSection/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RecordNavigationSection(VARIANT_BOOL* RecNavSection/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RecordNavigationSection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DataPageSize(long Repeat/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DataPageSize(long* Repeat/*[out,retval]*/);
  long            __fastcall get_DataPageSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ExpandedByDefault(VARIANT_BOOL ExpandedByDefault/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ExpandedByDefault(VARIANT_BOOL* ExpandedByDefault/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ExpandedByDefault(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GroupFilterControl(BSTR GroupFilterControl/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupFilterControl(BSTR* GroupFilterControl/*[out,retval]*/);
  BSTR            __fastcall get_GroupFilterControl(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DefaultSort(BSTR DefaultSort/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DefaultSort(BSTR* DefaultSort/*[out,retval]*/);
  BSTR            __fastcall get_DefaultSort(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RecordSource(BSTR RecordSource/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RecordSource(BSTR* RecordSource/*[out,retval]*/);
  BSTR            __fastcall get_RecordSource(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CaptionElementId(BSTR CaptionElementId/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CaptionElementId(BSTR* CaptionElementId/*[out,retval]*/);
  BSTR            __fastcall get_CaptionElementId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HeaderElementId(BSTR HeaderElementId/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HeaderElementId(BSTR* HeaderElementId/*[out,retval]*/);
  BSTR            __fastcall get_HeaderElementId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FooterElementId(BSTR FooterElementId/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FooterElementId(BSTR* FooterElementId/*[out,retval]*/);
  BSTR            __fastcall get_FooterElementId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RecordNavigationElementId(BSTR RecordNavigationElementId/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RecordNavigationElementId(BSTR* RecordNavigationElementId/*[out,retval]*/);
  BSTR            __fastcall get_RecordNavigationElementId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupedOnField(Owc10_xp::PageField** ppPageField/*[out,retval]*/);
  Owc10_xp::PageField* __fastcall get_GroupedOnField(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GroupFilterField(BSTR GroupFilterField/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupFilterField(BSTR* GroupFilterField/*[out,retval]*/);
  BSTR            __fastcall get_GroupFilterField(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SGWindow(long Param1/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SGMessage(unsigned Param1/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetDesignerFlags(long grfFlags/*[in]*/, VARIANT_BOOL vfSet);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AllowEdits(VARIANT_BOOL AllowEdits/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllowEdits(VARIANT_BOOL* AllowEdits/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllowEdits(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AllowAdditions(VARIANT_BOOL AllowAdditions/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllowAdditions(VARIANT_BOOL* AllowAdditions/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllowAdditions(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AllowDeletions(VARIANT_BOOL AllowDeletions/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllowDeletions(VARIANT_BOOL* AllowDeletions/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllowDeletions(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RecordSelector(VARIANT_BOOL RecordSelector/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RecordSelector(VARIANT_BOOL* RecordSelector/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RecordSelector(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AlternateRowColor(BSTR AlternateRowColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AlternateRowColor(BSTR* AlternateRowColor/*[out,retval]*/);
  BSTR            __fastcall get_AlternateRowColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);

  __property   Owc10_xp::DscGroupOnEnum GroupOn = {read = get_GroupOn, write = set_GroupOn};
  __property   double          GroupInterval = {read = get_GroupInterval, write = set_GroupInterval};
  __property   VARIANT_BOOL    GroupHeader = {read = get_GroupHeader, write = set_GroupHeader};
  __property   VARIANT_BOOL    GroupFooter = {read = get_GroupFooter, write = set_GroupFooter};
  __property   VARIANT_BOOL    CaptionSection = {read = get_CaptionSection, write = set_CaptionSection};
  __property   VARIANT_BOOL    RecordNavigationSection = {read = get_RecordNavigationSection, write = set_RecordNavigationSection};
  __property   long            DataPageSize = {read = get_DataPageSize, write = set_DataPageSize};
  __property   VARIANT_BOOL    ExpandedByDefault = {read = get_ExpandedByDefault, write = set_ExpandedByDefault};
  __property   BSTR            GroupFilterControl = {read = get_GroupFilterControl, write = set_GroupFilterControl};
  __property   BSTR            DefaultSort = {read = get_DefaultSort, write = set_DefaultSort};
  __property   BSTR            RecordSource = {read = get_RecordSource, write = set_RecordSource};
  __property   BSTR            CaptionElementId = {read = get_CaptionElementId, write = set_CaptionElementId};
  __property   BSTR            HeaderElementId = {read = get_HeaderElementId, write = set_HeaderElementId};
  __property   BSTR            FooterElementId = {read = get_FooterElementId, write = set_FooterElementId};
  __property   BSTR            RecordNavigationElementId = {read = get_RecordNavigationElementId, write = set_RecordNavigationElementId};
  __property   Owc10_xp::PageField* GroupedOnField = {read = get_GroupedOnField};
  __property   BSTR            GroupFilterField = {read = get_GroupFilterField, write = set_GroupFilterField};
  __property   long            SGWindow = {write = set_SGWindow};
  __property   unsigned        SGMessage = {write = set_SGMessage};
  __property   VARIANT_BOOL    AllowEdits = {read = get_AllowEdits, write = set_AllowEdits};
  __property   VARIANT_BOOL    AllowAdditions = {read = get_AllowAdditions, write = set_AllowAdditions};
  __property   VARIANT_BOOL    AllowDeletions = {read = get_AllowDeletions, write = set_AllowDeletions};
  __property   VARIANT_BOOL    RecordSelector = {read = get_RecordSelector, write = set_RecordSelector};
  __property   BSTR            AlternateRowColor = {read = get_AlternateRowColor, write = set_AlternateRowColor};
  __property   BSTR            Name = {read = get_Name};
};
typedef GroupLevelDispT<GroupLevel> GroupLevelDisp;

typedef TComInterface<GroupLevels>  TCOMGroupLevels;

// *********************************************************************//
// DispIntf:  GroupLevels
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B00-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class GroupLevelsDispT : public TAutoDriver<GroupLevels>
{
public:
  GroupLevelsDispT(){}

  GroupLevelsDispT(GroupLevels *pintf)
  {
    TAutoDriver<GroupLevels>::Bind(pintf, false);
  }

  GroupLevelsDispT(GroupLevelsPtr pintf)
  {
    TAutoDriver<GroupLevels>::Bind(pintf, true);
  }

  GroupLevelsDispT& operator=(GroupLevels *pintf)
  {
    TAutoDriver<GroupLevels>::Bind(pintf, false);
    return *this;
  }

  GroupLevelsDispT& operator=(GroupLevelsPtr pintf)
  {
    TAutoDriver<GroupLevels>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT Index/*[in]*/, 
                                                 Owc10_xp::GroupLevel** GroupLevel/*[out,retval]*/);
  Owc10_xp::GroupLevel* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(VARIANT* Enum/*[out,retval]*/);
  VARIANT         __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(BSTR RecordSource/*[in]*/, 
                                            VARIANT_BOOL FailIfThere/*[in,def,opt]*/, 
                                            Owc10_xp::GroupLevel** GroupLevel/*[out,retval]*/);
  Owc10_xp::GroupLevel* __fastcall Add(BSTR RecordSource/*[in]*/, 
                                       VARIANT_BOOL FailIfThere/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(VARIANT Index/*[in]*/);

  __property   long            Count = {read = get_Count};
};
typedef GroupLevelsDispT<GroupLevels> GroupLevelsDisp;

typedef TComInterface<DataPages>  TCOMDataPages;

// *********************************************************************//
// DispIntf:  DataPages
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A85-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class DataPagesDispT : public TAutoDriver<DataPages>
{
public:
  DataPagesDispT(){}

  DataPagesDispT(DataPages *pintf)
  {
    TAutoDriver<DataPages>::Bind(pintf, false);
  }

  DataPagesDispT(DataPagesPtr pintf)
  {
    TAutoDriver<DataPages>::Bind(pintf, true);
  }

  DataPagesDispT& operator=(DataPages *pintf)
  {
    TAutoDriver<DataPages>::Bind(pintf, false);
    return *this;
  }

  DataPagesDispT& operator=(DataPagesPtr pintf)
  {
    TAutoDriver<DataPages>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT Index/*[in]*/, 
                                                 Owc10_xp::DataPage** DataPage/*[out,retval]*/);
  Owc10_xp::DataPage* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(VARIANT* Enum/*[out,retval]*/);
  VARIANT         __fastcall get__NewEnum(void);

  __property   long            Count = {read = get_Count};
};
typedef DataPagesDispT<DataPages> DataPagesDisp;

typedef TComInterface<ElementExtension>  TCOMElementExtension;

// *********************************************************************//
// DispIntf:  ElementExtension
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AAC-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class ElementExtensionDispT : public TAutoDriver<ElementExtension>
{
public:
  ElementExtensionDispT(){}

  ElementExtensionDispT(ElementExtension *pintf)
  {
    TAutoDriver<ElementExtension>::Bind(pintf, false);
  }

  ElementExtensionDispT(ElementExtensionPtr pintf)
  {
    TAutoDriver<ElementExtension>::Bind(pintf, true);
  }

  ElementExtensionDispT& operator=(ElementExtension *pintf)
  {
    TAutoDriver<ElementExtension>::Bind(pintf, false);
    return *this;
  }

  ElementExtensionDispT& operator=(ElementExtensionPtr pintf)
  {
    TAutoDriver<ElementExtension>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ElementID(BSTR* ElementID/*[out,retval]*/);
  BSTR            __fastcall get_ElementID(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ConsumesRecordset(VARIANT_BOOL ConsumesRecordset/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ConsumesRecordset(VARIANT_BOOL* ConsumesRecordset/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ConsumesRecordset(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AlternateDataSource(BSTR AlternateDataSource/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AlternateDataSource(BSTR* AlternateDataSource/*[out,retval]*/);
  BSTR            __fastcall get_AlternateDataSource(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ListRowSource(BSTR ListRowSource/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ListRowSource(BSTR* ListRowSource/*[out,retval]*/);
  BSTR            __fastcall get_ListRowSource(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ListBoundField(BSTR BoundField/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ListBoundField(BSTR* BoundField/*[out,retval]*/);
  BSTR            __fastcall get_ListBoundField(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ListDisplayField(BSTR DisplayField/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ListDisplayField(BSTR* DisplayField/*[out,retval]*/);
  BSTR            __fastcall get_ListDisplayField(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ChildLabel(BSTR ChildLabel/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ChildLabel(BSTR* ChildLabel/*[out,retval]*/);
  BSTR            __fastcall get_ChildLabel(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TotalType(Owc10_xp::DscTotalTypeEnum TotalType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TotalType(Owc10_xp::DscTotalTypeEnum* TotalType/*[out,retval]*/);
  Owc10_xp::DscTotalTypeEnum __fastcall get_TotalType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DefaultValue(BSTR DefaultValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DefaultValue(BSTR* DefaultValue/*[out,retval]*/);
  BSTR            __fastcall get_DefaultValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RecordSource(BSTR RecordSource/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RecordSource(BSTR* RecordSource/*[out,retval]*/);
  BSTR            __fastcall get_RecordSource(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlSource(BSTR ControlSource/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlSource(BSTR* ControlSource/*[out,retval]*/);
  BSTR            __fastcall get_ControlSource(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_UniqueTable(BSTR UniqueTable/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_UniqueTable(BSTR* UniqueTable/*[out,retval]*/);
  BSTR            __fastcall get_UniqueTable(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ResyncCommand(BSTR ResyncCommand/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ResyncCommand(BSTR* ResyncCommand/*[out,retval]*/);
  BSTR            __fastcall get_ResyncCommand(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ServerFilter(BSTR ServerFilter/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ServerFilter(BSTR* ServerFilter/*[out,retval]*/);
  BSTR            __fastcall get_ServerFilter(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetDesignerFlags(long grfFlags/*[in]*/, VARIANT_BOOL vfSet);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Format(BSTR Format/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Format(BSTR* Format/*[out,retval]*/);
  BSTR            __fastcall get_Format(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall FixupNames(BSTR bstrOldSource/*[in]*/, BSTR bstrNewSource, 
                                                   BSTR bstrOldDefaultCaption);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ElementID(BSTR ElementID/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RecordsetLabel(BSTR RecordsetLabel/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RecordsetLabel(BSTR* RecordsetLabel/*[out,retval]*/);
  BSTR            __fastcall get_RecordsetLabel(void);

  __property   BSTR            ElementID = {read = get_ElementID};
  __property   VARIANT_BOOL    ConsumesRecordset = {read = get_ConsumesRecordset, write = set_ConsumesRecordset};
  __property   BSTR            AlternateDataSource = {read = get_AlternateDataSource, write = set_AlternateDataSource};
  __property   BSTR            ListRowSource = {read = get_ListRowSource, write = set_ListRowSource};
  __property   BSTR            ListBoundField = {read = get_ListBoundField, write = set_ListBoundField};
  __property   BSTR            ListDisplayField = {read = get_ListDisplayField, write = set_ListDisplayField};
  __property   BSTR            ChildLabel = {read = get_ChildLabel, write = set_ChildLabel};
  __property   Owc10_xp::DscTotalTypeEnum TotalType = {read = get_TotalType, write = set_TotalType};
  __property   BSTR            DefaultValue = {read = get_DefaultValue, write = set_DefaultValue};
  __property   BSTR            RecordSource = {read = get_RecordSource, write = set_RecordSource};
  __property   BSTR            ControlSource = {read = get_ControlSource, write = set_ControlSource};
  __property   BSTR            UniqueTable = {read = get_UniqueTable, write = set_UniqueTable};
  __property   BSTR            ResyncCommand = {read = get_ResyncCommand, write = set_ResyncCommand};
  __property   BSTR            ServerFilter = {read = get_ServerFilter, write = set_ServerFilter};
  __property   BSTR            Format = {read = get_Format, write = set_Format};
  __property   BSTR            RecordsetLabel = {read = get_RecordsetLabel, write = set_RecordsetLabel};
};
typedef ElementExtensionDispT<ElementExtension> ElementExtensionDisp;

typedef TComInterface<ElementExtensions>  TCOMElementExtensions;

// *********************************************************************//
// DispIntf:  ElementExtensions
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AC9-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class ElementExtensionsDispT : public TAutoDriver<ElementExtensions>
{
public:
  ElementExtensionsDispT(){}

  ElementExtensionsDispT(ElementExtensions *pintf)
  {
    TAutoDriver<ElementExtensions>::Bind(pintf, false);
  }

  ElementExtensionsDispT(ElementExtensionsPtr pintf)
  {
    TAutoDriver<ElementExtensions>::Bind(pintf, true);
  }

  ElementExtensionsDispT& operator=(ElementExtensions *pintf)
  {
    TAutoDriver<ElementExtensions>::Bind(pintf, false);
    return *this;
  }

  ElementExtensionsDispT& operator=(ElementExtensionsPtr pintf)
  {
    TAutoDriver<ElementExtensions>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT Index/*[in]*/, 
                                                 Owc10_xp::ElementExtension** ppElementExtension/*[out,retval]*/);
  Owc10_xp::ElementExtension* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(VARIANT* Enum/*[out,retval]*/);
  VARIANT         __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(BSTR ElementID/*[in]*/, 
                                            VARIANT_BOOL FailIfThere/*[in,def,opt]*/, 
                                            Owc10_xp::ElementExtension** ElementExtension/*[out,retval]*/);
  Owc10_xp::ElementExtension* __fastcall Add(BSTR ElementID/*[in]*/, 
                                             VARIANT_BOOL FailIfThere/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(VARIANT Index/*[in]*/);

  __property   long            Count = {read = get_Count};
};
typedef ElementExtensionsDispT<ElementExtensions> ElementExtensionsDisp;

// *********************************************************************//
// SmartIntf: TCOMIDataSourceControl
// Interface: IDataSourceControl
// *********************************************************************//
template <class T /* IDataSourceControl */ >
class TCOMIDataSourceControlT : public TComInterface<IDataSourceControl>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIDataSourceControlT() {}
  TCOMIDataSourceControlT(IDataSourceControl *intf, bool addRef = false) : TComInterface<IDataSourceControl>(intf, addRef) {}
  TCOMIDataSourceControlT(const TCOMIDataSourceControlT& src) : TComInterface<IDataSourceControl>(src) {}
  TCOMIDataSourceControlT& operator=(const TCOMIDataSourceControlT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall set_ConnectionString(BSTR ConnectionString/*[in]*/);
  HRESULT         __fastcall get_ConnectionString(BSTR* ConnectionString/*[out,retval]*/);
  BSTR            __fastcall get_ConnectionString(void);
  HRESULT         __fastcall get_CurrentDirectory(BSTR* CurrentDirectory/*[out,retval]*/);
  BSTR            __fastcall get_CurrentDirectory(void);
  HRESULT         __fastcall set_UseRemoteProvider(VARIANT_BOOL RemoteProvider/*[in]*/);
  HRESULT         __fastcall set_UseRemoteProvider(TOLEBOOL RemoteProvider/*[in]*/);
  HRESULT         __fastcall get_UseRemoteProvider(VARIANT_BOOL* RemoteProvider/*[out,retval]*/);
  HRESULT         __fastcall get_UseRemoteProvider(TOLEBOOL* RemoteProvider/*[out,retval]*/);
  TOLEBOOL        __fastcall get_UseRemoteProvider(void);
  HRESULT         __fastcall get_Connection(Adodb_xp::Connection** Connection/*[out,retval]*/);
  HRESULT         __fastcall get_Connection(Adodb_xp::ConnectionPtr* Connection/*[out,retval]*/);
  Adodb_xp::ConnectionPtr __fastcall get_Connection(void);
  HRESULT         __fastcall set_DataEntry(VARIANT_BOOL DataEntry/*[in]*/);
  HRESULT         __fastcall set_DataEntry(TOLEBOOL DataEntry/*[in]*/);
  HRESULT         __fastcall get_DataEntry(VARIANT_BOOL* DataEntry/*[out,retval]*/);
  HRESULT         __fastcall get_DataEntry(TOLEBOOL* DataEntry/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DataEntry(void);
  HRESULT         __fastcall set_MaxRecords(long RecordsMax/*[in]*/);
  HRESULT         __fastcall get_MaxRecords(long* RecordsMax/*[out,retval]*/);
  long            __fastcall get_MaxRecords(void);
  HRESULT         __fastcall get_DefaultRecordset(Adodb_xp::Recordset** RecordsetDefault/*[out,retval]*/);
  HRESULT         __fastcall get_DefaultRecordset(Adodb_xp::RecordsetPtr* RecordsetDefault/*[out,retval]*/);
  Adodb_xp::RecordsetPtr __fastcall get_DefaultRecordset(void);
  HRESULT         __fastcall Execute(BSTR RecordsetName/*[in]*/, 
                                     Adodb_xp::ExecuteOptionEnum ExecuteOption/*[in,def,opt]*/, 
                                     Owc10_xp::DscFetchTypeEnum FetchType/*[in,def,opt]*/, 
                                     Adodb_xp::Recordset** Recordset/*[out,retval]*/);
  Adodb_xp::Recordset* __fastcall Execute(BSTR RecordsetName/*[in]*/, 
                                          Adodb_xp::ExecuteOptionEnum ExecuteOption/*[in,def,opt]*/, 
                                          Owc10_xp::DscFetchTypeEnum FetchType/*[in,def,opt]*/);
  HRESULT         __fastcall get_SchemaRowsources(Owc10_xp::SchemaRowsources** SchemaRowsources/*[out,retval]*/);
  HRESULT         __fastcall get_SchemaRowsources(Owc10_xp::SchemaRowsourcesPtr* SchemaRowsources/*[out,retval]*/);
  Owc10_xp::SchemaRowsourcesPtr __fastcall get_SchemaRowsources(void);
  HRESULT         __fastcall get_SchemaRelationships(Owc10_xp::SchemaRelationships** SchemaRelationships/*[out,retval]*/);
  HRESULT         __fastcall get_SchemaRelationships(Owc10_xp::SchemaRelationshipsPtr* SchemaRelationships/*[out,retval]*/);
  Owc10_xp::SchemaRelationshipsPtr __fastcall get_SchemaRelationships(void);
  HRESULT         __fastcall get_PageRowsources(Owc10_xp::PageRowsources** PageRowsources/*[out,retval]*/);
  HRESULT         __fastcall get_PageRowsources(Owc10_xp::PageRowsourcesPtr* PageRowsources/*[out,retval]*/);
  Owc10_xp::PageRowsourcesPtr __fastcall get_PageRowsources(void);
  HRESULT         __fastcall get_RecordsetDefs(Owc10_xp::RecordsetDefs** RecordsetDefs/*[out,retval]*/);
  HRESULT         __fastcall get_RecordsetDefs(Owc10_xp::RecordsetDefsPtr* RecordsetDefs/*[out,retval]*/);
  Owc10_xp::RecordsetDefsPtr __fastcall get_RecordsetDefs(void);
  HRESULT         __fastcall get_RootRecordsetDefs(Owc10_xp::RecordsetDefs** RootRecordsetDefs/*[out,retval]*/);
  HRESULT         __fastcall get_RootRecordsetDefs(Owc10_xp::RecordsetDefsPtr* RootRecordsetDefs/*[out,retval]*/);
  Owc10_xp::RecordsetDefsPtr __fastcall get_RootRecordsetDefs(void);
  HRESULT         __fastcall get_PivotDefs(LPDISPATCH* PivotDefs/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PivotDefs(void);
  HRESULT         __fastcall SetDataAssistant(LPDISPATCH DataAssistant/*[in]*/);
  HRESULT         __fastcall DesignAdvise(LPUNKNOWN Advise/*[in]*/, BSTR SinkName/*[in]*/);
  HRESULT         __fastcall DesignUnAdvise(BSTR SinkName/*[in]*/);
  HRESULT         __fastcall ProcessDrop(LPUNKNOWN pUnknownDropGoo/*[in]*/, 
                                         BSTR bstrRecordSetDefName/*[in]*/, 
                                         Owc10_xp::DscDropLocationEnum dl/*[in]*/, 
                                         Owc10_xp::DscDropTypeEnum dt/*[in]*/, 
                                         BSTR PageRowsource/*[in]*/, BSTR SchemaRelationship/*[in]*/);
  HRESULT         __fastcall ScriptDrop(VARIANT Rowsources/*[in]*/, VARIANT Relationships/*[in]*/, 
                                        VARIANT Fields/*[in]*/, BSTR bstrRecordSetDefName/*[in]*/, 
                                        Owc10_xp::DscDropLocationEnum dl/*[in]*/, 
                                        Owc10_xp::DscDropTypeEnum dt/*[in]*/, 
                                        BSTR PageRowsource/*[in]*/, BSTR SchemaRelationship/*[in]*/);
  HRESULT         __fastcall set_DefaultRecordsetName(BSTR DefaultRecordsetName/*[in]*/);
  HRESULT         __fastcall get_DefaultRecordsetName(BSTR* DefaultRecordsetName/*[out,retval]*/);
  BSTR            __fastcall get_DefaultRecordsetName(void);
  HRESULT         __fastcall set_XMLData(BSTR XMLData/*[in]*/);
  HRESULT         __fastcall get_XMLData(BSTR* XMLData/*[out,retval]*/);
  BSTR            __fastcall get_XMLData(void);
  HRESULT         __fastcall get_GroupLevels(Owc10_xp::GroupLevels** GroupLevels/*[out,retval]*/);
  HRESULT         __fastcall get_GroupLevels(Owc10_xp::GroupLevelsPtr* GroupLevels/*[out,retval]*/);
  Owc10_xp::GroupLevelsPtr __fastcall get_GroupLevels(void);
  HRESULT         __fastcall GetContainingSection(LPDISPATCH Element/*[in]*/, 
                                                  Owc10_xp::Section** Section/*[out,retval]*/);
  Owc10_xp::Section* __fastcall GetContainingSection(LPDISPATCH Element/*[in]*/);
  HRESULT         __fastcall get_Constants(LPDISPATCH* IDispatchConstants/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Constants(void);
  HRESULT         __fastcall get_ElementExtensions(Owc10_xp::ElementExtensions** ElementExtensions/*[out,retval]*/);
  HRESULT         __fastcall get_ElementExtensions(Owc10_xp::ElementExtensionsPtr* ElementExtensions/*[out,retval]*/);
  Owc10_xp::ElementExtensionsPtr __fastcall get_ElementExtensions(void);
  HRESULT         __fastcall get_IsNew(VARIANT_BOOL* IsNew/*[out,retval]*/);
  HRESULT         __fastcall get_IsNew(TOLEBOOL* IsNew/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsNew(void);
  HRESULT         __fastcall ScriptValidate(VARIANT Rowsources/*[in]*/, 
                                            VARIANT Relationships/*[in]*/, VARIANT Fields/*[in]*/, 
                                            BSTR RecordsetDef/*[in]*/, 
                                            Owc10_xp::DscDropLocationEnum dl/*[in]*/, 
                                            Owc10_xp::DscDropTypeEnum dt/*[in]*/, 
                                            BSTR* DropRowsource/*[out]*/, 
                                            VARIANT* RowsourcesOut/*[out]*/, 
                                            VARIANT* RelationshipsOut/*[out]*/);
  HRESULT         __fastcall set_RecordsetType(Owc10_xp::DscRecordsetTypeEnum RecordsetType/*[in]*/);
  HRESULT         __fastcall get_RecordsetType(Owc10_xp::DscRecordsetTypeEnum* RecordsetType/*[out,retval]*/);
  Owc10_xp::DscRecordsetTypeEnum __fastcall get_RecordsetType(void);
  HRESULT         __fastcall ValidateDrop(LPUNKNOWN UnknownDropGoo/*[in]*/, 
                                          BSTR RecordSetDefName/*[in]*/, 
                                          Owc10_xp::DscDropLocationEnum Location/*[in]*/, 
                                          Owc10_xp::DscDropTypeEnum Type/*[in]*/, 
                                          BSTR* DropRowsource/*[out]*/, 
                                          VARIANT* RowsourcesOut/*[out]*/, 
                                          VARIANT* RelationshipsOut/*[out]*/, 
                                          long* NumberOfDrops/*[out]*/);
  HRESULT         __fastcall HyperlinkPart(VARIANT Hyperlink/*[in]*/, 
                                           Owc10_xp::DscHyperlinkPartEnum Part/*[in]*/, 
                                           BSTR* Ret/*[out,retval]*/);
  BSTR            __fastcall HyperlinkPart(VARIANT Hyperlink/*[in]*/, 
                                           Owc10_xp::DscHyperlinkPartEnum Part/*[in]*/);
  HRESULT         __fastcall SchemaRefresh(void);
  HRESULT         __fastcall UpdateElementID(BSTR OldID, BSTR NewID);
  HRESULT         __fastcall get_AllPageFields(Owc10_xp::AllPageFields** AllPageFields/*[out,retval]*/);
  HRESULT         __fastcall get_AllPageFields(Owc10_xp::AllPageFieldsPtr* AllPageFields/*[out,retval]*/);
  Owc10_xp::AllPageFieldsPtr __fastcall get_AllPageFields(void);
  HRESULT         __fastcall get_CurrentSection(Owc10_xp::Section** Section/*[out,retval]*/);
  HRESULT         __fastcall get_CurrentSection(Owc10_xp::SectionPtr* Section/*[out,retval]*/);
  Owc10_xp::SectionPtr __fastcall get_CurrentSection(void);
  HRESULT         __fastcall get_ProviderType(VARIANT DataMember/*[in,opt]*/, 
                                              Owc10_xp::ProviderType* ProviderType/*[out,retval]*/);
  Owc10_xp::ProviderType __fastcall get_ProviderType(VARIANT DataMember/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall get_AllGroupingDefs(Owc10_xp::AllGroupingDefs** AllGroupingDefs/*[out,retval]*/);
  HRESULT         __fastcall get_AllGroupingDefs(Owc10_xp::AllGroupingDefsPtr* AllGroupingDefs/*[out,retval]*/);
  Owc10_xp::AllGroupingDefsPtr __fastcall get_AllGroupingDefs(void);
  HRESULT         __fastcall set_DisplayAlerts(VARIANT_BOOL DisplayAlerts/*[in]*/);
  HRESULT         __fastcall set_DisplayAlerts(TOLEBOOL DisplayAlerts/*[in]*/);
  HRESULT         __fastcall get_DisplayAlerts(VARIANT_BOOL* DisplayAlerts/*[out,retval]*/);
  HRESULT         __fastcall get_DisplayAlerts(TOLEBOOL* DisplayAlerts/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DisplayAlerts(void);
  HRESULT         __fastcall get_DataPages(Owc10_xp::DataPages** DataPages/*[out,retval]*/);
  HRESULT         __fastcall get_DataPages(Owc10_xp::DataPagesPtr* DataPages/*[out,retval]*/);
  Owc10_xp::DataPagesPtr __fastcall get_DataPages(void);
  HRESULT         __fastcall Reset(void);
  HRESULT         __fastcall getDataMemberName(long lIndex/*[in]*/, 
                                               Msdatasrc_xp::DataMember* pbstrDM/*[out,retval]*/);
  Msdatasrc_xp::DataMember __fastcall getDataMemberName(long lIndex/*[in]*/);
  HRESULT         __fastcall getDataMemberCount(long* plcount/*[out,retval]*/);
  long            __fastcall getDataMemberCount(void);
  HRESULT         __fastcall set_GridX(long xGrid/*[in]*/);
  HRESULT         __fastcall get_GridX(long* xGrid/*[out,retval]*/);
  long            __fastcall get_GridX(void);
  HRESULT         __fastcall set_GridY(long yGrid/*[in]*/);
  HRESULT         __fastcall get_GridY(long* yGrid/*[out,retval]*/);
  long            __fastcall get_GridY(void);
  HRESULT         __fastcall get_LoadError(long* LoadError/*[out,retval]*/);
  long            __fastcall get_LoadError(void);
  HRESULT         __fastcall GetSectionInfo(LPDISPATCH SectionElement/*[in]*/, 
                                            BSTR* RecordSource/*[out]*/, 
                                            Owc10_xp::SectTypeEnum* SectionType/*[out]*/, 
                                            Owc10_xp::GroupLevel** GroupLevel/*[out]*/);
  HRESULT         __fastcall DeleteRecordSourceIfUnused(BSTR RecordSource/*[in]*/);
  HRESULT         __fastcall DeletePageFieldIfUnused(BSTR RecordSource/*[in]*/, 
                                                     BSTR PageField/*[in]*/);
  HRESULT         __fastcall set_DefaultControlType(Owc10_xp::DefaultControlTypeEnum ControlType/*[in]*/);
  HRESULT         __fastcall get_DefaultControlType(Owc10_xp::DefaultControlTypeEnum* ControlType/*[out,retval]*/);
  Owc10_xp::DefaultControlTypeEnum __fastcall get_DefaultControlType(void);
  HRESULT         __fastcall set_IsDirty(VARIANT_BOOL IsDirty/*[in]*/);
  HRESULT         __fastcall set_IsDirty(TOLEBOOL IsDirty/*[in]*/);
  HRESULT         __fastcall get_IsDirty(VARIANT_BOOL* IsDirty/*[out,retval]*/);
  HRESULT         __fastcall get_IsDirty(TOLEBOOL* IsDirty/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsDirty(void);
  HRESULT         __fastcall get_Busy(VARIANT_BOOL* Busy/*[out,retval]*/);
  HRESULT         __fastcall get_Busy(TOLEBOOL* Busy/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Busy(void);
  HRESULT         __fastcall get_Version(BSTR* Version/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT         __fastcall get_MajorVersion(long* MajorVersion/*[out,retval]*/);
  long            __fastcall get_MajorVersion(void);
  HRESULT         __fastcall get_MinorVersion(BSTR* MinorVersion/*[out,retval]*/);
  BSTR            __fastcall get_MinorVersion(void);
  HRESULT         __fastcall get_BuildNumber(BSTR* BuildNumber/*[out,retval]*/);
  BSTR            __fastcall get_BuildNumber(void);
  HRESULT         __fastcall get_RevisionNumber(BSTR* RevisionNumber/*[out,retval]*/);
  BSTR            __fastcall get_RevisionNumber(void);
  HRESULT         __fastcall ResetRecordset(BSTR bstrRecordset);
  HRESULT         __fastcall set_IsDataModelDirty(VARIANT_BOOL IsDataModelDirty/*[in]*/);
  HRESULT         __fastcall set_IsDataModelDirty(TOLEBOOL IsDataModelDirty/*[in]*/);
  HRESULT         __fastcall get_IsDataModelDirty(VARIANT_BOOL* IsDataModelDirty/*[out,retval]*/);
  HRESULT         __fastcall get_IsDataModelDirty(TOLEBOOL* IsDataModelDirty/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsDataModelDirty(void);
  HRESULT         __fastcall GetExportableConnectString(Owc10_xp::ExportableConnectStringEnum ExportType/*[in]*/, 
                                                        BSTR* ConnectString/*[out]*/);
  HRESULT         __fastcall ExportXML(Owc10_xp::DscEncodingEnum eEncoding/*[in,def,opt]*/);
  HRESULT         __fastcall SetRootRecordset(BSTR RecordsetName/*[in]*/, 
                                              Adodb_xp::Recordset* Recordset/*[in]*/);
  HRESULT         __fastcall GetOfflineDisplayInfo(BSTR* OnlineServer/*[out]*/, 
                                                   BSTR* OnlineDatabase/*[out]*/, 
                                                   BSTR* OfflineServer/*[out]*/, 
                                                   BSTR* OfflineDatabase/*[out]*/);
  HRESULT         __fastcall set_OfflineType(Owc10_xp::DscOfflineTypeEnum Publication/*[in]*/);
  HRESULT         __fastcall get_OfflineType(Owc10_xp::DscOfflineTypeEnum* Publication/*[out,retval]*/);
  Owc10_xp::DscOfflineTypeEnum __fastcall get_OfflineType(void);
  HRESULT         __fastcall set_OfflinePublication(BSTR Publication/*[in]*/);
  HRESULT         __fastcall get_OfflinePublication(BSTR* Publication/*[out,retval]*/);
  BSTR            __fastcall get_OfflinePublication(void);
  HRESULT         __fastcall get_Offline(VARIANT_BOOL* IsOffline/*[out,retval]*/);
  HRESULT         __fastcall get_Offline(TOLEBOOL* IsOffline/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Offline(void);
  HRESULT         __fastcall set_OfflineSource(BSTR Source/*[in]*/);
  HRESULT         __fastcall get_OfflineSource(BSTR* Source/*[out,retval]*/);
  BSTR            __fastcall get_OfflineSource(void);
  HRESULT         __fastcall set_XMLLocation(Owc10_xp::DscXMLLocationEnum Location/*[in]*/);
  HRESULT         __fastcall get_XMLLocation(Owc10_xp::DscXMLLocationEnum* Location/*[out,retval]*/);
  Owc10_xp::DscXMLLocationEnum __fastcall get_XMLLocation(void);
  HRESULT         __fastcall set_UseXMLData(VARIANT_BOOL UseXMLData/*[in]*/);
  HRESULT         __fastcall set_UseXMLData(TOLEBOOL UseXMLData/*[in]*/);
  HRESULT         __fastcall get_UseXMLData(VARIANT_BOOL* UseXMLData/*[out,retval]*/);
  HRESULT         __fastcall get_UseXMLData(TOLEBOOL* UseXMLData/*[out,retval]*/);
  TOLEBOOL        __fastcall get_UseXMLData(void);
  HRESULT         __fastcall set_XMLDataTarget(BSTR Source/*[in]*/);
  HRESULT         __fastcall get_XMLDataTarget(BSTR* Source/*[out,retval]*/);
  BSTR            __fastcall get_XMLDataTarget(void);
  HRESULT         __fastcall Refresh(Owc10_xp::RefreshType RefreshType/*[in,def,opt]*/);
  HRESULT         __fastcall FindRelatedGroupLevel(Owc10_xp::GroupLevel* pGroupLevel/*[in]*/, 
                                                   long fChild/*[in]*/, 
                                                   Owc10_xp::GroupLevel** ppGrouplevel/*[out]*/);
  HRESULT         __fastcall DllNotification(Owc10_xp::NotificationType Notification/*[in]*/);
  HRESULT         __fastcall SuspendUndo(VARIANT_BOOL Suspend/*[in]*/);
  HRESULT         __fastcall UpdateFocus(void);
  HRESULT         __fastcall set_ConnectionFile(BSTR ConnectionFile/*[in]*/);
  HRESULT         __fastcall get_ConnectionFile(BSTR* ConnectionFile/*[out,retval]*/);
  BSTR            __fastcall get_ConnectionFile(void);
  HRESULT         __fastcall IsValidDAPProvider(BSTR ConnectionString/*[in]*/, 
                                                VARIANT_BOOL* IsValid/*[out,retval]*/);
  VARIANT_BOOL    __fastcall IsValidDAPProvider(BSTR ConnectionString/*[in]*/);
  HRESULT         __fastcall get_DefaultRecordsetDefName(BSTR* DefaultRecordsetDefName/*[out,retval]*/);
  BSTR            __fastcall get_DefaultRecordsetDefName(void);
  HRESULT         __fastcall EuroConvert(double Number/*[in]*/, BSTR SourceCurrency/*[in]*/, 
                                         BSTR TargetCurrency/*[in]*/, 
                                         VARIANT FullPrecision/*[in,opt]*/, 
                                         VARIANT TriangulationPrecision/*[in,opt]*/, 
                                         double* pRet/*[out,retval]*/);
  double          __fastcall EuroConvert(double Number/*[in]*/, BSTR SourceCurrency/*[in]*/, 
                                         BSTR TargetCurrency/*[in]*/, 
                                         VARIANT FullPrecision/*[in,opt]*/= TNoParam(), 
                                         VARIANT TriangulationPrecision/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall GetDAPProviders(LPSAFEARRAY* Providers/*[out,retval]*/);
  LPSAFEARRAY     __fastcall GetDAPProviders(void);
  HRESULT         __fastcall SetSynchronizing(VARIANT_BOOL Synchronizing/*[in]*/);
  HRESULT         __fastcall get_ConnectionStringFullPath(BSTR* ConnectionStringFullPath/*[out,retval]*/);
  BSTR            __fastcall get_ConnectionStringFullPath(void);
  HRESULT         __fastcall SetDisplayError(VARIANT_BOOL DisplayError/*[in]*/);
  HRESULT         __fastcall set_IsNew(VARIANT_BOOL IsNew/*[in]*/);
  HRESULT         __fastcall set_IsNew(TOLEBOOL IsNew/*[in]*/);
  HRESULT         __fastcall get_SchemaDiagrams(Owc10_xp::SchemaDiagrams** SchemaDiagrams/*[out,retval]*/);
  HRESULT         __fastcall get_SchemaDiagrams(Owc10_xp::SchemaDiagramsPtr* SchemaDiagrams/*[out,retval]*/);
  Owc10_xp::SchemaDiagramsPtr __fastcall get_SchemaDiagrams(void);
  HRESULT         __fastcall SuspendXMLReExecute(VARIANT_BOOL Suspend/*[in]*/);
  HRESULT         __fastcall get_DBNSOwnerName(BSTR* OwnerName/*[out,retval]*/);
  BSTR            __fastcall get_DBNSOwnerName(void);
  HRESULT         __fastcall SetFirePropChange(VARIANT_BOOL FirePropChange/*[in]*/);
  HRESULT         __fastcall Nz(VARIANT Value/*[in]*/, VARIANT ValueIfNull/*[in,opt]*/, 
                                VARIANT* pRet/*[out,retval]*/);
  VARIANT         __fastcall Nz(VARIANT Value/*[in]*/, VARIANT ValueIfNull/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall RefreshJetCache(void);
  HRESULT         __fastcall AutoRefreshOfflineSource(void);

  __property   BSTR            ConnectionString = {read = get_ConnectionString, write = set_ConnectionString};
  __property   BSTR            CurrentDirectory = {read = get_CurrentDirectory};
  __property   TOLEBOOL        UseRemoteProvider = {write = set_UseRemoteProvider};
  __property   Adodb_xp::ConnectionPtr Connection = {read = get_Connection};
  __property   TOLEBOOL        DataEntry = {write = set_DataEntry};
  __property   long            MaxRecords = {read = get_MaxRecords, write = set_MaxRecords};
  __property   Adodb_xp::RecordsetPtr DefaultRecordset = {read = get_DefaultRecordset};
  __property   Owc10_xp::SchemaRowsourcesPtr SchemaRowsources = {read = get_SchemaRowsources};
  __property   Owc10_xp::SchemaRelationshipsPtr SchemaRelationships = {read = get_SchemaRelationships};
  __property   Owc10_xp::PageRowsourcesPtr PageRowsources = {read = get_PageRowsources};
  __property   Owc10_xp::RecordsetDefsPtr RecordsetDefs = {read = get_RecordsetDefs};
  __property   Owc10_xp::RecordsetDefsPtr RootRecordsetDefs = {read = get_RootRecordsetDefs};
  __property   LPDISPATCH      PivotDefs = {read = get_PivotDefs};
  __property   BSTR            DefaultRecordsetName = {read = get_DefaultRecordsetName, write = set_DefaultRecordsetName};
  __property   BSTR            XMLData = {read = get_XMLData, write = set_XMLData};
  __property   Owc10_xp::GroupLevelsPtr GroupLevels = {read = get_GroupLevels};
  __property   LPDISPATCH      Constants = {read = get_Constants};
  __property   Owc10_xp::ElementExtensionsPtr ElementExtensions = {read = get_ElementExtensions};
  __property   TOLEBOOL        IsNew = {read = get_IsNew, write = set_IsNew};
  __property   Owc10_xp::DscRecordsetTypeEnum RecordsetType = {read = get_RecordsetType, write = set_RecordsetType};
  __property   Owc10_xp::AllPageFieldsPtr AllPageFields = {read = get_AllPageFields};
  __property   Owc10_xp::SectionPtr CurrentSection = {read = get_CurrentSection};
  __property   Owc10_xp::AllGroupingDefsPtr AllGroupingDefs = {read = get_AllGroupingDefs};
  __property   TOLEBOOL        DisplayAlerts = {write = set_DisplayAlerts};
  __property   Owc10_xp::DataPagesPtr DataPages = {read = get_DataPages};
  __property   long            GridX = {read = get_GridX, write = set_GridX};
  __property   long            GridY = {read = get_GridY, write = set_GridY};
  __property   long            LoadError = {read = get_LoadError};
  __property   Owc10_xp::DefaultControlTypeEnum DefaultControlType = {read = get_DefaultControlType, write = set_DefaultControlType};
  __property   TOLEBOOL        IsDirty = {write = set_IsDirty};
  __property   TOLEBOOL        Busy = {read = get_Busy};
  __property   BSTR            Version = {read = get_Version};
  __property   long            MajorVersion = {read = get_MajorVersion};
  __property   BSTR            MinorVersion = {read = get_MinorVersion};
  __property   BSTR            BuildNumber = {read = get_BuildNumber};
  __property   BSTR            RevisionNumber = {read = get_RevisionNumber};
  __property   TOLEBOOL        IsDataModelDirty = {write = set_IsDataModelDirty};
  __property   Owc10_xp::DscOfflineTypeEnum OfflineType = {read = get_OfflineType, write = set_OfflineType};
  __property   BSTR            OfflinePublication = {read = get_OfflinePublication, write = set_OfflinePublication};
  __property   TOLEBOOL        Offline = {read = get_Offline};
  __property   BSTR            OfflineSource = {read = get_OfflineSource, write = set_OfflineSource};
  __property   Owc10_xp::DscXMLLocationEnum XMLLocation = {read = get_XMLLocation, write = set_XMLLocation};
  __property   TOLEBOOL        UseXMLData = {write = set_UseXMLData};
  __property   BSTR            XMLDataTarget = {read = get_XMLDataTarget, write = set_XMLDataTarget};
  __property   BSTR            ConnectionFile = {read = get_ConnectionFile, write = set_ConnectionFile};
  __property   BSTR            DefaultRecordsetDefName = {read = get_DefaultRecordsetDefName};
  __property   BSTR            ConnectionStringFullPath = {read = get_ConnectionStringFullPath};
  __property   Owc10_xp::SchemaDiagramsPtr SchemaDiagrams = {read = get_SchemaDiagrams};
  __property   BSTR            DBNSOwnerName = {read = get_DBNSOwnerName};
};
typedef TCOMIDataSourceControlT<IDataSourceControl> TCOMIDataSourceControl;

// *********************************************************************//
// DispIntf:  IDataSourceControl
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AAF-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class IDataSourceControlDispT : public TAutoDriver<IDataSourceControl>
{
public:
  IDataSourceControlDispT(){}

  IDataSourceControlDispT(IDataSourceControl *pintf)
  {
    TAutoDriver<IDataSourceControl>::Bind(pintf, false);
  }

  IDataSourceControlDispT(IDataSourceControlPtr pintf)
  {
    TAutoDriver<IDataSourceControl>::Bind(pintf, true);
  }

  IDataSourceControlDispT& operator=(IDataSourceControl *pintf)
  {
    TAutoDriver<IDataSourceControl>::Bind(pintf, false);
    return *this;
  }

  IDataSourceControlDispT& operator=(IDataSourceControlPtr pintf)
  {
    TAutoDriver<IDataSourceControl>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_DataSourceControl));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_DataSourceControl);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ConnectionString(BSTR ConnectionString/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ConnectionString(BSTR* ConnectionString/*[out,retval]*/);
  BSTR            __fastcall get_ConnectionString(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CurrentDirectory(BSTR* CurrentDirectory/*[out,retval]*/);
  BSTR            __fastcall get_CurrentDirectory(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_UseRemoteProvider(VARIANT_BOOL RemoteProvider/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_UseRemoteProvider(VARIANT_BOOL* RemoteProvider/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_UseRemoteProvider(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Connection(Adodb_xp::Connection** Connection/*[out,retval]*/);
  Adodb_xp::Connection* __fastcall get_Connection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DataEntry(VARIANT_BOOL DataEntry/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DataEntry(VARIANT_BOOL* DataEntry/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DataEntry(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MaxRecords(long RecordsMax/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MaxRecords(long* RecordsMax/*[out,retval]*/);
  long            __fastcall get_MaxRecords(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DefaultRecordset(Adodb_xp::Recordset** RecordsetDefault/*[out,retval]*/);
  Adodb_xp::Recordset* __fastcall get_DefaultRecordset(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Execute(BSTR RecordsetName/*[in]*/, 
                                                Adodb_xp::ExecuteOptionEnum ExecuteOption/*[in,def,opt]*/
                                                , 
                                                Owc10_xp::DscFetchTypeEnum FetchType/*[in,def,opt]*/
                                                , Adodb_xp::Recordset** Recordset/*[out,retval]*/);
  Adodb_xp::Recordset* __fastcall Execute(BSTR RecordsetName/*[in]*/, 
                                          Adodb_xp::ExecuteOptionEnum ExecuteOption/*[in,def,opt]*/, 
                                          Owc10_xp::DscFetchTypeEnum FetchType/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SchemaRowsources(Owc10_xp::SchemaRowsources** SchemaRowsources/*[out,retval]*/);
  Owc10_xp::SchemaRowsources* __fastcall get_SchemaRowsources(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SchemaRelationships(Owc10_xp::SchemaRelationships** SchemaRelationships/*[out,retval]*/);
  Owc10_xp::SchemaRelationships* __fastcall get_SchemaRelationships(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PageRowsources(Owc10_xp::PageRowsources** PageRowsources/*[out,retval]*/);
  Owc10_xp::PageRowsources* __fastcall get_PageRowsources(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RecordsetDefs(Owc10_xp::RecordsetDefs** RecordsetDefs/*[out,retval]*/);
  Owc10_xp::RecordsetDefs* __fastcall get_RecordsetDefs(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RootRecordsetDefs(Owc10_xp::RecordsetDefs** RootRecordsetDefs/*[out,retval]*/);
  Owc10_xp::RecordsetDefs* __fastcall get_RootRecordsetDefs(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PivotDefs(LPDISPATCH* PivotDefs/*[out,retval]*/);
  LPDISPATCH      __fastcall get_PivotDefs(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetDataAssistant(LPDISPATCH DataAssistant/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DesignAdvise(LPUNKNOWN Advise/*[in]*/, BSTR SinkName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DesignUnAdvise(BSTR SinkName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ProcessDrop(LPUNKNOWN pUnknownDropGoo/*[in]*/, 
                                                    BSTR bstrRecordSetDefName/*[in]*/, 
                                                    Owc10_xp::DscDropLocationEnum dl/*[in]*/, 
                                                    Owc10_xp::DscDropTypeEnum dt/*[in]*/, 
                                                    BSTR PageRowsource/*[in]*/, 
                                                    BSTR SchemaRelationship/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ScriptDrop(VARIANT Rowsources/*[in]*/, 
                                                   VARIANT Relationships/*[in]*/, 
                                                   VARIANT Fields/*[in]*/, 
                                                   BSTR bstrRecordSetDefName/*[in]*/, 
                                                   Owc10_xp::DscDropLocationEnum dl/*[in]*/, 
                                                   Owc10_xp::DscDropTypeEnum dt/*[in]*/, 
                                                   BSTR PageRowsource/*[in]*/, 
                                                   BSTR SchemaRelationship/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DefaultRecordsetName(BSTR DefaultRecordsetName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DefaultRecordsetName(BSTR* DefaultRecordsetName/*[out,retval]*/);
  BSTR            __fastcall get_DefaultRecordsetName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_XMLData(BSTR XMLData/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_XMLData(BSTR* XMLData/*[out,retval]*/);
  BSTR            __fastcall get_XMLData(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupLevels(Owc10_xp::GroupLevels** GroupLevels/*[out,retval]*/);
  Owc10_xp::GroupLevels* __fastcall get_GroupLevels(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetContainingSection(LPDISPATCH Element/*[in]*/, 
                                                             Owc10_xp::Section** Section/*[out,retval]*/);
  Owc10_xp::Section* __fastcall GetContainingSection(LPDISPATCH Element/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Constants(LPDISPATCH* IDispatchConstants/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Constants(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ElementExtensions(Owc10_xp::ElementExtensions** ElementExtensions/*[out,retval]*/);
  Owc10_xp::ElementExtensions* __fastcall get_ElementExtensions(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsNew(VARIANT_BOOL* IsNew/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsNew(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ScriptValidate(VARIANT Rowsources/*[in]*/, 
                                                       VARIANT Relationships/*[in]*/, 
                                                       VARIANT Fields/*[in]*/, 
                                                       BSTR RecordsetDef/*[in]*/, 
                                                       Owc10_xp::DscDropLocationEnum dl/*[in]*/, 
                                                       Owc10_xp::DscDropTypeEnum dt/*[in]*/, 
                                                       BSTR* DropRowsource/*[out]*/, 
                                                       VARIANT* RowsourcesOut/*[out]*/, 
                                                       VARIANT* RelationshipsOut/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RecordsetType(Owc10_xp::DscRecordsetTypeEnum RecordsetType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RecordsetType(Owc10_xp::DscRecordsetTypeEnum* RecordsetType/*[out,retval]*/);
  Owc10_xp::DscRecordsetTypeEnum __fastcall get_RecordsetType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ValidateDrop(LPUNKNOWN UnknownDropGoo/*[in]*/, 
                                                     BSTR RecordSetDefName/*[in]*/, 
                                                     Owc10_xp::DscDropLocationEnum Location/*[in]*/
                                                     , Owc10_xp::DscDropTypeEnum Type/*[in]*/, 
                                                     BSTR* DropRowsource/*[out]*/, 
                                                     VARIANT* RowsourcesOut/*[out]*/, 
                                                     VARIANT* RelationshipsOut/*[out]*/, 
                                                     long* NumberOfDrops/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall HyperlinkPart(VARIANT Hyperlink/*[in]*/, 
                                                      Owc10_xp::DscHyperlinkPartEnum Part/*[in]*/, 
                                                      BSTR* Ret/*[out,retval]*/);
  BSTR            __fastcall HyperlinkPart(VARIANT Hyperlink/*[in]*/, 
                                           Owc10_xp::DscHyperlinkPartEnum Part/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SchemaRefresh();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall UpdateElementID(BSTR OldID, BSTR NewID);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllPageFields(Owc10_xp::AllPageFields** AllPageFields/*[out,retval]*/);
  Owc10_xp::AllPageFields* __fastcall get_AllPageFields(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CurrentSection(Owc10_xp::Section** Section/*[out,retval]*/);
  Owc10_xp::Section* __fastcall get_CurrentSection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ProviderType(VARIANT DataMember/*[in,opt]*/, 
                                                         Owc10_xp::ProviderType* ProviderType/*[out,retval]*/);
  Owc10_xp::ProviderType __fastcall get_ProviderType(VARIANT DataMember/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllGroupingDefs(Owc10_xp::AllGroupingDefs** AllGroupingDefs/*[out,retval]*/);
  Owc10_xp::AllGroupingDefs* __fastcall get_AllGroupingDefs(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayAlerts(VARIANT_BOOL DisplayAlerts/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayAlerts(VARIANT_BOOL* DisplayAlerts/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayAlerts(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DataPages(Owc10_xp::DataPages** DataPages/*[out,retval]*/);
  Owc10_xp::DataPages* __fastcall get_DataPages(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reset();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall getDataMemberName(long lIndex/*[in]*/, 
                                                          Msdatasrc_xp::DataMember* pbstrDM/*[out,retval]*/);
  Msdatasrc_xp::DataMember __fastcall getDataMemberName(long lIndex/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall getDataMemberCount(long* plcount/*[out,retval]*/);
  long            __fastcall getDataMemberCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GridX(long xGrid/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GridX(long* xGrid/*[out,retval]*/);
  long            __fastcall get_GridX(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GridY(long yGrid/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GridY(long* yGrid/*[out,retval]*/);
  long            __fastcall get_GridY(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LoadError(long* LoadError/*[out,retval]*/);
  long            __fastcall get_LoadError(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetSectionInfo(LPDISPATCH SectionElement/*[in]*/, 
                                                       BSTR* RecordSource/*[out]*/, 
                                                       Owc10_xp::SectTypeEnum* SectionType/*[out]*/
                                                       , Owc10_xp::GroupLevel** GroupLevel/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DeleteRecordSourceIfUnused(BSTR RecordSource/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DeletePageFieldIfUnused(BSTR RecordSource/*[in]*/, 
                                                                BSTR PageField/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DefaultControlType(Owc10_xp::DefaultControlTypeEnum ControlType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DefaultControlType(Owc10_xp::DefaultControlTypeEnum* ControlType/*[out,retval]*/);
  Owc10_xp::DefaultControlTypeEnum __fastcall get_DefaultControlType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IsDirty(VARIANT_BOOL IsDirty/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsDirty(VARIANT_BOOL* IsDirty/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsDirty(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Busy(VARIANT_BOOL* Busy/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Busy(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Version(BSTR* Version/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MajorVersion(long* MajorVersion/*[out,retval]*/);
  long            __fastcall get_MajorVersion(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MinorVersion(BSTR* MinorVersion/*[out,retval]*/);
  BSTR            __fastcall get_MinorVersion(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BuildNumber(BSTR* BuildNumber/*[out,retval]*/);
  BSTR            __fastcall get_BuildNumber(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RevisionNumber(BSTR* RevisionNumber/*[out,retval]*/);
  BSTR            __fastcall get_RevisionNumber(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ResetRecordset(BSTR bstrRecordset);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IsDataModelDirty(VARIANT_BOOL IsDataModelDirty/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsDataModelDirty(VARIANT_BOOL* IsDataModelDirty/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsDataModelDirty(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetExportableConnectString(Owc10_xp::ExportableConnectStringEnum ExportType/*[in]*/
                                                                   , BSTR* ConnectString/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ExportXML(Owc10_xp::DscEncodingEnum eEncoding/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetRootRecordset(BSTR RecordsetName/*[in]*/, 
                                                         Adodb_xp::Recordset* Recordset/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetOfflineDisplayInfo(BSTR* OnlineServer/*[out]*/, 
                                                              BSTR* OnlineDatabase/*[out]*/, 
                                                              BSTR* OfflineServer/*[out]*/, 
                                                              BSTR* OfflineDatabase/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OfflineType(Owc10_xp::DscOfflineTypeEnum Publication/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OfflineType(Owc10_xp::DscOfflineTypeEnum* Publication/*[out,retval]*/);
  Owc10_xp::DscOfflineTypeEnum __fastcall get_OfflineType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OfflinePublication(BSTR Publication/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OfflinePublication(BSTR* Publication/*[out,retval]*/);
  BSTR            __fastcall get_OfflinePublication(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Offline(VARIANT_BOOL* IsOffline/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Offline(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OfflineSource(BSTR Source/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OfflineSource(BSTR* Source/*[out,retval]*/);
  BSTR            __fastcall get_OfflineSource(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_XMLLocation(Owc10_xp::DscXMLLocationEnum Location/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_XMLLocation(Owc10_xp::DscXMLLocationEnum* Location/*[out,retval]*/);
  Owc10_xp::DscXMLLocationEnum __fastcall get_XMLLocation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_UseXMLData(VARIANT_BOOL UseXMLData/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_UseXMLData(VARIANT_BOOL* UseXMLData/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_UseXMLData(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_XMLDataTarget(BSTR Source/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_XMLDataTarget(BSTR* Source/*[out,retval]*/);
  BSTR            __fastcall get_XMLDataTarget(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Refresh(Owc10_xp::RefreshType RefreshType/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall FindRelatedGroupLevel(Owc10_xp::GroupLevel* pGroupLevel/*[in]*/
                                                              , long fChild/*[in]*/, 
                                                              Owc10_xp::GroupLevel** ppGrouplevel/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DllNotification(Owc10_xp::NotificationType Notification/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SuspendUndo(VARIANT_BOOL Suspend/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall UpdateFocus();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ConnectionFile(BSTR ConnectionFile/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ConnectionFile(BSTR* ConnectionFile/*[out,retval]*/);
  BSTR            __fastcall get_ConnectionFile(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IsValidDAPProvider(BSTR ConnectionString/*[in]*/, 
                                                           VARIANT_BOOL* IsValid/*[out,retval]*/);
  VARIANT_BOOL    __fastcall IsValidDAPProvider(BSTR ConnectionString/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DefaultRecordsetDefName(BSTR* DefaultRecordsetDefName/*[out,retval]*/);
  BSTR            __fastcall get_DefaultRecordsetDefName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall EuroConvert(double Number/*[in]*/, 
                                                    BSTR SourceCurrency/*[in]*/, 
                                                    BSTR TargetCurrency/*[in]*/, 
                                                    VARIANT FullPrecision/*[in,opt]*/, 
                                                    VARIANT TriangulationPrecision/*[in,opt]*/, 
                                                    double* pRet/*[out,retval]*/);
  double          __fastcall EuroConvert(double Number/*[in]*/, BSTR SourceCurrency/*[in]*/, 
                                         BSTR TargetCurrency/*[in]*/, 
                                         VARIANT FullPrecision/*[in,opt]*/= TNoParam(), 
                                         VARIANT TriangulationPrecision/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetDAPProviders(LPSAFEARRAY* Providers/*[out,retval]*/);
  LPSAFEARRAY     __fastcall GetDAPProviders(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetSynchronizing(VARIANT_BOOL Synchronizing/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ConnectionStringFullPath(BSTR* ConnectionStringFullPath/*[out,retval]*/);
  BSTR            __fastcall get_ConnectionStringFullPath(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetDisplayError(VARIANT_BOOL DisplayError/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IsNew(VARIANT_BOOL IsNew/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SchemaDiagrams(Owc10_xp::SchemaDiagrams** SchemaDiagrams/*[out,retval]*/);
  Owc10_xp::SchemaDiagrams* __fastcall get_SchemaDiagrams(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SuspendXMLReExecute(VARIANT_BOOL Suspend/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DBNSOwnerName(BSTR* OwnerName/*[out,retval]*/);
  BSTR            __fastcall get_DBNSOwnerName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetFirePropChange(VARIANT_BOOL FirePropChange/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Nz(VARIANT Value/*[in]*/, VARIANT ValueIfNull/*[in,opt]*/, 
                                           VARIANT* pRet/*[out,retval]*/);
  VARIANT         __fastcall Nz(VARIANT Value/*[in]*/, VARIANT ValueIfNull/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RefreshJetCache();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AutoRefreshOfflineSource();

  __property   BSTR            ConnectionString = {read = get_ConnectionString, write = set_ConnectionString};
  __property   BSTR            CurrentDirectory = {read = get_CurrentDirectory};
  __property   VARIANT_BOOL    UseRemoteProvider = {read = get_UseRemoteProvider, write = set_UseRemoteProvider};
  __property   Adodb_xp::Connection* Connection = {read = get_Connection};
  __property   VARIANT_BOOL    DataEntry = {read = get_DataEntry, write = set_DataEntry};
  __property   long            MaxRecords = {read = get_MaxRecords, write = set_MaxRecords};
  __property   Adodb_xp::Recordset* DefaultRecordset = {read = get_DefaultRecordset};
  __property   Owc10_xp::SchemaRowsources* SchemaRowsources = {read = get_SchemaRowsources};
  __property   Owc10_xp::SchemaRelationships* SchemaRelationships = {read = get_SchemaRelationships};
  __property   Owc10_xp::PageRowsources* PageRowsources = {read = get_PageRowsources};
  __property   Owc10_xp::RecordsetDefs* RecordsetDefs = {read = get_RecordsetDefs};
  __property   Owc10_xp::RecordsetDefs* RootRecordsetDefs = {read = get_RootRecordsetDefs};
  __property   LPDISPATCH      PivotDefs = {read = get_PivotDefs};
  __property   BSTR            DefaultRecordsetName = {read = get_DefaultRecordsetName, write = set_DefaultRecordsetName};
  __property   BSTR            XMLData = {read = get_XMLData, write = set_XMLData};
  __property   Owc10_xp::GroupLevels* GroupLevels = {read = get_GroupLevels};
  __property   LPDISPATCH      Constants = {read = get_Constants};
  __property   Owc10_xp::ElementExtensions* ElementExtensions = {read = get_ElementExtensions};
  __property   VARIANT_BOOL    IsNew = {read = get_IsNew, write = set_IsNew};
  __property   Owc10_xp::DscRecordsetTypeEnum RecordsetType = {read = get_RecordsetType, write = set_RecordsetType};
  __property   Owc10_xp::AllPageFields* AllPageFields = {read = get_AllPageFields};
  __property   Owc10_xp::Section* CurrentSection = {read = get_CurrentSection};
  __property   Owc10_xp::AllGroupingDefs* AllGroupingDefs = {read = get_AllGroupingDefs};
  __property   VARIANT_BOOL    DisplayAlerts = {read = get_DisplayAlerts, write = set_DisplayAlerts};
  __property   Owc10_xp::DataPages* DataPages = {read = get_DataPages};
  __property   long            GridX = {read = get_GridX, write = set_GridX};
  __property   long            GridY = {read = get_GridY, write = set_GridY};
  __property   long            LoadError = {read = get_LoadError};
  __property   Owc10_xp::DefaultControlTypeEnum DefaultControlType = {read = get_DefaultControlType, write = set_DefaultControlType};
  __property   VARIANT_BOOL    IsDirty = {read = get_IsDirty, write = set_IsDirty};
  __property   VARIANT_BOOL    Busy = {read = get_Busy};
  __property   BSTR            Version = {read = get_Version};
  __property   long            MajorVersion = {read = get_MajorVersion};
  __property   BSTR            MinorVersion = {read = get_MinorVersion};
  __property   BSTR            BuildNumber = {read = get_BuildNumber};
  __property   BSTR            RevisionNumber = {read = get_RevisionNumber};
  __property   VARIANT_BOOL    IsDataModelDirty = {read = get_IsDataModelDirty, write = set_IsDataModelDirty};
  __property   Owc10_xp::DscOfflineTypeEnum OfflineType = {read = get_OfflineType, write = set_OfflineType};
  __property   BSTR            OfflinePublication = {read = get_OfflinePublication, write = set_OfflinePublication};
  __property   VARIANT_BOOL    Offline = {read = get_Offline};
  __property   BSTR            OfflineSource = {read = get_OfflineSource, write = set_OfflineSource};
  __property   Owc10_xp::DscXMLLocationEnum XMLLocation = {read = get_XMLLocation, write = set_XMLLocation};
  __property   VARIANT_BOOL    UseXMLData = {read = get_UseXMLData, write = set_UseXMLData};
  __property   BSTR            XMLDataTarget = {read = get_XMLDataTarget, write = set_XMLDataTarget};
  __property   BSTR            ConnectionFile = {read = get_ConnectionFile, write = set_ConnectionFile};
  __property   BSTR            DefaultRecordsetDefName = {read = get_DefaultRecordsetDefName};
  __property   BSTR            ConnectionStringFullPath = {read = get_ConnectionStringFullPath};
  __property   Owc10_xp::SchemaDiagrams* SchemaDiagrams = {read = get_SchemaDiagrams};
  __property   BSTR            DBNSOwnerName = {read = get_DBNSOwnerName};
};
typedef IDataSourceControlDispT<IDataSourceControl> IDataSourceControlDisp;

typedef TComInterface<DSCEventInfo>  TCOMDSCEventInfo;

// *********************************************************************//
// DispIntf:  DSCEventInfo
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B06-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class DSCEventInfoDispT : public TAutoDriver<DSCEventInfo>
{
public:
  DSCEventInfoDispT(){}

  DSCEventInfoDispT(DSCEventInfo *pintf)
  {
    TAutoDriver<DSCEventInfo>::Bind(pintf, false);
  }

  DSCEventInfoDispT(DSCEventInfoPtr pintf)
  {
    TAutoDriver<DSCEventInfo>::Bind(pintf, true);
  }

  DSCEventInfoDispT& operator=(DSCEventInfo *pintf)
  {
    TAutoDriver<DSCEventInfo>::Bind(pintf, false);
    return *this;
  }

  DSCEventInfoDispT& operator=(DSCEventInfoPtr pintf)
  {
    TAutoDriver<DSCEventInfo>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DataPage(Owc10_xp::DataPage** DataPage/*[out,retval]*/);
  Owc10_xp::DataPage* __fastcall get_DataPage(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Section(Owc10_xp::Section** Section/*[out,retval]*/);
  Owc10_xp::Section* __fastcall get_Section(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Error(Adodb_xp::Error** Error/*[out,retval]*/);
  Adodb_xp::Error* __fastcall get_Error(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ReturnValue(VARIANT_BOOL* ReturnValue/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ReturnValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ReturnValue(VARIANT_BOOL ReturnValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PercentComplete(long* PercentComplete/*[out,retval]*/);
  long            __fastcall get_PercentComplete(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Status(Owc10_xp::DscStatusEnum* Status/*[out,retval]*/);
  Owc10_xp::DscStatusEnum __fastcall get_Status(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayAlert(Owc10_xp::DscDisplayAlert DisplayAlert/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayAlert(Owc10_xp::DscDisplayAlert* DisplayAlert/*[out,retval]*/);
  Owc10_xp::DscDisplayAlert __fastcall get_DisplayAlert(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Connection(Adodb_xp::Connection** Connection/*[out,retval]*/);
  Adodb_xp::Connection* __fastcall get_Connection(void);

  __property   Owc10_xp::DataPage* DataPage = {read = get_DataPage};
  __property   Owc10_xp::Section* Section = {read = get_Section};
  __property   Adodb_xp::Error* Error = {read = get_Error};
  __property   VARIANT_BOOL    ReturnValue = {read = get_ReturnValue, write = set_ReturnValue};
  __property   long            PercentComplete = {read = get_PercentComplete};
  __property   Owc10_xp::DscStatusEnum Status = {read = get_Status};
  __property   Owc10_xp::DscDisplayAlert DisplayAlert = {read = get_DisplayAlert, write = set_DisplayAlert};
  __property   Adodb_xp::Connection* Connection = {read = get_Connection};
};
typedef DSCEventInfoDispT<DSCEventInfo> DSCEventInfoDisp;

// *********************************************************************//
// DispIntf:  _DataSourceControlEvent
// Flags:     (4096) Dispatchable
// GUID:      {F5B39A9B-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T>
class _DataSourceControlEventDispT : public TAutoDriver<_DataSourceControlEvent>
{
public:
  _DataSourceControlEventDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall Current(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall BeforeExpand(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall BeforeCollapse(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall BeforeFirstPage(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall BeforePreviousPage(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall BeforeNextPage(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall BeforeLastPage(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall DataError(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall DataPageComplete(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall BeforeInitialBind(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall RecordsetSaveProgress(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall AfterDelete(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall AfterInsert(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall AfterUpdate(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall BeforeDelete(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall BeforeInsert(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall BeforeOverwrite(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall BeforeUpdate(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall Dirty(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall RecordExit(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall Undo(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall Focus(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/);

};
typedef _DataSourceControlEventDispT<_DataSourceControlEvent> _DataSourceControlEventDisp;

// *********************************************************************//
// SmartIntf: TCOMINavigationControl
// Interface: INavigationControl
// *********************************************************************//
template <class T /* INavigationControl */ >
class TCOMINavigationControlT : public TComInterface<INavigationControl>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMINavigationControlT() {}
  TCOMINavigationControlT(INavigationControl *intf, bool addRef = false) : TComInterface<INavigationControl>(intf, addRef) {}
  TCOMINavigationControlT(const TCOMINavigationControlT& src) : TComInterface<INavigationControl>(src) {}
  TCOMINavigationControlT& operator=(const TCOMINavigationControlT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall set_DataSource(Msdatasrc_xp::DataSource* DataSource/*[in]*/);
  HRESULT         __fastcall set_DataSource(Msdatasrc_xp::DataSourcePtr DataSource/*[in]*/);
  HRESULT         __fastcall get_DataSource(Msdatasrc_xp::DataSource** DataSource/*[out,retval]*/);
  HRESULT         __fastcall get_DataSource(Msdatasrc_xp::DataSourcePtr* DataSource/*[out,retval]*/);
  Msdatasrc_xp::DataSourcePtr __fastcall get_DataSource(void);
  HRESULT         __fastcall set_RecordSource(Msdatasrc_xp::DataMember RecordSource/*[in]*/);
  HRESULT         __fastcall get_RecordSource(Msdatasrc_xp::DataMember* RecordSource/*[out,retval]*/);
  Msdatasrc_xp::DataMember __fastcall get_RecordSource(void);
  HRESULT         __fastcall set_RecordsetLabel(BSTR RecordsetLabel/*[in]*/);
  HRESULT         __fastcall get_RecordsetLabel(BSTR* RecordsetLabel/*[out,retval]*/);
  BSTR            __fastcall get_RecordsetLabel(void);
  HRESULT         __fastcall set_ShowFirstButton(VARIANT_BOOL Show/*[in]*/);
  HRESULT         __fastcall set_ShowFirstButton(TOLEBOOL Show/*[in]*/);
  HRESULT         __fastcall get_ShowFirstButton(VARIANT_BOOL* Show/*[out,retval]*/);
  HRESULT         __fastcall get_ShowFirstButton(TOLEBOOL* Show/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ShowFirstButton(void);
  HRESULT         __fastcall set_ShowPrevButton(VARIANT_BOOL Show/*[in]*/);
  HRESULT         __fastcall set_ShowPrevButton(TOLEBOOL Show/*[in]*/);
  HRESULT         __fastcall get_ShowPrevButton(VARIANT_BOOL* Show/*[out,retval]*/);
  HRESULT         __fastcall get_ShowPrevButton(TOLEBOOL* Show/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ShowPrevButton(void);
  HRESULT         __fastcall set_ShowNextButton(VARIANT_BOOL Show/*[in]*/);
  HRESULT         __fastcall set_ShowNextButton(TOLEBOOL Show/*[in]*/);
  HRESULT         __fastcall get_ShowNextButton(VARIANT_BOOL* Show/*[out,retval]*/);
  HRESULT         __fastcall get_ShowNextButton(TOLEBOOL* Show/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ShowNextButton(void);
  HRESULT         __fastcall set_ShowLastButton(VARIANT_BOOL Show/*[in]*/);
  HRESULT         __fastcall set_ShowLastButton(TOLEBOOL Show/*[in]*/);
  HRESULT         __fastcall get_ShowLastButton(VARIANT_BOOL* Show/*[out,retval]*/);
  HRESULT         __fastcall get_ShowLastButton(TOLEBOOL* Show/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ShowLastButton(void);
  HRESULT         __fastcall set_ShowNewButton(VARIANT_BOOL Show/*[in]*/);
  HRESULT         __fastcall set_ShowNewButton(TOLEBOOL Show/*[in]*/);
  HRESULT         __fastcall get_ShowNewButton(VARIANT_BOOL* Show/*[out,retval]*/);
  HRESULT         __fastcall get_ShowNewButton(TOLEBOOL* Show/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ShowNewButton(void);
  HRESULT         __fastcall set_ShowDelButton(VARIANT_BOOL Show/*[in]*/);
  HRESULT         __fastcall set_ShowDelButton(TOLEBOOL Show/*[in]*/);
  HRESULT         __fastcall get_ShowDelButton(VARIANT_BOOL* Show/*[out,retval]*/);
  HRESULT         __fastcall get_ShowDelButton(TOLEBOOL* Show/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ShowDelButton(void);
  HRESULT         __fastcall set_ShowSaveButton(VARIANT_BOOL Show/*[in]*/);
  HRESULT         __fastcall set_ShowSaveButton(TOLEBOOL Show/*[in]*/);
  HRESULT         __fastcall get_ShowSaveButton(VARIANT_BOOL* Show/*[out,retval]*/);
  HRESULT         __fastcall get_ShowSaveButton(TOLEBOOL* Show/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ShowSaveButton(void);
  HRESULT         __fastcall set_ShowUndoButton(VARIANT_BOOL Show/*[in]*/);
  HRESULT         __fastcall set_ShowUndoButton(TOLEBOOL Show/*[in]*/);
  HRESULT         __fastcall get_ShowUndoButton(VARIANT_BOOL* Show/*[out,retval]*/);
  HRESULT         __fastcall get_ShowUndoButton(TOLEBOOL* Show/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ShowUndoButton(void);
  HRESULT         __fastcall set_ShowSortAscendingButton(VARIANT_BOOL Show/*[in]*/);
  HRESULT         __fastcall set_ShowSortAscendingButton(TOLEBOOL Show/*[in]*/);
  HRESULT         __fastcall get_ShowSortAscendingButton(VARIANT_BOOL* Show/*[out,retval]*/);
  HRESULT         __fastcall get_ShowSortAscendingButton(TOLEBOOL* Show/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ShowSortAscendingButton(void);
  HRESULT         __fastcall set_ShowSortDescendingButton(VARIANT_BOOL Show/*[in]*/);
  HRESULT         __fastcall set_ShowSortDescendingButton(TOLEBOOL Show/*[in]*/);
  HRESULT         __fastcall get_ShowSortDescendingButton(VARIANT_BOOL* Show/*[out,retval]*/);
  HRESULT         __fastcall get_ShowSortDescendingButton(TOLEBOOL* Show/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ShowSortDescendingButton(void);
  HRESULT         __fastcall set_ShowFilterBySelectionButton(VARIANT_BOOL pfShow/*[in]*/);
  HRESULT         __fastcall set_ShowFilterBySelectionButton(TOLEBOOL pfShow/*[in]*/);
  HRESULT         __fastcall get_ShowFilterBySelectionButton(VARIANT_BOOL* pfShow/*[out,retval]*/);
  HRESULT         __fastcall get_ShowFilterBySelectionButton(TOLEBOOL* pfShow/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ShowFilterBySelectionButton(void);
  HRESULT         __fastcall set_ShowToggleFilterButton(VARIANT_BOOL Show/*[in]*/);
  HRESULT         __fastcall set_ShowToggleFilterButton(TOLEBOOL Show/*[in]*/);
  HRESULT         __fastcall get_ShowToggleFilterButton(VARIANT_BOOL* Show/*[out,retval]*/);
  HRESULT         __fastcall get_ShowToggleFilterButton(TOLEBOOL* Show/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ShowToggleFilterButton(void);
  HRESULT         __fastcall set_ShowHelpButton(VARIANT_BOOL Show/*[in]*/);
  HRESULT         __fastcall set_ShowHelpButton(TOLEBOOL Show/*[in]*/);
  HRESULT         __fastcall get_ShowHelpButton(VARIANT_BOOL* Show/*[out,retval]*/);
  HRESULT         __fastcall get_ShowHelpButton(TOLEBOOL* Show/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ShowHelpButton(void);
  HRESULT         __fastcall set_ShowLabel(VARIANT_BOOL Show/*[in]*/);
  HRESULT         __fastcall set_ShowLabel(TOLEBOOL Show/*[in]*/);
  HRESULT         __fastcall get_ShowLabel(VARIANT_BOOL* Show/*[out,retval]*/);
  HRESULT         __fastcall get_ShowLabel(TOLEBOOL* Show/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ShowLabel(void);
  HRESULT         __fastcall IsButtonEnabled(Owc10_xp::NavButtonEnum navbtn/*[in]*/, 
                                             VARIANT_BOOL* Enabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall IsButtonEnabled(Owc10_xp::NavButtonEnum navbtn/*[in]*/);
  HRESULT         __fastcall set_FontName(BSTR FontName/*[in]*/);
  HRESULT         __fastcall get_FontName(BSTR* FontName/*[out,retval]*/);
  BSTR            __fastcall get_FontName(void);
  HRESULT         __fastcall get__State(BSTR* State/*[out,retval]*/);
  BSTR            __fastcall get__State(void);
  HRESULT         __fastcall set__State(BSTR State/*[in]*/);
  HRESULT         __fastcall Redraw(void);
  HRESULT         __fastcall ReleaseDataPage(void);

  __property   Msdatasrc_xp::DataSourcePtr DataSource = {write = set_DataSource};
  __property   Msdatasrc_xp::DataMember RecordSource = {read = get_RecordSource, write = set_RecordSource};
  __property   BSTR            RecordsetLabel = {read = get_RecordsetLabel, write = set_RecordsetLabel};
  __property   TOLEBOOL        ShowFirstButton = {write = set_ShowFirstButton};
  __property   TOLEBOOL        ShowPrevButton = {write = set_ShowPrevButton};
  __property   TOLEBOOL        ShowNextButton = {write = set_ShowNextButton};
  __property   TOLEBOOL        ShowLastButton = {write = set_ShowLastButton};
  __property   TOLEBOOL        ShowNewButton = {write = set_ShowNewButton};
  __property   TOLEBOOL        ShowDelButton = {write = set_ShowDelButton};
  __property   TOLEBOOL        ShowSaveButton = {write = set_ShowSaveButton};
  __property   TOLEBOOL        ShowUndoButton = {write = set_ShowUndoButton};
  __property   TOLEBOOL        ShowSortAscendingButton = {write = set_ShowSortAscendingButton};
  __property   TOLEBOOL        ShowSortDescendingButton = {write = set_ShowSortDescendingButton};
  __property   TOLEBOOL        ShowFilterBySelectionButton = {write = set_ShowFilterBySelectionButton};
  __property   TOLEBOOL        ShowToggleFilterButton = {write = set_ShowToggleFilterButton};
  __property   TOLEBOOL        ShowHelpButton = {write = set_ShowHelpButton};
  __property   TOLEBOOL        ShowLabel = {write = set_ShowLabel};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   BSTR            _State = {read = get__State};
};
typedef TCOMINavigationControlT<INavigationControl> TCOMINavigationControl;

// *********************************************************************//
// DispIntf:  INavigationControl
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AA8-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class INavigationControlDispT : public TAutoDriver<INavigationControl>
{
public:
  INavigationControlDispT(){}

  INavigationControlDispT(INavigationControl *pintf)
  {
    TAutoDriver<INavigationControl>::Bind(pintf, false);
  }

  INavigationControlDispT(INavigationControlPtr pintf)
  {
    TAutoDriver<INavigationControl>::Bind(pintf, true);
  }

  INavigationControlDispT& operator=(INavigationControl *pintf)
  {
    TAutoDriver<INavigationControl>::Bind(pintf, false);
    return *this;
  }

  INavigationControlDispT& operator=(INavigationControlPtr pintf)
  {
    TAutoDriver<INavigationControl>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_RecordNavigationControl));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_RecordNavigationControl);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DataSource(Msdatasrc_xp::DataSource* DataSource/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DataSource(Msdatasrc_xp::DataSource** DataSource/*[out,retval]*/);
  Msdatasrc_xp::DataSource* __fastcall get_DataSource(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RecordSource(Msdatasrc_xp::DataMember RecordSource/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RecordSource(Msdatasrc_xp::DataMember* RecordSource/*[out,retval]*/);
  Msdatasrc_xp::DataMember __fastcall get_RecordSource(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RecordsetLabel(BSTR RecordsetLabel/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RecordsetLabel(BSTR* RecordsetLabel/*[out,retval]*/);
  BSTR            __fastcall get_RecordsetLabel(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowFirstButton(VARIANT_BOOL Show/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowFirstButton(VARIANT_BOOL* Show/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowFirstButton(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowPrevButton(VARIANT_BOOL Show/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowPrevButton(VARIANT_BOOL* Show/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowPrevButton(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowNextButton(VARIANT_BOOL Show/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowNextButton(VARIANT_BOOL* Show/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowNextButton(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowLastButton(VARIANT_BOOL Show/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowLastButton(VARIANT_BOOL* Show/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowLastButton(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowNewButton(VARIANT_BOOL Show/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowNewButton(VARIANT_BOOL* Show/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowNewButton(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowDelButton(VARIANT_BOOL Show/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowDelButton(VARIANT_BOOL* Show/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowDelButton(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowSaveButton(VARIANT_BOOL Show/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowSaveButton(VARIANT_BOOL* Show/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowSaveButton(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowUndoButton(VARIANT_BOOL Show/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowUndoButton(VARIANT_BOOL* Show/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowUndoButton(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowSortAscendingButton(VARIANT_BOOL Show/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowSortAscendingButton(VARIANT_BOOL* Show/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowSortAscendingButton(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowSortDescendingButton(VARIANT_BOOL Show/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowSortDescendingButton(VARIANT_BOOL* Show/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowSortDescendingButton(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowFilterBySelectionButton(VARIANT_BOOL pfShow/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowFilterBySelectionButton(VARIANT_BOOL* pfShow/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowFilterBySelectionButton(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowToggleFilterButton(VARIANT_BOOL Show/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowToggleFilterButton(VARIANT_BOOL* Show/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowToggleFilterButton(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowHelpButton(VARIANT_BOOL Show/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowHelpButton(VARIANT_BOOL* Show/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowHelpButton(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowLabel(VARIANT_BOOL Show/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowLabel(VARIANT_BOOL* Show/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowLabel(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IsButtonEnabled(Owc10_xp::NavButtonEnum navbtn/*[in]*/, 
                                                        VARIANT_BOOL* Enabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall IsButtonEnabled(Owc10_xp::NavButtonEnum navbtn/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontName(BSTR FontName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontName(BSTR* FontName/*[out,retval]*/);
  BSTR            __fastcall get_FontName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__State(BSTR* State/*[out,retval]*/);
  BSTR            __fastcall get__State(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set__State(BSTR State/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Redraw();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ReleaseDataPage();

  __property   Msdatasrc_xp::DataSource* DataSource = {read = get_DataSource, write = set_DataSource};
  __property   Msdatasrc_xp::DataMember RecordSource = {read = get_RecordSource, write = set_RecordSource};
  __property   BSTR            RecordsetLabel = {read = get_RecordsetLabel, write = set_RecordsetLabel};
  __property   VARIANT_BOOL    ShowFirstButton = {read = get_ShowFirstButton, write = set_ShowFirstButton};
  __property   VARIANT_BOOL    ShowPrevButton = {read = get_ShowPrevButton, write = set_ShowPrevButton};
  __property   VARIANT_BOOL    ShowNextButton = {read = get_ShowNextButton, write = set_ShowNextButton};
  __property   VARIANT_BOOL    ShowLastButton = {read = get_ShowLastButton, write = set_ShowLastButton};
  __property   VARIANT_BOOL    ShowNewButton = {read = get_ShowNewButton, write = set_ShowNewButton};
  __property   VARIANT_BOOL    ShowDelButton = {read = get_ShowDelButton, write = set_ShowDelButton};
  __property   VARIANT_BOOL    ShowSaveButton = {read = get_ShowSaveButton, write = set_ShowSaveButton};
  __property   VARIANT_BOOL    ShowUndoButton = {read = get_ShowUndoButton, write = set_ShowUndoButton};
  __property   VARIANT_BOOL    ShowSortAscendingButton = {read = get_ShowSortAscendingButton, write = set_ShowSortAscendingButton};
  __property   VARIANT_BOOL    ShowSortDescendingButton = {read = get_ShowSortDescendingButton, write = set_ShowSortDescendingButton};
  __property   VARIANT_BOOL    ShowFilterBySelectionButton = {read = get_ShowFilterBySelectionButton, write = set_ShowFilterBySelectionButton};
  __property   VARIANT_BOOL    ShowToggleFilterButton = {read = get_ShowToggleFilterButton, write = set_ShowToggleFilterButton};
  __property   VARIANT_BOOL    ShowHelpButton = {read = get_ShowHelpButton, write = set_ShowHelpButton};
  __property   VARIANT_BOOL    ShowLabel = {read = get_ShowLabel, write = set_ShowLabel};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   BSTR            _State = {read = get__State};
};
typedef INavigationControlDispT<INavigationControl> INavigationControlDisp;

typedef TComInterface<INavUIHost>  TCOMINavUIHost;

// *********************************************************************//
// DispIntf:  _NavigationEvent
// Flags:     (4096) Dispatchable
// GUID:      {4BD09D02-45CC-11D1-B1D1-006097C97F9B}
// *********************************************************************//
template <class T>
class _NavigationEventDispT : public TAutoDriver<_NavigationEvent>
{
public:
  _NavigationEventDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall ButtonClick(Owc10_xp::NavButtonEnum NavButton/*[in]*/);

};
typedef _NavigationEventDispT<_NavigationEvent> _NavigationEventDisp;

typedef TComInterface<IDataPageDesigner>  TCOMIDataPageDesigner;

typedef TComInterface<IOleUndoManager>  TCOMIOleUndoManager;

typedef TComInterface<IOleUndoUnit>  TCOMIOleUndoUnit;

typedef TComInterface<IOleParentUndoUnit>  TCOMIOleParentUndoUnit;

typedef TComInterface<IEnumOleUndoUnits>  TCOMIEnumOleUndoUnits;

typedef TComInterface<ISimpleDataConverter>  TCOMISimpleDataConverter;

typedef TComInterface<FieldListHierarchy>  TCOMFieldListHierarchy;

// *********************************************************************//
// DispIntf:  FieldListHierarchy
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {7BD180A4-0406-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class FieldListHierarchyDispT : public TAutoDriver<FieldListHierarchy>
{
public:
  FieldListHierarchyDispT(){}

  FieldListHierarchyDispT(FieldListHierarchy *pintf)
  {
    TAutoDriver<FieldListHierarchy>::Bind(pintf, false);
  }

  FieldListHierarchyDispT(FieldListHierarchyPtr pintf)
  {
    TAutoDriver<FieldListHierarchy>::Bind(pintf, true);
  }

  FieldListHierarchyDispT& operator=(FieldListHierarchy *pintf)
  {
    TAutoDriver<FieldListHierarchy>::Bind(pintf, false);
    return *this;
  }

  FieldListHierarchyDispT& operator=(FieldListHierarchyPtr pintf)
  {
    TAutoDriver<FieldListHierarchy>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetHierarchySite(Owc10_xp::FieldListHierarchySite* pflhs/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddNode(Owc10_xp::FieldListNode* pflnParent/*[in]*/, 
                                                VARIANT_BOOL fInsertFirst/*[in]*/, long nID/*[in]*/
                                                , BSTR bstrName/*[in]*/, BSTR bstrData/*[in]*/, 
                                                long nType/*[in]*/, 
                                                Owc10_xp::FieldListNode** ppfln/*[out,retval]*/);
  Owc10_xp::FieldListNode* __fastcall AddNode(Owc10_xp::FieldListNode* pflnParent/*[in]*/, 
                                              VARIANT_BOOL fInsertFirst/*[in]*/, long nID/*[in]*/, 
                                              BSTR bstrName/*[in]*/, BSTR bstrData/*[in]*/, 
                                              long nType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetNode(long nID/*[in]*/, 
                                                Owc10_xp::FieldListNode** ppfln/*[out,retval]*/);
  Owc10_xp::FieldListNode* __fastcall GetNode(long nID/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RemoveNode(Owc10_xp::FieldListNode* pfln/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Root(Owc10_xp::FieldListNode** pVal/*[out,retval]*/);
  Owc10_xp::FieldListNode* __fastcall get_Root(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(VARIANT_BOOL pVal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddType(long nType/*[in]*/, 
                                                Owc10_xp::FieldListType** ppflt/*[out,retval]*/);
  Owc10_xp::FieldListType* __fastcall AddType(long nType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetType(long nTypeId, 
                                                Owc10_xp::FieldListType** ppflt/*[out,retval]*/);
  Owc10_xp::FieldListType* __fastcall GetType(long nTypeId);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Selection(Owc10_xp::FieldListNode** pVal/*[out,retval]*/);
  Owc10_xp::FieldListNode* __fastcall get_Selection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ConcatenateData(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ConcatenateData(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ConcatenateData(VARIANT_BOOL pVal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DataSeparator(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_DataSeparator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DataSeparator(BSTR pVal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetNextSelected(Owc10_xp::FieldListNode* pfln/*[in]*/, 
                                                        Owc10_xp::FieldListNode** ppfln/*[out,retval]*/);
  Owc10_xp::FieldListNode* __fastcall GetNextSelected(Owc10_xp::FieldListNode* pfln/*[in]*/);

  __property   Owc10_xp::FieldListNode* Root = {read = get_Root};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   Owc10_xp::FieldListNode* Selection = {read = get_Selection};
  __property   VARIANT_BOOL    ConcatenateData = {read = get_ConcatenateData, write = set_ConcatenateData};
  __property   BSTR            DataSeparator = {read = get_DataSeparator};
};
typedef FieldListHierarchyDispT<FieldListHierarchy> FieldListHierarchyDisp;

typedef TComInterface<FieldListHierarchySite>  TCOMFieldListHierarchySite;

typedef TComInterface<FieldListNode>  TCOMFieldListNode;

// *********************************************************************//
// DispIntf:  FieldListNode
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F7DDE2F0-0895-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class FieldListNodeDispT : public TAutoDriver<FieldListNode>
{
public:
  FieldListNodeDispT(){}

  FieldListNodeDispT(FieldListNode *pintf)
  {
    TAutoDriver<FieldListNode>::Bind(pintf, false);
  }

  FieldListNodeDispT(FieldListNodePtr pintf)
  {
    TAutoDriver<FieldListNode>::Bind(pintf, true);
  }

  FieldListNodeDispT& operator=(FieldListNode *pintf)
  {
    TAutoDriver<FieldListNode>::Bind(pintf, false);
    return *this;
  }

  FieldListNodeDispT& operator=(FieldListNodePtr pintf)
  {
    TAutoDriver<FieldListNode>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_id(long* pVal/*[out,retval]*/);
  long            __fastcall get_id(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TypeId(long* pVal/*[out,retval]*/);
  long            __fastcall get_TypeId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Expanded(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Expanded(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Expanded(VARIANT_BOOL pVal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Selected(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Selected(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Selected(VARIANT_BOOL pVal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Owc10_xp::FieldListNode** pVal/*[out,retval]*/);
  Owc10_xp::FieldListNode* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Child(Owc10_xp::FieldListNode** pVal/*[out,retval]*/);
  Owc10_xp::FieldListNode* __fastcall get_Child(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NextSibling(Owc10_xp::FieldListNode** pVal/*[out,retval]*/);
  Owc10_xp::FieldListNode* __fastcall get_NextSibling(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PrevSibling(Owc10_xp::FieldListNode** pVal/*[out,retval]*/);
  Owc10_xp::FieldListNode* __fastcall get_PrevSibling(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Bold(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Bold(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Bold(VARIANT_BOOL pVal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Image(int* pVal/*[out,retval]*/);
  int             __fastcall get_Image(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Image(int pVal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Populated(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Populated(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Populated(VARIANT_BOOL pVal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Data(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Data(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Data(BSTR pVal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InfoTip(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InfoTip(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_InfoTip(BSTR pVal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasCaret(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HasCaret(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasCaret(VARIANT_BOOL pVal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Hierarchy(Owc10_xp::FieldListHierarchy** pVal/*[out,retval]*/);
  Owc10_xp::FieldListHierarchy* __fastcall get_Hierarchy(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OverlayImage(int* pVal/*[out,retval]*/);
  int             __fastcall get_OverlayImage(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OverlayImage(int pVal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SortChildren(VARIANT_BOOL vbByData);

  __property   long            id = {read = get_id};
  __property   BSTR            Name = {read = get_Name};
  __property   long            TypeId = {read = get_TypeId};
  __property   VARIANT_BOOL    Expanded = {read = get_Expanded, write = set_Expanded};
  __property   VARIANT_BOOL    Selected = {read = get_Selected, write = set_Selected};
  __property   Owc10_xp::FieldListNode* Parent = {read = get_Parent};
  __property   Owc10_xp::FieldListNode* Child = {read = get_Child};
  __property   Owc10_xp::FieldListNode* NextSibling = {read = get_NextSibling};
  __property   Owc10_xp::FieldListNode* PrevSibling = {read = get_PrevSibling};
  __property   VARIANT_BOOL    Bold = {read = get_Bold, write = set_Bold};
  __property   int             Image = {read = get_Image, write = set_Image};
  __property   VARIANT_BOOL    Populated = {read = get_Populated, write = set_Populated};
  __property   BSTR            Data = {read = get_Data};
  __property   BSTR            InfoTip = {read = get_InfoTip};
  __property   VARIANT_BOOL    HasCaret = {read = get_HasCaret, write = set_HasCaret};
  __property   Owc10_xp::FieldListHierarchy* Hierarchy = {read = get_Hierarchy};
  __property   int             OverlayImage = {read = get_OverlayImage, write = set_OverlayImage};
};
typedef FieldListNodeDispT<FieldListNode> FieldListNodeDisp;

typedef TComInterface<FieldListType>  TCOMFieldListType;

// *********************************************************************//
// DispIntf:  FieldListType
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {63F85AD0-1ACC-11D3-854A-00C04FAC67D7}
// *********************************************************************//
template<class T>
class FieldListTypeDispT : public TAutoDriver<FieldListType>
{
public:
  FieldListTypeDispT(){}

  FieldListTypeDispT(FieldListType *pintf)
  {
    TAutoDriver<FieldListType>::Bind(pintf, false);
  }

  FieldListTypeDispT(FieldListTypePtr pintf)
  {
    TAutoDriver<FieldListType>::Bind(pintf, true);
  }

  FieldListTypeDispT& operator=(FieldListType *pintf)
  {
    TAutoDriver<FieldListType>::Bind(pintf, false);
    return *this;
  }

  FieldListTypeDispT& operator=(FieldListTypePtr pintf)
  {
    TAutoDriver<FieldListType>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CanDrag(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CanDrag(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CanDrag(VARIANT_BOOL pVal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CallbackForChildren(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CallbackForChildren(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CallbackForChildren(VARIANT_BOOL pVal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TypeMenu(unsigned* pVal/*[out,retval]*/);
  unsigned        __fastcall get_TypeMenu(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TypeMenu(unsigned pVal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Image(int* pVal/*[out,retval]*/);
  int             __fastcall get_Image(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Image(int pVal/*[in]*/);

  __property   VARIANT_BOOL    CanDrag = {read = get_CanDrag, write = set_CanDrag};
  __property   VARIANT_BOOL    CallbackForChildren = {read = get_CallbackForChildren, write = set_CallbackForChildren};
  __property   unsigned        TypeMenu = {read = get_TypeMenu, write = set_TypeMenu};
  __property   int             Image = {read = get_Image, write = set_Image};
};
typedef FieldListTypeDispT<FieldListType> FieldListTypeDisp;

// *********************************************************************//
// SmartIntf: TCOMFieldList
// Interface: FieldList
// *********************************************************************//
template <class T /* FieldList */ >
class TCOMFieldListT : public TComInterface<FieldList>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMFieldListT() {}
  TCOMFieldListT(FieldList *intf, bool addRef = false) : TComInterface<FieldList>(intf, addRef) {}
  TCOMFieldListT(const TCOMFieldListT& src) : TComInterface<FieldList>(src) {}
  TCOMFieldListT& operator=(const TCOMFieldListT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall CreateHierarchy(VARIANT_BOOL bVisible/*[in]*/, 
                                             Owc10_xp::FieldListHierarchy** ppflh/*[out,retval]*/);
  Owc10_xp::FieldListHierarchy* __fastcall CreateHierarchy(VARIANT_BOOL bVisible/*[in]*/);
  HRESULT         __fastcall get_ClipboardFormat(int* pVal/*[out,retval]*/);
  int             __fastcall get_ClipboardFormat(void);
  HRESULT         __fastcall AddBitmap(int iWidth, int iHeight, IPicture* pip/*[in]*/, 
                                       unsigned_long crMask, int* pIndex/*[out,retval]*/);
  int             __fastcall AddBitmap(int iWidth, int iHeight, IPicture* pip/*[in]*/, 
                                       unsigned_long crMask);
  HRESULT         __fastcall get_InstanceID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InstanceID(void);
  HRESULT         __fastcall get_Font(IFont** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_Font(IFontPtr* pVal/*[out,retval]*/);
  IFontPtr        __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(IFont* pVal/*[in]*/);
  HRESULT         __fastcall set_Font(IFontPtr pVal/*[in]*/);
  HRESULT         __fastcall get_MultiSelect(VARIANT_BOOL* pVal/*[out,retval]*/);
  HRESULT         __fastcall get_MultiSelect(TOLEBOOL* pVal/*[out,retval]*/);
  TOLEBOOL        __fastcall get_MultiSelect(void);
  HRESULT         __fastcall set_MultiSelect(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall set_MultiSelect(TOLEBOOL pVal/*[in]*/);
  HRESULT         __fastcall get_SelectRestriction(Owc10_xp::FieldListSelectRestriction* pVal/*[out,retval]*/);
  Owc10_xp::FieldListSelectRestriction __fastcall get_SelectRestriction(void);
  HRESULT         __fastcall set_SelectRestriction(Owc10_xp::FieldListSelectRestriction pVal/*[in]*/);
  HRESULT         __fastcall GetNextSelected(Owc10_xp::FieldListNode* pfln/*[in]*/, 
                                             Owc10_xp::FieldListNode** ppfln/*[out,retval]*/);
  Owc10_xp::FieldListNode* __fastcall GetNextSelected(Owc10_xp::FieldListNode* pfln/*[in]*/);
  HRESULT         __fastcall ClearSelection(void);
  HRESULT         __fastcall SetOverlayImage(int iImage, int iOverlay);

  __property   int             ClipboardFormat = {read = get_ClipboardFormat};
  __property   BSTR            InstanceID = {read = get_InstanceID};
  __property   IFontPtr        Font = {read = get_Font, write = set_Font};
  __property   TOLEBOOL        MultiSelect = {read = get_MultiSelect, write = set_MultiSelect};
  __property   Owc10_xp::FieldListSelectRestriction SelectRestriction = {read = get_SelectRestriction, write = set_SelectRestriction};
};
typedef TCOMFieldListT<FieldList> TCOMFieldList;

// *********************************************************************//
// DispIntf:  FieldList
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {7BD1809E-0406-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class FieldListDispT : public TAutoDriver<FieldList>
{
public:
  FieldListDispT(){}

  FieldListDispT(FieldList *pintf)
  {
    TAutoDriver<FieldList>::Bind(pintf, false);
  }

  FieldListDispT(FieldListPtr pintf)
  {
    TAutoDriver<FieldList>::Bind(pintf, true);
  }

  FieldListDispT& operator=(FieldList *pintf)
  {
    TAutoDriver<FieldList>::Bind(pintf, false);
    return *this;
  }

  FieldListDispT& operator=(FieldListPtr pintf)
  {
    TAutoDriver<FieldList>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_FieldListControl));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_FieldListControl);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall CreateHierarchy(VARIANT_BOOL bVisible/*[in]*/, 
                                                        Owc10_xp::FieldListHierarchy** ppflh/*[out,retval]*/);
  Owc10_xp::FieldListHierarchy* __fastcall CreateHierarchy(VARIANT_BOOL bVisible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ClipboardFormat(int* pVal/*[out,retval]*/);
  int             __fastcall get_ClipboardFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddBitmap(int iWidth, int iHeight, IPicture* pip/*[in]*/, 
                                                  unsigned_long crMask, int* pIndex/*[out,retval]*/);
  int             __fastcall AddBitmap(int iWidth, int iHeight, IPicture* pip/*[in]*/, 
                                       unsigned_long crMask);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InstanceID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InstanceID(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Font(IFont** pVal/*[out,retval]*/);
  IFont*          __fastcall get_Font(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Font(IFont* pVal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MultiSelect(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MultiSelect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MultiSelect(VARIANT_BOOL pVal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SelectRestriction(Owc10_xp::FieldListSelectRestriction* pVal/*[out,retval]*/);
  Owc10_xp::FieldListSelectRestriction __fastcall get_SelectRestriction(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SelectRestriction(Owc10_xp::FieldListSelectRestriction pVal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetNextSelected(Owc10_xp::FieldListNode* pfln/*[in]*/, 
                                                        Owc10_xp::FieldListNode** ppfln/*[out,retval]*/);
  Owc10_xp::FieldListNode* __fastcall GetNextSelected(Owc10_xp::FieldListNode* pfln/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ClearSelection();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetOverlayImage(int iImage, int iOverlay);

  __property   int             ClipboardFormat = {read = get_ClipboardFormat};
  __property   BSTR            InstanceID = {read = get_InstanceID};
  __property   IFont*          Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    MultiSelect = {read = get_MultiSelect, write = set_MultiSelect};
  __property   Owc10_xp::FieldListSelectRestriction SelectRestriction = {read = get_SelectRestriction, write = set_SelectRestriction};
};
typedef FieldListDispT<FieldList> FieldListDisp;

typedef TComInterface<FieldListDragData>  TCOMFieldListDragData;

// *********************************************************************//
// DispIntf:  FieldListDragData
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6EAC3754-49CC-11D3-AE50-00C04F613171}
// *********************************************************************//
template<class T>
class FieldListDragDataDispT : public TAutoDriver<FieldListDragData>
{
public:
  FieldListDragDataDispT(){}

  FieldListDragDataDispT(FieldListDragData *pintf)
  {
    TAutoDriver<FieldListDragData>::Bind(pintf, false);
  }

  FieldListDragDataDispT(FieldListDragDataPtr pintf)
  {
    TAutoDriver<FieldListDragData>::Bind(pintf, true);
  }

  FieldListDragDataDispT& operator=(FieldListDragData *pintf)
  {
    TAutoDriver<FieldListDragData>::Bind(pintf, false);
    return *this;
  }

  FieldListDragDataDispT& operator=(FieldListDragDataPtr pintf)
  {
    TAutoDriver<FieldListDragData>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NodeId(long* pVal/*[out,retval]*/);
  long            __fastcall get_NodeId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TypeId(long* pVal/*[out,retval]*/);
  long            __fastcall get_TypeId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Data(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Data(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FieldListInstanceId(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_FieldListInstanceId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Object(LPUNKNOWN* ppObj/*[out,retval]*/);
  LPUNKNOWN       __fastcall get_Object(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OwnerObject(LPUNKNOWN* ppOwnerObject/*[out,retval]*/);
  LPUNKNOWN       __fastcall get_OwnerObject(void);

  __property   long            NodeId = {read = get_NodeId};
  __property   long            TypeId = {read = get_TypeId};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Data = {read = get_Data};
  __property   BSTR            FieldListInstanceId = {read = get_FieldListInstanceId};
  __property   LPUNKNOWN       Object = {read = get_Object};
  __property   LPUNKNOWN       OwnerObject = {read = get_OwnerObject};
};
typedef FieldListDragDataDispT<FieldListDragData> FieldListDragDataDisp;

typedef TComInterface<FieldListDragDataList>  TCOMFieldListDragDataList;

// *********************************************************************//
// DispIntf:  FieldListDragDataList
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2A9DDE7C-D83E-11D3-AE6C-00C04F613171}
// *********************************************************************//
template<class T>
class FieldListDragDataListDispT : public TAutoDriver<FieldListDragDataList>
{
public:
  FieldListDragDataListDispT(){}

  FieldListDragDataListDispT(FieldListDragDataList *pintf)
  {
    TAutoDriver<FieldListDragDataList>::Bind(pintf, false);
  }

  FieldListDragDataListDispT(FieldListDragDataListPtr pintf)
  {
    TAutoDriver<FieldListDragDataList>::Bind(pintf, true);
  }

  FieldListDragDataListDispT& operator=(FieldListDragDataList *pintf)
  {
    TAutoDriver<FieldListDragDataList>::Bind(pintf, false);
    return *this;
  }

  FieldListDragDataListDispT& operator=(FieldListDragDataListPtr pintf)
  {
    TAutoDriver<FieldListDragDataList>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(long Index/*[in]*/, 
                                                 Owc10_xp::FieldListDragData** pVal/*[out,retval]*/);
  Owc10_xp::FieldListDragData* __fastcall get_Item(long Index/*[in]*/);

  __property   long            Count = {read = get_Count};
};
typedef FieldListDragDataListDispT<FieldListDragDataList> FieldListDragDataListDisp;

// *********************************************************************//
// SmartIntf: TCOMIOfflineInfo
// Interface: IOfflineInfo
// *********************************************************************//
template <class T /* IOfflineInfo */ >
class TCOMIOfflineInfoT : public TComInterface<IOfflineInfo>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIOfflineInfoT() {}
  TCOMIOfflineInfoT(IOfflineInfo *intf, bool addRef = false) : TComInterface<IOfflineInfo>(intf, addRef) {}
  TCOMIOfflineInfoT(const TCOMIOfflineInfoT& src) : TComInterface<IOfflineInfo>(src) {}
  TCOMIOfflineInfoT& operator=(const TCOMIOfflineInfoT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall PutServerFilter(LPWSTR pwzUrl, LPWSTR pwzServerFilter);
  HRESULT         __fastcall GetServerFilter(LPWSTR pwzUrl, LPWSTR* pwzServerFilter);
  HRESULT         __fastcall GetIsPageSubscribed(LPWSTR pwzUrl, long* pfSubscribed);
  HRESULT         __fastcall GetOfflineXMLFileLocation(BSTR* pbstrPath);

};
typedef TCOMIOfflineInfoT<IOfflineInfo> TCOMIOfflineInfo;

typedef TComInterface<ChUserDefinedSelection>  TCOMChUserDefinedSelection;

// *********************************************************************//
// DispIntf:  ChUserDefinedSelection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {22C1AB70-4BFF-40FB-95EE-C8CA647833C6}
// *********************************************************************//
template<class T>
class ChUserDefinedSelectionDispT : public TAutoDriver<ChUserDefinedSelection>
{
public:
  ChUserDefinedSelectionDispT(){}

  ChUserDefinedSelectionDispT(ChUserDefinedSelection *pintf)
  {
    TAutoDriver<ChUserDefinedSelection>::Bind(pintf, false);
  }

  ChUserDefinedSelectionDispT(ChUserDefinedSelectionPtr pintf)
  {
    TAutoDriver<ChUserDefinedSelection>::Bind(pintf, true);
  }

  ChUserDefinedSelectionDispT& operator=(ChUserDefinedSelection *pintf)
  {
    TAutoDriver<ChUserDefinedSelection>::Bind(pintf, false);
    return *this;
  }

  ChUserDefinedSelectionDispT& operator=(ChUserDefinedSelectionPtr pintf)
  {
    TAutoDriver<ChUserDefinedSelection>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_id(long* id/*[out,retval]*/);
  long            __fastcall get_id(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);

  __property   long            id = {read = get_id};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef ChUserDefinedSelectionDispT<ChUserDefinedSelection> ChUserDefinedSelectionDisp;

typedef TComInterface<IAddinHost>  TCOMIAddinHost;

// *********************************************************************//
// DispIntf:  IAddinHost
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FAA0B9C0-F635-44C7-B825-B805F59B3D66}
// *********************************************************************//
template<class T>
class IAddinHostDispT : public TAutoDriver<IAddinHost>
{
public:
  IAddinHostDispT(){}

  IAddinHostDispT(IAddinHost *pintf)
  {
    TAutoDriver<IAddinHost>::Bind(pintf, false);
  }

  IAddinHostDispT(IAddinHostPtr pintf)
  {
    TAutoDriver<IAddinHost>::Bind(pintf, true);
  }

  IAddinHostDispT& operator=(IAddinHost *pintf)
  {
    TAutoDriver<IAddinHost>::Bind(pintf, false);
    return *this;
  }

  IAddinHostDispT& operator=(IAddinHostPtr pintf)
  {
    TAutoDriver<IAddinHost>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall CoerceOper(VARIANT* varoper/*[in]*/, 
                                                   Owc10_xp::AddinClientTypeEnum grbit/*[in]*/, 
                                                   VARIANT* Result/*[out,retval]*/);
  VARIANT         __fastcall CoerceOper(VARIANT* varoper/*[in]*/, 
                                        Owc10_xp::AddinClientTypeEnum grbit/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RandOper(VARIANT* Result/*[out,retval]*/);
  VARIANT         __fastcall RandOper(void);

};
typedef IAddinHostDispT<IAddinHost> IAddinHostDisp;

// *********************************************************************//
// DispIntf:  IRangeEvents
// Flags:     (4096) Dispatchable
// GUID:      {B8891063-2B00-48EC-957F-6DEBEADE9D8B}
// *********************************************************************//
template <class T>
class IRangeEventsDispT : public TAutoDriver<IRangeEvents>
{
public:
  IRangeEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall Change();

};
typedef IRangeEventsDispT<IRangeEvents> IRangeEventsDisp;

typedef TComInterface<IXRangeEnum>  TCOMIXRangeEnum;

// *********************************************************************//
// DispIntf:  IXRangeEnum
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B09-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template<class T>
class IXRangeEnumDispT : public TAutoDriver<IXRangeEnum>
{
public:
  IXRangeEnumDispT(){}

  IXRangeEnumDispT(IXRangeEnum *pintf)
  {
    TAutoDriver<IXRangeEnum>::Bind(pintf, false);
  }

  IXRangeEnumDispT(IXRangeEnumPtr pintf)
  {
    TAutoDriver<IXRangeEnum>::Bind(pintf, true);
  }

  IXRangeEnumDispT& operator=(IXRangeEnum *pintf)
  {
    TAutoDriver<IXRangeEnum>::Bind(pintf, false);
    return *this;
  }

  IXRangeEnumDispT& operator=(IXRangeEnumPtr pintf)
  {
    TAutoDriver<IXRangeEnum>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall Next(unsigned_long cElt/*[in]*/, VARIANT* rgvar/*[out]*/, 
                                             unsigned_long* pcEltFetched/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Skip(unsigned_long cElt/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reset();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Clone(Owc10_xp::IXRangeEnum** ppEnum/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetTraversal(unsigned nTraverseCode);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ChangeType(VARIANT* Out/*[out]*/, VARIANT* In/*[in]*/, 
                                                   unsigned_short vt/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetElements(unsigned_long cElt/*[in]*/, 
                                                    unsigned_long iStart/*[in]*/, 
                                                    VARIANT* rvarDest/*[in]*/, 
                                                    unsigned_long* pcFetched/*[out]*/, 
                                                    unsigned_short vtCoerceTo/*[in]*/, 
                                                    unsigned_long vtbCoerceFrom/*[in]*/, 
                                                    VARIANT* Fill/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RowCount(unsigned* NumberOfRows/*[out,retval]*/);
  unsigned        __fastcall get_RowCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColCount(unsigned* NumberOfColumns/*[out,retval]*/);
  unsigned        __fastcall get_ColCount(void);

  __property   unsigned        RowCount = {read = get_RowCount};
  __property   unsigned        ColCount = {read = get_ColCount};
};
typedef IXRangeEnumDispT<IXRangeEnum> IXRangeEnumDisp;

typedef TComInterface<IAddinClient>  TCOMIAddinClient;

// *********************************************************************//
// DispIntf:  IAddinClient
// Flags:     (320) Dual OleAutomation
// GUID:      {198924BD-4102-4CB0-B7E8-DBF8BE7EB5A1}
// *********************************************************************//
template<class T>
class IAddinClientDispT : public TAutoDriver<IAddinClient>
{
public:
  IAddinClientDispT(){}

  IAddinClientDispT(IAddinClient *pintf)
  {
    TAutoDriver<IAddinClient>::Bind(pintf, false);
  }

  IAddinClientDispT(IAddinClientPtr pintf)
  {
    TAutoDriver<IAddinClient>::Bind(pintf, true);
  }

  IAddinClientDispT& operator=(IAddinClient *pintf)
  {
    TAutoDriver<IAddinClient>::Bind(pintf, false);
    return *this;
  }

  IAddinClientDispT& operator=(IAddinClientPtr pintf)
  {
    TAutoDriver<IAddinClient>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall GrantAddinHost(VARIANT* vardisp/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RemoveAddinHost();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IsSemiCalced(long dispid_/*[in]*/, 
                                                     VARIANT_BOOL* SemiCalced/*[in]*/);

};
typedef IAddinClientDispT<IAddinClient> IAddinClientDisp;

// *********************************************************************//
// DispIntf:  IPivotControlEvents
// Flags:     (4096) Dispatchable
// GUID:      {F5B39A87-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T>
class IPivotControlEventsDispT : public TAutoDriver<IPivotControlEvents>
{
public:
  IPivotControlEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall SelectionChange();
  void /*[VT_VOID:0]*/ __fastcall ViewChange(Owc10_xp::PivotViewReasonEnum Reason);
  void /*[VT_VOID:0]*/ __fastcall DataChange(Owc10_xp::PivotDataReasonEnum Reason);
  void /*[VT_VOID:0]*/ __fastcall PivotTableChange(Owc10_xp::PivotTableReasonEnum Reason);
  void /*[VT_VOID:0]*/ __fastcall BeforeQuery();
  void /*[VT_VOID:0]*/ __fastcall Query();
  void /*[VT_VOID:0]*/ __fastcall OnConnect();
  void /*[VT_VOID:0]*/ __fastcall OnDisconnect();
  void /*[VT_VOID:0]*/ __fastcall MouseDown(long Button/*[in]*/, long Shift/*[in]*/, long x/*[in]*/
                                            , long y/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall MouseMove(long Button/*[in]*/, long Shift/*[in]*/, long x/*[in]*/
                                            , long y/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall MouseUp(long Button/*[in]*/, long Shift/*[in]*/, long x/*[in]*/, 
                                          long y/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall MouseWheel(VARIANT_BOOL Page/*[in]*/, long Count/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall Click();
  void /*[VT_VOID:0]*/ __fastcall DblClick();
  void /*[VT_VOID:0]*/ __fastcall CommandEnabled(VARIANT Command, Owc10_xp::ByRef* Enabled);
  void /*[VT_VOID:0]*/ __fastcall CommandChecked(VARIANT Command, Owc10_xp::ByRef* Checked);
  void /*[VT_VOID:0]*/ __fastcall CommandTipText(VARIANT Command, Owc10_xp::ByRef* Caption);
  void /*[VT_VOID:0]*/ __fastcall CommandBeforeExecute(VARIANT Command, Owc10_xp::ByRef* Cancel);
  void /*[VT_VOID:0]*/ __fastcall CommandExecute(VARIANT Command, VARIANT_BOOL Succeeded);
  void /*[VT_VOID:0]*/ __fastcall KeyDown(long KeyCode, long Shift);
  void /*[VT_VOID:0]*/ __fastcall KeyUp(long KeyCode, long Shift);
  void /*[VT_VOID:0]*/ __fastcall KeyPress(long KeyAscii);
  void /*[VT_VOID:0]*/ __fastcall BeforeKeyDown(long KeyCode, long Shift, Owc10_xp::ByRef* Cancel);
  void /*[VT_VOID:0]*/ __fastcall BeforeKeyUp(long KeyCode, long Shift, Owc10_xp::ByRef* Cancel);
  void /*[VT_VOID:0]*/ __fastcall BeforeKeyPress(long KeyAscii, Owc10_xp::ByRef* Cancel);
  void /*[VT_VOID:0]*/ __fastcall BeforeContextMenu(long x, long y, Owc10_xp::ByRef* Menu, 
                                                    Owc10_xp::ByRef* Cancel);
  void /*[VT_VOID:0]*/ __fastcall StartEdit(LPDISPATCH Selection, LPDISPATCH ActiveObject, 
                                            Owc10_xp::ByRef* InitialValue, 
                                            Owc10_xp::ByRef* ArrowMode, 
                                            Owc10_xp::ByRef* CaretPosition, Owc10_xp::ByRef* Cancel
                                            , Owc10_xp::ByRef* ErrorDescription);
  void /*[VT_VOID:0]*/ __fastcall EndEdit(VARIANT_BOOL Accept, Owc10_xp::ByRef* FinalValue, 
                                          Owc10_xp::ByRef* Cancel, Owc10_xp::ByRef* ErrorDescription);
  void /*[VT_VOID:0]*/ __fastcall BeforeScreenTip(Owc10_xp::ByRef* ScreenTipText, 
                                                  LPDISPATCH SourceObject);

};
typedef IPivotControlEventsDispT<IPivotControlEvents> IPivotControlEventsDisp;

typedef TComInterface<TextFormat>  TCOMTextFormat;

// *********************************************************************//
// DispIntf:  TextFormat
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {58573A81-5025-11D3-BE84-0050041DB15A}
// *********************************************************************//
template<class T>
class TextFormatDispT : public TAutoDriver<TextFormat>
{
public:
  TextFormatDispT(){}

  TextFormatDispT(TextFormat *pintf)
  {
    TAutoDriver<TextFormat>::Bind(pintf, false);
  }

  TextFormatDispT(TextFormatPtr pintf)
  {
    TAutoDriver<TextFormat>::Bind(pintf, true);
  }

  TextFormatDispT& operator=(TextFormat *pintf)
  {
    TAutoDriver<TextFormat>::Bind(pintf, false);
    return *this;
  }

  TextFormatDispT& operator=(TextFormatPtr pintf)
  {
    TAutoDriver<TextFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ForeColor(VARIANT* ForeColor/*[out,retval]*/);
  VARIANT         __fastcall get_ForeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ForeColor(VARIANT ForeColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackColor(VARIANT* BackColor/*[out,retval]*/);
  VARIANT         __fastcall get_BackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackColor(VARIANT BackColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HorizontalAlignment(Owc10_xp::PivotHAlignmentEnum* HorizontalAlignment/*[out,retval]*/);
  Owc10_xp::PivotHAlignmentEnum __fastcall get_HorizontalAlignment(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HorizontalAlignment(Owc10_xp::PivotHAlignmentEnum HorizontalAlignment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NumberFormat(BSTR* NumberFormat/*[out,retval]*/);
  BSTR            __fastcall get_NumberFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_NumberFormat(BSTR NumberFormat/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Font(Owc10_xp::PivotFont** PivotFont/*[out,retval]*/);
  Owc10_xp::PivotFont* __fastcall get_Font(void);

  __property   Owc10_xp::PivotHAlignmentEnum HorizontalAlignment = {read = get_HorizontalAlignment, write = set_HorizontalAlignment};
  __property   BSTR            NumberFormat = {read = get_NumberFormat};
  __property   Owc10_xp::PivotFont* Font = {read = get_Font};
};
typedef TextFormatDispT<TextFormat> TextFormatDisp;

typedef TComInterface<ViewSurface>  TCOMViewSurface;

// *********************************************************************//
// DispIntf:  ViewSurface
// Flags:     (464) Hidden Dual NonExtensible OleAutomation
// GUID:      {EE658610-D8B3-11D2-8F30-00600893B533}
// *********************************************************************//
template<class T>
class ViewSurfaceDispT : public TAutoDriver<ViewSurface>
{
public:
  ViewSurfaceDispT(){}

  ViewSurfaceDispT(ViewSurface *pintf)
  {
    TAutoDriver<ViewSurface>::Bind(pintf, false);
  }

  ViewSurfaceDispT(ViewSurfacePtr pintf)
  {
    TAutoDriver<ViewSurface>::Bind(pintf, true);
  }

  ViewSurfaceDispT& operator=(ViewSurface *pintf)
  {
    TAutoDriver<ViewSurface>::Bind(pintf, false);
    return *this;
  }

  ViewSurfaceDispT& operator=(ViewSurfacePtr pintf)
  {
    TAutoDriver<ViewSurface>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_hDC(long* hDC/*[out,retval]*/);
  long            __fastcall get_hDC(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_hDCInfo(long* hDCInfo/*[out,retval]*/);
  long            __fastcall get_hDCInfo(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Rectangle(long cx1/*[in]*/, long cy1/*[in]*/, 
                                                  long cx2/*[in]*/, long cy2/*[in]*/, 
                                                  long Left/*[in]*/, long Top/*[in]*/, 
                                                  long Width/*[in]*/, long Height/*[in]*/, 
                                                  unsigned_long Color/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Line(long cx1/*[in]*/, long cy1/*[in]*/, long cx2/*[in]*/, 
                                             long cy2/*[in]*/, long x1/*[in]*/, long y1/*[in]*/, 
                                             long x2/*[in]*/, long y2/*[in]*/, 
                                             unsigned_long Color/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AlphaBlend(unsigned_long Color/*[in]*/, 
                                                       unsigned_long* AlphaBlend/*[out,retval]*/);
  unsigned_long   __fastcall get_AlphaBlend(unsigned_long Color/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Text(long cx1/*[in]*/, long cy1/*[in]*/, long cx2/*[in]*/, 
                                             long cy2/*[in]*/, long Left/*[in]*/, long Top/*[in]*/, 
                                             long Width/*[in]*/, long Height/*[in]*/, 
                                             Owc10_xp::TextFormat* TextFormat/*[in]*/, 
                                             VARIANT Text/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextHeight(Owc10_xp::TextFormat* TextFormat/*[in]*/, 
                                                       VARIANT Text/*[in]*/, 
                                                       long* TextHeight/*[out,retval]*/);
  long            __fastcall get_TextHeight(Owc10_xp::TextFormat* TextFormat/*[in]*/, 
                                            VARIANT Text/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextWidth(Owc10_xp::TextFormat* TextFormat/*[in]*/, 
                                                      VARIANT Text/*[in]*/, 
                                                      long* TextWidth/*[out,retval]*/);
  long            __fastcall get_TextWidth(Owc10_xp::TextFormat* TextFormat/*[in]*/, 
                                           VARIANT Text/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Picture(long cx1/*[in]*/, long cy1/*[in]*/, long cx2/*[in]*/
                                                , long cy2/*[in]*/, long Left/*[in]*/, 
                                                long Top/*[in]*/, long Width/*[in]*/, 
                                                long Height/*[in]*/, IPictureDisp* Picture/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PictureMasked(long cx1/*[in]*/, long cy1/*[in]*/, 
                                                      long cx2/*[in]*/, long cy2/*[in]*/, 
                                                      long Left/*[in]*/, long Top/*[in]*/, 
                                                      long Width/*[in]*/, long Height/*[in]*/, 
                                                      IPictureDisp* Picture/*[in]*/, 
                                                      IPictureDisp* Mask/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureAlphaBlended(IPictureDisp* Picture/*[in]*/, 
                                                                IPictureDisp* Mask/*[in]*/, 
                                                                IPictureDisp** Blended/*[out,retval]*/);
  IPictureDisp*   __fastcall get_PictureAlphaBlended(IPictureDisp* Picture/*[in]*/, 
                                                     IPictureDisp* Mask/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ScaleX(long x/*[in]*/, long* ScaleX/*[out,retval]*/);
  long            __fastcall get_ScaleX(long x/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ScaleY(long y/*[in]*/, long* ScaleY/*[out,retval]*/);
  long            __fastcall get_ScaleY(long y/*[in]*/);

  __property   long            hDC = {read = get_hDC};
  __property   long            hDCInfo = {read = get_hDCInfo};
};
typedef ViewSurfaceDispT<ViewSurface> ViewSurfaceDisp;

typedef TComInterface<ViewObject>  TCOMViewObject;

// *********************************************************************//
// DispIntf:  ViewObject
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8C950530-C84C-11D2-8F2D-00600893B533}
// *********************************************************************//
template<class T>
class ViewObjectDispT : public TAutoDriver<ViewObject>
{
public:
  ViewObjectDispT(){}

  ViewObjectDispT(ViewObject *pintf)
  {
    TAutoDriver<ViewObject>::Bind(pintf, false);
  }

  ViewObjectDispT(ViewObjectPtr pintf)
  {
    TAutoDriver<ViewObject>::Bind(pintf, true);
  }

  ViewObjectDispT& operator=(ViewObject *pintf)
  {
    TAutoDriver<ViewObject>::Bind(pintf, false);
    return *this;
  }

  ViewObjectDispT& operator=(ViewObjectPtr pintf)
  {
    TAutoDriver<ViewObject>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall Draw(Owc10_xp::ViewSurface* Surface/*[in]*/, 
                                             long cx1/*[in]*/, long cy1/*[in]*/, long cx2/*[in]*/, 
                                             long cy2/*[in]*/, long Left/*[in]*/, long Top/*[in]*/, 
                                             long Width/*[in]*/, long Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Query(long x/*[in]*/, long y/*[in]*/, 
                                                  LPDISPATCH* Object/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Query(long x/*[in]*/, long y/*[in]*/);

};
typedef ViewObjectDispT<ViewObject> ViewObjectDisp;

typedef TComInterface<MouseTarget>  TCOMMouseTarget;

// *********************************************************************//
// DispIntf:  MouseTarget
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8F8E5640-CDB0-11D2-8F2E-00600893B533}
// *********************************************************************//
template<class T>
class MouseTargetDispT : public TAutoDriver<MouseTarget>
{
public:
  MouseTargetDispT(){}

  MouseTargetDispT(MouseTarget *pintf)
  {
    TAutoDriver<MouseTarget>::Bind(pintf, false);
  }

  MouseTargetDispT(MouseTargetPtr pintf)
  {
    TAutoDriver<MouseTarget>::Bind(pintf, true);
  }

  MouseTargetDispT& operator=(MouseTarget *pintf)
  {
    TAutoDriver<MouseTarget>::Bind(pintf, false);
    return *this;
  }

  MouseTargetDispT& operator=(MouseTargetPtr pintf)
  {
    TAutoDriver<MouseTarget>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall MouseEnter(long x/*[in]*/, long y/*[in]*/, 
                                                   long* Cursor/*[in,out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall MouseOver(long x/*[in]*/, long y/*[in]*/, 
                                                  long* Cursor/*[in,out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall MouseLeave();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall MouseDown(long x/*[in]*/, long y/*[in]*/, 
                                                  long Button/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall MouseUp(long x/*[in]*/, long y/*[in]*/, long Button/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall MouseClick(long x/*[in]*/, long y/*[in]*/, 
                                                   long Button/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall MouseDblClick(long x/*[in]*/, long y/*[in]*/, 
                                                      long Button/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall MouseWheel(VARIANT_BOOL Page/*[in]*/, long Count/*[in]*/);

};
typedef MouseTargetDispT<MouseTarget> MouseTargetDisp;

typedef TComInterface<SelectionHighlight>  TCOMSelectionHighlight;

// *********************************************************************//
// DispIntf:  SelectionHighlight
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {58573A80-5025-11D3-BE84-0050041DB15A}
// *********************************************************************//
template<class T>
class SelectionHighlightDispT : public TAutoDriver<SelectionHighlight>
{
public:
  SelectionHighlightDispT(){}

  SelectionHighlightDispT(SelectionHighlight *pintf)
  {
    TAutoDriver<SelectionHighlight>::Bind(pintf, false);
  }

  SelectionHighlightDispT(SelectionHighlightPtr pintf)
  {
    TAutoDriver<SelectionHighlight>::Bind(pintf, true);
  }

  SelectionHighlightDispT& operator=(SelectionHighlight *pintf)
  {
    TAutoDriver<SelectionHighlight>::Bind(pintf, false);
    return *this;
  }

  SelectionHighlightDispT& operator=(SelectionHighlightPtr pintf)
  {
    TAutoDriver<SelectionHighlight>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall Highlight(Owc10_xp::ViewSurface* ViewSurface);

};
typedef SelectionHighlightDispT<SelectionHighlight> SelectionHighlightDisp;

typedef TComInterface<ActiveObject>  TCOMActiveObject;

// *********************************************************************//
// DispIntf:  ActiveObject
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A809B678-545A-11D3-BE86-0050041DB15A}
// *********************************************************************//
template<class T>
class ActiveObjectDispT : public TAutoDriver<ActiveObject>
{
public:
  ActiveObjectDispT(){}

  ActiveObjectDispT(ActiveObject *pintf)
  {
    TAutoDriver<ActiveObject>::Bind(pintf, false);
  }

  ActiveObjectDispT(ActiveObjectPtr pintf)
  {
    TAutoDriver<ActiveObject>::Bind(pintf, true);
  }

  ActiveObjectDispT& operator=(ActiveObject *pintf)
  {
    TAutoDriver<ActiveObject>::Bind(pintf, false);
    return *this;
  }

  ActiveObjectDispT& operator=(ActiveObjectPtr pintf)
  {
    TAutoDriver<ActiveObject>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActiveObject_(LPDISPATCH* ActiveObject/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ActiveObject_(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ActiveObject_(LPDISPATCH ActiveObject/*[in]*/);

  __property   LPDISPATCH      ActiveObject_ = {read = get_ActiveObject_, write = set_ActiveObject_};
};
typedef ActiveObjectDispT<ActiveObject> ActiveObjectDisp;

typedef TComInterface<PopupMenu>  TCOMPopupMenu;

// *********************************************************************//
// DispIntf:  PopupMenu
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {04B21422-1F84-4DD3-8CD6-1C6ECC68E521}
// *********************************************************************//
template<class T>
class PopupMenuDispT : public TAutoDriver<PopupMenu>
{
public:
  PopupMenuDispT(){}

  PopupMenuDispT(PopupMenu *pintf)
  {
    TAutoDriver<PopupMenu>::Bind(pintf, false);
  }

  PopupMenuDispT(PopupMenuPtr pintf)
  {
    TAutoDriver<PopupMenu>::Bind(pintf, true);
  }

  PopupMenuDispT& operator=(PopupMenu *pintf)
  {
    TAutoDriver<PopupMenu>::Bind(pintf, false);
    return *this;
  }

  PopupMenuDispT& operator=(PopupMenuPtr pintf)
  {
    TAutoDriver<PopupMenu>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_hMenu(long* hMenu/*[out,retval]*/);
  long            __fastcall get_hMenu(void);

  __property   long            hMenu = {read = get_hMenu};
};
typedef PopupMenuDispT<PopupMenu> PopupMenuDisp;

typedef TComInterface<AutoFitObject>  TCOMAutoFitObject;

// *********************************************************************//
// DispIntf:  AutoFitObject
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {99049AFE-271D-4568-95D8-3BC879AA73E3}
// *********************************************************************//
template<class T>
class AutoFitObjectDispT : public TAutoDriver<AutoFitObject>
{
public:
  AutoFitObjectDispT(){}

  AutoFitObjectDispT(AutoFitObject *pintf)
  {
    TAutoDriver<AutoFitObject>::Bind(pintf, false);
  }

  AutoFitObjectDispT(AutoFitObjectPtr pintf)
  {
    TAutoDriver<AutoFitObject>::Bind(pintf, true);
  }

  AutoFitObjectDispT& operator=(AutoFitObject *pintf)
  {
    TAutoDriver<AutoFitObject>::Bind(pintf, false);
    return *this;
  }

  AutoFitObjectDispT& operator=(AutoFitObjectPtr pintf)
  {
    TAutoDriver<AutoFitObject>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall AutoFit();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BestWidth(long* BestWidth/*[out,retval]*/);
  long            __fastcall get_BestWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BestHeight(long* BestHeight/*[out,retval]*/);
  long            __fastcall get_BestHeight(void);

  __property   long            BestWidth = {read = get_BestWidth};
  __property   long            BestHeight = {read = get_BestHeight};
};
typedef AutoFitObjectDispT<AutoFitObject> AutoFitObjectDisp;

typedef TComInterface<Moniker>  TCOMMoniker;

// *********************************************************************//
// DispIntf:  Moniker
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {5055F752-6848-4CEA-9BAB-265EC4B5380A}
// *********************************************************************//
template<class T>
class MonikerDispT : public TAutoDriver<Moniker>
{
public:
  MonikerDispT(){}

  MonikerDispT(Moniker *pintf)
  {
    TAutoDriver<Moniker>::Bind(pintf, false);
  }

  MonikerDispT(MonikerPtr pintf)
  {
    TAutoDriver<Moniker>::Bind(pintf, true);
  }

  MonikerDispT& operator=(Moniker *pintf)
  {
    TAutoDriver<Moniker>::Bind(pintf, false);
    return *this;
  }

  MonikerDispT& operator=(MonikerPtr pintf)
  {
    TAutoDriver<Moniker>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Moniker_(LPDISPATCH RelativeTo/*[in,def,opt]*/, 
                                                     BSTR* Moniker/*[out,retval]*/);
  BSTR            __fastcall get_Moniker_(LPDISPATCH RelativeTo/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parse(BSTR Moniker/*[in]*/, 
                                                  LPDISPATCH* Object/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parse(BSTR Moniker/*[in]*/);

};
typedef MonikerDispT<Moniker> MonikerDisp;

typedef TComInterface<InplaceObject>  TCOMInplaceObject;

// *********************************************************************//
// DispIntf:  InplaceObject
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {EDAC92DC-84DB-4CD1-AE98-EB436F4D99EB}
// *********************************************************************//
template<class T>
class InplaceObjectDispT : public TAutoDriver<InplaceObject>
{
public:
  InplaceObjectDispT(){}

  InplaceObjectDispT(InplaceObject *pintf)
  {
    TAutoDriver<InplaceObject>::Bind(pintf, false);
  }

  InplaceObjectDispT(InplaceObjectPtr pintf)
  {
    TAutoDriver<InplaceObject>::Bind(pintf, true);
  }

  InplaceObjectDispT& operator=(InplaceObject *pintf)
  {
    TAutoDriver<InplaceObject>::Bind(pintf, false);
    return *this;
  }

  InplaceObjectDispT& operator=(InplaceObjectPtr pintf)
  {
    TAutoDriver<InplaceObject>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall Activate(long Hwnd);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Deactivate();

};
typedef InplaceObjectDispT<InplaceObject> InplaceObjectDisp;

typedef TComInterface<PropertyNotify>  TCOMPropertyNotify;

// *********************************************************************//
// DispIntf:  PropertyNotify
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {7BB4EDA1-862A-4AB2-92F2-557E1BAB3408}
// *********************************************************************//
template<class T>
class PropertyNotifyDispT : public TAutoDriver<PropertyNotify>
{
public:
  PropertyNotifyDispT(){}

  PropertyNotifyDispT(PropertyNotify *pintf)
  {
    TAutoDriver<PropertyNotify>::Bind(pintf, false);
  }

  PropertyNotifyDispT(PropertyNotifyPtr pintf)
  {
    TAutoDriver<PropertyNotify>::Bind(pintf, true);
  }

  PropertyNotifyDispT& operator=(PropertyNotify *pintf)
  {
    TAutoDriver<PropertyNotify>::Bind(pintf, false);
    return *this;
  }

  PropertyNotifyDispT& operator=(PropertyNotifyPtr pintf)
  {
    TAutoDriver<PropertyNotify>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall OnPropertyChange(LPDISPATCH Object, long dispid_);

};
typedef PropertyNotifyDispT<PropertyNotify> PropertyNotifyDisp;

typedef TComInterface<MutualExpando>  TCOMMutualExpando;

// *********************************************************************//
// DispIntf:  MutualExpando
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F9328F0C-1862-4BD5-81D8-2052A7EC80FA}
// *********************************************************************//
template<class T>
class MutualExpandoDispT : public TAutoDriver<MutualExpando>
{
public:
  MutualExpandoDispT(){}

  MutualExpandoDispT(MutualExpando *pintf)
  {
    TAutoDriver<MutualExpando>::Bind(pintf, false);
  }

  MutualExpandoDispT(MutualExpandoPtr pintf)
  {
    TAutoDriver<MutualExpando>::Bind(pintf, true);
  }

  MutualExpandoDispT& operator=(MutualExpando *pintf)
  {
    TAutoDriver<MutualExpando>::Bind(pintf, false);
    return *this;
  }

  MutualExpandoDispT& operator=(MutualExpandoPtr pintf)
  {
    TAutoDriver<MutualExpando>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall Expand();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Collapse();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(long* Left/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(long* Top/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(long* Width/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(long* Height/*[out,retval]*/);
  long            __fastcall get_Height(void);

  __property   long            Left = {read = get_Left};
  __property   long            Top = {read = get_Top};
  __property   long            Width = {read = get_Width};
  __property   long            Height = {read = get_Height};
};
typedef MutualExpandoDispT<MutualExpando> MutualExpandoDisp;

typedef TComInterface<EditableObject>  TCOMEditableObject;

// *********************************************************************//
// DispIntf:  EditableObject
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {EB3286D3-226C-48F0-8049-2DB1E01DEE9C}
// *********************************************************************//
template<class T>
class EditableObjectDispT : public TAutoDriver<EditableObject>
{
public:
  EditableObjectDispT(){}

  EditableObjectDispT(EditableObject *pintf)
  {
    TAutoDriver<EditableObject>::Bind(pintf, false);
  }

  EditableObjectDispT(EditableObjectPtr pintf)
  {
    TAutoDriver<EditableObject>::Bind(pintf, true);
  }

  EditableObjectDispT& operator=(EditableObject *pintf)
  {
    TAutoDriver<EditableObject>::Bind(pintf, false);
    return *this;
  }

  EditableObjectDispT& operator=(EditableObjectPtr pintf)
  {
    TAutoDriver<EditableObject>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall StartEdit(VARIANT InitialValue/*[in]*/, 
                                                  VARIANT_BOOL ArrowMode/*[in]*/, 
                                                  long CaretPosition/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(VARIANT Value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall EndEdit(VARIANT_BOOL Accept/*[in]*/);

};
typedef EditableObjectDispT<EditableObject> EditableObjectDisp;

typedef TComInterface<TipProvider>  TCOMTipProvider;

// *********************************************************************//
// DispIntf:  TipProvider
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8966D336-AACA-4ADB-9315-F3A541B16917}
// *********************************************************************//
template<class T>
class TipProviderDispT : public TAutoDriver<TipProvider>
{
public:
  TipProviderDispT(){}

  TipProviderDispT(TipProvider *pintf)
  {
    TAutoDriver<TipProvider>::Bind(pintf, false);
  }

  TipProviderDispT(TipProviderPtr pintf)
  {
    TAutoDriver<TipProvider>::Bind(pintf, true);
  }

  TipProviderDispT& operator=(TipProvider *pintf)
  {
    TAutoDriver<TipProvider>::Bind(pintf, false);
    return *this;
  }

  TipProviderDispT& operator=(TipProviderPtr pintf)
  {
    TAutoDriver<TipProvider>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TipText(BSTR* TipText/*[out,retval]*/);
  BSTR            __fastcall get_TipText(void);

  __property   BSTR            TipText = {read = get_TipText};
};
typedef TipProviderDispT<TipProvider> TipProviderDisp;

typedef TComInterface<IPivotCopy>  TCOMIPivotCopy;

// *********************************************************************//
// DispIntf:  IPivotCopy
// Flags:     (464) Hidden Dual NonExtensible OleAutomation
// GUID:      {CD44E547-FEC9-4ADC-AB6A-3129B44801BA}
// *********************************************************************//
template<class T>
class IPivotCopyDispT : public TAutoDriver<IPivotCopy>
{
public:
  IPivotCopyDispT(){}

  IPivotCopyDispT(IPivotCopy *pintf)
  {
    TAutoDriver<IPivotCopy>::Bind(pintf, false);
  }

  IPivotCopyDispT(IPivotCopyPtr pintf)
  {
    TAutoDriver<IPivotCopy>::Bind(pintf, true);
  }

  IPivotCopyDispT& operator=(IPivotCopy *pintf)
  {
    TAutoDriver<IPivotCopy>::Bind(pintf, false);
    return *this;
  }

  IPivotCopyDispT& operator=(IPivotCopyPtr pintf)
  {
    TAutoDriver<IPivotCopy>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall Render(long Format/*[in]*/, BSTR* Output/*[in,out,def,opt]*/);

};
typedef IPivotCopyDispT<IPivotCopy> IPivotCopyDisp;

// *********************************************************************//
// DispIntf:  IChartEvents
// Flags:     (4096) Dispatchable
// GUID:      {F5B39A7A-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
IChartEventsDispT<T>::DataSetChange()
{
  _TDispID _dispid(/* DataSetChange */ DISPID(5101));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IChartEventsDispT<T>::DblClick()
{
  _TDispID _dispid(/* DblClick */ DISPID(5102));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IChartEventsDispT<T>::Click()
{
  _TDispID _dispid(/* Click */ DISPID(5103));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IChartEventsDispT<T>::KeyDown(long KeyCode, long Shift)
{
  _TDispID _dispid(/* KeyDown */ DISPID(1009));
  TAutoArgs<2> _args;
  _args[1] = KeyCode /*[VT_I4:0]*/;
  _args[2] = Shift /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IChartEventsDispT<T>::KeyUp(long KeyCode, long Shift)
{
  _TDispID _dispid(/* KeyUp */ DISPID(1008));
  TAutoArgs<2> _args;
  _args[1] = KeyCode /*[VT_I4:0]*/;
  _args[2] = Shift /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IChartEventsDispT<T>::KeyPress(long KeyAscii)
{
  _TDispID _dispid(/* KeyPress */ DISPID(1010));
  TAutoArgs<1> _args;
  _args[1] = KeyAscii /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IChartEventsDispT<T>::BeforeKeyDown(long KeyCode, long Shift, Owc10_xp::ByRef* Cancel)
{
  _TDispID _dispid(/* BeforeKeyDown */ DISPID(1006));
  TAutoArgs<3> _args;
  _args[1] = KeyCode /*[VT_I4:0]*/;
  _args[2] = Shift /*[VT_I4:0]*/;
  _args[3] = (LPDISPATCH)(Owc10_xp::ByRef*)Cancel /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IChartEventsDispT<T>::BeforeKeyUp(long KeyCode, long Shift, Owc10_xp::ByRef* Cancel)
{
  _TDispID _dispid(/* BeforeKeyUp */ DISPID(1005));
  TAutoArgs<3> _args;
  _args[1] = KeyCode /*[VT_I4:0]*/;
  _args[2] = Shift /*[VT_I4:0]*/;
  _args[3] = (LPDISPATCH)(Owc10_xp::ByRef*)Cancel /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IChartEventsDispT<T>::BeforeKeyPress(long KeyAscii, Owc10_xp::ByRef* Cancel)
{
  _TDispID _dispid(/* BeforeKeyPress */ DISPID(1007));
  TAutoArgs<2> _args;
  _args[1] = KeyAscii /*[VT_I4:0]*/;
  _args[2] = (LPDISPATCH)(Owc10_xp::ByRef*)Cancel /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IChartEventsDispT<T>::MouseDown(long Button/*[in]*/, long Shift/*[in]*/, long x/*[in]*/, 
                                long y/*[in]*/)
{
  _TDispID _dispid(/* MouseDown */ DISPID(5107));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I4:0]*/;
  _args[2] = Shift /*[VT_I4:0]*/;
  _args[3] = x /*[VT_I4:0]*/;
  _args[4] = y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IChartEventsDispT<T>::MouseMove(long Button/*[in]*/, long Shift/*[in]*/, long x/*[in]*/, 
                                long y/*[in]*/)
{
  _TDispID _dispid(/* MouseMove */ DISPID(5108));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I4:0]*/;
  _args[2] = Shift /*[VT_I4:0]*/;
  _args[3] = x /*[VT_I4:0]*/;
  _args[4] = y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IChartEventsDispT<T>::MouseUp(long Button/*[in]*/, long Shift/*[in]*/, long x/*[in]*/, 
                              long y/*[in]*/)
{
  _TDispID _dispid(/* MouseUp */ DISPID(5109));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I4:0]*/;
  _args[2] = Shift /*[VT_I4:0]*/;
  _args[3] = x /*[VT_I4:0]*/;
  _args[4] = y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IChartEventsDispT<T>::MouseWheel(VARIANT_BOOL Page/*[in]*/, long Count/*[in]*/)
{
  _TDispID _dispid(/* MouseWheel */ DISPID(5118));
  TAutoArgs<2> _args;
  _args[1] = Page /*[VT_BOOL:0]*/;
  _args[2] = Count /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IChartEventsDispT<T>::SelectionChange()
{
  _TDispID _dispid(/* SelectionChange */ DISPID(5110));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IChartEventsDispT<T>::BeforeScreenTip(Owc10_xp::ByRef* TipText, LPDISPATCH ContextObject)
{
  _TDispID _dispid(/* BeforeScreenTip */ DISPID(5120));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::ByRef*)TipText /*[VT_USERDEFINED:1]*/;
  _args[2] = ContextObject /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IChartEventsDispT<T>::CommandEnabled(VARIANT Command, Owc10_xp::ByRef* Enabled)
{
  _TDispID _dispid(/* CommandEnabled */ DISPID(1000));
  TAutoArgs<2> _args;
  _args[1] = Command /*[VT_VARIANT:0]*/;
  _args[2] = (LPDISPATCH)(Owc10_xp::ByRef*)Enabled /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IChartEventsDispT<T>::CommandChecked(VARIANT Command, Owc10_xp::ByRef* Checked)
{
  _TDispID _dispid(/* CommandChecked */ DISPID(1001));
  TAutoArgs<2> _args;
  _args[1] = Command /*[VT_VARIANT:0]*/;
  _args[2] = (LPDISPATCH)(Owc10_xp::ByRef*)Checked /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IChartEventsDispT<T>::CommandTipText(VARIANT Command, Owc10_xp::ByRef* Caption)
{
  _TDispID _dispid(/* CommandTipText */ DISPID(1002));
  TAutoArgs<2> _args;
  _args[1] = Command /*[VT_VARIANT:0]*/;
  _args[2] = (LPDISPATCH)(Owc10_xp::ByRef*)Caption /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IChartEventsDispT<T>::CommandBeforeExecute(VARIANT Command, Owc10_xp::ByRef* Cancel)
{
  _TDispID _dispid(/* CommandBeforeExecute */ DISPID(1003));
  TAutoArgs<2> _args;
  _args[1] = Command /*[VT_VARIANT:0]*/;
  _args[2] = (LPDISPATCH)(Owc10_xp::ByRef*)Cancel /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IChartEventsDispT<T>::CommandExecute(VARIANT Command, VARIANT_BOOL Succeeded)
{
  _TDispID _dispid(/* CommandExecute */ DISPID(1004));
  TAutoArgs<2> _args;
  _args[1] = Command /*[VT_VARIANT:0]*/;
  _args[2] = Succeeded /*[VT_BOOL:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IChartEventsDispT<T>::BeforeContextMenu(long x, long y, Owc10_xp::ByRef* Menu, 
                                        Owc10_xp::ByRef* Cancel)
{
  _TDispID _dispid(/* BeforeContextMenu */ DISPID(1011));
  TAutoArgs<4> _args;
  _args[1] = x /*[VT_I4:0]*/;
  _args[2] = y /*[VT_I4:0]*/;
  _args[3] = (LPDISPATCH)(Owc10_xp::ByRef*)Menu /*[VT_USERDEFINED:1]*/;
  _args[4] = (LPDISPATCH)(Owc10_xp::ByRef*)Cancel /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IChartEventsDispT<T>::BeforeRender(Owc10_xp::ChChartDraw* drawObject/*[in]*/, 
                                   LPDISPATCH chartObject/*[in]*/, Owc10_xp::ByRef* Cancel/*[in]*/)
{
  _TDispID _dispid(/* BeforeRender */ DISPID(5111));
  TAutoArgs<3> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::ChChartDraw*)drawObject /*[VT_USERDEFINED:1]*/;
  _args[2] = chartObject /*[VT_DISPATCH:0]*/;
  _args[3] = (LPDISPATCH)(Owc10_xp::ByRef*)Cancel /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IChartEventsDispT<T>::AfterRender(Owc10_xp::ChChartDraw* drawObject/*[in]*/, 
                                  LPDISPATCH chartObject/*[in]*/)
{
  _TDispID _dispid(/* AfterRender */ DISPID(5112));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::ChChartDraw*)drawObject /*[VT_USERDEFINED:1]*/;
  _args[2] = chartObject /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IChartEventsDispT<T>::AfterFinalRender(Owc10_xp::ChChartDraw* drawObject/*[in]*/)
{
  _TDispID _dispid(/* AfterFinalRender */ DISPID(5113));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::ChChartDraw*)drawObject /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IChartEventsDispT<T>::AfterLayout(Owc10_xp::ChChartDraw* drawObject/*[in]*/)
{
  _TDispID _dispid(/* AfterLayout */ DISPID(5114));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::ChChartDraw*)drawObject /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IChartEventsDispT<T>::ViewChange()
{
  _TDispID _dispid(/* ViewChange */ DISPID(5119));
  OleProcedure(_dispid);
}

// *********************************************************************//
// DispIntf:  ByRef
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0B817E8E-5A5A-11D3-BE88-0050041DB15A}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ByRefDispT<T>::get_Value(VARIANT* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
ByRefDispT<T>::get_Value(void)
{
  VARIANT Value;
  this->get_Value((VARIANT*)&Value);
  return Value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ByRefDispT<T>::set_Value(VARIANT Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ChChartDraw
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {278585C3-D74B-4E30-ACEB-77D4777639E6}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDrawDispT<T>::get_Interior(Owc10_xp::ChInterior** ppinterior/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Interior"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChInterior**)ppinterior /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChInterior* __fastcall
ChChartDrawDispT<T>::get_Interior(void)
{
  Owc10_xp::ChInterior* ppinterior;
  this->get_Interior((Owc10_xp::ChInterior**)&ppinterior);
  return ppinterior;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDrawDispT<T>::get_Border(Owc10_xp::ChBorder** ppline/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Border"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChBorder**)ppline /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChBorder* __fastcall
ChChartDrawDispT<T>::get_Border(void)
{
  Owc10_xp::ChBorder* ppline;
  this->get_Border((Owc10_xp::ChBorder**)&ppline);
  return ppline;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDrawDispT<T>::get_Font(Owc10_xp::ChFont** ppfont/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChFont**)ppfont /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChFont* __fastcall
ChChartDrawDispT<T>::get_Font(void)
{
  Owc10_xp::ChFont* ppfont;
  this->get_Font((Owc10_xp::ChFont**)&ppfont);
  return ppfont;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDrawDispT<T>::get_Line(Owc10_xp::ChLine** ppline/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Line"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChLine**)ppline /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChLine* __fastcall
ChChartDrawDispT<T>::get_Line(void)
{
  Owc10_xp::ChLine* ppline;
  this->get_Line((Owc10_xp::ChLine**)&ppline);
  return ppline;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDrawDispT<T>::get_DrawType(Owc10_xp::ChartDrawModesEnum* pdrawmodesenum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DrawType"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pdrawmodesenum /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartDrawModesEnum __fastcall
ChChartDrawDispT<T>::get_DrawType(void)
{
  Owc10_xp::ChartDrawModesEnum pdrawmodesenum;
  this->get_DrawType((Owc10_xp::ChartDrawModesEnum*)&pdrawmodesenum);
  return pdrawmodesenum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDrawDispT<T>::get_hDC(long* phdc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hDC"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(phdc /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChChartDrawDispT<T>::get_hDC(void)
{
  long phdc;
  this->get_hDC((long*)&phdc);
  return phdc;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDrawDispT<T>::BeginObject(long id/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginObject"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<1> _args;
  _args[1] = id /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDrawDispT<T>::EndObject()
{
  _TDispID _dispid(*this, OLETEXT("EndObject"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDrawDispT<T>::DrawLine(long x0/*[in]*/, long y0/*[in]*/, long x1/*[in]*/, long y1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DrawLine"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<4> _args;
  _args[1] = x0 /*[VT_I4:0]*/;
  _args[2] = y0 /*[VT_I4:0]*/;
  _args[3] = x1 /*[VT_I4:0]*/;
  _args[4] = y1 /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDrawDispT<T>::DrawRectangle(long Left/*[in]*/, long Top/*[in]*/, long Right/*[in]*/, 
                                   long Bottom/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DrawRectangle"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  TAutoArgs<4> _args;
  _args[1] = Left /*[VT_I4:0]*/;
  _args[2] = Top /*[VT_I4:0]*/;
  _args[3] = Right /*[VT_I4:0]*/;
  _args[4] = Bottom /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDrawDispT<T>::DrawEllipse(long Left/*[in]*/, long Top/*[in]*/, long Right/*[in]*/, 
                                 long Bottom/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DrawEllipse"), DISPID(DISPID_UNKNOWN/*[1610743818]*/));
  TAutoArgs<4> _args;
  _args[1] = Left /*[VT_I4:0]*/;
  _args[2] = Top /*[VT_I4:0]*/;
  _args[3] = Right /*[VT_I4:0]*/;
  _args[4] = Bottom /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDrawDispT<T>::DrawText(BSTR bstrText/*[in]*/, long Left/*[in]*/, long Top/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DrawText"), DISPID(DISPID_UNKNOWN/*[1610743819]*/));
  TAutoArgs<3> _args;
  _args[1] = bstrText /*[VT_BSTR:0]*/;
  _args[2] = Left /*[VT_I4:0]*/;
  _args[3] = Top /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDrawDispT<T>::DrawPolyLine(VARIANT xValues/*[in]*/, VARIANT yValues/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DrawPolyLine"), DISPID(DISPID_UNKNOWN/*[1610743820]*/));
  TAutoArgs<2> _args;
  _args[1] = xValues /*[VT_VARIANT:0]*/;
  _args[2] = yValues /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDrawDispT<T>::DrawPolygon(VARIANT xValues/*[in]*/, VARIANT yValues/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DrawPolygon"), DISPID(DISPID_UNKNOWN/*[1610743821]*/));
  TAutoArgs<2> _args;
  _args[1] = xValues /*[VT_VARIANT:0]*/;
  _args[2] = yValues /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDrawDispT<T>::TextWidth(BSTR Text/*[in]*/, VARIANT* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextWidth"), DISPID(DISPID_UNKNOWN/*[1610743822]*/));
  TAutoArgs<1> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(Width /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
ChChartDrawDispT<T>::TextWidth(BSTR Text/*[in]*/)
{
  VARIANT Width;
  this->TextWidth(Text, (VARIANT*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDrawDispT<T>::TextHeight(BSTR Text/*[in]*/, VARIANT* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextHeight"), DISPID(DISPID_UNKNOWN/*[1610743823]*/));
  TAutoArgs<1> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(Height /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
ChChartDrawDispT<T>::TextHeight(BSTR Text/*[in]*/)
{
  VARIANT Height;
  this->TextHeight(Text, (VARIANT*)&Height);
  return Height;
}

// *********************************************************************//
// DispIntf:  ChInterior
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {56C833A6-3E1C-11D3-831A-00C04F991C70}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChInteriorDispT<T>::get_Color(VARIANT* Color/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Color"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Color /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
ChInteriorDispT<T>::get_Color(void)
{
  VARIANT Color;
  this->get_Color((VARIANT*)&Color);
  return Color;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChInteriorDispT<T>::set_Color(VARIANT Color/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Color"), DISPID(1610743808));
  TAutoArgs<1> _args;
  _args[1] = Color /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChInteriorDispT<T>::get_DefaultColor(VARIANT* Color/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultColor"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Color /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
ChInteriorDispT<T>::get_DefaultColor(void)
{
  VARIANT Color;
  this->get_DefaultColor((VARIANT*)&Color);
  return Color;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChInteriorDispT<T>::get_BackColor(VARIANT* BackColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BackColor /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
ChInteriorDispT<T>::get_BackColor(void)
{
  VARIANT BackColor;
  this->get_BackColor((VARIANT*)&BackColor);
  return BackColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChInteriorDispT<T>::set_BackColor(VARIANT BackColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = BackColor /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChInteriorDispT<T>::get_Pattern(Owc10_xp::ChartPatternTypeEnum* pwcpt/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Pattern"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pwcpt /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartPatternTypeEnum __fastcall
ChInteriorDispT<T>::get_Pattern(void)
{
  Owc10_xp::ChartPatternTypeEnum pwcpt;
  this->get_Pattern((Owc10_xp::ChartPatternTypeEnum*)&pwcpt);
  return pwcpt;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChInteriorDispT<T>::get_FillType(Owc10_xp::ChartFillTypeEnum* pwcft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FillType"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pwcft /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartFillTypeEnum __fastcall
ChInteriorDispT<T>::get_FillType(void)
{
  Owc10_xp::ChartFillTypeEnum pwcft;
  this->get_FillType((Owc10_xp::ChartFillTypeEnum*)&pwcft);
  return pwcft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChInteriorDispT<T>::get_PresetGradientType(Owc10_xp::ChartPresetGradientTypeEnum* pwcpt/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetGradientType"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pwcpt /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartPresetGradientTypeEnum __fastcall
ChInteriorDispT<T>::get_PresetGradientType(void)
{
  Owc10_xp::ChartPresetGradientTypeEnum pwcpt;
  this->get_PresetGradientType((Owc10_xp::ChartPresetGradientTypeEnum*)&pwcpt);
  return pwcpt;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChInteriorDispT<T>::get_GradientStyle(Owc10_xp::ChartGradientStyleEnum* pwcgs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GradientStyle"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pwcgs /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartGradientStyleEnum __fastcall
ChInteriorDispT<T>::get_GradientStyle(void)
{
  Owc10_xp::ChartGradientStyleEnum pwcgs;
  this->get_GradientStyle((Owc10_xp::ChartGradientStyleEnum*)&pwcgs);
  return pwcgs;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChInteriorDispT<T>::get_GradientVariant(Owc10_xp::ChartGradientVariantEnum* pwcgv/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GradientVariant"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pwcgv /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartGradientVariantEnum __fastcall
ChInteriorDispT<T>::get_GradientVariant(void)
{
  Owc10_xp::ChartGradientVariantEnum pwcgv;
  this->get_GradientVariant((Owc10_xp::ChartGradientVariantEnum*)&pwcgv);
  return pwcgv;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChInteriorDispT<T>::get_GradientDegree(double* GradientDegree/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GradientDegree"), DISPID(DISPID_UNKNOWN/*[1610743818]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(GradientDegree /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
ChInteriorDispT<T>::get_GradientDegree(void)
{
  double GradientDegree;
  this->get_GradientDegree((double*)&GradientDegree);
  return GradientDegree;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChInteriorDispT<T>::get_PresetTexture(Owc10_xp::ChartPresetTextureEnum* pwcpt/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetTexture"), DISPID(DISPID_UNKNOWN/*[1610743819]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pwcpt /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartPresetTextureEnum __fastcall
ChInteriorDispT<T>::get_PresetTexture(void)
{
  Owc10_xp::ChartPresetTextureEnum pwcpt;
  this->get_PresetTexture((Owc10_xp::ChartPresetTextureEnum*)&pwcpt);
  return pwcpt;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChInteriorDispT<T>::get_TextureName(BSTR* pbstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextureName"), DISPID(DISPID_UNKNOWN/*[1610743820]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ChInteriorDispT<T>::get_TextureName(void)
{
  BSTR pbstr;
  this->get_TextureName((BSTR*)&pbstr);
  return pbstr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChInteriorDispT<T>::get_TextureFormat(Owc10_xp::ChartTextureFormatEnum* pwctf/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextureFormat"), DISPID(DISPID_UNKNOWN/*[1610743821]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pwctf /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartTextureFormatEnum __fastcall
ChInteriorDispT<T>::get_TextureFormat(void)
{
  Owc10_xp::ChartTextureFormatEnum pwctf;
  this->get_TextureFormat((Owc10_xp::ChartTextureFormatEnum*)&pwctf);
  return pwctf;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChInteriorDispT<T>::get_TextureStackUnit(double* dStackUnit/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextureStackUnit"), DISPID(DISPID_UNKNOWN/*[1610743822]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(dStackUnit /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
ChInteriorDispT<T>::get_TextureStackUnit(void)
{
  double dStackUnit;
  this->get_TextureStackUnit((double*)&dStackUnit);
  return dStackUnit;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChInteriorDispT<T>::get_TexturePlacement(Owc10_xp::ChartTexturePlacementEnum* wcctp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TexturePlacement"), DISPID(DISPID_UNKNOWN/*[1610743823]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)wcctp /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartTexturePlacementEnum __fastcall
ChInteriorDispT<T>::get_TexturePlacement(void)
{
  Owc10_xp::ChartTexturePlacementEnum wcctp;
  this->get_TexturePlacement((Owc10_xp::ChartTexturePlacementEnum*)&wcctp);
  return wcctp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChInteriorDispT<T>::SetPatterned(Owc10_xp::ChartPatternTypeEnum patternType/*[in]*/, 
                                 VARIANT Color/*[in,opt]*/, VARIANT BackColor/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPatterned"), DISPID(DISPID_UNKNOWN/*[1610743824]*/));
  TAutoArgs<3> _args;
  _args[1] = (int)patternType /*[VT_USERDEFINED:0]*/;
  _args[2] = Color /*[VT_VARIANT:0]*/;
  _args[3] = BackColor /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChInteriorDispT<T>::SetPresetGradient(Owc10_xp::ChartGradientStyleEnum GradientStyle/*[in]*/, 
                                      Owc10_xp::ChartGradientVariantEnum gradientVarient/*[in]*/, 
                                      Owc10_xp::ChartPresetGradientTypeEnum gradientPreset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPresetGradient"), DISPID(DISPID_UNKNOWN/*[1610743825]*/));
  TAutoArgs<3> _args;
  _args[1] = (int)GradientStyle /*[VT_USERDEFINED:0]*/;
  _args[2] = (int)gradientVarient /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)gradientPreset /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChInteriorDispT<T>::SetTextured(VARIANT textureFile/*[in]*/, 
                                Owc10_xp::ChartTextureFormatEnum TextureFormat/*[in,def,opt]*/, 
                                double stackUnit/*[in,def,opt]*/, 
                                Owc10_xp::ChartTexturePlacementEnum TexturePlacement/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetTextured"), DISPID(DISPID_UNKNOWN/*[1610743826]*/));
  TAutoArgs<4> _args;
  _args[1] = textureFile /*[VT_VARIANT:0]*/;
  _args[2] = (int)TextureFormat /*[VT_USERDEFINED:0]*/;
  _args[3] = stackUnit /*[VT_R8:0]*/;
  _args[4] = (int)TexturePlacement /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChInteriorDispT<T>::SetOneColorGradient(Owc10_xp::ChartGradientStyleEnum GradientStyle/*[in]*/, 
                                        Owc10_xp::ChartGradientVariantEnum GradientVariant/*[in]*/, 
                                        double GradientDegree/*[in]*/, VARIANT Color/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetOneColorGradient"), DISPID(DISPID_UNKNOWN/*[1610743827]*/));
  TAutoArgs<4> _args;
  _args[1] = (int)GradientStyle /*[VT_USERDEFINED:0]*/;
  _args[2] = (int)GradientVariant /*[VT_USERDEFINED:0]*/;
  _args[3] = GradientDegree /*[VT_R8:0]*/;
  _args[4] = Color /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChInteriorDispT<T>::SetSolid(VARIANT Color/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetSolid"), DISPID(DISPID_UNKNOWN/*[1610743828]*/));
  TAutoArgs<1> _args;
  _args[1] = Color /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChInteriorDispT<T>::SetTwoColorGradient(Owc10_xp::ChartGradientStyleEnum GradientStyle/*[in]*/, 
                                        Owc10_xp::ChartGradientVariantEnum GradientVariant/*[in]*/, 
                                        VARIANT Color/*[in,opt]*/, VARIANT BackColor/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetTwoColorGradient"), DISPID(DISPID_UNKNOWN/*[1610743829]*/));
  TAutoArgs<4> _args;
  _args[1] = (int)GradientStyle /*[VT_USERDEFINED:0]*/;
  _args[2] = (int)GradientVariant /*[VT_USERDEFINED:0]*/;
  _args[3] = Color /*[VT_VARIANT:0]*/;
  _args[4] = BackColor /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ChBorder
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A72-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChBorderDispT<T>::get_Color(VARIANT* Color/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Color"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Color /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
ChBorderDispT<T>::get_Color(void)
{
  VARIANT Color;
  this->get_Color((VARIANT*)&Color);
  return Color;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChBorderDispT<T>::set_Color(VARIANT Color/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Color"), DISPID(1610743808));
  TAutoArgs<1> _args;
  _args[1] = Color /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChBorderDispT<T>::get_DashStyle(Owc10_xp::ChartLineDashStyleEnum* pwclds/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DashStyle"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pwclds /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartLineDashStyleEnum __fastcall
ChBorderDispT<T>::get_DashStyle(void)
{
  Owc10_xp::ChartLineDashStyleEnum pwclds;
  this->get_DashStyle((Owc10_xp::ChartLineDashStyleEnum*)&pwclds);
  return pwclds;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChBorderDispT<T>::set_DashStyle(Owc10_xp::ChartLineDashStyleEnum pwclds/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DashStyle"), DISPID(1610743810));
  TAutoArgs<1> _args;
  _args[1] = (int)pwclds /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChBorderDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(5201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ChBorderDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChBorderDispT<T>::get_Weight(VARIANT* LineWeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Weight"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(LineWeight /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
ChBorderDispT<T>::get_Weight(void)
{
  VARIANT LineWeight;
  this->get_Weight((VARIANT*)&LineWeight);
  return LineWeight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChBorderDispT<T>::set_Weight(Owc10_xp::LineWeightEnum LineWeight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Weight"), DISPID(1610743813));
  TAutoArgs<1> _args;
  _args[1] = (int)LineWeight /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ChFont
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A86-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChFontDispT<T>::get_Bold(VARIANT_BOOL* Bold/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bold"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Bold /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChFontDispT<T>::get_Bold(void)
{
  VARIANT_BOOL Bold;
  this->get_Bold((VARIANT_BOOL*)&Bold);
  return Bold;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChFontDispT<T>::set_Bold(VARIANT_BOOL Bold/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bold"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Bold /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChFontDispT<T>::get_Color(VARIANT* Color/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Color"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Color /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
ChFontDispT<T>::get_Color(void)
{
  VARIANT Color;
  this->get_Color((VARIANT*)&Color);
  return Color;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChFontDispT<T>::set_Color(VARIANT Color/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Color"), DISPID(1610743810));
  TAutoArgs<1> _args;
  _args[1] = Color /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChFontDispT<T>::get_Italic(VARIANT_BOOL* Italic/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Italic"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Italic /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChFontDispT<T>::get_Italic(void)
{
  VARIANT_BOOL Italic;
  this->get_Italic((VARIANT_BOOL*)&Italic);
  return Italic;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChFontDispT<T>::set_Italic(VARIANT_BOOL Italic/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Italic"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = Italic /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChFontDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ChFontDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChFontDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChFontDispT<T>::get_Size(long* Size/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Size"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Size /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChFontDispT<T>::get_Size(void)
{
  long Size;
  this->get_Size((long*)&Size);
  return Size;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChFontDispT<T>::set_Size(long Size/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Size"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Size /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChFontDispT<T>::get_Underline(Owc10_xp::UnderlineStyleEnum* UnderlineStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Underline"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)UnderlineStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::UnderlineStyleEnum __fastcall
ChFontDispT<T>::get_Underline(void)
{
  Owc10_xp::UnderlineStyleEnum UnderlineStyle;
  this->get_Underline((Owc10_xp::UnderlineStyleEnum*)&UnderlineStyle);
  return UnderlineStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChFontDispT<T>::set_Underline(Owc10_xp::UnderlineStyleEnum UnderlineStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Underline"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = (int)UnderlineStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ChLine
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {966CCC26-4469-11D3-8324-00C04F991C70}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChLineDispT<T>::get_Color(VARIANT* Color/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Color"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Color /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
ChLineDispT<T>::get_Color(void)
{
  VARIANT Color;
  this->get_Color((VARIANT*)&Color);
  return Color;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChLineDispT<T>::set_Color(VARIANT Color/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Color"), DISPID(1610743808));
  TAutoArgs<1> _args;
  _args[1] = Color /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChLineDispT<T>::get_DashStyle(Owc10_xp::ChartLineDashStyleEnum* pwclds/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DashStyle"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pwclds /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartLineDashStyleEnum __fastcall
ChLineDispT<T>::get_DashStyle(void)
{
  Owc10_xp::ChartLineDashStyleEnum pwclds;
  this->get_DashStyle((Owc10_xp::ChartLineDashStyleEnum*)&pwclds);
  return pwclds;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChLineDispT<T>::set_DashStyle(Owc10_xp::ChartLineDashStyleEnum pwclds/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DashStyle"), DISPID(1610743810));
  TAutoArgs<1> _args;
  _args[1] = (int)pwclds /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChLineDispT<T>::get_Weight(VARIANT* LineWeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Weight"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(LineWeight /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
ChLineDispT<T>::get_Weight(void)
{
  VARIANT LineWeight;
  this->get_Weight((VARIANT*)&LineWeight);
  return LineWeight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChLineDispT<T>::set_Weight(Owc10_xp::LineWeightEnum LineWeight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Weight"), DISPID(1610743812));
  TAutoArgs<1> _args;
  _args[1] = (int)LineWeight /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChLineDispT<T>::get_Miter(Owc10_xp::ChartLineMiterEnum* pwclm/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Miter"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pwclm /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartLineMiterEnum __fastcall
ChLineDispT<T>::get_Miter(void)
{
  Owc10_xp::ChartLineMiterEnum pwclm;
  this->get_Miter((Owc10_xp::ChartLineMiterEnum*)&pwclm);
  return pwclm;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChLineDispT<T>::set_Miter(Owc10_xp::ChartLineMiterEnum pwclm/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Miter"), DISPID(1610743814));
  TAutoArgs<1> _args;
  _args[1] = (int)pwclm /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMChChartSpace
// Interface: ChChartSpace
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_ChartLayout(Owc10_xp::ChartChartLayoutEnum pChartChartLayout/*[in]*/)
{
  return (*this)->set_ChartLayout(pChartChartLayout);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_ChartLayout(Owc10_xp::ChartChartLayoutEnum* pChartChartLayout/*[out,retval]*/)
{
  return (*this)->get_ChartLayout(pChartChartLayout);
}

template <class T> Owc10_xp::ChartChartLayoutEnum __fastcall
TCOMChChartSpaceT<T>::get_ChartLayout(void)
{
  Owc10_xp::ChartChartLayoutEnum pChartChartLayout;
  OLECHECK(this->get_ChartLayout((Owc10_xp::ChartChartLayoutEnum*)&pChartChartLayout));
  return pChartChartLayout;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_ChartWrapCount(long plcount/*[in]*/)
{
  return (*this)->set_ChartWrapCount(plcount);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_ChartWrapCount(long* plcount/*[out,retval]*/)
{
  return (*this)->get_ChartWrapCount(plcount);
}

template <class T> long __fastcall
TCOMChChartSpaceT<T>::get_ChartWrapCount(void)
{
  long plcount;
  OLECHECK(this->get_ChartWrapCount((long*)&plcount));
  return plcount;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_EnableEvents(VARIANT_BOOL pfEnableEvents/*[in]*/)
{
  return (*this)->set_EnableEvents(pfEnableEvents);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_EnableEvents(TOLEBOOL pfEnableEvents/*[in]*/)
{
  return (*this)->set_EnableEvents(VARIANT_BOOL)pfEnableEvents);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_EnableEvents(VARIANT_BOOL* pfEnableEvents/*[out,retval]*/)
{
  return (*this)->get_EnableEvents(pfEnableEvents);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_EnableEvents(TOLEBOOL* pfEnableEvents/*[out,retval]*/)
{
  return (*this)->get_EnableEvents(VARIANT_BOOL*)pfEnableEvents);
}

template <class T> TOLEBOOL __fastcall
TCOMChChartSpaceT<T>::get_EnableEvents(void)
{
  VARIANT_BOOL pfEnableEvents;
  OLECHECK(this->get_EnableEvents((VARIANT_BOOL*)&pfEnableEvents));
  return (TOLEBOOL)pfEnableEvents;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_HasChartSpaceLegend(VARIANT_BOOL pfHasChartSpaceLegend/*[in]*/)
{
  return (*this)->set_HasChartSpaceLegend(pfHasChartSpaceLegend);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_HasChartSpaceLegend(TOLEBOOL pfHasChartSpaceLegend/*[in]*/)
{
  return (*this)->set_HasChartSpaceLegend(VARIANT_BOOL)pfHasChartSpaceLegend);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_HasChartSpaceLegend(VARIANT_BOOL* pfHasChartSpaceLegend/*[out,retval]*/)
{
  return (*this)->get_HasChartSpaceLegend(pfHasChartSpaceLegend);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_HasChartSpaceLegend(TOLEBOOL* pfHasChartSpaceLegend/*[out,retval]*/)
{
  return (*this)->get_HasChartSpaceLegend(VARIANT_BOOL*)pfHasChartSpaceLegend);
}

template <class T> TOLEBOOL __fastcall
TCOMChChartSpaceT<T>::get_HasChartSpaceLegend(void)
{
  VARIANT_BOOL pfHasChartSpaceLegend;
  OLECHECK(this->get_HasChartSpaceLegend((VARIANT_BOOL*)&pfHasChartSpaceLegend));
  return (TOLEBOOL)pfHasChartSpaceLegend;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_MajorVersion(long* plMajorVersion/*[out,retval]*/)
{
  return (*this)->get_MajorVersion(plMajorVersion);
}

template <class T> long __fastcall
TCOMChChartSpaceT<T>::get_MajorVersion(void)
{
  long plMajorVersion;
  OLECHECK(this->get_MajorVersion((long*)&plMajorVersion));
  return plMajorVersion;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_MinorVersion(BSTR* pbstrMinorVersion/*[out,retval]*/)
{
  return (*this)->get_MinorVersion(pbstrMinorVersion);
}

template <class T> BSTR __fastcall
TCOMChChartSpaceT<T>::get_MinorVersion(void)
{
  BSTR pbstrMinorVersion = 0;
  OLECHECK(this->get_MinorVersion((BSTR*)&pbstrMinorVersion));
  return pbstrMinorVersion;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_BuildNumber(BSTR* pbstrBuildNumber/*[out,retval]*/)
{
  return (*this)->get_BuildNumber(pbstrBuildNumber);
}

template <class T> BSTR __fastcall
TCOMChChartSpaceT<T>::get_BuildNumber(void)
{
  BSTR pbstrBuildNumber = 0;
  OLECHECK(this->get_BuildNumber((BSTR*)&pbstrBuildNumber));
  return pbstrBuildNumber;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_ScreenUpdating(VARIANT_BOOL pfUpdate/*[in]*/)
{
  return (*this)->set_ScreenUpdating(pfUpdate);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_ScreenUpdating(TOLEBOOL pfUpdate/*[in]*/)
{
  return (*this)->set_ScreenUpdating(VARIANT_BOOL)pfUpdate);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_ScreenUpdating(VARIANT_BOOL* pfUpdate/*[out,retval]*/)
{
  return (*this)->get_ScreenUpdating(pfUpdate);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_ScreenUpdating(TOLEBOOL* pfUpdate/*[out,retval]*/)
{
  return (*this)->get_ScreenUpdating(VARIANT_BOOL*)pfUpdate);
}

template <class T> TOLEBOOL __fastcall
TCOMChChartSpaceT<T>::get_ScreenUpdating(void)
{
  VARIANT_BOOL pfUpdate;
  OLECHECK(this->get_ScreenUpdating((VARIANT_BOOL*)&pfUpdate));
  return (TOLEBOOL)pfUpdate;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_Border(Owc10_xp::ChBorder** ppline/*[out,retval]*/)
{
  return (*this)->get_Border(ppline);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_Border(Owc10_xp::ChBorderPtr* ppline/*[out,retval]*/)
{
  return (*this)->get_Border(ChBorder**)ppline);
}

template <class T> Owc10_xp::ChBorderPtr __fastcall
TCOMChChartSpaceT<T>::get_Border(void)
{
  Owc10_xp::ChBorder* ppline;
  OLECHECK(this->get_Border((Owc10_xp::ChBorder**)&ppline));
  return (Owc10_xp::ChBorderPtr)ppline;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_Charts(Owc10_xp::ChCharts** ppcharts/*[out,retval]*/)
{
  return (*this)->get_Charts(ppcharts);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_Charts(Owc10_xp::ChChartsPtr* ppcharts/*[out,retval]*/)
{
  return (*this)->get_Charts(ChCharts**)ppcharts);
}

template <class T> Owc10_xp::ChChartsPtr __fastcall
TCOMChChartSpaceT<T>::get_Charts(void)
{
  Owc10_xp::ChCharts* ppcharts;
  OLECHECK(this->get_Charts((Owc10_xp::ChCharts**)&ppcharts));
  return (Owc10_xp::ChChartsPtr)ppcharts;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::_set_DataSource(Msdatasrc_xp::DataSource* ppidatasource/*[in]*/)
{
  return (*this)->_set_DataSource(ppidatasource);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::_set_DataSource(Msdatasrc_xp::DataSourcePtr ppidatasource/*[in]*/)
{
  return (*this)->_set_DataSource(DataSource*)ppidatasource);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_DataSource(Msdatasrc_xp::DataSource* ppidatasource/*[in]*/)
{
  return (*this)->set_DataSource(ppidatasource);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_DataSource(Msdatasrc_xp::DataSourcePtr ppidatasource/*[in]*/)
{
  return (*this)->set_DataSource(DataSource*)ppidatasource);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_DataSource(Msdatasrc_xp::DataSource** ppidatasource/*[out,retval]*/)
{
  return (*this)->get_DataSource(ppidatasource);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_DataSource(Msdatasrc_xp::DataSourcePtr* ppidatasource/*[out,retval]*/)
{
  return (*this)->get_DataSource(DataSource**)ppidatasource);
}

template <class T> Msdatasrc_xp::DataSourcePtr __fastcall
TCOMChChartSpaceT<T>::get_DataSource(void)
{
  Msdatasrc_xp::DataSource* ppidatasource;
  OLECHECK(this->get_DataSource((Msdatasrc_xp::DataSource**)&ppidatasource));
  return (Msdatasrc_xp::DataSourcePtr)ppidatasource;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_DataMember(Msdatasrc_xp::DataMember pdatamember/*[in]*/)
{
  return (*this)->set_DataMember(pdatamember);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_DataMember(Msdatasrc_xp::DataMember* pdatamember/*[out,retval]*/)
{
  return (*this)->get_DataMember(pdatamember);
}

template <class T> Msdatasrc_xp::DataMember __fastcall
TCOMChChartSpaceT<T>::get_DataMember(void)
{
  Msdatasrc_xp::DataMember pdatamember;
  OLECHECK(this->get_DataMember((Msdatasrc_xp::DataMember*)&pdatamember));
  return pdatamember;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_DataSourceType(Owc10_xp::ChartDataSourceTypeEnum* pocpDST/*[out,retval]*/)
{
  return (*this)->get_DataSourceType(pocpDST);
}

template <class T> Owc10_xp::ChartDataSourceTypeEnum __fastcall
TCOMChChartSpaceT<T>::get_DataSourceType(void)
{
  Owc10_xp::ChartDataSourceTypeEnum pocpDST;
  OLECHECK(this->get_DataSourceType((Owc10_xp::ChartDataSourceTypeEnum*)&pocpDST));
  return pocpDST;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_HasChartSpaceTitle(VARIANT_BOOL pfHasChartSpaceTitle/*[in]*/)
{
  return (*this)->set_HasChartSpaceTitle(pfHasChartSpaceTitle);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_HasChartSpaceTitle(TOLEBOOL pfHasChartSpaceTitle/*[in]*/)
{
  return (*this)->set_HasChartSpaceTitle(VARIANT_BOOL)pfHasChartSpaceTitle);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_HasChartSpaceTitle(VARIANT_BOOL* pfHasChartSpaceTitle/*[out,retval]*/)
{
  return (*this)->get_HasChartSpaceTitle(pfHasChartSpaceTitle);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_HasChartSpaceTitle(TOLEBOOL* pfHasChartSpaceTitle/*[out,retval]*/)
{
  return (*this)->get_HasChartSpaceTitle(VARIANT_BOOL*)pfHasChartSpaceTitle);
}

template <class T> TOLEBOOL __fastcall
TCOMChChartSpaceT<T>::get_HasChartSpaceTitle(void)
{
  VARIANT_BOOL pfHasChartSpaceTitle;
  OLECHECK(this->get_HasChartSpaceTitle((VARIANT_BOOL*)&pfHasChartSpaceTitle));
  return (TOLEBOOL)pfHasChartSpaceTitle;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_Interior(Owc10_xp::ChInterior** ppinterior/*[out,retval]*/)
{
  return (*this)->get_Interior(ppinterior);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_Interior(Owc10_xp::ChInteriorPtr* ppinterior/*[out,retval]*/)
{
  return (*this)->get_Interior(ChInterior**)ppinterior);
}

template <class T> Owc10_xp::ChInteriorPtr __fastcall
TCOMChChartSpaceT<T>::get_Interior(void)
{
  Owc10_xp::ChInterior* ppinterior;
  OLECHECK(this->get_Interior((Owc10_xp::ChInterior**)&ppinterior));
  return (Owc10_xp::ChInteriorPtr)ppinterior;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_ChartSpaceLegend(Owc10_xp::ChLegend** pplegend/*[out,retval]*/)
{
  return (*this)->get_ChartSpaceLegend(pplegend);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_ChartSpaceLegend(Owc10_xp::ChLegendPtr* pplegend/*[out,retval]*/)
{
  return (*this)->get_ChartSpaceLegend(ChLegend**)pplegend);
}

template <class T> Owc10_xp::ChLegendPtr __fastcall
TCOMChChartSpaceT<T>::get_ChartSpaceLegend(void)
{
  Owc10_xp::ChLegend* pplegend;
  OLECHECK(this->get_ChartSpaceLegend((Owc10_xp::ChLegend**)&pplegend));
  return (Owc10_xp::ChLegendPtr)pplegend;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_Selection(LPDISPATCH* ppobject/*[out,retval]*/)
{
  return (*this)->get_Selection(ppobject);
}

template <class T> LPDISPATCH __fastcall
TCOMChChartSpaceT<T>::get_Selection(void)
{
  LPDISPATCH ppobject;
  OLECHECK(this->get_Selection((LPDISPATCH*)&ppobject));
  return ppobject;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_SelectionType(Owc10_xp::ChartSelectionsEnum* itype/*[out,retval]*/)
{
  return (*this)->get_SelectionType(itype);
}

template <class T> Owc10_xp::ChartSelectionsEnum __fastcall
TCOMChChartSpaceT<T>::get_SelectionType(void)
{
  Owc10_xp::ChartSelectionsEnum itype;
  OLECHECK(this->get_SelectionType((Owc10_xp::ChartSelectionsEnum*)&itype));
  return itype;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_HasSelectionMarks(Owc10_xp::ChartSelectionMarksEnum fMarks/*[in]*/)
{
  return (*this)->set_HasSelectionMarks(fMarks);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_HasSelectionMarks(Owc10_xp::ChartSelectionMarksEnum* fMarks/*[out,retval]*/)
{
  return (*this)->get_HasSelectionMarks(fMarks);
}

template <class T> Owc10_xp::ChartSelectionMarksEnum __fastcall
TCOMChChartSpaceT<T>::get_HasSelectionMarks(void)
{
  Owc10_xp::ChartSelectionMarksEnum fMarks;
  OLECHECK(this->get_HasSelectionMarks((Owc10_xp::ChartSelectionMarksEnum*)&fMarks));
  return fMarks;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_DisplayPropertyToolbox(VARIANT_BOOL fMenu/*[in]*/)
{
  return (*this)->set_DisplayPropertyToolbox(fMenu);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_DisplayPropertyToolbox(TOLEBOOL fMenu/*[in]*/)
{
  return (*this)->set_DisplayPropertyToolbox(VARIANT_BOOL)fMenu);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_DisplayPropertyToolbox(VARIANT_BOOL* fMenu/*[out,retval]*/)
{
  return (*this)->get_DisplayPropertyToolbox(fMenu);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_DisplayPropertyToolbox(TOLEBOOL* fMenu/*[out,retval]*/)
{
  return (*this)->get_DisplayPropertyToolbox(VARIANT_BOOL*)fMenu);
}

template <class T> TOLEBOOL __fastcall
TCOMChChartSpaceT<T>::get_DisplayPropertyToolbox(void)
{
  VARIANT_BOOL fMenu;
  OLECHECK(this->get_DisplayPropertyToolbox((VARIANT_BOOL*)&fMenu));
  return (TOLEBOOL)fMenu;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_ChartSpaceTitle(Owc10_xp::ChTitle** pptitle/*[out,retval]*/)
{
  return (*this)->get_ChartSpaceTitle(pptitle);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_ChartSpaceTitle(Owc10_xp::ChTitlePtr* pptitle/*[out,retval]*/)
{
  return (*this)->get_ChartSpaceTitle(ChTitle**)pptitle);
}

template <class T> Owc10_xp::ChTitlePtr __fastcall
TCOMChChartSpaceT<T>::get_ChartSpaceTitle(void)
{
  Owc10_xp::ChTitle* pptitle;
  OLECHECK(this->get_ChartSpaceTitle((Owc10_xp::ChTitle**)&pptitle));
  return (Owc10_xp::ChTitlePtr)pptitle;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_Version(BSTR* pbstr/*[out,retval]*/)
{
  return (*this)->get_Version(pbstr);
}

template <class T> BSTR __fastcall
TCOMChChartSpaceT<T>::get_Version(void)
{
  BSTR pbstr = 0;
  OLECHECK(this->get_Version((BSTR*)&pbstr));
  return pbstr;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_XMLData(BSTR* pbstrHTML/*[out,retval]*/)
{
  return (*this)->get_XMLData(pbstrHTML);
}

template <class T> BSTR __fastcall
TCOMChChartSpaceT<T>::get_XMLData(void)
{
  BSTR pbstrHTML = 0;
  OLECHECK(this->get_XMLData((BSTR*)&pbstrHTML));
  return pbstrHTML;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_XMLData(BSTR pbstrHTML/*[in]*/)
{
  return (*this)->set_XMLData(pbstrHTML);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_Constants(LPDISPATCH* ppIDispatchConstants/*[out,retval]*/)
{
  return (*this)->get_Constants(ppIDispatchConstants);
}

template <class T> LPDISPATCH __fastcall
TCOMChChartSpaceT<T>::get_Constants(void)
{
  LPDISPATCH ppIDispatchConstants;
  OLECHECK(this->get_Constants((LPDISPATCH*)&ppIDispatchConstants));
  return ppIDispatchConstants;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_CanUndo(VARIANT_BOOL* pfCanUndo/*[out,retval]*/)
{
  return (*this)->get_CanUndo(pfCanUndo);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_CanUndo(TOLEBOOL* pfCanUndo/*[out,retval]*/)
{
  return (*this)->get_CanUndo(VARIANT_BOOL*)pfCanUndo);
}

template <class T> TOLEBOOL __fastcall
TCOMChChartSpaceT<T>::get_CanUndo(void)
{
  VARIANT_BOOL pfCanUndo;
  OLECHECK(this->get_CanUndo((VARIANT_BOOL*)&pfCanUndo));
  return (TOLEBOOL)pfCanUndo;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_AllowLayoutEvents(VARIANT_BOOL* pvbAllowLayoutEvents/*[out,retval]*/)
{
  return (*this)->get_AllowLayoutEvents(pvbAllowLayoutEvents);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_AllowLayoutEvents(TOLEBOOL* pvbAllowLayoutEvents/*[out,retval]*/)
{
  return (*this)->get_AllowLayoutEvents(VARIANT_BOOL*)pvbAllowLayoutEvents);
}

template <class T> TOLEBOOL __fastcall
TCOMChChartSpaceT<T>::get_AllowLayoutEvents(void)
{
  VARIANT_BOOL pvbAllowLayoutEvents;
  OLECHECK(this->get_AllowLayoutEvents((VARIANT_BOOL*)&pvbAllowLayoutEvents));
  return (TOLEBOOL)pvbAllowLayoutEvents;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_AllowLayoutEvents(VARIANT_BOOL pvbAllowLayoutEvents/*[in]*/)
{
  return (*this)->set_AllowLayoutEvents(pvbAllowLayoutEvents);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_AllowLayoutEvents(TOLEBOOL pvbAllowLayoutEvents/*[in]*/)
{
  return (*this)->set_AllowLayoutEvents(VARIANT_BOOL)pvbAllowLayoutEvents);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_AllowRenderEvents(VARIANT_BOOL* pvbAllowRenderEvents/*[out,retval]*/)
{
  return (*this)->get_AllowRenderEvents(pvbAllowRenderEvents);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_AllowRenderEvents(TOLEBOOL* pvbAllowRenderEvents/*[out,retval]*/)
{
  return (*this)->get_AllowRenderEvents(VARIANT_BOOL*)pvbAllowRenderEvents);
}

template <class T> TOLEBOOL __fastcall
TCOMChChartSpaceT<T>::get_AllowRenderEvents(void)
{
  VARIANT_BOOL pvbAllowRenderEvents;
  OLECHECK(this->get_AllowRenderEvents((VARIANT_BOOL*)&pvbAllowRenderEvents));
  return (TOLEBOOL)pvbAllowRenderEvents;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_AllowRenderEvents(VARIANT_BOOL pvbAllowRenderEvents/*[in]*/)
{
  return (*this)->set_AllowRenderEvents(pvbAllowRenderEvents);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_AllowRenderEvents(TOLEBOOL pvbAllowRenderEvents/*[in]*/)
{
  return (*this)->set_AllowRenderEvents(VARIANT_BOOL)pvbAllowRenderEvents);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_AllowPointRenderEvents(VARIANT_BOOL* pvbAllowPointRenderEvents/*[out,retval]*/)
{
  return (*this)->get_AllowPointRenderEvents(pvbAllowPointRenderEvents);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_AllowPointRenderEvents(TOLEBOOL* pvbAllowPointRenderEvents/*[out,retval]*/)
{
  return (*this)->get_AllowPointRenderEvents(VARIANT_BOOL*)pvbAllowPointRenderEvents);
}

template <class T> TOLEBOOL __fastcall
TCOMChChartSpaceT<T>::get_AllowPointRenderEvents(void)
{
  VARIANT_BOOL pvbAllowPointRenderEvents;
  OLECHECK(this->get_AllowPointRenderEvents((VARIANT_BOOL*)&pvbAllowPointRenderEvents));
  return (TOLEBOOL)pvbAllowPointRenderEvents;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_AllowPointRenderEvents(VARIANT_BOOL pvbAllowPointRenderEvents/*[in]*/)
{
  return (*this)->set_AllowPointRenderEvents(pvbAllowPointRenderEvents);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_AllowPointRenderEvents(TOLEBOOL pvbAllowPointRenderEvents/*[in]*/)
{
  return (*this)->set_AllowPointRenderEvents(VARIANT_BOOL)pvbAllowPointRenderEvents);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::BuildLitChart(void)
{
  return (*this)->BuildLitChart();
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::Load(BSTR Filename/*[in]*/)
{
  return (*this)->Load(Filename);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::Clear(void)
{
  return (*this)->Clear();
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::ShowHelp(long iTopic/*[in]*/)
{
  return (*this)->ShowHelp(iTopic);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::ExportPicture(BSTR Filename/*[in,def,opt]*/, BSTR FilterName/*[in,def,opt]*/, 
                                    long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  return (*this)->ExportPicture(Filename, FilterName, Width, Height);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::Refresh(void)
{
  return (*this)->Refresh();
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::Select(void)
{
  return (*this)->Select();
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::BeginUndo(void)
{
  return (*this)->BeginUndo();
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::EndUndo(void)
{
  return (*this)->EndUndo();
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::Undo(void)
{
  return (*this)->Undo();
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::RangeFromPoint(int x/*[in]*/, int y/*[in]*/, 
                                     LPDISPATCH* ppobject/*[out,retval]*/)
{
  return (*this)->RangeFromPoint(x, y, ppobject);
}

template <class T> LPDISPATCH __fastcall
TCOMChChartSpaceT<T>::RangeFromPoint(int x/*[in]*/, int y/*[in]*/)
{
  LPDISPATCH ppobject;
  OLECHECK(this->RangeFromPoint(, (LPDISPATCH*)&ppobject));
  return ppobject;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_Enabled(VARIANT_BOOL fEnabled/*[in]*/)
{
  return (*this)->set_Enabled(fEnabled);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_Enabled(TOLEBOOL fEnabled/*[in]*/)
{
  return (*this)->set_Enabled(VARIANT_BOOL)fEnabled);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_Enabled(VARIANT_BOOL* fEnabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(fEnabled);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_Enabled(TOLEBOOL* fEnabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(VARIANT_BOOL*)fEnabled);
}

template <class T> TOLEBOOL __fastcall
TCOMChChartSpaceT<T>::get_Enabled(void)
{
  VARIANT_BOOL fEnabled;
  OLECHECK(this->get_Enabled((VARIANT_BOOL*)&fEnabled));
  return (TOLEBOOL)fEnabled;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_RevisionNumber(BSTR* pbstrRevisionNumber/*[out,retval]*/)
{
  return (*this)->get_RevisionNumber(pbstrRevisionNumber);
}

template <class T> BSTR __fastcall
TCOMChChartSpaceT<T>::get_RevisionNumber(void)
{
  BSTR pbstrRevisionNumber = 0;
  OLECHECK(this->get_RevisionNumber((BSTR*)&pbstrRevisionNumber));
  return pbstrRevisionNumber;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_PrintQuality3D(double prquality/*[in]*/)
{
  return (*this)->set_PrintQuality3D(prquality);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_PrintQuality3D(double* prquality/*[out,retval]*/)
{
  return (*this)->get_PrintQuality3D(prquality);
}

template <class T> double __fastcall
TCOMChChartSpaceT<T>::get_PrintQuality3D(void)
{
  double prquality;
  OLECHECK(this->get_PrintQuality3D((double*)&prquality));
  return prquality;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_DisplayScreenTips(VARIANT_BOOL pfDisplayScreenTips/*[in]*/)
{
  return (*this)->set_DisplayScreenTips(pfDisplayScreenTips);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_DisplayScreenTips(TOLEBOOL pfDisplayScreenTips/*[in]*/)
{
  return (*this)->set_DisplayScreenTips(VARIANT_BOOL)pfDisplayScreenTips);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_DisplayScreenTips(VARIANT_BOOL* pfDisplayScreenTips/*[out,retval]*/)
{
  return (*this)->get_DisplayScreenTips(pfDisplayScreenTips);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_DisplayScreenTips(TOLEBOOL* pfDisplayScreenTips/*[out,retval]*/)
{
  return (*this)->get_DisplayScreenTips(VARIANT_BOOL*)pfDisplayScreenTips);
}

template <class T> TOLEBOOL __fastcall
TCOMChChartSpaceT<T>::get_DisplayScreenTips(void)
{
  VARIANT_BOOL pfDisplayScreenTips;
  OLECHECK(this->get_DisplayScreenTips((VARIANT_BOOL*)&pfDisplayScreenTips));
  return (TOLEBOOL)pfDisplayScreenTips;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_ConnectionString(BSTR ConnectionString/*[in]*/)
{
  return (*this)->set_ConnectionString(ConnectionString);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_ConnectionString(BSTR* ConnectionString/*[out,retval]*/)
{
  return (*this)->get_ConnectionString(ConnectionString);
}

template <class T> BSTR __fastcall
TCOMChChartSpaceT<T>::get_ConnectionString(void)
{
  BSTR ConnectionString = 0;
  OLECHECK(this->get_ConnectionString((BSTR*)&ConnectionString));
  return ConnectionString;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_CommandText(BSTR CommandText/*[in]*/)
{
  return (*this)->set_CommandText(CommandText);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_CommandText(BSTR* CommandText/*[out,retval]*/)
{
  return (*this)->get_CommandText(CommandText);
}

template <class T> BSTR __fastcall
TCOMChChartSpaceT<T>::get_CommandText(void)
{
  BSTR CommandText = 0;
  OLECHECK(this->get_CommandText((BSTR*)&CommandText));
  return CommandText;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_InternalPivotTable(LPDISPATCH* PivotTable/*[out,retval]*/)
{
  return (*this)->get_InternalPivotTable(PivotTable);
}

template <class T> LPDISPATCH __fastcall
TCOMChChartSpaceT<T>::get_InternalPivotTable(void)
{
  LPDISPATCH PivotTable;
  OLECHECK(this->get_InternalPivotTable((LPDISPATCH*)&PivotTable));
  return PivotTable;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::SetData(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/, 
                              long DataSourceIndex/*[in]*/, VARIANT DataReference/*[in,opt]*/)
{
  return (*this)->SetData(Dimension, DataSourceIndex, DataReference);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_HasSeriesByRows(VARIANT_BOOL HasSeriesByRows/*[in]*/)
{
  return (*this)->set_HasSeriesByRows(HasSeriesByRows);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_HasSeriesByRows(TOLEBOOL HasSeriesByRows/*[in]*/)
{
  return (*this)->set_HasSeriesByRows(VARIANT_BOOL)HasSeriesByRows);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_HasSeriesByRows(VARIANT_BOOL* HasSeriesByRows/*[out,retval]*/)
{
  return (*this)->get_HasSeriesByRows(HasSeriesByRows);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_HasSeriesByRows(TOLEBOOL* HasSeriesByRows/*[out,retval]*/)
{
  return (*this)->get_HasSeriesByRows(VARIANT_BOOL*)HasSeriesByRows);
}

template <class T> TOLEBOOL __fastcall
TCOMChChartSpaceT<T>::get_HasSeriesByRows(void)
{
  VARIANT_BOOL HasSeriesByRows;
  OLECHECK(this->get_HasSeriesByRows((VARIANT_BOOL*)&HasSeriesByRows));
  return (TOLEBOOL)HasSeriesByRows;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_PlotAllAggregates(Owc10_xp::ChartPlotAggregatesEnum PlotMultipleAggregates/*[in]*/)
{
  return (*this)->set_PlotAllAggregates(PlotMultipleAggregates);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_PlotAllAggregates(Owc10_xp::ChartPlotAggregatesEnum* PlotMultipleAggregates/*[out,retval]*/)
{
  return (*this)->get_PlotAllAggregates(PlotMultipleAggregates);
}

template <class T> Owc10_xp::ChartPlotAggregatesEnum __fastcall
TCOMChChartSpaceT<T>::get_PlotAllAggregates(void)
{
  Owc10_xp::ChartPlotAggregatesEnum PlotMultipleAggregates;
  OLECHECK(this->get_PlotAllAggregates((Owc10_xp::ChartPlotAggregatesEnum*)&PlotMultipleAggregates));
  return PlotMultipleAggregates;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_HasMultipleCharts(VARIANT_BOOL HasMultiplePlots/*[in]*/)
{
  return (*this)->set_HasMultipleCharts(HasMultiplePlots);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_HasMultipleCharts(TOLEBOOL HasMultiplePlots/*[in]*/)
{
  return (*this)->set_HasMultipleCharts(VARIANT_BOOL)HasMultiplePlots);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_HasMultipleCharts(VARIANT_BOOL* HasMultiplePlots/*[out,retval]*/)
{
  return (*this)->get_HasMultipleCharts(HasMultiplePlots);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_HasMultipleCharts(TOLEBOOL* HasMultiplePlots/*[out,retval]*/)
{
  return (*this)->get_HasMultipleCharts(VARIANT_BOOL*)HasMultiplePlots);
}

template <class T> TOLEBOOL __fastcall
TCOMChChartSpaceT<T>::get_HasMultipleCharts(void)
{
  VARIANT_BOOL HasMultiplePlots;
  OLECHECK(this->get_HasMultipleCharts((VARIANT_BOOL*)&HasMultiplePlots));
  return (TOLEBOOL)HasMultiplePlots;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_DisplayFieldList(VARIANT_BOOL DisplayFieldList/*[in]*/)
{
  return (*this)->set_DisplayFieldList(DisplayFieldList);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_DisplayFieldList(TOLEBOOL DisplayFieldList/*[in]*/)
{
  return (*this)->set_DisplayFieldList(VARIANT_BOOL)DisplayFieldList);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_DisplayFieldList(VARIANT_BOOL* DisplayFieldList/*[out,retval]*/)
{
  return (*this)->get_DisplayFieldList(DisplayFieldList);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_DisplayFieldList(TOLEBOOL* DisplayFieldList/*[out,retval]*/)
{
  return (*this)->get_DisplayFieldList(VARIANT_BOOL*)DisplayFieldList);
}

template <class T> TOLEBOOL __fastcall
TCOMChChartSpaceT<T>::get_DisplayFieldList(void)
{
  VARIANT_BOOL DisplayFieldList;
  OLECHECK(this->get_DisplayFieldList((VARIANT_BOOL*)&DisplayFieldList));
  return (TOLEBOOL)DisplayFieldList;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_HasPassiveAlerts(VARIANT_BOOL pfHasPassiveAlerts/*[in]*/)
{
  return (*this)->set_HasPassiveAlerts(pfHasPassiveAlerts);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_HasPassiveAlerts(TOLEBOOL pfHasPassiveAlerts/*[in]*/)
{
  return (*this)->set_HasPassiveAlerts(VARIANT_BOOL)pfHasPassiveAlerts);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_HasPassiveAlerts(VARIANT_BOOL* pfHasPassiveAlerts/*[out,retval]*/)
{
  return (*this)->get_HasPassiveAlerts(pfHasPassiveAlerts);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_HasPassiveAlerts(TOLEBOOL* pfHasPassiveAlerts/*[out,retval]*/)
{
  return (*this)->get_HasPassiveAlerts(VARIANT_BOOL*)pfHasPassiveAlerts);
}

template <class T> TOLEBOOL __fastcall
TCOMChChartSpaceT<T>::get_HasPassiveAlerts(void)
{
  VARIANT_BOOL pfHasPassiveAlerts;
  OLECHECK(this->get_HasPassiveAlerts((VARIANT_BOOL*)&pfHasPassiveAlerts));
  return (TOLEBOOL)pfHasPassiveAlerts;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::DropZones(Owc10_xp::ChartDropZonesEnum dz/*[in]*/, 
                                Owc10_xp::ChDropZone** ppwcdz/*[out,retval]*/)
{
  return (*this)->DropZones(dz, ppwcdz);
}

template <class T> Owc10_xp::ChDropZone* __fastcall
TCOMChChartSpaceT<T>::DropZones(Owc10_xp::ChartDropZonesEnum dz/*[in]*/)
{
  Owc10_xp::ChDropZone* ppwcdz;
  OLECHECK(this->DropZones(, (Owc10_xp::ChDropZone**)&ppwcdz));
  return ppwcdz;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_DataSourceName(BSTR pbstrDSName/*[in]*/)
{
  return (*this)->set_DataSourceName(pbstrDSName);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_DataSourceName(BSTR* pbstrDSName/*[out,retval]*/)
{
  return (*this)->get_DataSourceName(pbstrDSName);
}

template <class T> BSTR __fastcall
TCOMChChartSpaceT<T>::get_DataSourceName(void)
{
  BSTR pbstrDSName = 0;
  OLECHECK(this->get_DataSourceName((BSTR*)&pbstrDSName));
  return pbstrDSName;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_DisplayFieldButtons(VARIANT_BOOL DisplayFieldButtons/*[in]*/)
{
  return (*this)->set_DisplayFieldButtons(DisplayFieldButtons);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_DisplayFieldButtons(TOLEBOOL DisplayFieldButtons/*[in]*/)
{
  return (*this)->set_DisplayFieldButtons(VARIANT_BOOL)DisplayFieldButtons);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_DisplayFieldButtons(VARIANT_BOOL* DisplayFieldButtons/*[out,retval]*/)
{
  return (*this)->get_DisplayFieldButtons(DisplayFieldButtons);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_DisplayFieldButtons(TOLEBOOL* DisplayFieldButtons/*[out,retval]*/)
{
  return (*this)->get_DisplayFieldButtons(VARIANT_BOOL*)DisplayFieldButtons);
}

template <class T> TOLEBOOL __fastcall
TCOMChChartSpaceT<T>::get_DisplayFieldButtons(void)
{
  VARIANT_BOOL DisplayFieldButtons;
  OLECHECK(this->get_DisplayFieldButtons((VARIANT_BOOL*)&DisplayFieldButtons));
  return (TOLEBOOL)DisplayFieldButtons;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_SelectionList(VARIANT* SelectionList/*[out,retval]*/)
{
  return (*this)->get_SelectionList(SelectionList);
}

template <class T> VARIANT __fastcall
TCOMChChartSpaceT<T>::get_SelectionList(void)
{
  VARIANT SelectionList;
  OLECHECK(this->get_SelectionList((VARIANT*)&SelectionList));
  return SelectionList;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_HasPlotDetails(VARIANT_BOOL pvbPlotDetails/*[in]*/)
{
  return (*this)->set_HasPlotDetails(pvbPlotDetails);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_HasPlotDetails(TOLEBOOL pvbPlotDetails/*[in]*/)
{
  return (*this)->set_HasPlotDetails(VARIANT_BOOL)pvbPlotDetails);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_HasPlotDetails(VARIANT_BOOL* pvbPlotDetails/*[out,retval]*/)
{
  return (*this)->get_HasPlotDetails(pvbPlotDetails);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_HasPlotDetails(TOLEBOOL* pvbPlotDetails/*[out,retval]*/)
{
  return (*this)->get_HasPlotDetails(VARIANT_BOOL*)pvbPlotDetails);
}

template <class T> TOLEBOOL __fastcall
TCOMChChartSpaceT<T>::get_HasPlotDetails(void)
{
  VARIANT_BOOL pvbPlotDetails;
  OLECHECK(this->get_HasPlotDetails((VARIANT_BOOL*)&pvbPlotDetails));
  return (TOLEBOOL)pvbPlotDetails;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::FieldListAddTo(LPUNKNOWN punk/*[in]*/, long lPos)
{
  return (*this)->FieldListAddTo(punk, lPos);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_AllowScreenTipEvents(VARIANT_BOOL pfAllowScreenTipEvents/*[in]*/)
{
  return (*this)->set_AllowScreenTipEvents(pfAllowScreenTipEvents);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_AllowScreenTipEvents(TOLEBOOL pfAllowScreenTipEvents/*[in]*/)
{
  return (*this)->set_AllowScreenTipEvents(VARIANT_BOOL)pfAllowScreenTipEvents);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_AllowScreenTipEvents(VARIANT_BOOL* pfAllowScreenTipEvents/*[out,retval]*/)
{
  return (*this)->get_AllowScreenTipEvents(pfAllowScreenTipEvents);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_AllowScreenTipEvents(TOLEBOOL* pfAllowScreenTipEvents/*[out,retval]*/)
{
  return (*this)->get_AllowScreenTipEvents(VARIANT_BOOL*)pfAllowScreenTipEvents);
}

template <class T> TOLEBOOL __fastcall
TCOMChChartSpaceT<T>::get_AllowScreenTipEvents(void)
{
  VARIANT_BOOL pfAllowScreenTipEvents;
  OLECHECK(this->get_AllowScreenTipEvents((VARIANT_BOOL*)&pfAllowScreenTipEvents));
  return (TOLEBOOL)pfAllowScreenTipEvents;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_Commands(Owc10_xp::OCCommands** Commands/*[out,retval]*/)
{
  return (*this)->get_Commands(Commands);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_Commands(Owc10_xp::OCCommandsPtr* Commands/*[out,retval]*/)
{
  return (*this)->get_Commands(OCCommands**)Commands);
}

template <class T> Owc10_xp::OCCommandsPtr __fastcall
TCOMChChartSpaceT<T>::get_Commands(void)
{
  Owc10_xp::OCCommands* Commands;
  OLECHECK(this->get_Commands((Owc10_xp::OCCommands**)&Commands));
  return (Owc10_xp::OCCommandsPtr)Commands;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_AllowPropertyToolbox(VARIANT_BOOL fMenu/*[in]*/)
{
  return (*this)->set_AllowPropertyToolbox(fMenu);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_AllowPropertyToolbox(TOLEBOOL fMenu/*[in]*/)
{
  return (*this)->set_AllowPropertyToolbox(VARIANT_BOOL)fMenu);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_AllowPropertyToolbox(VARIANT_BOOL* fMenu/*[out,retval]*/)
{
  return (*this)->get_AllowPropertyToolbox(fMenu);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_AllowPropertyToolbox(TOLEBOOL* fMenu/*[out,retval]*/)
{
  return (*this)->get_AllowPropertyToolbox(VARIANT_BOOL*)fMenu);
}

template <class T> TOLEBOOL __fastcall
TCOMChChartSpaceT<T>::get_AllowPropertyToolbox(void)
{
  VARIANT_BOOL fMenu;
  OLECHECK(this->get_AllowPropertyToolbox((VARIANT_BOOL*)&fMenu));
  return (TOLEBOOL)fMenu;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_AllowGrouping(VARIANT_BOOL* AllowGrouping/*[out,retval]*/)
{
  return (*this)->get_AllowGrouping(AllowGrouping);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_AllowGrouping(TOLEBOOL* AllowGrouping/*[out,retval]*/)
{
  return (*this)->get_AllowGrouping(VARIANT_BOOL*)AllowGrouping);
}

template <class T> TOLEBOOL __fastcall
TCOMChChartSpaceT<T>::get_AllowGrouping(void)
{
  VARIANT_BOOL AllowGrouping;
  OLECHECK(this->get_AllowGrouping((VARIANT_BOOL*)&AllowGrouping));
  return (TOLEBOOL)AllowGrouping;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_AllowGrouping(VARIANT_BOOL AllowGrouping/*[in]*/)
{
  return (*this)->set_AllowGrouping(AllowGrouping);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_AllowGrouping(TOLEBOOL AllowGrouping/*[in]*/)
{
  return (*this)->set_AllowGrouping(VARIANT_BOOL)AllowGrouping);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_AllowFiltering(VARIANT_BOOL* AllowFiltering/*[out,retval]*/)
{
  return (*this)->get_AllowFiltering(AllowFiltering);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_AllowFiltering(TOLEBOOL* AllowFiltering/*[out,retval]*/)
{
  return (*this)->get_AllowFiltering(VARIANT_BOOL*)AllowFiltering);
}

template <class T> TOLEBOOL __fastcall
TCOMChChartSpaceT<T>::get_AllowFiltering(void)
{
  VARIANT_BOOL AllowFiltering;
  OLECHECK(this->get_AllowFiltering((VARIANT_BOOL*)&AllowFiltering));
  return (TOLEBOOL)AllowFiltering;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_AllowFiltering(VARIANT_BOOL AllowFiltering/*[in]*/)
{
  return (*this)->set_AllowFiltering(AllowFiltering);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_AllowFiltering(TOLEBOOL AllowFiltering/*[in]*/)
{
  return (*this)->set_AllowFiltering(VARIANT_BOOL)AllowFiltering);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_Top(long* ptop/*[out,retval]*/)
{
  return (*this)->get_Top(ptop);
}

template <class T> long __fastcall
TCOMChChartSpaceT<T>::get_Top(void)
{
  long ptop;
  OLECHECK(this->get_Top((long*)&ptop));
  return ptop;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_Left(long* pleft/*[out,retval]*/)
{
  return (*this)->get_Left(pleft);
}

template <class T> long __fastcall
TCOMChChartSpaceT<T>::get_Left(void)
{
  long pleft;
  OLECHECK(this->get_Left((long*)&pleft));
  return pleft;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_Bottom(long* pbottom/*[out,retval]*/)
{
  return (*this)->get_Bottom(pbottom);
}

template <class T> long __fastcall
TCOMChChartSpaceT<T>::get_Bottom(void)
{
  long pbottom;
  OLECHECK(this->get_Bottom((long*)&pbottom));
  return pbottom;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_Right(long* pright/*[out,retval]*/)
{
  return (*this)->get_Right(pright);
}

template <class T> long __fastcall
TCOMChChartSpaceT<T>::get_Right(void)
{
  long pright;
  OLECHECK(this->get_Right((long*)&pright));
  return pright;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_HasUnifiedScales(VARIANT_BOOL* HasUnifiedScales/*[out,retval]*/)
{
  return (*this)->get_HasUnifiedScales(HasUnifiedScales);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_HasUnifiedScales(TOLEBOOL* HasUnifiedScales/*[out,retval]*/)
{
  return (*this)->get_HasUnifiedScales(VARIANT_BOOL*)HasUnifiedScales);
}

template <class T> TOLEBOOL __fastcall
TCOMChChartSpaceT<T>::get_HasUnifiedScales(void)
{
  VARIANT_BOOL HasUnifiedScales;
  OLECHECK(this->get_HasUnifiedScales((VARIANT_BOOL*)&HasUnifiedScales));
  return (TOLEBOOL)HasUnifiedScales;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_HasUnifiedScales(VARIANT_BOOL HasUnifiedScales/*[in]*/)
{
  return (*this)->set_HasUnifiedScales(HasUnifiedScales);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_HasUnifiedScales(TOLEBOOL HasUnifiedScales/*[in]*/)
{
  return (*this)->set_HasUnifiedScales(VARIANT_BOOL)HasUnifiedScales);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_DisplayToolbar(VARIANT_BOOL* DisplayToolbar/*[out,retval]*/)
{
  return (*this)->get_DisplayToolbar(DisplayToolbar);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_DisplayToolbar(TOLEBOOL* DisplayToolbar/*[out,retval]*/)
{
  return (*this)->get_DisplayToolbar(VARIANT_BOOL*)DisplayToolbar);
}

template <class T> TOLEBOOL __fastcall
TCOMChChartSpaceT<T>::get_DisplayToolbar(void)
{
  VARIANT_BOOL DisplayToolbar;
  OLECHECK(this->get_DisplayToolbar((VARIANT_BOOL*)&DisplayToolbar));
  return (TOLEBOOL)DisplayToolbar;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_DisplayToolbar(VARIANT_BOOL DisplayToolbar/*[in]*/)
{
  return (*this)->set_DisplayToolbar(DisplayToolbar);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_DisplayToolbar(TOLEBOOL DisplayToolbar/*[in]*/)
{
  return (*this)->set_DisplayToolbar(VARIANT_BOOL)DisplayToolbar);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_Toolbar(Mscomctllib_xp::IToolbar** Toolbar/*[out,retval]*/)
{
  return (*this)->get_Toolbar(Toolbar);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_Toolbar(Mscomctllib_xp::IToolbarPtr* Toolbar/*[out,retval]*/)
{
  return (*this)->get_Toolbar(IToolbar**)Toolbar);
}

template <class T> Mscomctllib_xp::IToolbarPtr __fastcall
TCOMChChartSpaceT<T>::get_Toolbar(void)
{
  Mscomctllib_xp::IToolbar* Toolbar;
  OLECHECK(this->get_Toolbar((Mscomctllib_xp::IToolbar**)&Toolbar));
  return (Mscomctllib_xp::IToolbarPtr)Toolbar;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_ViewOnlyMode(VARIANT_BOOL* ViewOnlyMode/*[out,retval]*/)
{
  return (*this)->get_ViewOnlyMode(ViewOnlyMode);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_ViewOnlyMode(TOLEBOOL* ViewOnlyMode/*[out,retval]*/)
{
  return (*this)->get_ViewOnlyMode(VARIANT_BOOL*)ViewOnlyMode);
}

template <class T> TOLEBOOL __fastcall
TCOMChChartSpaceT<T>::get_ViewOnlyMode(void)
{
  VARIANT_BOOL ViewOnlyMode;
  OLECHECK(this->get_ViewOnlyMode((VARIANT_BOOL*)&ViewOnlyMode));
  return (TOLEBOOL)ViewOnlyMode;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::LocateDataSource(void)
{
  return (*this)->LocateDataSource();
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::ShowContextMenu(long x/*[in]*/, long y/*[in]*/, VARIANT Menu/*[in]*/)
{
  return (*this)->ShowContextMenu(x, y, Menu);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::GetPicture(BSTR FilterName/*[in,def,opt]*/, long Width/*[in,def,opt]*/, 
                                 long Height/*[in,def,opt]*/, VARIANT* pvarArray/*[out,retval]*/)
{
  return (*this)->GetPicture(FilterName, Width, Height, pvarArray);
}

template <class T> VARIANT __fastcall
TCOMChChartSpaceT<T>::GetPicture(BSTR FilterName/*[in,def,opt]*/, long Width/*[in,def,opt]*/, 
                                 long Height/*[in,def,opt]*/)
{
  VARIANT pvarArray;
  OLECHECK(this->GetPicture(, (VARIANT*)&pvarArray));
  return pvarArray;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::SetSpreadsheetData(BSTR DataReference/*[in]*/, 
                                         VARIANT_BOOL SeriesByRows/*[in,def,opt]*/)
{
  return (*this)->SetSpreadsheetData(DataReference, SeriesByRows);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::Repaint(void)
{
  return (*this)->Repaint();
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_IsDirty(VARIANT_BOOL* IsDirty/*[out,retval]*/)
{
  return (*this)->get_IsDirty(IsDirty);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_IsDirty(TOLEBOOL* IsDirty/*[out,retval]*/)
{
  return (*this)->get_IsDirty(VARIANT_BOOL*)IsDirty);
}

template <class T> TOLEBOOL __fastcall
TCOMChChartSpaceT<T>::get_IsDirty(void)
{
  VARIANT_BOOL IsDirty;
  OLECHECK(this->get_IsDirty((VARIANT_BOOL*)&IsDirty));
  return (TOLEBOOL)IsDirty;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_IsDirty(VARIANT_BOOL IsDirty/*[in]*/)
{
  return (*this)->set_IsDirty(IsDirty);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_IsDirty(TOLEBOOL IsDirty/*[in]*/)
{
  return (*this)->set_IsDirty(VARIANT_BOOL)IsDirty);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_International(VARIANT Index/*[in]*/, VARIANT* info/*[out,retval]*/)
{
  return (*this)->get_International(Index, info);
}

template <class T> VARIANT __fastcall
TCOMChChartSpaceT<T>::get_International(VARIANT Index/*[in]*/)
{
  VARIANT info;
  OLECHECK(this->get_International(, (VARIANT*)&info));
  return info;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_LanguageSettings(Owc10_xp::OWCLanguageSettings** langset/*[out,retval]*/)
{
  return (*this)->get_LanguageSettings(langset);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_LanguageSettings(Owc10_xp::OWCLanguageSettingsPtr* langset/*[out,retval]*/)
{
  return (*this)->get_LanguageSettings(OWCLanguageSettings**)langset);
}

template <class T> Owc10_xp::OWCLanguageSettingsPtr __fastcall
TCOMChChartSpaceT<T>::get_LanguageSettings(void)
{
  Owc10_xp::OWCLanguageSettings* langset;
  OLECHECK(this->get_LanguageSettings((Owc10_xp::OWCLanguageSettings**)&langset));
  return (Owc10_xp::OWCLanguageSettingsPtr)langset;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  return (*this)->get_Parent(Parent);
}

template <class T> LPDISPATCH __fastcall
TCOMChChartSpaceT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
  return Parent;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::GetDataSourceIndex(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/, 
                                         long* DataSourceIndex/*[out,retval]*/)
{
  return (*this)->GetDataSourceIndex(Dimension, DataSourceIndex);
}

template <class T> long __fastcall
TCOMChChartSpaceT<T>::GetDataSourceIndex(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/)
{
  long DataSourceIndex;
  OLECHECK(this->GetDataSourceIndex(, (long*)&DataSourceIndex));
  return DataSourceIndex;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_HasRuntimeSelection(VARIANT_BOOL* pvb/*[out,retval]*/)
{
  return (*this)->get_HasRuntimeSelection(pvb);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_HasRuntimeSelection(TOLEBOOL* pvb/*[out,retval]*/)
{
  return (*this)->get_HasRuntimeSelection(VARIANT_BOOL*)pvb);
}

template <class T> TOLEBOOL __fastcall
TCOMChChartSpaceT<T>::get_HasRuntimeSelection(void)
{
  VARIANT_BOOL pvb;
  OLECHECK(this->get_HasRuntimeSelection((VARIANT_BOOL*)&pvb));
  return (TOLEBOOL)pvb;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_HasRuntimeSelection(VARIANT_BOOL pvb/*[in]*/)
{
  return (*this)->set_HasRuntimeSelection(pvb);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_HasRuntimeSelection(TOLEBOOL pvb/*[in]*/)
{
  return (*this)->set_HasRuntimeSelection(VARIANT_BOOL)pvb);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::ClearUndo(void)
{
  return (*this)->ClearUndo();
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_DisplayBranding(VARIANT_BOOL* DisplayBranding/*[out,retval]*/)
{
  return (*this)->get_DisplayBranding(DisplayBranding);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_DisplayBranding(TOLEBOOL* DisplayBranding/*[out,retval]*/)
{
  return (*this)->get_DisplayBranding(VARIANT_BOOL*)DisplayBranding);
}

template <class T> TOLEBOOL __fastcall
TCOMChChartSpaceT<T>::get_DisplayBranding(void)
{
  VARIANT_BOOL DisplayBranding;
  OLECHECK(this->get_DisplayBranding((VARIANT_BOOL*)&DisplayBranding));
  return (TOLEBOOL)DisplayBranding;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_DisplayBranding(VARIANT_BOOL DisplayBranding/*[in]*/)
{
  return (*this)->set_DisplayBranding(DisplayBranding);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_DisplayBranding(TOLEBOOL DisplayBranding/*[in]*/)
{
  return (*this)->set_DisplayBranding(VARIANT_BOOL)DisplayBranding);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_DisplayOfficeLogo(VARIANT_BOOL* DisplayOfficeLogo/*[out,retval]*/)
{
  return (*this)->get_DisplayOfficeLogo(DisplayOfficeLogo);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_DisplayOfficeLogo(TOLEBOOL* DisplayOfficeLogo/*[out,retval]*/)
{
  return (*this)->get_DisplayOfficeLogo(VARIANT_BOOL*)DisplayOfficeLogo);
}

template <class T> TOLEBOOL __fastcall
TCOMChChartSpaceT<T>::get_DisplayOfficeLogo(void)
{
  VARIANT_BOOL DisplayOfficeLogo;
  OLECHECK(this->get_DisplayOfficeLogo((VARIANT_BOOL*)&DisplayOfficeLogo));
  return (TOLEBOOL)DisplayOfficeLogo;
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_DisplayOfficeLogo(VARIANT_BOOL DisplayOfficeLogo/*[in]*/)
{
  return (*this)->set_DisplayOfficeLogo(DisplayOfficeLogo);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::set_DisplayOfficeLogo(TOLEBOOL DisplayOfficeLogo/*[in]*/)
{
  return (*this)->set_DisplayOfficeLogo(VARIANT_BOOL)DisplayOfficeLogo);
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::OkToBindToControlByName(void)
{
  return (*this)->OkToBindToControlByName();
}

template <class T> HRESULT __fastcall
TCOMChChartSpaceT<T>::get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/)
{
  return (*this)->get_ObjectType(pcs);
}

template <class T> Owc10_xp::ChartSelectionsEnum __fastcall
TCOMChChartSpaceT<T>::get_ObjectType(void)
{
  Owc10_xp::ChartSelectionsEnum pcs;
  OLECHECK(this->get_ObjectType((Owc10_xp::ChartSelectionsEnum*)&pcs));
  return pcs;
}

// *********************************************************************//
// DispIntf:  ChChartSpace
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A82-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::set_ChartLayout(Owc10_xp::ChartChartLayoutEnum pChartChartLayout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChartLayout"), DISPID(5000));
  TAutoArgs<1> _args;
  _args[1] = (int)pChartChartLayout /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_ChartLayout(Owc10_xp::ChartChartLayoutEnum* pChartChartLayout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChartLayout"), DISPID(5000));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pChartChartLayout /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartChartLayoutEnum __fastcall
ChChartSpaceDispT<T>::get_ChartLayout(void)
{
  Owc10_xp::ChartChartLayoutEnum pChartChartLayout;
  this->get_ChartLayout((Owc10_xp::ChartChartLayoutEnum*)&pChartChartLayout);
  return pChartChartLayout;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::set_ChartWrapCount(long plcount/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChartWrapCount"), DISPID(5001));
  TAutoArgs<1> _args;
  _args[1] = plcount /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_ChartWrapCount(long* plcount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChartWrapCount"), DISPID(5001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plcount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChChartSpaceDispT<T>::get_ChartWrapCount(void)
{
  long plcount;
  this->get_ChartWrapCount((long*)&plcount);
  return plcount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::set_EnableEvents(VARIANT_BOOL pfEnableEvents/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableEvents"), DISPID(5016));
  TAutoArgs<1> _args;
  _args[1] = pfEnableEvents /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_EnableEvents(VARIANT_BOOL* pfEnableEvents/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableEvents"), DISPID(5016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfEnableEvents /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChChartSpaceDispT<T>::get_EnableEvents(void)
{
  VARIANT_BOOL pfEnableEvents;
  this->get_EnableEvents((VARIANT_BOOL*)&pfEnableEvents);
  return pfEnableEvents;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::set_HasChartSpaceLegend(VARIANT_BOOL pfHasChartSpaceLegend/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasChartSpaceLegend"), DISPID(5002));
  TAutoArgs<1> _args;
  _args[1] = pfHasChartSpaceLegend /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_HasChartSpaceLegend(VARIANT_BOOL* pfHasChartSpaceLegend/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasChartSpaceLegend"), DISPID(5002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfHasChartSpaceLegend /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChChartSpaceDispT<T>::get_HasChartSpaceLegend(void)
{
  VARIANT_BOOL pfHasChartSpaceLegend;
  this->get_HasChartSpaceLegend((VARIANT_BOOL*)&pfHasChartSpaceLegend);
  return pfHasChartSpaceLegend;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_MajorVersion(long* plMajorVersion/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MajorVersion"), DISPID(5026));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plMajorVersion /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChChartSpaceDispT<T>::get_MajorVersion(void)
{
  long plMajorVersion;
  this->get_MajorVersion((long*)&plMajorVersion);
  return plMajorVersion;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_MinorVersion(BSTR* pbstrMinorVersion/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinorVersion"), DISPID(5027));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrMinorVersion /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ChChartSpaceDispT<T>::get_MinorVersion(void)
{
  BSTR pbstrMinorVersion;
  this->get_MinorVersion((BSTR*)&pbstrMinorVersion);
  return pbstrMinorVersion;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_BuildNumber(BSTR* pbstrBuildNumber/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuildNumber"), DISPID(5028));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrBuildNumber /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ChChartSpaceDispT<T>::get_BuildNumber(void)
{
  BSTR pbstrBuildNumber;
  this->get_BuildNumber((BSTR*)&pbstrBuildNumber);
  return pbstrBuildNumber;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::set_ScreenUpdating(VARIANT_BOOL pfUpdate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScreenUpdating"), DISPID(5003));
  TAutoArgs<1> _args;
  _args[1] = pfUpdate /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_ScreenUpdating(VARIANT_BOOL* pfUpdate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScreenUpdating"), DISPID(5003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfUpdate /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChChartSpaceDispT<T>::get_ScreenUpdating(void)
{
  VARIANT_BOOL pfUpdate;
  this->get_ScreenUpdating((VARIANT_BOOL*)&pfUpdate);
  return pfUpdate;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_Border(Owc10_xp::ChBorder** ppline/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Border"), DISPID(5004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChBorder**)ppline /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChBorder* __fastcall
ChChartSpaceDispT<T>::get_Border(void)
{
  Owc10_xp::ChBorder* ppline;
  this->get_Border((Owc10_xp::ChBorder**)&ppline);
  return ppline;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_Charts(Owc10_xp::ChCharts** ppcharts/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Charts"), DISPID(5005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChCharts**)ppcharts /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChCharts* __fastcall
ChChartSpaceDispT<T>::get_Charts(void)
{
  Owc10_xp::ChCharts* ppcharts;
  this->get_Charts((Owc10_xp::ChCharts**)&ppcharts);
  return ppcharts;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::_set_DataSource(Msdatasrc_xp::DataSource* ppidatasource/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataSource"), DISPID(5020));
  TAutoArgs<1> _args;
  _args[1] = (LPUNKNOWN)(Msdatasrc_xp::DataSource*)ppidatasource /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::set_DataSource(Msdatasrc_xp::DataSource* ppidatasource/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataSource"), DISPID(5020));
  TAutoArgs<1> _args;
  _args[1] = (LPUNKNOWN)(Msdatasrc_xp::DataSource*)ppidatasource /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_DataSource(Msdatasrc_xp::DataSource** ppidatasource/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataSource"), DISPID(5020));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPUNKNOWN*)(Msdatasrc_xp::DataSource**)ppidatasource /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msdatasrc_xp::DataSource* __fastcall
ChChartSpaceDispT<T>::get_DataSource(void)
{
  Msdatasrc_xp::DataSource* ppidatasource;
  this->get_DataSource((Msdatasrc_xp::DataSource**)&ppidatasource);
  return ppidatasource;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::set_DataMember(Msdatasrc_xp::DataMember pdatamember/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataMember"), DISPID(5021));
  TAutoArgs<1> _args;
  _args[1] = pdatamember /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_DataMember(Msdatasrc_xp::DataMember* pdatamember/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataMember"), DISPID(5021));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdatamember /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msdatasrc_xp::DataMember __fastcall
ChChartSpaceDispT<T>::get_DataMember(void)
{
  Msdatasrc_xp::DataMember pdatamember;
  this->get_DataMember((Msdatasrc_xp::DataMember*)&pdatamember);
  return pdatamember;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_DataSourceType(Owc10_xp::ChartDataSourceTypeEnum* pocpDST/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataSourceType"), DISPID(5023));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pocpDST /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartDataSourceTypeEnum __fastcall
ChChartSpaceDispT<T>::get_DataSourceType(void)
{
  Owc10_xp::ChartDataSourceTypeEnum pocpDST;
  this->get_DataSourceType((Owc10_xp::ChartDataSourceTypeEnum*)&pocpDST);
  return pocpDST;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::set_HasChartSpaceTitle(VARIANT_BOOL pfHasChartSpaceTitle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasChartSpaceTitle"), DISPID(5017));
  TAutoArgs<1> _args;
  _args[1] = pfHasChartSpaceTitle /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_HasChartSpaceTitle(VARIANT_BOOL* pfHasChartSpaceTitle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasChartSpaceTitle"), DISPID(5017));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfHasChartSpaceTitle /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChChartSpaceDispT<T>::get_HasChartSpaceTitle(void)
{
  VARIANT_BOOL pfHasChartSpaceTitle;
  this->get_HasChartSpaceTitle((VARIANT_BOOL*)&pfHasChartSpaceTitle);
  return pfHasChartSpaceTitle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_Interior(Owc10_xp::ChInterior** ppinterior/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Interior"), DISPID(5007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChInterior**)ppinterior /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChInterior* __fastcall
ChChartSpaceDispT<T>::get_Interior(void)
{
  Owc10_xp::ChInterior* ppinterior;
  this->get_Interior((Owc10_xp::ChInterior**)&ppinterior);
  return ppinterior;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_ChartSpaceLegend(Owc10_xp::ChLegend** pplegend/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChartSpaceLegend"), DISPID(5008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChLegend**)pplegend /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChLegend* __fastcall
ChChartSpaceDispT<T>::get_ChartSpaceLegend(void)
{
  Owc10_xp::ChLegend* pplegend;
  this->get_ChartSpaceLegend((Owc10_xp::ChLegend**)&pplegend);
  return pplegend;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_Selection(LPDISPATCH* ppobject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Selection"), DISPID(5029));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppobject /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ChChartSpaceDispT<T>::get_Selection(void)
{
  LPDISPATCH ppobject;
  this->get_Selection((LPDISPATCH*)&ppobject);
  return ppobject;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_SelectionType(Owc10_xp::ChartSelectionsEnum* itype/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectionType"), DISPID(5030));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)itype /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartSelectionsEnum __fastcall
ChChartSpaceDispT<T>::get_SelectionType(void)
{
  Owc10_xp::ChartSelectionsEnum itype;
  this->get_SelectionType((Owc10_xp::ChartSelectionsEnum*)&itype);
  return itype;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::set_HasSelectionMarks(Owc10_xp::ChartSelectionMarksEnum fMarks/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasSelectionMarks"), DISPID(5031));
  TAutoArgs<1> _args;
  _args[1] = (int)fMarks /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_HasSelectionMarks(Owc10_xp::ChartSelectionMarksEnum* fMarks/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasSelectionMarks"), DISPID(5031));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)fMarks /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartSelectionMarksEnum __fastcall
ChChartSpaceDispT<T>::get_HasSelectionMarks(void)
{
  Owc10_xp::ChartSelectionMarksEnum fMarks;
  this->get_HasSelectionMarks((Owc10_xp::ChartSelectionMarksEnum*)&fMarks);
  return fMarks;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::set_DisplayPropertyToolbox(VARIANT_BOOL fMenu/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayPropertyToolbox"), DISPID(4002));
  TAutoArgs<1> _args;
  _args[1] = fMenu /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_DisplayPropertyToolbox(VARIANT_BOOL* fMenu/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayPropertyToolbox"), DISPID(4002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(fMenu /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChChartSpaceDispT<T>::get_DisplayPropertyToolbox(void)
{
  VARIANT_BOOL fMenu;
  this->get_DisplayPropertyToolbox((VARIANT_BOOL*)&fMenu);
  return fMenu;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_ChartSpaceTitle(Owc10_xp::ChTitle** pptitle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChartSpaceTitle"), DISPID(5009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChTitle**)pptitle /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChTitle* __fastcall
ChChartSpaceDispT<T>::get_ChartSpaceTitle(void)
{
  Owc10_xp::ChTitle* pptitle;
  this->get_ChartSpaceTitle((Owc10_xp::ChTitle**)&pptitle);
  return pptitle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_Version(BSTR* pbstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(5010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ChChartSpaceDispT<T>::get_Version(void)
{
  BSTR pbstr;
  this->get_Version((BSTR*)&pbstr);
  return pbstr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_XMLData(BSTR* pbstrHTML/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XMLData"), DISPID(5022));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrHTML /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ChChartSpaceDispT<T>::get_XMLData(void)
{
  BSTR pbstrHTML;
  this->get_XMLData((BSTR*)&pbstrHTML);
  return pbstrHTML;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::set_XMLData(BSTR pbstrHTML/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("XMLData"), DISPID(5022));
  TAutoArgs<1> _args;
  _args[1] = pbstrHTML /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_Constants(LPDISPATCH* ppIDispatchConstants/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Constants"), DISPID(DISPID_UNKNOWN/*[1610743843]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppIDispatchConstants /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ChChartSpaceDispT<T>::get_Constants(void)
{
  LPDISPATCH ppIDispatchConstants;
  this->get_Constants((LPDISPATCH*)&ppIDispatchConstants);
  return ppIDispatchConstants;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_CanUndo(VARIANT_BOOL* pfCanUndo/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanUndo"), DISPID(5033));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfCanUndo /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChChartSpaceDispT<T>::get_CanUndo(void)
{
  VARIANT_BOOL pfCanUndo;
  this->get_CanUndo((VARIANT_BOOL*)&pfCanUndo);
  return pfCanUndo;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_AllowLayoutEvents(VARIANT_BOOL* pvbAllowLayoutEvents/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowLayoutEvents"), DISPID(5068));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvbAllowLayoutEvents /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChChartSpaceDispT<T>::get_AllowLayoutEvents(void)
{
  VARIANT_BOOL pvbAllowLayoutEvents;
  this->get_AllowLayoutEvents((VARIANT_BOOL*)&pvbAllowLayoutEvents);
  return pvbAllowLayoutEvents;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::set_AllowLayoutEvents(VARIANT_BOOL pvbAllowLayoutEvents/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowLayoutEvents"), DISPID(5068));
  TAutoArgs<1> _args;
  _args[1] = pvbAllowLayoutEvents /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_AllowRenderEvents(VARIANT_BOOL* pvbAllowRenderEvents/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowRenderEvents"), DISPID(5069));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvbAllowRenderEvents /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChChartSpaceDispT<T>::get_AllowRenderEvents(void)
{
  VARIANT_BOOL pvbAllowRenderEvents;
  this->get_AllowRenderEvents((VARIANT_BOOL*)&pvbAllowRenderEvents);
  return pvbAllowRenderEvents;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::set_AllowRenderEvents(VARIANT_BOOL pvbAllowRenderEvents/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowRenderEvents"), DISPID(5069));
  TAutoArgs<1> _args;
  _args[1] = pvbAllowRenderEvents /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_AllowPointRenderEvents(VARIANT_BOOL* pvbAllowPointRenderEvents/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowPointRenderEvents"), DISPID(5070));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvbAllowPointRenderEvents /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChChartSpaceDispT<T>::get_AllowPointRenderEvents(void)
{
  VARIANT_BOOL pvbAllowPointRenderEvents;
  this->get_AllowPointRenderEvents((VARIANT_BOOL*)&pvbAllowPointRenderEvents);
  return pvbAllowPointRenderEvents;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::set_AllowPointRenderEvents(VARIANT_BOOL pvbAllowPointRenderEvents/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowPointRenderEvents"), DISPID(5070));
  TAutoArgs<1> _args;
  _args[1] = pvbAllowPointRenderEvents /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::BuildLitChart()
{
  _TDispID _dispid(*this, OLETEXT("BuildLitChart"), DISPID(5019));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::Load(BSTR Filename/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Load"), DISPID(5018));
  TAutoArgs<1> _args;
  _args[1] = Filename /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::Clear()
{
  _TDispID _dispid(*this, OLETEXT("Clear"), DISPID(5012));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::ShowHelp(long iTopic/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowHelp"), DISPID(5034));
  TAutoArgs<1> _args;
  _args[1] = iTopic /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::ExportPicture(BSTR Filename/*[in,def,opt]*/, BSTR FilterName/*[in,def,opt]*/, 
                                    long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExportPicture"), DISPID(5035));
  TAutoArgs<4> _args;
  _args[1] = Filename /*[VT_BSTR:0]*/;
  _args[2] = FilterName /*[VT_BSTR:0]*/;
  _args[3] = Width /*[VT_I4:0]*/;
  _args[4] = Height /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::Refresh()
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(5014));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::Select()
{
  _TDispID _dispid(*this, OLETEXT("Select"), DISPID(5036));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::BeginUndo()
{
  _TDispID _dispid(*this, OLETEXT("BeginUndo"), DISPID(5037));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::EndUndo()
{
  _TDispID _dispid(*this, OLETEXT("EndUndo"), DISPID(5038));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::Undo()
{
  _TDispID _dispid(*this, OLETEXT("Undo"), DISPID(5039));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::RangeFromPoint(int x/*[in]*/, int y/*[in]*/, 
                                     LPDISPATCH* ppobject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RangeFromPoint"), DISPID(5025));
  TAutoArgs<2> _args;
  _args[1] = x /*[VT_INT:0]*/;
  _args[2] = y /*[VT_INT:0]*/;
  return OutRetValSetterPtr(ppobject /*[VT_DISPATCH:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ChChartSpaceDispT<T>::RangeFromPoint(int x/*[in]*/, int y/*[in]*/)
{
  LPDISPATCH ppobject;
  this->RangeFromPoint(x, y, (LPDISPATCH*)&ppobject);
  return ppobject;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::set_Enabled(VARIANT_BOOL fEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(5040));
  TAutoArgs<1> _args;
  _args[1] = fEnabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_Enabled(VARIANT_BOOL* fEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(5040));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(fEnabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChChartSpaceDispT<T>::get_Enabled(void)
{
  VARIANT_BOOL fEnabled;
  this->get_Enabled((VARIANT_BOOL*)&fEnabled);
  return fEnabled;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_RevisionNumber(BSTR* pbstrRevisionNumber/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RevisionNumber"), DISPID(5042));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrRevisionNumber /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ChChartSpaceDispT<T>::get_RevisionNumber(void)
{
  BSTR pbstrRevisionNumber;
  this->get_RevisionNumber((BSTR*)&pbstrRevisionNumber);
  return pbstrRevisionNumber;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::set_PrintQuality3D(double prquality/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintQuality3D"), DISPID(5043));
  TAutoArgs<1> _args;
  _args[1] = prquality /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_PrintQuality3D(double* prquality/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintQuality3D"), DISPID(5043));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(prquality /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
ChChartSpaceDispT<T>::get_PrintQuality3D(void)
{
  double prquality;
  this->get_PrintQuality3D((double*)&prquality);
  return prquality;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::set_DisplayScreenTips(VARIANT_BOOL pfDisplayScreenTips/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayScreenTips"), DISPID(5062));
  TAutoArgs<1> _args;
  _args[1] = pfDisplayScreenTips /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_DisplayScreenTips(VARIANT_BOOL* pfDisplayScreenTips/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayScreenTips"), DISPID(5062));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfDisplayScreenTips /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChChartSpaceDispT<T>::get_DisplayScreenTips(void)
{
  VARIANT_BOOL pfDisplayScreenTips;
  this->get_DisplayScreenTips((VARIANT_BOOL*)&pfDisplayScreenTips);
  return pfDisplayScreenTips;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::set_ConnectionString(BSTR ConnectionString/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionString"), DISPID(5052));
  TAutoArgs<1> _args;
  _args[1] = ConnectionString /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_ConnectionString(BSTR* ConnectionString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionString"), DISPID(5052));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ConnectionString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ChChartSpaceDispT<T>::get_ConnectionString(void)
{
  BSTR ConnectionString;
  this->get_ConnectionString((BSTR*)&ConnectionString);
  return ConnectionString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::set_CommandText(BSTR CommandText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CommandText"), DISPID(5045));
  TAutoArgs<1> _args;
  _args[1] = CommandText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_CommandText(BSTR* CommandText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CommandText"), DISPID(5045));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CommandText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ChChartSpaceDispT<T>::get_CommandText(void)
{
  BSTR CommandText;
  this->get_CommandText((BSTR*)&CommandText);
  return CommandText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_InternalPivotTable(LPDISPATCH* PivotTable/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InternalPivotTable"), DISPID(5046));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(PivotTable /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ChChartSpaceDispT<T>::get_InternalPivotTable(void)
{
  LPDISPATCH PivotTable;
  this->get_InternalPivotTable((LPDISPATCH*)&PivotTable);
  return PivotTable;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::SetData(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/, 
                              long DataSourceIndex/*[in]*/, VARIANT DataReference/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetData"), DISPID(5047));
  TAutoArgs<3> _args;
  _args[1] = (int)Dimension /*[VT_USERDEFINED:0]*/;
  _args[2] = DataSourceIndex /*[VT_I4:0]*/;
  _args[3] = DataReference /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::set_HasSeriesByRows(VARIANT_BOOL HasSeriesByRows/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasSeriesByRows"), DISPID(5048));
  TAutoArgs<1> _args;
  _args[1] = HasSeriesByRows /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_HasSeriesByRows(VARIANT_BOOL* HasSeriesByRows/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasSeriesByRows"), DISPID(5048));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HasSeriesByRows /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChChartSpaceDispT<T>::get_HasSeriesByRows(void)
{
  VARIANT_BOOL HasSeriesByRows;
  this->get_HasSeriesByRows((VARIANT_BOOL*)&HasSeriesByRows);
  return HasSeriesByRows;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::set_PlotAllAggregates(Owc10_xp::ChartPlotAggregatesEnum PlotMultipleAggregates/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PlotAllAggregates"), DISPID(5049));
  TAutoArgs<1> _args;
  _args[1] = (int)PlotMultipleAggregates /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_PlotAllAggregates(Owc10_xp::ChartPlotAggregatesEnum* PlotMultipleAggregates/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PlotAllAggregates"), DISPID(5049));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PlotMultipleAggregates /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartPlotAggregatesEnum __fastcall
ChChartSpaceDispT<T>::get_PlotAllAggregates(void)
{
  Owc10_xp::ChartPlotAggregatesEnum PlotMultipleAggregates;
  this->get_PlotAllAggregates((Owc10_xp::ChartPlotAggregatesEnum*)&PlotMultipleAggregates);
  return PlotMultipleAggregates;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::set_HasMultipleCharts(VARIANT_BOOL HasMultiplePlots/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasMultipleCharts"), DISPID(5050));
  TAutoArgs<1> _args;
  _args[1] = HasMultiplePlots /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_HasMultipleCharts(VARIANT_BOOL* HasMultiplePlots/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasMultipleCharts"), DISPID(5050));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HasMultiplePlots /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChChartSpaceDispT<T>::get_HasMultipleCharts(void)
{
  VARIANT_BOOL HasMultiplePlots;
  this->get_HasMultipleCharts((VARIANT_BOOL*)&HasMultiplePlots);
  return HasMultiplePlots;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::set_DisplayFieldList(VARIANT_BOOL DisplayFieldList/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayFieldList"), DISPID(4001));
  TAutoArgs<1> _args;
  _args[1] = DisplayFieldList /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_DisplayFieldList(VARIANT_BOOL* DisplayFieldList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayFieldList"), DISPID(4001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DisplayFieldList /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChChartSpaceDispT<T>::get_DisplayFieldList(void)
{
  VARIANT_BOOL DisplayFieldList;
  this->get_DisplayFieldList((VARIANT_BOOL*)&DisplayFieldList);
  return DisplayFieldList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::set_HasPassiveAlerts(VARIANT_BOOL pfHasPassiveAlerts/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasPassiveAlerts"), DISPID(5044));
  TAutoArgs<1> _args;
  _args[1] = pfHasPassiveAlerts /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_HasPassiveAlerts(VARIANT_BOOL* pfHasPassiveAlerts/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasPassiveAlerts"), DISPID(5044));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfHasPassiveAlerts /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChChartSpaceDispT<T>::get_HasPassiveAlerts(void)
{
  VARIANT_BOOL pfHasPassiveAlerts;
  this->get_HasPassiveAlerts((VARIANT_BOOL*)&pfHasPassiveAlerts);
  return pfHasPassiveAlerts;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::DropZones(Owc10_xp::ChartDropZonesEnum dz/*[in]*/, 
                                Owc10_xp::ChDropZone** ppwcdz/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DropZones"), DISPID(5054));
  TAutoArgs<1> _args;
  _args[1] = (int)dz /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChDropZone**)ppwcdz /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::ChDropZone* __fastcall
ChChartSpaceDispT<T>::DropZones(Owc10_xp::ChartDropZonesEnum dz/*[in]*/)
{
  Owc10_xp::ChDropZone* ppwcdz;
  this->DropZones(dz, (Owc10_xp::ChDropZone**)&ppwcdz);
  return ppwcdz;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::set_DataSourceName(BSTR pbstrDSName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataSourceName"), DISPID(5055));
  TAutoArgs<1> _args;
  _args[1] = pbstrDSName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_DataSourceName(BSTR* pbstrDSName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataSourceName"), DISPID(5055));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrDSName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ChChartSpaceDispT<T>::get_DataSourceName(void)
{
  BSTR pbstrDSName;
  this->get_DataSourceName((BSTR*)&pbstrDSName);
  return pbstrDSName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::set_DisplayFieldButtons(VARIANT_BOOL DisplayFieldButtons/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayFieldButtons"), DISPID(5056));
  TAutoArgs<1> _args;
  _args[1] = DisplayFieldButtons /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_DisplayFieldButtons(VARIANT_BOOL* DisplayFieldButtons/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayFieldButtons"), DISPID(5056));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DisplayFieldButtons /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChChartSpaceDispT<T>::get_DisplayFieldButtons(void)
{
  VARIANT_BOOL DisplayFieldButtons;
  this->get_DisplayFieldButtons((VARIANT_BOOL*)&DisplayFieldButtons);
  return DisplayFieldButtons;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_SelectionList(VARIANT* SelectionList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectionList"), DISPID(5057));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SelectionList /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
ChChartSpaceDispT<T>::get_SelectionList(void)
{
  VARIANT SelectionList;
  this->get_SelectionList((VARIANT*)&SelectionList);
  return SelectionList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::set_HasPlotDetails(VARIANT_BOOL pvbPlotDetails/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasPlotDetails"), DISPID(5058));
  TAutoArgs<1> _args;
  _args[1] = pvbPlotDetails /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_HasPlotDetails(VARIANT_BOOL* pvbPlotDetails/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasPlotDetails"), DISPID(5058));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvbPlotDetails /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChChartSpaceDispT<T>::get_HasPlotDetails(void)
{
  VARIANT_BOOL pvbPlotDetails;
  this->get_HasPlotDetails((VARIANT_BOOL*)&pvbPlotDetails);
  return pvbPlotDetails;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::FieldListAddTo(LPUNKNOWN punk/*[in]*/, long lPos)
{
  _TDispID _dispid(*this, OLETEXT("FieldListAddTo"), DISPID(5059));
  TAutoArgs<2> _args;
  _args[1] = punk /*[VT_UNKNOWN:0]*/;
  _args[2] = lPos /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::set_AllowScreenTipEvents(VARIANT_BOOL pfAllowScreenTipEvents/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowScreenTipEvents"), DISPID(5061));
  TAutoArgs<1> _args;
  _args[1] = pfAllowScreenTipEvents /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_AllowScreenTipEvents(VARIANT_BOOL* pfAllowScreenTipEvents/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowScreenTipEvents"), DISPID(5061));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfAllowScreenTipEvents /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChChartSpaceDispT<T>::get_AllowScreenTipEvents(void)
{
  VARIANT_BOOL pfAllowScreenTipEvents;
  this->get_AllowScreenTipEvents((VARIANT_BOOL*)&pfAllowScreenTipEvents);
  return pfAllowScreenTipEvents;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_Commands(Owc10_xp::OCCommands** Commands/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Commands"), DISPID(5064));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::OCCommands**)Commands /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::OCCommands* __fastcall
ChChartSpaceDispT<T>::get_Commands(void)
{
  Owc10_xp::OCCommands* Commands;
  this->get_Commands((Owc10_xp::OCCommands**)&Commands);
  return Commands;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::set_AllowPropertyToolbox(VARIANT_BOOL fMenu/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowPropertyToolbox"), DISPID(5065));
  TAutoArgs<1> _args;
  _args[1] = fMenu /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_AllowPropertyToolbox(VARIANT_BOOL* fMenu/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowPropertyToolbox"), DISPID(5065));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(fMenu /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChChartSpaceDispT<T>::get_AllowPropertyToolbox(void)
{
  VARIANT_BOOL fMenu;
  this->get_AllowPropertyToolbox((VARIANT_BOOL*)&fMenu);
  return fMenu;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_AllowGrouping(VARIANT_BOOL* AllowGrouping/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowGrouping"), DISPID(5066));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AllowGrouping /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChChartSpaceDispT<T>::get_AllowGrouping(void)
{
  VARIANT_BOOL AllowGrouping;
  this->get_AllowGrouping((VARIANT_BOOL*)&AllowGrouping);
  return AllowGrouping;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::set_AllowGrouping(VARIANT_BOOL AllowGrouping/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowGrouping"), DISPID(5066));
  TAutoArgs<1> _args;
  _args[1] = AllowGrouping /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_AllowFiltering(VARIANT_BOOL* AllowFiltering/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowFiltering"), DISPID(5067));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AllowFiltering /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChChartSpaceDispT<T>::get_AllowFiltering(void)
{
  VARIANT_BOOL AllowFiltering;
  this->get_AllowFiltering((VARIANT_BOOL*)&AllowFiltering);
  return AllowFiltering;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::set_AllowFiltering(VARIANT_BOOL AllowFiltering/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowFiltering"), DISPID(5067));
  TAutoArgs<1> _args;
  _args[1] = AllowFiltering /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_Top(long* ptop/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(DISPID_UNKNOWN/*[1610743903]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ptop /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChChartSpaceDispT<T>::get_Top(void)
{
  long ptop;
  this->get_Top((long*)&ptop);
  return ptop;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_Left(long* pleft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(DISPID_UNKNOWN/*[1610743904]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pleft /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChChartSpaceDispT<T>::get_Left(void)
{
  long pleft;
  this->get_Left((long*)&pleft);
  return pleft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_Bottom(long* pbottom/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bottom"), DISPID(DISPID_UNKNOWN/*[1610743905]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbottom /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChChartSpaceDispT<T>::get_Bottom(void)
{
  long pbottom;
  this->get_Bottom((long*)&pbottom);
  return pbottom;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_Right(long* pright/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Right"), DISPID(DISPID_UNKNOWN/*[1610743906]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pright /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChChartSpaceDispT<T>::get_Right(void)
{
  long pright;
  this->get_Right((long*)&pright);
  return pright;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_HasUnifiedScales(VARIANT_BOOL* HasUnifiedScales/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasUnifiedScales"), DISPID(5071));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HasUnifiedScales /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChChartSpaceDispT<T>::get_HasUnifiedScales(void)
{
  VARIANT_BOOL HasUnifiedScales;
  this->get_HasUnifiedScales((VARIANT_BOOL*)&HasUnifiedScales);
  return HasUnifiedScales;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::set_HasUnifiedScales(VARIANT_BOOL HasUnifiedScales/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasUnifiedScales"), DISPID(5071));
  TAutoArgs<1> _args;
  _args[1] = HasUnifiedScales /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_DisplayToolbar(VARIANT_BOOL* DisplayToolbar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayToolbar"), DISPID(5072));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DisplayToolbar /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChChartSpaceDispT<T>::get_DisplayToolbar(void)
{
  VARIANT_BOOL DisplayToolbar;
  this->get_DisplayToolbar((VARIANT_BOOL*)&DisplayToolbar);
  return DisplayToolbar;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::set_DisplayToolbar(VARIANT_BOOL DisplayToolbar/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayToolbar"), DISPID(5072));
  TAutoArgs<1> _args;
  _args[1] = DisplayToolbar /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_Toolbar(Mscomctllib_xp::IToolbar** Toolbar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Toolbar"), DISPID(5076));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::IToolbar**)Toolbar /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::IToolbar* __fastcall
ChChartSpaceDispT<T>::get_Toolbar(void)
{
  Mscomctllib_xp::IToolbar* Toolbar;
  this->get_Toolbar((Mscomctllib_xp::IToolbar**)&Toolbar);
  return Toolbar;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_ViewOnlyMode(VARIANT_BOOL* ViewOnlyMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ViewOnlyMode"), DISPID(DISPID_UNKNOWN/*[1610743912]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ViewOnlyMode /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChChartSpaceDispT<T>::get_ViewOnlyMode(void)
{
  VARIANT_BOOL ViewOnlyMode;
  this->get_ViewOnlyMode((VARIANT_BOOL*)&ViewOnlyMode);
  return ViewOnlyMode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::LocateDataSource()
{
  _TDispID _dispid(*this, OLETEXT("LocateDataSource"), DISPID(5073));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::ShowContextMenu(long x/*[in]*/, long y/*[in]*/, VARIANT Menu/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowContextMenu"), DISPID(5074));
  TAutoArgs<3> _args;
  _args[1] = x /*[VT_I4:0]*/;
  _args[2] = y /*[VT_I4:0]*/;
  _args[3] = Menu /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::GetPicture(BSTR FilterName/*[in,def,opt]*/, long Width/*[in,def,opt]*/, 
                                 long Height/*[in,def,opt]*/, VARIANT* pvarArray/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetPicture"), DISPID(5075));
  TAutoArgs<3> _args;
  _args[1] = FilterName /*[VT_BSTR:0]*/;
  _args[2] = Width /*[VT_I4:0]*/;
  _args[3] = Height /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pvarArray /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
ChChartSpaceDispT<T>::GetPicture(BSTR FilterName/*[in,def,opt]*/, long Width/*[in,def,opt]*/, 
                                 long Height/*[in,def,opt]*/)
{
  VARIANT pvarArray;
  this->GetPicture(FilterName, Width, Height, (VARIANT*)&pvarArray);
  return pvarArray;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::SetSpreadsheetData(BSTR DataReference/*[in]*/, 
                                         VARIANT_BOOL SeriesByRows/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetSpreadsheetData"), DISPID(DISPID_UNKNOWN/*[1610743916]*/));
  TAutoArgs<2> _args;
  _args[1] = DataReference /*[VT_BSTR:0]*/;
  _args[2] = SeriesByRows /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::Repaint()
{
  _TDispID _dispid(*this, OLETEXT("Repaint"), DISPID(5077));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_IsDirty(VARIANT_BOOL* IsDirty/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsDirty"), DISPID(5078));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(IsDirty /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChChartSpaceDispT<T>::get_IsDirty(void)
{
  VARIANT_BOOL IsDirty;
  this->get_IsDirty((VARIANT_BOOL*)&IsDirty);
  return IsDirty;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::set_IsDirty(VARIANT_BOOL IsDirty/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsDirty"), DISPID(5078));
  TAutoArgs<1> _args;
  _args[1] = IsDirty /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_International(VARIANT Index/*[in]*/, VARIANT* info/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("International"), DISPID(DISPID_UNKNOWN/*[1610743920]*/));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(info /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
ChChartSpaceDispT<T>::get_International(VARIANT Index/*[in]*/)
{
  VARIANT info;
  this->get_International(Index, (VARIANT*)&info);
  return info;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_LanguageSettings(Owc10_xp::OWCLanguageSettings** langset/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LanguageSettings"), DISPID(DISPID_UNKNOWN/*[1610743921]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::OWCLanguageSettings**)langset /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::OWCLanguageSettings* __fastcall
ChChartSpaceDispT<T>::get_LanguageSettings(void)
{
  Owc10_xp::OWCLanguageSettings* langset;
  this->get_LanguageSettings((Owc10_xp::OWCLanguageSettings**)&langset);
  return langset;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(5201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ChChartSpaceDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::GetDataSourceIndex(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/, 
                                         long* DataSourceIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetDataSourceIndex"), DISPID(DISPID_UNKNOWN/*[1610743923]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)Dimension /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(DataSourceIndex /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
ChChartSpaceDispT<T>::GetDataSourceIndex(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/)
{
  long DataSourceIndex;
  this->GetDataSourceIndex(Dimension, (long*)&DataSourceIndex);
  return DataSourceIndex;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_HasRuntimeSelection(VARIANT_BOOL* pvb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasRuntimeSelection"), DISPID(5079));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvb /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChChartSpaceDispT<T>::get_HasRuntimeSelection(void)
{
  VARIANT_BOOL pvb;
  this->get_HasRuntimeSelection((VARIANT_BOOL*)&pvb);
  return pvb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::set_HasRuntimeSelection(VARIANT_BOOL pvb/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasRuntimeSelection"), DISPID(5079));
  TAutoArgs<1> _args;
  _args[1] = pvb /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::ClearUndo()
{
  _TDispID _dispid(*this, OLETEXT("ClearUndo"), DISPID(DISPID_UNKNOWN/*[1610743926]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_DisplayBranding(VARIANT_BOOL* DisplayBranding/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayBranding"), DISPID(DISPID_UNKNOWN/*[1610743927]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DisplayBranding /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChChartSpaceDispT<T>::get_DisplayBranding(void)
{
  VARIANT_BOOL DisplayBranding;
  this->get_DisplayBranding((VARIANT_BOOL*)&DisplayBranding);
  return DisplayBranding;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::set_DisplayBranding(VARIANT_BOOL DisplayBranding/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayBranding"), DISPID(1610743927));
  TAutoArgs<1> _args;
  _args[1] = DisplayBranding /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_DisplayOfficeLogo(VARIANT_BOOL* DisplayOfficeLogo/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayOfficeLogo"), DISPID(DISPID_UNKNOWN/*[1610743929]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DisplayOfficeLogo /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChChartSpaceDispT<T>::get_DisplayOfficeLogo(void)
{
  VARIANT_BOOL DisplayOfficeLogo;
  this->get_DisplayOfficeLogo((VARIANT_BOOL*)&DisplayOfficeLogo);
  return DisplayOfficeLogo;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::set_DisplayOfficeLogo(VARIANT_BOOL DisplayOfficeLogo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayOfficeLogo"), DISPID(1610743929));
  TAutoArgs<1> _args;
  _args[1] = DisplayOfficeLogo /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::OkToBindToControlByName()
{
  _TDispID _dispid(*this, OLETEXT("OkToBindToControlByName"), DISPID(DISPID_UNKNOWN/*[1610743931]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartSpaceDispT<T>::get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObjectType"), DISPID(DISPID_UNKNOWN/*[1610743932]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pcs /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartSelectionsEnum __fastcall
ChChartSpaceDispT<T>::get_ObjectType(void)
{
  Owc10_xp::ChartSelectionsEnum pcs;
  this->get_ObjectType((Owc10_xp::ChartSelectionsEnum*)&pcs);
  return pcs;
}

// *********************************************************************//
// DispIntf:  ChCharts
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AE4-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartsDispT<T>::get_Count(long* pCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChChartsDispT<T>::get_Count(void)
{
  long pCount;
  this->get_Count((long*)&pCount);
  return pCount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartsDispT<T>::get_Parent(LPDISPATCH* ppiwebchart/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(5201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppiwebchart /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ChChartsDispT<T>::get_Parent(void)
{
  LPDISPATCH ppiwebchart;
  this->get_Parent((LPDISPATCH*)&ppiwebchart);
  return ppiwebchart;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartsDispT<T>::get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
ChChartsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunk;
  this->get__NewEnum((LPUNKNOWN*)&ppunk);
  return ppunk;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartsDispT<T>::Add(long Index/*[in,def,opt]*/, Owc10_xp::ChChart** ppchart/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChChart**)ppchart /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::ChChart* __fastcall
ChChartsDispT<T>::Add(long Index/*[in,def,opt]*/)
{
  Owc10_xp::ChChart* ppchart;
  this->Add(Index, (Owc10_xp::ChChart**)&ppchart);
  return ppchart;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartsDispT<T>::Delete(VARIANT Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(5202));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartsDispT<T>::get_Item(VARIANT Index/*[in]*/, Owc10_xp::ChChart** ppchart/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChChart**)ppchart /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChChart* __fastcall
ChChartsDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Owc10_xp::ChChart* ppchart;
  this->get_Item(Index, (Owc10_xp::ChChart**)&ppchart);
  return ppchart;
}

// *********************************************************************//
// DispIntf:  ChChart
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AE5-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::get_Axes(Owc10_xp::ChAxes** ppaxes/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Axes"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChAxes**)ppaxes /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChAxes* __fastcall
ChChartDispT<T>::get_Axes(void)
{
  Owc10_xp::ChAxes* ppaxes;
  this->get_Axes((Owc10_xp::ChAxes**)&ppaxes);
  return ppaxes;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::get_Border(Owc10_xp::ChBorder** ppline/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Border"), DISPID(5004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChBorder**)ppline /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChBorder* __fastcall
ChChartDispT<T>::get_Border(void)
{
  Owc10_xp::ChBorder* ppline;
  this->get_Border((Owc10_xp::ChBorder**)&ppline);
  return ppline;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::set_HasLegend(VARIANT_BOOL pfHasLegend/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasLegend"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<1> _args;
  _args[1] = pfHasLegend /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::get_HasLegend(VARIANT_BOOL* pfHasLegend/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasLegend"), DISPID(1610743810));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfHasLegend /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChChartDispT<T>::get_HasLegend(void)
{
  VARIANT_BOOL pfHasLegend;
  this->get_HasLegend((VARIANT_BOOL*)&pfHasLegend);
  return pfHasLegend;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::set_HasTitle(VARIANT_BOOL pfHasTitle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasTitle"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<1> _args;
  _args[1] = pfHasTitle /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::get_HasTitle(VARIANT_BOOL* pfHasTitle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasTitle"), DISPID(1610743812));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfHasTitle /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChChartDispT<T>::get_HasTitle(void)
{
  VARIANT_BOOL pfHasTitle;
  this->get_HasTitle((VARIANT_BOOL*)&pfHasTitle);
  return pfHasTitle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::set_WidthRatio(long pratio/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WidthRatio"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<1> _args;
  _args[1] = pratio /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::get_WidthRatio(long* pratio/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WidthRatio"), DISPID(1610743814));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pratio /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChChartDispT<T>::get_WidthRatio(void)
{
  long pratio;
  this->get_WidthRatio((long*)&pratio);
  return pratio;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::set_HeightRatio(long pratio/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeightRatio"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<1> _args;
  _args[1] = pratio /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::get_HeightRatio(long* pratio/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeightRatio"), DISPID(1610743816));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pratio /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChChartDispT<T>::get_HeightRatio(void)
{
  long pratio;
  this->get_HeightRatio((long*)&pratio);
  return pratio;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::get_Index(long* piChart/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(5204));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(piChart /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChChartDispT<T>::get_Index(void)
{
  long piChart;
  this->get_Index((long*)&piChart);
  return piChart;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::get_Interior(Owc10_xp::ChInterior** ppinterior/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Interior"), DISPID(5007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChInterior**)ppinterior /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChInterior* __fastcall
ChChartDispT<T>::get_Interior(void)
{
  Owc10_xp::ChInterior* ppinterior;
  this->get_Interior((Owc10_xp::ChInterior**)&ppinterior);
  return ppinterior;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::get_Legend(Owc10_xp::ChLegend** pplegend/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Legend"), DISPID(DISPID_UNKNOWN/*[1610743820]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChLegend**)pplegend /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChLegend* __fastcall
ChChartDispT<T>::get_Legend(void)
{
  Owc10_xp::ChLegend* pplegend;
  this->get_Legend((Owc10_xp::ChLegend**)&pplegend);
  return pplegend;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::set_Name(BSTR pbstr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(DISPID_UNKNOWN/*[1610743821]*/));
  TAutoArgs<1> _args;
  _args[1] = pbstr /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::get_Name(BSTR* pbstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1610743821));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ChChartDispT<T>::get_Name(void)
{
  BSTR pbstr;
  this->get_Name((BSTR*)&pbstr);
  return pbstr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::get_Parent(LPDISPATCH* ppwcwebchart/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(5201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppwcwebchart /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ChChartDispT<T>::get_Parent(void)
{
  LPDISPATCH ppwcwebchart;
  this->get_Parent((LPDISPATCH*)&ppwcwebchart);
  return ppwcwebchart;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::get_PlotArea(Owc10_xp::ChPlotArea** ppplotarea/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PlotArea"), DISPID(DISPID_UNKNOWN/*[1610743824]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChPlotArea**)ppplotarea /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChPlotArea* __fastcall
ChChartDispT<T>::get_PlotArea(void)
{
  Owc10_xp::ChPlotArea* ppplotarea;
  this->get_PlotArea((Owc10_xp::ChPlotArea**)&ppplotarea);
  return ppplotarea;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::get_Title(Owc10_xp::ChTitle** pptitle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Title"), DISPID(DISPID_UNKNOWN/*[1610743825]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChTitle**)pptitle /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChTitle* __fastcall
ChChartDispT<T>::get_Title(void)
{
  Owc10_xp::ChTitle* pptitle;
  this->get_Title((Owc10_xp::ChTitle**)&pptitle);
  return pptitle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::set_ExtrudeAngle(double protation/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExtrudeAngle"), DISPID(DISPID_UNKNOWN/*[1610743826]*/));
  TAutoArgs<1> _args;
  _args[1] = protation /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::get_ExtrudeAngle(double* protation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExtrudeAngle"), DISPID(1610743826));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(protation /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
ChChartDispT<T>::get_ExtrudeAngle(void)
{
  double protation;
  this->get_ExtrudeAngle((double*)&protation);
  return protation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::set_DirectionalLightRotation(double protation/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DirectionalLightRotation"), DISPID(DISPID_UNKNOWN/*[1610743828]*/));
  TAutoArgs<1> _args;
  _args[1] = protation /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::get_DirectionalLightRotation(double* protation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DirectionalLightRotation"), DISPID(1610743828));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(protation /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
ChChartDispT<T>::get_DirectionalLightRotation(void)
{
  double protation;
  this->get_DirectionalLightRotation((double*)&protation);
  return protation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::set_DirectionalLightInclination(double pinclination/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DirectionalLightInclination"), DISPID(DISPID_UNKNOWN/*[1610743830]*/));
  TAutoArgs<1> _args;
  _args[1] = pinclination /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::get_DirectionalLightInclination(double* pinclination/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DirectionalLightInclination"), DISPID(1610743830));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pinclination /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
ChChartDispT<T>::get_DirectionalLightInclination(void)
{
  double pinclination;
  this->get_DirectionalLightInclination((double*)&pinclination);
  return pinclination;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::set_DirectionalLightIntensity(double pintensity/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DirectionalLightIntensity"), DISPID(DISPID_UNKNOWN/*[1610743832]*/));
  TAutoArgs<1> _args;
  _args[1] = pintensity /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::get_DirectionalLightIntensity(double* pintensity/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DirectionalLightIntensity"), DISPID(1610743832));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pintensity /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
ChChartDispT<T>::get_DirectionalLightIntensity(void)
{
  double pintensity;
  this->get_DirectionalLightIntensity((double*)&pintensity);
  return pintensity;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::set_AmbientLightIntensity(double pintensity/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AmbientLightIntensity"), DISPID(DISPID_UNKNOWN/*[1610743834]*/));
  TAutoArgs<1> _args;
  _args[1] = pintensity /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::get_AmbientLightIntensity(double* pintensity/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AmbientLightIntensity"), DISPID(1610743834));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pintensity /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
ChChartDispT<T>::get_AmbientLightIntensity(void)
{
  double pintensity;
  this->get_AmbientLightIntensity((double*)&pintensity);
  return pintensity;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::set_LightNormal(double pnormal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LightNormal"), DISPID(DISPID_UNKNOWN/*[1610743836]*/));
  TAutoArgs<1> _args;
  _args[1] = pnormal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::get_LightNormal(double* pnormal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LightNormal"), DISPID(1610743836));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pnormal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
ChChartDispT<T>::get_LightNormal(void)
{
  double pnormal;
  this->get_LightNormal((double*)&pnormal);
  return pnormal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::set_ProjectionMode(Owc10_xp::ChartProjectionModeEnum pmode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ProjectionMode"), DISPID(DISPID_UNKNOWN/*[1610743838]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)pmode /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::get_ProjectionMode(Owc10_xp::ChartProjectionModeEnum* pmode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ProjectionMode"), DISPID(1610743838));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pmode /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartProjectionModeEnum __fastcall
ChChartDispT<T>::get_ProjectionMode(void)
{
  Owc10_xp::ChartProjectionModeEnum pmode;
  this->get_ProjectionMode((Owc10_xp::ChartProjectionModeEnum*)&pmode);
  return pmode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::set_Inclination(double pinclination/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Inclination"), DISPID(DISPID_UNKNOWN/*[1610743840]*/));
  TAutoArgs<1> _args;
  _args[1] = pinclination /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::get_Inclination(double* pinclination/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Inclination"), DISPID(1610743840));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pinclination /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
ChChartDispT<T>::get_Inclination(void)
{
  double pinclination;
  this->get_Inclination((double*)&pinclination);
  return pinclination;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::set_Rotation(double protation/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Rotation"), DISPID(DISPID_UNKNOWN/*[1610743842]*/));
  TAutoArgs<1> _args;
  _args[1] = protation /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::get_Rotation(double* protation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Rotation"), DISPID(1610743842));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(protation /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
ChChartDispT<T>::get_Rotation(void)
{
  double protation;
  this->get_Rotation((double*)&protation);
  return protation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::set_Perspective(long pperspective/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Perspective"), DISPID(DISPID_UNKNOWN/*[1610743844]*/));
  TAutoArgs<1> _args;
  _args[1] = pperspective /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::get_Perspective(long* pperspective/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Perspective"), DISPID(1610743844));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pperspective /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChChartDispT<T>::get_Perspective(void)
{
  long pperspective;
  this->get_Perspective((long*)&pperspective);
  return pperspective;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::set_GapDepth(long pgapdepth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GapDepth"), DISPID(DISPID_UNKNOWN/*[1610743846]*/));
  TAutoArgs<1> _args;
  _args[1] = pgapdepth /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::get_GapDepth(long* pgapdepth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GapDepth"), DISPID(1610743846));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pgapdepth /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChChartDispT<T>::get_GapDepth(void)
{
  long pgapdepth;
  this->get_GapDepth((long*)&pgapdepth);
  return pgapdepth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::set_HasAutoChartDepth(VARIANT_BOOL pfHasAutoChartDepth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasAutoChartDepth"), DISPID(DISPID_UNKNOWN/*[1610743848]*/));
  TAutoArgs<1> _args;
  _args[1] = pfHasAutoChartDepth /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::get_HasAutoChartDepth(VARIANT_BOOL* pfHasAutoChartDepth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasAutoChartDepth"), DISPID(1610743848));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfHasAutoChartDepth /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChChartDispT<T>::get_HasAutoChartDepth(void)
{
  VARIANT_BOOL pfHasAutoChartDepth;
  this->get_HasAutoChartDepth((VARIANT_BOOL*)&pfHasAutoChartDepth);
  return pfHasAutoChartDepth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::set_HasAutoAspectRatio(VARIANT_BOOL pfHasAutoAspectRatio/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasAutoAspectRatio"), DISPID(DISPID_UNKNOWN/*[1610743850]*/));
  TAutoArgs<1> _args;
  _args[1] = pfHasAutoAspectRatio /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::get_HasAutoAspectRatio(VARIANT_BOOL* pfHasAutoAspectRatio/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasAutoAspectRatio"), DISPID(1610743850));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfHasAutoAspectRatio /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChChartDispT<T>::get_HasAutoAspectRatio(void)
{
  VARIANT_BOOL pfHasAutoAspectRatio;
  this->get_HasAutoAspectRatio((VARIANT_BOOL*)&pfHasAutoAspectRatio);
  return pfHasAutoAspectRatio;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::set_ChartDepth(long pchartdepth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChartDepth"), DISPID(DISPID_UNKNOWN/*[1610743852]*/));
  TAutoArgs<1> _args;
  _args[1] = pchartdepth /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::get_ChartDepth(long* pchartdepth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChartDepth"), DISPID(1610743852));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pchartdepth /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChChartDispT<T>::get_ChartDepth(void)
{
  long pchartdepth;
  this->get_ChartDepth((long*)&pchartdepth);
  return pchartdepth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::set_AspectRatio(long paspectratio/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AspectRatio"), DISPID(DISPID_UNKNOWN/*[1610743854]*/));
  TAutoArgs<1> _args;
  _args[1] = paspectratio /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::get_AspectRatio(long* paspectratio/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AspectRatio"), DISPID(1610743854));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(paspectratio /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChChartDispT<T>::get_AspectRatio(void)
{
  long paspectratio;
  this->get_AspectRatio((long*)&paspectratio);
  return paspectratio;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::Select()
{
  _TDispID _dispid(*this, OLETEXT("Select"), DISPID(5036));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::set_BubbleScale(double pdBubbleScalew/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BubbleScale"), DISPID(DISPID_UNKNOWN/*[1610743857]*/));
  TAutoArgs<1> _args;
  _args[1] = pdBubbleScalew /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::get_BubbleScale(double* pdBubbleScalew/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BubbleScale"), DISPID(1610743857));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdBubbleScalew /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
ChChartDispT<T>::get_BubbleScale(void)
{
  double pdBubbleScalew;
  this->get_BubbleScale((double*)&pdBubbleScalew);
  return pdBubbleScalew;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::set_FirstSliceAngle(long panFirst/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FirstSliceAngle"), DISPID(DISPID_UNKNOWN/*[1610743859]*/));
  TAutoArgs<1> _args;
  _args[1] = panFirst /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::get_FirstSliceAngle(long* panFirst/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FirstSliceAngle"), DISPID(1610743859));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(panFirst /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChChartDispT<T>::get_FirstSliceAngle(void)
{
  long panFirst;
  this->get_FirstSliceAngle((long*)&panFirst);
  return panFirst;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::set_GapWidth(long plGapWidth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GapWidth"), DISPID(DISPID_UNKNOWN/*[1610743861]*/));
  TAutoArgs<1> _args;
  _args[1] = plGapWidth /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::get_GapWidth(long* plGapWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GapWidth"), DISPID(1610743861));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plGapWidth /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChChartDispT<T>::get_GapWidth(void)
{
  long plGapWidth;
  this->get_GapWidth((long*)&plGapWidth);
  return plGapWidth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::set_HoleSize(long plHoleSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HoleSize"), DISPID(DISPID_UNKNOWN/*[1610743863]*/));
  TAutoArgs<1> _args;
  _args[1] = plHoleSize /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::get_HoleSize(long* plHoleSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HoleSize"), DISPID(1610743863));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plHoleSize /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChChartDispT<T>::get_HoleSize(void)
{
  long plHoleSize;
  this->get_HoleSize((long*)&plHoleSize);
  return plHoleSize;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::set_Overlap(long plOverlap/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Overlap"), DISPID(DISPID_UNKNOWN/*[1610743865]*/));
  TAutoArgs<1> _args;
  _args[1] = plOverlap /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::get_Overlap(long* plOverlap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Overlap"), DISPID(1610743865));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plOverlap /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChChartDispT<T>::get_Overlap(void)
{
  long plOverlap;
  this->get_Overlap((long*)&plOverlap);
  return plOverlap;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::get_SeriesCollection(Owc10_xp::ChSeriesCollection** ppseriesCollection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SeriesCollection"), DISPID(DISPID_UNKNOWN/*[1610743867]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChSeriesCollection**)ppseriesCollection /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChSeriesCollection* __fastcall
ChChartDispT<T>::get_SeriesCollection(void)
{
  Owc10_xp::ChSeriesCollection* ppseriesCollection;
  this->get_SeriesCollection((Owc10_xp::ChSeriesCollection**)&ppseriesCollection);
  return ppseriesCollection;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::set_SizeRepresents(Owc10_xp::ChartSizeRepresentsEnum pocpSR/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SizeRepresents"), DISPID(DISPID_UNKNOWN/*[1610743868]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)pocpSR /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::get_SizeRepresents(Owc10_xp::ChartSizeRepresentsEnum* pocpSR/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SizeRepresents"), DISPID(1610743868));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pocpSR /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartSizeRepresentsEnum __fastcall
ChChartDispT<T>::get_SizeRepresents(void)
{
  Owc10_xp::ChartSizeRepresentsEnum pocpSR;
  this->get_SizeRepresents((Owc10_xp::ChartSizeRepresentsEnum*)&pocpSR);
  return pocpSR;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::get_Scalings(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/, 
                              Owc10_xp::ChScaling** ppwcscaling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Scalings"), DISPID(DISPID_UNKNOWN/*[1610743870]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)Dimension /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChScaling**)ppwcscaling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChScaling* __fastcall
ChChartDispT<T>::get_Scalings(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/)
{
  Owc10_xp::ChScaling* ppwcscaling;
  this->get_Scalings(Dimension, (Owc10_xp::ChScaling**)&ppwcscaling);
  return ppwcscaling;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::set_Type(Owc10_xp::ChartChartTypeEnum pocpGT/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(DISPID_UNKNOWN/*[1610743871]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)pocpGT /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::get_Type(Owc10_xp::ChartChartTypeEnum* pocpGT/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(1610743871));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pocpGT /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartChartTypeEnum __fastcall
ChChartDispT<T>::get_Type(void)
{
  Owc10_xp::ChartChartTypeEnum pocpGT;
  this->get_Type((Owc10_xp::ChartChartTypeEnum*)&pocpGT);
  return pocpGT;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::SetData(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/, 
                         long DataSourceIndex/*[in]*/, VARIANT DataReference/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetData"), DISPID(DISPID_UNKNOWN/*[1610743873]*/));
  TAutoArgs<3> _args;
  _args[1] = (int)Dimension /*[VT_USERDEFINED:0]*/;
  _args[2] = DataSourceIndex /*[VT_I4:0]*/;
  _args[3] = DataReference /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::GetDataReference(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/, 
                                  BSTR* DataSourceReference/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetDataReference"), DISPID(DISPID_UNKNOWN/*[1610743874]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)Dimension /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(DataSourceReference /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
ChChartDispT<T>::GetDataReference(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/)
{
  BSTR DataSourceReference;
  this->GetDataReference(Dimension, (BSTR*)&DataSourceReference);
  return DataSourceReference;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::GetDataSourceIndex(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/, 
                                    long* DataSourceIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetDataSourceIndex"), DISPID(DISPID_UNKNOWN/*[1610743875]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)Dimension /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(DataSourceIndex /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
ChChartDispT<T>::GetDataSourceIndex(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/)
{
  long DataSourceIndex;
  this->GetDataSourceIndex(Dimension, (long*)&DataSourceIndex);
  return DataSourceIndex;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::GetData(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/, 
                         VARIANT* DataSourceIndex/*[out]*/, VARIANT* DataReference/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetData"), DISPID(DISPID_UNKNOWN/*[1610743876]*/));
  TAutoArgs<3> _args;
  _args[1] = (int)Dimension /*[VT_USERDEFINED:0]*/;
  _args[2] = DataSourceIndex /*[VT_VARIANT:1]*/;
  _args[3] = DataReference /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::get_LayerCount(long* playercount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LayerCount"), DISPID(DISPID_UNKNOWN/*[1610743877]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(playercount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChChartDispT<T>::get_LayerCount(void)
{
  long playercount;
  this->get_LayerCount((long*)&playercount);
  return playercount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::get_Top(long* ptop/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(DISPID_UNKNOWN/*[1610743878]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ptop /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChChartDispT<T>::get_Top(void)
{
  long ptop;
  this->get_Top((long*)&ptop);
  return ptop;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::set_Top(long ptop/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1610743878));
  TAutoArgs<1> _args;
  _args[1] = ptop /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::get_Left(long* pleft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(DISPID_UNKNOWN/*[1610743880]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pleft /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChChartDispT<T>::get_Left(void)
{
  long pleft;
  this->get_Left((long*)&pleft);
  return pleft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::set_Left(long pleft/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1610743880));
  TAutoArgs<1> _args;
  _args[1] = pleft /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::get_Bottom(long* pbottom/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bottom"), DISPID(DISPID_UNKNOWN/*[1610743882]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbottom /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChChartDispT<T>::get_Bottom(void)
{
  long pbottom;
  this->get_Bottom((long*)&pbottom);
  return pbottom;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::get_Right(long* pright/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Right"), DISPID(DISPID_UNKNOWN/*[1610743883]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pright /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChChartDispT<T>::get_Right(void)
{
  long pright;
  this->get_Right((long*)&pright);
  return pright;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::get_TypeFlags(int* pgrbit/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TypeFlags"), DISPID(DISPID_UNKNOWN/*[1610743884]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pgrbit /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ChChartDispT<T>::get_TypeFlags(void)
{
  int pgrbit;
  this->get_TypeFlags((int*)&pgrbit);
  return pgrbit;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::SetSpreadsheetData(BSTR DataReference/*[in]*/, 
                                    VARIANT_BOOL SeriesByRows/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetSpreadsheetData"), DISPID(DISPID_UNKNOWN/*[1610743885]*/));
  TAutoArgs<2> _args;
  _args[1] = DataReference /*[VT_BSTR:0]*/;
  _args[2] = SeriesByRows /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::DuplicateFormat()
{
  _TDispID _dispid(*this, OLETEXT("DuplicateFormat"), DISPID(DISPID_UNKNOWN/*[1610743886]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartDispT<T>::get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObjectType"), DISPID(DISPID_UNKNOWN/*[1610743887]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pcs /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartSelectionsEnum __fastcall
ChChartDispT<T>::get_ObjectType(void)
{
  Owc10_xp::ChartSelectionsEnum pcs;
  this->get_ObjectType((Owc10_xp::ChartSelectionsEnum*)&pcs);
  return pcs;
}

// *********************************************************************//
// DispIntf:  ChAxes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AE6-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxesDispT<T>::get_Count(long* pcaxis/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcaxis /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChAxesDispT<T>::get_Count(void)
{
  long pcaxis;
  this->get_Count((long*)&pcaxis);
  return pcaxis;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxesDispT<T>::get_Parent(Owc10_xp::ChChart** ppchart/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(5201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChChart**)ppchart /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChChart* __fastcall
ChAxesDispT<T>::get_Parent(void)
{
  Owc10_xp::ChChart* ppchart;
  this->get_Parent((Owc10_xp::ChChart**)&ppchart);
  return ppchart;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxesDispT<T>::get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
ChAxesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunk;
  this->get__NewEnum((LPUNKNOWN*)&ppunk);
  return ppunk;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxesDispT<T>::Add(Owc10_xp::ChScaling* Scaling/*[in]*/, Owc10_xp::ChAxis** ppaxis/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::ChScaling*)Scaling /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChAxis**)ppaxis /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::ChAxis* __fastcall
ChAxesDispT<T>::Add(Owc10_xp::ChScaling* Scaling/*[in]*/)
{
  Owc10_xp::ChAxis* ppaxis;
  this->Add(Scaling, (Owc10_xp::ChAxis**)&ppaxis);
  return ppaxis;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxesDispT<T>::Delete(VARIANT Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(5202));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxesDispT<T>::get_Item(VARIANT Index/*[in]*/, Owc10_xp::ChAxis** ppaxis/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChAxis**)ppaxis /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChAxis* __fastcall
ChAxesDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Owc10_xp::ChAxis* ppaxis;
  this->get_Item(Index, (Owc10_xp::ChAxis**)&ppaxis);
  return ppaxis;
}

// *********************************************************************//
// DispIntf:  ChScaling
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39ABB-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChScalingDispT<T>::set_HasAutoMaximum(VARIANT_BOOL pfAutoMax/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasAutoMaximum"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<1> _args;
  _args[1] = pfAutoMax /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChScalingDispT<T>::get_HasAutoMaximum(VARIANT_BOOL* pfAutoMax/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasAutoMaximum"), DISPID(1610743808));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfAutoMax /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChScalingDispT<T>::get_HasAutoMaximum(void)
{
  VARIANT_BOOL pfAutoMax;
  this->get_HasAutoMaximum((VARIANT_BOOL*)&pfAutoMax);
  return pfAutoMax;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChScalingDispT<T>::set_HasAutoMinimum(VARIANT_BOOL pfHasAutoMinimum/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasAutoMinimum"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<1> _args;
  _args[1] = pfHasAutoMinimum /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChScalingDispT<T>::get_HasAutoMinimum(VARIANT_BOOL* pfHasAutoMinimum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasAutoMinimum"), DISPID(1610743810));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfHasAutoMinimum /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChScalingDispT<T>::get_HasAutoMinimum(void)
{
  VARIANT_BOOL pfHasAutoMinimum;
  this->get_HasAutoMinimum((VARIANT_BOOL*)&pfHasAutoMinimum);
  return pfHasAutoMinimum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChScalingDispT<T>::set_HasSplit(VARIANT_BOOL pfHasSplit/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasSplit"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<1> _args;
  _args[1] = pfHasSplit /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChScalingDispT<T>::get_HasSplit(VARIANT_BOOL* pfHasSplit/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasSplit"), DISPID(1610743812));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfHasSplit /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChScalingDispT<T>::get_HasSplit(void)
{
  VARIANT_BOOL pfHasSplit;
  this->get_HasSplit((VARIANT_BOOL*)&pfHasSplit);
  return pfHasSplit;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChScalingDispT<T>::set_LogBase(double pdLogBase/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LogBase"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<1> _args;
  _args[1] = pdLogBase /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChScalingDispT<T>::get_LogBase(double* pdLogBase/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LogBase"), DISPID(1610743814));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdLogBase /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
ChScalingDispT<T>::get_LogBase(void)
{
  double pdLogBase;
  this->get_LogBase((double*)&pdLogBase);
  return pdLogBase;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChScalingDispT<T>::set_Maximum(double pdMax/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Maximum"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<1> _args;
  _args[1] = pdMax /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChScalingDispT<T>::get_Maximum(double* pdMax/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Maximum"), DISPID(1610743816));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdMax /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
ChScalingDispT<T>::get_Maximum(void)
{
  double pdMax;
  this->get_Maximum((double*)&pdMax);
  return pdMax;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChScalingDispT<T>::set_Minimum(double pdMin/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Minimum"), DISPID(DISPID_UNKNOWN/*[1610743818]*/));
  TAutoArgs<1> _args;
  _args[1] = pdMin /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChScalingDispT<T>::get_Minimum(double* pdMin/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Minimum"), DISPID(1610743818));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdMin /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
ChScalingDispT<T>::get_Minimum(void)
{
  double pdMin;
  this->get_Minimum((double*)&pdMin);
  return pdMin;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChScalingDispT<T>::set_Orientation(Owc10_xp::ChartScaleOrientationEnum pocpSO/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Orientation"), DISPID(DISPID_UNKNOWN/*[1610743820]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)pocpSO /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChScalingDispT<T>::get_Orientation(Owc10_xp::ChartScaleOrientationEnum* pocpSO/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Orientation"), DISPID(1610743820));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pocpSO /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartScaleOrientationEnum __fastcall
ChScalingDispT<T>::get_Orientation(void)
{
  Owc10_xp::ChartScaleOrientationEnum pocpSO;
  this->get_Orientation((Owc10_xp::ChartScaleOrientationEnum*)&pocpSO);
  return pocpSO;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChScalingDispT<T>::set_Type(Owc10_xp::ChartScaleTypeEnum pocpST/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(DISPID_UNKNOWN/*[1610743822]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)pocpST /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChScalingDispT<T>::get_Type(Owc10_xp::ChartScaleTypeEnum* pocpST/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(1610743822));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pocpST /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartScaleTypeEnum __fastcall
ChScalingDispT<T>::get_Type(void)
{
  Owc10_xp::ChartScaleTypeEnum pocpST;
  this->get_Type((Owc10_xp::ChartScaleTypeEnum*)&pocpST);
  return pocpST;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChScalingDispT<T>::set_SplitMaximum(double pdSplitMax/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SplitMaximum"), DISPID(DISPID_UNKNOWN/*[1610743824]*/));
  TAutoArgs<1> _args;
  _args[1] = pdSplitMax /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChScalingDispT<T>::get_SplitMaximum(double* pdSplitMax/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SplitMaximum"), DISPID(1610743824));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdSplitMax /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
ChScalingDispT<T>::get_SplitMaximum(void)
{
  double pdSplitMax;
  this->get_SplitMaximum((double*)&pdSplitMax);
  return pdSplitMax;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChScalingDispT<T>::set_SplitMinimum(double pdSplitMin/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SplitMinimum"), DISPID(DISPID_UNKNOWN/*[1610743826]*/));
  TAutoArgs<1> _args;
  _args[1] = pdSplitMin /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChScalingDispT<T>::get_SplitMinimum(double* pdSplitMin/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SplitMinimum"), DISPID(1610743826));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdSplitMin /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
ChScalingDispT<T>::get_SplitMinimum(void)
{
  double pdSplitMin;
  this->get_SplitMinimum((double*)&pdSplitMin);
  return pdSplitMin;
}

// *********************************************************************//
// DispIntf:  ChAxis
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AE7-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::set_Crosses(Owc10_xp::ChartAxisCrossesEnum pocpACT/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Crosses"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)pocpACT /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::get_Crosses(Owc10_xp::ChartAxisCrossesEnum* pocpACT/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Crosses"), DISPID(1610743808));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pocpACT /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartAxisCrossesEnum __fastcall
ChAxisDispT<T>::get_Crosses(void)
{
  Owc10_xp::ChartAxisCrossesEnum pocpACT;
  this->get_Crosses((Owc10_xp::ChartAxisCrossesEnum*)&pocpACT);
  return pocpACT;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::set_CrossesAtValue(double pdCrossesAt/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CrossesAtValue"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<1> _args;
  _args[1] = pdCrossesAt /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::get_CrossesAtValue(double* pdCrossesAt/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CrossesAtValue"), DISPID(1610743810));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdCrossesAt /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
ChAxisDispT<T>::get_CrossesAtValue(void)
{
  double pdCrossesAt;
  this->get_CrossesAtValue((double*)&pdCrossesAt);
  return pdCrossesAt;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::set_CrossingAxis(Owc10_xp::ChAxis* ppaxis/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CrossingAxis"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::ChAxis*)ppaxis /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::get_CrossingAxis(Owc10_xp::ChAxis** ppaxis/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CrossingAxis"), DISPID(1610743812));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChAxis**)ppaxis /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChAxis* __fastcall
ChAxisDispT<T>::get_CrossingAxis(void)
{
  Owc10_xp::ChAxis* ppaxis;
  this->get_CrossingAxis((Owc10_xp::ChAxis**)&ppaxis);
  return ppaxis;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::get_Font(Owc10_xp::ChFont** ppfont/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(5200));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChFont**)ppfont /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChFont* __fastcall
ChAxisDispT<T>::get_Font(void)
{
  Owc10_xp::ChFont* ppfont;
  this->get_Font((Owc10_xp::ChFont**)&ppfont);
  return ppfont;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::set_HasAutoMajorUnit(VARIANT_BOOL pfHasAutoMajorUnit/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasAutoMajorUnit"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<1> _args;
  _args[1] = pfHasAutoMajorUnit /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::get_HasAutoMajorUnit(VARIANT_BOOL* pfHasAutoMajorUnit/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasAutoMajorUnit"), DISPID(1610743815));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfHasAutoMajorUnit /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChAxisDispT<T>::get_HasAutoMajorUnit(void)
{
  VARIANT_BOOL pfHasAutoMajorUnit;
  this->get_HasAutoMajorUnit((VARIANT_BOOL*)&pfHasAutoMajorUnit);
  return pfHasAutoMajorUnit;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::set_HasAutoMinorUnit(VARIANT_BOOL pfHasAutoMinorUnit/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasAutoMinorUnit"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  TAutoArgs<1> _args;
  _args[1] = pfHasAutoMinorUnit /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::get_HasAutoMinorUnit(VARIANT_BOOL* pfHasAutoMinorUnit/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasAutoMinorUnit"), DISPID(1610743817));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfHasAutoMinorUnit /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChAxisDispT<T>::get_HasAutoMinorUnit(void)
{
  VARIANT_BOOL pfHasAutoMinorUnit;
  this->get_HasAutoMinorUnit((VARIANT_BOOL*)&pfHasAutoMinorUnit);
  return pfHasAutoMinorUnit;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::set_HasMajorGridlines(VARIANT_BOOL pfHasMajorGridlines/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasMajorGridlines"), DISPID(DISPID_UNKNOWN/*[1610743819]*/));
  TAutoArgs<1> _args;
  _args[1] = pfHasMajorGridlines /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::get_HasMajorGridlines(VARIANT_BOOL* pfHasMajorGridlines/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasMajorGridlines"), DISPID(1610743819));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfHasMajorGridlines /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChAxisDispT<T>::get_HasMajorGridlines(void)
{
  VARIANT_BOOL pfHasMajorGridlines;
  this->get_HasMajorGridlines((VARIANT_BOOL*)&pfHasMajorGridlines);
  return pfHasMajorGridlines;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::set_HasMinorGridlines(VARIANT_BOOL pfHasMinorGridlines/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasMinorGridlines"), DISPID(DISPID_UNKNOWN/*[1610743821]*/));
  TAutoArgs<1> _args;
  _args[1] = pfHasMinorGridlines /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::get_HasMinorGridlines(VARIANT_BOOL* pfHasMinorGridlines/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasMinorGridlines"), DISPID(1610743821));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfHasMinorGridlines /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChAxisDispT<T>::get_HasMinorGridlines(void)
{
  VARIANT_BOOL pfHasMinorGridlines;
  this->get_HasMinorGridlines((VARIANT_BOOL*)&pfHasMinorGridlines);
  return pfHasMinorGridlines;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::set_HasTitle(VARIANT_BOOL pfHasTitle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasTitle"), DISPID(DISPID_UNKNOWN/*[1610743823]*/));
  TAutoArgs<1> _args;
  _args[1] = pfHasTitle /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::get_HasTitle(VARIANT_BOOL* pfHasTitle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasTitle"), DISPID(1610743823));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfHasTitle /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChAxisDispT<T>::get_HasTitle(void)
{
  VARIANT_BOOL pfHasTitle;
  this->get_HasTitle((VARIANT_BOOL*)&pfHasTitle);
  return pfHasTitle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::get_Line(Owc10_xp::ChLine** ppline/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Line"), DISPID(5205));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChLine**)ppline /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChLine* __fastcall
ChAxisDispT<T>::get_Line(void)
{
  Owc10_xp::ChLine* ppline;
  this->get_Line((Owc10_xp::ChLine**)&ppline);
  return ppline;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::get_MajorGridlines(Owc10_xp::ChGridlines** ppgridlines/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MajorGridlines"), DISPID(DISPID_UNKNOWN/*[1610743826]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChGridlines**)ppgridlines /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChGridlines* __fastcall
ChAxisDispT<T>::get_MajorGridlines(void)
{
  Owc10_xp::ChGridlines* ppgridlines;
  this->get_MajorGridlines((Owc10_xp::ChGridlines**)&ppgridlines);
  return ppgridlines;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::set_MajorTickMarks(Owc10_xp::ChartTickMarkEnum pocpTMT/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MajorTickMarks"), DISPID(DISPID_UNKNOWN/*[1610743827]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)pocpTMT /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::get_MajorTickMarks(Owc10_xp::ChartTickMarkEnum* pocpTMT/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MajorTickMarks"), DISPID(1610743827));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pocpTMT /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartTickMarkEnum __fastcall
ChAxisDispT<T>::get_MajorTickMarks(void)
{
  Owc10_xp::ChartTickMarkEnum pocpTMT;
  this->get_MajorTickMarks((Owc10_xp::ChartTickMarkEnum*)&pocpTMT);
  return pocpTMT;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::set_MajorUnit(double pdMajorUnit/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MajorUnit"), DISPID(DISPID_UNKNOWN/*[1610743829]*/));
  TAutoArgs<1> _args;
  _args[1] = pdMajorUnit /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::get_MajorUnit(double* pdMajorUnit/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MajorUnit"), DISPID(1610743829));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdMajorUnit /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
ChAxisDispT<T>::get_MajorUnit(void)
{
  double pdMajorUnit;
  this->get_MajorUnit((double*)&pdMajorUnit);
  return pdMajorUnit;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::get_MinorGridlines(Owc10_xp::ChGridlines** ppgridlines/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinorGridlines"), DISPID(DISPID_UNKNOWN/*[1610743831]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChGridlines**)ppgridlines /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChGridlines* __fastcall
ChAxisDispT<T>::get_MinorGridlines(void)
{
  Owc10_xp::ChGridlines* ppgridlines;
  this->get_MinorGridlines((Owc10_xp::ChGridlines**)&ppgridlines);
  return ppgridlines;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::set_MinorTickMarks(Owc10_xp::ChartTickMarkEnum pocpTMT/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinorTickMarks"), DISPID(DISPID_UNKNOWN/*[1610743832]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)pocpTMT /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::get_MinorTickMarks(Owc10_xp::ChartTickMarkEnum* pocpTMT/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinorTickMarks"), DISPID(1610743832));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pocpTMT /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartTickMarkEnum __fastcall
ChAxisDispT<T>::get_MinorTickMarks(void)
{
  Owc10_xp::ChartTickMarkEnum pocpTMT;
  this->get_MinorTickMarks((Owc10_xp::ChartTickMarkEnum*)&pocpTMT);
  return pocpTMT;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::set_MinorUnit(double pdMinorUnit/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinorUnit"), DISPID(DISPID_UNKNOWN/*[1610743834]*/));
  TAutoArgs<1> _args;
  _args[1] = pdMinorUnit /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::get_MinorUnit(double* pdMinorUnit/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinorUnit"), DISPID(1610743834));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdMinorUnit /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
ChAxisDispT<T>::get_MinorUnit(void)
{
  double pdMinorUnit;
  this->get_MinorUnit((double*)&pdMinorUnit);
  return pdMinorUnit;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::set_Name(BSTR pbstr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(DISPID_UNKNOWN/*[1610743836]*/));
  TAutoArgs<1> _args;
  _args[1] = pbstr /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::get_Name(BSTR* pbstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1610743836));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ChAxisDispT<T>::get_Name(void)
{
  BSTR pbstr;
  this->get_Name((BSTR*)&pbstr);
  return pbstr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::get_Parent(Owc10_xp::ChChart** ppchart/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(5201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChChart**)ppchart /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChChart* __fastcall
ChAxisDispT<T>::get_Parent(void)
{
  Owc10_xp::ChChart* ppchart;
  this->get_Parent((Owc10_xp::ChChart**)&ppchart);
  return ppchart;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::set_Position(Owc10_xp::ChartAxisPositionEnum pChartAxisPosition/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Position"), DISPID(DISPID_UNKNOWN/*[1610743839]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)pChartAxisPosition /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::get_Position(Owc10_xp::ChartAxisPositionEnum* pChartAxisPosition/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Position"), DISPID(1610743839));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pChartAxisPosition /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartAxisPositionEnum __fastcall
ChAxisDispT<T>::get_Position(void)
{
  Owc10_xp::ChartAxisPositionEnum pChartAxisPosition;
  this->get_Position((Owc10_xp::ChartAxisPositionEnum*)&pChartAxisPosition);
  return pChartAxisPosition;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::get_Scaling(Owc10_xp::ChScaling** ppscaling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Scaling"), DISPID(DISPID_UNKNOWN/*[1610743841]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChScaling**)ppscaling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChScaling* __fastcall
ChAxisDispT<T>::get_Scaling(void)
{
  Owc10_xp::ChScaling* ppscaling;
  this->get_Scaling((Owc10_xp::ChScaling**)&ppscaling);
  return ppscaling;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::set_HasTickLabels(VARIANT_BOOL pfLabels/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasTickLabels"), DISPID(DISPID_UNKNOWN/*[1610743842]*/));
  TAutoArgs<1> _args;
  _args[1] = pfLabels /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::get_HasTickLabels(VARIANT_BOOL* pfLabels/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasTickLabels"), DISPID(1610743842));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfLabels /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChAxisDispT<T>::get_HasTickLabels(void)
{
  VARIANT_BOOL pfLabels;
  this->get_HasTickLabels((VARIANT_BOOL*)&pfLabels);
  return pfLabels;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::set_TickLabelSpacing(long pcCat/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TickLabelSpacing"), DISPID(DISPID_UNKNOWN/*[1610743844]*/));
  TAutoArgs<1> _args;
  _args[1] = pcCat /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::get_TickLabelSpacing(long* pcCat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TickLabelSpacing"), DISPID(1610743844));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcCat /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChAxisDispT<T>::get_TickLabelSpacing(void)
{
  long pcCat;
  this->get_TickLabelSpacing((long*)&pcCat);
  return pcCat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::set_TickMarkSpacing(long pcCat/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TickMarkSpacing"), DISPID(DISPID_UNKNOWN/*[1610743846]*/));
  TAutoArgs<1> _args;
  _args[1] = pcCat /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::get_TickMarkSpacing(long* pcCat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TickMarkSpacing"), DISPID(1610743846));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcCat /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChAxisDispT<T>::get_TickMarkSpacing(void)
{
  long pcCat;
  this->get_TickMarkSpacing((long*)&pcCat);
  return pcCat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::get_Title(Owc10_xp::ChTitle** pptitle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Title"), DISPID(DISPID_UNKNOWN/*[1610743848]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChTitle**)pptitle /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChTitle* __fastcall
ChAxisDispT<T>::get_Title(void)
{
  Owc10_xp::ChTitle* pptitle;
  this->get_Title((Owc10_xp::ChTitle**)&pptitle);
  return pptitle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::get_Type(Owc10_xp::ChartAxisTypeEnum* pocpAT/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(DISPID_UNKNOWN/*[1610743849]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pocpAT /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartAxisTypeEnum __fastcall
ChAxisDispT<T>::get_Type(void)
{
  Owc10_xp::ChartAxisTypeEnum pocpAT;
  this->get_Type((Owc10_xp::ChartAxisTypeEnum*)&pocpAT);
  return pocpAT;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::get_Index(long* piAxis/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(5204));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(piAxis /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChAxisDispT<T>::get_Index(void)
{
  long piAxis;
  this->get_Index((long*)&piAxis);
  return piAxis;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::set_NumberFormat(BSTR pbstrNumberFormat/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumberFormat"), DISPID(5203));
  TAutoArgs<1> _args;
  _args[1] = pbstrNumberFormat /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::get_NumberFormat(BSTR* pbstrNumberFormat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumberFormat"), DISPID(5203));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrNumberFormat /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ChAxisDispT<T>::get_NumberFormat(void)
{
  BSTR pbstrNumberFormat;
  this->get_NumberFormat((BSTR*)&pbstrNumberFormat);
  return pbstrNumberFormat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::Select()
{
  _TDispID _dispid(*this, OLETEXT("Select"), DISPID(5036));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::get_GroupingType(Owc10_xp::ChartAxisGroupingEnum* pgroupenum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupingType"), DISPID(DISPID_UNKNOWN/*[1610743854]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pgroupenum /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartAxisGroupingEnum __fastcall
ChAxisDispT<T>::get_GroupingType(void)
{
  Owc10_xp::ChartAxisGroupingEnum pgroupenum;
  this->get_GroupingType((Owc10_xp::ChartAxisGroupingEnum*)&pgroupenum);
  return pgroupenum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::set_GroupingType(Owc10_xp::ChartAxisGroupingEnum pgroupenum/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupingType"), DISPID(1610743854));
  TAutoArgs<1> _args;
  _args[1] = (int)pgroupenum /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::get_TickLabelUnitType(Owc10_xp::ChartAxisUnitTypeEnum* punittype/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TickLabelUnitType"), DISPID(DISPID_UNKNOWN/*[1610743856]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)punittype /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartAxisUnitTypeEnum __fastcall
ChAxisDispT<T>::get_TickLabelUnitType(void)
{
  Owc10_xp::ChartAxisUnitTypeEnum punittype;
  this->get_TickLabelUnitType((Owc10_xp::ChartAxisUnitTypeEnum*)&punittype);
  return punittype;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::set_TickLabelUnitType(Owc10_xp::ChartAxisUnitTypeEnum punittype/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TickLabelUnitType"), DISPID(1610743856));
  TAutoArgs<1> _args;
  _args[1] = (int)punittype /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::get_TickMarkUnitType(Owc10_xp::ChartAxisUnitTypeEnum* punittype/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TickMarkUnitType"), DISPID(DISPID_UNKNOWN/*[1610743858]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)punittype /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartAxisUnitTypeEnum __fastcall
ChAxisDispT<T>::get_TickMarkUnitType(void)
{
  Owc10_xp::ChartAxisUnitTypeEnum punittype;
  this->get_TickMarkUnitType((Owc10_xp::ChartAxisUnitTypeEnum*)&punittype);
  return punittype;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::set_TickMarkUnitType(Owc10_xp::ChartAxisUnitTypeEnum punittype/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TickMarkUnitType"), DISPID(1610743858));
  TAutoArgs<1> _args;
  _args[1] = (int)punittype /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::get_GroupingUnit(long* GroupingUnit/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupingUnit"), DISPID(DISPID_UNKNOWN/*[1610743860]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(GroupingUnit /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChAxisDispT<T>::get_GroupingUnit(void)
{
  long GroupingUnit;
  this->get_GroupingUnit((long*)&GroupingUnit);
  return GroupingUnit;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::set_GroupingUnit(long GroupingUnit/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupingUnit"), DISPID(1610743860));
  TAutoArgs<1> _args;
  _args[1] = GroupingUnit /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::get_GroupingUnitType(Owc10_xp::ChartAxisUnitTypeEnum* proupingUnitType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupingUnitType"), DISPID(DISPID_UNKNOWN/*[1610743862]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)proupingUnitType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartAxisUnitTypeEnum __fastcall
ChAxisDispT<T>::get_GroupingUnitType(void)
{
  Owc10_xp::ChartAxisUnitTypeEnum proupingUnitType;
  this->get_GroupingUnitType((Owc10_xp::ChartAxisUnitTypeEnum*)&proupingUnitType);
  return proupingUnitType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::set_GroupingUnitType(Owc10_xp::ChartAxisUnitTypeEnum proupingUnitType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupingUnitType"), DISPID(1610743862));
  TAutoArgs<1> _args;
  _args[1] = (int)proupingUnitType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::get_GroupingTotalFunction(Owc10_xp::ChartGroupingTotalFunctionEnum* ptotal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupingTotalFunction"), DISPID(DISPID_UNKNOWN/*[1610743864]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ptotal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartGroupingTotalFunctionEnum __fastcall
ChAxisDispT<T>::get_GroupingTotalFunction(void)
{
  Owc10_xp::ChartGroupingTotalFunctionEnum ptotal;
  this->get_GroupingTotalFunction((Owc10_xp::ChartGroupingTotalFunctionEnum*)&ptotal);
  return ptotal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::set_GroupingTotalFunction(Owc10_xp::ChartGroupingTotalFunctionEnum ptotal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupingTotalFunction"), DISPID(1610743864));
  TAutoArgs<1> _args;
  _args[1] = (int)ptotal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::set_Orientation(long porientation/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Orientation"), DISPID(DISPID_UNKNOWN/*[1610743866]*/));
  TAutoArgs<1> _args;
  _args[1] = porientation /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::get_Orientation(long* porientation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Orientation"), DISPID(1610743866));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(porientation /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChAxisDispT<T>::get_Orientation(void)
{
  long porientation;
  this->get_Orientation((long*)&porientation);
  return porientation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::get_Top(long* ptop/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(DISPID_UNKNOWN/*[1610743868]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ptop /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChAxisDispT<T>::get_Top(void)
{
  long ptop;
  this->get_Top((long*)&ptop);
  return ptop;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::set_Top(long ptop/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1610743868));
  TAutoArgs<1> _args;
  _args[1] = ptop /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::get_Left(long* pleft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(DISPID_UNKNOWN/*[1610743870]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pleft /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChAxisDispT<T>::get_Left(void)
{
  long pleft;
  this->get_Left((long*)&pleft);
  return pleft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::set_Left(long pleft/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1610743870));
  TAutoArgs<1> _args;
  _args[1] = pleft /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::get_Bottom(long* pbottom/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bottom"), DISPID(DISPID_UNKNOWN/*[1610743872]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbottom /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChAxisDispT<T>::get_Bottom(void)
{
  long pbottom;
  this->get_Bottom((long*)&pbottom);
  return pbottom;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::get_Right(long* pright/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Right"), DISPID(DISPID_UNKNOWN/*[1610743873]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pright /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChAxisDispT<T>::get_Right(void)
{
  long pright;
  this->get_Right((long*)&pright);
  return pright;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::get_CategoryLabels(Owc10_xp::ChCategoryLabels** ppCategoryLabels/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CategoryLabels"), DISPID(DISPID_UNKNOWN/*[1610743874]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChCategoryLabels**)ppCategoryLabels /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChCategoryLabels* __fastcall
ChAxisDispT<T>::get_CategoryLabels(void)
{
  Owc10_xp::ChCategoryLabels* ppCategoryLabels;
  this->get_CategoryLabels((Owc10_xp::ChCategoryLabels**)&ppCategoryLabels);
  return ppCategoryLabels;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::ValueToPoint(VARIANT Value/*[in]*/, Owc10_xp::Coordinate** ppCoord/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ValueToPoint"), DISPID(DISPID_UNKNOWN/*[1610743875]*/));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Coordinate**)ppCoord /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::Coordinate* __fastcall
ChAxisDispT<T>::ValueToPoint(VARIANT Value/*[in]*/)
{
  Owc10_xp::Coordinate* ppCoord;
  this->ValueToPoint(Value, (Owc10_xp::Coordinate**)&ppCoord);
  return ppCoord;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChAxisDispT<T>::get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObjectType"), DISPID(DISPID_UNKNOWN/*[1610743876]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pcs /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartSelectionsEnum __fastcall
ChAxisDispT<T>::get_ObjectType(void)
{
  Owc10_xp::ChartSelectionsEnum pcs;
  this->get_ObjectType((Owc10_xp::ChartSelectionsEnum*)&pcs);
  return pcs;
}

// *********************************************************************//
// DispIntf:  ChGridlines
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AC4-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChGridlinesDispT<T>::get_Line(Owc10_xp::ChLine** ppline/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Line"), DISPID(5205));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChLine**)ppline /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChLine* __fastcall
ChGridlinesDispT<T>::get_Line(void)
{
  Owc10_xp::ChLine* ppline;
  this->get_Line((Owc10_xp::ChLine**)&ppline);
  return ppline;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChGridlinesDispT<T>::get_Parent(Owc10_xp::ChAxis** ppaxis/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(5201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChAxis**)ppaxis /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChAxis* __fastcall
ChGridlinesDispT<T>::get_Parent(void)
{
  Owc10_xp::ChAxis* ppaxis;
  this->get_Parent((Owc10_xp::ChAxis**)&ppaxis);
  return ppaxis;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChGridlinesDispT<T>::Select()
{
  _TDispID _dispid(*this, OLETEXT("Select"), DISPID(5036));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChGridlinesDispT<T>::get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObjectType"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pcs /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartSelectionsEnum __fastcall
ChGridlinesDispT<T>::get_ObjectType(void)
{
  Owc10_xp::ChartSelectionsEnum pcs;
  this->get_ObjectType((Owc10_xp::ChartSelectionsEnum*)&pcs);
  return pcs;
}

// *********************************************************************//
// DispIntf:  ChTitle
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39ABE-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChTitleDispT<T>::get_Border(Owc10_xp::ChBorder** ppline/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Border"), DISPID(5004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChBorder**)ppline /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChBorder* __fastcall
ChTitleDispT<T>::get_Border(void)
{
  Owc10_xp::ChBorder* ppline;
  this->get_Border((Owc10_xp::ChBorder**)&ppline);
  return ppline;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChTitleDispT<T>::set_Caption(BSTR pbstr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<1> _args;
  _args[1] = pbstr /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChTitleDispT<T>::get_Caption(BSTR* pbstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(1610743809));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ChTitleDispT<T>::get_Caption(void)
{
  BSTR pbstr;
  this->get_Caption((BSTR*)&pbstr);
  return pbstr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChTitleDispT<T>::get_Font(Owc10_xp::ChFont** ppfont/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(5200));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChFont**)ppfont /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChFont* __fastcall
ChTitleDispT<T>::get_Font(void)
{
  Owc10_xp::ChFont* ppfont;
  this->get_Font((Owc10_xp::ChFont**)&ppfont);
  return ppfont;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChTitleDispT<T>::get_Interior(Owc10_xp::ChInterior** ppinterior/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Interior"), DISPID(5007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChInterior**)ppinterior /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChInterior* __fastcall
ChTitleDispT<T>::get_Interior(void)
{
  Owc10_xp::ChInterior* ppinterior;
  this->get_Interior((Owc10_xp::ChInterior**)&ppinterior);
  return ppinterior;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChTitleDispT<T>::get_Parent(LPDISPATCH* ppidispatch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(5201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidispatch /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ChTitleDispT<T>::get_Parent(void)
{
  LPDISPATCH ppidispatch;
  this->get_Parent((LPDISPATCH*)&ppidispatch);
  return ppidispatch;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChTitleDispT<T>::set_Position(Owc10_xp::ChartTitlePositionEnum pocpPos/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Position"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)pocpPos /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChTitleDispT<T>::get_Position(Owc10_xp::ChartTitlePositionEnum* pocpPos/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Position"), DISPID(1610743814));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pocpPos /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartTitlePositionEnum __fastcall
ChTitleDispT<T>::get_Position(void)
{
  Owc10_xp::ChartTitlePositionEnum pocpPos;
  this->get_Position((Owc10_xp::ChartTitlePositionEnum*)&pocpPos);
  return pocpPos;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChTitleDispT<T>::Select()
{
  _TDispID _dispid(*this, OLETEXT("Select"), DISPID(5036));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChTitleDispT<T>::get_Top(long* ptop/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ptop /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChTitleDispT<T>::get_Top(void)
{
  long ptop;
  this->get_Top((long*)&ptop);
  return ptop;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChTitleDispT<T>::set_Top(long ptop/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1610743817));
  TAutoArgs<1> _args;
  _args[1] = ptop /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChTitleDispT<T>::get_Left(long* pleft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(DISPID_UNKNOWN/*[1610743819]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pleft /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChTitleDispT<T>::get_Left(void)
{
  long pleft;
  this->get_Left((long*)&pleft);
  return pleft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChTitleDispT<T>::set_Left(long pleft/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1610743819));
  TAutoArgs<1> _args;
  _args[1] = pleft /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChTitleDispT<T>::get_Bottom(long* pbottom/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bottom"), DISPID(DISPID_UNKNOWN/*[1610743821]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbottom /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChTitleDispT<T>::get_Bottom(void)
{
  long pbottom;
  this->get_Bottom((long*)&pbottom);
  return pbottom;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChTitleDispT<T>::get_Right(long* pright/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Right"), DISPID(DISPID_UNKNOWN/*[1610743822]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pright /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChTitleDispT<T>::get_Right(void)
{
  long pright;
  this->get_Right((long*)&pright);
  return pright;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChTitleDispT<T>::get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObjectType"), DISPID(DISPID_UNKNOWN/*[1610743823]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pcs /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartSelectionsEnum __fastcall
ChTitleDispT<T>::get_ObjectType(void)
{
  Owc10_xp::ChartSelectionsEnum pcs;
  this->get_ObjectType((Owc10_xp::ChartSelectionsEnum*)&pcs);
  return pcs;
}

// *********************************************************************//
// DispIntf:  ChCategoryLabels
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {EDF774DC-D540-40F4-99F2-75C83379CAA8}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChCategoryLabelsDispT<T>::get_LevelCount(long* pclabel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LevelCount"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pclabel /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChCategoryLabelsDispT<T>::get_LevelCount(void)
{
  long pclabel;
  this->get_LevelCount((long*)&pclabel);
  return pclabel;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChCategoryLabelsDispT<T>::get_ItemCount(long Level/*[in,def,opt]*/, long* pcitem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ItemCount"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<1> _args;
  _args[1] = Level /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pcitem /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChCategoryLabelsDispT<T>::get_ItemCount(long Level/*[in,def,opt]*/)
{
  long pcitem;
  this->get_ItemCount(Level, (long*)&pcitem);
  return pcitem;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChCategoryLabelsDispT<T>::get_Parent(Owc10_xp::ChAxis** ppaxis/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(5201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChAxis**)ppaxis /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChAxis* __fastcall
ChCategoryLabelsDispT<T>::get_Parent(void)
{
  Owc10_xp::ChAxis* ppaxis;
  this->get_Parent((Owc10_xp::ChAxis**)&ppaxis);
  return ppaxis;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChCategoryLabelsDispT<T>::get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
ChCategoryLabelsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunk;
  this->get__NewEnum((LPUNKNOWN*)&ppunk);
  return ppunk;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChCategoryLabelsDispT<T>::get_Item(VARIANT Index/*[in]*/, long Level/*[in,def,opt]*/, 
                                   Owc10_xp::ChCategoryLabel** ppCategoryLabel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  _args[2] = Level /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChCategoryLabel**)ppCategoryLabel /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChCategoryLabel* __fastcall
ChCategoryLabelsDispT<T>::get_Item(VARIANT Index/*[in]*/, long Level/*[in,def,opt]*/)
{
  Owc10_xp::ChCategoryLabel* ppCategoryLabel;
  this->get_Item(Index, Level, (Owc10_xp::ChCategoryLabel**)&ppCategoryLabel);
  return ppCategoryLabel;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChCategoryLabelsDispT<T>::get_PivotAxis(Owc10_xp::PivotResultAxis** ppaxis/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PivotAxis"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotResultAxis**)ppaxis /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotResultAxis* __fastcall
ChCategoryLabelsDispT<T>::get_PivotAxis(void)
{
  Owc10_xp::PivotResultAxis* ppaxis;
  this->get_PivotAxis((Owc10_xp::PivotResultAxis**)&ppaxis);
  return ppaxis;
}

// *********************************************************************//
// DispIntf:  ChCategoryLabel
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D4765783-5F64-4A53-BD65-66839B65B4C9}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChCategoryLabelDispT<T>::get_Caption(BSTR* pbstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ChCategoryLabelDispT<T>::get_Caption(void)
{
  BSTR pbstr;
  this->get_Caption((BSTR*)&pbstr);
  return pbstr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChCategoryLabelDispT<T>::get_PivotObject(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PivotObject"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ChCategoryLabelDispT<T>::get_PivotObject(void)
{
  LPDISPATCH ppidisp;
  this->get_PivotObject((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChCategoryLabelDispT<T>::get_Level(long* pLevel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Level"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pLevel /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChCategoryLabelDispT<T>::get_Level(void)
{
  long pLevel;
  this->get_Level((long*)&pLevel);
  return pLevel;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChCategoryLabelDispT<T>::get_Index(long* pIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(5204));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pIndex /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChCategoryLabelDispT<T>::get_Index(void)
{
  long pIndex;
  this->get_Index((long*)&pIndex);
  return pIndex;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChCategoryLabelDispT<T>::get_Parent(Owc10_xp::ChAxis** ppaxis/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(5201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChAxis**)ppaxis /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChAxis* __fastcall
ChCategoryLabelDispT<T>::get_Parent(void)
{
  Owc10_xp::ChAxis* ppaxis;
  this->get_Parent((Owc10_xp::ChAxis**)&ppaxis);
  return ppaxis;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChCategoryLabelDispT<T>::get_ParentLabel(Owc10_xp::ChCategoryLabel** pplabel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ParentLabel"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChCategoryLabel**)pplabel /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChCategoryLabel* __fastcall
ChCategoryLabelDispT<T>::get_ParentLabel(void)
{
  Owc10_xp::ChCategoryLabel* pplabel;
  this->get_ParentLabel((Owc10_xp::ChCategoryLabel**)&pplabel);
  return pplabel;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChCategoryLabelDispT<T>::Select()
{
  _TDispID _dispid(*this, OLETEXT("Select"), DISPID(5036));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChCategoryLabelDispT<T>::get_Top(long* ptop/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ptop /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChCategoryLabelDispT<T>::get_Top(void)
{
  long ptop;
  this->get_Top((long*)&ptop);
  return ptop;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChCategoryLabelDispT<T>::get_Left(long* pleft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pleft /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChCategoryLabelDispT<T>::get_Left(void)
{
  long pleft;
  this->get_Left((long*)&pleft);
  return pleft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChCategoryLabelDispT<T>::get_Bottom(long* pbottom/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bottom"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbottom /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChCategoryLabelDispT<T>::get_Bottom(void)
{
  long pbottom;
  this->get_Bottom((long*)&pbottom);
  return pbottom;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChCategoryLabelDispT<T>::get_Right(long* pright/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Right"), DISPID(DISPID_UNKNOWN/*[1610743818]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pright /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChCategoryLabelDispT<T>::get_Right(void)
{
  long pright;
  this->get_Right((long*)&pright);
  return pright;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChCategoryLabelDispT<T>::get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObjectType"), DISPID(DISPID_UNKNOWN/*[1610743819]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pcs /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartSelectionsEnum __fastcall
ChCategoryLabelDispT<T>::get_ObjectType(void)
{
  Owc10_xp::ChartSelectionsEnum pcs;
  this->get_ObjectType((Owc10_xp::ChartSelectionsEnum*)&pcs);
  return pcs;
}

// *********************************************************************//
// DispIntf:  PivotResultAxis
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D1AFFCE4-FCE5-11D2-8F35-00600893B533}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultAxisDispT<T>::get_Data(Owc10_xp::PivotData** Data/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Data"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotData**)Data /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotData* __fastcall
PivotResultAxisDispT<T>::get_Data(void)
{
  Owc10_xp::PivotData* Data;
  this->get_Data((Owc10_xp::PivotData**)&Data);
  return Data;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultAxisDispT<T>::get_SourceAxis(Owc10_xp::PivotGroupAxis** Axis/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SourceAxis"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotGroupAxis**)Axis /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotGroupAxis* __fastcall
PivotResultAxisDispT<T>::get_SourceAxis(void)
{
  Owc10_xp::PivotGroupAxis* Axis;
  this->get_SourceAxis((Owc10_xp::PivotGroupAxis**)&Axis);
  return Axis;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultAxisDispT<T>::get_Label(Owc10_xp::PivotResultLabel** Label/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotResultLabel**)Label /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotResultLabel* __fastcall
PivotResultAxisDispT<T>::get_Label(void)
{
  Owc10_xp::PivotResultLabel* Label;
  this->get_Label((Owc10_xp::PivotResultLabel**)&Label);
  return Label;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultAxisDispT<T>::get_Left(long* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotResultAxisDispT<T>::get_Left(void)
{
  long Left;
  this->get_Left((long*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultAxisDispT<T>::get_Top(long* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotResultAxisDispT<T>::get_Top(void)
{
  long Top;
  this->get_Top((long*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultAxisDispT<T>::get_Width(long* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotResultAxisDispT<T>::get_Width(void)
{
  long Width;
  this->get_Width((long*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultAxisDispT<T>::get_Height(long* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotResultAxisDispT<T>::get_Height(void)
{
  long Height;
  this->get_Height((long*)&Height);
  return Height;
}

// *********************************************************************//
// DispIntf:  PivotResultGroupAxis
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2C8CED10-01AF-11D3-8F35-00600893B533}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultGroupAxisDispT<T>::get_Fields(Owc10_xp::PivotFields** Fields/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Fields"), DISPID(1610809344));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotFields**)Fields /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotFields* __fastcall
PivotResultGroupAxisDispT<T>::get_Fields(void)
{
  Owc10_xp::PivotFields* Fields;
  this->get_Fields((Owc10_xp::PivotFields**)&Fields);
  return Fields;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultGroupAxisDispT<T>::get_GroupFields(Owc10_xp::PivotResultGroupFields** GroupFields/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupFields"), DISPID(1610809345));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotResultGroupFields**)GroupFields /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotResultGroupFields* __fastcall
PivotResultGroupAxisDispT<T>::get_GroupFields(void)
{
  Owc10_xp::PivotResultGroupFields* GroupFields;
  this->get_GroupFields((Owc10_xp::PivotResultGroupFields**)&GroupFields);
  return GroupFields;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultGroupAxisDispT<T>::get_Member(Owc10_xp::PivotRowMember** Member/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Member"), DISPID(1610809346));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotRowMember**)Member /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotRowMember* __fastcall
PivotResultGroupAxisDispT<T>::get_Member(void)
{
  Owc10_xp::PivotRowMember* Member;
  this->get_Member((Owc10_xp::PivotRowMember**)&Member);
  return Member;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultGroupAxisDispT<T>::get_Data(Owc10_xp::PivotData** Data/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Data"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotData**)Data /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotData* __fastcall
PivotResultGroupAxisDispT<T>::get_Data(void)
{
  Owc10_xp::PivotData* Data;
  this->get_Data((Owc10_xp::PivotData**)&Data);
  return Data;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultGroupAxisDispT<T>::get_SourceAxis(Owc10_xp::PivotGroupAxis** Axis/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SourceAxis"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotGroupAxis**)Axis /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotGroupAxis* __fastcall
PivotResultGroupAxisDispT<T>::get_SourceAxis(void)
{
  Owc10_xp::PivotGroupAxis* Axis;
  this->get_SourceAxis((Owc10_xp::PivotGroupAxis**)&Axis);
  return Axis;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultGroupAxisDispT<T>::get_Label(Owc10_xp::PivotResultLabel** Label/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotResultLabel**)Label /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotResultLabel* __fastcall
PivotResultGroupAxisDispT<T>::get_Label(void)
{
  Owc10_xp::PivotResultLabel* Label;
  this->get_Label((Owc10_xp::PivotResultLabel**)&Label);
  return Label;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultGroupAxisDispT<T>::get_Left(long* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotResultGroupAxisDispT<T>::get_Left(void)
{
  long Left;
  this->get_Left((long*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultGroupAxisDispT<T>::get_Top(long* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotResultGroupAxisDispT<T>::get_Top(void)
{
  long Top;
  this->get_Top((long*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultGroupAxisDispT<T>::get_Width(long* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotResultGroupAxisDispT<T>::get_Width(void)
{
  long Width;
  this->get_Width((long*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultGroupAxisDispT<T>::get_Height(long* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotResultGroupAxisDispT<T>::get_Height(void)
{
  long Height;
  this->get_Height((long*)&Height);
  return Height;
}

// *********************************************************************//
// DispIntf:  PivotData
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B30-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDataDispT<T>::get_View(Owc10_xp::PivotView** View/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("View"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotView**)View /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotView* __fastcall
PivotDataDispT<T>::get_View(void)
{
  Owc10_xp::PivotView* View;
  this->get_View((Owc10_xp::PivotView**)&View);
  return View;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDataDispT<T>::get_RowAxis(Owc10_xp::PivotResultRowAxis** RowAxis/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RowAxis"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotResultRowAxis**)RowAxis /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotResultRowAxis* __fastcall
PivotDataDispT<T>::get_RowAxis(void)
{
  Owc10_xp::PivotResultRowAxis* RowAxis;
  this->get_RowAxis((Owc10_xp::PivotResultRowAxis**)&RowAxis);
  return RowAxis;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDataDispT<T>::get_ColumnAxis(Owc10_xp::PivotResultColumnAxis** ColumnAxis/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnAxis"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotResultColumnAxis**)ColumnAxis /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotResultColumnAxis* __fastcall
PivotDataDispT<T>::get_ColumnAxis(void)
{
  Owc10_xp::PivotResultColumnAxis* ColumnAxis;
  this->get_ColumnAxis((Owc10_xp::PivotResultColumnAxis**)&ColumnAxis);
  return ColumnAxis;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDataDispT<T>::get_FilterAxis(Owc10_xp::PivotResultFilterAxis** FilterAxis/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FilterAxis"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotResultFilterAxis**)FilterAxis /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotResultFilterAxis* __fastcall
PivotDataDispT<T>::get_FilterAxis(void)
{
  Owc10_xp::PivotResultFilterAxis* FilterAxis;
  this->get_FilterAxis((Owc10_xp::PivotResultFilterAxis**)&FilterAxis);
  return FilterAxis;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDataDispT<T>::get_DataAxis(Owc10_xp::PivotResultDataAxis** DataAxis/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataAxis"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotResultDataAxis**)DataAxis /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotResultDataAxis* __fastcall
PivotDataDispT<T>::get_DataAxis(void)
{
  Owc10_xp::PivotResultDataAxis* DataAxis;
  this->get_DataAxis((Owc10_xp::PivotResultDataAxis**)&DataAxis);
  return DataAxis;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDataDispT<T>::get_Left(Owc10_xp::PivotColumnMember** Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotColumnMember**)Left /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotColumnMember* __fastcall
PivotDataDispT<T>::get_Left(void)
{
  Owc10_xp::PivotColumnMember* Left;
  this->get_Left((Owc10_xp::PivotColumnMember**)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDataDispT<T>::_set_Left(Owc10_xp::PivotColumnMember* Left/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1610743813));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::PivotColumnMember*)Left /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDataDispT<T>::get_Top(Owc10_xp::PivotAxisMember** Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotAxisMember**)Top /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotAxisMember* __fastcall
PivotDataDispT<T>::get_Top(void)
{
  Owc10_xp::PivotAxisMember* Top;
  this->get_Top((Owc10_xp::PivotAxisMember**)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDataDispT<T>::_set_Top(Owc10_xp::PivotAxisMember* Top/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1610743815));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::PivotAxisMember*)Top /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDataDispT<T>::get_Cells(Owc10_xp::PivotAxisMember* Row/*[in]*/, 
                             Owc10_xp::PivotColumnMember* Column/*[in]*/, 
                             Owc10_xp::PivotCell** Cell/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Cells"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::PivotAxisMember*)Row /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Owc10_xp::PivotColumnMember*)Column /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotCell**)Cell /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotCell* __fastcall
PivotDataDispT<T>::get_Cells(Owc10_xp::PivotAxisMember* Row/*[in]*/, 
                             Owc10_xp::PivotColumnMember* Column/*[in]*/)
{
  Owc10_xp::PivotCell* Cell;
  this->get_Cells(Row, Column, (Owc10_xp::PivotCell**)&Cell);
  return Cell;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDataDispT<T>::get_DetailLeft(Owc10_xp::PivotColumnMember* Column/*[in]*/, 
                                  long* DetailLeft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DetailLeft"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::PivotColumnMember*)Column /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(DetailLeft /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotDataDispT<T>::get_DetailLeft(Owc10_xp::PivotColumnMember* Column/*[in]*/)
{
  long DetailLeft;
  this->get_DetailLeft(Column, (long*)&DetailLeft);
  return DetailLeft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDataDispT<T>::set_DetailLeft(Owc10_xp::PivotColumnMember* Column/*[in]*/, 
                                  long DetailLeft/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DetailLeft"), DISPID(2005));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::PivotColumnMember*)Column /*[VT_USERDEFINED:1]*/;
  _args[2] = DetailLeft /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDataDispT<T>::get_Range(Owc10_xp::PivotCell* TopLeft/*[in]*/, 
                             Owc10_xp::PivotCell* BottomRight/*[in]*/, 
                             Owc10_xp::PivotRange** Range/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Range"), DISPID(DISPID_UNKNOWN/*[1610743820]*/));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::PivotCell*)TopLeft /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Owc10_xp::PivotCell*)BottomRight /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotRange**)Range /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotRange* __fastcall
PivotDataDispT<T>::get_Range(Owc10_xp::PivotCell* TopLeft/*[in]*/, 
                             Owc10_xp::PivotCell* BottomRight/*[in]*/)
{
  Owc10_xp::PivotRange* Range;
  this->get_Range(TopLeft, BottomRight, (Owc10_xp::PivotRange**)&Range);
  return Range;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDataDispT<T>::get_Left2(long* Left2/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left2"), DISPID(DISPID_UNKNOWN/*[1610743821]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left2 /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotDataDispT<T>::get_Left2(void)
{
  long Left2;
  this->get_Left2((long*)&Left2);
  return Left2;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDataDispT<T>::get_Top2(long* Top2/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top2"), DISPID(DISPID_UNKNOWN/*[1610743822]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top2 /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotDataDispT<T>::get_Top2(void)
{
  long Top2;
  this->get_Top2((long*)&Top2);
  return Top2;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDataDispT<T>::get_Label(Owc10_xp::PivotResultLabel** Label/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(DISPID_UNKNOWN/*[1610743823]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotResultLabel**)Label /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotResultLabel* __fastcall
PivotDataDispT<T>::get_Label(void)
{
  Owc10_xp::PivotResultLabel* Label;
  this->get_Label((Owc10_xp::PivotResultLabel**)&Label);
  return Label;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDataDispT<T>::MoveTop(Owc10_xp::PivotAxisMember* Top/*[in]*/, long TopOffset/*[in]*/, 
                           VARIANT_BOOL Update/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("MoveTop"), DISPID(DISPID_UNKNOWN/*[1610743824]*/));
  TAutoArgs<3> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::PivotAxisMember*)Top /*[VT_USERDEFINED:1]*/;
  _args[2] = TopOffset /*[VT_I4:0]*/;
  _args[3] = Update /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDataDispT<T>::MoveLeft(Owc10_xp::PivotColumnMember* Left/*[in]*/, long LeftOffset/*[in]*/, 
                            VARIANT_BOOL Update/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("MoveLeft"), DISPID(DISPID_UNKNOWN/*[1610743825]*/));
  TAutoArgs<3> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::PivotColumnMember*)Left /*[VT_USERDEFINED:1]*/;
  _args[2] = LeftOffset /*[VT_I4:0]*/;
  _args[3] = Update /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDataDispT<T>::get_Control(Owc10_xp::IPivotControl** Control/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Control"), DISPID(DISPID_UNKNOWN/*[1610743826]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::IPivotControl**)Control /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::IPivotControl* __fastcall
PivotDataDispT<T>::get_Control(void)
{
  Owc10_xp::IPivotControl* Control;
  this->get_Control((Owc10_xp::IPivotControl**)&Control);
  return Control;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDataDispT<T>::get_RowMembers(Owc10_xp::PivotRowMembers** RowMembers/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RowMembers"), DISPID(DISPID_UNKNOWN/*[1610743827]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotRowMembers**)RowMembers /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotRowMembers* __fastcall
PivotDataDispT<T>::get_RowMembers(void)
{
  Owc10_xp::PivotRowMembers* RowMembers;
  this->get_RowMembers((Owc10_xp::PivotRowMembers**)&RowMembers);
  return RowMembers;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDataDispT<T>::get_ColumnMembers(Owc10_xp::PivotColumnMembers** ColumnMembers/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnMembers"), DISPID(DISPID_UNKNOWN/*[1610743828]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotColumnMembers**)ColumnMembers /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotColumnMembers* __fastcall
PivotDataDispT<T>::get_ColumnMembers(void)
{
  Owc10_xp::PivotColumnMembers* ColumnMembers;
  this->get_ColumnMembers((Owc10_xp::PivotColumnMembers**)&ColumnMembers);
  return ColumnMembers;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDataDispT<T>::get_CurrentCell(Owc10_xp::PivotCell** Cell/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentCell"), DISPID(DISPID_UNKNOWN/*[1610743829]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotCell**)Cell /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotCell* __fastcall
PivotDataDispT<T>::get_CurrentCell(void)
{
  Owc10_xp::PivotCell* Cell;
  this->get_CurrentCell((Owc10_xp::PivotCell**)&Cell);
  return Cell;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDataDispT<T>::get_LeftOffset(long* LeftOffset/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LeftOffset"), DISPID(DISPID_UNKNOWN/*[1610743830]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(LeftOffset /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotDataDispT<T>::get_LeftOffset(void)
{
  long LeftOffset;
  this->get_LeftOffset((long*)&LeftOffset);
  return LeftOffset;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDataDispT<T>::set_LeftOffset(long LeftOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LeftOffset"), DISPID(1610743830));
  TAutoArgs<1> _args;
  _args[1] = LeftOffset /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDataDispT<T>::get_TopOffset(long* TopOffset/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TopOffset"), DISPID(DISPID_UNKNOWN/*[1610743832]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(TopOffset /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotDataDispT<T>::get_TopOffset(void)
{
  long TopOffset;
  this->get_TopOffset((long*)&TopOffset);
  return TopOffset;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDataDispT<T>::set_TopOffset(long TopOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TopOffset"), DISPID(1610743832));
  TAutoArgs<1> _args;
  _args[1] = TopOffset /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDataDispT<T>::get_ViewportTop(long* ViewportTop/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ViewportTop"), DISPID(DISPID_UNKNOWN/*[1610743834]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ViewportTop /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotDataDispT<T>::get_ViewportTop(void)
{
  long ViewportTop;
  this->get_ViewportTop((long*)&ViewportTop);
  return ViewportTop;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDataDispT<T>::set_ViewportTop(long ViewportTop/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ViewportTop"), DISPID(1610743834));
  TAutoArgs<1> _args;
  _args[1] = ViewportTop /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDataDispT<T>::get_ViewportLeft(long* ViewportLeft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ViewportLeft"), DISPID(DISPID_UNKNOWN/*[1610743836]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ViewportLeft /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotDataDispT<T>::get_ViewportLeft(void)
{
  long ViewportLeft;
  this->get_ViewportLeft((long*)&ViewportLeft);
  return ViewportLeft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDataDispT<T>::set_ViewportLeft(long ViewportLeft/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ViewportLeft"), DISPID(1610743836));
  TAutoArgs<1> _args;
  _args[1] = ViewportLeft /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDataDispT<T>::get_CellsEx(Owc10_xp::PivotAxisMember* Row/*[in]*/, 
                               Owc10_xp::PivotColumnMember* Column/*[in]*/, 
                               Owc10_xp::PivotPageMember* Page/*[in]*/, 
                               Owc10_xp::PivotCell** Cell/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CellsEx"), DISPID(DISPID_UNKNOWN/*[1610743838]*/));
  TAutoArgs<3> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::PivotAxisMember*)Row /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Owc10_xp::PivotColumnMember*)Column /*[VT_USERDEFINED:1]*/;
  _args[3] = (LPDISPATCH)(Owc10_xp::PivotPageMember*)Page /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotCell**)Cell /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotCell* __fastcall
PivotDataDispT<T>::get_CellsEx(Owc10_xp::PivotAxisMember* Row/*[in]*/, 
                               Owc10_xp::PivotColumnMember* Column/*[in]*/, 
                               Owc10_xp::PivotPageMember* Page/*[in]*/)
{
  Owc10_xp::PivotCell* Cell;
  this->get_CellsEx(Row, Column, Page, (Owc10_xp::PivotCell**)&Cell);
  return Cell;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDataDispT<T>::get_PageAxis(Owc10_xp::PivotResultPageAxis** PageAxis/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PageAxis"), DISPID(DISPID_UNKNOWN/*[1610743839]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotResultPageAxis**)PageAxis /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotResultPageAxis* __fastcall
PivotDataDispT<T>::get_PageAxis(void)
{
  Owc10_xp::PivotResultPageAxis* PageAxis;
  this->get_PageAxis((Owc10_xp::PivotResultPageAxis**)&PageAxis);
  return PageAxis;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDataDispT<T>::get_Recordset(Adodb_xp::Recordset** Recordset/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Recordset"), DISPID(DISPID_UNKNOWN/*[1610743840]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Adodb_xp::Recordset**)Recordset /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Adodb_xp::Recordset* __fastcall
PivotDataDispT<T>::get_Recordset(void)
{
  Adodb_xp::Recordset* Recordset;
  this->get_Recordset((Adodb_xp::Recordset**)&Recordset);
  return Recordset;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDataDispT<T>::ShowDetails()
{
  _TDispID _dispid(*this, OLETEXT("ShowDetails"), DISPID(DISPID_UNKNOWN/*[1610743841]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDataDispT<T>::HideDetails()
{
  _TDispID _dispid(*this, OLETEXT("HideDetails"), DISPID(DISPID_UNKNOWN/*[1610743842]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDataDispT<T>::get_IsConsistent(VARIANT_BOOL* IsConsistent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsConsistent"), DISPID(DISPID_UNKNOWN/*[1610743843]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(IsConsistent /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PivotDataDispT<T>::get_IsConsistent(void)
{
  VARIANT_BOOL IsConsistent;
  this->get_IsConsistent((VARIANT_BOOL*)&IsConsistent);
  return IsConsistent;
}

// *********************************************************************//
// DispIntf:  PivotView
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B29-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::get_FieldSets(Owc10_xp::PivotFieldSets** FieldSets/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FieldSets"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotFieldSets**)FieldSets /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotFieldSets* __fastcall
PivotViewDispT<T>::get_FieldSets(void)
{
  Owc10_xp::PivotFieldSets* FieldSets;
  this->get_FieldSets((Owc10_xp::PivotFieldSets**)&FieldSets);
  return FieldSets;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::get_RowAxis(Owc10_xp::PivotAxis** Axis/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RowAxis"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotAxis**)Axis /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotAxis* __fastcall
PivotViewDispT<T>::get_RowAxis(void)
{
  Owc10_xp::PivotAxis* Axis;
  this->get_RowAxis((Owc10_xp::PivotAxis**)&Axis);
  return Axis;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::get_ColumnAxis(Owc10_xp::PivotAxis** Axis/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnAxis"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotAxis**)Axis /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotAxis* __fastcall
PivotViewDispT<T>::get_ColumnAxis(void)
{
  Owc10_xp::PivotAxis* Axis;
  this->get_ColumnAxis((Owc10_xp::PivotAxis**)&Axis);
  return Axis;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::get_DataAxis(Owc10_xp::PivotDataAxis** Axis/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataAxis"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotDataAxis**)Axis /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotDataAxis* __fastcall
PivotViewDispT<T>::get_DataAxis(void)
{
  Owc10_xp::PivotDataAxis* Axis;
  this->get_DataAxis((Owc10_xp::PivotDataAxis**)&Axis);
  return Axis;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::get_FilterAxis(Owc10_xp::PivotFilterAxis** Axis/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FilterAxis"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotFilterAxis**)Axis /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotFilterAxis* __fastcall
PivotViewDispT<T>::get_FilterAxis(void)
{
  Owc10_xp::PivotFilterAxis* Axis;
  this->get_FilterAxis((Owc10_xp::PivotFilterAxis**)&Axis);
  return Axis;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::get_Label(Owc10_xp::PivotLabel** Label/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotLabel**)Label /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotLabel* __fastcall
PivotViewDispT<T>::get_Label(void)
{
  Owc10_xp::PivotLabel* Label;
  this->get_Label((Owc10_xp::PivotLabel**)&Label);
  return Label;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::get_TitleBar(Owc10_xp::PivotLabel** Label/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TitleBar"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotLabel**)Label /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotLabel* __fastcall
PivotViewDispT<T>::get_TitleBar(void)
{
  Owc10_xp::PivotLabel* Label;
  this->get_TitleBar((Owc10_xp::PivotLabel**)&Label);
  return Label;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::get_Totals(Owc10_xp::PivotTotals** Totals/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Totals"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotTotals**)Totals /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotTotals* __fastcall
PivotViewDispT<T>::get_Totals(void)
{
  Owc10_xp::PivotTotals* Totals;
  this->get_Totals((Owc10_xp::PivotTotals**)&Totals);
  return Totals;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::get_TotalFont(Owc10_xp::PivotFont** Font/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TotalFont"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotFont**)Font /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotFont* __fastcall
PivotViewDispT<T>::get_TotalFont(void)
{
  Owc10_xp::PivotFont* Font;
  this->get_TotalFont((Owc10_xp::PivotFont**)&Font);
  return Font;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::get_TotalForeColor(VARIANT* Color/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TotalForeColor"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Color /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PivotViewDispT<T>::get_TotalForeColor(void)
{
  VARIANT Color;
  this->get_TotalForeColor((VARIANT*)&Color);
  return Color;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::set_TotalForeColor(VARIANT Color/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TotalForeColor"), DISPID(1610743817));
  TAutoArgs<1> _args;
  _args[1] = Color /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::get_TotalBackColor(VARIANT* Color/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TotalBackColor"), DISPID(DISPID_UNKNOWN/*[1610743819]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Color /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PivotViewDispT<T>::get_TotalBackColor(void)
{
  VARIANT Color;
  this->get_TotalBackColor((VARIANT*)&Color);
  return Color;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::set_TotalBackColor(VARIANT Color/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TotalBackColor"), DISPID(1610743819));
  TAutoArgs<1> _args;
  _args[1] = Color /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::get_HeaderFont(Owc10_xp::PivotFont** Font/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderFont"), DISPID(DISPID_UNKNOWN/*[1610743821]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotFont**)Font /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotFont* __fastcall
PivotViewDispT<T>::get_HeaderFont(void)
{
  Owc10_xp::PivotFont* Font;
  this->get_HeaderFont((Owc10_xp::PivotFont**)&Font);
  return Font;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::get_HeaderForeColor(VARIANT* Color/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderForeColor"), DISPID(DISPID_UNKNOWN/*[1610743822]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Color /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PivotViewDispT<T>::get_HeaderForeColor(void)
{
  VARIANT Color;
  this->get_HeaderForeColor((VARIANT*)&Color);
  return Color;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::set_HeaderForeColor(VARIANT Color/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderForeColor"), DISPID(1610743822));
  TAutoArgs<1> _args;
  _args[1] = Color /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::get_HeaderBackColor(VARIANT* Color/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderBackColor"), DISPID(DISPID_UNKNOWN/*[1610743824]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Color /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PivotViewDispT<T>::get_HeaderBackColor(void)
{
  VARIANT Color;
  this->get_HeaderBackColor((VARIANT*)&Color);
  return Color;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::set_HeaderBackColor(VARIANT Color/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderBackColor"), DISPID(1610743824));
  TAutoArgs<1> _args;
  _args[1] = Color /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::get_HeaderHAlignment(Owc10_xp::PivotHAlignmentEnum* HAlignment/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderHAlignment"), DISPID(DISPID_UNKNOWN/*[1610743826]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)HAlignment /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotHAlignmentEnum __fastcall
PivotViewDispT<T>::get_HeaderHAlignment(void)
{
  Owc10_xp::PivotHAlignmentEnum HAlignment;
  this->get_HeaderHAlignment((Owc10_xp::PivotHAlignmentEnum*)&HAlignment);
  return HAlignment;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::set_HeaderHAlignment(Owc10_xp::PivotHAlignmentEnum HAlignment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderHAlignment"), DISPID(1610743826));
  TAutoArgs<1> _args;
  _args[1] = (int)HAlignment /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::get_HeaderHeight(long* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderHeight"), DISPID(DISPID_UNKNOWN/*[1610743828]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotViewDispT<T>::get_HeaderHeight(void)
{
  long Height;
  this->get_HeaderHeight((long*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::get_FieldLabelFont(Owc10_xp::PivotFont** Font/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FieldLabelFont"), DISPID(DISPID_UNKNOWN/*[1610743829]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotFont**)Font /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotFont* __fastcall
PivotViewDispT<T>::get_FieldLabelFont(void)
{
  Owc10_xp::PivotFont* Font;
  this->get_FieldLabelFont((Owc10_xp::PivotFont**)&Font);
  return Font;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::get_FieldLabelForeColor(VARIANT* Color/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FieldLabelForeColor"), DISPID(DISPID_UNKNOWN/*[1610743830]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Color /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PivotViewDispT<T>::get_FieldLabelForeColor(void)
{
  VARIANT Color;
  this->get_FieldLabelForeColor((VARIANT*)&Color);
  return Color;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::set_FieldLabelForeColor(VARIANT Color/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FieldLabelForeColor"), DISPID(1610743830));
  TAutoArgs<1> _args;
  _args[1] = Color /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::get_FieldLabelBackColor(VARIANT* Color/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FieldLabelBackColor"), DISPID(DISPID_UNKNOWN/*[1610743832]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Color /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PivotViewDispT<T>::get_FieldLabelBackColor(void)
{
  VARIANT Color;
  this->get_FieldLabelBackColor((VARIANT*)&Color);
  return Color;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::set_FieldLabelBackColor(VARIANT Color/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FieldLabelBackColor"), DISPID(1610743832));
  TAutoArgs<1> _args;
  _args[1] = Color /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::get_FieldLabelHeight(long* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FieldLabelHeight"), DISPID(DISPID_UNKNOWN/*[1610743834]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotViewDispT<T>::get_FieldLabelHeight(void)
{
  long Height;
  this->get_FieldLabelHeight((long*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::get_DetailRowHeight(long* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DetailRowHeight"), DISPID(DISPID_UNKNOWN/*[1610743835]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotViewDispT<T>::get_DetailRowHeight(void)
{
  long Height;
  this->get_DetailRowHeight((long*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::set_DetailRowHeight(long Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DetailRowHeight"), DISPID(1610743835));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::get_DetailSortOrder(VARIANT* DetailSortOrder/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DetailSortOrder"), DISPID(DISPID_UNKNOWN/*[1610743837]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DetailSortOrder /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PivotViewDispT<T>::get_DetailSortOrder(void)
{
  VARIANT DetailSortOrder;
  this->get_DetailSortOrder((VARIANT*)&DetailSortOrder);
  return DetailSortOrder;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::set_DetailSortOrder(VARIANT DetailSortOrder/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DetailSortOrder"), DISPID(1610743837));
  TAutoArgs<1> _args;
  _args[1] = DetailSortOrder /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::get_TotalOrientation(Owc10_xp::PivotViewTotalOrientationEnum* TotalOrientation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TotalOrientation"), DISPID(DISPID_UNKNOWN/*[1610743839]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)TotalOrientation /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotViewTotalOrientationEnum __fastcall
PivotViewDispT<T>::get_TotalOrientation(void)
{
  Owc10_xp::PivotViewTotalOrientationEnum TotalOrientation;
  this->get_TotalOrientation((Owc10_xp::PivotViewTotalOrientationEnum*)&TotalOrientation);
  return TotalOrientation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::set_TotalOrientation(Owc10_xp::PivotViewTotalOrientationEnum TotalOrientation/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TotalOrientation"), DISPID(1610743839));
  TAutoArgs<1> _args;
  _args[1] = (int)TotalOrientation /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::AddTotal(BSTR Name/*[in]*/, Owc10_xp::PivotField* Field/*[in]*/, 
                            Owc10_xp::PivotTotalFunctionEnum Function/*[in]*/, 
                            Owc10_xp::PivotTotal** Total/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTotal"), DISPID(DISPID_UNKNOWN/*[1610743841]*/));
  TAutoArgs<3> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  _args[2] = (LPDISPATCH)(Owc10_xp::PivotField*)Field /*[VT_USERDEFINED:1]*/;
  _args[3] = (int)Function /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotTotal**)Total /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::PivotTotal* __fastcall
PivotViewDispT<T>::AddTotal(BSTR Name/*[in]*/, Owc10_xp::PivotField* Field/*[in]*/, 
                            Owc10_xp::PivotTotalFunctionEnum Function/*[in]*/)
{
  Owc10_xp::PivotTotal* Total;
  this->AddTotal(Name, Field, Function, (Owc10_xp::PivotTotal**)&Total);
  return Total;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::DeleteTotal(VARIANT Total/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeleteTotal"), DISPID(DISPID_UNKNOWN/*[1610743842]*/));
  TAutoArgs<1> _args;
  _args[1] = Total /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::AddFieldSet(BSTR Name/*[in]*/, Owc10_xp::PivotFieldSet** FieldSet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddFieldSet"), DISPID(DISPID_UNKNOWN/*[1610743843]*/));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotFieldSet**)FieldSet /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::PivotFieldSet* __fastcall
PivotViewDispT<T>::AddFieldSet(BSTR Name/*[in]*/)
{
  Owc10_xp::PivotFieldSet* FieldSet;
  this->AddFieldSet(Name, (Owc10_xp::PivotFieldSet**)&FieldSet);
  return FieldSet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::DeleteFieldSet(VARIANT FieldSet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeleteFieldSet"), DISPID(DISPID_UNKNOWN/*[1610743844]*/));
  TAutoArgs<1> _args;
  _args[1] = FieldSet /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::AutoLayout(long MaxDataFields/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoLayout"), DISPID(DISPID_UNKNOWN/*[1610743845]*/));
  TAutoArgs<1> _args;
  _args[1] = MaxDataFields /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::get_TotalAllMembers(VARIANT_BOOL* TotalAllMembers/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TotalAllMembers"), DISPID(DISPID_UNKNOWN/*[1610743846]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(TotalAllMembers /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PivotViewDispT<T>::get_TotalAllMembers(void)
{
  VARIANT_BOOL TotalAllMembers;
  this->get_TotalAllMembers((VARIANT_BOOL*)&TotalAllMembers);
  return TotalAllMembers;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::set_TotalAllMembers(VARIANT_BOOL TotalAllMembers/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TotalAllMembers"), DISPID(1610743846));
  TAutoArgs<1> _args;
  _args[1] = TotalAllMembers /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::get_DetailMaxWidth(long* DetailMaxWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DetailMaxWidth"), DISPID(DISPID_UNKNOWN/*[1610743848]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DetailMaxWidth /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotViewDispT<T>::get_DetailMaxWidth(void)
{
  long DetailMaxWidth;
  this->get_DetailMaxWidth((long*)&DetailMaxWidth);
  return DetailMaxWidth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::set_DetailMaxWidth(long DetailMaxWidth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DetailMaxWidth"), DISPID(1610743848));
  TAutoArgs<1> _args;
  _args[1] = DetailMaxWidth /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::get_DetailMaxHeight(long* DetailMaxHeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DetailMaxHeight"), DISPID(DISPID_UNKNOWN/*[1610743850]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DetailMaxHeight /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotViewDispT<T>::get_DetailMaxHeight(void)
{
  long DetailMaxHeight;
  this->get_DetailMaxHeight((long*)&DetailMaxHeight);
  return DetailMaxHeight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::set_DetailMaxHeight(long DetailMaxHeight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DetailMaxHeight"), DISPID(1610743850));
  TAutoArgs<1> _args;
  _args[1] = DetailMaxHeight /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::get_DetailAutoFit(VARIANT_BOOL* DetailAutoFit/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DetailAutoFit"), DISPID(DISPID_UNKNOWN/*[1610743852]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DetailAutoFit /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PivotViewDispT<T>::get_DetailAutoFit(void)
{
  VARIANT_BOOL DetailAutoFit;
  this->get_DetailAutoFit((VARIANT_BOOL*)&DetailAutoFit);
  return DetailAutoFit;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::set_DetailAutoFit(VARIANT_BOOL DetailAutoFit/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DetailAutoFit"), DISPID(1610743852));
  TAutoArgs<1> _args;
  _args[1] = DetailAutoFit /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::get_IsFiltered(VARIANT_BOOL* IsFiltered/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsFiltered"), DISPID(DISPID_UNKNOWN/*[1610743854]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(IsFiltered /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PivotViewDispT<T>::get_IsFiltered(void)
{
  VARIANT_BOOL IsFiltered;
  this->get_IsFiltered((VARIANT_BOOL*)&IsFiltered);
  return IsFiltered;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::set_IsFiltered(VARIANT_BOOL IsFiltered/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsFiltered"), DISPID(1610743854));
  TAutoArgs<1> _args;
  _args[1] = IsFiltered /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::get_DisplayCalculatedMembers(VARIANT_BOOL* DisplayCalculatedMembers/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayCalculatedMembers"), DISPID(DISPID_UNKNOWN/*[1610743856]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DisplayCalculatedMembers /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PivotViewDispT<T>::get_DisplayCalculatedMembers(void)
{
  VARIANT_BOOL DisplayCalculatedMembers;
  this->get_DisplayCalculatedMembers((VARIANT_BOOL*)&DisplayCalculatedMembers);
  return DisplayCalculatedMembers;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::set_DisplayCalculatedMembers(VARIANT_BOOL DisplayCalculatedMembers/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayCalculatedMembers"), DISPID(1610743856));
  TAutoArgs<1> _args;
  _args[1] = DisplayCalculatedMembers /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::get_UseProviderFormatting(VARIANT_BOOL* UseProviderFormatting/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UseProviderFormatting"), DISPID(DISPID_UNKNOWN/*[1610743858]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(UseProviderFormatting /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PivotViewDispT<T>::get_UseProviderFormatting(void)
{
  VARIANT_BOOL UseProviderFormatting;
  this->get_UseProviderFormatting((VARIANT_BOOL*)&UseProviderFormatting);
  return UseProviderFormatting;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::set_UseProviderFormatting(VARIANT_BOOL UseProviderFormatting/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UseProviderFormatting"), DISPID(1610743858));
  TAutoArgs<1> _args;
  _args[1] = UseProviderFormatting /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::get_ExpandDetails(Owc10_xp::PivotTableExpandEnum* ExpandDetails/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExpandDetails"), DISPID(DISPID_UNKNOWN/*[1610743860]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ExpandDetails /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotTableExpandEnum __fastcall
PivotViewDispT<T>::get_ExpandDetails(void)
{
  Owc10_xp::PivotTableExpandEnum ExpandDetails;
  this->get_ExpandDetails((Owc10_xp::PivotTableExpandEnum*)&ExpandDetails);
  return ExpandDetails;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::set_ExpandDetails(Owc10_xp::PivotTableExpandEnum ExpandDetails/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExpandDetails"), DISPID(1610743860));
  TAutoArgs<1> _args;
  _args[1] = (int)ExpandDetails /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::get_Control(Owc10_xp::IPivotControl** Control/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Control"), DISPID(DISPID_UNKNOWN/*[1610743862]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::IPivotControl**)Control /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::IPivotControl* __fastcall
PivotViewDispT<T>::get_Control(void)
{
  Owc10_xp::IPivotControl* Control;
  this->get_Control((Owc10_xp::IPivotControl**)&Control);
  return Control;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::AddCalculatedTotal(BSTR Name/*[in]*/, BSTR Caption/*[in]*/, 
                                      BSTR Expression/*[in]*/, long SolveOrder/*[in,def,opt]*/, 
                                      Owc10_xp::PivotTotal** Total/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddCalculatedTotal"), DISPID(DISPID_UNKNOWN/*[1610743863]*/));
  TAutoArgs<4> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  _args[2] = Caption /*[VT_BSTR:0]*/;
  _args[3] = Expression /*[VT_BSTR:0]*/;
  _args[4] = SolveOrder /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotTotal**)Total /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::PivotTotal* __fastcall
PivotViewDispT<T>::AddCalculatedTotal(BSTR Name/*[in]*/, BSTR Caption/*[in]*/, 
                                      BSTR Expression/*[in]*/, long SolveOrder/*[in,def,opt]*/)
{
  Owc10_xp::PivotTotal* Total;
  this->AddCalculatedTotal(Name, Caption, Expression, SolveOrder, (Owc10_xp::PivotTotal**)&Total);
  return Total;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::get_PageAxis(Owc10_xp::PivotAxis** Axis/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PageAxis"), DISPID(DISPID_UNKNOWN/*[1610743864]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotAxis**)Axis /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotAxis* __fastcall
PivotViewDispT<T>::get_PageAxis(void)
{
  Owc10_xp::PivotAxis* Axis;
  this->get_PageAxis((Owc10_xp::PivotAxis**)&Axis);
  return Axis;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::get_ExpandMembers(Owc10_xp::PivotTableExpandEnum* ExpandDetails/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExpandMembers"), DISPID(DISPID_UNKNOWN/*[1610743865]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ExpandDetails /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotTableExpandEnum __fastcall
PivotViewDispT<T>::get_ExpandMembers(void)
{
  Owc10_xp::PivotTableExpandEnum ExpandDetails;
  this->get_ExpandMembers((Owc10_xp::PivotTableExpandEnum*)&ExpandDetails);
  return ExpandDetails;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::set_ExpandMembers(Owc10_xp::PivotTableExpandEnum ExpandDetails/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExpandMembers"), DISPID(1610743865));
  TAutoArgs<1> _args;
  _args[1] = (int)ExpandDetails /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::get_AllowEdits(VARIANT_BOOL* AllowEdits/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowEdits"), DISPID(DISPID_UNKNOWN/*[1610743867]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AllowEdits /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PivotViewDispT<T>::get_AllowEdits(void)
{
  VARIANT_BOOL AllowEdits;
  this->get_AllowEdits((VARIANT_BOOL*)&AllowEdits);
  return AllowEdits;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::set_AllowEdits(VARIANT_BOOL AllowEdits/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowEdits"), DISPID(1610743867));
  TAutoArgs<1> _args;
  _args[1] = AllowEdits /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::get_AllowAdditions(VARIANT_BOOL* AllowAdditions/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowAdditions"), DISPID(DISPID_UNKNOWN/*[1610743869]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AllowAdditions /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PivotViewDispT<T>::get_AllowAdditions(void)
{
  VARIANT_BOOL AllowAdditions;
  this->get_AllowAdditions((VARIANT_BOOL*)&AllowAdditions);
  return AllowAdditions;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::set_AllowAdditions(VARIANT_BOOL AllowAdditions/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowAdditions"), DISPID(1610743869));
  TAutoArgs<1> _args;
  _args[1] = AllowAdditions /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::get_AllowDeletions(VARIANT_BOOL* AllowDeletions/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowDeletions"), DISPID(DISPID_UNKNOWN/*[1610743871]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AllowDeletions /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PivotViewDispT<T>::get_AllowDeletions(void)
{
  VARIANT_BOOL AllowDeletions;
  this->get_AllowDeletions((VARIANT_BOOL*)&AllowDeletions);
  return AllowDeletions;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::set_AllowDeletions(VARIANT_BOOL AllowDeletions/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowDeletions"), DISPID(1610743871));
  TAutoArgs<1> _args;
  _args[1] = AllowDeletions /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::get_PropertyCaptionFont(Owc10_xp::PivotFont** Font/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PropertyCaptionFont"), DISPID(DISPID_UNKNOWN/*[1610743873]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotFont**)Font /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotFont* __fastcall
PivotViewDispT<T>::get_PropertyCaptionFont(void)
{
  Owc10_xp::PivotFont* Font;
  this->get_PropertyCaptionFont((Owc10_xp::PivotFont**)&Font);
  return Font;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::get_PropertyValueFont(Owc10_xp::PivotFont** Font/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PropertyValueFont"), DISPID(DISPID_UNKNOWN/*[1610743874]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotFont**)Font /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotFont* __fastcall
PivotViewDispT<T>::get_PropertyValueFont(void)
{
  Owc10_xp::PivotFont* Font;
  this->get_PropertyValueFont((Owc10_xp::PivotFont**)&Font);
  return Font;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::get_PropertyCaptionHAlignment(Owc10_xp::PivotHAlignmentEnum* HAlignment/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PropertyCaptionHAlignment"), DISPID(DISPID_UNKNOWN/*[1610743875]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)HAlignment /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotHAlignmentEnum __fastcall
PivotViewDispT<T>::get_PropertyCaptionHAlignment(void)
{
  Owc10_xp::PivotHAlignmentEnum HAlignment;
  this->get_PropertyCaptionHAlignment((Owc10_xp::PivotHAlignmentEnum*)&HAlignment);
  return HAlignment;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::set_PropertyCaptionHAlignment(Owc10_xp::PivotHAlignmentEnum HAlignment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PropertyCaptionHAlignment"), DISPID(1610743875));
  TAutoArgs<1> _args;
  _args[1] = (int)HAlignment /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::get_PropertyValueHAlignment(Owc10_xp::PivotHAlignmentEnum* HAlignment/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PropertyValueHAlignment"), DISPID(DISPID_UNKNOWN/*[1610743877]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)HAlignment /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotHAlignmentEnum __fastcall
PivotViewDispT<T>::get_PropertyValueHAlignment(void)
{
  Owc10_xp::PivotHAlignmentEnum HAlignment;
  this->get_PropertyValueHAlignment((Owc10_xp::PivotHAlignmentEnum*)&HAlignment);
  return HAlignment;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::set_PropertyValueHAlignment(Owc10_xp::PivotHAlignmentEnum HAlignment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PropertyValueHAlignment"), DISPID(1610743877));
  TAutoArgs<1> _args;
  _args[1] = (int)HAlignment /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::get_DisplayCellColor(VARIANT_BOOL* DisplayCellColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayCellColor"), DISPID(DISPID_UNKNOWN/*[1610743879]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DisplayCellColor /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PivotViewDispT<T>::get_DisplayCellColor(void)
{
  VARIANT_BOOL DisplayCellColor;
  this->get_DisplayCellColor((VARIANT_BOOL*)&DisplayCellColor);
  return DisplayCellColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::set_DisplayCellColor(VARIANT_BOOL DisplayCellColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayCellColor"), DISPID(1610743879));
  TAutoArgs<1> _args;
  _args[1] = DisplayCellColor /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::get_FilterCrossJoins(VARIANT_BOOL* FilterCrossJoins/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FilterCrossJoins"), DISPID(DISPID_UNKNOWN/*[1610743881]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FilterCrossJoins /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PivotViewDispT<T>::get_FilterCrossJoins(void)
{
  VARIANT_BOOL FilterCrossJoins;
  this->get_FilterCrossJoins((VARIANT_BOOL*)&FilterCrossJoins);
  return FilterCrossJoins;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotViewDispT<T>::set_FilterCrossJoins(VARIANT_BOOL FilterCrossJoins/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FilterCrossJoins"), DISPID(1610743881));
  TAutoArgs<1> _args;
  _args[1] = FilterCrossJoins /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  PivotFieldSets
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AAD-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldSetsDispT<T>::get_Item(VARIANT Index/*[in]*/, 
                                 Owc10_xp::PivotFieldSet** FieldSet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotFieldSet**)FieldSet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotFieldSet* __fastcall
PivotFieldSetsDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Owc10_xp::PivotFieldSet* FieldSet;
  this->get_Item(Index, (Owc10_xp::PivotFieldSet**)&FieldSet);
  return FieldSet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldSetsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotFieldSetsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldSetsDispT<T>::get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
PivotFieldSetsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunk;
  this->get__NewEnum((LPUNKNOWN*)&ppunk);
  return ppunk;
}

// *********************************************************************//
// DispIntf:  PivotFieldSet
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AAE-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldSetDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(6023));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PivotFieldSetDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldSetDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(6023));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldSetDispT<T>::get_Caption(BSTR* Caption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Caption /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PivotFieldSetDispT<T>::get_Caption(void)
{
  BSTR Caption;
  this->get_Caption((BSTR*)&Caption);
  return Caption;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldSetDispT<T>::set_Caption(BSTR Caption/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(1610743810));
  TAutoArgs<1> _args;
  _args[1] = Caption /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldSetDispT<T>::get_Fields(Owc10_xp::PivotFields** Fields/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Fields"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotFields**)Fields /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotFields* __fastcall
PivotFieldSetDispT<T>::get_Fields(void)
{
  Owc10_xp::PivotFields* Fields;
  this->get_Fields((Owc10_xp::PivotFields**)&Fields);
  return Fields;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldSetDispT<T>::get_Members(Owc10_xp::PivotMembers** Members/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Members"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotMembers**)Members /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotMembers* __fastcall
PivotFieldSetDispT<T>::get_Members(void)
{
  Owc10_xp::PivotMembers* Members;
  this->get_Members((Owc10_xp::PivotMembers**)&Members);
  return Members;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldSetDispT<T>::get_Orientation(Owc10_xp::PivotFieldSetOrientationEnum* Orientation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Orientation"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Orientation /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotFieldSetOrientationEnum __fastcall
PivotFieldSetDispT<T>::get_Orientation(void)
{
  Owc10_xp::PivotFieldSetOrientationEnum Orientation;
  this->get_Orientation((Owc10_xp::PivotFieldSetOrientationEnum*)&Orientation);
  return Orientation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldSetDispT<T>::get_Type(Owc10_xp::PivotFieldSetTypeEnum* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotFieldSetTypeEnum __fastcall
PivotFieldSetDispT<T>::get_Type(void)
{
  Owc10_xp::PivotFieldSetTypeEnum Type;
  this->get_Type((Owc10_xp::PivotFieldSetTypeEnum*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldSetDispT<T>::AddCalculatedField(BSTR Name/*[in]*/, BSTR Caption/*[in]*/, 
                                          BSTR DataField/*[in]*/, BSTR Expression/*[in]*/, 
                                          Owc10_xp::PivotField** Field/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddCalculatedField"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<4> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  _args[2] = Caption /*[VT_BSTR:0]*/;
  _args[3] = DataField /*[VT_BSTR:0]*/;
  _args[4] = Expression /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotField**)Field /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::PivotField* __fastcall
PivotFieldSetDispT<T>::AddCalculatedField(BSTR Name/*[in]*/, BSTR Caption/*[in]*/, 
                                          BSTR DataField/*[in]*/, BSTR Expression/*[in]*/)
{
  Owc10_xp::PivotField* Field;
  this->AddCalculatedField(Name, Caption, DataField, Expression, (Owc10_xp::PivotField**)&Field);
  return Field;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldSetDispT<T>::get_BoundField(Owc10_xp::PivotField** Field/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BoundField"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotField**)Field /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotField* __fastcall
PivotFieldSetDispT<T>::get_BoundField(void)
{
  Owc10_xp::PivotField* Field;
  this->get_BoundField((Owc10_xp::PivotField**)&Field);
  return Field;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldSetDispT<T>::get_UniqueName(BSTR* UniqueName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UniqueName"), DISPID(6022));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(UniqueName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PivotFieldSetDispT<T>::get_UniqueName(void)
{
  BSTR UniqueName;
  this->get_UniqueName((BSTR*)&UniqueName);
  return UniqueName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldSetDispT<T>::get_Width(long* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(DISPID_UNKNOWN/*[1610743819]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotFieldSetDispT<T>::get_Width(void)
{
  long Width;
  this->get_Width((long*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldSetDispT<T>::set_Width(long Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1610743819));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldSetDispT<T>::get_DefaultMember(Owc10_xp::PivotMember** DefaultMember/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultMember"), DISPID(DISPID_UNKNOWN/*[1610743821]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotMember**)DefaultMember /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotMember* __fastcall
PivotFieldSetDispT<T>::get_DefaultMember(void)
{
  Owc10_xp::PivotMember* DefaultMember;
  this->get_DefaultMember((Owc10_xp::PivotMember**)&DefaultMember);
  return DefaultMember;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldSetDispT<T>::get_Member(Owc10_xp::PivotMember** Member/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Member"), DISPID(DISPID_UNKNOWN/*[1610743822]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotMember**)Member /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotMember* __fastcall
PivotFieldSetDispT<T>::get_Member(void)
{
  Owc10_xp::PivotMember* Member;
  this->get_Member((Owc10_xp::PivotMember**)&Member);
  return Member;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldSetDispT<T>::get_AllMember(Owc10_xp::PivotMember** AllMember/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllMember"), DISPID(DISPID_UNKNOWN/*[1610743823]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotMember**)AllMember /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotMember* __fastcall
PivotFieldSetDispT<T>::get_AllMember(void)
{
  Owc10_xp::PivotMember* AllMember;
  this->get_AllMember((Owc10_xp::PivotMember**)&AllMember);
  return AllMember;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldSetDispT<T>::get_CompareOrderedMembersBy(Owc10_xp::PivotMembersCompareByEnum* CompareOrderedMembersBy/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CompareOrderedMembersBy"), DISPID(DISPID_UNKNOWN/*[1610743824]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)CompareOrderedMembersBy /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotMembersCompareByEnum __fastcall
PivotFieldSetDispT<T>::get_CompareOrderedMembersBy(void)
{
  Owc10_xp::PivotMembersCompareByEnum CompareOrderedMembersBy;
  this->get_CompareOrderedMembersBy((Owc10_xp::PivotMembersCompareByEnum*)&CompareOrderedMembersBy);
  return CompareOrderedMembersBy;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldSetDispT<T>::set_CompareOrderedMembersBy(Owc10_xp::PivotMembersCompareByEnum CompareOrderedMembersBy/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CompareOrderedMembersBy"), DISPID(1610743824));
  TAutoArgs<1> _args;
  _args[1] = (int)CompareOrderedMembersBy /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldSetDispT<T>::get_View(Owc10_xp::PivotView** View/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("View"), DISPID(DISPID_UNKNOWN/*[1610743826]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotView**)View /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotView* __fastcall
PivotFieldSetDispT<T>::get_View(void)
{
  Owc10_xp::PivotView* View;
  this->get_View((Owc10_xp::PivotView**)&View);
  return View;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldSetDispT<T>::get_CreateFilterUpdate(Owc10_xp::PivotFilterUpdate** FilterUpdate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateFilterUpdate"), DISPID(DISPID_UNKNOWN/*[1610743827]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotFilterUpdate**)FilterUpdate /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotFilterUpdate* __fastcall
PivotFieldSetDispT<T>::get_CreateFilterUpdate(void)
{
  Owc10_xp::PivotFilterUpdate* FilterUpdate;
  this->get_CreateFilterUpdate((Owc10_xp::PivotFilterUpdate**)&FilterUpdate);
  return FilterUpdate;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldSetDispT<T>::get_AllowMultiFilter(VARIANT_BOOL* Allow/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowMultiFilter"), DISPID(DISPID_UNKNOWN/*[1610743828]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Allow /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PivotFieldSetDispT<T>::get_AllowMultiFilter(void)
{
  VARIANT_BOOL Allow;
  this->get_AllowMultiFilter((VARIANT_BOOL*)&Allow);
  return Allow;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldSetDispT<T>::set_AllowMultiFilter(VARIANT_BOOL Allow/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowMultiFilter"), DISPID(1610743828));
  TAutoArgs<1> _args;
  _args[1] = Allow /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldSetDispT<T>::get_FilterCaption(BSTR* FilterCaption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FilterCaption"), DISPID(DISPID_UNKNOWN/*[1610743830]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FilterCaption /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PivotFieldSetDispT<T>::get_FilterCaption(void)
{
  BSTR FilterCaption;
  this->get_FilterCaption((BSTR*)&FilterCaption);
  return FilterCaption;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldSetDispT<T>::get_AllIncludeExclude(Owc10_xp::PivotFieldSetAllIncludeExcludeEnum* AllIncludeExclude/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllIncludeExclude"), DISPID(DISPID_UNKNOWN/*[1610743831]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AllIncludeExclude /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotFieldSetAllIncludeExcludeEnum __fastcall
PivotFieldSetDispT<T>::get_AllIncludeExclude(void)
{
  Owc10_xp::PivotFieldSetAllIncludeExcludeEnum AllIncludeExclude;
  this->get_AllIncludeExclude((Owc10_xp::PivotFieldSetAllIncludeExcludeEnum*)&AllIncludeExclude);
  return AllIncludeExclude;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldSetDispT<T>::set_AllIncludeExclude(Owc10_xp::PivotFieldSetAllIncludeExcludeEnum AllIncludeExclude/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllIncludeExclude"), DISPID(1610743831));
  TAutoArgs<1> _args;
  _args[1] = (int)AllIncludeExclude /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldSetDispT<T>::AddCustomGroupField(BSTR Name/*[in,def,opt]*/, BSTR Caption/*[in,def,opt]*/, 
                                           VARIANT Before/*[in,def,opt]*/, 
                                           Owc10_xp::PivotField** Field/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddCustomGroupField"), DISPID(DISPID_UNKNOWN/*[1610743833]*/));
  TAutoArgs<3> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  _args[2] = Caption /*[VT_BSTR:0]*/;
  _args[3] = Before /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotField**)Field /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::PivotField* __fastcall
PivotFieldSetDispT<T>::AddCustomGroupField(BSTR Name/*[in,def,opt]*/, BSTR Caption/*[in,def,opt]*/, 
                                           VARIANT Before/*[in,def,opt]*/)
{
  Owc10_xp::PivotField* Field;
  this->AddCustomGroupField(Name, Caption, Before, (Owc10_xp::PivotField**)&Field);
  return Field;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldSetDispT<T>::DeleteField(VARIANT Field/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeleteField"), DISPID(DISPID_UNKNOWN/*[1610743834]*/));
  TAutoArgs<1> _args;
  _args[1] = Field /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldSetDispT<T>::get_CompareMemberCaptionsBy(Owc10_xp::PivotMembersCompareByEnum* CompareMemberCaptionsBy/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CompareMemberCaptionsBy"), DISPID(DISPID_UNKNOWN/*[1610743835]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)CompareMemberCaptionsBy /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotMembersCompareByEnum __fastcall
PivotFieldSetDispT<T>::get_CompareMemberCaptionsBy(void)
{
  Owc10_xp::PivotMembersCompareByEnum CompareMemberCaptionsBy;
  this->get_CompareMemberCaptionsBy((Owc10_xp::PivotMembersCompareByEnum*)&CompareMemberCaptionsBy);
  return CompareMemberCaptionsBy;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldSetDispT<T>::set_CompareMemberCaptionsBy(Owc10_xp::PivotMembersCompareByEnum CompareMemberCaptionsBy/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CompareMemberCaptionsBy"), DISPID(1610743835));
  TAutoArgs<1> _args;
  _args[1] = (int)CompareMemberCaptionsBy /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldSetDispT<T>::get_DisplayInFieldList(VARIANT_BOOL* DisplayInFieldList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayInFieldList"), DISPID(DISPID_UNKNOWN/*[1610743837]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DisplayInFieldList /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PivotFieldSetDispT<T>::get_DisplayInFieldList(void)
{
  VARIANT_BOOL DisplayInFieldList;
  this->get_DisplayInFieldList((VARIANT_BOOL*)&DisplayInFieldList);
  return DisplayInFieldList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldSetDispT<T>::set_DisplayInFieldList(VARIANT_BOOL DisplayInFieldList/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayInFieldList"), DISPID(1610743837));
  TAutoArgs<1> _args;
  _args[1] = DisplayInFieldList /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldSetDispT<T>::get_AlwaysIncludeInCube(VARIANT_BOOL* AlwaysInclude/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AlwaysIncludeInCube"), DISPID(DISPID_UNKNOWN/*[1610743839]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AlwaysInclude /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PivotFieldSetDispT<T>::get_AlwaysIncludeInCube(void)
{
  VARIANT_BOOL AlwaysInclude;
  this->get_AlwaysIncludeInCube((VARIANT_BOOL*)&AlwaysInclude);
  return AlwaysInclude;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldSetDispT<T>::set_AlwaysIncludeInCube(VARIANT_BOOL AlwaysInclude/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AlwaysIncludeInCube"), DISPID(1610743839));
  TAutoArgs<1> _args;
  _args[1] = AlwaysInclude /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldSetDispT<T>::get_FindMember(VARIANT NameOrPath/*[in]*/, 
                                      Owc10_xp::PivotMemberFindFormatEnum Format/*[in,def,opt]*/, 
                                      Owc10_xp::PivotMember** Member/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FindMember"), DISPID(DISPID_UNKNOWN/*[1610743841]*/));
  TAutoArgs<2> _args;
  _args[1] = NameOrPath /*[VT_VARIANT:0]*/;
  _args[2] = (int)Format /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotMember**)Member /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotMember* __fastcall
PivotFieldSetDispT<T>::get_FindMember(VARIANT NameOrPath/*[in]*/, 
                                      Owc10_xp::PivotMemberFindFormatEnum Format/*[in,def,opt]*/)
{
  Owc10_xp::PivotMember* Member;
  this->get_FindMember(NameOrPath, Format, (Owc10_xp::PivotMember**)&Member);
  return Member;
}

// *********************************************************************//
// DispIntf:  PivotFields
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B2A-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldsDispT<T>::get_Item(VARIANT Index/*[in]*/, Owc10_xp::PivotField** Field/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotField**)Field /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotField* __fastcall
PivotFieldsDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Owc10_xp::PivotField* Field;
  this->get_Item(Index, (Owc10_xp::PivotField**)&Field);
  return Field;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotFieldsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldsDispT<T>::get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
PivotFieldsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunk;
  this->get__NewEnum((LPUNKNOWN*)&ppunk);
  return ppunk;
}

// *********************************************************************//
// DispIntf:  PivotField
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B2C-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_Caption(BSTR* Caption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Caption /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PivotFieldDispT<T>::get_Caption(void)
{
  BSTR Caption;
  this->get_Caption((BSTR*)&Caption);
  return Caption;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::set_Caption(BSTR Caption/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(1610743808));
  TAutoArgs<1> _args;
  _args[1] = Caption /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_BaseName(BSTR* BaseName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaseName"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BaseName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PivotFieldDispT<T>::get_BaseName(void)
{
  BSTR BaseName;
  this->get_BaseName((BSTR*)&BaseName);
  return BaseName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_DataType(Adodb_xp::DataTypeEnum* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataType"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Adodb_xp::DataTypeEnum __fastcall
PivotFieldDispT<T>::get_DataType(void)
{
  Adodb_xp::DataTypeEnum Type;
  this->get_DataType((Adodb_xp::DataTypeEnum*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(6023));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PivotFieldDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(6023));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_DetailWidth(long* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DetailWidth"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotFieldDispT<T>::get_DetailWidth(void)
{
  long Width;
  this->get_DetailWidth((long*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::set_DetailWidth(long Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DetailWidth"), DISPID(1610743814));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_GroupedWidth(long* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupedWidth"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotFieldDispT<T>::get_GroupedWidth(void)
{
  long Width;
  this->get_GroupedWidth((long*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::set_GroupedWidth(long Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupedWidth"), DISPID(1610743816));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_Subtotals(long Subtotals/*[in]*/, VARIANT_BOOL* Display/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Subtotals"), DISPID(DISPID_UNKNOWN/*[1610743818]*/));
  TAutoArgs<1> _args;
  _args[1] = Subtotals /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Display /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PivotFieldDispT<T>::get_Subtotals(long Subtotals/*[in]*/)
{
  VARIANT_BOOL Display;
  this->get_Subtotals(Subtotals, (VARIANT_BOOL*)&Display);
  return Display;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::set_Subtotals(long Subtotals/*[in]*/, VARIANT_BOOL Display/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Subtotals"), DISPID(1610743818));
  TAutoArgs<2> _args;
  _args[1] = Subtotals /*[VT_I4:0]*/;
  _args[2] = Display /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_DetailFont(Owc10_xp::PivotFont** Font/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DetailFont"), DISPID(DISPID_UNKNOWN/*[1610743820]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotFont**)Font /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotFont* __fastcall
PivotFieldDispT<T>::get_DetailFont(void)
{
  Owc10_xp::PivotFont* Font;
  this->get_DetailFont((Owc10_xp::PivotFont**)&Font);
  return Font;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_DetailForeColor(VARIANT* Color/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DetailForeColor"), DISPID(DISPID_UNKNOWN/*[1610743821]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Color /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PivotFieldDispT<T>::get_DetailForeColor(void)
{
  VARIANT Color;
  this->get_DetailForeColor((VARIANT*)&Color);
  return Color;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::set_DetailForeColor(VARIANT Color/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DetailForeColor"), DISPID(1610743821));
  TAutoArgs<1> _args;
  _args[1] = Color /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_DetailBackColor(VARIANT* Color/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DetailBackColor"), DISPID(DISPID_UNKNOWN/*[1610743823]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Color /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PivotFieldDispT<T>::get_DetailBackColor(void)
{
  VARIANT Color;
  this->get_DetailBackColor((VARIANT*)&Color);
  return Color;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::set_DetailBackColor(VARIANT Color/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DetailBackColor"), DISPID(1610743823));
  TAutoArgs<1> _args;
  _args[1] = Color /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_DetailHAlignment(Owc10_xp::PivotHAlignmentEnum* HAlignment/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DetailHAlignment"), DISPID(DISPID_UNKNOWN/*[1610743825]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)HAlignment /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotHAlignmentEnum __fastcall
PivotFieldDispT<T>::get_DetailHAlignment(void)
{
  Owc10_xp::PivotHAlignmentEnum HAlignment;
  this->get_DetailHAlignment((Owc10_xp::PivotHAlignmentEnum*)&HAlignment);
  return HAlignment;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::set_DetailHAlignment(Owc10_xp::PivotHAlignmentEnum HAlignment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DetailHAlignment"), DISPID(1610743825));
  TAutoArgs<1> _args;
  _args[1] = (int)HAlignment /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_SubtotalFont(Owc10_xp::PivotFont** Font/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SubtotalFont"), DISPID(DISPID_UNKNOWN/*[1610743827]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotFont**)Font /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotFont* __fastcall
PivotFieldDispT<T>::get_SubtotalFont(void)
{
  Owc10_xp::PivotFont* Font;
  this->get_SubtotalFont((Owc10_xp::PivotFont**)&Font);
  return Font;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_SubtotalForeColor(VARIANT* Color/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SubtotalForeColor"), DISPID(DISPID_UNKNOWN/*[1610743828]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Color /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PivotFieldDispT<T>::get_SubtotalForeColor(void)
{
  VARIANT Color;
  this->get_SubtotalForeColor((VARIANT*)&Color);
  return Color;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::set_SubtotalForeColor(VARIANT Color/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SubtotalForeColor"), DISPID(1610743828));
  TAutoArgs<1> _args;
  _args[1] = Color /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_SubtotalBackColor(VARIANT* Color/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SubtotalBackColor"), DISPID(DISPID_UNKNOWN/*[1610743830]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Color /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PivotFieldDispT<T>::get_SubtotalBackColor(void)
{
  VARIANT Color;
  this->get_SubtotalBackColor((VARIANT*)&Color);
  return Color;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::set_SubtotalBackColor(VARIANT Color/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SubtotalBackColor"), DISPID(1610743830));
  TAutoArgs<1> _args;
  _args[1] = Color /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_GroupOn(Owc10_xp::PivotFieldGroupOnEnum* GroupOn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupOn"), DISPID(DISPID_UNKNOWN/*[1610743832]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)GroupOn /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotFieldGroupOnEnum __fastcall
PivotFieldDispT<T>::get_GroupOn(void)
{
  Owc10_xp::PivotFieldGroupOnEnum GroupOn;
  this->get_GroupOn((Owc10_xp::PivotFieldGroupOnEnum*)&GroupOn);
  return GroupOn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::set_GroupOn(Owc10_xp::PivotFieldGroupOnEnum GroupOn/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupOn"), DISPID(1610743832));
  TAutoArgs<1> _args;
  _args[1] = (int)GroupOn /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_GroupInterval(double* GroupInterval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupInterval"), DISPID(DISPID_UNKNOWN/*[1610743834]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(GroupInterval /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
PivotFieldDispT<T>::get_GroupInterval(void)
{
  double GroupInterval;
  this->get_GroupInterval((double*)&GroupInterval);
  return GroupInterval;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::set_GroupInterval(double GroupInterval/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupInterval"), DISPID(1610743834));
  TAutoArgs<1> _args;
  _args[1] = GroupInterval /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_Expression(BSTR* Expression/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Expression"), DISPID(DISPID_UNKNOWN/*[1610743836]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Expression /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PivotFieldDispT<T>::get_Expression(void)
{
  BSTR Expression;
  this->get_Expression((BSTR*)&Expression);
  return Expression;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::set_Expression(BSTR Expression/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Expression"), DISPID(1610743836));
  TAutoArgs<1> _args;
  _args[1] = Expression /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_NumberFormat(BSTR* NumberFormat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumberFormat"), DISPID(DISPID_UNKNOWN/*[1610743838]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(NumberFormat /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PivotFieldDispT<T>::get_NumberFormat(void)
{
  BSTR NumberFormat;
  this->get_NumberFormat((BSTR*)&NumberFormat);
  return NumberFormat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::set_NumberFormat(BSTR NumberFormat/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumberFormat"), DISPID(1610743838));
  TAutoArgs<1> _args;
  _args[1] = NumberFormat /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_DataField(BSTR* DataField/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataField"), DISPID(DISPID_UNKNOWN/*[1610743840]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DataField /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PivotFieldDispT<T>::get_DataField(void)
{
  BSTR DataField;
  this->get_DataField((BSTR*)&DataField);
  return DataField;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_IsIncluded(VARIANT_BOOL* IsIncluded/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsIncluded"), DISPID(DISPID_UNKNOWN/*[1610743841]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(IsIncluded /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PivotFieldDispT<T>::get_IsIncluded(void)
{
  VARIANT_BOOL IsIncluded;
  this->get_IsIncluded((VARIANT_BOOL*)&IsIncluded);
  return IsIncluded;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::set_IsIncluded(VARIANT_BOOL IsIncluded/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsIncluded"), DISPID(1610743841));
  TAutoArgs<1> _args;
  _args[1] = IsIncluded /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_SortDirection(Owc10_xp::PivotFieldSortDirectionEnum* SortDirection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SortDirection"), DISPID(DISPID_UNKNOWN/*[1610743843]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)SortDirection /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotFieldSortDirectionEnum __fastcall
PivotFieldDispT<T>::get_SortDirection(void)
{
  Owc10_xp::PivotFieldSortDirectionEnum SortDirection;
  this->get_SortDirection((Owc10_xp::PivotFieldSortDirectionEnum*)&SortDirection);
  return SortDirection;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::set_SortDirection(Owc10_xp::PivotFieldSortDirectionEnum SortDirection/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SortDirection"), DISPID(1610743843));
  TAutoArgs<1> _args;
  _args[1] = (int)SortDirection /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::set_OrderedMembers(VARIANT OrderedMembers/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OrderedMembers"), DISPID(DISPID_UNKNOWN/*[1610743845]*/));
  TAutoArgs<1> _args;
  _args[1] = OrderedMembers /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_OrderedMembers(VARIANT* OrderedMembers/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OrderedMembers"), DISPID(1610743845));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OrderedMembers /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PivotFieldDispT<T>::get_OrderedMembers(void)
{
  VARIANT OrderedMembers;
  this->get_OrderedMembers((VARIANT*)&OrderedMembers);
  return OrderedMembers;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::set_MemberCaptions(VARIANT MemberCaptions/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MemberCaptions"), DISPID(DISPID_UNKNOWN/*[1610743847]*/));
  TAutoArgs<1> _args;
  _args[1] = MemberCaptions /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_MemberCaptions(VARIANT* MemberCaptions/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MemberCaptions"), DISPID(1610743847));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(MemberCaptions /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PivotFieldDispT<T>::get_MemberCaptions(void)
{
  VARIANT MemberCaptions;
  this->get_MemberCaptions((VARIANT*)&MemberCaptions);
  return MemberCaptions;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_Type(Owc10_xp::PivotFieldTypeEnum* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(DISPID_UNKNOWN/*[1610743849]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotFieldTypeEnum __fastcall
PivotFieldDispT<T>::get_Type(void)
{
  Owc10_xp::PivotFieldTypeEnum Type;
  this->get_Type((Owc10_xp::PivotFieldTypeEnum*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_FilterFunction(Owc10_xp::PivotFieldFilterFunctionEnum* FilterFunction/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FilterFunction"), DISPID(DISPID_UNKNOWN/*[1610743850]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)FilterFunction /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotFieldFilterFunctionEnum __fastcall
PivotFieldDispT<T>::get_FilterFunction(void)
{
  Owc10_xp::PivotFieldFilterFunctionEnum FilterFunction;
  this->get_FilterFunction((Owc10_xp::PivotFieldFilterFunctionEnum*)&FilterFunction);
  return FilterFunction;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::set_FilterFunction(Owc10_xp::PivotFieldFilterFunctionEnum FilterFunction/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FilterFunction"), DISPID(1610743850));
  TAutoArgs<1> _args;
  _args[1] = (int)FilterFunction /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_DetailAutoFit(VARIANT_BOOL* AutoFit/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DetailAutoFit"), DISPID(DISPID_UNKNOWN/*[1610743852]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AutoFit /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PivotFieldDispT<T>::get_DetailAutoFit(void)
{
  VARIANT_BOOL AutoFit;
  this->get_DetailAutoFit((VARIANT_BOOL*)&AutoFit);
  return AutoFit;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::set_DetailAutoFit(VARIANT_BOOL AutoFit/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DetailAutoFit"), DISPID(1610743852));
  TAutoArgs<1> _args;
  _args[1] = AutoFit /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_GroupedAutoFit(VARIANT_BOOL* AutoFit/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupedAutoFit"), DISPID(DISPID_UNKNOWN/*[1610743854]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AutoFit /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PivotFieldDispT<T>::get_GroupedAutoFit(void)
{
  VARIANT_BOOL AutoFit;
  this->get_GroupedAutoFit((VARIANT_BOOL*)&AutoFit);
  return AutoFit;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::set_GroupedAutoFit(VARIANT_BOOL AutoFit/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupedAutoFit"), DISPID(1610743854));
  TAutoArgs<1> _args;
  _args[1] = AutoFit /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_FieldSet(Owc10_xp::PivotFieldSet** FieldSet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FieldSet"), DISPID(DISPID_UNKNOWN/*[1610743856]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotFieldSet**)FieldSet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotFieldSet* __fastcall
PivotFieldDispT<T>::get_FieldSet(void)
{
  Owc10_xp::PivotFieldSet* FieldSet;
  this->get_FieldSet((Owc10_xp::PivotFieldSet**)&FieldSet);
  return FieldSet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_Expanded(VARIANT_BOOL* Expanded/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Expanded"), DISPID(DISPID_UNKNOWN/*[1610743857]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Expanded /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PivotFieldDispT<T>::get_Expanded(void)
{
  VARIANT_BOOL Expanded;
  this->get_Expanded((VARIANT_BOOL*)&Expanded);
  return Expanded;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::set_Expanded(VARIANT_BOOL Expanded/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Expanded"), DISPID(1610743857));
  TAutoArgs<1> _args;
  _args[1] = Expanded /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_SortOn(Owc10_xp::PivotTotal** Total/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SortOn"), DISPID(DISPID_UNKNOWN/*[1610743859]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotTotal**)Total /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotTotal* __fastcall
PivotFieldDispT<T>::get_SortOn(void)
{
  Owc10_xp::PivotTotal* Total;
  this->get_SortOn((Owc10_xp::PivotTotal**)&Total);
  return Total;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::_set_SortOn(Owc10_xp::PivotTotal* Total/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SortOn"), DISPID(1610743859));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::PivotTotal*)Total /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_SortOnScope(VARIANT* Scope/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SortOnScope"), DISPID(DISPID_UNKNOWN/*[1610743861]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Scope /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PivotFieldDispT<T>::get_SortOnScope(void)
{
  VARIANT Scope;
  this->get_SortOnScope((VARIANT*)&Scope);
  return Scope;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::set_SortOnScope(VARIANT Scope/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SortOnScope"), DISPID(1610743861));
  TAutoArgs<1> _args;
  _args[1] = Scope /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_IsHyperlink(VARIANT_BOOL* IsHyperlink/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsHyperlink"), DISPID(DISPID_UNKNOWN/*[1610743863]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(IsHyperlink /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PivotFieldDispT<T>::get_IsHyperlink(void)
{
  VARIANT_BOOL IsHyperlink;
  this->get_IsHyperlink((VARIANT_BOOL*)&IsHyperlink);
  return IsHyperlink;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::set_IsHyperlink(VARIANT_BOOL IsHyperlink/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsHyperlink"), DISPID(1610743863));
  TAutoArgs<1> _args;
  _args[1] = IsHyperlink /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_UniqueName(BSTR* UniqueName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UniqueName"), DISPID(6022));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(UniqueName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PivotFieldDispT<T>::get_UniqueName(void)
{
  BSTR UniqueName;
  this->get_UniqueName((BSTR*)&UniqueName);
  return UniqueName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_GroupStart(VARIANT* GroupStart/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupStart"), DISPID(DISPID_UNKNOWN/*[1610743866]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(GroupStart /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PivotFieldDispT<T>::get_GroupStart(void)
{
  VARIANT GroupStart;
  this->get_GroupStart((VARIANT*)&GroupStart);
  return GroupStart;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::set_GroupStart(VARIANT GroupStart/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupStart"), DISPID(1610743866));
  TAutoArgs<1> _args;
  _args[1] = GroupStart /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_GroupEnd(VARIANT* GroupEnd/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupEnd"), DISPID(DISPID_UNKNOWN/*[1610743868]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(GroupEnd /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PivotFieldDispT<T>::get_GroupEnd(void)
{
  VARIANT GroupEnd;
  this->get_GroupEnd((VARIANT*)&GroupEnd);
  return GroupEnd;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::set_GroupEnd(VARIANT GroupEnd/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupEnd"), DISPID(1610743868));
  TAutoArgs<1> _args;
  _args[1] = GroupEnd /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_IncludedMembers(VARIANT* Members/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncludedMembers"), DISPID(DISPID_UNKNOWN/*[1610743870]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Members /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PivotFieldDispT<T>::get_IncludedMembers(void)
{
  VARIANT Members;
  this->get_IncludedMembers((VARIANT*)&Members);
  return Members;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::set_IncludedMembers(VARIANT Members/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncludedMembers"), DISPID(1610743870));
  TAutoArgs<1> _args;
  _args[1] = Members /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_ExcludedMembers(VARIANT* Members/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExcludedMembers"), DISPID(DISPID_UNKNOWN/*[1610743872]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Members /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PivotFieldDispT<T>::get_ExcludedMembers(void)
{
  VARIANT Members;
  this->get_ExcludedMembers((VARIANT*)&Members);
  return Members;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::set_ExcludedMembers(VARIANT Members/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExcludedMembers"), DISPID(1610743872));
  TAutoArgs<1> _args;
  _args[1] = Members /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_MemberProperties(Owc10_xp::PivotMemberProperties** MemberProperties/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MemberProperties"), DISPID(DISPID_UNKNOWN/*[1610743874]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotMemberProperties**)MemberProperties /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotMemberProperties* __fastcall
PivotFieldDispT<T>::get_MemberProperties(void)
{
  Owc10_xp::PivotMemberProperties* MemberProperties;
  this->get_MemberProperties((Owc10_xp::PivotMemberProperties**)&MemberProperties);
  return MemberProperties;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_MemberPropertiesOrder(VARIANT* MemberPropertiesOrder/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MemberPropertiesOrder"), DISPID(DISPID_UNKNOWN/*[1610743875]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(MemberPropertiesOrder /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PivotFieldDispT<T>::get_MemberPropertiesOrder(void)
{
  VARIANT MemberPropertiesOrder;
  this->get_MemberPropertiesOrder((VARIANT*)&MemberPropertiesOrder);
  return MemberPropertiesOrder;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::set_MemberPropertiesOrder(VARIANT MemberPropertiesOrder/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MemberPropertiesOrder"), DISPID(1610743875));
  TAutoArgs<1> _args;
  _args[1] = MemberPropertiesOrder /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_PropertyCaptionWidth(long* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PropertyCaptionWidth"), DISPID(DISPID_UNKNOWN/*[1610743877]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotFieldDispT<T>::get_PropertyCaptionWidth(void)
{
  long Width;
  this->get_PropertyCaptionWidth((long*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::set_PropertyCaptionWidth(long Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PropertyCaptionWidth"), DISPID(1610743877));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_GroupedHeight(long* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupedHeight"), DISPID(DISPID_UNKNOWN/*[1610743879]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotFieldDispT<T>::get_GroupedHeight(void)
{
  long Height;
  this->get_GroupedHeight((long*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::set_GroupedHeight(long Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupedHeight"), DISPID(1610743879));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_PropertyValueWidth(long* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PropertyValueWidth"), DISPID(DISPID_UNKNOWN/*[1610743881]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotFieldDispT<T>::get_PropertyValueWidth(void)
{
  long Width;
  this->get_PropertyValueWidth((long*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::set_PropertyValueWidth(long Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PropertyValueWidth"), DISPID(1610743881));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_PropertyHeight(long* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PropertyHeight"), DISPID(DISPID_UNKNOWN/*[1610743883]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotFieldDispT<T>::get_PropertyHeight(void)
{
  long Height;
  this->get_PropertyHeight((long*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::set_PropertyHeight(long Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PropertyHeight"), DISPID(1610743883));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_FilterContext(Owc10_xp::PivotField** Field/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FilterContext"), DISPID(DISPID_UNKNOWN/*[1610743885]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotField**)Field /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotField* __fastcall
PivotFieldDispT<T>::get_FilterContext(void)
{
  Owc10_xp::PivotField* Field;
  this->get_FilterContext((Owc10_xp::PivotField**)&Field);
  return Field;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::_set_FilterContext(Owc10_xp::PivotField* Field/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FilterContext"), DISPID(1610743885));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::PivotField*)Field /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_FilterOn(Owc10_xp::PivotTotal** Total/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FilterOn"), DISPID(DISPID_UNKNOWN/*[1610743887]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotTotal**)Total /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotTotal* __fastcall
PivotFieldDispT<T>::get_FilterOn(void)
{
  Owc10_xp::PivotTotal* Total;
  this->get_FilterOn((Owc10_xp::PivotTotal**)&Total);
  return Total;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::_set_FilterOn(Owc10_xp::PivotTotal* Total/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FilterOn"), DISPID(1610743887));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::PivotTotal*)Total /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_FilterOnScope(VARIANT* Scope/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FilterOnScope"), DISPID(DISPID_UNKNOWN/*[1610743889]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Scope /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PivotFieldDispT<T>::get_FilterOnScope(void)
{
  VARIANT Scope;
  this->get_FilterOnScope((VARIANT*)&Scope);
  return Scope;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::set_FilterOnScope(VARIANT Scope/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FilterOnScope"), DISPID(1610743889));
  TAutoArgs<1> _args;
  _args[1] = Scope /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_FilterFunctionValue(VARIANT* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FilterFunctionValue"), DISPID(DISPID_UNKNOWN/*[1610743891]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PivotFieldDispT<T>::get_FilterFunctionValue(void)
{
  VARIANT Value;
  this->get_FilterFunctionValue((VARIANT*)&Value);
  return Value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::set_FilterFunctionValue(VARIANT Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FilterFunctionValue"), DISPID(1610743891));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_GroupedFont(Owc10_xp::PivotFont** Font/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupedFont"), DISPID(DISPID_UNKNOWN/*[1610743893]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotFont**)Font /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotFont* __fastcall
PivotFieldDispT<T>::get_GroupedFont(void)
{
  Owc10_xp::PivotFont* Font;
  this->get_GroupedFont((Owc10_xp::PivotFont**)&Font);
  return Font;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_GroupedForeColor(VARIANT* Color/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupedForeColor"), DISPID(DISPID_UNKNOWN/*[1610743894]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Color /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PivotFieldDispT<T>::get_GroupedForeColor(void)
{
  VARIANT Color;
  this->get_GroupedForeColor((VARIANT*)&Color);
  return Color;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::set_GroupedForeColor(VARIANT Color/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupedForeColor"), DISPID(1610743894));
  TAutoArgs<1> _args;
  _args[1] = Color /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_GroupedBackColor(VARIANT* Color/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupedBackColor"), DISPID(DISPID_UNKNOWN/*[1610743896]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Color /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PivotFieldDispT<T>::get_GroupedBackColor(void)
{
  VARIANT Color;
  this->get_GroupedBackColor((VARIANT*)&Color);
  return Color;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::set_GroupedBackColor(VARIANT Color/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupedBackColor"), DISPID(1610743896));
  TAutoArgs<1> _args;
  _args[1] = Color /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_GroupedHAlignment(Owc10_xp::PivotHAlignmentEnum* HAlignment/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupedHAlignment"), DISPID(DISPID_UNKNOWN/*[1610743898]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)HAlignment /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotHAlignmentEnum __fastcall
PivotFieldDispT<T>::get_GroupedHAlignment(void)
{
  Owc10_xp::PivotHAlignmentEnum HAlignment;
  this->get_GroupedHAlignment((Owc10_xp::PivotHAlignmentEnum*)&HAlignment);
  return HAlignment;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::set_GroupedHAlignment(Owc10_xp::PivotHAlignmentEnum HAlignment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupedHAlignment"), DISPID(1610743898));
  TAutoArgs<1> _args;
  _args[1] = (int)HAlignment /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::AddCustomGroupMember(VARIANT Parent/*[in]*/, VARIANT varChildMembers/*[in]*/, 
                                         BSTR bstrCaption/*[in,def,opt]*/, 
                                         Owc10_xp::PivotMember** ppCustomGroupMember/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddCustomGroupMember"), DISPID(DISPID_UNKNOWN/*[1610743900]*/));
  TAutoArgs<3> _args;
  _args[1] = Parent /*[VT_VARIANT:0]*/;
  _args[2] = varChildMembers /*[VT_VARIANT:0]*/;
  _args[3] = bstrCaption /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotMember**)ppCustomGroupMember /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::PivotMember* __fastcall
PivotFieldDispT<T>::AddCustomGroupMember(VARIANT Parent/*[in]*/, VARIANT varChildMembers/*[in]*/, 
                                         BSTR bstrCaption/*[in,def,opt]*/)
{
  Owc10_xp::PivotMember* ppCustomGroupMember;
  this->AddCustomGroupMember(Parent, varChildMembers, bstrCaption, (Owc10_xp::PivotMember**)&ppCustomGroupMember);
  return ppCustomGroupMember;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::DeleteCustomGroupMember(VARIANT CustomGroupMember/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeleteCustomGroupMember"), DISPID(DISPID_UNKNOWN/*[1610743901]*/));
  TAutoArgs<1> _args;
  _args[1] = CustomGroupMember /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_CustomGroupMembers(Owc10_xp::PivotMembers** Members/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CustomGroupMembers"), DISPID(DISPID_UNKNOWN/*[1610743902]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotMembers**)Members /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotMembers* __fastcall
PivotFieldDispT<T>::get_CustomGroupMembers(void)
{
  Owc10_xp::PivotMembers* Members;
  this->get_CustomGroupMembers((Owc10_xp::PivotMembers**)&Members);
  return Members;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_DefaultValue(VARIANT* DefaultValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultValue"), DISPID(DISPID_UNKNOWN/*[1610743903]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DefaultValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PivotFieldDispT<T>::get_DefaultValue(void)
{
  VARIANT DefaultValue;
  this->get_DefaultValue((VARIANT*)&DefaultValue);
  return DefaultValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::set_DefaultValue(VARIANT DefaultValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultValue"), DISPID(1610743903));
  TAutoArgs<1> _args;
  _args[1] = DefaultValue /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_SubtotalLabelFont(Owc10_xp::PivotFont** Font/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SubtotalLabelFont"), DISPID(DISPID_UNKNOWN/*[1610743905]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotFont**)Font /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotFont* __fastcall
PivotFieldDispT<T>::get_SubtotalLabelFont(void)
{
  Owc10_xp::PivotFont* Font;
  this->get_SubtotalLabelFont((Owc10_xp::PivotFont**)&Font);
  return Font;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_SubtotalLabelForeColor(VARIANT* Color/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SubtotalLabelForeColor"), DISPID(DISPID_UNKNOWN/*[1610743906]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Color /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PivotFieldDispT<T>::get_SubtotalLabelForeColor(void)
{
  VARIANT Color;
  this->get_SubtotalLabelForeColor((VARIANT*)&Color);
  return Color;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::set_SubtotalLabelForeColor(VARIANT Color/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SubtotalLabelForeColor"), DISPID(1610743906));
  TAutoArgs<1> _args;
  _args[1] = Color /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_SubtotalLabelBackColor(VARIANT* Color/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SubtotalLabelBackColor"), DISPID(DISPID_UNKNOWN/*[1610743908]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Color /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PivotFieldDispT<T>::get_SubtotalLabelBackColor(void)
{
  VARIANT Color;
  this->get_SubtotalLabelBackColor((VARIANT*)&Color);
  return Color;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::set_SubtotalLabelBackColor(VARIANT Color/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SubtotalLabelBackColor"), DISPID(1610743908));
  TAutoArgs<1> _args;
  _args[1] = Color /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::get_SubtotalLabelHAlignment(Owc10_xp::PivotHAlignmentEnum* HAlignment/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SubtotalLabelHAlignment"), DISPID(DISPID_UNKNOWN/*[1610743910]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)HAlignment /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotHAlignmentEnum __fastcall
PivotFieldDispT<T>::get_SubtotalLabelHAlignment(void)
{
  Owc10_xp::PivotHAlignmentEnum HAlignment;
  this->get_SubtotalLabelHAlignment((Owc10_xp::PivotHAlignmentEnum*)&HAlignment);
  return HAlignment;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFieldDispT<T>::set_SubtotalLabelHAlignment(Owc10_xp::PivotHAlignmentEnum HAlignment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SubtotalLabelHAlignment"), DISPID(1610743910));
  TAutoArgs<1> _args;
  _args[1] = (int)HAlignment /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  PivotFont
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B01-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFontDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PivotFontDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFontDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFontDispT<T>::get_Size(long* Size/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Size"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Size /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotFontDispT<T>::get_Size(void)
{
  long Size;
  this->get_Size((long*)&Size);
  return Size;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFontDispT<T>::set_Size(long Size/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Size"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Size /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFontDispT<T>::get_Bold(VARIANT_BOOL* Bold/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bold"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Bold /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PivotFontDispT<T>::get_Bold(void)
{
  VARIANT_BOOL Bold;
  this->get_Bold((VARIANT_BOOL*)&Bold);
  return Bold;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFontDispT<T>::set_Bold(VARIANT_BOOL Bold/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bold"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Bold /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFontDispT<T>::get_Italic(VARIANT_BOOL* Italic/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Italic"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Italic /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PivotFontDispT<T>::get_Italic(void)
{
  VARIANT_BOOL Italic;
  this->get_Italic((VARIANT_BOOL*)&Italic);
  return Italic;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFontDispT<T>::set_Italic(VARIANT_BOOL Italic/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Italic"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = Italic /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFontDispT<T>::get_Underline(Owc10_xp::UnderlineStyleEnum* Underline/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Underline"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Underline /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::UnderlineStyleEnum __fastcall
PivotFontDispT<T>::get_Underline(void)
{
  Owc10_xp::UnderlineStyleEnum Underline;
  this->get_Underline((Owc10_xp::UnderlineStyleEnum*)&Underline);
  return Underline;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFontDispT<T>::set_Underline(Owc10_xp::UnderlineStyleEnum Underline/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Underline"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = (int)Underline /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFontDispT<T>::get_Color(VARIANT* Color/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Color"), DISPID(DISPID_UNKNOWN/*[1610743818]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Color /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PivotFontDispT<T>::get_Color(void)
{
  VARIANT Color;
  this->get_Color((VARIANT*)&Color);
  return Color;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFontDispT<T>::set_Color(VARIANT Color/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Color"), DISPID(1610743818));
  TAutoArgs<1> _args;
  _args[1] = Color /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  PivotTotal
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B2F-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotTotalDispT<T>::get_Field(Owc10_xp::PivotField** Field/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Field"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotField**)Field /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotField* __fastcall
PivotTotalDispT<T>::get_Field(void)
{
  Owc10_xp::PivotField* Field;
  this->get_Field((Owc10_xp::PivotField**)&Field);
  return Field;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotTotalDispT<T>::get_Function(Owc10_xp::PivotTotalFunctionEnum* Function/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Function"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Function /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotTotalFunctionEnum __fastcall
PivotTotalDispT<T>::get_Function(void)
{
  Owc10_xp::PivotTotalFunctionEnum Function;
  this->get_Function((Owc10_xp::PivotTotalFunctionEnum*)&Function);
  return Function;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotTotalDispT<T>::set_Function(Owc10_xp::PivotTotalFunctionEnum Function/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Function"), DISPID(1610743809));
  TAutoArgs<1> _args;
  _args[1] = (int)Function /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotTotalDispT<T>::get_Caption(BSTR* Caption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(6028));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Caption /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PivotTotalDispT<T>::get_Caption(void)
{
  BSTR Caption;
  this->get_Caption((BSTR*)&Caption);
  return Caption;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotTotalDispT<T>::set_Caption(BSTR Caption/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(6028));
  TAutoArgs<1> _args;
  _args[1] = Caption /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotTotalDispT<T>::get_Width(long* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotTotalDispT<T>::get_Width(void)
{
  long Width;
  this->get_Width((long*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotTotalDispT<T>::set_Width(long Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1610743813));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotTotalDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(6023));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PivotTotalDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotTotalDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(6023));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotTotalDispT<T>::get_NumberFormat(BSTR* NumberFormat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumberFormat"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(NumberFormat /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PivotTotalDispT<T>::get_NumberFormat(void)
{
  BSTR NumberFormat;
  this->get_NumberFormat((BSTR*)&NumberFormat);
  return NumberFormat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotTotalDispT<T>::set_NumberFormat(BSTR NumberFormat/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumberFormat"), DISPID(1610743817));
  TAutoArgs<1> _args;
  _args[1] = NumberFormat /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotTotalDispT<T>::get_HAlignment(Owc10_xp::PivotHAlignmentEnum* HAlignment/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HAlignment"), DISPID(DISPID_UNKNOWN/*[1610743819]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)HAlignment /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotHAlignmentEnum __fastcall
PivotTotalDispT<T>::get_HAlignment(void)
{
  Owc10_xp::PivotHAlignmentEnum HAlignment;
  this->get_HAlignment((Owc10_xp::PivotHAlignmentEnum*)&HAlignment);
  return HAlignment;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotTotalDispT<T>::set_HAlignment(Owc10_xp::PivotHAlignmentEnum HAlignment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HAlignment"), DISPID(1610743819));
  TAutoArgs<1> _args;
  _args[1] = (int)HAlignment /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotTotalDispT<T>::get_CaptionHAlignment(Owc10_xp::PivotHAlignmentEnum* CaptionHAlignment/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CaptionHAlignment"), DISPID(DISPID_UNKNOWN/*[1610743821]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)CaptionHAlignment /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotHAlignmentEnum __fastcall
PivotTotalDispT<T>::get_CaptionHAlignment(void)
{
  Owc10_xp::PivotHAlignmentEnum CaptionHAlignment;
  this->get_CaptionHAlignment((Owc10_xp::PivotHAlignmentEnum*)&CaptionHAlignment);
  return CaptionHAlignment;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotTotalDispT<T>::set_CaptionHAlignment(Owc10_xp::PivotHAlignmentEnum CaptionHAlignment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CaptionHAlignment"), DISPID(1610743821));
  TAutoArgs<1> _args;
  _args[1] = (int)CaptionHAlignment /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotTotalDispT<T>::get_Type(Owc10_xp::PivotTotalTypeEnum* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(DISPID_UNKNOWN/*[1610743823]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotTotalTypeEnum __fastcall
PivotTotalDispT<T>::get_Type(void)
{
  Owc10_xp::PivotTotalTypeEnum Type;
  this->get_Type((Owc10_xp::PivotTotalTypeEnum*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotTotalDispT<T>::get_AutoFit(VARIANT_BOOL* AutoFit/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoFit"), DISPID(DISPID_UNKNOWN/*[1610743824]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AutoFit /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PivotTotalDispT<T>::get_AutoFit(void)
{
  VARIANT_BOOL AutoFit;
  this->get_AutoFit((VARIANT_BOOL*)&AutoFit);
  return AutoFit;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotTotalDispT<T>::set_AutoFit(VARIANT_BOOL AutoFit/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoFit"), DISPID(1610743824));
  TAutoArgs<1> _args;
  _args[1] = AutoFit /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotTotalDispT<T>::get_UniqueName(BSTR* UniqueName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UniqueName"), DISPID(6022));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(UniqueName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PivotTotalDispT<T>::get_UniqueName(void)
{
  BSTR UniqueName;
  this->get_UniqueName((BSTR*)&UniqueName);
  return UniqueName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotTotalDispT<T>::get_View(Owc10_xp::PivotView** View/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("View"), DISPID(DISPID_UNKNOWN/*[1610743827]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotView**)View /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotView* __fastcall
PivotTotalDispT<T>::get_View(void)
{
  Owc10_xp::PivotView* View;
  this->get_View((Owc10_xp::PivotView**)&View);
  return View;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotTotalDispT<T>::get_Expression(BSTR* Expression/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Expression"), DISPID(DISPID_UNKNOWN/*[1610743828]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Expression /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PivotTotalDispT<T>::get_Expression(void)
{
  BSTR Expression;
  this->get_Expression((BSTR*)&Expression);
  return Expression;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotTotalDispT<T>::set_Expression(BSTR Expression/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Expression"), DISPID(1610743828));
  TAutoArgs<1> _args;
  _args[1] = Expression /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotTotalDispT<T>::get_SolveOrder(long* SolveOrder/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SolveOrder"), DISPID(DISPID_UNKNOWN/*[1610743830]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SolveOrder /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotTotalDispT<T>::get_SolveOrder(void)
{
  long SolveOrder;
  this->get_SolveOrder((long*)&SolveOrder);
  return SolveOrder;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotTotalDispT<T>::set_SolveOrder(long SolveOrder/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SolveOrder"), DISPID(1610743830));
  TAutoArgs<1> _args;
  _args[1] = SolveOrder /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotTotalDispT<T>::get_ShowAs(Owc10_xp::PivotShowAsEnum* ShowAs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowAs"), DISPID(DISPID_UNKNOWN/*[1610743832]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ShowAs /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotShowAsEnum __fastcall
PivotTotalDispT<T>::get_ShowAs(void)
{
  Owc10_xp::PivotShowAsEnum ShowAs;
  this->get_ShowAs((Owc10_xp::PivotShowAsEnum*)&ShowAs);
  return ShowAs;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotTotalDispT<T>::set_ShowAs(Owc10_xp::PivotShowAsEnum ShowAs/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowAs"), DISPID(1610743832));
  TAutoArgs<1> _args;
  _args[1] = (int)ShowAs /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotTotalDispT<T>::get_DisplayInFieldList(VARIANT_BOOL* DisplayInFieldList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayInFieldList"), DISPID(DISPID_UNKNOWN/*[1610743834]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DisplayInFieldList /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PivotTotalDispT<T>::get_DisplayInFieldList(void)
{
  VARIANT_BOOL DisplayInFieldList;
  this->get_DisplayInFieldList((VARIANT_BOOL*)&DisplayInFieldList);
  return DisplayInFieldList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotTotalDispT<T>::set_DisplayInFieldList(VARIANT_BOOL DisplayInFieldList/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayInFieldList"), DISPID(1610743834));
  TAutoArgs<1> _args;
  _args[1] = DisplayInFieldList /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  PivotMemberProperties
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0F57F292-726F-4817-A78B-52D452498519}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotMemberPropertiesDispT<T>::get_Item(VARIANT varIndex/*[in]*/, 
                                        Owc10_xp::PivotMemberProperty** Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = varIndex /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotMemberProperty**)Item /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotMemberProperty* __fastcall
PivotMemberPropertiesDispT<T>::get_Item(VARIANT varIndex/*[in]*/)
{
  Owc10_xp::PivotMemberProperty* Item;
  this->get_Item(varIndex, (Owc10_xp::PivotMemberProperty**)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotMemberPropertiesDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotMemberPropertiesDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotMemberPropertiesDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
PivotMemberPropertiesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

// *********************************************************************//
// DispIntf:  PivotMemberProperty
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6ADF4A9E-5E7D-47EE-A3B8-CE06023D6A14}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotMemberPropertyDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(6023));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PivotMemberPropertyDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotMemberPropertyDispT<T>::set_Caption(BSTR Caption/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<1> _args;
  _args[1] = Caption /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotMemberPropertyDispT<T>::get_Caption(BSTR* Caption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(1610743809));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Caption /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PivotMemberPropertyDispT<T>::get_Caption(void)
{
  BSTR Caption;
  this->get_Caption((BSTR*)&Caption);
  return Caption;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotMemberPropertyDispT<T>::set_IsIncluded(VARIANT_BOOL IsIncluded/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsIncluded"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<1> _args;
  _args[1] = IsIncluded /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotMemberPropertyDispT<T>::get_IsIncluded(VARIANT_BOOL* IsIncluded/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsIncluded"), DISPID(1610743811));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(IsIncluded /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PivotMemberPropertyDispT<T>::get_IsIncluded(void)
{
  VARIANT_BOOL IsIncluded;
  this->get_IsIncluded((VARIANT_BOOL*)&IsIncluded);
  return IsIncluded;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotMemberPropertyDispT<T>::set_DisplayIn(Owc10_xp::PivotMemberPropertyDisplayEnum DisplayIn/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayIn"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)DisplayIn /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotMemberPropertyDispT<T>::get_DisplayIn(Owc10_xp::PivotMemberPropertyDisplayEnum* DisplayIn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayIn"), DISPID(1610743813));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)DisplayIn /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotMemberPropertyDisplayEnum __fastcall
PivotMemberPropertyDispT<T>::get_DisplayIn(void)
{
  Owc10_xp::PivotMemberPropertyDisplayEnum DisplayIn;
  this->get_DisplayIn((Owc10_xp::PivotMemberPropertyDisplayEnum*)&DisplayIn);
  return DisplayIn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotMemberPropertyDispT<T>::get_NumberFormat(BSTR* NumberFormat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumberFormat"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(NumberFormat /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PivotMemberPropertyDispT<T>::get_NumberFormat(void)
{
  BSTR NumberFormat;
  this->get_NumberFormat((BSTR*)&NumberFormat);
  return NumberFormat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotMemberPropertyDispT<T>::set_NumberFormat(BSTR NumberFormat/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumberFormat"), DISPID(1610743815));
  TAutoArgs<1> _args;
  _args[1] = NumberFormat /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  PivotMember
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B33-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotMemberDispT<T>::get_View(Owc10_xp::PivotView** View/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("View"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotView**)View /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotView* __fastcall
PivotMemberDispT<T>::get_View(void)
{
  Owc10_xp::PivotView* View;
  this->get_View((Owc10_xp::PivotView**)&View);
  return View;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotMemberDispT<T>::get_ChildMembers(Owc10_xp::PivotMembers** Members/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChildMembers"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotMembers**)Members /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotMembers* __fastcall
PivotMemberDispT<T>::get_ChildMembers(void)
{
  Owc10_xp::PivotMembers* Members;
  this->get_ChildMembers((Owc10_xp::PivotMembers**)&Members);
  return Members;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotMemberDispT<T>::get_ParentMember(Owc10_xp::PivotMember** Member/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ParentMember"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotMember**)Member /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotMember* __fastcall
PivotMemberDispT<T>::get_ParentMember(void)
{
  Owc10_xp::PivotMember* Member;
  this->get_ParentMember((Owc10_xp::PivotMember**)&Member);
  return Member;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotMemberDispT<T>::get_FindMember(BSTR Path/*[in]*/, 
                                    Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/, 
                                    Owc10_xp::PivotMember** Member/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FindMember"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<2> _args;
  _args[1] = Path /*[VT_BSTR:0]*/;
  _args[2] = (int)Format /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotMember**)Member /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotMember* __fastcall
PivotMemberDispT<T>::get_FindMember(BSTR Path/*[in]*/, 
                                    Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/)
{
  Owc10_xp::PivotMember* Member;
  this->get_FindMember(Path, Format, (Owc10_xp::PivotMember**)&Member);
  return Member;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotMemberDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(6023));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PivotMemberDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotMemberDispT<T>::get_Caption(BSTR* Caption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(6028));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Caption /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PivotMemberDispT<T>::get_Caption(void)
{
  BSTR Caption;
  this->get_Caption((BSTR*)&Caption);
  return Caption;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotMemberDispT<T>::get_Value(VARIANT* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PivotMemberDispT<T>::get_Value(void)
{
  VARIANT Value;
  this->get_Value((VARIANT*)&Value);
  return Value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotMemberDispT<T>::get_UniqueName(BSTR* UniqueName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UniqueName"), DISPID(6022));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(UniqueName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PivotMemberDispT<T>::get_UniqueName(void)
{
  BSTR UniqueName;
  this->get_UniqueName((BSTR*)&UniqueName);
  return UniqueName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotMemberDispT<T>::get_Field(Owc10_xp::PivotField** Field/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Field"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotField**)Field /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotField* __fastcall
PivotMemberDispT<T>::get_Field(void)
{
  Owc10_xp::PivotField* Field;
  this->get_Field((Owc10_xp::PivotField**)&Field);
  return Field;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotMemberDispT<T>::get_Path(Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/, 
                              BSTR* Path/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Path"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)Format /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(Path /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PivotMemberDispT<T>::get_Path(Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/)
{
  BSTR Path;
  this->get_Path(Format, (BSTR*)&Path);
  return Path;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotMemberDispT<T>::get_TimeValue(VARIANT* TimeValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TimeValue"), DISPID(DISPID_UNKNOWN/*[1610743818]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(TimeValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PivotMemberDispT<T>::get_TimeValue(void)
{
  VARIANT TimeValue;
  this->get_TimeValue((VARIANT*)&TimeValue);
  return TimeValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotMemberDispT<T>::get_IsValid(VARIANT_BOOL* Valid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsValid"), DISPID(DISPID_UNKNOWN/*[1610743819]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Valid /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PivotMemberDispT<T>::get_IsValid(void)
{
  VARIANT_BOOL Valid;
  this->get_IsValid((VARIANT_BOOL*)&Valid);
  return Valid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotMemberDispT<T>::get_CustomGroupType(Owc10_xp::PivotMemberCustomGroupTypeEnum* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CustomGroupType"), DISPID(DISPID_UNKNOWN/*[1610743820]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotMemberCustomGroupTypeEnum __fastcall
PivotMemberDispT<T>::get_CustomGroupType(void)
{
  Owc10_xp::PivotMemberCustomGroupTypeEnum Type;
  this->get_CustomGroupType((Owc10_xp::PivotMemberCustomGroupTypeEnum*)&Type);
  return Type;
}

// *********************************************************************//
// DispIntf:  PivotMembers
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B32-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotMembersDispT<T>::get_Item(VARIANT Index/*[in]*/, Owc10_xp::PivotMember** Member/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotMember**)Member /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotMember* __fastcall
PivotMembersDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Owc10_xp::PivotMember* Member;
  this->get_Item(Index, (Owc10_xp::PivotMember**)&Member);
  return Member;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotMembersDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotMembersDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotMembersDispT<T>::get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
PivotMembersDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunk;
  this->get__NewEnum((LPUNKNOWN*)&ppunk);
  return ppunk;
}

// *********************************************************************//
// DispIntf:  PivotFilterUpdate
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A5E83EE4-5A92-11D3-BF58-00C04F61319A}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFilterUpdateDispT<T>::get_StateOf(Owc10_xp::PivotMember* Member/*[in]*/, 
                                       Owc10_xp::PivotFilterUpdateMemberStateEnum* MemberState/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StateOf"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::PivotMember*)Member /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((int*)MemberState /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotFilterUpdateMemberStateEnum __fastcall
PivotFilterUpdateDispT<T>::get_StateOf(Owc10_xp::PivotMember* Member/*[in]*/)
{
  Owc10_xp::PivotFilterUpdateMemberStateEnum MemberState;
  this->get_StateOf(Member, (Owc10_xp::PivotFilterUpdateMemberStateEnum*)&MemberState);
  return MemberState;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFilterUpdateDispT<T>::Click(Owc10_xp::PivotMember* Member/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Click"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::PivotMember*)Member /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFilterUpdateDispT<T>::ClickFromTo(Owc10_xp::PivotMember* Member/*[in]*/, 
                                       Owc10_xp::PivotFilterUpdateMemberStateEnum OldMemberState/*[in]*/
                                       , 
                                       Owc10_xp::PivotFilterUpdateMemberStateEnum NewMemberState/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClickFromTo"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<3> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::PivotMember*)Member /*[VT_USERDEFINED:1]*/;
  _args[2] = (int)OldMemberState /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)NewMemberState /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFilterUpdateDispT<T>::get_IsDirty(VARIANT_BOOL* IsDirty/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsDirty"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(IsDirty /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PivotFilterUpdateDispT<T>::get_IsDirty(void)
{
  VARIANT_BOOL IsDirty;
  this->get_IsDirty((VARIANT_BOOL*)&IsDirty);
  return IsDirty;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFilterUpdateDispT<T>::Apply()
{
  _TDispID _dispid(*this, OLETEXT("Apply"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  PivotAxis
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B2B-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAxisDispT<T>::get_View(Owc10_xp::PivotView** View/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("View"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotView**)View /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotView* __fastcall
PivotAxisDispT<T>::get_View(void)
{
  Owc10_xp::PivotView* View;
  this->get_View((Owc10_xp::PivotView**)&View);
  return View;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAxisDispT<T>::get_FieldSets(Owc10_xp::PivotFieldSets** FieldSets/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FieldSets"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotFieldSets**)FieldSets /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotFieldSets* __fastcall
PivotAxisDispT<T>::get_FieldSets(void)
{
  Owc10_xp::PivotFieldSets* FieldSets;
  this->get_FieldSets((Owc10_xp::PivotFieldSets**)&FieldSets);
  return FieldSets;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAxisDispT<T>::InsertFieldSet(Owc10_xp::PivotFieldSet* FieldSet/*[in]*/, 
                                  VARIANT Before/*[in,opt]*/, VARIANT_BOOL Remove/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("InsertFieldSet"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<3> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::PivotFieldSet*)FieldSet /*[VT_USERDEFINED:1]*/;
  _args[2] = Before /*[VT_VARIANT:0]*/;
  _args[3] = Remove /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAxisDispT<T>::RemoveFieldSet(VARIANT FieldSet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoveFieldSet"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<1> _args;
  _args[1] = FieldSet /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAxisDispT<T>::get_Label(Owc10_xp::PivotLabel** Label/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotLabel**)Label /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotLabel* __fastcall
PivotAxisDispT<T>::get_Label(void)
{
  Owc10_xp::PivotLabel* Label;
  this->get_Label((Owc10_xp::PivotLabel**)&Label);
  return Label;
}

// *********************************************************************//
// DispIntf:  PivotGroupAxis
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AA7-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotGroupAxisDispT<T>::get_DisplayEmptyMembers(VARIANT_BOOL* DisplayEmptyMembers/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayEmptyMembers"), DISPID(1610809344));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DisplayEmptyMembers /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PivotGroupAxisDispT<T>::get_DisplayEmptyMembers(void)
{
  VARIANT_BOOL DisplayEmptyMembers;
  this->get_DisplayEmptyMembers((VARIANT_BOOL*)&DisplayEmptyMembers);
  return DisplayEmptyMembers;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotGroupAxisDispT<T>::set_DisplayEmptyMembers(VARIANT_BOOL DisplayEmptyMembers/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayEmptyMembers"), DISPID(1610809344));
  TAutoArgs<1> _args;
  _args[1] = DisplayEmptyMembers /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotGroupAxisDispT<T>::get_View(Owc10_xp::PivotView** View/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("View"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotView**)View /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotView* __fastcall
PivotGroupAxisDispT<T>::get_View(void)
{
  Owc10_xp::PivotView* View;
  this->get_View((Owc10_xp::PivotView**)&View);
  return View;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotGroupAxisDispT<T>::get_FieldSets(Owc10_xp::PivotFieldSets** FieldSets/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FieldSets"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotFieldSets**)FieldSets /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotFieldSets* __fastcall
PivotGroupAxisDispT<T>::get_FieldSets(void)
{
  Owc10_xp::PivotFieldSets* FieldSets;
  this->get_FieldSets((Owc10_xp::PivotFieldSets**)&FieldSets);
  return FieldSets;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotGroupAxisDispT<T>::InsertFieldSet(Owc10_xp::PivotFieldSet* FieldSet/*[in]*/, 
                                       VARIANT Before/*[in,opt]*/, 
                                       VARIANT_BOOL Remove/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("InsertFieldSet"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<3> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::PivotFieldSet*)FieldSet /*[VT_USERDEFINED:1]*/;
  _args[2] = Before /*[VT_VARIANT:0]*/;
  _args[3] = Remove /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotGroupAxisDispT<T>::RemoveFieldSet(VARIANT FieldSet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoveFieldSet"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<1> _args;
  _args[1] = FieldSet /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotGroupAxisDispT<T>::get_Label(Owc10_xp::PivotLabel** Label/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotLabel**)Label /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotLabel* __fastcall
PivotGroupAxisDispT<T>::get_Label(void)
{
  Owc10_xp::PivotLabel* Label;
  this->get_Label((Owc10_xp::PivotLabel**)&Label);
  return Label;
}

// *********************************************************************//
// DispIntf:  PivotLabel
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B2D-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotLabelDispT<T>::get_Caption(BSTR* Caption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Caption /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PivotLabelDispT<T>::get_Caption(void)
{
  BSTR Caption;
  this->get_Caption((BSTR*)&Caption);
  return Caption;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotLabelDispT<T>::set_Caption(BSTR Caption/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(1610743808));
  TAutoArgs<1> _args;
  _args[1] = Caption /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotLabelDispT<T>::get_HAlignment(Owc10_xp::PivotHAlignmentEnum* HAlignment/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HAlignment"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)HAlignment /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotHAlignmentEnum __fastcall
PivotLabelDispT<T>::get_HAlignment(void)
{
  Owc10_xp::PivotHAlignmentEnum HAlignment;
  this->get_HAlignment((Owc10_xp::PivotHAlignmentEnum*)&HAlignment);
  return HAlignment;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotLabelDispT<T>::set_HAlignment(Owc10_xp::PivotHAlignmentEnum HAlignment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HAlignment"), DISPID(1610743810));
  TAutoArgs<1> _args;
  _args[1] = (int)HAlignment /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotLabelDispT<T>::get_ForeColor(VARIANT* Color/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Color /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PivotLabelDispT<T>::get_ForeColor(void)
{
  VARIANT Color;
  this->get_ForeColor((VARIANT*)&Color);
  return Color;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotLabelDispT<T>::set_ForeColor(VARIANT Color/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(1610743812));
  TAutoArgs<1> _args;
  _args[1] = Color /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotLabelDispT<T>::get_BackColor(VARIANT* Color/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Color /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PivotLabelDispT<T>::get_BackColor(void)
{
  VARIANT Color;
  this->get_BackColor((VARIANT*)&Color);
  return Color;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotLabelDispT<T>::set_BackColor(VARIANT Color/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(1610743814));
  TAutoArgs<1> _args;
  _args[1] = Color /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotLabelDispT<T>::get_Visible(VARIANT_BOOL* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Visible /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PivotLabelDispT<T>::get_Visible(void)
{
  VARIANT_BOOL Visible;
  this->get_Visible((VARIANT_BOOL*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotLabelDispT<T>::set_Visible(VARIANT_BOOL Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1610743816));
  TAutoArgs<1> _args;
  _args[1] = Visible /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotLabelDispT<T>::get_Font(Owc10_xp::PivotFont** Font/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(DISPID_UNKNOWN/*[1610743818]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotFont**)Font /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotFont* __fastcall
PivotLabelDispT<T>::get_Font(void)
{
  Owc10_xp::PivotFont* Font;
  this->get_Font((Owc10_xp::PivotFont**)&Font);
  return Font;
}

// *********************************************************************//
// DispIntf:  PivotDataAxis
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B43-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDataAxisDispT<T>::get_Totals(Owc10_xp::PivotTotals** Totals/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Totals"), DISPID(DISPID_UNKNOWN/*[1610809344]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotTotals**)Totals /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotTotals* __fastcall
PivotDataAxisDispT<T>::get_Totals(void)
{
  Owc10_xp::PivotTotals* Totals;
  this->get_Totals((Owc10_xp::PivotTotals**)&Totals);
  return Totals;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDataAxisDispT<T>::InsertTotal(Owc10_xp::PivotTotal* Total/*[in]*/, VARIANT Before/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("InsertTotal"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::PivotTotal*)Total /*[VT_USERDEFINED:1]*/;
  _args[2] = Before /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDataAxisDispT<T>::RemoveTotal(VARIANT Total/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoveTotal"), DISPID(DISPID_UNKNOWN/*[1610809346]*/));
  TAutoArgs<1> _args;
  _args[1] = Total /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDataAxisDispT<T>::get_View(Owc10_xp::PivotView** View/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("View"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotView**)View /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotView* __fastcall
PivotDataAxisDispT<T>::get_View(void)
{
  Owc10_xp::PivotView* View;
  this->get_View((Owc10_xp::PivotView**)&View);
  return View;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDataAxisDispT<T>::get_FieldSets(Owc10_xp::PivotFieldSets** FieldSets/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FieldSets"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotFieldSets**)FieldSets /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotFieldSets* __fastcall
PivotDataAxisDispT<T>::get_FieldSets(void)
{
  Owc10_xp::PivotFieldSets* FieldSets;
  this->get_FieldSets((Owc10_xp::PivotFieldSets**)&FieldSets);
  return FieldSets;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDataAxisDispT<T>::InsertFieldSet(Owc10_xp::PivotFieldSet* FieldSet/*[in]*/, 
                                      VARIANT Before/*[in,opt]*/, 
                                      VARIANT_BOOL Remove/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("InsertFieldSet"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<3> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::PivotFieldSet*)FieldSet /*[VT_USERDEFINED:1]*/;
  _args[2] = Before /*[VT_VARIANT:0]*/;
  _args[3] = Remove /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDataAxisDispT<T>::RemoveFieldSet(VARIANT FieldSet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoveFieldSet"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<1> _args;
  _args[1] = FieldSet /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDataAxisDispT<T>::get_Label(Owc10_xp::PivotLabel** Label/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotLabel**)Label /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotLabel* __fastcall
PivotDataAxisDispT<T>::get_Label(void)
{
  Owc10_xp::PivotLabel* Label;
  this->get_Label((Owc10_xp::PivotLabel**)&Label);
  return Label;
}

// *********************************************************************//
// DispIntf:  PivotTotals
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B2E-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotTotalsDispT<T>::get_Item(VARIANT Index/*[in]*/, Owc10_xp::PivotTotal** Total/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotTotal**)Total /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotTotal* __fastcall
PivotTotalsDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Owc10_xp::PivotTotal* Total;
  this->get_Item(Index, (Owc10_xp::PivotTotal**)&Total);
  return Total;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotTotalsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotTotalsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotTotalsDispT<T>::get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
PivotTotalsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunk;
  this->get__NewEnum((LPUNKNOWN*)&ppunk);
  return ppunk;
}

// *********************************************************************//
// DispIntf:  PivotFilterAxis
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AFD-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFilterAxisDispT<T>::get_View(Owc10_xp::PivotView** View/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("View"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotView**)View /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotView* __fastcall
PivotFilterAxisDispT<T>::get_View(void)
{
  Owc10_xp::PivotView* View;
  this->get_View((Owc10_xp::PivotView**)&View);
  return View;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFilterAxisDispT<T>::get_FieldSets(Owc10_xp::PivotFieldSets** FieldSets/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FieldSets"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotFieldSets**)FieldSets /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotFieldSets* __fastcall
PivotFilterAxisDispT<T>::get_FieldSets(void)
{
  Owc10_xp::PivotFieldSets* FieldSets;
  this->get_FieldSets((Owc10_xp::PivotFieldSets**)&FieldSets);
  return FieldSets;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFilterAxisDispT<T>::InsertFieldSet(Owc10_xp::PivotFieldSet* FieldSet/*[in]*/, 
                                        VARIANT Before/*[in,opt]*/, 
                                        VARIANT_BOOL Remove/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("InsertFieldSet"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<3> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::PivotFieldSet*)FieldSet /*[VT_USERDEFINED:1]*/;
  _args[2] = Before /*[VT_VARIANT:0]*/;
  _args[3] = Remove /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFilterAxisDispT<T>::RemoveFieldSet(VARIANT FieldSet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoveFieldSet"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<1> _args;
  _args[1] = FieldSet /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotFilterAxisDispT<T>::get_Label(Owc10_xp::PivotLabel** Label/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotLabel**)Label /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotLabel* __fastcall
PivotFilterAxisDispT<T>::get_Label(void)
{
  Owc10_xp::PivotLabel* Label;
  this->get_Label((Owc10_xp::PivotLabel**)&Label);
  return Label;
}

// *********************************************************************//
// SmartIntf: TCOMIPivotControl
// Interface: IPivotControl
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_ActiveView(Owc10_xp::PivotView** View/*[out,retval]*/)
{
  return (*this)->get_ActiveView(View);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_ActiveView(Owc10_xp::PivotViewPtr* View/*[out,retval]*/)
{
  return (*this)->get_ActiveView(PivotView**)View);
}

template <class T> Owc10_xp::PivotViewPtr __fastcall
TCOMIPivotControlT<T>::get_ActiveView(void)
{
  Owc10_xp::PivotView* View;
  OLECHECK(this->get_ActiveView((Owc10_xp::PivotView**)&View));
  return (Owc10_xp::PivotViewPtr)View;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_Selection(LPDISPATCH* Selection/*[out,retval]*/)
{
  return (*this)->get_Selection(Selection);
}

template <class T> LPDISPATCH __fastcall
TCOMIPivotControlT<T>::get_Selection(void)
{
  LPDISPATCH Selection;
  OLECHECK(this->get_Selection((LPDISPATCH*)&Selection));
  return Selection;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::_set_Selection(LPDISPATCH Selection/*[in]*/)
{
  return (*this)->_set_Selection(Selection);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_DataMember(Msdatasrc_xp::DataMember* DataMember/*[out,retval]*/)
{
  return (*this)->get_DataMember(DataMember);
}

template <class T> Msdatasrc_xp::DataMember __fastcall
TCOMIPivotControlT<T>::get_DataMember(void)
{
  Msdatasrc_xp::DataMember DataMember;
  OLECHECK(this->get_DataMember((Msdatasrc_xp::DataMember*)&DataMember));
  return DataMember;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::set_DataMember(Msdatasrc_xp::DataMember DataMember/*[in]*/)
{
  return (*this)->set_DataMember(DataMember);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_ActiveData(Owc10_xp::PivotData** Data/*[out,retval]*/)
{
  return (*this)->get_ActiveData(Data);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_ActiveData(Owc10_xp::PivotDataPtr* Data/*[out,retval]*/)
{
  return (*this)->get_ActiveData(PivotData**)Data);
}

template <class T> Owc10_xp::PivotDataPtr __fastcall
TCOMIPivotControlT<T>::get_ActiveData(void)
{
  Owc10_xp::PivotData* Data;
  OLECHECK(this->get_ActiveData((Owc10_xp::PivotData**)&Data));
  return (Owc10_xp::PivotDataPtr)Data;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_Version(BSTR* Version/*[out,retval]*/)
{
  return (*this)->get_Version(Version);
}

template <class T> BSTR __fastcall
TCOMIPivotControlT<T>::get_Version(void)
{
  BSTR Version = 0;
  OLECHECK(this->get_Version((BSTR*)&Version));
  return Version;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_HasDetails(VARIANT_BOOL* HasDetails/*[out,retval]*/)
{
  return (*this)->get_HasDetails(HasDetails);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_HasDetails(TOLEBOOL* HasDetails/*[out,retval]*/)
{
  return (*this)->get_HasDetails(VARIANT_BOOL*)HasDetails);
}

template <class T> TOLEBOOL __fastcall
TCOMIPivotControlT<T>::get_HasDetails(void)
{
  VARIANT_BOOL HasDetails;
  OLECHECK(this->get_HasDetails((VARIANT_BOOL*)&HasDetails));
  return (TOLEBOOL)HasDetails;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_DisplayToolbar(VARIANT_BOOL* DisplayToolbar/*[out,retval]*/)
{
  return (*this)->get_DisplayToolbar(DisplayToolbar);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_DisplayToolbar(TOLEBOOL* DisplayToolbar/*[out,retval]*/)
{
  return (*this)->get_DisplayToolbar(VARIANT_BOOL*)DisplayToolbar);
}

template <class T> TOLEBOOL __fastcall
TCOMIPivotControlT<T>::get_DisplayToolbar(void)
{
  VARIANT_BOOL DisplayToolbar;
  OLECHECK(this->get_DisplayToolbar((VARIANT_BOOL*)&DisplayToolbar));
  return (TOLEBOOL)DisplayToolbar;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::set_DisplayToolbar(VARIANT_BOOL DisplayToolbar/*[in]*/)
{
  return (*this)->set_DisplayToolbar(DisplayToolbar);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::set_DisplayToolbar(TOLEBOOL DisplayToolbar/*[in]*/)
{
  return (*this)->set_DisplayToolbar(VARIANT_BOOL)DisplayToolbar);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_AllowGrouping(VARIANT_BOOL* AllowGrouping/*[out,retval]*/)
{
  return (*this)->get_AllowGrouping(AllowGrouping);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_AllowGrouping(TOLEBOOL* AllowGrouping/*[out,retval]*/)
{
  return (*this)->get_AllowGrouping(VARIANT_BOOL*)AllowGrouping);
}

template <class T> TOLEBOOL __fastcall
TCOMIPivotControlT<T>::get_AllowGrouping(void)
{
  VARIANT_BOOL AllowGrouping;
  OLECHECK(this->get_AllowGrouping((VARIANT_BOOL*)&AllowGrouping));
  return (TOLEBOOL)AllowGrouping;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::set_AllowGrouping(VARIANT_BOOL AllowGrouping/*[in]*/)
{
  return (*this)->set_AllowGrouping(AllowGrouping);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::set_AllowGrouping(TOLEBOOL AllowGrouping/*[in]*/)
{
  return (*this)->set_AllowGrouping(VARIANT_BOOL)AllowGrouping);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_AllowFiltering(VARIANT_BOOL* AllowFiltering/*[out,retval]*/)
{
  return (*this)->get_AllowFiltering(AllowFiltering);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_AllowFiltering(TOLEBOOL* AllowFiltering/*[out,retval]*/)
{
  return (*this)->get_AllowFiltering(VARIANT_BOOL*)AllowFiltering);
}

template <class T> TOLEBOOL __fastcall
TCOMIPivotControlT<T>::get_AllowFiltering(void)
{
  VARIANT_BOOL AllowFiltering;
  OLECHECK(this->get_AllowFiltering((VARIANT_BOOL*)&AllowFiltering));
  return (TOLEBOOL)AllowFiltering;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::set_AllowFiltering(VARIANT_BOOL AllowFiltering/*[in]*/)
{
  return (*this)->set_AllowFiltering(AllowFiltering);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::set_AllowFiltering(TOLEBOOL AllowFiltering/*[in]*/)
{
  return (*this)->set_AllowFiltering(VARIANT_BOOL)AllowFiltering);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_AllowDetails(VARIANT_BOOL* EnableDetails/*[out,retval]*/)
{
  return (*this)->get_AllowDetails(EnableDetails);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_AllowDetails(TOLEBOOL* EnableDetails/*[out,retval]*/)
{
  return (*this)->get_AllowDetails(VARIANT_BOOL*)EnableDetails);
}

template <class T> TOLEBOOL __fastcall
TCOMIPivotControlT<T>::get_AllowDetails(void)
{
  VARIANT_BOOL EnableDetails;
  OLECHECK(this->get_AllowDetails((VARIANT_BOOL*)&EnableDetails));
  return (TOLEBOOL)EnableDetails;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::set_AllowDetails(VARIANT_BOOL EnableDetails/*[in]*/)
{
  return (*this)->set_AllowDetails(EnableDetails);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::set_AllowDetails(TOLEBOOL EnableDetails/*[in]*/)
{
  return (*this)->set_AllowDetails(VARIANT_BOOL)EnableDetails);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_AllowPropertyToolbox(VARIANT_BOOL* AllowPropertyToolbox/*[out,retval]*/)
{
  return (*this)->get_AllowPropertyToolbox(AllowPropertyToolbox);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_AllowPropertyToolbox(TOLEBOOL* AllowPropertyToolbox/*[out,retval]*/)
{
  return (*this)->get_AllowPropertyToolbox(VARIANT_BOOL*)AllowPropertyToolbox);
}

template <class T> TOLEBOOL __fastcall
TCOMIPivotControlT<T>::get_AllowPropertyToolbox(void)
{
  VARIANT_BOOL AllowPropertyToolbox;
  OLECHECK(this->get_AllowPropertyToolbox((VARIANT_BOOL*)&AllowPropertyToolbox));
  return (TOLEBOOL)AllowPropertyToolbox;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::set_AllowPropertyToolbox(VARIANT_BOOL AllowPropertyToolbox/*[in]*/)
{
  return (*this)->set_AllowPropertyToolbox(AllowPropertyToolbox);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::set_AllowPropertyToolbox(TOLEBOOL AllowPropertyToolbox/*[in]*/)
{
  return (*this)->set_AllowPropertyToolbox(VARIANT_BOOL)AllowPropertyToolbox);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_AllowCustomOrdering(VARIANT_BOOL* AllowCustomOrdering/*[out,retval]*/)
{
  return (*this)->get_AllowCustomOrdering(AllowCustomOrdering);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_AllowCustomOrdering(TOLEBOOL* AllowCustomOrdering/*[out,retval]*/)
{
  return (*this)->get_AllowCustomOrdering(VARIANT_BOOL*)AllowCustomOrdering);
}

template <class T> TOLEBOOL __fastcall
TCOMIPivotControlT<T>::get_AllowCustomOrdering(void)
{
  VARIANT_BOOL AllowCustomOrdering;
  OLECHECK(this->get_AllowCustomOrdering((VARIANT_BOOL*)&AllowCustomOrdering));
  return (TOLEBOOL)AllowCustomOrdering;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::set_AllowCustomOrdering(VARIANT_BOOL AllowCustomOrdering/*[in]*/)
{
  return (*this)->set_AllowCustomOrdering(AllowCustomOrdering);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::set_AllowCustomOrdering(TOLEBOOL AllowCustomOrdering/*[in]*/)
{
  return (*this)->set_AllowCustomOrdering(VARIANT_BOOL)AllowCustomOrdering);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_AutoFit(VARIANT_BOOL* AutoFit/*[out,retval]*/)
{
  return (*this)->get_AutoFit(AutoFit);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_AutoFit(TOLEBOOL* AutoFit/*[out,retval]*/)
{
  return (*this)->get_AutoFit(VARIANT_BOOL*)AutoFit);
}

template <class T> TOLEBOOL __fastcall
TCOMIPivotControlT<T>::get_AutoFit(void)
{
  VARIANT_BOOL AutoFit;
  OLECHECK(this->get_AutoFit((VARIANT_BOOL*)&AutoFit));
  return (TOLEBOOL)AutoFit;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::set_AutoFit(VARIANT_BOOL AutoFit/*[in]*/)
{
  return (*this)->set_AutoFit(AutoFit);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::set_AutoFit(TOLEBOOL AutoFit/*[in]*/)
{
  return (*this)->set_AutoFit(VARIANT_BOOL)AutoFit);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::Export(BSTR Filename/*[in,def,opt]*/, 
                              Owc10_xp::PivotExportActionEnum Action/*[in,def,opt]*/)
{
  return (*this)->Export(Filename, Action);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::set_DataSource(Msdatasrc_xp::DataSource* DataSource/*[in]*/)
{
  return (*this)->set_DataSource(DataSource);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::set_DataSource(Msdatasrc_xp::DataSourcePtr DataSource/*[in]*/)
{
  return (*this)->set_DataSource(DataSource*)DataSource);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::_set_DataSource(Msdatasrc_xp::DataSource* DataSource/*[in]*/)
{
  return (*this)->_set_DataSource(DataSource);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::_set_DataSource(Msdatasrc_xp::DataSourcePtr DataSource/*[in]*/)
{
  return (*this)->_set_DataSource(DataSource*)DataSource);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_DataSource(Msdatasrc_xp::DataSource** DataSource/*[out,retval]*/)
{
  return (*this)->get_DataSource(DataSource);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_DataSource(Msdatasrc_xp::DataSourcePtr* DataSource/*[out,retval]*/)
{
  return (*this)->get_DataSource(DataSource**)DataSource);
}

template <class T> Msdatasrc_xp::DataSourcePtr __fastcall
TCOMIPivotControlT<T>::get_DataSource(void)
{
  Msdatasrc_xp::DataSource* DataSource;
  OLECHECK(this->get_DataSource((Msdatasrc_xp::DataSource**)&DataSource));
  return (Msdatasrc_xp::DataSourcePtr)DataSource;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_BackColor(VARIANT* BackColor/*[out,retval]*/)
{
  return (*this)->get_BackColor(BackColor);
}

template <class T> VARIANT __fastcall
TCOMIPivotControlT<T>::get_BackColor(void)
{
  VARIANT BackColor;
  OLECHECK(this->get_BackColor((VARIANT*)&BackColor));
  return BackColor;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::set_BackColor(VARIANT BackColor/*[in]*/)
{
  return (*this)->set_BackColor(BackColor);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_DisplayExpandIndicator(VARIANT_BOOL* DisplayExpandIndicator/*[out,retval]*/)
{
  return (*this)->get_DisplayExpandIndicator(DisplayExpandIndicator);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_DisplayExpandIndicator(TOLEBOOL* DisplayExpandIndicator/*[out,retval]*/)
{
  return (*this)->get_DisplayExpandIndicator(VARIANT_BOOL*)DisplayExpandIndicator);
}

template <class T> TOLEBOOL __fastcall
TCOMIPivotControlT<T>::get_DisplayExpandIndicator(void)
{
  VARIANT_BOOL DisplayExpandIndicator;
  OLECHECK(this->get_DisplayExpandIndicator((VARIANT_BOOL*)&DisplayExpandIndicator));
  return (TOLEBOOL)DisplayExpandIndicator;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::set_DisplayExpandIndicator(VARIANT_BOOL DisplayExpandIndicator/*[in]*/)
{
  return (*this)->set_DisplayExpandIndicator(DisplayExpandIndicator);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::set_DisplayExpandIndicator(TOLEBOOL DisplayExpandIndicator/*[in]*/)
{
  return (*this)->set_DisplayExpandIndicator(VARIANT_BOOL)DisplayExpandIndicator);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_RightToLeft(VARIANT_BOOL* RightToLeft/*[out,retval]*/)
{
  return (*this)->get_RightToLeft(RightToLeft);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_RightToLeft(TOLEBOOL* RightToLeft/*[out,retval]*/)
{
  return (*this)->get_RightToLeft(VARIANT_BOOL*)RightToLeft);
}

template <class T> TOLEBOOL __fastcall
TCOMIPivotControlT<T>::get_RightToLeft(void)
{
  VARIANT_BOOL RightToLeft;
  OLECHECK(this->get_RightToLeft((VARIANT_BOOL*)&RightToLeft));
  return (TOLEBOOL)RightToLeft;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::set_RightToLeft(VARIANT_BOOL RightToLeft/*[in]*/)
{
  return (*this)->set_RightToLeft(RightToLeft);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::set_RightToLeft(TOLEBOOL RightToLeft/*[in]*/)
{
  return (*this)->set_RightToLeft(VARIANT_BOOL)RightToLeft);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_MaxWidth(long* MaxWidth/*[out,retval]*/)
{
  return (*this)->get_MaxWidth(MaxWidth);
}

template <class T> long __fastcall
TCOMIPivotControlT<T>::get_MaxWidth(void)
{
  long MaxWidth;
  OLECHECK(this->get_MaxWidth((long*)&MaxWidth));
  return MaxWidth;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::set_MaxWidth(long MaxWidth/*[in]*/)
{
  return (*this)->set_MaxWidth(MaxWidth);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_MaxHeight(long* MaxHeight/*[out,retval]*/)
{
  return (*this)->get_MaxHeight(MaxHeight);
}

template <class T> long __fastcall
TCOMIPivotControlT<T>::get_MaxHeight(void)
{
  long MaxHeight;
  OLECHECK(this->get_MaxHeight((long*)&MaxHeight));
  return MaxHeight;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::set_MaxHeight(long MaxHeight/*[in]*/)
{
  return (*this)->set_MaxHeight(MaxHeight);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_Width(long* Width/*[out,retval]*/)
{
  return (*this)->get_Width(Width);
}

template <class T> long __fastcall
TCOMIPivotControlT<T>::get_Width(void)
{
  long Width;
  OLECHECK(this->get_Width((long*)&Width));
  return Width;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::set_Width(long Width/*[in]*/)
{
  return (*this)->set_Width(Width);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_Height(long* Height/*[out,retval]*/)
{
  return (*this)->get_Height(Height);
}

template <class T> long __fastcall
TCOMIPivotControlT<T>::get_Height(void)
{
  long Height;
  OLECHECK(this->get_Height((long*)&Height));
  return Height;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::set_Height(long Height/*[in]*/)
{
  return (*this)->set_Height(Height);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_XMLData(BSTR* XMLData/*[out,retval]*/)
{
  return (*this)->get_XMLData(XMLData);
}

template <class T> BSTR __fastcall
TCOMIPivotControlT<T>::get_XMLData(void)
{
  BSTR XMLData = 0;
  OLECHECK(this->get_XMLData((BSTR*)&XMLData));
  return XMLData;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::set_XMLData(BSTR XMLData/*[in]*/)
{
  return (*this)->set_XMLData(XMLData);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::Refresh(void)
{
  return (*this)->Refresh();
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_DisplayPropertyToolbox(VARIANT_BOOL* DisplayPropertyToolbox/*[out,retval]*/)
{
  return (*this)->get_DisplayPropertyToolbox(DisplayPropertyToolbox);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_DisplayPropertyToolbox(TOLEBOOL* DisplayPropertyToolbox/*[out,retval]*/)
{
  return (*this)->get_DisplayPropertyToolbox(VARIANT_BOOL*)DisplayPropertyToolbox);
}

template <class T> TOLEBOOL __fastcall
TCOMIPivotControlT<T>::get_DisplayPropertyToolbox(void)
{
  VARIANT_BOOL DisplayPropertyToolbox;
  OLECHECK(this->get_DisplayPropertyToolbox((VARIANT_BOOL*)&DisplayPropertyToolbox));
  return (TOLEBOOL)DisplayPropertyToolbox;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::set_DisplayPropertyToolbox(VARIANT_BOOL DisplayPropertyToolbox/*[in]*/)
{
  return (*this)->set_DisplayPropertyToolbox(DisplayPropertyToolbox);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::set_DisplayPropertyToolbox(TOLEBOOL DisplayPropertyToolbox/*[in]*/)
{
  return (*this)->set_DisplayPropertyToolbox(VARIANT_BOOL)DisplayPropertyToolbox);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_DisplayFieldList(VARIANT_BOOL* DisplayFieldList/*[out,retval]*/)
{
  return (*this)->get_DisplayFieldList(DisplayFieldList);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_DisplayFieldList(TOLEBOOL* DisplayFieldList/*[out,retval]*/)
{
  return (*this)->get_DisplayFieldList(VARIANT_BOOL*)DisplayFieldList);
}

template <class T> TOLEBOOL __fastcall
TCOMIPivotControlT<T>::get_DisplayFieldList(void)
{
  VARIANT_BOOL DisplayFieldList;
  OLECHECK(this->get_DisplayFieldList((VARIANT_BOOL*)&DisplayFieldList));
  return (TOLEBOOL)DisplayFieldList;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::set_DisplayFieldList(VARIANT_BOOL DisplayFieldList/*[in]*/)
{
  return (*this)->set_DisplayFieldList(DisplayFieldList);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::set_DisplayFieldList(TOLEBOOL DisplayFieldList/*[in]*/)
{
  return (*this)->set_DisplayFieldList(VARIANT_BOOL)DisplayFieldList);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_Constants(LPDISPATCH* Constants/*[out,retval]*/)
{
  return (*this)->get_Constants(Constants);
}

template <class T> LPDISPATCH __fastcall
TCOMIPivotControlT<T>::get_Constants(void)
{
  LPDISPATCH Constants;
  OLECHECK(this->get_Constants((LPDISPATCH*)&Constants));
  return Constants;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_MajorVersion(long* MajorVersion/*[out,retval]*/)
{
  return (*this)->get_MajorVersion(MajorVersion);
}

template <class T> long __fastcall
TCOMIPivotControlT<T>::get_MajorVersion(void)
{
  long MajorVersion;
  OLECHECK(this->get_MajorVersion((long*)&MajorVersion));
  return MajorVersion;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_MinorVersion(BSTR* MinorVersion/*[out,retval]*/)
{
  return (*this)->get_MinorVersion(MinorVersion);
}

template <class T> BSTR __fastcall
TCOMIPivotControlT<T>::get_MinorVersion(void)
{
  BSTR MinorVersion = 0;
  OLECHECK(this->get_MinorVersion((BSTR*)&MinorVersion));
  return MinorVersion;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_BuildNumber(BSTR* BuildNumber/*[out,retval]*/)
{
  return (*this)->get_BuildNumber(BuildNumber);
}

template <class T> BSTR __fastcall
TCOMIPivotControlT<T>::get_BuildNumber(void)
{
  BSTR BuildNumber = 0;
  OLECHECK(this->get_BuildNumber((BSTR*)&BuildNumber));
  return BuildNumber;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::ExportPicture(BSTR Filename/*[in,def,opt]*/, BSTR FilterName/*[in,def,opt]*/, 
                                     long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  return (*this)->ExportPicture(Filename, FilterName, Width, Height);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_ConnectionString(BSTR* ConnectionString/*[out,retval]*/)
{
  return (*this)->get_ConnectionString(ConnectionString);
}

template <class T> BSTR __fastcall
TCOMIPivotControlT<T>::get_ConnectionString(void)
{
  BSTR ConnectionString = 0;
  OLECHECK(this->get_ConnectionString((BSTR*)&ConnectionString));
  return ConnectionString;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::set_ConnectionString(BSTR ConnectionString/*[in]*/)
{
  return (*this)->set_ConnectionString(ConnectionString);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_CommandText(BSTR* CommandText/*[out,retval]*/)
{
  return (*this)->get_CommandText(CommandText);
}

template <class T> BSTR __fastcall
TCOMIPivotControlT<T>::get_CommandText(void)
{
  BSTR CommandText = 0;
  OLECHECK(this->get_CommandText((BSTR*)&CommandText));
  return CommandText;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::set_CommandText(BSTR CommandText/*[in]*/)
{
  return (*this)->set_CommandText(CommandText);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_ProviderType(Owc10_xp::ProviderType* ProviderType/*[out,retval]*/)
{
  return (*this)->get_ProviderType(ProviderType);
}

template <class T> Owc10_xp::ProviderType __fastcall
TCOMIPivotControlT<T>::get_ProviderType(void)
{
  Owc10_xp::ProviderType ProviderType;
  OLECHECK(this->get_ProviderType((Owc10_xp::ProviderType*)&ProviderType));
  return ProviderType;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  return (*this)->get_Parent(Parent);
}

template <class T> LPDISPATCH __fastcall
TCOMIPivotControlT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
  return Parent;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_MemberExpand(Owc10_xp::PivotTableMemberExpandEnum* MemberExpand/*[out,retval]*/)
{
  return (*this)->get_MemberExpand(MemberExpand);
}

template <class T> Owc10_xp::PivotTableMemberExpandEnum __fastcall
TCOMIPivotControlT<T>::get_MemberExpand(void)
{
  Owc10_xp::PivotTableMemberExpandEnum MemberExpand;
  OLECHECK(this->get_MemberExpand((Owc10_xp::PivotTableMemberExpandEnum*)&MemberExpand));
  return MemberExpand;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::set_MemberExpand(Owc10_xp::PivotTableMemberExpandEnum MemberExpand/*[in]*/)
{
  return (*this)->set_MemberExpand(MemberExpand);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::LocateDataSource(void)
{
  return (*this)->LocateDataSource();
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::_set_Connection(Adodb_xp::Connection* Connection/*[in]*/)
{
  return (*this)->_set_Connection(Connection);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::_set_Connection(Adodb_xp::ConnectionPtr Connection/*[in]*/)
{
  return (*this)->_set_Connection(Connection*)Connection);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_Connection(Adodb_xp::Connection** Connection/*[out,retval]*/)
{
  return (*this)->get_Connection(Connection);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_Connection(Adodb_xp::ConnectionPtr* Connection/*[out,retval]*/)
{
  return (*this)->get_Connection(Connection**)Connection);
}

template <class T> Adodb_xp::ConnectionPtr __fastcall
TCOMIPivotControlT<T>::get_Connection(void)
{
  Adodb_xp::Connection* Connection;
  OLECHECK(this->get_Connection((Adodb_xp::Connection**)&Connection));
  return (Adodb_xp::ConnectionPtr)Connection;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::Copy(LPDISPATCH Selection/*[in,def,opt]*/)
{
  return (*this)->Copy(Selection);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_RevisionNumber(BSTR* RevisionNumber/*[out,retval]*/)
{
  return (*this)->get_RevisionNumber(RevisionNumber);
}

template <class T> BSTR __fastcall
TCOMIPivotControlT<T>::get_RevisionNumber(void)
{
  BSTR RevisionNumber = 0;
  OLECHECK(this->get_RevisionNumber((BSTR*)&RevisionNumber));
  return RevisionNumber;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_DisplayAlerts(VARIANT_BOOL* DisplayAlerts/*[out,retval]*/)
{
  return (*this)->get_DisplayAlerts(DisplayAlerts);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_DisplayAlerts(TOLEBOOL* DisplayAlerts/*[out,retval]*/)
{
  return (*this)->get_DisplayAlerts(VARIANT_BOOL*)DisplayAlerts);
}

template <class T> TOLEBOOL __fastcall
TCOMIPivotControlT<T>::get_DisplayAlerts(void)
{
  VARIANT_BOOL DisplayAlerts;
  OLECHECK(this->get_DisplayAlerts((VARIANT_BOOL*)&DisplayAlerts));
  return (TOLEBOOL)DisplayAlerts;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::set_DisplayAlerts(VARIANT_BOOL DisplayAlerts/*[in]*/)
{
  return (*this)->set_DisplayAlerts(DisplayAlerts);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::set_DisplayAlerts(TOLEBOOL DisplayAlerts/*[in]*/)
{
  return (*this)->set_DisplayAlerts(VARIANT_BOOL)DisplayAlerts);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_DataMemberStrings(VARIANT* DataMemberStrings/*[out,retval]*/)
{
  return (*this)->get_DataMemberStrings(DataMemberStrings);
}

template <class T> VARIANT __fastcall
TCOMIPivotControlT<T>::get_DataMemberStrings(void)
{
  VARIANT DataMemberStrings;
  OLECHECK(this->get_DataMemberStrings((VARIANT*)&DataMemberStrings));
  return DataMemberStrings;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_ClassFactory(Owc10_xp::PivotClassFactory** ClassFactory/*[out,retval]*/)
{
  return (*this)->get_ClassFactory(ClassFactory);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_ClassFactory(Owc10_xp::PivotClassFactoryPtr* ClassFactory/*[out,retval]*/)
{
  return (*this)->get_ClassFactory(PivotClassFactory**)ClassFactory);
}

template <class T> Owc10_xp::PivotClassFactoryPtr __fastcall
TCOMIPivotControlT<T>::get_ClassFactory(void)
{
  Owc10_xp::PivotClassFactory* ClassFactory;
  OLECHECK(this->get_ClassFactory((Owc10_xp::PivotClassFactory**)&ClassFactory));
  return (Owc10_xp::PivotClassFactoryPtr)ClassFactory;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::_set_ClassFactory(Owc10_xp::PivotClassFactory* ClassFactory/*[in]*/)
{
  return (*this)->_set_ClassFactory(ClassFactory);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::_set_ClassFactory(Owc10_xp::PivotClassFactoryPtr ClassFactory/*[in]*/)
{
  return (*this)->_set_ClassFactory(PivotClassFactory*)ClassFactory);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_Left(long* Left/*[out,retval]*/)
{
  return (*this)->get_Left(Left);
}

template <class T> long __fastcall
TCOMIPivotControlT<T>::get_Left(void)
{
  long Left;
  OLECHECK(this->get_Left((long*)&Left));
  return Left;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_Top(long* Top/*[out,retval]*/)
{
  return (*this)->get_Top(Top);
}

template <class T> long __fastcall
TCOMIPivotControlT<T>::get_Top(void)
{
  long Top;
  OLECHECK(this->get_Top((long*)&Top));
  return Top;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_Hwnd(long* Hwnd/*[out,retval]*/)
{
  return (*this)->get_Hwnd(Hwnd);
}

template <class T> long __fastcall
TCOMIPivotControlT<T>::get_Hwnd(void)
{
  long Hwnd;
  OLECHECK(this->get_Hwnd((long*)&Hwnd));
  return Hwnd;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::DoDragDrop(Owc10_xp::DropSource* Source/*[in]*/, LPDISPATCH DragItem/*[in]*/, 
                                  Owc10_xp::DropTarget* Target/*[in]*/, long dwLegalEffect/*[in]*/)
{
  return (*this)->DoDragDrop(Source, DragItem, Target, dwLegalEffect);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::Select(LPDISPATCH Selection/*[in]*/, LPDISPATCH ActiveObject/*[in]*/, 
                              Owc10_xp::PivotScrollTypeEnum ScrollType/*[in,def,opt]*/, 
                              VARIANT_BOOL Update/*[in,def,opt]*/, 
                              VARIANT_BOOL Notify/*[in,def,opt]*/)
{
  return (*this)->Select(Selection, ActiveObject, ScrollType, Update, Notify);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_ActiveObject(LPDISPATCH* ActiveObject/*[out,retval]*/)
{
  return (*this)->get_ActiveObject(ActiveObject);
}

template <class T> LPDISPATCH __fastcall
TCOMIPivotControlT<T>::get_ActiveObject(void)
{
  LPDISPATCH ActiveObject;
  OLECHECK(this->get_ActiveObject((LPDISPATCH*)&ActiveObject));
  return ActiveObject;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::_set_ActiveObject(LPDISPATCH ActiveObject/*[in]*/)
{
  return (*this)->_set_ActiveObject(ActiveObject);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_Commands(Owc10_xp::OCCommands** Commands/*[out,retval]*/)
{
  return (*this)->get_Commands(Commands);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_Commands(Owc10_xp::OCCommandsPtr* Commands/*[out,retval]*/)
{
  return (*this)->get_Commands(OCCommands**)Commands);
}

template <class T> Owc10_xp::OCCommandsPtr __fastcall
TCOMIPivotControlT<T>::get_Commands(void)
{
  Owc10_xp::OCCommands* Commands;
  OLECHECK(this->get_Commands((Owc10_xp::OCCommands**)&Commands));
  return (Owc10_xp::OCCommandsPtr)Commands;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::ShowHelp(long Topic/*[in]*/)
{
  return (*this)->ShowHelp(Topic);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::ShowAbout(void)
{
  return (*this)->ShowAbout();
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_UserMode(VARIANT_BOOL* UserMode/*[out,retval]*/)
{
  return (*this)->get_UserMode(UserMode);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_UserMode(TOLEBOOL* UserMode/*[out,retval]*/)
{
  return (*this)->get_UserMode(VARIANT_BOOL*)UserMode);
}

template <class T> TOLEBOOL __fastcall
TCOMIPivotControlT<T>::get_UserMode(void)
{
  VARIANT_BOOL UserMode;
  OLECHECK(this->get_UserMode((VARIANT_BOOL*)&UserMode));
  return (TOLEBOOL)UserMode;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::ShowContextMenu(long x/*[in]*/, long y/*[in]*/, VARIANT Menu/*[in]*/)
{
  return (*this)->ShowContextMenu(x, y, Menu);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_DataMemberCaption(BSTR* Caption/*[out,retval]*/)
{
  return (*this)->get_DataMemberCaption(Caption);
}

template <class T> BSTR __fastcall
TCOMIPivotControlT<T>::get_DataMemberCaption(void)
{
  BSTR Caption = 0;
  OLECHECK(this->get_DataMemberCaption((BSTR*)&Caption));
  return Caption;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::set_DataMemberCaption(BSTR Caption/*[in]*/)
{
  return (*this)->set_DataMemberCaption(Caption);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_DataSourceEx(LPDISPATCH* DataSourceEx/*[out,retval]*/)
{
  return (*this)->get_DataSourceEx(DataSourceEx);
}

template <class T> LPDISPATCH __fastcall
TCOMIPivotControlT<T>::get_DataSourceEx(void)
{
  LPDISPATCH DataSourceEx;
  OLECHECK(this->get_DataSourceEx((LPDISPATCH*)&DataSourceEx));
  return DataSourceEx;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::_set_DataSourceEx(LPDISPATCH DataSourceEx/*[in]*/)
{
  return (*this)->_set_DataSourceEx(DataSourceEx);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::StartEdit(VARIANT InitialValue/*[in,opt]*/, 
                                 Owc10_xp::PivotArrowModeEnum ArrowMode/*[in,def,opt]*/, 
                                 Owc10_xp::PivotCaretPositionEnum CaretPosition/*[in,def,opt]*/)
{
  return (*this)->StartEdit(InitialValue, ArrowMode, CaretPosition);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::EndEdit(VARIANT_BOOL Accept/*[in,def,opt]*/)
{
  return (*this)->EndEdit(Accept);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::CancelDragDrop(void)
{
  return (*this)->CancelDragDrop();
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_IsDirty(VARIANT_BOOL* IsDirty/*[out,retval]*/)
{
  return (*this)->get_IsDirty(IsDirty);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_IsDirty(TOLEBOOL* IsDirty/*[out,retval]*/)
{
  return (*this)->get_IsDirty(VARIANT_BOOL*)IsDirty);
}

template <class T> TOLEBOOL __fastcall
TCOMIPivotControlT<T>::get_IsDirty(void)
{
  VARIANT_BOOL IsDirty;
  OLECHECK(this->get_IsDirty((VARIANT_BOOL*)&IsDirty));
  return (TOLEBOOL)IsDirty;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::set_IsDirty(VARIANT_BOOL IsDirty/*[in]*/)
{
  return (*this)->set_IsDirty(IsDirty);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::set_IsDirty(TOLEBOOL IsDirty/*[in]*/)
{
  return (*this)->set_IsDirty(VARIANT_BOOL)IsDirty);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_CubeProvider(BSTR* CubeProvider/*[out,retval]*/)
{
  return (*this)->get_CubeProvider(CubeProvider);
}

template <class T> BSTR __fastcall
TCOMIPivotControlT<T>::get_CubeProvider(void)
{
  BSTR CubeProvider = 0;
  OLECHECK(this->get_CubeProvider((BSTR*)&CubeProvider));
  return CubeProvider;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::set_CubeProvider(BSTR CubeProvider/*[in]*/)
{
  return (*this)->set_CubeProvider(CubeProvider);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_SelectionType(BSTR* SelectionType/*[out,retval]*/)
{
  return (*this)->get_SelectionType(SelectionType);
}

template <class T> BSTR __fastcall
TCOMIPivotControlT<T>::get_SelectionType(void)
{
  BSTR SelectionType = 0;
  OLECHECK(this->get_SelectionType((BSTR*)&SelectionType));
  return SelectionType;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_DisplayScreenTips(VARIANT_BOOL* DisplayScreenTips/*[out,retval]*/)
{
  return (*this)->get_DisplayScreenTips(DisplayScreenTips);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_DisplayScreenTips(TOLEBOOL* DisplayScreenTips/*[out,retval]*/)
{
  return (*this)->get_DisplayScreenTips(VARIANT_BOOL*)DisplayScreenTips);
}

template <class T> TOLEBOOL __fastcall
TCOMIPivotControlT<T>::get_DisplayScreenTips(void)
{
  VARIANT_BOOL DisplayScreenTips;
  OLECHECK(this->get_DisplayScreenTips((VARIANT_BOOL*)&DisplayScreenTips));
  return (TOLEBOOL)DisplayScreenTips;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::set_DisplayScreenTips(VARIANT_BOOL DisplayScreenTips/*[in]*/)
{
  return (*this)->set_DisplayScreenTips(DisplayScreenTips);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::set_DisplayScreenTips(TOLEBOOL DisplayScreenTips/*[in]*/)
{
  return (*this)->set_DisplayScreenTips(VARIANT_BOOL)DisplayScreenTips);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_ViewOnlyMode(VARIANT_BOOL* ViewOnlyMode/*[out,retval]*/)
{
  return (*this)->get_ViewOnlyMode(ViewOnlyMode);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_ViewOnlyMode(TOLEBOOL* ViewOnlyMode/*[out,retval]*/)
{
  return (*this)->get_ViewOnlyMode(VARIANT_BOOL*)ViewOnlyMode);
}

template <class T> TOLEBOOL __fastcall
TCOMIPivotControlT<T>::get_ViewOnlyMode(void)
{
  VARIANT_BOOL ViewOnlyMode;
  OLECHECK(this->get_ViewOnlyMode((VARIANT_BOOL*)&ViewOnlyMode));
  return (TOLEBOOL)ViewOnlyMode;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_DisplayDesignTimeUI(VARIANT_BOOL* DisplayDesignTimeUI/*[out,retval]*/)
{
  return (*this)->get_DisplayDesignTimeUI(DisplayDesignTimeUI);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_DisplayDesignTimeUI(TOLEBOOL* DisplayDesignTimeUI/*[out,retval]*/)
{
  return (*this)->get_DisplayDesignTimeUI(VARIANT_BOOL*)DisplayDesignTimeUI);
}

template <class T> TOLEBOOL __fastcall
TCOMIPivotControlT<T>::get_DisplayDesignTimeUI(void)
{
  VARIANT_BOOL DisplayDesignTimeUI;
  OLECHECK(this->get_DisplayDesignTimeUI((VARIANT_BOOL*)&DisplayDesignTimeUI));
  return (TOLEBOOL)DisplayDesignTimeUI;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::set_DisplayDesignTimeUI(VARIANT_BOOL DisplayDesignTimeUI/*[in]*/)
{
  return (*this)->set_DisplayDesignTimeUI(DisplayDesignTimeUI);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::set_DisplayDesignTimeUI(TOLEBOOL DisplayDesignTimeUI/*[in]*/)
{
  return (*this)->set_DisplayDesignTimeUI(VARIANT_BOOL)DisplayDesignTimeUI);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_Toolbar(Mscomctllib_xp::IToolbar** Toolbar/*[out,retval]*/)
{
  return (*this)->get_Toolbar(Toolbar);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_Toolbar(Mscomctllib_xp::IToolbarPtr* Toolbar/*[out,retval]*/)
{
  return (*this)->get_Toolbar(IToolbar**)Toolbar);
}

template <class T> Mscomctllib_xp::IToolbarPtr __fastcall
TCOMIPivotControlT<T>::get_Toolbar(void)
{
  Mscomctllib_xp::IToolbar* Toolbar;
  OLECHECK(this->get_Toolbar((Mscomctllib_xp::IToolbar**)&Toolbar));
  return (Mscomctllib_xp::IToolbarPtr)Toolbar;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_EditMode(Owc10_xp::PivotEditModeEnum* EditMode/*[out,retval]*/)
{
  return (*this)->get_EditMode(EditMode);
}

template <class T> Owc10_xp::PivotEditModeEnum __fastcall
TCOMIPivotControlT<T>::get_EditMode(void)
{
  Owc10_xp::PivotEditModeEnum EditMode;
  OLECHECK(this->get_EditMode((Owc10_xp::PivotEditModeEnum*)&EditMode));
  return EditMode;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_HTMLData(BSTR* HTMLData/*[out,retval]*/)
{
  return (*this)->get_HTMLData(HTMLData);
}

template <class T> BSTR __fastcall
TCOMIPivotControlT<T>::get_HTMLData(void)
{
  BSTR HTMLData = 0;
  OLECHECK(this->get_HTMLData((BSTR*)&HTMLData));
  return HTMLData;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_DataSourceName(BSTR* DataSourceName/*[out,retval]*/)
{
  return (*this)->get_DataSourceName(DataSourceName);
}

template <class T> BSTR __fastcall
TCOMIPivotControlT<T>::get_DataSourceName(void)
{
  BSTR DataSourceName = 0;
  OLECHECK(this->get_DataSourceName((BSTR*)&DataSourceName));
  return DataSourceName;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::set_DataSourceName(BSTR DataSourceName/*[in]*/)
{
  return (*this)->set_DataSourceName(DataSourceName);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_DisplayBranding(VARIANT_BOOL* DisplayBranding/*[out,retval]*/)
{
  return (*this)->get_DisplayBranding(DisplayBranding);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_DisplayBranding(TOLEBOOL* DisplayBranding/*[out,retval]*/)
{
  return (*this)->get_DisplayBranding(VARIANT_BOOL*)DisplayBranding);
}

template <class T> TOLEBOOL __fastcall
TCOMIPivotControlT<T>::get_DisplayBranding(void)
{
  VARIANT_BOOL DisplayBranding;
  OLECHECK(this->get_DisplayBranding((VARIANT_BOOL*)&DisplayBranding));
  return (TOLEBOOL)DisplayBranding;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::set_DisplayBranding(VARIANT_BOOL DisplayBranding/*[in]*/)
{
  return (*this)->set_DisplayBranding(DisplayBranding);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::set_DisplayBranding(TOLEBOOL DisplayBranding/*[in]*/)
{
  return (*this)->set_DisplayBranding(VARIANT_BOOL)DisplayBranding);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_DisplayOfficeLogo(VARIANT_BOOL* DisplayOfficeLogo/*[out,retval]*/)
{
  return (*this)->get_DisplayOfficeLogo(DisplayOfficeLogo);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::get_DisplayOfficeLogo(TOLEBOOL* DisplayOfficeLogo/*[out,retval]*/)
{
  return (*this)->get_DisplayOfficeLogo(VARIANT_BOOL*)DisplayOfficeLogo);
}

template <class T> TOLEBOOL __fastcall
TCOMIPivotControlT<T>::get_DisplayOfficeLogo(void)
{
  VARIANT_BOOL DisplayOfficeLogo;
  OLECHECK(this->get_DisplayOfficeLogo((VARIANT_BOOL*)&DisplayOfficeLogo));
  return (TOLEBOOL)DisplayOfficeLogo;
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::set_DisplayOfficeLogo(VARIANT_BOOL DisplayOfficeLogo/*[in]*/)
{
  return (*this)->set_DisplayOfficeLogo(DisplayOfficeLogo);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::set_DisplayOfficeLogo(TOLEBOOL DisplayOfficeLogo/*[in]*/)
{
  return (*this)->set_DisplayOfficeLogo(VARIANT_BOOL)DisplayOfficeLogo);
}

template <class T> HRESULT __fastcall
TCOMIPivotControlT<T>::OkToBindToControlByName(void)
{
  return (*this)->OkToBindToControlByName();
}

// *********************************************************************//
// DispIntf:  IPivotControl
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B08-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_ActiveView(Owc10_xp::PivotView** View/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveView"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotView**)View /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotView* __fastcall
IPivotControlDispT<T>::get_ActiveView(void)
{
  Owc10_xp::PivotView* View;
  this->get_ActiveView((Owc10_xp::PivotView**)&View);
  return View;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_Selection(LPDISPATCH* Selection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Selection"), DISPID(6031));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Selection /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IPivotControlDispT<T>::get_Selection(void)
{
  LPDISPATCH Selection;
  this->get_Selection((LPDISPATCH*)&Selection);
  return Selection;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::_set_Selection(LPDISPATCH Selection/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Selection"), DISPID(6031));
  TAutoArgs<1> _args;
  _args[1] = Selection /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_DataMember(Msdatasrc_xp::DataMember* DataMember/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataMember"), DISPID(6000));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DataMember /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msdatasrc_xp::DataMember __fastcall
IPivotControlDispT<T>::get_DataMember(void)
{
  Msdatasrc_xp::DataMember DataMember;
  this->get_DataMember((Msdatasrc_xp::DataMember*)&DataMember);
  return DataMember;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::set_DataMember(Msdatasrc_xp::DataMember DataMember/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataMember"), DISPID(6000));
  TAutoArgs<1> _args;
  _args[1] = DataMember /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_ActiveData(Owc10_xp::PivotData** Data/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveData"), DISPID(6048));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotData**)Data /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotData* __fastcall
IPivotControlDispT<T>::get_ActiveData(void)
{
  Owc10_xp::PivotData* Data;
  this->get_ActiveData((Owc10_xp::PivotData**)&Data);
  return Data;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_Version(BSTR* Version/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Version /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPivotControlDispT<T>::get_Version(void)
{
  BSTR Version;
  this->get_Version((BSTR*)&Version);
  return Version;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_HasDetails(VARIANT_BOOL* HasDetails/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasDetails"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HasDetails /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPivotControlDispT<T>::get_HasDetails(void)
{
  VARIANT_BOOL HasDetails;
  this->get_HasDetails((VARIANT_BOOL*)&HasDetails);
  return HasDetails;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_DisplayToolbar(VARIANT_BOOL* DisplayToolbar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayToolbar"), DISPID(6008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DisplayToolbar /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPivotControlDispT<T>::get_DisplayToolbar(void)
{
  VARIANT_BOOL DisplayToolbar;
  this->get_DisplayToolbar((VARIANT_BOOL*)&DisplayToolbar);
  return DisplayToolbar;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::set_DisplayToolbar(VARIANT_BOOL DisplayToolbar/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayToolbar"), DISPID(6008));
  TAutoArgs<1> _args;
  _args[1] = DisplayToolbar /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_AllowGrouping(VARIANT_BOOL* AllowGrouping/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowGrouping"), DISPID(6009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AllowGrouping /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPivotControlDispT<T>::get_AllowGrouping(void)
{
  VARIANT_BOOL AllowGrouping;
  this->get_AllowGrouping((VARIANT_BOOL*)&AllowGrouping);
  return AllowGrouping;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::set_AllowGrouping(VARIANT_BOOL AllowGrouping/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowGrouping"), DISPID(6009));
  TAutoArgs<1> _args;
  _args[1] = AllowGrouping /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_AllowFiltering(VARIANT_BOOL* AllowFiltering/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowFiltering"), DISPID(6010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AllowFiltering /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPivotControlDispT<T>::get_AllowFiltering(void)
{
  VARIANT_BOOL AllowFiltering;
  this->get_AllowFiltering((VARIANT_BOOL*)&AllowFiltering);
  return AllowFiltering;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::set_AllowFiltering(VARIANT_BOOL AllowFiltering/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowFiltering"), DISPID(6010));
  TAutoArgs<1> _args;
  _args[1] = AllowFiltering /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_AllowDetails(VARIANT_BOOL* EnableDetails/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowDetails"), DISPID(6011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(EnableDetails /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPivotControlDispT<T>::get_AllowDetails(void)
{
  VARIANT_BOOL EnableDetails;
  this->get_AllowDetails((VARIANT_BOOL*)&EnableDetails);
  return EnableDetails;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::set_AllowDetails(VARIANT_BOOL EnableDetails/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowDetails"), DISPID(6011));
  TAutoArgs<1> _args;
  _args[1] = EnableDetails /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_AllowPropertyToolbox(VARIANT_BOOL* AllowPropertyToolbox/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowPropertyToolbox"), DISPID(6012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AllowPropertyToolbox /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPivotControlDispT<T>::get_AllowPropertyToolbox(void)
{
  VARIANT_BOOL AllowPropertyToolbox;
  this->get_AllowPropertyToolbox((VARIANT_BOOL*)&AllowPropertyToolbox);
  return AllowPropertyToolbox;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::set_AllowPropertyToolbox(VARIANT_BOOL AllowPropertyToolbox/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowPropertyToolbox"), DISPID(6012));
  TAutoArgs<1> _args;
  _args[1] = AllowPropertyToolbox /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_AllowCustomOrdering(VARIANT_BOOL* AllowCustomOrdering/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowCustomOrdering"), DISPID(6027));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AllowCustomOrdering /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPivotControlDispT<T>::get_AllowCustomOrdering(void)
{
  VARIANT_BOOL AllowCustomOrdering;
  this->get_AllowCustomOrdering((VARIANT_BOOL*)&AllowCustomOrdering);
  return AllowCustomOrdering;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::set_AllowCustomOrdering(VARIANT_BOOL AllowCustomOrdering/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowCustomOrdering"), DISPID(6027));
  TAutoArgs<1> _args;
  _args[1] = AllowCustomOrdering /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_AutoFit(VARIANT_BOOL* AutoFit/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoFit"), DISPID(6013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AutoFit /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPivotControlDispT<T>::get_AutoFit(void)
{
  VARIANT_BOOL AutoFit;
  this->get_AutoFit((VARIANT_BOOL*)&AutoFit);
  return AutoFit;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::set_AutoFit(VARIANT_BOOL AutoFit/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoFit"), DISPID(6013));
  TAutoArgs<1> _args;
  _args[1] = AutoFit /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::Export(BSTR Filename/*[in,def,opt]*/, 
                              Owc10_xp::PivotExportActionEnum Action/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Export"), DISPID(DISPID_UNKNOWN/*[1610743830]*/));
  TAutoArgs<2> _args;
  _args[1] = Filename /*[VT_BSTR:0]*/;
  _args[2] = (int)Action /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::set_DataSource(Msdatasrc_xp::DataSource* DataSource/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataSource"), DISPID(6037));
  TAutoArgs<1> _args;
  _args[1] = (LPUNKNOWN)(Msdatasrc_xp::DataSource*)DataSource /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::_set_DataSource(Msdatasrc_xp::DataSource* DataSource/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataSource"), DISPID(6037));
  TAutoArgs<1> _args;
  _args[1] = (LPUNKNOWN)(Msdatasrc_xp::DataSource*)DataSource /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_DataSource(Msdatasrc_xp::DataSource** DataSource/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataSource"), DISPID(6037));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPUNKNOWN*)(Msdatasrc_xp::DataSource**)DataSource /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msdatasrc_xp::DataSource* __fastcall
IPivotControlDispT<T>::get_DataSource(void)
{
  Msdatasrc_xp::DataSource* DataSource;
  this->get_DataSource((Msdatasrc_xp::DataSource**)&DataSource);
  return DataSource;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_BackColor(VARIANT* BackColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(6014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BackColor /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IPivotControlDispT<T>::get_BackColor(void)
{
  VARIANT BackColor;
  this->get_BackColor((VARIANT*)&BackColor);
  return BackColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::set_BackColor(VARIANT BackColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(6014));
  TAutoArgs<1> _args;
  _args[1] = BackColor /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_DisplayExpandIndicator(VARIANT_BOOL* DisplayExpandIndicator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayExpandIndicator"), DISPID(6015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DisplayExpandIndicator /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPivotControlDispT<T>::get_DisplayExpandIndicator(void)
{
  VARIANT_BOOL DisplayExpandIndicator;
  this->get_DisplayExpandIndicator((VARIANT_BOOL*)&DisplayExpandIndicator);
  return DisplayExpandIndicator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::set_DisplayExpandIndicator(VARIANT_BOOL DisplayExpandIndicator/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayExpandIndicator"), DISPID(6015));
  TAutoArgs<1> _args;
  _args[1] = DisplayExpandIndicator /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_RightToLeft(VARIANT_BOOL* RightToLeft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RightToLeft"), DISPID(6016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RightToLeft /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPivotControlDispT<T>::get_RightToLeft(void)
{
  VARIANT_BOOL RightToLeft;
  this->get_RightToLeft((VARIANT_BOOL*)&RightToLeft);
  return RightToLeft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::set_RightToLeft(VARIANT_BOOL RightToLeft/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RightToLeft"), DISPID(6016));
  TAutoArgs<1> _args;
  _args[1] = RightToLeft /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_MaxWidth(long* MaxWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxWidth"), DISPID(6017));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(MaxWidth /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPivotControlDispT<T>::get_MaxWidth(void)
{
  long MaxWidth;
  this->get_MaxWidth((long*)&MaxWidth);
  return MaxWidth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::set_MaxWidth(long MaxWidth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxWidth"), DISPID(6017));
  TAutoArgs<1> _args;
  _args[1] = MaxWidth /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_MaxHeight(long* MaxHeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxHeight"), DISPID(6018));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(MaxHeight /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPivotControlDispT<T>::get_MaxHeight(void)
{
  long MaxHeight;
  this->get_MaxHeight((long*)&MaxHeight);
  return MaxHeight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::set_MaxHeight(long MaxHeight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxHeight"), DISPID(6018));
  TAutoArgs<1> _args;
  _args[1] = MaxHeight /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_Width(long* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(DISPID_UNKNOWN/*[1610743844]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPivotControlDispT<T>::get_Width(void)
{
  long Width;
  this->get_Width((long*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::set_Width(long Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1610743844));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_Height(long* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(DISPID_UNKNOWN/*[1610743846]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPivotControlDispT<T>::get_Height(void)
{
  long Height;
  this->get_Height((long*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::set_Height(long Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1610743846));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_XMLData(BSTR* XMLData/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XMLData"), DISPID(6002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(XMLData /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPivotControlDispT<T>::get_XMLData(void)
{
  BSTR XMLData;
  this->get_XMLData((BSTR*)&XMLData);
  return XMLData;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::set_XMLData(BSTR XMLData/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("XMLData"), DISPID(6002));
  TAutoArgs<1> _args;
  _args[1] = XMLData /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::Refresh()
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(DISPID_UNKNOWN/*[1610743850]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_DisplayPropertyToolbox(VARIANT_BOOL* DisplayPropertyToolbox/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayPropertyToolbox"), DISPID(4002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DisplayPropertyToolbox /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPivotControlDispT<T>::get_DisplayPropertyToolbox(void)
{
  VARIANT_BOOL DisplayPropertyToolbox;
  this->get_DisplayPropertyToolbox((VARIANT_BOOL*)&DisplayPropertyToolbox);
  return DisplayPropertyToolbox;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::set_DisplayPropertyToolbox(VARIANT_BOOL DisplayPropertyToolbox/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayPropertyToolbox"), DISPID(4002));
  TAutoArgs<1> _args;
  _args[1] = DisplayPropertyToolbox /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_DisplayFieldList(VARIANT_BOOL* DisplayFieldList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayFieldList"), DISPID(4001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DisplayFieldList /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPivotControlDispT<T>::get_DisplayFieldList(void)
{
  VARIANT_BOOL DisplayFieldList;
  this->get_DisplayFieldList((VARIANT_BOOL*)&DisplayFieldList);
  return DisplayFieldList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::set_DisplayFieldList(VARIANT_BOOL DisplayFieldList/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayFieldList"), DISPID(4001));
  TAutoArgs<1> _args;
  _args[1] = DisplayFieldList /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_Constants(LPDISPATCH* Constants/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Constants"), DISPID(DISPID_UNKNOWN/*[1610743855]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Constants /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IPivotControlDispT<T>::get_Constants(void)
{
  LPDISPATCH Constants;
  this->get_Constants((LPDISPATCH*)&Constants);
  return Constants;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_MajorVersion(long* MajorVersion/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MajorVersion"), DISPID(DISPID_UNKNOWN/*[1610743856]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(MajorVersion /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPivotControlDispT<T>::get_MajorVersion(void)
{
  long MajorVersion;
  this->get_MajorVersion((long*)&MajorVersion);
  return MajorVersion;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_MinorVersion(BSTR* MinorVersion/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinorVersion"), DISPID(DISPID_UNKNOWN/*[1610743857]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(MinorVersion /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPivotControlDispT<T>::get_MinorVersion(void)
{
  BSTR MinorVersion;
  this->get_MinorVersion((BSTR*)&MinorVersion);
  return MinorVersion;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_BuildNumber(BSTR* BuildNumber/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuildNumber"), DISPID(DISPID_UNKNOWN/*[1610743858]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BuildNumber /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPivotControlDispT<T>::get_BuildNumber(void)
{
  BSTR BuildNumber;
  this->get_BuildNumber((BSTR*)&BuildNumber);
  return BuildNumber;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::ExportPicture(BSTR Filename/*[in,def,opt]*/, BSTR FilterName/*[in,def,opt]*/
                                     , long Width/*[in,def,opt]*/, long Height/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExportPicture"), DISPID(DISPID_UNKNOWN/*[1610743859]*/));
  TAutoArgs<4> _args;
  _args[1] = Filename /*[VT_BSTR:0]*/;
  _args[2] = FilterName /*[VT_BSTR:0]*/;
  _args[3] = Width /*[VT_I4:0]*/;
  _args[4] = Height /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_ConnectionString(BSTR* ConnectionString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionString"), DISPID(6038));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ConnectionString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPivotControlDispT<T>::get_ConnectionString(void)
{
  BSTR ConnectionString;
  this->get_ConnectionString((BSTR*)&ConnectionString);
  return ConnectionString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::set_ConnectionString(BSTR ConnectionString/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionString"), DISPID(6038));
  TAutoArgs<1> _args;
  _args[1] = ConnectionString /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_CommandText(BSTR* CommandText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CommandText"), DISPID(6036));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CommandText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPivotControlDispT<T>::get_CommandText(void)
{
  BSTR CommandText;
  this->get_CommandText((BSTR*)&CommandText);
  return CommandText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::set_CommandText(BSTR CommandText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CommandText"), DISPID(6036));
  TAutoArgs<1> _args;
  _args[1] = CommandText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_ProviderType(Owc10_xp::ProviderType* ProviderType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ProviderType"), DISPID(DISPID_UNKNOWN/*[1610743864]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ProviderType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ProviderType __fastcall
IPivotControlDispT<T>::get_ProviderType(void)
{
  Owc10_xp::ProviderType ProviderType;
  this->get_ProviderType((Owc10_xp::ProviderType*)&ProviderType);
  return ProviderType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743865]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IPivotControlDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_MemberExpand(Owc10_xp::PivotTableMemberExpandEnum* MemberExpand/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MemberExpand"), DISPID(DISPID_UNKNOWN/*[1610743866]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)MemberExpand /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotTableMemberExpandEnum __fastcall
IPivotControlDispT<T>::get_MemberExpand(void)
{
  Owc10_xp::PivotTableMemberExpandEnum MemberExpand;
  this->get_MemberExpand((Owc10_xp::PivotTableMemberExpandEnum*)&MemberExpand);
  return MemberExpand;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::set_MemberExpand(Owc10_xp::PivotTableMemberExpandEnum MemberExpand/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MemberExpand"), DISPID(1610743866));
  TAutoArgs<1> _args;
  _args[1] = (int)MemberExpand /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::LocateDataSource()
{
  _TDispID _dispid(*this, OLETEXT("LocateDataSource"), DISPID(DISPID_UNKNOWN/*[1610743868]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::_set_Connection(Adodb_xp::Connection* Connection/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Connection"), DISPID(DISPID_UNKNOWN/*[1610743869]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Adodb_xp::Connection*)Connection /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_Connection(Adodb_xp::Connection** Connection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Connection"), DISPID(1610743869));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Adodb_xp::Connection**)Connection /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Adodb_xp::Connection* __fastcall
IPivotControlDispT<T>::get_Connection(void)
{
  Adodb_xp::Connection* Connection;
  this->get_Connection((Adodb_xp::Connection**)&Connection);
  return Connection;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::Copy(LPDISPATCH Selection/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Copy"), DISPID(DISPID_UNKNOWN/*[1610743871]*/));
  TAutoArgs<1> _args;
  _args[1] = Selection /*[VT_DISPATCH:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_RevisionNumber(BSTR* RevisionNumber/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RevisionNumber"), DISPID(DISPID_UNKNOWN/*[1610743872]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RevisionNumber /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPivotControlDispT<T>::get_RevisionNumber(void)
{
  BSTR RevisionNumber;
  this->get_RevisionNumber((BSTR*)&RevisionNumber);
  return RevisionNumber;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_DisplayAlerts(VARIANT_BOOL* DisplayAlerts/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayAlerts"), DISPID(6025));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DisplayAlerts /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPivotControlDispT<T>::get_DisplayAlerts(void)
{
  VARIANT_BOOL DisplayAlerts;
  this->get_DisplayAlerts((VARIANT_BOOL*)&DisplayAlerts);
  return DisplayAlerts;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::set_DisplayAlerts(VARIANT_BOOL DisplayAlerts/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayAlerts"), DISPID(6025));
  TAutoArgs<1> _args;
  _args[1] = DisplayAlerts /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_DataMemberStrings(VARIANT* DataMemberStrings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataMemberStrings"), DISPID(DISPID_UNKNOWN/*[1610743875]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DataMemberStrings /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IPivotControlDispT<T>::get_DataMemberStrings(void)
{
  VARIANT DataMemberStrings;
  this->get_DataMemberStrings((VARIANT*)&DataMemberStrings);
  return DataMemberStrings;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_ClassFactory(Owc10_xp::PivotClassFactory** ClassFactory/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClassFactory"), DISPID(DISPID_UNKNOWN/*[1610743876]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotClassFactory**)ClassFactory /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotClassFactory* __fastcall
IPivotControlDispT<T>::get_ClassFactory(void)
{
  Owc10_xp::PivotClassFactory* ClassFactory;
  this->get_ClassFactory((Owc10_xp::PivotClassFactory**)&ClassFactory);
  return ClassFactory;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::_set_ClassFactory(Owc10_xp::PivotClassFactory* ClassFactory/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClassFactory"), DISPID(1610743876));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::PivotClassFactory*)ClassFactory /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_Left(long* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(DISPID_UNKNOWN/*[1610743878]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPivotControlDispT<T>::get_Left(void)
{
  long Left;
  this->get_Left((long*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_Top(long* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(DISPID_UNKNOWN/*[1610743879]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPivotControlDispT<T>::get_Top(void)
{
  long Top;
  this->get_Top((long*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_Hwnd(long* Hwnd/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Hwnd"), DISPID(DISPID_UNKNOWN/*[1610743880]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Hwnd /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPivotControlDispT<T>::get_Hwnd(void)
{
  long Hwnd;
  this->get_Hwnd((long*)&Hwnd);
  return Hwnd;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::DoDragDrop(Owc10_xp::DropSource* Source/*[in]*/, LPDISPATCH DragItem/*[in]*/
                                  , Owc10_xp::DropTarget* Target/*[in]*/, long dwLegalEffect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DoDragDrop"), DISPID(DISPID_UNKNOWN/*[1610743881]*/));
  TAutoArgs<4> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::DropSource*)Source /*[VT_USERDEFINED:1]*/;
  _args[2] = DragItem /*[VT_DISPATCH:0]*/;
  _args[3] = (LPDISPATCH)(Owc10_xp::DropTarget*)Target /*[VT_USERDEFINED:1]*/;
  _args[4] = dwLegalEffect /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::Select(LPDISPATCH Selection/*[in]*/, LPDISPATCH ActiveObject/*[in]*/, 
                              Owc10_xp::PivotScrollTypeEnum ScrollType/*[in,def,opt]*/, 
                              VARIANT_BOOL Update/*[in,def,opt]*/, 
                              VARIANT_BOOL Notify/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Select"), DISPID(DISPID_UNKNOWN/*[1610743882]*/));
  TAutoArgs<5> _args;
  _args[1] = Selection /*[VT_DISPATCH:0]*/;
  _args[2] = ActiveObject /*[VT_DISPATCH:0]*/;
  _args[3] = (int)ScrollType /*[VT_USERDEFINED:0]*/;
  _args[4] = Update /*[VT_BOOL:0]*/;
  _args[5] = Notify /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_ActiveObject(LPDISPATCH* ActiveObject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveObject"), DISPID(DISPID_UNKNOWN/*[1610743883]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ActiveObject /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IPivotControlDispT<T>::get_ActiveObject(void)
{
  LPDISPATCH ActiveObject;
  this->get_ActiveObject((LPDISPATCH*)&ActiveObject);
  return ActiveObject;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::_set_ActiveObject(LPDISPATCH ActiveObject/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveObject"), DISPID(1610743883));
  TAutoArgs<1> _args;
  _args[1] = ActiveObject /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_Commands(Owc10_xp::OCCommands** Commands/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Commands"), DISPID(DISPID_UNKNOWN/*[1610743885]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::OCCommands**)Commands /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::OCCommands* __fastcall
IPivotControlDispT<T>::get_Commands(void)
{
  Owc10_xp::OCCommands* Commands;
  this->get_Commands((Owc10_xp::OCCommands**)&Commands);
  return Commands;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::ShowHelp(long Topic/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowHelp"), DISPID(DISPID_UNKNOWN/*[1610743886]*/));
  TAutoArgs<1> _args;
  _args[1] = Topic /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::ShowAbout()
{
  _TDispID _dispid(*this, OLETEXT("ShowAbout"), DISPID(DISPID_UNKNOWN/*[1610743887]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_UserMode(VARIANT_BOOL* UserMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserMode"), DISPID(DISPID_UNKNOWN/*[1610743888]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(UserMode /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPivotControlDispT<T>::get_UserMode(void)
{
  VARIANT_BOOL UserMode;
  this->get_UserMode((VARIANT_BOOL*)&UserMode);
  return UserMode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::ShowContextMenu(long x/*[in]*/, long y/*[in]*/, VARIANT Menu/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowContextMenu"), DISPID(DISPID_UNKNOWN/*[1610743889]*/));
  TAutoArgs<3> _args;
  _args[1] = x /*[VT_I4:0]*/;
  _args[2] = y /*[VT_I4:0]*/;
  _args[3] = Menu /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_DataMemberCaption(BSTR* Caption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataMemberCaption"), DISPID(6040));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Caption /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPivotControlDispT<T>::get_DataMemberCaption(void)
{
  BSTR Caption;
  this->get_DataMemberCaption((BSTR*)&Caption);
  return Caption;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::set_DataMemberCaption(BSTR Caption/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataMemberCaption"), DISPID(6040));
  TAutoArgs<1> _args;
  _args[1] = Caption /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_DataSourceEx(LPDISPATCH* DataSourceEx/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataSourceEx"), DISPID(DISPID_UNKNOWN/*[1610743892]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DataSourceEx /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IPivotControlDispT<T>::get_DataSourceEx(void)
{
  LPDISPATCH DataSourceEx;
  this->get_DataSourceEx((LPDISPATCH*)&DataSourceEx);
  return DataSourceEx;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::_set_DataSourceEx(LPDISPATCH DataSourceEx/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataSourceEx"), DISPID(1610743892));
  TAutoArgs<1> _args;
  _args[1] = DataSourceEx /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::StartEdit(VARIANT InitialValue/*[in,opt]*/, 
                                 Owc10_xp::PivotArrowModeEnum ArrowMode/*[in,def,opt]*/, 
                                 Owc10_xp::PivotCaretPositionEnum CaretPosition/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartEdit"), DISPID(DISPID_UNKNOWN/*[1610743894]*/));
  TAutoArgs<3> _args;
  _args[1] = InitialValue /*[VT_VARIANT:0]*/;
  _args[2] = (int)ArrowMode /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)CaretPosition /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::EndEdit(VARIANT_BOOL Accept/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndEdit"), DISPID(DISPID_UNKNOWN/*[1610743895]*/));
  TAutoArgs<1> _args;
  _args[1] = Accept /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::CancelDragDrop()
{
  _TDispID _dispid(*this, OLETEXT("CancelDragDrop"), DISPID(DISPID_UNKNOWN/*[1610743896]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_IsDirty(VARIANT_BOOL* IsDirty/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsDirty"), DISPID(6047));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(IsDirty /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPivotControlDispT<T>::get_IsDirty(void)
{
  VARIANT_BOOL IsDirty;
  this->get_IsDirty((VARIANT_BOOL*)&IsDirty);
  return IsDirty;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::set_IsDirty(VARIANT_BOOL IsDirty/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsDirty"), DISPID(6047));
  TAutoArgs<1> _args;
  _args[1] = IsDirty /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_CubeProvider(BSTR* CubeProvider/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CubeProvider"), DISPID(6041));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CubeProvider /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPivotControlDispT<T>::get_CubeProvider(void)
{
  BSTR CubeProvider;
  this->get_CubeProvider((BSTR*)&CubeProvider);
  return CubeProvider;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::set_CubeProvider(BSTR CubeProvider/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CubeProvider"), DISPID(6041));
  TAutoArgs<1> _args;
  _args[1] = CubeProvider /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_SelectionType(BSTR* SelectionType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectionType"), DISPID(DISPID_UNKNOWN/*[1610743901]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SelectionType /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPivotControlDispT<T>::get_SelectionType(void)
{
  BSTR SelectionType;
  this->get_SelectionType((BSTR*)&SelectionType);
  return SelectionType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_DisplayScreenTips(VARIANT_BOOL* DisplayScreenTips/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayScreenTips"), DISPID(6042));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DisplayScreenTips /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPivotControlDispT<T>::get_DisplayScreenTips(void)
{
  VARIANT_BOOL DisplayScreenTips;
  this->get_DisplayScreenTips((VARIANT_BOOL*)&DisplayScreenTips);
  return DisplayScreenTips;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::set_DisplayScreenTips(VARIANT_BOOL DisplayScreenTips/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayScreenTips"), DISPID(6042));
  TAutoArgs<1> _args;
  _args[1] = DisplayScreenTips /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_ViewOnlyMode(VARIANT_BOOL* ViewOnlyMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ViewOnlyMode"), DISPID(DISPID_UNKNOWN/*[1610743904]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ViewOnlyMode /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPivotControlDispT<T>::get_ViewOnlyMode(void)
{
  VARIANT_BOOL ViewOnlyMode;
  this->get_ViewOnlyMode((VARIANT_BOOL*)&ViewOnlyMode);
  return ViewOnlyMode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_DisplayDesignTimeUI(VARIANT_BOOL* DisplayDesignTimeUI/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayDesignTimeUI"), DISPID(6050));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DisplayDesignTimeUI /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPivotControlDispT<T>::get_DisplayDesignTimeUI(void)
{
  VARIANT_BOOL DisplayDesignTimeUI;
  this->get_DisplayDesignTimeUI((VARIANT_BOOL*)&DisplayDesignTimeUI);
  return DisplayDesignTimeUI;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::set_DisplayDesignTimeUI(VARIANT_BOOL DisplayDesignTimeUI/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayDesignTimeUI"), DISPID(6050));
  TAutoArgs<1> _args;
  _args[1] = DisplayDesignTimeUI /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_Toolbar(Mscomctllib_xp::IToolbar** Toolbar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Toolbar"), DISPID(DISPID_UNKNOWN/*[1610743907]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::IToolbar**)Toolbar /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::IToolbar* __fastcall
IPivotControlDispT<T>::get_Toolbar(void)
{
  Mscomctllib_xp::IToolbar* Toolbar;
  this->get_Toolbar((Mscomctllib_xp::IToolbar**)&Toolbar);
  return Toolbar;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_EditMode(Owc10_xp::PivotEditModeEnum* EditMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EditMode"), DISPID(DISPID_UNKNOWN/*[1610743908]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)EditMode /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotEditModeEnum __fastcall
IPivotControlDispT<T>::get_EditMode(void)
{
  Owc10_xp::PivotEditModeEnum EditMode;
  this->get_EditMode((Owc10_xp::PivotEditModeEnum*)&EditMode);
  return EditMode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_HTMLData(BSTR* HTMLData/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLData"), DISPID(DISPID_UNKNOWN/*[1610743909]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HTMLData /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPivotControlDispT<T>::get_HTMLData(void)
{
  BSTR HTMLData;
  this->get_HTMLData((BSTR*)&HTMLData);
  return HTMLData;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_DataSourceName(BSTR* DataSourceName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataSourceName"), DISPID(DISPID_UNKNOWN/*[1610743910]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DataSourceName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPivotControlDispT<T>::get_DataSourceName(void)
{
  BSTR DataSourceName;
  this->get_DataSourceName((BSTR*)&DataSourceName);
  return DataSourceName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::set_DataSourceName(BSTR DataSourceName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataSourceName"), DISPID(1610743910));
  TAutoArgs<1> _args;
  _args[1] = DataSourceName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_DisplayBranding(VARIANT_BOOL* DisplayBranding/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayBranding"), DISPID(DISPID_UNKNOWN/*[1610743912]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DisplayBranding /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPivotControlDispT<T>::get_DisplayBranding(void)
{
  VARIANT_BOOL DisplayBranding;
  this->get_DisplayBranding((VARIANT_BOOL*)&DisplayBranding);
  return DisplayBranding;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::set_DisplayBranding(VARIANT_BOOL DisplayBranding/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayBranding"), DISPID(1610743912));
  TAutoArgs<1> _args;
  _args[1] = DisplayBranding /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::get_DisplayOfficeLogo(VARIANT_BOOL* DisplayOfficeLogo/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayOfficeLogo"), DISPID(DISPID_UNKNOWN/*[1610743914]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DisplayOfficeLogo /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPivotControlDispT<T>::get_DisplayOfficeLogo(void)
{
  VARIANT_BOOL DisplayOfficeLogo;
  this->get_DisplayOfficeLogo((VARIANT_BOOL*)&DisplayOfficeLogo);
  return DisplayOfficeLogo;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::set_DisplayOfficeLogo(VARIANT_BOOL DisplayOfficeLogo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayOfficeLogo"), DISPID(1610743914));
  TAutoArgs<1> _args;
  _args[1] = DisplayOfficeLogo /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotControlDispT<T>::OkToBindToControlByName()
{
  _TDispID _dispid(*this, OLETEXT("OkToBindToControlByName"), DISPID(DISPID_UNKNOWN/*[1610743916]*/));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  PivotClassFactory
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {73F4D511-C851-11D2-8F2D-00600893B533}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotClassFactoryDispT<T>::get_NewDetailCell(Owc10_xp::PivotDetailCell* DetailCell/*[in]*/, 
                                             LPDISPATCH* NewDetailCell/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NewDetailCell"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::PivotDetailCell*)DetailCell /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(NewDetailCell /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PivotClassFactoryDispT<T>::get_NewDetailCell(Owc10_xp::PivotDetailCell* DetailCell/*[in]*/)
{
  LPDISPATCH NewDetailCell;
  this->get_NewDetailCell(DetailCell, (LPDISPATCH*)&NewDetailCell);
  return NewDetailCell;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotClassFactoryDispT<T>::get_NewAggregate(Owc10_xp::PivotAggregate* Aggregate/*[in]*/, 
                                            LPDISPATCH* NewAggregate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NewAggregate"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::PivotAggregate*)Aggregate /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(NewAggregate /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PivotClassFactoryDispT<T>::get_NewAggregate(Owc10_xp::PivotAggregate* Aggregate/*[in]*/)
{
  LPDISPATCH NewAggregate;
  this->get_NewAggregate(Aggregate, (LPDISPATCH*)&NewAggregate);
  return NewAggregate;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotClassFactoryDispT<T>::get_NewRowMember(Owc10_xp::PivotAxisMember* RowMember/*[in]*/, 
                                            LPDISPATCH* NewRowMember/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NewRowMember"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::PivotAxisMember*)RowMember /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(NewRowMember /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PivotClassFactoryDispT<T>::get_NewRowMember(Owc10_xp::PivotAxisMember* RowMember/*[in]*/)
{
  LPDISPATCH NewRowMember;
  this->get_NewRowMember(RowMember, (LPDISPATCH*)&NewRowMember);
  return NewRowMember;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotClassFactoryDispT<T>::get_NewColumnMember(Owc10_xp::PivotColumnMember* ColumnMember/*[in]*/, 
                                               LPDISPATCH* NewColumnMember/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NewColumnMember"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::PivotColumnMember*)ColumnMember /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(NewColumnMember /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PivotClassFactoryDispT<T>::get_NewColumnMember(Owc10_xp::PivotColumnMember* ColumnMember/*[in]*/)
{
  LPDISPATCH NewColumnMember;
  this->get_NewColumnMember(ColumnMember, (LPDISPATCH*)&NewColumnMember);
  return NewColumnMember;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotClassFactoryDispT<T>::get_NewCell(Owc10_xp::PivotCell* Cell/*[in]*/, 
                                       LPDISPATCH* NewCell/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NewCell"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::PivotCell*)Cell /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(NewCell /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PivotClassFactoryDispT<T>::get_NewCell(Owc10_xp::PivotCell* Cell/*[in]*/)
{
  LPDISPATCH NewCell;
  this->get_NewCell(Cell, (LPDISPATCH*)&NewCell);
  return NewCell;
}

// *********************************************************************//
// DispIntf:  PivotDetailCell
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B48-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDetailCellDispT<T>::get_Value(VARIANT* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PivotDetailCellDispT<T>::get_Value(void)
{
  VARIANT Value;
  this->get_Value((VARIANT*)&Value);
  return Value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDetailCellDispT<T>::set_Value(VARIANT Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDetailCellDispT<T>::get_Text(BSTR* Text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Text /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PivotDetailCellDispT<T>::get_Text(void)
{
  BSTR Text;
  this->get_Text((BSTR*)&Text);
  return Text;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDetailCellDispT<T>::get_Cell(Owc10_xp::PivotCell** Cell/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Cell"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotCell**)Cell /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotCell* __fastcall
PivotDetailCellDispT<T>::get_Cell(void)
{
  Owc10_xp::PivotCell* Cell;
  this->get_Cell((Owc10_xp::PivotCell**)&Cell);
  return Cell;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDetailCellDispT<T>::get_Field(Owc10_xp::PivotField** Field/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Field"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotField**)Field /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotField* __fastcall
PivotDetailCellDispT<T>::get_Field(void)
{
  Owc10_xp::PivotField* Field;
  this->get_Field((Owc10_xp::PivotField**)&Field);
  return Field;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDetailCellDispT<T>::get_Row(long* Row/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Row"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Row /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotDetailCellDispT<T>::get_Row(void)
{
  long Row;
  this->get_Row((long*)&Row);
  return Row;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDetailCellDispT<T>::get_Left(long* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotDetailCellDispT<T>::get_Left(void)
{
  long Left;
  this->get_Left((long*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDetailCellDispT<T>::get_Top(long* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotDetailCellDispT<T>::get_Top(void)
{
  long Top;
  this->get_Top((long*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDetailCellDispT<T>::get_Width(long* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotDetailCellDispT<T>::get_Width(void)
{
  long Width;
  this->get_Width((long*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDetailCellDispT<T>::get_Height(long* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotDetailCellDispT<T>::get_Height(void)
{
  long Height;
  this->get_Height((long*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDetailCellDispT<T>::get_Column(long* Column/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Column"), DISPID(DISPID_UNKNOWN/*[1610743818]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Column /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotDetailCellDispT<T>::get_Column(void)
{
  long Column;
  this->get_Column((long*)&Column);
  return Column;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDetailCellDispT<T>::get_Hyperlink(Owc10_xp::PivotHyperlink** Hyperlink/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Hyperlink"), DISPID(DISPID_UNKNOWN/*[1610743819]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotHyperlink**)Hyperlink /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotHyperlink* __fastcall
PivotDetailCellDispT<T>::get_Hyperlink(void)
{
  Owc10_xp::PivotHyperlink* Hyperlink;
  this->get_Hyperlink((Owc10_xp::PivotHyperlink**)&Hyperlink);
  return Hyperlink;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDetailCellDispT<T>::get_Bookmark(VARIANT* pvar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bookmark"), DISPID(DISPID_UNKNOWN/*[1610743820]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvar /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PivotDetailCellDispT<T>::get_Bookmark(void)
{
  VARIANT pvar;
  this->get_Bookmark((VARIANT*)&pvar);
  return pvar;
}

// *********************************************************************//
// DispIntf:  PivotCell
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B31-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotCellDispT<T>::get_Aggregates(Owc10_xp::PivotAggregates** Aggregates/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Aggregates"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotAggregates**)Aggregates /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotAggregates* __fastcall
PivotCellDispT<T>::get_Aggregates(void)
{
  Owc10_xp::PivotAggregates* Aggregates;
  this->get_Aggregates((Owc10_xp::PivotAggregates**)&Aggregates);
  return Aggregates;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotCellDispT<T>::get_Expanded(VARIANT_BOOL* Expanded/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Expanded"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Expanded /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PivotCellDispT<T>::get_Expanded(void)
{
  VARIANT_BOOL Expanded;
  this->get_Expanded((VARIANT_BOOL*)&Expanded);
  return Expanded;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotCellDispT<T>::set_Expanded(VARIANT_BOOL Expanded/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Expanded"), DISPID(1610743809));
  TAutoArgs<1> _args;
  _args[1] = Expanded /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotCellDispT<T>::get_Recordset(Adodb_xp::Recordset** Recordset/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Recordset"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Adodb_xp::Recordset**)Recordset /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Adodb_xp::Recordset* __fastcall
PivotCellDispT<T>::get_Recordset(void)
{
  Adodb_xp::Recordset* Recordset;
  this->get_Recordset((Adodb_xp::Recordset**)&Recordset);
  return Recordset;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotCellDispT<T>::get_RowMember(Owc10_xp::PivotAxisMember** Member/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RowMember"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotAxisMember**)Member /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotAxisMember* __fastcall
PivotCellDispT<T>::get_RowMember(void)
{
  Owc10_xp::PivotAxisMember* Member;
  this->get_RowMember((Owc10_xp::PivotAxisMember**)&Member);
  return Member;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotCellDispT<T>::get_ColumnMember(Owc10_xp::PivotColumnMember** Member/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnMember"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotColumnMember**)Member /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotColumnMember* __fastcall
PivotCellDispT<T>::get_ColumnMember(void)
{
  Owc10_xp::PivotColumnMember* Member;
  this->get_ColumnMember((Owc10_xp::PivotColumnMember**)&Member);
  return Member;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotCellDispT<T>::get_DetailTop(long* DetailTop/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DetailTop"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DetailTop /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotCellDispT<T>::get_DetailTop(void)
{
  long DetailTop;
  this->get_DetailTop((long*)&DetailTop);
  return DetailTop;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotCellDispT<T>::set_DetailTop(long DetailTop/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DetailTop"), DISPID(1610743814));
  TAutoArgs<1> _args;
  _args[1] = DetailTop /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotCellDispT<T>::get_DetailCells(long Row/*[in]*/, long Column/*[in]*/, 
                                   Owc10_xp::PivotDetailCell** Cell/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DetailCells"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<2> _args;
  _args[1] = Row /*[VT_I4:0]*/;
  _args[2] = Column /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotDetailCell**)Cell /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotDetailCell* __fastcall
PivotCellDispT<T>::get_DetailCells(long Row/*[in]*/, long Column/*[in]*/)
{
  Owc10_xp::PivotDetailCell* Cell;
  this->get_DetailCells(Row, Column, (Owc10_xp::PivotDetailCell**)&Cell);
  return Cell;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotCellDispT<T>::get_DetailRange(Owc10_xp::PivotDetailCell* TopLeft/*[in]*/, 
                                   Owc10_xp::PivotDetailCell* BottomRight/*[in]*/, 
                                   Owc10_xp::PivotDetailRange** Range/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DetailRange"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::PivotDetailCell*)TopLeft /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Owc10_xp::PivotDetailCell*)BottomRight /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotDetailRange**)Range /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotDetailRange* __fastcall
PivotCellDispT<T>::get_DetailRange(Owc10_xp::PivotDetailCell* TopLeft/*[in]*/, 
                                   Owc10_xp::PivotDetailCell* BottomRight/*[in]*/)
{
  Owc10_xp::PivotDetailRange* Range;
  this->get_DetailRange(TopLeft, BottomRight, (Owc10_xp::PivotDetailRange**)&Range);
  return Range;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotCellDispT<T>::get_Data(Owc10_xp::PivotData** Data/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Data"), DISPID(DISPID_UNKNOWN/*[1610743818]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotData**)Data /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotData* __fastcall
PivotCellDispT<T>::get_Data(void)
{
  Owc10_xp::PivotData* Data;
  this->get_Data((Owc10_xp::PivotData**)&Data);
  return Data;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotCellDispT<T>::get_DetailTopOffset(long* DetailTopOffset/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DetailTopOffset"), DISPID(DISPID_UNKNOWN/*[1610743819]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DetailTopOffset /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotCellDispT<T>::get_DetailTopOffset(void)
{
  long DetailTopOffset;
  this->get_DetailTopOffset((long*)&DetailTopOffset);
  return DetailTopOffset;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotCellDispT<T>::set_DetailTopOffset(long DetailTopOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DetailTopOffset"), DISPID(1610743819));
  TAutoArgs<1> _args;
  _args[1] = DetailTopOffset /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotCellDispT<T>::MoveDetailTop(long DetailTop/*[in]*/, long DetailTopOffset/*[in]*/, 
                                 VARIANT_BOOL Update/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("MoveDetailTop"), DISPID(DISPID_UNKNOWN/*[1610743821]*/));
  TAutoArgs<3> _args;
  _args[1] = DetailTop /*[VT_I4:0]*/;
  _args[2] = DetailTopOffset /*[VT_I4:0]*/;
  _args[3] = Update /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotCellDispT<T>::get_DetailRowCount(long* DetailRowCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DetailRowCount"), DISPID(DISPID_UNKNOWN/*[1610743822]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DetailRowCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotCellDispT<T>::get_DetailRowCount(void)
{
  long DetailRowCount;
  this->get_DetailRowCount((long*)&DetailRowCount);
  return DetailRowCount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotCellDispT<T>::get_DetailColumnCount(long* DetailColumnCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DetailColumnCount"), DISPID(DISPID_UNKNOWN/*[1610743823]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DetailColumnCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotCellDispT<T>::get_DetailColumnCount(void)
{
  long DetailColumnCount;
  this->get_DetailColumnCount((long*)&DetailColumnCount);
  return DetailColumnCount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotCellDispT<T>::get_PageMember(Owc10_xp::PivotPageMember** Member/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PageMember"), DISPID(DISPID_UNKNOWN/*[1610743824]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotPageMember**)Member /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotPageMember* __fastcall
PivotCellDispT<T>::get_PageMember(void)
{
  Owc10_xp::PivotPageMember* Member;
  this->get_PageMember((Owc10_xp::PivotPageMember**)&Member);
  return Member;
}

// *********************************************************************//
// DispIntf:  PivotAggregates
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A77-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAggregatesDispT<T>::get_Item(VARIANT Index/*[in]*/, 
                                  Owc10_xp::PivotAggregate** Aggregate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotAggregate**)Aggregate /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotAggregate* __fastcall
PivotAggregatesDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Owc10_xp::PivotAggregate* Aggregate;
  this->get_Item(Index, (Owc10_xp::PivotAggregate**)&Aggregate);
  return Aggregate;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAggregatesDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotAggregatesDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAggregatesDispT<T>::get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
PivotAggregatesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunk;
  this->get__NewEnum((LPUNKNOWN*)&ppunk);
  return ppunk;
}

// *********************************************************************//
// DispIntf:  PivotAggregate
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A78-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAggregateDispT<T>::get_Value(VARIANT* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PivotAggregateDispT<T>::get_Value(void)
{
  VARIANT Value;
  this->get_Value((VARIANT*)&Value);
  return Value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAggregateDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(6023));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PivotAggregateDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAggregateDispT<T>::get_Text(BSTR* Text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Text /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PivotAggregateDispT<T>::get_Text(void)
{
  BSTR Text;
  this->get_Text((BSTR*)&Text);
  return Text;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAggregateDispT<T>::get_Cell(Owc10_xp::PivotCell** Cell/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Cell"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotCell**)Cell /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotCell* __fastcall
PivotAggregateDispT<T>::get_Cell(void)
{
  Owc10_xp::PivotCell* Cell;
  this->get_Cell((Owc10_xp::PivotCell**)&Cell);
  return Cell;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAggregateDispT<T>::get_Total(Owc10_xp::PivotTotal** Total/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Total"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotTotal**)Total /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotTotal* __fastcall
PivotAggregateDispT<T>::get_Total(void)
{
  Owc10_xp::PivotTotal* Total;
  this->get_Total((Owc10_xp::PivotTotal**)&Total);
  return Total;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAggregateDispT<T>::get_Left(long* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotAggregateDispT<T>::get_Left(void)
{
  long Left;
  this->get_Left((long*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAggregateDispT<T>::get_Top(long* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotAggregateDispT<T>::get_Top(void)
{
  long Top;
  this->get_Top((long*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAggregateDispT<T>::get_Width(long* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotAggregateDispT<T>::get_Width(void)
{
  long Width;
  this->get_Width((long*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAggregateDispT<T>::get_Height(long* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotAggregateDispT<T>::get_Height(void)
{
  long Height;
  this->get_Height((long*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAggregateDispT<T>::get_ShowAsValue(VARIANT* ShowAsValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowAsValue"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ShowAsValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PivotAggregateDispT<T>::get_ShowAsValue(void)
{
  VARIANT ShowAsValue;
  this->get_ShowAsValue((VARIANT*)&ShowAsValue);
  return ShowAsValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAggregateDispT<T>::get_ProviderFormattedValue(VARIANT* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ProviderFormattedValue"), DISPID(DISPID_UNKNOWN/*[1610743818]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PivotAggregateDispT<T>::get_ProviderFormattedValue(void)
{
  VARIANT Value;
  this->get_ProviderFormattedValue((VARIANT*)&Value);
  return Value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAggregateDispT<T>::get_ForeColor(VARIANT* Color/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(DISPID_UNKNOWN/*[1610743819]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Color /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PivotAggregateDispT<T>::get_ForeColor(void)
{
  VARIANT Color;
  this->get_ForeColor((VARIANT*)&Color);
  return Color;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAggregateDispT<T>::get_BackColor(VARIANT* Color/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(DISPID_UNKNOWN/*[1610743820]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Color /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PivotAggregateDispT<T>::get_BackColor(void)
{
  VARIANT Color;
  this->get_BackColor((VARIANT*)&Color);
  return Color;
}

// *********************************************************************//
// DispIntf:  PivotAxisMember
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1D40A583-EBA2-11D2-8F35-00600893B533}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAxisMemberDispT<T>::get_ChildAxisMembers(Owc10_xp::PivotAxisMembers** Members/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChildAxisMembers"), DISPID(DISPID_UNKNOWN/*[1610809344]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotAxisMembers**)Members /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotAxisMembers* __fastcall
PivotAxisMemberDispT<T>::get_ChildAxisMembers(void)
{
  Owc10_xp::PivotAxisMembers* Members;
  this->get_ChildAxisMembers((Owc10_xp::PivotAxisMembers**)&Members);
  return Members;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAxisMemberDispT<T>::get_ParentAxisMember(Owc10_xp::PivotRowMember** ParentAxisMember/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ParentAxisMember"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotRowMember**)ParentAxisMember /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotRowMember* __fastcall
PivotAxisMemberDispT<T>::get_ParentAxisMember(void)
{
  Owc10_xp::PivotRowMember* ParentAxisMember;
  this->get_ParentAxisMember((Owc10_xp::PivotRowMember**)&ParentAxisMember);
  return ParentAxisMember;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAxisMemberDispT<T>::get_FindAxisMember(BSTR Path/*[in]*/, 
                                            Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/, 
                                            Owc10_xp::PivotRowMember** Member/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FindAxisMember"), DISPID(DISPID_UNKNOWN/*[1610809346]*/));
  TAutoArgs<2> _args;
  _args[1] = Path /*[VT_BSTR:0]*/;
  _args[2] = (int)Format /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotRowMember**)Member /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotRowMember* __fastcall
PivotAxisMemberDispT<T>::get_FindAxisMember(BSTR Path/*[in]*/, 
                                            Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/)
{
  Owc10_xp::PivotRowMember* Member;
  this->get_FindAxisMember(Path, Format, (Owc10_xp::PivotRowMember**)&Member);
  return Member;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAxisMemberDispT<T>::get_TotalMember(Owc10_xp::PivotRowMember** TotalMember/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TotalMember"), DISPID(DISPID_UNKNOWN/*[1610809347]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotRowMember**)TotalMember /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotRowMember* __fastcall
PivotAxisMemberDispT<T>::get_TotalMember(void)
{
  Owc10_xp::PivotRowMember* TotalMember;
  this->get_TotalMember((Owc10_xp::PivotRowMember**)&TotalMember);
  return TotalMember;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAxisMemberDispT<T>::get_Axis(Owc10_xp::PivotResultAxis** Axis/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Axis"), DISPID(DISPID_UNKNOWN/*[1610809348]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotResultAxis**)Axis /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotResultAxis* __fastcall
PivotAxisMemberDispT<T>::get_Axis(void)
{
  Owc10_xp::PivotResultAxis* Axis;
  this->get_Axis((Owc10_xp::PivotResultAxis**)&Axis);
  return Axis;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAxisMemberDispT<T>::get_Expanded(VARIANT_BOOL* Expanded/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Expanded"), DISPID(DISPID_UNKNOWN/*[1610809349]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Expanded /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PivotAxisMemberDispT<T>::get_Expanded(void)
{
  VARIANT_BOOL Expanded;
  this->get_Expanded((VARIANT_BOOL*)&Expanded);
  return Expanded;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAxisMemberDispT<T>::set_Expanded(VARIANT_BOOL Expanded/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Expanded"), DISPID(1610809349));
  TAutoArgs<1> _args;
  _args[1] = Expanded /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAxisMemberDispT<T>::get_Top(long* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(DISPID_UNKNOWN/*[1610809351]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotAxisMemberDispT<T>::get_Top(void)
{
  long Top;
  this->get_Top((long*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAxisMemberDispT<T>::get_Left(long* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(DISPID_UNKNOWN/*[1610809352]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotAxisMemberDispT<T>::get_Left(void)
{
  long Left;
  this->get_Left((long*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAxisMemberDispT<T>::get_Width(long* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(DISPID_UNKNOWN/*[1610809353]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotAxisMemberDispT<T>::get_Width(void)
{
  long Width;
  this->get_Width((long*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAxisMemberDispT<T>::set_Width(long Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1610809353));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAxisMemberDispT<T>::get_Height(long* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(DISPID_UNKNOWN/*[1610809355]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotAxisMemberDispT<T>::get_Height(void)
{
  long Height;
  this->get_Height((long*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAxisMemberDispT<T>::set_Height(long Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1610809355));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAxisMemberDispT<T>::get_AutoFit(VARIANT_BOOL* AutoFit/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoFit"), DISPID(DISPID_UNKNOWN/*[1610809357]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AutoFit /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PivotAxisMemberDispT<T>::get_AutoFit(void)
{
  VARIANT_BOOL AutoFit;
  this->get_AutoFit((VARIANT_BOOL*)&AutoFit);
  return AutoFit;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAxisMemberDispT<T>::set_AutoFit(VARIANT_BOOL AutoFit/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoFit"), DISPID(1610809357));
  TAutoArgs<1> _args;
  _args[1] = AutoFit /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAxisMemberDispT<T>::get_Hyperlink(Owc10_xp::PivotHyperlink** Hyperlink/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Hyperlink"), DISPID(DISPID_UNKNOWN/*[1610809359]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotHyperlink**)Hyperlink /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotHyperlink* __fastcall
PivotAxisMemberDispT<T>::get_Hyperlink(void)
{
  Owc10_xp::PivotHyperlink* Hyperlink;
  this->get_Hyperlink((Owc10_xp::PivotHyperlink**)&Hyperlink);
  return Hyperlink;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAxisMemberDispT<T>::get_MemberProperties(Owc10_xp::PivotResultMemberProperties** MemberProperties/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MemberProperties"), DISPID(DISPID_UNKNOWN/*[1610809360]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotResultMemberProperties**)MemberProperties /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotResultMemberProperties* __fastcall
PivotAxisMemberDispT<T>::get_MemberProperties(void)
{
  Owc10_xp::PivotResultMemberProperties* MemberProperties;
  this->get_MemberProperties((Owc10_xp::PivotResultMemberProperties**)&MemberProperties);
  return MemberProperties;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAxisMemberDispT<T>::get_GroupField(Owc10_xp::PivotResultField** GroupField/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupField"), DISPID(DISPID_UNKNOWN/*[1610809361]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotResultField**)GroupField /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotResultField* __fastcall
PivotAxisMemberDispT<T>::get_GroupField(void)
{
  Owc10_xp::PivotResultField* GroupField;
  this->get_GroupField((Owc10_xp::PivotResultField**)&GroupField);
  return GroupField;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAxisMemberDispT<T>::ShowDetails()
{
  _TDispID _dispid(*this, OLETEXT("ShowDetails"), DISPID(DISPID_UNKNOWN/*[1610809362]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAxisMemberDispT<T>::HideDetails()
{
  _TDispID _dispid(*this, OLETEXT("HideDetails"), DISPID(DISPID_UNKNOWN/*[1610809363]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAxisMemberDispT<T>::get_IsTotal(VARIANT_BOOL* IsTotal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsTotal"), DISPID(DISPID_UNKNOWN/*[1610809364]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(IsTotal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PivotAxisMemberDispT<T>::get_IsTotal(void)
{
  VARIANT_BOOL IsTotal;
  this->get_IsTotal((VARIANT_BOOL*)&IsTotal);
  return IsTotal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAxisMemberDispT<T>::get_SourceMember(Owc10_xp::PivotMember** SourceMember/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SourceMember"), DISPID(DISPID_UNKNOWN/*[1610809365]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotMember**)SourceMember /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotMember* __fastcall
PivotAxisMemberDispT<T>::get_SourceMember(void)
{
  Owc10_xp::PivotMember* SourceMember;
  this->get_SourceMember((Owc10_xp::PivotMember**)&SourceMember);
  return SourceMember;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAxisMemberDispT<T>::get_View(Owc10_xp::PivotView** View/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("View"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotView**)View /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotView* __fastcall
PivotAxisMemberDispT<T>::get_View(void)
{
  Owc10_xp::PivotView* View;
  this->get_View((Owc10_xp::PivotView**)&View);
  return View;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAxisMemberDispT<T>::get_ChildMembers(Owc10_xp::PivotMembers** Members/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChildMembers"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotMembers**)Members /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotMembers* __fastcall
PivotAxisMemberDispT<T>::get_ChildMembers(void)
{
  Owc10_xp::PivotMembers* Members;
  this->get_ChildMembers((Owc10_xp::PivotMembers**)&Members);
  return Members;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAxisMemberDispT<T>::get_ParentMember(Owc10_xp::PivotMember** Member/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ParentMember"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotMember**)Member /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotMember* __fastcall
PivotAxisMemberDispT<T>::get_ParentMember(void)
{
  Owc10_xp::PivotMember* Member;
  this->get_ParentMember((Owc10_xp::PivotMember**)&Member);
  return Member;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAxisMemberDispT<T>::get_FindMember(BSTR Path/*[in]*/, 
                                        Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/, 
                                        Owc10_xp::PivotMember** Member/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FindMember"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<2> _args;
  _args[1] = Path /*[VT_BSTR:0]*/;
  _args[2] = (int)Format /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotMember**)Member /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotMember* __fastcall
PivotAxisMemberDispT<T>::get_FindMember(BSTR Path/*[in]*/, 
                                        Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/)
{
  Owc10_xp::PivotMember* Member;
  this->get_FindMember(Path, Format, (Owc10_xp::PivotMember**)&Member);
  return Member;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAxisMemberDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(6023));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PivotAxisMemberDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAxisMemberDispT<T>::get_Caption(BSTR* Caption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(6028));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Caption /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PivotAxisMemberDispT<T>::get_Caption(void)
{
  BSTR Caption;
  this->get_Caption((BSTR*)&Caption);
  return Caption;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAxisMemberDispT<T>::get_Value(VARIANT* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PivotAxisMemberDispT<T>::get_Value(void)
{
  VARIANT Value;
  this->get_Value((VARIANT*)&Value);
  return Value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAxisMemberDispT<T>::get_UniqueName(BSTR* UniqueName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UniqueName"), DISPID(6022));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(UniqueName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PivotAxisMemberDispT<T>::get_UniqueName(void)
{
  BSTR UniqueName;
  this->get_UniqueName((BSTR*)&UniqueName);
  return UniqueName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAxisMemberDispT<T>::get_Field(Owc10_xp::PivotField** Field/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Field"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotField**)Field /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotField* __fastcall
PivotAxisMemberDispT<T>::get_Field(void)
{
  Owc10_xp::PivotField* Field;
  this->get_Field((Owc10_xp::PivotField**)&Field);
  return Field;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAxisMemberDispT<T>::get_Path(Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/, 
                                  BSTR* Path/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Path"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)Format /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(Path /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PivotAxisMemberDispT<T>::get_Path(Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/)
{
  BSTR Path;
  this->get_Path(Format, (BSTR*)&Path);
  return Path;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAxisMemberDispT<T>::get_TimeValue(VARIANT* TimeValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TimeValue"), DISPID(DISPID_UNKNOWN/*[1610743818]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(TimeValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PivotAxisMemberDispT<T>::get_TimeValue(void)
{
  VARIANT TimeValue;
  this->get_TimeValue((VARIANT*)&TimeValue);
  return TimeValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAxisMemberDispT<T>::get_IsValid(VARIANT_BOOL* Valid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsValid"), DISPID(DISPID_UNKNOWN/*[1610743819]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Valid /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PivotAxisMemberDispT<T>::get_IsValid(void)
{
  VARIANT_BOOL Valid;
  this->get_IsValid((VARIANT_BOOL*)&Valid);
  return Valid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAxisMemberDispT<T>::get_CustomGroupType(Owc10_xp::PivotMemberCustomGroupTypeEnum* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CustomGroupType"), DISPID(DISPID_UNKNOWN/*[1610743820]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotMemberCustomGroupTypeEnum __fastcall
PivotAxisMemberDispT<T>::get_CustomGroupType(void)
{
  Owc10_xp::PivotMemberCustomGroupTypeEnum Type;
  this->get_CustomGroupType((Owc10_xp::PivotMemberCustomGroupTypeEnum*)&Type);
  return Type;
}

// *********************************************************************//
// DispIntf:  PivotRowMember
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1D40A584-EBA2-11D2-8F35-00600893B533}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotRowMemberDispT<T>::get_ChildRowMembers(Owc10_xp::PivotRowMembers** Members/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChildRowMembers"), DISPID(1610874880));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotRowMembers**)Members /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotRowMembers* __fastcall
PivotRowMemberDispT<T>::get_ChildRowMembers(void)
{
  Owc10_xp::PivotRowMembers* Members;
  this->get_ChildRowMembers((Owc10_xp::PivotRowMembers**)&Members);
  return Members;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotRowMemberDispT<T>::get_ParentRowMember(Owc10_xp::PivotAxisMember** ParentRowMember/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ParentRowMember"), DISPID(1610874881));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotAxisMember**)ParentRowMember /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotAxisMember* __fastcall
PivotRowMemberDispT<T>::get_ParentRowMember(void)
{
  Owc10_xp::PivotAxisMember* ParentRowMember;
  this->get_ParentRowMember((Owc10_xp::PivotAxisMember**)&ParentRowMember);
  return ParentRowMember;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotRowMemberDispT<T>::get_FindRowMember(BSTR Path/*[in]*/, 
                                          Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/, 
                                          Owc10_xp::PivotAxisMember** Member/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FindRowMember"), DISPID(1610874882));
  TAutoArgs<2> _args;
  _args[1] = Path /*[VT_BSTR:0]*/;
  _args[2] = (int)Format /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotAxisMember**)Member /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotAxisMember* __fastcall
PivotRowMemberDispT<T>::get_FindRowMember(BSTR Path/*[in]*/, 
                                          Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/)
{
  Owc10_xp::PivotAxisMember* Member;
  this->get_FindRowMember(Path, Format, (Owc10_xp::PivotAxisMember**)&Member);
  return Member;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotRowMemberDispT<T>::get_TotalRowMember(Owc10_xp::PivotAxisMember** TotalMember/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TotalRowMember"), DISPID(1610874883));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotAxisMember**)TotalMember /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotAxisMember* __fastcall
PivotRowMemberDispT<T>::get_TotalRowMember(void)
{
  Owc10_xp::PivotAxisMember* TotalMember;
  this->get_TotalRowMember((Owc10_xp::PivotAxisMember**)&TotalMember);
  return TotalMember;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotRowMemberDispT<T>::get_TotalRowHeight(long* TotalRowHeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TotalRowHeight"), DISPID(1610874884));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(TotalRowHeight /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotRowMemberDispT<T>::get_TotalRowHeight(void)
{
  long TotalRowHeight;
  this->get_TotalRowHeight((long*)&TotalRowHeight);
  return TotalRowHeight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotRowMemberDispT<T>::set_TotalRowHeight(long TotalRowHeight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TotalRowHeight"), DISPID(1610874884));
  TAutoArgs<1> _args;
  _args[1] = TotalRowHeight /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotRowMemberDispT<T>::get_ChildAxisMembers(Owc10_xp::PivotAxisMembers** Members/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChildAxisMembers"), DISPID(DISPID_UNKNOWN/*[1610809344]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotAxisMembers**)Members /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotAxisMembers* __fastcall
PivotRowMemberDispT<T>::get_ChildAxisMembers(void)
{
  Owc10_xp::PivotAxisMembers* Members;
  this->get_ChildAxisMembers((Owc10_xp::PivotAxisMembers**)&Members);
  return Members;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotRowMemberDispT<T>::get_ParentAxisMember(Owc10_xp::PivotRowMember** ParentAxisMember/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ParentAxisMember"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotRowMember**)ParentAxisMember /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotRowMember* __fastcall
PivotRowMemberDispT<T>::get_ParentAxisMember(void)
{
  Owc10_xp::PivotRowMember* ParentAxisMember;
  this->get_ParentAxisMember((Owc10_xp::PivotRowMember**)&ParentAxisMember);
  return ParentAxisMember;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotRowMemberDispT<T>::get_FindAxisMember(BSTR Path/*[in]*/, 
                                           Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/, 
                                           Owc10_xp::PivotRowMember** Member/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FindAxisMember"), DISPID(DISPID_UNKNOWN/*[1610809346]*/));
  TAutoArgs<2> _args;
  _args[1] = Path /*[VT_BSTR:0]*/;
  _args[2] = (int)Format /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotRowMember**)Member /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotRowMember* __fastcall
PivotRowMemberDispT<T>::get_FindAxisMember(BSTR Path/*[in]*/, 
                                           Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/)
{
  Owc10_xp::PivotRowMember* Member;
  this->get_FindAxisMember(Path, Format, (Owc10_xp::PivotRowMember**)&Member);
  return Member;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotRowMemberDispT<T>::get_TotalMember(Owc10_xp::PivotRowMember** TotalMember/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TotalMember"), DISPID(DISPID_UNKNOWN/*[1610809347]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotRowMember**)TotalMember /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotRowMember* __fastcall
PivotRowMemberDispT<T>::get_TotalMember(void)
{
  Owc10_xp::PivotRowMember* TotalMember;
  this->get_TotalMember((Owc10_xp::PivotRowMember**)&TotalMember);
  return TotalMember;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotRowMemberDispT<T>::get_Axis(Owc10_xp::PivotResultAxis** Axis/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Axis"), DISPID(DISPID_UNKNOWN/*[1610809348]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotResultAxis**)Axis /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotResultAxis* __fastcall
PivotRowMemberDispT<T>::get_Axis(void)
{
  Owc10_xp::PivotResultAxis* Axis;
  this->get_Axis((Owc10_xp::PivotResultAxis**)&Axis);
  return Axis;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotRowMemberDispT<T>::get_Expanded(VARIANT_BOOL* Expanded/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Expanded"), DISPID(DISPID_UNKNOWN/*[1610809349]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Expanded /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PivotRowMemberDispT<T>::get_Expanded(void)
{
  VARIANT_BOOL Expanded;
  this->get_Expanded((VARIANT_BOOL*)&Expanded);
  return Expanded;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotRowMemberDispT<T>::set_Expanded(VARIANT_BOOL Expanded/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Expanded"), DISPID(1610809349));
  TAutoArgs<1> _args;
  _args[1] = Expanded /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotRowMemberDispT<T>::get_Top(long* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(DISPID_UNKNOWN/*[1610809351]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotRowMemberDispT<T>::get_Top(void)
{
  long Top;
  this->get_Top((long*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotRowMemberDispT<T>::get_Left(long* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(DISPID_UNKNOWN/*[1610809352]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotRowMemberDispT<T>::get_Left(void)
{
  long Left;
  this->get_Left((long*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotRowMemberDispT<T>::get_Width(long* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(DISPID_UNKNOWN/*[1610809353]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotRowMemberDispT<T>::get_Width(void)
{
  long Width;
  this->get_Width((long*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotRowMemberDispT<T>::set_Width(long Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1610809353));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotRowMemberDispT<T>::get_Height(long* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(DISPID_UNKNOWN/*[1610809355]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotRowMemberDispT<T>::get_Height(void)
{
  long Height;
  this->get_Height((long*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotRowMemberDispT<T>::set_Height(long Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1610809355));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotRowMemberDispT<T>::get_AutoFit(VARIANT_BOOL* AutoFit/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoFit"), DISPID(DISPID_UNKNOWN/*[1610809357]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AutoFit /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PivotRowMemberDispT<T>::get_AutoFit(void)
{
  VARIANT_BOOL AutoFit;
  this->get_AutoFit((VARIANT_BOOL*)&AutoFit);
  return AutoFit;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotRowMemberDispT<T>::set_AutoFit(VARIANT_BOOL AutoFit/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoFit"), DISPID(1610809357));
  TAutoArgs<1> _args;
  _args[1] = AutoFit /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotRowMemberDispT<T>::get_Hyperlink(Owc10_xp::PivotHyperlink** Hyperlink/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Hyperlink"), DISPID(DISPID_UNKNOWN/*[1610809359]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotHyperlink**)Hyperlink /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotHyperlink* __fastcall
PivotRowMemberDispT<T>::get_Hyperlink(void)
{
  Owc10_xp::PivotHyperlink* Hyperlink;
  this->get_Hyperlink((Owc10_xp::PivotHyperlink**)&Hyperlink);
  return Hyperlink;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotRowMemberDispT<T>::get_MemberProperties(Owc10_xp::PivotResultMemberProperties** MemberProperties/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MemberProperties"), DISPID(DISPID_UNKNOWN/*[1610809360]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotResultMemberProperties**)MemberProperties /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotResultMemberProperties* __fastcall
PivotRowMemberDispT<T>::get_MemberProperties(void)
{
  Owc10_xp::PivotResultMemberProperties* MemberProperties;
  this->get_MemberProperties((Owc10_xp::PivotResultMemberProperties**)&MemberProperties);
  return MemberProperties;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotRowMemberDispT<T>::get_GroupField(Owc10_xp::PivotResultField** GroupField/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupField"), DISPID(DISPID_UNKNOWN/*[1610809361]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotResultField**)GroupField /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotResultField* __fastcall
PivotRowMemberDispT<T>::get_GroupField(void)
{
  Owc10_xp::PivotResultField* GroupField;
  this->get_GroupField((Owc10_xp::PivotResultField**)&GroupField);
  return GroupField;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotRowMemberDispT<T>::ShowDetails()
{
  _TDispID _dispid(*this, OLETEXT("ShowDetails"), DISPID(DISPID_UNKNOWN/*[1610809362]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotRowMemberDispT<T>::HideDetails()
{
  _TDispID _dispid(*this, OLETEXT("HideDetails"), DISPID(DISPID_UNKNOWN/*[1610809363]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotRowMemberDispT<T>::get_IsTotal(VARIANT_BOOL* IsTotal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsTotal"), DISPID(DISPID_UNKNOWN/*[1610809364]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(IsTotal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PivotRowMemberDispT<T>::get_IsTotal(void)
{
  VARIANT_BOOL IsTotal;
  this->get_IsTotal((VARIANT_BOOL*)&IsTotal);
  return IsTotal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotRowMemberDispT<T>::get_SourceMember(Owc10_xp::PivotMember** SourceMember/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SourceMember"), DISPID(DISPID_UNKNOWN/*[1610809365]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotMember**)SourceMember /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotMember* __fastcall
PivotRowMemberDispT<T>::get_SourceMember(void)
{
  Owc10_xp::PivotMember* SourceMember;
  this->get_SourceMember((Owc10_xp::PivotMember**)&SourceMember);
  return SourceMember;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotRowMemberDispT<T>::get_View(Owc10_xp::PivotView** View/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("View"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotView**)View /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotView* __fastcall
PivotRowMemberDispT<T>::get_View(void)
{
  Owc10_xp::PivotView* View;
  this->get_View((Owc10_xp::PivotView**)&View);
  return View;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotRowMemberDispT<T>::get_ChildMembers(Owc10_xp::PivotMembers** Members/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChildMembers"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotMembers**)Members /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotMembers* __fastcall
PivotRowMemberDispT<T>::get_ChildMembers(void)
{
  Owc10_xp::PivotMembers* Members;
  this->get_ChildMembers((Owc10_xp::PivotMembers**)&Members);
  return Members;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotRowMemberDispT<T>::get_ParentMember(Owc10_xp::PivotMember** Member/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ParentMember"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotMember**)Member /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotMember* __fastcall
PivotRowMemberDispT<T>::get_ParentMember(void)
{
  Owc10_xp::PivotMember* Member;
  this->get_ParentMember((Owc10_xp::PivotMember**)&Member);
  return Member;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotRowMemberDispT<T>::get_FindMember(BSTR Path/*[in]*/, 
                                       Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/, 
                                       Owc10_xp::PivotMember** Member/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FindMember"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<2> _args;
  _args[1] = Path /*[VT_BSTR:0]*/;
  _args[2] = (int)Format /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotMember**)Member /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotMember* __fastcall
PivotRowMemberDispT<T>::get_FindMember(BSTR Path/*[in]*/, 
                                       Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/)
{
  Owc10_xp::PivotMember* Member;
  this->get_FindMember(Path, Format, (Owc10_xp::PivotMember**)&Member);
  return Member;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotRowMemberDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(6023));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PivotRowMemberDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotRowMemberDispT<T>::get_Caption(BSTR* Caption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(6028));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Caption /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PivotRowMemberDispT<T>::get_Caption(void)
{
  BSTR Caption;
  this->get_Caption((BSTR*)&Caption);
  return Caption;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotRowMemberDispT<T>::get_Value(VARIANT* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PivotRowMemberDispT<T>::get_Value(void)
{
  VARIANT Value;
  this->get_Value((VARIANT*)&Value);
  return Value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotRowMemberDispT<T>::get_UniqueName(BSTR* UniqueName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UniqueName"), DISPID(6022));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(UniqueName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PivotRowMemberDispT<T>::get_UniqueName(void)
{
  BSTR UniqueName;
  this->get_UniqueName((BSTR*)&UniqueName);
  return UniqueName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotRowMemberDispT<T>::get_Field(Owc10_xp::PivotField** Field/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Field"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotField**)Field /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotField* __fastcall
PivotRowMemberDispT<T>::get_Field(void)
{
  Owc10_xp::PivotField* Field;
  this->get_Field((Owc10_xp::PivotField**)&Field);
  return Field;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotRowMemberDispT<T>::get_Path(Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/, 
                                 BSTR* Path/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Path"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)Format /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(Path /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PivotRowMemberDispT<T>::get_Path(Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/)
{
  BSTR Path;
  this->get_Path(Format, (BSTR*)&Path);
  return Path;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotRowMemberDispT<T>::get_TimeValue(VARIANT* TimeValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TimeValue"), DISPID(DISPID_UNKNOWN/*[1610743818]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(TimeValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PivotRowMemberDispT<T>::get_TimeValue(void)
{
  VARIANT TimeValue;
  this->get_TimeValue((VARIANT*)&TimeValue);
  return TimeValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotRowMemberDispT<T>::get_IsValid(VARIANT_BOOL* Valid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsValid"), DISPID(DISPID_UNKNOWN/*[1610743819]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Valid /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PivotRowMemberDispT<T>::get_IsValid(void)
{
  VARIANT_BOOL Valid;
  this->get_IsValid((VARIANT_BOOL*)&Valid);
  return Valid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotRowMemberDispT<T>::get_CustomGroupType(Owc10_xp::PivotMemberCustomGroupTypeEnum* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CustomGroupType"), DISPID(DISPID_UNKNOWN/*[1610743820]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotMemberCustomGroupTypeEnum __fastcall
PivotRowMemberDispT<T>::get_CustomGroupType(void)
{
  Owc10_xp::PivotMemberCustomGroupTypeEnum Type;
  this->get_CustomGroupType((Owc10_xp::PivotMemberCustomGroupTypeEnum*)&Type);
  return Type;
}

// *********************************************************************//
// DispIntf:  PivotAxisMembers
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {30971540-EEB8-11D2-8F35-00600893B533}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAxisMembersDispT<T>::get_Item(VARIANT Index/*[in]*/, 
                                   Owc10_xp::PivotRowMember** Member/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotRowMember**)Member /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotRowMember* __fastcall
PivotAxisMembersDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Owc10_xp::PivotRowMember* Member;
  this->get_Item(Index, (Owc10_xp::PivotRowMember**)&Member);
  return Member;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAxisMembersDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotAxisMembersDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotAxisMembersDispT<T>::get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
PivotAxisMembersDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunk;
  this->get__NewEnum((LPUNKNOWN*)&ppunk);
  return ppunk;
}

// *********************************************************************//
// DispIntf:  PivotHyperlink
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A9C-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotHyperlinkDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotHyperlinkDispT<T>::Follow(VARIANT_BOOL NewWindow/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Follow"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<1> _args;
  _args[1] = NewWindow /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotHyperlinkDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PivotHyperlinkDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotHyperlinkDispT<T>::get_Address(BSTR* Address/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Address"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Address /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PivotHyperlinkDispT<T>::get_Address(void)
{
  BSTR Address;
  this->get_Address((BSTR*)&Address);
  return Address;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotHyperlinkDispT<T>::set_Address(BSTR Address/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Address"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = Address /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotHyperlinkDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PivotHyperlinkDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotHyperlinkDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1610743813));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotHyperlinkDispT<T>::get_SubAddress(BSTR* SubAddress/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SubAddress"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SubAddress /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PivotHyperlinkDispT<T>::get_SubAddress(void)
{
  BSTR SubAddress;
  this->get_SubAddress((BSTR*)&SubAddress);
  return SubAddress;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotHyperlinkDispT<T>::set_SubAddress(BSTR SubAddress/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SubAddress"), DISPID(1610743815));
  TAutoArgs<1> _args;
  _args[1] = SubAddress /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  PivotResultMemberProperties
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {23E41747-B2E7-4A36-9CEB-99799D619D02}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultMemberPropertiesDispT<T>::get_Item(VARIANT varIndex/*[in]*/, 
                                              Owc10_xp::PivotResultMemberProperty** Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = varIndex /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotResultMemberProperty**)Item /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotResultMemberProperty* __fastcall
PivotResultMemberPropertiesDispT<T>::get_Item(VARIANT varIndex/*[in]*/)
{
  Owc10_xp::PivotResultMemberProperty* Item;
  this->get_Item(varIndex, (Owc10_xp::PivotResultMemberProperty**)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultMemberPropertiesDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotResultMemberPropertiesDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultMemberPropertiesDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
PivotResultMemberPropertiesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

// *********************************************************************//
// DispIntf:  PivotResultMemberProperty
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {07C8959F-2E2A-4149-B6EA-6C511B21F485}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultMemberPropertyDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(6023));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PivotResultMemberPropertyDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultMemberPropertyDispT<T>::get_Caption(BSTR* Caption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(6028));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Caption /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PivotResultMemberPropertyDispT<T>::get_Caption(void)
{
  BSTR Caption;
  this->get_Caption((BSTR*)&Caption);
  return Caption;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultMemberPropertyDispT<T>::get_Value(VARIANT* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PivotResultMemberPropertyDispT<T>::get_Value(void)
{
  VARIANT Value;
  this->get_Value((VARIANT*)&Value);
  return Value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultMemberPropertyDispT<T>::get_MemberProperty(Owc10_xp::PivotMemberProperty** MemberProperty/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MemberProperty"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotMemberProperty**)MemberProperty /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotMemberProperty* __fastcall
PivotResultMemberPropertyDispT<T>::get_MemberProperty(void)
{
  Owc10_xp::PivotMemberProperty* MemberProperty;
  this->get_MemberProperty((Owc10_xp::PivotMemberProperty**)&MemberProperty);
  return MemberProperty;
}

// *********************************************************************//
// DispIntf:  PivotResultField
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {682A2445-8F22-4E2D-A73B-D04E4CC273B5}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultFieldDispT<T>::get_SourceField(Owc10_xp::PivotField** Field/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SourceField"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotField**)Field /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotField* __fastcall
PivotResultFieldDispT<T>::get_SourceField(void)
{
  Owc10_xp::PivotField* Field;
  this->get_SourceField((Owc10_xp::PivotField**)&Field);
  return Field;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultFieldDispT<T>::get_Axis(Owc10_xp::PivotResultGroupAxis** Axis/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Axis"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotResultGroupAxis**)Axis /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotResultGroupAxis* __fastcall
PivotResultFieldDispT<T>::get_Axis(void)
{
  Owc10_xp::PivotResultGroupAxis* Axis;
  this->get_Axis((Owc10_xp::PivotResultGroupAxis**)&Axis);
  return Axis;
}

// *********************************************************************//
// DispIntf:  PivotResultGroupField
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {DC0342FE-039A-4D2D-80BF-BCA659270822}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultGroupFieldDispT<T>::get_DisplayTotal(VARIANT_BOOL* DisplayTotal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayTotal"), DISPID(1610809344));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DisplayTotal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PivotResultGroupFieldDispT<T>::get_DisplayTotal(void)
{
  VARIANT_BOOL DisplayTotal;
  this->get_DisplayTotal((VARIANT_BOOL*)&DisplayTotal);
  return DisplayTotal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultGroupFieldDispT<T>::get_SourceField(Owc10_xp::PivotField** Field/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SourceField"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotField**)Field /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotField* __fastcall
PivotResultGroupFieldDispT<T>::get_SourceField(void)
{
  Owc10_xp::PivotField* Field;
  this->get_SourceField((Owc10_xp::PivotField**)&Field);
  return Field;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultGroupFieldDispT<T>::get_Axis(Owc10_xp::PivotResultGroupAxis** Axis/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Axis"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotResultGroupAxis**)Axis /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotResultGroupAxis* __fastcall
PivotResultGroupFieldDispT<T>::get_Axis(void)
{
  Owc10_xp::PivotResultGroupAxis* Axis;
  this->get_Axis((Owc10_xp::PivotResultGroupAxis**)&Axis);
  return Axis;
}

// *********************************************************************//
// DispIntf:  PivotRowMembers
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {30971541-EEB8-11D2-8F35-00600893B533}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotRowMembersDispT<T>::get_Item(VARIANT Index/*[in]*/, 
                                  Owc10_xp::PivotAxisMember** Member/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotAxisMember**)Member /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotAxisMember* __fastcall
PivotRowMembersDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Owc10_xp::PivotAxisMember* Member;
  this->get_Item(Index, (Owc10_xp::PivotAxisMember**)&Member);
  return Member;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotRowMembersDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotRowMembersDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotRowMembersDispT<T>::get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
PivotRowMembersDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunk;
  this->get__NewEnum((LPUNKNOWN*)&ppunk);
  return ppunk;
}

// *********************************************************************//
// DispIntf:  PivotColumnMember
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1D40A585-EBA2-11D2-8F35-00600893B533}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotColumnMemberDispT<T>::get_ChildColumnMembers(Owc10_xp::PivotColumnMembers** Members/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChildColumnMembers"), DISPID(DISPID_UNKNOWN/*[1610874880]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotColumnMembers**)Members /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotColumnMembers* __fastcall
PivotColumnMemberDispT<T>::get_ChildColumnMembers(void)
{
  Owc10_xp::PivotColumnMembers* Members;
  this->get_ChildColumnMembers((Owc10_xp::PivotColumnMembers**)&Members);
  return Members;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotColumnMemberDispT<T>::get_ParentColumnMember(Owc10_xp::PivotColumnMember** ParentColumnMember/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ParentColumnMember"), DISPID(DISPID_UNKNOWN/*[1610874881]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotColumnMember**)ParentColumnMember /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotColumnMember* __fastcall
PivotColumnMemberDispT<T>::get_ParentColumnMember(void)
{
  Owc10_xp::PivotColumnMember* ParentColumnMember;
  this->get_ParentColumnMember((Owc10_xp::PivotColumnMember**)&ParentColumnMember);
  return ParentColumnMember;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotColumnMemberDispT<T>::get_FindColumnMember(BSTR Path/*[in]*/, 
                                                Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/, 
                                                Owc10_xp::PivotColumnMember** Member/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FindColumnMember"), DISPID(DISPID_UNKNOWN/*[1610874882]*/));
  TAutoArgs<2> _args;
  _args[1] = Path /*[VT_BSTR:0]*/;
  _args[2] = (int)Format /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotColumnMember**)Member /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotColumnMember* __fastcall
PivotColumnMemberDispT<T>::get_FindColumnMember(BSTR Path/*[in]*/, 
                                                Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/)
{
  Owc10_xp::PivotColumnMember* Member;
  this->get_FindColumnMember(Path, Format, (Owc10_xp::PivotColumnMember**)&Member);
  return Member;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotColumnMemberDispT<T>::get_TotalColumnMember(Owc10_xp::PivotColumnMember** TotalMember/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TotalColumnMember"), DISPID(DISPID_UNKNOWN/*[1610874883]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotColumnMember**)TotalMember /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotColumnMember* __fastcall
PivotColumnMemberDispT<T>::get_TotalColumnMember(void)
{
  Owc10_xp::PivotColumnMember* TotalMember;
  this->get_TotalColumnMember((Owc10_xp::PivotColumnMember**)&TotalMember);
  return TotalMember;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotColumnMemberDispT<T>::get_DetailLeft(long* DetailLeft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DetailLeft"), DISPID(DISPID_UNKNOWN/*[1610874884]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DetailLeft /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotColumnMemberDispT<T>::get_DetailLeft(void)
{
  long DetailLeft;
  this->get_DetailLeft((long*)&DetailLeft);
  return DetailLeft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotColumnMemberDispT<T>::set_DetailLeft(long DetailLeft/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DetailLeft"), DISPID(1610874884));
  TAutoArgs<1> _args;
  _args[1] = DetailLeft /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotColumnMemberDispT<T>::get_DetailLeftOffset(long* DetailLeftOffset/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DetailLeftOffset"), DISPID(DISPID_UNKNOWN/*[1610874886]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DetailLeftOffset /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotColumnMemberDispT<T>::get_DetailLeftOffset(void)
{
  long DetailLeftOffset;
  this->get_DetailLeftOffset((long*)&DetailLeftOffset);
  return DetailLeftOffset;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotColumnMemberDispT<T>::set_DetailLeftOffset(long DetailLeftOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DetailLeftOffset"), DISPID(1610874886));
  TAutoArgs<1> _args;
  _args[1] = DetailLeftOffset /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotColumnMemberDispT<T>::MoveDetailLeft(long DetailLeft/*[in]*/, long DetailLeftOffset/*[in]*/, 
                                          VARIANT_BOOL Update/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("MoveDetailLeft"), DISPID(DISPID_UNKNOWN/*[1610874888]*/));
  TAutoArgs<3> _args;
  _args[1] = DetailLeft /*[VT_I4:0]*/;
  _args[2] = DetailLeftOffset /*[VT_I4:0]*/;
  _args[3] = Update /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotColumnMemberDispT<T>::get_DetailsExpanded(VARIANT_BOOL* DetailsExpanded/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DetailsExpanded"), DISPID(DISPID_UNKNOWN/*[1610874889]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DetailsExpanded /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PivotColumnMemberDispT<T>::get_DetailsExpanded(void)
{
  VARIANT_BOOL DetailsExpanded;
  this->get_DetailsExpanded((VARIANT_BOOL*)&DetailsExpanded);
  return DetailsExpanded;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotColumnMemberDispT<T>::get_ChildAxisMembers(Owc10_xp::PivotAxisMembers** Members/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChildAxisMembers"), DISPID(DISPID_UNKNOWN/*[1610809344]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotAxisMembers**)Members /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotAxisMembers* __fastcall
PivotColumnMemberDispT<T>::get_ChildAxisMembers(void)
{
  Owc10_xp::PivotAxisMembers* Members;
  this->get_ChildAxisMembers((Owc10_xp::PivotAxisMembers**)&Members);
  return Members;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotColumnMemberDispT<T>::get_ParentAxisMember(Owc10_xp::PivotRowMember** ParentAxisMember/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ParentAxisMember"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotRowMember**)ParentAxisMember /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotRowMember* __fastcall
PivotColumnMemberDispT<T>::get_ParentAxisMember(void)
{
  Owc10_xp::PivotRowMember* ParentAxisMember;
  this->get_ParentAxisMember((Owc10_xp::PivotRowMember**)&ParentAxisMember);
  return ParentAxisMember;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotColumnMemberDispT<T>::get_FindAxisMember(BSTR Path/*[in]*/, 
                                              Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/, 
                                              Owc10_xp::PivotRowMember** Member/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FindAxisMember"), DISPID(DISPID_UNKNOWN/*[1610809346]*/));
  TAutoArgs<2> _args;
  _args[1] = Path /*[VT_BSTR:0]*/;
  _args[2] = (int)Format /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotRowMember**)Member /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotRowMember* __fastcall
PivotColumnMemberDispT<T>::get_FindAxisMember(BSTR Path/*[in]*/, 
                                              Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/)
{
  Owc10_xp::PivotRowMember* Member;
  this->get_FindAxisMember(Path, Format, (Owc10_xp::PivotRowMember**)&Member);
  return Member;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotColumnMemberDispT<T>::get_TotalMember(Owc10_xp::PivotRowMember** TotalMember/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TotalMember"), DISPID(DISPID_UNKNOWN/*[1610809347]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotRowMember**)TotalMember /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotRowMember* __fastcall
PivotColumnMemberDispT<T>::get_TotalMember(void)
{
  Owc10_xp::PivotRowMember* TotalMember;
  this->get_TotalMember((Owc10_xp::PivotRowMember**)&TotalMember);
  return TotalMember;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotColumnMemberDispT<T>::get_Axis(Owc10_xp::PivotResultAxis** Axis/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Axis"), DISPID(DISPID_UNKNOWN/*[1610809348]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotResultAxis**)Axis /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotResultAxis* __fastcall
PivotColumnMemberDispT<T>::get_Axis(void)
{
  Owc10_xp::PivotResultAxis* Axis;
  this->get_Axis((Owc10_xp::PivotResultAxis**)&Axis);
  return Axis;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotColumnMemberDispT<T>::get_Expanded(VARIANT_BOOL* Expanded/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Expanded"), DISPID(DISPID_UNKNOWN/*[1610809349]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Expanded /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PivotColumnMemberDispT<T>::get_Expanded(void)
{
  VARIANT_BOOL Expanded;
  this->get_Expanded((VARIANT_BOOL*)&Expanded);
  return Expanded;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotColumnMemberDispT<T>::set_Expanded(VARIANT_BOOL Expanded/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Expanded"), DISPID(1610809349));
  TAutoArgs<1> _args;
  _args[1] = Expanded /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotColumnMemberDispT<T>::get_Top(long* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(DISPID_UNKNOWN/*[1610809351]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotColumnMemberDispT<T>::get_Top(void)
{
  long Top;
  this->get_Top((long*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotColumnMemberDispT<T>::get_Left(long* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(DISPID_UNKNOWN/*[1610809352]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotColumnMemberDispT<T>::get_Left(void)
{
  long Left;
  this->get_Left((long*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotColumnMemberDispT<T>::get_Width(long* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(DISPID_UNKNOWN/*[1610809353]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotColumnMemberDispT<T>::get_Width(void)
{
  long Width;
  this->get_Width((long*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotColumnMemberDispT<T>::set_Width(long Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1610809353));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotColumnMemberDispT<T>::get_Height(long* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(DISPID_UNKNOWN/*[1610809355]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotColumnMemberDispT<T>::get_Height(void)
{
  long Height;
  this->get_Height((long*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotColumnMemberDispT<T>::set_Height(long Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1610809355));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotColumnMemberDispT<T>::get_AutoFit(VARIANT_BOOL* AutoFit/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoFit"), DISPID(DISPID_UNKNOWN/*[1610809357]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AutoFit /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PivotColumnMemberDispT<T>::get_AutoFit(void)
{
  VARIANT_BOOL AutoFit;
  this->get_AutoFit((VARIANT_BOOL*)&AutoFit);
  return AutoFit;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotColumnMemberDispT<T>::set_AutoFit(VARIANT_BOOL AutoFit/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoFit"), DISPID(1610809357));
  TAutoArgs<1> _args;
  _args[1] = AutoFit /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotColumnMemberDispT<T>::get_Hyperlink(Owc10_xp::PivotHyperlink** Hyperlink/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Hyperlink"), DISPID(DISPID_UNKNOWN/*[1610809359]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotHyperlink**)Hyperlink /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotHyperlink* __fastcall
PivotColumnMemberDispT<T>::get_Hyperlink(void)
{
  Owc10_xp::PivotHyperlink* Hyperlink;
  this->get_Hyperlink((Owc10_xp::PivotHyperlink**)&Hyperlink);
  return Hyperlink;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotColumnMemberDispT<T>::get_MemberProperties(Owc10_xp::PivotResultMemberProperties** MemberProperties/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MemberProperties"), DISPID(DISPID_UNKNOWN/*[1610809360]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotResultMemberProperties**)MemberProperties /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotResultMemberProperties* __fastcall
PivotColumnMemberDispT<T>::get_MemberProperties(void)
{
  Owc10_xp::PivotResultMemberProperties* MemberProperties;
  this->get_MemberProperties((Owc10_xp::PivotResultMemberProperties**)&MemberProperties);
  return MemberProperties;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotColumnMemberDispT<T>::get_GroupField(Owc10_xp::PivotResultField** GroupField/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupField"), DISPID(DISPID_UNKNOWN/*[1610809361]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotResultField**)GroupField /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotResultField* __fastcall
PivotColumnMemberDispT<T>::get_GroupField(void)
{
  Owc10_xp::PivotResultField* GroupField;
  this->get_GroupField((Owc10_xp::PivotResultField**)&GroupField);
  return GroupField;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotColumnMemberDispT<T>::ShowDetails()
{
  _TDispID _dispid(*this, OLETEXT("ShowDetails"), DISPID(DISPID_UNKNOWN/*[1610809362]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotColumnMemberDispT<T>::HideDetails()
{
  _TDispID _dispid(*this, OLETEXT("HideDetails"), DISPID(DISPID_UNKNOWN/*[1610809363]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotColumnMemberDispT<T>::get_IsTotal(VARIANT_BOOL* IsTotal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsTotal"), DISPID(DISPID_UNKNOWN/*[1610809364]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(IsTotal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PivotColumnMemberDispT<T>::get_IsTotal(void)
{
  VARIANT_BOOL IsTotal;
  this->get_IsTotal((VARIANT_BOOL*)&IsTotal);
  return IsTotal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotColumnMemberDispT<T>::get_SourceMember(Owc10_xp::PivotMember** SourceMember/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SourceMember"), DISPID(DISPID_UNKNOWN/*[1610809365]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotMember**)SourceMember /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotMember* __fastcall
PivotColumnMemberDispT<T>::get_SourceMember(void)
{
  Owc10_xp::PivotMember* SourceMember;
  this->get_SourceMember((Owc10_xp::PivotMember**)&SourceMember);
  return SourceMember;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotColumnMemberDispT<T>::get_View(Owc10_xp::PivotView** View/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("View"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotView**)View /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotView* __fastcall
PivotColumnMemberDispT<T>::get_View(void)
{
  Owc10_xp::PivotView* View;
  this->get_View((Owc10_xp::PivotView**)&View);
  return View;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotColumnMemberDispT<T>::get_ChildMembers(Owc10_xp::PivotMembers** Members/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChildMembers"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotMembers**)Members /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotMembers* __fastcall
PivotColumnMemberDispT<T>::get_ChildMembers(void)
{
  Owc10_xp::PivotMembers* Members;
  this->get_ChildMembers((Owc10_xp::PivotMembers**)&Members);
  return Members;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotColumnMemberDispT<T>::get_ParentMember(Owc10_xp::PivotMember** Member/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ParentMember"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotMember**)Member /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotMember* __fastcall
PivotColumnMemberDispT<T>::get_ParentMember(void)
{
  Owc10_xp::PivotMember* Member;
  this->get_ParentMember((Owc10_xp::PivotMember**)&Member);
  return Member;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotColumnMemberDispT<T>::get_FindMember(BSTR Path/*[in]*/, 
                                          Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/, 
                                          Owc10_xp::PivotMember** Member/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FindMember"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<2> _args;
  _args[1] = Path /*[VT_BSTR:0]*/;
  _args[2] = (int)Format /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotMember**)Member /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotMember* __fastcall
PivotColumnMemberDispT<T>::get_FindMember(BSTR Path/*[in]*/, 
                                          Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/)
{
  Owc10_xp::PivotMember* Member;
  this->get_FindMember(Path, Format, (Owc10_xp::PivotMember**)&Member);
  return Member;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotColumnMemberDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(6023));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PivotColumnMemberDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotColumnMemberDispT<T>::get_Caption(BSTR* Caption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(6028));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Caption /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PivotColumnMemberDispT<T>::get_Caption(void)
{
  BSTR Caption;
  this->get_Caption((BSTR*)&Caption);
  return Caption;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotColumnMemberDispT<T>::get_Value(VARIANT* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PivotColumnMemberDispT<T>::get_Value(void)
{
  VARIANT Value;
  this->get_Value((VARIANT*)&Value);
  return Value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotColumnMemberDispT<T>::get_UniqueName(BSTR* UniqueName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UniqueName"), DISPID(6022));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(UniqueName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PivotColumnMemberDispT<T>::get_UniqueName(void)
{
  BSTR UniqueName;
  this->get_UniqueName((BSTR*)&UniqueName);
  return UniqueName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotColumnMemberDispT<T>::get_Field(Owc10_xp::PivotField** Field/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Field"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotField**)Field /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotField* __fastcall
PivotColumnMemberDispT<T>::get_Field(void)
{
  Owc10_xp::PivotField* Field;
  this->get_Field((Owc10_xp::PivotField**)&Field);
  return Field;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotColumnMemberDispT<T>::get_Path(Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/, 
                                    BSTR* Path/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Path"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)Format /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(Path /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PivotColumnMemberDispT<T>::get_Path(Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/)
{
  BSTR Path;
  this->get_Path(Format, (BSTR*)&Path);
  return Path;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotColumnMemberDispT<T>::get_TimeValue(VARIANT* TimeValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TimeValue"), DISPID(DISPID_UNKNOWN/*[1610743818]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(TimeValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PivotColumnMemberDispT<T>::get_TimeValue(void)
{
  VARIANT TimeValue;
  this->get_TimeValue((VARIANT*)&TimeValue);
  return TimeValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotColumnMemberDispT<T>::get_IsValid(VARIANT_BOOL* Valid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsValid"), DISPID(DISPID_UNKNOWN/*[1610743819]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Valid /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PivotColumnMemberDispT<T>::get_IsValid(void)
{
  VARIANT_BOOL Valid;
  this->get_IsValid((VARIANT_BOOL*)&Valid);
  return Valid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotColumnMemberDispT<T>::get_CustomGroupType(Owc10_xp::PivotMemberCustomGroupTypeEnum* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CustomGroupType"), DISPID(DISPID_UNKNOWN/*[1610743820]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotMemberCustomGroupTypeEnum __fastcall
PivotColumnMemberDispT<T>::get_CustomGroupType(void)
{
  Owc10_xp::PivotMemberCustomGroupTypeEnum Type;
  this->get_CustomGroupType((Owc10_xp::PivotMemberCustomGroupTypeEnum*)&Type);
  return Type;
}

// *********************************************************************//
// DispIntf:  PivotColumnMembers
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {30971542-EEB8-11D2-8F35-00600893B533}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotColumnMembersDispT<T>::get_Item(VARIANT Index/*[in]*/, 
                                     Owc10_xp::PivotColumnMember** Member/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotColumnMember**)Member /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotColumnMember* __fastcall
PivotColumnMembersDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Owc10_xp::PivotColumnMember* Member;
  this->get_Item(Index, (Owc10_xp::PivotColumnMember**)&Member);
  return Member;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotColumnMembersDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotColumnMembersDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotColumnMembersDispT<T>::get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
PivotColumnMembersDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunk;
  this->get__NewEnum((LPUNKNOWN*)&ppunk);
  return ppunk;
}

// *********************************************************************//
// DispIntf:  PivotDetailRange
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B47-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDetailRangeDispT<T>::get_Cell(Owc10_xp::PivotCell** Cell/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Cell"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotCell**)Cell /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotCell* __fastcall
PivotDetailRangeDispT<T>::get_Cell(void)
{
  Owc10_xp::PivotCell* Cell;
  this->get_Cell((Owc10_xp::PivotCell**)&Cell);
  return Cell;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDetailRangeDispT<T>::get_TopLeft(Owc10_xp::PivotDetailCell** TopLeft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TopLeft"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotDetailCell**)TopLeft /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotDetailCell* __fastcall
PivotDetailRangeDispT<T>::get_TopLeft(void)
{
  Owc10_xp::PivotDetailCell* TopLeft;
  this->get_TopLeft((Owc10_xp::PivotDetailCell**)&TopLeft);
  return TopLeft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDetailRangeDispT<T>::get_BottomRight(Owc10_xp::PivotDetailCell** BottomRight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BottomRight"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotDetailCell**)BottomRight /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotDetailCell* __fastcall
PivotDetailRangeDispT<T>::get_BottomRight(void)
{
  Owc10_xp::PivotDetailCell* BottomRight;
  this->get_BottomRight((Owc10_xp::PivotDetailCell**)&BottomRight);
  return BottomRight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotDetailRangeDispT<T>::get_Fields(Owc10_xp::PivotFields** ppPF/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Fields"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotFields**)ppPF /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotFields* __fastcall
PivotDetailRangeDispT<T>::get_Fields(void)
{
  Owc10_xp::PivotFields* ppPF;
  this->get_Fields((Owc10_xp::PivotFields**)&ppPF);
  return ppPF;
}

// *********************************************************************//
// DispIntf:  PivotPageMember
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C575AE1E-3959-441A-BED4-D3DEA9EB8037}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotPageMemberDispT<T>::get_ChildPageMembers(Owc10_xp::PivotPageMembers** Members/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChildPageMembers"), DISPID(DISPID_UNKNOWN/*[1610874880]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotPageMembers**)Members /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotPageMembers* __fastcall
PivotPageMemberDispT<T>::get_ChildPageMembers(void)
{
  Owc10_xp::PivotPageMembers* Members;
  this->get_ChildPageMembers((Owc10_xp::PivotPageMembers**)&Members);
  return Members;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotPageMemberDispT<T>::get_ParentPageMember(Owc10_xp::PivotPageMember** ParentPageMember/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ParentPageMember"), DISPID(DISPID_UNKNOWN/*[1610874881]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotPageMember**)ParentPageMember /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotPageMember* __fastcall
PivotPageMemberDispT<T>::get_ParentPageMember(void)
{
  Owc10_xp::PivotPageMember* ParentPageMember;
  this->get_ParentPageMember((Owc10_xp::PivotPageMember**)&ParentPageMember);
  return ParentPageMember;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotPageMemberDispT<T>::get_FindPageMember(BSTR Path/*[in]*/, 
                                            Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/, 
                                            Owc10_xp::PivotPageMember** Member/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FindPageMember"), DISPID(DISPID_UNKNOWN/*[1610874882]*/));
  TAutoArgs<2> _args;
  _args[1] = Path /*[VT_BSTR:0]*/;
  _args[2] = (int)Format /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotPageMember**)Member /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotPageMember* __fastcall
PivotPageMemberDispT<T>::get_FindPageMember(BSTR Path/*[in]*/, 
                                            Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/)
{
  Owc10_xp::PivotPageMember* Member;
  this->get_FindPageMember(Path, Format, (Owc10_xp::PivotPageMember**)&Member);
  return Member;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotPageMemberDispT<T>::get_TotalPageMember(Owc10_xp::PivotPageMember** TotalMember/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TotalPageMember"), DISPID(DISPID_UNKNOWN/*[1610874883]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotPageMember**)TotalMember /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotPageMember* __fastcall
PivotPageMemberDispT<T>::get_TotalPageMember(void)
{
  Owc10_xp::PivotPageMember* TotalMember;
  this->get_TotalPageMember((Owc10_xp::PivotPageMember**)&TotalMember);
  return TotalMember;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotPageMemberDispT<T>::get_ChildAxisMembers(Owc10_xp::PivotAxisMembers** Members/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChildAxisMembers"), DISPID(DISPID_UNKNOWN/*[1610809344]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotAxisMembers**)Members /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotAxisMembers* __fastcall
PivotPageMemberDispT<T>::get_ChildAxisMembers(void)
{
  Owc10_xp::PivotAxisMembers* Members;
  this->get_ChildAxisMembers((Owc10_xp::PivotAxisMembers**)&Members);
  return Members;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotPageMemberDispT<T>::get_ParentAxisMember(Owc10_xp::PivotRowMember** ParentAxisMember/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ParentAxisMember"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotRowMember**)ParentAxisMember /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotRowMember* __fastcall
PivotPageMemberDispT<T>::get_ParentAxisMember(void)
{
  Owc10_xp::PivotRowMember* ParentAxisMember;
  this->get_ParentAxisMember((Owc10_xp::PivotRowMember**)&ParentAxisMember);
  return ParentAxisMember;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotPageMemberDispT<T>::get_FindAxisMember(BSTR Path/*[in]*/, 
                                            Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/, 
                                            Owc10_xp::PivotRowMember** Member/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FindAxisMember"), DISPID(DISPID_UNKNOWN/*[1610809346]*/));
  TAutoArgs<2> _args;
  _args[1] = Path /*[VT_BSTR:0]*/;
  _args[2] = (int)Format /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotRowMember**)Member /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotRowMember* __fastcall
PivotPageMemberDispT<T>::get_FindAxisMember(BSTR Path/*[in]*/, 
                                            Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/)
{
  Owc10_xp::PivotRowMember* Member;
  this->get_FindAxisMember(Path, Format, (Owc10_xp::PivotRowMember**)&Member);
  return Member;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotPageMemberDispT<T>::get_TotalMember(Owc10_xp::PivotRowMember** TotalMember/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TotalMember"), DISPID(DISPID_UNKNOWN/*[1610809347]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotRowMember**)TotalMember /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotRowMember* __fastcall
PivotPageMemberDispT<T>::get_TotalMember(void)
{
  Owc10_xp::PivotRowMember* TotalMember;
  this->get_TotalMember((Owc10_xp::PivotRowMember**)&TotalMember);
  return TotalMember;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotPageMemberDispT<T>::get_Axis(Owc10_xp::PivotResultAxis** Axis/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Axis"), DISPID(DISPID_UNKNOWN/*[1610809348]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotResultAxis**)Axis /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotResultAxis* __fastcall
PivotPageMemberDispT<T>::get_Axis(void)
{
  Owc10_xp::PivotResultAxis* Axis;
  this->get_Axis((Owc10_xp::PivotResultAxis**)&Axis);
  return Axis;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotPageMemberDispT<T>::get_Expanded(VARIANT_BOOL* Expanded/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Expanded"), DISPID(DISPID_UNKNOWN/*[1610809349]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Expanded /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PivotPageMemberDispT<T>::get_Expanded(void)
{
  VARIANT_BOOL Expanded;
  this->get_Expanded((VARIANT_BOOL*)&Expanded);
  return Expanded;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotPageMemberDispT<T>::set_Expanded(VARIANT_BOOL Expanded/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Expanded"), DISPID(1610809349));
  TAutoArgs<1> _args;
  _args[1] = Expanded /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotPageMemberDispT<T>::get_Top(long* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(DISPID_UNKNOWN/*[1610809351]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotPageMemberDispT<T>::get_Top(void)
{
  long Top;
  this->get_Top((long*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotPageMemberDispT<T>::get_Left(long* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(DISPID_UNKNOWN/*[1610809352]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotPageMemberDispT<T>::get_Left(void)
{
  long Left;
  this->get_Left((long*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotPageMemberDispT<T>::get_Width(long* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(DISPID_UNKNOWN/*[1610809353]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotPageMemberDispT<T>::get_Width(void)
{
  long Width;
  this->get_Width((long*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotPageMemberDispT<T>::set_Width(long Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1610809353));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotPageMemberDispT<T>::get_Height(long* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(DISPID_UNKNOWN/*[1610809355]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotPageMemberDispT<T>::get_Height(void)
{
  long Height;
  this->get_Height((long*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotPageMemberDispT<T>::set_Height(long Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1610809355));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotPageMemberDispT<T>::get_AutoFit(VARIANT_BOOL* AutoFit/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoFit"), DISPID(DISPID_UNKNOWN/*[1610809357]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AutoFit /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PivotPageMemberDispT<T>::get_AutoFit(void)
{
  VARIANT_BOOL AutoFit;
  this->get_AutoFit((VARIANT_BOOL*)&AutoFit);
  return AutoFit;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotPageMemberDispT<T>::set_AutoFit(VARIANT_BOOL AutoFit/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoFit"), DISPID(1610809357));
  TAutoArgs<1> _args;
  _args[1] = AutoFit /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotPageMemberDispT<T>::get_Hyperlink(Owc10_xp::PivotHyperlink** Hyperlink/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Hyperlink"), DISPID(DISPID_UNKNOWN/*[1610809359]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotHyperlink**)Hyperlink /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotHyperlink* __fastcall
PivotPageMemberDispT<T>::get_Hyperlink(void)
{
  Owc10_xp::PivotHyperlink* Hyperlink;
  this->get_Hyperlink((Owc10_xp::PivotHyperlink**)&Hyperlink);
  return Hyperlink;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotPageMemberDispT<T>::get_MemberProperties(Owc10_xp::PivotResultMemberProperties** MemberProperties/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MemberProperties"), DISPID(DISPID_UNKNOWN/*[1610809360]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotResultMemberProperties**)MemberProperties /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotResultMemberProperties* __fastcall
PivotPageMemberDispT<T>::get_MemberProperties(void)
{
  Owc10_xp::PivotResultMemberProperties* MemberProperties;
  this->get_MemberProperties((Owc10_xp::PivotResultMemberProperties**)&MemberProperties);
  return MemberProperties;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotPageMemberDispT<T>::get_GroupField(Owc10_xp::PivotResultField** GroupField/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupField"), DISPID(DISPID_UNKNOWN/*[1610809361]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotResultField**)GroupField /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotResultField* __fastcall
PivotPageMemberDispT<T>::get_GroupField(void)
{
  Owc10_xp::PivotResultField* GroupField;
  this->get_GroupField((Owc10_xp::PivotResultField**)&GroupField);
  return GroupField;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotPageMemberDispT<T>::ShowDetails()
{
  _TDispID _dispid(*this, OLETEXT("ShowDetails"), DISPID(DISPID_UNKNOWN/*[1610809362]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotPageMemberDispT<T>::HideDetails()
{
  _TDispID _dispid(*this, OLETEXT("HideDetails"), DISPID(DISPID_UNKNOWN/*[1610809363]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotPageMemberDispT<T>::get_IsTotal(VARIANT_BOOL* IsTotal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsTotal"), DISPID(DISPID_UNKNOWN/*[1610809364]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(IsTotal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PivotPageMemberDispT<T>::get_IsTotal(void)
{
  VARIANT_BOOL IsTotal;
  this->get_IsTotal((VARIANT_BOOL*)&IsTotal);
  return IsTotal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotPageMemberDispT<T>::get_SourceMember(Owc10_xp::PivotMember** SourceMember/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SourceMember"), DISPID(DISPID_UNKNOWN/*[1610809365]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotMember**)SourceMember /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotMember* __fastcall
PivotPageMemberDispT<T>::get_SourceMember(void)
{
  Owc10_xp::PivotMember* SourceMember;
  this->get_SourceMember((Owc10_xp::PivotMember**)&SourceMember);
  return SourceMember;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotPageMemberDispT<T>::get_View(Owc10_xp::PivotView** View/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("View"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotView**)View /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotView* __fastcall
PivotPageMemberDispT<T>::get_View(void)
{
  Owc10_xp::PivotView* View;
  this->get_View((Owc10_xp::PivotView**)&View);
  return View;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotPageMemberDispT<T>::get_ChildMembers(Owc10_xp::PivotMembers** Members/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChildMembers"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotMembers**)Members /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotMembers* __fastcall
PivotPageMemberDispT<T>::get_ChildMembers(void)
{
  Owc10_xp::PivotMembers* Members;
  this->get_ChildMembers((Owc10_xp::PivotMembers**)&Members);
  return Members;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotPageMemberDispT<T>::get_ParentMember(Owc10_xp::PivotMember** Member/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ParentMember"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotMember**)Member /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotMember* __fastcall
PivotPageMemberDispT<T>::get_ParentMember(void)
{
  Owc10_xp::PivotMember* Member;
  this->get_ParentMember((Owc10_xp::PivotMember**)&Member);
  return Member;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotPageMemberDispT<T>::get_FindMember(BSTR Path/*[in]*/, 
                                        Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/, 
                                        Owc10_xp::PivotMember** Member/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FindMember"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<2> _args;
  _args[1] = Path /*[VT_BSTR:0]*/;
  _args[2] = (int)Format /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotMember**)Member /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotMember* __fastcall
PivotPageMemberDispT<T>::get_FindMember(BSTR Path/*[in]*/, 
                                        Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/)
{
  Owc10_xp::PivotMember* Member;
  this->get_FindMember(Path, Format, (Owc10_xp::PivotMember**)&Member);
  return Member;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotPageMemberDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(6023));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PivotPageMemberDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotPageMemberDispT<T>::get_Caption(BSTR* Caption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(6028));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Caption /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PivotPageMemberDispT<T>::get_Caption(void)
{
  BSTR Caption;
  this->get_Caption((BSTR*)&Caption);
  return Caption;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotPageMemberDispT<T>::get_Value(VARIANT* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PivotPageMemberDispT<T>::get_Value(void)
{
  VARIANT Value;
  this->get_Value((VARIANT*)&Value);
  return Value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotPageMemberDispT<T>::get_UniqueName(BSTR* UniqueName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UniqueName"), DISPID(6022));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(UniqueName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PivotPageMemberDispT<T>::get_UniqueName(void)
{
  BSTR UniqueName;
  this->get_UniqueName((BSTR*)&UniqueName);
  return UniqueName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotPageMemberDispT<T>::get_Field(Owc10_xp::PivotField** Field/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Field"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotField**)Field /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotField* __fastcall
PivotPageMemberDispT<T>::get_Field(void)
{
  Owc10_xp::PivotField* Field;
  this->get_Field((Owc10_xp::PivotField**)&Field);
  return Field;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotPageMemberDispT<T>::get_Path(Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/, 
                                  BSTR* Path/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Path"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)Format /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(Path /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PivotPageMemberDispT<T>::get_Path(Owc10_xp::PivotMemberFindFormatEnum Format/*[in]*/)
{
  BSTR Path;
  this->get_Path(Format, (BSTR*)&Path);
  return Path;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotPageMemberDispT<T>::get_TimeValue(VARIANT* TimeValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TimeValue"), DISPID(DISPID_UNKNOWN/*[1610743818]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(TimeValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PivotPageMemberDispT<T>::get_TimeValue(void)
{
  VARIANT TimeValue;
  this->get_TimeValue((VARIANT*)&TimeValue);
  return TimeValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotPageMemberDispT<T>::get_IsValid(VARIANT_BOOL* Valid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsValid"), DISPID(DISPID_UNKNOWN/*[1610743819]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Valid /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PivotPageMemberDispT<T>::get_IsValid(void)
{
  VARIANT_BOOL Valid;
  this->get_IsValid((VARIANT_BOOL*)&Valid);
  return Valid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotPageMemberDispT<T>::get_CustomGroupType(Owc10_xp::PivotMemberCustomGroupTypeEnum* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CustomGroupType"), DISPID(DISPID_UNKNOWN/*[1610743820]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotMemberCustomGroupTypeEnum __fastcall
PivotPageMemberDispT<T>::get_CustomGroupType(void)
{
  Owc10_xp::PivotMemberCustomGroupTypeEnum Type;
  this->get_CustomGroupType((Owc10_xp::PivotMemberCustomGroupTypeEnum*)&Type);
  return Type;
}

// *********************************************************************//
// DispIntf:  PivotPageMembers
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E3AB2FF8-B95F-4C05-BF3F-6E9BA007F81C}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotPageMembersDispT<T>::get_Item(VARIANT Index/*[in]*/, 
                                   Owc10_xp::PivotPageMember** Member/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotPageMember**)Member /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotPageMember* __fastcall
PivotPageMembersDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Owc10_xp::PivotPageMember* Member;
  this->get_Item(Index, (Owc10_xp::PivotPageMember**)&Member);
  return Member;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotPageMembersDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotPageMembersDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotPageMembersDispT<T>::get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
PivotPageMembersDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunk;
  this->get__NewEnum((LPUNKNOWN*)&ppunk);
  return ppunk;
}

// *********************************************************************//
// DispIntf:  DropSource
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D6CE4620-E224-11D2-8F35-00600893B533}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DropSourceDispT<T>::GiveFeedback(unsigned_long dwEffect)
{
  _TDispID _dispid(*this, OLETEXT("GiveFeedback"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<1> _args;
  _args[1] = dwEffect /*[VT_UI4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DropSourceDispT<T>::QueryContinueDrag(VARIANT_BOOL EscapePressed, long KeyState)
{
  _TDispID _dispid(*this, OLETEXT("QueryContinueDrag"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<2> _args;
  _args[1] = EscapePressed /*[VT_BOOL:0]*/;
  _args[2] = KeyState /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  DropTarget
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {77186960-CDB1-11D2-8F2E-00600893B533}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DropTargetDispT<T>::DragEnter(long x/*[in]*/, long y/*[in]*/, long KeyState/*[in]*/, 
                              unsigned_long* Effect/*[in,out]*/, LPDISPATCH Object/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DragEnter"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<5> _args;
  _args[1] = x /*[VT_I4:0]*/;
  _args[2] = y /*[VT_I4:0]*/;
  _args[3] = KeyState /*[VT_I4:0]*/;
  _args[4] = Effect /*[VT_UI4:1]*/;
  _args[5] = Object /*[VT_DISPATCH:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DropTargetDispT<T>::DragOver(long x/*[in]*/, long y/*[in]*/, long KeyState/*[in]*/, 
                             unsigned_long* Effect/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DragOver"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<4> _args;
  _args[1] = x /*[VT_I4:0]*/;
  _args[2] = y /*[VT_I4:0]*/;
  _args[3] = KeyState /*[VT_I4:0]*/;
  _args[4] = Effect /*[VT_UI4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DropTargetDispT<T>::DragLeave()
{
  _TDispID _dispid(*this, OLETEXT("DragLeave"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DropTargetDispT<T>::Drop(long x/*[in]*/, long y/*[in]*/, long KeyState/*[in]*/, 
                         unsigned_long* Effect/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("Drop"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<4> _args;
  _args[1] = x /*[VT_I4:0]*/;
  _args[2] = y /*[VT_I4:0]*/;
  _args[3] = KeyState /*[VT_I4:0]*/;
  _args[4] = Effect /*[VT_UI4:1]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  OCCommands
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {85FE02E2-51A7-11D3-BE84-0050041DB15A}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OCCommandsDispT<T>::get_Item(VARIANT Index/*[in]*/, Owc10_xp::OCCommand** Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::OCCommand**)Item /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::OCCommand* __fastcall
OCCommandsDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Owc10_xp::OCCommand* Item;
  this->get_Item(Index, (Owc10_xp::OCCommand**)&Item);
  return Item;
}

// *********************************************************************//
// DispIntf:  OCCommand
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B9B7C776-51A7-11D3-BE84-0050041DB15A}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OCCommandDispT<T>::get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Enabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
OCCommandDispT<T>::get_Enabled(void)
{
  VARIANT_BOOL Enabled;
  this->get_Enabled((VARIANT_BOOL*)&Enabled);
  return Enabled;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OCCommandDispT<T>::get_Checked(VARIANT_BOOL* Checked/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Checked"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Checked /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
OCCommandDispT<T>::get_Checked(void)
{
  VARIANT_BOOL Checked;
  this->get_Checked((VARIANT_BOOL*)&Checked);
  return Checked;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OCCommandDispT<T>::get_TipText(BSTR* TipText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TipText"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(TipText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
OCCommandDispT<T>::get_TipText(void)
{
  BSTR TipText;
  this->get_TipText((BSTR*)&TipText);
  return TipText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OCCommandDispT<T>::Execute()
{
  _TDispID _dispid(*this, OLETEXT("Execute"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  PivotResultRowAxis
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2C8CED11-01AF-11D3-8F35-00600893B533}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultRowAxisDispT<T>::get_SourceRowAxis(Owc10_xp::PivotAxis** Axis/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SourceRowAxis"), DISPID(1610874880));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotAxis**)Axis /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotAxis* __fastcall
PivotResultRowAxisDispT<T>::get_SourceRowAxis(void)
{
  Owc10_xp::PivotAxis* Axis;
  this->get_SourceRowAxis((Owc10_xp::PivotAxis**)&Axis);
  return Axis;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultRowAxisDispT<T>::get_RowMember(Owc10_xp::PivotAxisMember** Member/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RowMember"), DISPID(1610874881));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotAxisMember**)Member /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotAxisMember* __fastcall
PivotResultRowAxisDispT<T>::get_RowMember(void)
{
  Owc10_xp::PivotAxisMember* Member;
  this->get_RowMember((Owc10_xp::PivotAxisMember**)&Member);
  return Member;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultRowAxisDispT<T>::get_Fields(Owc10_xp::PivotFields** Fields/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Fields"), DISPID(1610809344));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotFields**)Fields /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotFields* __fastcall
PivotResultRowAxisDispT<T>::get_Fields(void)
{
  Owc10_xp::PivotFields* Fields;
  this->get_Fields((Owc10_xp::PivotFields**)&Fields);
  return Fields;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultRowAxisDispT<T>::get_GroupFields(Owc10_xp::PivotResultGroupFields** GroupFields/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupFields"), DISPID(1610809345));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotResultGroupFields**)GroupFields /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotResultGroupFields* __fastcall
PivotResultRowAxisDispT<T>::get_GroupFields(void)
{
  Owc10_xp::PivotResultGroupFields* GroupFields;
  this->get_GroupFields((Owc10_xp::PivotResultGroupFields**)&GroupFields);
  return GroupFields;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultRowAxisDispT<T>::get_Member(Owc10_xp::PivotRowMember** Member/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Member"), DISPID(1610809346));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotRowMember**)Member /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotRowMember* __fastcall
PivotResultRowAxisDispT<T>::get_Member(void)
{
  Owc10_xp::PivotRowMember* Member;
  this->get_Member((Owc10_xp::PivotRowMember**)&Member);
  return Member;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultRowAxisDispT<T>::get_Data(Owc10_xp::PivotData** Data/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Data"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotData**)Data /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotData* __fastcall
PivotResultRowAxisDispT<T>::get_Data(void)
{
  Owc10_xp::PivotData* Data;
  this->get_Data((Owc10_xp::PivotData**)&Data);
  return Data;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultRowAxisDispT<T>::get_SourceAxis(Owc10_xp::PivotGroupAxis** Axis/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SourceAxis"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotGroupAxis**)Axis /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotGroupAxis* __fastcall
PivotResultRowAxisDispT<T>::get_SourceAxis(void)
{
  Owc10_xp::PivotGroupAxis* Axis;
  this->get_SourceAxis((Owc10_xp::PivotGroupAxis**)&Axis);
  return Axis;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultRowAxisDispT<T>::get_Label(Owc10_xp::PivotResultLabel** Label/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotResultLabel**)Label /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotResultLabel* __fastcall
PivotResultRowAxisDispT<T>::get_Label(void)
{
  Owc10_xp::PivotResultLabel* Label;
  this->get_Label((Owc10_xp::PivotResultLabel**)&Label);
  return Label;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultRowAxisDispT<T>::get_Left(long* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotResultRowAxisDispT<T>::get_Left(void)
{
  long Left;
  this->get_Left((long*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultRowAxisDispT<T>::get_Top(long* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotResultRowAxisDispT<T>::get_Top(void)
{
  long Top;
  this->get_Top((long*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultRowAxisDispT<T>::get_Width(long* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotResultRowAxisDispT<T>::get_Width(void)
{
  long Width;
  this->get_Width((long*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultRowAxisDispT<T>::get_Height(long* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotResultRowAxisDispT<T>::get_Height(void)
{
  long Height;
  this->get_Height((long*)&Height);
  return Height;
}

// *********************************************************************//
// DispIntf:  PivotResultColumnAxis
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2C8CED12-01AF-11D3-8F35-00600893B533}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultColumnAxisDispT<T>::get_SourceColumnAxis(Owc10_xp::PivotAxis** Axis/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SourceColumnAxis"), DISPID(1610874880));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotAxis**)Axis /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotAxis* __fastcall
PivotResultColumnAxisDispT<T>::get_SourceColumnAxis(void)
{
  Owc10_xp::PivotAxis* Axis;
  this->get_SourceColumnAxis((Owc10_xp::PivotAxis**)&Axis);
  return Axis;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultColumnAxisDispT<T>::get_ColumnMember(Owc10_xp::PivotColumnMember** Member/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnMember"), DISPID(1610874881));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotColumnMember**)Member /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotColumnMember* __fastcall
PivotResultColumnAxisDispT<T>::get_ColumnMember(void)
{
  Owc10_xp::PivotColumnMember* Member;
  this->get_ColumnMember((Owc10_xp::PivotColumnMember**)&Member);
  return Member;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultColumnAxisDispT<T>::get_Fields(Owc10_xp::PivotFields** Fields/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Fields"), DISPID(1610809344));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotFields**)Fields /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotFields* __fastcall
PivotResultColumnAxisDispT<T>::get_Fields(void)
{
  Owc10_xp::PivotFields* Fields;
  this->get_Fields((Owc10_xp::PivotFields**)&Fields);
  return Fields;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultColumnAxisDispT<T>::get_GroupFields(Owc10_xp::PivotResultGroupFields** GroupFields/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupFields"), DISPID(1610809345));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotResultGroupFields**)GroupFields /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotResultGroupFields* __fastcall
PivotResultColumnAxisDispT<T>::get_GroupFields(void)
{
  Owc10_xp::PivotResultGroupFields* GroupFields;
  this->get_GroupFields((Owc10_xp::PivotResultGroupFields**)&GroupFields);
  return GroupFields;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultColumnAxisDispT<T>::get_Member(Owc10_xp::PivotRowMember** Member/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Member"), DISPID(1610809346));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotRowMember**)Member /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotRowMember* __fastcall
PivotResultColumnAxisDispT<T>::get_Member(void)
{
  Owc10_xp::PivotRowMember* Member;
  this->get_Member((Owc10_xp::PivotRowMember**)&Member);
  return Member;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultColumnAxisDispT<T>::get_Data(Owc10_xp::PivotData** Data/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Data"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotData**)Data /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotData* __fastcall
PivotResultColumnAxisDispT<T>::get_Data(void)
{
  Owc10_xp::PivotData* Data;
  this->get_Data((Owc10_xp::PivotData**)&Data);
  return Data;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultColumnAxisDispT<T>::get_SourceAxis(Owc10_xp::PivotGroupAxis** Axis/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SourceAxis"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotGroupAxis**)Axis /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotGroupAxis* __fastcall
PivotResultColumnAxisDispT<T>::get_SourceAxis(void)
{
  Owc10_xp::PivotGroupAxis* Axis;
  this->get_SourceAxis((Owc10_xp::PivotGroupAxis**)&Axis);
  return Axis;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultColumnAxisDispT<T>::get_Label(Owc10_xp::PivotResultLabel** Label/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotResultLabel**)Label /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotResultLabel* __fastcall
PivotResultColumnAxisDispT<T>::get_Label(void)
{
  Owc10_xp::PivotResultLabel* Label;
  this->get_Label((Owc10_xp::PivotResultLabel**)&Label);
  return Label;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultColumnAxisDispT<T>::get_Left(long* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotResultColumnAxisDispT<T>::get_Left(void)
{
  long Left;
  this->get_Left((long*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultColumnAxisDispT<T>::get_Top(long* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotResultColumnAxisDispT<T>::get_Top(void)
{
  long Top;
  this->get_Top((long*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultColumnAxisDispT<T>::get_Width(long* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotResultColumnAxisDispT<T>::get_Width(void)
{
  long Width;
  this->get_Width((long*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultColumnAxisDispT<T>::get_Height(long* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotResultColumnAxisDispT<T>::get_Height(void)
{
  long Height;
  this->get_Height((long*)&Height);
  return Height;
}

// *********************************************************************//
// DispIntf:  PivotResultFilterAxis
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2C8CED13-01AF-11D3-8F35-00600893B533}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultFilterAxisDispT<T>::get_SourceFilterAxis(Owc10_xp::PivotFilterAxis** Axis/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SourceFilterAxis"), DISPID(DISPID_UNKNOWN/*[1610809344]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotFilterAxis**)Axis /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotFilterAxis* __fastcall
PivotResultFilterAxisDispT<T>::get_SourceFilterAxis(void)
{
  Owc10_xp::PivotFilterAxis* Axis;
  this->get_SourceFilterAxis((Owc10_xp::PivotFilterAxis**)&Axis);
  return Axis;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultFilterAxisDispT<T>::get_FieldSets(Owc10_xp::PivotFieldSets** FieldSets/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FieldSets"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotFieldSets**)FieldSets /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotFieldSets* __fastcall
PivotResultFilterAxisDispT<T>::get_FieldSets(void)
{
  Owc10_xp::PivotFieldSets* FieldSets;
  this->get_FieldSets((Owc10_xp::PivotFieldSets**)&FieldSets);
  return FieldSets;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultFilterAxisDispT<T>::get_Data(Owc10_xp::PivotData** Data/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Data"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotData**)Data /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotData* __fastcall
PivotResultFilterAxisDispT<T>::get_Data(void)
{
  Owc10_xp::PivotData* Data;
  this->get_Data((Owc10_xp::PivotData**)&Data);
  return Data;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultFilterAxisDispT<T>::get_SourceAxis(Owc10_xp::PivotGroupAxis** Axis/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SourceAxis"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotGroupAxis**)Axis /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotGroupAxis* __fastcall
PivotResultFilterAxisDispT<T>::get_SourceAxis(void)
{
  Owc10_xp::PivotGroupAxis* Axis;
  this->get_SourceAxis((Owc10_xp::PivotGroupAxis**)&Axis);
  return Axis;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultFilterAxisDispT<T>::get_Label(Owc10_xp::PivotResultLabel** Label/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotResultLabel**)Label /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotResultLabel* __fastcall
PivotResultFilterAxisDispT<T>::get_Label(void)
{
  Owc10_xp::PivotResultLabel* Label;
  this->get_Label((Owc10_xp::PivotResultLabel**)&Label);
  return Label;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultFilterAxisDispT<T>::get_Left(long* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotResultFilterAxisDispT<T>::get_Left(void)
{
  long Left;
  this->get_Left((long*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultFilterAxisDispT<T>::get_Top(long* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotResultFilterAxisDispT<T>::get_Top(void)
{
  long Top;
  this->get_Top((long*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultFilterAxisDispT<T>::get_Width(long* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotResultFilterAxisDispT<T>::get_Width(void)
{
  long Width;
  this->get_Width((long*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultFilterAxisDispT<T>::get_Height(long* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotResultFilterAxisDispT<T>::get_Height(void)
{
  long Height;
  this->get_Height((long*)&Height);
  return Height;
}

// *********************************************************************//
// DispIntf:  PivotResultDataAxis
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2C8CED15-01AF-11D3-8F35-00600893B533}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultDataAxisDispT<T>::get_SourceDataAxis(Owc10_xp::PivotDataAxis** Axis/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SourceDataAxis"), DISPID(DISPID_UNKNOWN/*[1610809344]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotDataAxis**)Axis /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotDataAxis* __fastcall
PivotResultDataAxisDispT<T>::get_SourceDataAxis(void)
{
  Owc10_xp::PivotDataAxis* Axis;
  this->get_SourceDataAxis((Owc10_xp::PivotDataAxis**)&Axis);
  return Axis;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultDataAxisDispT<T>::get_Fields(Owc10_xp::PivotFields** Fields/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Fields"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotFields**)Fields /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotFields* __fastcall
PivotResultDataAxisDispT<T>::get_Fields(void)
{
  Owc10_xp::PivotFields* Fields;
  this->get_Fields((Owc10_xp::PivotFields**)&Fields);
  return Fields;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultDataAxisDispT<T>::get_Totals(Owc10_xp::PivotTotals** Totals/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Totals"), DISPID(DISPID_UNKNOWN/*[1610809346]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotTotals**)Totals /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotTotals* __fastcall
PivotResultDataAxisDispT<T>::get_Totals(void)
{
  Owc10_xp::PivotTotals* Totals;
  this->get_Totals((Owc10_xp::PivotTotals**)&Totals);
  return Totals;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultDataAxisDispT<T>::get_Data(Owc10_xp::PivotData** Data/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Data"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotData**)Data /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotData* __fastcall
PivotResultDataAxisDispT<T>::get_Data(void)
{
  Owc10_xp::PivotData* Data;
  this->get_Data((Owc10_xp::PivotData**)&Data);
  return Data;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultDataAxisDispT<T>::get_SourceAxis(Owc10_xp::PivotGroupAxis** Axis/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SourceAxis"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotGroupAxis**)Axis /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotGroupAxis* __fastcall
PivotResultDataAxisDispT<T>::get_SourceAxis(void)
{
  Owc10_xp::PivotGroupAxis* Axis;
  this->get_SourceAxis((Owc10_xp::PivotGroupAxis**)&Axis);
  return Axis;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultDataAxisDispT<T>::get_Label(Owc10_xp::PivotResultLabel** Label/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotResultLabel**)Label /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotResultLabel* __fastcall
PivotResultDataAxisDispT<T>::get_Label(void)
{
  Owc10_xp::PivotResultLabel* Label;
  this->get_Label((Owc10_xp::PivotResultLabel**)&Label);
  return Label;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultDataAxisDispT<T>::get_Left(long* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotResultDataAxisDispT<T>::get_Left(void)
{
  long Left;
  this->get_Left((long*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultDataAxisDispT<T>::get_Top(long* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotResultDataAxisDispT<T>::get_Top(void)
{
  long Top;
  this->get_Top((long*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultDataAxisDispT<T>::get_Width(long* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotResultDataAxisDispT<T>::get_Width(void)
{
  long Width;
  this->get_Width((long*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultDataAxisDispT<T>::get_Height(long* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotResultDataAxisDispT<T>::get_Height(void)
{
  long Height;
  this->get_Height((long*)&Height);
  return Height;
}

// *********************************************************************//
// DispIntf:  PivotRange
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B4A-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotRangeDispT<T>::get_TopLeft(Owc10_xp::PivotCell** Cell/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TopLeft"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotCell**)Cell /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotCell* __fastcall
PivotRangeDispT<T>::get_TopLeft(void)
{
  Owc10_xp::PivotCell* Cell;
  this->get_TopLeft((Owc10_xp::PivotCell**)&Cell);
  return Cell;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotRangeDispT<T>::get_BottomRight(Owc10_xp::PivotCell** Cell/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BottomRight"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotCell**)Cell /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotCell* __fastcall
PivotRangeDispT<T>::get_BottomRight(void)
{
  Owc10_xp::PivotCell* Cell;
  this->get_BottomRight((Owc10_xp::PivotCell**)&Cell);
  return Cell;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotRangeDispT<T>::get_RowMembers(Owc10_xp::PivotRowMembers** RowMembers/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RowMembers"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotRowMembers**)RowMembers /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotRowMembers* __fastcall
PivotRangeDispT<T>::get_RowMembers(void)
{
  Owc10_xp::PivotRowMembers* RowMembers;
  this->get_RowMembers((Owc10_xp::PivotRowMembers**)&RowMembers);
  return RowMembers;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotRangeDispT<T>::get_ColumnMembers(Owc10_xp::PivotColumnMembers** ColumnMembers/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnMembers"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotColumnMembers**)ColumnMembers /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotColumnMembers* __fastcall
PivotRangeDispT<T>::get_ColumnMembers(void)
{
  Owc10_xp::PivotColumnMembers* ColumnMembers;
  this->get_ColumnMembers((Owc10_xp::PivotColumnMembers**)&ColumnMembers);
  return ColumnMembers;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotRangeDispT<T>::get_Cells(Owc10_xp::PivotAxisMember* Row/*[in]*/, 
                              Owc10_xp::PivotColumnMember* Column/*[in]*/, 
                              Owc10_xp::PivotCell** Cell/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Cells"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::PivotAxisMember*)Row /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Owc10_xp::PivotColumnMember*)Column /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotCell**)Cell /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotCell* __fastcall
PivotRangeDispT<T>::get_Cells(Owc10_xp::PivotAxisMember* Row/*[in]*/, 
                              Owc10_xp::PivotColumnMember* Column/*[in]*/)
{
  Owc10_xp::PivotCell* Cell;
  this->get_Cells(Row, Column, (Owc10_xp::PivotCell**)&Cell);
  return Cell;
}

// *********************************************************************//
// DispIntf:  PivotResultLabel
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D5A2B201-0334-11D3-8F39-00600893B533}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultLabelDispT<T>::get_SourceLabel(Owc10_xp::PivotLabel** SourceLabel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SourceLabel"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotLabel**)SourceLabel /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotLabel* __fastcall
PivotResultLabelDispT<T>::get_SourceLabel(void)
{
  Owc10_xp::PivotLabel* SourceLabel;
  this->get_SourceLabel((Owc10_xp::PivotLabel**)&SourceLabel);
  return SourceLabel;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultLabelDispT<T>::get_Top(long* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotResultLabelDispT<T>::get_Top(void)
{
  long Top;
  this->get_Top((long*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultLabelDispT<T>::get_Left(long* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotResultLabelDispT<T>::get_Left(void)
{
  long Left;
  this->get_Left((long*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultLabelDispT<T>::get_Width(long* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotResultLabelDispT<T>::get_Width(void)
{
  long Width;
  this->get_Width((long*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultLabelDispT<T>::get_Height(long* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotResultLabelDispT<T>::get_Height(void)
{
  long Height;
  this->get_Height((long*)&Height);
  return Height;
}

// *********************************************************************//
// DispIntf:  PivotResultPageAxis
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2719FF1C-6999-4C17-94B3-887FCA2DCFA0}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultPageAxisDispT<T>::get_SourcePageAxis(Owc10_xp::PivotAxis** Axis/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SourcePageAxis"), DISPID(1610874880));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotAxis**)Axis /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotAxis* __fastcall
PivotResultPageAxisDispT<T>::get_SourcePageAxis(void)
{
  Owc10_xp::PivotAxis* Axis;
  this->get_SourcePageAxis((Owc10_xp::PivotAxis**)&Axis);
  return Axis;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultPageAxisDispT<T>::get_PageMember(Owc10_xp::PivotPageMember** Member/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PageMember"), DISPID(1610874881));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotPageMember**)Member /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotPageMember* __fastcall
PivotResultPageAxisDispT<T>::get_PageMember(void)
{
  Owc10_xp::PivotPageMember* Member;
  this->get_PageMember((Owc10_xp::PivotPageMember**)&Member);
  return Member;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultPageAxisDispT<T>::get_Fields(Owc10_xp::PivotFields** Fields/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Fields"), DISPID(1610809344));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotFields**)Fields /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotFields* __fastcall
PivotResultPageAxisDispT<T>::get_Fields(void)
{
  Owc10_xp::PivotFields* Fields;
  this->get_Fields((Owc10_xp::PivotFields**)&Fields);
  return Fields;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultPageAxisDispT<T>::get_GroupFields(Owc10_xp::PivotResultGroupFields** GroupFields/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupFields"), DISPID(1610809345));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotResultGroupFields**)GroupFields /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotResultGroupFields* __fastcall
PivotResultPageAxisDispT<T>::get_GroupFields(void)
{
  Owc10_xp::PivotResultGroupFields* GroupFields;
  this->get_GroupFields((Owc10_xp::PivotResultGroupFields**)&GroupFields);
  return GroupFields;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultPageAxisDispT<T>::get_Member(Owc10_xp::PivotRowMember** Member/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Member"), DISPID(1610809346));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotRowMember**)Member /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotRowMember* __fastcall
PivotResultPageAxisDispT<T>::get_Member(void)
{
  Owc10_xp::PivotRowMember* Member;
  this->get_Member((Owc10_xp::PivotRowMember**)&Member);
  return Member;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultPageAxisDispT<T>::get_Data(Owc10_xp::PivotData** Data/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Data"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotData**)Data /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotData* __fastcall
PivotResultPageAxisDispT<T>::get_Data(void)
{
  Owc10_xp::PivotData* Data;
  this->get_Data((Owc10_xp::PivotData**)&Data);
  return Data;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultPageAxisDispT<T>::get_SourceAxis(Owc10_xp::PivotGroupAxis** Axis/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SourceAxis"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotGroupAxis**)Axis /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotGroupAxis* __fastcall
PivotResultPageAxisDispT<T>::get_SourceAxis(void)
{
  Owc10_xp::PivotGroupAxis* Axis;
  this->get_SourceAxis((Owc10_xp::PivotGroupAxis**)&Axis);
  return Axis;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultPageAxisDispT<T>::get_Label(Owc10_xp::PivotResultLabel** Label/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotResultLabel**)Label /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotResultLabel* __fastcall
PivotResultPageAxisDispT<T>::get_Label(void)
{
  Owc10_xp::PivotResultLabel* Label;
  this->get_Label((Owc10_xp::PivotResultLabel**)&Label);
  return Label;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultPageAxisDispT<T>::get_Left(long* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotResultPageAxisDispT<T>::get_Left(void)
{
  long Left;
  this->get_Left((long*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultPageAxisDispT<T>::get_Top(long* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotResultPageAxisDispT<T>::get_Top(void)
{
  long Top;
  this->get_Top((long*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultPageAxisDispT<T>::get_Width(long* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotResultPageAxisDispT<T>::get_Width(void)
{
  long Width;
  this->get_Width((long*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultPageAxisDispT<T>::get_Height(long* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotResultPageAxisDispT<T>::get_Height(void)
{
  long Height;
  this->get_Height((long*)&Height);
  return Height;
}

// *********************************************************************//
// DispIntf:  PivotResultGroupFields
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3A3AF091-8C35-4CC7-A1F4-B70D239D773B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultGroupFieldsDispT<T>::get_Item(VARIANT Index/*[in]*/, 
                                         Owc10_xp::PivotResultField** Field/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotResultField**)Field /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotResultField* __fastcall
PivotResultGroupFieldsDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Owc10_xp::PivotResultField* Field;
  this->get_Item(Index, (Owc10_xp::PivotResultField**)&Field);
  return Field;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultGroupFieldsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PivotResultGroupFieldsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PivotResultGroupFieldsDispT<T>::get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
PivotResultGroupFieldsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunk;
  this->get__NewEnum((LPUNKNOWN*)&ppunk);
  return ppunk;
}

// *********************************************************************//
// DispIntf:  Coordinate
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {08801567-AFB8-45B0-A076-CC91579EC10E}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CoordinateDispT<T>::get_x(long* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("x"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pl /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
CoordinateDispT<T>::get_x(void)
{
  long pl;
  this->get_x((long*)&pl);
  return pl;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CoordinateDispT<T>::get_y(long* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("y"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pl /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
CoordinateDispT<T>::get_y(void)
{
  long pl;
  this->get_y((long*)&pl);
  return pl;
}

// *********************************************************************//
// DispIntf:  ChLegend
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AEC-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChLegendDispT<T>::get_Border(Owc10_xp::ChBorder** ppline/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Border"), DISPID(5004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChBorder**)ppline /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChBorder* __fastcall
ChLegendDispT<T>::get_Border(void)
{
  Owc10_xp::ChBorder* ppline;
  this->get_Border((Owc10_xp::ChBorder**)&ppline);
  return ppline;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChLegendDispT<T>::get_Font(Owc10_xp::ChFont** pfont/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(5200));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChFont**)pfont /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChFont* __fastcall
ChLegendDispT<T>::get_Font(void)
{
  Owc10_xp::ChFont* pfont;
  this->get_Font((Owc10_xp::ChFont**)&pfont);
  return pfont;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChLegendDispT<T>::get_Interior(Owc10_xp::ChInterior** ppinterior/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Interior"), DISPID(5007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChInterior**)ppinterior /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChInterior* __fastcall
ChLegendDispT<T>::get_Interior(void)
{
  Owc10_xp::ChInterior* ppinterior;
  this->get_Interior((Owc10_xp::ChInterior**)&ppinterior);
  return ppinterior;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChLegendDispT<T>::get_LegendEntries(Owc10_xp::ChLegendEntries** pplegendentries/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LegendEntries"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChLegendEntries**)pplegendentries /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChLegendEntries* __fastcall
ChLegendDispT<T>::get_LegendEntries(void)
{
  Owc10_xp::ChLegendEntries* pplegendentries;
  this->get_LegendEntries((Owc10_xp::ChLegendEntries**)&pplegendentries);
  return pplegendentries;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChLegendDispT<T>::get_Parent(LPDISPATCH* ppidispatch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(5201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidispatch /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ChLegendDispT<T>::get_Parent(void)
{
  LPDISPATCH ppidispatch;
  this->get_Parent((LPDISPATCH*)&ppidispatch);
  return ppidispatch;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChLegendDispT<T>::set_Position(Owc10_xp::ChartLegendPositionEnum pocpPos/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Position"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)pocpPos /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChLegendDispT<T>::get_Position(Owc10_xp::ChartLegendPositionEnum* pocpPos/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Position"), DISPID(1610743813));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pocpPos /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartLegendPositionEnum __fastcall
ChLegendDispT<T>::get_Position(void)
{
  Owc10_xp::ChartLegendPositionEnum pocpPos;
  this->get_Position((Owc10_xp::ChartLegendPositionEnum*)&pocpPos);
  return pocpPos;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChLegendDispT<T>::Select()
{
  _TDispID _dispid(*this, OLETEXT("Select"), DISPID(5036));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChLegendDispT<T>::get_Top(long* ptop/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ptop /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChLegendDispT<T>::get_Top(void)
{
  long ptop;
  this->get_Top((long*)&ptop);
  return ptop;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChLegendDispT<T>::set_Top(long ptop/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1610743816));
  TAutoArgs<1> _args;
  _args[1] = ptop /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChLegendDispT<T>::get_Left(long* pleft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(DISPID_UNKNOWN/*[1610743818]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pleft /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChLegendDispT<T>::get_Left(void)
{
  long pleft;
  this->get_Left((long*)&pleft);
  return pleft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChLegendDispT<T>::set_Left(long pleft/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1610743818));
  TAutoArgs<1> _args;
  _args[1] = pleft /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChLegendDispT<T>::get_Bottom(long* pbottom/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bottom"), DISPID(DISPID_UNKNOWN/*[1610743820]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbottom /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChLegendDispT<T>::get_Bottom(void)
{
  long pbottom;
  this->get_Bottom((long*)&pbottom);
  return pbottom;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChLegendDispT<T>::get_Right(long* pright/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Right"), DISPID(DISPID_UNKNOWN/*[1610743821]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pright /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChLegendDispT<T>::get_Right(void)
{
  long pright;
  this->get_Right((long*)&pright);
  return pright;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChLegendDispT<T>::get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObjectType"), DISPID(DISPID_UNKNOWN/*[1610743822]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pcs /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartSelectionsEnum __fastcall
ChLegendDispT<T>::get_ObjectType(void)
{
  Owc10_xp::ChartSelectionsEnum pcs;
  this->get_ObjectType((Owc10_xp::ChartSelectionsEnum*)&pcs);
  return pcs;
}

// *********************************************************************//
// DispIntf:  ChLegendEntries
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AB8-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChLegendEntriesDispT<T>::get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
ChLegendEntriesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunk;
  this->get__NewEnum((LPUNKNOWN*)&ppunk);
  return ppunk;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChLegendEntriesDispT<T>::get_Count(long* cLegendEntries/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(cLegendEntries /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChLegendEntriesDispT<T>::get_Count(void)
{
  long cLegendEntries;
  this->get_Count((long*)&cLegendEntries);
  return cLegendEntries;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChLegendEntriesDispT<T>::get_Item(long Index/*[in]*/, 
                                  Owc10_xp::ChLegendEntry** pplegendentry/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChLegendEntry**)pplegendentry /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChLegendEntry* __fastcall
ChLegendEntriesDispT<T>::get_Item(long Index/*[in]*/)
{
  Owc10_xp::ChLegendEntry* pplegendentry;
  this->get_Item(Index, (Owc10_xp::ChLegendEntry**)&pplegendentry);
  return pplegendentry;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChLegendEntriesDispT<T>::get_Parent(Owc10_xp::ChLegend** pplegend/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(5201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChLegend**)pplegend /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChLegend* __fastcall
ChLegendEntriesDispT<T>::get_Parent(void)
{
  Owc10_xp::ChLegend* pplegend;
  this->get_Parent((Owc10_xp::ChLegend**)&pplegend);
  return pplegend;
}

// *********************************************************************//
// DispIntf:  ChLegendEntry
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AB9-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChLegendEntryDispT<T>::get_Font(Owc10_xp::ChFont** ppfont/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(5200));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChFont**)ppfont /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChFont* __fastcall
ChLegendEntryDispT<T>::get_Font(void)
{
  Owc10_xp::ChFont* ppfont;
  this->get_Font((Owc10_xp::ChFont**)&ppfont);
  return ppfont;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChLegendEntryDispT<T>::set_Visible(VARIANT_BOOL pfVisible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<1> _args;
  _args[1] = pfVisible /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChLegendEntryDispT<T>::get_Visible(VARIANT_BOOL* pfVisible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1610743809));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfVisible /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChLegendEntryDispT<T>::get_Visible(void)
{
  VARIANT_BOOL pfVisible;
  this->get_Visible((VARIANT_BOOL*)&pfVisible);
  return pfVisible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChLegendEntryDispT<T>::get_Index(long* pilegendentry/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(5204));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pilegendentry /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChLegendEntryDispT<T>::get_Index(void)
{
  long pilegendentry;
  this->get_Index((long*)&pilegendentry);
  return pilegendentry;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChLegendEntryDispT<T>::get_Parent(Owc10_xp::ChLegend** pplegend/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(5201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChLegend**)pplegend /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChLegend* __fastcall
ChLegendEntryDispT<T>::get_Parent(void)
{
  Owc10_xp::ChLegend* pplegend;
  this->get_Parent((Owc10_xp::ChLegend**)&pplegend);
  return pplegend;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChLegendEntryDispT<T>::Select()
{
  _TDispID _dispid(*this, OLETEXT("Select"), DISPID(5036));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChLegendEntryDispT<T>::get_PivotObject(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PivotObject"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ChLegendEntryDispT<T>::get_PivotObject(void)
{
  LPDISPATCH ppidisp;
  this->get_PivotObject((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChLegendEntryDispT<T>::get_Top(long* ptop/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ptop /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChLegendEntryDispT<T>::get_Top(void)
{
  long ptop;
  this->get_Top((long*)&ptop);
  return ptop;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChLegendEntryDispT<T>::get_Left(long* pleft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pleft /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChLegendEntryDispT<T>::get_Left(void)
{
  long pleft;
  this->get_Left((long*)&pleft);
  return pleft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChLegendEntryDispT<T>::get_Bottom(long* pbottom/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bottom"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbottom /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChLegendEntryDispT<T>::get_Bottom(void)
{
  long pbottom;
  this->get_Bottom((long*)&pbottom);
  return pbottom;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChLegendEntryDispT<T>::get_Right(long* pright/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Right"), DISPID(DISPID_UNKNOWN/*[1610743818]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pright /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChLegendEntryDispT<T>::get_Right(void)
{
  long pright;
  this->get_Right((long*)&pright);
  return pright;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChLegendEntryDispT<T>::get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObjectType"), DISPID(DISPID_UNKNOWN/*[1610743819]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pcs /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartSelectionsEnum __fastcall
ChLegendEntryDispT<T>::get_ObjectType(void)
{
  Owc10_xp::ChartSelectionsEnum pcs;
  this->get_ObjectType((Owc10_xp::ChartSelectionsEnum*)&pcs);
  return pcs;
}

// *********************************************************************//
// DispIntf:  ChPlotArea
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39ABA-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChPlotAreaDispT<T>::get_Border(Owc10_xp::ChBorder** ppline/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Border"), DISPID(5004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChBorder**)ppline /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChBorder* __fastcall
ChPlotAreaDispT<T>::get_Border(void)
{
  Owc10_xp::ChBorder* ppline;
  this->get_Border((Owc10_xp::ChBorder**)&ppline);
  return ppline;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChPlotAreaDispT<T>::get_Interior(Owc10_xp::ChInterior** ppinterior/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Interior"), DISPID(5007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChInterior**)ppinterior /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChInterior* __fastcall
ChPlotAreaDispT<T>::get_Interior(void)
{
  Owc10_xp::ChInterior* ppinterior;
  this->get_Interior((Owc10_xp::ChInterior**)&ppinterior);
  return ppinterior;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChPlotAreaDispT<T>::get_Parent(Owc10_xp::ChChart** ppchart/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(5201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChChart**)ppchart /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChChart* __fastcall
ChPlotAreaDispT<T>::get_Parent(void)
{
  Owc10_xp::ChChart* ppchart;
  this->get_Parent((Owc10_xp::ChChart**)&ppchart);
  return ppchart;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChPlotAreaDispT<T>::FlipHorizontal()
{
  _TDispID _dispid(*this, OLETEXT("FlipHorizontal"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChPlotAreaDispT<T>::FlipVertical()
{
  _TDispID _dispid(*this, OLETEXT("FlipVertical"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChPlotAreaDispT<T>::RotateClockwise()
{
  _TDispID _dispid(*this, OLETEXT("RotateClockwise"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChPlotAreaDispT<T>::RotateCounterClockwise()
{
  _TDispID _dispid(*this, OLETEXT("RotateCounterClockwise"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChPlotAreaDispT<T>::Select()
{
  _TDispID _dispid(*this, OLETEXT("Select"), DISPID(5036));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChPlotAreaDispT<T>::get_Top(long* ptop/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ptop /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChPlotAreaDispT<T>::get_Top(void)
{
  long ptop;
  this->get_Top((long*)&ptop);
  return ptop;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChPlotAreaDispT<T>::set_Top(long ptop/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1610743816));
  TAutoArgs<1> _args;
  _args[1] = ptop /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChPlotAreaDispT<T>::get_Left(long* pleft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(DISPID_UNKNOWN/*[1610743818]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pleft /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChPlotAreaDispT<T>::get_Left(void)
{
  long pleft;
  this->get_Left((long*)&pleft);
  return pleft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChPlotAreaDispT<T>::set_Left(long pleft/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1610743818));
  TAutoArgs<1> _args;
  _args[1] = pleft /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChPlotAreaDispT<T>::get_Bottom(long* pbottom/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bottom"), DISPID(DISPID_UNKNOWN/*[1610743820]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbottom /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChPlotAreaDispT<T>::get_Bottom(void)
{
  long pbottom;
  this->get_Bottom((long*)&pbottom);
  return pbottom;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChPlotAreaDispT<T>::set_Bottom(long pbottom/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bottom"), DISPID(1610743820));
  TAutoArgs<1> _args;
  _args[1] = pbottom /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChPlotAreaDispT<T>::get_Right(long* pright/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Right"), DISPID(DISPID_UNKNOWN/*[1610743822]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pright /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChPlotAreaDispT<T>::get_Right(void)
{
  long pright;
  this->get_Right((long*)&pright);
  return pright;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChPlotAreaDispT<T>::set_Right(long pright/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Right"), DISPID(1610743822));
  TAutoArgs<1> _args;
  _args[1] = pright /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChPlotAreaDispT<T>::get_BackWall(Owc10_xp::ChSurface** psurface/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackWall"), DISPID(DISPID_UNKNOWN/*[1610743824]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChSurface**)psurface /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChSurface* __fastcall
ChPlotAreaDispT<T>::get_BackWall(void)
{
  Owc10_xp::ChSurface* psurface;
  this->get_BackWall((Owc10_xp::ChSurface**)&psurface);
  return psurface;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChPlotAreaDispT<T>::get_SideWall(Owc10_xp::ChSurface** psurface/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SideWall"), DISPID(DISPID_UNKNOWN/*[1610743825]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChSurface**)psurface /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChSurface* __fastcall
ChPlotAreaDispT<T>::get_SideWall(void)
{
  Owc10_xp::ChSurface* psurface;
  this->get_SideWall((Owc10_xp::ChSurface**)&psurface);
  return psurface;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChPlotAreaDispT<T>::get_Floor(Owc10_xp::ChSurface** psurface/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Floor"), DISPID(DISPID_UNKNOWN/*[1610743826]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChSurface**)psurface /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChSurface* __fastcall
ChPlotAreaDispT<T>::get_Floor(void)
{
  Owc10_xp::ChSurface* psurface;
  this->get_Floor((Owc10_xp::ChSurface**)&psurface);
  return psurface;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChPlotAreaDispT<T>::get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObjectType"), DISPID(DISPID_UNKNOWN/*[1610743827]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pcs /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartSelectionsEnum __fastcall
ChPlotAreaDispT<T>::get_ObjectType(void)
{
  Owc10_xp::ChartSelectionsEnum pcs;
  this->get_ObjectType((Owc10_xp::ChartSelectionsEnum*)&pcs);
  return pcs;
}

// *********************************************************************//
// DispIntf:  ChSurface
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C592C1D2-448A-11D3-82BA-00C04F4C2A96}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSurfaceDispT<T>::get_Border(Owc10_xp::ChBorder** ppline/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Border"), DISPID(5004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChBorder**)ppline /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChBorder* __fastcall
ChSurfaceDispT<T>::get_Border(void)
{
  Owc10_xp::ChBorder* ppline;
  this->get_Border((Owc10_xp::ChBorder**)&ppline);
  return ppline;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSurfaceDispT<T>::set_Thickness(long pl/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Thickness"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<1> _args;
  _args[1] = pl /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSurfaceDispT<T>::get_Thickness(long* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Thickness"), DISPID(1610743809));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pl /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChSurfaceDispT<T>::get_Thickness(void)
{
  long pl;
  this->get_Thickness((long*)&pl);
  return pl;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSurfaceDispT<T>::get_Interior(Owc10_xp::ChInterior** ppinterior/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Interior"), DISPID(5007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChInterior**)ppinterior /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChInterior* __fastcall
ChSurfaceDispT<T>::get_Interior(void)
{
  Owc10_xp::ChInterior* ppinterior;
  this->get_Interior((Owc10_xp::ChInterior**)&ppinterior);
  return ppinterior;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSurfaceDispT<T>::Select()
{
  _TDispID _dispid(*this, OLETEXT("Select"), DISPID(5036));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSurfaceDispT<T>::get_Parent(Owc10_xp::ChPlotArea** ppplotarea/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(5201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChPlotArea**)ppplotarea /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChPlotArea* __fastcall
ChSurfaceDispT<T>::get_Parent(void)
{
  Owc10_xp::ChPlotArea* ppplotarea;
  this->get_Parent((Owc10_xp::ChPlotArea**)&ppplotarea);
  return ppplotarea;
}

// *********************************************************************//
// DispIntf:  ChSeriesCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39ABD-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesCollectionDispT<T>::get_Count(long* cSeries/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(cSeries /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChSeriesCollectionDispT<T>::get_Count(void)
{
  long cSeries;
  this->get_Count((long*)&cSeries);
  return cSeries;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesCollectionDispT<T>::get_Item(VARIANT Index/*[in]*/, 
                                     Owc10_xp::ChSeries** ppseries/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChSeries**)ppseries /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChSeries* __fastcall
ChSeriesCollectionDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Owc10_xp::ChSeries* ppseries;
  this->get_Item(Index, (Owc10_xp::ChSeries**)&ppseries);
  return ppseries;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesCollectionDispT<T>::get_Parent(Owc10_xp::ChChart** ppchart/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(5201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChChart**)ppchart /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChChart* __fastcall
ChSeriesCollectionDispT<T>::get_Parent(void)
{
  Owc10_xp::ChChart* ppchart;
  this->get_Parent((Owc10_xp::ChChart**)&ppchart);
  return ppchart;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesCollectionDispT<T>::get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
ChSeriesCollectionDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunk;
  this->get__NewEnum((LPUNKNOWN*)&ppunk);
  return ppunk;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesCollectionDispT<T>::Add(long Index/*[in,def,opt]*/, 
                                Owc10_xp::ChSeries** ppseries/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChSeries**)ppseries /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::ChSeries* __fastcall
ChSeriesCollectionDispT<T>::Add(long Index/*[in,def,opt]*/)
{
  Owc10_xp::ChSeries* ppseries;
  this->Add(Index, (Owc10_xp::ChSeries**)&ppseries);
  return ppseries;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesCollectionDispT<T>::Delete(VARIANT Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(5202));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesCollectionDispT<T>::get_PivotAxis(Owc10_xp::PivotResultAxis** ppaxis/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PivotAxis"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotResultAxis**)ppaxis /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotResultAxis* __fastcall
ChSeriesCollectionDispT<T>::get_PivotAxis(void)
{
  Owc10_xp::PivotResultAxis* ppaxis;
  this->get_PivotAxis((Owc10_xp::PivotResultAxis**)&ppaxis);
  return ppaxis;
}

// *********************************************************************//
// DispIntf:  ChSeries
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AC1-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesDispT<T>::get_Border(Owc10_xp::ChBorder** ppline/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Border"), DISPID(5004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChBorder**)ppline /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChBorder* __fastcall
ChSeriesDispT<T>::get_Border(void)
{
  Owc10_xp::ChBorder* ppline;
  this->get_Border((Owc10_xp::ChBorder**)&ppline);
  return ppline;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesDispT<T>::get_DataLabelsCollection(Owc10_xp::ChDataLabelsCollection** ppdatalabels/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataLabelsCollection"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChDataLabelsCollection**)ppdatalabels /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChDataLabelsCollection* __fastcall
ChSeriesDispT<T>::get_DataLabelsCollection(void)
{
  Owc10_xp::ChDataLabelsCollection* ppdatalabels;
  this->get_DataLabelsCollection((Owc10_xp::ChDataLabelsCollection**)&ppdatalabels);
  return ppdatalabels;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesDispT<T>::get_Points(Owc10_xp::ChPoints** pppoints/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Points"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChPoints**)pppoints /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChPoints* __fastcall
ChSeriesDispT<T>::get_Points(void)
{
  Owc10_xp::ChPoints* pppoints;
  this->get_Points((Owc10_xp::ChPoints**)&pppoints);
  return pppoints;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesDispT<T>::set_Caption(BSTR pbstr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<1> _args;
  _args[1] = pbstr /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesDispT<T>::get_Caption(BSTR* pbstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(1610743811));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ChSeriesDispT<T>::get_Caption(void)
{
  BSTR pbstr;
  this->get_Caption((BSTR*)&pbstr);
  return pbstr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesDispT<T>::set_Explosion(long pl/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Explosion"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<1> _args;
  _args[1] = pl /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesDispT<T>::get_Explosion(long* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Explosion"), DISPID(1610743813));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pl /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChSeriesDispT<T>::get_Explosion(void)
{
  long pl;
  this->get_Explosion((long*)&pl);
  return pl;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesDispT<T>::set_Thickness(long pl/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Thickness"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<1> _args;
  _args[1] = pl /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesDispT<T>::get_Thickness(long* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Thickness"), DISPID(1610743815));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pl /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChSeriesDispT<T>::get_Thickness(void)
{
  long pl;
  this->get_Thickness((long*)&pl);
  return pl;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesDispT<T>::get_ErrorBarsCollection(Owc10_xp::ChErrorBarsCollection** pperrorbars/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrorBarsCollection"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChErrorBarsCollection**)pperrorbars /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChErrorBarsCollection* __fastcall
ChSeriesDispT<T>::get_ErrorBarsCollection(void)
{
  Owc10_xp::ChErrorBarsCollection* pperrorbars;
  this->get_ErrorBarsCollection((Owc10_xp::ChErrorBarsCollection**)&pperrorbars);
  return pperrorbars;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesDispT<T>::get_Index(long* pIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(5204));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pIndex /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChSeriesDispT<T>::get_Index(void)
{
  long pIndex;
  this->get_Index((long*)&pIndex);
  return pIndex;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesDispT<T>::get_Interior(Owc10_xp::ChInterior** ppinterior/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Interior"), DISPID(5007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChInterior**)ppinterior /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChInterior* __fastcall
ChSeriesDispT<T>::get_Interior(void)
{
  Owc10_xp::ChInterior* ppinterior;
  this->get_Interior((Owc10_xp::ChInterior**)&ppinterior);
  return ppinterior;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesDispT<T>::get_Line(Owc10_xp::ChLine** ppline/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Line"), DISPID(5205));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChLine**)ppline /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChLine* __fastcall
ChSeriesDispT<T>::get_Line(void)
{
  Owc10_xp::ChLine* ppline;
  this->get_Line((Owc10_xp::ChLine**)&ppline);
  return ppline;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesDispT<T>::get_Marker(Owc10_xp::ChMarker** ppMarker/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Marker"), DISPID(DISPID_UNKNOWN/*[1610743821]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChMarker**)ppMarker /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChMarker* __fastcall
ChSeriesDispT<T>::get_Marker(void)
{
  Owc10_xp::ChMarker* ppMarker;
  this->get_Marker((Owc10_xp::ChMarker**)&ppMarker);
  return ppMarker;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesDispT<T>::get_Parent(Owc10_xp::ChChart** ppchart/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(5201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChChart**)ppchart /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChChart* __fastcall
ChSeriesDispT<T>::get_Parent(void)
{
  Owc10_xp::ChChart* ppchart;
  this->get_Parent((Owc10_xp::ChChart**)&ppchart);
  return ppchart;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesDispT<T>::set_Name(BSTR pbstr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(DISPID_UNKNOWN/*[1610743823]*/));
  TAutoArgs<1> _args;
  _args[1] = pbstr /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesDispT<T>::get_Name(BSTR* pbstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1610743823));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ChSeriesDispT<T>::get_Name(void)
{
  BSTR pbstr;
  this->get_Name((BSTR*)&pbstr);
  return pbstr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesDispT<T>::get_Scalings(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/, 
                               Owc10_xp::ChScaling** ppwcscaling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Scalings"), DISPID(DISPID_UNKNOWN/*[1610743825]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)Dimension /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChScaling**)ppwcscaling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChScaling* __fastcall
ChSeriesDispT<T>::get_Scalings(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/)
{
  Owc10_xp::ChScaling* ppwcscaling;
  this->get_Scalings(Dimension, (Owc10_xp::ChScaling**)&ppwcscaling);
  return ppwcscaling;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesDispT<T>::get_Trendlines(Owc10_xp::ChTrendlines** pptrendlines/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Trendlines"), DISPID(DISPID_UNKNOWN/*[1610743826]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChTrendlines**)pptrendlines /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChTrendlines* __fastcall
ChSeriesDispT<T>::get_Trendlines(void)
{
  Owc10_xp::ChTrendlines* pptrendlines;
  this->get_Trendlines((Owc10_xp::ChTrendlines**)&pptrendlines);
  return pptrendlines;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesDispT<T>::set_Type(Owc10_xp::ChartChartTypeEnum pocpGT/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(DISPID_UNKNOWN/*[1610743827]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)pocpGT /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesDispT<T>::get_Type(Owc10_xp::ChartChartTypeEnum* pocpGT/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(1610743827));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pocpGT /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartChartTypeEnum __fastcall
ChSeriesDispT<T>::get_Type(void)
{
  Owc10_xp::ChartChartTypeEnum pocpGT;
  this->get_Type((Owc10_xp::ChartChartTypeEnum*)&pocpGT);
  return pocpGT;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesDispT<T>::SetData(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/, 
                          long DataSourceIndex/*[in]*/, VARIANT DataReference/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetData"), DISPID(DISPID_UNKNOWN/*[1610743829]*/));
  TAutoArgs<3> _args;
  _args[1] = (int)Dimension /*[VT_USERDEFINED:0]*/;
  _args[2] = DataSourceIndex /*[VT_I4:0]*/;
  _args[3] = DataReference /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesDispT<T>::GetDataReference(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/, 
                                   BSTR* DataSourceReference/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetDataReference"), DISPID(DISPID_UNKNOWN/*[1610743830]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)Dimension /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(DataSourceReference /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
ChSeriesDispT<T>::GetDataReference(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/)
{
  BSTR DataSourceReference;
  this->GetDataReference(Dimension, (BSTR*)&DataSourceReference);
  return DataSourceReference;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesDispT<T>::GetDataSourceIndex(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/, 
                                     long* DataSourceIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetDataSourceIndex"), DISPID(DISPID_UNKNOWN/*[1610743831]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)Dimension /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(DataSourceIndex /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
ChSeriesDispT<T>::GetDataSourceIndex(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/)
{
  long DataSourceIndex;
  this->GetDataSourceIndex(Dimension, (long*)&DataSourceIndex);
  return DataSourceIndex;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesDispT<T>::GetData(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/, 
                          VARIANT* DataSourceIndex/*[out]*/, VARIANT* DataReference/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetData"), DISPID(DISPID_UNKNOWN/*[1610743832]*/));
  TAutoArgs<3> _args;
  _args[1] = (int)Dimension /*[VT_USERDEFINED:0]*/;
  _args[2] = DataSourceIndex /*[VT_VARIANT:1]*/;
  _args[3] = DataReference /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesDispT<T>::Select()
{
  _TDispID _dispid(*this, OLETEXT("Select"), DISPID(5036));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesDispT<T>::set_Index(long pIndex)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(5204));
  TAutoArgs<1> _args;
  _args[1] = pIndex /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesDispT<T>::Ungroup(VARIANT_BOOL UseNewScaling/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Ungroup"), DISPID(DISPID_UNKNOWN/*[1610743835]*/));
  TAutoArgs<1> _args;
  _args[1] = UseNewScaling /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesDispT<T>::Group(Owc10_xp::ChSeries* Series)
{
  _TDispID _dispid(*this, OLETEXT("Group"), DISPID(DISPID_UNKNOWN/*[1610743836]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::ChSeries*)Series /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesDispT<T>::set_ZOrder(long pzorder/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZOrder"), DISPID(DISPID_UNKNOWN/*[1610743837]*/));
  TAutoArgs<1> _args;
  _args[1] = pzorder /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesDispT<T>::get_ZOrder(long* pzorder/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZOrder"), DISPID(1610743837));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pzorder /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChSeriesDispT<T>::get_ZOrder(void)
{
  long pzorder;
  this->get_ZOrder((long*)&pzorder);
  return pzorder;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesDispT<T>::get_PivotObject(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PivotObject"), DISPID(DISPID_UNKNOWN/*[1610743839]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ChSeriesDispT<T>::get_PivotObject(void)
{
  LPDISPATCH ppidisp;
  this->get_PivotObject((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesDispT<T>::set_GapWidth(long plGapWidth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GapWidth"), DISPID(DISPID_UNKNOWN/*[1610743840]*/));
  TAutoArgs<1> _args;
  _args[1] = plGapWidth /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesDispT<T>::get_GapWidth(long* plGapWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GapWidth"), DISPID(1610743840));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plGapWidth /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChSeriesDispT<T>::get_GapWidth(void)
{
  long plGapWidth;
  this->get_GapWidth((long*)&plGapWidth);
  return plGapWidth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesDispT<T>::set_Overlap(long plOverlap/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Overlap"), DISPID(DISPID_UNKNOWN/*[1610743842]*/));
  TAutoArgs<1> _args;
  _args[1] = plOverlap /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesDispT<T>::get_Overlap(long* plOverlap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Overlap"), DISPID(1610743842));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plOverlap /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChSeriesDispT<T>::get_Overlap(void)
{
  long plOverlap;
  this->get_Overlap((long*)&plOverlap);
  return plOverlap;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesDispT<T>::get_FormatMap(Owc10_xp::ChFormatMap** ppformatmap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FormatMap"), DISPID(DISPID_UNKNOWN/*[1610743844]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChFormatMap**)ppformatmap /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChFormatMap* __fastcall
ChSeriesDispT<T>::get_FormatMap(void)
{
  Owc10_xp::ChFormatMap* ppformatmap;
  this->get_FormatMap((Owc10_xp::ChFormatMap**)&ppformatmap);
  return ppformatmap;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesDispT<T>::set_TipText(BSTR pbstr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TipText"), DISPID(DISPID_UNKNOWN/*[1610743845]*/));
  TAutoArgs<1> _args;
  _args[1] = pbstr /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesDispT<T>::get_TipText(BSTR* pbstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TipText"), DISPID(1610743845));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ChSeriesDispT<T>::get_TipText(void)
{
  BSTR pbstr;
  this->get_TipText((BSTR*)&pbstr);
  return pbstr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesDispT<T>::get_Top(long* ptop/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(DISPID_UNKNOWN/*[1610743847]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ptop /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChSeriesDispT<T>::get_Top(void)
{
  long ptop;
  this->get_Top((long*)&ptop);
  return ptop;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesDispT<T>::get_Left(long* pleft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(DISPID_UNKNOWN/*[1610743848]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pleft /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChSeriesDispT<T>::get_Left(void)
{
  long pleft;
  this->get_Left((long*)&pleft);
  return pleft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesDispT<T>::get_Bottom(long* pbottom/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bottom"), DISPID(DISPID_UNKNOWN/*[1610743849]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbottom /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChSeriesDispT<T>::get_Bottom(void)
{
  long pbottom;
  this->get_Bottom((long*)&pbottom);
  return pbottom;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesDispT<T>::get_Right(long* pright/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Right"), DISPID(DISPID_UNKNOWN/*[1610743850]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pright /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChSeriesDispT<T>::get_Right(void)
{
  long pright;
  this->get_Right((long*)&pright);
  return pright;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesDispT<T>::get_LayerIndex(long* pIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LayerIndex"), DISPID(DISPID_UNKNOWN/*[1610743851]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pIndex /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChSeriesDispT<T>::get_LayerIndex(void)
{
  long pIndex;
  this->get_LayerIndex((long*)&pIndex);
  return pIndex;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesDispT<T>::ValueToPoint(VARIANT xvalue/*[in]*/, VARIANT yvalue/*[in]*/, 
                               VARIANT zvalue/*[in,opt]*/, 
                               Owc10_xp::Coordinate** ppCoord/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ValueToPoint"), DISPID(DISPID_UNKNOWN/*[1610743852]*/));
  TAutoArgs<3> _args;
  _args[1] = xvalue /*[VT_VARIANT:0]*/;
  _args[2] = yvalue /*[VT_VARIANT:0]*/;
  _args[3] = zvalue /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Coordinate**)ppCoord /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::Coordinate* __fastcall
ChSeriesDispT<T>::ValueToPoint(VARIANT xvalue/*[in]*/, VARIANT yvalue/*[in]*/, 
                               VARIANT zvalue/*[in,opt]*/)
{
  Owc10_xp::Coordinate* ppCoord;
  this->ValueToPoint(xvalue, yvalue, zvalue, (Owc10_xp::Coordinate**)&ppCoord);
  return ppCoord;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesDispT<T>::get_TypeFlags(int* pgrbit/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TypeFlags"), DISPID(DISPID_UNKNOWN/*[1610743853]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pgrbit /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ChSeriesDispT<T>::get_TypeFlags(void)
{
  int pgrbit;
  this->get_TypeFlags((int*)&pgrbit);
  return pgrbit;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSeriesDispT<T>::get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObjectType"), DISPID(DISPID_UNKNOWN/*[1610743854]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pcs /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartSelectionsEnum __fastcall
ChSeriesDispT<T>::get_ObjectType(void)
{
  Owc10_xp::ChartSelectionsEnum pcs;
  this->get_ObjectType((Owc10_xp::ChartSelectionsEnum*)&pcs);
  return pcs;
}

// *********************************************************************//
// DispIntf:  ChDataLabelsCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A71-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDataLabelsCollectionDispT<T>::get_Parent(Owc10_xp::ChSeries** ppseries/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(5201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChSeries**)ppseries /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChSeries* __fastcall
ChDataLabelsCollectionDispT<T>::get_Parent(void)
{
  Owc10_xp::ChSeries* ppseries;
  this->get_Parent((Owc10_xp::ChSeries**)&ppseries);
  return ppseries;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDataLabelsCollectionDispT<T>::get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
ChDataLabelsCollectionDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunk;
  this->get__NewEnum((LPUNKNOWN*)&ppunk);
  return ppunk;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDataLabelsCollectionDispT<T>::get_Item(long Index/*[in]*/, 
                                         Owc10_xp::ChDataLabels** ppdatalabels/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChDataLabels**)ppdatalabels /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChDataLabels* __fastcall
ChDataLabelsCollectionDispT<T>::get_Item(long Index/*[in]*/)
{
  Owc10_xp::ChDataLabels* ppdatalabels;
  this->get_Item(Index, (Owc10_xp::ChDataLabels**)&ppdatalabels);
  return ppdatalabels;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDataLabelsCollectionDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChDataLabelsCollectionDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDataLabelsCollectionDispT<T>::Add(Owc10_xp::ChDataLabels** ppdatalabels/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChDataLabels**)ppdatalabels /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::ChDataLabels* __fastcall
ChDataLabelsCollectionDispT<T>::Add(void)
{
  Owc10_xp::ChDataLabels* ppdatalabels;
  this->Add((Owc10_xp::ChDataLabels**)&ppdatalabels);
  return ppdatalabels;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDataLabelsCollectionDispT<T>::Delete(long Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(5202));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ChDataLabels
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AC2-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDataLabelsDispT<T>::get_Border(Owc10_xp::ChBorder** ppline/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Border"), DISPID(5004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChBorder**)ppline /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChBorder* __fastcall
ChDataLabelsDispT<T>::get_Border(void)
{
  Owc10_xp::ChBorder* ppline;
  this->get_Border((Owc10_xp::ChBorder**)&ppline);
  return ppline;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDataLabelsDispT<T>::get_Font(Owc10_xp::ChFont** ppfont/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(5200));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChFont**)ppfont /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChFont* __fastcall
ChDataLabelsDispT<T>::get_Font(void)
{
  Owc10_xp::ChFont* ppfont;
  this->get_Font((Owc10_xp::ChFont**)&ppfont);
  return ppfont;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDataLabelsDispT<T>::set_HasBubbleSize(VARIANT_BOOL pfHasBubbleSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasBubbleSize"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<1> _args;
  _args[1] = pfHasBubbleSize /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDataLabelsDispT<T>::get_HasBubbleSize(VARIANT_BOOL* pfHasBubbleSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasBubbleSize"), DISPID(1610743810));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfHasBubbleSize /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChDataLabelsDispT<T>::get_HasBubbleSize(void)
{
  VARIANT_BOOL pfHasBubbleSize;
  this->get_HasBubbleSize((VARIANT_BOOL*)&pfHasBubbleSize);
  return pfHasBubbleSize;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDataLabelsDispT<T>::set_HasCategoryName(VARIANT_BOOL pfHasCategoryName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasCategoryName"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<1> _args;
  _args[1] = pfHasCategoryName /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDataLabelsDispT<T>::get_HasCategoryName(VARIANT_BOOL* pfHasCategoryName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasCategoryName"), DISPID(1610743812));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfHasCategoryName /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChDataLabelsDispT<T>::get_HasCategoryName(void)
{
  VARIANT_BOOL pfHasCategoryName;
  this->get_HasCategoryName((VARIANT_BOOL*)&pfHasCategoryName);
  return pfHasCategoryName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDataLabelsDispT<T>::set_HasPercentage(VARIANT_BOOL pfHasPercentage/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasPercentage"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<1> _args;
  _args[1] = pfHasPercentage /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDataLabelsDispT<T>::get_HasPercentage(VARIANT_BOOL* pfHasPercentage/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasPercentage"), DISPID(1610743814));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfHasPercentage /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChDataLabelsDispT<T>::get_HasPercentage(void)
{
  VARIANT_BOOL pfHasPercentage;
  this->get_HasPercentage((VARIANT_BOOL*)&pfHasPercentage);
  return pfHasPercentage;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDataLabelsDispT<T>::set_HasSeriesName(VARIANT_BOOL pfHasSeriesName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasSeriesName"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<1> _args;
  _args[1] = pfHasSeriesName /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDataLabelsDispT<T>::get_HasSeriesName(VARIANT_BOOL* pfHasSeriesName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasSeriesName"), DISPID(1610743816));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfHasSeriesName /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChDataLabelsDispT<T>::get_HasSeriesName(void)
{
  VARIANT_BOOL pfHasSeriesName;
  this->get_HasSeriesName((VARIANT_BOOL*)&pfHasSeriesName);
  return pfHasSeriesName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDataLabelsDispT<T>::set_HasValue(VARIANT_BOOL pfHasValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasValue"), DISPID(DISPID_UNKNOWN/*[1610743818]*/));
  TAutoArgs<1> _args;
  _args[1] = pfHasValue /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDataLabelsDispT<T>::get_HasValue(VARIANT_BOOL* pfHasValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasValue"), DISPID(1610743818));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfHasValue /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChDataLabelsDispT<T>::get_HasValue(void)
{
  VARIANT_BOOL pfHasValue;
  this->get_HasValue((VARIANT_BOOL*)&pfHasValue);
  return pfHasValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDataLabelsDispT<T>::get_Interior(Owc10_xp::ChInterior** ppinterior/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Interior"), DISPID(5007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChInterior**)ppinterior /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChInterior* __fastcall
ChDataLabelsDispT<T>::get_Interior(void)
{
  Owc10_xp::ChInterior* ppinterior;
  this->get_Interior((Owc10_xp::ChInterior**)&ppinterior);
  return ppinterior;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDataLabelsDispT<T>::set_NumberFormat(BSTR pbstrNumberFormat/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumberFormat"), DISPID(5203));
  TAutoArgs<1> _args;
  _args[1] = pbstrNumberFormat /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDataLabelsDispT<T>::get_NumberFormat(BSTR* pbstrNumberFormat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumberFormat"), DISPID(5203));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrNumberFormat /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ChDataLabelsDispT<T>::get_NumberFormat(void)
{
  BSTR pbstrNumberFormat;
  this->get_NumberFormat((BSTR*)&pbstrNumberFormat);
  return pbstrNumberFormat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDataLabelsDispT<T>::get_Parent(Owc10_xp::ChSeries** ppseries/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(5201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChSeries**)ppseries /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChSeries* __fastcall
ChDataLabelsDispT<T>::get_Parent(void)
{
  Owc10_xp::ChSeries* ppseries;
  this->get_Parent((Owc10_xp::ChSeries**)&ppseries);
  return ppseries;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDataLabelsDispT<T>::set_Position(Owc10_xp::ChartDataLabelPositionEnum pocpDLP/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Position"), DISPID(DISPID_UNKNOWN/*[1610743824]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)pocpDLP /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDataLabelsDispT<T>::get_Position(Owc10_xp::ChartDataLabelPositionEnum* pocpDLP/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Position"), DISPID(1610743824));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pocpDLP /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartDataLabelPositionEnum __fastcall
ChDataLabelsDispT<T>::get_Position(void)
{
  Owc10_xp::ChartDataLabelPositionEnum pocpDLP;
  this->get_Position((Owc10_xp::ChartDataLabelPositionEnum*)&pocpDLP);
  return pocpDLP;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDataLabelsDispT<T>::set_Separator(BSTR pbstrSeperator/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Separator"), DISPID(DISPID_UNKNOWN/*[1610743826]*/));
  TAutoArgs<1> _args;
  _args[1] = pbstrSeperator /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDataLabelsDispT<T>::get_Separator(BSTR* pbstrSeperator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Separator"), DISPID(1610743826));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrSeperator /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ChDataLabelsDispT<T>::get_Separator(void)
{
  BSTR pbstrSeperator;
  this->get_Separator((BSTR*)&pbstrSeperator);
  return pbstrSeperator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDataLabelsDispT<T>::Select()
{
  _TDispID _dispid(*this, OLETEXT("Select"), DISPID(5036));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDataLabelsDispT<T>::get_Index(long* pIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(5204));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pIndex /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChDataLabelsDispT<T>::get_Index(void)
{
  long pIndex;
  this->get_Index((long*)&pIndex);
  return pIndex;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDataLabelsDispT<T>::get_Item(long Index/*[in]*/, 
                               Owc10_xp::ChDataLabel** ppdatalabel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChDataLabel**)ppdatalabel /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChDataLabel* __fastcall
ChDataLabelsDispT<T>::get_Item(long Index/*[in]*/)
{
  Owc10_xp::ChDataLabel* ppdatalabel;
  this->get_Item(Index, (Owc10_xp::ChDataLabel**)&ppdatalabel);
  return ppdatalabel;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDataLabelsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610743831]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChDataLabelsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDataLabelsDispT<T>::get_Top(long* ptop/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(DISPID_UNKNOWN/*[1610743832]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ptop /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChDataLabelsDispT<T>::get_Top(void)
{
  long ptop;
  this->get_Top((long*)&ptop);
  return ptop;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDataLabelsDispT<T>::get_Left(long* pleft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(DISPID_UNKNOWN/*[1610743833]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pleft /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChDataLabelsDispT<T>::get_Left(void)
{
  long pleft;
  this->get_Left((long*)&pleft);
  return pleft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDataLabelsDispT<T>::get_Bottom(long* pbottom/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bottom"), DISPID(DISPID_UNKNOWN/*[1610743834]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbottom /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChDataLabelsDispT<T>::get_Bottom(void)
{
  long pbottom;
  this->get_Bottom((long*)&pbottom);
  return pbottom;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDataLabelsDispT<T>::get_Right(long* pright/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Right"), DISPID(DISPID_UNKNOWN/*[1610743835]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pright /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChDataLabelsDispT<T>::get_Right(void)
{
  long pright;
  this->get_Right((long*)&pright);
  return pright;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDataLabelsDispT<T>::get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObjectType"), DISPID(DISPID_UNKNOWN/*[1610743836]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pcs /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartSelectionsEnum __fastcall
ChDataLabelsDispT<T>::get_ObjectType(void)
{
  Owc10_xp::ChartSelectionsEnum pcs;
  this->get_ObjectType((Owc10_xp::ChartSelectionsEnum*)&pcs);
  return pcs;
}

// *********************************************************************//
// DispIntf:  ChDataLabel
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AE8-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDataLabelDispT<T>::get_Font(Owc10_xp::ChFont** ppfont/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(5200));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChFont**)ppfont /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChFont* __fastcall
ChDataLabelDispT<T>::get_Font(void)
{
  Owc10_xp::ChFont* ppfont;
  this->get_Font((Owc10_xp::ChFont**)&ppfont);
  return ppfont;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDataLabelDispT<T>::get_Interior(Owc10_xp::ChInterior** ppinterior/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Interior"), DISPID(5007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChInterior**)ppinterior /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChInterior* __fastcall
ChDataLabelDispT<T>::get_Interior(void)
{
  Owc10_xp::ChInterior* ppinterior;
  this->get_Interior((Owc10_xp::ChInterior**)&ppinterior);
  return ppinterior;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDataLabelDispT<T>::get_Border(Owc10_xp::ChBorder** ppline/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Border"), DISPID(5004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChBorder**)ppline /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChBorder* __fastcall
ChDataLabelDispT<T>::get_Border(void)
{
  Owc10_xp::ChBorder* ppline;
  this->get_Border((Owc10_xp::ChBorder**)&ppline);
  return ppline;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDataLabelDispT<T>::get_Visible(VARIANT_BOOL* pfVisible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfVisible /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChDataLabelDispT<T>::get_Visible(void)
{
  VARIANT_BOOL pfVisible;
  this->get_Visible((VARIANT_BOOL*)&pfVisible);
  return pfVisible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDataLabelDispT<T>::set_Visible(VARIANT_BOOL pfVisible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = pfVisible /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDataLabelDispT<T>::get_Top(long* ptop/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ptop /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChDataLabelDispT<T>::get_Top(void)
{
  long ptop;
  this->get_Top((long*)&ptop);
  return ptop;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDataLabelDispT<T>::get_Left(long* pleft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pleft /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChDataLabelDispT<T>::get_Left(void)
{
  long pleft;
  this->get_Left((long*)&pleft);
  return pleft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDataLabelDispT<T>::get_Bottom(long* pbottom/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bottom"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbottom /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChDataLabelDispT<T>::get_Bottom(void)
{
  long pbottom;
  this->get_Bottom((long*)&pbottom);
  return pbottom;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDataLabelDispT<T>::get_Right(long* pright/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Right"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pright /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChDataLabelDispT<T>::get_Right(void)
{
  long pright;
  this->get_Right((long*)&pright);
  return pright;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDataLabelDispT<T>::Select()
{
  _TDispID _dispid(*this, OLETEXT("Select"), DISPID(5036));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDataLabelDispT<T>::get_Parent(Owc10_xp::ChDataLabels** Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(5201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChDataLabels**)Parent /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChDataLabels* __fastcall
ChDataLabelDispT<T>::get_Parent(void)
{
  Owc10_xp::ChDataLabels* Parent;
  this->get_Parent((Owc10_xp::ChDataLabels**)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDataLabelDispT<T>::get_Index(long* pIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(5204));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pIndex /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChDataLabelDispT<T>::get_Index(void)
{
  long pIndex;
  this->get_Index((long*)&pIndex);
  return pIndex;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDataLabelDispT<T>::get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObjectType"), DISPID(DISPID_UNKNOWN/*[1610743820]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pcs /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartSelectionsEnum __fastcall
ChDataLabelDispT<T>::get_ObjectType(void)
{
  Owc10_xp::ChartSelectionsEnum pcs;
  this->get_ObjectType((Owc10_xp::ChartSelectionsEnum*)&pcs);
  return pcs;
}

// *********************************************************************//
// DispIntf:  ChPoints
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AEA-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChPointsDispT<T>::get_Parent(Owc10_xp::ChSeries** ppseries/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(5201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChSeries**)ppseries /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChSeries* __fastcall
ChPointsDispT<T>::get_Parent(void)
{
  Owc10_xp::ChSeries* ppseries;
  this->get_Parent((Owc10_xp::ChSeries**)&ppseries);
  return ppseries;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChPointsDispT<T>::get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
ChPointsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunk;
  this->get__NewEnum((LPUNKNOWN*)&ppunk);
  return ppunk;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChPointsDispT<T>::get_Item(VARIANT Index/*[in]*/, Owc10_xp::ChPoint** pppoint/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChPoint**)pppoint /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChPoint* __fastcall
ChPointsDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Owc10_xp::ChPoint* pppoint;
  this->get_Item(Index, (Owc10_xp::ChPoint**)&pppoint);
  return pppoint;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChPointsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChPointsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  ChPoint
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AE9-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChPointDispT<T>::get_Border(Owc10_xp::ChBorder** ppline/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Border"), DISPID(5004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChBorder**)ppline /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChBorder* __fastcall
ChPointDispT<T>::get_Border(void)
{
  Owc10_xp::ChBorder* ppline;
  this->get_Border((Owc10_xp::ChBorder**)&ppline);
  return ppline;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChPointDispT<T>::set_Explosion(long pExplode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Explosion"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<1> _args;
  _args[1] = pExplode /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChPointDispT<T>::get_Explosion(long* pExplode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Explosion"), DISPID(1610743809));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pExplode /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChPointDispT<T>::get_Explosion(void)
{
  long pExplode;
  this->get_Explosion((long*)&pExplode);
  return pExplode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChPointDispT<T>::get_Interior(Owc10_xp::ChInterior** ppinterior/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Interior"), DISPID(5007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChInterior**)ppinterior /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChInterior* __fastcall
ChPointDispT<T>::get_Interior(void)
{
  Owc10_xp::ChInterior* ppinterior;
  this->get_Interior((Owc10_xp::ChInterior**)&ppinterior);
  return ppinterior;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChPointDispT<T>::get_Parent(Owc10_xp::ChSeries** ppseries/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(5201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChSeries**)ppseries /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChSeries* __fastcall
ChPointDispT<T>::get_Parent(void)
{
  Owc10_xp::ChSeries* ppseries;
  this->get_Parent((Owc10_xp::ChSeries**)&ppseries);
  return ppseries;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChPointDispT<T>::get_Index(long* piDataSource/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(5204));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(piDataSource /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChPointDispT<T>::get_Index(void)
{
  long piDataSource;
  this->get_Index((long*)&piDataSource);
  return piDataSource;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChPointDispT<T>::Select()
{
  _TDispID _dispid(*this, OLETEXT("Select"), DISPID(5036));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChPointDispT<T>::GetValue(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/, 
                          VARIANT scaled/*[in,opt]*/, VARIANT* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetValue"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<2> _args;
  _args[1] = (int)Dimension /*[VT_USERDEFINED:0]*/;
  _args[2] = scaled /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(Value /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
ChPointDispT<T>::GetValue(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/, 
                          VARIANT scaled/*[in,opt]*/)
{
  VARIANT Value;
  this->GetValue(Dimension, scaled, (VARIANT*)&Value);
  return Value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChPointDispT<T>::get_Line(Owc10_xp::ChLine** ppline/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Line"), DISPID(5205));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChLine**)ppline /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChLine* __fastcall
ChPointDispT<T>::get_Line(void)
{
  Owc10_xp::ChLine* ppline;
  this->get_Line((Owc10_xp::ChLine**)&ppline);
  return ppline;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChPointDispT<T>::get_PivotObject(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/, 
                                 LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PivotObject"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)Dimension /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ChPointDispT<T>::get_PivotObject(Owc10_xp::ChartDimensionsEnum Dimension/*[in]*/)
{
  LPDISPATCH ppidisp;
  this->get_PivotObject(Dimension, (LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChPointDispT<T>::get_Top(long* ptop/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(DISPID_UNKNOWN/*[1610743818]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ptop /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChPointDispT<T>::get_Top(void)
{
  long ptop;
  this->get_Top((long*)&ptop);
  return ptop;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChPointDispT<T>::get_Left(long* pleft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(DISPID_UNKNOWN/*[1610743819]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pleft /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChPointDispT<T>::get_Left(void)
{
  long pleft;
  this->get_Left((long*)&pleft);
  return pleft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChPointDispT<T>::get_Bottom(long* pbottom/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bottom"), DISPID(DISPID_UNKNOWN/*[1610743820]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbottom /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChPointDispT<T>::get_Bottom(void)
{
  long pbottom;
  this->get_Bottom((long*)&pbottom);
  return pbottom;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChPointDispT<T>::get_Right(long* pright/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Right"), DISPID(DISPID_UNKNOWN/*[1610743821]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pright /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChPointDispT<T>::get_Right(void)
{
  long pright;
  this->get_Right((long*)&pright);
  return pright;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChPointDispT<T>::get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObjectType"), DISPID(DISPID_UNKNOWN/*[1610743822]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pcs /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartSelectionsEnum __fastcall
ChPointDispT<T>::get_ObjectType(void)
{
  Owc10_xp::ChartSelectionsEnum pcs;
  this->get_ObjectType((Owc10_xp::ChartSelectionsEnum*)&pcs);
  return pcs;
}

// *********************************************************************//
// DispIntf:  ChErrorBarsCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AB7-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChErrorBarsCollectionDispT<T>::get_Count(long* cErrorbars/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(cErrorbars /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChErrorBarsCollectionDispT<T>::get_Count(void)
{
  long cErrorbars;
  this->get_Count((long*)&cErrorbars);
  return cErrorbars;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChErrorBarsCollectionDispT<T>::get_Item(long Index/*[in]*/, 
                                        Owc10_xp::ChErrorBars** pptrendline/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChErrorBars**)pptrendline /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChErrorBars* __fastcall
ChErrorBarsCollectionDispT<T>::get_Item(long Index/*[in]*/)
{
  Owc10_xp::ChErrorBars* pptrendline;
  this->get_Item(Index, (Owc10_xp::ChErrorBars**)&pptrendline);
  return pptrendline;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChErrorBarsCollectionDispT<T>::get_Parent(Owc10_xp::ChSeries** ppseries/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(5201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChSeries**)ppseries /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChSeries* __fastcall
ChErrorBarsCollectionDispT<T>::get_Parent(void)
{
  Owc10_xp::ChSeries* ppseries;
  this->get_Parent((Owc10_xp::ChSeries**)&ppseries);
  return ppseries;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChErrorBarsCollectionDispT<T>::Add(Owc10_xp::ChErrorBars** pptrendline/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChErrorBars**)pptrendline /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::ChErrorBars* __fastcall
ChErrorBarsCollectionDispT<T>::Add(void)
{
  Owc10_xp::ChErrorBars* pptrendline;
  this->Add((Owc10_xp::ChErrorBars**)&pptrendline);
  return pptrendline;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChErrorBarsCollectionDispT<T>::Delete(long Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(5202));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ChErrorBars
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AEB-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChErrorBarsDispT<T>::set_EndStyle(Owc10_xp::ChartEndStyleEnum pocpESC/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndStyle"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)pocpESC /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChErrorBarsDispT<T>::get_EndStyle(Owc10_xp::ChartEndStyleEnum* pocpESC/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndStyle"), DISPID(1610743808));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pocpESC /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartEndStyleEnum __fastcall
ChErrorBarsDispT<T>::get_EndStyle(void)
{
  Owc10_xp::ChartEndStyleEnum pocpESC;
  this->get_EndStyle((Owc10_xp::ChartEndStyleEnum*)&pocpESC);
  return pocpESC;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChErrorBarsDispT<T>::set_Direction(Owc10_xp::ChartErrorBarDirectionEnum pocpdir/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Direction"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)pocpdir /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChErrorBarsDispT<T>::get_Direction(Owc10_xp::ChartErrorBarDirectionEnum* pocpdir/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Direction"), DISPID(1610743810));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pocpdir /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartErrorBarDirectionEnum __fastcall
ChErrorBarsDispT<T>::get_Direction(void)
{
  Owc10_xp::ChartErrorBarDirectionEnum pocpdir;
  this->get_Direction((Owc10_xp::ChartErrorBarDirectionEnum*)&pocpdir);
  return pocpdir;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChErrorBarsDispT<T>::get_Index(long* pIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(5204));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pIndex /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChErrorBarsDispT<T>::get_Index(void)
{
  long pIndex;
  this->get_Index((long*)&pIndex);
  return pIndex;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChErrorBarsDispT<T>::get_Line(Owc10_xp::ChLine** ppline/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Line"), DISPID(5205));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChLine**)ppline /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChLine* __fastcall
ChErrorBarsDispT<T>::get_Line(void)
{
  Owc10_xp::ChLine* ppline;
  this->get_Line((Owc10_xp::ChLine**)&ppline);
  return ppline;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChErrorBarsDispT<T>::get_Parent(Owc10_xp::ChSeries** ppseries/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(5201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChSeries**)ppseries /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChSeries* __fastcall
ChErrorBarsDispT<T>::get_Parent(void)
{
  Owc10_xp::ChSeries* ppseries;
  this->get_Parent((Owc10_xp::ChSeries**)&ppseries);
  return ppseries;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChErrorBarsDispT<T>::set_Amount(double pramount/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Amount"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<1> _args;
  _args[1] = pramount /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChErrorBarsDispT<T>::get_Amount(double* pramount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Amount"), DISPID(1610743815));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pramount /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
ChErrorBarsDispT<T>::get_Amount(void)
{
  double pramount;
  this->get_Amount((double*)&pramount);
  return pramount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChErrorBarsDispT<T>::set_Include(Owc10_xp::ChartErrorBarIncludeEnum pocpEBI/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Include"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)pocpEBI /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChErrorBarsDispT<T>::get_Include(Owc10_xp::ChartErrorBarIncludeEnum* pocpEBI/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Include"), DISPID(1610743817));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pocpEBI /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartErrorBarIncludeEnum __fastcall
ChErrorBarsDispT<T>::get_Include(void)
{
  Owc10_xp::ChartErrorBarIncludeEnum pocpEBI;
  this->get_Include((Owc10_xp::ChartErrorBarIncludeEnum*)&pocpEBI);
  return pocpEBI;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChErrorBarsDispT<T>::set_Type(Owc10_xp::ChartErrorBarTypeEnum pocpEBT/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(DISPID_UNKNOWN/*[1610743819]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)pocpEBT /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChErrorBarsDispT<T>::get_Type(Owc10_xp::ChartErrorBarTypeEnum* pocpEBT/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(1610743819));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pocpEBT /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartErrorBarTypeEnum __fastcall
ChErrorBarsDispT<T>::get_Type(void)
{
  Owc10_xp::ChartErrorBarTypeEnum pocpEBT;
  this->get_Type((Owc10_xp::ChartErrorBarTypeEnum*)&pocpEBT);
  return pocpEBT;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChErrorBarsDispT<T>::SetData(Owc10_xp::ChartErrorBarCustomValuesEnum Dimension/*[in]*/, 
                             long DataSourceIndex/*[in]*/, VARIANT DataReference/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetData"), DISPID(DISPID_UNKNOWN/*[1610743821]*/));
  TAutoArgs<3> _args;
  _args[1] = (int)Dimension /*[VT_USERDEFINED:0]*/;
  _args[2] = DataSourceIndex /*[VT_I4:0]*/;
  _args[3] = DataReference /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChErrorBarsDispT<T>::GetDataReference(Owc10_xp::ChartErrorBarCustomValuesEnum ErrorBarDirection/*[in]*/
                                      , BSTR* DataSourceReference/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetDataReference"), DISPID(DISPID_UNKNOWN/*[1610743822]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)ErrorBarDirection /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(DataSourceReference /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
ChErrorBarsDispT<T>::GetDataReference(Owc10_xp::ChartErrorBarCustomValuesEnum ErrorBarDirection/*[in]*/)
{
  BSTR DataSourceReference;
  this->GetDataReference(ErrorBarDirection, (BSTR*)&DataSourceReference);
  return DataSourceReference;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChErrorBarsDispT<T>::GetDataSourceIndex(Owc10_xp::ChartErrorBarCustomValuesEnum ErrorBarDirection/*[in]*/
                                        , long* DataSourceIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetDataSourceIndex"), DISPID(DISPID_UNKNOWN/*[1610743823]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)ErrorBarDirection /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(DataSourceIndex /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
ChErrorBarsDispT<T>::GetDataSourceIndex(Owc10_xp::ChartErrorBarCustomValuesEnum ErrorBarDirection/*[in]*/)
{
  long DataSourceIndex;
  this->GetDataSourceIndex(ErrorBarDirection, (long*)&DataSourceIndex);
  return DataSourceIndex;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChErrorBarsDispT<T>::GetData(Owc10_xp::ChartErrorBarCustomValuesEnum ErrorBarDirection/*[in]*/, 
                             VARIANT* DataSourceIndex/*[out]*/, VARIANT* DataReference/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetData"), DISPID(DISPID_UNKNOWN/*[1610743824]*/));
  TAutoArgs<3> _args;
  _args[1] = (int)ErrorBarDirection /*[VT_USERDEFINED:0]*/;
  _args[2] = DataSourceIndex /*[VT_VARIANT:1]*/;
  _args[3] = DataReference /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChErrorBarsDispT<T>::Select()
{
  _TDispID _dispid(*this, OLETEXT("Select"), DISPID(5036));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChErrorBarsDispT<T>::get_Top(long* ptop/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(DISPID_UNKNOWN/*[1610743826]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ptop /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChErrorBarsDispT<T>::get_Top(void)
{
  long ptop;
  this->get_Top((long*)&ptop);
  return ptop;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChErrorBarsDispT<T>::get_Left(long* pleft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(DISPID_UNKNOWN/*[1610743827]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pleft /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChErrorBarsDispT<T>::get_Left(void)
{
  long pleft;
  this->get_Left((long*)&pleft);
  return pleft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChErrorBarsDispT<T>::get_Bottom(long* pbottom/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bottom"), DISPID(DISPID_UNKNOWN/*[1610743828]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbottom /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChErrorBarsDispT<T>::get_Bottom(void)
{
  long pbottom;
  this->get_Bottom((long*)&pbottom);
  return pbottom;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChErrorBarsDispT<T>::get_Right(long* pright/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Right"), DISPID(DISPID_UNKNOWN/*[1610743829]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pright /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChErrorBarsDispT<T>::get_Right(void)
{
  long pright;
  this->get_Right((long*)&pright);
  return pright;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChErrorBarsDispT<T>::get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObjectType"), DISPID(DISPID_UNKNOWN/*[1610743830]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pcs /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartSelectionsEnum __fastcall
ChErrorBarsDispT<T>::get_ObjectType(void)
{
  Owc10_xp::ChartSelectionsEnum pcs;
  this->get_ObjectType((Owc10_xp::ChartSelectionsEnum*)&pcs);
  return pcs;
}

// *********************************************************************//
// DispIntf:  ChMarker
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39ABC-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChMarkerDispT<T>::set_Style(Owc10_xp::ChartMarkerStyleEnum plStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Style"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)plStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChMarkerDispT<T>::get_Style(Owc10_xp::ChartMarkerStyleEnum* plStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Style"), DISPID(1610743808));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)plStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartMarkerStyleEnum __fastcall
ChMarkerDispT<T>::get_Style(void)
{
  Owc10_xp::ChartMarkerStyleEnum plStyle;
  this->get_Style((Owc10_xp::ChartMarkerStyleEnum*)&plStyle);
  return plStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChMarkerDispT<T>::set_Size(long plSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Size"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<1> _args;
  _args[1] = plSize /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChMarkerDispT<T>::get_Size(long* plSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Size"), DISPID(1610743810));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plSize /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChMarkerDispT<T>::get_Size(void)
{
  long plSize;
  this->get_Size((long*)&plSize);
  return plSize;
}

// *********************************************************************//
// DispIntf:  ChTrendlines
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AC0-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChTrendlinesDispT<T>::get_Count(long* cScaling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(cScaling /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChTrendlinesDispT<T>::get_Count(void)
{
  long cScaling;
  this->get_Count((long*)&cScaling);
  return cScaling;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChTrendlinesDispT<T>::get_Item(long Index/*[in]*/, 
                               Owc10_xp::ChTrendline** pptrendline/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChTrendline**)pptrendline /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChTrendline* __fastcall
ChTrendlinesDispT<T>::get_Item(long Index/*[in]*/)
{
  Owc10_xp::ChTrendline* pptrendline;
  this->get_Item(Index, (Owc10_xp::ChTrendline**)&pptrendline);
  return pptrendline;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChTrendlinesDispT<T>::get_Parent(Owc10_xp::ChSeries** ppseries/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(5201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChSeries**)ppseries /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChSeries* __fastcall
ChTrendlinesDispT<T>::get_Parent(void)
{
  Owc10_xp::ChSeries* ppseries;
  this->get_Parent((Owc10_xp::ChSeries**)&ppseries);
  return ppseries;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChTrendlinesDispT<T>::get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
ChTrendlinesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunk;
  this->get__NewEnum((LPUNKNOWN*)&ppunk);
  return ppunk;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChTrendlinesDispT<T>::Add(Owc10_xp::ChTrendline** pptrendline/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChTrendline**)pptrendline /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::ChTrendline* __fastcall
ChTrendlinesDispT<T>::Add(void)
{
  Owc10_xp::ChTrendline* pptrendline;
  this->Add((Owc10_xp::ChTrendline**)&pptrendline);
  return pptrendline;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChTrendlinesDispT<T>::Delete(long Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(5202));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ChTrendline
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39ABF-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChTrendlineDispT<T>::get_DataLabel(Owc10_xp::ChDataLabel** ppdatalabel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataLabel"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChDataLabel**)ppdatalabel /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChDataLabel* __fastcall
ChTrendlineDispT<T>::get_DataLabel(void)
{
  Owc10_xp::ChDataLabel* ppdatalabel;
  this->get_DataLabel((Owc10_xp::ChDataLabel**)&ppdatalabel);
  return ppdatalabel;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChTrendlineDispT<T>::get_Index(long* pIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(5204));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pIndex /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChTrendlineDispT<T>::get_Index(void)
{
  long pIndex;
  this->get_Index((long*)&pIndex);
  return pIndex;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChTrendlineDispT<T>::set_IsDisplayingEquation(VARIANT_BOOL pfIsDisplEquation/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsDisplayingEquation"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<1> _args;
  _args[1] = pfIsDisplEquation /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChTrendlineDispT<T>::get_IsDisplayingEquation(VARIANT_BOOL* pfIsDisplEquation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsDisplayingEquation"), DISPID(1610743810));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfIsDisplEquation /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChTrendlineDispT<T>::get_IsDisplayingEquation(void)
{
  VARIANT_BOOL pfIsDisplEquation;
  this->get_IsDisplayingEquation((VARIANT_BOOL*)&pfIsDisplEquation);
  return pfIsDisplEquation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChTrendlineDispT<T>::set_IsDisplayingRSquared(VARIANT_BOOL pfIsDisplRSquared/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsDisplayingRSquared"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<1> _args;
  _args[1] = pfIsDisplRSquared /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChTrendlineDispT<T>::get_IsDisplayingRSquared(VARIANT_BOOL* pfIsDisplRSquared/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsDisplayingRSquared"), DISPID(1610743812));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfIsDisplRSquared /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChTrendlineDispT<T>::get_IsDisplayingRSquared(void)
{
  VARIANT_BOOL pfIsDisplRSquared;
  this->get_IsDisplayingRSquared((VARIANT_BOOL*)&pfIsDisplRSquared);
  return pfIsDisplRSquared;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChTrendlineDispT<T>::get_Line(Owc10_xp::ChLine** ppline/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Line"), DISPID(5205));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChLine**)ppline /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChLine* __fastcall
ChTrendlineDispT<T>::get_Line(void)
{
  Owc10_xp::ChLine* ppline;
  this->get_Line((Owc10_xp::ChLine**)&ppline);
  return ppline;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChTrendlineDispT<T>::set_Order(long plOrder/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Order"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<1> _args;
  _args[1] = plOrder /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChTrendlineDispT<T>::get_Order(long* plOrder/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Order"), DISPID(1610743815));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plOrder /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChTrendlineDispT<T>::get_Order(void)
{
  long plOrder;
  this->get_Order((long*)&plOrder);
  return plOrder;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChTrendlineDispT<T>::set_Period(long plPeriod/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Period"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  TAutoArgs<1> _args;
  _args[1] = plPeriod /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChTrendlineDispT<T>::get_Period(long* plPeriod/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Period"), DISPID(1610743817));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plPeriod /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChTrendlineDispT<T>::get_Period(void)
{
  long plPeriod;
  this->get_Period((long*)&plPeriod);
  return plPeriod;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChTrendlineDispT<T>::get_Parent(Owc10_xp::ChSeries** ppseries/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(5201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChSeries**)ppseries /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChSeries* __fastcall
ChTrendlineDispT<T>::get_Parent(void)
{
  Owc10_xp::ChSeries* ppseries;
  this->get_Parent((Owc10_xp::ChSeries**)&ppseries);
  return ppseries;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChTrendlineDispT<T>::set_Type(Owc10_xp::ChartTrendlineTypeEnum pocpTT/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(DISPID_UNKNOWN/*[1610743820]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)pocpTT /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChTrendlineDispT<T>::get_Type(Owc10_xp::ChartTrendlineTypeEnum* pocpTT/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(1610743820));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pocpTT /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartTrendlineTypeEnum __fastcall
ChTrendlineDispT<T>::get_Type(void)
{
  Owc10_xp::ChartTrendlineTypeEnum pocpTT;
  this->get_Type((Owc10_xp::ChartTrendlineTypeEnum*)&pocpTT);
  return pocpTT;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChTrendlineDispT<T>::set_Caption(BSTR pbstr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(DISPID_UNKNOWN/*[1610743822]*/));
  TAutoArgs<1> _args;
  _args[1] = pbstr /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChTrendlineDispT<T>::get_Caption(BSTR* pbstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(1610743822));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ChTrendlineDispT<T>::get_Caption(void)
{
  BSTR pbstr;
  this->get_Caption((BSTR*)&pbstr);
  return pbstr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChTrendlineDispT<T>::set_HasAutoCaption(VARIANT_BOOL pfAuto/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasAutoCaption"), DISPID(DISPID_UNKNOWN/*[1610743824]*/));
  TAutoArgs<1> _args;
  _args[1] = pfAuto /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChTrendlineDispT<T>::get_HasAutoCaption(VARIANT_BOOL* pfAuto/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasAutoCaption"), DISPID(1610743824));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfAuto /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChTrendlineDispT<T>::get_HasAutoCaption(void)
{
  VARIANT_BOOL pfAuto;
  this->get_HasAutoCaption((VARIANT_BOOL*)&pfAuto);
  return pfAuto;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChTrendlineDispT<T>::Select()
{
  _TDispID _dispid(*this, OLETEXT("Select"), DISPID(5036));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChTrendlineDispT<T>::get_Top(long* ptop/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(DISPID_UNKNOWN/*[1610743827]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ptop /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChTrendlineDispT<T>::get_Top(void)
{
  long ptop;
  this->get_Top((long*)&ptop);
  return ptop;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChTrendlineDispT<T>::get_Left(long* pleft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(DISPID_UNKNOWN/*[1610743828]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pleft /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChTrendlineDispT<T>::get_Left(void)
{
  long pleft;
  this->get_Left((long*)&pleft);
  return pleft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChTrendlineDispT<T>::get_Bottom(long* pbottom/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bottom"), DISPID(DISPID_UNKNOWN/*[1610743829]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbottom /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChTrendlineDispT<T>::get_Bottom(void)
{
  long pbottom;
  this->get_Bottom((long*)&pbottom);
  return pbottom;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChTrendlineDispT<T>::get_Right(long* pright/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Right"), DISPID(DISPID_UNKNOWN/*[1610743830]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pright /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChTrendlineDispT<T>::get_Right(void)
{
  long pright;
  this->get_Right((long*)&pright);
  return pright;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChTrendlineDispT<T>::get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObjectType"), DISPID(DISPID_UNKNOWN/*[1610743831]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pcs /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartSelectionsEnum __fastcall
ChTrendlineDispT<T>::get_ObjectType(void)
{
  Owc10_xp::ChartSelectionsEnum pcs;
  this->get_ObjectType((Owc10_xp::ChartSelectionsEnum*)&pcs);
  return pcs;
}

// *********************************************************************//
// DispIntf:  ChFormatMap
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BEAE3F40-6FB5-11D2-A8FF-00C04FAC6830}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChFormatMapDispT<T>::get_Segments(Owc10_xp::ChSegments** ppsegments/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Segments"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChSegments**)ppsegments /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChSegments* __fastcall
ChFormatMapDispT<T>::get_Segments(void)
{
  Owc10_xp::ChSegments* ppsegments;
  this->get_Segments((Owc10_xp::ChSegments**)&ppsegments);
  return ppsegments;
}

// *********************************************************************//
// DispIntf:  ChSegments
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BEAE3F41-6FB5-11D2-A8FF-00C04FAC6830}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSegmentsDispT<T>::get_Count(long* cDoodads/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(cDoodads /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChSegmentsDispT<T>::get_Count(void)
{
  long cDoodads;
  this->get_Count((long*)&cDoodads);
  return cDoodads;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSegmentsDispT<T>::get_Parent(Owc10_xp::ChFormatMap** ppformatmap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(5201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChFormatMap**)ppformatmap /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChFormatMap* __fastcall
ChSegmentsDispT<T>::get_Parent(void)
{
  Owc10_xp::ChFormatMap* ppformatmap;
  this->get_Parent((Owc10_xp::ChFormatMap**)&ppformatmap);
  return ppformatmap;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSegmentsDispT<T>::Add(Owc10_xp::ChSegment** ppsegment/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChSegment**)ppsegment /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::ChSegment* __fastcall
ChSegmentsDispT<T>::Add(void)
{
  Owc10_xp::ChSegment* ppsegment;
  this->Add((Owc10_xp::ChSegment**)&ppsegment);
  return ppsegment;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSegmentsDispT<T>::Delete(long Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(5202));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSegmentsDispT<T>::get_Item(long Index/*[in]*/, Owc10_xp::ChSegment** ppsegment/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChSegment**)ppsegment /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChSegment* __fastcall
ChSegmentsDispT<T>::get_Item(long Index/*[in]*/)
{
  Owc10_xp::ChSegment* ppsegment;
  this->get_Item(Index, (Owc10_xp::ChSegment**)&ppsegment);
  return ppsegment;
}

// *********************************************************************//
// DispIntf:  ChSegment
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {EB509C25-4748-4D52-A6FE-137BA0642027}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSegmentDispT<T>::get_Begin(Owc10_xp::ChSegmentBoundary** ppsegbound/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Begin"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChSegmentBoundary**)ppsegbound /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChSegmentBoundary* __fastcall
ChSegmentDispT<T>::get_Begin(void)
{
  Owc10_xp::ChSegmentBoundary* ppsegbound;
  this->get_Begin((Owc10_xp::ChSegmentBoundary**)&ppsegbound);
  return ppsegbound;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSegmentDispT<T>::get_End(Owc10_xp::ChSegmentBoundary** ppsegbound/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("End"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChSegmentBoundary**)ppsegbound /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChSegmentBoundary* __fastcall
ChSegmentDispT<T>::get_End(void)
{
  Owc10_xp::ChSegmentBoundary* ppsegbound;
  this->get_End((Owc10_xp::ChSegmentBoundary**)&ppsegbound);
  return ppsegbound;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSegmentDispT<T>::get_HasAbsoluteLabels(VARIANT_BOOL* pfAbsolute/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasAbsoluteLabels"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfAbsolute /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChSegmentDispT<T>::get_HasAbsoluteLabels(void)
{
  VARIANT_BOOL pfAbsolute;
  this->get_HasAbsoluteLabels((VARIANT_BOOL*)&pfAbsolute);
  return pfAbsolute;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSegmentDispT<T>::set_HasAbsoluteLabels(VARIANT_BOOL pfAbsolute/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasAbsoluteLabels"), DISPID(1610743810));
  TAutoArgs<1> _args;
  _args[1] = pfAbsolute /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSegmentDispT<T>::get_HasDiscreteDivisions(VARIANT_BOOL* pfDiscrete/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasDiscreteDivisions"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfDiscrete /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChSegmentDispT<T>::get_HasDiscreteDivisions(void)
{
  VARIANT_BOOL pfDiscrete;
  this->get_HasDiscreteDivisions((VARIANT_BOOL*)&pfDiscrete);
  return pfDiscrete;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSegmentDispT<T>::set_HasDiscreteDivisions(VARIANT_BOOL pfDiscrete/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasDiscreteDivisions"), DISPID(1610743812));
  TAutoArgs<1> _args;
  _args[1] = pfDiscrete /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSegmentDispT<T>::get_HasAutoDivisions(VARIANT_BOOL* pfAuto/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasAutoDivisions"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfAuto /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ChSegmentDispT<T>::get_HasAutoDivisions(void)
{
  VARIANT_BOOL pfAuto;
  this->get_HasAutoDivisions((VARIANT_BOOL*)&pfAuto);
  return pfAuto;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSegmentDispT<T>::set_HasAutoDivisions(VARIANT_BOOL pfAuto/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasAutoDivisions"), DISPID(1610743814));
  TAutoArgs<1> _args;
  _args[1] = pfAuto /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSegmentDispT<T>::get_Divisions(long* pDivisions/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Divisions"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDivisions /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChSegmentDispT<T>::get_Divisions(void)
{
  long pDivisions;
  this->get_Divisions((long*)&pDivisions);
  return pDivisions;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSegmentDispT<T>::set_Divisions(long pDivisions/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Divisions"), DISPID(1610743816));
  TAutoArgs<1> _args;
  _args[1] = pDivisions /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ChSegmentBoundary
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {186FEDB0-6FB6-11D2-A8FF-00C04FAC6830}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSegmentBoundaryDispT<T>::get_Border(Owc10_xp::ChBorder** ppline/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Border"), DISPID(5004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChBorder**)ppline /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChBorder* __fastcall
ChSegmentBoundaryDispT<T>::get_Border(void)
{
  Owc10_xp::ChBorder* ppline;
  this->get_Border((Owc10_xp::ChBorder**)&ppline);
  return ppline;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSegmentBoundaryDispT<T>::get_Interior(Owc10_xp::ChInterior** ppinterior/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Interior"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChInterior**)ppinterior /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChInterior* __fastcall
ChSegmentBoundaryDispT<T>::get_Interior(void)
{
  Owc10_xp::ChInterior* ppinterior;
  this->get_Interior((Owc10_xp::ChInterior**)&ppinterior);
  return ppinterior;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSegmentBoundaryDispT<T>::get_Line(Owc10_xp::ChLine** ppline/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Line"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChLine**)ppline /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChLine* __fastcall
ChSegmentBoundaryDispT<T>::get_Line(void)
{
  Owc10_xp::ChLine* ppline;
  this->get_Line((Owc10_xp::ChLine**)&ppline);
  return ppline;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSegmentBoundaryDispT<T>::get_Value(double* prvalue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(prvalue /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
ChSegmentBoundaryDispT<T>::get_Value(void)
{
  double prvalue;
  this->get_Value((double*)&prvalue);
  return prvalue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSegmentBoundaryDispT<T>::set_Value(double prvalue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = prvalue /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSegmentBoundaryDispT<T>::get_ValueType(Owc10_xp::ChartBoundaryValueTypeEnum* pvt/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ValueType"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pvt /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartBoundaryValueTypeEnum __fastcall
ChSegmentBoundaryDispT<T>::get_ValueType(void)
{
  Owc10_xp::ChartBoundaryValueTypeEnum pvt;
  this->get_ValueType((Owc10_xp::ChartBoundaryValueTypeEnum*)&pvt);
  return pvt;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChSegmentBoundaryDispT<T>::set_ValueType(Owc10_xp::ChartBoundaryValueTypeEnum pvt/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ValueType"), DISPID(1610743813));
  TAutoArgs<1> _args;
  _args[1] = (int)pvt /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ChDropZone
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F0706B76-6BB3-11D3-A18A-00C04F612970}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDropZoneDispT<T>::get_ButtonFont(Owc10_xp::ChFont** ppfont/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ButtonFont"), DISPID(5200));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChFont**)ppfont /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChFont* __fastcall
ChDropZoneDispT<T>::get_ButtonFont(void)
{
  Owc10_xp::ChFont* ppfont;
  this->get_ButtonFont((Owc10_xp::ChFont**)&ppfont);
  return ppfont;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDropZoneDispT<T>::get_ButtonInterior(Owc10_xp::ChInterior** ppinterior/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ButtonInterior"), DISPID(5007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChInterior**)ppinterior /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChInterior* __fastcall
ChDropZoneDispT<T>::get_ButtonInterior(void)
{
  Owc10_xp::ChInterior* ppinterior;
  this->get_ButtonInterior((Owc10_xp::ChInterior**)&ppinterior);
  return ppinterior;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDropZoneDispT<T>::get_ButtonBorder(Owc10_xp::ChBorder** ppborder/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ButtonBorder"), DISPID(5004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChBorder**)ppborder /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChBorder* __fastcall
ChDropZoneDispT<T>::get_ButtonBorder(void)
{
  Owc10_xp::ChBorder* ppborder;
  this->get_ButtonBorder((Owc10_xp::ChBorder**)&ppborder);
  return ppborder;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDropZoneDispT<T>::get_WatermarkFont(Owc10_xp::ChFont** ppfont/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WatermarkFont"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChFont**)ppfont /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChFont* __fastcall
ChDropZoneDispT<T>::get_WatermarkFont(void)
{
  Owc10_xp::ChFont* ppfont;
  this->get_WatermarkFont((Owc10_xp::ChFont**)&ppfont);
  return ppfont;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDropZoneDispT<T>::get_WatermarkInterior(Owc10_xp::ChInterior** ppinterior/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WatermarkInterior"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChInterior**)ppinterior /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChInterior* __fastcall
ChDropZoneDispT<T>::get_WatermarkInterior(void)
{
  Owc10_xp::ChInterior* ppinterior;
  this->get_WatermarkInterior((Owc10_xp::ChInterior**)&ppinterior);
  return ppinterior;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDropZoneDispT<T>::get_WatermarkBorder(Owc10_xp::ChBorder** ppborder/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WatermarkBorder"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChBorder**)ppborder /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChBorder* __fastcall
ChDropZoneDispT<T>::get_WatermarkBorder(void)
{
  Owc10_xp::ChBorder* ppborder;
  this->get_WatermarkBorder((Owc10_xp::ChBorder**)&ppborder);
  return ppborder;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDropZoneDispT<T>::get_ChartFields(Owc10_xp::ChChartFields** ppwcfields/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChartFields"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChChartFields**)ppwcfields /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChChartFields* __fastcall
ChDropZoneDispT<T>::get_ChartFields(void)
{
  Owc10_xp::ChChartFields* ppwcfields;
  this->get_ChartFields((Owc10_xp::ChChartFields**)&ppwcfields);
  return ppwcfields;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDropZoneDispT<T>::get_Parent(LPDISPATCH* ppwcwebchart/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(5201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppwcwebchart /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ChDropZoneDispT<T>::get_Parent(void)
{
  LPDISPATCH ppwcwebchart;
  this->get_Parent((LPDISPATCH*)&ppwcwebchart);
  return ppwcwebchart;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDropZoneDispT<T>::get_Top(long* ptop/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ptop /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChDropZoneDispT<T>::get_Top(void)
{
  long ptop;
  this->get_Top((long*)&ptop);
  return ptop;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDropZoneDispT<T>::set_Top(long ptop/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1610743816));
  TAutoArgs<1> _args;
  _args[1] = ptop /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDropZoneDispT<T>::get_Left(long* pleft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(DISPID_UNKNOWN/*[1610743818]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pleft /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChDropZoneDispT<T>::get_Left(void)
{
  long pleft;
  this->get_Left((long*)&pleft);
  return pleft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDropZoneDispT<T>::set_Left(long pleft/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1610743818));
  TAutoArgs<1> _args;
  _args[1] = pleft /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDropZoneDispT<T>::get_Bottom(long* pbottom/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bottom"), DISPID(DISPID_UNKNOWN/*[1610743820]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbottom /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChDropZoneDispT<T>::get_Bottom(void)
{
  long pbottom;
  this->get_Bottom((long*)&pbottom);
  return pbottom;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDropZoneDispT<T>::get_Right(long* pright/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Right"), DISPID(DISPID_UNKNOWN/*[1610743821]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pright /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChDropZoneDispT<T>::get_Right(void)
{
  long pright;
  this->get_Right((long*)&pright);
  return pright;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDropZoneDispT<T>::get_Index(Owc10_xp::ChartDropZonesEnum* pIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(5204));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pIndex /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartDropZonesEnum __fastcall
ChDropZoneDispT<T>::get_Index(void)
{
  Owc10_xp::ChartDropZonesEnum pIndex;
  this->get_Index((Owc10_xp::ChartDropZonesEnum*)&pIndex);
  return pIndex;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChDropZoneDispT<T>::get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObjectType"), DISPID(DISPID_UNKNOWN/*[1610743823]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pcs /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartSelectionsEnum __fastcall
ChDropZoneDispT<T>::get_ObjectType(void)
{
  Owc10_xp::ChartSelectionsEnum pcs;
  this->get_ObjectType((Owc10_xp::ChartSelectionsEnum*)&pcs);
  return pcs;
}

// *********************************************************************//
// DispIntf:  ChChartFields
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BB4C16FA-6BEC-11D3-A18A-00C04F612970}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartFieldsDispT<T>::get_Item(long Index/*[in]*/, 
                                Owc10_xp::ChChartField** ppwcfield/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChChartField**)ppwcfield /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChChartField* __fastcall
ChChartFieldsDispT<T>::get_Item(long Index/*[in]*/)
{
  Owc10_xp::ChChartField* ppwcfield;
  this->get_Item(Index, (Owc10_xp::ChChartField**)&ppwcfield);
  return ppwcfield;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartFieldsDispT<T>::get_Count(long* pcfields/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcfields /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChChartFieldsDispT<T>::get_Count(void)
{
  long pcfields;
  this->get_Count((long*)&pcfields);
  return pcfields;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartFieldsDispT<T>::get_Parent(Owc10_xp::ChDropZone** ppchdz/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(5201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChDropZone**)ppchdz /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChDropZone* __fastcall
ChChartFieldsDispT<T>::get_Parent(void)
{
  Owc10_xp::ChDropZone* ppchdz;
  this->get_Parent((Owc10_xp::ChDropZone**)&ppchdz);
  return ppchdz;
}

// *********************************************************************//
// DispIntf:  ChChartField
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D7842C36-6BEC-11D3-A18A-00C04F612970}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartFieldDispT<T>::get_PivotObject(LPDISPATCH* ppdispObj/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PivotObject"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppdispObj /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ChChartFieldDispT<T>::get_PivotObject(void)
{
  LPDISPATCH ppdispObj;
  this->get_PivotObject((LPDISPATCH*)&ppdispObj);
  return ppdispObj;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartFieldDispT<T>::get_Parent(Owc10_xp::ChDropZone** ppchdz/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(5201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ChDropZone**)ppchdz /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChDropZone* __fastcall
ChChartFieldDispT<T>::get_Parent(void)
{
  Owc10_xp::ChDropZone* ppchdz;
  this->get_Parent((Owc10_xp::ChDropZone**)&ppchdz);
  return ppchdz;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartFieldDispT<T>::Select()
{
  _TDispID _dispid(*this, OLETEXT("Select"), DISPID(5036));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartFieldDispT<T>::get_Top(long* ptop/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ptop /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChChartFieldDispT<T>::get_Top(void)
{
  long ptop;
  this->get_Top((long*)&ptop);
  return ptop;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartFieldDispT<T>::get_Left(long* pleft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pleft /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChChartFieldDispT<T>::get_Left(void)
{
  long pleft;
  this->get_Left((long*)&pleft);
  return pleft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartFieldDispT<T>::get_Bottom(long* pbottom/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bottom"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbottom /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChChartFieldDispT<T>::get_Bottom(void)
{
  long pbottom;
  this->get_Bottom((long*)&pbottom);
  return pbottom;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartFieldDispT<T>::get_Right(long* pright/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Right"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pright /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChChartFieldDispT<T>::get_Right(void)
{
  long pright;
  this->get_Right((long*)&pright);
  return pright;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChChartFieldDispT<T>::get_ObjectType(Owc10_xp::ChartSelectionsEnum* pcs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObjectType"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pcs /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ChartSelectionsEnum __fastcall
ChChartFieldDispT<T>::get_ObjectType(void)
{
  Owc10_xp::ChartSelectionsEnum pcs;
  this->get_ObjectType((Owc10_xp::ChartSelectionsEnum*)&pcs);
  return pcs;
}

// *********************************************************************//
// DispIntf:  OWCLanguageSettings
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6F5A76C3-0AC7-4DED-9A6B-A3547FD7B7BB}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OWCLanguageSettingsDispT<T>::get_Application(LPDISPATCH* Dispatch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Dispatch /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
OWCLanguageSettingsDispT<T>::get_Application(void)
{
  LPDISPATCH Dispatch;
  this->get_Application((LPDISPATCH*)&Dispatch);
  return Dispatch;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OWCLanguageSettingsDispT<T>::get_LanguageID(Owc10_xp::MsoAppLanguageID id/*[in]*/, 
                                            long* lid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LanguageID"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)id /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(lid /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
OWCLanguageSettingsDispT<T>::get_LanguageID(Owc10_xp::MsoAppLanguageID id/*[in]*/)
{
  long lid;
  this->get_LanguageID(id, (long*)&lid);
  return lid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OWCLanguageSettingsDispT<T>::get_LanguagePreferredForEditing(Owc10_xp::MsoLanguageID lid/*[in]*/, 
                                                             VARIANT_BOOL* f/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LanguagePreferredForEditing"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)lid /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(f /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
OWCLanguageSettingsDispT<T>::get_LanguagePreferredForEditing(Owc10_xp::MsoLanguageID lid/*[in]*/)
{
  VARIANT_BOOL f;
  this->get_LanguagePreferredForEditing(lid, (VARIANT_BOOL*)&f);
  return f;
}

// *********************************************************************//
// DispIntf:  ISpreadsheetEventSink
// Flags:     (4096) Dispatchable
// GUID:      {F5B39A75-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
ISpreadsheetEventSinkDispT<T>::BeforeContextMenu(long x, long y, Owc10_xp::ByRef* Menu, 
                                                 Owc10_xp::ByRef* Cancel)
{
  _TDispID _dispid(/* BeforeContextMenu */ DISPID(1011));
  TAutoArgs<4> _args;
  _args[1] = x /*[VT_I4:0]*/;
  _args[2] = y /*[VT_I4:0]*/;
  _args[3] = (LPDISPATCH)(Owc10_xp::ByRef*)Menu /*[VT_USERDEFINED:1]*/;
  _args[4] = (LPDISPATCH)(Owc10_xp::ByRef*)Cancel /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ISpreadsheetEventSinkDispT<T>::BeforeKeyDown(long KeyCode, long Shift, Owc10_xp::ByRef* Cancel)
{
  _TDispID _dispid(/* BeforeKeyDown */ DISPID(1006));
  TAutoArgs<3> _args;
  _args[1] = KeyCode /*[VT_I4:0]*/;
  _args[2] = Shift /*[VT_I4:0]*/;
  _args[3] = (LPDISPATCH)(Owc10_xp::ByRef*)Cancel /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ISpreadsheetEventSinkDispT<T>::BeforeKeyPress(long KeyAscii, Owc10_xp::ByRef* Cancel)
{
  _TDispID _dispid(/* BeforeKeyPress */ DISPID(1007));
  TAutoArgs<2> _args;
  _args[1] = KeyAscii /*[VT_I4:0]*/;
  _args[2] = (LPDISPATCH)(Owc10_xp::ByRef*)Cancel /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ISpreadsheetEventSinkDispT<T>::BeforeKeyUp(long KeyCode, long Shift, Owc10_xp::ByRef* Cancel)
{
  _TDispID _dispid(/* BeforeKeyUp */ DISPID(1005));
  TAutoArgs<3> _args;
  _args[1] = KeyCode /*[VT_I4:0]*/;
  _args[2] = Shift /*[VT_I4:0]*/;
  _args[3] = (LPDISPATCH)(Owc10_xp::ByRef*)Cancel /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ISpreadsheetEventSinkDispT<T>::Click()
{
  _TDispID _dispid(/* Click */ DISPID(1502));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ISpreadsheetEventSinkDispT<T>::CommandEnabled(VARIANT Command, Owc10_xp::ByRef* Enabled)
{
  _TDispID _dispid(/* CommandEnabled */ DISPID(1000));
  TAutoArgs<2> _args;
  _args[1] = Command /*[VT_VARIANT:0]*/;
  _args[2] = (LPDISPATCH)(Owc10_xp::ByRef*)Enabled /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ISpreadsheetEventSinkDispT<T>::CommandChecked(VARIANT Command, Owc10_xp::ByRef* Checked)
{
  _TDispID _dispid(/* CommandChecked */ DISPID(1001));
  TAutoArgs<2> _args;
  _args[1] = Command /*[VT_VARIANT:0]*/;
  _args[2] = (LPDISPATCH)(Owc10_xp::ByRef*)Checked /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ISpreadsheetEventSinkDispT<T>::CommandTipText(VARIANT Command, Owc10_xp::ByRef* Caption)
{
  _TDispID _dispid(/* CommandTipText */ DISPID(1002));
  TAutoArgs<2> _args;
  _args[1] = Command /*[VT_VARIANT:0]*/;
  _args[2] = (LPDISPATCH)(Owc10_xp::ByRef*)Caption /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ISpreadsheetEventSinkDispT<T>::CommandBeforeExecute(VARIANT Command, Owc10_xp::ByRef* Cancel)
{
  _TDispID _dispid(/* CommandBeforeExecute */ DISPID(1003));
  TAutoArgs<2> _args;
  _args[1] = Command /*[VT_VARIANT:0]*/;
  _args[2] = (LPDISPATCH)(Owc10_xp::ByRef*)Cancel /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ISpreadsheetEventSinkDispT<T>::CommandExecute(VARIANT Command, VARIANT_BOOL Succeeded)
{
  _TDispID _dispid(/* CommandExecute */ DISPID(1004));
  TAutoArgs<2> _args;
  _args[1] = Command /*[VT_VARIANT:0]*/;
  _args[2] = Succeeded /*[VT_BOOL:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ISpreadsheetEventSinkDispT<T>::DblClick()
{
  _TDispID _dispid(/* DblClick */ DISPID(1503));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ISpreadsheetEventSinkDispT<T>::EndEdit(VARIANT_BOOL Accept, Owc10_xp::ByRef* FinalValue, 
                                       Owc10_xp::ByRef* Cancel, Owc10_xp::ByRef* ErrorDescription)
{
  _TDispID _dispid(/* EndEdit */ DISPID(1504));
  TAutoArgs<4> _args;
  _args[1] = Accept /*[VT_BOOL:0]*/;
  _args[2] = (LPDISPATCH)(Owc10_xp::ByRef*)FinalValue /*[VT_USERDEFINED:1]*/;
  _args[3] = (LPDISPATCH)(Owc10_xp::ByRef*)Cancel /*[VT_USERDEFINED:1]*/;
  _args[4] = (LPDISPATCH)(Owc10_xp::ByRef*)ErrorDescription /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ISpreadsheetEventSinkDispT<T>::Initialize()
{
  _TDispID _dispid(/* Initialize */ DISPID(1523));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ISpreadsheetEventSinkDispT<T>::KeyDown(long KeyCode, long Shift)
{
  _TDispID _dispid(/* KeyDown */ DISPID(1009));
  TAutoArgs<2> _args;
  _args[1] = KeyCode /*[VT_I4:0]*/;
  _args[2] = Shift /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ISpreadsheetEventSinkDispT<T>::KeyPress(long KeyAscii)
{
  _TDispID _dispid(/* KeyPress */ DISPID(1010));
  TAutoArgs<1> _args;
  _args[1] = KeyAscii /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ISpreadsheetEventSinkDispT<T>::KeyUp(long KeyCode, long Shift)
{
  _TDispID _dispid(/* KeyUp */ DISPID(1008));
  TAutoArgs<2> _args;
  _args[1] = KeyCode /*[VT_I4:0]*/;
  _args[2] = Shift /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ISpreadsheetEventSinkDispT<T>::LoadCompleted()
{
  _TDispID _dispid(/* LoadCompleted */ DISPID(1522));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ISpreadsheetEventSinkDispT<T>::MouseDown(long Button, long Shift, long x, long y)
{
  _TDispID _dispid(/* MouseDown */ DISPID(1505));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I4:0]*/;
  _args[2] = Shift /*[VT_I4:0]*/;
  _args[3] = x /*[VT_I4:0]*/;
  _args[4] = y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ISpreadsheetEventSinkDispT<T>::MouseOut(long Button, long Shift, Owc10_xp::_Range* Target)
{
  _TDispID _dispid(/* MouseOut */ DISPID(1506));
  TAutoArgs<3> _args;
  _args[1] = Button /*[VT_I4:0]*/;
  _args[2] = Shift /*[VT_I4:0]*/;
  _args[3] = (LPDISPATCH)(Owc10_xp::_Range*)Target /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ISpreadsheetEventSinkDispT<T>::MouseOver(long Button, long Shift, Owc10_xp::_Range* Target)
{
  _TDispID _dispid(/* MouseOver */ DISPID(1507));
  TAutoArgs<3> _args;
  _args[1] = Button /*[VT_I4:0]*/;
  _args[2] = Shift /*[VT_I4:0]*/;
  _args[3] = (LPDISPATCH)(Owc10_xp::_Range*)Target /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ISpreadsheetEventSinkDispT<T>::MouseUp(long Button, long Shift, long x, long y)
{
  _TDispID _dispid(/* MouseUp */ DISPID(1508));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I4:0]*/;
  _args[2] = Shift /*[VT_I4:0]*/;
  _args[3] = x /*[VT_I4:0]*/;
  _args[4] = y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ISpreadsheetEventSinkDispT<T>::MouseWheel(VARIANT_BOOL Page, long Count)
{
  _TDispID _dispid(/* MouseWheel */ DISPID(1509));
  TAutoArgs<2> _args;
  _args[1] = Page /*[VT_BOOL:0]*/;
  _args[2] = Count /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ISpreadsheetEventSinkDispT<T>::SelectionChange()
{
  _TDispID _dispid(/* SelectionChange */ DISPID(1511));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ISpreadsheetEventSinkDispT<T>::SelectionChanging(Owc10_xp::_Range* Range)
{
  _TDispID _dispid(/* SelectionChanging */ DISPID(1512));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::_Range*)Range /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ISpreadsheetEventSinkDispT<T>::SheetActivate(Owc10_xp::Worksheet* Sh)
{
  _TDispID _dispid(/* SheetActivate */ DISPID(1513));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::Worksheet*)Sh /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ISpreadsheetEventSinkDispT<T>::SheetCalculate(Owc10_xp::Worksheet* Sh)
{
  _TDispID _dispid(/* SheetCalculate */ DISPID(1516));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::Worksheet*)Sh /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ISpreadsheetEventSinkDispT<T>::SheetChange(Owc10_xp::Worksheet* Sh, Owc10_xp::_Range* Target)
{
  _TDispID _dispid(/* SheetChange */ DISPID(1517));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::Worksheet*)Sh /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Owc10_xp::_Range*)Target /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ISpreadsheetEventSinkDispT<T>::SheetDeactivate(Owc10_xp::Worksheet* Sh)
{
  _TDispID _dispid(/* SheetDeactivate */ DISPID(1518));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::Worksheet*)Sh /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ISpreadsheetEventSinkDispT<T>::SheetFollowHyperlink(Owc10_xp::Worksheet* Sh, 
                                                    Owc10_xp::Hyperlink* Target)
{
  _TDispID _dispid(/* SheetFollowHyperlink */ DISPID(1519));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::Worksheet*)Sh /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Owc10_xp::Hyperlink*)Target /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ISpreadsheetEventSinkDispT<T>::StartEdit(LPDISPATCH Selection, Owc10_xp::ByRef* InitialValue, 
                                         Owc10_xp::ByRef* Cancel, Owc10_xp::ByRef* ErrorDescription)
{
  _TDispID _dispid(/* StartEdit */ DISPID(1520));
  TAutoArgs<4> _args;
  _args[1] = Selection /*[VT_DISPATCH:0]*/;
  _args[2] = (LPDISPATCH)(Owc10_xp::ByRef*)InitialValue /*[VT_USERDEFINED:1]*/;
  _args[3] = (LPDISPATCH)(Owc10_xp::ByRef*)Cancel /*[VT_USERDEFINED:1]*/;
  _args[4] = (LPDISPATCH)(Owc10_xp::ByRef*)ErrorDescription /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ISpreadsheetEventSinkDispT<T>::ViewChange(Owc10_xp::_Range* Target)
{
  _TDispID _dispid(/* ViewChange */ DISPID(1521));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::_Range*)Target /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOM_Range
// Interface: _Range
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_RangeT<T>::Activate(void)
{
  return (*this)->Activate();
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::AutoFilter(VARIANT* Field/*[in,opt]*/, VARIANT* Criteria1/*[in,opt]*/, 
                           VARIANT* Operator/*[in,opt]*/, VARIANT* Criteria2/*[in,opt]*/, 
                           VARIANT* VisibleDropDown/*[in,opt]*/)
{
  return (*this)->AutoFilter(Field, Criteria1, Operator, Criteria2, VisibleDropDown);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::AutoFit(void)
{
  return (*this)->AutoFit();
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::BorderAround(VARIANT LineStyle/*[in,opt]*/, 
                             Owc10_xp::XlBorderWeight Weight/*[in,def,opt]*/, 
                             Owc10_xp::XlColorIndex ColorIndex/*[in,def,opt]*/, 
                             VARIANT Color/*[in,opt]*/)
{
  return (*this)->BorderAround(LineStyle, Weight, ColorIndex, Color);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::Calculate(void)
{
  return (*this)->Calculate();
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::Clear(void)
{
  return (*this)->Clear();
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::ClearFormats(void)
{
  return (*this)->ClearFormats();
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::ClearContents(void)
{
  return (*this)->ClearContents();
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::Copy(VARIANT Destination/*[in,opt]*/)
{
  return (*this)->Copy(Destination);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::CopyFromRecordset(LPUNKNOWN Data/*[in]*/, VARIANT MaxRows/*[in,opt]*/, 
                                  VARIANT MaxColumns/*[in,opt]*/, 
                                  int* pcrowRetrieved/*[out,retval]*/)
{
  return (*this)->CopyFromRecordset(Data, MaxRows, MaxColumns, pcrowRetrieved);
}

template <class T> int __fastcall
TCOM_RangeT<T>::CopyFromRecordset(LPUNKNOWN Data/*[in]*/, VARIANT MaxRows/*[in,opt]*/, 
                                  VARIANT MaxColumns/*[in,opt]*/)
{
  int pcrowRetrieved;
  OLECHECK(this->CopyFromRecordset(, (int*)&pcrowRetrieved));
  return pcrowRetrieved;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::Cut(VARIANT Destination/*[in,opt]*/)
{
  return (*this)->Cut(Destination);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::Delete(VARIANT* Shift/*[in,opt]*/)
{
  return (*this)->Delete(Shift);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::FillDown(void)
{
  return (*this)->FillDown();
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::FillRight(void)
{
  return (*this)->FillRight();
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::Find(VARIANT What/*[in]*/, VARIANT* After/*[in,opt]*/, VARIANT* LookIn/*[in,opt]*/, 
                     VARIANT* LookAt/*[in,opt]*/, VARIANT* SearchOrder/*[in,opt]*/, 
                     Owc10_xp::XlSearchDirection SearchDirection/*[in,def,opt]*/, 
                     VARIANT* MatchCase/*[in,opt]*/, VARIANT* MatchByte/*[in,opt]*/, 
                     Owc10_xp::_Range** Range/*[out,retval]*/)
{
  return (*this)->Find(What, After, LookIn, LookAt, SearchOrder, SearchDirection, MatchCase, 
                       MatchByte, Range);
}

template <class T> Owc10_xp::_Range* __fastcall
TCOM_RangeT<T>::Find(VARIANT What/*[in]*/, VARIANT* After/*[in,opt]*/, VARIANT* LookIn/*[in,opt]*/, 
                     VARIANT* LookAt/*[in,opt]*/, VARIANT* SearchOrder/*[in,opt]*/, 
                     Owc10_xp::XlSearchDirection SearchDirection/*[in,def,opt]*/, 
                     VARIANT* MatchCase/*[in,opt]*/, VARIANT* MatchByte/*[in,opt]*/)
{
  Owc10_xp::_Range* Range;
  OLECHECK(this->Find(, (Owc10_xp::_Range**)&Range));
  return Range;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::FindNext(VARIANT* After/*[in,opt]*/, Owc10_xp::_Range** Range/*[out,retval]*/)
{
  return (*this)->FindNext(After, Range);
}

template <class T> Owc10_xp::_Range* __fastcall
TCOM_RangeT<T>::FindNext(VARIANT* After/*[in,opt]*/)
{
  Owc10_xp::_Range* Range;
  OLECHECK(this->FindNext(, (Owc10_xp::_Range**)&Range));
  return Range;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::FindPrevious(VARIANT* After/*[in,opt]*/, Owc10_xp::_Range** Range/*[out,retval]*/)
{
  return (*this)->FindPrevious(After, Range);
}

template <class T> Owc10_xp::_Range* __fastcall
TCOM_RangeT<T>::FindPrevious(VARIANT* After/*[in,opt]*/)
{
  Owc10_xp::_Range* Range;
  OLECHECK(this->FindPrevious(, (Owc10_xp::_Range**)&Range));
  return Range;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::Insert(VARIANT* Shift/*[in,opt]*/)
{
  return (*this)->Insert(Shift);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::LoadText(BSTR File/*[in]*/, BSTR Delimiters/*[in,def,opt]*/, 
                         VARIANT_BOOL ConsecutiveDelimAsOne/*[in,def,opt]*/, 
                         BSTR TextQualifier/*[in,def,opt]*/)
{
  return (*this)->LoadText(File, Delimiters, ConsecutiveDelimAsOne, TextQualifier);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::Merge(VARIANT* Across/*[in,opt]*/)
{
  return (*this)->Merge(Across);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::ParseText(BSTR Text/*[in]*/, BSTR Delimiters/*[in,def,opt]*/, 
                          VARIANT_BOOL ConsecutiveDelimAsOne/*[in,def,opt]*/, 
                          BSTR TextQualifier/*[in,def,opt]*/)
{
  return (*this)->ParseText(Text, Delimiters, ConsecutiveDelimAsOne, TextQualifier);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::Paste(void)
{
  return (*this)->Paste();
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::Select(void)
{
  return (*this)->Select();
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::Show(void)
{
  return (*this)->Show();
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::Sort(int ColumnKey/*[in,def,opt]*/, Owc10_xp::XlSortOrder Order/*[in,def,opt]*/, 
                     Owc10_xp::XlYesNoGuess Header/*[in,def,opt]*/)
{
  return (*this)->Sort(ColumnKey, Order, Header);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::UnMerge(void)
{
  return (*this)->UnMerge();
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/)
{
  return (*this)->get__NewEnum(ppunk);
}

template <class T> LPUNKNOWN __fastcall
TCOM_RangeT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunk;
  OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunk));
  return ppunk;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get__Default(VARIANT Row/*[in,opt]*/, VARIANT Column/*[in,opt]*/, 
                             VARIANT* var/*[out,retval]*/)
{
  return (*this)->get__Default(Row, Column, var);
}

template <class T> VARIANT __fastcall
TCOM_RangeT<T>::get__Default(VARIANT Row/*[in,opt]*/, VARIANT Column/*[in,opt]*/)
{
  VARIANT var;
  OLECHECK(this->get__Default(, (VARIANT*)&var));
  return var;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::set__Default(VARIANT Row/*[in,opt]*/, VARIANT Column/*[in,opt]*/, 
                             VARIANT var/*[in]*/)
{
  return (*this)->set__Default(Row, Column, var);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_Address(VARIANT* RowAbsolute/*[in,opt]*/, VARIANT* ColumnAbsolute/*[in,opt]*/, 
                            Owc10_xp::XlReferenceStyle ReferenceStyle/*[in,def,opt]*/, 
                            VARIANT* External/*[in,opt]*/, VARIANT* RelativeTo/*[in,opt]*/, 
                            BSTR* Address/*[out,retval]*/)
{
  return (*this)->get_Address(RowAbsolute, ColumnAbsolute, ReferenceStyle, External, RelativeTo, 
                              Address);
}

template <class T> BSTR __fastcall
TCOM_RangeT<T>::get_Address(VARIANT* RowAbsolute/*[in,opt]*/, VARIANT* ColumnAbsolute/*[in,opt]*/, 
                            Owc10_xp::XlReferenceStyle ReferenceStyle/*[in,def,opt]*/, 
                            VARIANT* External/*[in,opt]*/, VARIANT* RelativeTo/*[in,opt]*/)
{
  BSTR Address = 0;
  OLECHECK(this->get_Address(, (BSTR*)&Address));
  return Address;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_Application(Owc10_xp::ISpreadsheet** ppApp/*[out,retval]*/)
{
  return (*this)->get_Application(ppApp);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_Application(Owc10_xp::ISpreadsheetPtr* ppApp/*[out,retval]*/)
{
  return (*this)->get_Application(ISpreadsheet**)ppApp);
}

template <class T> Owc10_xp::ISpreadsheetPtr __fastcall
TCOM_RangeT<T>::get_Application(void)
{
  Owc10_xp::ISpreadsheet* ppApp;
  OLECHECK(this->get_Application((Owc10_xp::ISpreadsheet**)&ppApp));
  return (Owc10_xp::ISpreadsheetPtr)ppApp;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_Borders(Owc10_xp::Borders** Borders/*[out,retval]*/)
{
  return (*this)->get_Borders(Borders);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_Borders(Owc10_xp::BordersPtr* Borders/*[out,retval]*/)
{
  return (*this)->get_Borders(Borders**)Borders);
}

template <class T> Owc10_xp::BordersPtr __fastcall
TCOM_RangeT<T>::get_Borders(void)
{
  Owc10_xp::Borders* Borders;
  OLECHECK(this->get_Borders((Owc10_xp::Borders**)&Borders));
  return (Owc10_xp::BordersPtr)Borders;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_Cells(Owc10_xp::_Range** Range/*[out,retval]*/)
{
  return (*this)->get_Cells(Range);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_Cells(Owc10_xp::_RangePtr* Range/*[out,retval]*/)
{
  return (*this)->get_Cells(_Range**)Range);
}

template <class T> Owc10_xp::_RangePtr __fastcall
TCOM_RangeT<T>::get_Cells(void)
{
  Owc10_xp::_Range* Range;
  OLECHECK(this->get_Cells((Owc10_xp::_Range**)&Range));
  return (Owc10_xp::_RangePtr)Range;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_Column(long* Column/*[out,retval]*/)
{
  return (*this)->get_Column(Column);
}

template <class T> long __fastcall
TCOM_RangeT<T>::get_Column(void)
{
  long Column;
  OLECHECK(this->get_Column((long*)&Column));
  return Column;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_Columns(Owc10_xp::_Range** Range/*[out,retval]*/)
{
  return (*this)->get_Columns(Range);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_Columns(Owc10_xp::_RangePtr* Range/*[out,retval]*/)
{
  return (*this)->get_Columns(_Range**)Range);
}

template <class T> Owc10_xp::_RangePtr __fastcall
TCOM_RangeT<T>::get_Columns(void)
{
  Owc10_xp::_Range* Range;
  OLECHECK(this->get_Columns((Owc10_xp::_Range**)&Range));
  return (Owc10_xp::_RangePtr)Range;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_ColumnWidth(VARIANT* ColumnWidth/*[out,retval]*/)
{
  return (*this)->get_ColumnWidth(ColumnWidth);
}

template <class T> VARIANT __fastcall
TCOM_RangeT<T>::get_ColumnWidth(void)
{
  VARIANT ColumnWidth;
  OLECHECK(this->get_ColumnWidth((VARIANT*)&ColumnWidth));
  return ColumnWidth;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::set_ColumnWidth(double ColumnWidth/*[in]*/)
{
  return (*this)->set_ColumnWidth(ColumnWidth);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_Count(long* Count/*[out,retval]*/)
{
  return (*this)->get_Count(Count);
}

template <class T> long __fastcall
TCOM_RangeT<T>::get_Count(void)
{
  long Count;
  OLECHECK(this->get_Count((long*)&Count));
  return Count;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_CurrentArray(Owc10_xp::_Range** CurrentRange/*[out,retval]*/)
{
  return (*this)->get_CurrentArray(CurrentRange);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_CurrentArray(Owc10_xp::_RangePtr* CurrentRange/*[out,retval]*/)
{
  return (*this)->get_CurrentArray(_Range**)CurrentRange);
}

template <class T> Owc10_xp::_RangePtr __fastcall
TCOM_RangeT<T>::get_CurrentArray(void)
{
  Owc10_xp::_Range* CurrentRange;
  OLECHECK(this->get_CurrentArray((Owc10_xp::_Range**)&CurrentRange));
  return (Owc10_xp::_RangePtr)CurrentRange;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_CurrentRegion(Owc10_xp::_Range** CurrentRegion/*[out,retval]*/)
{
  return (*this)->get_CurrentRegion(CurrentRegion);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_CurrentRegion(Owc10_xp::_RangePtr* CurrentRegion/*[out,retval]*/)
{
  return (*this)->get_CurrentRegion(_Range**)CurrentRegion);
}

template <class T> Owc10_xp::_RangePtr __fastcall
TCOM_RangeT<T>::get_CurrentRegion(void)
{
  Owc10_xp::_Range* CurrentRegion;
  OLECHECK(this->get_CurrentRegion((Owc10_xp::_Range**)&CurrentRegion));
  return (Owc10_xp::_RangePtr)CurrentRegion;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_End(Owc10_xp::XlDirection Direction/*[in]*/, 
                        Owc10_xp::_Range** Range/*[out,retval]*/)
{
  return (*this)->get_End(Direction, Range);
}

template <class T> Owc10_xp::_Range* __fastcall
TCOM_RangeT<T>::get_End(Owc10_xp::XlDirection Direction/*[in]*/)
{
  Owc10_xp::_Range* Range;
  OLECHECK(this->get_End(, (Owc10_xp::_Range**)&Range));
  return Range;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_EntireColumn(Owc10_xp::_Range** Range/*[out,retval]*/)
{
  return (*this)->get_EntireColumn(Range);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_EntireColumn(Owc10_xp::_RangePtr* Range/*[out,retval]*/)
{
  return (*this)->get_EntireColumn(_Range**)Range);
}

template <class T> Owc10_xp::_RangePtr __fastcall
TCOM_RangeT<T>::get_EntireColumn(void)
{
  Owc10_xp::_Range* Range;
  OLECHECK(this->get_EntireColumn((Owc10_xp::_Range**)&Range));
  return (Owc10_xp::_RangePtr)Range;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_EntireRow(Owc10_xp::_Range** Range/*[out,retval]*/)
{
  return (*this)->get_EntireRow(Range);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_EntireRow(Owc10_xp::_RangePtr* Range/*[out,retval]*/)
{
  return (*this)->get_EntireRow(_Range**)Range);
}

template <class T> Owc10_xp::_RangePtr __fastcall
TCOM_RangeT<T>::get_EntireRow(void)
{
  Owc10_xp::_Range* Range;
  OLECHECK(this->get_EntireRow((Owc10_xp::_Range**)&Range));
  return (Owc10_xp::_RangePtr)Range;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_Font(Owc10_xp::Font** Font/*[out,retval]*/)
{
  return (*this)->get_Font(Font);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_Font(Owc10_xp::FontPtr* Font/*[out,retval]*/)
{
  return (*this)->get_Font(Font**)Font);
}

template <class T> Owc10_xp::FontPtr __fastcall
TCOM_RangeT<T>::get_Font(void)
{
  Owc10_xp::Font* Font;
  OLECHECK(this->get_Font((Owc10_xp::Font**)&Font));
  return (Owc10_xp::FontPtr)Font;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_Formula(VARIANT* Formula/*[out,retval]*/)
{
  return (*this)->get_Formula(Formula);
}

template <class T> VARIANT __fastcall
TCOM_RangeT<T>::get_Formula(void)
{
  VARIANT Formula;
  OLECHECK(this->get_Formula((VARIANT*)&Formula));
  return Formula;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::set_Formula(VARIANT Formula/*[in]*/)
{
  return (*this)->set_Formula(Formula);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_FormulaArray(VARIANT* FormulaArray/*[out,retval]*/)
{
  return (*this)->get_FormulaArray(FormulaArray);
}

template <class T> VARIANT __fastcall
TCOM_RangeT<T>::get_FormulaArray(void)
{
  VARIANT FormulaArray;
  OLECHECK(this->get_FormulaArray((VARIANT*)&FormulaArray));
  return FormulaArray;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::set_FormulaArray(VARIANT FormulaArray/*[in]*/)
{
  return (*this)->set_FormulaArray(FormulaArray);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_FormulaLocal(VARIANT* Formula/*[out,retval]*/)
{
  return (*this)->get_FormulaLocal(Formula);
}

template <class T> VARIANT __fastcall
TCOM_RangeT<T>::get_FormulaLocal(void)
{
  VARIANT Formula;
  OLECHECK(this->get_FormulaLocal((VARIANT*)&Formula));
  return Formula;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::set_FormulaLocal(VARIANT Formula/*[in]*/)
{
  return (*this)->set_FormulaLocal(Formula);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_HasArray(VARIANT* HasArray/*[out,retval]*/)
{
  return (*this)->get_HasArray(HasArray);
}

template <class T> VARIANT __fastcall
TCOM_RangeT<T>::get_HasArray(void)
{
  VARIANT HasArray;
  OLECHECK(this->get_HasArray((VARIANT*)&HasArray));
  return HasArray;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_HasFormula(VARIANT* HasFormula/*[out,retval]*/)
{
  return (*this)->get_HasFormula(HasFormula);
}

template <class T> VARIANT __fastcall
TCOM_RangeT<T>::get_HasFormula(void)
{
  VARIANT HasFormula;
  OLECHECK(this->get_HasFormula((VARIANT*)&HasFormula));
  return HasFormula;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_Height(VARIANT* Height/*[out,retval]*/)
{
  return (*this)->get_Height(Height);
}

template <class T> VARIANT __fastcall
TCOM_RangeT<T>::get_Height(void)
{
  VARIANT Height;
  OLECHECK(this->get_Height((VARIANT*)&Height));
  return Height;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_Hidden(VARIANT_BOOL* Hidden/*[out,retval]*/)
{
  return (*this)->get_Hidden(Hidden);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_Hidden(TOLEBOOL* Hidden/*[out,retval]*/)
{
  return (*this)->get_Hidden(VARIANT_BOOL*)Hidden);
}

template <class T> TOLEBOOL __fastcall
TCOM_RangeT<T>::get_Hidden(void)
{
  VARIANT_BOOL Hidden;
  OLECHECK(this->get_Hidden((VARIANT_BOOL*)&Hidden));
  return (TOLEBOOL)Hidden;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::set_Hidden(VARIANT_BOOL Hidden/*[in]*/)
{
  return (*this)->set_Hidden(Hidden);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::set_Hidden(TOLEBOOL Hidden/*[in]*/)
{
  return (*this)->set_Hidden(VARIANT_BOOL)Hidden);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_HorizontalAlignment(VARIANT* HAlign/*[out,retval]*/)
{
  return (*this)->get_HorizontalAlignment(HAlign);
}

template <class T> VARIANT __fastcall
TCOM_RangeT<T>::get_HorizontalAlignment(void)
{
  VARIANT HAlign;
  OLECHECK(this->get_HorizontalAlignment((VARIANT*)&HAlign));
  return HAlign;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::set_HorizontalAlignment(Owc10_xp::XlHAlign HAlign/*[in]*/)
{
  return (*this)->set_HorizontalAlignment(HAlign);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_HTMLData(BSTR* HTMLData/*[out,retval]*/)
{
  return (*this)->get_HTMLData(HTMLData);
}

template <class T> BSTR __fastcall
TCOM_RangeT<T>::get_HTMLData(void)
{
  BSTR HTMLData = 0;
  OLECHECK(this->get_HTMLData((BSTR*)&HTMLData));
  return HTMLData;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_Hyperlink(Owc10_xp::Hyperlink** Hyperlink/*[out,retval]*/)
{
  return (*this)->get_Hyperlink(Hyperlink);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_Hyperlink(Owc10_xp::HyperlinkPtr* Hyperlink/*[out,retval]*/)
{
  return (*this)->get_Hyperlink(Hyperlink**)Hyperlink);
}

template <class T> Owc10_xp::HyperlinkPtr __fastcall
TCOM_RangeT<T>::get_Hyperlink(void)
{
  Owc10_xp::Hyperlink* Hyperlink;
  OLECHECK(this->get_Hyperlink((Owc10_xp::Hyperlink**)&Hyperlink));
  return (Owc10_xp::HyperlinkPtr)Hyperlink;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_Interior(Owc10_xp::Interior** Interior/*[out,retval]*/)
{
  return (*this)->get_Interior(Interior);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_Interior(Owc10_xp::InteriorPtr* Interior/*[out,retval]*/)
{
  return (*this)->get_Interior(Interior**)Interior);
}

template <class T> Owc10_xp::InteriorPtr __fastcall
TCOM_RangeT<T>::get_Interior(void)
{
  Owc10_xp::Interior* Interior;
  OLECHECK(this->get_Interior((Owc10_xp::Interior**)&Interior));
  return (Owc10_xp::InteriorPtr)Interior;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_Item(VARIANT RowIndex/*[in]*/, VARIANT ColumnIndex/*[in,opt]*/, 
                         Owc10_xp::_Range** Range/*[out,retval]*/)
{
  return (*this)->get_Item(RowIndex, ColumnIndex, Range);
}

template <class T> Owc10_xp::_Range* __fastcall
TCOM_RangeT<T>::get_Item(VARIANT RowIndex/*[in]*/, VARIANT ColumnIndex/*[in,opt]*/)
{
  Owc10_xp::_Range* Range;
  OLECHECK(this->get_Item(, (Owc10_xp::_Range**)&Range));
  return Range;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_Left(VARIANT* Left/*[out,retval]*/)
{
  return (*this)->get_Left(Left);
}

template <class T> VARIANT __fastcall
TCOM_RangeT<T>::get_Left(void)
{
  VARIANT Left;
  OLECHECK(this->get_Left((VARIANT*)&Left));
  return Left;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_Locked(VARIANT* Locked/*[out,retval]*/)
{
  return (*this)->get_Locked(Locked);
}

template <class T> VARIANT __fastcall
TCOM_RangeT<T>::get_Locked(void)
{
  VARIANT Locked;
  OLECHECK(this->get_Locked((VARIANT*)&Locked));
  return Locked;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::set_Locked(VARIANT_BOOL Locked/*[in]*/)
{
  return (*this)->set_Locked(Locked);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::set_Locked(TOLEBOOL Locked/*[in]*/)
{
  return (*this)->set_Locked(VARIANT_BOOL)Locked);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_MergeArea(Owc10_xp::_Range** Range/*[out,retval]*/)
{
  return (*this)->get_MergeArea(Range);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_MergeArea(Owc10_xp::_RangePtr* Range/*[out,retval]*/)
{
  return (*this)->get_MergeArea(_Range**)Range);
}

template <class T> Owc10_xp::_RangePtr __fastcall
TCOM_RangeT<T>::get_MergeArea(void)
{
  Owc10_xp::_Range* Range;
  OLECHECK(this->get_MergeArea((Owc10_xp::_Range**)&Range));
  return (Owc10_xp::_RangePtr)Range;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_MergeCells(VARIANT* MergeCells/*[out,retval]*/)
{
  return (*this)->get_MergeCells(MergeCells);
}

template <class T> VARIANT __fastcall
TCOM_RangeT<T>::get_MergeCells(void)
{
  VARIANT MergeCells;
  OLECHECK(this->get_MergeCells((VARIANT*)&MergeCells));
  return MergeCells;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::set_MergeCells(VARIANT_BOOL MergeCells/*[in]*/)
{
  return (*this)->set_MergeCells(MergeCells);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::set_MergeCells(TOLEBOOL MergeCells/*[in]*/)
{
  return (*this)->set_MergeCells(VARIANT_BOOL)MergeCells);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_Name(Owc10_xp::Name** Name/*[out,retval]*/)
{
  return (*this)->get_Name(Name);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_Name(Owc10_xp::NamePtr* Name/*[out,retval]*/)
{
  return (*this)->get_Name(Name**)Name);
}

template <class T> Owc10_xp::NamePtr __fastcall
TCOM_RangeT<T>::get_Name(void)
{
  Owc10_xp::Name* Name;
  OLECHECK(this->get_Name((Owc10_xp::Name**)&Name));
  return (Owc10_xp::NamePtr)Name;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::set_Name(BSTR Name/*[in]*/)
{
  return (*this)->set_Name(Name);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_Next(Owc10_xp::_Range** Range/*[out,retval]*/)
{
  return (*this)->get_Next(Range);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_Next(Owc10_xp::_RangePtr* Range/*[out,retval]*/)
{
  return (*this)->get_Next(_Range**)Range);
}

template <class T> Owc10_xp::_RangePtr __fastcall
TCOM_RangeT<T>::get_Next(void)
{
  Owc10_xp::_Range* Range;
  OLECHECK(this->get_Next((Owc10_xp::_Range**)&Range));
  return (Owc10_xp::_RangePtr)Range;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_NumberFormat(VARIANT* NumberFormat/*[out,retval]*/)
{
  return (*this)->get_NumberFormat(NumberFormat);
}

template <class T> VARIANT __fastcall
TCOM_RangeT<T>::get_NumberFormat(void)
{
  VARIANT NumberFormat;
  OLECHECK(this->get_NumberFormat((VARIANT*)&NumberFormat));
  return NumberFormat;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::set_NumberFormat(BSTR NumberFormat/*[in]*/)
{
  return (*this)->set_NumberFormat(NumberFormat);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_Offset(VARIANT RowOffset/*[in,opt]*/, VARIANT ColumnOffset/*[in,opt]*/, 
                           Owc10_xp::_Range** Range/*[out,retval]*/)
{
  return (*this)->get_Offset(RowOffset, ColumnOffset, Range);
}

template <class T> Owc10_xp::_Range* __fastcall
TCOM_RangeT<T>::get_Offset(VARIANT RowOffset/*[in,opt]*/, VARIANT ColumnOffset/*[in,opt]*/)
{
  Owc10_xp::_Range* Range;
  OLECHECK(this->get_Offset(, (Owc10_xp::_Range**)&Range));
  return Range;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_Parent(Owc10_xp::Worksheet** Sheet/*[out,retval]*/)
{
  return (*this)->get_Parent(Sheet);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_Parent(Owc10_xp::WorksheetPtr* Sheet/*[out,retval]*/)
{
  return (*this)->get_Parent(Worksheet**)Sheet);
}

template <class T> Owc10_xp::WorksheetPtr __fastcall
TCOM_RangeT<T>::get_Parent(void)
{
  Owc10_xp::Worksheet* Sheet;
  OLECHECK(this->get_Parent((Owc10_xp::Worksheet**)&Sheet));
  return (Owc10_xp::WorksheetPtr)Sheet;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_PrefixCharacter(VARIANT* str/*[out,retval]*/)
{
  return (*this)->get_PrefixCharacter(str);
}

template <class T> VARIANT __fastcall
TCOM_RangeT<T>::get_PrefixCharacter(void)
{
  VARIANT str;
  OLECHECK(this->get_PrefixCharacter((VARIANT*)&str));
  return str;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_Previous(Owc10_xp::_Range** Range/*[out,retval]*/)
{
  return (*this)->get_Previous(Range);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_Previous(Owc10_xp::_RangePtr* Range/*[out,retval]*/)
{
  return (*this)->get_Previous(_Range**)Range);
}

template <class T> Owc10_xp::_RangePtr __fastcall
TCOM_RangeT<T>::get_Previous(void)
{
  Owc10_xp::_Range* Range;
  OLECHECK(this->get_Previous((Owc10_xp::_Range**)&Range));
  return (Owc10_xp::_RangePtr)Range;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_Range(VARIANT Cell1/*[in]*/, VARIANT Cell2/*[in,opt]*/, 
                          Owc10_xp::_Range** Range/*[out,retval]*/)
{
  return (*this)->get_Range(Cell1, Cell2, Range);
}

template <class T> Owc10_xp::_Range* __fastcall
TCOM_RangeT<T>::get_Range(VARIANT Cell1/*[in]*/, VARIANT Cell2/*[in,opt]*/)
{
  Owc10_xp::_Range* Range;
  OLECHECK(this->get_Range(, (Owc10_xp::_Range**)&Range));
  return Range;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_ReadingOrder(VARIANT* ReadingOrder/*[out,retval]*/)
{
  return (*this)->get_ReadingOrder(ReadingOrder);
}

template <class T> VARIANT __fastcall
TCOM_RangeT<T>::get_ReadingOrder(void)
{
  VARIANT ReadingOrder;
  OLECHECK(this->get_ReadingOrder((VARIANT*)&ReadingOrder));
  return ReadingOrder;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::set_ReadingOrder(Owc10_xp::XlReadingOrder ReadingOrder/*[in]*/)
{
  return (*this)->set_ReadingOrder(ReadingOrder);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_Row(long* Row/*[out,retval]*/)
{
  return (*this)->get_Row(Row);
}

template <class T> long __fastcall
TCOM_RangeT<T>::get_Row(void)
{
  long Row;
  OLECHECK(this->get_Row((long*)&Row));
  return Row;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_RowHeight(VARIANT* RowHeight/*[out,retval]*/)
{
  return (*this)->get_RowHeight(RowHeight);
}

template <class T> VARIANT __fastcall
TCOM_RangeT<T>::get_RowHeight(void)
{
  VARIANT RowHeight;
  OLECHECK(this->get_RowHeight((VARIANT*)&RowHeight));
  return RowHeight;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::set_RowHeight(double RowHeight/*[in]*/)
{
  return (*this)->set_RowHeight(RowHeight);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_Rows(Owc10_xp::_Range** Range/*[out,retval]*/)
{
  return (*this)->get_Rows(Range);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_Rows(Owc10_xp::_RangePtr* Range/*[out,retval]*/)
{
  return (*this)->get_Rows(_Range**)Range);
}

template <class T> Owc10_xp::_RangePtr __fastcall
TCOM_RangeT<T>::get_Rows(void)
{
  Owc10_xp::_Range* Range;
  OLECHECK(this->get_Rows((Owc10_xp::_Range**)&Range));
  return (Owc10_xp::_RangePtr)Range;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_Text(VARIANT* Text/*[out,retval]*/)
{
  return (*this)->get_Text(Text);
}

template <class T> VARIANT __fastcall
TCOM_RangeT<T>::get_Text(void)
{
  VARIANT Text;
  OLECHECK(this->get_Text((VARIANT*)&Text));
  return Text;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_Top(VARIANT* Top/*[out,retval]*/)
{
  return (*this)->get_Top(Top);
}

template <class T> VARIANT __fastcall
TCOM_RangeT<T>::get_Top(void)
{
  VARIANT Top;
  OLECHECK(this->get_Top((VARIANT*)&Top));
  return Top;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_UseStandardHeight(VARIANT* pbool/*[out,retval]*/)
{
  return (*this)->get_UseStandardHeight(pbool);
}

template <class T> VARIANT __fastcall
TCOM_RangeT<T>::get_UseStandardHeight(void)
{
  VARIANT pbool;
  OLECHECK(this->get_UseStandardHeight((VARIANT*)&pbool));
  return pbool;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::set_UseStandardHeight(VARIANT_BOOL pbool/*[in]*/)
{
  return (*this)->set_UseStandardHeight(pbool);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::set_UseStandardHeight(TOLEBOOL pbool/*[in]*/)
{
  return (*this)->set_UseStandardHeight(VARIANT_BOOL)pbool);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_UseStandardWidth(VARIANT* pbool/*[out,retval]*/)
{
  return (*this)->get_UseStandardWidth(pbool);
}

template <class T> VARIANT __fastcall
TCOM_RangeT<T>::get_UseStandardWidth(void)
{
  VARIANT pbool;
  OLECHECK(this->get_UseStandardWidth((VARIANT*)&pbool));
  return pbool;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::set_UseStandardWidth(VARIANT_BOOL pbool/*[in]*/)
{
  return (*this)->set_UseStandardWidth(pbool);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::set_UseStandardWidth(TOLEBOOL pbool/*[in]*/)
{
  return (*this)->set_UseStandardWidth(VARIANT_BOOL)pbool);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_Value(VARIANT RangeValueDataType/*[in,opt]*/, VARIANT* Value/*[out,retval]*/)
{
  return (*this)->get_Value(RangeValueDataType, Value);
}

template <class T> VARIANT __fastcall
TCOM_RangeT<T>::get_Value(VARIANT RangeValueDataType/*[in,opt]*/)
{
  VARIANT Value;
  OLECHECK(this->get_Value(, (VARIANT*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::set_Value(VARIANT RangeValueDataType/*[in,opt]*/, VARIANT Value/*[in]*/)
{
  return (*this)->set_Value(RangeValueDataType, Value);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_Value2(VARIANT* Value/*[out,retval]*/)
{
  return (*this)->get_Value2(Value);
}

template <class T> VARIANT __fastcall
TCOM_RangeT<T>::get_Value2(void)
{
  VARIANT Value;
  OLECHECK(this->get_Value2((VARIANT*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::set_Value2(VARIANT Value/*[in]*/)
{
  return (*this)->set_Value2(Value);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_VerticalAlignment(VARIANT* VAlignment/*[out,retval]*/)
{
  return (*this)->get_VerticalAlignment(VAlignment);
}

template <class T> VARIANT __fastcall
TCOM_RangeT<T>::get_VerticalAlignment(void)
{
  VARIANT VAlignment;
  OLECHECK(this->get_VerticalAlignment((VARIANT*)&VAlignment));
  return VAlignment;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::set_VerticalAlignment(Owc10_xp::XlVAlign VAlignment/*[in]*/)
{
  return (*this)->set_VerticalAlignment(VAlignment);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_Width(VARIANT* Width/*[out,retval]*/)
{
  return (*this)->get_Width(Width);
}

template <class T> VARIANT __fastcall
TCOM_RangeT<T>::get_Width(void)
{
  VARIANT Width;
  OLECHECK(this->get_Width((VARIANT*)&Width));
  return Width;
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_Worksheet(Owc10_xp::Worksheet** Sheet/*[out,retval]*/)
{
  return (*this)->get_Worksheet(Sheet);
}

template <class T> HRESULT __fastcall
TCOM_RangeT<T>::get_Worksheet(Owc10_xp::WorksheetPtr* Sheet/*[out,retval]*/)
{
  return (*this)->get_Worksheet(Worksheet**)Sheet);
}

template <class T> Owc10_xp::WorksheetPtr __fastcall
TCOM_RangeT<T>::get_Worksheet(void)
{
  Owc10_xp::Worksheet* Sheet;
  OLECHECK(this->get_Worksheet((Owc10_xp::Worksheet**)&Sheet));
  return (Owc10_xp::WorksheetPtr)Sheet;
}

// *********************************************************************//
// DispIntf:  _Range
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B05-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::Activate()
{
  _TDispID _dispid(*this, OLETEXT("Activate"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::AutoFilter(VARIANT* Field/*[in,opt]*/, VARIANT* Criteria1/*[in,opt]*/, 
                           VARIANT* Operator/*[in,opt]*/, VARIANT* Criteria2/*[in,opt]*/, 
                           VARIANT* VisibleDropDown/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoFilter"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<5> _args;
  _args[1] = Field /*[VT_VARIANT:1]*/;
  _args[2] = Criteria1 /*[VT_VARIANT:1]*/;
  _args[3] = Operator /*[VT_VARIANT:1]*/;
  _args[4] = Criteria2 /*[VT_VARIANT:1]*/;
  _args[5] = VisibleDropDown /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::AutoFit()
{
  _TDispID _dispid(*this, OLETEXT("AutoFit"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::BorderAround(VARIANT LineStyle/*[in,opt]*/, 
                             Owc10_xp::XlBorderWeight Weight/*[in,def,opt]*/, 
                             Owc10_xp::XlColorIndex ColorIndex/*[in,def,opt]*/, 
                             VARIANT Color/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderAround"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<4> _args;
  _args[1] = LineStyle /*[VT_VARIANT:0]*/;
  _args[2] = (int)Weight /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)ColorIndex /*[VT_USERDEFINED:0]*/;
  _args[4] = Color /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::Calculate()
{
  _TDispID _dispid(*this, OLETEXT("Calculate"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::Clear()
{
  _TDispID _dispid(*this, OLETEXT("Clear"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::ClearFormats()
{
  _TDispID _dispid(*this, OLETEXT("ClearFormats"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::ClearContents()
{
  _TDispID _dispid(*this, OLETEXT("ClearContents"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::Copy(VARIANT Destination/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Copy"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<1> _args;
  _args[1] = Destination /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::CopyFromRecordset(LPUNKNOWN Data/*[in]*/, VARIANT MaxRows/*[in,opt]*/, 
                                  VARIANT MaxColumns/*[in,opt]*/, 
                                  int* pcrowRetrieved/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CopyFromRecordset"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  TAutoArgs<3> _args;
  _args[1] = Data /*[VT_UNKNOWN:0]*/;
  _args[2] = MaxRows /*[VT_VARIANT:0]*/;
  _args[3] = MaxColumns /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pcrowRetrieved /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
_RangeDispT<T>::CopyFromRecordset(LPUNKNOWN Data/*[in]*/, VARIANT MaxRows/*[in,opt]*/, 
                                  VARIANT MaxColumns/*[in,opt]*/)
{
  int pcrowRetrieved;
  this->CopyFromRecordset(Data, MaxRows, MaxColumns, (int*)&pcrowRetrieved);
  return pcrowRetrieved;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::Cut(VARIANT Destination/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Cut"), DISPID(DISPID_UNKNOWN/*[1610743818]*/));
  TAutoArgs<1> _args;
  _args[1] = Destination /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::Delete(VARIANT* Shift/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(DISPID_UNKNOWN/*[1610743819]*/));
  TAutoArgs<1> _args;
  _args[1] = Shift /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::FillDown()
{
  _TDispID _dispid(*this, OLETEXT("FillDown"), DISPID(DISPID_UNKNOWN/*[1610743820]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::FillRight()
{
  _TDispID _dispid(*this, OLETEXT("FillRight"), DISPID(DISPID_UNKNOWN/*[1610743821]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::Find(VARIANT What/*[in]*/, VARIANT* After/*[in,opt]*/, VARIANT* LookIn/*[in,opt]*/, 
                     VARIANT* LookAt/*[in,opt]*/, VARIANT* SearchOrder/*[in,opt]*/, 
                     Owc10_xp::XlSearchDirection SearchDirection/*[in,def,opt]*/, 
                     VARIANT* MatchCase/*[in,opt]*/, VARIANT* MatchByte/*[in,opt]*/, 
                     Owc10_xp::_Range** Range/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Find"), DISPID(1702));
  TAutoArgs<8> _args;
  _args[1] = What /*[VT_VARIANT:0]*/;
  _args[2] = After /*[VT_VARIANT:1]*/;
  _args[3] = LookIn /*[VT_VARIANT:1]*/;
  _args[4] = LookAt /*[VT_VARIANT:1]*/;
  _args[5] = SearchOrder /*[VT_VARIANT:1]*/;
  _args[6] = (int)SearchDirection /*[VT_USERDEFINED:0]*/;
  _args[7] = MatchCase /*[VT_VARIANT:1]*/;
  _args[8] = MatchByte /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::_Range**)Range /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::_Range* __fastcall
_RangeDispT<T>::Find(VARIANT What/*[in]*/, VARIANT* After/*[in,opt]*/, VARIANT* LookIn/*[in,opt]*/, 
                     VARIANT* LookAt/*[in,opt]*/, VARIANT* SearchOrder/*[in,opt]*/, 
                     Owc10_xp::XlSearchDirection SearchDirection/*[in,def,opt]*/, 
                     VARIANT* MatchCase/*[in,opt]*/, VARIANT* MatchByte/*[in,opt]*/)
{
  Owc10_xp::_Range* Range;
  this->Find(What, After, LookIn, LookAt, SearchOrder, SearchDirection, MatchCase, MatchByte, (Owc10_xp::_Range**)&Range);
  return Range;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::FindNext(VARIANT* After/*[in,opt]*/, Owc10_xp::_Range** Range/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FindNext"), DISPID(DISPID_UNKNOWN/*[1610743823]*/));
  TAutoArgs<1> _args;
  _args[1] = After /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::_Range**)Range /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::_Range* __fastcall
_RangeDispT<T>::FindNext(VARIANT* After/*[in,opt]*/)
{
  Owc10_xp::_Range* Range;
  this->FindNext(After, (Owc10_xp::_Range**)&Range);
  return Range;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::FindPrevious(VARIANT* After/*[in,opt]*/, Owc10_xp::_Range** Range/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FindPrevious"), DISPID(DISPID_UNKNOWN/*[1610743824]*/));
  TAutoArgs<1> _args;
  _args[1] = After /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::_Range**)Range /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::_Range* __fastcall
_RangeDispT<T>::FindPrevious(VARIANT* After/*[in,opt]*/)
{
  Owc10_xp::_Range* Range;
  this->FindPrevious(After, (Owc10_xp::_Range**)&Range);
  return Range;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::Insert(VARIANT* Shift/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Insert"), DISPID(DISPID_UNKNOWN/*[1610743825]*/));
  TAutoArgs<1> _args;
  _args[1] = Shift /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::LoadText(BSTR File/*[in]*/, BSTR Delimiters/*[in,def,opt]*/, 
                         VARIANT_BOOL ConsecutiveDelimAsOne/*[in,def,opt]*/, 
                         BSTR TextQualifier/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("LoadText"), DISPID(DISPID_UNKNOWN/*[1610743826]*/));
  TAutoArgs<4> _args;
  _args[1] = File /*[VT_BSTR:0]*/;
  _args[2] = Delimiters /*[VT_BSTR:0]*/;
  _args[3] = ConsecutiveDelimAsOne /*[VT_BOOL:0]*/;
  _args[4] = TextQualifier /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::Merge(VARIANT* Across/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Merge"), DISPID(1700));
  TAutoArgs<1> _args;
  _args[1] = Across /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::ParseText(BSTR Text/*[in]*/, BSTR Delimiters/*[in,def,opt]*/, 
                          VARIANT_BOOL ConsecutiveDelimAsOne/*[in,def,opt]*/, 
                          BSTR TextQualifier/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("ParseText"), DISPID(DISPID_UNKNOWN/*[1610743828]*/));
  TAutoArgs<4> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  _args[2] = Delimiters /*[VT_BSTR:0]*/;
  _args[3] = ConsecutiveDelimAsOne /*[VT_BOOL:0]*/;
  _args[4] = TextQualifier /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::Paste()
{
  _TDispID _dispid(*this, OLETEXT("Paste"), DISPID(DISPID_UNKNOWN/*[1610743829]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::Select()
{
  _TDispID _dispid(*this, OLETEXT("Select"), DISPID(DISPID_UNKNOWN/*[1610743830]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::Show()
{
  _TDispID _dispid(*this, OLETEXT("Show"), DISPID(DISPID_UNKNOWN/*[1610743831]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::Sort(int ColumnKey/*[in,def,opt]*/, Owc10_xp::XlSortOrder Order/*[in,def,opt]*/, 
                     Owc10_xp::XlYesNoGuess Header/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Sort"), DISPID(DISPID_UNKNOWN/*[1610743832]*/));
  TAutoArgs<3> _args;
  _args[1] = ColumnKey /*[VT_INT:0]*/;
  _args[2] = (int)Order /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)Header /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::UnMerge()
{
  _TDispID _dispid(*this, OLETEXT("UnMerge"), DISPID(1701));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
_RangeDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunk;
  this->get__NewEnum((LPUNKNOWN*)&ppunk);
  return ppunk;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get__Default(VARIANT Row/*[in,opt]*/, VARIANT Column/*[in,opt]*/, 
                             VARIANT* var/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Default"), DISPID(0));
  TAutoArgs<2> _args;
  _args[1] = Row /*[VT_VARIANT:0]*/;
  _args[2] = Column /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(var /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
_RangeDispT<T>::get__Default(VARIANT Row/*[in,opt]*/, VARIANT Column/*[in,opt]*/)
{
  VARIANT var;
  this->get__Default(Row, Column, (VARIANT*)&var);
  return var;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::set__Default(VARIANT Row/*[in,opt]*/, VARIANT Column/*[in,opt]*/, 
                             VARIANT var/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Default"), DISPID(0));
  TAutoArgs<3> _args;
  _args[1] = Row /*[VT_VARIANT:0]*/;
  _args[2] = Column /*[VT_VARIANT:0]*/;
  _args[3] = var /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_Address(VARIANT* RowAbsolute/*[in,opt]*/, VARIANT* ColumnAbsolute/*[in,opt]*/, 
                            Owc10_xp::XlReferenceStyle ReferenceStyle/*[in,def,opt]*/, 
                            VARIANT* External/*[in,opt]*/, VARIANT* RelativeTo/*[in,opt]*/, 
                            BSTR* Address/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Address"), DISPID(DISPID_UNKNOWN/*[1610743837]*/));
  TAutoArgs<5> _args;
  _args[1] = RowAbsolute /*[VT_VARIANT:1]*/;
  _args[2] = ColumnAbsolute /*[VT_VARIANT:1]*/;
  _args[3] = (int)ReferenceStyle /*[VT_USERDEFINED:0]*/;
  _args[4] = External /*[VT_VARIANT:1]*/;
  _args[5] = RelativeTo /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr(Address /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_RangeDispT<T>::get_Address(VARIANT* RowAbsolute/*[in,opt]*/, VARIANT* ColumnAbsolute/*[in,opt]*/, 
                            Owc10_xp::XlReferenceStyle ReferenceStyle/*[in,def,opt]*/, 
                            VARIANT* External/*[in,opt]*/, VARIANT* RelativeTo/*[in,opt]*/)
{
  BSTR Address;
  this->get_Address(RowAbsolute, ColumnAbsolute, ReferenceStyle, External, RelativeTo, (BSTR*)&Address);
  return Address;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_Application(Owc10_xp::ISpreadsheet** ppApp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743838]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ISpreadsheet**)ppApp /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ISpreadsheet* __fastcall
_RangeDispT<T>::get_Application(void)
{
  Owc10_xp::ISpreadsheet* ppApp;
  this->get_Application((Owc10_xp::ISpreadsheet**)&ppApp);
  return ppApp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_Borders(Owc10_xp::Borders** Borders/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Borders"), DISPID(DISPID_UNKNOWN/*[1610743839]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Borders**)Borders /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Borders* __fastcall
_RangeDispT<T>::get_Borders(void)
{
  Owc10_xp::Borders* Borders;
  this->get_Borders((Owc10_xp::Borders**)&Borders);
  return Borders;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_Cells(Owc10_xp::_Range** Range/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Cells"), DISPID(DISPID_UNKNOWN/*[1610743840]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::_Range**)Range /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::_Range* __fastcall
_RangeDispT<T>::get_Cells(void)
{
  Owc10_xp::_Range* Range;
  this->get_Cells((Owc10_xp::_Range**)&Range);
  return Range;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_Column(long* Column/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Column"), DISPID(DISPID_UNKNOWN/*[1610743841]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Column /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_RangeDispT<T>::get_Column(void)
{
  long Column;
  this->get_Column((long*)&Column);
  return Column;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_Columns(Owc10_xp::_Range** Range/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Columns"), DISPID(DISPID_UNKNOWN/*[1610743842]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::_Range**)Range /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::_Range* __fastcall
_RangeDispT<T>::get_Columns(void)
{
  Owc10_xp::_Range* Range;
  this->get_Columns((Owc10_xp::_Range**)&Range);
  return Range;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_ColumnWidth(VARIANT* ColumnWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnWidth"), DISPID(1011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ColumnWidth /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
_RangeDispT<T>::get_ColumnWidth(void)
{
  VARIANT ColumnWidth;
  this->get_ColumnWidth((VARIANT*)&ColumnWidth);
  return ColumnWidth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::set_ColumnWidth(double ColumnWidth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnWidth"), DISPID(1011));
  TAutoArgs<1> _args;
  _args[1] = ColumnWidth /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610743845]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_RangeDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_CurrentArray(Owc10_xp::_Range** CurrentRange/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentArray"), DISPID(DISPID_UNKNOWN/*[1610743846]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::_Range**)CurrentRange /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::_Range* __fastcall
_RangeDispT<T>::get_CurrentArray(void)
{
  Owc10_xp::_Range* CurrentRange;
  this->get_CurrentArray((Owc10_xp::_Range**)&CurrentRange);
  return CurrentRange;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_CurrentRegion(Owc10_xp::_Range** CurrentRegion/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentRegion"), DISPID(DISPID_UNKNOWN/*[1610743847]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::_Range**)CurrentRegion /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::_Range* __fastcall
_RangeDispT<T>::get_CurrentRegion(void)
{
  Owc10_xp::_Range* CurrentRegion;
  this->get_CurrentRegion((Owc10_xp::_Range**)&CurrentRegion);
  return CurrentRegion;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_End(Owc10_xp::XlDirection Direction/*[in]*/, 
                        Owc10_xp::_Range** Range/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("End"), DISPID(DISPID_UNKNOWN/*[1610743848]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)Direction /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::_Range**)Range /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::_Range* __fastcall
_RangeDispT<T>::get_End(Owc10_xp::XlDirection Direction/*[in]*/)
{
  Owc10_xp::_Range* Range;
  this->get_End(Direction, (Owc10_xp::_Range**)&Range);
  return Range;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_EntireColumn(Owc10_xp::_Range** Range/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EntireColumn"), DISPID(DISPID_UNKNOWN/*[1610743849]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::_Range**)Range /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::_Range* __fastcall
_RangeDispT<T>::get_EntireColumn(void)
{
  Owc10_xp::_Range* Range;
  this->get_EntireColumn((Owc10_xp::_Range**)&Range);
  return Range;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_EntireRow(Owc10_xp::_Range** Range/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EntireRow"), DISPID(DISPID_UNKNOWN/*[1610743850]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::_Range**)Range /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::_Range* __fastcall
_RangeDispT<T>::get_EntireRow(void)
{
  Owc10_xp::_Range* Range;
  this->get_EntireRow((Owc10_xp::_Range**)&Range);
  return Range;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_Font(Owc10_xp::Font** Font/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(1030));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Font**)Font /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Font* __fastcall
_RangeDispT<T>::get_Font(void)
{
  Owc10_xp::Font* Font;
  this->get_Font((Owc10_xp::Font**)&Font);
  return Font;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_Formula(VARIANT* Formula/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Formula"), DISPID(1031));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Formula /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
_RangeDispT<T>::get_Formula(void)
{
  VARIANT Formula;
  this->get_Formula((VARIANT*)&Formula);
  return Formula;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::set_Formula(VARIANT Formula/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Formula"), DISPID(1031));
  TAutoArgs<1> _args;
  _args[1] = Formula /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_FormulaArray(VARIANT* FormulaArray/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FormulaArray"), DISPID(DISPID_UNKNOWN/*[1610743854]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FormulaArray /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
_RangeDispT<T>::get_FormulaArray(void)
{
  VARIANT FormulaArray;
  this->get_FormulaArray((VARIANT*)&FormulaArray);
  return FormulaArray;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::set_FormulaArray(VARIANT FormulaArray/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FormulaArray"), DISPID(1610743854));
  TAutoArgs<1> _args;
  _args[1] = FormulaArray /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_FormulaLocal(VARIANT* Formula/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FormulaLocal"), DISPID(DISPID_UNKNOWN/*[1610743856]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Formula /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
_RangeDispT<T>::get_FormulaLocal(void)
{
  VARIANT Formula;
  this->get_FormulaLocal((VARIANT*)&Formula);
  return Formula;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::set_FormulaLocal(VARIANT Formula/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FormulaLocal"), DISPID(1610743856));
  TAutoArgs<1> _args;
  _args[1] = Formula /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_HasArray(VARIANT* HasArray/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasArray"), DISPID(DISPID_UNKNOWN/*[1610743858]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HasArray /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
_RangeDispT<T>::get_HasArray(void)
{
  VARIANT HasArray;
  this->get_HasArray((VARIANT*)&HasArray);
  return HasArray;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_HasFormula(VARIANT* HasFormula/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasFormula"), DISPID(DISPID_UNKNOWN/*[1610743859]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HasFormula /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
_RangeDispT<T>::get_HasFormula(void)
{
  VARIANT HasFormula;
  this->get_HasFormula((VARIANT*)&HasFormula);
  return HasFormula;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_Height(VARIANT* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(DISPID_UNKNOWN/*[1610743860]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
_RangeDispT<T>::get_Height(void)
{
  VARIANT Height;
  this->get_Height((VARIANT*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_Hidden(VARIANT_BOOL* Hidden/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Hidden"), DISPID(DISPID_UNKNOWN/*[1610743861]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Hidden /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
_RangeDispT<T>::get_Hidden(void)
{
  VARIANT_BOOL Hidden;
  this->get_Hidden((VARIANT_BOOL*)&Hidden);
  return Hidden;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::set_Hidden(VARIANT_BOOL Hidden/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Hidden"), DISPID(1610743861));
  TAutoArgs<1> _args;
  _args[1] = Hidden /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_HorizontalAlignment(VARIANT* HAlign/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HorizontalAlignment"), DISPID(1032));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HAlign /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
_RangeDispT<T>::get_HorizontalAlignment(void)
{
  VARIANT HAlign;
  this->get_HorizontalAlignment((VARIANT*)&HAlign);
  return HAlign;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::set_HorizontalAlignment(Owc10_xp::XlHAlign HAlign/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HorizontalAlignment"), DISPID(1032));
  TAutoArgs<1> _args;
  _args[1] = (int)HAlign /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_HTMLData(BSTR* HTMLData/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLData"), DISPID(DISPID_UNKNOWN/*[1610743865]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HTMLData /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_RangeDispT<T>::get_HTMLData(void)
{
  BSTR HTMLData;
  this->get_HTMLData((BSTR*)&HTMLData);
  return HTMLData;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_Hyperlink(Owc10_xp::Hyperlink** Hyperlink/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Hyperlink"), DISPID(DISPID_UNKNOWN/*[1610743866]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Hyperlink**)Hyperlink /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Hyperlink* __fastcall
_RangeDispT<T>::get_Hyperlink(void)
{
  Owc10_xp::Hyperlink* Hyperlink;
  this->get_Hyperlink((Owc10_xp::Hyperlink**)&Hyperlink);
  return Hyperlink;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_Interior(Owc10_xp::Interior** Interior/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Interior"), DISPID(DISPID_UNKNOWN/*[1610743867]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Interior**)Interior /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Interior* __fastcall
_RangeDispT<T>::get_Interior(void)
{
  Owc10_xp::Interior* Interior;
  this->get_Interior((Owc10_xp::Interior**)&Interior);
  return Interior;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_Item(VARIANT RowIndex/*[in]*/, VARIANT ColumnIndex/*[in,opt]*/, 
                         Owc10_xp::_Range** Range/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(DISPID_UNKNOWN/*[1610743868]*/));
  TAutoArgs<2> _args;
  _args[1] = RowIndex /*[VT_VARIANT:0]*/;
  _args[2] = ColumnIndex /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::_Range**)Range /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::_Range* __fastcall
_RangeDispT<T>::get_Item(VARIANT RowIndex/*[in]*/, VARIANT ColumnIndex/*[in,opt]*/)
{
  Owc10_xp::_Range* Range;
  this->get_Item(RowIndex, ColumnIndex, (Owc10_xp::_Range**)&Range);
  return Range;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_Left(VARIANT* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(DISPID_UNKNOWN/*[1610743869]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
_RangeDispT<T>::get_Left(void)
{
  VARIANT Left;
  this->get_Left((VARIANT*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_Locked(VARIANT* Locked/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Locked"), DISPID(1034));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Locked /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
_RangeDispT<T>::get_Locked(void)
{
  VARIANT Locked;
  this->get_Locked((VARIANT*)&Locked);
  return Locked;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::set_Locked(VARIANT_BOOL Locked/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Locked"), DISPID(1034));
  TAutoArgs<1> _args;
  _args[1] = Locked /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_MergeArea(Owc10_xp::_Range** Range/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MergeArea"), DISPID(DISPID_UNKNOWN/*[1610743872]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::_Range**)Range /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::_Range* __fastcall
_RangeDispT<T>::get_MergeArea(void)
{
  Owc10_xp::_Range* Range;
  this->get_MergeArea((Owc10_xp::_Range**)&Range);
  return Range;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_MergeCells(VARIANT* MergeCells/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MergeCells"), DISPID(DISPID_UNKNOWN/*[1610743873]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(MergeCells /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
_RangeDispT<T>::get_MergeCells(void)
{
  VARIANT MergeCells;
  this->get_MergeCells((VARIANT*)&MergeCells);
  return MergeCells;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::set_MergeCells(VARIANT_BOOL MergeCells/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MergeCells"), DISPID(1610743873));
  TAutoArgs<1> _args;
  _args[1] = MergeCells /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_Name(Owc10_xp::Name** Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(DISPID_UNKNOWN/*[1610743875]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Name**)Name /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Name* __fastcall
_RangeDispT<T>::get_Name(void)
{
  Owc10_xp::Name* Name;
  this->get_Name((Owc10_xp::Name**)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1610743875));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_Next(Owc10_xp::_Range** Range/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Next"), DISPID(DISPID_UNKNOWN/*[1610743877]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::_Range**)Range /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::_Range* __fastcall
_RangeDispT<T>::get_Next(void)
{
  Owc10_xp::_Range* Range;
  this->get_Next((Owc10_xp::_Range**)&Range);
  return Range;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_NumberFormat(VARIANT* NumberFormat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumberFormat"), DISPID(1041));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(NumberFormat /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
_RangeDispT<T>::get_NumberFormat(void)
{
  VARIANT NumberFormat;
  this->get_NumberFormat((VARIANT*)&NumberFormat);
  return NumberFormat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::set_NumberFormat(BSTR NumberFormat/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumberFormat"), DISPID(1041));
  TAutoArgs<1> _args;
  _args[1] = NumberFormat /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_Offset(VARIANT RowOffset/*[in,opt]*/, VARIANT ColumnOffset/*[in,opt]*/, 
                           Owc10_xp::_Range** Range/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Offset"), DISPID(DISPID_UNKNOWN/*[1610743880]*/));
  TAutoArgs<2> _args;
  _args[1] = RowOffset /*[VT_VARIANT:0]*/;
  _args[2] = ColumnOffset /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::_Range**)Range /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::_Range* __fastcall
_RangeDispT<T>::get_Offset(VARIANT RowOffset/*[in,opt]*/, VARIANT ColumnOffset/*[in,opt]*/)
{
  Owc10_xp::_Range* Range;
  this->get_Offset(RowOffset, ColumnOffset, (Owc10_xp::_Range**)&Range);
  return Range;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_Parent(Owc10_xp::Worksheet** Sheet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743881]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Worksheet**)Sheet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Worksheet* __fastcall
_RangeDispT<T>::get_Parent(void)
{
  Owc10_xp::Worksheet* Sheet;
  this->get_Parent((Owc10_xp::Worksheet**)&Sheet);
  return Sheet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_PrefixCharacter(VARIANT* str/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrefixCharacter"), DISPID(DISPID_UNKNOWN/*[1610743882]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(str /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
_RangeDispT<T>::get_PrefixCharacter(void)
{
  VARIANT str;
  this->get_PrefixCharacter((VARIANT*)&str);
  return str;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_Previous(Owc10_xp::_Range** Range/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Previous"), DISPID(DISPID_UNKNOWN/*[1610743883]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::_Range**)Range /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::_Range* __fastcall
_RangeDispT<T>::get_Previous(void)
{
  Owc10_xp::_Range* Range;
  this->get_Previous((Owc10_xp::_Range**)&Range);
  return Range;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_Range(VARIANT Cell1/*[in]*/, VARIANT Cell2/*[in,opt]*/, 
                          Owc10_xp::_Range** Range/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Range"), DISPID(DISPID_UNKNOWN/*[1610743884]*/));
  TAutoArgs<2> _args;
  _args[1] = Cell1 /*[VT_VARIANT:0]*/;
  _args[2] = Cell2 /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::_Range**)Range /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::_Range* __fastcall
_RangeDispT<T>::get_Range(VARIANT Cell1/*[in]*/, VARIANT Cell2/*[in,opt]*/)
{
  Owc10_xp::_Range* Range;
  this->get_Range(Cell1, Cell2, (Owc10_xp::_Range**)&Range);
  return Range;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_ReadingOrder(VARIANT* ReadingOrder/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReadingOrder"), DISPID(DISPID_UNKNOWN/*[1610743885]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ReadingOrder /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
_RangeDispT<T>::get_ReadingOrder(void)
{
  VARIANT ReadingOrder;
  this->get_ReadingOrder((VARIANT*)&ReadingOrder);
  return ReadingOrder;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::set_ReadingOrder(Owc10_xp::XlReadingOrder ReadingOrder/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReadingOrder"), DISPID(1610743885));
  TAutoArgs<1> _args;
  _args[1] = (int)ReadingOrder /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_Row(long* Row/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Row"), DISPID(DISPID_UNKNOWN/*[1610743887]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Row /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_RangeDispT<T>::get_Row(void)
{
  long Row;
  this->get_Row((long*)&Row);
  return Row;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_RowHeight(VARIANT* RowHeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RowHeight"), DISPID(1043));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RowHeight /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
_RangeDispT<T>::get_RowHeight(void)
{
  VARIANT RowHeight;
  this->get_RowHeight((VARIANT*)&RowHeight);
  return RowHeight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::set_RowHeight(double RowHeight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RowHeight"), DISPID(1043));
  TAutoArgs<1> _args;
  _args[1] = RowHeight /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_Rows(Owc10_xp::_Range** Range/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Rows"), DISPID(DISPID_UNKNOWN/*[1610743890]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::_Range**)Range /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::_Range* __fastcall
_RangeDispT<T>::get_Rows(void)
{
  Owc10_xp::_Range* Range;
  this->get_Rows((Owc10_xp::_Range**)&Range);
  return Range;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_Text(VARIANT* Text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(DISPID_UNKNOWN/*[1610743891]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Text /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
_RangeDispT<T>::get_Text(void)
{
  VARIANT Text;
  this->get_Text((VARIANT*)&Text);
  return Text;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_Top(VARIANT* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(DISPID_UNKNOWN/*[1610743892]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
_RangeDispT<T>::get_Top(void)
{
  VARIANT Top;
  this->get_Top((VARIANT*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_UseStandardHeight(VARIANT* pbool/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UseStandardHeight"), DISPID(DISPID_UNKNOWN/*[1610743893]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbool /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
_RangeDispT<T>::get_UseStandardHeight(void)
{
  VARIANT pbool;
  this->get_UseStandardHeight((VARIANT*)&pbool);
  return pbool;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::set_UseStandardHeight(VARIANT_BOOL pbool/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UseStandardHeight"), DISPID(1610743893));
  TAutoArgs<1> _args;
  _args[1] = pbool /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_UseStandardWidth(VARIANT* pbool/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UseStandardWidth"), DISPID(DISPID_UNKNOWN/*[1610743895]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbool /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
_RangeDispT<T>::get_UseStandardWidth(void)
{
  VARIANT pbool;
  this->get_UseStandardWidth((VARIANT*)&pbool);
  return pbool;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::set_UseStandardWidth(VARIANT_BOOL pbool/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UseStandardWidth"), DISPID(1610743895));
  TAutoArgs<1> _args;
  _args[1] = pbool /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_Value(VARIANT RangeValueDataType/*[in,opt]*/, VARIANT* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(1049));
  TAutoArgs<1> _args;
  _args[1] = RangeValueDataType /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(Value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
_RangeDispT<T>::get_Value(VARIANT RangeValueDataType/*[in,opt]*/)
{
  VARIANT Value;
  this->get_Value(RangeValueDataType, (VARIANT*)&Value);
  return Value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::set_Value(VARIANT RangeValueDataType/*[in,opt]*/, VARIANT Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(1049));
  TAutoArgs<2> _args;
  _args[1] = RangeValueDataType /*[VT_VARIANT:0]*/;
  _args[2] = Value /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_Value2(VARIANT* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value2"), DISPID(1050));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
_RangeDispT<T>::get_Value2(void)
{
  VARIANT Value;
  this->get_Value2((VARIANT*)&Value);
  return Value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::set_Value2(VARIANT Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value2"), DISPID(1050));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_VerticalAlignment(VARIANT* VAlignment/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VerticalAlignment"), DISPID(1047));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(VAlignment /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
_RangeDispT<T>::get_VerticalAlignment(void)
{
  VARIANT VAlignment;
  this->get_VerticalAlignment((VARIANT*)&VAlignment);
  return VAlignment;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::set_VerticalAlignment(Owc10_xp::XlVAlign VAlignment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("VerticalAlignment"), DISPID(1047));
  TAutoArgs<1> _args;
  _args[1] = (int)VAlignment /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_Width(VARIANT* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(DISPID_UNKNOWN/*[1610743903]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
_RangeDispT<T>::get_Width(void)
{
  VARIANT Width;
  this->get_Width((VARIANT*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RangeDispT<T>::get_Worksheet(Owc10_xp::Worksheet** Sheet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Worksheet"), DISPID(DISPID_UNKNOWN/*[1610743904]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Worksheet**)Sheet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Worksheet* __fastcall
_RangeDispT<T>::get_Worksheet(void)
{
  Owc10_xp::Worksheet* Sheet;
  this->get_Worksheet((Owc10_xp::Worksheet**)&Sheet);
  return Sheet;
}

// *********************************************************************//
// SmartIntf: TCOMISpreadsheet
// Interface: ISpreadsheet
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::AddIn(LPDISPATCH AddIn/*[in]*/)
{
  return (*this)->AddIn(AddIn);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::BeginUndo(void)
{
  return (*this)->BeginUndo();
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::Calculate(void)
{
  return (*this)->Calculate();
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::CalculateFull(void)
{
  return (*this)->CalculateFull();
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::EndUndo(VARIANT_BOOL Cancel/*[in,def,opt]*/)
{
  return (*this)->EndUndo(Cancel);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::_Evaluate(VARIANT Expression/*[in]*/, VARIANT* Result/*[out,retval]*/)
{
  return (*this)->_Evaluate(Expression, Result);
}

template <class T> VARIANT __fastcall
TCOMISpreadsheetT<T>::_Evaluate(VARIANT Expression/*[in]*/)
{
  VARIANT Result;
  OLECHECK(this->_Evaluate(, (VARIANT*)&Result));
  return Result;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::Evaluate(VARIANT Expression/*[in]*/, VARIANT* Result/*[out,retval]*/)
{
  return (*this)->Evaluate(Expression, Result);
}

template <class T> VARIANT __fastcall
TCOMISpreadsheetT<T>::Evaluate(VARIANT Expression/*[in]*/)
{
  VARIANT Result;
  OLECHECK(this->Evaluate(, (VARIANT*)&Result));
  return Result;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::Export(BSTR Filename/*[in,def,opt]*/, 
                             Owc10_xp::SheetExportActionEnum Action/*[in,def,opt]*/, 
                             Owc10_xp::SheetExportFormat Format/*[in,def,opt]*/)
{
  return (*this)->Export(Filename, Action, Format);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::LocateDataSource(void)
{
  return (*this)->LocateDataSource();
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::msDataSourceObject(BSTR bstr/*[in]*/, LPUNKNOWN* Object/*[out,retval]*/)
{
  return (*this)->msDataSourceObject(bstr, Object);
}

template <class T> LPUNKNOWN __fastcall
TCOMISpreadsheetT<T>::msDataSourceObject(BSTR bstr/*[in]*/)
{
  LPUNKNOWN Object;
  OLECHECK(this->msDataSourceObject(, (LPUNKNOWN*)&Object));
  return Object;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::RectIntersect(Owc10_xp::_Range* Range1/*[in]*/, 
                                    Owc10_xp::_Range* Range2/*[in]*/, 
                                    Owc10_xp::_Range** RangeOut/*[out,retval]*/)
{
  return (*this)->RectIntersect(Range1, Range2, RangeOut);
}

template <class T> Owc10_xp::_Range* __fastcall
TCOMISpreadsheetT<T>::RectIntersect(Owc10_xp::_Range* Range1/*[in]*/, 
                                    Owc10_xp::_Range* Range2/*[in]*/)
{
  Owc10_xp::_Range* RangeOut;
  OLECHECK(this->RectIntersect(, (Owc10_xp::_Range**)&RangeOut));
  return RangeOut;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::RectUnion(Owc10_xp::_Range* Range1/*[in]*/, Owc10_xp::_Range* Range2/*[in]*/, 
                                Owc10_xp::_Range** RangeOut/*[out,retval]*/)
{
  return (*this)->RectUnion(Range1, Range2, RangeOut);
}

template <class T> Owc10_xp::_Range* __fastcall
TCOMISpreadsheetT<T>::RectUnion(Owc10_xp::_Range* Range1/*[in]*/, Owc10_xp::_Range* Range2/*[in]*/)
{
  Owc10_xp::_Range* RangeOut;
  OLECHECK(this->RectUnion(, (Owc10_xp::_Range**)&RangeOut));
  return RangeOut;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::Refresh(void)
{
  return (*this)->Refresh();
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::Repaint(void)
{
  return (*this)->Repaint();
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::ShowAbout(void)
{
  return (*this)->ShowAbout();
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::ShowContextMenu(long x/*[in]*/, long y/*[in]*/, VARIANT Menu/*[in]*/)
{
  return (*this)->ShowContextMenu(x, y, Menu);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::ShowHelp(long Topic/*[in]*/)
{
  return (*this)->ShowHelp(Topic);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::Undo(void)
{
  return (*this)->Undo();
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::UpdatePropertyToolbox(void)
{
  return (*this)->UpdatePropertyToolbox();
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_ActiveCell(Owc10_xp::_Range** Range/*[out,retval]*/)
{
  return (*this)->get_ActiveCell(Range);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_ActiveCell(Owc10_xp::_RangePtr* Range/*[out,retval]*/)
{
  return (*this)->get_ActiveCell(_Range**)Range);
}

template <class T> Owc10_xp::_RangePtr __fastcall
TCOMISpreadsheetT<T>::get_ActiveCell(void)
{
  Owc10_xp::_Range* Range;
  OLECHECK(this->get_ActiveCell((Owc10_xp::_Range**)&Range));
  return (Owc10_xp::_RangePtr)Range;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_ActiveSheet(Owc10_xp::Worksheet** Sheet/*[out,retval]*/)
{
  return (*this)->get_ActiveSheet(Sheet);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_ActiveSheet(Owc10_xp::WorksheetPtr* Sheet/*[out,retval]*/)
{
  return (*this)->get_ActiveSheet(Worksheet**)Sheet);
}

template <class T> Owc10_xp::WorksheetPtr __fastcall
TCOMISpreadsheetT<T>::get_ActiveSheet(void)
{
  Owc10_xp::Worksheet* Sheet;
  OLECHECK(this->get_ActiveSheet((Owc10_xp::Worksheet**)&Sheet));
  return (Owc10_xp::WorksheetPtr)Sheet;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_ActiveWindow(Owc10_xp::WINDOW** Window/*[out,retval]*/)
{
  return (*this)->get_ActiveWindow(Window);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_ActiveWindow(Owc10_xp::WINDOWPtr* Window/*[out,retval]*/)
{
  return (*this)->get_ActiveWindow(WINDOW**)Window);
}

template <class T> Owc10_xp::WINDOWPtr __fastcall
TCOMISpreadsheetT<T>::get_ActiveWindow(void)
{
  Owc10_xp::WINDOW* Window;
  OLECHECK(this->get_ActiveWindow((Owc10_xp::WINDOW**)&Window));
  return (Owc10_xp::WINDOWPtr)Window;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_ActiveWorkbook(Owc10_xp::Workbook** Workbook/*[out,retval]*/)
{
  return (*this)->get_ActiveWorkbook(Workbook);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_ActiveWorkbook(Owc10_xp::WorkbookPtr* Workbook/*[out,retval]*/)
{
  return (*this)->get_ActiveWorkbook(Workbook**)Workbook);
}

template <class T> Owc10_xp::WorkbookPtr __fastcall
TCOMISpreadsheetT<T>::get_ActiveWorkbook(void)
{
  Owc10_xp::Workbook* Workbook;
  OLECHECK(this->get_ActiveWorkbook((Owc10_xp::Workbook**)&Workbook));
  return (Owc10_xp::WorkbookPtr)Workbook;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_AllowPropertyToolbox(VARIANT_BOOL* AllowPropertyToolbox/*[out,retval]*/)
{
  return (*this)->get_AllowPropertyToolbox(AllowPropertyToolbox);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_AllowPropertyToolbox(TOLEBOOL* AllowPropertyToolbox/*[out,retval]*/)
{
  return (*this)->get_AllowPropertyToolbox(VARIANT_BOOL*)AllowPropertyToolbox);
}

template <class T> TOLEBOOL __fastcall
TCOMISpreadsheetT<T>::get_AllowPropertyToolbox(void)
{
  VARIANT_BOOL AllowPropertyToolbox;
  OLECHECK(this->get_AllowPropertyToolbox((VARIANT_BOOL*)&AllowPropertyToolbox));
  return (TOLEBOOL)AllowPropertyToolbox;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_AllowPropertyToolbox(VARIANT_BOOL AllowPropertyToolbox/*[in]*/)
{
  return (*this)->set_AllowPropertyToolbox(AllowPropertyToolbox);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_AllowPropertyToolbox(TOLEBOOL AllowPropertyToolbox/*[in]*/)
{
  return (*this)->set_AllowPropertyToolbox(VARIANT_BOOL)AllowPropertyToolbox);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_Application(Owc10_xp::ISpreadsheet** ppApp/*[out,retval]*/)
{
  return (*this)->get_Application(ppApp);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_Application(Owc10_xp::ISpreadsheetPtr* ppApp/*[out,retval]*/)
{
  return (*this)->get_Application(ISpreadsheet**)ppApp);
}

template <class T> Owc10_xp::ISpreadsheetPtr __fastcall
TCOMISpreadsheetT<T>::get_Application(void)
{
  Owc10_xp::ISpreadsheet* ppApp;
  OLECHECK(this->get_Application((Owc10_xp::ISpreadsheet**)&ppApp));
  return (Owc10_xp::ISpreadsheetPtr)ppApp;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_AutoFit(VARIANT_BOOL* AutoFit/*[out,retval]*/)
{
  return (*this)->get_AutoFit(AutoFit);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_AutoFit(TOLEBOOL* AutoFit/*[out,retval]*/)
{
  return (*this)->get_AutoFit(VARIANT_BOOL*)AutoFit);
}

template <class T> TOLEBOOL __fastcall
TCOMISpreadsheetT<T>::get_AutoFit(void)
{
  VARIANT_BOOL AutoFit;
  OLECHECK(this->get_AutoFit((VARIANT_BOOL*)&AutoFit));
  return (TOLEBOOL)AutoFit;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_AutoFit(VARIANT_BOOL AutoFit/*[in]*/)
{
  return (*this)->set_AutoFit(AutoFit);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_AutoFit(TOLEBOOL AutoFit/*[in]*/)
{
  return (*this)->set_AutoFit(VARIANT_BOOL)AutoFit);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_Build(long* BuildNumber/*[out,retval]*/)
{
  return (*this)->get_Build(BuildNumber);
}

template <class T> long __fastcall
TCOMISpreadsheetT<T>::get_Build(void)
{
  long BuildNumber;
  OLECHECK(this->get_Build((long*)&BuildNumber));
  return BuildNumber;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_BuildNumber(BSTR* BuildNumber/*[out,retval]*/)
{
  return (*this)->get_BuildNumber(BuildNumber);
}

template <class T> BSTR __fastcall
TCOMISpreadsheetT<T>::get_BuildNumber(void)
{
  BSTR BuildNumber = 0;
  OLECHECK(this->get_BuildNumber((BSTR*)&BuildNumber));
  return BuildNumber;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_Calculation(Owc10_xp::XlCalculation* calc/*[out,retval]*/)
{
  return (*this)->get_Calculation(calc);
}

template <class T> Owc10_xp::XlCalculation __fastcall
TCOMISpreadsheetT<T>::get_Calculation(void)
{
  Owc10_xp::XlCalculation calc;
  OLECHECK(this->get_Calculation((Owc10_xp::XlCalculation*)&calc));
  return calc;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_Calculation(Owc10_xp::XlCalculation calc/*[in]*/)
{
  return (*this)->set_Calculation(calc);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_CalculationVersion(long* ver/*[out,retval]*/)
{
  return (*this)->get_CalculationVersion(ver);
}

template <class T> long __fastcall
TCOMISpreadsheetT<T>::get_CalculationVersion(void)
{
  long ver;
  OLECHECK(this->get_CalculationVersion((long*)&ver));
  return ver;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_CanUndo(VARIANT_BOOL* CanUndo/*[out,retval]*/)
{
  return (*this)->get_CanUndo(CanUndo);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_CanUndo(TOLEBOOL* CanUndo/*[out,retval]*/)
{
  return (*this)->get_CanUndo(VARIANT_BOOL*)CanUndo);
}

template <class T> TOLEBOOL __fastcall
TCOMISpreadsheetT<T>::get_CanUndo(void)
{
  VARIANT_BOOL CanUndo;
  OLECHECK(this->get_CanUndo((VARIANT_BOOL*)&CanUndo));
  return (TOLEBOOL)CanUndo;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_Caption(BSTR* Caption/*[out,retval]*/)
{
  return (*this)->get_Caption(Caption);
}

template <class T> BSTR __fastcall
TCOMISpreadsheetT<T>::get_Caption(void)
{
  BSTR Caption = 0;
  OLECHECK(this->get_Caption((BSTR*)&Caption));
  return Caption;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_Caption(BSTR Caption/*[in]*/)
{
  return (*this)->set_Caption(Caption);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_Cells(Owc10_xp::_Range** Range/*[out,retval]*/)
{
  return (*this)->get_Cells(Range);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_Cells(Owc10_xp::_RangePtr* Range/*[out,retval]*/)
{
  return (*this)->get_Cells(_Range**)Range);
}

template <class T> Owc10_xp::_RangePtr __fastcall
TCOMISpreadsheetT<T>::get_Cells(void)
{
  Owc10_xp::_Range* Range;
  OLECHECK(this->get_Cells((Owc10_xp::_Range**)&Range));
  return (Owc10_xp::_RangePtr)Range;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_Columns(Owc10_xp::_Range** Range/*[out,retval]*/)
{
  return (*this)->get_Columns(Range);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_Columns(Owc10_xp::_RangePtr* Range/*[out,retval]*/)
{
  return (*this)->get_Columns(_Range**)Range);
}

template <class T> Owc10_xp::_RangePtr __fastcall
TCOMISpreadsheetT<T>::get_Columns(void)
{
  Owc10_xp::_Range* Range;
  OLECHECK(this->get_Columns((Owc10_xp::_Range**)&Range));
  return (Owc10_xp::_RangePtr)Range;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_Commands(Owc10_xp::OCCommands** Commands/*[out,retval]*/)
{
  return (*this)->get_Commands(Commands);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_Commands(Owc10_xp::OCCommandsPtr* Commands/*[out,retval]*/)
{
  return (*this)->get_Commands(OCCommands**)Commands);
}

template <class T> Owc10_xp::OCCommandsPtr __fastcall
TCOMISpreadsheetT<T>::get_Commands(void)
{
  Owc10_xp::OCCommands* Commands;
  OLECHECK(this->get_Commands((Owc10_xp::OCCommands**)&Commands));
  return (Owc10_xp::OCCommandsPtr)Commands;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_Constants(LPDISPATCH* Constants/*[out,retval]*/)
{
  return (*this)->get_Constants(Constants);
}

template <class T> LPDISPATCH __fastcall
TCOMISpreadsheetT<T>::get_Constants(void)
{
  LPDISPATCH Constants;
  OLECHECK(this->get_Constants((LPDISPATCH*)&Constants));
  return Constants;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_CSVData(BSTR* Data/*[out,retval]*/)
{
  return (*this)->get_CSVData(Data);
}

template <class T> BSTR __fastcall
TCOMISpreadsheetT<T>::get_CSVData(void)
{
  BSTR Data = 0;
  OLECHECK(this->get_CSVData((BSTR*)&Data));
  return Data;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_CSVData(BSTR Data/*[in]*/)
{
  return (*this)->set_CSVData(Data);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_CSVURL(BSTR* URL/*[out,retval]*/)
{
  return (*this)->get_CSVURL(URL);
}

template <class T> BSTR __fastcall
TCOMISpreadsheetT<T>::get_CSVURL(void)
{
  BSTR URL = 0;
  OLECHECK(this->get_CSVURL((BSTR*)&URL));
  return URL;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_CSVURL(BSTR URL/*[in]*/)
{
  return (*this)->set_CSVURL(URL);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_DataMember(Msdatasrc_xp::DataMember* DataMember/*[out,retval]*/)
{
  return (*this)->get_DataMember(DataMember);
}

template <class T> Msdatasrc_xp::DataMember __fastcall
TCOMISpreadsheetT<T>::get_DataMember(void)
{
  Msdatasrc_xp::DataMember DataMember;
  OLECHECK(this->get_DataMember((Msdatasrc_xp::DataMember*)&DataMember));
  return DataMember;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_DataMember(Msdatasrc_xp::DataMember DataMember/*[in]*/)
{
  return (*this)->set_DataMember(DataMember);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_DataSource(Msdatasrc_xp::DataSource** DataSource/*[out,retval]*/)
{
  return (*this)->get_DataSource(DataSource);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_DataSource(Msdatasrc_xp::DataSourcePtr* DataSource/*[out,retval]*/)
{
  return (*this)->get_DataSource(DataSource**)DataSource);
}

template <class T> Msdatasrc_xp::DataSourcePtr __fastcall
TCOMISpreadsheetT<T>::get_DataSource(void)
{
  Msdatasrc_xp::DataSource* DataSource;
  OLECHECK(this->get_DataSource((Msdatasrc_xp::DataSource**)&DataSource));
  return (Msdatasrc_xp::DataSourcePtr)DataSource;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_DataSource(Msdatasrc_xp::DataSource* DataSource/*[in]*/)
{
  return (*this)->set_DataSource(DataSource);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_DataSource(Msdatasrc_xp::DataSourcePtr DataSource/*[in]*/)
{
  return (*this)->set_DataSource(DataSource*)DataSource);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::_set_DataSource(Msdatasrc_xp::DataSource* DataSource/*[in]*/)
{
  return (*this)->_set_DataSource(DataSource);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::_set_DataSource(Msdatasrc_xp::DataSourcePtr DataSource/*[in]*/)
{
  return (*this)->_set_DataSource(DataSource*)DataSource);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_DataType(BSTR* DataType/*[out,retval]*/)
{
  return (*this)->get_DataType(DataType);
}

template <class T> BSTR __fastcall
TCOMISpreadsheetT<T>::get_DataType(void)
{
  BSTR DataType = 0;
  OLECHECK(this->get_DataType((BSTR*)&DataType));
  return DataType;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_DataType(BSTR DataType/*[in]*/)
{
  return (*this)->set_DataType(DataType);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_DesignMode(VARIANT_BOOL* DesignMode/*[out,retval]*/)
{
  return (*this)->get_DesignMode(DesignMode);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_DesignMode(TOLEBOOL* DesignMode/*[out,retval]*/)
{
  return (*this)->get_DesignMode(VARIANT_BOOL*)DesignMode);
}

template <class T> TOLEBOOL __fastcall
TCOMISpreadsheetT<T>::get_DesignMode(void)
{
  VARIANT_BOOL DesignMode;
  OLECHECK(this->get_DesignMode((VARIANT_BOOL*)&DesignMode));
  return (TOLEBOOL)DesignMode;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_Dirty(VARIANT_BOOL* Dirty/*[out,retval]*/)
{
  return (*this)->get_Dirty(Dirty);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_Dirty(TOLEBOOL* Dirty/*[out,retval]*/)
{
  return (*this)->get_Dirty(VARIANT_BOOL*)Dirty);
}

template <class T> TOLEBOOL __fastcall
TCOMISpreadsheetT<T>::get_Dirty(void)
{
  VARIANT_BOOL Dirty;
  OLECHECK(this->get_Dirty((VARIANT_BOOL*)&Dirty));
  return (TOLEBOOL)Dirty;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_Dirty(VARIANT_BOOL Dirty/*[in]*/)
{
  return (*this)->set_Dirty(Dirty);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_Dirty(TOLEBOOL Dirty/*[in]*/)
{
  return (*this)->set_Dirty(VARIANT_BOOL)Dirty);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_DisplayBranding(VARIANT_BOOL* DisplayBranding/*[out,retval]*/)
{
  return (*this)->get_DisplayBranding(DisplayBranding);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_DisplayBranding(TOLEBOOL* DisplayBranding/*[out,retval]*/)
{
  return (*this)->get_DisplayBranding(VARIANT_BOOL*)DisplayBranding);
}

template <class T> TOLEBOOL __fastcall
TCOMISpreadsheetT<T>::get_DisplayBranding(void)
{
  VARIANT_BOOL DisplayBranding;
  OLECHECK(this->get_DisplayBranding((VARIANT_BOOL*)&DisplayBranding));
  return (TOLEBOOL)DisplayBranding;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_DisplayBranding(VARIANT_BOOL DisplayBranding/*[in]*/)
{
  return (*this)->set_DisplayBranding(DisplayBranding);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_DisplayBranding(TOLEBOOL DisplayBranding/*[in]*/)
{
  return (*this)->set_DisplayBranding(VARIANT_BOOL)DisplayBranding);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_DisplayColumnHeadings(VARIANT_BOOL* pf/*[out,retval]*/)
{
  return (*this)->get_DisplayColumnHeadings(pf);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_DisplayColumnHeadings(TOLEBOOL* pf/*[out,retval]*/)
{
  return (*this)->get_DisplayColumnHeadings(VARIANT_BOOL*)pf);
}

template <class T> TOLEBOOL __fastcall
TCOMISpreadsheetT<T>::get_DisplayColumnHeadings(void)
{
  VARIANT_BOOL pf;
  OLECHECK(this->get_DisplayColumnHeadings((VARIANT_BOOL*)&pf));
  return (TOLEBOOL)pf;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_DisplayColumnHeadings(VARIANT_BOOL pf/*[in]*/)
{
  return (*this)->set_DisplayColumnHeadings(pf);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_DisplayColumnHeadings(TOLEBOOL pf/*[in]*/)
{
  return (*this)->set_DisplayColumnHeadings(VARIANT_BOOL)pf);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_DisplayDesignTimeUI(VARIANT_BOOL* DisplayDesignTimeUI/*[out,retval]*/)
{
  return (*this)->get_DisplayDesignTimeUI(DisplayDesignTimeUI);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_DisplayDesignTimeUI(TOLEBOOL* DisplayDesignTimeUI/*[out,retval]*/)
{
  return (*this)->get_DisplayDesignTimeUI(VARIANT_BOOL*)DisplayDesignTimeUI);
}

template <class T> TOLEBOOL __fastcall
TCOMISpreadsheetT<T>::get_DisplayDesignTimeUI(void)
{
  VARIANT_BOOL DisplayDesignTimeUI;
  OLECHECK(this->get_DisplayDesignTimeUI((VARIANT_BOOL*)&DisplayDesignTimeUI));
  return (TOLEBOOL)DisplayDesignTimeUI;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_DisplayDesignTimeUI(VARIANT_BOOL DisplayDesignTimeUI/*[in]*/)
{
  return (*this)->set_DisplayDesignTimeUI(DisplayDesignTimeUI);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_DisplayDesignTimeUI(TOLEBOOL DisplayDesignTimeUI/*[in]*/)
{
  return (*this)->set_DisplayDesignTimeUI(VARIANT_BOOL)DisplayDesignTimeUI);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_DisplayGridlines(VARIANT_BOOL* pf/*[out,retval]*/)
{
  return (*this)->get_DisplayGridlines(pf);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_DisplayGridlines(TOLEBOOL* pf/*[out,retval]*/)
{
  return (*this)->get_DisplayGridlines(VARIANT_BOOL*)pf);
}

template <class T> TOLEBOOL __fastcall
TCOMISpreadsheetT<T>::get_DisplayGridlines(void)
{
  VARIANT_BOOL pf;
  OLECHECK(this->get_DisplayGridlines((VARIANT_BOOL*)&pf));
  return (TOLEBOOL)pf;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_DisplayGridlines(VARIANT_BOOL pf/*[in]*/)
{
  return (*this)->set_DisplayGridlines(pf);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_DisplayGridlines(TOLEBOOL pf/*[in]*/)
{
  return (*this)->set_DisplayGridlines(VARIANT_BOOL)pf);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_DisplayHorizontalScrollBar(VARIANT_BOOL* pf/*[out,retval]*/)
{
  return (*this)->get_DisplayHorizontalScrollBar(pf);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_DisplayHorizontalScrollBar(TOLEBOOL* pf/*[out,retval]*/)
{
  return (*this)->get_DisplayHorizontalScrollBar(VARIANT_BOOL*)pf);
}

template <class T> TOLEBOOL __fastcall
TCOMISpreadsheetT<T>::get_DisplayHorizontalScrollBar(void)
{
  VARIANT_BOOL pf;
  OLECHECK(this->get_DisplayHorizontalScrollBar((VARIANT_BOOL*)&pf));
  return (TOLEBOOL)pf;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_DisplayHorizontalScrollBar(VARIANT_BOOL pf/*[in]*/)
{
  return (*this)->set_DisplayHorizontalScrollBar(pf);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_DisplayHorizontalScrollBar(TOLEBOOL pf/*[in]*/)
{
  return (*this)->set_DisplayHorizontalScrollBar(VARIANT_BOOL)pf);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_DisplayOfficeLogo(VARIANT_BOOL* DisplayOfficeLogo/*[out,retval]*/)
{
  return (*this)->get_DisplayOfficeLogo(DisplayOfficeLogo);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_DisplayOfficeLogo(TOLEBOOL* DisplayOfficeLogo/*[out,retval]*/)
{
  return (*this)->get_DisplayOfficeLogo(VARIANT_BOOL*)DisplayOfficeLogo);
}

template <class T> TOLEBOOL __fastcall
TCOMISpreadsheetT<T>::get_DisplayOfficeLogo(void)
{
  VARIANT_BOOL DisplayOfficeLogo;
  OLECHECK(this->get_DisplayOfficeLogo((VARIANT_BOOL*)&DisplayOfficeLogo));
  return (TOLEBOOL)DisplayOfficeLogo;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_DisplayOfficeLogo(VARIANT_BOOL DisplayOfficeLogo/*[in]*/)
{
  return (*this)->set_DisplayOfficeLogo(DisplayOfficeLogo);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_DisplayOfficeLogo(TOLEBOOL DisplayOfficeLogo/*[in]*/)
{
  return (*this)->set_DisplayOfficeLogo(VARIANT_BOOL)DisplayOfficeLogo);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_DisplayPropertyToolbox(VARIANT_BOOL* pf/*[out,retval]*/)
{
  return (*this)->get_DisplayPropertyToolbox(pf);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_DisplayPropertyToolbox(TOLEBOOL* pf/*[out,retval]*/)
{
  return (*this)->get_DisplayPropertyToolbox(VARIANT_BOOL*)pf);
}

template <class T> TOLEBOOL __fastcall
TCOMISpreadsheetT<T>::get_DisplayPropertyToolbox(void)
{
  VARIANT_BOOL pf;
  OLECHECK(this->get_DisplayPropertyToolbox((VARIANT_BOOL*)&pf));
  return (TOLEBOOL)pf;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_DisplayPropertyToolbox(VARIANT_BOOL pf/*[in]*/)
{
  return (*this)->set_DisplayPropertyToolbox(pf);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_DisplayPropertyToolbox(TOLEBOOL pf/*[in]*/)
{
  return (*this)->set_DisplayPropertyToolbox(VARIANT_BOOL)pf);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_DisplayRowHeadings(VARIANT_BOOL* pf/*[out,retval]*/)
{
  return (*this)->get_DisplayRowHeadings(pf);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_DisplayRowHeadings(TOLEBOOL* pf/*[out,retval]*/)
{
  return (*this)->get_DisplayRowHeadings(VARIANT_BOOL*)pf);
}

template <class T> TOLEBOOL __fastcall
TCOMISpreadsheetT<T>::get_DisplayRowHeadings(void)
{
  VARIANT_BOOL pf;
  OLECHECK(this->get_DisplayRowHeadings((VARIANT_BOOL*)&pf));
  return (TOLEBOOL)pf;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_DisplayRowHeadings(VARIANT_BOOL pf/*[in]*/)
{
  return (*this)->set_DisplayRowHeadings(pf);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_DisplayRowHeadings(TOLEBOOL pf/*[in]*/)
{
  return (*this)->set_DisplayRowHeadings(VARIANT_BOOL)pf);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_DisplayTitleBar(VARIANT_BOOL* DisplayTitleBar/*[out,retval]*/)
{
  return (*this)->get_DisplayTitleBar(DisplayTitleBar);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_DisplayTitleBar(TOLEBOOL* DisplayTitleBar/*[out,retval]*/)
{
  return (*this)->get_DisplayTitleBar(VARIANT_BOOL*)DisplayTitleBar);
}

template <class T> TOLEBOOL __fastcall
TCOMISpreadsheetT<T>::get_DisplayTitleBar(void)
{
  VARIANT_BOOL DisplayTitleBar;
  OLECHECK(this->get_DisplayTitleBar((VARIANT_BOOL*)&DisplayTitleBar));
  return (TOLEBOOL)DisplayTitleBar;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_DisplayTitleBar(VARIANT_BOOL DisplayTitleBar/*[in]*/)
{
  return (*this)->set_DisplayTitleBar(DisplayTitleBar);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_DisplayTitleBar(TOLEBOOL DisplayTitleBar/*[in]*/)
{
  return (*this)->set_DisplayTitleBar(VARIANT_BOOL)DisplayTitleBar);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_DisplayToolbar(VARIANT_BOOL* DisplayToolbar/*[out,retval]*/)
{
  return (*this)->get_DisplayToolbar(DisplayToolbar);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_DisplayToolbar(TOLEBOOL* DisplayToolbar/*[out,retval]*/)
{
  return (*this)->get_DisplayToolbar(VARIANT_BOOL*)DisplayToolbar);
}

template <class T> TOLEBOOL __fastcall
TCOMISpreadsheetT<T>::get_DisplayToolbar(void)
{
  VARIANT_BOOL DisplayToolbar;
  OLECHECK(this->get_DisplayToolbar((VARIANT_BOOL*)&DisplayToolbar));
  return (TOLEBOOL)DisplayToolbar;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_DisplayToolbar(VARIANT_BOOL DisplayToolbar/*[in]*/)
{
  return (*this)->set_DisplayToolbar(DisplayToolbar);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_DisplayToolbar(TOLEBOOL DisplayToolbar/*[in]*/)
{
  return (*this)->set_DisplayToolbar(VARIANT_BOOL)DisplayToolbar);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_DisplayVerticalScrollBar(VARIANT_BOOL* pf/*[out,retval]*/)
{
  return (*this)->get_DisplayVerticalScrollBar(pf);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_DisplayVerticalScrollBar(TOLEBOOL* pf/*[out,retval]*/)
{
  return (*this)->get_DisplayVerticalScrollBar(VARIANT_BOOL*)pf);
}

template <class T> TOLEBOOL __fastcall
TCOMISpreadsheetT<T>::get_DisplayVerticalScrollBar(void)
{
  VARIANT_BOOL pf;
  OLECHECK(this->get_DisplayVerticalScrollBar((VARIANT_BOOL*)&pf));
  return (TOLEBOOL)pf;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_DisplayVerticalScrollBar(VARIANT_BOOL pf/*[in]*/)
{
  return (*this)->set_DisplayVerticalScrollBar(pf);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_DisplayVerticalScrollBar(TOLEBOOL pf/*[in]*/)
{
  return (*this)->set_DisplayVerticalScrollBar(VARIANT_BOOL)pf);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_DisplayWorkbookTabs(VARIANT_BOOL* pf/*[out,retval]*/)
{
  return (*this)->get_DisplayWorkbookTabs(pf);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_DisplayWorkbookTabs(TOLEBOOL* pf/*[out,retval]*/)
{
  return (*this)->get_DisplayWorkbookTabs(VARIANT_BOOL*)pf);
}

template <class T> TOLEBOOL __fastcall
TCOMISpreadsheetT<T>::get_DisplayWorkbookTabs(void)
{
  VARIANT_BOOL pf;
  OLECHECK(this->get_DisplayWorkbookTabs((VARIANT_BOOL*)&pf));
  return (TOLEBOOL)pf;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_DisplayWorkbookTabs(VARIANT_BOOL pf/*[in]*/)
{
  return (*this)->set_DisplayWorkbookTabs(pf);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_DisplayWorkbookTabs(TOLEBOOL pf/*[in]*/)
{
  return (*this)->set_DisplayWorkbookTabs(VARIANT_BOOL)pf);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_EnableEvents(VARIANT_BOOL* EnableEvents/*[out,retval]*/)
{
  return (*this)->get_EnableEvents(EnableEvents);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_EnableEvents(TOLEBOOL* EnableEvents/*[out,retval]*/)
{
  return (*this)->get_EnableEvents(VARIANT_BOOL*)EnableEvents);
}

template <class T> TOLEBOOL __fastcall
TCOMISpreadsheetT<T>::get_EnableEvents(void)
{
  VARIANT_BOOL EnableEvents;
  OLECHECK(this->get_EnableEvents((VARIANT_BOOL*)&EnableEvents));
  return (TOLEBOOL)EnableEvents;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_EnableEvents(VARIANT_BOOL EnableEvents/*[in]*/)
{
  return (*this)->set_EnableEvents(EnableEvents);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_EnableEvents(TOLEBOOL EnableEvents/*[in]*/)
{
  return (*this)->set_EnableEvents(VARIANT_BOOL)EnableEvents);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_EnableUndo(VARIANT_BOOL* EnableUndo/*[out,retval]*/)
{
  return (*this)->get_EnableUndo(EnableUndo);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_EnableUndo(TOLEBOOL* EnableUndo/*[out,retval]*/)
{
  return (*this)->get_EnableUndo(VARIANT_BOOL*)EnableUndo);
}

template <class T> TOLEBOOL __fastcall
TCOMISpreadsheetT<T>::get_EnableUndo(void)
{
  VARIANT_BOOL EnableUndo;
  OLECHECK(this->get_EnableUndo((VARIANT_BOOL*)&EnableUndo));
  return (TOLEBOOL)EnableUndo;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_EnableUndo(VARIANT_BOOL EnableUndo/*[in]*/)
{
  return (*this)->set_EnableUndo(EnableUndo);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_EnableUndo(TOLEBOOL EnableUndo/*[in]*/)
{
  return (*this)->set_EnableUndo(VARIANT_BOOL)EnableUndo);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_HTMLData(BSTR* Data/*[out,retval]*/)
{
  return (*this)->get_HTMLData(Data);
}

template <class T> BSTR __fastcall
TCOMISpreadsheetT<T>::get_HTMLData(void)
{
  BSTR Data = 0;
  OLECHECK(this->get_HTMLData((BSTR*)&Data));
  return Data;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_HTMLData(BSTR Data/*[in]*/)
{
  return (*this)->set_HTMLData(Data);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_HTMLURL(BSTR* URL/*[out,retval]*/)
{
  return (*this)->get_HTMLURL(URL);
}

template <class T> BSTR __fastcall
TCOMISpreadsheetT<T>::get_HTMLURL(void)
{
  BSTR URL = 0;
  OLECHECK(this->get_HTMLURL((BSTR*)&URL));
  return URL;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_HTMLURL(BSTR URL/*[in]*/)
{
  return (*this)->set_HTMLURL(URL);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_InstanceID(unsigned_long* InstanceID/*[out,retval]*/)
{
  return (*this)->get_InstanceID(InstanceID);
}

template <class T> unsigned_long __fastcall
TCOMISpreadsheetT<T>::get_InstanceID(void)
{
  unsigned_long InstanceID;
  OLECHECK(this->get_InstanceID((unsigned_long*)&InstanceID));
  return InstanceID;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_International(VARIANT Index/*[in]*/, VARIANT* info/*[out,retval]*/)
{
  return (*this)->get_International(Index, info);
}

template <class T> VARIANT __fastcall
TCOMISpreadsheetT<T>::get_International(VARIANT Index/*[in]*/)
{
  VARIANT info;
  OLECHECK(this->get_International(, (VARIANT*)&info));
  return info;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_LanguageSettings(Owc10_xp::OWCLanguageSettings** langset/*[out,retval]*/)
{
  return (*this)->get_LanguageSettings(langset);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_LanguageSettings(Owc10_xp::OWCLanguageSettingsPtr* langset/*[out,retval]*/)
{
  return (*this)->get_LanguageSettings(OWCLanguageSettings**)langset);
}

template <class T> Owc10_xp::OWCLanguageSettingsPtr __fastcall
TCOMISpreadsheetT<T>::get_LanguageSettings(void)
{
  Owc10_xp::OWCLanguageSettings* langset;
  OLECHECK(this->get_LanguageSettings((Owc10_xp::OWCLanguageSettings**)&langset));
  return (Owc10_xp::OWCLanguageSettingsPtr)langset;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_MaxHeight(VARIANT* MaxHeight/*[out,retval]*/)
{
  return (*this)->get_MaxHeight(MaxHeight);
}

template <class T> VARIANT __fastcall
TCOMISpreadsheetT<T>::get_MaxHeight(void)
{
  VARIANT MaxHeight;
  OLECHECK(this->get_MaxHeight((VARIANT*)&MaxHeight));
  return MaxHeight;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_MaxHeight(VARIANT MaxHeight/*[in]*/)
{
  return (*this)->set_MaxHeight(MaxHeight);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_MaxWidth(VARIANT* MaxWidth/*[out,retval]*/)
{
  return (*this)->get_MaxWidth(MaxWidth);
}

template <class T> VARIANT __fastcall
TCOMISpreadsheetT<T>::get_MaxWidth(void)
{
  VARIANT MaxWidth;
  OLECHECK(this->get_MaxWidth((VARIANT*)&MaxWidth));
  return MaxWidth;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_MaxWidth(VARIANT MaxWidth/*[in]*/)
{
  return (*this)->set_MaxWidth(MaxWidth);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_MajorVersion(long* MajorVersion/*[out,retval]*/)
{
  return (*this)->get_MajorVersion(MajorVersion);
}

template <class T> long __fastcall
TCOMISpreadsheetT<T>::get_MajorVersion(void)
{
  long MajorVersion;
  OLECHECK(this->get_MajorVersion((long*)&MajorVersion));
  return MajorVersion;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_MinorVersion(BSTR* MinorVersion/*[out,retval]*/)
{
  return (*this)->get_MinorVersion(MinorVersion);
}

template <class T> BSTR __fastcall
TCOMISpreadsheetT<T>::get_MinorVersion(void)
{
  BSTR MinorVersion = 0;
  OLECHECK(this->get_MinorVersion((BSTR*)&MinorVersion));
  return MinorVersion;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_MoveAfterReturn(VARIANT_BOOL* MoveAfterReturn/*[out,retval]*/)
{
  return (*this)->get_MoveAfterReturn(MoveAfterReturn);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_MoveAfterReturn(TOLEBOOL* MoveAfterReturn/*[out,retval]*/)
{
  return (*this)->get_MoveAfterReturn(VARIANT_BOOL*)MoveAfterReturn);
}

template <class T> TOLEBOOL __fastcall
TCOMISpreadsheetT<T>::get_MoveAfterReturn(void)
{
  VARIANT_BOOL MoveAfterReturn;
  OLECHECK(this->get_MoveAfterReturn((VARIANT_BOOL*)&MoveAfterReturn));
  return (TOLEBOOL)MoveAfterReturn;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_MoveAfterReturn(VARIANT_BOOL MoveAfterReturn/*[in]*/)
{
  return (*this)->set_MoveAfterReturn(MoveAfterReturn);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_MoveAfterReturn(TOLEBOOL MoveAfterReturn/*[in]*/)
{
  return (*this)->set_MoveAfterReturn(VARIANT_BOOL)MoveAfterReturn);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_MoveAfterReturnDirection(Owc10_xp::XlDirection* MoveAfterReturnDirection/*[out,retval]*/)
{
  return (*this)->get_MoveAfterReturnDirection(MoveAfterReturnDirection);
}

template <class T> Owc10_xp::XlDirection __fastcall
TCOMISpreadsheetT<T>::get_MoveAfterReturnDirection(void)
{
  Owc10_xp::XlDirection MoveAfterReturnDirection;
  OLECHECK(this->get_MoveAfterReturnDirection((Owc10_xp::XlDirection*)&MoveAfterReturnDirection));
  return MoveAfterReturnDirection;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_MoveAfterReturnDirection(Owc10_xp::XlDirection MoveAfterReturnDirection/*[in]*/)
{
  return (*this)->set_MoveAfterReturnDirection(MoveAfterReturnDirection);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  return (*this)->get_Name(Name);
}

template <class T> BSTR __fastcall
TCOMISpreadsheetT<T>::get_Name(void)
{
  BSTR Name = 0;
  OLECHECK(this->get_Name((BSTR*)&Name));
  return Name;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_Names(Owc10_xp::Names** Names/*[out,retval]*/)
{
  return (*this)->get_Names(Names);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_Names(Owc10_xp::NamesPtr* Names/*[out,retval]*/)
{
  return (*this)->get_Names(Names**)Names);
}

template <class T> Owc10_xp::NamesPtr __fastcall
TCOMISpreadsheetT<T>::get_Names(void)
{
  Owc10_xp::Names* Names;
  OLECHECK(this->get_Names((Owc10_xp::Names**)&Names));
  return (Owc10_xp::NamesPtr)Names;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_Range(VARIANT Cell1/*[in]*/, VARIANT Cell2/*[in,opt]*/, 
                                Owc10_xp::_Range** Range/*[out,retval]*/)
{
  return (*this)->get_Range(Cell1, Cell2, Range);
}

template <class T> Owc10_xp::_Range* __fastcall
TCOMISpreadsheetT<T>::get_Range(VARIANT Cell1/*[in]*/, VARIANT Cell2/*[in,opt]*/)
{
  Owc10_xp::_Range* Range;
  OLECHECK(this->get_Range(, (Owc10_xp::_Range**)&Range));
  return Range;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_RevisionNumber(BSTR* RevisionNumber/*[out,retval]*/)
{
  return (*this)->get_RevisionNumber(RevisionNumber);
}

template <class T> BSTR __fastcall
TCOMISpreadsheetT<T>::get_RevisionNumber(void)
{
  BSTR RevisionNumber = 0;
  OLECHECK(this->get_RevisionNumber((BSTR*)&RevisionNumber));
  return RevisionNumber;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_RightToLeft(VARIANT_BOOL* RightToLeft/*[out,retval]*/)
{
  return (*this)->get_RightToLeft(RightToLeft);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_RightToLeft(TOLEBOOL* RightToLeft/*[out,retval]*/)
{
  return (*this)->get_RightToLeft(VARIANT_BOOL*)RightToLeft);
}

template <class T> TOLEBOOL __fastcall
TCOMISpreadsheetT<T>::get_RightToLeft(void)
{
  VARIANT_BOOL RightToLeft;
  OLECHECK(this->get_RightToLeft((VARIANT_BOOL*)&RightToLeft));
  return (TOLEBOOL)RightToLeft;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_RightToLeft(VARIANT_BOOL RightToLeft/*[in]*/)
{
  return (*this)->set_RightToLeft(RightToLeft);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_RightToLeft(TOLEBOOL RightToLeft/*[in]*/)
{
  return (*this)->set_RightToLeft(VARIANT_BOOL)RightToLeft);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_Rows(Owc10_xp::_Range** Range/*[out,retval]*/)
{
  return (*this)->get_Rows(Range);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_Rows(Owc10_xp::_RangePtr* Range/*[out,retval]*/)
{
  return (*this)->get_Rows(_Range**)Range);
}

template <class T> Owc10_xp::_RangePtr __fastcall
TCOMISpreadsheetT<T>::get_Rows(void)
{
  Owc10_xp::_Range* Range;
  OLECHECK(this->get_Rows((Owc10_xp::_Range**)&Range));
  return (Owc10_xp::_RangePtr)Range;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_ScreenUpdating(VARIANT_BOOL* ScreenUpdating/*[out,retval]*/)
{
  return (*this)->get_ScreenUpdating(ScreenUpdating);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_ScreenUpdating(TOLEBOOL* ScreenUpdating/*[out,retval]*/)
{
  return (*this)->get_ScreenUpdating(VARIANT_BOOL*)ScreenUpdating);
}

template <class T> TOLEBOOL __fastcall
TCOMISpreadsheetT<T>::get_ScreenUpdating(void)
{
  VARIANT_BOOL ScreenUpdating;
  OLECHECK(this->get_ScreenUpdating((VARIANT_BOOL*)&ScreenUpdating));
  return (TOLEBOOL)ScreenUpdating;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_ScreenUpdating(VARIANT_BOOL ScreenUpdating/*[in]*/)
{
  return (*this)->set_ScreenUpdating(ScreenUpdating);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_ScreenUpdating(TOLEBOOL ScreenUpdating/*[in]*/)
{
  return (*this)->set_ScreenUpdating(VARIANT_BOOL)ScreenUpdating);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_Selection(Owc10_xp::_Range** Range/*[out,retval]*/)
{
  return (*this)->get_Selection(Range);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_Selection(Owc10_xp::_RangePtr* Range/*[out,retval]*/)
{
  return (*this)->get_Selection(_Range**)Range);
}

template <class T> Owc10_xp::_RangePtr __fastcall
TCOMISpreadsheetT<T>::get_Selection(void)
{
  Owc10_xp::_Range* Range;
  OLECHECK(this->get_Selection((Owc10_xp::_Range**)&Range));
  return (Owc10_xp::_RangePtr)Range;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_Sheets(Owc10_xp::Sheets** Sheets/*[out,retval]*/)
{
  return (*this)->get_Sheets(Sheets);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_Sheets(Owc10_xp::SheetsPtr* Sheets/*[out,retval]*/)
{
  return (*this)->get_Sheets(Sheets**)Sheets);
}

template <class T> Owc10_xp::SheetsPtr __fastcall
TCOMISpreadsheetT<T>::get_Sheets(void)
{
  Owc10_xp::Sheets* Sheets;
  OLECHECK(this->get_Sheets((Owc10_xp::Sheets**)&Sheets));
  return (Owc10_xp::SheetsPtr)Sheets;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_TitleBar(Owc10_xp::TitleBar** TitleBar/*[out,retval]*/)
{
  return (*this)->get_TitleBar(TitleBar);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_TitleBar(Owc10_xp::TitleBarPtr* TitleBar/*[out,retval]*/)
{
  return (*this)->get_TitleBar(TitleBar**)TitleBar);
}

template <class T> Owc10_xp::TitleBarPtr __fastcall
TCOMISpreadsheetT<T>::get_TitleBar(void)
{
  Owc10_xp::TitleBar* TitleBar;
  OLECHECK(this->get_TitleBar((Owc10_xp::TitleBar**)&TitleBar));
  return (Owc10_xp::TitleBarPtr)TitleBar;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_Toolbar(Mscomctllib_xp::IToolbar** Toolbar/*[out,retval]*/)
{
  return (*this)->get_Toolbar(Toolbar);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_Toolbar(Mscomctllib_xp::IToolbarPtr* Toolbar/*[out,retval]*/)
{
  return (*this)->get_Toolbar(IToolbar**)Toolbar);
}

template <class T> Mscomctllib_xp::IToolbarPtr __fastcall
TCOMISpreadsheetT<T>::get_Toolbar(void)
{
  Mscomctllib_xp::IToolbar* Toolbar;
  OLECHECK(this->get_Toolbar((Mscomctllib_xp::IToolbar**)&Toolbar));
  return (Mscomctllib_xp::IToolbarPtr)Toolbar;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_Value(BSTR* Name/*[out,retval]*/)
{
  return (*this)->get_Value(Name);
}

template <class T> BSTR __fastcall
TCOMISpreadsheetT<T>::get_Value(void)
{
  BSTR Name = 0;
  OLECHECK(this->get_Value((BSTR*)&Name));
  return Name;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_Version(BSTR* Version/*[out,retval]*/)
{
  return (*this)->get_Version(Version);
}

template <class T> BSTR __fastcall
TCOMISpreadsheetT<T>::get_Version(void)
{
  BSTR Version = 0;
  OLECHECK(this->get_Version((BSTR*)&Version));
  return Version;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_ViewableRange(BSTR* ViewableRange/*[out,retval]*/)
{
  return (*this)->get_ViewableRange(ViewableRange);
}

template <class T> BSTR __fastcall
TCOMISpreadsheetT<T>::get_ViewableRange(void)
{
  BSTR ViewableRange = 0;
  OLECHECK(this->get_ViewableRange((BSTR*)&ViewableRange));
  return ViewableRange;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_ViewableRange(BSTR ViewableRange/*[in]*/)
{
  return (*this)->set_ViewableRange(ViewableRange);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_ViewOnlyMode(VARIANT_BOOL* ViewOnlyMode/*[out,retval]*/)
{
  return (*this)->get_ViewOnlyMode(ViewOnlyMode);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_ViewOnlyMode(TOLEBOOL* ViewOnlyMode/*[out,retval]*/)
{
  return (*this)->get_ViewOnlyMode(VARIANT_BOOL*)ViewOnlyMode);
}

template <class T> TOLEBOOL __fastcall
TCOMISpreadsheetT<T>::get_ViewOnlyMode(void)
{
  VARIANT_BOOL ViewOnlyMode;
  OLECHECK(this->get_ViewOnlyMode((VARIANT_BOOL*)&ViewOnlyMode));
  return (TOLEBOOL)ViewOnlyMode;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_Windows(Owc10_xp::Windows** Windows/*[out,retval]*/)
{
  return (*this)->get_Windows(Windows);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_Windows(Owc10_xp::WindowsPtr* Windows/*[out,retval]*/)
{
  return (*this)->get_Windows(Windows**)Windows);
}

template <class T> Owc10_xp::WindowsPtr __fastcall
TCOMISpreadsheetT<T>::get_Windows(void)
{
  Owc10_xp::Windows* Windows;
  OLECHECK(this->get_Windows((Owc10_xp::Windows**)&Windows));
  return (Owc10_xp::WindowsPtr)Windows;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_Workbooks(Owc10_xp::Workbooks** Workbooks/*[out,retval]*/)
{
  return (*this)->get_Workbooks(Workbooks);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_Workbooks(Owc10_xp::WorkbooksPtr* Workbooks/*[out,retval]*/)
{
  return (*this)->get_Workbooks(Workbooks**)Workbooks);
}

template <class T> Owc10_xp::WorkbooksPtr __fastcall
TCOMISpreadsheetT<T>::get_Workbooks(void)
{
  Owc10_xp::Workbooks* Workbooks;
  OLECHECK(this->get_Workbooks((Owc10_xp::Workbooks**)&Workbooks));
  return (Owc10_xp::WorkbooksPtr)Workbooks;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_Worksheets(Owc10_xp::Worksheets** Worksheets/*[out,retval]*/)
{
  return (*this)->get_Worksheets(Worksheets);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_Worksheets(Owc10_xp::WorksheetsPtr* Worksheets/*[out,retval]*/)
{
  return (*this)->get_Worksheets(Worksheets**)Worksheets);
}

template <class T> Owc10_xp::WorksheetsPtr __fastcall
TCOMISpreadsheetT<T>::get_Worksheets(void)
{
  Owc10_xp::Worksheets* Worksheets;
  OLECHECK(this->get_Worksheets((Owc10_xp::Worksheets**)&Worksheets));
  return (Owc10_xp::WorksheetsPtr)Worksheets;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_XMLData(BSTR* Data/*[out,retval]*/)
{
  return (*this)->get_XMLData(Data);
}

template <class T> BSTR __fastcall
TCOMISpreadsheetT<T>::get_XMLData(void)
{
  BSTR Data = 0;
  OLECHECK(this->get_XMLData((BSTR*)&Data));
  return Data;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_XMLData(BSTR Data/*[in]*/)
{
  return (*this)->set_XMLData(Data);
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::get_XMLURL(BSTR* URL/*[out,retval]*/)
{
  return (*this)->get_XMLURL(URL);
}

template <class T> BSTR __fastcall
TCOMISpreadsheetT<T>::get_XMLURL(void)
{
  BSTR URL = 0;
  OLECHECK(this->get_XMLURL((BSTR*)&URL));
  return URL;
}

template <class T> HRESULT __fastcall
TCOMISpreadsheetT<T>::set_XMLURL(BSTR URL/*[in]*/)
{
  return (*this)->set_XMLURL(URL);
}

// *********************************************************************//
// DispIntf:  ISpreadsheet
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A79-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::AddIn(LPDISPATCH AddIn/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddIn"), DISPID(1710));
  TAutoArgs<1> _args;
  _args[1] = AddIn /*[VT_DISPATCH:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::BeginUndo()
{
  _TDispID _dispid(*this, OLETEXT("BeginUndo"), DISPID(1711));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::Calculate()
{
  _TDispID _dispid(*this, OLETEXT("Calculate"), DISPID(1712));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::CalculateFull()
{
  _TDispID _dispid(*this, OLETEXT("CalculateFull"), DISPID(1713));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::EndUndo(VARIANT_BOOL Cancel/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndUndo"), DISPID(1714));
  TAutoArgs<1> _args;
  _args[1] = Cancel /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::_Evaluate(VARIANT Expression/*[in]*/, VARIANT* Result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Evaluate"), DISPID(-5));
  TAutoArgs<1> _args;
  _args[1] = Expression /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(Result /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
ISpreadsheetDispT<T>::_Evaluate(VARIANT Expression/*[in]*/)
{
  VARIANT Result;
  this->_Evaluate(Expression, (VARIANT*)&Result);
  return Result;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::Evaluate(VARIANT Expression/*[in]*/, VARIANT* Result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Evaluate"), DISPID(1715));
  TAutoArgs<1> _args;
  _args[1] = Expression /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(Result /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
ISpreadsheetDispT<T>::Evaluate(VARIANT Expression/*[in]*/)
{
  VARIANT Result;
  this->Evaluate(Expression, (VARIANT*)&Result);
  return Result;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::Export(BSTR Filename/*[in,def,opt]*/, 
                             Owc10_xp::SheetExportActionEnum Action/*[in,def,opt]*/, 
                             Owc10_xp::SheetExportFormat Format/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Export"), DISPID(1716));
  TAutoArgs<3> _args;
  _args[1] = Filename /*[VT_BSTR:0]*/;
  _args[2] = (int)Action /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)Format /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::LocateDataSource()
{
  _TDispID _dispid(*this, OLETEXT("LocateDataSource"), DISPID(1717));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::msDataSourceObject(BSTR bstr/*[in]*/, LPUNKNOWN* Object/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("msDataSourceObject"), DISPID(-3900));
  TAutoArgs<1> _args;
  _args[1] = bstr /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(Object /*[VT_UNKNOWN:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
ISpreadsheetDispT<T>::msDataSourceObject(BSTR bstr/*[in]*/)
{
  LPUNKNOWN Object;
  this->msDataSourceObject(bstr, (LPUNKNOWN*)&Object);
  return Object;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::RectIntersect(Owc10_xp::_Range* Range1/*[in]*/, 
                                    Owc10_xp::_Range* Range2/*[in]*/, 
                                    Owc10_xp::_Range** RangeOut/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RectIntersect"), DISPID(1718));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::_Range*)Range1 /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Owc10_xp::_Range*)Range2 /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::_Range**)RangeOut /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::_Range* __fastcall
ISpreadsheetDispT<T>::RectIntersect(Owc10_xp::_Range* Range1/*[in]*/, 
                                    Owc10_xp::_Range* Range2/*[in]*/)
{
  Owc10_xp::_Range* RangeOut;
  this->RectIntersect(Range1, Range2, (Owc10_xp::_Range**)&RangeOut);
  return RangeOut;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::RectUnion(Owc10_xp::_Range* Range1/*[in]*/, Owc10_xp::_Range* Range2/*[in]*/, 
                                Owc10_xp::_Range** RangeOut/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RectUnion"), DISPID(1719));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::_Range*)Range1 /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Owc10_xp::_Range*)Range2 /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::_Range**)RangeOut /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::_Range* __fastcall
ISpreadsheetDispT<T>::RectUnion(Owc10_xp::_Range* Range1/*[in]*/, Owc10_xp::_Range* Range2/*[in]*/)
{
  Owc10_xp::_Range* RangeOut;
  this->RectUnion(Range1, Range2, (Owc10_xp::_Range**)&RangeOut);
  return RangeOut;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::Refresh()
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(1720));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::Repaint()
{
  _TDispID _dispid(*this, OLETEXT("Repaint"), DISPID(1721));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::ShowAbout()
{
  _TDispID _dispid(*this, OLETEXT("ShowAbout"), DISPID(1722));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::ShowContextMenu(long x/*[in]*/, long y/*[in]*/, VARIANT Menu/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowContextMenu"), DISPID(1723));
  TAutoArgs<3> _args;
  _args[1] = x /*[VT_I4:0]*/;
  _args[2] = y /*[VT_I4:0]*/;
  _args[3] = Menu /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::ShowHelp(long Topic/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowHelp"), DISPID(1724));
  TAutoArgs<1> _args;
  _args[1] = Topic /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::Undo()
{
  _TDispID _dispid(*this, OLETEXT("Undo"), DISPID(1725));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::UpdatePropertyToolbox()
{
  _TDispID _dispid(*this, OLETEXT("UpdatePropertyToolbox"), DISPID(1726));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_ActiveCell(Owc10_xp::_Range** Range/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveCell"), DISPID(1101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::_Range**)Range /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::_Range* __fastcall
ISpreadsheetDispT<T>::get_ActiveCell(void)
{
  Owc10_xp::_Range* Range;
  this->get_ActiveCell((Owc10_xp::_Range**)&Range);
  return Range;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_ActiveSheet(Owc10_xp::Worksheet** Sheet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveSheet"), DISPID(1102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Worksheet**)Sheet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Worksheet* __fastcall
ISpreadsheetDispT<T>::get_ActiveSheet(void)
{
  Owc10_xp::Worksheet* Sheet;
  this->get_ActiveSheet((Owc10_xp::Worksheet**)&Sheet);
  return Sheet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_ActiveWindow(Owc10_xp::WINDOW** Window/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveWindow"), DISPID(1103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::WINDOW**)Window /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::WINDOW* __fastcall
ISpreadsheetDispT<T>::get_ActiveWindow(void)
{
  Owc10_xp::WINDOW* Window;
  this->get_ActiveWindow((Owc10_xp::WINDOW**)&Window);
  return Window;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_ActiveWorkbook(Owc10_xp::Workbook** Workbook/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveWorkbook"), DISPID(1104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Workbook**)Workbook /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Workbook* __fastcall
ISpreadsheetDispT<T>::get_ActiveWorkbook(void)
{
  Owc10_xp::Workbook* Workbook;
  this->get_ActiveWorkbook((Owc10_xp::Workbook**)&Workbook);
  return Workbook;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_AllowPropertyToolbox(VARIANT_BOOL* AllowPropertyToolbox/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowPropertyToolbox"), DISPID(1008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AllowPropertyToolbox /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISpreadsheetDispT<T>::get_AllowPropertyToolbox(void)
{
  VARIANT_BOOL AllowPropertyToolbox;
  this->get_AllowPropertyToolbox((VARIANT_BOOL*)&AllowPropertyToolbox);
  return AllowPropertyToolbox;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::set_AllowPropertyToolbox(VARIANT_BOOL AllowPropertyToolbox/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowPropertyToolbox"), DISPID(1008));
  TAutoArgs<1> _args;
  _args[1] = AllowPropertyToolbox /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_Application(Owc10_xp::ISpreadsheet** ppApp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ISpreadsheet**)ppApp /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ISpreadsheet* __fastcall
ISpreadsheetDispT<T>::get_Application(void)
{
  Owc10_xp::ISpreadsheet* ppApp;
  this->get_Application((Owc10_xp::ISpreadsheet**)&ppApp);
  return ppApp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_AutoFit(VARIANT_BOOL* AutoFit/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoFit"), DISPID(1009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AutoFit /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISpreadsheetDispT<T>::get_AutoFit(void)
{
  VARIANT_BOOL AutoFit;
  this->get_AutoFit((VARIANT_BOOL*)&AutoFit);
  return AutoFit;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::set_AutoFit(VARIANT_BOOL AutoFit/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoFit"), DISPID(1009));
  TAutoArgs<1> _args;
  _args[1] = AutoFit /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_Build(long* BuildNumber/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Build"), DISPID(1106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BuildNumber /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISpreadsheetDispT<T>::get_Build(void)
{
  long BuildNumber;
  this->get_Build((long*)&BuildNumber);
  return BuildNumber;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_BuildNumber(BSTR* BuildNumber/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuildNumber"), DISPID(1107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BuildNumber /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISpreadsheetDispT<T>::get_BuildNumber(void)
{
  BSTR BuildNumber;
  this->get_BuildNumber((BSTR*)&BuildNumber);
  return BuildNumber;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_Calculation(Owc10_xp::XlCalculation* calc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Calculation"), DISPID(1025));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)calc /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::XlCalculation __fastcall
ISpreadsheetDispT<T>::get_Calculation(void)
{
  Owc10_xp::XlCalculation calc;
  this->get_Calculation((Owc10_xp::XlCalculation*)&calc);
  return calc;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::set_Calculation(Owc10_xp::XlCalculation calc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Calculation"), DISPID(1025));
  TAutoArgs<1> _args;
  _args[1] = (int)calc /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_CalculationVersion(long* ver/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CalculationVersion"), DISPID(1108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ver /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISpreadsheetDispT<T>::get_CalculationVersion(void)
{
  long ver;
  this->get_CalculationVersion((long*)&ver);
  return ver;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_CanUndo(VARIANT_BOOL* CanUndo/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanUndo"), DISPID(1109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CanUndo /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISpreadsheetDispT<T>::get_CanUndo(void)
{
  VARIANT_BOOL CanUndo;
  this->get_CanUndo((VARIANT_BOOL*)&CanUndo);
  return CanUndo;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_Caption(BSTR* Caption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Caption /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISpreadsheetDispT<T>::get_Caption(void)
{
  BSTR Caption;
  this->get_Caption((BSTR*)&Caption);
  return Caption;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::set_Caption(BSTR Caption/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Caption /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_Cells(Owc10_xp::_Range** Range/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Cells"), DISPID(1110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::_Range**)Range /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::_Range* __fastcall
ISpreadsheetDispT<T>::get_Cells(void)
{
  Owc10_xp::_Range* Range;
  this->get_Cells((Owc10_xp::_Range**)&Range);
  return Range;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_Columns(Owc10_xp::_Range** Range/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Columns"), DISPID(1111));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::_Range**)Range /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::_Range* __fastcall
ISpreadsheetDispT<T>::get_Columns(void)
{
  Owc10_xp::_Range* Range;
  this->get_Columns((Owc10_xp::_Range**)&Range);
  return Range;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_Commands(Owc10_xp::OCCommands** Commands/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Commands"), DISPID(1112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::OCCommands**)Commands /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::OCCommands* __fastcall
ISpreadsheetDispT<T>::get_Commands(void)
{
  Owc10_xp::OCCommands* Commands;
  this->get_Commands((Owc10_xp::OCCommands**)&Commands);
  return Commands;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_Constants(LPDISPATCH* Constants/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Constants"), DISPID(1113));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Constants /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ISpreadsheetDispT<T>::get_Constants(void)
{
  LPDISPATCH Constants;
  this->get_Constants((LPDISPATCH*)&Constants);
  return Constants;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_CSVData(BSTR* Data/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CSVData"), DISPID(1002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Data /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISpreadsheetDispT<T>::get_CSVData(void)
{
  BSTR Data;
  this->get_CSVData((BSTR*)&Data);
  return Data;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::set_CSVData(BSTR Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CSVData"), DISPID(1002));
  TAutoArgs<1> _args;
  _args[1] = Data /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_CSVURL(BSTR* URL/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CSVURL"), DISPID(1003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(URL /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISpreadsheetDispT<T>::get_CSVURL(void)
{
  BSTR URL;
  this->get_CSVURL((BSTR*)&URL);
  return URL;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::set_CSVURL(BSTR URL/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CSVURL"), DISPID(1003));
  TAutoArgs<1> _args;
  _args[1] = URL /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_DataMember(Msdatasrc_xp::DataMember* DataMember/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataMember"), DISPID(1114));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DataMember /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msdatasrc_xp::DataMember __fastcall
ISpreadsheetDispT<T>::get_DataMember(void)
{
  Msdatasrc_xp::DataMember DataMember;
  this->get_DataMember((Msdatasrc_xp::DataMember*)&DataMember);
  return DataMember;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::set_DataMember(Msdatasrc_xp::DataMember DataMember/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataMember"), DISPID(1114));
  TAutoArgs<1> _args;
  _args[1] = DataMember /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_DataSource(Msdatasrc_xp::DataSource** DataSource/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataSource"), DISPID(1115));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPUNKNOWN*)(Msdatasrc_xp::DataSource**)DataSource /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msdatasrc_xp::DataSource* __fastcall
ISpreadsheetDispT<T>::get_DataSource(void)
{
  Msdatasrc_xp::DataSource* DataSource;
  this->get_DataSource((Msdatasrc_xp::DataSource**)&DataSource);
  return DataSource;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::set_DataSource(Msdatasrc_xp::DataSource* DataSource/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataSource"), DISPID(1115));
  TAutoArgs<1> _args;
  _args[1] = (LPUNKNOWN)(Msdatasrc_xp::DataSource*)DataSource /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::_set_DataSource(Msdatasrc_xp::DataSource* DataSource/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataSource"), DISPID(1115));
  TAutoArgs<1> _args;
  _args[1] = (LPUNKNOWN)(Msdatasrc_xp::DataSource*)DataSource /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_DataType(BSTR* DataType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataType"), DISPID(1001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DataType /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISpreadsheetDispT<T>::get_DataType(void)
{
  BSTR DataType;
  this->get_DataType((BSTR*)&DataType);
  return DataType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::set_DataType(BSTR DataType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataType"), DISPID(1001));
  TAutoArgs<1> _args;
  _args[1] = DataType /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_DesignMode(VARIANT_BOOL* DesignMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesignMode"), DISPID(1116));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DesignMode /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISpreadsheetDispT<T>::get_DesignMode(void)
{
  VARIANT_BOOL DesignMode;
  this->get_DesignMode((VARIANT_BOOL*)&DesignMode);
  return DesignMode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_Dirty(VARIANT_BOOL* Dirty/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Dirty"), DISPID(1117));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Dirty /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISpreadsheetDispT<T>::get_Dirty(void)
{
  VARIANT_BOOL Dirty;
  this->get_Dirty((VARIANT_BOOL*)&Dirty);
  return Dirty;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::set_Dirty(VARIANT_BOOL Dirty/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Dirty"), DISPID(1117));
  TAutoArgs<1> _args;
  _args[1] = Dirty /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_DisplayBranding(VARIANT_BOOL* DisplayBranding/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayBranding"), DISPID(1118));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DisplayBranding /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISpreadsheetDispT<T>::get_DisplayBranding(void)
{
  VARIANT_BOOL DisplayBranding;
  this->get_DisplayBranding((VARIANT_BOOL*)&DisplayBranding);
  return DisplayBranding;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::set_DisplayBranding(VARIANT_BOOL DisplayBranding/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayBranding"), DISPID(1118));
  TAutoArgs<1> _args;
  _args[1] = DisplayBranding /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_DisplayColumnHeadings(VARIANT_BOOL* pf/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayColumnHeadings"), DISPID(1013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pf /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISpreadsheetDispT<T>::get_DisplayColumnHeadings(void)
{
  VARIANT_BOOL pf;
  this->get_DisplayColumnHeadings((VARIANT_BOOL*)&pf);
  return pf;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::set_DisplayColumnHeadings(VARIANT_BOOL pf/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayColumnHeadings"), DISPID(1013));
  TAutoArgs<1> _args;
  _args[1] = pf /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_DisplayDesignTimeUI(VARIANT_BOOL* DisplayDesignTimeUI/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayDesignTimeUI"), DISPID(1119));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DisplayDesignTimeUI /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISpreadsheetDispT<T>::get_DisplayDesignTimeUI(void)
{
  VARIANT_BOOL DisplayDesignTimeUI;
  this->get_DisplayDesignTimeUI((VARIANT_BOOL*)&DisplayDesignTimeUI);
  return DisplayDesignTimeUI;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::set_DisplayDesignTimeUI(VARIANT_BOOL DisplayDesignTimeUI/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayDesignTimeUI"), DISPID(1119));
  TAutoArgs<1> _args;
  _args[1] = DisplayDesignTimeUI /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_DisplayGridlines(VARIANT_BOOL* pf/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayGridlines"), DISPID(1015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pf /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISpreadsheetDispT<T>::get_DisplayGridlines(void)
{
  VARIANT_BOOL pf;
  this->get_DisplayGridlines((VARIANT_BOOL*)&pf);
  return pf;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::set_DisplayGridlines(VARIANT_BOOL pf/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayGridlines"), DISPID(1015));
  TAutoArgs<1> _args;
  _args[1] = pf /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_DisplayHorizontalScrollBar(VARIANT_BOOL* pf/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayHorizontalScrollBar"), DISPID(1017));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pf /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISpreadsheetDispT<T>::get_DisplayHorizontalScrollBar(void)
{
  VARIANT_BOOL pf;
  this->get_DisplayHorizontalScrollBar((VARIANT_BOOL*)&pf);
  return pf;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::set_DisplayHorizontalScrollBar(VARIANT_BOOL pf/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayHorizontalScrollBar"), DISPID(1017));
  TAutoArgs<1> _args;
  _args[1] = pf /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_DisplayOfficeLogo(VARIANT_BOOL* DisplayOfficeLogo/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayOfficeLogo"), DISPID(1018));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DisplayOfficeLogo /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISpreadsheetDispT<T>::get_DisplayOfficeLogo(void)
{
  VARIANT_BOOL DisplayOfficeLogo;
  this->get_DisplayOfficeLogo((VARIANT_BOOL*)&DisplayOfficeLogo);
  return DisplayOfficeLogo;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::set_DisplayOfficeLogo(VARIANT_BOOL DisplayOfficeLogo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayOfficeLogo"), DISPID(1018));
  TAutoArgs<1> _args;
  _args[1] = DisplayOfficeLogo /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_DisplayPropertyToolbox(VARIANT_BOOL* pf/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayPropertyToolbox"), DISPID(4002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pf /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISpreadsheetDispT<T>::get_DisplayPropertyToolbox(void)
{
  VARIANT_BOOL pf;
  this->get_DisplayPropertyToolbox((VARIANT_BOOL*)&pf);
  return pf;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::set_DisplayPropertyToolbox(VARIANT_BOOL pf/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayPropertyToolbox"), DISPID(4002));
  TAutoArgs<1> _args;
  _args[1] = pf /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_DisplayRowHeadings(VARIANT_BOOL* pf/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayRowHeadings"), DISPID(1019));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pf /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISpreadsheetDispT<T>::get_DisplayRowHeadings(void)
{
  VARIANT_BOOL pf;
  this->get_DisplayRowHeadings((VARIANT_BOOL*)&pf);
  return pf;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::set_DisplayRowHeadings(VARIANT_BOOL pf/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayRowHeadings"), DISPID(1019));
  TAutoArgs<1> _args;
  _args[1] = pf /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_DisplayTitleBar(VARIANT_BOOL* DisplayTitleBar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayTitleBar"), DISPID(1022));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DisplayTitleBar /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISpreadsheetDispT<T>::get_DisplayTitleBar(void)
{
  VARIANT_BOOL DisplayTitleBar;
  this->get_DisplayTitleBar((VARIANT_BOOL*)&DisplayTitleBar);
  return DisplayTitleBar;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::set_DisplayTitleBar(VARIANT_BOOL DisplayTitleBar/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayTitleBar"), DISPID(1022));
  TAutoArgs<1> _args;
  _args[1] = DisplayTitleBar /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_DisplayToolbar(VARIANT_BOOL* DisplayToolbar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayToolbar"), DISPID(1023));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DisplayToolbar /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISpreadsheetDispT<T>::get_DisplayToolbar(void)
{
  VARIANT_BOOL DisplayToolbar;
  this->get_DisplayToolbar((VARIANT_BOOL*)&DisplayToolbar);
  return DisplayToolbar;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::set_DisplayToolbar(VARIANT_BOOL DisplayToolbar/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayToolbar"), DISPID(1023));
  TAutoArgs<1> _args;
  _args[1] = DisplayToolbar /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_DisplayVerticalScrollBar(VARIANT_BOOL* pf/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayVerticalScrollBar"), DISPID(1021));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pf /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISpreadsheetDispT<T>::get_DisplayVerticalScrollBar(void)
{
  VARIANT_BOOL pf;
  this->get_DisplayVerticalScrollBar((VARIANT_BOOL*)&pf);
  return pf;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::set_DisplayVerticalScrollBar(VARIANT_BOOL pf/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayVerticalScrollBar"), DISPID(1021));
  TAutoArgs<1> _args;
  _args[1] = pf /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_DisplayWorkbookTabs(VARIANT_BOOL* pf/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayWorkbookTabs"), DISPID(1024));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pf /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISpreadsheetDispT<T>::get_DisplayWorkbookTabs(void)
{
  VARIANT_BOOL pf;
  this->get_DisplayWorkbookTabs((VARIANT_BOOL*)&pf);
  return pf;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::set_DisplayWorkbookTabs(VARIANT_BOOL pf/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayWorkbookTabs"), DISPID(1024));
  TAutoArgs<1> _args;
  _args[1] = pf /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_EnableEvents(VARIANT_BOOL* EnableEvents/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableEvents"), DISPID(1026));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(EnableEvents /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISpreadsheetDispT<T>::get_EnableEvents(void)
{
  VARIANT_BOOL EnableEvents;
  this->get_EnableEvents((VARIANT_BOOL*)&EnableEvents);
  return EnableEvents;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::set_EnableEvents(VARIANT_BOOL EnableEvents/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableEvents"), DISPID(1026));
  TAutoArgs<1> _args;
  _args[1] = EnableEvents /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_EnableUndo(VARIANT_BOOL* EnableUndo/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableUndo"), DISPID(1029));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(EnableUndo /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISpreadsheetDispT<T>::get_EnableUndo(void)
{
  VARIANT_BOOL EnableUndo;
  this->get_EnableUndo((VARIANT_BOOL*)&EnableUndo);
  return EnableUndo;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::set_EnableUndo(VARIANT_BOOL EnableUndo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableUndo"), DISPID(1029));
  TAutoArgs<1> _args;
  _args[1] = EnableUndo /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_HTMLData(BSTR* Data/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLData"), DISPID(1004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Data /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISpreadsheetDispT<T>::get_HTMLData(void)
{
  BSTR Data;
  this->get_HTMLData((BSTR*)&Data);
  return Data;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::set_HTMLData(BSTR Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLData"), DISPID(1004));
  TAutoArgs<1> _args;
  _args[1] = Data /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_HTMLURL(BSTR* URL/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLURL"), DISPID(1005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(URL /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISpreadsheetDispT<T>::get_HTMLURL(void)
{
  BSTR URL;
  this->get_HTMLURL((BSTR*)&URL);
  return URL;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::set_HTMLURL(BSTR URL/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLURL"), DISPID(1005));
  TAutoArgs<1> _args;
  _args[1] = URL /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_InstanceID(unsigned_long* InstanceID/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InstanceID"), DISPID(1033));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(InstanceID /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
ISpreadsheetDispT<T>::get_InstanceID(void)
{
  unsigned_long InstanceID;
  this->get_InstanceID((unsigned_long*)&InstanceID);
  return InstanceID;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_International(VARIANT Index/*[in]*/, VARIANT* info/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("International"), DISPID(1120));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(info /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
ISpreadsheetDispT<T>::get_International(VARIANT Index/*[in]*/)
{
  VARIANT info;
  this->get_International(Index, (VARIANT*)&info);
  return info;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_LanguageSettings(Owc10_xp::OWCLanguageSettings** langset/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LanguageSettings"), DISPID(1121));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::OWCLanguageSettings**)langset /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::OWCLanguageSettings* __fastcall
ISpreadsheetDispT<T>::get_LanguageSettings(void)
{
  Owc10_xp::OWCLanguageSettings* langset;
  this->get_LanguageSettings((Owc10_xp::OWCLanguageSettings**)&langset);
  return langset;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_MaxHeight(VARIANT* MaxHeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxHeight"), DISPID(1036));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(MaxHeight /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
ISpreadsheetDispT<T>::get_MaxHeight(void)
{
  VARIANT MaxHeight;
  this->get_MaxHeight((VARIANT*)&MaxHeight);
  return MaxHeight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::set_MaxHeight(VARIANT MaxHeight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxHeight"), DISPID(1036));
  TAutoArgs<1> _args;
  _args[1] = MaxHeight /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_MaxWidth(VARIANT* MaxWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxWidth"), DISPID(1038));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(MaxWidth /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
ISpreadsheetDispT<T>::get_MaxWidth(void)
{
  VARIANT MaxWidth;
  this->get_MaxWidth((VARIANT*)&MaxWidth);
  return MaxWidth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::set_MaxWidth(VARIANT MaxWidth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxWidth"), DISPID(1038));
  TAutoArgs<1> _args;
  _args[1] = MaxWidth /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_MajorVersion(long* MajorVersion/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MajorVersion"), DISPID(1122));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(MajorVersion /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISpreadsheetDispT<T>::get_MajorVersion(void)
{
  long MajorVersion;
  this->get_MajorVersion((long*)&MajorVersion);
  return MajorVersion;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_MinorVersion(BSTR* MinorVersion/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinorVersion"), DISPID(1123));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(MinorVersion /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISpreadsheetDispT<T>::get_MinorVersion(void)
{
  BSTR MinorVersion;
  this->get_MinorVersion((BSTR*)&MinorVersion);
  return MinorVersion;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_MoveAfterReturn(VARIANT_BOOL* MoveAfterReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MoveAfterReturn"), DISPID(1039));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(MoveAfterReturn /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISpreadsheetDispT<T>::get_MoveAfterReturn(void)
{
  VARIANT_BOOL MoveAfterReturn;
  this->get_MoveAfterReturn((VARIANT_BOOL*)&MoveAfterReturn);
  return MoveAfterReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::set_MoveAfterReturn(VARIANT_BOOL MoveAfterReturn/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MoveAfterReturn"), DISPID(1039));
  TAutoArgs<1> _args;
  _args[1] = MoveAfterReturn /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_MoveAfterReturnDirection(Owc10_xp::XlDirection* MoveAfterReturnDirection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MoveAfterReturnDirection"), DISPID(1040));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)MoveAfterReturnDirection /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::XlDirection __fastcall
ISpreadsheetDispT<T>::get_MoveAfterReturnDirection(void)
{
  Owc10_xp::XlDirection MoveAfterReturnDirection;
  this->get_MoveAfterReturnDirection((Owc10_xp::XlDirection*)&MoveAfterReturnDirection);
  return MoveAfterReturnDirection;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::set_MoveAfterReturnDirection(Owc10_xp::XlDirection MoveAfterReturnDirection/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MoveAfterReturnDirection"), DISPID(1040));
  TAutoArgs<1> _args;
  _args[1] = (int)MoveAfterReturnDirection /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1124));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISpreadsheetDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_Names(Owc10_xp::Names** Names/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Names"), DISPID(1125));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Names**)Names /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Names* __fastcall
ISpreadsheetDispT<T>::get_Names(void)
{
  Owc10_xp::Names* Names;
  this->get_Names((Owc10_xp::Names**)&Names);
  return Names;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_Range(VARIANT Cell1/*[in]*/, VARIANT Cell2/*[in,opt]*/, 
                                Owc10_xp::_Range** Range/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Range"), DISPID(1126));
  TAutoArgs<2> _args;
  _args[1] = Cell1 /*[VT_VARIANT:0]*/;
  _args[2] = Cell2 /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::_Range**)Range /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::_Range* __fastcall
ISpreadsheetDispT<T>::get_Range(VARIANT Cell1/*[in]*/, VARIANT Cell2/*[in,opt]*/)
{
  Owc10_xp::_Range* Range;
  this->get_Range(Cell1, Cell2, (Owc10_xp::_Range**)&Range);
  return Range;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_RevisionNumber(BSTR* RevisionNumber/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RevisionNumber"), DISPID(1127));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RevisionNumber /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISpreadsheetDispT<T>::get_RevisionNumber(void)
{
  BSTR RevisionNumber;
  this->get_RevisionNumber((BSTR*)&RevisionNumber);
  return RevisionNumber;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_RightToLeft(VARIANT_BOOL* RightToLeft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RightToLeft"), DISPID(1042));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RightToLeft /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISpreadsheetDispT<T>::get_RightToLeft(void)
{
  VARIANT_BOOL RightToLeft;
  this->get_RightToLeft((VARIANT_BOOL*)&RightToLeft);
  return RightToLeft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::set_RightToLeft(VARIANT_BOOL RightToLeft/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RightToLeft"), DISPID(1042));
  TAutoArgs<1> _args;
  _args[1] = RightToLeft /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_Rows(Owc10_xp::_Range** Range/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Rows"), DISPID(1128));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::_Range**)Range /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::_Range* __fastcall
ISpreadsheetDispT<T>::get_Rows(void)
{
  Owc10_xp::_Range* Range;
  this->get_Rows((Owc10_xp::_Range**)&Range);
  return Range;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_ScreenUpdating(VARIANT_BOOL* ScreenUpdating/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScreenUpdating"), DISPID(1044));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ScreenUpdating /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISpreadsheetDispT<T>::get_ScreenUpdating(void)
{
  VARIANT_BOOL ScreenUpdating;
  this->get_ScreenUpdating((VARIANT_BOOL*)&ScreenUpdating);
  return ScreenUpdating;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::set_ScreenUpdating(VARIANT_BOOL ScreenUpdating/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScreenUpdating"), DISPID(1044));
  TAutoArgs<1> _args;
  _args[1] = ScreenUpdating /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_Selection(Owc10_xp::_Range** Range/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Selection"), DISPID(1045));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::_Range**)Range /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::_Range* __fastcall
ISpreadsheetDispT<T>::get_Selection(void)
{
  Owc10_xp::_Range* Range;
  this->get_Selection((Owc10_xp::_Range**)&Range);
  return Range;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_Sheets(Owc10_xp::Sheets** Sheets/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Sheets"), DISPID(1129));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Sheets**)Sheets /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Sheets* __fastcall
ISpreadsheetDispT<T>::get_Sheets(void)
{
  Owc10_xp::Sheets* Sheets;
  this->get_Sheets((Owc10_xp::Sheets**)&Sheets);
  return Sheets;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_TitleBar(Owc10_xp::TitleBar** TitleBar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TitleBar"), DISPID(1130));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::TitleBar**)TitleBar /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::TitleBar* __fastcall
ISpreadsheetDispT<T>::get_TitleBar(void)
{
  Owc10_xp::TitleBar* TitleBar;
  this->get_TitleBar((Owc10_xp::TitleBar**)&TitleBar);
  return TitleBar;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_Toolbar(Mscomctllib_xp::IToolbar** Toolbar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Toolbar"), DISPID(1131));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::IToolbar**)Toolbar /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::IToolbar* __fastcall
ISpreadsheetDispT<T>::get_Toolbar(void)
{
  Mscomctllib_xp::IToolbar* Toolbar;
  this->get_Toolbar((Mscomctllib_xp::IToolbar**)&Toolbar);
  return Toolbar;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_Value(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(1132));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISpreadsheetDispT<T>::get_Value(void)
{
  BSTR Name;
  this->get_Value((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_Version(BSTR* Version/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(1133));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Version /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISpreadsheetDispT<T>::get_Version(void)
{
  BSTR Version;
  this->get_Version((BSTR*)&Version);
  return Version;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_ViewableRange(BSTR* ViewableRange/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ViewableRange"), DISPID(1048));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ViewableRange /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISpreadsheetDispT<T>::get_ViewableRange(void)
{
  BSTR ViewableRange;
  this->get_ViewableRange((BSTR*)&ViewableRange);
  return ViewableRange;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::set_ViewableRange(BSTR ViewableRange/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ViewableRange"), DISPID(1048));
  TAutoArgs<1> _args;
  _args[1] = ViewableRange /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_ViewOnlyMode(VARIANT_BOOL* ViewOnlyMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ViewOnlyMode"), DISPID(1134));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ViewOnlyMode /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISpreadsheetDispT<T>::get_ViewOnlyMode(void)
{
  VARIANT_BOOL ViewOnlyMode;
  this->get_ViewOnlyMode((VARIANT_BOOL*)&ViewOnlyMode);
  return ViewOnlyMode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_Windows(Owc10_xp::Windows** Windows/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Windows"), DISPID(1135));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Windows**)Windows /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Windows* __fastcall
ISpreadsheetDispT<T>::get_Windows(void)
{
  Owc10_xp::Windows* Windows;
  this->get_Windows((Owc10_xp::Windows**)&Windows);
  return Windows;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_Workbooks(Owc10_xp::Workbooks** Workbooks/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Workbooks"), DISPID(1136));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Workbooks**)Workbooks /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Workbooks* __fastcall
ISpreadsheetDispT<T>::get_Workbooks(void)
{
  Owc10_xp::Workbooks* Workbooks;
  this->get_Workbooks((Owc10_xp::Workbooks**)&Workbooks);
  return Workbooks;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_Worksheets(Owc10_xp::Worksheets** Worksheets/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Worksheets"), DISPID(1137));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Worksheets**)Worksheets /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Worksheets* __fastcall
ISpreadsheetDispT<T>::get_Worksheets(void)
{
  Owc10_xp::Worksheets* Worksheets;
  this->get_Worksheets((Owc10_xp::Worksheets**)&Worksheets);
  return Worksheets;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_XMLData(BSTR* Data/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XMLData"), DISPID(1006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Data /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISpreadsheetDispT<T>::get_XMLData(void)
{
  BSTR Data;
  this->get_XMLData((BSTR*)&Data);
  return Data;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::set_XMLData(BSTR Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("XMLData"), DISPID(1006));
  TAutoArgs<1> _args;
  _args[1] = Data /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::get_XMLURL(BSTR* URL/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XMLURL"), DISPID(1007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(URL /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISpreadsheetDispT<T>::get_XMLURL(void)
{
  BSTR URL;
  this->get_XMLURL((BSTR*)&URL);
  return URL;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISpreadsheetDispT<T>::set_XMLURL(BSTR URL/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("XMLURL"), DISPID(1007));
  TAutoArgs<1> _args;
  _args[1] = URL /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  Worksheet
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A88-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetDispT<T>::Activate()
{
  _TDispID _dispid(*this, OLETEXT("Activate"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetDispT<T>::Calculate()
{
  _TDispID _dispid(*this, OLETEXT("Calculate"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetDispT<T>::Copy(VARIANT Before/*[in,opt]*/, VARIANT After/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Copy"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<2> _args;
  _args[1] = Before /*[VT_VARIANT:0]*/;
  _args[2] = After /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetDispT<T>::DumpStringTable()
{
  _TDispID _dispid(*this, OLETEXT("DumpStringTable"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetDispT<T>::_Evaluate(VARIANT Expression/*[in]*/, VARIANT* Result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Evaluate"), DISPID(-5));
  TAutoArgs<1> _args;
  _args[1] = Expression /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(Result /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
WorksheetDispT<T>::_Evaluate(VARIANT Expression/*[in]*/)
{
  VARIANT Result;
  this->_Evaluate(Expression, (VARIANT*)&Result);
  return Result;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetDispT<T>::Evaluate(VARIANT Expression/*[in]*/, VARIANT* Result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Evaluate"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<1> _args;
  _args[1] = Expression /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(Result /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
WorksheetDispT<T>::Evaluate(VARIANT Expression/*[in]*/)
{
  VARIANT Result;
  this->Evaluate(Expression, (VARIANT*)&Result);
  return Result;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetDispT<T>::Move(VARIANT Before/*[in,opt]*/, VARIANT After/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Move"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<2> _args;
  _args[1] = Before /*[VT_VARIANT:0]*/;
  _args[2] = After /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetDispT<T>::Paste(VARIANT* Destination/*[in,opt]*/, VARIANT* Link/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Paste"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<2> _args;
  _args[1] = Destination /*[VT_VARIANT:1]*/;
  _args[2] = Link /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetDispT<T>::Protect(VARIANT* Password/*[in,opt]*/, VARIANT* DrawingObjects/*[in,opt]*/, 
                           VARIANT* Contents/*[in,opt]*/, VARIANT* Scenarios/*[in,opt]*/, 
                           VARIANT* UserInterfaceOnly/*[in,opt]*/, 
                           VARIANT* AllowFormattingCells/*[in,opt]*/, 
                           VARIANT* AllowFormattingColumns/*[in,opt]*/, 
                           VARIANT* AllowFormattingRows/*[in,opt]*/, 
                           VARIANT* AllowInsertingColumns/*[in,opt]*/, 
                           VARIANT* AllowInsertingRows/*[in,opt]*/, 
                           VARIANT* AllowInsertingHyperlinks/*[in,opt]*/, 
                           VARIANT* AllowDeletingColumns/*[in,opt]*/, 
                           VARIANT* AllowDeletingRows/*[in,opt]*/, VARIANT* AllowSorting/*[in,opt]*/
                           , VARIANT* AllowFiltering/*[in,opt]*/, 
                           VARIANT* AllowUsingPivotTableReports/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Protect"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  TAutoArgs<16> _args;
  _args[1] = Password /*[VT_VARIANT:1]*/;
  _args[2] = DrawingObjects /*[VT_VARIANT:1]*/;
  _args[3] = Contents /*[VT_VARIANT:1]*/;
  _args[4] = Scenarios /*[VT_VARIANT:1]*/;
  _args[5] = UserInterfaceOnly /*[VT_VARIANT:1]*/;
  _args[6] = AllowFormattingCells /*[VT_VARIANT:1]*/;
  _args[7] = AllowFormattingColumns /*[VT_VARIANT:1]*/;
  _args[8] = AllowFormattingRows /*[VT_VARIANT:1]*/;
  _args[9] = AllowInsertingColumns /*[VT_VARIANT:1]*/;
  _args[10] = AllowInsertingRows /*[VT_VARIANT:1]*/;
  _args[11] = AllowInsertingHyperlinks /*[VT_VARIANT:1]*/;
  _args[12] = AllowDeletingColumns /*[VT_VARIANT:1]*/;
  _args[13] = AllowDeletingRows /*[VT_VARIANT:1]*/;
  _args[14] = AllowSorting /*[VT_VARIANT:1]*/;
  _args[15] = AllowFiltering /*[VT_VARIANT:1]*/;
  _args[16] = AllowUsingPivotTableReports /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetDispT<T>::Refresh()
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(DISPID_UNKNOWN/*[1610743818]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetDispT<T>::Select(VARIANT* Replace/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Select"), DISPID(DISPID_UNKNOWN/*[1610743819]*/));
  TAutoArgs<1> _args;
  _args[1] = Replace /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetDispT<T>::ShowAllData()
{
  _TDispID _dispid(*this, OLETEXT("ShowAllData"), DISPID(DISPID_UNKNOWN/*[1610743820]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetDispT<T>::Unprotect(VARIANT* Password/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Unprotect"), DISPID(DISPID_UNKNOWN/*[1610743821]*/));
  TAutoArgs<1> _args;
  _args[1] = Password /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetDispT<T>::get_Application(Owc10_xp::ISpreadsheet** ppApp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743822]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ISpreadsheet**)ppApp /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ISpreadsheet* __fastcall
WorksheetDispT<T>::get_Application(void)
{
  Owc10_xp::ISpreadsheet* ppApp;
  this->get_Application((Owc10_xp::ISpreadsheet**)&ppApp);
  return ppApp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetDispT<T>::get_AutoFilter(Owc10_xp::AutoFilter** AutoFilter/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoFilter"), DISPID(DISPID_UNKNOWN/*[1610743823]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::AutoFilter**)AutoFilter /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::AutoFilter* __fastcall
WorksheetDispT<T>::get_AutoFilter(void)
{
  Owc10_xp::AutoFilter* AutoFilter;
  this->get_AutoFilter((Owc10_xp::AutoFilter**)&AutoFilter);
  return AutoFilter;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetDispT<T>::get_AutoFilterMode(VARIANT_BOOL* AutoFilterMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoFilterMode"), DISPID(DISPID_UNKNOWN/*[1610743824]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AutoFilterMode /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
WorksheetDispT<T>::get_AutoFilterMode(void)
{
  VARIANT_BOOL AutoFilterMode;
  this->get_AutoFilterMode((VARIANT_BOOL*)&AutoFilterMode);
  return AutoFilterMode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetDispT<T>::set_AutoFilterMode(VARIANT_BOOL AutoFilterMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoFilterMode"), DISPID(1610743824));
  TAutoArgs<1> _args;
  _args[1] = AutoFilterMode /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetDispT<T>::get_Cells(Owc10_xp::_Range** Range/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Cells"), DISPID(DISPID_UNKNOWN/*[1610743826]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::_Range**)Range /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::_Range* __fastcall
WorksheetDispT<T>::get_Cells(void)
{
  Owc10_xp::_Range* Range;
  this->get_Cells((Owc10_xp::_Range**)&Range);
  return Range;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetDispT<T>::get_Columns(Owc10_xp::_Range** Range/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Columns"), DISPID(DISPID_UNKNOWN/*[1610743827]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::_Range**)Range /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::_Range* __fastcall
WorksheetDispT<T>::get_Columns(void)
{
  Owc10_xp::_Range* Range;
  this->get_Columns((Owc10_xp::_Range**)&Range);
  return Range;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetDispT<T>::get_CommandText(BSTR* CommandText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CommandText"), DISPID(DISPID_UNKNOWN/*[1610743828]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CommandText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
WorksheetDispT<T>::get_CommandText(void)
{
  BSTR CommandText;
  this->get_CommandText((BSTR*)&CommandText);
  return CommandText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetDispT<T>::set_CommandText(BSTR CommandText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CommandText"), DISPID(1610743828));
  TAutoArgs<1> _args;
  _args[1] = CommandText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetDispT<T>::get_ConnectionString(BSTR* ConnectionString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionString"), DISPID(DISPID_UNKNOWN/*[1610743830]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ConnectionString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
WorksheetDispT<T>::get_ConnectionString(void)
{
  BSTR ConnectionString;
  this->get_ConnectionString((BSTR*)&ConnectionString);
  return ConnectionString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetDispT<T>::set_ConnectionString(BSTR ConnectionString/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionString"), DISPID(1610743830));
  TAutoArgs<1> _args;
  _args[1] = ConnectionString /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetDispT<T>::get_DataMember(Msdatasrc_xp::DataMember* DataMember/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataMember"), DISPID(DISPID_UNKNOWN/*[1610743832]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DataMember /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msdatasrc_xp::DataMember __fastcall
WorksheetDispT<T>::get_DataMember(void)
{
  Msdatasrc_xp::DataMember DataMember;
  this->get_DataMember((Msdatasrc_xp::DataMember*)&DataMember);
  return DataMember;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetDispT<T>::set_DataMember(Msdatasrc_xp::DataMember DataMember/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataMember"), DISPID(1610743832));
  TAutoArgs<1> _args;
  _args[1] = DataMember /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetDispT<T>::get_EnableAutoFilter(VARIANT_BOOL* EnableAutoFilter/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableAutoFilter"), DISPID(DISPID_UNKNOWN/*[1610743834]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(EnableAutoFilter /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
WorksheetDispT<T>::get_EnableAutoFilter(void)
{
  VARIANT_BOOL EnableAutoFilter;
  this->get_EnableAutoFilter((VARIANT_BOOL*)&EnableAutoFilter);
  return EnableAutoFilter;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetDispT<T>::set_EnableAutoFilter(VARIANT_BOOL EnableAutoFilter/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableAutoFilter"), DISPID(1610743834));
  TAutoArgs<1> _args;
  _args[1] = EnableAutoFilter /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetDispT<T>::get_FilterMode(VARIANT_BOOL* FilterMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FilterMode"), DISPID(DISPID_UNKNOWN/*[1610743836]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FilterMode /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
WorksheetDispT<T>::get_FilterMode(void)
{
  VARIANT_BOOL FilterMode;
  this->get_FilterMode((VARIANT_BOOL*)&FilterMode);
  return FilterMode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetDispT<T>::get_Index(long* Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(DISPID_UNKNOWN/*[1610743837]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Index /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
WorksheetDispT<T>::get_Index(void)
{
  long Index;
  this->get_Index((long*)&Index);
  return Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetDispT<T>::get_IsDataBound(VARIANT_BOOL* pf/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsDataBound"), DISPID(DISPID_UNKNOWN/*[1610743838]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pf /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
WorksheetDispT<T>::get_IsDataBound(void)
{
  VARIANT_BOOL pf;
  this->get_IsDataBound((VARIANT_BOOL*)&pf);
  return pf;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetDispT<T>::set_IsDataBound(VARIANT_BOOL pf/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsDataBound"), DISPID(1610743838));
  TAutoArgs<1> _args;
  _args[1] = pf /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(DISPID_UNKNOWN/*[1610743840]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
WorksheetDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1610743840));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetDispT<T>::get_Names(Owc10_xp::Names** Names/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Names"), DISPID(DISPID_UNKNOWN/*[1610743842]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Names**)Names /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Names* __fastcall
WorksheetDispT<T>::get_Names(void)
{
  Owc10_xp::Names* Names;
  this->get_Names((Owc10_xp::Names**)&Names);
  return Names;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetDispT<T>::get_Next(Owc10_xp::Worksheet** wks/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Next"), DISPID(DISPID_UNKNOWN/*[1610743843]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Worksheet**)wks /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Worksheet* __fastcall
WorksheetDispT<T>::get_Next(void)
{
  Owc10_xp::Worksheet* wks;
  this->get_Next((Owc10_xp::Worksheet**)&wks);
  return wks;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetDispT<T>::get_Parent(Owc10_xp::Workbook** Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743844]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Workbook**)Parent /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Workbook* __fastcall
WorksheetDispT<T>::get_Parent(void)
{
  Owc10_xp::Workbook* Parent;
  this->get_Parent((Owc10_xp::Workbook**)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetDispT<T>::get_Previous(Owc10_xp::Worksheet** wks/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Previous"), DISPID(DISPID_UNKNOWN/*[1610743845]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Worksheet**)wks /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Worksheet* __fastcall
WorksheetDispT<T>::get_Previous(void)
{
  Owc10_xp::Worksheet* wks;
  this->get_Previous((Owc10_xp::Worksheet**)&wks);
  return wks;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetDispT<T>::get_ProtectContents(VARIANT_BOOL* prot/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ProtectContents"), DISPID(DISPID_UNKNOWN/*[1610743846]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(prot /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
WorksheetDispT<T>::get_ProtectContents(void)
{
  VARIANT_BOOL prot;
  this->get_ProtectContents((VARIANT_BOOL*)&prot);
  return prot;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetDispT<T>::get_Protection(Owc10_xp::Protection** prot/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Protection"), DISPID(DISPID_UNKNOWN/*[1610743847]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Protection**)prot /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Protection* __fastcall
WorksheetDispT<T>::get_Protection(void)
{
  Owc10_xp::Protection* prot;
  this->get_Protection((Owc10_xp::Protection**)&prot);
  return prot;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetDispT<T>::get_ProtectionMode(VARIANT_BOOL* prot/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ProtectionMode"), DISPID(DISPID_UNKNOWN/*[1610743848]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(prot /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
WorksheetDispT<T>::get_ProtectionMode(void)
{
  VARIANT_BOOL prot;
  this->get_ProtectionMode((VARIANT_BOOL*)&prot);
  return prot;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetDispT<T>::get_Range(VARIANT Cell1/*[in]*/, VARIANT Cell2/*[in,opt]*/, 
                             Owc10_xp::_Range** Range/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Range"), DISPID(DISPID_UNKNOWN/*[1610743849]*/));
  TAutoArgs<2> _args;
  _args[1] = Cell1 /*[VT_VARIANT:0]*/;
  _args[2] = Cell2 /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::_Range**)Range /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::_Range* __fastcall
WorksheetDispT<T>::get_Range(VARIANT Cell1/*[in]*/, VARIANT Cell2/*[in,opt]*/)
{
  Owc10_xp::_Range* Range;
  this->get_Range(Cell1, Cell2, (Owc10_xp::_Range**)&Range);
  return Range;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetDispT<T>::get_Rows(Owc10_xp::_Range** Range/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Rows"), DISPID(DISPID_UNKNOWN/*[1610743850]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::_Range**)Range /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::_Range* __fastcall
WorksheetDispT<T>::get_Rows(void)
{
  Owc10_xp::_Range* Range;
  this->get_Rows((Owc10_xp::_Range**)&Range);
  return Range;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetDispT<T>::get_StandardHeight(double* hgt/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StandardHeight"), DISPID(DISPID_UNKNOWN/*[1610743851]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(hgt /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
WorksheetDispT<T>::get_StandardHeight(void)
{
  double hgt;
  this->get_StandardHeight((double*)&hgt);
  return hgt;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetDispT<T>::get_StandardWidth(double* wid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StandardWidth"), DISPID(DISPID_UNKNOWN/*[1610743852]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(wid /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
WorksheetDispT<T>::get_StandardWidth(void)
{
  double wid;
  this->get_StandardWidth((double*)&wid);
  return wid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetDispT<T>::set_StandardWidth(double wid/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StandardWidth"), DISPID(1610743852));
  TAutoArgs<1> _args;
  _args[1] = wid /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetDispT<T>::get_Type(Owc10_xp::XlSheetType* typ/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(DISPID_UNKNOWN/*[1610743854]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)typ /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::XlSheetType __fastcall
WorksheetDispT<T>::get_Type(void)
{
  Owc10_xp::XlSheetType typ;
  this->get_Type((Owc10_xp::XlSheetType*)&typ);
  return typ;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetDispT<T>::get_UsedRange(Owc10_xp::_Range** Range/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UsedRange"), DISPID(DISPID_UNKNOWN/*[1610743855]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::_Range**)Range /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::_Range* __fastcall
WorksheetDispT<T>::get_UsedRange(void)
{
  Owc10_xp::_Range* Range;
  this->get_UsedRange((Owc10_xp::_Range**)&Range);
  return Range;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetDispT<T>::get_Visible(Owc10_xp::XlSheetVisibility* vis/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(DISPID_UNKNOWN/*[1610743856]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)vis /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::XlSheetVisibility __fastcall
WorksheetDispT<T>::get_Visible(void)
{
  Owc10_xp::XlSheetVisibility vis;
  this->get_Visible((Owc10_xp::XlSheetVisibility*)&vis);
  return vis;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetDispT<T>::set_Visible(Owc10_xp::XlSheetVisibility vis/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1610743856));
  TAutoArgs<1> _args;
  _args[1] = (int)vis /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  AutoFilter
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B0E-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AutoFilterDispT<T>::get_Application(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ISpreadsheet**)Dispatch /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ISpreadsheet* __fastcall
AutoFilterDispT<T>::get_Application(void)
{
  Owc10_xp::ISpreadsheet* Dispatch;
  this->get_Application((Owc10_xp::ISpreadsheet**)&Dispatch);
  return Dispatch;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AutoFilterDispT<T>::get_Filters(Owc10_xp::Filters** Filters/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Filters"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Filters**)Filters /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Filters* __fastcall
AutoFilterDispT<T>::get_Filters(void)
{
  Owc10_xp::Filters* Filters;
  this->get_Filters((Owc10_xp::Filters**)&Filters);
  return Filters;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AutoFilterDispT<T>::get_Parent(Owc10_xp::Worksheet** Dispatch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Worksheet**)Dispatch /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Worksheet* __fastcall
AutoFilterDispT<T>::get_Parent(void)
{
  Owc10_xp::Worksheet* Dispatch;
  this->get_Parent((Owc10_xp::Worksheet**)&Dispatch);
  return Dispatch;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AutoFilterDispT<T>::get_Range(Owc10_xp::_Range** Range/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Range"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::_Range**)Range /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::_Range* __fastcall
AutoFilterDispT<T>::get_Range(void)
{
  Owc10_xp::_Range* Range;
  this->get_Range((Owc10_xp::_Range**)&Range);
  return Range;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AutoFilterDispT<T>::Apply()
{
  _TDispID _dispid(*this, OLETEXT("Apply"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  Filters
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B04-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FiltersDispT<T>::get__NewEnum(LPUNKNOWN* punk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(punk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
FiltersDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN punk;
  this->get__NewEnum((LPUNKNOWN*)&punk);
  return punk;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FiltersDispT<T>::get_Application(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ISpreadsheet**)Dispatch /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ISpreadsheet* __fastcall
FiltersDispT<T>::get_Application(void)
{
  Owc10_xp::ISpreadsheet* Dispatch;
  this->get_Application((Owc10_xp::ISpreadsheet**)&Dispatch);
  return Dispatch;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FiltersDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
FiltersDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FiltersDispT<T>::get_Item(long Index/*[in]*/, Owc10_xp::Filter** Filter/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Filter**)Filter /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Filter* __fastcall
FiltersDispT<T>::get_Item(long Index/*[in]*/)
{
  Owc10_xp::Filter* Filter;
  this->get_Item(Index, (Owc10_xp::Filter**)&Filter);
  return Filter;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FiltersDispT<T>::get_Parent(Owc10_xp::AutoFilter** Dispatch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::AutoFilter**)Dispatch /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::AutoFilter* __fastcall
FiltersDispT<T>::get_Parent(void)
{
  Owc10_xp::AutoFilter* Dispatch;
  this->get_Parent((Owc10_xp::AutoFilter**)&Dispatch);
  return Dispatch;
}

// *********************************************************************//
// DispIntf:  Filter
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B03-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FilterDispT<T>::get_Application(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ISpreadsheet**)Dispatch /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ISpreadsheet* __fastcall
FilterDispT<T>::get_Application(void)
{
  Owc10_xp::ISpreadsheet* Dispatch;
  this->get_Application((Owc10_xp::ISpreadsheet**)&Dispatch);
  return Dispatch;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FilterDispT<T>::get_Criteria(Owc10_xp::Criteria** Criteria/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Criteria"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Criteria**)Criteria /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Criteria* __fastcall
FilterDispT<T>::get_Criteria(void)
{
  Owc10_xp::Criteria* Criteria;
  this->get_Criteria((Owc10_xp::Criteria**)&Criteria);
  return Criteria;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FilterDispT<T>::get_Parent(Owc10_xp::AutoFilter** Dispatch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::AutoFilter**)Dispatch /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::AutoFilter* __fastcall
FilterDispT<T>::get_Parent(void)
{
  Owc10_xp::AutoFilter* Dispatch;
  this->get_Parent((Owc10_xp::AutoFilter**)&Dispatch);
  return Dispatch;
}

// *********************************************************************//
// DispIntf:  Criteria
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B02-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CriteriaDispT<T>::get__NewEnum(LPUNKNOWN* punk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(punk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
CriteriaDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN punk;
  this->get__NewEnum((LPUNKNOWN*)&punk);
  return punk;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CriteriaDispT<T>::get_Application(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ISpreadsheet**)Dispatch /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ISpreadsheet* __fastcall
CriteriaDispT<T>::get_Application(void)
{
  Owc10_xp::ISpreadsheet* Dispatch;
  this->get_Application((Owc10_xp::ISpreadsheet**)&Dispatch);
  return Dispatch;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CriteriaDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
CriteriaDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CriteriaDispT<T>::get_FilterFunction(Owc10_xp::SheetFilterFunction* FilterFunction/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FilterFunction"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)FilterFunction /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::SheetFilterFunction __fastcall
CriteriaDispT<T>::get_FilterFunction(void)
{
  Owc10_xp::SheetFilterFunction FilterFunction;
  this->get_FilterFunction((Owc10_xp::SheetFilterFunction*)&FilterFunction);
  return FilterFunction;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CriteriaDispT<T>::set_FilterFunction(Owc10_xp::SheetFilterFunction FilterFunction/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FilterFunction"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = (int)FilterFunction /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CriteriaDispT<T>::get_Item(long Index/*[in]*/, VARIANT* Criterion/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Criterion /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
CriteriaDispT<T>::get_Item(long Index/*[in]*/)
{
  VARIANT Criterion;
  this->get_Item(Index, (VARIANT*)&Criterion);
  return Criterion;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CriteriaDispT<T>::get_Parent(Owc10_xp::Filter** Dispatch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Filter**)Dispatch /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Filter* __fastcall
CriteriaDispT<T>::get_Parent(void)
{
  Owc10_xp::Filter* Dispatch;
  this->get_Parent((Owc10_xp::Filter**)&Dispatch);
  return Dispatch;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CriteriaDispT<T>::get_ShowAll(VARIANT_BOOL* ShowAll/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowAll"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ShowAll /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
CriteriaDispT<T>::get_ShowAll(void)
{
  VARIANT_BOOL ShowAll;
  this->get_ShowAll((VARIANT_BOOL*)&ShowAll);
  return ShowAll;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CriteriaDispT<T>::set_ShowAll(VARIANT_BOOL ShowAll/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowAll"), DISPID(1610743815));
  TAutoArgs<1> _args;
  _args[1] = ShowAll /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CriteriaDispT<T>::Add(BSTR Criterion/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  TAutoArgs<1> _args;
  _args[1] = Criterion /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  Names
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39BAD-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NamesDispT<T>::get__NewEnum(LPUNKNOWN* punk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(punk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
NamesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN punk;
  this->get__NewEnum((LPUNKNOWN*)&punk);
  return punk;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NamesDispT<T>::get_Application(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ISpreadsheet**)Dispatch /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ISpreadsheet* __fastcall
NamesDispT<T>::get_Application(void)
{
  Owc10_xp::ISpreadsheet* Dispatch;
  this->get_Application((Owc10_xp::ISpreadsheet**)&Dispatch);
  return Dispatch;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NamesDispT<T>::get_Count(long* pc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pc /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
NamesDispT<T>::get_Count(void)
{
  long pc;
  this->get_Count((long*)&pc);
  return pc;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NamesDispT<T>::get_Parent(LPDISPATCH* ppXSheet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppXSheet /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
NamesDispT<T>::get_Parent(void)
{
  LPDISPATCH ppXSheet;
  this->get_Parent((LPDISPATCH*)&ppXSheet);
  return ppXSheet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NamesDispT<T>::Item(VARIANT Index/*[in,opt]*/, VARIANT IndexLocal/*[in,opt]*/, 
                    VARIANT RefersTo/*[in,opt]*/, Owc10_xp::Name** ppXName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<3> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  _args[2] = IndexLocal /*[VT_VARIANT:0]*/;
  _args[3] = RefersTo /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Name**)ppXName /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::Name* __fastcall
NamesDispT<T>::Item(VARIANT Index/*[in,opt]*/, VARIANT IndexLocal/*[in,opt]*/, 
                    VARIANT RefersTo/*[in,opt]*/)
{
  Owc10_xp::Name* ppXName;
  this->Item(Index, IndexLocal, RefersTo, (Owc10_xp::Name**)&ppXName);
  return ppXName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NamesDispT<T>::Add(VARIANT Name/*[in,opt]*/, VARIANT RefersTo/*[in,opt]*/, 
                   VARIANT Visible/*[in,opt]*/, VARIANT MacroType/*[in,opt]*/, 
                   VARIANT ShortcutKey/*[in,opt]*/, VARIANT Category/*[in,opt]*/, 
                   VARIANT NameLocal/*[in,opt]*/, VARIANT RefersToLocal/*[in,opt]*/, 
                   VARIANT CategoryLocal/*[in,opt]*/, VARIANT RefersToR1C1/*[in,opt]*/, 
                   VARIANT RefersToR1C1Local/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<11> _args;
  _args[1] = Name /*[VT_VARIANT:0]*/;
  _args[2] = RefersTo /*[VT_VARIANT:0]*/;
  _args[3] = Visible /*[VT_VARIANT:0]*/;
  _args[4] = MacroType /*[VT_VARIANT:0]*/;
  _args[5] = ShortcutKey /*[VT_VARIANT:0]*/;
  _args[6] = Category /*[VT_VARIANT:0]*/;
  _args[7] = NameLocal /*[VT_VARIANT:0]*/;
  _args[8] = RefersToLocal /*[VT_VARIANT:0]*/;
  _args[9] = CategoryLocal /*[VT_VARIANT:0]*/;
  _args[10] = RefersToR1C1 /*[VT_VARIANT:0]*/;
  _args[11] = RefersToR1C1Local /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NamesDispT<T>::AddUI(VARIANT varName/*[in,opt]*/, VARIANT varRefersTo/*[in,opt]*/, 
                     VARIANT varVisible/*[in,opt]*/, VARIANT varMacroType/*[in,opt]*/, 
                     VARIANT varShortcutKey/*[in,opt]*/, VARIANT varCategory/*[in,opt]*/, 
                     VARIANT varNameLocal/*[in,opt]*/, VARIANT varRefersToLocal/*[in,opt]*/, 
                     VARIANT varCategoryLocal/*[in,opt]*/, VARIANT varRefersToR1C1/*[in,opt]*/, 
                     VARIANT varRefersToR1C1Local/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddUI"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<11> _args;
  _args[1] = varName /*[VT_VARIANT:0]*/;
  _args[2] = varRefersTo /*[VT_VARIANT:0]*/;
  _args[3] = varVisible /*[VT_VARIANT:0]*/;
  _args[4] = varMacroType /*[VT_VARIANT:0]*/;
  _args[5] = varShortcutKey /*[VT_VARIANT:0]*/;
  _args[6] = varCategory /*[VT_VARIANT:0]*/;
  _args[7] = varNameLocal /*[VT_VARIANT:0]*/;
  _args[8] = varRefersToLocal /*[VT_VARIANT:0]*/;
  _args[9] = varCategoryLocal /*[VT_VARIANT:0]*/;
  _args[10] = varRefersToR1C1 /*[VT_VARIANT:0]*/;
  _args[11] = varRefersToR1C1Local /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  Name
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39BAC-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NameDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NameDispT<T>::get_Application(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ISpreadsheet**)Dispatch /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ISpreadsheet* __fastcall
NameDispT<T>::get_Application(void)
{
  Owc10_xp::ISpreadsheet* Dispatch;
  this->get_Application((Owc10_xp::ISpreadsheet**)&Dispatch);
  return Dispatch;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NameDispT<T>::get_Index(long* pc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pc /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
NameDispT<T>::get_Index(void)
{
  long pc;
  this->get_Index((long*)&pc);
  return pc;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NameDispT<T>::get_Name_(BSTR* pbstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
NameDispT<T>::get_Name_(void)
{
  BSTR pbstr;
  this->get_Name_((BSTR*)&pbstr);
  return pbstr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NameDispT<T>::set_Name_(BSTR pbstr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = pbstr /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NameDispT<T>::get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
NameDispT<T>::get_Parent(void)
{
  LPDISPATCH ppidisp;
  this->get_Parent((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NameDispT<T>::get_RefersTo(VARIANT* pvarVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RefersTo"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
NameDispT<T>::get_RefersTo(void)
{
  VARIANT pvarVal;
  this->get_RefersTo((VARIANT*)&pvarVal);
  return pvarVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NameDispT<T>::set_RefersTo(VARIANT pvarVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RefersTo"), DISPID(1610743814));
  TAutoArgs<1> _args;
  _args[1] = pvarVal /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NameDispT<T>::get_RefersToLocal(VARIANT* pvarVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RefersToLocal"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
NameDispT<T>::get_RefersToLocal(void)
{
  VARIANT pvarVal;
  this->get_RefersToLocal((VARIANT*)&pvarVal);
  return pvarVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NameDispT<T>::set_RefersToLocal(VARIANT pvarVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RefersToLocal"), DISPID(1610743816));
  TAutoArgs<1> _args;
  _args[1] = pvarVal /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NameDispT<T>::get_RefersToRange(Owc10_xp::_Range** ppIDispatchXRange/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RefersToRange"), DISPID(DISPID_UNKNOWN/*[1610743818]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::_Range**)ppIDispatchXRange /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::_Range* __fastcall
NameDispT<T>::get_RefersToRange(void)
{
  Owc10_xp::_Range* ppIDispatchXRange;
  this->get_RefersToRange((Owc10_xp::_Range**)&ppIDispatchXRange);
  return ppIDispatchXRange;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NameDispT<T>::get_Value(BSTR* pBstrOut/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBstrOut /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
NameDispT<T>::get_Value(void)
{
  BSTR pBstrOut;
  this->get_Value((BSTR*)&pBstrOut);
  return pBstrOut;
}

// *********************************************************************//
// DispIntf:  Workbook
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39BA6-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorkbookDispT<T>::get_ActiveSheet(Owc10_xp::Worksheet** Worksheet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveSheet"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Worksheet**)Worksheet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Worksheet* __fastcall
WorkbookDispT<T>::get_ActiveSheet(void)
{
  Owc10_xp::Worksheet* Worksheet;
  this->get_ActiveSheet((Owc10_xp::Worksheet**)&Worksheet);
  return Worksheet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorkbookDispT<T>::get_Application(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ISpreadsheet**)Dispatch /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ISpreadsheet* __fastcall
WorkbookDispT<T>::get_Application(void)
{
  Owc10_xp::ISpreadsheet* Dispatch;
  this->get_Application((Owc10_xp::ISpreadsheet**)&Dispatch);
  return Dispatch;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorkbookDispT<T>::get_CalculationVersion(long* Version/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CalculationVersion"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Version /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
WorkbookDispT<T>::get_CalculationVersion(void)
{
  long Version;
  this->get_CalculationVersion((long*)&Version);
  return Version;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorkbookDispT<T>::get_Colors(VARIANT Index/*[in,opt]*/, VARIANT* Color/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Colors"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(Color /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
WorkbookDispT<T>::get_Colors(VARIANT Index/*[in,opt]*/)
{
  VARIANT Color;
  this->get_Colors(Index, (VARIANT*)&Color);
  return Color;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorkbookDispT<T>::set_Colors(VARIANT Index/*[in,opt]*/, VARIANT Color/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Colors"), DISPID(1610743811));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  _args[2] = Color /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorkbookDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
WorkbookDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorkbookDispT<T>::get_Names(Owc10_xp::Names** Names/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Names"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Names**)Names /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Names* __fastcall
WorkbookDispT<T>::get_Names(void)
{
  Owc10_xp::Names* Names;
  this->get_Names((Owc10_xp::Names**)&Names);
  return Names;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorkbookDispT<T>::get_Parent(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ISpreadsheet**)Dispatch /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ISpreadsheet* __fastcall
WorkbookDispT<T>::get_Parent(void)
{
  Owc10_xp::ISpreadsheet* Dispatch;
  this->get_Parent((Owc10_xp::ISpreadsheet**)&Dispatch);
  return Dispatch;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorkbookDispT<T>::get_ProtectStructure(VARIANT_BOOL* ProtectStructure/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ProtectStructure"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ProtectStructure /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
WorkbookDispT<T>::get_ProtectStructure(void)
{
  VARIANT_BOOL ProtectStructure;
  this->get_ProtectStructure((VARIANT_BOOL*)&ProtectStructure);
  return ProtectStructure;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorkbookDispT<T>::get_Sheets(Owc10_xp::Sheets** Sheets/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Sheets"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Sheets**)Sheets /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Sheets* __fastcall
WorkbookDispT<T>::get_Sheets(void)
{
  Owc10_xp::Sheets* Sheets;
  this->get_Sheets((Owc10_xp::Sheets**)&Sheets);
  return Sheets;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorkbookDispT<T>::get_Windows(Owc10_xp::Windows** Windows/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Windows"), DISPID(DISPID_UNKNOWN/*[1610743818]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Windows**)Windows /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Windows* __fastcall
WorkbookDispT<T>::get_Windows(void)
{
  Owc10_xp::Windows* Windows;
  this->get_Windows((Owc10_xp::Windows**)&Windows);
  return Windows;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorkbookDispT<T>::get_Worksheets(Owc10_xp::Worksheets** Worksheets/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Worksheets"), DISPID(DISPID_UNKNOWN/*[1610743819]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Worksheets**)Worksheets /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Worksheets* __fastcall
WorkbookDispT<T>::get_Worksheets(void)
{
  Owc10_xp::Worksheets* Worksheets;
  this->get_Worksheets((Owc10_xp::Worksheets**)&Worksheets);
  return Worksheets;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorkbookDispT<T>::Protect(VARIANT Password/*[in,opt]*/, VARIANT Structure/*[in,opt]*/, 
                          VARIANT Windows/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Protect"), DISPID(DISPID_UNKNOWN/*[1610743820]*/));
  TAutoArgs<3> _args;
  _args[1] = Password /*[VT_VARIANT:0]*/;
  _args[2] = Structure /*[VT_VARIANT:0]*/;
  _args[3] = Windows /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorkbookDispT<T>::ResetColors()
{
  _TDispID _dispid(*this, OLETEXT("ResetColors"), DISPID(DISPID_UNKNOWN/*[1610743821]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorkbookDispT<T>::Unprotect(VARIANT Password/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Unprotect"), DISPID(DISPID_UNKNOWN/*[1610743822]*/));
  TAutoArgs<1> _args;
  _args[1] = Password /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  Sheets
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39BA7-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SheetsDispT<T>::get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
SheetsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunk;
  this->get__NewEnum((LPUNKNOWN*)&ppunk);
  return ppunk;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SheetsDispT<T>::get_Application(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ISpreadsheet**)Dispatch /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ISpreadsheet* __fastcall
SheetsDispT<T>::get_Application(void)
{
  Owc10_xp::ISpreadsheet* Dispatch;
  this->get_Application((Owc10_xp::ISpreadsheet**)&Dispatch);
  return Dispatch;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SheetsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
SheetsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SheetsDispT<T>::get_Item(VARIANT Index/*[in]*/, LPDISPATCH* Dispatch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(Dispatch /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
SheetsDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  LPDISPATCH Dispatch;
  this->get_Item(Index, (LPDISPATCH*)&Dispatch);
  return Dispatch;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SheetsDispT<T>::get_Parent(Owc10_xp::Workbook** Dispatch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Workbook**)Dispatch /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Workbook* __fastcall
SheetsDispT<T>::get_Parent(void)
{
  Owc10_xp::Workbook* Dispatch;
  this->get_Parent((Owc10_xp::Workbook**)&Dispatch);
  return Dispatch;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SheetsDispT<T>::get_Visible(VARIANT* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Visible /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
SheetsDispT<T>::get_Visible(void)
{
  VARIANT Visible;
  this->get_Visible((VARIANT*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SheetsDispT<T>::set_Visible(VARIANT Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1610743813));
  TAutoArgs<1> _args;
  _args[1] = Visible /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SheetsDispT<T>::Add(VARIANT Before/*[in,opt]*/, VARIANT After/*[in,opt]*/, VARIANT Count/*[in,opt]*/
                    , VARIANT Type/*[in,opt]*/, LPDISPATCH* Dispatch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<4> _args;
  _args[1] = Before /*[VT_VARIANT:0]*/;
  _args[2] = After /*[VT_VARIANT:0]*/;
  _args[3] = Count /*[VT_VARIANT:0]*/;
  _args[4] = Type /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(Dispatch /*[VT_DISPATCH:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
SheetsDispT<T>::Add(VARIANT Before/*[in,opt]*/, VARIANT After/*[in,opt]*/, VARIANT Count/*[in,opt]*/, 
                    VARIANT Type/*[in,opt]*/)
{
  LPDISPATCH Dispatch;
  this->Add(Before, After, Count, Type, (LPDISPATCH*)&Dispatch);
  return Dispatch;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SheetsDispT<T>::Copy(VARIANT Before/*[in,opt]*/, VARIANT After/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Copy"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<2> _args;
  _args[1] = Before /*[VT_VARIANT:0]*/;
  _args[2] = After /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SheetsDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SheetsDispT<T>::Move(VARIANT Before/*[in,opt]*/, VARIANT After/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Move"), DISPID(DISPID_UNKNOWN/*[1610743818]*/));
  TAutoArgs<2> _args;
  _args[1] = Before /*[VT_VARIANT:0]*/;
  _args[2] = After /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SheetsDispT<T>::Select(VARIANT Replace/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Select"), DISPID(DISPID_UNKNOWN/*[1610743819]*/));
  TAutoArgs<1> _args;
  _args[1] = Replace /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  Windows
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39BAB-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WindowsDispT<T>::get_Application(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ISpreadsheet**)Dispatch /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ISpreadsheet* __fastcall
WindowsDispT<T>::get_Application(void)
{
  Owc10_xp::ISpreadsheet* Dispatch;
  this->get_Application((Owc10_xp::ISpreadsheet**)&Dispatch);
  return Dispatch;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WindowsDispT<T>::get_Parent(LPDISPATCH* Dispatch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Dispatch /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
WindowsDispT<T>::get_Parent(void)
{
  LPDISPATCH Dispatch;
  this->get_Parent((LPDISPATCH*)&Dispatch);
  return Dispatch;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WindowsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
WindowsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WindowsDispT<T>::get_Item(long Index/*[in]*/, Owc10_xp::WINDOW** wndw/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::WINDOW**)wndw /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::WINDOW* __fastcall
WindowsDispT<T>::get_Item(long Index/*[in]*/)
{
  Owc10_xp::WINDOW* wndw;
  this->get_Item(Index, (Owc10_xp::WINDOW**)&wndw);
  return wndw;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WindowsDispT<T>::get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
WindowsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunk;
  this->get__NewEnum((LPUNKNOWN*)&ppunk);
  return ppunk;
}

// *********************************************************************//
// DispIntf:  Window
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39BAA-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_Application(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ISpreadsheet**)Dispatch /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ISpreadsheet* __fastcall
WINDOWDispT<T>::get_Application(void)
{
  Owc10_xp::ISpreadsheet* Dispatch;
  this->get_Application((Owc10_xp::ISpreadsheet**)&Dispatch);
  return Dispatch;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_Parent(Owc10_xp::Workbook** Dispatch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Workbook**)Dispatch /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Workbook* __fastcall
WINDOWDispT<T>::get_Parent(void)
{
  Owc10_xp::Workbook* Dispatch;
  this->get_Parent((Owc10_xp::Workbook**)&Dispatch);
  return Dispatch;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_ActiveCell(Owc10_xp::_Range** Range/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveCell"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::_Range**)Range /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::_Range* __fastcall
WINDOWDispT<T>::get_ActiveCell(void)
{
  Owc10_xp::_Range* Range;
  this->get_ActiveCell((Owc10_xp::_Range**)&Range);
  return Range;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_ActivePane(Owc10_xp::Pane** Pane/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActivePane"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Pane**)Pane /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Pane* __fastcall
WINDOWDispT<T>::get_ActivePane(void)
{
  Owc10_xp::Pane* Pane;
  this->get_ActivePane((Owc10_xp::Pane**)&Pane);
  return Pane;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_ActiveSheet(Owc10_xp::Worksheet** Sheet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveSheet"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Worksheet**)Sheet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Worksheet* __fastcall
WINDOWDispT<T>::get_ActiveSheet(void)
{
  Owc10_xp::Worksheet* Sheet;
  this->get_ActiveSheet((Owc10_xp::Worksheet**)&Sheet);
  return Sheet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_ColumnHeadings(Owc10_xp::Headings** hdgs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnHeadings"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Headings**)hdgs /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Headings* __fastcall
WINDOWDispT<T>::get_ColumnHeadings(void)
{
  Owc10_xp::Headings* hdgs;
  this->get_ColumnHeadings((Owc10_xp::Headings**)&hdgs);
  return hdgs;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_DisplayColumnHeadings(VARIANT_BOOL* pf/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayColumnHeadings"), DISPID(1013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pf /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
WINDOWDispT<T>::get_DisplayColumnHeadings(void)
{
  VARIANT_BOOL pf;
  this->get_DisplayColumnHeadings((VARIANT_BOOL*)&pf);
  return pf;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::set_DisplayColumnHeadings(VARIANT_BOOL pf/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayColumnHeadings"), DISPID(1013));
  TAutoArgs<1> _args;
  _args[1] = pf /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_DisplayCustomHeadings(VARIANT_BOOL* pf/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayCustomHeadings"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pf /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
WINDOWDispT<T>::get_DisplayCustomHeadings(void)
{
  VARIANT_BOOL pf;
  this->get_DisplayCustomHeadings((VARIANT_BOOL*)&pf);
  return pf;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::set_DisplayCustomHeadings(VARIANT_BOOL pf/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayCustomHeadings"), DISPID(1610743816));
  TAutoArgs<1> _args;
  _args[1] = pf /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_DisplayGridlines(VARIANT_BOOL* pf/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayGridlines"), DISPID(1015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pf /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
WINDOWDispT<T>::get_DisplayGridlines(void)
{
  VARIANT_BOOL pf;
  this->get_DisplayGridlines((VARIANT_BOOL*)&pf);
  return pf;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::set_DisplayGridlines(VARIANT_BOOL pf/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayGridlines"), DISPID(1015));
  TAutoArgs<1> _args;
  _args[1] = pf /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_DisplayHeadings(VARIANT_BOOL* pf/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayHeadings"), DISPID(1016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pf /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
WINDOWDispT<T>::get_DisplayHeadings(void)
{
  VARIANT_BOOL pf;
  this->get_DisplayHeadings((VARIANT_BOOL*)&pf);
  return pf;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::set_DisplayHeadings(VARIANT_BOOL pf/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayHeadings"), DISPID(1016));
  TAutoArgs<1> _args;
  _args[1] = pf /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_DisplayHorizontalScrollBar(VARIANT_BOOL* pf/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayHorizontalScrollBar"), DISPID(1017));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pf /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
WINDOWDispT<T>::get_DisplayHorizontalScrollBar(void)
{
  VARIANT_BOOL pf;
  this->get_DisplayHorizontalScrollBar((VARIANT_BOOL*)&pf);
  return pf;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::set_DisplayHorizontalScrollBar(VARIANT_BOOL pf/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayHorizontalScrollBar"), DISPID(1017));
  TAutoArgs<1> _args;
  _args[1] = pf /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_DisplayRowHeadings(VARIANT_BOOL* pf/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayRowHeadings"), DISPID(1019));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pf /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
WINDOWDispT<T>::get_DisplayRowHeadings(void)
{
  VARIANT_BOOL pf;
  this->get_DisplayRowHeadings((VARIANT_BOOL*)&pf);
  return pf;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::set_DisplayRowHeadings(VARIANT_BOOL pf/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayRowHeadings"), DISPID(1019));
  TAutoArgs<1> _args;
  _args[1] = pf /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_DisplayVerticalScrollBar(VARIANT_BOOL* pf/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayVerticalScrollBar"), DISPID(1021));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pf /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
WINDOWDispT<T>::get_DisplayVerticalScrollBar(void)
{
  VARIANT_BOOL pf;
  this->get_DisplayVerticalScrollBar((VARIANT_BOOL*)&pf);
  return pf;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::set_DisplayVerticalScrollBar(VARIANT_BOOL pf/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayVerticalScrollBar"), DISPID(1021));
  TAutoArgs<1> _args;
  _args[1] = pf /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_DisplayWorkbookTabs(VARIANT_BOOL* pf/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayWorkbookTabs"), DISPID(DISPID_UNKNOWN/*[1610743828]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pf /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
WINDOWDispT<T>::get_DisplayWorkbookTabs(void)
{
  VARIANT_BOOL pf;
  this->get_DisplayWorkbookTabs((VARIANT_BOOL*)&pf);
  return pf;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::set_DisplayWorkbookTabs(VARIANT_BOOL pf/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayWorkbookTabs"), DISPID(1610743828));
  TAutoArgs<1> _args;
  _args[1] = pf /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_DisplayZeros(VARIANT_BOOL* pf/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayZeros"), DISPID(DISPID_UNKNOWN/*[1610743830]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pf /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
WINDOWDispT<T>::get_DisplayZeros(void)
{
  VARIANT_BOOL pf;
  this->get_DisplayZeros((VARIANT_BOOL*)&pf);
  return pf;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::set_DisplayZeros(VARIANT_BOOL pf/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayZeros"), DISPID(1610743830));
  TAutoArgs<1> _args;
  _args[1] = pf /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_EnableResize(VARIANT_BOOL* pf/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableResize"), DISPID(DISPID_UNKNOWN/*[1610743832]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pf /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
WINDOWDispT<T>::get_EnableResize(void)
{
  VARIANT_BOOL pf;
  this->get_EnableResize((VARIANT_BOOL*)&pf);
  return pf;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::set_EnableResize(VARIANT_BOOL pf/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableResize"), DISPID(1610743832));
  TAutoArgs<1> _args;
  _args[1] = pf /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_FreezePanes(VARIANT_BOOL* pf/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FreezePanes"), DISPID(DISPID_UNKNOWN/*[1610743834]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pf /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
WINDOWDispT<T>::get_FreezePanes(void)
{
  VARIANT_BOOL pf;
  this->get_FreezePanes((VARIANT_BOOL*)&pf);
  return pf;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::set_FreezePanes(VARIANT_BOOL pf/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FreezePanes"), DISPID(1610743834));
  TAutoArgs<1> _args;
  _args[1] = pf /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_GridlineColor(long* clr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GridlineColor"), DISPID(DISPID_UNKNOWN/*[1610743836]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(clr /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
WINDOWDispT<T>::get_GridlineColor(void)
{
  long clr;
  this->get_GridlineColor((long*)&clr);
  return clr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::set_GridlineColor(VARIANT* clr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GridlineColor"), DISPID(1610743836));
  TAutoArgs<1> _args;
  _args[1] = clr /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_GridlineColorIndex(Owc10_xp::XlColorIndex* iclr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GridlineColorIndex"), DISPID(DISPID_UNKNOWN/*[1610743838]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)iclr /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::XlColorIndex __fastcall
WINDOWDispT<T>::get_GridlineColorIndex(void)
{
  Owc10_xp::XlColorIndex iclr;
  this->get_GridlineColorIndex((Owc10_xp::XlColorIndex*)&iclr);
  return iclr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::set_GridlineColorIndex(Owc10_xp::XlColorIndex iclr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GridlineColorIndex"), DISPID(1610743838));
  TAutoArgs<1> _args;
  _args[1] = (int)iclr /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_Height(double* hgt/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(DISPID_UNKNOWN/*[1610743840]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(hgt /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
WINDOWDispT<T>::get_Height(void)
{
  double hgt;
  this->get_Height((double*)&hgt);
  return hgt;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_Index(long* Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(DISPID_UNKNOWN/*[1610743841]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Index /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
WINDOWDispT<T>::get_Index(void)
{
  long Index;
  this->get_Index((long*)&Index);
  return Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_Left(double* lft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(DISPID_UNKNOWN/*[1610743842]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(lft /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
WINDOWDispT<T>::get_Left(void)
{
  double lft;
  this->get_Left((double*)&lft);
  return lft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_Panes(Owc10_xp::Panes** Panes/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Panes"), DISPID(DISPID_UNKNOWN/*[1610743843]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Panes**)Panes /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Panes* __fastcall
WINDOWDispT<T>::get_Panes(void)
{
  Owc10_xp::Panes* Panes;
  this->get_Panes((Owc10_xp::Panes**)&Panes);
  return Panes;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_RangeSelection(Owc10_xp::_Range** rng/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RangeSelection"), DISPID(DISPID_UNKNOWN/*[1610743844]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::_Range**)rng /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::_Range* __fastcall
WINDOWDispT<T>::get_RangeSelection(void)
{
  Owc10_xp::_Range* rng;
  this->get_RangeSelection((Owc10_xp::_Range**)&rng);
  return rng;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_RowHeadings(Owc10_xp::Headings** hdgs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RowHeadings"), DISPID(DISPID_UNKNOWN/*[1610743845]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Headings**)hdgs /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Headings* __fastcall
WINDOWDispT<T>::get_RowHeadings(void)
{
  Owc10_xp::Headings* hdgs;
  this->get_RowHeadings((Owc10_xp::Headings**)&hdgs);
  return hdgs;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_ScrollColumn(long* col/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScrollColumn"), DISPID(DISPID_UNKNOWN/*[1610743846]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(col /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
WINDOWDispT<T>::get_ScrollColumn(void)
{
  long col;
  this->get_ScrollColumn((long*)&col);
  return col;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::set_ScrollColumn(long col/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScrollColumn"), DISPID(1610743846));
  TAutoArgs<1> _args;
  _args[1] = col /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_ScrollRow(long* Row/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScrollRow"), DISPID(DISPID_UNKNOWN/*[1610743848]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Row /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
WINDOWDispT<T>::get_ScrollRow(void)
{
  long Row;
  this->get_ScrollRow((long*)&Row);
  return Row;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::set_ScrollRow(long Row/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScrollRow"), DISPID(1610743848));
  TAutoArgs<1> _args;
  _args[1] = Row /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_SelectedSheets(Owc10_xp::Sheets** shts/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectedSheets"), DISPID(DISPID_UNKNOWN/*[1610743850]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Sheets**)shts /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Sheets* __fastcall
WINDOWDispT<T>::get_SelectedSheets(void)
{
  Owc10_xp::Sheets* shts;
  this->get_SelectedSheets((Owc10_xp::Sheets**)&shts);
  return shts;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_Selection(Owc10_xp::_Range** rng/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Selection"), DISPID(DISPID_UNKNOWN/*[1610743851]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::_Range**)rng /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::_Range* __fastcall
WINDOWDispT<T>::get_Selection(void)
{
  Owc10_xp::_Range* rng;
  this->get_Selection((Owc10_xp::_Range**)&rng);
  return rng;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_TabRatio(double* ratio/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabRatio"), DISPID(DISPID_UNKNOWN/*[1610743852]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ratio /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
WINDOWDispT<T>::get_TabRatio(void)
{
  double ratio;
  this->get_TabRatio((double*)&ratio);
  return ratio;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::set_TabRatio(double ratio/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabRatio"), DISPID(1610743852));
  TAutoArgs<1> _args;
  _args[1] = ratio /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_Top(double* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(DISPID_UNKNOWN/*[1610743854]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
WINDOWDispT<T>::get_Top(void)
{
  double Top;
  this->get_Top((double*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_Type(Owc10_xp::XlWindowType* typ/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(DISPID_UNKNOWN/*[1610743855]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)typ /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::XlWindowType __fastcall
WINDOWDispT<T>::get_Type(void)
{
  Owc10_xp::XlWindowType typ;
  this->get_Type((Owc10_xp::XlWindowType*)&typ);
  return typ;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_UsableHeight(double* hgt/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UsableHeight"), DISPID(DISPID_UNKNOWN/*[1610743856]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(hgt /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
WINDOWDispT<T>::get_UsableHeight(void)
{
  double hgt;
  this->get_UsableHeight((double*)&hgt);
  return hgt;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_UsableWidth(double* wid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UsableWidth"), DISPID(DISPID_UNKNOWN/*[1610743857]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(wid /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
WINDOWDispT<T>::get_UsableWidth(void)
{
  double wid;
  this->get_UsableWidth((double*)&wid);
  return wid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_ViewableRange(BSTR* rng/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ViewableRange"), DISPID(DISPID_UNKNOWN/*[1610743858]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(rng /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
WINDOWDispT<T>::get_ViewableRange(void)
{
  BSTR rng;
  this->get_ViewableRange((BSTR*)&rng);
  return rng;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::set_ViewableRange(BSTR rng/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ViewableRange"), DISPID(1610743858));
  TAutoArgs<1> _args;
  _args[1] = rng /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_Visible(VARIANT_BOOL* pf/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(DISPID_UNKNOWN/*[1610743860]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pf /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
WINDOWDispT<T>::get_Visible(void)
{
  VARIANT_BOOL pf;
  this->get_Visible((VARIANT_BOOL*)&pf);
  return pf;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_VisibleRange(Owc10_xp::_Range** rng/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VisibleRange"), DISPID(DISPID_UNKNOWN/*[1610743861]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::_Range**)rng /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::_Range* __fastcall
WINDOWDispT<T>::get_VisibleRange(void)
{
  Owc10_xp::_Range* rng;
  this->get_VisibleRange((Owc10_xp::_Range**)&rng);
  return rng;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_Width(double* wid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(DISPID_UNKNOWN/*[1610743862]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(wid /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
WINDOWDispT<T>::get_Width(void)
{
  double wid;
  this->get_Width((double*)&wid);
  return wid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_WindowNumber(long* num/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WindowNumber"), DISPID(DISPID_UNKNOWN/*[1610743863]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(num /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
WINDOWDispT<T>::get_WindowNumber(void)
{
  long num;
  this->get_WindowNumber((long*)&num);
  return num;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::LargeScroll(VARIANT* Down/*[in,opt]*/, VARIANT* Up/*[in,opt]*/, 
                            VARIANT* ToRight/*[in,opt]*/, VARIANT* ToLeft/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("LargeScroll"), DISPID(DISPID_UNKNOWN/*[1610743864]*/));
  TAutoArgs<4> _args;
  _args[1] = Down /*[VT_VARIANT:1]*/;
  _args[2] = Up /*[VT_VARIANT:1]*/;
  _args[3] = ToRight /*[VT_VARIANT:1]*/;
  _args[4] = ToLeft /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::PointsToScreenPixelsX(long Points/*[in]*/, long* pixels/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PointsToScreenPixelsX"), DISPID(DISPID_UNKNOWN/*[1610743865]*/));
  TAutoArgs<1> _args;
  _args[1] = Points /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pixels /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
WINDOWDispT<T>::PointsToScreenPixelsX(long Points/*[in]*/)
{
  long pixels;
  this->PointsToScreenPixelsX(Points, (long*)&pixels);
  return pixels;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::PointsToScreenPixelsY(long Points/*[in]*/, long* pixels/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PointsToScreenPixelsY"), DISPID(DISPID_UNKNOWN/*[1610743866]*/));
  TAutoArgs<1> _args;
  _args[1] = Points /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pixels /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
WINDOWDispT<T>::PointsToScreenPixelsY(long Points/*[in]*/)
{
  long pixels;
  this->PointsToScreenPixelsY(Points, (long*)&pixels);
  return pixels;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::RangeFromPoint(long x/*[in]*/, long y/*[in]*/, 
                               Owc10_xp::_Range** rng/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RangeFromPoint"), DISPID(DISPID_UNKNOWN/*[1610743867]*/));
  TAutoArgs<2> _args;
  _args[1] = x /*[VT_I4:0]*/;
  _args[2] = y /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::_Range**)rng /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::_Range* __fastcall
WINDOWDispT<T>::RangeFromPoint(long x/*[in]*/, long y/*[in]*/)
{
  Owc10_xp::_Range* rng;
  this->RangeFromPoint(x, y, (Owc10_xp::_Range**)&rng);
  return rng;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::ResetHeadings()
{
  _TDispID _dispid(*this, OLETEXT("ResetHeadings"), DISPID(DISPID_UNKNOWN/*[1610743868]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::ScrollIntoView(long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                               long Height/*[in]*/, VARIANT* Start/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScrollIntoView"), DISPID(DISPID_UNKNOWN/*[1610743869]*/));
  TAutoArgs<5> _args;
  _args[1] = Left /*[VT_I4:0]*/;
  _args[2] = Top /*[VT_I4:0]*/;
  _args[3] = Width /*[VT_I4:0]*/;
  _args[4] = Height /*[VT_I4:0]*/;
  _args[5] = Start /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::SmallScroll(VARIANT* Down/*[in,opt]*/, VARIANT* Up/*[in,opt]*/, 
                            VARIANT* ToRight/*[in,opt]*/, VARIANT* ToLeft/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmallScroll"), DISPID(DISPID_UNKNOWN/*[1610743870]*/));
  TAutoArgs<4> _args;
  _args[1] = Down /*[VT_VARIANT:1]*/;
  _args[2] = Up /*[VT_VARIANT:1]*/;
  _args[3] = ToRight /*[VT_VARIANT:1]*/;
  _args[4] = ToLeft /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  Pane
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AB2-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PaneDispT<T>::get_Application(Owc10_xp::ISpreadsheet** ppApp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ISpreadsheet**)ppApp /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ISpreadsheet* __fastcall
PaneDispT<T>::get_Application(void)
{
  Owc10_xp::ISpreadsheet* ppApp;
  this->get_Application((Owc10_xp::ISpreadsheet**)&ppApp);
  return ppApp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PaneDispT<T>::get_Index(long* Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Index /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PaneDispT<T>::get_Index(void)
{
  long Index;
  this->get_Index((long*)&Index);
  return Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PaneDispT<T>::get_Parent(Owc10_xp::WINDOW** Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::WINDOW**)Parent /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::WINDOW* __fastcall
PaneDispT<T>::get_Parent(void)
{
  Owc10_xp::WINDOW* Parent;
  this->get_Parent((Owc10_xp::WINDOW**)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PaneDispT<T>::get_VisibleRange(Owc10_xp::_Range** Range/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VisibleRange"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::_Range**)Range /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::_Range* __fastcall
PaneDispT<T>::get_VisibleRange(void)
{
  Owc10_xp::_Range* Range;
  this->get_VisibleRange((Owc10_xp::_Range**)&Range);
  return Range;
}

// *********************************************************************//
// DispIntf:  Headings
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39BA3-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HeadingsDispT<T>::get_Application(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ISpreadsheet**)Dispatch /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ISpreadsheet* __fastcall
HeadingsDispT<T>::get_Application(void)
{
  Owc10_xp::ISpreadsheet* Dispatch;
  this->get_Application((Owc10_xp::ISpreadsheet**)&Dispatch);
  return Dispatch;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HeadingsDispT<T>::get_Parent(Owc10_xp::WINDOW** Dispatch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::WINDOW**)Dispatch /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::WINDOW* __fastcall
HeadingsDispT<T>::get_Parent(void)
{
  Owc10_xp::WINDOW* Dispatch;
  this->get_Parent((Owc10_xp::WINDOW**)&Dispatch);
  return Dispatch;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HeadingsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
HeadingsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HeadingsDispT<T>::get_Item(VARIANT* Index/*[in]*/, Owc10_xp::Heading** Heading/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Heading**)Heading /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Heading* __fastcall
HeadingsDispT<T>::get_Item(VARIANT* Index/*[in]*/)
{
  Owc10_xp::Heading* Heading;
  this->get_Item(Index, (Owc10_xp::Heading**)&Heading);
  return Heading;
}

// *********************************************************************//
// DispIntf:  Heading
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39BA4-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HeadingDispT<T>::get_Application(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ISpreadsheet**)Dispatch /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ISpreadsheet* __fastcall
HeadingDispT<T>::get_Application(void)
{
  Owc10_xp::ISpreadsheet* Dispatch;
  this->get_Application((Owc10_xp::ISpreadsheet**)&Dispatch);
  return Dispatch;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HeadingDispT<T>::get_Parent(Owc10_xp::WINDOW** Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::WINDOW**)Parent /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::WINDOW* __fastcall
HeadingDispT<T>::get_Parent(void)
{
  Owc10_xp::WINDOW* Parent;
  this->get_Parent((Owc10_xp::WINDOW**)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HeadingDispT<T>::get_Caption(BSTR* bstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(bstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
HeadingDispT<T>::get_Caption(void)
{
  BSTR bstr;
  this->get_Caption((BSTR*)&bstr);
  return bstr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HeadingDispT<T>::set_Caption(BSTR bstr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = bstr /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HeadingDispT<T>::get_Index(long* Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Index /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
HeadingDispT<T>::get_Index(void)
{
  long Index;
  this->get_Index((long*)&Index);
  return Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HeadingDispT<T>::Reset()
{
  _TDispID _dispid(*this, OLETEXT("Reset"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  Panes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AB5-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PanesDispT<T>::get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
PanesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunk;
  this->get__NewEnum((LPUNKNOWN*)&ppunk);
  return ppunk;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PanesDispT<T>::get_Application(Owc10_xp::ISpreadsheet** ppApp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ISpreadsheet**)ppApp /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ISpreadsheet* __fastcall
PanesDispT<T>::get_Application(void)
{
  Owc10_xp::ISpreadsheet* ppApp;
  this->get_Application((Owc10_xp::ISpreadsheet**)&ppApp);
  return ppApp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PanesDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PanesDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PanesDispT<T>::get_Item(long Index/*[in]*/, Owc10_xp::Pane** Pane/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Pane**)Pane /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Pane* __fastcall
PanesDispT<T>::get_Item(long Index/*[in]*/)
{
  Owc10_xp::Pane* Pane;
  this->get_Item(Index, (Owc10_xp::Pane**)&Pane);
  return Pane;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PanesDispT<T>::get_Parent(Owc10_xp::WINDOW** Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::WINDOW**)Parent /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::WINDOW* __fastcall
PanesDispT<T>::get_Parent(void)
{
  Owc10_xp::WINDOW* Parent;
  this->get_Parent((Owc10_xp::WINDOW**)&Parent);
  return Parent;
}

// *********************************************************************//
// DispIntf:  Worksheets
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39BA8-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetsDispT<T>::get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
WorksheetsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunk;
  this->get__NewEnum((LPUNKNOWN*)&ppunk);
  return ppunk;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetsDispT<T>::get_Application(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ISpreadsheet**)Dispatch /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ISpreadsheet* __fastcall
WorksheetsDispT<T>::get_Application(void)
{
  Owc10_xp::ISpreadsheet* Dispatch;
  this->get_Application((Owc10_xp::ISpreadsheet**)&Dispatch);
  return Dispatch;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
WorksheetsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetsDispT<T>::get_Item(VARIANT Index/*[in]*/, LPDISPATCH* Dispatch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(Dispatch /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
WorksheetsDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  LPDISPATCH Dispatch;
  this->get_Item(Index, (LPDISPATCH*)&Dispatch);
  return Dispatch;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetsDispT<T>::get_Parent(Owc10_xp::Workbook** Dispatch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Workbook**)Dispatch /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Workbook* __fastcall
WorksheetsDispT<T>::get_Parent(void)
{
  Owc10_xp::Workbook* Dispatch;
  this->get_Parent((Owc10_xp::Workbook**)&Dispatch);
  return Dispatch;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetsDispT<T>::get_Visible(VARIANT* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Visible /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
WorksheetsDispT<T>::get_Visible(void)
{
  VARIANT Visible;
  this->get_Visible((VARIANT*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetsDispT<T>::set_Visible(VARIANT Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1610743813));
  TAutoArgs<1> _args;
  _args[1] = Visible /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetsDispT<T>::Add(VARIANT Before/*[in,opt]*/, VARIANT After/*[in,opt]*/, 
                        VARIANT Count/*[in,opt]*/, VARIANT Type/*[in,opt]*/, 
                        LPDISPATCH* Dispatch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<4> _args;
  _args[1] = Before /*[VT_VARIANT:0]*/;
  _args[2] = After /*[VT_VARIANT:0]*/;
  _args[3] = Count /*[VT_VARIANT:0]*/;
  _args[4] = Type /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(Dispatch /*[VT_DISPATCH:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
WorksheetsDispT<T>::Add(VARIANT Before/*[in,opt]*/, VARIANT After/*[in,opt]*/, 
                        VARIANT Count/*[in,opt]*/, VARIANT Type/*[in,opt]*/)
{
  LPDISPATCH Dispatch;
  this->Add(Before, After, Count, Type, (LPDISPATCH*)&Dispatch);
  return Dispatch;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetsDispT<T>::Copy(VARIANT Before/*[in,opt]*/, VARIANT After/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Copy"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<2> _args;
  _args[1] = Before /*[VT_VARIANT:0]*/;
  _args[2] = After /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetsDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetsDispT<T>::Move(VARIANT Before/*[in,opt]*/, VARIANT After/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Move"), DISPID(DISPID_UNKNOWN/*[1610743818]*/));
  TAutoArgs<2> _args;
  _args[1] = Before /*[VT_VARIANT:0]*/;
  _args[2] = After /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorksheetsDispT<T>::Select(VARIANT Replace/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Select"), DISPID(DISPID_UNKNOWN/*[1610743819]*/));
  TAutoArgs<1> _args;
  _args[1] = Replace /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  Protection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B3D-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ProtectionDispT<T>::get_Application(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ISpreadsheet**)Dispatch /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ISpreadsheet* __fastcall
ProtectionDispT<T>::get_Application(void)
{
  Owc10_xp::ISpreadsheet* Dispatch;
  this->get_Application((Owc10_xp::ISpreadsheet**)&Dispatch);
  return Dispatch;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ProtectionDispT<T>::get_Parent(Owc10_xp::Worksheet** Dispatch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Worksheet**)Dispatch /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Worksheet* __fastcall
ProtectionDispT<T>::get_Parent(void)
{
  Owc10_xp::Worksheet* Dispatch;
  this->get_Parent((Owc10_xp::Worksheet**)&Dispatch);
  return Dispatch;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ProtectionDispT<T>::get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Enabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ProtectionDispT<T>::get_Enabled(void)
{
  VARIANT_BOOL Enabled;
  this->get_Enabled((VARIANT_BOOL*)&Enabled);
  return Enabled;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ProtectionDispT<T>::set_Enabled(VARIANT_BOOL Enabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(1610743810));
  TAutoArgs<1> _args;
  _args[1] = Enabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ProtectionDispT<T>::get_AllowFormattingRows(VARIANT_BOOL* pf/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowFormattingRows"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pf /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ProtectionDispT<T>::get_AllowFormattingRows(void)
{
  VARIANT_BOOL pf;
  this->get_AllowFormattingRows((VARIANT_BOOL*)&pf);
  return pf;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ProtectionDispT<T>::set_AllowFormattingRows(VARIANT_BOOL pf/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowFormattingRows"), DISPID(1610743812));
  TAutoArgs<1> _args;
  _args[1] = pf /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ProtectionDispT<T>::get_AllowFormattingColumns(VARIANT_BOOL* pf/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowFormattingColumns"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pf /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ProtectionDispT<T>::get_AllowFormattingColumns(void)
{
  VARIANT_BOOL pf;
  this->get_AllowFormattingColumns((VARIANT_BOOL*)&pf);
  return pf;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ProtectionDispT<T>::set_AllowFormattingColumns(VARIANT_BOOL pf/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowFormattingColumns"), DISPID(1610743814));
  TAutoArgs<1> _args;
  _args[1] = pf /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ProtectionDispT<T>::get_AllowInsertingRows(VARIANT_BOOL* pf/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowInsertingRows"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pf /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ProtectionDispT<T>::get_AllowInsertingRows(void)
{
  VARIANT_BOOL pf;
  this->get_AllowInsertingRows((VARIANT_BOOL*)&pf);
  return pf;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ProtectionDispT<T>::set_AllowInsertingRows(VARIANT_BOOL pf/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowInsertingRows"), DISPID(1610743816));
  TAutoArgs<1> _args;
  _args[1] = pf /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ProtectionDispT<T>::get_AllowInsertingColumns(VARIANT_BOOL* pf/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowInsertingColumns"), DISPID(DISPID_UNKNOWN/*[1610743818]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pf /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ProtectionDispT<T>::get_AllowInsertingColumns(void)
{
  VARIANT_BOOL pf;
  this->get_AllowInsertingColumns((VARIANT_BOOL*)&pf);
  return pf;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ProtectionDispT<T>::set_AllowInsertingColumns(VARIANT_BOOL pf/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowInsertingColumns"), DISPID(1610743818));
  TAutoArgs<1> _args;
  _args[1] = pf /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ProtectionDispT<T>::get_AllowDeletingRows(VARIANT_BOOL* pf/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowDeletingRows"), DISPID(DISPID_UNKNOWN/*[1610743820]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pf /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ProtectionDispT<T>::get_AllowDeletingRows(void)
{
  VARIANT_BOOL pf;
  this->get_AllowDeletingRows((VARIANT_BOOL*)&pf);
  return pf;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ProtectionDispT<T>::set_AllowDeletingRows(VARIANT_BOOL pf/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowDeletingRows"), DISPID(1610743820));
  TAutoArgs<1> _args;
  _args[1] = pf /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ProtectionDispT<T>::get_AllowDeletingColumns(VARIANT_BOOL* pf/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowDeletingColumns"), DISPID(DISPID_UNKNOWN/*[1610743822]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pf /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ProtectionDispT<T>::get_AllowDeletingColumns(void)
{
  VARIANT_BOOL pf;
  this->get_AllowDeletingColumns((VARIANT_BOOL*)&pf);
  return pf;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ProtectionDispT<T>::set_AllowDeletingColumns(VARIANT_BOOL pf/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowDeletingColumns"), DISPID(1610743822));
  TAutoArgs<1> _args;
  _args[1] = pf /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ProtectionDispT<T>::get_AllowSorting(VARIANT_BOOL* pf/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowSorting"), DISPID(DISPID_UNKNOWN/*[1610743824]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pf /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ProtectionDispT<T>::get_AllowSorting(void)
{
  VARIANT_BOOL pf;
  this->get_AllowSorting((VARIANT_BOOL*)&pf);
  return pf;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ProtectionDispT<T>::set_AllowSorting(VARIANT_BOOL pf/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowSorting"), DISPID(1610743824));
  TAutoArgs<1> _args;
  _args[1] = pf /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ProtectionDispT<T>::get_AllowFiltering(VARIANT_BOOL* pf/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowFiltering"), DISPID(DISPID_UNKNOWN/*[1610743826]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pf /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ProtectionDispT<T>::get_AllowFiltering(void)
{
  VARIANT_BOOL pf;
  this->get_AllowFiltering((VARIANT_BOOL*)&pf);
  return pf;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ProtectionDispT<T>::set_AllowFiltering(VARIANT_BOOL pf/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowFiltering"), DISPID(1610743826));
  TAutoArgs<1> _args;
  _args[1] = pf /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ProtectionDispT<T>::get_AllowHeadingRename(VARIANT_BOOL* pf/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowHeadingRename"), DISPID(DISPID_UNKNOWN/*[1610743828]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pf /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ProtectionDispT<T>::get_AllowHeadingRename(void)
{
  VARIANT_BOOL pf;
  this->get_AllowHeadingRename((VARIANT_BOOL*)&pf);
  return pf;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ProtectionDispT<T>::set_AllowHeadingRename(VARIANT_BOOL pf/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowHeadingRename"), DISPID(1610743828));
  TAutoArgs<1> _args;
  _args[1] = pf /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  TitleBar
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B0B-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TitleBarDispT<T>::get_Application(Owc10_xp::ISpreadsheet** ppApp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ISpreadsheet**)ppApp /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ISpreadsheet* __fastcall
TitleBarDispT<T>::get_Application(void)
{
  Owc10_xp::ISpreadsheet* ppApp;
  this->get_Application((Owc10_xp::ISpreadsheet**)&ppApp);
  return ppApp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TitleBarDispT<T>::get_Caption(BSTR* Caption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Caption /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
TitleBarDispT<T>::get_Caption(void)
{
  BSTR Caption;
  this->get_Caption((BSTR*)&Caption);
  return Caption;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TitleBarDispT<T>::set_Caption(BSTR Caption/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(1610743809));
  TAutoArgs<1> _args;
  _args[1] = Caption /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TitleBarDispT<T>::get_Font(Owc10_xp::Font** Font/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Font**)Font /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Font* __fastcall
TitleBarDispT<T>::get_Font(void)
{
  Owc10_xp::Font* Font;
  this->get_Font((Owc10_xp::Font**)&Font);
  return Font;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TitleBarDispT<T>::get_Interior(Owc10_xp::Interior** Interior/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Interior"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Interior**)Interior /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Interior* __fastcall
TitleBarDispT<T>::get_Interior(void)
{
  Owc10_xp::Interior* Interior;
  this->get_Interior((Owc10_xp::Interior**)&Interior);
  return Interior;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TitleBarDispT<T>::get_Parent(Owc10_xp::ISpreadsheet** Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ISpreadsheet**)Parent /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ISpreadsheet* __fastcall
TitleBarDispT<T>::get_Parent(void)
{
  Owc10_xp::ISpreadsheet* Parent;
  this->get_Parent((Owc10_xp::ISpreadsheet**)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TitleBarDispT<T>::get_Visible(VARIANT_BOOL* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Visible /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
TitleBarDispT<T>::get_Visible(void)
{
  VARIANT_BOOL Visible;
  this->get_Visible((VARIANT_BOOL*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TitleBarDispT<T>::set_Visible(VARIANT_BOOL Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1610743814));
  TAutoArgs<1> _args;
  _args[1] = Visible /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  Font
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6F5A761A-0AC7-4DED-9A6B-A3547FD7B7BB}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::get_Application(Owc10_xp::ISpreadsheet** ppApp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ISpreadsheet**)ppApp /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ISpreadsheet* __fastcall
FontDispT<T>::get_Application(void)
{
  Owc10_xp::ISpreadsheet* ppApp;
  this->get_Application((Owc10_xp::ISpreadsheet**)&ppApp);
  return ppApp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::get_Bold(VARIANT* Bold/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bold"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Bold /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
FontDispT<T>::get_Bold(void)
{
  VARIANT Bold;
  this->get_Bold((VARIANT*)&Bold);
  return Bold;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::set_Bold(VARIANT_BOOL Bold/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bold"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Bold /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::get_Color(VARIANT* Color/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Color"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Color /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
FontDispT<T>::get_Color(void)
{
  VARIANT Color;
  this->get_Color((VARIANT*)&Color);
  return Color;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::set_Color(VARIANT* Color/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Color"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = Color /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::get_ColorIndex(VARIANT* ColorIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorIndex"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ColorIndex /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
FontDispT<T>::get_ColorIndex(void)
{
  VARIANT ColorIndex;
  this->get_ColorIndex((VARIANT*)&ColorIndex);
  return ColorIndex;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::set_ColorIndex(int ColorIndex/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorIndex"), DISPID(1610743813));
  TAutoArgs<1> _args;
  _args[1] = ColorIndex /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::get_Italic(VARIANT* Italic/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Italic"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Italic /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
FontDispT<T>::get_Italic(void)
{
  VARIANT Italic;
  this->get_Italic((VARIANT*)&Italic);
  return Italic;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::set_Italic(VARIANT_BOOL Italic/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Italic"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = Italic /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::get_Name(VARIANT* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
FontDispT<T>::get_Name(void)
{
  VARIANT Name;
  this->get_Name((VARIANT*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1610743817));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::get_Parent(LPDISPATCH* ppidispatch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743819]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidispatch /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
FontDispT<T>::get_Parent(void)
{
  LPDISPATCH ppidispatch;
  this->get_Parent((LPDISPATCH*)&ppidispatch);
  return ppidispatch;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::get_Size(VARIANT* Size/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Size"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Size /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
FontDispT<T>::get_Size(void)
{
  VARIANT Size;
  this->get_Size((VARIANT*)&Size);
  return Size;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::set_Size(double Size/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Size"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Size /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::get_Underline(VARIANT* UnderlineStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Underline"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(UnderlineStyle /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
FontDispT<T>::get_Underline(void)
{
  VARIANT UnderlineStyle;
  this->get_Underline((VARIANT*)&UnderlineStyle);
  return UnderlineStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::set_Underline(Owc10_xp::XlUnderlineStyle UnderlineStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Underline"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = (int)UnderlineStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  Interior
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6F5A761B-0AC7-4DED-9A6B-A3547FD7B7BB}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
InteriorDispT<T>::get_Application(Owc10_xp::ISpreadsheet** ppApp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ISpreadsheet**)ppApp /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ISpreadsheet* __fastcall
InteriorDispT<T>::get_Application(void)
{
  Owc10_xp::ISpreadsheet* ppApp;
  this->get_Application((Owc10_xp::ISpreadsheet**)&ppApp);
  return ppApp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
InteriorDispT<T>::get_Color(VARIANT* Color/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Color"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Color /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
InteriorDispT<T>::get_Color(void)
{
  VARIANT Color;
  this->get_Color((VARIANT*)&Color);
  return Color;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
InteriorDispT<T>::set_Color(VARIANT* Color/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Color"), DISPID(1610743809));
  TAutoArgs<1> _args;
  _args[1] = Color /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
InteriorDispT<T>::get_ColorIndex(VARIANT* ColorIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorIndex"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ColorIndex /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
InteriorDispT<T>::get_ColorIndex(void)
{
  VARIANT ColorIndex;
  this->get_ColorIndex((VARIANT*)&ColorIndex);
  return ColorIndex;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
InteriorDispT<T>::set_ColorIndex(int ColorIndex/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorIndex"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = ColorIndex /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
InteriorDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
InteriorDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

// *********************************************************************//
// DispIntf:  Workbooks
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39BA5-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorkbooksDispT<T>::get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
WorkbooksDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunk;
  this->get__NewEnum((LPUNKNOWN*)&ppunk);
  return ppunk;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorkbooksDispT<T>::get_Application(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ISpreadsheet**)Dispatch /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ISpreadsheet* __fastcall
WorkbooksDispT<T>::get_Application(void)
{
  Owc10_xp::ISpreadsheet* Dispatch;
  this->get_Application((Owc10_xp::ISpreadsheet**)&Dispatch);
  return Dispatch;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorkbooksDispT<T>::get_Parent(Owc10_xp::ISpreadsheet** Dispatch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ISpreadsheet**)Dispatch /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ISpreadsheet* __fastcall
WorkbooksDispT<T>::get_Parent(void)
{
  Owc10_xp::ISpreadsheet* Dispatch;
  this->get_Parent((Owc10_xp::ISpreadsheet**)&Dispatch);
  return Dispatch;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorkbooksDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
WorkbooksDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WorkbooksDispT<T>::get_Item(VARIANT Index/*[in]*/, Owc10_xp::Workbook** Workbook/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Workbook**)Workbook /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Workbook* __fastcall
WorkbooksDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Owc10_xp::Workbook* Workbook;
  this->get_Item(Index, (Owc10_xp::Workbook**)&Workbook);
  return Workbook;
}

// *********************************************************************//
// DispIntf:  Borders
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A7D-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BordersDispT<T>::get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
BordersDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunk;
  this->get__NewEnum((LPUNKNOWN*)&ppunk);
  return ppunk;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BordersDispT<T>::get_Application(Owc10_xp::ISpreadsheet** ppApp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ISpreadsheet**)ppApp /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ISpreadsheet* __fastcall
BordersDispT<T>::get_Application(void)
{
  Owc10_xp::ISpreadsheet* ppApp;
  this->get_Application((Owc10_xp::ISpreadsheet**)&ppApp);
  return ppApp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BordersDispT<T>::get_Color(VARIANT* Color/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Color"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Color /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
BordersDispT<T>::get_Color(void)
{
  VARIANT Color;
  this->get_Color((VARIANT*)&Color);
  return Color;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BordersDispT<T>::set_Color(VARIANT* Color/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Color"), DISPID(1610743810));
  TAutoArgs<1> _args;
  _args[1] = Color /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BordersDispT<T>::get_ColorIndex(VARIANT* ColorIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorIndex"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ColorIndex /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
BordersDispT<T>::get_ColorIndex(void)
{
  VARIANT ColorIndex;
  this->get_ColorIndex((VARIANT*)&ColorIndex);
  return ColorIndex;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BordersDispT<T>::set_ColorIndex(int ColorIndex/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorIndex"), DISPID(1610743812));
  TAutoArgs<1> _args;
  _args[1] = ColorIndex /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BordersDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
BordersDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BordersDispT<T>::get_Item(Owc10_xp::XlBordersIndex Index/*[in]*/, 
                          Owc10_xp::Border** Border/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = (int)Index /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Border**)Border /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Border* __fastcall
BordersDispT<T>::get_Item(Owc10_xp::XlBordersIndex Index/*[in]*/)
{
  Owc10_xp::Border* Border;
  this->get_Item(Index, (Owc10_xp::Border**)&Border);
  return Border;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BordersDispT<T>::get_LineStyle(VARIANT* LineStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LineStyle"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(LineStyle /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
BordersDispT<T>::get_LineStyle(void)
{
  VARIANT LineStyle;
  this->get_LineStyle((VARIANT*)&LineStyle);
  return LineStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BordersDispT<T>::set_LineStyle(Owc10_xp::XlLineStyle LineStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LineStyle"), DISPID(1610743816));
  TAutoArgs<1> _args;
  _args[1] = (int)LineStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BordersDispT<T>::get_Parent(Owc10_xp::_Range** Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743818]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::_Range**)Parent /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::_Range* __fastcall
BordersDispT<T>::get_Parent(void)
{
  Owc10_xp::_Range* Parent;
  this->get_Parent((Owc10_xp::_Range**)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BordersDispT<T>::get_Value(VARIANT* LineStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(DISPID_UNKNOWN/*[1610743819]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(LineStyle /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
BordersDispT<T>::get_Value(void)
{
  VARIANT LineStyle;
  this->get_Value((VARIANT*)&LineStyle);
  return LineStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BordersDispT<T>::set_Value(Owc10_xp::XlLineStyle LineStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(1610743819));
  TAutoArgs<1> _args;
  _args[1] = (int)LineStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BordersDispT<T>::get_Weight(VARIANT* LineWeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Weight"), DISPID(DISPID_UNKNOWN/*[1610743821]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(LineWeight /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
BordersDispT<T>::get_Weight(void)
{
  VARIANT LineWeight;
  this->get_Weight((VARIANT*)&LineWeight);
  return LineWeight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BordersDispT<T>::set_Weight(Owc10_xp::XlBorderWeight LineWeight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Weight"), DISPID(1610743821));
  TAutoArgs<1> _args;
  _args[1] = (int)LineWeight /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  Border
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6F5A7618-0AC7-4DED-9A6B-A3547FD7B7BB}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BorderDispT<T>::get_Application(Owc10_xp::ISpreadsheet** ppApp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ISpreadsheet**)ppApp /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ISpreadsheet* __fastcall
BorderDispT<T>::get_Application(void)
{
  Owc10_xp::ISpreadsheet* ppApp;
  this->get_Application((Owc10_xp::ISpreadsheet**)&ppApp);
  return ppApp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BorderDispT<T>::get_Color(VARIANT* Color/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Color"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Color /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
BorderDispT<T>::get_Color(void)
{
  VARIANT Color;
  this->get_Color((VARIANT*)&Color);
  return Color;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BorderDispT<T>::set_Color(VARIANT* Color/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Color"), DISPID(1610743809));
  TAutoArgs<1> _args;
  _args[1] = Color /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BorderDispT<T>::get_ColorIndex(VARIANT* ColorIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorIndex"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ColorIndex /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
BorderDispT<T>::get_ColorIndex(void)
{
  VARIANT ColorIndex;
  this->get_ColorIndex((VARIANT*)&ColorIndex);
  return ColorIndex;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BorderDispT<T>::set_ColorIndex(int ColorIndex/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorIndex"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = ColorIndex /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BorderDispT<T>::get_LineStyle(VARIANT* LineStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LineStyle"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(LineStyle /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
BorderDispT<T>::get_LineStyle(void)
{
  VARIANT LineStyle;
  this->get_LineStyle((VARIANT*)&LineStyle);
  return LineStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BorderDispT<T>::set_LineStyle(Owc10_xp::XlLineStyle LineStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LineStyle"), DISPID(1610743813));
  TAutoArgs<1> _args;
  _args[1] = (int)LineStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BorderDispT<T>::get_Parent(Owc10_xp::_Range** Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::_Range**)Parent /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::_Range* __fastcall
BorderDispT<T>::get_Parent(void)
{
  Owc10_xp::_Range* Parent;
  this->get_Parent((Owc10_xp::_Range**)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BorderDispT<T>::get_Weight(VARIANT* LineWeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Weight"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(LineWeight /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
BorderDispT<T>::get_Weight(void)
{
  VARIANT LineWeight;
  this->get_Weight((VARIANT*)&LineWeight);
  return LineWeight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BorderDispT<T>::set_Weight(Owc10_xp::XlBorderWeight LineWeight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Weight"), DISPID(1610743816));
  TAutoArgs<1> _args;
  _args[1] = (int)LineWeight /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  Hyperlink
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6F5A7620-0AC7-4DED-9A6B-A3547FD7B7BB}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinkDispT<T>::get_Application(Owc10_xp::ISpreadsheet** ppApp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ISpreadsheet**)ppApp /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ISpreadsheet* __fastcall
HyperlinkDispT<T>::get_Application(void)
{
  Owc10_xp::ISpreadsheet* ppApp;
  this->get_Application((Owc10_xp::ISpreadsheet**)&ppApp);
  return ppApp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinkDispT<T>::get_Address(BSTR* Address/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Address"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Address /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
HyperlinkDispT<T>::get_Address(void)
{
  BSTR Address;
  this->get_Address((BSTR*)&Address);
  return Address;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinkDispT<T>::set_Address(BSTR Address/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Address"), DISPID(1610743809));
  TAutoArgs<1> _args;
  _args[1] = Address /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinkDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
HyperlinkDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinkDispT<T>::get_Parent(Owc10_xp::_Range** Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::_Range**)Parent /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::_Range* __fastcall
HyperlinkDispT<T>::get_Parent(void)
{
  Owc10_xp::_Range* Parent;
  this->get_Parent((Owc10_xp::_Range**)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinkDispT<T>::get_SubAddress(BSTR* SubAddress/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SubAddress"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SubAddress /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
HyperlinkDispT<T>::get_SubAddress(void)
{
  BSTR SubAddress;
  this->get_SubAddress((BSTR*)&SubAddress);
  return SubAddress;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinkDispT<T>::set_SubAddress(BSTR SubAddress/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SubAddress"), DISPID(1610743813));
  TAutoArgs<1> _args;
  _args[1] = SubAddress /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinkDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinkDispT<T>::Follow(VARIANT* NewWindow/*[in,opt]*/, VARIANT* AddHistory/*[in,opt]*/, 
                          VARIANT* ExtraInfo/*[in,opt]*/, VARIANT* Method/*[in,opt]*/, 
                          VARIANT* HeaderInfo/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Follow"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<5> _args;
  _args[1] = NewWindow /*[VT_VARIANT:1]*/;
  _args[2] = AddHistory /*[VT_VARIANT:1]*/;
  _args[3] = ExtraInfo /*[VT_VARIANT:1]*/;
  _args[4] = Method /*[VT_VARIANT:1]*/;
  _args[5] = HeaderInfo /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IOleCommandTargetArgument
// Flags:     (464) Hidden Dual NonExtensible OleAutomation
// GUID:      {FB8D568A-AE5F-4136-8223-6E24ABE10A28}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOleCommandTargetArgumentDispT<T>::get_Value(VARIANT* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(DISPID_UNKNOWN/*[1610678272]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IOleCommandTargetArgumentDispT<T>::get_Value(void)
{
  VARIANT Value;
  this->get_Value((VARIANT*)&Value);
  return Value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOleCommandTargetArgumentDispT<T>::set_Value(VARIANT Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(1610678272));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOM_NumberFormat
// Interface: _NumberFormat
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_NumberFormatT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  return (*this)->get_Name(Name);
}

template <class T> BSTR __fastcall
TCOM_NumberFormatT<T>::get_Name(void)
{
  BSTR Name = 0;
  OLECHECK(this->get_Name((BSTR*)&Name));
  return Name;
}

template <class T> HRESULT __fastcall
TCOM_NumberFormatT<T>::set_Name(BSTR Name/*[in]*/)
{
  return (*this)->set_Name(Name);
}

template <class T> HRESULT __fastcall
TCOM_NumberFormatT<T>::get_Code(BSTR* Code/*[out,retval]*/)
{
  return (*this)->get_Code(Code);
}

template <class T> BSTR __fastcall
TCOM_NumberFormatT<T>::get_Code(void)
{
  BSTR Code = 0;
  OLECHECK(this->get_Code((BSTR*)&Code));
  return Code;
}

template <class T> HRESULT __fastcall
TCOM_NumberFormatT<T>::set_Code(BSTR Code/*[in]*/)
{
  return (*this)->set_Code(Code);
}

template <class T> HRESULT __fastcall
TCOM_NumberFormatT<T>::get_Format(VARIANT Value/*[in]*/, long Count/*[in,def,opt]*/, 
                                  BSTR* Format/*[out,retval]*/)
{
  return (*this)->get_Format(Value, Count, Format);
}

template <class T> BSTR __fastcall
TCOM_NumberFormatT<T>::get_Format(VARIANT Value/*[in]*/, long Count/*[in,def,opt]*/)
{
  BSTR Format = 0;
  OLECHECK(this->get_Format(, (BSTR*)&Format));
  return Format;
}

template <class T> HRESULT __fastcall
TCOM_NumberFormatT<T>::get_Width(long hDC/*[in]*/, VARIANT Value/*[in]*/, 
                                 long* Width/*[out,retval]*/)
{
  return (*this)->get_Width(hDC, Value, Width);
}

template <class T> long __fastcall
TCOM_NumberFormatT<T>::get_Width(long hDC/*[in]*/, VARIANT Value/*[in]*/)
{
  long Width;
  OLECHECK(this->get_Width(, (long*)&Width));
  return Width;
}

template <class T> HRESULT __fastcall
TCOM_NumberFormatT<T>::get_Height(long hDC/*[in]*/, VARIANT Value/*[in]*/, 
                                  long* Height/*[out,retval]*/)
{
  return (*this)->get_Height(hDC, Value, Height);
}

template <class T> long __fastcall
TCOM_NumberFormatT<T>::get_Height(long hDC/*[in]*/, VARIANT Value/*[in]*/)
{
  long Height;
  OLECHECK(this->get_Height(, (long*)&Height));
  return Height;
}

template <class T> HRESULT __fastcall
TCOM_NumberFormatT<T>::Render(long hDC/*[in]*/, long hDCInfo/*[in]*/, long cx1/*[in]*/, 
                              long cy1/*[in]*/, long cx2/*[in]*/, long cy2/*[in]*/, 
                              long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                              long Height/*[in]*/, long HorizontalAlignment/*[in]*/, 
                              long VerticalAlignment/*[in]*/, VARIANT Value/*[in]*/)
{
  return (*this)->Render(hDC, hDCInfo, cx1, cy1, cx2, cy2, Left, Top, Width, Height, 
                         HorizontalAlignment, VerticalAlignment, Value);
}

// *********************************************************************//
// DispIntf:  _NumberFormat
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {81FDD9FE-6464-4A19-82AB-878823E85A5E}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_NumberFormatDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_NumberFormatDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_NumberFormatDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1610743808));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_NumberFormatDispT<T>::get_Code(BSTR* Code/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Code"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Code /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_NumberFormatDispT<T>::get_Code(void)
{
  BSTR Code;
  this->get_Code((BSTR*)&Code);
  return Code;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_NumberFormatDispT<T>::set_Code(BSTR Code/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Code"), DISPID(1610743810));
  TAutoArgs<1> _args;
  _args[1] = Code /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_NumberFormatDispT<T>::get_Format(VARIANT Value/*[in]*/, long Count/*[in,def,opt]*/, 
                                  BSTR* Format/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Format"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<2> _args;
  _args[1] = Value /*[VT_VARIANT:0]*/;
  _args[2] = Count /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Format /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_NumberFormatDispT<T>::get_Format(VARIANT Value/*[in]*/, long Count/*[in,def,opt]*/)
{
  BSTR Format;
  this->get_Format(Value, Count, (BSTR*)&Format);
  return Format;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_NumberFormatDispT<T>::get_Width(long hDC/*[in]*/, VARIANT Value/*[in]*/, 
                                 long* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<2> _args;
  _args[1] = hDC /*[VT_I4:0]*/;
  _args[2] = Value /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(Width /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_NumberFormatDispT<T>::get_Width(long hDC/*[in]*/, VARIANT Value/*[in]*/)
{
  long Width;
  this->get_Width(hDC, Value, (long*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_NumberFormatDispT<T>::get_Height(long hDC/*[in]*/, VARIANT Value/*[in]*/, 
                                  long* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<2> _args;
  _args[1] = hDC /*[VT_I4:0]*/;
  _args[2] = Value /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(Height /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_NumberFormatDispT<T>::get_Height(long hDC/*[in]*/, VARIANT Value/*[in]*/)
{
  long Height;
  this->get_Height(hDC, Value, (long*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_NumberFormatDispT<T>::Render(long hDC/*[in]*/, long hDCInfo/*[in]*/, long cx1/*[in]*/, 
                              long cy1/*[in]*/, long cx2/*[in]*/, long cy2/*[in]*/, 
                              long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                              long Height/*[in]*/, long HorizontalAlignment/*[in]*/, 
                              long VerticalAlignment/*[in]*/, VARIANT Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Render"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<13> _args;
  _args[1] = hDC /*[VT_I4:0]*/;
  _args[2] = hDCInfo /*[VT_I4:0]*/;
  _args[3] = cx1 /*[VT_I4:0]*/;
  _args[4] = cy1 /*[VT_I4:0]*/;
  _args[5] = cx2 /*[VT_I4:0]*/;
  _args[6] = cy2 /*[VT_I4:0]*/;
  _args[7] = Left /*[VT_I4:0]*/;
  _args[8] = Top /*[VT_I4:0]*/;
  _args[9] = Width /*[VT_I4:0]*/;
  _args[10] = Height /*[VT_I4:0]*/;
  _args[11] = HorizontalAlignment /*[VT_I4:0]*/;
  _args[12] = VerticalAlignment /*[VT_I4:0]*/;
  _args[13] = Value /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IOMEvent
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F5B39AE3-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOMEventDispT<T>::get_x(long* px/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("x"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(px /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOMEventDispT<T>::get_x(void)
{
  long px;
  this->get_x((long*)&px);
  return px;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOMEventDispT<T>::get_y(long* py/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("y"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(py /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOMEventDispT<T>::get_y(void)
{
  long py;
  this->get_y((long*)&py);
  return py;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOMEventDispT<T>::get_KeyCode(long* pvk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyCode"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvk /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOMEventDispT<T>::get_KeyCode(void)
{
  long pvk;
  this->get_KeyCode((long*)&pvk);
  return pvk;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOMEventDispT<T>::get_KeyChar(BSTR* Char/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyChar"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Char /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOMEventDispT<T>::get_KeyChar(void)
{
  BSTR Char;
  this->get_KeyChar((BSTR*)&Char);
  return Char;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOMEventDispT<T>::get_Button(long* pbutton/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Button"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbutton /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOMEventDispT<T>::get_Button(void)
{
  long pbutton;
  this->get_Button((long*)&pbutton);
  return pbutton;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOMEventDispT<T>::get_AltKey(VARIANT_BOOL* pvb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AltKey"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvb /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IOMEventDispT<T>::get_AltKey(void)
{
  VARIANT_BOOL pvb;
  this->get_AltKey((VARIANT_BOOL*)&pvb);
  return pvb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOMEventDispT<T>::get_CtrlKey(VARIANT_BOOL* pvb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CtrlKey"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvb /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IOMEventDispT<T>::get_CtrlKey(void)
{
  VARIANT_BOOL pvb;
  this->get_CtrlKey((VARIANT_BOOL*)&pvb);
  return pvb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IOMEventDispT<T>::get_ShiftKey(VARIANT_BOOL* pvb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShiftKey"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvb /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IOMEventDispT<T>::get_ShiftKey(void)
{
  VARIANT_BOOL pvb;
  this->get_ShiftKey((VARIANT_BOOL*)&pvb);
  return pvb;
}

// *********************************************************************//
// DispIntf:  SchemaFields
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AA3-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaFieldsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
SchemaFieldsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaFieldsDispT<T>::get_Item(VARIANT Index/*[in]*/, 
                               Owc10_xp::SchemaField** SchemaField/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::SchemaField**)SchemaField /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::SchemaField* __fastcall
SchemaFieldsDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Owc10_xp::SchemaField* SchemaField;
  this->get_Item(Index, (Owc10_xp::SchemaField**)&SchemaField);
  return SchemaField;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaFieldsDispT<T>::Add(BSTR Name/*[in]*/, Adodb_xp::DataTypeEnum DataType/*[in]*/, 
                          VARIANT Length/*[in,opt]*/, 
                          Owc10_xp::SchemaField** SchemaField/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2));
  TAutoArgs<3> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  _args[2] = (int)DataType /*[VT_USERDEFINED:0]*/;
  _args[3] = Length /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::SchemaField**)SchemaField /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::SchemaField* __fastcall
SchemaFieldsDispT<T>::Add(BSTR Name/*[in]*/, Adodb_xp::DataTypeEnum DataType/*[in]*/, 
                          VARIANT Length/*[in,opt]*/)
{
  Owc10_xp::SchemaField* SchemaField;
  this->Add(Name, DataType, Length, (Owc10_xp::SchemaField**)&SchemaField);
  return SchemaField;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaFieldsDispT<T>::Delete(VARIANT Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaFieldsDispT<T>::get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
SchemaFieldsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunk;
  this->get__NewEnum((LPUNKNOWN*)&ppunk);
  return ppunk;
}

// *********************************************************************//
// DispIntf:  SchemaField
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A67-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaFieldDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaFieldDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
SchemaFieldDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaFieldDispT<T>::set_DataType(Adodb_xp::DataTypeEnum DataType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataType"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = (int)DataType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaFieldDispT<T>::get_DataType(Adodb_xp::DataTypeEnum* DataType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataType"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)DataType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Adodb_xp::DataTypeEnum __fastcall
SchemaFieldDispT<T>::get_DataType(void)
{
  Adodb_xp::DataTypeEnum DataType;
  this->get_DataType((Adodb_xp::DataTypeEnum*)&DataType);
  return DataType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaFieldDispT<T>::set_Length(long Length/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Length"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Length /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaFieldDispT<T>::get_Length(long* Length/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Length"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Length /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
SchemaFieldDispT<T>::get_Length(void)
{
  long Length;
  this->get_Length((long*)&Length);
  return Length;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaFieldDispT<T>::set_IsKey(VARIANT_BOOL IsKey/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsKey"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = IsKey /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaFieldDispT<T>::get_IsKey(VARIANT_BOOL* IsKey/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsKey"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(IsKey /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
SchemaFieldDispT<T>::get_IsKey(void)
{
  VARIANT_BOOL IsKey;
  this->get_IsKey((VARIANT_BOOL*)&IsKey);
  return IsKey;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaFieldDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(8));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaFieldDispT<T>::get_IsRenamed(VARIANT_BOOL* IsRenamed/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsRenamed"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(IsRenamed /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
SchemaFieldDispT<T>::get_IsRenamed(void)
{
  VARIANT_BOOL IsRenamed;
  this->get_IsRenamed((VARIANT_BOOL*)&IsRenamed);
  return IsRenamed;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaFieldDispT<T>::get_Properties(Owc10_xp::SchemaProperties** SchemaProperties/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Properties"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::SchemaProperties**)SchemaProperties /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::SchemaProperties* __fastcall
SchemaFieldDispT<T>::get_Properties(void)
{
  Owc10_xp::SchemaProperties* SchemaProperties;
  this->get_Properties((Owc10_xp::SchemaProperties**)&SchemaProperties);
  return SchemaProperties;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaFieldDispT<T>::get_IsHyperlink(VARIANT_BOOL* IsHyperlink/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsHyperlink"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(IsHyperlink /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
SchemaFieldDispT<T>::get_IsHyperlink(void)
{
  VARIANT_BOOL IsHyperlink;
  this->get_IsHyperlink((VARIANT_BOOL*)&IsHyperlink);
  return IsHyperlink;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaFieldDispT<T>::get_BaseTableName(BSTR* BaseTableName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaseTableName"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BaseTableName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
SchemaFieldDispT<T>::get_BaseTableName(void)
{
  BSTR BaseTableName;
  this->get_BaseTableName((BSTR*)&BaseTableName);
  return BaseTableName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaFieldDispT<T>::get_BaseColumnName(BSTR* BaseColumnName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaseColumnName"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BaseColumnName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
SchemaFieldDispT<T>::get_BaseColumnName(void)
{
  BSTR BaseColumnName;
  this->get_BaseColumnName((BSTR*)&BaseColumnName);
  return BaseColumnName;
}

// *********************************************************************//
// DispIntf:  SchemaProperties
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C233A511-A2BB-11D3-80F9-0050041DC1A6}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaPropertiesDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
SchemaPropertiesDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaPropertiesDispT<T>::get_Item(VARIANT Index/*[in]*/, 
                                   Owc10_xp::SchemaProperty** SchemaProperty/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::SchemaProperty**)SchemaProperty /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::SchemaProperty* __fastcall
SchemaPropertiesDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Owc10_xp::SchemaProperty* SchemaProperty;
  this->get_Item(Index, (Owc10_xp::SchemaProperty**)&SchemaProperty);
  return SchemaProperty;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaPropertiesDispT<T>::get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
SchemaPropertiesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunk;
  this->get__NewEnum((LPUNKNOWN*)&ppunk);
  return ppunk;
}

// *********************************************************************//
// DispIntf:  SchemaProperty
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C233A512-A2BB-11D3-80F9-0050041DC1A6}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaPropertyDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
SchemaPropertyDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaPropertyDispT<T>::get_Value(VARIANT* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
SchemaPropertyDispT<T>::get_Value(void)
{
  VARIANT Value;
  this->get_Value((VARIANT*)&Value);
  return Value;
}

// *********************************************************************//
// DispIntf:  SchemaDiagram
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {30C37029-25CD-11D4-8D9D-00500483860C}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaDiagramDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
SchemaDiagramDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaDiagramDispT<T>::get_SchemaRowsources(Owc10_xp::SchemaRowsources** SchemaRowsources/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SchemaRowsources"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::SchemaRowsources**)SchemaRowsources /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::SchemaRowsources* __fastcall
SchemaDiagramDispT<T>::get_SchemaRowsources(void)
{
  Owc10_xp::SchemaRowsources* SchemaRowsources;
  this->get_SchemaRowsources((Owc10_xp::SchemaRowsources**)&SchemaRowsources);
  return SchemaRowsources;
}

// *********************************************************************//
// DispIntf:  SchemaRowsources
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AA4-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaRowsourcesDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
SchemaRowsourcesDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaRowsourcesDispT<T>::get_Item(VARIANT Index/*[in]*/, 
                                   Owc10_xp::SchemaRowsource** SchemaRowsource/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::SchemaRowsource**)SchemaRowsource /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::SchemaRowsource* __fastcall
SchemaRowsourcesDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Owc10_xp::SchemaRowsource* SchemaRowsource;
  this->get_Item(Index, (Owc10_xp::SchemaRowsource**)&SchemaRowsource);
  return SchemaRowsource;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaRowsourcesDispT<T>::Add(BSTR Name/*[in]*/, 
                              Owc10_xp::DscRowsourceTypeEnum RowsourceType/*[in]*/, 
                              VARIANT CommandText/*[in,opt]*/, 
                              Owc10_xp::SchemaRowsource** SchemaRowsource/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2));
  TAutoArgs<3> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  _args[2] = (int)RowsourceType /*[VT_USERDEFINED:0]*/;
  _args[3] = CommandText /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::SchemaRowsource**)SchemaRowsource /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::SchemaRowsource* __fastcall
SchemaRowsourcesDispT<T>::Add(BSTR Name/*[in]*/, 
                              Owc10_xp::DscRowsourceTypeEnum RowsourceType/*[in]*/, 
                              VARIANT CommandText/*[in,opt]*/)
{
  Owc10_xp::SchemaRowsource* SchemaRowsource;
  this->Add(Name, RowsourceType, CommandText, (Owc10_xp::SchemaRowsource**)&SchemaRowsource);
  return SchemaRowsource;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaRowsourcesDispT<T>::AddNew(BSTR Name/*[in]*/, 
                                 Owc10_xp::DscRowsourceTypeEnum RowsourceType/*[in]*/, 
                                 VARIANT CommandText/*[in,opt]*/, 
                                 Owc10_xp::SchemaRowsource** SchemaRowsource/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddNew"), DISPID(3));
  TAutoArgs<3> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  _args[2] = (int)RowsourceType /*[VT_USERDEFINED:0]*/;
  _args[3] = CommandText /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::SchemaRowsource**)SchemaRowsource /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::SchemaRowsource* __fastcall
SchemaRowsourcesDispT<T>::AddNew(BSTR Name/*[in]*/, 
                                 Owc10_xp::DscRowsourceTypeEnum RowsourceType/*[in]*/, 
                                 VARIANT CommandText/*[in,opt]*/)
{
  Owc10_xp::SchemaRowsource* SchemaRowsource;
  this->AddNew(Name, RowsourceType, CommandText, (Owc10_xp::SchemaRowsource**)&SchemaRowsource);
  return SchemaRowsource;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaRowsourcesDispT<T>::Delete(VARIANT Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaRowsourcesDispT<T>::get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
SchemaRowsourcesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunk;
  this->get__NewEnum((LPUNKNOWN*)&ppunk);
  return ppunk;
}

// *********************************************************************//
// DispIntf:  SchemaRowsource
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AC8-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaRowsourceDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaRowsourceDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
SchemaRowsourceDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaRowsourceDispT<T>::set_Type(Owc10_xp::DscRowsourceTypeEnum RowsourceType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = (int)RowsourceType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaRowsourceDispT<T>::get_Type(Owc10_xp::DscRowsourceTypeEnum* RowsourceType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)RowsourceType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::DscRowsourceTypeEnum __fastcall
SchemaRowsourceDispT<T>::get_Type(void)
{
  Owc10_xp::DscRowsourceTypeEnum RowsourceType;
  this->get_Type((Owc10_xp::DscRowsourceTypeEnum*)&RowsourceType);
  return RowsourceType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaRowsourceDispT<T>::get_CommandText(BSTR* CommandText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CommandText"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CommandText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
SchemaRowsourceDispT<T>::get_CommandText(void)
{
  BSTR CommandText;
  this->get_CommandText((BSTR*)&CommandText);
  return CommandText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaRowsourceDispT<T>::get_SchemaFields(Owc10_xp::SchemaFields** SchemaFields/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SchemaFields"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::SchemaFields**)SchemaFields /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::SchemaFields* __fastcall
SchemaRowsourceDispT<T>::get_SchemaFields(void)
{
  Owc10_xp::SchemaFields* SchemaFields;
  this->get_SchemaFields((Owc10_xp::SchemaFields**)&SchemaFields);
  return SchemaFields;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaRowsourceDispT<T>::get_LookupSchemaRelationships(Owc10_xp::LookupSchemaRelationships** LookupSchemaRelationships/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LookupSchemaRelationships"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::LookupSchemaRelationships**)LookupSchemaRelationships /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::LookupSchemaRelationships* __fastcall
SchemaRowsourceDispT<T>::get_LookupSchemaRelationships(void)
{
  Owc10_xp::LookupSchemaRelationships* LookupSchemaRelationships;
  this->get_LookupSchemaRelationships((Owc10_xp::LookupSchemaRelationships**)&LookupSchemaRelationships);
  return LookupSchemaRelationships;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaRowsourceDispT<T>::get_SublistSchemaRelationships(Owc10_xp::SublistSchemaRelationships** SublistSchemaRelationships/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SublistSchemaRelationships"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::SublistSchemaRelationships**)SublistSchemaRelationships /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::SublistSchemaRelationships* __fastcall
SchemaRowsourceDispT<T>::get_SublistSchemaRelationships(void)
{
  Owc10_xp::SublistSchemaRelationships* SublistSchemaRelationships;
  this->get_SublistSchemaRelationships((Owc10_xp::SublistSchemaRelationships**)&SublistSchemaRelationships);
  return SublistSchemaRelationships;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaRowsourceDispT<T>::get_SchemaParameters(Owc10_xp::SchemaParameters** SchemaParameters/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SchemaParameters"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::SchemaParameters**)SchemaParameters /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::SchemaParameters* __fastcall
SchemaRowsourceDispT<T>::get_SchemaParameters(void)
{
  Owc10_xp::SchemaParameters* SchemaParameters;
  this->get_SchemaParameters((Owc10_xp::SchemaParameters**)&SchemaParameters);
  return SchemaParameters;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaRowsourceDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(7));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaRowsourceDispT<T>::get_Properties(Owc10_xp::SchemaProperties** SchemaProperties/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Properties"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::SchemaProperties**)SchemaProperties /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::SchemaProperties* __fastcall
SchemaRowsourceDispT<T>::get_Properties(void)
{
  Owc10_xp::SchemaProperties* SchemaProperties;
  this->get_Properties((Owc10_xp::SchemaProperties**)&SchemaProperties);
  return SchemaProperties;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaRowsourceDispT<T>::get_IsHidden(VARIANT_BOOL* pvfHidden/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsHidden"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvfHidden /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
SchemaRowsourceDispT<T>::get_IsHidden(void)
{
  VARIANT_BOOL pvfHidden;
  this->get_IsHidden((VARIANT_BOOL*)&pvfHidden);
  return pvfHidden;
}

// *********************************************************************//
// DispIntf:  LookupSchemaRelationships
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AF1-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LookupSchemaRelationshipsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
LookupSchemaRelationshipsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LookupSchemaRelationshipsDispT<T>::get_Item(VARIANT Index/*[in]*/, 
                                            Owc10_xp::SchemaRelationship** SchemaRelationship/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::SchemaRelationship**)SchemaRelationship /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::SchemaRelationship* __fastcall
LookupSchemaRelationshipsDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Owc10_xp::SchemaRelationship* SchemaRelationship;
  this->get_Item(Index, (Owc10_xp::SchemaRelationship**)&SchemaRelationship);
  return SchemaRelationship;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LookupSchemaRelationshipsDispT<T>::get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
LookupSchemaRelationshipsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunk;
  this->get__NewEnum((LPUNKNOWN*)&ppunk);
  return ppunk;
}

// *********************************************************************//
// DispIntf:  SchemaRelationship
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AEE-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaRelationshipDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
SchemaRelationshipDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaRelationshipDispT<T>::get_ManySide(BSTR* ManySchemaRowsource/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ManySide"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ManySchemaRowsource /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
SchemaRelationshipDispT<T>::get_ManySide(void)
{
  BSTR ManySchemaRowsource;
  this->get_ManySide((BSTR*)&ManySchemaRowsource);
  return ManySchemaRowsource;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaRelationshipDispT<T>::get_OneSide(BSTR* OneSchemaRowsource/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OneSide"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OneSchemaRowsource /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
SchemaRelationshipDispT<T>::get_OneSide(void)
{
  BSTR OneSchemaRowsource;
  this->get_OneSide((BSTR*)&OneSchemaRowsource);
  return OneSchemaRowsource;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaRelationshipDispT<T>::get_SchemaRelatedFields(Owc10_xp::SchemaRelatedFields** SchemaRelatedFields/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SchemaRelatedFields"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::SchemaRelatedFields**)SchemaRelatedFields /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::SchemaRelatedFields* __fastcall
SchemaRelationshipDispT<T>::get_SchemaRelatedFields(void)
{
  Owc10_xp::SchemaRelatedFields* SchemaRelatedFields;
  this->get_SchemaRelatedFields((Owc10_xp::SchemaRelatedFields**)&SchemaRelatedFields);
  return SchemaRelatedFields;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaRelationshipDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(4));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaRelationshipDispT<T>::set_Location(Owc10_xp::DscLocationEnum plocation/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Location"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = (int)plocation /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaRelationshipDispT<T>::get_Location(Owc10_xp::DscLocationEnum* plocation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Location"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)plocation /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::DscLocationEnum __fastcall
SchemaRelationshipDispT<T>::get_Location(void)
{
  Owc10_xp::DscLocationEnum plocation;
  this->get_Location((Owc10_xp::DscLocationEnum*)&plocation);
  return plocation;
}

// *********************************************************************//
// DispIntf:  SchemaRelatedFields
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A6D-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaRelatedFieldsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
SchemaRelatedFieldsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaRelatedFieldsDispT<T>::get_Item(VARIANT Index/*[in]*/, 
                                      Owc10_xp::SchemaRelatedField** ppSchemaRelatedField/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::SchemaRelatedField**)ppSchemaRelatedField /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::SchemaRelatedField* __fastcall
SchemaRelatedFieldsDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Owc10_xp::SchemaRelatedField* ppSchemaRelatedField;
  this->get_Item(Index, (Owc10_xp::SchemaRelatedField**)&ppSchemaRelatedField);
  return ppSchemaRelatedField;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaRelatedFieldsDispT<T>::Add(BSTR ManySchemaField/*[in]*/, BSTR OneSchemaField/*[in]*/, 
                                 Owc10_xp::SchemaRelatedField** SchemaRelatedField/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2));
  TAutoArgs<2> _args;
  _args[1] = ManySchemaField /*[VT_BSTR:0]*/;
  _args[2] = OneSchemaField /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::SchemaRelatedField**)SchemaRelatedField /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::SchemaRelatedField* __fastcall
SchemaRelatedFieldsDispT<T>::Add(BSTR ManySchemaField/*[in]*/, BSTR OneSchemaField/*[in]*/)
{
  Owc10_xp::SchemaRelatedField* SchemaRelatedField;
  this->Add(ManySchemaField, OneSchemaField, (Owc10_xp::SchemaRelatedField**)&SchemaRelatedField);
  return SchemaRelatedField;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaRelatedFieldsDispT<T>::get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
SchemaRelatedFieldsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunk;
  this->get__NewEnum((LPUNKNOWN*)&ppunk);
  return ppunk;
}

// *********************************************************************//
// DispIntf:  SchemaRelatedField
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A6E-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaRelatedFieldDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
SchemaRelatedFieldDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaRelatedFieldDispT<T>::get_ManySide(BSTR* ManySchemaField/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ManySide"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ManySchemaField /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
SchemaRelatedFieldDispT<T>::get_ManySide(void)
{
  BSTR ManySchemaField;
  this->get_ManySide((BSTR*)&ManySchemaField);
  return ManySchemaField;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaRelatedFieldDispT<T>::get_OneSide(BSTR* OneSchemaField/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OneSide"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OneSchemaField /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
SchemaRelatedFieldDispT<T>::get_OneSide(void)
{
  BSTR OneSchemaField;
  this->get_OneSide((BSTR*)&OneSchemaField);
  return OneSchemaField;
}

// *********************************************************************//
// DispIntf:  SublistSchemaRelationships
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AF0-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SublistSchemaRelationshipsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
SublistSchemaRelationshipsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SublistSchemaRelationshipsDispT<T>::get_Item(VARIANT Index/*[in]*/, 
                                             Owc10_xp::SchemaRelationship** SchemaRelationship/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::SchemaRelationship**)SchemaRelationship /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::SchemaRelationship* __fastcall
SublistSchemaRelationshipsDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Owc10_xp::SchemaRelationship* SchemaRelationship;
  this->get_Item(Index, (Owc10_xp::SchemaRelationship**)&SchemaRelationship);
  return SchemaRelationship;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SublistSchemaRelationshipsDispT<T>::get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
SublistSchemaRelationshipsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunk;
  this->get__NewEnum((LPUNKNOWN*)&ppunk);
  return ppunk;
}

// *********************************************************************//
// DispIntf:  SchemaParameters
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AED-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaParametersDispT<T>::get_Item(VARIANT Index/*[in]*/, 
                                   Owc10_xp::SchemaParameter** Parameter/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::SchemaParameter**)Parameter /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::SchemaParameter* __fastcall
SchemaParametersDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Owc10_xp::SchemaParameter* Parameter;
  this->get_Item(Index, (Owc10_xp::SchemaParameter**)&Parameter);
  return Parameter;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaParametersDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
SchemaParametersDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaParametersDispT<T>::Add(BSTR Name/*[in]*/, VARIANT DataType/*[in,opt]*/, 
                              VARIANT Size/*[in,opt]*/, VARIANT Scale/*[in,opt]*/, 
                              VARIANT Precision/*[in,opt]*/, VARIANT Direction/*[in,opt]*/, 
                              Owc10_xp::SchemaParameter** SchemaParameter/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2));
  TAutoArgs<6> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  _args[2] = DataType /*[VT_VARIANT:0]*/;
  _args[3] = Size /*[VT_VARIANT:0]*/;
  _args[4] = Scale /*[VT_VARIANT:0]*/;
  _args[5] = Precision /*[VT_VARIANT:0]*/;
  _args[6] = Direction /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::SchemaParameter**)SchemaParameter /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::SchemaParameter* __fastcall
SchemaParametersDispT<T>::Add(BSTR Name/*[in]*/, VARIANT DataType/*[in,opt]*/, 
                              VARIANT Size/*[in,opt]*/, VARIANT Scale/*[in,opt]*/, 
                              VARIANT Precision/*[in,opt]*/, VARIANT Direction/*[in,opt]*/)
{
  Owc10_xp::SchemaParameter* SchemaParameter;
  this->Add(Name, DataType, Size, Scale, Precision, Direction, (Owc10_xp::SchemaParameter**)&SchemaParameter);
  return SchemaParameter;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaParametersDispT<T>::get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
SchemaParametersDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunk;
  this->get__NewEnum((LPUNKNOWN*)&ppunk);
  return ppunk;
}

// *********************************************************************//
// DispIntf:  SchemaParameter
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A89-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaParameterDispT<T>::get_NumericScale(long* Scale/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumericScale"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Scale /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
SchemaParameterDispT<T>::get_NumericScale(void)
{
  long Scale;
  this->get_NumericScale((long*)&Scale);
  return Scale;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaParameterDispT<T>::get_Precision(long* Precision/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Precision"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Precision /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
SchemaParameterDispT<T>::get_Precision(void)
{
  long Precision;
  this->get_Precision((long*)&Precision);
  return Precision;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaParameterDispT<T>::get_Direction(Adodb_xp::ParameterDirectionEnum* Direction/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Direction"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Direction /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Adodb_xp::ParameterDirectionEnum __fastcall
SchemaParameterDispT<T>::get_Direction(void)
{
  Adodb_xp::ParameterDirectionEnum Direction;
  this->get_Direction((Adodb_xp::ParameterDirectionEnum*)&Direction);
  return Direction;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaParameterDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaParameterDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
SchemaParameterDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaParameterDispT<T>::set_DataType(Adodb_xp::DataTypeEnum DataType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataType"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = (int)DataType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaParameterDispT<T>::get_DataType(Adodb_xp::DataTypeEnum* DataType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataType"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)DataType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Adodb_xp::DataTypeEnum __fastcall
SchemaParameterDispT<T>::get_DataType(void)
{
  Adodb_xp::DataTypeEnum DataType;
  this->get_DataType((Adodb_xp::DataTypeEnum*)&DataType);
  return DataType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaParameterDispT<T>::set_Length(long Length/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Length"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Length /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaParameterDispT<T>::get_Length(long* Length/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Length"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Length /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
SchemaParameterDispT<T>::get_Length(void)
{
  long Length;
  this->get_Length((long*)&Length);
  return Length;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaParameterDispT<T>::set_IsKey(VARIANT_BOOL IsKey/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsKey"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = IsKey /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaParameterDispT<T>::get_IsKey(VARIANT_BOOL* IsKey/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsKey"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(IsKey /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
SchemaParameterDispT<T>::get_IsKey(void)
{
  VARIANT_BOOL IsKey;
  this->get_IsKey((VARIANT_BOOL*)&IsKey);
  return IsKey;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaParameterDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(8));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaParameterDispT<T>::get_IsRenamed(VARIANT_BOOL* IsRenamed/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsRenamed"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(IsRenamed /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
SchemaParameterDispT<T>::get_IsRenamed(void)
{
  VARIANT_BOOL IsRenamed;
  this->get_IsRenamed((VARIANT_BOOL*)&IsRenamed);
  return IsRenamed;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaParameterDispT<T>::get_Properties(Owc10_xp::SchemaProperties** SchemaProperties/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Properties"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::SchemaProperties**)SchemaProperties /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::SchemaProperties* __fastcall
SchemaParameterDispT<T>::get_Properties(void)
{
  Owc10_xp::SchemaProperties* SchemaProperties;
  this->get_Properties((Owc10_xp::SchemaProperties**)&SchemaProperties);
  return SchemaProperties;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaParameterDispT<T>::get_IsHyperlink(VARIANT_BOOL* IsHyperlink/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsHyperlink"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(IsHyperlink /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
SchemaParameterDispT<T>::get_IsHyperlink(void)
{
  VARIANT_BOOL IsHyperlink;
  this->get_IsHyperlink((VARIANT_BOOL*)&IsHyperlink);
  return IsHyperlink;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaParameterDispT<T>::get_BaseTableName(BSTR* BaseTableName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaseTableName"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BaseTableName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
SchemaParameterDispT<T>::get_BaseTableName(void)
{
  BSTR BaseTableName;
  this->get_BaseTableName((BSTR*)&BaseTableName);
  return BaseTableName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaParameterDispT<T>::get_BaseColumnName(BSTR* BaseColumnName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaseColumnName"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BaseColumnName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
SchemaParameterDispT<T>::get_BaseColumnName(void)
{
  BSTR BaseColumnName;
  this->get_BaseColumnName((BSTR*)&BaseColumnName);
  return BaseColumnName;
}

// *********************************************************************//
// DispIntf:  SchemaDiagrams
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {30C37028-25CD-11D4-8D9D-00500483860C}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaDiagramsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
SchemaDiagramsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaDiagramsDispT<T>::get_Item(VARIANT Index/*[in]*/, 
                                 Owc10_xp::SchemaDiagram** SchemaDiagram/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::SchemaDiagram**)SchemaDiagram /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::SchemaDiagram* __fastcall
SchemaDiagramsDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Owc10_xp::SchemaDiagram* SchemaDiagram;
  this->get_Item(Index, (Owc10_xp::SchemaDiagram**)&SchemaDiagram);
  return SchemaDiagram;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaDiagramsDispT<T>::get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
SchemaDiagramsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunk;
  this->get__NewEnum((LPUNKNOWN*)&ppunk);
  return ppunk;
}

// *********************************************************************//
// DispIntf:  SchemaRelationships
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A6C-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaRelationshipsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
SchemaRelationshipsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaRelationshipsDispT<T>::get_Item(VARIANT Index/*[in]*/, 
                                      Owc10_xp::SchemaRelationship** SchemaRelationship/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::SchemaRelationship**)SchemaRelationship /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::SchemaRelationship* __fastcall
SchemaRelationshipsDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Owc10_xp::SchemaRelationship* SchemaRelationship;
  this->get_Item(Index, (Owc10_xp::SchemaRelationship**)&SchemaRelationship);
  return SchemaRelationship;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaRelationshipsDispT<T>::Add(BSTR Name/*[in]*/, BSTR ManySchemaRowsource/*[in]*/, 
                                 BSTR OneSchemaRowsource/*[in]*/, BSTR ManySchemaField/*[in]*/, 
                                 BSTR OneSchemaField/*[in]*/, 
                                 Owc10_xp::SchemaRelationship** SchemaRelationship/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2));
  TAutoArgs<5> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  _args[2] = ManySchemaRowsource /*[VT_BSTR:0]*/;
  _args[3] = OneSchemaRowsource /*[VT_BSTR:0]*/;
  _args[4] = ManySchemaField /*[VT_BSTR:0]*/;
  _args[5] = OneSchemaField /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::SchemaRelationship**)SchemaRelationship /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::SchemaRelationship* __fastcall
SchemaRelationshipsDispT<T>::Add(BSTR Name/*[in]*/, BSTR ManySchemaRowsource/*[in]*/, 
                                 BSTR OneSchemaRowsource/*[in]*/, BSTR ManySchemaField/*[in]*/, 
                                 BSTR OneSchemaField/*[in]*/)
{
  Owc10_xp::SchemaRelationship* SchemaRelationship;
  this->Add(Name, ManySchemaRowsource, OneSchemaRowsource, ManySchemaField, OneSchemaField, (Owc10_xp::SchemaRelationship**)&SchemaRelationship);
  return SchemaRelationship;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaRelationshipsDispT<T>::AddNew(BSTR Name/*[in]*/, BSTR ManySchemaRowsource/*[in]*/, 
                                    BSTR OneSchemaRowsource/*[in]*/, BSTR ManySchemaField/*[in]*/, 
                                    BSTR OneSchemaField/*[in]*/, 
                                    Owc10_xp::SchemaRelationship** SchemaRelationship/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddNew"), DISPID(3));
  TAutoArgs<5> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  _args[2] = ManySchemaRowsource /*[VT_BSTR:0]*/;
  _args[3] = OneSchemaRowsource /*[VT_BSTR:0]*/;
  _args[4] = ManySchemaField /*[VT_BSTR:0]*/;
  _args[5] = OneSchemaField /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::SchemaRelationship**)SchemaRelationship /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::SchemaRelationship* __fastcall
SchemaRelationshipsDispT<T>::AddNew(BSTR Name/*[in]*/, BSTR ManySchemaRowsource/*[in]*/, 
                                    BSTR OneSchemaRowsource/*[in]*/, BSTR ManySchemaField/*[in]*/, 
                                    BSTR OneSchemaField/*[in]*/)
{
  Owc10_xp::SchemaRelationship* SchemaRelationship;
  this->AddNew(Name, ManySchemaRowsource, OneSchemaRowsource, ManySchemaField, OneSchemaField, (Owc10_xp::SchemaRelationship**)&SchemaRelationship);
  return SchemaRelationship;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaRelationshipsDispT<T>::Delete(VARIANT Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SchemaRelationshipsDispT<T>::get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
SchemaRelationshipsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunk;
  this->get__NewEnum((LPUNKNOWN*)&ppunk);
  return ppunk;
}

// *********************************************************************//
// DispIntf:  PageRowsources
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AA5-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageRowsourcesDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PageRowsourcesDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageRowsourcesDispT<T>::get_Item(VARIANT Index/*[in]*/, 
                                 Owc10_xp::PageRowsource** PageRowsource/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PageRowsource**)PageRowsource /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PageRowsource* __fastcall
PageRowsourcesDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Owc10_xp::PageRowsource* PageRowsource;
  this->get_Item(Index, (Owc10_xp::PageRowsource**)&PageRowsource);
  return PageRowsource;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageRowsourcesDispT<T>::get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
PageRowsourcesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunk;
  this->get__NewEnum((LPUNKNOWN*)&ppunk);
  return ppunk;
}

// *********************************************************************//
// DispIntf:  PageRowsource
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A9F-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageRowsourceDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PageRowsourceDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageRowsourceDispT<T>::set_Source(BSTR Source/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Source"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Source /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageRowsourceDispT<T>::get_Source(BSTR* Source/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Source"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Source /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PageRowsourceDispT<T>::get_Source(void)
{
  BSTR Source;
  this->get_Source((BSTR*)&Source);
  return Source;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageRowsourceDispT<T>::get_RecordsetDef(Owc10_xp::RecordsetDef** RecordsetDef/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecordsetDef"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::RecordsetDef**)RecordsetDef /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::RecordsetDef* __fastcall
PageRowsourceDispT<T>::get_RecordsetDef(void)
{
  Owc10_xp::RecordsetDef* RecordsetDef;
  this->get_RecordsetDef((Owc10_xp::RecordsetDef**)&RecordsetDef);
  return RecordsetDef;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageRowsourceDispT<T>::get_PageFields(Owc10_xp::PageFields** PageFields/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PageFields"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PageFields**)PageFields /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PageFields* __fastcall
PageRowsourceDispT<T>::get_PageFields(void)
{
  Owc10_xp::PageFields* PageFields;
  this->get_PageFields((Owc10_xp::PageFields**)&PageFields);
  return PageFields;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageRowsourceDispT<T>::get_LookupRelationships(Owc10_xp::LookupRelationships** LookupRelationships/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LookupRelationships"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::LookupRelationships**)LookupRelationships /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::LookupRelationships* __fastcall
PageRowsourceDispT<T>::get_LookupRelationships(void)
{
  Owc10_xp::LookupRelationships* LookupRelationships;
  this->get_LookupRelationships((Owc10_xp::LookupRelationships**)&LookupRelationships);
  return LookupRelationships;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageRowsourceDispT<T>::Promote(Owc10_xp::RecordsetDef** RecordsetDef/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Promote"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::RecordsetDef**)RecordsetDef /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::RecordsetDef* __fastcall
PageRowsourceDispT<T>::Promote(void)
{
  Owc10_xp::RecordsetDef* RecordsetDef;
  this->Promote((Owc10_xp::RecordsetDef**)&RecordsetDef);
  return RecordsetDef;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageRowsourceDispT<T>::IsBound(VARIANT_BOOL* IsBound/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsBound"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(IsBound /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PageRowsourceDispT<T>::IsBound(void)
{
  VARIANT_BOOL IsBound;
  this->IsBound((VARIANT_BOOL*)&IsBound);
  return IsBound;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageRowsourceDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(7));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  RecordsetDef
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A9D-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RecordsetDefDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RecordsetDefDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
RecordsetDefDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RecordsetDefDispT<T>::get_ShapeText(Owc10_xp::DscFetchTypeEnum FetchType/*[in,def,opt]*/, 
                                    BSTR* ShapeText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShapeText"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = (int)FetchType /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(ShapeText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
RecordsetDefDispT<T>::get_ShapeText(Owc10_xp::DscFetchTypeEnum FetchType/*[in,def,opt]*/)
{
  BSTR ShapeText;
  this->get_ShapeText(FetchType, (BSTR*)&ShapeText);
  return ShapeText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RecordsetDefDispT<T>::get_CommandText(BSTR* CommandText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CommandText"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CommandText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
RecordsetDefDispT<T>::get_CommandText(void)
{
  BSTR CommandText;
  this->get_CommandText((BSTR*)&CommandText);
  return CommandText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RecordsetDefDispT<T>::set_DataEntry(VARIANT_BOOL DataEntry/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataEntry"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = DataEntry /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RecordsetDefDispT<T>::get_DataEntry(VARIANT_BOOL* DataEntry/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataEntry"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DataEntry /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
RecordsetDefDispT<T>::get_DataEntry(void)
{
  VARIANT_BOOL DataEntry;
  this->get_DataEntry((VARIANT_BOOL*)&DataEntry);
  return DataEntry;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RecordsetDefDispT<T>::set_ServerFilter(BSTR ServerFilter/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ServerFilter"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = ServerFilter /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RecordsetDefDispT<T>::get_ServerFilter(BSTR* ServerFilter/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ServerFilter"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ServerFilter /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
RecordsetDefDispT<T>::get_ServerFilter(void)
{
  BSTR ServerFilter;
  this->get_ServerFilter((BSTR*)&ServerFilter);
  return ServerFilter;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RecordsetDefDispT<T>::get_PrimaryPageRowsource(Owc10_xp::PageRowsource** PageRowsource/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrimaryPageRowsource"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PageRowsource**)PageRowsource /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PageRowsource* __fastcall
RecordsetDefDispT<T>::get_PrimaryPageRowsource(void)
{
  Owc10_xp::PageRowsource* PageRowsource;
  this->get_PrimaryPageRowsource((Owc10_xp::PageRowsource**)&PageRowsource);
  return PageRowsource;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RecordsetDefDispT<T>::get_SublistRelationships(Owc10_xp::SublistRelationships** SublistRelationships/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SublistRelationships"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::SublistRelationships**)SublistRelationships /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::SublistRelationships* __fastcall
RecordsetDefDispT<T>::get_SublistRelationships(void)
{
  Owc10_xp::SublistRelationships* SublistRelationships;
  this->get_SublistRelationships((Owc10_xp::SublistRelationships**)&SublistRelationships);
  return SublistRelationships;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RecordsetDefDispT<T>::get_PageFields(Owc10_xp::PageFields** PageFields/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PageFields"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PageFields**)PageFields /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PageFields* __fastcall
RecordsetDefDispT<T>::get_PageFields(void)
{
  Owc10_xp::PageFields* PageFields;
  this->get_PageFields((Owc10_xp::PageFields**)&PageFields);
  return PageFields;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RecordsetDefDispT<T>::get_ParentRecordsetDef(Owc10_xp::RecordsetDef** RecordsetDef/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ParentRecordsetDef"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::RecordsetDef**)RecordsetDef /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::RecordsetDef* __fastcall
RecordsetDefDispT<T>::get_ParentRecordsetDef(void)
{
  Owc10_xp::RecordsetDef* RecordsetDef;
  this->get_ParentRecordsetDef((Owc10_xp::RecordsetDef**)&RecordsetDef);
  return RecordsetDef;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RecordsetDefDispT<T>::Demote(Owc10_xp::RecordsetDef** RecordsetDef/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Demote"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::RecordsetDef**)RecordsetDef /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::RecordsetDef* __fastcall
RecordsetDefDispT<T>::Demote(void)
{
  Owc10_xp::RecordsetDef* RecordsetDef;
  this->Demote((Owc10_xp::RecordsetDef**)&RecordsetDef);
  return RecordsetDef;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RecordsetDefDispT<T>::get_GroupingDefs(Owc10_xp::GroupingDefs** GroupingDefs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupingDefs"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::GroupingDefs**)GroupingDefs /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::GroupingDefs* __fastcall
RecordsetDefDispT<T>::get_GroupingDefs(void)
{
  Owc10_xp::GroupingDefs* GroupingDefs;
  this->get_GroupingDefs((Owc10_xp::GroupingDefs**)&GroupingDefs);
  return GroupingDefs;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RecordsetDefDispT<T>::get_ParameterValues(Owc10_xp::ParameterValues** ParameterValues/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ParameterValues"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ParameterValues**)ParameterValues /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ParameterValues* __fastcall
RecordsetDefDispT<T>::get_ParameterValues(void)
{
  Owc10_xp::ParameterValues* ParameterValues;
  this->get_ParameterValues((Owc10_xp::ParameterValues**)&ParameterValues);
  return ParameterValues;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RecordsetDefDispT<T>::get_PageRowsources(Owc10_xp::PageRowsources** PageRowsources/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PageRowsources"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PageRowsources**)PageRowsources /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PageRowsources* __fastcall
RecordsetDefDispT<T>::get_PageRowsources(void)
{
  Owc10_xp::PageRowsources* PageRowsources;
  this->get_PageRowsources((Owc10_xp::PageRowsources**)&PageRowsources);
  return PageRowsources;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RecordsetDefDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(15));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RecordsetDefDispT<T>::set_UniqueTable(BSTR TableName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UniqueTable"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = TableName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RecordsetDefDispT<T>::get_UniqueTable(BSTR* TableName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UniqueTable"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(TableName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
RecordsetDefDispT<T>::get_UniqueTable(void)
{
  BSTR TableName;
  this->get_UniqueTable((BSTR*)&TableName);
  return TableName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RecordsetDefDispT<T>::set_ResyncCommand(BSTR Command/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ResyncCommand"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = Command /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RecordsetDefDispT<T>::get_ResyncCommand(BSTR* Command/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ResyncCommand"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Command /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
RecordsetDefDispT<T>::get_ResyncCommand(void)
{
  BSTR Command;
  this->get_ResyncCommand((BSTR*)&Command);
  return Command;
}

// *********************************************************************//
// DispIntf:  SublistRelationships
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AE1-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SublistRelationshipsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
SublistRelationshipsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SublistRelationshipsDispT<T>::get_Item(VARIANT Index/*[in]*/, 
                                       Owc10_xp::PageRelationship** PageRelationship/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PageRelationship**)PageRelationship /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PageRelationship* __fastcall
SublistRelationshipsDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Owc10_xp::PageRelationship* PageRelationship;
  this->get_Item(Index, (Owc10_xp::PageRelationship**)&PageRelationship);
  return PageRelationship;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SublistRelationshipsDispT<T>::Add(Owc10_xp::PageRowsource* PageRowsource/*[in]*/, 
                                  Owc10_xp::SchemaRelationship* SchemaRelationship/*[in]*/, 
                                  Owc10_xp::PageRelationship** PageRelationship/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::PageRowsource*)PageRowsource /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Owc10_xp::SchemaRelationship*)SchemaRelationship /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PageRelationship**)PageRelationship /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::PageRelationship* __fastcall
SublistRelationshipsDispT<T>::Add(Owc10_xp::PageRowsource* PageRowsource/*[in]*/, 
                                  Owc10_xp::SchemaRelationship* SchemaRelationship/*[in]*/)
{
  Owc10_xp::PageRelationship* PageRelationship;
  this->Add(PageRowsource, SchemaRelationship, (Owc10_xp::PageRelationship**)&PageRelationship);
  return PageRelationship;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SublistRelationshipsDispT<T>::Delete(VARIANT Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SublistRelationshipsDispT<T>::get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
SublistRelationshipsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunk;
  this->get__NewEnum((LPUNKNOWN*)&ppunk);
  return ppunk;
}

// *********************************************************************//
// DispIntf:  PageRelationship
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A6B-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageRelationshipDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PageRelationshipDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageRelationshipDispT<T>::get_Type(Owc10_xp::DscPageRelTypeEnum* Reltype/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Reltype /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::DscPageRelTypeEnum __fastcall
PageRelationshipDispT<T>::get_Type(void)
{
  Owc10_xp::DscPageRelTypeEnum Reltype;
  this->get_Type((Owc10_xp::DscPageRelTypeEnum*)&Reltype);
  return Reltype;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageRelationshipDispT<T>::set_JoinType(Owc10_xp::DscJoinTypeEnum JoinType)
{
  _TDispID _dispid(*this, OLETEXT("JoinType"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = (int)JoinType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageRelationshipDispT<T>::get_JoinType(Owc10_xp::DscJoinTypeEnum* JoinType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("JoinType"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)JoinType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::DscJoinTypeEnum __fastcall
PageRelationshipDispT<T>::get_JoinType(void)
{
  Owc10_xp::DscJoinTypeEnum JoinType;
  this->get_JoinType((Owc10_xp::DscJoinTypeEnum*)&JoinType);
  return JoinType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageRelationshipDispT<T>::get_ManySide(Owc10_xp::PageRowsource** PageRowsource/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ManySide"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PageRowsource**)PageRowsource /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PageRowsource* __fastcall
PageRelationshipDispT<T>::get_ManySide(void)
{
  Owc10_xp::PageRowsource* PageRowsource;
  this->get_ManySide((Owc10_xp::PageRowsource**)&PageRowsource);
  return PageRowsource;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageRelationshipDispT<T>::get_OneSide(Owc10_xp::PageRowsource** PageRowsource/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OneSide"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PageRowsource**)PageRowsource /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PageRowsource* __fastcall
PageRelationshipDispT<T>::get_OneSide(void)
{
  Owc10_xp::PageRowsource* PageRowsource;
  this->get_OneSide((Owc10_xp::PageRowsource**)&PageRowsource);
  return PageRowsource;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageRelationshipDispT<T>::get_PageRelatedFields(Owc10_xp::PageRelatedFields** PageRelatedFields/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PageRelatedFields"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PageRelatedFields**)PageRelatedFields /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PageRelatedFields* __fastcall
PageRelationshipDispT<T>::get_PageRelatedFields(void)
{
  Owc10_xp::PageRelatedFields* PageRelatedFields;
  this->get_PageRelatedFields((Owc10_xp::PageRelatedFields**)&PageRelatedFields);
  return PageRelatedFields;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageRelationshipDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(6));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  PageRelatedFields
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A6F-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageRelatedFieldsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PageRelatedFieldsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageRelatedFieldsDispT<T>::get_Item(VARIANT Index/*[in]*/, 
                                    Owc10_xp::PageRelatedField** PageRelatedField/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PageRelatedField**)PageRelatedField /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PageRelatedField* __fastcall
PageRelatedFieldsDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Owc10_xp::PageRelatedField* PageRelatedField;
  this->get_Item(Index, (Owc10_xp::PageRelatedField**)&PageRelatedField);
  return PageRelatedField;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageRelatedFieldsDispT<T>::get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
PageRelatedFieldsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunk;
  this->get__NewEnum((LPUNKNOWN*)&ppunk);
  return ppunk;
}

// *********************************************************************//
// DispIntf:  PageRelatedField
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A70-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageRelatedFieldDispT<T>::get_ManySide(Owc10_xp::PageField** PageField/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ManySide"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PageField**)PageField /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PageField* __fastcall
PageRelatedFieldDispT<T>::get_ManySide(void)
{
  Owc10_xp::PageField* PageField;
  this->get_ManySide((Owc10_xp::PageField**)&PageField);
  return PageField;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageRelatedFieldDispT<T>::get_OneSide(Owc10_xp::PageField** PageField/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OneSide"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PageField**)PageField /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PageField* __fastcall
PageRelatedFieldDispT<T>::get_OneSide(void)
{
  Owc10_xp::PageField* PageField;
  this->get_OneSide((Owc10_xp::PageField**)&PageField);
  return PageField;
}

// *********************************************************************//
// DispIntf:  PageField
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AC7-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageFieldDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageFieldDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PageFieldDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageFieldDispT<T>::get_FieldType(Owc10_xp::DscFieldTypeEnum* FieldType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FieldType"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)FieldType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::DscFieldTypeEnum __fastcall
PageFieldDispT<T>::get_FieldType(void)
{
  Owc10_xp::DscFieldTypeEnum FieldType;
  this->get_FieldType((Owc10_xp::DscFieldTypeEnum*)&FieldType);
  return FieldType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageFieldDispT<T>::set_TotalType(Owc10_xp::DscTotalTypeEnum TotalType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TotalType"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = (int)TotalType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageFieldDispT<T>::get_TotalType(Owc10_xp::DscTotalTypeEnum* TotalType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TotalType"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)TotalType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::DscTotalTypeEnum __fastcall
PageFieldDispT<T>::get_TotalType(void)
{
  Owc10_xp::DscTotalTypeEnum TotalType;
  this->get_TotalType((Owc10_xp::DscTotalTypeEnum*)&TotalType);
  return TotalType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageFieldDispT<T>::set_GroupOn(Owc10_xp::DscGroupOnEnum GroupOn/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupOn"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = (int)GroupOn /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageFieldDispT<T>::get_GroupOn(Owc10_xp::DscGroupOnEnum* GroupOn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupOn"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)GroupOn /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::DscGroupOnEnum __fastcall
PageFieldDispT<T>::get_GroupOn(void)
{
  Owc10_xp::DscGroupOnEnum GroupOn;
  this->get_GroupOn((Owc10_xp::DscGroupOnEnum*)&GroupOn);
  return GroupOn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageFieldDispT<T>::set_GroupInterval(double Interval/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupInterval"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = Interval /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageFieldDispT<T>::get_GroupInterval(double* Interval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupInterval"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Interval /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
PageFieldDispT<T>::get_GroupInterval(void)
{
  double Interval;
  this->get_GroupInterval((double*)&Interval);
  return Interval;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageFieldDispT<T>::get_PageRowsource(Owc10_xp::PageRowsource** PageRowsource/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PageRowsource"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PageRowsource**)PageRowsource /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PageRowsource* __fastcall
PageFieldDispT<T>::get_PageRowsource(void)
{
  Owc10_xp::PageRowsource* PageRowsource;
  this->get_PageRowsource((Owc10_xp::PageRowsource**)&PageRowsource);
  return PageRowsource;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageFieldDispT<T>::get_RecordsetDef(Owc10_xp::RecordsetDef** RecordsetDef/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecordsetDef"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::RecordsetDef**)RecordsetDef /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::RecordsetDef* __fastcall
PageFieldDispT<T>::get_RecordsetDef(void)
{
  Owc10_xp::RecordsetDef* RecordsetDef;
  this->get_RecordsetDef((Owc10_xp::RecordsetDef**)&RecordsetDef);
  return RecordsetDef;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageFieldDispT<T>::MoveGrouping(BSTR GroupingDefDest/*[in]*/, VARIANT Index/*[in,opt]*/, 
                                Owc10_xp::GroupingDef** GroupingDef/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MoveGrouping"), DISPID(9));
  TAutoArgs<2> _args;
  _args[1] = GroupingDefDest /*[VT_BSTR:0]*/;
  _args[2] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::GroupingDef**)GroupingDef /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::GroupingDef* __fastcall
PageFieldDispT<T>::MoveGrouping(BSTR GroupingDefDest/*[in]*/, VARIANT Index/*[in,opt]*/)
{
  Owc10_xp::GroupingDef* GroupingDef;
  this->MoveGrouping(GroupingDefDest, Index, (Owc10_xp::GroupingDef**)&GroupingDef);
  return GroupingDef;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageFieldDispT<T>::set_Location(Owc10_xp::DscLocationEnum Location/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Location"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = (int)Location /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageFieldDispT<T>::get_Location(Owc10_xp::DscLocationEnum* Location/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Location"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Location /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::DscLocationEnum __fastcall
PageFieldDispT<T>::get_Location(void)
{
  Owc10_xp::DscLocationEnum Location;
  this->get_Location((Owc10_xp::DscLocationEnum*)&Location);
  return Location;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageFieldDispT<T>::set_Source(BSTR Source/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Source"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Source /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageFieldDispT<T>::get_Source(BSTR* Source/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Source"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Source /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PageFieldDispT<T>::get_Source(void)
{
  BSTR Source;
  this->get_Source((BSTR*)&Source);
  return Source;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageFieldDispT<T>::get_DataType(Adodb_xp::DataTypeEnum* DataType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataType"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)DataType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Adodb_xp::DataTypeEnum __fastcall
PageFieldDispT<T>::get_DataType(void)
{
  Adodb_xp::DataTypeEnum DataType;
  this->get_DataType((Adodb_xp::DataTypeEnum*)&DataType);
  return DataType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageFieldDispT<T>::get_Length(long* Length/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Length"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Length /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PageFieldDispT<T>::get_Length(void)
{
  long Length;
  this->get_Length((long*)&Length);
  return Length;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageFieldDispT<T>::get_SchemaField(Owc10_xp::SchemaField** SchemaField/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SchemaField"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::SchemaField**)SchemaField /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::SchemaField* __fastcall
PageFieldDispT<T>::get_SchemaField(void)
{
  Owc10_xp::SchemaField* SchemaField;
  this->get_SchemaField((Owc10_xp::SchemaField**)&SchemaField);
  return SchemaField;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageFieldDispT<T>::IsBound(VARIANT_BOOL* IsBound/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsBound"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(IsBound /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PageFieldDispT<T>::IsBound(void)
{
  VARIANT_BOOL IsBound;
  this->IsBound((VARIANT_BOOL*)&IsBound);
  return IsBound;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageFieldDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(14));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageFieldDispT<T>::ValidateTotalType(Owc10_xp::DscTotalTypeEnum TotalType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ValidateTotalType"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = (int)TotalType /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageFieldDispT<T>::DefaultName(BSTR* DefaultName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultName"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DefaultName /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
PageFieldDispT<T>::DefaultName(void)
{
  BSTR DefaultName;
  this->DefaultName((BSTR*)&DefaultName);
  return DefaultName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageFieldDispT<T>::DefaultCaption(BSTR* DefaultCaption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultCaption"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DefaultCaption /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
PageFieldDispT<T>::DefaultCaption(void)
{
  BSTR DefaultCaption;
  this->DefaultCaption((BSTR*)&DefaultCaption);
  return DefaultCaption;
}

// *********************************************************************//
// DispIntf:  GroupingDef
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A7B-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupingDefDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupingDefDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
GroupingDefDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupingDefDispT<T>::get_PageFields(Owc10_xp::PageFields** PageFields/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PageFields"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PageFields**)PageFields /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PageFields* __fastcall
GroupingDefDispT<T>::get_PageFields(void)
{
  Owc10_xp::PageFields* PageFields;
  this->get_PageFields((Owc10_xp::PageFields**)&PageFields);
  return PageFields;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupingDefDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(2));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  PageFields
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AB1-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageFieldsDispT<T>::get_Item(VARIANT Index/*[in]*/, Owc10_xp::PageField** PageField/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PageField**)PageField /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PageField* __fastcall
PageFieldsDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Owc10_xp::PageField* PageField;
  this->get_Item(Index, (Owc10_xp::PageField**)&PageField);
  return PageField;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageFieldsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PageFieldsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageFieldsDispT<T>::Delete(VARIANT Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageFieldsDispT<T>::Add(VARIANT Source/*[in]*/, VARIANT FieldType/*[in,opt]*/, 
                        VARIANT Name/*[in,opt]*/, 
                        Owc10_xp::DscTotalTypeEnum TotalType/*[in,def,opt]*/, 
                        VARIANT Index/*[in,opt]*/, Owc10_xp::PageField** PageField/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(4));
  TAutoArgs<5> _args;
  _args[1] = Source /*[VT_VARIANT:0]*/;
  _args[2] = FieldType /*[VT_VARIANT:0]*/;
  _args[3] = Name /*[VT_VARIANT:0]*/;
  _args[4] = (int)TotalType /*[VT_USERDEFINED:0]*/;
  _args[5] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PageField**)PageField /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::PageField* __fastcall
PageFieldsDispT<T>::Add(VARIANT Source/*[in]*/, VARIANT FieldType/*[in,opt]*/, 
                        VARIANT Name/*[in,opt]*/, 
                        Owc10_xp::DscTotalTypeEnum TotalType/*[in,def,opt]*/, 
                        VARIANT Index/*[in,opt]*/)
{
  Owc10_xp::PageField* PageField;
  this->Add(Source, FieldType, Name, TotalType, Index, (Owc10_xp::PageField**)&PageField);
  return PageField;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageFieldsDispT<T>::get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
PageFieldsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunk;
  this->get__NewEnum((LPUNKNOWN*)&ppunk);
  return ppunk;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageFieldsDispT<T>::AddBroken(VARIANT Source/*[in]*/, VARIANT FieldType/*[in,opt]*/, 
                              VARIANT Name/*[in,opt]*/, 
                              Owc10_xp::DscTotalTypeEnum TotalType/*[in,def,opt]*/, 
                              VARIANT Index/*[in,opt]*/, 
                              Owc10_xp::PageField** PageField/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddBroken"), DISPID(5));
  TAutoArgs<5> _args;
  _args[1] = Source /*[VT_VARIANT:0]*/;
  _args[2] = FieldType /*[VT_VARIANT:0]*/;
  _args[3] = Name /*[VT_VARIANT:0]*/;
  _args[4] = (int)TotalType /*[VT_USERDEFINED:0]*/;
  _args[5] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PageField**)PageField /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::PageField* __fastcall
PageFieldsDispT<T>::AddBroken(VARIANT Source/*[in]*/, VARIANT FieldType/*[in,opt]*/, 
                              VARIANT Name/*[in,opt]*/, 
                              Owc10_xp::DscTotalTypeEnum TotalType/*[in,def,opt]*/, 
                              VARIANT Index/*[in,opt]*/)
{
  Owc10_xp::PageField* PageField;
  this->AddBroken(Source, FieldType, Name, TotalType, Index, (Owc10_xp::PageField**)&PageField);
  return PageField;
}

// *********************************************************************//
// DispIntf:  GroupingDefs
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A7C-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupingDefsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
GroupingDefsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupingDefsDispT<T>::get_Item(VARIANT Index/*[in]*/, 
                               Owc10_xp::GroupingDef** GroupingDef/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::GroupingDef**)GroupingDef /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::GroupingDef* __fastcall
GroupingDefsDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Owc10_xp::GroupingDef* GroupingDef;
  this->get_Item(Index, (Owc10_xp::GroupingDef**)&GroupingDef);
  return GroupingDef;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupingDefsDispT<T>::Add(BSTR GroupingDefName/*[in]*/, BSTR GroupingFieldName/*[in]*/, 
                          BSTR PageFieldName/*[in]*/, VARIANT Index/*[in,opt]*/, 
                          Owc10_xp::GroupingDef** GroupingDef/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2));
  TAutoArgs<4> _args;
  _args[1] = GroupingDefName /*[VT_BSTR:0]*/;
  _args[2] = GroupingFieldName /*[VT_BSTR:0]*/;
  _args[3] = PageFieldName /*[VT_BSTR:0]*/;
  _args[4] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::GroupingDef**)GroupingDef /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::GroupingDef* __fastcall
GroupingDefsDispT<T>::Add(BSTR GroupingDefName/*[in]*/, BSTR GroupingFieldName/*[in]*/, 
                          BSTR PageFieldName/*[in]*/, VARIANT Index/*[in,opt]*/)
{
  Owc10_xp::GroupingDef* GroupingDef;
  this->Add(GroupingDefName, GroupingFieldName, PageFieldName, Index, (Owc10_xp::GroupingDef**)&GroupingDef);
  return GroupingDef;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupingDefsDispT<T>::AddTotal(BSTR GroupingDefName/*[in]*/, BSTR GroupingFieldName/*[in]*/, 
                               BSTR PageFieldName/*[in]*/, 
                               Owc10_xp::DscTotalTypeEnum TotalType/*[in]*/, 
                               VARIANT Index/*[in,opt]*/, 
                               Owc10_xp::GroupingDef** GroupingDef/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTotal"), DISPID(3));
  TAutoArgs<5> _args;
  _args[1] = GroupingDefName /*[VT_BSTR:0]*/;
  _args[2] = GroupingFieldName /*[VT_BSTR:0]*/;
  _args[3] = PageFieldName /*[VT_BSTR:0]*/;
  _args[4] = (int)TotalType /*[VT_USERDEFINED:0]*/;
  _args[5] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::GroupingDef**)GroupingDef /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::GroupingDef* __fastcall
GroupingDefsDispT<T>::AddTotal(BSTR GroupingDefName/*[in]*/, BSTR GroupingFieldName/*[in]*/, 
                               BSTR PageFieldName/*[in]*/, 
                               Owc10_xp::DscTotalTypeEnum TotalType/*[in]*/, 
                               VARIANT Index/*[in,opt]*/)
{
  Owc10_xp::GroupingDef* GroupingDef;
  this->AddTotal(GroupingDefName, GroupingFieldName, PageFieldName, TotalType, Index, (Owc10_xp::GroupingDef**)&GroupingDef);
  return GroupingDef;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupingDefsDispT<T>::Delete(VARIANT Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupingDefsDispT<T>::get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
GroupingDefsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunk;
  this->get__NewEnum((LPUNKNOWN*)&ppunk);
  return ppunk;
}

// *********************************************************************//
// DispIntf:  ParameterValues
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AFF-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParameterValuesDispT<T>::get_Item(VARIANT Index/*[in]*/, 
                                  Owc10_xp::ParameterValue** ParameterValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ParameterValue**)ParameterValue /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ParameterValue* __fastcall
ParameterValuesDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Owc10_xp::ParameterValue* ParameterValue;
  this->get_Item(Index, (Owc10_xp::ParameterValue**)&ParameterValue);
  return ParameterValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParameterValuesDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ParameterValuesDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParameterValuesDispT<T>::Add(BSTR ParameterName/*[in]*/, VARIANT Value/*[in,opt]*/, 
                             Owc10_xp::ParameterValue** ppPV/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2));
  TAutoArgs<2> _args;
  _args[1] = ParameterName /*[VT_BSTR:0]*/;
  _args[2] = Value /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ParameterValue**)ppPV /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::ParameterValue* __fastcall
ParameterValuesDispT<T>::Add(BSTR ParameterName/*[in]*/, VARIANT Value/*[in,opt]*/)
{
  Owc10_xp::ParameterValue* ppPV;
  this->Add(ParameterName, Value, (Owc10_xp::ParameterValue**)&ppPV);
  return ppPV;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParameterValuesDispT<T>::Delete(VARIANT Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParameterValuesDispT<T>::get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
ParameterValuesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunk;
  this->get__NewEnum((LPUNKNOWN*)&ppunk);
  return ppunk;
}

// *********************************************************************//
// DispIntf:  ParameterValue
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B0F-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParameterValueDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ParameterValueDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParameterValueDispT<T>::get_Expression(BSTR* Expression/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Expression"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Expression /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ParameterValueDispT<T>::get_Expression(void)
{
  BSTR Expression;
  this->get_Expression((BSTR*)&Expression);
  return Expression;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParameterValueDispT<T>::set_Expression(BSTR Expression/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Expression"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Expression /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParameterValueDispT<T>::get_Value(VARIANT* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
ParameterValueDispT<T>::get_Value(void)
{
  VARIANT Value;
  this->get_Value((VARIANT*)&Value);
  return Value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParameterValueDispT<T>::set_Value(VARIANT Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  LookupRelationships
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A74-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LookupRelationshipsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
LookupRelationshipsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LookupRelationshipsDispT<T>::get_Item(VARIANT Index/*[in]*/, 
                                      Owc10_xp::PageRelationship** PageRelationship/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PageRelationship**)PageRelationship /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PageRelationship* __fastcall
LookupRelationshipsDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Owc10_xp::PageRelationship* PageRelationship;
  this->get_Item(Index, (Owc10_xp::PageRelationship**)&PageRelationship);
  return PageRelationship;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LookupRelationshipsDispT<T>::Add(Owc10_xp::PageRowsource* PageRowsource/*[in]*/, 
                                 Owc10_xp::SchemaRelationship* SchemaRelationship/*[in]*/, 
                                 Owc10_xp::PageRelationship** PageRelationship/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::PageRowsource*)PageRowsource /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Owc10_xp::SchemaRelationship*)SchemaRelationship /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PageRelationship**)PageRelationship /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::PageRelationship* __fastcall
LookupRelationshipsDispT<T>::Add(Owc10_xp::PageRowsource* PageRowsource/*[in]*/, 
                                 Owc10_xp::SchemaRelationship* SchemaRelationship/*[in]*/)
{
  Owc10_xp::PageRelationship* PageRelationship;
  this->Add(PageRowsource, SchemaRelationship, (Owc10_xp::PageRelationship**)&PageRelationship);
  return PageRelationship;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LookupRelationshipsDispT<T>::Delete(VARIANT Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LookupRelationshipsDispT<T>::get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
LookupRelationshipsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunk;
  this->get__NewEnum((LPUNKNOWN*)&ppunk);
  return ppunk;
}

// *********************************************************************//
// DispIntf:  RecordsetDefs
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AA2-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RecordsetDefsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
RecordsetDefsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RecordsetDefsDispT<T>::get_Item(VARIANT Index/*[in]*/, 
                                Owc10_xp::RecordsetDef** RecordsetDef/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::RecordsetDef**)RecordsetDef /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::RecordsetDef* __fastcall
RecordsetDefsDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Owc10_xp::RecordsetDef* RecordsetDef;
  this->get_Item(Index, (Owc10_xp::RecordsetDef**)&RecordsetDef);
  return RecordsetDef;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RecordsetDefsDispT<T>::Add(VARIANT SchemaRowsource/*[in]*/, VARIANT Name/*[in,opt]*/, 
                           Owc10_xp::RecordsetDef** RecordsetDef/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2));
  TAutoArgs<2> _args;
  _args[1] = SchemaRowsource /*[VT_VARIANT:0]*/;
  _args[2] = Name /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::RecordsetDef**)RecordsetDef /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::RecordsetDef* __fastcall
RecordsetDefsDispT<T>::Add(VARIANT SchemaRowsource/*[in]*/, VARIANT Name/*[in,opt]*/)
{
  Owc10_xp::RecordsetDef* RecordsetDef;
  this->Add(SchemaRowsource, Name, (Owc10_xp::RecordsetDef**)&RecordsetDef);
  return RecordsetDef;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RecordsetDefsDispT<T>::AddNew(BSTR Source/*[in]*/, VARIANT RowsourceType/*[in,opt]*/, 
                              VARIANT Name/*[in,opt]*/, 
                              Owc10_xp::RecordsetDef** RecordsetDef/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddNew"), DISPID(3));
  TAutoArgs<3> _args;
  _args[1] = Source /*[VT_BSTR:0]*/;
  _args[2] = RowsourceType /*[VT_VARIANT:0]*/;
  _args[3] = Name /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::RecordsetDef**)RecordsetDef /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::RecordsetDef* __fastcall
RecordsetDefsDispT<T>::AddNew(BSTR Source/*[in]*/, VARIANT RowsourceType/*[in,opt]*/, 
                              VARIANT Name/*[in,opt]*/)
{
  Owc10_xp::RecordsetDef* RecordsetDef;
  this->AddNew(Source, RowsourceType, Name, (Owc10_xp::RecordsetDef**)&RecordsetDef);
  return RecordsetDef;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RecordsetDefsDispT<T>::Delete(VARIANT Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RecordsetDefsDispT<T>::get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
RecordsetDefsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunk;
  this->get__NewEnum((LPUNKNOWN*)&ppunk);
  return ppunk;
}

// *********************************************************************//
// DispIntf:  AllPageFields
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B45-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AllPageFieldsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
AllPageFieldsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AllPageFieldsDispT<T>::get_Item(VARIANT Index/*[in]*/, 
                                Owc10_xp::PageField** PageField/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PageField**)PageField /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PageField* __fastcall
AllPageFieldsDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Owc10_xp::PageField* PageField;
  this->get_Item(Index, (Owc10_xp::PageField**)&PageField);
  return PageField;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AllPageFieldsDispT<T>::get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
AllPageFieldsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunk;
  this->get__NewEnum((LPUNKNOWN*)&ppunk);
  return ppunk;
}

// *********************************************************************//
// DispIntf:  AllGroupingDefs
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AF9-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AllGroupingDefsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
AllGroupingDefsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AllGroupingDefsDispT<T>::get_Item(VARIANT Index/*[in]*/, 
                                  Owc10_xp::GroupingDef** GroupingDef/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::GroupingDef**)GroupingDef /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::GroupingDef* __fastcall
AllGroupingDefsDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Owc10_xp::GroupingDef* GroupingDef;
  this->get_Item(Index, (Owc10_xp::GroupingDef**)&GroupingDef);
  return GroupingDef;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AllGroupingDefsDispT<T>::get__NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
AllGroupingDefsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunk;
  this->get__NewEnum((LPUNKNOWN*)&ppunk);
  return ppunk;
}

// *********************************************************************//
// DispIntf:  IDARef
// Flags:     (5072) Hidden Dual NonExtensible OleAutomation Restricted Dispatchable
// GUID:      {97D6D375-23BB-11D1-A0E1-00C04FC9E20F}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDARefDispT<T>::get_ObjType(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObjType"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDARefDispT<T>::get_ObjType(void)
{
  long pVal;
  this->get_ObjType((long*)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDARefDispT<T>::get_ItemMoniker(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ItemMoniker"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IDARefDispT<T>::get_ItemMoniker(void)
{
  BSTR pVal;
  this->get_ItemMoniker((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDARefDispT<T>::get_DAId(BSTR* pbstrDaid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DAId"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrDaid /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IDARefDispT<T>::get_DAId(void)
{
  BSTR pbstrDaid;
  this->get_DAId((BSTR*)&pbstrDaid);
  return pbstrDaid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDARefDispT<T>::get_Reltype(Owc10_xp::FieldListRelationshipTypeEnum* pfl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Reltype"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pfl /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::FieldListRelationshipTypeEnum __fastcall
IDARefDispT<T>::get_Reltype(void)
{
  Owc10_xp::FieldListRelationshipTypeEnum pfl;
  this->get_Reltype((Owc10_xp::FieldListRelationshipTypeEnum*)&pfl);
  return pfl;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDARefDispT<T>::get_RelName(BSTR* bstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RelName"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(bstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IDARefDispT<T>::get_RelName(void)
{
  BSTR bstr;
  this->get_RelName((BSTR*)&bstr);
  return bstr;
}

// *********************************************************************//
// DispIntf:  Section
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A68-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SectionDispT<T>::get_Type(Owc10_xp::SectTypeEnum* SectType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(1106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)SectType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::SectTypeEnum __fastcall
SectionDispT<T>::get_Type(void)
{
  Owc10_xp::SectTypeEnum SectType;
  this->get_Type((Owc10_xp::SectTypeEnum*)&SectType);
  return SectType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SectionDispT<T>::get_DataPage(Owc10_xp::DataPage** DataPage/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataPage"), DISPID(1102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::DataPage**)DataPage /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::DataPage* __fastcall
SectionDispT<T>::get_DataPage(void)
{
  Owc10_xp::DataPage* DataPage;
  this->get_DataPage((Owc10_xp::DataPage**)&DataPage);
  return DataPage;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SectionDispT<T>::get_HTMLContainer(LPDISPATCH* HTMLContainer/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLContainer"), DISPID(1103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HTMLContainer /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
SectionDispT<T>::get_HTMLContainer(void)
{
  LPDISPATCH HTMLContainer;
  this->get_HTMLContainer((LPDISPATCH*)&HTMLContainer);
  return HTMLContainer;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SectionDispT<T>::get_ParentSection(Owc10_xp::Section** Section/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ParentSection"), DISPID(1107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Section**)Section /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Section* __fastcall
SectionDispT<T>::get_ParentSection(void)
{
  Owc10_xp::Section* Section;
  this->get_ParentSection((Owc10_xp::Section**)&Section);
  return Section;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SectionDispT<T>::get_ChildSection(Owc10_xp::Section** Section/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChildSection"), DISPID(1108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Section**)Section /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Section* __fastcall
SectionDispT<T>::get_ChildSection(void)
{
  Owc10_xp::Section* Section;
  this->get_ChildSection((Owc10_xp::Section**)&Section);
  return Section;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SectionDispT<T>::get_NextSibling(Owc10_xp::Section** Section/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NextSibling"), DISPID(1109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Section**)Section /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Section* __fastcall
SectionDispT<T>::get_NextSibling(void)
{
  Owc10_xp::Section* Section;
  this->get_NextSibling((Owc10_xp::Section**)&Section);
  return Section;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SectionDispT<T>::get_PreviousSibling(Owc10_xp::Section** Section/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PreviousSibling"), DISPID(1110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Section**)Section /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Section* __fastcall
SectionDispT<T>::get_PreviousSibling(void)
{
  Owc10_xp::Section* Section;
  this->get_PreviousSibling((Owc10_xp::Section**)&Section);
  return Section;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SectionDispT<T>::get_NextSection(Owc10_xp::Section** Section/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NextSection"), DISPID(1111));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Section**)Section /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Section* __fastcall
SectionDispT<T>::get_NextSection(void)
{
  Owc10_xp::Section* Section;
  this->get_NextSection((Owc10_xp::Section**)&Section);
  return Section;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SectionDispT<T>::get_PreviousSection(Owc10_xp::Section** Section/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PreviousSection"), DISPID(1112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Section**)Section /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Section* __fastcall
SectionDispT<T>::get_PreviousSection(void)
{
  Owc10_xp::Section* Section;
  this->get_PreviousSection((Owc10_xp::Section**)&Section);
  return Section;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SectionDispT<T>::get_IsExpanded(VARIANT_BOOL* IsExpanded/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsExpanded"), DISPID(1113));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(IsExpanded /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
SectionDispT<T>::get_IsExpanded(void)
{
  VARIANT_BOOL IsExpanded;
  this->get_IsExpanded((VARIANT_BOOL*)&IsExpanded);
  return IsExpanded;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SectionDispT<T>::Expand()
{
  _TDispID _dispid(*this, OLETEXT("Expand"), DISPID(1104));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SectionDispT<T>::Collapse()
{
  _TDispID _dispid(*this, OLETEXT("Collapse"), DISPID(1105));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SectionDispT<T>::MakeCurrent(VARIANT_BOOL ScrollIntoView/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("MakeCurrent"), DISPID(1114));
  TAutoArgs<1> _args;
  _args[1] = ScrollIntoView /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  DataPage
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AB4-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DataPageDispT<T>::get_GroupLevel(Owc10_xp::GroupLevel** GroupLevel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupLevel"), DISPID(1300));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::GroupLevel**)GroupLevel /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::GroupLevel* __fastcall
DataPageDispT<T>::get_GroupLevel(void)
{
  Owc10_xp::GroupLevel* GroupLevel;
  this->get_GroupLevel((Owc10_xp::GroupLevel**)&GroupLevel);
  return GroupLevel;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DataPageDispT<T>::get_Recordset(Adodb_xp::Recordset** Recordset/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Recordset"), DISPID(1301));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Adodb_xp::Recordset**)Recordset /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Adodb_xp::Recordset* __fastcall
DataPageDispT<T>::get_Recordset(void)
{
  Adodb_xp::Recordset* Recordset;
  this->get_Recordset((Adodb_xp::Recordset**)&Recordset);
  return Recordset;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DataPageDispT<T>::set_Filter(VARIANT Criteria/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Filter"), DISPID(1302));
  TAutoArgs<1> _args;
  _args[1] = Criteria /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DataPageDispT<T>::get_Filter(VARIANT* Criteria/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Filter"), DISPID(1302));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Criteria /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
DataPageDispT<T>::get_Filter(void)
{
  VARIANT Criteria;
  this->get_Filter((VARIANT*)&Criteria);
  return Criteria;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DataPageDispT<T>::set_IsFilterOn(VARIANT_BOOL IsFilterOn/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsFilterOn"), DISPID(1303));
  TAutoArgs<1> _args;
  _args[1] = IsFilterOn /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DataPageDispT<T>::get_IsFilterOn(VARIANT_BOOL* IsFilterOn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsFilterOn"), DISPID(1303));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(IsFilterOn /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
DataPageDispT<T>::get_IsFilterOn(void)
{
  VARIANT_BOOL IsFilterOn;
  this->get_IsFilterOn((VARIANT_BOOL*)&IsFilterOn);
  return IsFilterOn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DataPageDispT<T>::MoveFirst()
{
  _TDispID _dispid(*this, OLETEXT("MoveFirst"), DISPID(1304));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DataPageDispT<T>::MoveLast()
{
  _TDispID _dispid(*this, OLETEXT("MoveLast"), DISPID(1305));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DataPageDispT<T>::MoveNext()
{
  _TDispID _dispid(*this, OLETEXT("MoveNext"), DISPID(1306));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DataPageDispT<T>::MovePrevious()
{
  _TDispID _dispid(*this, OLETEXT("MovePrevious"), DISPID(1307));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DataPageDispT<T>::NewRecord()
{
  _TDispID _dispid(*this, OLETEXT("NewRecord"), DISPID(1308));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DataPageDispT<T>::DeleteRecord()
{
  _TDispID _dispid(*this, OLETEXT("DeleteRecord"), DISPID(1309));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DataPageDispT<T>::get_FirstSection(Owc10_xp::Section** Section/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FirstSection"), DISPID(1310));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Section**)Section /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Section* __fastcall
DataPageDispT<T>::get_FirstSection(void)
{
  Owc10_xp::Section* Section;
  this->get_FirstSection((Owc10_xp::Section**)&Section);
  return Section;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DataPageDispT<T>::Save()
{
  _TDispID _dispid(*this, OLETEXT("Save"), DISPID(1311));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DataPageDispT<T>::Undo()
{
  _TDispID _dispid(*this, OLETEXT("Undo"), DISPID(1312));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DataPageDispT<T>::Requery()
{
  _TDispID _dispid(*this, OLETEXT("Requery"), DISPID(1313));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DataPageDispT<T>::SortAscending()
{
  _TDispID _dispid(*this, OLETEXT("SortAscending"), DISPID(1314));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DataPageDispT<T>::SortDescending()
{
  _TDispID _dispid(*this, OLETEXT("SortDescending"), DISPID(1315));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DataPageDispT<T>::ApplyFilter()
{
  _TDispID _dispid(*this, OLETEXT("ApplyFilter"), DISPID(1316));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DataPageDispT<T>::ToggleFilter()
{
  _TDispID _dispid(*this, OLETEXT("ToggleFilter"), DISPID(1317));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DataPageDispT<T>::Help()
{
  _TDispID _dispid(*this, OLETEXT("Help"), DISPID(1318));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DataPageDispT<T>::IsButtonEnabled(Owc10_xp::NavButtonEnum Button/*[in]*/, 
                                  VARIANT_BOOL* Enabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsButtonEnabled"), DISPID(1319));
  TAutoArgs<1> _args;
  _args[1] = (int)Button /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(Enabled /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
DataPageDispT<T>::IsButtonEnabled(Owc10_xp::NavButtonEnum Button/*[in]*/)
{
  VARIANT_BOOL Enabled;
  this->IsButtonEnabled(Button, (VARIANT_BOOL*)&Enabled);
  return Enabled;
}

// *********************************************************************//
// DispIntf:  GroupLevel
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A76-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelDispT<T>::set_GroupOn(Owc10_xp::DscGroupOnEnum GroupOn/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupOn"), DISPID(800));
  TAutoArgs<1> _args;
  _args[1] = (int)GroupOn /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelDispT<T>::get_GroupOn(Owc10_xp::DscGroupOnEnum* GroupOn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupOn"), DISPID(800));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)GroupOn /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::DscGroupOnEnum __fastcall
GroupLevelDispT<T>::get_GroupOn(void)
{
  Owc10_xp::DscGroupOnEnum GroupOn;
  this->get_GroupOn((Owc10_xp::DscGroupOnEnum*)&GroupOn);
  return GroupOn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelDispT<T>::set_GroupInterval(double Interval/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupInterval"), DISPID(807));
  TAutoArgs<1> _args;
  _args[1] = Interval /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelDispT<T>::get_GroupInterval(double* Interval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupInterval"), DISPID(807));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Interval /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
GroupLevelDispT<T>::get_GroupInterval(void)
{
  double Interval;
  this->get_GroupInterval((double*)&Interval);
  return Interval;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelDispT<T>::set_GroupHeader(VARIANT_BOOL Header/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupHeader"), DISPID(801));
  TAutoArgs<1> _args;
  _args[1] = Header /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelDispT<T>::get_GroupHeader(VARIANT_BOOL* Header/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupHeader"), DISPID(801));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Header /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
GroupLevelDispT<T>::get_GroupHeader(void)
{
  VARIANT_BOOL Header;
  this->get_GroupHeader((VARIANT_BOOL*)&Header);
  return Header;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelDispT<T>::set_GroupFooter(VARIANT_BOOL Footer/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupFooter"), DISPID(802));
  TAutoArgs<1> _args;
  _args[1] = Footer /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelDispT<T>::get_GroupFooter(VARIANT_BOOL* Footer/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupFooter"), DISPID(802));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Footer /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
GroupLevelDispT<T>::get_GroupFooter(void)
{
  VARIANT_BOOL Footer;
  this->get_GroupFooter((VARIANT_BOOL*)&Footer);
  return Footer;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelDispT<T>::set_CaptionSection(VARIANT_BOOL CaptionSection/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CaptionSection"), DISPID(803));
  TAutoArgs<1> _args;
  _args[1] = CaptionSection /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelDispT<T>::get_CaptionSection(VARIANT_BOOL* CaptionSection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CaptionSection"), DISPID(803));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CaptionSection /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
GroupLevelDispT<T>::get_CaptionSection(void)
{
  VARIANT_BOOL CaptionSection;
  this->get_CaptionSection((VARIANT_BOOL*)&CaptionSection);
  return CaptionSection;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelDispT<T>::set_RecordNavigationSection(VARIANT_BOOL RecNavSection/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecordNavigationSection"), DISPID(804));
  TAutoArgs<1> _args;
  _args[1] = RecNavSection /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelDispT<T>::get_RecordNavigationSection(VARIANT_BOOL* RecNavSection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecordNavigationSection"), DISPID(804));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RecNavSection /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
GroupLevelDispT<T>::get_RecordNavigationSection(void)
{
  VARIANT_BOOL RecNavSection;
  this->get_RecordNavigationSection((VARIANT_BOOL*)&RecNavSection);
  return RecNavSection;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelDispT<T>::set_DataPageSize(long Repeat/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataPageSize"), DISPID(805));
  TAutoArgs<1> _args;
  _args[1] = Repeat /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelDispT<T>::get_DataPageSize(long* Repeat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataPageSize"), DISPID(805));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Repeat /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
GroupLevelDispT<T>::get_DataPageSize(void)
{
  long Repeat;
  this->get_DataPageSize((long*)&Repeat);
  return Repeat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelDispT<T>::set_ExpandedByDefault(VARIANT_BOOL ExpandedByDefault/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExpandedByDefault"), DISPID(806));
  TAutoArgs<1> _args;
  _args[1] = ExpandedByDefault /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelDispT<T>::get_ExpandedByDefault(VARIANT_BOOL* ExpandedByDefault/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExpandedByDefault"), DISPID(806));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ExpandedByDefault /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
GroupLevelDispT<T>::get_ExpandedByDefault(void)
{
  VARIANT_BOOL ExpandedByDefault;
  this->get_ExpandedByDefault((VARIANT_BOOL*)&ExpandedByDefault);
  return ExpandedByDefault;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelDispT<T>::set_GroupFilterControl(BSTR GroupFilterControl/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupFilterControl"), DISPID(808));
  TAutoArgs<1> _args;
  _args[1] = GroupFilterControl /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelDispT<T>::get_GroupFilterControl(BSTR* GroupFilterControl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupFilterControl"), DISPID(808));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(GroupFilterControl /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
GroupLevelDispT<T>::get_GroupFilterControl(void)
{
  BSTR GroupFilterControl;
  this->get_GroupFilterControl((BSTR*)&GroupFilterControl);
  return GroupFilterControl;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelDispT<T>::set_DefaultSort(BSTR DefaultSort/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultSort"), DISPID(809));
  TAutoArgs<1> _args;
  _args[1] = DefaultSort /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelDispT<T>::get_DefaultSort(BSTR* DefaultSort/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultSort"), DISPID(809));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DefaultSort /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
GroupLevelDispT<T>::get_DefaultSort(void)
{
  BSTR DefaultSort;
  this->get_DefaultSort((BSTR*)&DefaultSort);
  return DefaultSort;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelDispT<T>::set_RecordSource(BSTR RecordSource/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecordSource"), DISPID(810));
  TAutoArgs<1> _args;
  _args[1] = RecordSource /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelDispT<T>::get_RecordSource(BSTR* RecordSource/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecordSource"), DISPID(810));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RecordSource /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
GroupLevelDispT<T>::get_RecordSource(void)
{
  BSTR RecordSource;
  this->get_RecordSource((BSTR*)&RecordSource);
  return RecordSource;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelDispT<T>::set_CaptionElementId(BSTR CaptionElementId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CaptionElementId"), DISPID(811));
  TAutoArgs<1> _args;
  _args[1] = CaptionElementId /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelDispT<T>::get_CaptionElementId(BSTR* CaptionElementId/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CaptionElementId"), DISPID(811));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CaptionElementId /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
GroupLevelDispT<T>::get_CaptionElementId(void)
{
  BSTR CaptionElementId;
  this->get_CaptionElementId((BSTR*)&CaptionElementId);
  return CaptionElementId;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelDispT<T>::set_HeaderElementId(BSTR HeaderElementId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderElementId"), DISPID(812));
  TAutoArgs<1> _args;
  _args[1] = HeaderElementId /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelDispT<T>::get_HeaderElementId(BSTR* HeaderElementId/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeaderElementId"), DISPID(812));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HeaderElementId /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
GroupLevelDispT<T>::get_HeaderElementId(void)
{
  BSTR HeaderElementId;
  this->get_HeaderElementId((BSTR*)&HeaderElementId);
  return HeaderElementId;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelDispT<T>::set_FooterElementId(BSTR FooterElementId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FooterElementId"), DISPID(813));
  TAutoArgs<1> _args;
  _args[1] = FooterElementId /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelDispT<T>::get_FooterElementId(BSTR* FooterElementId/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FooterElementId"), DISPID(813));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FooterElementId /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
GroupLevelDispT<T>::get_FooterElementId(void)
{
  BSTR FooterElementId;
  this->get_FooterElementId((BSTR*)&FooterElementId);
  return FooterElementId;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelDispT<T>::set_RecordNavigationElementId(BSTR RecordNavigationElementId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecordNavigationElementId"), DISPID(814));
  TAutoArgs<1> _args;
  _args[1] = RecordNavigationElementId /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelDispT<T>::get_RecordNavigationElementId(BSTR* RecordNavigationElementId/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecordNavigationElementId"), DISPID(814));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RecordNavigationElementId /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
GroupLevelDispT<T>::get_RecordNavigationElementId(void)
{
  BSTR RecordNavigationElementId;
  this->get_RecordNavigationElementId((BSTR*)&RecordNavigationElementId);
  return RecordNavigationElementId;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelDispT<T>::get_GroupedOnField(Owc10_xp::PageField** ppPageField/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupedOnField"), DISPID(815));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PageField**)ppPageField /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PageField* __fastcall
GroupLevelDispT<T>::get_GroupedOnField(void)
{
  Owc10_xp::PageField* ppPageField;
  this->get_GroupedOnField((Owc10_xp::PageField**)&ppPageField);
  return ppPageField;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelDispT<T>::set_GroupFilterField(BSTR GroupFilterField/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupFilterField"), DISPID(816));
  TAutoArgs<1> _args;
  _args[1] = GroupFilterField /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelDispT<T>::get_GroupFilterField(BSTR* GroupFilterField/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupFilterField"), DISPID(816));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(GroupFilterField /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
GroupLevelDispT<T>::get_GroupFilterField(void)
{
  BSTR GroupFilterField;
  this->get_GroupFilterField((BSTR*)&GroupFilterField);
  return GroupFilterField;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelDispT<T>::set_SGWindow(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SGWindow"), DISPID(817));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelDispT<T>::set_SGMessage(unsigned Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SGMessage"), DISPID(818));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_UINT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelDispT<T>::SetDesignerFlags(long grfFlags/*[in]*/, VARIANT_BOOL vfSet)
{
  _TDispID _dispid(*this, OLETEXT("SetDesignerFlags"), DISPID(830));
  TAutoArgs<2> _args;
  _args[1] = grfFlags /*[VT_I4:0]*/;
  _args[2] = vfSet /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelDispT<T>::set_AllowEdits(VARIANT_BOOL AllowEdits/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowEdits"), DISPID(819));
  TAutoArgs<1> _args;
  _args[1] = AllowEdits /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelDispT<T>::get_AllowEdits(VARIANT_BOOL* AllowEdits/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowEdits"), DISPID(819));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AllowEdits /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
GroupLevelDispT<T>::get_AllowEdits(void)
{
  VARIANT_BOOL AllowEdits;
  this->get_AllowEdits((VARIANT_BOOL*)&AllowEdits);
  return AllowEdits;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelDispT<T>::set_AllowAdditions(VARIANT_BOOL AllowAdditions/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowAdditions"), DISPID(820));
  TAutoArgs<1> _args;
  _args[1] = AllowAdditions /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelDispT<T>::get_AllowAdditions(VARIANT_BOOL* AllowAdditions/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowAdditions"), DISPID(820));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AllowAdditions /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
GroupLevelDispT<T>::get_AllowAdditions(void)
{
  VARIANT_BOOL AllowAdditions;
  this->get_AllowAdditions((VARIANT_BOOL*)&AllowAdditions);
  return AllowAdditions;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelDispT<T>::set_AllowDeletions(VARIANT_BOOL AllowDeletions/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowDeletions"), DISPID(821));
  TAutoArgs<1> _args;
  _args[1] = AllowDeletions /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelDispT<T>::get_AllowDeletions(VARIANT_BOOL* AllowDeletions/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowDeletions"), DISPID(821));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AllowDeletions /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
GroupLevelDispT<T>::get_AllowDeletions(void)
{
  VARIANT_BOOL AllowDeletions;
  this->get_AllowDeletions((VARIANT_BOOL*)&AllowDeletions);
  return AllowDeletions;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelDispT<T>::set_RecordSelector(VARIANT_BOOL RecordSelector/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecordSelector"), DISPID(822));
  TAutoArgs<1> _args;
  _args[1] = RecordSelector /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelDispT<T>::get_RecordSelector(VARIANT_BOOL* RecordSelector/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecordSelector"), DISPID(822));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RecordSelector /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
GroupLevelDispT<T>::get_RecordSelector(void)
{
  VARIANT_BOOL RecordSelector;
  this->get_RecordSelector((VARIANT_BOOL*)&RecordSelector);
  return RecordSelector;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelDispT<T>::set_AlternateRowColor(BSTR AlternateRowColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AlternateRowColor"), DISPID(823));
  TAutoArgs<1> _args;
  _args[1] = AlternateRowColor /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelDispT<T>::get_AlternateRowColor(BSTR* AlternateRowColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AlternateRowColor"), DISPID(823));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AlternateRowColor /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
GroupLevelDispT<T>::get_AlternateRowColor(void)
{
  BSTR AlternateRowColor;
  this->get_AlternateRowColor((BSTR*)&AlternateRowColor);
  return AlternateRowColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(-800));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
GroupLevelDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

// *********************************************************************//
// DispIntf:  GroupLevels
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B00-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelsDispT<T>::get_Item(VARIANT Index/*[in]*/, 
                              Owc10_xp::GroupLevel** GroupLevel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::GroupLevel**)GroupLevel /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::GroupLevel* __fastcall
GroupLevelsDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Owc10_xp::GroupLevel* GroupLevel;
  this->get_Item(Index, (Owc10_xp::GroupLevel**)&GroupLevel);
  return GroupLevel;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(850));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
GroupLevelsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelsDispT<T>::get__NewEnum(VARIANT* Enum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Enum /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
GroupLevelsDispT<T>::get__NewEnum(void)
{
  VARIANT Enum;
  this->get__NewEnum((VARIANT*)&Enum);
  return Enum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelsDispT<T>::Add(BSTR RecordSource/*[in]*/, VARIANT_BOOL FailIfThere/*[in,def,opt]*/, 
                         Owc10_xp::GroupLevel** GroupLevel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(851));
  TAutoArgs<2> _args;
  _args[1] = RecordSource /*[VT_BSTR:0]*/;
  _args[2] = FailIfThere /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::GroupLevel**)GroupLevel /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::GroupLevel* __fastcall
GroupLevelsDispT<T>::Add(BSTR RecordSource/*[in]*/, VARIANT_BOOL FailIfThere/*[in,def,opt]*/)
{
  Owc10_xp::GroupLevel* GroupLevel;
  this->Add(RecordSource, FailIfThere, (Owc10_xp::GroupLevel**)&GroupLevel);
  return GroupLevel;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupLevelsDispT<T>::Delete(VARIANT Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(852));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  DataPages
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39A85-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DataPagesDispT<T>::get_Item(VARIANT Index/*[in]*/, Owc10_xp::DataPage** DataPage/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::DataPage**)DataPage /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::DataPage* __fastcall
DataPagesDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Owc10_xp::DataPage* DataPage;
  this->get_Item(Index, (Owc10_xp::DataPage**)&DataPage);
  return DataPage;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DataPagesDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(850));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
DataPagesDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DataPagesDispT<T>::get__NewEnum(VARIANT* Enum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Enum /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
DataPagesDispT<T>::get__NewEnum(void)
{
  VARIANT Enum;
  this->get__NewEnum((VARIANT*)&Enum);
  return Enum;
}

// *********************************************************************//
// DispIntf:  ElementExtension
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AAC-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ElementExtensionDispT<T>::get_ElementID(BSTR* ElementID/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementID"), DISPID(900));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ElementID /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ElementExtensionDispT<T>::get_ElementID(void)
{
  BSTR ElementID;
  this->get_ElementID((BSTR*)&ElementID);
  return ElementID;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ElementExtensionDispT<T>::set_ConsumesRecordset(VARIANT_BOOL ConsumesRecordset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConsumesRecordset"), DISPID(902));
  TAutoArgs<1> _args;
  _args[1] = ConsumesRecordset /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ElementExtensionDispT<T>::get_ConsumesRecordset(VARIANT_BOOL* ConsumesRecordset/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConsumesRecordset"), DISPID(902));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ConsumesRecordset /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ElementExtensionDispT<T>::get_ConsumesRecordset(void)
{
  VARIANT_BOOL ConsumesRecordset;
  this->get_ConsumesRecordset((VARIANT_BOOL*)&ConsumesRecordset);
  return ConsumesRecordset;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ElementExtensionDispT<T>::set_AlternateDataSource(BSTR AlternateDataSource/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AlternateDataSource"), DISPID(911));
  TAutoArgs<1> _args;
  _args[1] = AlternateDataSource /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ElementExtensionDispT<T>::get_AlternateDataSource(BSTR* AlternateDataSource/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AlternateDataSource"), DISPID(911));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AlternateDataSource /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ElementExtensionDispT<T>::get_AlternateDataSource(void)
{
  BSTR AlternateDataSource;
  this->get_AlternateDataSource((BSTR*)&AlternateDataSource);
  return AlternateDataSource;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ElementExtensionDispT<T>::set_ListRowSource(BSTR ListRowSource/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListRowSource"), DISPID(904));
  TAutoArgs<1> _args;
  _args[1] = ListRowSource /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ElementExtensionDispT<T>::get_ListRowSource(BSTR* ListRowSource/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListRowSource"), DISPID(904));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ListRowSource /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ElementExtensionDispT<T>::get_ListRowSource(void)
{
  BSTR ListRowSource;
  this->get_ListRowSource((BSTR*)&ListRowSource);
  return ListRowSource;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ElementExtensionDispT<T>::set_ListBoundField(BSTR BoundField/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListBoundField"), DISPID(905));
  TAutoArgs<1> _args;
  _args[1] = BoundField /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ElementExtensionDispT<T>::get_ListBoundField(BSTR* BoundField/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListBoundField"), DISPID(905));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BoundField /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ElementExtensionDispT<T>::get_ListBoundField(void)
{
  BSTR BoundField;
  this->get_ListBoundField((BSTR*)&BoundField);
  return BoundField;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ElementExtensionDispT<T>::set_ListDisplayField(BSTR DisplayField/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListDisplayField"), DISPID(906));
  TAutoArgs<1> _args;
  _args[1] = DisplayField /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ElementExtensionDispT<T>::get_ListDisplayField(BSTR* DisplayField/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListDisplayField"), DISPID(906));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DisplayField /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ElementExtensionDispT<T>::get_ListDisplayField(void)
{
  BSTR DisplayField;
  this->get_ListDisplayField((BSTR*)&DisplayField);
  return DisplayField;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ElementExtensionDispT<T>::set_ChildLabel(BSTR ChildLabel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChildLabel"), DISPID(907));
  TAutoArgs<1> _args;
  _args[1] = ChildLabel /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ElementExtensionDispT<T>::get_ChildLabel(BSTR* ChildLabel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChildLabel"), DISPID(907));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ChildLabel /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ElementExtensionDispT<T>::get_ChildLabel(void)
{
  BSTR ChildLabel;
  this->get_ChildLabel((BSTR*)&ChildLabel);
  return ChildLabel;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ElementExtensionDispT<T>::set_TotalType(Owc10_xp::DscTotalTypeEnum TotalType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TotalType"), DISPID(908));
  TAutoArgs<1> _args;
  _args[1] = (int)TotalType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ElementExtensionDispT<T>::get_TotalType(Owc10_xp::DscTotalTypeEnum* TotalType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TotalType"), DISPID(908));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)TotalType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::DscTotalTypeEnum __fastcall
ElementExtensionDispT<T>::get_TotalType(void)
{
  Owc10_xp::DscTotalTypeEnum TotalType;
  this->get_TotalType((Owc10_xp::DscTotalTypeEnum*)&TotalType);
  return TotalType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ElementExtensionDispT<T>::set_DefaultValue(BSTR DefaultValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultValue"), DISPID(909));
  TAutoArgs<1> _args;
  _args[1] = DefaultValue /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ElementExtensionDispT<T>::get_DefaultValue(BSTR* DefaultValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultValue"), DISPID(909));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DefaultValue /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ElementExtensionDispT<T>::get_DefaultValue(void)
{
  BSTR DefaultValue;
  this->get_DefaultValue((BSTR*)&DefaultValue);
  return DefaultValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ElementExtensionDispT<T>::set_RecordSource(BSTR RecordSource/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecordSource"), DISPID(910));
  TAutoArgs<1> _args;
  _args[1] = RecordSource /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ElementExtensionDispT<T>::get_RecordSource(BSTR* RecordSource/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecordSource"), DISPID(910));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RecordSource /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ElementExtensionDispT<T>::get_RecordSource(void)
{
  BSTR RecordSource;
  this->get_RecordSource((BSTR*)&RecordSource);
  return RecordSource;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ElementExtensionDispT<T>::set_ControlSource(BSTR ControlSource/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlSource"), DISPID(912));
  TAutoArgs<1> _args;
  _args[1] = ControlSource /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ElementExtensionDispT<T>::get_ControlSource(BSTR* ControlSource/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlSource"), DISPID(912));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ControlSource /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ElementExtensionDispT<T>::get_ControlSource(void)
{
  BSTR ControlSource;
  this->get_ControlSource((BSTR*)&ControlSource);
  return ControlSource;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ElementExtensionDispT<T>::set_UniqueTable(BSTR UniqueTable/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UniqueTable"), DISPID(913));
  TAutoArgs<1> _args;
  _args[1] = UniqueTable /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ElementExtensionDispT<T>::get_UniqueTable(BSTR* UniqueTable/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UniqueTable"), DISPID(913));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(UniqueTable /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ElementExtensionDispT<T>::get_UniqueTable(void)
{
  BSTR UniqueTable;
  this->get_UniqueTable((BSTR*)&UniqueTable);
  return UniqueTable;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ElementExtensionDispT<T>::set_ResyncCommand(BSTR ResyncCommand/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ResyncCommand"), DISPID(914));
  TAutoArgs<1> _args;
  _args[1] = ResyncCommand /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ElementExtensionDispT<T>::get_ResyncCommand(BSTR* ResyncCommand/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ResyncCommand"), DISPID(914));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ResyncCommand /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ElementExtensionDispT<T>::get_ResyncCommand(void)
{
  BSTR ResyncCommand;
  this->get_ResyncCommand((BSTR*)&ResyncCommand);
  return ResyncCommand;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ElementExtensionDispT<T>::set_ServerFilter(BSTR ServerFilter/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ServerFilter"), DISPID(916));
  TAutoArgs<1> _args;
  _args[1] = ServerFilter /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ElementExtensionDispT<T>::get_ServerFilter(BSTR* ServerFilter/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ServerFilter"), DISPID(916));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ServerFilter /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ElementExtensionDispT<T>::get_ServerFilter(void)
{
  BSTR ServerFilter;
  this->get_ServerFilter((BSTR*)&ServerFilter);
  return ServerFilter;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ElementExtensionDispT<T>::SetDesignerFlags(long grfFlags/*[in]*/, VARIANT_BOOL vfSet)
{
  _TDispID _dispid(*this, OLETEXT("SetDesignerFlags"), DISPID(930));
  TAutoArgs<2> _args;
  _args[1] = grfFlags /*[VT_I4:0]*/;
  _args[2] = vfSet /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ElementExtensionDispT<T>::set_Format(BSTR Format/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Format"), DISPID(915));
  TAutoArgs<1> _args;
  _args[1] = Format /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ElementExtensionDispT<T>::get_Format(BSTR* Format/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Format"), DISPID(915));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Format /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ElementExtensionDispT<T>::get_Format(void)
{
  BSTR Format;
  this->get_Format((BSTR*)&Format);
  return Format;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ElementExtensionDispT<T>::FixupNames(BSTR bstrOldSource/*[in]*/, BSTR bstrNewSource, 
                                     BSTR bstrOldDefaultCaption)
{
  _TDispID _dispid(*this, OLETEXT("FixupNames"), DISPID(931));
  TAutoArgs<3> _args;
  _args[1] = bstrOldSource /*[VT_BSTR:0]*/;
  _args[2] = bstrNewSource /*[VT_BSTR:0]*/;
  _args[3] = bstrOldDefaultCaption /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ElementExtensionDispT<T>::set_ElementID(BSTR ElementID/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementID"), DISPID(900));
  TAutoArgs<1> _args;
  _args[1] = ElementID /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ElementExtensionDispT<T>::set_RecordsetLabel(BSTR RecordsetLabel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecordsetLabel"), DISPID(917));
  TAutoArgs<1> _args;
  _args[1] = RecordsetLabel /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ElementExtensionDispT<T>::get_RecordsetLabel(BSTR* RecordsetLabel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecordsetLabel"), DISPID(917));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RecordsetLabel /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ElementExtensionDispT<T>::get_RecordsetLabel(void)
{
  BSTR RecordsetLabel;
  this->get_RecordsetLabel((BSTR*)&RecordsetLabel);
  return RecordsetLabel;
}

// *********************************************************************//
// DispIntf:  ElementExtensions
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AC9-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ElementExtensionsDispT<T>::get_Item(VARIANT Index/*[in]*/, 
                                    Owc10_xp::ElementExtension** ppElementExtension/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ElementExtension**)ppElementExtension /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ElementExtension* __fastcall
ElementExtensionsDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Owc10_xp::ElementExtension* ppElementExtension;
  this->get_Item(Index, (Owc10_xp::ElementExtension**)&ppElementExtension);
  return ppElementExtension;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ElementExtensionsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(950));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ElementExtensionsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ElementExtensionsDispT<T>::get__NewEnum(VARIANT* Enum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Enum /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
ElementExtensionsDispT<T>::get__NewEnum(void)
{
  VARIANT Enum;
  this->get__NewEnum((VARIANT*)&Enum);
  return Enum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ElementExtensionsDispT<T>::Add(BSTR ElementID/*[in]*/, VARIANT_BOOL FailIfThere/*[in,def,opt]*/, 
                               Owc10_xp::ElementExtension** ElementExtension/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(951));
  TAutoArgs<2> _args;
  _args[1] = ElementID /*[VT_BSTR:0]*/;
  _args[2] = FailIfThere /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ElementExtension**)ElementExtension /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::ElementExtension* __fastcall
ElementExtensionsDispT<T>::Add(BSTR ElementID/*[in]*/, VARIANT_BOOL FailIfThere/*[in,def,opt]*/)
{
  Owc10_xp::ElementExtension* ElementExtension;
  this->Add(ElementID, FailIfThere, (Owc10_xp::ElementExtension**)&ElementExtension);
  return ElementExtension;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ElementExtensionsDispT<T>::Delete(VARIANT Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(952));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIDataSourceControl
// Interface: IDataSourceControl
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::set_ConnectionString(BSTR ConnectionString/*[in]*/)
{
  return (*this)->set_ConnectionString(ConnectionString);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_ConnectionString(BSTR* ConnectionString/*[out,retval]*/)
{
  return (*this)->get_ConnectionString(ConnectionString);
}

template <class T> BSTR __fastcall
TCOMIDataSourceControlT<T>::get_ConnectionString(void)
{
  BSTR ConnectionString = 0;
  OLECHECK(this->get_ConnectionString((BSTR*)&ConnectionString));
  return ConnectionString;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_CurrentDirectory(BSTR* CurrentDirectory/*[out,retval]*/)
{
  return (*this)->get_CurrentDirectory(CurrentDirectory);
}

template <class T> BSTR __fastcall
TCOMIDataSourceControlT<T>::get_CurrentDirectory(void)
{
  BSTR CurrentDirectory = 0;
  OLECHECK(this->get_CurrentDirectory((BSTR*)&CurrentDirectory));
  return CurrentDirectory;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::set_UseRemoteProvider(VARIANT_BOOL RemoteProvider/*[in]*/)
{
  return (*this)->set_UseRemoteProvider(RemoteProvider);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::set_UseRemoteProvider(TOLEBOOL RemoteProvider/*[in]*/)
{
  return (*this)->set_UseRemoteProvider(VARIANT_BOOL)RemoteProvider);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_UseRemoteProvider(VARIANT_BOOL* RemoteProvider/*[out,retval]*/)
{
  return (*this)->get_UseRemoteProvider(RemoteProvider);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_UseRemoteProvider(TOLEBOOL* RemoteProvider/*[out,retval]*/)
{
  return (*this)->get_UseRemoteProvider(VARIANT_BOOL*)RemoteProvider);
}

template <class T> TOLEBOOL __fastcall
TCOMIDataSourceControlT<T>::get_UseRemoteProvider(void)
{
  VARIANT_BOOL RemoteProvider;
  OLECHECK(this->get_UseRemoteProvider((VARIANT_BOOL*)&RemoteProvider));
  return (TOLEBOOL)RemoteProvider;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_Connection(Adodb_xp::Connection** Connection/*[out,retval]*/)
{
  return (*this)->get_Connection(Connection);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_Connection(Adodb_xp::ConnectionPtr* Connection/*[out,retval]*/)
{
  return (*this)->get_Connection(Connection**)Connection);
}

template <class T> Adodb_xp::ConnectionPtr __fastcall
TCOMIDataSourceControlT<T>::get_Connection(void)
{
  Adodb_xp::Connection* Connection;
  OLECHECK(this->get_Connection((Adodb_xp::Connection**)&Connection));
  return (Adodb_xp::ConnectionPtr)Connection;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::set_DataEntry(VARIANT_BOOL DataEntry/*[in]*/)
{
  return (*this)->set_DataEntry(DataEntry);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::set_DataEntry(TOLEBOOL DataEntry/*[in]*/)
{
  return (*this)->set_DataEntry(VARIANT_BOOL)DataEntry);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_DataEntry(VARIANT_BOOL* DataEntry/*[out,retval]*/)
{
  return (*this)->get_DataEntry(DataEntry);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_DataEntry(TOLEBOOL* DataEntry/*[out,retval]*/)
{
  return (*this)->get_DataEntry(VARIANT_BOOL*)DataEntry);
}

template <class T> TOLEBOOL __fastcall
TCOMIDataSourceControlT<T>::get_DataEntry(void)
{
  VARIANT_BOOL DataEntry;
  OLECHECK(this->get_DataEntry((VARIANT_BOOL*)&DataEntry));
  return (TOLEBOOL)DataEntry;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::set_MaxRecords(long RecordsMax/*[in]*/)
{
  return (*this)->set_MaxRecords(RecordsMax);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_MaxRecords(long* RecordsMax/*[out,retval]*/)
{
  return (*this)->get_MaxRecords(RecordsMax);
}

template <class T> long __fastcall
TCOMIDataSourceControlT<T>::get_MaxRecords(void)
{
  long RecordsMax;
  OLECHECK(this->get_MaxRecords((long*)&RecordsMax));
  return RecordsMax;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_DefaultRecordset(Adodb_xp::Recordset** RecordsetDefault/*[out,retval]*/)
{
  return (*this)->get_DefaultRecordset(RecordsetDefault);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_DefaultRecordset(Adodb_xp::RecordsetPtr* RecordsetDefault/*[out,retval]*/)
{
  return (*this)->get_DefaultRecordset(Recordset**)RecordsetDefault);
}

template <class T> Adodb_xp::RecordsetPtr __fastcall
TCOMIDataSourceControlT<T>::get_DefaultRecordset(void)
{
  Adodb_xp::Recordset* RecordsetDefault;
  OLECHECK(this->get_DefaultRecordset((Adodb_xp::Recordset**)&RecordsetDefault));
  return (Adodb_xp::RecordsetPtr)RecordsetDefault;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::Execute(BSTR RecordsetName/*[in]*/, 
                                    Adodb_xp::ExecuteOptionEnum ExecuteOption/*[in,def,opt]*/, 
                                    Owc10_xp::DscFetchTypeEnum FetchType/*[in,def,opt]*/, 
                                    Adodb_xp::Recordset** Recordset/*[out,retval]*/)
{
  return (*this)->Execute(RecordsetName, ExecuteOption, FetchType, Recordset);
}

template <class T> Adodb_xp::Recordset* __fastcall
TCOMIDataSourceControlT<T>::Execute(BSTR RecordsetName/*[in]*/, 
                                    Adodb_xp::ExecuteOptionEnum ExecuteOption/*[in,def,opt]*/, 
                                    Owc10_xp::DscFetchTypeEnum FetchType/*[in,def,opt]*/)
{
  Adodb_xp::Recordset* Recordset;
  OLECHECK(this->Execute(, (Adodb_xp::Recordset**)&Recordset));
  return Recordset;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_SchemaRowsources(Owc10_xp::SchemaRowsources** SchemaRowsources/*[out,retval]*/)
{
  return (*this)->get_SchemaRowsources(SchemaRowsources);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_SchemaRowsources(Owc10_xp::SchemaRowsourcesPtr* SchemaRowsources/*[out,retval]*/)
{
  return (*this)->get_SchemaRowsources(SchemaRowsources**)SchemaRowsources);
}

template <class T> Owc10_xp::SchemaRowsourcesPtr __fastcall
TCOMIDataSourceControlT<T>::get_SchemaRowsources(void)
{
  Owc10_xp::SchemaRowsources* SchemaRowsources;
  OLECHECK(this->get_SchemaRowsources((Owc10_xp::SchemaRowsources**)&SchemaRowsources));
  return (Owc10_xp::SchemaRowsourcesPtr)SchemaRowsources;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_SchemaRelationships(Owc10_xp::SchemaRelationships** SchemaRelationships/*[out,retval]*/)
{
  return (*this)->get_SchemaRelationships(SchemaRelationships);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_SchemaRelationships(Owc10_xp::SchemaRelationshipsPtr* SchemaRelationships/*[out,retval]*/)
{
  return (*this)->get_SchemaRelationships(SchemaRelationships**)SchemaRelationships);
}

template <class T> Owc10_xp::SchemaRelationshipsPtr __fastcall
TCOMIDataSourceControlT<T>::get_SchemaRelationships(void)
{
  Owc10_xp::SchemaRelationships* SchemaRelationships;
  OLECHECK(this->get_SchemaRelationships((Owc10_xp::SchemaRelationships**)&SchemaRelationships));
  return (Owc10_xp::SchemaRelationshipsPtr)SchemaRelationships;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_PageRowsources(Owc10_xp::PageRowsources** PageRowsources/*[out,retval]*/)
{
  return (*this)->get_PageRowsources(PageRowsources);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_PageRowsources(Owc10_xp::PageRowsourcesPtr* PageRowsources/*[out,retval]*/)
{
  return (*this)->get_PageRowsources(PageRowsources**)PageRowsources);
}

template <class T> Owc10_xp::PageRowsourcesPtr __fastcall
TCOMIDataSourceControlT<T>::get_PageRowsources(void)
{
  Owc10_xp::PageRowsources* PageRowsources;
  OLECHECK(this->get_PageRowsources((Owc10_xp::PageRowsources**)&PageRowsources));
  return (Owc10_xp::PageRowsourcesPtr)PageRowsources;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_RecordsetDefs(Owc10_xp::RecordsetDefs** RecordsetDefs/*[out,retval]*/)
{
  return (*this)->get_RecordsetDefs(RecordsetDefs);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_RecordsetDefs(Owc10_xp::RecordsetDefsPtr* RecordsetDefs/*[out,retval]*/)
{
  return (*this)->get_RecordsetDefs(RecordsetDefs**)RecordsetDefs);
}

template <class T> Owc10_xp::RecordsetDefsPtr __fastcall
TCOMIDataSourceControlT<T>::get_RecordsetDefs(void)
{
  Owc10_xp::RecordsetDefs* RecordsetDefs;
  OLECHECK(this->get_RecordsetDefs((Owc10_xp::RecordsetDefs**)&RecordsetDefs));
  return (Owc10_xp::RecordsetDefsPtr)RecordsetDefs;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_RootRecordsetDefs(Owc10_xp::RecordsetDefs** RootRecordsetDefs/*[out,retval]*/)
{
  return (*this)->get_RootRecordsetDefs(RootRecordsetDefs);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_RootRecordsetDefs(Owc10_xp::RecordsetDefsPtr* RootRecordsetDefs/*[out,retval]*/)
{
  return (*this)->get_RootRecordsetDefs(RecordsetDefs**)RootRecordsetDefs);
}

template <class T> Owc10_xp::RecordsetDefsPtr __fastcall
TCOMIDataSourceControlT<T>::get_RootRecordsetDefs(void)
{
  Owc10_xp::RecordsetDefs* RootRecordsetDefs;
  OLECHECK(this->get_RootRecordsetDefs((Owc10_xp::RecordsetDefs**)&RootRecordsetDefs));
  return (Owc10_xp::RecordsetDefsPtr)RootRecordsetDefs;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_PivotDefs(LPDISPATCH* PivotDefs/*[out,retval]*/)
{
  return (*this)->get_PivotDefs(PivotDefs);
}

template <class T> LPDISPATCH __fastcall
TCOMIDataSourceControlT<T>::get_PivotDefs(void)
{
  LPDISPATCH PivotDefs;
  OLECHECK(this->get_PivotDefs((LPDISPATCH*)&PivotDefs));
  return PivotDefs;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::SetDataAssistant(LPDISPATCH DataAssistant/*[in]*/)
{
  return (*this)->SetDataAssistant(DataAssistant);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::DesignAdvise(LPUNKNOWN Advise/*[in]*/, BSTR SinkName/*[in]*/)
{
  return (*this)->DesignAdvise(Advise, SinkName);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::DesignUnAdvise(BSTR SinkName/*[in]*/)
{
  return (*this)->DesignUnAdvise(SinkName);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::ProcessDrop(LPUNKNOWN pUnknownDropGoo/*[in]*/, 
                                        BSTR bstrRecordSetDefName/*[in]*/, 
                                        Owc10_xp::DscDropLocationEnum dl/*[in]*/, 
                                        Owc10_xp::DscDropTypeEnum dt/*[in]*/, 
                                        BSTR PageRowsource/*[in]*/, BSTR SchemaRelationship/*[in]*/)
{
  return (*this)->ProcessDrop(pUnknownDropGoo, bstrRecordSetDefName, dl, dt, PageRowsource, 
                              SchemaRelationship);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::ScriptDrop(VARIANT Rowsources/*[in]*/, VARIANT Relationships/*[in]*/, 
                                       VARIANT Fields/*[in]*/, BSTR bstrRecordSetDefName/*[in]*/, 
                                       Owc10_xp::DscDropLocationEnum dl/*[in]*/, 
                                       Owc10_xp::DscDropTypeEnum dt/*[in]*/, 
                                       BSTR PageRowsource/*[in]*/, BSTR SchemaRelationship/*[in]*/)
{
  return (*this)->ScriptDrop(Rowsources, Relationships, Fields, bstrRecordSetDefName, dl, dt, 
                             PageRowsource, SchemaRelationship);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::set_DefaultRecordsetName(BSTR DefaultRecordsetName/*[in]*/)
{
  return (*this)->set_DefaultRecordsetName(DefaultRecordsetName);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_DefaultRecordsetName(BSTR* DefaultRecordsetName/*[out,retval]*/)
{
  return (*this)->get_DefaultRecordsetName(DefaultRecordsetName);
}

template <class T> BSTR __fastcall
TCOMIDataSourceControlT<T>::get_DefaultRecordsetName(void)
{
  BSTR DefaultRecordsetName = 0;
  OLECHECK(this->get_DefaultRecordsetName((BSTR*)&DefaultRecordsetName));
  return DefaultRecordsetName;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::set_XMLData(BSTR XMLData/*[in]*/)
{
  return (*this)->set_XMLData(XMLData);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_XMLData(BSTR* XMLData/*[out,retval]*/)
{
  return (*this)->get_XMLData(XMLData);
}

template <class T> BSTR __fastcall
TCOMIDataSourceControlT<T>::get_XMLData(void)
{
  BSTR XMLData = 0;
  OLECHECK(this->get_XMLData((BSTR*)&XMLData));
  return XMLData;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_GroupLevels(Owc10_xp::GroupLevels** GroupLevels/*[out,retval]*/)
{
  return (*this)->get_GroupLevels(GroupLevels);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_GroupLevels(Owc10_xp::GroupLevelsPtr* GroupLevels/*[out,retval]*/)
{
  return (*this)->get_GroupLevels(GroupLevels**)GroupLevels);
}

template <class T> Owc10_xp::GroupLevelsPtr __fastcall
TCOMIDataSourceControlT<T>::get_GroupLevels(void)
{
  Owc10_xp::GroupLevels* GroupLevels;
  OLECHECK(this->get_GroupLevels((Owc10_xp::GroupLevels**)&GroupLevels));
  return (Owc10_xp::GroupLevelsPtr)GroupLevels;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::GetContainingSection(LPDISPATCH Element/*[in]*/, 
                                                 Owc10_xp::Section** Section/*[out,retval]*/)
{
  return (*this)->GetContainingSection(Element, Section);
}

template <class T> Owc10_xp::Section* __fastcall
TCOMIDataSourceControlT<T>::GetContainingSection(LPDISPATCH Element/*[in]*/)
{
  Owc10_xp::Section* Section;
  OLECHECK(this->GetContainingSection(, (Owc10_xp::Section**)&Section));
  return Section;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_Constants(LPDISPATCH* IDispatchConstants/*[out,retval]*/)
{
  return (*this)->get_Constants(IDispatchConstants);
}

template <class T> LPDISPATCH __fastcall
TCOMIDataSourceControlT<T>::get_Constants(void)
{
  LPDISPATCH IDispatchConstants;
  OLECHECK(this->get_Constants((LPDISPATCH*)&IDispatchConstants));
  return IDispatchConstants;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_ElementExtensions(Owc10_xp::ElementExtensions** ElementExtensions/*[out,retval]*/)
{
  return (*this)->get_ElementExtensions(ElementExtensions);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_ElementExtensions(Owc10_xp::ElementExtensionsPtr* ElementExtensions/*[out,retval]*/)
{
  return (*this)->get_ElementExtensions(ElementExtensions**)ElementExtensions);
}

template <class T> Owc10_xp::ElementExtensionsPtr __fastcall
TCOMIDataSourceControlT<T>::get_ElementExtensions(void)
{
  Owc10_xp::ElementExtensions* ElementExtensions;
  OLECHECK(this->get_ElementExtensions((Owc10_xp::ElementExtensions**)&ElementExtensions));
  return (Owc10_xp::ElementExtensionsPtr)ElementExtensions;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_IsNew(VARIANT_BOOL* IsNew/*[out,retval]*/)
{
  return (*this)->get_IsNew(IsNew);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_IsNew(TOLEBOOL* IsNew/*[out,retval]*/)
{
  return (*this)->get_IsNew(VARIANT_BOOL*)IsNew);
}

template <class T> TOLEBOOL __fastcall
TCOMIDataSourceControlT<T>::get_IsNew(void)
{
  VARIANT_BOOL IsNew;
  OLECHECK(this->get_IsNew((VARIANT_BOOL*)&IsNew));
  return (TOLEBOOL)IsNew;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::ScriptValidate(VARIANT Rowsources/*[in]*/, VARIANT Relationships/*[in]*/, 
                                           VARIANT Fields/*[in]*/, BSTR RecordsetDef/*[in]*/, 
                                           Owc10_xp::DscDropLocationEnum dl/*[in]*/, 
                                           Owc10_xp::DscDropTypeEnum dt/*[in]*/, 
                                           BSTR* DropRowsource/*[out]*/, 
                                           VARIANT* RowsourcesOut/*[out]*/, 
                                           VARIANT* RelationshipsOut/*[out]*/)
{
  return (*this)->ScriptValidate(Rowsources, Relationships, Fields, RecordsetDef, dl, dt, 
                                 DropRowsource, RowsourcesOut, RelationshipsOut);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::set_RecordsetType(Owc10_xp::DscRecordsetTypeEnum RecordsetType/*[in]*/)
{
  return (*this)->set_RecordsetType(RecordsetType);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_RecordsetType(Owc10_xp::DscRecordsetTypeEnum* RecordsetType/*[out,retval]*/)
{
  return (*this)->get_RecordsetType(RecordsetType);
}

template <class T> Owc10_xp::DscRecordsetTypeEnum __fastcall
TCOMIDataSourceControlT<T>::get_RecordsetType(void)
{
  Owc10_xp::DscRecordsetTypeEnum RecordsetType;
  OLECHECK(this->get_RecordsetType((Owc10_xp::DscRecordsetTypeEnum*)&RecordsetType));
  return RecordsetType;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::ValidateDrop(LPUNKNOWN UnknownDropGoo/*[in]*/, 
                                         BSTR RecordSetDefName/*[in]*/, 
                                         Owc10_xp::DscDropLocationEnum Location/*[in]*/, 
                                         Owc10_xp::DscDropTypeEnum Type/*[in]*/, 
                                         BSTR* DropRowsource/*[out]*/, 
                                         VARIANT* RowsourcesOut/*[out]*/, 
                                         VARIANT* RelationshipsOut/*[out]*/, 
                                         long* NumberOfDrops/*[out]*/)
{
  return (*this)->ValidateDrop(UnknownDropGoo, RecordSetDefName, Location, Type, DropRowsource, 
                               RowsourcesOut, RelationshipsOut, NumberOfDrops);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::HyperlinkPart(VARIANT Hyperlink/*[in]*/, 
                                          Owc10_xp::DscHyperlinkPartEnum Part/*[in]*/, 
                                          BSTR* Ret/*[out,retval]*/)
{
  return (*this)->HyperlinkPart(Hyperlink, Part, Ret);
}

template <class T> BSTR __fastcall
TCOMIDataSourceControlT<T>::HyperlinkPart(VARIANT Hyperlink/*[in]*/, 
                                          Owc10_xp::DscHyperlinkPartEnum Part/*[in]*/)
{
  BSTR Ret = 0;
  OLECHECK(this->HyperlinkPart(, (BSTR*)&Ret));
  return Ret;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::SchemaRefresh(void)
{
  return (*this)->SchemaRefresh();
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::UpdateElementID(BSTR OldID, BSTR NewID)
{
  return (*this)->UpdateElementID(OldID, NewID);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_AllPageFields(Owc10_xp::AllPageFields** AllPageFields/*[out,retval]*/)
{
  return (*this)->get_AllPageFields(AllPageFields);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_AllPageFields(Owc10_xp::AllPageFieldsPtr* AllPageFields/*[out,retval]*/)
{
  return (*this)->get_AllPageFields(AllPageFields**)AllPageFields);
}

template <class T> Owc10_xp::AllPageFieldsPtr __fastcall
TCOMIDataSourceControlT<T>::get_AllPageFields(void)
{
  Owc10_xp::AllPageFields* AllPageFields;
  OLECHECK(this->get_AllPageFields((Owc10_xp::AllPageFields**)&AllPageFields));
  return (Owc10_xp::AllPageFieldsPtr)AllPageFields;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_CurrentSection(Owc10_xp::Section** Section/*[out,retval]*/)
{
  return (*this)->get_CurrentSection(Section);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_CurrentSection(Owc10_xp::SectionPtr* Section/*[out,retval]*/)
{
  return (*this)->get_CurrentSection(Section**)Section);
}

template <class T> Owc10_xp::SectionPtr __fastcall
TCOMIDataSourceControlT<T>::get_CurrentSection(void)
{
  Owc10_xp::Section* Section;
  OLECHECK(this->get_CurrentSection((Owc10_xp::Section**)&Section));
  return (Owc10_xp::SectionPtr)Section;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_ProviderType(VARIANT DataMember/*[in,opt]*/, 
                                             Owc10_xp::ProviderType* ProviderType/*[out,retval]*/)
{
  return (*this)->get_ProviderType(DataMember, ProviderType);
}

template <class T> Owc10_xp::ProviderType __fastcall
TCOMIDataSourceControlT<T>::get_ProviderType(VARIANT DataMember/*[in,opt]*/)
{
  Owc10_xp::ProviderType ProviderType;
  OLECHECK(this->get_ProviderType(, (Owc10_xp::ProviderType*)&ProviderType));
  return ProviderType;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_AllGroupingDefs(Owc10_xp::AllGroupingDefs** AllGroupingDefs/*[out,retval]*/)
{
  return (*this)->get_AllGroupingDefs(AllGroupingDefs);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_AllGroupingDefs(Owc10_xp::AllGroupingDefsPtr* AllGroupingDefs/*[out,retval]*/)
{
  return (*this)->get_AllGroupingDefs(AllGroupingDefs**)AllGroupingDefs);
}

template <class T> Owc10_xp::AllGroupingDefsPtr __fastcall
TCOMIDataSourceControlT<T>::get_AllGroupingDefs(void)
{
  Owc10_xp::AllGroupingDefs* AllGroupingDefs;
  OLECHECK(this->get_AllGroupingDefs((Owc10_xp::AllGroupingDefs**)&AllGroupingDefs));
  return (Owc10_xp::AllGroupingDefsPtr)AllGroupingDefs;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::set_DisplayAlerts(VARIANT_BOOL DisplayAlerts/*[in]*/)
{
  return (*this)->set_DisplayAlerts(DisplayAlerts);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::set_DisplayAlerts(TOLEBOOL DisplayAlerts/*[in]*/)
{
  return (*this)->set_DisplayAlerts(VARIANT_BOOL)DisplayAlerts);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_DisplayAlerts(VARIANT_BOOL* DisplayAlerts/*[out,retval]*/)
{
  return (*this)->get_DisplayAlerts(DisplayAlerts);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_DisplayAlerts(TOLEBOOL* DisplayAlerts/*[out,retval]*/)
{
  return (*this)->get_DisplayAlerts(VARIANT_BOOL*)DisplayAlerts);
}

template <class T> TOLEBOOL __fastcall
TCOMIDataSourceControlT<T>::get_DisplayAlerts(void)
{
  VARIANT_BOOL DisplayAlerts;
  OLECHECK(this->get_DisplayAlerts((VARIANT_BOOL*)&DisplayAlerts));
  return (TOLEBOOL)DisplayAlerts;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_DataPages(Owc10_xp::DataPages** DataPages/*[out,retval]*/)
{
  return (*this)->get_DataPages(DataPages);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_DataPages(Owc10_xp::DataPagesPtr* DataPages/*[out,retval]*/)
{
  return (*this)->get_DataPages(DataPages**)DataPages);
}

template <class T> Owc10_xp::DataPagesPtr __fastcall
TCOMIDataSourceControlT<T>::get_DataPages(void)
{
  Owc10_xp::DataPages* DataPages;
  OLECHECK(this->get_DataPages((Owc10_xp::DataPages**)&DataPages));
  return (Owc10_xp::DataPagesPtr)DataPages;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::Reset(void)
{
  return (*this)->Reset();
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::getDataMemberName(long lIndex/*[in]*/, 
                                              Msdatasrc_xp::DataMember* pbstrDM/*[out,retval]*/)
{
  return (*this)->getDataMemberName(lIndex, pbstrDM);
}

template <class T> Msdatasrc_xp::DataMember __fastcall
TCOMIDataSourceControlT<T>::getDataMemberName(long lIndex/*[in]*/)
{
  Msdatasrc_xp::DataMember pbstrDM;
  OLECHECK(this->getDataMemberName(, (Msdatasrc_xp::DataMember*)&pbstrDM));
  return pbstrDM;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::getDataMemberCount(long* plcount/*[out,retval]*/)
{
  return (*this)->getDataMemberCount(plcount);
}

template <class T> long __fastcall
TCOMIDataSourceControlT<T>::getDataMemberCount(void)
{
  long plcount;
  OLECHECK(this->getDataMemberCount((long*)&plcount));
  return plcount;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::set_GridX(long xGrid/*[in]*/)
{
  return (*this)->set_GridX(xGrid);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_GridX(long* xGrid/*[out,retval]*/)
{
  return (*this)->get_GridX(xGrid);
}

template <class T> long __fastcall
TCOMIDataSourceControlT<T>::get_GridX(void)
{
  long xGrid;
  OLECHECK(this->get_GridX((long*)&xGrid));
  return xGrid;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::set_GridY(long yGrid/*[in]*/)
{
  return (*this)->set_GridY(yGrid);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_GridY(long* yGrid/*[out,retval]*/)
{
  return (*this)->get_GridY(yGrid);
}

template <class T> long __fastcall
TCOMIDataSourceControlT<T>::get_GridY(void)
{
  long yGrid;
  OLECHECK(this->get_GridY((long*)&yGrid));
  return yGrid;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_LoadError(long* LoadError/*[out,retval]*/)
{
  return (*this)->get_LoadError(LoadError);
}

template <class T> long __fastcall
TCOMIDataSourceControlT<T>::get_LoadError(void)
{
  long LoadError;
  OLECHECK(this->get_LoadError((long*)&LoadError));
  return LoadError;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::GetSectionInfo(LPDISPATCH SectionElement/*[in]*/, 
                                           BSTR* RecordSource/*[out]*/, 
                                           Owc10_xp::SectTypeEnum* SectionType/*[out]*/, 
                                           Owc10_xp::GroupLevel** GroupLevel/*[out]*/)
{
  return (*this)->GetSectionInfo(SectionElement, RecordSource, SectionType, GroupLevel);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::DeleteRecordSourceIfUnused(BSTR RecordSource/*[in]*/)
{
  return (*this)->DeleteRecordSourceIfUnused(RecordSource);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::DeletePageFieldIfUnused(BSTR RecordSource/*[in]*/, 
                                                    BSTR PageField/*[in]*/)
{
  return (*this)->DeletePageFieldIfUnused(RecordSource, PageField);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::set_DefaultControlType(Owc10_xp::DefaultControlTypeEnum ControlType/*[in]*/)
{
  return (*this)->set_DefaultControlType(ControlType);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_DefaultControlType(Owc10_xp::DefaultControlTypeEnum* ControlType/*[out,retval]*/)
{
  return (*this)->get_DefaultControlType(ControlType);
}

template <class T> Owc10_xp::DefaultControlTypeEnum __fastcall
TCOMIDataSourceControlT<T>::get_DefaultControlType(void)
{
  Owc10_xp::DefaultControlTypeEnum ControlType;
  OLECHECK(this->get_DefaultControlType((Owc10_xp::DefaultControlTypeEnum*)&ControlType));
  return ControlType;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::set_IsDirty(VARIANT_BOOL IsDirty/*[in]*/)
{
  return (*this)->set_IsDirty(IsDirty);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::set_IsDirty(TOLEBOOL IsDirty/*[in]*/)
{
  return (*this)->set_IsDirty(VARIANT_BOOL)IsDirty);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_IsDirty(VARIANT_BOOL* IsDirty/*[out,retval]*/)
{
  return (*this)->get_IsDirty(IsDirty);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_IsDirty(TOLEBOOL* IsDirty/*[out,retval]*/)
{
  return (*this)->get_IsDirty(VARIANT_BOOL*)IsDirty);
}

template <class T> TOLEBOOL __fastcall
TCOMIDataSourceControlT<T>::get_IsDirty(void)
{
  VARIANT_BOOL IsDirty;
  OLECHECK(this->get_IsDirty((VARIANT_BOOL*)&IsDirty));
  return (TOLEBOOL)IsDirty;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_Busy(VARIANT_BOOL* Busy/*[out,retval]*/)
{
  return (*this)->get_Busy(Busy);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_Busy(TOLEBOOL* Busy/*[out,retval]*/)
{
  return (*this)->get_Busy(VARIANT_BOOL*)Busy);
}

template <class T> TOLEBOOL __fastcall
TCOMIDataSourceControlT<T>::get_Busy(void)
{
  VARIANT_BOOL Busy;
  OLECHECK(this->get_Busy((VARIANT_BOOL*)&Busy));
  return (TOLEBOOL)Busy;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_Version(BSTR* Version/*[out,retval]*/)
{
  return (*this)->get_Version(Version);
}

template <class T> BSTR __fastcall
TCOMIDataSourceControlT<T>::get_Version(void)
{
  BSTR Version = 0;
  OLECHECK(this->get_Version((BSTR*)&Version));
  return Version;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_MajorVersion(long* MajorVersion/*[out,retval]*/)
{
  return (*this)->get_MajorVersion(MajorVersion);
}

template <class T> long __fastcall
TCOMIDataSourceControlT<T>::get_MajorVersion(void)
{
  long MajorVersion;
  OLECHECK(this->get_MajorVersion((long*)&MajorVersion));
  return MajorVersion;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_MinorVersion(BSTR* MinorVersion/*[out,retval]*/)
{
  return (*this)->get_MinorVersion(MinorVersion);
}

template <class T> BSTR __fastcall
TCOMIDataSourceControlT<T>::get_MinorVersion(void)
{
  BSTR MinorVersion = 0;
  OLECHECK(this->get_MinorVersion((BSTR*)&MinorVersion));
  return MinorVersion;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_BuildNumber(BSTR* BuildNumber/*[out,retval]*/)
{
  return (*this)->get_BuildNumber(BuildNumber);
}

template <class T> BSTR __fastcall
TCOMIDataSourceControlT<T>::get_BuildNumber(void)
{
  BSTR BuildNumber = 0;
  OLECHECK(this->get_BuildNumber((BSTR*)&BuildNumber));
  return BuildNumber;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_RevisionNumber(BSTR* RevisionNumber/*[out,retval]*/)
{
  return (*this)->get_RevisionNumber(RevisionNumber);
}

template <class T> BSTR __fastcall
TCOMIDataSourceControlT<T>::get_RevisionNumber(void)
{
  BSTR RevisionNumber = 0;
  OLECHECK(this->get_RevisionNumber((BSTR*)&RevisionNumber));
  return RevisionNumber;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::ResetRecordset(BSTR bstrRecordset)
{
  return (*this)->ResetRecordset(bstrRecordset);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::set_IsDataModelDirty(VARIANT_BOOL IsDataModelDirty/*[in]*/)
{
  return (*this)->set_IsDataModelDirty(IsDataModelDirty);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::set_IsDataModelDirty(TOLEBOOL IsDataModelDirty/*[in]*/)
{
  return (*this)->set_IsDataModelDirty(VARIANT_BOOL)IsDataModelDirty);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_IsDataModelDirty(VARIANT_BOOL* IsDataModelDirty/*[out,retval]*/)
{
  return (*this)->get_IsDataModelDirty(IsDataModelDirty);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_IsDataModelDirty(TOLEBOOL* IsDataModelDirty/*[out,retval]*/)
{
  return (*this)->get_IsDataModelDirty(VARIANT_BOOL*)IsDataModelDirty);
}

template <class T> TOLEBOOL __fastcall
TCOMIDataSourceControlT<T>::get_IsDataModelDirty(void)
{
  VARIANT_BOOL IsDataModelDirty;
  OLECHECK(this->get_IsDataModelDirty((VARIANT_BOOL*)&IsDataModelDirty));
  return (TOLEBOOL)IsDataModelDirty;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::GetExportableConnectString(Owc10_xp::ExportableConnectStringEnum ExportType/*[in]*/, 
                                                       BSTR* ConnectString/*[out]*/)
{
  return (*this)->GetExportableConnectString(ExportType, ConnectString);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::ExportXML(Owc10_xp::DscEncodingEnum eEncoding/*[in,def,opt]*/)
{
  return (*this)->ExportXML(eEncoding);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::SetRootRecordset(BSTR RecordsetName/*[in]*/, 
                                             Adodb_xp::Recordset* Recordset/*[in]*/)
{
  return (*this)->SetRootRecordset(RecordsetName, Recordset);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::GetOfflineDisplayInfo(BSTR* OnlineServer/*[out]*/, 
                                                  BSTR* OnlineDatabase/*[out]*/, 
                                                  BSTR* OfflineServer/*[out]*/, 
                                                  BSTR* OfflineDatabase/*[out]*/)
{
  return (*this)->GetOfflineDisplayInfo(OnlineServer, OnlineDatabase, OfflineServer, OfflineDatabase);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::set_OfflineType(Owc10_xp::DscOfflineTypeEnum Publication/*[in]*/)
{
  return (*this)->set_OfflineType(Publication);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_OfflineType(Owc10_xp::DscOfflineTypeEnum* Publication/*[out,retval]*/)
{
  return (*this)->get_OfflineType(Publication);
}

template <class T> Owc10_xp::DscOfflineTypeEnum __fastcall
TCOMIDataSourceControlT<T>::get_OfflineType(void)
{
  Owc10_xp::DscOfflineTypeEnum Publication;
  OLECHECK(this->get_OfflineType((Owc10_xp::DscOfflineTypeEnum*)&Publication));
  return Publication;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::set_OfflinePublication(BSTR Publication/*[in]*/)
{
  return (*this)->set_OfflinePublication(Publication);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_OfflinePublication(BSTR* Publication/*[out,retval]*/)
{
  return (*this)->get_OfflinePublication(Publication);
}

template <class T> BSTR __fastcall
TCOMIDataSourceControlT<T>::get_OfflinePublication(void)
{
  BSTR Publication = 0;
  OLECHECK(this->get_OfflinePublication((BSTR*)&Publication));
  return Publication;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_Offline(VARIANT_BOOL* IsOffline/*[out,retval]*/)
{
  return (*this)->get_Offline(IsOffline);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_Offline(TOLEBOOL* IsOffline/*[out,retval]*/)
{
  return (*this)->get_Offline(VARIANT_BOOL*)IsOffline);
}

template <class T> TOLEBOOL __fastcall
TCOMIDataSourceControlT<T>::get_Offline(void)
{
  VARIANT_BOOL IsOffline;
  OLECHECK(this->get_Offline((VARIANT_BOOL*)&IsOffline));
  return (TOLEBOOL)IsOffline;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::set_OfflineSource(BSTR Source/*[in]*/)
{
  return (*this)->set_OfflineSource(Source);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_OfflineSource(BSTR* Source/*[out,retval]*/)
{
  return (*this)->get_OfflineSource(Source);
}

template <class T> BSTR __fastcall
TCOMIDataSourceControlT<T>::get_OfflineSource(void)
{
  BSTR Source = 0;
  OLECHECK(this->get_OfflineSource((BSTR*)&Source));
  return Source;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::set_XMLLocation(Owc10_xp::DscXMLLocationEnum Location/*[in]*/)
{
  return (*this)->set_XMLLocation(Location);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_XMLLocation(Owc10_xp::DscXMLLocationEnum* Location/*[out,retval]*/)
{
  return (*this)->get_XMLLocation(Location);
}

template <class T> Owc10_xp::DscXMLLocationEnum __fastcall
TCOMIDataSourceControlT<T>::get_XMLLocation(void)
{
  Owc10_xp::DscXMLLocationEnum Location;
  OLECHECK(this->get_XMLLocation((Owc10_xp::DscXMLLocationEnum*)&Location));
  return Location;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::set_UseXMLData(VARIANT_BOOL UseXMLData/*[in]*/)
{
  return (*this)->set_UseXMLData(UseXMLData);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::set_UseXMLData(TOLEBOOL UseXMLData/*[in]*/)
{
  return (*this)->set_UseXMLData(VARIANT_BOOL)UseXMLData);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_UseXMLData(VARIANT_BOOL* UseXMLData/*[out,retval]*/)
{
  return (*this)->get_UseXMLData(UseXMLData);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_UseXMLData(TOLEBOOL* UseXMLData/*[out,retval]*/)
{
  return (*this)->get_UseXMLData(VARIANT_BOOL*)UseXMLData);
}

template <class T> TOLEBOOL __fastcall
TCOMIDataSourceControlT<T>::get_UseXMLData(void)
{
  VARIANT_BOOL UseXMLData;
  OLECHECK(this->get_UseXMLData((VARIANT_BOOL*)&UseXMLData));
  return (TOLEBOOL)UseXMLData;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::set_XMLDataTarget(BSTR Source/*[in]*/)
{
  return (*this)->set_XMLDataTarget(Source);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_XMLDataTarget(BSTR* Source/*[out,retval]*/)
{
  return (*this)->get_XMLDataTarget(Source);
}

template <class T> BSTR __fastcall
TCOMIDataSourceControlT<T>::get_XMLDataTarget(void)
{
  BSTR Source = 0;
  OLECHECK(this->get_XMLDataTarget((BSTR*)&Source));
  return Source;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::Refresh(Owc10_xp::RefreshType RefreshType/*[in,def,opt]*/)
{
  return (*this)->Refresh(RefreshType);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::FindRelatedGroupLevel(Owc10_xp::GroupLevel* pGroupLevel/*[in]*/, 
                                                  long fChild/*[in]*/, 
                                                  Owc10_xp::GroupLevel** ppGrouplevel/*[out]*/)
{
  return (*this)->FindRelatedGroupLevel(pGroupLevel, fChild, ppGrouplevel);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::DllNotification(Owc10_xp::NotificationType Notification/*[in]*/)
{
  return (*this)->DllNotification(Notification);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::SuspendUndo(VARIANT_BOOL Suspend/*[in]*/)
{
  return (*this)->SuspendUndo(Suspend);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::UpdateFocus(void)
{
  return (*this)->UpdateFocus();
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::set_ConnectionFile(BSTR ConnectionFile/*[in]*/)
{
  return (*this)->set_ConnectionFile(ConnectionFile);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_ConnectionFile(BSTR* ConnectionFile/*[out,retval]*/)
{
  return (*this)->get_ConnectionFile(ConnectionFile);
}

template <class T> BSTR __fastcall
TCOMIDataSourceControlT<T>::get_ConnectionFile(void)
{
  BSTR ConnectionFile = 0;
  OLECHECK(this->get_ConnectionFile((BSTR*)&ConnectionFile));
  return ConnectionFile;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::IsValidDAPProvider(BSTR ConnectionString/*[in]*/, 
                                               VARIANT_BOOL* IsValid/*[out,retval]*/)
{
  return (*this)->IsValidDAPProvider(ConnectionString, IsValid);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIDataSourceControlT<T>::IsValidDAPProvider(BSTR ConnectionString/*[in]*/)
{
  VARIANT_BOOL IsValid;
  OLECHECK(this->IsValidDAPProvider(, (VARIANT_BOOL*)&IsValid));
  return IsValid;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_DefaultRecordsetDefName(BSTR* DefaultRecordsetDefName/*[out,retval]*/)
{
  return (*this)->get_DefaultRecordsetDefName(DefaultRecordsetDefName);
}

template <class T> BSTR __fastcall
TCOMIDataSourceControlT<T>::get_DefaultRecordsetDefName(void)
{
  BSTR DefaultRecordsetDefName = 0;
  OLECHECK(this->get_DefaultRecordsetDefName((BSTR*)&DefaultRecordsetDefName));
  return DefaultRecordsetDefName;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::EuroConvert(double Number/*[in]*/, BSTR SourceCurrency/*[in]*/, 
                                        BSTR TargetCurrency/*[in]*/, 
                                        VARIANT FullPrecision/*[in,opt]*/, 
                                        VARIANT TriangulationPrecision/*[in,opt]*/, 
                                        double* pRet/*[out,retval]*/)
{
  return (*this)->EuroConvert(Number, SourceCurrency, TargetCurrency, FullPrecision, 
                              TriangulationPrecision, pRet);
}

template <class T> double __fastcall
TCOMIDataSourceControlT<T>::EuroConvert(double Number/*[in]*/, BSTR SourceCurrency/*[in]*/, 
                                        BSTR TargetCurrency/*[in]*/, 
                                        VARIANT FullPrecision/*[in,opt]*/, 
                                        VARIANT TriangulationPrecision/*[in,opt]*/)
{
  double pRet;
  OLECHECK(this->EuroConvert(, (double*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::GetDAPProviders(LPSAFEARRAY* Providers/*[out,retval]*/)
{
  return (*this)->GetDAPProviders(Providers);
}

template <class T> LPSAFEARRAY __fastcall
TCOMIDataSourceControlT<T>::GetDAPProviders(void)
{
  LPSAFEARRAY Providers;
  OLECHECK(this->GetDAPProviders((LPSAFEARRAY*)&Providers));
  return Providers;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::SetSynchronizing(VARIANT_BOOL Synchronizing/*[in]*/)
{
  return (*this)->SetSynchronizing(Synchronizing);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_ConnectionStringFullPath(BSTR* ConnectionStringFullPath/*[out,retval]*/)
{
  return (*this)->get_ConnectionStringFullPath(ConnectionStringFullPath);
}

template <class T> BSTR __fastcall
TCOMIDataSourceControlT<T>::get_ConnectionStringFullPath(void)
{
  BSTR ConnectionStringFullPath = 0;
  OLECHECK(this->get_ConnectionStringFullPath((BSTR*)&ConnectionStringFullPath));
  return ConnectionStringFullPath;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::SetDisplayError(VARIANT_BOOL DisplayError/*[in]*/)
{
  return (*this)->SetDisplayError(DisplayError);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::set_IsNew(VARIANT_BOOL IsNew/*[in]*/)
{
  return (*this)->set_IsNew(IsNew);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::set_IsNew(TOLEBOOL IsNew/*[in]*/)
{
  return (*this)->set_IsNew(VARIANT_BOOL)IsNew);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_SchemaDiagrams(Owc10_xp::SchemaDiagrams** SchemaDiagrams/*[out,retval]*/)
{
  return (*this)->get_SchemaDiagrams(SchemaDiagrams);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_SchemaDiagrams(Owc10_xp::SchemaDiagramsPtr* SchemaDiagrams/*[out,retval]*/)
{
  return (*this)->get_SchemaDiagrams(SchemaDiagrams**)SchemaDiagrams);
}

template <class T> Owc10_xp::SchemaDiagramsPtr __fastcall
TCOMIDataSourceControlT<T>::get_SchemaDiagrams(void)
{
  Owc10_xp::SchemaDiagrams* SchemaDiagrams;
  OLECHECK(this->get_SchemaDiagrams((Owc10_xp::SchemaDiagrams**)&SchemaDiagrams));
  return (Owc10_xp::SchemaDiagramsPtr)SchemaDiagrams;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::SuspendXMLReExecute(VARIANT_BOOL Suspend/*[in]*/)
{
  return (*this)->SuspendXMLReExecute(Suspend);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::get_DBNSOwnerName(BSTR* OwnerName/*[out,retval]*/)
{
  return (*this)->get_DBNSOwnerName(OwnerName);
}

template <class T> BSTR __fastcall
TCOMIDataSourceControlT<T>::get_DBNSOwnerName(void)
{
  BSTR OwnerName = 0;
  OLECHECK(this->get_DBNSOwnerName((BSTR*)&OwnerName));
  return OwnerName;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::SetFirePropChange(VARIANT_BOOL FirePropChange/*[in]*/)
{
  return (*this)->SetFirePropChange(FirePropChange);
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::Nz(VARIANT Value/*[in]*/, VARIANT ValueIfNull/*[in,opt]*/, 
                               VARIANT* pRet/*[out,retval]*/)
{
  return (*this)->Nz(Value, ValueIfNull, pRet);
}

template <class T> VARIANT __fastcall
TCOMIDataSourceControlT<T>::Nz(VARIANT Value/*[in]*/, VARIANT ValueIfNull/*[in,opt]*/)
{
  VARIANT pRet;
  OLECHECK(this->Nz(, (VARIANT*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::RefreshJetCache(void)
{
  return (*this)->RefreshJetCache();
}

template <class T> HRESULT __fastcall
TCOMIDataSourceControlT<T>::AutoRefreshOfflineSource(void)
{
  return (*this)->AutoRefreshOfflineSource();
}

// *********************************************************************//
// DispIntf:  IDataSourceControl
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AAF-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::set_ConnectionString(BSTR ConnectionString/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionString"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = ConnectionString /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::get_ConnectionString(BSTR* ConnectionString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionString"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ConnectionString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IDataSourceControlDispT<T>::get_ConnectionString(void)
{
  BSTR ConnectionString;
  this->get_ConnectionString((BSTR*)&ConnectionString);
  return ConnectionString;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::get_CurrentDirectory(BSTR* CurrentDirectory/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentDirectory"), DISPID(68));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CurrentDirectory /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IDataSourceControlDispT<T>::get_CurrentDirectory(void)
{
  BSTR CurrentDirectory;
  this->get_CurrentDirectory((BSTR*)&CurrentDirectory);
  return CurrentDirectory;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::set_UseRemoteProvider(VARIANT_BOOL RemoteProvider/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UseRemoteProvider"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = RemoteProvider /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::get_UseRemoteProvider(VARIANT_BOOL* RemoteProvider/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UseRemoteProvider"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RemoteProvider /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IDataSourceControlDispT<T>::get_UseRemoteProvider(void)
{
  VARIANT_BOOL RemoteProvider;
  this->get_UseRemoteProvider((VARIANT_BOOL*)&RemoteProvider);
  return RemoteProvider;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::get_Connection(Adodb_xp::Connection** Connection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Connection"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Adodb_xp::Connection**)Connection /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Adodb_xp::Connection* __fastcall
IDataSourceControlDispT<T>::get_Connection(void)
{
  Adodb_xp::Connection* Connection;
  this->get_Connection((Adodb_xp::Connection**)&Connection);
  return Connection;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::set_DataEntry(VARIANT_BOOL DataEntry/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataEntry"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = DataEntry /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::get_DataEntry(VARIANT_BOOL* DataEntry/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataEntry"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DataEntry /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IDataSourceControlDispT<T>::get_DataEntry(void)
{
  VARIANT_BOOL DataEntry;
  this->get_DataEntry((VARIANT_BOOL*)&DataEntry);
  return DataEntry;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::set_MaxRecords(long RecordsMax/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxRecords"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = RecordsMax /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::get_MaxRecords(long* RecordsMax/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxRecords"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RecordsMax /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDataSourceControlDispT<T>::get_MaxRecords(void)
{
  long RecordsMax;
  this->get_MaxRecords((long*)&RecordsMax);
  return RecordsMax;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::get_DefaultRecordset(Adodb_xp::Recordset** RecordsetDefault/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultRecordset"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Adodb_xp::Recordset**)RecordsetDefault /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Adodb_xp::Recordset* __fastcall
IDataSourceControlDispT<T>::get_DefaultRecordset(void)
{
  Adodb_xp::Recordset* RecordsetDefault;
  this->get_DefaultRecordset((Adodb_xp::Recordset**)&RecordsetDefault);
  return RecordsetDefault;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::Execute(BSTR RecordsetName/*[in]*/, 
                                    Adodb_xp::ExecuteOptionEnum ExecuteOption/*[in,def,opt]*/, 
                                    Owc10_xp::DscFetchTypeEnum FetchType/*[in,def,opt]*/, 
                                    Adodb_xp::Recordset** Recordset/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Execute"), DISPID(18));
  TAutoArgs<3> _args;
  _args[1] = RecordsetName /*[VT_BSTR:0]*/;
  _args[2] = (int)ExecuteOption /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)FetchType /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Adodb_xp::Recordset**)Recordset /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Adodb_xp::Recordset* __fastcall
IDataSourceControlDispT<T>::Execute(BSTR RecordsetName/*[in]*/, 
                                    Adodb_xp::ExecuteOptionEnum ExecuteOption/*[in,def,opt]*/, 
                                    Owc10_xp::DscFetchTypeEnum FetchType/*[in,def,opt]*/)
{
  Adodb_xp::Recordset* Recordset;
  this->Execute(RecordsetName, ExecuteOption, FetchType, (Adodb_xp::Recordset**)&Recordset);
  return Recordset;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::get_SchemaRowsources(Owc10_xp::SchemaRowsources** SchemaRowsources/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SchemaRowsources"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::SchemaRowsources**)SchemaRowsources /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::SchemaRowsources* __fastcall
IDataSourceControlDispT<T>::get_SchemaRowsources(void)
{
  Owc10_xp::SchemaRowsources* SchemaRowsources;
  this->get_SchemaRowsources((Owc10_xp::SchemaRowsources**)&SchemaRowsources);
  return SchemaRowsources;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::get_SchemaRelationships(Owc10_xp::SchemaRelationships** SchemaRelationships/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SchemaRelationships"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::SchemaRelationships**)SchemaRelationships /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::SchemaRelationships* __fastcall
IDataSourceControlDispT<T>::get_SchemaRelationships(void)
{
  Owc10_xp::SchemaRelationships* SchemaRelationships;
  this->get_SchemaRelationships((Owc10_xp::SchemaRelationships**)&SchemaRelationships);
  return SchemaRelationships;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::get_PageRowsources(Owc10_xp::PageRowsources** PageRowsources/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PageRowsources"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PageRowsources**)PageRowsources /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PageRowsources* __fastcall
IDataSourceControlDispT<T>::get_PageRowsources(void)
{
  Owc10_xp::PageRowsources* PageRowsources;
  this->get_PageRowsources((Owc10_xp::PageRowsources**)&PageRowsources);
  return PageRowsources;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::get_RecordsetDefs(Owc10_xp::RecordsetDefs** RecordsetDefs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecordsetDefs"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::RecordsetDefs**)RecordsetDefs /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::RecordsetDefs* __fastcall
IDataSourceControlDispT<T>::get_RecordsetDefs(void)
{
  Owc10_xp::RecordsetDefs* RecordsetDefs;
  this->get_RecordsetDefs((Owc10_xp::RecordsetDefs**)&RecordsetDefs);
  return RecordsetDefs;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::get_RootRecordsetDefs(Owc10_xp::RecordsetDefs** RootRecordsetDefs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RootRecordsetDefs"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::RecordsetDefs**)RootRecordsetDefs /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::RecordsetDefs* __fastcall
IDataSourceControlDispT<T>::get_RootRecordsetDefs(void)
{
  Owc10_xp::RecordsetDefs* RootRecordsetDefs;
  this->get_RootRecordsetDefs((Owc10_xp::RecordsetDefs**)&RootRecordsetDefs);
  return RootRecordsetDefs;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::get_PivotDefs(LPDISPATCH* PivotDefs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PivotDefs"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(PivotDefs /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IDataSourceControlDispT<T>::get_PivotDefs(void)
{
  LPDISPATCH PivotDefs;
  this->get_PivotDefs((LPDISPATCH*)&PivotDefs);
  return PivotDefs;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::SetDataAssistant(LPDISPATCH DataAssistant/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDataAssistant"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = DataAssistant /*[VT_DISPATCH:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::DesignAdvise(LPUNKNOWN Advise/*[in]*/, BSTR SinkName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesignAdvise"), DISPID(14));
  TAutoArgs<2> _args;
  _args[1] = Advise /*[VT_UNKNOWN:0]*/;
  _args[2] = SinkName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::DesignUnAdvise(BSTR SinkName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesignUnAdvise"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = SinkName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::ProcessDrop(LPUNKNOWN pUnknownDropGoo/*[in]*/, 
                                        BSTR bstrRecordSetDefName/*[in]*/, 
                                        Owc10_xp::DscDropLocationEnum dl/*[in]*/, 
                                        Owc10_xp::DscDropTypeEnum dt/*[in]*/, 
                                        BSTR PageRowsource/*[in]*/, BSTR SchemaRelationship/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ProcessDrop"), DISPID(27));
  TAutoArgs<6> _args;
  _args[1] = pUnknownDropGoo /*[VT_UNKNOWN:0]*/;
  _args[2] = bstrRecordSetDefName /*[VT_BSTR:0]*/;
  _args[3] = (int)dl /*[VT_USERDEFINED:0]*/;
  _args[4] = (int)dt /*[VT_USERDEFINED:0]*/;
  _args[5] = PageRowsource /*[VT_BSTR:0]*/;
  _args[6] = SchemaRelationship /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::ScriptDrop(VARIANT Rowsources/*[in]*/, VARIANT Relationships/*[in]*/, 
                                       VARIANT Fields/*[in]*/, BSTR bstrRecordSetDefName/*[in]*/, 
                                       Owc10_xp::DscDropLocationEnum dl/*[in]*/, 
                                       Owc10_xp::DscDropTypeEnum dt/*[in]*/, 
                                       BSTR PageRowsource/*[in]*/, BSTR SchemaRelationship/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScriptDrop"), DISPID(28));
  TAutoArgs<8> _args;
  _args[1] = Rowsources /*[VT_VARIANT:0]*/;
  _args[2] = Relationships /*[VT_VARIANT:0]*/;
  _args[3] = Fields /*[VT_VARIANT:0]*/;
  _args[4] = bstrRecordSetDefName /*[VT_BSTR:0]*/;
  _args[5] = (int)dl /*[VT_USERDEFINED:0]*/;
  _args[6] = (int)dt /*[VT_USERDEFINED:0]*/;
  _args[7] = PageRowsource /*[VT_BSTR:0]*/;
  _args[8] = SchemaRelationship /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::set_DefaultRecordsetName(BSTR DefaultRecordsetName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultRecordsetName"), DISPID(60));
  TAutoArgs<1> _args;
  _args[1] = DefaultRecordsetName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::get_DefaultRecordsetName(BSTR* DefaultRecordsetName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultRecordsetName"), DISPID(60));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DefaultRecordsetName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IDataSourceControlDispT<T>::get_DefaultRecordsetName(void)
{
  BSTR DefaultRecordsetName;
  this->get_DefaultRecordsetName((BSTR*)&DefaultRecordsetName);
  return DefaultRecordsetName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::set_XMLData(BSTR XMLData/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("XMLData"), DISPID(34));
  TAutoArgs<1> _args;
  _args[1] = XMLData /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::get_XMLData(BSTR* XMLData/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XMLData"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(XMLData /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IDataSourceControlDispT<T>::get_XMLData(void)
{
  BSTR XMLData;
  this->get_XMLData((BSTR*)&XMLData);
  return XMLData;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::get_GroupLevels(Owc10_xp::GroupLevels** GroupLevels/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupLevels"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::GroupLevels**)GroupLevels /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::GroupLevels* __fastcall
IDataSourceControlDispT<T>::get_GroupLevels(void)
{
  Owc10_xp::GroupLevels* GroupLevels;
  this->get_GroupLevels((Owc10_xp::GroupLevels**)&GroupLevels);
  return GroupLevels;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::GetContainingSection(LPDISPATCH Element/*[in]*/, 
                                                 Owc10_xp::Section** Section/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetContainingSection"), DISPID(603));
  TAutoArgs<1> _args;
  _args[1] = Element /*[VT_DISPATCH:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Section**)Section /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::Section* __fastcall
IDataSourceControlDispT<T>::GetContainingSection(LPDISPATCH Element/*[in]*/)
{
  Owc10_xp::Section* Section;
  this->GetContainingSection(Element, (Owc10_xp::Section**)&Section);
  return Section;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::get_Constants(LPDISPATCH* IDispatchConstants/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Constants"), DISPID(35));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(IDispatchConstants /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IDataSourceControlDispT<T>::get_Constants(void)
{
  LPDISPATCH IDispatchConstants;
  this->get_Constants((LPDISPATCH*)&IDispatchConstants);
  return IDispatchConstants;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::get_ElementExtensions(Owc10_xp::ElementExtensions** ElementExtensions/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ElementExtensions"), DISPID(40));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::ElementExtensions**)ElementExtensions /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ElementExtensions* __fastcall
IDataSourceControlDispT<T>::get_ElementExtensions(void)
{
  Owc10_xp::ElementExtensions* ElementExtensions;
  this->get_ElementExtensions((Owc10_xp::ElementExtensions**)&ElementExtensions);
  return ElementExtensions;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::get_IsNew(VARIANT_BOOL* IsNew/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsNew"), DISPID(70));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(IsNew /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IDataSourceControlDispT<T>::get_IsNew(void)
{
  VARIANT_BOOL IsNew;
  this->get_IsNew((VARIANT_BOOL*)&IsNew);
  return IsNew;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::ScriptValidate(VARIANT Rowsources/*[in]*/, VARIANT Relationships/*[in]*/
                                           , VARIANT Fields/*[in]*/, BSTR RecordsetDef/*[in]*/, 
                                           Owc10_xp::DscDropLocationEnum dl/*[in]*/, 
                                           Owc10_xp::DscDropTypeEnum dt/*[in]*/, 
                                           BSTR* DropRowsource/*[out]*/, 
                                           VARIANT* RowsourcesOut/*[out]*/, 
                                           VARIANT* RelationshipsOut/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScriptValidate"), DISPID(42));
  TAutoArgs<9> _args;
  _args[1] = Rowsources /*[VT_VARIANT:0]*/;
  _args[2] = Relationships /*[VT_VARIANT:0]*/;
  _args[3] = Fields /*[VT_VARIANT:0]*/;
  _args[4] = RecordsetDef /*[VT_BSTR:0]*/;
  _args[5] = (int)dl /*[VT_USERDEFINED:0]*/;
  _args[6] = (int)dt /*[VT_USERDEFINED:0]*/;
  _args[7] = DropRowsource /*[VT_BSTR:1]*/;
  _args[8] = RowsourcesOut /*[VT_VARIANT:1]*/;
  _args[9] = RelationshipsOut /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::set_RecordsetType(Owc10_xp::DscRecordsetTypeEnum RecordsetType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecordsetType"), DISPID(43));
  TAutoArgs<1> _args;
  _args[1] = (int)RecordsetType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::get_RecordsetType(Owc10_xp::DscRecordsetTypeEnum* RecordsetType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecordsetType"), DISPID(43));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)RecordsetType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::DscRecordsetTypeEnum __fastcall
IDataSourceControlDispT<T>::get_RecordsetType(void)
{
  Owc10_xp::DscRecordsetTypeEnum RecordsetType;
  this->get_RecordsetType((Owc10_xp::DscRecordsetTypeEnum*)&RecordsetType);
  return RecordsetType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::ValidateDrop(LPUNKNOWN UnknownDropGoo/*[in]*/, 
                                         BSTR RecordSetDefName/*[in]*/, 
                                         Owc10_xp::DscDropLocationEnum Location/*[in]*/, 
                                         Owc10_xp::DscDropTypeEnum Type/*[in]*/, 
                                         BSTR* DropRowsource/*[out]*/, 
                                         VARIANT* RowsourcesOut/*[out]*/, 
                                         VARIANT* RelationshipsOut/*[out]*/, 
                                         long* NumberOfDrops/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("ValidateDrop"), DISPID(44));
  TAutoArgs<8> _args;
  _args[1] = UnknownDropGoo /*[VT_UNKNOWN:0]*/;
  _args[2] = RecordSetDefName /*[VT_BSTR:0]*/;
  _args[3] = (int)Location /*[VT_USERDEFINED:0]*/;
  _args[4] = (int)Type /*[VT_USERDEFINED:0]*/;
  _args[5] = DropRowsource /*[VT_BSTR:1]*/;
  _args[6] = RowsourcesOut /*[VT_VARIANT:1]*/;
  _args[7] = RelationshipsOut /*[VT_VARIANT:1]*/;
  _args[8] = NumberOfDrops /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::HyperlinkPart(VARIANT Hyperlink/*[in]*/, 
                                          Owc10_xp::DscHyperlinkPartEnum Part/*[in]*/, 
                                          BSTR* Ret/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HyperlinkPart"), DISPID(45));
  TAutoArgs<2> _args;
  _args[1] = Hyperlink /*[VT_VARIANT:0]*/;
  _args[2] = (int)Part /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(Ret /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IDataSourceControlDispT<T>::HyperlinkPart(VARIANT Hyperlink/*[in]*/, 
                                          Owc10_xp::DscHyperlinkPartEnum Part/*[in]*/)
{
  BSTR Ret;
  this->HyperlinkPart(Hyperlink, Part, (BSTR*)&Ret);
  return Ret;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::SchemaRefresh()
{
  _TDispID _dispid(*this, OLETEXT("SchemaRefresh"), DISPID(47));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::UpdateElementID(BSTR OldID, BSTR NewID)
{
  _TDispID _dispid(*this, OLETEXT("UpdateElementID"), DISPID(48));
  TAutoArgs<2> _args;
  _args[1] = OldID /*[VT_BSTR:0]*/;
  _args[2] = NewID /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::get_AllPageFields(Owc10_xp::AllPageFields** AllPageFields/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllPageFields"), DISPID(58));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::AllPageFields**)AllPageFields /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::AllPageFields* __fastcall
IDataSourceControlDispT<T>::get_AllPageFields(void)
{
  Owc10_xp::AllPageFields* AllPageFields;
  this->get_AllPageFields((Owc10_xp::AllPageFields**)&AllPageFields);
  return AllPageFields;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::get_CurrentSection(Owc10_xp::Section** Section/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentSection"), DISPID(61));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Section**)Section /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Section* __fastcall
IDataSourceControlDispT<T>::get_CurrentSection(void)
{
  Owc10_xp::Section* Section;
  this->get_CurrentSection((Owc10_xp::Section**)&Section);
  return Section;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::get_ProviderType(VARIANT DataMember/*[in,opt]*/, 
                                             Owc10_xp::ProviderType* ProviderType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ProviderType"), DISPID(62));
  TAutoArgs<1> _args;
  _args[1] = DataMember /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((int*)ProviderType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::ProviderType __fastcall
IDataSourceControlDispT<T>::get_ProviderType(VARIANT DataMember/*[in,opt]*/)
{
  Owc10_xp::ProviderType ProviderType;
  this->get_ProviderType(DataMember, (Owc10_xp::ProviderType*)&ProviderType);
  return ProviderType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::get_AllGroupingDefs(Owc10_xp::AllGroupingDefs** AllGroupingDefs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllGroupingDefs"), DISPID(63));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::AllGroupingDefs**)AllGroupingDefs /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::AllGroupingDefs* __fastcall
IDataSourceControlDispT<T>::get_AllGroupingDefs(void)
{
  Owc10_xp::AllGroupingDefs* AllGroupingDefs;
  this->get_AllGroupingDefs((Owc10_xp::AllGroupingDefs**)&AllGroupingDefs);
  return AllGroupingDefs;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::set_DisplayAlerts(VARIANT_BOOL DisplayAlerts/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayAlerts"), DISPID(65));
  TAutoArgs<1> _args;
  _args[1] = DisplayAlerts /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::get_DisplayAlerts(VARIANT_BOOL* DisplayAlerts/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayAlerts"), DISPID(65));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DisplayAlerts /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IDataSourceControlDispT<T>::get_DisplayAlerts(void)
{
  VARIANT_BOOL DisplayAlerts;
  this->get_DisplayAlerts((VARIANT_BOOL*)&DisplayAlerts);
  return DisplayAlerts;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::get_DataPages(Owc10_xp::DataPages** DataPages/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataPages"), DISPID(69));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::DataPages**)DataPages /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::DataPages* __fastcall
IDataSourceControlDispT<T>::get_DataPages(void)
{
  Owc10_xp::DataPages* DataPages;
  this->get_DataPages((Owc10_xp::DataPages**)&DataPages);
  return DataPages;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::Reset()
{
  _TDispID _dispid(*this, OLETEXT("Reset"), DISPID(72));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::getDataMemberName(long lIndex/*[in]*/, 
                                              Msdatasrc_xp::DataMember* pbstrDM/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getDataMemberName"), DISPID(73));
  TAutoArgs<1> _args;
  _args[1] = lIndex /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pbstrDM /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msdatasrc_xp::DataMember __fastcall
IDataSourceControlDispT<T>::getDataMemberName(long lIndex/*[in]*/)
{
  Msdatasrc_xp::DataMember pbstrDM;
  this->getDataMemberName(lIndex, (Msdatasrc_xp::DataMember*)&pbstrDM);
  return pbstrDM;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::getDataMemberCount(long* plcount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getDataMemberCount"), DISPID(74));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plcount /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IDataSourceControlDispT<T>::getDataMemberCount(void)
{
  long plcount;
  this->getDataMemberCount((long*)&plcount);
  return plcount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::set_GridX(long xGrid/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GridX"), DISPID(75));
  TAutoArgs<1> _args;
  _args[1] = xGrid /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::get_GridX(long* xGrid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GridX"), DISPID(75));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(xGrid /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDataSourceControlDispT<T>::get_GridX(void)
{
  long xGrid;
  this->get_GridX((long*)&xGrid);
  return xGrid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::set_GridY(long yGrid/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GridY"), DISPID(76));
  TAutoArgs<1> _args;
  _args[1] = yGrid /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::get_GridY(long* yGrid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GridY"), DISPID(76));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(yGrid /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDataSourceControlDispT<T>::get_GridY(void)
{
  long yGrid;
  this->get_GridY((long*)&yGrid);
  return yGrid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::get_LoadError(long* LoadError/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LoadError"), DISPID(77));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(LoadError /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDataSourceControlDispT<T>::get_LoadError(void)
{
  long LoadError;
  this->get_LoadError((long*)&LoadError);
  return LoadError;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::GetSectionInfo(LPDISPATCH SectionElement/*[in]*/, 
                                           BSTR* RecordSource/*[out]*/, 
                                           Owc10_xp::SectTypeEnum* SectionType/*[out]*/, 
                                           Owc10_xp::GroupLevel** GroupLevel/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetSectionInfo"), DISPID(78));
  TAutoArgs<4> _args;
  _args[1] = SectionElement /*[VT_DISPATCH:0]*/;
  _args[2] = RecordSource /*[VT_BSTR:1]*/;
  _args[3] = (int*)SectionType /*[VT_USERDEFINED:1]*/;
  _args[4] = (LPDISPATCH*)(Owc10_xp::GroupLevel**)GroupLevel /*[VT_USERDEFINED:2]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::DeleteRecordSourceIfUnused(BSTR RecordSource/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeleteRecordSourceIfUnused"), DISPID(79));
  TAutoArgs<1> _args;
  _args[1] = RecordSource /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::DeletePageFieldIfUnused(BSTR RecordSource/*[in]*/, 
                                                    BSTR PageField/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeletePageFieldIfUnused"), DISPID(80));
  TAutoArgs<2> _args;
  _args[1] = RecordSource /*[VT_BSTR:0]*/;
  _args[2] = PageField /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::set_DefaultControlType(Owc10_xp::DefaultControlTypeEnum ControlType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultControlType"), DISPID(81));
  TAutoArgs<1> _args;
  _args[1] = (int)ControlType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::get_DefaultControlType(Owc10_xp::DefaultControlTypeEnum* ControlType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultControlType"), DISPID(81));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ControlType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::DefaultControlTypeEnum __fastcall
IDataSourceControlDispT<T>::get_DefaultControlType(void)
{
  Owc10_xp::DefaultControlTypeEnum ControlType;
  this->get_DefaultControlType((Owc10_xp::DefaultControlTypeEnum*)&ControlType);
  return ControlType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::set_IsDirty(VARIANT_BOOL IsDirty/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsDirty"), DISPID(82));
  TAutoArgs<1> _args;
  _args[1] = IsDirty /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::get_IsDirty(VARIANT_BOOL* IsDirty/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsDirty"), DISPID(82));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(IsDirty /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IDataSourceControlDispT<T>::get_IsDirty(void)
{
  VARIANT_BOOL IsDirty;
  this->get_IsDirty((VARIANT_BOOL*)&IsDirty);
  return IsDirty;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::get_Busy(VARIANT_BOOL* Busy/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Busy"), DISPID(83));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Busy /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IDataSourceControlDispT<T>::get_Busy(void)
{
  VARIANT_BOOL Busy;
  this->get_Busy((VARIANT_BOOL*)&Busy);
  return Busy;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::get_Version(BSTR* Version/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(84));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Version /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IDataSourceControlDispT<T>::get_Version(void)
{
  BSTR Version;
  this->get_Version((BSTR*)&Version);
  return Version;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::get_MajorVersion(long* MajorVersion/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MajorVersion"), DISPID(85));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(MajorVersion /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDataSourceControlDispT<T>::get_MajorVersion(void)
{
  long MajorVersion;
  this->get_MajorVersion((long*)&MajorVersion);
  return MajorVersion;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::get_MinorVersion(BSTR* MinorVersion/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinorVersion"), DISPID(86));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(MinorVersion /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IDataSourceControlDispT<T>::get_MinorVersion(void)
{
  BSTR MinorVersion;
  this->get_MinorVersion((BSTR*)&MinorVersion);
  return MinorVersion;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::get_BuildNumber(BSTR* BuildNumber/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuildNumber"), DISPID(87));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BuildNumber /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IDataSourceControlDispT<T>::get_BuildNumber(void)
{
  BSTR BuildNumber;
  this->get_BuildNumber((BSTR*)&BuildNumber);
  return BuildNumber;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::get_RevisionNumber(BSTR* RevisionNumber/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RevisionNumber"), DISPID(88));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RevisionNumber /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IDataSourceControlDispT<T>::get_RevisionNumber(void)
{
  BSTR RevisionNumber;
  this->get_RevisionNumber((BSTR*)&RevisionNumber);
  return RevisionNumber;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::ResetRecordset(BSTR bstrRecordset)
{
  _TDispID _dispid(*this, OLETEXT("ResetRecordset"), DISPID(89));
  TAutoArgs<1> _args;
  _args[1] = bstrRecordset /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::set_IsDataModelDirty(VARIANT_BOOL IsDataModelDirty/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsDataModelDirty"), DISPID(71));
  TAutoArgs<1> _args;
  _args[1] = IsDataModelDirty /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::get_IsDataModelDirty(VARIANT_BOOL* IsDataModelDirty/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsDataModelDirty"), DISPID(71));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(IsDataModelDirty /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IDataSourceControlDispT<T>::get_IsDataModelDirty(void)
{
  VARIANT_BOOL IsDataModelDirty;
  this->get_IsDataModelDirty((VARIANT_BOOL*)&IsDataModelDirty);
  return IsDataModelDirty;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::GetExportableConnectString(Owc10_xp::ExportableConnectStringEnum ExportType/*[in]*/
                                                       , BSTR* ConnectString/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetExportableConnectString"), DISPID(91));
  TAutoArgs<2> _args;
  _args[1] = (int)ExportType /*[VT_USERDEFINED:0]*/;
  _args[2] = ConnectString /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::ExportXML(Owc10_xp::DscEncodingEnum eEncoding/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExportXML"), DISPID(93));
  TAutoArgs<1> _args;
  _args[1] = (int)eEncoding /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::SetRootRecordset(BSTR RecordsetName/*[in]*/, 
                                             Adodb_xp::Recordset* Recordset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetRootRecordset"), DISPID(94));
  TAutoArgs<2> _args;
  _args[1] = RecordsetName /*[VT_BSTR:0]*/;
  _args[2] = (LPDISPATCH)(Adodb_xp::Recordset*)Recordset /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::GetOfflineDisplayInfo(BSTR* OnlineServer/*[out]*/, 
                                                  BSTR* OnlineDatabase/*[out]*/, 
                                                  BSTR* OfflineServer/*[out]*/, 
                                                  BSTR* OfflineDatabase/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetOfflineDisplayInfo"), DISPID(95));
  TAutoArgs<4> _args;
  _args[1] = OnlineServer /*[VT_BSTR:1]*/;
  _args[2] = OnlineDatabase /*[VT_BSTR:1]*/;
  _args[3] = OfflineServer /*[VT_BSTR:1]*/;
  _args[4] = OfflineDatabase /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::set_OfflineType(Owc10_xp::DscOfflineTypeEnum Publication/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OfflineType"), DISPID(96));
  TAutoArgs<1> _args;
  _args[1] = (int)Publication /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::get_OfflineType(Owc10_xp::DscOfflineTypeEnum* Publication/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OfflineType"), DISPID(96));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Publication /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::DscOfflineTypeEnum __fastcall
IDataSourceControlDispT<T>::get_OfflineType(void)
{
  Owc10_xp::DscOfflineTypeEnum Publication;
  this->get_OfflineType((Owc10_xp::DscOfflineTypeEnum*)&Publication);
  return Publication;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::set_OfflinePublication(BSTR Publication/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OfflinePublication"), DISPID(97));
  TAutoArgs<1> _args;
  _args[1] = Publication /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::get_OfflinePublication(BSTR* Publication/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OfflinePublication"), DISPID(97));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Publication /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IDataSourceControlDispT<T>::get_OfflinePublication(void)
{
  BSTR Publication;
  this->get_OfflinePublication((BSTR*)&Publication);
  return Publication;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::get_Offline(VARIANT_BOOL* IsOffline/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Offline"), DISPID(98));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(IsOffline /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IDataSourceControlDispT<T>::get_Offline(void)
{
  VARIANT_BOOL IsOffline;
  this->get_Offline((VARIANT_BOOL*)&IsOffline);
  return IsOffline;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::set_OfflineSource(BSTR Source/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OfflineSource"), DISPID(99));
  TAutoArgs<1> _args;
  _args[1] = Source /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::get_OfflineSource(BSTR* Source/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OfflineSource"), DISPID(99));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Source /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IDataSourceControlDispT<T>::get_OfflineSource(void)
{
  BSTR Source;
  this->get_OfflineSource((BSTR*)&Source);
  return Source;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::set_XMLLocation(Owc10_xp::DscXMLLocationEnum Location/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("XMLLocation"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = (int)Location /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::get_XMLLocation(Owc10_xp::DscXMLLocationEnum* Location/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XMLLocation"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Location /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::DscXMLLocationEnum __fastcall
IDataSourceControlDispT<T>::get_XMLLocation(void)
{
  Owc10_xp::DscXMLLocationEnum Location;
  this->get_XMLLocation((Owc10_xp::DscXMLLocationEnum*)&Location);
  return Location;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::set_UseXMLData(VARIANT_BOOL UseXMLData/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UseXMLData"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = UseXMLData /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::get_UseXMLData(VARIANT_BOOL* UseXMLData/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UseXMLData"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(UseXMLData /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IDataSourceControlDispT<T>::get_UseXMLData(void)
{
  VARIANT_BOOL UseXMLData;
  this->get_UseXMLData((VARIANT_BOOL*)&UseXMLData);
  return UseXMLData;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::set_XMLDataTarget(BSTR Source/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("XMLDataTarget"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = Source /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::get_XMLDataTarget(BSTR* Source/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XMLDataTarget"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Source /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IDataSourceControlDispT<T>::get_XMLDataTarget(void)
{
  BSTR Source;
  this->get_XMLDataTarget((BSTR*)&Source);
  return Source;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::Refresh(Owc10_xp::RefreshType RefreshType/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = (int)RefreshType /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::FindRelatedGroupLevel(Owc10_xp::GroupLevel* pGroupLevel/*[in]*/, 
                                                  long fChild/*[in]*/, 
                                                  Owc10_xp::GroupLevel** ppGrouplevel/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("FindRelatedGroupLevel"), DISPID(92));
  TAutoArgs<3> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::GroupLevel*)pGroupLevel /*[VT_USERDEFINED:1]*/;
  _args[2] = fChild /*[VT_I4:0]*/;
  _args[3] = (LPDISPATCH*)(Owc10_xp::GroupLevel**)ppGrouplevel /*[VT_USERDEFINED:2]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::DllNotification(Owc10_xp::NotificationType Notification/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DllNotification"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = (int)Notification /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::SuspendUndo(VARIANT_BOOL Suspend/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SuspendUndo"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = Suspend /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::UpdateFocus()
{
  _TDispID _dispid(*this, OLETEXT("UpdateFocus"), DISPID(106));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::set_ConnectionFile(BSTR ConnectionFile/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionFile"), DISPID(108));
  TAutoArgs<1> _args;
  _args[1] = ConnectionFile /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::get_ConnectionFile(BSTR* ConnectionFile/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionFile"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ConnectionFile /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IDataSourceControlDispT<T>::get_ConnectionFile(void)
{
  BSTR ConnectionFile;
  this->get_ConnectionFile((BSTR*)&ConnectionFile);
  return ConnectionFile;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::IsValidDAPProvider(BSTR ConnectionString/*[in]*/, 
                                               VARIANT_BOOL* IsValid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsValidDAPProvider"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = ConnectionString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(IsValid /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IDataSourceControlDispT<T>::IsValidDAPProvider(BSTR ConnectionString/*[in]*/)
{
  VARIANT_BOOL IsValid;
  this->IsValidDAPProvider(ConnectionString, (VARIANT_BOOL*)&IsValid);
  return IsValid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::get_DefaultRecordsetDefName(BSTR* DefaultRecordsetDefName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultRecordsetDefName"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DefaultRecordsetDefName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IDataSourceControlDispT<T>::get_DefaultRecordsetDefName(void)
{
  BSTR DefaultRecordsetDefName;
  this->get_DefaultRecordsetDefName((BSTR*)&DefaultRecordsetDefName);
  return DefaultRecordsetDefName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::EuroConvert(double Number/*[in]*/, BSTR SourceCurrency/*[in]*/, 
                                        BSTR TargetCurrency/*[in]*/, 
                                        VARIANT FullPrecision/*[in,opt]*/, 
                                        VARIANT TriangulationPrecision/*[in,opt]*/, 
                                        double* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EuroConvert"), DISPID(111));
  TAutoArgs<5> _args;
  _args[1] = Number /*[VT_R8:0]*/;
  _args[2] = SourceCurrency /*[VT_BSTR:0]*/;
  _args[3] = TargetCurrency /*[VT_BSTR:0]*/;
  _args[4] = FullPrecision /*[VT_VARIANT:0]*/;
  _args[5] = TriangulationPrecision /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pRet /*[VT_R8:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> double __fastcall
IDataSourceControlDispT<T>::EuroConvert(double Number/*[in]*/, BSTR SourceCurrency/*[in]*/, 
                                        BSTR TargetCurrency/*[in]*/, 
                                        VARIANT FullPrecision/*[in,opt]*/, 
                                        VARIANT TriangulationPrecision/*[in,opt]*/)
{
  double pRet;
  this->EuroConvert(Number, SourceCurrency, TargetCurrency, FullPrecision, TriangulationPrecision, (double*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::GetDAPProviders(LPSAFEARRAY* Providers/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetDAPProviders"), DISPID(112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Providers /*[VT_SAFEARRAY:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPSAFEARRAY __fastcall
IDataSourceControlDispT<T>::GetDAPProviders(void)
{
  LPSAFEARRAY Providers;
  this->GetDAPProviders((LPSAFEARRAY*)&Providers);
  return Providers;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::SetSynchronizing(VARIANT_BOOL Synchronizing/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetSynchronizing"), DISPID(113));
  TAutoArgs<1> _args;
  _args[1] = Synchronizing /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::get_ConnectionStringFullPath(BSTR* ConnectionStringFullPath/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionStringFullPath"), DISPID(125));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ConnectionStringFullPath /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IDataSourceControlDispT<T>::get_ConnectionStringFullPath(void)
{
  BSTR ConnectionStringFullPath;
  this->get_ConnectionStringFullPath((BSTR*)&ConnectionStringFullPath);
  return ConnectionStringFullPath;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::SetDisplayError(VARIANT_BOOL DisplayError/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDisplayError"), DISPID(126));
  TAutoArgs<1> _args;
  _args[1] = DisplayError /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::set_IsNew(VARIANT_BOOL IsNew/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsNew"), DISPID(70));
  TAutoArgs<1> _args;
  _args[1] = IsNew /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::get_SchemaDiagrams(Owc10_xp::SchemaDiagrams** SchemaDiagrams/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SchemaDiagrams"), DISPID(128));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::SchemaDiagrams**)SchemaDiagrams /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::SchemaDiagrams* __fastcall
IDataSourceControlDispT<T>::get_SchemaDiagrams(void)
{
  Owc10_xp::SchemaDiagrams* SchemaDiagrams;
  this->get_SchemaDiagrams((Owc10_xp::SchemaDiagrams**)&SchemaDiagrams);
  return SchemaDiagrams;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::SuspendXMLReExecute(VARIANT_BOOL Suspend/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SuspendXMLReExecute"), DISPID(129));
  TAutoArgs<1> _args;
  _args[1] = Suspend /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::get_DBNSOwnerName(BSTR* OwnerName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DBNSOwnerName"), DISPID(130));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OwnerName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IDataSourceControlDispT<T>::get_DBNSOwnerName(void)
{
  BSTR OwnerName;
  this->get_DBNSOwnerName((BSTR*)&OwnerName);
  return OwnerName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::SetFirePropChange(VARIANT_BOOL FirePropChange/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetFirePropChange"), DISPID(131));
  TAutoArgs<1> _args;
  _args[1] = FirePropChange /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::Nz(VARIANT Value/*[in]*/, VARIANT ValueIfNull/*[in,opt]*/, 
                               VARIANT* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Nz"), DISPID(132));
  TAutoArgs<2> _args;
  _args[1] = Value /*[VT_VARIANT:0]*/;
  _args[2] = ValueIfNull /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
IDataSourceControlDispT<T>::Nz(VARIANT Value/*[in]*/, VARIANT ValueIfNull/*[in,opt]*/)
{
  VARIANT pRet;
  this->Nz(Value, ValueIfNull, (VARIANT*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::RefreshJetCache()
{
  _TDispID _dispid(*this, OLETEXT("RefreshJetCache"), DISPID(133));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDataSourceControlDispT<T>::AutoRefreshOfflineSource()
{
  _TDispID _dispid(*this, OLETEXT("AutoRefreshOfflineSource"), DISPID(1320));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  DSCEventInfo
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B06-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DSCEventInfoDispT<T>::get_DataPage(Owc10_xp::DataPage** DataPage/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataPage"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::DataPage**)DataPage /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::DataPage* __fastcall
DSCEventInfoDispT<T>::get_DataPage(void)
{
  Owc10_xp::DataPage* DataPage;
  this->get_DataPage((Owc10_xp::DataPage**)&DataPage);
  return DataPage;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DSCEventInfoDispT<T>::get_Section(Owc10_xp::Section** Section/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Section"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::Section**)Section /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::Section* __fastcall
DSCEventInfoDispT<T>::get_Section(void)
{
  Owc10_xp::Section* Section;
  this->get_Section((Owc10_xp::Section**)&Section);
  return Section;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DSCEventInfoDispT<T>::get_Error(Adodb_xp::Error** Error/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Error"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Adodb_xp::Error**)Error /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Adodb_xp::Error* __fastcall
DSCEventInfoDispT<T>::get_Error(void)
{
  Adodb_xp::Error* Error;
  this->get_Error((Adodb_xp::Error**)&Error);
  return Error;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DSCEventInfoDispT<T>::get_ReturnValue(VARIANT_BOOL* ReturnValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReturnValue"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ReturnValue /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
DSCEventInfoDispT<T>::get_ReturnValue(void)
{
  VARIANT_BOOL ReturnValue;
  this->get_ReturnValue((VARIANT_BOOL*)&ReturnValue);
  return ReturnValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DSCEventInfoDispT<T>::set_ReturnValue(VARIANT_BOOL ReturnValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReturnValue"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = ReturnValue /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DSCEventInfoDispT<T>::get_PercentComplete(long* PercentComplete/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PercentComplete"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(PercentComplete /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
DSCEventInfoDispT<T>::get_PercentComplete(void)
{
  long PercentComplete;
  this->get_PercentComplete((long*)&PercentComplete);
  return PercentComplete;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DSCEventInfoDispT<T>::get_Status(Owc10_xp::DscStatusEnum* Status/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Status"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Status /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::DscStatusEnum __fastcall
DSCEventInfoDispT<T>::get_Status(void)
{
  Owc10_xp::DscStatusEnum Status;
  this->get_Status((Owc10_xp::DscStatusEnum*)&Status);
  return Status;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DSCEventInfoDispT<T>::set_DisplayAlert(Owc10_xp::DscDisplayAlert DisplayAlert/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayAlert"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)DisplayAlert /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DSCEventInfoDispT<T>::get_DisplayAlert(Owc10_xp::DscDisplayAlert* DisplayAlert/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayAlert"), DISPID(1610743815));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)DisplayAlert /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::DscDisplayAlert __fastcall
DSCEventInfoDispT<T>::get_DisplayAlert(void)
{
  Owc10_xp::DscDisplayAlert DisplayAlert;
  this->get_DisplayAlert((Owc10_xp::DscDisplayAlert*)&DisplayAlert);
  return DisplayAlert;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DSCEventInfoDispT<T>::get_Connection(Adodb_xp::Connection** Connection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Connection"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Adodb_xp::Connection**)Connection /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Adodb_xp::Connection* __fastcall
DSCEventInfoDispT<T>::get_Connection(void)
{
  Adodb_xp::Connection* Connection;
  this->get_Connection((Adodb_xp::Connection**)&Connection);
  return Connection;
}

// *********************************************************************//
// DispIntf:  _DataSourceControlEvent
// Flags:     (4096) Dispatchable
// GUID:      {F5B39A9B-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
_DataSourceControlEventDispT<T>::Current(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/)
{
  _TDispID _dispid(/* Current */ DISPID(624));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::DSCEventInfo*)DSCEventInfo /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_DataSourceControlEventDispT<T>::BeforeExpand(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/)
{
  _TDispID _dispid(/* BeforeExpand */ DISPID(626));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::DSCEventInfo*)DSCEventInfo /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_DataSourceControlEventDispT<T>::BeforeCollapse(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/)
{
  _TDispID _dispid(/* BeforeCollapse */ DISPID(627));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::DSCEventInfo*)DSCEventInfo /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_DataSourceControlEventDispT<T>::BeforeFirstPage(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/)
{
  _TDispID _dispid(/* BeforeFirstPage */ DISPID(628));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::DSCEventInfo*)DSCEventInfo /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_DataSourceControlEventDispT<T>::BeforePreviousPage(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/)
{
  _TDispID _dispid(/* BeforePreviousPage */ DISPID(629));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::DSCEventInfo*)DSCEventInfo /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_DataSourceControlEventDispT<T>::BeforeNextPage(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/)
{
  _TDispID _dispid(/* BeforeNextPage */ DISPID(630));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::DSCEventInfo*)DSCEventInfo /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_DataSourceControlEventDispT<T>::BeforeLastPage(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/)
{
  _TDispID _dispid(/* BeforeLastPage */ DISPID(631));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::DSCEventInfo*)DSCEventInfo /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_DataSourceControlEventDispT<T>::DataError(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/)
{
  _TDispID _dispid(/* DataError */ DISPID(632));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::DSCEventInfo*)DSCEventInfo /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_DataSourceControlEventDispT<T>::DataPageComplete(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/)
{
  _TDispID _dispid(/* DataPageComplete */ DISPID(633));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::DSCEventInfo*)DSCEventInfo /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_DataSourceControlEventDispT<T>::BeforeInitialBind(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/)
{
  _TDispID _dispid(/* BeforeInitialBind */ DISPID(634));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::DSCEventInfo*)DSCEventInfo /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_DataSourceControlEventDispT<T>::RecordsetSaveProgress(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/)
{
  _TDispID _dispid(/* RecordsetSaveProgress */ DISPID(635));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::DSCEventInfo*)DSCEventInfo /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_DataSourceControlEventDispT<T>::AfterDelete(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/)
{
  _TDispID _dispid(/* AfterDelete */ DISPID(636));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::DSCEventInfo*)DSCEventInfo /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_DataSourceControlEventDispT<T>::AfterInsert(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/)
{
  _TDispID _dispid(/* AfterInsert */ DISPID(637));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::DSCEventInfo*)DSCEventInfo /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_DataSourceControlEventDispT<T>::AfterUpdate(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/)
{
  _TDispID _dispid(/* AfterUpdate */ DISPID(638));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::DSCEventInfo*)DSCEventInfo /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_DataSourceControlEventDispT<T>::BeforeDelete(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/)
{
  _TDispID _dispid(/* BeforeDelete */ DISPID(639));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::DSCEventInfo*)DSCEventInfo /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_DataSourceControlEventDispT<T>::BeforeInsert(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/)
{
  _TDispID _dispid(/* BeforeInsert */ DISPID(640));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::DSCEventInfo*)DSCEventInfo /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_DataSourceControlEventDispT<T>::BeforeOverwrite(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/)
{
  _TDispID _dispid(/* BeforeOverwrite */ DISPID(641));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::DSCEventInfo*)DSCEventInfo /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_DataSourceControlEventDispT<T>::BeforeUpdate(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/)
{
  _TDispID _dispid(/* BeforeUpdate */ DISPID(642));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::DSCEventInfo*)DSCEventInfo /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_DataSourceControlEventDispT<T>::Dirty(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/)
{
  _TDispID _dispid(/* Dirty */ DISPID(643));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::DSCEventInfo*)DSCEventInfo /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_DataSourceControlEventDispT<T>::RecordExit(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/)
{
  _TDispID _dispid(/* RecordExit */ DISPID(644));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::DSCEventInfo*)DSCEventInfo /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_DataSourceControlEventDispT<T>::Undo(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/)
{
  _TDispID _dispid(/* Undo */ DISPID(647));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::DSCEventInfo*)DSCEventInfo /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_DataSourceControlEventDispT<T>::Focus(Owc10_xp::DSCEventInfo* DSCEventInfo/*[in]*/)
{
  _TDispID _dispid(/* Focus */ DISPID(648));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::DSCEventInfo*)DSCEventInfo /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMINavigationControl
// Interface: INavigationControl
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::set_DataSource(Msdatasrc_xp::DataSource* DataSource/*[in]*/)
{
  return (*this)->set_DataSource(DataSource);
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::set_DataSource(Msdatasrc_xp::DataSourcePtr DataSource/*[in]*/)
{
  return (*this)->set_DataSource(DataSource*)DataSource);
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::get_DataSource(Msdatasrc_xp::DataSource** DataSource/*[out,retval]*/)
{
  return (*this)->get_DataSource(DataSource);
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::get_DataSource(Msdatasrc_xp::DataSourcePtr* DataSource/*[out,retval]*/)
{
  return (*this)->get_DataSource(DataSource**)DataSource);
}

template <class T> Msdatasrc_xp::DataSourcePtr __fastcall
TCOMINavigationControlT<T>::get_DataSource(void)
{
  Msdatasrc_xp::DataSource* DataSource;
  OLECHECK(this->get_DataSource((Msdatasrc_xp::DataSource**)&DataSource));
  return (Msdatasrc_xp::DataSourcePtr)DataSource;
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::set_RecordSource(Msdatasrc_xp::DataMember RecordSource/*[in]*/)
{
  return (*this)->set_RecordSource(RecordSource);
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::get_RecordSource(Msdatasrc_xp::DataMember* RecordSource/*[out,retval]*/)
{
  return (*this)->get_RecordSource(RecordSource);
}

template <class T> Msdatasrc_xp::DataMember __fastcall
TCOMINavigationControlT<T>::get_RecordSource(void)
{
  Msdatasrc_xp::DataMember RecordSource;
  OLECHECK(this->get_RecordSource((Msdatasrc_xp::DataMember*)&RecordSource));
  return RecordSource;
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::set_RecordsetLabel(BSTR RecordsetLabel/*[in]*/)
{
  return (*this)->set_RecordsetLabel(RecordsetLabel);
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::get_RecordsetLabel(BSTR* RecordsetLabel/*[out,retval]*/)
{
  return (*this)->get_RecordsetLabel(RecordsetLabel);
}

template <class T> BSTR __fastcall
TCOMINavigationControlT<T>::get_RecordsetLabel(void)
{
  BSTR RecordsetLabel = 0;
  OLECHECK(this->get_RecordsetLabel((BSTR*)&RecordsetLabel));
  return RecordsetLabel;
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::set_ShowFirstButton(VARIANT_BOOL Show/*[in]*/)
{
  return (*this)->set_ShowFirstButton(Show);
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::set_ShowFirstButton(TOLEBOOL Show/*[in]*/)
{
  return (*this)->set_ShowFirstButton(VARIANT_BOOL)Show);
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::get_ShowFirstButton(VARIANT_BOOL* Show/*[out,retval]*/)
{
  return (*this)->get_ShowFirstButton(Show);
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::get_ShowFirstButton(TOLEBOOL* Show/*[out,retval]*/)
{
  return (*this)->get_ShowFirstButton(VARIANT_BOOL*)Show);
}

template <class T> TOLEBOOL __fastcall
TCOMINavigationControlT<T>::get_ShowFirstButton(void)
{
  VARIANT_BOOL Show;
  OLECHECK(this->get_ShowFirstButton((VARIANT_BOOL*)&Show));
  return (TOLEBOOL)Show;
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::set_ShowPrevButton(VARIANT_BOOL Show/*[in]*/)
{
  return (*this)->set_ShowPrevButton(Show);
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::set_ShowPrevButton(TOLEBOOL Show/*[in]*/)
{
  return (*this)->set_ShowPrevButton(VARIANT_BOOL)Show);
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::get_ShowPrevButton(VARIANT_BOOL* Show/*[out,retval]*/)
{
  return (*this)->get_ShowPrevButton(Show);
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::get_ShowPrevButton(TOLEBOOL* Show/*[out,retval]*/)
{
  return (*this)->get_ShowPrevButton(VARIANT_BOOL*)Show);
}

template <class T> TOLEBOOL __fastcall
TCOMINavigationControlT<T>::get_ShowPrevButton(void)
{
  VARIANT_BOOL Show;
  OLECHECK(this->get_ShowPrevButton((VARIANT_BOOL*)&Show));
  return (TOLEBOOL)Show;
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::set_ShowNextButton(VARIANT_BOOL Show/*[in]*/)
{
  return (*this)->set_ShowNextButton(Show);
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::set_ShowNextButton(TOLEBOOL Show/*[in]*/)
{
  return (*this)->set_ShowNextButton(VARIANT_BOOL)Show);
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::get_ShowNextButton(VARIANT_BOOL* Show/*[out,retval]*/)
{
  return (*this)->get_ShowNextButton(Show);
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::get_ShowNextButton(TOLEBOOL* Show/*[out,retval]*/)
{
  return (*this)->get_ShowNextButton(VARIANT_BOOL*)Show);
}

template <class T> TOLEBOOL __fastcall
TCOMINavigationControlT<T>::get_ShowNextButton(void)
{
  VARIANT_BOOL Show;
  OLECHECK(this->get_ShowNextButton((VARIANT_BOOL*)&Show));
  return (TOLEBOOL)Show;
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::set_ShowLastButton(VARIANT_BOOL Show/*[in]*/)
{
  return (*this)->set_ShowLastButton(Show);
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::set_ShowLastButton(TOLEBOOL Show/*[in]*/)
{
  return (*this)->set_ShowLastButton(VARIANT_BOOL)Show);
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::get_ShowLastButton(VARIANT_BOOL* Show/*[out,retval]*/)
{
  return (*this)->get_ShowLastButton(Show);
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::get_ShowLastButton(TOLEBOOL* Show/*[out,retval]*/)
{
  return (*this)->get_ShowLastButton(VARIANT_BOOL*)Show);
}

template <class T> TOLEBOOL __fastcall
TCOMINavigationControlT<T>::get_ShowLastButton(void)
{
  VARIANT_BOOL Show;
  OLECHECK(this->get_ShowLastButton((VARIANT_BOOL*)&Show));
  return (TOLEBOOL)Show;
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::set_ShowNewButton(VARIANT_BOOL Show/*[in]*/)
{
  return (*this)->set_ShowNewButton(Show);
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::set_ShowNewButton(TOLEBOOL Show/*[in]*/)
{
  return (*this)->set_ShowNewButton(VARIANT_BOOL)Show);
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::get_ShowNewButton(VARIANT_BOOL* Show/*[out,retval]*/)
{
  return (*this)->get_ShowNewButton(Show);
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::get_ShowNewButton(TOLEBOOL* Show/*[out,retval]*/)
{
  return (*this)->get_ShowNewButton(VARIANT_BOOL*)Show);
}

template <class T> TOLEBOOL __fastcall
TCOMINavigationControlT<T>::get_ShowNewButton(void)
{
  VARIANT_BOOL Show;
  OLECHECK(this->get_ShowNewButton((VARIANT_BOOL*)&Show));
  return (TOLEBOOL)Show;
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::set_ShowDelButton(VARIANT_BOOL Show/*[in]*/)
{
  return (*this)->set_ShowDelButton(Show);
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::set_ShowDelButton(TOLEBOOL Show/*[in]*/)
{
  return (*this)->set_ShowDelButton(VARIANT_BOOL)Show);
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::get_ShowDelButton(VARIANT_BOOL* Show/*[out,retval]*/)
{
  return (*this)->get_ShowDelButton(Show);
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::get_ShowDelButton(TOLEBOOL* Show/*[out,retval]*/)
{
  return (*this)->get_ShowDelButton(VARIANT_BOOL*)Show);
}

template <class T> TOLEBOOL __fastcall
TCOMINavigationControlT<T>::get_ShowDelButton(void)
{
  VARIANT_BOOL Show;
  OLECHECK(this->get_ShowDelButton((VARIANT_BOOL*)&Show));
  return (TOLEBOOL)Show;
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::set_ShowSaveButton(VARIANT_BOOL Show/*[in]*/)
{
  return (*this)->set_ShowSaveButton(Show);
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::set_ShowSaveButton(TOLEBOOL Show/*[in]*/)
{
  return (*this)->set_ShowSaveButton(VARIANT_BOOL)Show);
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::get_ShowSaveButton(VARIANT_BOOL* Show/*[out,retval]*/)
{
  return (*this)->get_ShowSaveButton(Show);
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::get_ShowSaveButton(TOLEBOOL* Show/*[out,retval]*/)
{
  return (*this)->get_ShowSaveButton(VARIANT_BOOL*)Show);
}

template <class T> TOLEBOOL __fastcall
TCOMINavigationControlT<T>::get_ShowSaveButton(void)
{
  VARIANT_BOOL Show;
  OLECHECK(this->get_ShowSaveButton((VARIANT_BOOL*)&Show));
  return (TOLEBOOL)Show;
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::set_ShowUndoButton(VARIANT_BOOL Show/*[in]*/)
{
  return (*this)->set_ShowUndoButton(Show);
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::set_ShowUndoButton(TOLEBOOL Show/*[in]*/)
{
  return (*this)->set_ShowUndoButton(VARIANT_BOOL)Show);
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::get_ShowUndoButton(VARIANT_BOOL* Show/*[out,retval]*/)
{
  return (*this)->get_ShowUndoButton(Show);
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::get_ShowUndoButton(TOLEBOOL* Show/*[out,retval]*/)
{
  return (*this)->get_ShowUndoButton(VARIANT_BOOL*)Show);
}

template <class T> TOLEBOOL __fastcall
TCOMINavigationControlT<T>::get_ShowUndoButton(void)
{
  VARIANT_BOOL Show;
  OLECHECK(this->get_ShowUndoButton((VARIANT_BOOL*)&Show));
  return (TOLEBOOL)Show;
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::set_ShowSortAscendingButton(VARIANT_BOOL Show/*[in]*/)
{
  return (*this)->set_ShowSortAscendingButton(Show);
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::set_ShowSortAscendingButton(TOLEBOOL Show/*[in]*/)
{
  return (*this)->set_ShowSortAscendingButton(VARIANT_BOOL)Show);
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::get_ShowSortAscendingButton(VARIANT_BOOL* Show/*[out,retval]*/)
{
  return (*this)->get_ShowSortAscendingButton(Show);
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::get_ShowSortAscendingButton(TOLEBOOL* Show/*[out,retval]*/)
{
  return (*this)->get_ShowSortAscendingButton(VARIANT_BOOL*)Show);
}

template <class T> TOLEBOOL __fastcall
TCOMINavigationControlT<T>::get_ShowSortAscendingButton(void)
{
  VARIANT_BOOL Show;
  OLECHECK(this->get_ShowSortAscendingButton((VARIANT_BOOL*)&Show));
  return (TOLEBOOL)Show;
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::set_ShowSortDescendingButton(VARIANT_BOOL Show/*[in]*/)
{
  return (*this)->set_ShowSortDescendingButton(Show);
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::set_ShowSortDescendingButton(TOLEBOOL Show/*[in]*/)
{
  return (*this)->set_ShowSortDescendingButton(VARIANT_BOOL)Show);
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::get_ShowSortDescendingButton(VARIANT_BOOL* Show/*[out,retval]*/)
{
  return (*this)->get_ShowSortDescendingButton(Show);
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::get_ShowSortDescendingButton(TOLEBOOL* Show/*[out,retval]*/)
{
  return (*this)->get_ShowSortDescendingButton(VARIANT_BOOL*)Show);
}

template <class T> TOLEBOOL __fastcall
TCOMINavigationControlT<T>::get_ShowSortDescendingButton(void)
{
  VARIANT_BOOL Show;
  OLECHECK(this->get_ShowSortDescendingButton((VARIANT_BOOL*)&Show));
  return (TOLEBOOL)Show;
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::set_ShowFilterBySelectionButton(VARIANT_BOOL pfShow/*[in]*/)
{
  return (*this)->set_ShowFilterBySelectionButton(pfShow);
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::set_ShowFilterBySelectionButton(TOLEBOOL pfShow/*[in]*/)
{
  return (*this)->set_ShowFilterBySelectionButton(VARIANT_BOOL)pfShow);
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::get_ShowFilterBySelectionButton(VARIANT_BOOL* pfShow/*[out,retval]*/)
{
  return (*this)->get_ShowFilterBySelectionButton(pfShow);
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::get_ShowFilterBySelectionButton(TOLEBOOL* pfShow/*[out,retval]*/)
{
  return (*this)->get_ShowFilterBySelectionButton(VARIANT_BOOL*)pfShow);
}

template <class T> TOLEBOOL __fastcall
TCOMINavigationControlT<T>::get_ShowFilterBySelectionButton(void)
{
  VARIANT_BOOL pfShow;
  OLECHECK(this->get_ShowFilterBySelectionButton((VARIANT_BOOL*)&pfShow));
  return (TOLEBOOL)pfShow;
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::set_ShowToggleFilterButton(VARIANT_BOOL Show/*[in]*/)
{
  return (*this)->set_ShowToggleFilterButton(Show);
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::set_ShowToggleFilterButton(TOLEBOOL Show/*[in]*/)
{
  return (*this)->set_ShowToggleFilterButton(VARIANT_BOOL)Show);
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::get_ShowToggleFilterButton(VARIANT_BOOL* Show/*[out,retval]*/)
{
  return (*this)->get_ShowToggleFilterButton(Show);
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::get_ShowToggleFilterButton(TOLEBOOL* Show/*[out,retval]*/)
{
  return (*this)->get_ShowToggleFilterButton(VARIANT_BOOL*)Show);
}

template <class T> TOLEBOOL __fastcall
TCOMINavigationControlT<T>::get_ShowToggleFilterButton(void)
{
  VARIANT_BOOL Show;
  OLECHECK(this->get_ShowToggleFilterButton((VARIANT_BOOL*)&Show));
  return (TOLEBOOL)Show;
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::set_ShowHelpButton(VARIANT_BOOL Show/*[in]*/)
{
  return (*this)->set_ShowHelpButton(Show);
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::set_ShowHelpButton(TOLEBOOL Show/*[in]*/)
{
  return (*this)->set_ShowHelpButton(VARIANT_BOOL)Show);
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::get_ShowHelpButton(VARIANT_BOOL* Show/*[out,retval]*/)
{
  return (*this)->get_ShowHelpButton(Show);
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::get_ShowHelpButton(TOLEBOOL* Show/*[out,retval]*/)
{
  return (*this)->get_ShowHelpButton(VARIANT_BOOL*)Show);
}

template <class T> TOLEBOOL __fastcall
TCOMINavigationControlT<T>::get_ShowHelpButton(void)
{
  VARIANT_BOOL Show;
  OLECHECK(this->get_ShowHelpButton((VARIANT_BOOL*)&Show));
  return (TOLEBOOL)Show;
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::set_ShowLabel(VARIANT_BOOL Show/*[in]*/)
{
  return (*this)->set_ShowLabel(Show);
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::set_ShowLabel(TOLEBOOL Show/*[in]*/)
{
  return (*this)->set_ShowLabel(VARIANT_BOOL)Show);
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::get_ShowLabel(VARIANT_BOOL* Show/*[out,retval]*/)
{
  return (*this)->get_ShowLabel(Show);
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::get_ShowLabel(TOLEBOOL* Show/*[out,retval]*/)
{
  return (*this)->get_ShowLabel(VARIANT_BOOL*)Show);
}

template <class T> TOLEBOOL __fastcall
TCOMINavigationControlT<T>::get_ShowLabel(void)
{
  VARIANT_BOOL Show;
  OLECHECK(this->get_ShowLabel((VARIANT_BOOL*)&Show));
  return (TOLEBOOL)Show;
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::IsButtonEnabled(Owc10_xp::NavButtonEnum navbtn/*[in]*/, 
                                            VARIANT_BOOL* Enabled/*[out,retval]*/)
{
  return (*this)->IsButtonEnabled(navbtn, Enabled);
}

template <class T> VARIANT_BOOL __fastcall
TCOMINavigationControlT<T>::IsButtonEnabled(Owc10_xp::NavButtonEnum navbtn/*[in]*/)
{
  VARIANT_BOOL Enabled;
  OLECHECK(this->IsButtonEnabled(, (VARIANT_BOOL*)&Enabled));
  return Enabled;
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::set_FontName(BSTR FontName/*[in]*/)
{
  return (*this)->set_FontName(FontName);
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::get_FontName(BSTR* FontName/*[out,retval]*/)
{
  return (*this)->get_FontName(FontName);
}

template <class T> BSTR __fastcall
TCOMINavigationControlT<T>::get_FontName(void)
{
  BSTR FontName = 0;
  OLECHECK(this->get_FontName((BSTR*)&FontName));
  return FontName;
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::get__State(BSTR* State/*[out,retval]*/)
{
  return (*this)->get__State(State);
}

template <class T> BSTR __fastcall
TCOMINavigationControlT<T>::get__State(void)
{
  BSTR State = 0;
  OLECHECK(this->get__State((BSTR*)&State));
  return State;
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::set__State(BSTR State/*[in]*/)
{
  return (*this)->set__State(State);
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::Redraw(void)
{
  return (*this)->Redraw();
}

template <class T> HRESULT __fastcall
TCOMINavigationControlT<T>::ReleaseDataPage(void)
{
  return (*this)->ReleaseDataPage();
}

// *********************************************************************//
// DispIntf:  INavigationControl
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39AA8-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INavigationControlDispT<T>::set_DataSource(Msdatasrc_xp::DataSource* DataSource/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataSource"), DISPID(700));
  TAutoArgs<1> _args;
  _args[1] = (LPUNKNOWN)(Msdatasrc_xp::DataSource*)DataSource /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INavigationControlDispT<T>::get_DataSource(Msdatasrc_xp::DataSource** DataSource/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataSource"), DISPID(700));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPUNKNOWN*)(Msdatasrc_xp::DataSource**)DataSource /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msdatasrc_xp::DataSource* __fastcall
INavigationControlDispT<T>::get_DataSource(void)
{
  Msdatasrc_xp::DataSource* DataSource;
  this->get_DataSource((Msdatasrc_xp::DataSource**)&DataSource);
  return DataSource;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INavigationControlDispT<T>::set_RecordSource(Msdatasrc_xp::DataMember RecordSource/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecordSource"), DISPID(701));
  TAutoArgs<1> _args;
  _args[1] = RecordSource /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INavigationControlDispT<T>::get_RecordSource(Msdatasrc_xp::DataMember* RecordSource/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecordSource"), DISPID(701));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RecordSource /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msdatasrc_xp::DataMember __fastcall
INavigationControlDispT<T>::get_RecordSource(void)
{
  Msdatasrc_xp::DataMember RecordSource;
  this->get_RecordSource((Msdatasrc_xp::DataMember*)&RecordSource);
  return RecordSource;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INavigationControlDispT<T>::set_RecordsetLabel(BSTR RecordsetLabel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecordsetLabel"), DISPID(702));
  TAutoArgs<1> _args;
  _args[1] = RecordsetLabel /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INavigationControlDispT<T>::get_RecordsetLabel(BSTR* RecordsetLabel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecordsetLabel"), DISPID(702));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RecordsetLabel /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
INavigationControlDispT<T>::get_RecordsetLabel(void)
{
  BSTR RecordsetLabel;
  this->get_RecordsetLabel((BSTR*)&RecordsetLabel);
  return RecordsetLabel;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INavigationControlDispT<T>::set_ShowFirstButton(VARIANT_BOOL Show/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowFirstButton"), DISPID(704));
  TAutoArgs<1> _args;
  _args[1] = Show /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INavigationControlDispT<T>::get_ShowFirstButton(VARIANT_BOOL* Show/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowFirstButton"), DISPID(704));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Show /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
INavigationControlDispT<T>::get_ShowFirstButton(void)
{
  VARIANT_BOOL Show;
  this->get_ShowFirstButton((VARIANT_BOOL*)&Show);
  return Show;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INavigationControlDispT<T>::set_ShowPrevButton(VARIANT_BOOL Show/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowPrevButton"), DISPID(705));
  TAutoArgs<1> _args;
  _args[1] = Show /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INavigationControlDispT<T>::get_ShowPrevButton(VARIANT_BOOL* Show/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowPrevButton"), DISPID(705));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Show /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
INavigationControlDispT<T>::get_ShowPrevButton(void)
{
  VARIANT_BOOL Show;
  this->get_ShowPrevButton((VARIANT_BOOL*)&Show);
  return Show;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INavigationControlDispT<T>::set_ShowNextButton(VARIANT_BOOL Show/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowNextButton"), DISPID(706));
  TAutoArgs<1> _args;
  _args[1] = Show /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INavigationControlDispT<T>::get_ShowNextButton(VARIANT_BOOL* Show/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowNextButton"), DISPID(706));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Show /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
INavigationControlDispT<T>::get_ShowNextButton(void)
{
  VARIANT_BOOL Show;
  this->get_ShowNextButton((VARIANT_BOOL*)&Show);
  return Show;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INavigationControlDispT<T>::set_ShowLastButton(VARIANT_BOOL Show/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowLastButton"), DISPID(707));
  TAutoArgs<1> _args;
  _args[1] = Show /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INavigationControlDispT<T>::get_ShowLastButton(VARIANT_BOOL* Show/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowLastButton"), DISPID(707));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Show /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
INavigationControlDispT<T>::get_ShowLastButton(void)
{
  VARIANT_BOOL Show;
  this->get_ShowLastButton((VARIANT_BOOL*)&Show);
  return Show;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INavigationControlDispT<T>::set_ShowNewButton(VARIANT_BOOL Show/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowNewButton"), DISPID(708));
  TAutoArgs<1> _args;
  _args[1] = Show /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INavigationControlDispT<T>::get_ShowNewButton(VARIANT_BOOL* Show/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowNewButton"), DISPID(708));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Show /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
INavigationControlDispT<T>::get_ShowNewButton(void)
{
  VARIANT_BOOL Show;
  this->get_ShowNewButton((VARIANT_BOOL*)&Show);
  return Show;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INavigationControlDispT<T>::set_ShowDelButton(VARIANT_BOOL Show/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowDelButton"), DISPID(709));
  TAutoArgs<1> _args;
  _args[1] = Show /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INavigationControlDispT<T>::get_ShowDelButton(VARIANT_BOOL* Show/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowDelButton"), DISPID(709));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Show /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
INavigationControlDispT<T>::get_ShowDelButton(void)
{
  VARIANT_BOOL Show;
  this->get_ShowDelButton((VARIANT_BOOL*)&Show);
  return Show;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INavigationControlDispT<T>::set_ShowSaveButton(VARIANT_BOOL Show/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowSaveButton"), DISPID(710));
  TAutoArgs<1> _args;
  _args[1] = Show /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INavigationControlDispT<T>::get_ShowSaveButton(VARIANT_BOOL* Show/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowSaveButton"), DISPID(710));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Show /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
INavigationControlDispT<T>::get_ShowSaveButton(void)
{
  VARIANT_BOOL Show;
  this->get_ShowSaveButton((VARIANT_BOOL*)&Show);
  return Show;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INavigationControlDispT<T>::set_ShowUndoButton(VARIANT_BOOL Show/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowUndoButton"), DISPID(711));
  TAutoArgs<1> _args;
  _args[1] = Show /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INavigationControlDispT<T>::get_ShowUndoButton(VARIANT_BOOL* Show/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowUndoButton"), DISPID(711));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Show /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
INavigationControlDispT<T>::get_ShowUndoButton(void)
{
  VARIANT_BOOL Show;
  this->get_ShowUndoButton((VARIANT_BOOL*)&Show);
  return Show;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INavigationControlDispT<T>::set_ShowSortAscendingButton(VARIANT_BOOL Show/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowSortAscendingButton"), DISPID(712));
  TAutoArgs<1> _args;
  _args[1] = Show /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INavigationControlDispT<T>::get_ShowSortAscendingButton(VARIANT_BOOL* Show/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowSortAscendingButton"), DISPID(712));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Show /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
INavigationControlDispT<T>::get_ShowSortAscendingButton(void)
{
  VARIANT_BOOL Show;
  this->get_ShowSortAscendingButton((VARIANT_BOOL*)&Show);
  return Show;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INavigationControlDispT<T>::set_ShowSortDescendingButton(VARIANT_BOOL Show/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowSortDescendingButton"), DISPID(713));
  TAutoArgs<1> _args;
  _args[1] = Show /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INavigationControlDispT<T>::get_ShowSortDescendingButton(VARIANT_BOOL* Show/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowSortDescendingButton"), DISPID(713));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Show /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
INavigationControlDispT<T>::get_ShowSortDescendingButton(void)
{
  VARIANT_BOOL Show;
  this->get_ShowSortDescendingButton((VARIANT_BOOL*)&Show);
  return Show;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INavigationControlDispT<T>::set_ShowFilterBySelectionButton(VARIANT_BOOL pfShow/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowFilterBySelectionButton"), DISPID(714));
  TAutoArgs<1> _args;
  _args[1] = pfShow /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INavigationControlDispT<T>::get_ShowFilterBySelectionButton(VARIANT_BOOL* pfShow/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowFilterBySelectionButton"), DISPID(714));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfShow /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
INavigationControlDispT<T>::get_ShowFilterBySelectionButton(void)
{
  VARIANT_BOOL pfShow;
  this->get_ShowFilterBySelectionButton((VARIANT_BOOL*)&pfShow);
  return pfShow;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INavigationControlDispT<T>::set_ShowToggleFilterButton(VARIANT_BOOL Show/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowToggleFilterButton"), DISPID(715));
  TAutoArgs<1> _args;
  _args[1] = Show /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INavigationControlDispT<T>::get_ShowToggleFilterButton(VARIANT_BOOL* Show/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowToggleFilterButton"), DISPID(715));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Show /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
INavigationControlDispT<T>::get_ShowToggleFilterButton(void)
{
  VARIANT_BOOL Show;
  this->get_ShowToggleFilterButton((VARIANT_BOOL*)&Show);
  return Show;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INavigationControlDispT<T>::set_ShowHelpButton(VARIANT_BOOL Show/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowHelpButton"), DISPID(716));
  TAutoArgs<1> _args;
  _args[1] = Show /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INavigationControlDispT<T>::get_ShowHelpButton(VARIANT_BOOL* Show/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowHelpButton"), DISPID(716));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Show /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
INavigationControlDispT<T>::get_ShowHelpButton(void)
{
  VARIANT_BOOL Show;
  this->get_ShowHelpButton((VARIANT_BOOL*)&Show);
  return Show;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INavigationControlDispT<T>::set_ShowLabel(VARIANT_BOOL Show/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowLabel"), DISPID(718));
  TAutoArgs<1> _args;
  _args[1] = Show /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INavigationControlDispT<T>::get_ShowLabel(VARIANT_BOOL* Show/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowLabel"), DISPID(718));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Show /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
INavigationControlDispT<T>::get_ShowLabel(void)
{
  VARIANT_BOOL Show;
  this->get_ShowLabel((VARIANT_BOOL*)&Show);
  return Show;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INavigationControlDispT<T>::IsButtonEnabled(Owc10_xp::NavButtonEnum navbtn/*[in]*/, 
                                            VARIANT_BOOL* Enabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsButtonEnabled"), DISPID(717));
  TAutoArgs<1> _args;
  _args[1] = (int)navbtn /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(Enabled /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
INavigationControlDispT<T>::IsButtonEnabled(Owc10_xp::NavButtonEnum navbtn/*[in]*/)
{
  VARIANT_BOOL Enabled;
  this->IsButtonEnabled(navbtn, (VARIANT_BOOL*)&Enabled);
  return Enabled;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INavigationControlDispT<T>::set_FontName(BSTR FontName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontName"), DISPID(719));
  TAutoArgs<1> _args;
  _args[1] = FontName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INavigationControlDispT<T>::get_FontName(BSTR* FontName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontName"), DISPID(719));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
INavigationControlDispT<T>::get_FontName(void)
{
  BSTR FontName;
  this->get_FontName((BSTR*)&FontName);
  return FontName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INavigationControlDispT<T>::get__State(BSTR* State/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_State"), DISPID(720));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(State /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
INavigationControlDispT<T>::get__State(void)
{
  BSTR State;
  this->get__State((BSTR*)&State);
  return State;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INavigationControlDispT<T>::set__State(BSTR State/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_State"), DISPID(720));
  TAutoArgs<1> _args;
  _args[1] = State /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INavigationControlDispT<T>::Redraw()
{
  _TDispID _dispid(*this, OLETEXT("Redraw"), DISPID(721));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INavigationControlDispT<T>::ReleaseDataPage()
{
  _TDispID _dispid(*this, OLETEXT("ReleaseDataPage"), DISPID(722));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  _NavigationEvent
// Flags:     (4096) Dispatchable
// GUID:      {4BD09D02-45CC-11D1-B1D1-006097C97F9B}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
_NavigationEventDispT<T>::ButtonClick(Owc10_xp::NavButtonEnum NavButton/*[in]*/)
{
  _TDispID _dispid(/* ButtonClick */ DISPID(740));
  TAutoArgs<1> _args;
  _args[1] = (int)NavButton /*[VT_USERDEFINED:0]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  FieldListHierarchy
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {7BD180A4-0406-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListHierarchyDispT<T>::SetHierarchySite(Owc10_xp::FieldListHierarchySite* pflhs/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetHierarchySite"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = (LPUNKNOWN)(Owc10_xp::FieldListHierarchySite*)pflhs /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListHierarchyDispT<T>::AddNode(Owc10_xp::FieldListNode* pflnParent/*[in]*/, 
                                    VARIANT_BOOL fInsertFirst/*[in]*/, long nID/*[in]*/, 
                                    BSTR bstrName/*[in]*/, BSTR bstrData/*[in]*/, long nType/*[in]*/
                                    , Owc10_xp::FieldListNode** ppfln/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddNode"), DISPID(2));
  TAutoArgs<6> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::FieldListNode*)pflnParent /*[VT_USERDEFINED:1]*/;
  _args[2] = fInsertFirst /*[VT_BOOL:0]*/;
  _args[3] = nID /*[VT_I4:0]*/;
  _args[4] = bstrName /*[VT_BSTR:0]*/;
  _args[5] = bstrData /*[VT_BSTR:0]*/;
  _args[6] = nType /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::FieldListNode**)ppfln /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::FieldListNode* __fastcall
FieldListHierarchyDispT<T>::AddNode(Owc10_xp::FieldListNode* pflnParent/*[in]*/, 
                                    VARIANT_BOOL fInsertFirst/*[in]*/, long nID/*[in]*/, 
                                    BSTR bstrName/*[in]*/, BSTR bstrData/*[in]*/, long nType/*[in]*/)
{
  Owc10_xp::FieldListNode* ppfln;
  this->AddNode(pflnParent, fInsertFirst, nID, bstrName, bstrData, nType, (Owc10_xp::FieldListNode**)&ppfln);
  return ppfln;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListHierarchyDispT<T>::GetNode(long nID/*[in]*/, 
                                    Owc10_xp::FieldListNode** ppfln/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetNode"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = nID /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::FieldListNode**)ppfln /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::FieldListNode* __fastcall
FieldListHierarchyDispT<T>::GetNode(long nID/*[in]*/)
{
  Owc10_xp::FieldListNode* ppfln;
  this->GetNode(nID, (Owc10_xp::FieldListNode**)&ppfln);
  return ppfln;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListHierarchyDispT<T>::RemoveNode(Owc10_xp::FieldListNode* pfln/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoveNode"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::FieldListNode*)pfln /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListHierarchyDispT<T>::get_Root(Owc10_xp::FieldListNode** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Root"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::FieldListNode**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::FieldListNode* __fastcall
FieldListHierarchyDispT<T>::get_Root(void)
{
  Owc10_xp::FieldListNode* pVal;
  this->get_Root((Owc10_xp::FieldListNode**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListHierarchyDispT<T>::get_Visible(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
FieldListHierarchyDispT<T>::get_Visible(void)
{
  VARIANT_BOOL pVal;
  this->get_Visible((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListHierarchyDispT<T>::set_Visible(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListHierarchyDispT<T>::AddType(long nType/*[in]*/, 
                                    Owc10_xp::FieldListType** ppflt/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddType"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = nType /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::FieldListType**)ppflt /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::FieldListType* __fastcall
FieldListHierarchyDispT<T>::AddType(long nType/*[in]*/)
{
  Owc10_xp::FieldListType* ppflt;
  this->AddType(nType, (Owc10_xp::FieldListType**)&ppflt);
  return ppflt;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListHierarchyDispT<T>::GetType(long nTypeId, Owc10_xp::FieldListType** ppflt/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetType"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = nTypeId /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::FieldListType**)ppflt /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::FieldListType* __fastcall
FieldListHierarchyDispT<T>::GetType(long nTypeId)
{
  Owc10_xp::FieldListType* ppflt;
  this->GetType(nTypeId, (Owc10_xp::FieldListType**)&ppflt);
  return ppflt;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListHierarchyDispT<T>::get_Selection(Owc10_xp::FieldListNode** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Selection"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::FieldListNode**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::FieldListNode* __fastcall
FieldListHierarchyDispT<T>::get_Selection(void)
{
  Owc10_xp::FieldListNode* pVal;
  this->get_Selection((Owc10_xp::FieldListNode**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListHierarchyDispT<T>::get_ConcatenateData(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConcatenateData"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
FieldListHierarchyDispT<T>::get_ConcatenateData(void)
{
  VARIANT_BOOL pVal;
  this->get_ConcatenateData((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListHierarchyDispT<T>::set_ConcatenateData(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConcatenateData"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListHierarchyDispT<T>::get_DataSeparator(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataSeparator"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
FieldListHierarchyDispT<T>::get_DataSeparator(void)
{
  BSTR pVal;
  this->get_DataSeparator((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListHierarchyDispT<T>::set_DataSeparator(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataSeparator"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListHierarchyDispT<T>::GetNextSelected(Owc10_xp::FieldListNode* pfln/*[in]*/, 
                                            Owc10_xp::FieldListNode** ppfln/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetNextSelected"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::FieldListNode*)pfln /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::FieldListNode**)ppfln /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::FieldListNode* __fastcall
FieldListHierarchyDispT<T>::GetNextSelected(Owc10_xp::FieldListNode* pfln/*[in]*/)
{
  Owc10_xp::FieldListNode* ppfln;
  this->GetNextSelected(pfln, (Owc10_xp::FieldListNode**)&ppfln);
  return ppfln;
}

// *********************************************************************//
// DispIntf:  FieldListNode
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F7DDE2F0-0895-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListNodeDispT<T>::get_id(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("id"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
FieldListNodeDispT<T>::get_id(void)
{
  long pVal;
  this->get_id((long*)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListNodeDispT<T>::get_Name(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
FieldListNodeDispT<T>::get_Name(void)
{
  BSTR pVal;
  this->get_Name((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListNodeDispT<T>::set_Name(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListNodeDispT<T>::get_TypeId(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TypeId"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
FieldListNodeDispT<T>::get_TypeId(void)
{
  long pVal;
  this->get_TypeId((long*)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListNodeDispT<T>::get_Expanded(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Expanded"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
FieldListNodeDispT<T>::get_Expanded(void)
{
  VARIANT_BOOL pVal;
  this->get_Expanded((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListNodeDispT<T>::set_Expanded(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Expanded"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListNodeDispT<T>::get_Selected(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Selected"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
FieldListNodeDispT<T>::get_Selected(void)
{
  VARIANT_BOOL pVal;
  this->get_Selected((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListNodeDispT<T>::set_Selected(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Selected"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListNodeDispT<T>::get_Parent(Owc10_xp::FieldListNode** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::FieldListNode**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::FieldListNode* __fastcall
FieldListNodeDispT<T>::get_Parent(void)
{
  Owc10_xp::FieldListNode* pVal;
  this->get_Parent((Owc10_xp::FieldListNode**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListNodeDispT<T>::get_Child(Owc10_xp::FieldListNode** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Child"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::FieldListNode**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::FieldListNode* __fastcall
FieldListNodeDispT<T>::get_Child(void)
{
  Owc10_xp::FieldListNode* pVal;
  this->get_Child((Owc10_xp::FieldListNode**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListNodeDispT<T>::get_NextSibling(Owc10_xp::FieldListNode** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NextSibling"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::FieldListNode**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::FieldListNode* __fastcall
FieldListNodeDispT<T>::get_NextSibling(void)
{
  Owc10_xp::FieldListNode* pVal;
  this->get_NextSibling((Owc10_xp::FieldListNode**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListNodeDispT<T>::get_PrevSibling(Owc10_xp::FieldListNode** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrevSibling"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::FieldListNode**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::FieldListNode* __fastcall
FieldListNodeDispT<T>::get_PrevSibling(void)
{
  Owc10_xp::FieldListNode* pVal;
  this->get_PrevSibling((Owc10_xp::FieldListNode**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListNodeDispT<T>::get_Bold(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bold"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
FieldListNodeDispT<T>::get_Bold(void)
{
  VARIANT_BOOL pVal;
  this->get_Bold((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListNodeDispT<T>::set_Bold(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bold"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListNodeDispT<T>::get_Image(int* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Image"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
FieldListNodeDispT<T>::get_Image(void)
{
  int pVal;
  this->get_Image((int*)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListNodeDispT<T>::set_Image(int pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Image"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListNodeDispT<T>::get_Populated(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Populated"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
FieldListNodeDispT<T>::get_Populated(void)
{
  VARIANT_BOOL pVal;
  this->get_Populated((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListNodeDispT<T>::set_Populated(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Populated"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListNodeDispT<T>::get_Data(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Data"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
FieldListNodeDispT<T>::get_Data(void)
{
  BSTR pVal;
  this->get_Data((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListNodeDispT<T>::set_Data(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Data"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListNodeDispT<T>::get_InfoTip(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InfoTip"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
FieldListNodeDispT<T>::get_InfoTip(void)
{
  BSTR pVal;
  this->get_InfoTip((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListNodeDispT<T>::set_InfoTip(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InfoTip"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListNodeDispT<T>::get_HasCaret(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasCaret"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
FieldListNodeDispT<T>::get_HasCaret(void)
{
  VARIANT_BOOL pVal;
  this->get_HasCaret((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListNodeDispT<T>::set_HasCaret(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasCaret"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListNodeDispT<T>::get_Hierarchy(Owc10_xp::FieldListHierarchy** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Hierarchy"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::FieldListHierarchy**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::FieldListHierarchy* __fastcall
FieldListNodeDispT<T>::get_Hierarchy(void)
{
  Owc10_xp::FieldListHierarchy* pVal;
  this->get_Hierarchy((Owc10_xp::FieldListHierarchy**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListNodeDispT<T>::get_OverlayImage(int* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OverlayImage"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
FieldListNodeDispT<T>::get_OverlayImage(void)
{
  int pVal;
  this->get_OverlayImage((int*)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListNodeDispT<T>::set_OverlayImage(int pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OverlayImage"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListNodeDispT<T>::SortChildren(VARIANT_BOOL vbByData)
{
  _TDispID _dispid(*this, OLETEXT("SortChildren"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = vbByData /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  FieldListType
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {63F85AD0-1ACC-11D3-854A-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListTypeDispT<T>::get_CanDrag(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanDrag"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
FieldListTypeDispT<T>::get_CanDrag(void)
{
  VARIANT_BOOL pVal;
  this->get_CanDrag((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListTypeDispT<T>::set_CanDrag(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanDrag"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListTypeDispT<T>::get_CallbackForChildren(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallbackForChildren"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
FieldListTypeDispT<T>::get_CallbackForChildren(void)
{
  VARIANT_BOOL pVal;
  this->get_CallbackForChildren((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListTypeDispT<T>::set_CallbackForChildren(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallbackForChildren"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListTypeDispT<T>::get_TypeMenu(unsigned* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TypeMenu"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_UINT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned __fastcall
FieldListTypeDispT<T>::get_TypeMenu(void)
{
  unsigned pVal;
  this->get_TypeMenu((unsigned*)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListTypeDispT<T>::set_TypeMenu(unsigned pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TypeMenu"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_UINT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListTypeDispT<T>::get_Image(int* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Image"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
FieldListTypeDispT<T>::get_Image(void)
{
  int pVal;
  this->get_Image((int*)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListTypeDispT<T>::set_Image(int pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Image"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMFieldList
// Interface: FieldList
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMFieldListT<T>::CreateHierarchy(VARIANT_BOOL bVisible/*[in]*/, 
                                   Owc10_xp::FieldListHierarchy** ppflh/*[out,retval]*/)
{
  return (*this)->CreateHierarchy(bVisible, ppflh);
}

template <class T> Owc10_xp::FieldListHierarchy* __fastcall
TCOMFieldListT<T>::CreateHierarchy(VARIANT_BOOL bVisible/*[in]*/)
{
  Owc10_xp::FieldListHierarchy* ppflh;
  OLECHECK(this->CreateHierarchy(, (Owc10_xp::FieldListHierarchy**)&ppflh));
  return ppflh;
}

template <class T> HRESULT __fastcall
TCOMFieldListT<T>::get_ClipboardFormat(int* pVal/*[out,retval]*/)
{
  return (*this)->get_ClipboardFormat(pVal);
}

template <class T> int __fastcall
TCOMFieldListT<T>::get_ClipboardFormat(void)
{
  int pVal;
  OLECHECK(this->get_ClipboardFormat((int*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMFieldListT<T>::AddBitmap(int iWidth, int iHeight, IPicture* pip/*[in]*/, unsigned_long crMask, 
                             int* pIndex/*[out,retval]*/)
{
  return (*this)->AddBitmap(iWidth, iHeight, pip, crMask, pIndex);
}

template <class T> int __fastcall
TCOMFieldListT<T>::AddBitmap(int iWidth, int iHeight, IPicture* pip/*[in]*/, unsigned_long crMask)
{
  int pIndex;
  OLECHECK(this->AddBitmap(, (int*)&pIndex));
  return pIndex;
}

template <class T> HRESULT __fastcall
TCOMFieldListT<T>::get_InstanceID(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_InstanceID(pVal);
}

template <class T> BSTR __fastcall
TCOMFieldListT<T>::get_InstanceID(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_InstanceID((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMFieldListT<T>::get_Font(IFont** pVal/*[out,retval]*/)
{
  return (*this)->get_Font(pVal);
}

template <class T> HRESULT __fastcall
TCOMFieldListT<T>::get_Font(IFontPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_Font(IFont**)pVal);
}

template <class T> IFontPtr __fastcall
TCOMFieldListT<T>::get_Font(void)
{
  IFont* pVal;
  OLECHECK(this->get_Font((IFont**)&pVal));
  return (IFontPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOMFieldListT<T>::set_Font(IFont* pVal/*[in]*/)
{
  return (*this)->set_Font(pVal);
}

template <class T> HRESULT __fastcall
TCOMFieldListT<T>::set_Font(IFontPtr pVal/*[in]*/)
{
  return (*this)->set_Font(IFont*)pVal);
}

template <class T> HRESULT __fastcall
TCOMFieldListT<T>::get_MultiSelect(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_MultiSelect(pVal);
}

template <class T> HRESULT __fastcall
TCOMFieldListT<T>::get_MultiSelect(TOLEBOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_MultiSelect(VARIANT_BOOL*)pVal);
}

template <class T> TOLEBOOL __fastcall
TCOMFieldListT<T>::get_MultiSelect(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_MultiSelect((VARIANT_BOOL*)&pVal));
  return (TOLEBOOL)pVal;
}

template <class T> HRESULT __fastcall
TCOMFieldListT<T>::set_MultiSelect(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_MultiSelect(pVal);
}

template <class T> HRESULT __fastcall
TCOMFieldListT<T>::set_MultiSelect(TOLEBOOL pVal/*[in]*/)
{
  return (*this)->set_MultiSelect(VARIANT_BOOL)pVal);
}

template <class T> HRESULT __fastcall
TCOMFieldListT<T>::get_SelectRestriction(Owc10_xp::FieldListSelectRestriction* pVal/*[out,retval]*/)
{
  return (*this)->get_SelectRestriction(pVal);
}

template <class T> Owc10_xp::FieldListSelectRestriction __fastcall
TCOMFieldListT<T>::get_SelectRestriction(void)
{
  Owc10_xp::FieldListSelectRestriction pVal;
  OLECHECK(this->get_SelectRestriction((Owc10_xp::FieldListSelectRestriction*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMFieldListT<T>::set_SelectRestriction(Owc10_xp::FieldListSelectRestriction pVal/*[in]*/)
{
  return (*this)->set_SelectRestriction(pVal);
}

template <class T> HRESULT __fastcall
TCOMFieldListT<T>::GetNextSelected(Owc10_xp::FieldListNode* pfln/*[in]*/, 
                                   Owc10_xp::FieldListNode** ppfln/*[out,retval]*/)
{
  return (*this)->GetNextSelected(pfln, ppfln);
}

template <class T> Owc10_xp::FieldListNode* __fastcall
TCOMFieldListT<T>::GetNextSelected(Owc10_xp::FieldListNode* pfln/*[in]*/)
{
  Owc10_xp::FieldListNode* ppfln;
  OLECHECK(this->GetNextSelected(, (Owc10_xp::FieldListNode**)&ppfln));
  return ppfln;
}

template <class T> HRESULT __fastcall
TCOMFieldListT<T>::ClearSelection(void)
{
  return (*this)->ClearSelection();
}

template <class T> HRESULT __fastcall
TCOMFieldListT<T>::SetOverlayImage(int iImage, int iOverlay)
{
  return (*this)->SetOverlayImage(iImage, iOverlay);
}

// *********************************************************************//
// DispIntf:  FieldList
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {7BD1809E-0406-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListDispT<T>::CreateHierarchy(VARIANT_BOOL bVisible/*[in]*/, 
                                   Owc10_xp::FieldListHierarchy** ppflh/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateHierarchy"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = bVisible /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::FieldListHierarchy**)ppflh /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::FieldListHierarchy* __fastcall
FieldListDispT<T>::CreateHierarchy(VARIANT_BOOL bVisible/*[in]*/)
{
  Owc10_xp::FieldListHierarchy* ppflh;
  this->CreateHierarchy(bVisible, (Owc10_xp::FieldListHierarchy**)&ppflh);
  return ppflh;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListDispT<T>::get_ClipboardFormat(int* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClipboardFormat"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
FieldListDispT<T>::get_ClipboardFormat(void)
{
  int pVal;
  this->get_ClipboardFormat((int*)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListDispT<T>::AddBitmap(int iWidth, int iHeight, IPicture* pip/*[in]*/, unsigned_long crMask, 
                             int* pIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddBitmap"), DISPID(3));
  TAutoArgs<4> _args;
  _args[1] = iWidth /*[VT_INT:0]*/;
  _args[2] = iHeight /*[VT_INT:0]*/;
  _args[3] = (LPUNKNOWN)(IPicture*)pip /*[VT_USERDEFINED:1]*/;
  _args[4] = crMask /*[VT_UI4:0]*/;
  return OutRetValSetterPtr(pIndex /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
FieldListDispT<T>::AddBitmap(int iWidth, int iHeight, IPicture* pip/*[in]*/, unsigned_long crMask)
{
  int pIndex;
  this->AddBitmap(iWidth, iHeight, pip, crMask, (int*)&pIndex);
  return pIndex;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListDispT<T>::get_InstanceID(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InstanceID"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
FieldListDispT<T>::get_InstanceID(void)
{
  BSTR pVal;
  this->get_InstanceID((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListDispT<T>::get_Font(IFont** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPUNKNOWN*)(IFont**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IFont* __fastcall
FieldListDispT<T>::get_Font(void)
{
  IFont* pVal;
  this->get_Font((IFont**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListDispT<T>::set_Font(IFont* pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = (LPUNKNOWN)(IFont*)pVal /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListDispT<T>::get_MultiSelect(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MultiSelect"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
FieldListDispT<T>::get_MultiSelect(void)
{
  VARIANT_BOOL pVal;
  this->get_MultiSelect((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListDispT<T>::set_MultiSelect(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MultiSelect"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListDispT<T>::get_SelectRestriction(Owc10_xp::FieldListSelectRestriction* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectRestriction"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::FieldListSelectRestriction __fastcall
FieldListDispT<T>::get_SelectRestriction(void)
{
  Owc10_xp::FieldListSelectRestriction pVal;
  this->get_SelectRestriction((Owc10_xp::FieldListSelectRestriction*)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListDispT<T>::set_SelectRestriction(Owc10_xp::FieldListSelectRestriction pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectRestriction"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListDispT<T>::GetNextSelected(Owc10_xp::FieldListNode* pfln/*[in]*/, 
                                   Owc10_xp::FieldListNode** ppfln/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetNextSelected"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::FieldListNode*)pfln /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::FieldListNode**)ppfln /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Owc10_xp::FieldListNode* __fastcall
FieldListDispT<T>::GetNextSelected(Owc10_xp::FieldListNode* pfln/*[in]*/)
{
  Owc10_xp::FieldListNode* ppfln;
  this->GetNextSelected(pfln, (Owc10_xp::FieldListNode**)&ppfln);
  return ppfln;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListDispT<T>::ClearSelection()
{
  _TDispID _dispid(*this, OLETEXT("ClearSelection"), DISPID(9));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListDispT<T>::SetOverlayImage(int iImage, int iOverlay)
{
  _TDispID _dispid(*this, OLETEXT("SetOverlayImage"), DISPID(10));
  TAutoArgs<2> _args;
  _args[1] = iImage /*[VT_INT:0]*/;
  _args[2] = iOverlay /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  FieldListDragData
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6EAC3754-49CC-11D3-AE50-00C04F613171}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListDragDataDispT<T>::get_NodeId(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NodeId"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
FieldListDragDataDispT<T>::get_NodeId(void)
{
  long pVal;
  this->get_NodeId((long*)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListDragDataDispT<T>::get_TypeId(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TypeId"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
FieldListDragDataDispT<T>::get_TypeId(void)
{
  long pVal;
  this->get_TypeId((long*)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListDragDataDispT<T>::get_Name(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
FieldListDragDataDispT<T>::get_Name(void)
{
  BSTR pVal;
  this->get_Name((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListDragDataDispT<T>::get_Data(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Data"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
FieldListDragDataDispT<T>::get_Data(void)
{
  BSTR pVal;
  this->get_Data((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListDragDataDispT<T>::get_FieldListInstanceId(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FieldListInstanceId"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
FieldListDragDataDispT<T>::get_FieldListInstanceId(void)
{
  BSTR pVal;
  this->get_FieldListInstanceId((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListDragDataDispT<T>::get_Object(LPUNKNOWN* ppObj/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Object"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppObj /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
FieldListDragDataDispT<T>::get_Object(void)
{
  LPUNKNOWN ppObj;
  this->get_Object((LPUNKNOWN*)&ppObj);
  return ppObj;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListDragDataDispT<T>::get_OwnerObject(LPUNKNOWN* ppOwnerObject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OwnerObject"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppOwnerObject /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
FieldListDragDataDispT<T>::get_OwnerObject(void)
{
  LPUNKNOWN ppOwnerObject;
  this->get_OwnerObject((LPUNKNOWN*)&ppOwnerObject);
  return ppOwnerObject;
}

// *********************************************************************//
// DispIntf:  FieldListDragDataList
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2A9DDE7C-D83E-11D3-AE6C-00C04F613171}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListDragDataListDispT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
FieldListDragDataListDispT<T>::get_Count(void)
{
  long pVal;
  this->get_Count((long*)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FieldListDragDataListDispT<T>::get_Item(long Index/*[in]*/, 
                                        Owc10_xp::FieldListDragData** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::FieldListDragData**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::FieldListDragData* __fastcall
FieldListDragDataListDispT<T>::get_Item(long Index/*[in]*/)
{
  Owc10_xp::FieldListDragData* pVal;
  this->get_Item(Index, (Owc10_xp::FieldListDragData**)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOMIOfflineInfo
// Interface: IOfflineInfo
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIOfflineInfoT<T>::PutServerFilter(LPWSTR pwzUrl, LPWSTR pwzServerFilter)
{
  return (*this)->PutServerFilter(pwzUrl, pwzServerFilter);
}

template <class T> HRESULT __fastcall
TCOMIOfflineInfoT<T>::GetServerFilter(LPWSTR pwzUrl, LPWSTR* pwzServerFilter)
{
  return (*this)->GetServerFilter(pwzUrl, pwzServerFilter);
}

template <class T> HRESULT __fastcall
TCOMIOfflineInfoT<T>::GetIsPageSubscribed(LPWSTR pwzUrl, long* pfSubscribed)
{
  return (*this)->GetIsPageSubscribed(pwzUrl, pfSubscribed);
}

template <class T> HRESULT __fastcall
TCOMIOfflineInfoT<T>::GetOfflineXMLFileLocation(BSTR* pbstrPath)
{
  return (*this)->GetOfflineXMLFileLocation(pbstrPath);
}

// *********************************************************************//
// DispIntf:  ChUserDefinedSelection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {22C1AB70-4BFF-40FB-95EE-C8CA647833C6}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChUserDefinedSelectionDispT<T>::get_id(long* id/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("id"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(id /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChUserDefinedSelectionDispT<T>::get_id(void)
{
  long id;
  this->get_id((long*)&id);
  return id;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChUserDefinedSelectionDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ChUserDefinedSelectionDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

// *********************************************************************//
// DispIntf:  IAddinHost
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FAA0B9C0-F635-44C7-B825-B805F59B3D66}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IAddinHostDispT<T>::CoerceOper(VARIANT* varoper/*[in]*/, Owc10_xp::AddinClientTypeEnum grbit/*[in]*/
                               , VARIANT* Result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CoerceOper"), DISPID(1));
  TAutoArgs<2> _args;
  _args[1] = varoper /*[VT_VARIANT:1]*/;
  _args[2] = (int)grbit /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(Result /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
IAddinHostDispT<T>::CoerceOper(VARIANT* varoper/*[in]*/, Owc10_xp::AddinClientTypeEnum grbit/*[in]*/)
{
  VARIANT Result;
  this->CoerceOper(varoper, grbit, (VARIANT*)&Result);
  return Result;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IAddinHostDispT<T>::RandOper(VARIANT* Result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RandOper"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Result /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
IAddinHostDispT<T>::RandOper(void)
{
  VARIANT Result;
  this->RandOper((VARIANT*)&Result);
  return Result;
}

// *********************************************************************//
// DispIntf:  IRangeEvents
// Flags:     (4096) Dispatchable
// GUID:      {B8891063-2B00-48EC-957F-6DEBEADE9D8B}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
IRangeEventsDispT<T>::Change()
{
  _TDispID _dispid(/* Change */ DISPID(1510));
  OleProcedure(_dispid);
}

// *********************************************************************//
// DispIntf:  IXRangeEnum
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5B39B09-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXRangeEnumDispT<T>::Next(unsigned_long cElt/*[in]*/, VARIANT* rgvar/*[out]*/, 
                          unsigned_long* pcEltFetched/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("Next"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<3> _args;
  _args[1] = cElt /*[VT_UI4:0]*/;
  _args[2] = rgvar /*[VT_VARIANT:1]*/;
  _args[3] = pcEltFetched /*[VT_UI4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXRangeEnumDispT<T>::Skip(unsigned_long cElt/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Skip"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<1> _args;
  _args[1] = cElt /*[VT_UI4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXRangeEnumDispT<T>::Reset()
{
  _TDispID _dispid(*this, OLETEXT("Reset"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXRangeEnumDispT<T>::Clone(Owc10_xp::IXRangeEnum** ppEnum/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("Clone"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH*)(Owc10_xp::IXRangeEnum**)ppEnum /*[VT_USERDEFINED:2]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXRangeEnumDispT<T>::SetTraversal(unsigned nTraverseCode)
{
  _TDispID _dispid(*this, OLETEXT("SetTraversal"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<1> _args;
  _args[1] = nTraverseCode /*[VT_UINT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXRangeEnumDispT<T>::ChangeType(VARIANT* Out/*[out]*/, VARIANT* In/*[in]*/, 
                                unsigned_short vt/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChangeType"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<3> _args;
  _args[1] = Out /*[VT_VARIANT:1]*/;
  _args[2] = In /*[VT_VARIANT:1]*/;
  _args[3] = vt /*[VT_UI2:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXRangeEnumDispT<T>::GetElements(unsigned_long cElt/*[in]*/, unsigned_long iStart/*[in]*/, 
                                 VARIANT* rvarDest/*[in]*/, unsigned_long* pcFetched/*[out]*/, 
                                 unsigned_short vtCoerceTo/*[in]*/, 
                                 unsigned_long vtbCoerceFrom/*[in]*/, VARIANT* Fill/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetElements"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<7> _args;
  _args[1] = cElt /*[VT_UI4:0]*/;
  _args[2] = iStart /*[VT_UI4:0]*/;
  _args[3] = rvarDest /*[VT_VARIANT:1]*/;
  _args[4] = pcFetched /*[VT_UI4:1]*/;
  _args[5] = vtCoerceTo /*[VT_UI2:0]*/;
  _args[6] = vtbCoerceFrom /*[VT_UI4:0]*/;
  _args[7] = Fill /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXRangeEnumDispT<T>::get_RowCount(unsigned* NumberOfRows/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RowCount"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(NumberOfRows /*[VT_UINT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned __fastcall
IXRangeEnumDispT<T>::get_RowCount(void)
{
  unsigned NumberOfRows;
  this->get_RowCount((unsigned*)&NumberOfRows);
  return NumberOfRows;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IXRangeEnumDispT<T>::get_ColCount(unsigned* NumberOfColumns/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColCount"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(NumberOfColumns /*[VT_UINT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned __fastcall
IXRangeEnumDispT<T>::get_ColCount(void)
{
  unsigned NumberOfColumns;
  this->get_ColCount((unsigned*)&NumberOfColumns);
  return NumberOfColumns;
}

// *********************************************************************//
// DispIntf:  IAddinClient
// Flags:     (320) Dual OleAutomation
// GUID:      {198924BD-4102-4CB0-B7E8-DBF8BE7EB5A1}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IAddinClientDispT<T>::GrantAddinHost(VARIANT* vardisp/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GrantAddinHost"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = vardisp /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IAddinClientDispT<T>::RemoveAddinHost()
{
  _TDispID _dispid(*this, OLETEXT("RemoveAddinHost"), DISPID(2));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IAddinClientDispT<T>::IsSemiCalced(long dispid_/*[in]*/, VARIANT_BOOL* SemiCalced/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsSemiCalced"), DISPID(3));
  TAutoArgs<2> _args;
  _args[1] = dispid_ /*[VT_I4:0]*/;
  _args[2] = SemiCalced /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IPivotControlEvents
// Flags:     (4096) Dispatchable
// GUID:      {F5B39A87-1480-11D3-8549-00C04FAC67D7}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
IPivotControlEventsDispT<T>::SelectionChange()
{
  _TDispID _dispid(/* SelectionChange */ DISPID(6003));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IPivotControlEventsDispT<T>::ViewChange(Owc10_xp::PivotViewReasonEnum Reason)
{
  _TDispID _dispid(/* ViewChange */ DISPID(6004));
  TAutoArgs<1> _args;
  _args[1] = (int)Reason /*[VT_USERDEFINED:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IPivotControlEventsDispT<T>::DataChange(Owc10_xp::PivotDataReasonEnum Reason)
{
  _TDispID _dispid(/* DataChange */ DISPID(6007));
  TAutoArgs<1> _args;
  _args[1] = (int)Reason /*[VT_USERDEFINED:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IPivotControlEventsDispT<T>::PivotTableChange(Owc10_xp::PivotTableReasonEnum Reason)
{
  _TDispID _dispid(/* PivotTableChange */ DISPID(6021));
  TAutoArgs<1> _args;
  _args[1] = (int)Reason /*[VT_USERDEFINED:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IPivotControlEventsDispT<T>::BeforeQuery()
{
  _TDispID _dispid(/* BeforeQuery */ DISPID(6043));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IPivotControlEventsDispT<T>::Query()
{
  _TDispID _dispid(/* Query */ DISPID(6044));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IPivotControlEventsDispT<T>::OnConnect()
{
  _TDispID _dispid(/* OnConnect */ DISPID(6029));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IPivotControlEventsDispT<T>::OnDisconnect()
{
  _TDispID _dispid(/* OnDisconnect */ DISPID(6030));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IPivotControlEventsDispT<T>::MouseDown(long Button/*[in]*/, long Shift/*[in]*/, long x/*[in]*/, 
                                       long y/*[in]*/)
{
  _TDispID _dispid(/* MouseDown */ DISPID(6034));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I4:0]*/;
  _args[2] = Shift /*[VT_I4:0]*/;
  _args[3] = x /*[VT_I4:0]*/;
  _args[4] = y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IPivotControlEventsDispT<T>::MouseMove(long Button/*[in]*/, long Shift/*[in]*/, long x/*[in]*/, 
                                       long y/*[in]*/)
{
  _TDispID _dispid(/* MouseMove */ DISPID(6032));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I4:0]*/;
  _args[2] = Shift /*[VT_I4:0]*/;
  _args[3] = x /*[VT_I4:0]*/;
  _args[4] = y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IPivotControlEventsDispT<T>::MouseUp(long Button/*[in]*/, long Shift/*[in]*/, long x/*[in]*/, 
                                     long y/*[in]*/)
{
  _TDispID _dispid(/* MouseUp */ DISPID(6033));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I4:0]*/;
  _args[2] = Shift /*[VT_I4:0]*/;
  _args[3] = x /*[VT_I4:0]*/;
  _args[4] = y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IPivotControlEventsDispT<T>::MouseWheel(VARIANT_BOOL Page/*[in]*/, long Count/*[in]*/)
{
  _TDispID _dispid(/* MouseWheel */ DISPID(6035));
  TAutoArgs<2> _args;
  _args[1] = Page /*[VT_BOOL:0]*/;
  _args[2] = Count /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IPivotControlEventsDispT<T>::Click()
{
  _TDispID _dispid(/* Click */ DISPID(6005));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IPivotControlEventsDispT<T>::DblClick()
{
  _TDispID _dispid(/* DblClick */ DISPID(6006));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IPivotControlEventsDispT<T>::CommandEnabled(VARIANT Command, Owc10_xp::ByRef* Enabled)
{
  _TDispID _dispid(/* CommandEnabled */ DISPID(1000));
  TAutoArgs<2> _args;
  _args[1] = Command /*[VT_VARIANT:0]*/;
  _args[2] = (LPDISPATCH)(Owc10_xp::ByRef*)Enabled /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IPivotControlEventsDispT<T>::CommandChecked(VARIANT Command, Owc10_xp::ByRef* Checked)
{
  _TDispID _dispid(/* CommandChecked */ DISPID(1001));
  TAutoArgs<2> _args;
  _args[1] = Command /*[VT_VARIANT:0]*/;
  _args[2] = (LPDISPATCH)(Owc10_xp::ByRef*)Checked /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IPivotControlEventsDispT<T>::CommandTipText(VARIANT Command, Owc10_xp::ByRef* Caption)
{
  _TDispID _dispid(/* CommandTipText */ DISPID(1002));
  TAutoArgs<2> _args;
  _args[1] = Command /*[VT_VARIANT:0]*/;
  _args[2] = (LPDISPATCH)(Owc10_xp::ByRef*)Caption /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IPivotControlEventsDispT<T>::CommandBeforeExecute(VARIANT Command, Owc10_xp::ByRef* Cancel)
{
  _TDispID _dispid(/* CommandBeforeExecute */ DISPID(1003));
  TAutoArgs<2> _args;
  _args[1] = Command /*[VT_VARIANT:0]*/;
  _args[2] = (LPDISPATCH)(Owc10_xp::ByRef*)Cancel /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IPivotControlEventsDispT<T>::CommandExecute(VARIANT Command, VARIANT_BOOL Succeeded)
{
  _TDispID _dispid(/* CommandExecute */ DISPID(1004));
  TAutoArgs<2> _args;
  _args[1] = Command /*[VT_VARIANT:0]*/;
  _args[2] = Succeeded /*[VT_BOOL:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IPivotControlEventsDispT<T>::KeyDown(long KeyCode, long Shift)
{
  _TDispID _dispid(/* KeyDown */ DISPID(1009));
  TAutoArgs<2> _args;
  _args[1] = KeyCode /*[VT_I4:0]*/;
  _args[2] = Shift /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IPivotControlEventsDispT<T>::KeyUp(long KeyCode, long Shift)
{
  _TDispID _dispid(/* KeyUp */ DISPID(1008));
  TAutoArgs<2> _args;
  _args[1] = KeyCode /*[VT_I4:0]*/;
  _args[2] = Shift /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IPivotControlEventsDispT<T>::KeyPress(long KeyAscii)
{
  _TDispID _dispid(/* KeyPress */ DISPID(1010));
  TAutoArgs<1> _args;
  _args[1] = KeyAscii /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IPivotControlEventsDispT<T>::BeforeKeyDown(long KeyCode, long Shift, Owc10_xp::ByRef* Cancel)
{
  _TDispID _dispid(/* BeforeKeyDown */ DISPID(1006));
  TAutoArgs<3> _args;
  _args[1] = KeyCode /*[VT_I4:0]*/;
  _args[2] = Shift /*[VT_I4:0]*/;
  _args[3] = (LPDISPATCH)(Owc10_xp::ByRef*)Cancel /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IPivotControlEventsDispT<T>::BeforeKeyUp(long KeyCode, long Shift, Owc10_xp::ByRef* Cancel)
{
  _TDispID _dispid(/* BeforeKeyUp */ DISPID(1005));
  TAutoArgs<3> _args;
  _args[1] = KeyCode /*[VT_I4:0]*/;
  _args[2] = Shift /*[VT_I4:0]*/;
  _args[3] = (LPDISPATCH)(Owc10_xp::ByRef*)Cancel /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IPivotControlEventsDispT<T>::BeforeKeyPress(long KeyAscii, Owc10_xp::ByRef* Cancel)
{
  _TDispID _dispid(/* BeforeKeyPress */ DISPID(1007));
  TAutoArgs<2> _args;
  _args[1] = KeyAscii /*[VT_I4:0]*/;
  _args[2] = (LPDISPATCH)(Owc10_xp::ByRef*)Cancel /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IPivotControlEventsDispT<T>::BeforeContextMenu(long x, long y, Owc10_xp::ByRef* Menu, 
                                               Owc10_xp::ByRef* Cancel)
{
  _TDispID _dispid(/* BeforeContextMenu */ DISPID(1011));
  TAutoArgs<4> _args;
  _args[1] = x /*[VT_I4:0]*/;
  _args[2] = y /*[VT_I4:0]*/;
  _args[3] = (LPDISPATCH)(Owc10_xp::ByRef*)Menu /*[VT_USERDEFINED:1]*/;
  _args[4] = (LPDISPATCH)(Owc10_xp::ByRef*)Cancel /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IPivotControlEventsDispT<T>::StartEdit(LPDISPATCH Selection, LPDISPATCH ActiveObject, 
                                       Owc10_xp::ByRef* InitialValue, Owc10_xp::ByRef* ArrowMode, 
                                       Owc10_xp::ByRef* CaretPosition, Owc10_xp::ByRef* Cancel, 
                                       Owc10_xp::ByRef* ErrorDescription)
{
  _TDispID _dispid(/* StartEdit */ DISPID(6045));
  TAutoArgs<7> _args;
  _args[1] = Selection /*[VT_DISPATCH:0]*/;
  _args[2] = ActiveObject /*[VT_DISPATCH:0]*/;
  _args[3] = (LPDISPATCH)(Owc10_xp::ByRef*)InitialValue /*[VT_USERDEFINED:1]*/;
  _args[4] = (LPDISPATCH)(Owc10_xp::ByRef*)ArrowMode /*[VT_USERDEFINED:1]*/;
  _args[5] = (LPDISPATCH)(Owc10_xp::ByRef*)CaretPosition /*[VT_USERDEFINED:1]*/;
  _args[6] = (LPDISPATCH)(Owc10_xp::ByRef*)Cancel /*[VT_USERDEFINED:1]*/;
  _args[7] = (LPDISPATCH)(Owc10_xp::ByRef*)ErrorDescription /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IPivotControlEventsDispT<T>::EndEdit(VARIANT_BOOL Accept, Owc10_xp::ByRef* FinalValue, 
                                     Owc10_xp::ByRef* Cancel, Owc10_xp::ByRef* ErrorDescription)
{
  _TDispID _dispid(/* EndEdit */ DISPID(6046));
  TAutoArgs<4> _args;
  _args[1] = Accept /*[VT_BOOL:0]*/;
  _args[2] = (LPDISPATCH)(Owc10_xp::ByRef*)FinalValue /*[VT_USERDEFINED:1]*/;
  _args[3] = (LPDISPATCH)(Owc10_xp::ByRef*)Cancel /*[VT_USERDEFINED:1]*/;
  _args[4] = (LPDISPATCH)(Owc10_xp::ByRef*)ErrorDescription /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IPivotControlEventsDispT<T>::BeforeScreenTip(Owc10_xp::ByRef* ScreenTipText, LPDISPATCH SourceObject)
{
  _TDispID _dispid(/* BeforeScreenTip */ DISPID(6049));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Owc10_xp::ByRef*)ScreenTipText /*[VT_USERDEFINED:1]*/;
  _args[2] = SourceObject /*[VT_DISPATCH:0]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  TextFormat
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {58573A81-5025-11D3-BE84-0050041DB15A}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFormatDispT<T>::get_ForeColor(VARIANT* ForeColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(DISPID_UNKNOWN/*[1610678272]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ForeColor /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
TextFormatDispT<T>::get_ForeColor(void)
{
  VARIANT ForeColor;
  this->get_ForeColor((VARIANT*)&ForeColor);
  return ForeColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFormatDispT<T>::set_ForeColor(VARIANT ForeColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(1610678272));
  TAutoArgs<1> _args;
  _args[1] = ForeColor /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFormatDispT<T>::get_BackColor(VARIANT* BackColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(DISPID_UNKNOWN/*[1610678274]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BackColor /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
TextFormatDispT<T>::get_BackColor(void)
{
  VARIANT BackColor;
  this->get_BackColor((VARIANT*)&BackColor);
  return BackColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFormatDispT<T>::set_BackColor(VARIANT BackColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(1610678274));
  TAutoArgs<1> _args;
  _args[1] = BackColor /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFormatDispT<T>::get_HorizontalAlignment(Owc10_xp::PivotHAlignmentEnum* HorizontalAlignment/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HorizontalAlignment"), DISPID(DISPID_UNKNOWN/*[1610678276]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)HorizontalAlignment /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotHAlignmentEnum __fastcall
TextFormatDispT<T>::get_HorizontalAlignment(void)
{
  Owc10_xp::PivotHAlignmentEnum HorizontalAlignment;
  this->get_HorizontalAlignment((Owc10_xp::PivotHAlignmentEnum*)&HorizontalAlignment);
  return HorizontalAlignment;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFormatDispT<T>::set_HorizontalAlignment(Owc10_xp::PivotHAlignmentEnum HorizontalAlignment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HorizontalAlignment"), DISPID(1610678276));
  TAutoArgs<1> _args;
  _args[1] = (int)HorizontalAlignment /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFormatDispT<T>::get_NumberFormat(BSTR* NumberFormat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumberFormat"), DISPID(DISPID_UNKNOWN/*[1610678278]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(NumberFormat /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
TextFormatDispT<T>::get_NumberFormat(void)
{
  BSTR NumberFormat;
  this->get_NumberFormat((BSTR*)&NumberFormat);
  return NumberFormat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFormatDispT<T>::set_NumberFormat(BSTR NumberFormat/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumberFormat"), DISPID(1610678278));
  TAutoArgs<1> _args;
  _args[1] = NumberFormat /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFormatDispT<T>::get_Font(Owc10_xp::PivotFont** PivotFont/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(DISPID_UNKNOWN/*[1610678280]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Owc10_xp::PivotFont**)PivotFont /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Owc10_xp::PivotFont* __fastcall
TextFormatDispT<T>::get_Font(void)
{
  Owc10_xp::PivotFont* PivotFont;
  this->get_Font((Owc10_xp::PivotFont**)&PivotFont);
  return PivotFont;
}

// *********************************************************************//
// DispIntf:  ViewSurface
// Flags:     (464) Hidden Dual NonExtensible OleAutomation
// GUID:      {EE658610-D8B3-11D2-8F30-00600893B533}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ViewSurfaceDispT<T>::get_hDC(long* hDC/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hDC"), DISPID(DISPID_UNKNOWN/*[1610678272]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(hDC /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ViewSurfaceDispT<T>::get_hDC(void)
{
  long hDC;
  this->get_hDC((long*)&hDC);
  return hDC;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ViewSurfaceDispT<T>::get_hDCInfo(long* hDCInfo/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hDCInfo"), DISPID(DISPID_UNKNOWN/*[1610678273]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(hDCInfo /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ViewSurfaceDispT<T>::get_hDCInfo(void)
{
  long hDCInfo;
  this->get_hDCInfo((long*)&hDCInfo);
  return hDCInfo;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ViewSurfaceDispT<T>::Rectangle(long cx1/*[in]*/, long cy1/*[in]*/, long cx2/*[in]*/, 
                               long cy2/*[in]*/, long Left/*[in]*/, long Top/*[in]*/, 
                               long Width/*[in]*/, long Height/*[in]*/, unsigned_long Color/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Rectangle"), DISPID(DISPID_UNKNOWN/*[1610678274]*/));
  TAutoArgs<9> _args;
  _args[1] = cx1 /*[VT_I4:0]*/;
  _args[2] = cy1 /*[VT_I4:0]*/;
  _args[3] = cx2 /*[VT_I4:0]*/;
  _args[4] = cy2 /*[VT_I4:0]*/;
  _args[5] = Left /*[VT_I4:0]*/;
  _args[6] = Top /*[VT_I4:0]*/;
  _args[7] = Width /*[VT_I4:0]*/;
  _args[8] = Height /*[VT_I4:0]*/;
  _args[9] = Color /*[VT_UI4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ViewSurfaceDispT<T>::Line(long cx1/*[in]*/, long cy1/*[in]*/, long cx2/*[in]*/, long cy2/*[in]*/, 
                          long x1/*[in]*/, long y1/*[in]*/, long x2/*[in]*/, long y2/*[in]*/, 
                          unsigned_long Color/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Line"), DISPID(DISPID_UNKNOWN/*[1610678275]*/));
  TAutoArgs<9> _args;
  _args[1] = cx1 /*[VT_I4:0]*/;
  _args[2] = cy1 /*[VT_I4:0]*/;
  _args[3] = cx2 /*[VT_I4:0]*/;
  _args[4] = cy2 /*[VT_I4:0]*/;
  _args[5] = x1 /*[VT_I4:0]*/;
  _args[6] = y1 /*[VT_I4:0]*/;
  _args[7] = x2 /*[VT_I4:0]*/;
  _args[8] = y2 /*[VT_I4:0]*/;
  _args[9] = Color /*[VT_UI4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ViewSurfaceDispT<T>::get_AlphaBlend(unsigned_long Color/*[in]*/, 
                                    unsigned_long* AlphaBlend/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AlphaBlend"), DISPID(DISPID_UNKNOWN/*[1610678276]*/));
  TAutoArgs<1> _args;
  _args[1] = Color /*[VT_UI4:0]*/;
  return OutRetValSetterPtr(AlphaBlend /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
ViewSurfaceDispT<T>::get_AlphaBlend(unsigned_long Color/*[in]*/)
{
  unsigned_long AlphaBlend;
  this->get_AlphaBlend(Color, (unsigned_long*)&AlphaBlend);
  return AlphaBlend;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ViewSurfaceDispT<T>::Text(long cx1/*[in]*/, long cy1/*[in]*/, long cx2/*[in]*/, long cy2/*[in]*/, 
                          long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                          long Height/*[in]*/, Owc10_xp::TextFormat* TextFormat/*[in]*/, 
                          VARIANT Text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(DISPID_UNKNOWN/*[1610678277]*/));
  TAutoArgs<10> _args;
  _args[1] = cx1 /*[VT_I4:0]*/;
  _args[2] = cy1 /*[VT_I4:0]*/;
  _args[3] = cx2 /*[VT_I4:0]*/;
  _args[4] = cy2 /*[VT_I4:0]*/;
  _args[5] = Left /*[VT_I4:0]*/;
  _args[6] = Top /*[VT_I4:0]*/;
  _args[7] = Width /*[VT_I4:0]*/;
  _args[8] = Height /*[VT_I4:0]*/;
  _args[9] = (LPUNKNOWN)(Owc10_xp::TextFormat*)TextFormat /*[VT_USERDEFINED:1]*/;
  _args[10] = Text /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ViewSurfaceDispT<T>::get_TextHeight(Owc10_xp::TextFormat* TextFormat/*[in]*/, VARIANT Text/*[in]*/, 
                                    long* TextHeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextHeight"), DISPID(DISPID_UNKNOWN/*[1610678278]*/));
  TAutoArgs<2> _args;
  _args[1] = (LPUNKNOWN)(Owc10_xp::TextFormat*)TextFormat /*[VT_USERDEFINED:1]*/;
  _args[2] = Text /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(TextHeight /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ViewSurfaceDispT<T>::get_TextHeight(Owc10_xp::TextFormat* TextFormat/*[in]*/, VARIANT Text/*[in]*/)
{
  long TextHeight;
  this->get_TextHeight(TextFormat, Text, (long*)&TextHeight);
  return TextHeight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ViewSurfaceDispT<T>::get_TextWidth(Owc10_xp::TextFormat* TextFormat/*[in]*/, VARIANT Text/*[in]*/, 
                                   long* TextWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextWidth"), DISPID(DISPID_UNKNOWN/*[1610678279]*/));
  TAutoArgs<2> _args;
  _args[1] = (LPUNKNOWN)(Owc10_xp::TextFormat*)TextFormat /*[VT_USERDEFINED:1]*/;
  _args[2] = Text /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(TextWidth /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ViewSurfaceDispT<T>::get_TextWidth(Owc10_xp::TextFormat* TextFormat/*[in]*/, VARIANT Text/*[in]*/)
{
  long TextWidth;
  this->get_TextWidth(TextFormat, Text, (long*)&TextWidth);
  return TextWidth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ViewSurfaceDispT<T>::Picture(long cx1/*[in]*/, long cy1/*[in]*/, long cx2/*[in]*/, long cy2/*[in]*/
                             , long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                             long Height/*[in]*/, IPictureDisp* Picture/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(DISPID_UNKNOWN/*[1610678280]*/));
  TAutoArgs<9> _args;
  _args[1] = cx1 /*[VT_I4:0]*/;
  _args[2] = cy1 /*[VT_I4:0]*/;
  _args[3] = cx2 /*[VT_I4:0]*/;
  _args[4] = cy2 /*[VT_I4:0]*/;
  _args[5] = Left /*[VT_I4:0]*/;
  _args[6] = Top /*[VT_I4:0]*/;
  _args[7] = Width /*[VT_I4:0]*/;
  _args[8] = Height /*[VT_I4:0]*/;
  _args[9] = (LPDISPATCH)(IPictureDisp*)Picture /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ViewSurfaceDispT<T>::PictureMasked(long cx1/*[in]*/, long cy1/*[in]*/, long cx2/*[in]*/, 
                                   long cy2/*[in]*/, long Left/*[in]*/, long Top/*[in]*/, 
                                   long Width/*[in]*/, long Height/*[in]*/, 
                                   IPictureDisp* Picture/*[in]*/, IPictureDisp* Mask/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureMasked"), DISPID(DISPID_UNKNOWN/*[1610678281]*/));
  TAutoArgs<10> _args;
  _args[1] = cx1 /*[VT_I4:0]*/;
  _args[2] = cy1 /*[VT_I4:0]*/;
  _args[3] = cx2 /*[VT_I4:0]*/;
  _args[4] = cy2 /*[VT_I4:0]*/;
  _args[5] = Left /*[VT_I4:0]*/;
  _args[6] = Top /*[VT_I4:0]*/;
  _args[7] = Width /*[VT_I4:0]*/;
  _args[8] = Height /*[VT_I4:0]*/;
  _args[9] = (LPDISPATCH)(IPictureDisp*)Picture /*[VT_USERDEFINED:1]*/;
  _args[10] = (LPDISPATCH)(IPictureDisp*)Mask /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ViewSurfaceDispT<T>::get_PictureAlphaBlended(IPictureDisp* Picture/*[in]*/, 
                                             IPictureDisp* Mask/*[in]*/, 
                                             IPictureDisp** Blended/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureAlphaBlended"), DISPID(DISPID_UNKNOWN/*[1610678282]*/));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp*)Picture /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(IPictureDisp*)Mask /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(IPictureDisp**)Blended /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IPictureDisp* __fastcall
ViewSurfaceDispT<T>::get_PictureAlphaBlended(IPictureDisp* Picture/*[in]*/, 
                                             IPictureDisp* Mask/*[in]*/)
{
  IPictureDisp* Blended;
  this->get_PictureAlphaBlended(Picture, Mask, (IPictureDisp**)&Blended);
  return Blended;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ViewSurfaceDispT<T>::get_ScaleX(long x/*[in]*/, long* ScaleX/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScaleX"), DISPID(DISPID_UNKNOWN/*[1610678283]*/));
  TAutoArgs<1> _args;
  _args[1] = x /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ScaleX /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ViewSurfaceDispT<T>::get_ScaleX(long x/*[in]*/)
{
  long ScaleX;
  this->get_ScaleX(x, (long*)&ScaleX);
  return ScaleX;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ViewSurfaceDispT<T>::get_ScaleY(long y/*[in]*/, long* ScaleY/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScaleY"), DISPID(DISPID_UNKNOWN/*[1610678284]*/));
  TAutoArgs<1> _args;
  _args[1] = y /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ScaleY /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ViewSurfaceDispT<T>::get_ScaleY(long y/*[in]*/)
{
  long ScaleY;
  this->get_ScaleY(y, (long*)&ScaleY);
  return ScaleY;
}

// *********************************************************************//
// DispIntf:  ViewObject
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8C950530-C84C-11D2-8F2D-00600893B533}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ViewObjectDispT<T>::Draw(Owc10_xp::ViewSurface* Surface/*[in]*/, long cx1/*[in]*/, long cy1/*[in]*/
                         , long cx2/*[in]*/, long cy2/*[in]*/, long Left/*[in]*/, long Top/*[in]*/, 
                         long Width/*[in]*/, long Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Draw"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<9> _args;
  _args[1] = (LPUNKNOWN)(Owc10_xp::ViewSurface*)Surface /*[VT_USERDEFINED:1]*/;
  _args[2] = cx1 /*[VT_I4:0]*/;
  _args[3] = cy1 /*[VT_I4:0]*/;
  _args[4] = cx2 /*[VT_I4:0]*/;
  _args[5] = cy2 /*[VT_I4:0]*/;
  _args[6] = Left /*[VT_I4:0]*/;
  _args[7] = Top /*[VT_I4:0]*/;
  _args[8] = Width /*[VT_I4:0]*/;
  _args[9] = Height /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ViewObjectDispT<T>::get_Query(long x/*[in]*/, long y/*[in]*/, LPDISPATCH* Object/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Query"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<2> _args;
  _args[1] = x /*[VT_I4:0]*/;
  _args[2] = y /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Object /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ViewObjectDispT<T>::get_Query(long x/*[in]*/, long y/*[in]*/)
{
  LPDISPATCH Object;
  this->get_Query(x, y, (LPDISPATCH*)&Object);
  return Object;
}

// *********************************************************************//
// DispIntf:  MouseTarget
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8F8E5640-CDB0-11D2-8F2E-00600893B533}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
MouseTargetDispT<T>::MouseEnter(long x/*[in]*/, long y/*[in]*/, long* Cursor/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseEnter"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<3> _args;
  _args[1] = x /*[VT_I4:0]*/;
  _args[2] = y /*[VT_I4:0]*/;
  _args[3] = Cursor /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
MouseTargetDispT<T>::MouseOver(long x/*[in]*/, long y/*[in]*/, long* Cursor/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseOver"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<3> _args;
  _args[1] = x /*[VT_I4:0]*/;
  _args[2] = y /*[VT_I4:0]*/;
  _args[3] = Cursor /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
MouseTargetDispT<T>::MouseLeave()
{
  _TDispID _dispid(*this, OLETEXT("MouseLeave"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
MouseTargetDispT<T>::MouseDown(long x/*[in]*/, long y/*[in]*/, long Button/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseDown"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<3> _args;
  _args[1] = x /*[VT_I4:0]*/;
  _args[2] = y /*[VT_I4:0]*/;
  _args[3] = Button /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
MouseTargetDispT<T>::MouseUp(long x/*[in]*/, long y/*[in]*/, long Button/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseUp"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<3> _args;
  _args[1] = x /*[VT_I4:0]*/;
  _args[2] = y /*[VT_I4:0]*/;
  _args[3] = Button /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
MouseTargetDispT<T>::MouseClick(long x/*[in]*/, long y/*[in]*/, long Button/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseClick"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<3> _args;
  _args[1] = x /*[VT_I4:0]*/;
  _args[2] = y /*[VT_I4:0]*/;
  _args[3] = Button /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
MouseTargetDispT<T>::MouseDblClick(long x/*[in]*/, long y/*[in]*/, long Button/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseDblClick"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<3> _args;
  _args[1] = x /*[VT_I4:0]*/;
  _args[2] = y /*[VT_I4:0]*/;
  _args[3] = Button /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
MouseTargetDispT<T>::MouseWheel(VARIANT_BOOL Page/*[in]*/, long Count/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseWheel"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<2> _args;
  _args[1] = Page /*[VT_BOOL:0]*/;
  _args[2] = Count /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  SelectionHighlight
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {58573A80-5025-11D3-BE84-0050041DB15A}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SelectionHighlightDispT<T>::Highlight(Owc10_xp::ViewSurface* ViewSurface)
{
  _TDispID _dispid(*this, OLETEXT("Highlight"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPUNKNOWN)(Owc10_xp::ViewSurface*)ViewSurface /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ActiveObject
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A809B678-545A-11D3-BE86-0050041DB15A}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ActiveObjectDispT<T>::get_ActiveObject_(LPDISPATCH* ActiveObject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveObject"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ActiveObject /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ActiveObjectDispT<T>::get_ActiveObject_(void)
{
  LPDISPATCH ActiveObject;
  this->get_ActiveObject_((LPDISPATCH*)&ActiveObject);
  return ActiveObject;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ActiveObjectDispT<T>::set_ActiveObject_(LPDISPATCH ActiveObject/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveObject"), DISPID(1610743808));
  TAutoArgs<1> _args;
  _args[1] = ActiveObject /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  PopupMenu
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {04B21422-1F84-4DD3-8CD6-1C6ECC68E521}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PopupMenuDispT<T>::get_hMenu(long* hMenu/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hMenu"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(hMenu /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PopupMenuDispT<T>::get_hMenu(void)
{
  long hMenu;
  this->get_hMenu((long*)&hMenu);
  return hMenu;
}

// *********************************************************************//
// DispIntf:  AutoFitObject
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {99049AFE-271D-4568-95D8-3BC879AA73E3}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AutoFitObjectDispT<T>::AutoFit()
{
  _TDispID _dispid(*this, OLETEXT("AutoFit"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AutoFitObjectDispT<T>::get_BestWidth(long* BestWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BestWidth"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BestWidth /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
AutoFitObjectDispT<T>::get_BestWidth(void)
{
  long BestWidth;
  this->get_BestWidth((long*)&BestWidth);
  return BestWidth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AutoFitObjectDispT<T>::get_BestHeight(long* BestHeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BestHeight"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BestHeight /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
AutoFitObjectDispT<T>::get_BestHeight(void)
{
  long BestHeight;
  this->get_BestHeight((long*)&BestHeight);
  return BestHeight;
}

// *********************************************************************//
// DispIntf:  Moniker
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {5055F752-6848-4CEA-9BAB-265EC4B5380A}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
MonikerDispT<T>::get_Moniker_(LPDISPATCH RelativeTo/*[in,def,opt]*/, BSTR* Moniker/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Moniker"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<1> _args;
  _args[1] = RelativeTo /*[VT_DISPATCH:0]*/;
  return OutRetValSetterPtr(Moniker /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
MonikerDispT<T>::get_Moniker_(LPDISPATCH RelativeTo/*[in,def,opt]*/)
{
  BSTR Moniker;
  this->get_Moniker_(RelativeTo, (BSTR*)&Moniker);
  return Moniker;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
MonikerDispT<T>::get_Parse(BSTR Moniker/*[in]*/, LPDISPATCH* Object/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parse"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<1> _args;
  _args[1] = Moniker /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(Object /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
MonikerDispT<T>::get_Parse(BSTR Moniker/*[in]*/)
{
  LPDISPATCH Object;
  this->get_Parse(Moniker, (LPDISPATCH*)&Object);
  return Object;
}

// *********************************************************************//
// DispIntf:  InplaceObject
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {EDAC92DC-84DB-4CD1-AE98-EB436F4D99EB}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
InplaceObjectDispT<T>::Activate(long Hwnd)
{
  _TDispID _dispid(*this, OLETEXT("Activate"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<1> _args;
  _args[1] = Hwnd /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
InplaceObjectDispT<T>::Deactivate()
{
  _TDispID _dispid(*this, OLETEXT("Deactivate"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  PropertyNotify
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {7BB4EDA1-862A-4AB2-92F2-557E1BAB3408}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertyNotifyDispT<T>::OnPropertyChange(LPDISPATCH Object, long dispid_)
{
  _TDispID _dispid(*this, OLETEXT("OnPropertyChange"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<2> _args;
  _args[1] = Object /*[VT_DISPATCH:0]*/;
  _args[2] = dispid_ /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  MutualExpando
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F9328F0C-1862-4BD5-81D8-2052A7EC80FA}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
MutualExpandoDispT<T>::Expand()
{
  _TDispID _dispid(*this, OLETEXT("Expand"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
MutualExpandoDispT<T>::Collapse()
{
  _TDispID _dispid(*this, OLETEXT("Collapse"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
MutualExpandoDispT<T>::get_Left(long* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
MutualExpandoDispT<T>::get_Left(void)
{
  long Left;
  this->get_Left((long*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
MutualExpandoDispT<T>::get_Top(long* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
MutualExpandoDispT<T>::get_Top(void)
{
  long Top;
  this->get_Top((long*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
MutualExpandoDispT<T>::get_Width(long* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
MutualExpandoDispT<T>::get_Width(void)
{
  long Width;
  this->get_Width((long*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
MutualExpandoDispT<T>::get_Height(long* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
MutualExpandoDispT<T>::get_Height(void)
{
  long Height;
  this->get_Height((long*)&Height);
  return Height;
}

// *********************************************************************//
// DispIntf:  EditableObject
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {EB3286D3-226C-48F0-8049-2DB1E01DEE9C}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EditableObjectDispT<T>::StartEdit(VARIANT InitialValue/*[in]*/, VARIANT_BOOL ArrowMode/*[in]*/, 
                                  long CaretPosition/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartEdit"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<3> _args;
  _args[1] = InitialValue /*[VT_VARIANT:0]*/;
  _args[2] = ArrowMode /*[VT_BOOL:0]*/;
  _args[3] = CaretPosition /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EditableObjectDispT<T>::get_Value(VARIANT* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
EditableObjectDispT<T>::get_Value(void)
{
  VARIANT Value;
  this->get_Value((VARIANT*)&Value);
  return Value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EditableObjectDispT<T>::set_Value(VARIANT Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(1610743809));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EditableObjectDispT<T>::EndEdit(VARIANT_BOOL Accept/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndEdit"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<1> _args;
  _args[1] = Accept /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  TipProvider
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8966D336-AACA-4ADB-9315-F3A541B16917}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TipProviderDispT<T>::get_TipText(BSTR* TipText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TipText"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(TipText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
TipProviderDispT<T>::get_TipText(void)
{
  BSTR TipText;
  this->get_TipText((BSTR*)&TipText);
  return TipText;
}

// *********************************************************************//
// DispIntf:  IPivotCopy
// Flags:     (464) Hidden Dual NonExtensible OleAutomation
// GUID:      {CD44E547-FEC9-4ADC-AB6A-3129B44801BA}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPivotCopyDispT<T>::Render(long Format/*[in]*/, BSTR* Output/*[in,out,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Render"), DISPID(DISPID_UNKNOWN/*[1610678272]*/));
  TAutoArgs<2> _args;
  _args[1] = Format /*[VT_I4:0]*/;
  _args[2] = Output /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : NumberFormat
// Interface: TCOM_NumberFormat
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_NumberFormat, _NumberFormat, &CLSID_NumberFormat, &IID__NumberFormat> CoNumberFormat;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : FieldListControl
// Interface: TCOMFieldList
// *********************************************************************//
typedef TCoClassCreatorT<TCOMFieldList, FieldList, &CLSID_FieldListControl, &IID_FieldList> CoFieldListControl;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Range
// Interface: TCOM_Range
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_Range, _Range, &CLSID_Range, &IID__Range> CoRange;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_ATLVCL)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : ChartSpace
// Event Interface : IChartEvents
// *********************************************************************//
template <class T>
class TEvents_ChartSpace : public IConnectionPointImpl<T,
                                                 &DIID_IChartEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_DataSetChange(void);
  void            Fire_DblClick(void);
  void            Fire_Click(void);
  void            Fire_KeyDown(long KeyCode, long Shift);
  void            Fire_KeyUp(long KeyCode, long Shift);
  void            Fire_KeyPress(long KeyAscii);
  void            Fire_BeforeKeyDown(long KeyCode, long Shift, Owc10_xp::ByRef* Cancel);
  void            Fire_BeforeKeyUp(long KeyCode, long Shift, Owc10_xp::ByRef* Cancel);
  void            Fire_BeforeKeyPress(long KeyAscii, Owc10_xp::ByRef* Cancel);
  void            Fire_MouseDown(long Button, long Shift, long x, long y);
  void            Fire_MouseMove(long Button, long Shift, long x, long y);
  void            Fire_MouseUp(long Button, long Shift, long x, long y);
  void            Fire_MouseWheel(VARIANT_BOOL Page, long Count);
  void            Fire_SelectionChange(void);
  void            Fire_BeforeScreenTip(Owc10_xp::ByRef* TipText, LPDISPATCH ContextObject);
  void            Fire_CommandEnabled(VARIANT Command, Owc10_xp::ByRef* Enabled);
  void            Fire_CommandChecked(VARIANT Command, Owc10_xp::ByRef* Checked);
  void            Fire_CommandTipText(VARIANT Command, Owc10_xp::ByRef* Caption);
  void            Fire_CommandBeforeExecute(VARIANT Command, Owc10_xp::ByRef* Cancel);
  void            Fire_CommandExecute(VARIANT Command, VARIANT_BOOL Succeeded);
  void            Fire_BeforeContextMenu(long x, long y, Owc10_xp::ByRef* Menu, 
                                         Owc10_xp::ByRef* Cancel);
  void            Fire_BeforeRender(Owc10_xp::ChChartDraw* drawObject, LPDISPATCH chartObject, 
                                    Owc10_xp::ByRef* Cancel);
  void            Fire_AfterRender(Owc10_xp::ChChartDraw* drawObject, LPDISPATCH chartObject);
  void            Fire_AfterFinalRender(Owc10_xp::ChChartDraw* drawObject);
  void            Fire_AfterLayout(Owc10_xp::ChChartDraw* drawObject);
  void            Fire_ViewChange(void);
protected:
  IChartEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_ChartSpace<T>::Fire_DataSetChange(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.DataSetChange();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ChartSpace<T>::Fire_DblClick(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.DblClick();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ChartSpace<T>::Fire_Click(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Click();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ChartSpace<T>::Fire_KeyDown(long KeyCode, long Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyDown(KeyCode, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ChartSpace<T>::Fire_KeyUp(long KeyCode, long Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyUp(KeyCode, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ChartSpace<T>::Fire_KeyPress(long KeyAscii)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyPress(KeyAscii);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ChartSpace<T>::Fire_BeforeKeyDown(long KeyCode, long Shift, Owc10_xp::ByRef* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeKeyDown(KeyCode, Shift, Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ChartSpace<T>::Fire_BeforeKeyUp(long KeyCode, long Shift, Owc10_xp::ByRef* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeKeyUp(KeyCode, Shift, Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ChartSpace<T>::Fire_BeforeKeyPress(long KeyAscii, Owc10_xp::ByRef* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeKeyPress(KeyAscii, Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ChartSpace<T>::Fire_MouseDown(long Button, long Shift, long x, long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseDown(Button, Shift, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ChartSpace<T>::Fire_MouseMove(long Button, long Shift, long x, long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseMove(Button, Shift, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ChartSpace<T>::Fire_MouseUp(long Button, long Shift, long x, long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseUp(Button, Shift, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ChartSpace<T>::Fire_MouseWheel(VARIANT_BOOL Page, long Count)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseWheel(Page, Count);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ChartSpace<T>::Fire_SelectionChange(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.SelectionChange();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ChartSpace<T>::Fire_BeforeScreenTip(Owc10_xp::ByRef* TipText, LPDISPATCH ContextObject)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeScreenTip(TipText, ContextObject);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ChartSpace<T>::Fire_CommandEnabled(VARIANT Command, Owc10_xp::ByRef* Enabled)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.CommandEnabled(Command, Enabled);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ChartSpace<T>::Fire_CommandChecked(VARIANT Command, Owc10_xp::ByRef* Checked)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.CommandChecked(Command, Checked);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ChartSpace<T>::Fire_CommandTipText(VARIANT Command, Owc10_xp::ByRef* Caption)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.CommandTipText(Command, Caption);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ChartSpace<T>::Fire_CommandBeforeExecute(VARIANT Command, Owc10_xp::ByRef* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.CommandBeforeExecute(Command, Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ChartSpace<T>::Fire_CommandExecute(VARIANT Command, VARIANT_BOOL Succeeded)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.CommandExecute(Command, Succeeded);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ChartSpace<T>::Fire_BeforeContextMenu(long x, long y, Owc10_xp::ByRef* Menu, 
                                              Owc10_xp::ByRef* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeContextMenu(x, y, Menu, Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ChartSpace<T>::Fire_BeforeRender(Owc10_xp::ChChartDraw* drawObject, LPDISPATCH chartObject, 
                                         Owc10_xp::ByRef* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeRender(drawObject, chartObject, Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ChartSpace<T>::Fire_AfterRender(Owc10_xp::ChChartDraw* drawObject, LPDISPATCH chartObject)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AfterRender(drawObject, chartObject);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ChartSpace<T>::Fire_AfterFinalRender(Owc10_xp::ChChartDraw* drawObject)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AfterFinalRender(drawObject);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ChartSpace<T>::Fire_AfterLayout(Owc10_xp::ChChartDraw* drawObject)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AfterLayout(drawObject);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ChartSpace<T>::Fire_ViewChange(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ViewChange();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : Spreadsheet
// Event Interface : ISpreadsheetEventSink
// *********************************************************************//
template <class T>
class TEvents_Spreadsheet : public IConnectionPointImpl<T,
                                                 &DIID_ISpreadsheetEventSink,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_BeforeContextMenu(long x, long y, Owc10_xp::ByRef* Menu, 
                                         Owc10_xp::ByRef* Cancel);
  void            Fire_BeforeKeyDown(long KeyCode, long Shift, Owc10_xp::ByRef* Cancel);
  void            Fire_BeforeKeyPress(long KeyAscii, Owc10_xp::ByRef* Cancel);
  void            Fire_BeforeKeyUp(long KeyCode, long Shift, Owc10_xp::ByRef* Cancel);
  void            Fire_Click(void);
  void            Fire_CommandEnabled(VARIANT Command, Owc10_xp::ByRef* Enabled);
  void            Fire_CommandChecked(VARIANT Command, Owc10_xp::ByRef* Checked);
  void            Fire_CommandTipText(VARIANT Command, Owc10_xp::ByRef* Caption);
  void            Fire_CommandBeforeExecute(VARIANT Command, Owc10_xp::ByRef* Cancel);
  void            Fire_CommandExecute(VARIANT Command, VARIANT_BOOL Succeeded);
  void            Fire_DblClick(void);
  void            Fire_EndEdit(VARIANT_BOOL Accept, Owc10_xp::ByRef* FinalValue, 
                               Owc10_xp::ByRef* Cancel, Owc10_xp::ByRef* ErrorDescription);
  void            Fire_Initialize(void);
  void            Fire_KeyDown(long KeyCode, long Shift);
  void            Fire_KeyPress(long KeyAscii);
  void            Fire_KeyUp(long KeyCode, long Shift);
  void            Fire_LoadCompleted(void);
  void            Fire_MouseDown(long Button, long Shift, long x, long y);
  void            Fire_MouseOut(long Button, long Shift, Owc10_xp::_Range* Target);
  void            Fire_MouseOver(long Button, long Shift, Owc10_xp::_Range* Target);
  void            Fire_MouseUp(long Button, long Shift, long x, long y);
  void            Fire_MouseWheel(VARIANT_BOOL Page, long Count);
  void            Fire_SelectionChange(void);
  void            Fire_SelectionChanging(Owc10_xp::_Range* Range);
  void            Fire_SheetActivate(Owc10_xp::Worksheet* Sh);
  void            Fire_SheetCalculate(Owc10_xp::Worksheet* Sh);
  void            Fire_SheetChange(Owc10_xp::Worksheet* Sh, Owc10_xp::_Range* Target);
  void            Fire_SheetDeactivate(Owc10_xp::Worksheet* Sh);
  void            Fire_SheetFollowHyperlink(Owc10_xp::Worksheet* Sh, Owc10_xp::Hyperlink* Target);
  void            Fire_StartEdit(LPDISPATCH Selection, Owc10_xp::ByRef* InitialValue, 
                                 Owc10_xp::ByRef* Cancel, Owc10_xp::ByRef* ErrorDescription);
  void            Fire_ViewChange(Owc10_xp::_Range* Target);
protected:
  ISpreadsheetEventSinkDisp m_EventIntfObj;
};

template <class T> void
TEvents_Spreadsheet<T>::Fire_BeforeContextMenu(long x, long y, Owc10_xp::ByRef* Menu, 
                                               Owc10_xp::ByRef* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeContextMenu(x, y, Menu, Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Spreadsheet<T>::Fire_BeforeKeyDown(long KeyCode, long Shift, Owc10_xp::ByRef* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeKeyDown(KeyCode, Shift, Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Spreadsheet<T>::Fire_BeforeKeyPress(long KeyAscii, Owc10_xp::ByRef* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeKeyPress(KeyAscii, Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Spreadsheet<T>::Fire_BeforeKeyUp(long KeyCode, long Shift, Owc10_xp::ByRef* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeKeyUp(KeyCode, Shift, Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Spreadsheet<T>::Fire_Click(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Click();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Spreadsheet<T>::Fire_CommandEnabled(VARIANT Command, Owc10_xp::ByRef* Enabled)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.CommandEnabled(Command, Enabled);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Spreadsheet<T>::Fire_CommandChecked(VARIANT Command, Owc10_xp::ByRef* Checked)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.CommandChecked(Command, Checked);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Spreadsheet<T>::Fire_CommandTipText(VARIANT Command, Owc10_xp::ByRef* Caption)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.CommandTipText(Command, Caption);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Spreadsheet<T>::Fire_CommandBeforeExecute(VARIANT Command, Owc10_xp::ByRef* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.CommandBeforeExecute(Command, Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Spreadsheet<T>::Fire_CommandExecute(VARIANT Command, VARIANT_BOOL Succeeded)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.CommandExecute(Command, Succeeded);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Spreadsheet<T>::Fire_DblClick(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.DblClick();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Spreadsheet<T>::Fire_EndEdit(VARIANT_BOOL Accept, Owc10_xp::ByRef* FinalValue, 
                                     Owc10_xp::ByRef* Cancel, Owc10_xp::ByRef* ErrorDescription)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.EndEdit(Accept, FinalValue, Cancel, ErrorDescription);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Spreadsheet<T>::Fire_Initialize(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Initialize();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Spreadsheet<T>::Fire_KeyDown(long KeyCode, long Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyDown(KeyCode, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Spreadsheet<T>::Fire_KeyPress(long KeyAscii)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyPress(KeyAscii);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Spreadsheet<T>::Fire_KeyUp(long KeyCode, long Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyUp(KeyCode, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Spreadsheet<T>::Fire_LoadCompleted(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.LoadCompleted();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Spreadsheet<T>::Fire_MouseDown(long Button, long Shift, long x, long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseDown(Button, Shift, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Spreadsheet<T>::Fire_MouseOut(long Button, long Shift, Owc10_xp::_Range* Target)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseOut(Button, Shift, Target);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Spreadsheet<T>::Fire_MouseOver(long Button, long Shift, Owc10_xp::_Range* Target)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseOver(Button, Shift, Target);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Spreadsheet<T>::Fire_MouseUp(long Button, long Shift, long x, long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseUp(Button, Shift, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Spreadsheet<T>::Fire_MouseWheel(VARIANT_BOOL Page, long Count)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseWheel(Page, Count);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Spreadsheet<T>::Fire_SelectionChange(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.SelectionChange();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Spreadsheet<T>::Fire_SelectionChanging(Owc10_xp::_Range* Range)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.SelectionChanging(Range);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Spreadsheet<T>::Fire_SheetActivate(Owc10_xp::Worksheet* Sh)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.SheetActivate(Sh);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Spreadsheet<T>::Fire_SheetCalculate(Owc10_xp::Worksheet* Sh)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.SheetCalculate(Sh);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Spreadsheet<T>::Fire_SheetChange(Owc10_xp::Worksheet* Sh, Owc10_xp::_Range* Target)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.SheetChange(Sh, Target);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Spreadsheet<T>::Fire_SheetDeactivate(Owc10_xp::Worksheet* Sh)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.SheetDeactivate(Sh);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Spreadsheet<T>::Fire_SheetFollowHyperlink(Owc10_xp::Worksheet* Sh, 
                                                  Owc10_xp::Hyperlink* Target)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.SheetFollowHyperlink(Sh, Target);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Spreadsheet<T>::Fire_StartEdit(LPDISPATCH Selection, Owc10_xp::ByRef* InitialValue, 
                                       Owc10_xp::ByRef* Cancel, Owc10_xp::ByRef* ErrorDescription)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.StartEdit(Selection, InitialValue, Cancel, ErrorDescription);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Spreadsheet<T>::Fire_ViewChange(Owc10_xp::_Range* Target)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ViewChange(Target);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : DataSourceControl
// Event Interface : _DataSourceControlEvent
// *********************************************************************//
template <class T>
class TEvents_DataSourceControl : public IConnectionPointImpl<T,
                                                 &DIID__DataSourceControlEvent,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_Current(Owc10_xp::DSCEventInfo* DSCEventInfo);
  void            Fire_BeforeExpand(Owc10_xp::DSCEventInfo* DSCEventInfo);
  void            Fire_BeforeCollapse(Owc10_xp::DSCEventInfo* DSCEventInfo);
  void            Fire_BeforeFirstPage(Owc10_xp::DSCEventInfo* DSCEventInfo);
  void            Fire_BeforePreviousPage(Owc10_xp::DSCEventInfo* DSCEventInfo);
  void            Fire_BeforeNextPage(Owc10_xp::DSCEventInfo* DSCEventInfo);
  void            Fire_BeforeLastPage(Owc10_xp::DSCEventInfo* DSCEventInfo);
  void            Fire_DataError(Owc10_xp::DSCEventInfo* DSCEventInfo);
  void            Fire_DataPageComplete(Owc10_xp::DSCEventInfo* DSCEventInfo);
  void            Fire_BeforeInitialBind(Owc10_xp::DSCEventInfo* DSCEventInfo);
  void            Fire_RecordsetSaveProgress(Owc10_xp::DSCEventInfo* DSCEventInfo);
  void            Fire_AfterDelete(Owc10_xp::DSCEventInfo* DSCEventInfo);
  void            Fire_AfterInsert(Owc10_xp::DSCEventInfo* DSCEventInfo);
  void            Fire_AfterUpdate(Owc10_xp::DSCEventInfo* DSCEventInfo);
  void            Fire_BeforeDelete(Owc10_xp::DSCEventInfo* DSCEventInfo);
  void            Fire_BeforeInsert(Owc10_xp::DSCEventInfo* DSCEventInfo);
  void            Fire_BeforeOverwrite(Owc10_xp::DSCEventInfo* DSCEventInfo);
  void            Fire_BeforeUpdate(Owc10_xp::DSCEventInfo* DSCEventInfo);
  void            Fire_Dirty(Owc10_xp::DSCEventInfo* DSCEventInfo);
  void            Fire_RecordExit(Owc10_xp::DSCEventInfo* DSCEventInfo);
  void            Fire_Undo(Owc10_xp::DSCEventInfo* DSCEventInfo);
  void            Fire_Focus(Owc10_xp::DSCEventInfo* DSCEventInfo);
protected:
  _DataSourceControlEventDisp m_EventIntfObj;
};

template <class T> void
TEvents_DataSourceControl<T>::Fire_Current(Owc10_xp::DSCEventInfo* DSCEventInfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Current(DSCEventInfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_DataSourceControl<T>::Fire_BeforeExpand(Owc10_xp::DSCEventInfo* DSCEventInfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeExpand(DSCEventInfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_DataSourceControl<T>::Fire_BeforeCollapse(Owc10_xp::DSCEventInfo* DSCEventInfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeCollapse(DSCEventInfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_DataSourceControl<T>::Fire_BeforeFirstPage(Owc10_xp::DSCEventInfo* DSCEventInfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeFirstPage(DSCEventInfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_DataSourceControl<T>::Fire_BeforePreviousPage(Owc10_xp::DSCEventInfo* DSCEventInfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforePreviousPage(DSCEventInfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_DataSourceControl<T>::Fire_BeforeNextPage(Owc10_xp::DSCEventInfo* DSCEventInfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeNextPage(DSCEventInfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_DataSourceControl<T>::Fire_BeforeLastPage(Owc10_xp::DSCEventInfo* DSCEventInfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeLastPage(DSCEventInfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_DataSourceControl<T>::Fire_DataError(Owc10_xp::DSCEventInfo* DSCEventInfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.DataError(DSCEventInfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_DataSourceControl<T>::Fire_DataPageComplete(Owc10_xp::DSCEventInfo* DSCEventInfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.DataPageComplete(DSCEventInfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_DataSourceControl<T>::Fire_BeforeInitialBind(Owc10_xp::DSCEventInfo* DSCEventInfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeInitialBind(DSCEventInfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_DataSourceControl<T>::Fire_RecordsetSaveProgress(Owc10_xp::DSCEventInfo* DSCEventInfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.RecordsetSaveProgress(DSCEventInfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_DataSourceControl<T>::Fire_AfterDelete(Owc10_xp::DSCEventInfo* DSCEventInfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AfterDelete(DSCEventInfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_DataSourceControl<T>::Fire_AfterInsert(Owc10_xp::DSCEventInfo* DSCEventInfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AfterInsert(DSCEventInfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_DataSourceControl<T>::Fire_AfterUpdate(Owc10_xp::DSCEventInfo* DSCEventInfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AfterUpdate(DSCEventInfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_DataSourceControl<T>::Fire_BeforeDelete(Owc10_xp::DSCEventInfo* DSCEventInfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeDelete(DSCEventInfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_DataSourceControl<T>::Fire_BeforeInsert(Owc10_xp::DSCEventInfo* DSCEventInfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeInsert(DSCEventInfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_DataSourceControl<T>::Fire_BeforeOverwrite(Owc10_xp::DSCEventInfo* DSCEventInfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeOverwrite(DSCEventInfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_DataSourceControl<T>::Fire_BeforeUpdate(Owc10_xp::DSCEventInfo* DSCEventInfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeUpdate(DSCEventInfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_DataSourceControl<T>::Fire_Dirty(Owc10_xp::DSCEventInfo* DSCEventInfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Dirty(DSCEventInfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_DataSourceControl<T>::Fire_RecordExit(Owc10_xp::DSCEventInfo* DSCEventInfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.RecordExit(DSCEventInfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_DataSourceControl<T>::Fire_Undo(Owc10_xp::DSCEventInfo* DSCEventInfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Undo(DSCEventInfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_DataSourceControl<T>::Fire_Focus(Owc10_xp::DSCEventInfo* DSCEventInfo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Focus(DSCEventInfo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : RecordNavigationControl
// Event Interface : _NavigationEvent
// *********************************************************************//
template <class T>
class TEvents_RecordNavigationControl : public IConnectionPointImpl<T,
                                                 &DIID__NavigationEvent,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_ButtonClick(Owc10_xp::NavButtonEnum NavButton);
protected:
  _NavigationEventDisp m_EventIntfObj;
};

template <class T> void
TEvents_RecordNavigationControl<T>::Fire_ButtonClick(Owc10_xp::NavButtonEnum NavButton)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ButtonClick(NavButton);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : Range
// Event Interface : IRangeEvents
// *********************************************************************//
template <class T>
class TEvents_Range : public IConnectionPointImpl<T,
                                                 &DIID_IRangeEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_Change(void);
protected:
  IRangeEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_Range<T>::Fire_Change(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Change();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : PivotTable
// Event Interface : IPivotControlEvents
// *********************************************************************//
template <class T>
class TEvents_PivotTable : public IConnectionPointImpl<T,
                                                 &DIID_IPivotControlEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_SelectionChange(void);
  void            Fire_ViewChange(Owc10_xp::PivotViewReasonEnum Reason);
  void            Fire_DataChange(Owc10_xp::PivotDataReasonEnum Reason);
  void            Fire_PivotTableChange(Owc10_xp::PivotTableReasonEnum Reason);
  void            Fire_BeforeQuery(void);
  void            Fire_Query(void);
  void            Fire_OnConnect(void);
  void            Fire_OnDisconnect(void);
  void            Fire_MouseDown(long Button, long Shift, long x, long y);
  void            Fire_MouseMove(long Button, long Shift, long x, long y);
  void            Fire_MouseUp(long Button, long Shift, long x, long y);
  void            Fire_MouseWheel(VARIANT_BOOL Page, long Count);
  void            Fire_Click(void);
  void            Fire_DblClick(void);
  void            Fire_CommandEnabled(VARIANT Command, Owc10_xp::ByRef* Enabled);
  void            Fire_CommandChecked(VARIANT Command, Owc10_xp::ByRef* Checked);
  void            Fire_CommandTipText(VARIANT Command, Owc10_xp::ByRef* Caption);
  void            Fire_CommandBeforeExecute(VARIANT Command, Owc10_xp::ByRef* Cancel);
  void            Fire_CommandExecute(VARIANT Command, VARIANT_BOOL Succeeded);
  void            Fire_KeyDown(long KeyCode, long Shift);
  void            Fire_KeyUp(long KeyCode, long Shift);
  void            Fire_KeyPress(long KeyAscii);
  void            Fire_BeforeKeyDown(long KeyCode, long Shift, Owc10_xp::ByRef* Cancel);
  void            Fire_BeforeKeyUp(long KeyCode, long Shift, Owc10_xp::ByRef* Cancel);
  void            Fire_BeforeKeyPress(long KeyAscii, Owc10_xp::ByRef* Cancel);
  void            Fire_BeforeContextMenu(long x, long y, Owc10_xp::ByRef* Menu, 
                                         Owc10_xp::ByRef* Cancel);
  void            Fire_StartEdit(LPDISPATCH Selection, LPDISPATCH ActiveObject, 
                                 Owc10_xp::ByRef* InitialValue, Owc10_xp::ByRef* ArrowMode, 
                                 Owc10_xp::ByRef* CaretPosition, Owc10_xp::ByRef* Cancel, 
                                 Owc10_xp::ByRef* ErrorDescription);
  void            Fire_EndEdit(VARIANT_BOOL Accept, Owc10_xp::ByRef* FinalValue, 
                               Owc10_xp::ByRef* Cancel, Owc10_xp::ByRef* ErrorDescription);
  void            Fire_BeforeScreenTip(Owc10_xp::ByRef* ScreenTipText, LPDISPATCH SourceObject);
protected:
  IPivotControlEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_PivotTable<T>::Fire_SelectionChange(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.SelectionChange();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PivotTable<T>::Fire_ViewChange(Owc10_xp::PivotViewReasonEnum Reason)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ViewChange(Reason);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PivotTable<T>::Fire_DataChange(Owc10_xp::PivotDataReasonEnum Reason)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.DataChange(Reason);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PivotTable<T>::Fire_PivotTableChange(Owc10_xp::PivotTableReasonEnum Reason)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.PivotTableChange(Reason);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PivotTable<T>::Fire_BeforeQuery(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeQuery();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PivotTable<T>::Fire_Query(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Query();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PivotTable<T>::Fire_OnConnect(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnect();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PivotTable<T>::Fire_OnDisconnect(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDisconnect();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PivotTable<T>::Fire_MouseDown(long Button, long Shift, long x, long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseDown(Button, Shift, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PivotTable<T>::Fire_MouseMove(long Button, long Shift, long x, long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseMove(Button, Shift, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PivotTable<T>::Fire_MouseUp(long Button, long Shift, long x, long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseUp(Button, Shift, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PivotTable<T>::Fire_MouseWheel(VARIANT_BOOL Page, long Count)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseWheel(Page, Count);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PivotTable<T>::Fire_Click(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Click();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PivotTable<T>::Fire_DblClick(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.DblClick();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PivotTable<T>::Fire_CommandEnabled(VARIANT Command, Owc10_xp::ByRef* Enabled)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.CommandEnabled(Command, Enabled);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PivotTable<T>::Fire_CommandChecked(VARIANT Command, Owc10_xp::ByRef* Checked)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.CommandChecked(Command, Checked);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PivotTable<T>::Fire_CommandTipText(VARIANT Command, Owc10_xp::ByRef* Caption)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.CommandTipText(Command, Caption);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PivotTable<T>::Fire_CommandBeforeExecute(VARIANT Command, Owc10_xp::ByRef* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.CommandBeforeExecute(Command, Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PivotTable<T>::Fire_CommandExecute(VARIANT Command, VARIANT_BOOL Succeeded)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.CommandExecute(Command, Succeeded);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PivotTable<T>::Fire_KeyDown(long KeyCode, long Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyDown(KeyCode, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PivotTable<T>::Fire_KeyUp(long KeyCode, long Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyUp(KeyCode, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PivotTable<T>::Fire_KeyPress(long KeyAscii)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyPress(KeyAscii);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PivotTable<T>::Fire_BeforeKeyDown(long KeyCode, long Shift, Owc10_xp::ByRef* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeKeyDown(KeyCode, Shift, Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PivotTable<T>::Fire_BeforeKeyUp(long KeyCode, long Shift, Owc10_xp::ByRef* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeKeyUp(KeyCode, Shift, Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PivotTable<T>::Fire_BeforeKeyPress(long KeyAscii, Owc10_xp::ByRef* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeKeyPress(KeyAscii, Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PivotTable<T>::Fire_BeforeContextMenu(long x, long y, Owc10_xp::ByRef* Menu, 
                                              Owc10_xp::ByRef* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeContextMenu(x, y, Menu, Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PivotTable<T>::Fire_StartEdit(LPDISPATCH Selection, LPDISPATCH ActiveObject, 
                                      Owc10_xp::ByRef* InitialValue, Owc10_xp::ByRef* ArrowMode, 
                                      Owc10_xp::ByRef* CaretPosition, Owc10_xp::ByRef* Cancel, 
                                      Owc10_xp::ByRef* ErrorDescription)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.StartEdit(Selection, ActiveObject, InitialValue, ArrowMode, CaretPosition, 
                               Cancel, ErrorDescription);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PivotTable<T>::Fire_EndEdit(VARIANT_BOOL Accept, Owc10_xp::ByRef* FinalValue, 
                                    Owc10_xp::ByRef* Cancel, Owc10_xp::ByRef* ErrorDescription)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.EndEdit(Accept, FinalValue, Cancel, ErrorDescription);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PivotTable<T>::Fire_BeforeScreenTip(Owc10_xp::ByRef* ScreenTipText, LPDISPATCH SourceObject)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeScreenTip(ScreenTipText, SourceObject);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

#endif  //   __TLB_NO_EVENT_WRAPPERS

};     // namespace Owc10_xp

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Owc10_xp;
#endif

#pragma option pop

#endif // OWC10_XPH
