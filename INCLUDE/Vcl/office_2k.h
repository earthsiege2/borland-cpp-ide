// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.0.1.3  $
// File generated on 1/24/2000 09:46:22 AM from Type Library described below.

// ************************************************************************ //
// Type Lib: D:\msof2k\Office\mso9.dll (1)
// IID\LCID: {2DF8D04C-5BFA-101B-BDE5-00AA0044DE52}\0
// Helpfile: D:\msof2k\Office\vbaoff9.chm
// DepndLst: 
//   (1) v2.0 stdole, (D:\WINNT\System32\stdole2.tlb)
// Parent TypeLibrary:
//   (0) v1.3 Graph, (d:\tlbgen\rampage\typelib\TypeLibraries\GRAPH9.olb)
// ************************************************************************ //
#ifndef   __Office_2K_h__
#define   __Office_2K_h__

#pragma option push -b -w-inl

#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0500)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Office_2k
{

// *********************************************************************//
// HelpString: Microsoft Office 9.0 Object Library
// Version:    2.1
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_Office;
extern __declspec (package) const GUID GUID_MsoLineDashStyle;
extern __declspec (package) const GUID GUID_MsoLineStyle;
extern __declspec (package) const GUID GUID_MsoArrowheadStyle;
extern __declspec (package) const GUID GUID_MsoArrowheadWidth;
extern __declspec (package) const GUID GUID_MsoArrowheadLength;
extern __declspec (package) const GUID GUID_MsoFillType;
extern __declspec (package) const GUID GUID_MsoGradientStyle;
extern __declspec (package) const GUID GUID_MsoGradientColorType;
extern __declspec (package) const GUID GUID_MsoTextureType;
extern __declspec (package) const GUID GUID_MsoPresetTexture;
extern __declspec (package) const GUID GUID_MsoPatternType;
extern __declspec (package) const GUID GUID_MsoPresetGradientType;
extern __declspec (package) const GUID GUID_MsoShadowType;
extern __declspec (package) const GUID GUID_MsoPresetTextEffect;
extern __declspec (package) const GUID GUID_MsoPresetTextEffectShape;
extern __declspec (package) const GUID GUID_MsoTextEffectAlignment;
extern __declspec (package) const GUID GUID_MsoPresetLightingDirection;
extern __declspec (package) const GUID GUID_MsoPresetLightingSoftness;
extern __declspec (package) const GUID GUID_MsoPresetMaterial;
extern __declspec (package) const GUID GUID_MsoPresetExtrusionDirection;
extern __declspec (package) const GUID GUID_MsoPresetThreeDFormat;
extern __declspec (package) const GUID GUID_MsoExtrusionColorType;
extern __declspec (package) const GUID GUID_MsoAlignCmd;
extern __declspec (package) const GUID GUID_MsoDistributeCmd;
extern __declspec (package) const GUID GUID_MsoConnectorType;
extern __declspec (package) const GUID GUID_MsoHorizontalAnchor;
extern __declspec (package) const GUID GUID_MsoVerticalAnchor;
extern __declspec (package) const GUID GUID_MsoOrientation;
extern __declspec (package) const GUID GUID_MsoZOrderCmd;
extern __declspec (package) const GUID GUID_MsoSegmentType;
extern __declspec (package) const GUID GUID_MsoEditingType;
extern __declspec (package) const GUID GUID_MsoAutoShapeType;
extern __declspec (package) const GUID GUID_MsoShapeType;
extern __declspec (package) const GUID GUID_MsoFlipCmd;
extern __declspec (package) const GUID GUID_MsoTriState;
extern __declspec (package) const GUID GUID_MsoColorType;
extern __declspec (package) const GUID GUID_MsoPictureColorType;
extern __declspec (package) const GUID GUID_MsoCalloutAngleType;
extern __declspec (package) const GUID GUID_MsoCalloutDropType;
extern __declspec (package) const GUID GUID_MsoCalloutType;
extern __declspec (package) const GUID GUID_MsoBlackWhiteMode;
extern __declspec (package) const GUID GUID_MsoMixedType;
extern __declspec (package) const GUID GUID_MsoTextOrientation;
extern __declspec (package) const GUID GUID_MsoScaleFrom;
extern __declspec (package) const GUID GUID_MsoRGBType;
extern __declspec (package) const GUID GUID_MsoBarPosition;
extern __declspec (package) const GUID GUID_MsoBarProtection;
extern __declspec (package) const GUID GUID_MsoBarType;
extern __declspec (package) const GUID GUID_MsoControlType;
extern __declspec (package) const GUID GUID_MsoButtonState;
extern __declspec (package) const GUID GUID_MsoControlOLEUsage;
extern __declspec (package) const GUID GUID_MsoButtonStyleHidden;
extern __declspec (package) const GUID GUID_MsoButtonStyle;
extern __declspec (package) const GUID GUID_MsoComboStyle;
extern __declspec (package) const GUID GUID_MsoOLEMenuGroup;
extern __declspec (package) const GUID GUID_MsoMenuAnimation;
extern __declspec (package) const GUID GUID_MsoBarRow;
extern __declspec (package) const GUID GUID_MsoCommandBarButtonHyperlinkType;
extern __declspec (package) const GUID GUID_MsoHyperlinkType;
extern __declspec (package) const GUID GUID_MsoExtraInfoMethod;
extern __declspec (package) const GUID GUID_MsoAnimationType;
extern __declspec (package) const GUID GUID_MsoButtonSetType;
extern __declspec (package) const GUID GUID_MsoIconType;
extern __declspec (package) const GUID GUID_MsoBalloonType;
extern __declspec (package) const GUID GUID_MsoModeType;
extern __declspec (package) const GUID GUID_MsoBalloonErrorType;
extern __declspec (package) const GUID GUID_MsoWizardActType;
extern __declspec (package) const GUID GUID_MsoWizardMsgType;
extern __declspec (package) const GUID GUID_MsoBalloonButtonType;
extern __declspec (package) const GUID GUID_DocProperties;
extern __declspec (package) const GUID GUID_MsoDocProperties;
extern __declspec (package) const GUID GUID_MsoAppLanguageID;
extern __declspec (package) const GUID GUID_MsoFarEastLineBreakLanguageID;
extern __declspec (package) const GUID GUID_MsoFeatureInstall;
extern __declspec (package) const GUID IID_IAccessible;
extern __declspec (package) const GUID IID__IMsoDispObj;
extern __declspec (package) const GUID IID__IMsoOleAccDispObj;
extern __declspec (package) const GUID IID__CommandBars;
extern __declspec (package) const GUID IID_CommandBar;
extern __declspec (package) const GUID IID_CommandBarControls;
extern __declspec (package) const GUID IID_CommandBarControl;
extern __declspec (package) const GUID IID__CommandBarButton;
extern __declspec (package) const GUID IID_CommandBarPopup;
extern __declspec (package) const GUID IID__CommandBarComboBox;
extern __declspec (package) const GUID IID__CommandBarActiveX;
extern __declspec (package) const GUID IID_Adjustments;
extern __declspec (package) const GUID IID_CalloutFormat;
extern __declspec (package) const GUID IID_ColorFormat;
extern __declspec (package) const GUID IID_ConnectorFormat;
extern __declspec (package) const GUID IID_FillFormat;
extern __declspec (package) const GUID IID_FreeformBuilder;
extern __declspec (package) const GUID IID_GroupShapes;
extern __declspec (package) const GUID IID_LineFormat;
extern __declspec (package) const GUID IID_ShapeNode;
extern __declspec (package) const GUID IID_ShapeNodes;
extern __declspec (package) const GUID IID_PictureFormat;
extern __declspec (package) const GUID IID_ShadowFormat;
extern __declspec (package) const GUID GUID_MsoScriptLanguage;
extern __declspec (package) const GUID GUID_MsoScriptLocation;
extern __declspec (package) const GUID IID_Script;
extern __declspec (package) const GUID IID_Scripts;
extern __declspec (package) const GUID IID_Shape;
extern __declspec (package) const GUID IID_ShapeRange;
extern __declspec (package) const GUID IID_Shapes;
extern __declspec (package) const GUID IID_TextEffectFormat;
extern __declspec (package) const GUID IID_TextFrame;
extern __declspec (package) const GUID IID_ThreeDFormat;
extern __declspec (package) const GUID IID_IMsoDispCagNotifySink;
extern __declspec (package) const GUID IID_Balloon;
extern __declspec (package) const GUID IID_BalloonCheckboxes;
extern __declspec (package) const GUID IID_BalloonCheckbox;
extern __declspec (package) const GUID IID_BalloonLabels;
extern __declspec (package) const GUID IID_BalloonLabel;
extern __declspec (package) const GUID IID_AnswerWizardFiles;
extern __declspec (package) const GUID IID_AnswerWizard;
extern __declspec (package) const GUID IID_Assistant;
extern __declspec (package) const GUID IID_DocumentProperty;
extern __declspec (package) const GUID IID_DocumentProperties;
extern __declspec (package) const GUID GUID_MsoFileFindOptions;
extern __declspec (package) const GUID GUID_MsoFileFindView;
extern __declspec (package) const GUID GUID_MsoFileFindSortBy;
extern __declspec (package) const GUID GUID_MsoFileFindListBy;
extern __declspec (package) const GUID IID_IFoundFiles;
extern __declspec (package) const GUID IID_IFind;
extern __declspec (package) const GUID GUID_MsoLastModified;
extern __declspec (package) const GUID GUID_MsoSortBy;
extern __declspec (package) const GUID GUID_MsoSortOrder;
extern __declspec (package) const GUID GUID_MsoConnector;
extern __declspec (package) const GUID GUID_MsoCondition;
extern __declspec (package) const GUID GUID_MsoFileType;
extern __declspec (package) const GUID IID_FoundFiles;
extern __declspec (package) const GUID IID_PropertyTest;
extern __declspec (package) const GUID IID_PropertyTests;
extern __declspec (package) const GUID IID_FileSearch;
extern __declspec (package) const GUID IID_COMAddIn;
extern __declspec (package) const GUID IID_COMAddIns;
extern __declspec (package) const GUID GUID_MsoLanguageID;
extern __declspec (package) const GUID IID_LanguageSettings;
extern __declspec (package) const GUID IID_ICommandBarsEvents;
extern __declspec (package) const GUID DIID__CommandBarsEvents;
extern __declspec (package) const GUID CLSID_CommandBars;
extern __declspec (package) const GUID IID_ICommandBarComboBoxEvents;
extern __declspec (package) const GUID DIID__CommandBarComboBoxEvents;
extern __declspec (package) const GUID CLSID_CommandBarComboBox;
extern __declspec (package) const GUID IID_ICommandBarButtonEvents;
extern __declspec (package) const GUID DIID__CommandBarButtonEvents;
extern __declspec (package) const GUID CLSID_CommandBarButton;
extern __declspec (package) const GUID GUID_MsoScreenSize;
extern __declspec (package) const GUID GUID_MsoCharacterSet;
extern __declspec (package) const GUID GUID_MsoEncoding;
extern __declspec (package) const GUID IID_WebPageFont;
extern __declspec (package) const GUID IID_WebPageFonts;
extern __declspec (package) const GUID GUID_MsoHTMLProjectOpen;
extern __declspec (package) const GUID GUID_MsoHTMLProjectState;
extern __declspec (package) const GUID IID_HTMLProjectItem;
extern __declspec (package) const GUID IID_HTMLProjectItems;
extern __declspec (package) const GUID IID_HTMLProject;
extern __declspec (package) const GUID IID_MsoDebugOptions;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
enum      MsoLineDashStyle;
enum      MsoLineStyle;
enum      MsoArrowheadStyle;
enum      MsoArrowheadWidth;
enum      MsoArrowheadLength;
enum      MsoFillType;
enum      MsoGradientStyle;
enum      MsoGradientColorType;
enum      MsoTextureType;
enum      MsoPresetTexture;
enum      MsoPatternType;
enum      MsoPresetGradientType;
enum      MsoShadowType;
enum      MsoPresetTextEffect;
enum      MsoPresetTextEffectShape;
enum      MsoTextEffectAlignment;
enum      MsoPresetLightingDirection;
enum      MsoPresetLightingSoftness;
enum      MsoPresetMaterial;
enum      MsoPresetExtrusionDirection;
enum      MsoPresetThreeDFormat;
enum      MsoExtrusionColorType;
enum      MsoAlignCmd;
enum      MsoDistributeCmd;
enum      MsoConnectorType;
enum      MsoHorizontalAnchor;
enum      MsoVerticalAnchor;
enum      MsoOrientation;
enum      MsoZOrderCmd;
enum      MsoSegmentType;
enum      MsoEditingType;
enum      MsoAutoShapeType;
enum      MsoShapeType;
enum      MsoFlipCmd;
enum      MsoTriState;
enum      MsoColorType;
enum      MsoPictureColorType;
enum      MsoCalloutAngleType;
enum      MsoCalloutDropType;
enum      MsoCalloutType;
enum      MsoBlackWhiteMode;
enum      MsoMixedType;
enum      MsoTextOrientation;
enum      MsoScaleFrom;
enum      MsoBarPosition;
enum      MsoBarProtection;
enum      MsoBarType;
enum      MsoControlType;
enum      MsoButtonState;
enum      MsoControlOLEUsage;
enum      MsoButtonStyleHidden;
enum      MsoButtonStyle;
enum      MsoComboStyle;
enum      MsoOLEMenuGroup;
enum      MsoMenuAnimation;
enum      MsoBarRow;
enum      MsoCommandBarButtonHyperlinkType;
enum      MsoHyperlinkType;
enum      MsoExtraInfoMethod;
enum      MsoAnimationType;
enum      MsoButtonSetType;
enum      MsoIconType;
enum      MsoBalloonType;
enum      MsoModeType;
enum      MsoBalloonErrorType;
enum      MsoWizardActType;
enum      MsoWizardMsgType;
enum      MsoBalloonButtonType;
enum      DocProperties;
enum      MsoDocProperties;
enum      MsoAppLanguageID;
enum      MsoFarEastLineBreakLanguageID;
enum      MsoFeatureInstall;
enum      MsoScriptLanguage;
enum      MsoScriptLocation;
enum      MsoFileFindOptions;
enum      MsoFileFindView;
enum      MsoFileFindSortBy;
enum      MsoFileFindListBy;
enum      MsoLastModified;
enum      MsoSortBy;
enum      MsoSortOrder;
enum      MsoConnector;
enum      MsoCondition;
enum      MsoFileType;
enum      MsoLanguageID;
enum      MsoScreenSize;
enum      MsoCharacterSet;
enum      MsoEncoding;
enum      MsoHTMLProjectOpen;
enum      MsoHTMLProjectState;
interface DECLSPEC_UUID("{618736E0-3C3D-11CF-810C-00AA00389B71}") IAccessible;
typedef TComInterface<IAccessible, &IID_IAccessible> IAccessiblePtr;
interface DECLSPEC_UUID("{000C0300-0000-0000-C000-000000000046}") _IMsoDispObj;
typedef TComInterface<_IMsoDispObj, &IID__IMsoDispObj> _IMsoDispObjPtr;
interface DECLSPEC_UUID("{000C0301-0000-0000-C000-000000000046}") _IMsoOleAccDispObj;
typedef TComInterface<_IMsoOleAccDispObj, &IID__IMsoOleAccDispObj> _IMsoOleAccDispObjPtr;
interface DECLSPEC_UUID("{000C0302-0000-0000-C000-000000000046}") _CommandBars;
typedef TComInterface<_CommandBars, &IID__CommandBars> _CommandBarsPtr;
interface DECLSPEC_UUID("{000C0304-0000-0000-C000-000000000046}") CommandBar;
typedef TComInterface<CommandBar, &IID_CommandBar> CommandBarPtr;
interface DECLSPEC_UUID("{000C0306-0000-0000-C000-000000000046}") CommandBarControls;
typedef TComInterface<CommandBarControls, &IID_CommandBarControls> CommandBarControlsPtr;
interface DECLSPEC_UUID("{000C0308-0000-0000-C000-000000000046}") CommandBarControl;
typedef TComInterface<CommandBarControl, &IID_CommandBarControl> CommandBarControlPtr;
interface DECLSPEC_UUID("{000C030E-0000-0000-C000-000000000046}") _CommandBarButton;
typedef TComInterface<_CommandBarButton, &IID__CommandBarButton> _CommandBarButtonPtr;
interface DECLSPEC_UUID("{000C030A-0000-0000-C000-000000000046}") CommandBarPopup;
typedef TComInterface<CommandBarPopup, &IID_CommandBarPopup> CommandBarPopupPtr;
interface DECLSPEC_UUID("{000C030C-0000-0000-C000-000000000046}") _CommandBarComboBox;
typedef TComInterface<_CommandBarComboBox, &IID__CommandBarComboBox> _CommandBarComboBoxPtr;
interface DECLSPEC_UUID("{000C030D-0000-0000-C000-000000000046}") _CommandBarActiveX;
typedef TComInterface<_CommandBarActiveX, &IID__CommandBarActiveX> _CommandBarActiveXPtr;
interface DECLSPEC_UUID("{000C0310-0000-0000-C000-000000000046}") Adjustments;
typedef TComInterface<Adjustments, &IID_Adjustments> AdjustmentsPtr;
interface DECLSPEC_UUID("{000C0311-0000-0000-C000-000000000046}") CalloutFormat;
typedef TComInterface<CalloutFormat, &IID_CalloutFormat> CalloutFormatPtr;
interface DECLSPEC_UUID("{000C0312-0000-0000-C000-000000000046}") ColorFormat;
typedef TComInterface<ColorFormat, &IID_ColorFormat> ColorFormatPtr;
interface DECLSPEC_UUID("{000C0313-0000-0000-C000-000000000046}") ConnectorFormat;
typedef TComInterface<ConnectorFormat, &IID_ConnectorFormat> ConnectorFormatPtr;
interface DECLSPEC_UUID("{000C0314-0000-0000-C000-000000000046}") FillFormat;
typedef TComInterface<FillFormat, &IID_FillFormat> FillFormatPtr;
interface DECLSPEC_UUID("{000C0315-0000-0000-C000-000000000046}") FreeformBuilder;
typedef TComInterface<FreeformBuilder, &IID_FreeformBuilder> FreeformBuilderPtr;
interface DECLSPEC_UUID("{000C0316-0000-0000-C000-000000000046}") GroupShapes;
typedef TComInterface<GroupShapes, &IID_GroupShapes> GroupShapesPtr;
interface DECLSPEC_UUID("{000C0317-0000-0000-C000-000000000046}") LineFormat;
typedef TComInterface<LineFormat, &IID_LineFormat> LineFormatPtr;
interface DECLSPEC_UUID("{000C0318-0000-0000-C000-000000000046}") ShapeNode;
typedef TComInterface<ShapeNode, &IID_ShapeNode> ShapeNodePtr;
interface DECLSPEC_UUID("{000C0319-0000-0000-C000-000000000046}") ShapeNodes;
typedef TComInterface<ShapeNodes, &IID_ShapeNodes> ShapeNodesPtr;
interface DECLSPEC_UUID("{000C031A-0000-0000-C000-000000000046}") PictureFormat;
typedef TComInterface<PictureFormat, &IID_PictureFormat> PictureFormatPtr;
interface DECLSPEC_UUID("{000C031B-0000-0000-C000-000000000046}") ShadowFormat;
typedef TComInterface<ShadowFormat, &IID_ShadowFormat> ShadowFormatPtr;
interface DECLSPEC_UUID("{000C0341-0000-0000-C000-000000000046}") Script;
typedef TComInterface<Script, &IID_Script> ScriptPtr;
interface DECLSPEC_UUID("{000C0340-0000-0000-C000-000000000046}") Scripts;
typedef TComInterface<Scripts, &IID_Scripts> ScriptsPtr;
interface DECLSPEC_UUID("{000C031C-0000-0000-C000-000000000046}") Shape;
typedef TComInterface<Shape, &IID_Shape> ShapePtr;
interface DECLSPEC_UUID("{000C031D-0000-0000-C000-000000000046}") ShapeRange;
typedef TComInterface<ShapeRange, &IID_ShapeRange> ShapeRangePtr;
interface DECLSPEC_UUID("{000C031E-0000-0000-C000-000000000046}") Shapes;
typedef TComInterface<Shapes, &IID_Shapes> ShapesPtr;
interface DECLSPEC_UUID("{000C031F-0000-0000-C000-000000000046}") TextEffectFormat;
typedef TComInterface<TextEffectFormat, &IID_TextEffectFormat> TextEffectFormatPtr;
interface DECLSPEC_UUID("{000C0320-0000-0000-C000-000000000046}") TextFrame;
typedef TComInterface<TextFrame, &IID_TextFrame> TextFramePtr;
interface DECLSPEC_UUID("{000C0321-0000-0000-C000-000000000046}") ThreeDFormat;
typedef TComInterface<ThreeDFormat, &IID_ThreeDFormat> ThreeDFormatPtr;
interface DECLSPEC_UUID("{000C0359-0000-0000-C000-000000000046}") IMsoDispCagNotifySink;
typedef TComInterface<IMsoDispCagNotifySink, &IID_IMsoDispCagNotifySink> IMsoDispCagNotifySinkPtr;
interface DECLSPEC_UUID("{000C0324-0000-0000-C000-000000000046}") Balloon;
typedef TComInterface<Balloon, &IID_Balloon> BalloonPtr;
interface DECLSPEC_UUID("{000C0326-0000-0000-C000-000000000046}") BalloonCheckboxes;
typedef TComInterface<BalloonCheckboxes, &IID_BalloonCheckboxes> BalloonCheckboxesPtr;
interface DECLSPEC_UUID("{000C0328-0000-0000-C000-000000000046}") BalloonCheckbox;
typedef TComInterface<BalloonCheckbox, &IID_BalloonCheckbox> BalloonCheckboxPtr;
interface DECLSPEC_UUID("{000C032E-0000-0000-C000-000000000046}") BalloonLabels;
typedef TComInterface<BalloonLabels, &IID_BalloonLabels> BalloonLabelsPtr;
interface DECLSPEC_UUID("{000C0330-0000-0000-C000-000000000046}") BalloonLabel;
typedef TComInterface<BalloonLabel, &IID_BalloonLabel> BalloonLabelPtr;
interface DECLSPEC_UUID("{000C0361-0000-0000-C000-000000000046}") AnswerWizardFiles;
typedef TComInterface<AnswerWizardFiles, &IID_AnswerWizardFiles> AnswerWizardFilesPtr;
interface DECLSPEC_UUID("{000C0360-0000-0000-C000-000000000046}") AnswerWizard;
typedef TComInterface<AnswerWizard, &IID_AnswerWizard> AnswerWizardPtr;
interface DECLSPEC_UUID("{000C0322-0000-0000-C000-000000000046}") Assistant;
typedef TComInterface<Assistant, &IID_Assistant> AssistantPtr;
interface DECLSPEC_UUID("{2DF8D04E-5BFA-101B-BDE5-00AA0044DE52}") DocumentProperty;
typedef TComInterface<DocumentProperty, &IID_DocumentProperty> DocumentPropertyPtr;
interface DECLSPEC_UUID("{2DF8D04D-5BFA-101B-BDE5-00AA0044DE52}") DocumentProperties;
typedef TComInterface<DocumentProperties, &IID_DocumentProperties> DocumentPropertiesPtr;
interface DECLSPEC_UUID("{000C0338-0000-0000-C000-000000000046}") IFoundFiles;
typedef TComInterface<IFoundFiles, &IID_IFoundFiles> IFoundFilesPtr;
interface DECLSPEC_UUID("{000C0337-0000-0000-C000-000000000046}") IFind;
typedef TComInterface<IFind, &IID_IFind> IFindPtr;
interface DECLSPEC_UUID("{000C0331-0000-0000-C000-000000000046}") FoundFiles;
typedef TComInterface<FoundFiles, &IID_FoundFiles> FoundFilesPtr;
interface DECLSPEC_UUID("{000C0333-0000-0000-C000-000000000046}") PropertyTest;
typedef TComInterface<PropertyTest, &IID_PropertyTest> PropertyTestPtr;
interface DECLSPEC_UUID("{000C0334-0000-0000-C000-000000000046}") PropertyTests;
typedef TComInterface<PropertyTests, &IID_PropertyTests> PropertyTestsPtr;
interface DECLSPEC_UUID("{000C0332-0000-0000-C000-000000000046}") FileSearch;
typedef TComInterface<FileSearch, &IID_FileSearch> FileSearchPtr;
interface DECLSPEC_UUID("{000C033A-0000-0000-C000-000000000046}") COMAddIn;
typedef TComInterface<COMAddIn, &IID_COMAddIn> COMAddInPtr;
interface DECLSPEC_UUID("{000C0339-0000-0000-C000-000000000046}") COMAddIns;
typedef TComInterface<COMAddIns, &IID_COMAddIns> COMAddInsPtr;
interface DECLSPEC_UUID("{000C0353-0000-0000-C000-000000000046}") LanguageSettings;
typedef TComInterface<LanguageSettings, &IID_LanguageSettings> LanguageSettingsPtr;
interface DECLSPEC_UUID("{55F88892-7708-11D1-ACEB-006008961DA5}") ICommandBarsEvents;
typedef TComInterface<ICommandBarsEvents, &IID_ICommandBarsEvents> ICommandBarsEventsPtr;
interface DECLSPEC_UUID("{000C0352-0000-0000-C000-000000000046}") _CommandBarsEvents;
typedef TComInterface<_CommandBarsEvents, &DIID__CommandBarsEvents> _CommandBarsEventsPtr;
interface DECLSPEC_UUID("{55F88896-7708-11D1-ACEB-006008961DA5}") ICommandBarComboBoxEvents;
typedef TComInterface<ICommandBarComboBoxEvents, &IID_ICommandBarComboBoxEvents> ICommandBarComboBoxEventsPtr;
interface DECLSPEC_UUID("{000C0354-0000-0000-C000-000000000046}") _CommandBarComboBoxEvents;
typedef TComInterface<_CommandBarComboBoxEvents, &DIID__CommandBarComboBoxEvents> _CommandBarComboBoxEventsPtr;
interface DECLSPEC_UUID("{55F88890-7708-11D1-ACEB-006008961DA5}") ICommandBarButtonEvents;
typedef TComInterface<ICommandBarButtonEvents, &IID_ICommandBarButtonEvents> ICommandBarButtonEventsPtr;
interface DECLSPEC_UUID("{000C0351-0000-0000-C000-000000000046}") _CommandBarButtonEvents;
typedef TComInterface<_CommandBarButtonEvents, &DIID__CommandBarButtonEvents> _CommandBarButtonEventsPtr;
interface DECLSPEC_UUID("{000C0913-0000-0000-C000-000000000046}") WebPageFont;
typedef TComInterface<WebPageFont, &IID_WebPageFont> WebPageFontPtr;
interface DECLSPEC_UUID("{000C0914-0000-0000-C000-000000000046}") WebPageFonts;
typedef TComInterface<WebPageFonts, &IID_WebPageFonts> WebPageFontsPtr;
interface DECLSPEC_UUID("{000C0358-0000-0000-C000-000000000046}") HTMLProjectItem;
typedef TComInterface<HTMLProjectItem, &IID_HTMLProjectItem> HTMLProjectItemPtr;
interface DECLSPEC_UUID("{000C0357-0000-0000-C000-000000000046}") HTMLProjectItems;
typedef TComInterface<HTMLProjectItems, &IID_HTMLProjectItems> HTMLProjectItemsPtr;
interface DECLSPEC_UUID("{000C0356-0000-0000-C000-000000000046}") HTMLProject;
typedef TComInterface<HTMLProject, &IID_HTMLProject> HTMLProjectPtr;
interface DECLSPEC_UUID("{000C035A-0000-0000-C000-000000000046}") MsoDebugOptions;
typedef TComInterface<MsoDebugOptions, &IID_MsoDebugOptions> MsoDebugOptionsPtr;

// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef _CommandBars CommandBars;
typedef _CommandBarsPtr CommandBarsPtr;
typedef _CommandBarComboBox CommandBarComboBox;
typedef _CommandBarComboBoxPtr CommandBarComboBoxPtr;
typedef _CommandBarButton CommandBarButton;
typedef _CommandBarButtonPtr CommandBarButtonPtr;

#define LIBID_OF_CommandBars (&LIBID_Office)
#define LIBID_OF_CommandBarComboBox (&LIBID_Office)
#define LIBID_OF_CommandBarButton (&LIBID_Office)

// *********************************************************************//
// Declaration of Aliases defined in Type Library                         
// *********************************************************************//
typedef long MsoRGBType;

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
typedef enum MsoLineDashStyle
{
  msoLineDashStyleMixed = 0xFFFFFFFE, 
  msoLineSolid = 1, 
  msoLineSquareDot = 2, 
  msoLineRoundDot = 3, 
  msoLineDash = 4, 
  msoLineDashDot = 5, 
  msoLineDashDotDot = 6, 
  msoLineLongDash = 7, 
  msoLineLongDashDot = 8
} MsoLineDashStyle;

typedef enum MsoLineStyle
{
  msoLineStyleMixed = 0xFFFFFFFE, 
  msoLineSingle = 1, 
  msoLineThinThin = 2, 
  msoLineThinThick = 3, 
  msoLineThickThin = 4, 
  msoLineThickBetweenThin = 5
} MsoLineStyle;

typedef enum MsoArrowheadStyle
{
  msoArrowheadStyleMixed = 0xFFFFFFFE, 
  msoArrowheadNone = 1, 
  msoArrowheadTriangle = 2, 
  msoArrowheadOpen = 3, 
  msoArrowheadStealth = 4, 
  msoArrowheadDiamond = 5, 
  msoArrowheadOval = 6
} MsoArrowheadStyle;

typedef enum MsoArrowheadWidth
{
  msoArrowheadWidthMixed = 0xFFFFFFFE, 
  msoArrowheadNarrow = 1, 
  msoArrowheadWidthMedium = 2, 
  msoArrowheadWide = 3
} MsoArrowheadWidth;

typedef enum MsoArrowheadLength
{
  msoArrowheadLengthMixed = 0xFFFFFFFE, 
  msoArrowheadShort = 1, 
  msoArrowheadLengthMedium = 2, 
  msoArrowheadLong = 3
} MsoArrowheadLength;

typedef enum MsoFillType
{
  msoFillMixed = 0xFFFFFFFE, 
  msoFillSolid = 1, 
  msoFillPatterned = 2, 
  msoFillGradient = 3, 
  msoFillTextured = 4, 
  msoFillBackground = 5, 
  msoFillPicture = 6
} MsoFillType;

typedef enum MsoGradientStyle
{
  msoGradientMixed = 0xFFFFFFFE, 
  msoGradientHorizontal = 1, 
  msoGradientVertical = 2, 
  msoGradientDiagonalUp = 3, 
  msoGradientDiagonalDown = 4, 
  msoGradientFromCorner = 5, 
  msoGradientFromTitle = 6, 
  msoGradientFromCenter = 7
} MsoGradientStyle;

typedef enum MsoGradientColorType
{
  msoGradientColorMixed = 0xFFFFFFFE, 
  msoGradientOneColor = 1, 
  msoGradientTwoColors = 2, 
  msoGradientPresetColors = 3
} MsoGradientColorType;

typedef enum MsoTextureType
{
  msoTextureTypeMixed = 0xFFFFFFFE, 
  msoTexturePreset = 1, 
  msoTextureUserDefined = 2
} MsoTextureType;

typedef enum MsoPresetTexture
{
  msoPresetTextureMixed = 0xFFFFFFFE, 
  msoTexturePapyrus = 1, 
  msoTextureCanvas = 2, 
  msoTextureDenim = 3, 
  msoTextureWovenMat = 4, 
  msoTextureWaterDroplets = 5, 
  msoTexturePaperBag = 6, 
  msoTextureFishFossil = 7, 
  msoTextureSand = 8, 
  msoTextureGreenMarble = 9, 
  msoTextureWhiteMarble = 10, 
  msoTextureBrownMarble = 11, 
  msoTextureGranite = 12, 
  msoTextureNewsprint = 13, 
  msoTextureRecycledPaper = 14, 
  msoTextureParchment = 15, 
  msoTextureStationery = 16, 
  msoTextureBlueTissuePaper = 17, 
  msoTexturePinkTissuePaper = 18, 
  msoTexturePurpleMesh = 19, 
  msoTextureBouquet = 20, 
  msoTextureCork = 21, 
  msoTextureWalnut = 22, 
  msoTextureOak = 23, 
  msoTextureMediumWood = 24
} MsoPresetTexture;

typedef enum MsoPatternType
{
  msoPatternMixed = 0xFFFFFFFE, 
  msoPattern5Percent = 1, 
  msoPattern10Percent = 2, 
  msoPattern20Percent = 3, 
  msoPattern25Percent = 4, 
  msoPattern30Percent = 5, 
  msoPattern40Percent = 6, 
  msoPattern50Percent = 7, 
  msoPattern60Percent = 8, 
  msoPattern70Percent = 9, 
  msoPattern75Percent = 10, 
  msoPattern80Percent = 11, 
  msoPattern90Percent = 12, 
  msoPatternDarkHorizontal = 13, 
  msoPatternDarkVertical = 14, 
  msoPatternDarkDownwardDiagonal = 15, 
  msoPatternDarkUpwardDiagonal = 16, 
  msoPatternSmallCheckerBoard = 17, 
  msoPatternTrellis = 18, 
  msoPatternLightHorizontal = 19, 
  msoPatternLightVertical = 20, 
  msoPatternLightDownwardDiagonal = 21, 
  msoPatternLightUpwardDiagonal = 22, 
  msoPatternSmallGrid = 23, 
  msoPatternDottedDiamond = 24, 
  msoPatternWideDownwardDiagonal = 25, 
  msoPatternWideUpwardDiagonal = 26, 
  msoPatternDashedUpwardDiagonal = 27, 
  msoPatternDashedDownwardDiagonal = 28, 
  msoPatternNarrowVertical = 29, 
  msoPatternNarrowHorizontal = 30, 
  msoPatternDashedVertical = 31, 
  msoPatternDashedHorizontal = 32, 
  msoPatternLargeConfetti = 33, 
  msoPatternLargeGrid = 34, 
  msoPatternHorizontalBrick = 35, 
  msoPatternLargeCheckerBoard = 36, 
  msoPatternSmallConfetti = 37, 
  msoPatternZigZag = 38, 
  msoPatternSolidDiamond = 39, 
  msoPatternDiagonalBrick = 40, 
  msoPatternOutlinedDiamond = 41, 
  msoPatternPlaid = 42, 
  msoPatternSphere = 43, 
  msoPatternWeave = 44, 
  msoPatternDottedGrid = 45, 
  msoPatternDivot = 46, 
  msoPatternShingle = 47, 
  msoPatternWave = 48
} MsoPatternType;

typedef enum MsoPresetGradientType
{
  msoPresetGradientMixed = 0xFFFFFFFE, 
  msoGradientEarlySunset = 1, 
  msoGradientLateSunset = 2, 
  msoGradientNightfall = 3, 
  msoGradientDaybreak = 4, 
  msoGradientHorizon = 5, 
  msoGradientDesert = 6, 
  msoGradientOcean = 7, 
  msoGradientCalmWater = 8, 
  msoGradientFire = 9, 
  msoGradientFog = 10, 
  msoGradientMoss = 11, 
  msoGradientPeacock = 12, 
  msoGradientWheat = 13, 
  msoGradientParchment = 14, 
  msoGradientMahogany = 15, 
  msoGradientRainbow = 16, 
  msoGradientRainbowII = 17, 
  msoGradientGold = 18, 
  msoGradientGoldII = 19, 
  msoGradientBrass = 20, 
  msoGradientChrome = 21, 
  msoGradientChromeII = 22, 
  msoGradientSilver = 23, 
  msoGradientSapphire = 24
} MsoPresetGradientType;

typedef enum MsoShadowType
{
  msoShadowMixed = 0xFFFFFFFE, 
  msoShadow1 = 1, 
  msoShadow2 = 2, 
  msoShadow3 = 3, 
  msoShadow4 = 4, 
  msoShadow5 = 5, 
  msoShadow6 = 6, 
  msoShadow7 = 7, 
  msoShadow8 = 8, 
  msoShadow9 = 9, 
  msoShadow10 = 10, 
  msoShadow11 = 11, 
  msoShadow12 = 12, 
  msoShadow13 = 13, 
  msoShadow14 = 14, 
  msoShadow15 = 15, 
  msoShadow16 = 16, 
  msoShadow17 = 17, 
  msoShadow18 = 18, 
  msoShadow19 = 19, 
  msoShadow20 = 20
} MsoShadowType;

typedef enum MsoPresetTextEffect
{
  msoTextEffectMixed = 0xFFFFFFFE, 
  msoTextEffect1 = 0, 
  msoTextEffect2 = 1, 
  msoTextEffect3 = 2, 
  msoTextEffect4 = 3, 
  msoTextEffect5 = 4, 
  msoTextEffect6 = 5, 
  msoTextEffect7 = 6, 
  msoTextEffect8 = 7, 
  msoTextEffect9 = 8, 
  msoTextEffect10 = 9, 
  msoTextEffect11 = 10, 
  msoTextEffect12 = 11, 
  msoTextEffect13 = 12, 
  msoTextEffect14 = 13, 
  msoTextEffect15 = 14, 
  msoTextEffect16 = 15, 
  msoTextEffect17 = 16, 
  msoTextEffect18 = 17, 
  msoTextEffect19 = 18, 
  msoTextEffect20 = 19, 
  msoTextEffect21 = 20, 
  msoTextEffect22 = 21, 
  msoTextEffect23 = 22, 
  msoTextEffect24 = 23, 
  msoTextEffect25 = 24, 
  msoTextEffect26 = 25, 
  msoTextEffect27 = 26, 
  msoTextEffect28 = 27, 
  msoTextEffect29 = 28, 
  msoTextEffect30 = 29
} MsoPresetTextEffect;

typedef enum MsoPresetTextEffectShape
{
  msoTextEffectShapeMixed = 0xFFFFFFFE, 
  msoTextEffectShapePlainText = 1, 
  msoTextEffectShapeStop = 2, 
  msoTextEffectShapeTriangleUp = 3, 
  msoTextEffectShapeTriangleDown = 4, 
  msoTextEffectShapeChevronUp = 5, 
  msoTextEffectShapeChevronDown = 6, 
  msoTextEffectShapeRingInside = 7, 
  msoTextEffectShapeRingOutside = 8, 
  msoTextEffectShapeArchUpCurve = 9, 
  msoTextEffectShapeArchDownCurve = 10, 
  msoTextEffectShapeCircleCurve = 11, 
  msoTextEffectShapeButtonCurve = 12, 
  msoTextEffectShapeArchUpPour = 13, 
  msoTextEffectShapeArchDownPour = 14, 
  msoTextEffectShapeCirclePour = 15, 
  msoTextEffectShapeButtonPour = 16, 
  msoTextEffectShapeCurveUp = 17, 
  msoTextEffectShapeCurveDown = 18, 
  msoTextEffectShapeCanUp = 19, 
  msoTextEffectShapeCanDown = 20, 
  msoTextEffectShapeWave1 = 21, 
  msoTextEffectShapeWave2 = 22, 
  msoTextEffectShapeDoubleWave1 = 23, 
  msoTextEffectShapeDoubleWave2 = 24, 
  msoTextEffectShapeInflate = 25, 
  msoTextEffectShapeDeflate = 26, 
  msoTextEffectShapeInflateBottom = 27, 
  msoTextEffectShapeDeflateBottom = 28, 
  msoTextEffectShapeInflateTop = 29, 
  msoTextEffectShapeDeflateTop = 30, 
  msoTextEffectShapeDeflateInflate = 31, 
  msoTextEffectShapeDeflateInflateDeflate = 32, 
  msoTextEffectShapeFadeRight = 33, 
  msoTextEffectShapeFadeLeft = 34, 
  msoTextEffectShapeFadeUp = 35, 
  msoTextEffectShapeFadeDown = 36, 
  msoTextEffectShapeSlantUp = 37, 
  msoTextEffectShapeSlantDown = 38, 
  msoTextEffectShapeCascadeUp = 39, 
  msoTextEffectShapeCascadeDown = 40
} MsoPresetTextEffectShape;

typedef enum MsoTextEffectAlignment
{
  msoTextEffectAlignmentMixed = 0xFFFFFFFE, 
  msoTextEffectAlignmentLeft = 1, 
  msoTextEffectAlignmentCentered = 2, 
  msoTextEffectAlignmentRight = 3, 
  msoTextEffectAlignmentLetterJustify = 4, 
  msoTextEffectAlignmentWordJustify = 5, 
  msoTextEffectAlignmentStretchJustify = 6
} MsoTextEffectAlignment;

typedef enum MsoPresetLightingDirection
{
  msoPresetLightingDirectionMixed = 0xFFFFFFFE, 
  msoLightingTopLeft = 1, 
  msoLightingTop = 2, 
  msoLightingTopRight = 3, 
  msoLightingLeft = 4, 
  msoLightingNone = 5, 
  msoLightingRight = 6, 
  msoLightingBottomLeft = 7, 
  msoLightingBottom = 8, 
  msoLightingBottomRight = 9
} MsoPresetLightingDirection;

typedef enum MsoPresetLightingSoftness
{
  msoPresetLightingSoftnessMixed = 0xFFFFFFFE, 
  msoLightingDim = 1, 
  msoLightingNormal = 2, 
  msoLightingBright = 3
} MsoPresetLightingSoftness;

typedef enum MsoPresetMaterial
{
  msoPresetMaterialMixed = 0xFFFFFFFE, 
  msoMaterialMatte = 1, 
  msoMaterialPlastic = 2, 
  msoMaterialMetal = 3, 
  msoMaterialWireFrame = 4
} MsoPresetMaterial;

typedef enum MsoPresetExtrusionDirection
{
  msoPresetExtrusionDirectionMixed = 0xFFFFFFFE, 
  msoExtrusionBottomRight = 1, 
  msoExtrusionBottom = 2, 
  msoExtrusionBottomLeft = 3, 
  msoExtrusionRight = 4, 
  msoExtrusionNone = 5, 
  msoExtrusionLeft = 6, 
  msoExtrusionTopRight = 7, 
  msoExtrusionTop = 8, 
  msoExtrusionTopLeft = 9
} MsoPresetExtrusionDirection;

typedef enum MsoPresetThreeDFormat
{
  msoPresetThreeDFormatMixed = 0xFFFFFFFE, 
  msoThreeD1 = 1, 
  msoThreeD2 = 2, 
  msoThreeD3 = 3, 
  msoThreeD4 = 4, 
  msoThreeD5 = 5, 
  msoThreeD6 = 6, 
  msoThreeD7 = 7, 
  msoThreeD8 = 8, 
  msoThreeD9 = 9, 
  msoThreeD10 = 10, 
  msoThreeD11 = 11, 
  msoThreeD12 = 12, 
  msoThreeD13 = 13, 
  msoThreeD14 = 14, 
  msoThreeD15 = 15, 
  msoThreeD16 = 16, 
  msoThreeD17 = 17, 
  msoThreeD18 = 18, 
  msoThreeD19 = 19, 
  msoThreeD20 = 20
} MsoPresetThreeDFormat;

typedef enum MsoExtrusionColorType
{
  msoExtrusionColorTypeMixed = 0xFFFFFFFE, 
  msoExtrusionColorAutomatic = 1, 
  msoExtrusionColorCustom = 2
} MsoExtrusionColorType;

typedef enum MsoAlignCmd
{
  msoAlignLefts = 0, 
  msoAlignCenters = 1, 
  msoAlignRights = 2, 
  msoAlignTops = 3, 
  msoAlignMiddles = 4, 
  msoAlignBottoms = 5
} MsoAlignCmd;

typedef enum MsoDistributeCmd
{
  msoDistributeHorizontally = 0, 
  msoDistributeVertically = 1
} MsoDistributeCmd;

typedef enum MsoConnectorType
{
  msoConnectorTypeMixed = 0xFFFFFFFE, 
  msoConnectorStraight = 1, 
  msoConnectorElbow = 2, 
  msoConnectorCurve = 3
} MsoConnectorType;

typedef enum MsoHorizontalAnchor
{
  msoHorizontalAnchorMixed = 0xFFFFFFFE, 
  msoAnchorNone = 1, 
  msoAnchorCenter = 2
} MsoHorizontalAnchor;

typedef enum MsoVerticalAnchor
{
  msoVerticalAnchorMixed = 0xFFFFFFFE, 
  msoAnchorTop = 1, 
  msoAnchorTopBaseline = 2, 
  msoAnchorMiddle = 3, 
  msoAnchorBottom = 4, 
  msoAnchorBottomBaseLine = 5
} MsoVerticalAnchor;

typedef enum MsoOrientation
{
  msoOrientationMixed = 0xFFFFFFFE, 
  msoOrientationHorizontal = 1, 
  msoOrientationVertical = 2
} MsoOrientation;

typedef enum MsoZOrderCmd
{
  msoBringToFront = 0, 
  msoSendToBack = 1, 
  msoBringForward = 2, 
  msoSendBackward = 3, 
  msoBringInFrontOfText = 4, 
  msoSendBehindText = 5
} MsoZOrderCmd;

typedef enum MsoSegmentType
{
  msoSegmentLine = 0, 
  msoSegmentCurve = 1
} MsoSegmentType;

typedef enum MsoEditingType
{
  msoEditingAuto = 0, 
  msoEditingCorner = 1, 
  msoEditingSmooth = 2, 
  msoEditingSymmetric = 3
} MsoEditingType;

typedef enum MsoAutoShapeType
{
  msoShapeMixed = 0xFFFFFFFE, 
  msoShapeRectangle = 1, 
  msoShapeParallelogram = 2, 
  msoShapeTrapezoid = 3, 
  msoShapeDiamond = 4, 
  msoShapeRoundedRectangle = 5, 
  msoShapeOctagon = 6, 
  msoShapeIsoscelesTriangle = 7, 
  msoShapeRightTriangle = 8, 
  msoShapeOval = 9, 
  msoShapeHexagon = 10, 
  msoShapeCross = 11, 
  msoShapeRegularPentagon = 12, 
  msoShapeCan = 13, 
  msoShapeCube = 14, 
  msoShapeBevel = 15, 
  msoShapeFoldedCorner = 16, 
  msoShapeSmileyFace = 17, 
  msoShapeDonut = 18, 
  msoShapeNoSymbol = 19, 
  msoShapeBlockArc = 20, 
  msoShapeHeart = 21, 
  msoShapeLightningBolt = 22, 
  msoShapeSun = 23, 
  msoShapeMoon = 24, 
  msoShapeArc = 25, 
  msoShapeDoubleBracket = 26, 
  msoShapeDoubleBrace = 27, 
  msoShapePlaque = 28, 
  msoShapeLeftBracket = 29, 
  msoShapeRightBracket = 30, 
  msoShapeLeftBrace = 31, 
  msoShapeRightBrace = 32, 
  msoShapeRightArrow = 33, 
  msoShapeLeftArrow = 34, 
  msoShapeUpArrow = 35, 
  msoShapeDownArrow = 36, 
  msoShapeLeftRightArrow = 37, 
  msoShapeUpDownArrow = 38, 
  msoShapeQuadArrow = 39, 
  msoShapeLeftRightUpArrow = 40, 
  msoShapeBentArrow = 41, 
  msoShapeUTurnArrow = 42, 
  msoShapeLeftUpArrow = 43, 
  msoShapeBentUpArrow = 44, 
  msoShapeCurvedRightArrow = 45, 
  msoShapeCurvedLeftArrow = 46, 
  msoShapeCurvedUpArrow = 47, 
  msoShapeCurvedDownArrow = 48, 
  msoShapeStripedRightArrow = 49, 
  msoShapeNotchedRightArrow = 50, 
  msoShapePentagon = 51, 
  msoShapeChevron = 52, 
  msoShapeRightArrowCallout = 53, 
  msoShapeLeftArrowCallout = 54, 
  msoShapeUpArrowCallout = 55, 
  msoShapeDownArrowCallout = 56, 
  msoShapeLeftRightArrowCallout = 57, 
  msoShapeUpDownArrowCallout = 58, 
  msoShapeQuadArrowCallout = 59, 
  msoShapeCircularArrow = 60, 
  msoShapeFlowchartProcess = 61, 
  msoShapeFlowchartAlternateProcess = 62, 
  msoShapeFlowchartDecision = 63, 
  msoShapeFlowchartData = 64, 
  msoShapeFlowchartPredefinedProcess = 65, 
  msoShapeFlowchartInternalStorage = 66, 
  msoShapeFlowchartDocument = 67, 
  msoShapeFlowchartMultidocument = 68, 
  msoShapeFlowchartTerminator = 69, 
  msoShapeFlowchartPreparation = 70, 
  msoShapeFlowchartManualInput = 71, 
  msoShapeFlowchartManualOperation = 72, 
  msoShapeFlowchartConnector = 73, 
  msoShapeFlowchartOffpageConnector = 74, 
  msoShapeFlowchartCard = 75, 
  msoShapeFlowchartPunchedTape = 76, 
  msoShapeFlowchartSummingJunction = 77, 
  msoShapeFlowchartOr = 78, 
  msoShapeFlowchartCollate = 79, 
  msoShapeFlowchartSort = 80, 
  msoShapeFlowchartExtract = 81, 
  msoShapeFlowchartMerge = 82, 
  msoShapeFlowchartStoredData = 83, 
  msoShapeFlowchartDelay = 84, 
  msoShapeFlowchartSequentialAccessStorage = 85, 
  msoShapeFlowchartMagneticDisk = 86, 
  msoShapeFlowchartDirectAccessStorage = 87, 
  msoShapeFlowchartDisplay = 88, 
  msoShapeExplosion1 = 89, 
  msoShapeExplosion2 = 90, 
  msoShape4pointStar = 91, 
  msoShape5pointStar = 92, 
  msoShape8pointStar = 93, 
  msoShape16pointStar = 94, 
  msoShape24pointStar = 95, 
  msoShape32pointStar = 96, 
  msoShapeUpRibbon = 97, 
  msoShapeDownRibbon = 98, 
  msoShapeCurvedUpRibbon = 99, 
  msoShapeCurvedDownRibbon = 100, 
  msoShapeVerticalScroll = 101, 
  msoShapeHorizontalScroll = 102, 
  msoShapeWave = 103, 
  msoShapeDoubleWave = 104, 
  msoShapeRectangularCallout = 105, 
  msoShapeRoundedRectangularCallout = 106, 
  msoShapeOvalCallout = 107, 
  msoShapeCloudCallout = 108, 
  msoShapeLineCallout1 = 109, 
  msoShapeLineCallout2 = 110, 
  msoShapeLineCallout3 = 111, 
  msoShapeLineCallout4 = 112, 
  msoShapeLineCallout1AccentBar = 113, 
  msoShapeLineCallout2AccentBar = 114, 
  msoShapeLineCallout3AccentBar = 115, 
  msoShapeLineCallout4AccentBar = 116, 
  msoShapeLineCallout1NoBorder = 117, 
  msoShapeLineCallout2NoBorder = 118, 
  msoShapeLineCallout3NoBorder = 119, 
  msoShapeLineCallout4NoBorder = 120, 
  msoShapeLineCallout1BorderandAccentBar = 121, 
  msoShapeLineCallout2BorderandAccentBar = 122, 
  msoShapeLineCallout3BorderandAccentBar = 123, 
  msoShapeLineCallout4BorderandAccentBar = 124, 
  msoShapeActionButtonCustom = 125, 
  msoShapeActionButtonHome = 126, 
  msoShapeActionButtonHelp = 127, 
  msoShapeActionButtonInformation = 128, 
  msoShapeActionButtonBackorPrevious = 129, 
  msoShapeActionButtonForwardorNext = 130, 
  msoShapeActionButtonBeginning = 131, 
  msoShapeActionButtonEnd = 132, 
  msoShapeActionButtonReturn = 133, 
  msoShapeActionButtonDocument = 134, 
  msoShapeActionButtonSound = 135, 
  msoShapeActionButtonMovie = 136, 
  msoShapeBalloon = 137, 
  msoShapeNotPrimitive = 138
} MsoAutoShapeType;

typedef enum MsoShapeType
{
  msoShapeTypeMixed = 0xFFFFFFFE, 
  msoAutoShape = 1, 
  msoCallout = 2, 
  msoChart = 3, 
  msoComment = 4, 
  msoFreeform = 5, 
  msoGroup = 6, 
  msoEmbeddedOLEObject = 7, 
  msoFormControl = 8, 
  msoLine = 9, 
  msoLinkedOLEObject = 10, 
  msoLinkedPicture = 11, 
  msoOLEControlObject = 12, 
  msoPicture = 13, 
  msoPlaceholder = 14, 
  msoTextEffect = 15, 
  msoMedia = 16, 
  msoTextBox = 17, 
  msoScriptAnchor = 18, 
  msoTable = 19
} MsoShapeType;

typedef enum MsoFlipCmd
{
  msoFlipHorizontal = 0, 
  msoFlipVertical = 1
} MsoFlipCmd;

typedef enum MsoTriState
{
  msoTrue = 0xFFFFFFFF, 
  msoFalse = 0, 
  msoCTrue = 1, 
  msoTriStateToggle = 0xFFFFFFFD, 
  msoTriStateMixed = 0xFFFFFFFE
} MsoTriState;

typedef enum MsoColorType
{
  msoColorTypeMixed = 0xFFFFFFFE, 
  msoColorTypeRGB = 1, 
  msoColorTypeScheme = 2
} MsoColorType;

typedef enum MsoPictureColorType
{
  msoPictureMixed = 0xFFFFFFFE, 
  msoPictureAutomatic = 1, 
  msoPictureGrayscale = 2, 
  msoPictureBlackAndWhite = 3, 
  msoPictureWatermark = 4
} MsoPictureColorType;

typedef enum MsoCalloutAngleType
{
  msoCalloutAngleMixed = 0xFFFFFFFE, 
  msoCalloutAngleAutomatic = 1, 
  msoCalloutAngle30 = 2, 
  msoCalloutAngle45 = 3, 
  msoCalloutAngle60 = 4, 
  msoCalloutAngle90 = 5
} MsoCalloutAngleType;

typedef enum MsoCalloutDropType
{
  msoCalloutDropMixed = 0xFFFFFFFE, 
  msoCalloutDropCustom = 1, 
  msoCalloutDropTop = 2, 
  msoCalloutDropCenter = 3, 
  msoCalloutDropBottom = 4
} MsoCalloutDropType;

typedef enum MsoCalloutType
{
  msoCalloutMixed = 0xFFFFFFFE, 
  msoCalloutOne = 1, 
  msoCalloutTwo = 2, 
  msoCalloutThree = 3, 
  msoCalloutFour = 4
} MsoCalloutType;

typedef enum MsoBlackWhiteMode
{
  msoBlackWhiteMixed = 0xFFFFFFFE, 
  msoBlackWhiteAutomatic = 1, 
  msoBlackWhiteGrayScale = 2, 
  msoBlackWhiteLightGrayScale = 3, 
  msoBlackWhiteInverseGrayScale = 4, 
  msoBlackWhiteGrayOutline = 5, 
  msoBlackWhiteBlackTextAndLine = 6, 
  msoBlackWhiteHighContrast = 7, 
  msoBlackWhiteBlack = 8, 
  msoBlackWhiteWhite = 9, 
  msoBlackWhiteDontShow = 10
} MsoBlackWhiteMode;

typedef enum MsoMixedType
{
  msoIntegerMixed = 32768, 
  msoSingleMixed = 0x80000000
} MsoMixedType;

typedef enum MsoTextOrientation
{
  msoTextOrientationMixed = 0xFFFFFFFE, 
  msoTextOrientationHorizontal = 1, 
  msoTextOrientationUpward = 2, 
  msoTextOrientationDownward = 3, 
  msoTextOrientationVerticalFarEast = 4, 
  msoTextOrientationVertical = 5, 
  msoTextOrientationHorizontalRotatedFarEast = 6
} MsoTextOrientation;

typedef enum MsoScaleFrom
{
  msoScaleFromTopLeft = 0, 
  msoScaleFromMiddle = 1, 
  msoScaleFromBottomRight = 2
} MsoScaleFrom;

typedef enum MsoBarPosition
{
  msoBarLeft = 0, 
  msoBarTop = 1, 
  msoBarRight = 2, 
  msoBarBottom = 3, 
  msoBarFloating = 4, 
  msoBarPopup = 5, 
  msoBarMenuBar = 6
} MsoBarPosition;

typedef enum MsoBarProtection
{
  msoBarNoProtection = 0, 
  msoBarNoCustomize = 1, 
  msoBarNoResize = 2, 
  msoBarNoMove = 4, 
  msoBarNoChangeVisible = 8, 
  msoBarNoChangeDock = 16, 
  msoBarNoVerticalDock = 32, 
  msoBarNoHorizontalDock = 64
} MsoBarProtection;

typedef enum MsoBarType
{
  msoBarTypeNormal = 0, 
  msoBarTypeMenuBar = 1, 
  msoBarTypePopup = 2
} MsoBarType;

typedef enum MsoControlType
{
  msoControlCustom = 0, 
  msoControlButton = 1, 
  msoControlEdit = 2, 
  msoControlDropdown = 3, 
  msoControlComboBox = 4, 
  msoControlButtonDropdown = 5, 
  msoControlSplitDropdown = 6, 
  msoControlOCXDropdown = 7, 
  msoControlGenericDropdown = 8, 
  msoControlGraphicDropdown = 9, 
  msoControlPopup = 10, 
  msoControlGraphicPopup = 11, 
  msoControlButtonPopup = 12, 
  msoControlSplitButtonPopup = 13, 
  msoControlSplitButtonMRUPopup = 14, 
  msoControlLabel = 15, 
  msoControlExpandingGrid = 16, 
  msoControlSplitExpandingGrid = 17, 
  msoControlGrid = 18, 
  msoControlGauge = 19, 
  msoControlGraphicCombo = 20, 
  msoControlPane = 21, 
  msoControlActiveX = 22
} MsoControlType;

typedef enum MsoButtonState
{
  msoButtonUp = 0, 
  msoButtonDown = 0xFFFFFFFF, 
  msoButtonMixed = 2
} MsoButtonState;

typedef enum MsoControlOLEUsage
{
  msoControlOLEUsageNeither = 0, 
  msoControlOLEUsageServer = 1, 
  msoControlOLEUsageClient = 2, 
  msoControlOLEUsageBoth = 3
} MsoControlOLEUsage;

typedef enum MsoButtonStyleHidden
{
  msoButtonWrapText = 4, 
  msoButtonTextBelow = 8
} MsoButtonStyleHidden;

typedef enum MsoButtonStyle
{
  msoButtonAutomatic = 0, 
  msoButtonIcon = 1, 
  msoButtonCaption = 2, 
  msoButtonIconAndCaption = 3, 
  msoButtonIconAndWrapCaption = 7, 
  msoButtonIconAndCaptionBelow = 11, 
  msoButtonWrapCaption = 14, 
  msoButtonIconAndWrapCaptionBelow = 15
} MsoButtonStyle;

typedef enum MsoComboStyle
{
  msoComboNormal = 0, 
  msoComboLabel = 1
} MsoComboStyle;

typedef enum MsoOLEMenuGroup
{
  msoOLEMenuGroupNone = 0xFFFFFFFF, 
  msoOLEMenuGroupFile = 0, 
  msoOLEMenuGroupEdit = 1, 
  msoOLEMenuGroupContainer = 2, 
  msoOLEMenuGroupObject = 3, 
  msoOLEMenuGroupWindow = 4, 
  msoOLEMenuGroupHelp = 5
} MsoOLEMenuGroup;

typedef enum MsoMenuAnimation
{
  msoMenuAnimationNone = 0, 
  msoMenuAnimationRandom = 1, 
  msoMenuAnimationUnfold = 2, 
  msoMenuAnimationSlide = 3
} MsoMenuAnimation;

typedef enum MsoBarRow
{
  msoBarRowFirst = 0, 
  msoBarRowLast = 0xFFFFFFFF
} MsoBarRow;

typedef enum MsoCommandBarButtonHyperlinkType
{
  msoCommandBarButtonHyperlinkNone = 0, 
  msoCommandBarButtonHyperlinkOpen = 1, 
  msoCommandBarButtonHyperlinkInsertPicture = 2
} MsoCommandBarButtonHyperlinkType;

typedef enum MsoHyperlinkType
{
  msoHyperlinkRange = 0, 
  msoHyperlinkShape = 1, 
  msoHyperlinkInlineShape = 2
} MsoHyperlinkType;

typedef enum MsoExtraInfoMethod
{
  msoMethodGet = 0, 
  msoMethodPost = 1
} MsoExtraInfoMethod;

typedef enum MsoAnimationType
{
  msoAnimationIdle = 1, 
  msoAnimationGreeting = 2, 
  msoAnimationGoodbye = 3, 
  msoAnimationBeginSpeaking = 4, 
  msoAnimationRestPose = 5, 
  msoAnimationCharacterSuccessMajor = 6, 
  msoAnimationGetAttentionMajor = 11, 
  msoAnimationGetAttentionMinor = 12, 
  msoAnimationSearching = 13, 
  msoAnimationPrinting = 18, 
  msoAnimationGestureRight = 19, 
  msoAnimationWritingNotingSomething = 22, 
  msoAnimationWorkingAtSomething = 23, 
  msoAnimationThinking = 24, 
  msoAnimationSendingMail = 25, 
  msoAnimationListensToComputer = 26, 
  msoAnimationDisappear = 31, 
  msoAnimationAppear = 32, 
  msoAnimationGetArtsy = 100, 
  msoAnimationGetTechy = 101, 
  msoAnimationGetWizardy = 102, 
  msoAnimationCheckingSomething = 103, 
  msoAnimationLookDown = 104, 
  msoAnimationLookDownLeft = 105, 
  msoAnimationLookDownRight = 106, 
  msoAnimationLookLeft = 107, 
  msoAnimationLookRight = 108, 
  msoAnimationLookUp = 109, 
  msoAnimationLookUpLeft = 110, 
  msoAnimationLookUpRight = 111, 
  msoAnimationSaving = 112, 
  msoAnimationGestureDown = 113, 
  msoAnimationGestureLeft = 114, 
  msoAnimationGestureUp = 115, 
  msoAnimationEmptyTrash = 116
} MsoAnimationType;

typedef enum MsoButtonSetType
{
  msoButtonSetNone = 0, 
  msoButtonSetOK = 1, 
  msoButtonSetCancel = 2, 
  msoButtonSetOkCancel = 3, 
  msoButtonSetYesNo = 4, 
  msoButtonSetYesNoCancel = 5, 
  msoButtonSetBackClose = 6, 
  msoButtonSetNextClose = 7, 
  msoButtonSetBackNextClose = 8, 
  msoButtonSetRetryCancel = 9, 
  msoButtonSetAbortRetryIgnore = 10, 
  msoButtonSetSearchClose = 11, 
  msoButtonSetBackNextSnooze = 12, 
  msoButtonSetTipsOptionsClose = 13, 
  msoButtonSetYesAllNoCancel = 14
} MsoButtonSetType;

typedef enum MsoIconType
{
  msoIconNone = 0, 
  msoIconAlert = 2, 
  msoIconTip = 3, 
  msoIconAlertInfo = 4, 
  msoIconAlertWarning = 5, 
  msoIconAlertQuery = 6, 
  msoIconAlertCritical = 7
} MsoIconType;

typedef enum MsoBalloonType
{
  msoBalloonTypeButtons = 0, 
  msoBalloonTypeBullets = 1, 
  msoBalloonTypeNumbers = 2
} MsoBalloonType;

typedef enum MsoModeType
{
  msoModeModal = 0, 
  msoModeAutoDown = 1, 
  msoModeModeless = 2
} MsoModeType;

typedef enum MsoBalloonErrorType
{
  msoBalloonErrorNone = 0, 
  msoBalloonErrorOther = 1, 
  msoBalloonErrorTooBig = 2, 
  msoBalloonErrorOutOfMemory = 3, 
  msoBalloonErrorBadPictureRef = 4, 
  msoBalloonErrorBadReference = 5, 
  msoBalloonErrorButtonlessModal = 6, 
  msoBalloonErrorButtonModeless = 7, 
  msoBalloonErrorBadCharacter = 8, 
  msoBalloonErrorCOMFailure = 9, 
  msoBalloonErrorCharNotTopmostForModal = 10, 
  msoBalloonErrorTooManyControls = 11
} MsoBalloonErrorType;

typedef enum MsoWizardActType
{
  msoWizardActInactive = 0, 
  msoWizardActActive = 1, 
  msoWizardActSuspend = 2, 
  msoWizardActResume = 3
} MsoWizardActType;

typedef enum MsoWizardMsgType
{
  msoWizardMsgLocalStateOn = 1, 
  msoWizardMsgLocalStateOff = 2, 
  msoWizardMsgShowHelp = 3, 
  msoWizardMsgSuspending = 4, 
  msoWizardMsgResuming = 5
} MsoWizardMsgType;

typedef enum MsoBalloonButtonType
{
  msoBalloonButtonYesToAll = 0xFFFFFFF1, 
  msoBalloonButtonOptions = 0xFFFFFFF2, 
  msoBalloonButtonTips = 0xFFFFFFF3, 
  msoBalloonButtonClose = 0xFFFFFFF4, 
  msoBalloonButtonSnooze = 0xFFFFFFF5, 
  msoBalloonButtonSearch = 0xFFFFFFF6, 
  msoBalloonButtonIgnore = 0xFFFFFFF7, 
  msoBalloonButtonAbort = 0xFFFFFFF8, 
  msoBalloonButtonRetry = 0xFFFFFFF9, 
  msoBalloonButtonNext = 0xFFFFFFFA, 
  msoBalloonButtonBack = 0xFFFFFFFB, 
  msoBalloonButtonNo = 0xFFFFFFFC, 
  msoBalloonButtonYes = 0xFFFFFFFD, 
  msoBalloonButtonCancel = 0xFFFFFFFE, 
  msoBalloonButtonOK = 0xFFFFFFFF, 
  msoBalloonButtonNull = 0
} MsoBalloonButtonType;

typedef enum DocProperties
{
  offPropertyTypeNumber = 1, 
  offPropertyTypeBoolean = 2, 
  offPropertyTypeDate = 3, 
  offPropertyTypeString = 4, 
  offPropertyTypeFloat = 5
} DocProperties;

typedef enum MsoDocProperties
{
  msoPropertyTypeNumber = 1, 
  msoPropertyTypeBoolean = 2, 
  msoPropertyTypeDate = 3, 
  msoPropertyTypeString = 4, 
  msoPropertyTypeFloat = 5
} MsoDocProperties;

typedef enum MsoAppLanguageID
{
  msoLanguageIDInstall = 1, 
  msoLanguageIDUI = 2, 
  msoLanguageIDHelp = 3, 
  msoLanguageIDExeMode = 4, 
  msoLanguageIDUIPrevious = 5
} MsoAppLanguageID;

typedef enum MsoFarEastLineBreakLanguageID
{
  MsoFarEastLineBreakLanguageJapanese = 1041, 
  MsoFarEastLineBreakLanguageKorean = 1042, 
  MsoFarEastLineBreakLanguageSimplifiedChinese = 2052, 
  MsoFarEastLineBreakLanguageTraditionalChinese = 1028
} MsoFarEastLineBreakLanguageID;

typedef enum MsoFeatureInstall
{
  msoFeatureInstallNone = 0, 
  msoFeatureInstallOnDemand = 1, 
  msoFeatureInstallOnDemandWithUI = 2
} MsoFeatureInstall;

typedef enum MsoScriptLanguage
{
  msoScriptLanguageJava = 1, 
  msoScriptLanguageVisualBasic = 2, 
  msoScriptLanguageASP = 3, 
  msoScriptLanguageOther = 4
} MsoScriptLanguage;

typedef enum MsoScriptLocation
{
  msoScriptLocationInHead = 1, 
  msoScriptLocationInBody = 2
} MsoScriptLocation;

typedef enum MsoFileFindOptions
{
  msoOptionsNew = 1, 
  msoOptionsAdd = 2, 
  msoOptionsWithin = 3
} MsoFileFindOptions;

typedef enum MsoFileFindView
{
  msoViewFileInfo = 1, 
  msoViewPreview = 2, 
  msoViewSummaryInfo = 3
} MsoFileFindView;

typedef enum MsoFileFindSortBy
{
  msoFileFindSortbyAuthor = 1, 
  msoFileFindSortbyDateCreated = 2, 
  msoFileFindSortbyLastSavedBy = 3, 
  msoFileFindSortbyDateSaved = 4, 
  msoFileFindSortbyFileName = 5, 
  msoFileFindSortbySize = 6, 
  msoFileFindSortbyTitle = 7
} MsoFileFindSortBy;

typedef enum MsoFileFindListBy
{
  msoListbyName = 1, 
  msoListbyTitle = 2
} MsoFileFindListBy;

typedef enum MsoLastModified
{
  msoLastModifiedYesterday = 1, 
  msoLastModifiedToday = 2, 
  msoLastModifiedLastWeek = 3, 
  msoLastModifiedThisWeek = 4, 
  msoLastModifiedLastMonth = 5, 
  msoLastModifiedThisMonth = 6, 
  msoLastModifiedAnyTime = 7
} MsoLastModified;

typedef enum MsoSortBy
{
  msoSortByFileName = 1, 
  msoSortBySize = 2, 
  msoSortByFileType = 3, 
  msoSortByLastModified = 4
} MsoSortBy;

typedef enum MsoSortOrder
{
  msoSortOrderAscending = 1, 
  msoSortOrderDescending = 2
} MsoSortOrder;

typedef enum MsoConnector
{
  msoConnectorAnd = 1, 
  msoConnectorOr = 2
} MsoConnector;

typedef enum MsoCondition
{
  msoConditionFileTypeAllFiles = 1, 
  msoConditionFileTypeOfficeFiles = 2, 
  msoConditionFileTypeWordDocuments = 3, 
  msoConditionFileTypeExcelWorkbooks = 4, 
  msoConditionFileTypePowerPointPresentations = 5, 
  msoConditionFileTypeBinders = 6, 
  msoConditionFileTypeDatabases = 7, 
  msoConditionFileTypeTemplates = 8, 
  msoConditionIncludes = 9, 
  msoConditionIncludesPhrase = 10, 
  msoConditionBeginsWith = 11, 
  msoConditionEndsWith = 12, 
  msoConditionIncludesNearEachOther = 13, 
  msoConditionIsExactly = 14, 
  msoConditionIsNot = 15, 
  msoConditionYesterday = 16, 
  msoConditionToday = 17, 
  msoConditionTomorrow = 18, 
  msoConditionLastWeek = 19, 
  msoConditionThisWeek = 20, 
  msoConditionNextWeek = 21, 
  msoConditionLastMonth = 22, 
  msoConditionThisMonth = 23, 
  msoConditionNextMonth = 24, 
  msoConditionAnytime = 25, 
  msoConditionAnytimeBetween = 26, 
  msoConditionOn = 27, 
  msoConditionOnOrAfter = 28, 
  msoConditionOnOrBefore = 29, 
  msoConditionInTheNext = 30, 
  msoConditionInTheLast = 31, 
  msoConditionEquals = 32, 
  msoConditionDoesNotEqual = 33, 
  msoConditionAnyNumberBetween = 34, 
  msoConditionAtMost = 35, 
  msoConditionAtLeast = 36, 
  msoConditionMoreThan = 37, 
  msoConditionLessThan = 38, 
  msoConditionIsYes = 39, 
  msoConditionIsNo = 40
} MsoCondition;

typedef enum MsoFileType
{
  msoFileTypeAllFiles = 1, 
  msoFileTypeOfficeFiles = 2, 
  msoFileTypeWordDocuments = 3, 
  msoFileTypeExcelWorkbooks = 4, 
  msoFileTypePowerPointPresentations = 5, 
  msoFileTypeBinders = 6, 
  msoFileTypeDatabases = 7, 
  msoFileTypeTemplates = 8
} MsoFileType;

typedef enum MsoLanguageID
{
  msoLanguageIDMixed = 0xFFFFFFFE, 
  msoLanguageIDNone = 0, 
  msoLanguageIDNoProofing = 1024, 
  msoLanguageIDAfrikaans = 1078, 
  msoLanguageIDAlbanian = 1052, 
  msoLanguageIDArabicAlgeria = 5121, 
  msoLanguageIDArabicBahrain = 15361, 
  msoLanguageIDArabicEgypt = 3073, 
  msoLanguageIDArabicIraq = 2049, 
  msoLanguageIDArabicJordan = 11265, 
  msoLanguageIDArabicKuwait = 13313, 
  msoLanguageIDArabicLebanon = 12289, 
  msoLanguageIDArabicLibya = 4097, 
  msoLanguageIDArabicMorocco = 6145, 
  msoLanguageIDArabicOman = 8193, 
  msoLanguageIDArabicQatar = 16385, 
  msoLanguageIDArabic = 1025, 
  msoLanguageIDArabicSyria = 10241, 
  msoLanguageIDArabicTunisia = 7169, 
  msoLanguageIDArabicUAE = 14337, 
  msoLanguageIDArabicYemen = 9217, 
  msoLanguageIDArmenian = 1067, 
  msoLanguageIDAssamese = 1101, 
  msoLanguageIDAzeriCyrillic = 2092, 
  msoLanguageIDAzeriLatin = 1068, 
  msoLanguageIDBasque = 1069, 
  msoLanguageIDByelorussian = 1059, 
  msoLanguageIDBengali = 1093, 
  msoLanguageIDBulgarian = 1026, 
  msoLanguageIDBurmese = 1109, 
  msoLanguageIDCatalan = 1027, 
  msoLanguageIDChineseHongKong = 3076, 
  msoLanguageIDChineseMacao = 5124, 
  msoLanguageIDSimplifiedChinese = 2052, 
  msoLanguageIDChineseSingapore = 4100, 
  msoLanguageIDTraditionalChinese = 1028, 
  msoLanguageIDCroatian = 1050, 
  msoLanguageIDCzech = 1029, 
  msoLanguageIDDanish = 1030, 
  msoLanguageIDBelgianDutch = 2067, 
  msoLanguageIDDutch = 1043, 
  msoLanguageIDEnglishAUS = 3081, 
  msoLanguageIDEnglishBelize = 10249, 
  msoLanguageIDEnglishCanadian = 4105, 
  msoLanguageIDEnglishCaribbean = 9225, 
  msoLanguageIDEnglishIreland = 6153, 
  msoLanguageIDEnglishJamaica = 8201, 
  msoLanguageIDEnglishNewZealand = 5129, 
  msoLanguageIDEnglishPhilippines = 13321, 
  msoLanguageIDEnglishSouthAfrica = 7177, 
  msoLanguageIDEnglishTrinidad = 11273, 
  msoLanguageIDEnglishUK = 2057, 
  msoLanguageIDEnglishUS = 1033, 
  msoLanguageIDEnglishZimbabwe = 12297, 
  msoLanguageIDEstonian = 1061, 
  msoLanguageIDFaeroese = 1080, 
  msoLanguageIDFarsi = 1065, 
  msoLanguageIDFinnish = 1035, 
  msoLanguageIDBelgianFrench = 2060, 
  msoLanguageIDFrenchCameroon = 11276, 
  msoLanguageIDFrenchCanadian = 3084, 
  msoLanguageIDFrenchCotedIvoire = 12300, 
  msoLanguageIDFrench = 1036, 
  msoLanguageIDFrenchLuxembourg = 5132, 
  msoLanguageIDFrenchMali = 13324, 
  msoLanguageIDFrenchMonaco = 6156, 
  msoLanguageIDFrenchReunion = 8204, 
  msoLanguageIDFrenchSenegal = 10252, 
  msoLanguageIDSwissFrench = 4108, 
  msoLanguageIDFrenchWestIndies = 7180, 
  msoLanguageIDFrenchZaire = 9228, 
  msoLanguageIDFrisianNetherlands = 1122, 
  msoLanguageIDGaelicIreland = 2108, 
  msoLanguageIDGaelicScotland = 1084, 
  msoLanguageIDGalician = 1110, 
  msoLanguageIDGeorgian = 1079, 
  msoLanguageIDGermanAustria = 3079, 
  msoLanguageIDGerman = 1031, 
  msoLanguageIDGermanLiechtenstein = 5127, 
  msoLanguageIDGermanLuxembourg = 4103, 
  msoLanguageIDSwissGerman = 2055, 
  msoLanguageIDGreek = 1032, 
  msoLanguageIDGujarati = 1095, 
  msoLanguageIDHebrew = 1037, 
  msoLanguageIDHindi = 1081, 
  msoLanguageIDHungarian = 1038, 
  msoLanguageIDIcelandic = 1039, 
  msoLanguageIDIndonesian = 1057, 
  msoLanguageIDItalian = 1040, 
  msoLanguageIDSwissItalian = 2064, 
  msoLanguageIDJapanese = 1041, 
  msoLanguageIDKannada = 1099, 
  msoLanguageIDKashmiri = 1120, 
  msoLanguageIDKazakh = 1087, 
  msoLanguageIDKhmer = 1107, 
  msoLanguageIDKirghiz = 1088, 
  msoLanguageIDKonkani = 1111, 
  msoLanguageIDKorean = 1042, 
  msoLanguageIDLao = 1108, 
  msoLanguageIDLatvian = 1062, 
  msoLanguageIDLithuanian = 1063, 
  msoLanguageIDMacedonian = 1071, 
  msoLanguageIDMalaysian = 1086, 
  msoLanguageIDMalayBruneiDarussalam = 2110, 
  msoLanguageIDMalayalam = 1100, 
  msoLanguageIDMaltese = 1082, 
  msoLanguageIDManipuri = 1112, 
  msoLanguageIDMarathi = 1102, 
  msoLanguageIDMongolian = 1104, 
  msoLanguageIDNepali = 1121, 
  msoLanguageIDNorwegianBokmol = 1044, 
  msoLanguageIDNorwegianNynorsk = 2068, 
  msoLanguageIDOriya = 1096, 
  msoLanguageIDPolish = 1045, 
  msoLanguageIDBrazilianPortuguese = 1046, 
  msoLanguageIDPortuguese = 2070, 
  msoLanguageIDPunjabi = 1094, 
  msoLanguageIDRhaetoRomanic = 1047, 
  msoLanguageIDRomanianMoldova = 2072, 
  msoLanguageIDRomanian = 1048, 
  msoLanguageIDRussianMoldova = 2073, 
  msoLanguageIDRussian = 1049, 
  msoLanguageIDSamiLappish = 1083, 
  msoLanguageIDSanskrit = 1103, 
  msoLanguageIDSerbianCyrillic = 3098, 
  msoLanguageIDSerbianLatin = 2074, 
  msoLanguageIDSesotho = 1072, 
  msoLanguageIDSindhi = 1113, 
  msoLanguageIDSlovak = 1051, 
  msoLanguageIDSlovenian = 1060, 
  msoLanguageIDSorbian = 1070, 
  msoLanguageIDSpanishArgentina = 11274, 
  msoLanguageIDSpanishBolivia = 16394, 
  msoLanguageIDSpanishChile = 13322, 
  msoLanguageIDSpanishColombia = 9226, 
  msoLanguageIDSpanishCostaRica = 5130, 
  msoLanguageIDSpanishDominicanRepublic = 7178, 
  msoLanguageIDSpanishEcuador = 12298, 
  msoLanguageIDSpanishElSalvador = 17418, 
  msoLanguageIDSpanishGuatemala = 4106, 
  msoLanguageIDSpanishHonduras = 18442, 
  msoLanguageIDMexicanSpanish = 2058, 
  msoLanguageIDSpanishNicaragua = 19466, 
  msoLanguageIDSpanishPanama = 6154, 
  msoLanguageIDSpanishParaguay = 15370, 
  msoLanguageIDSpanishPeru = 10250, 
  msoLanguageIDSpanishPuertoRico = 20490, 
  msoLanguageIDSpanishModernSort = 3082, 
  msoLanguageIDSpanish = 1034, 
  msoLanguageIDSpanishUruguay = 14346, 
  msoLanguageIDSpanishVenezuela = 8202, 
  msoLanguageIDSutu = 1072, 
  msoLanguageIDSwahili = 1089, 
  msoLanguageIDSwedishFinland = 2077, 
  msoLanguageIDSwedish = 1053, 
  msoLanguageIDTajik = 1064, 
  msoLanguageIDTamil = 1097, 
  msoLanguageIDTatar = 1092, 
  msoLanguageIDTelugu = 1098, 
  msoLanguageIDThai = 1054, 
  msoLanguageIDTibetan = 1105, 
  msoLanguageIDTsonga = 1073, 
  msoLanguageIDTswana = 1074, 
  msoLanguageIDTurkish = 1055, 
  msoLanguageIDTurkmen = 1090, 
  msoLanguageIDUkrainian = 1058, 
  msoLanguageIDUrdu = 1056, 
  msoLanguageIDUzbekCyrillic = 2115, 
  msoLanguageIDUzbekLatin = 1091, 
  msoLanguageIDVenda = 1075, 
  msoLanguageIDVietnamese = 1066, 
  msoLanguageIDWelsh = 1106, 
  msoLanguageIDXhosa = 1076, 
  msoLanguageIDZulu = 1077
} MsoLanguageID;

typedef enum MsoScreenSize
{
  msoScreenSize544x376 = 0, 
  msoScreenSize640x480 = 1, 
  msoScreenSize720x512 = 2, 
  msoScreenSize800x600 = 3, 
  msoScreenSize1024x768 = 4, 
  msoScreenSize1152x882 = 5, 
  msoScreenSize1152x900 = 6, 
  msoScreenSize1280x1024 = 7, 
  msoScreenSize1600x1200 = 8, 
  msoScreenSize1800x1440 = 9, 
  msoScreenSize1920x1200 = 10
} MsoScreenSize;

typedef enum MsoCharacterSet
{
  msoCharacterSetArabic = 1, 
  msoCharacterSetCyrillic = 2, 
  msoCharacterSetEnglishWesternEuropeanOtherLatinScript = 3, 
  msoCharacterSetGreek = 4, 
  msoCharacterSetHebrew = 5, 
  msoCharacterSetJapanese = 6, 
  msoCharacterSetKorean = 7, 
  msoCharacterSetMultilingualUnicode = 8, 
  msoCharacterSetSimplifiedChinese = 9, 
  msoCharacterSetThai = 10, 
  msoCharacterSetTraditionalChinese = 11, 
  msoCharacterSetVietnamese = 12
} MsoCharacterSet;

typedef enum MsoEncoding
{
  msoEncodingThai = 874, 
  msoEncodingJapaneseShiftJIS = 932, 
  msoEncodingSimplifiedChineseGBK = 936, 
  msoEncodingKorean = 949, 
  msoEncodingTraditionalChineseBig5 = 950, 
  msoEncodingUnicodeLittleEndian = 1200, 
  msoEncodingUnicodeBigEndian = 1201, 
  msoEncodingCentralEuropean = 1250, 
  msoEncodingCyrillic = 1251, 
  msoEncodingWestern = 1252, 
  msoEncodingGreek = 1253, 
  msoEncodingTurkish = 1254, 
  msoEncodingHebrew = 1255, 
  msoEncodingArabic = 1256, 
  msoEncodingBaltic = 1257, 
  msoEncodingVietnamese = 1258, 
  msoEncodingAutoDetect = 50001, 
  msoEncodingJapaneseAutoDetect = 50932, 
  msoEncodingSimplifiedChineseAutoDetect = 50936, 
  msoEncodingKoreanAutoDetect = 50949, 
  msoEncodingTraditionalChineseAutoDetect = 50950, 
  msoEncodingCyrillicAutoDetect = 51251, 
  msoEncodingGreekAutoDetect = 51253, 
  msoEncodingArabicAutoDetect = 51256, 
  msoEncodingISO88591Latin1 = 28591, 
  msoEncodingISO88592CentralEurope = 28592, 
  msoEncodingISO88593Latin3 = 28593, 
  msoEncodingISO88594Baltic = 28594, 
  msoEncodingISO88595Cyrillic = 28595, 
  msoEncodingISO88596Arabic = 28596, 
  msoEncodingISO88597Greek = 28597, 
  msoEncodingISO88598Hebrew = 28598, 
  msoEncodingISO88599Turkish = 28599, 
  msoEncodingISO885915Latin9 = 28605, 
  msoEncodingISO2022JPNoHalfwidthKatakana = 50220, 
  msoEncodingISO2022JPJISX02021984 = 50221, 
  msoEncodingISO2022JPJISX02011989 = 50222, 
  msoEncodingISO2022KR = 50225, 
  msoEncodingISO2022CNTraditionalChinese = 50227, 
  msoEncodingISO2022CNSimplifiedChinese = 50229, 
  msoEncodingMacRoman = 10000, 
  msoEncodingMacJapanese = 10001, 
  msoEncodingMacTraditionalChineseBig5 = 10002, 
  msoEncodingMacKorean = 10003, 
  msoEncodingMacArabic = 10004, 
  msoEncodingMacHebrew = 10005, 
  msoEncodingMacGreek1 = 10006, 
  msoEncodingMacCyrillic = 10007, 
  msoEncodingMacSimplifiedChineseGB2312 = 10008, 
  msoEncodingMacRomania = 10010, 
  msoEncodingMacUkraine = 10017, 
  msoEncodingMacLatin2 = 10029, 
  msoEncodingMacIcelandic = 10079, 
  msoEncodingMacTurkish = 10081, 
  msoEncodingMacCroatia = 10082, 
  msoEncodingEBCDICUSCanada = 37, 
  msoEncodingEBCDICInternational = 500, 
  msoEncodingEBCDICMultilingualROECELatin2 = 870, 
  msoEncodingEBCDICGreekModern = 875, 
  msoEncodingEBCDICTurkishLatin5 = 1026, 
  msoEncodingEBCDICGermany = 20273, 
  msoEncodingEBCDICDenmarkNorway = 20277, 
  msoEncodingEBCDICFinlandSweden = 20278, 
  msoEncodingEBCDICItaly = 20280, 
  msoEncodingEBCDICLatinAmericaSpain = 20284, 
  msoEncodingEBCDICUnitedKingdom = 20285, 
  msoEncodingEBCDICJapaneseKatakanaExtended = 20290, 
  msoEncodingEBCDICFrance = 20297, 
  msoEncodingEBCDICArabic = 20420, 
  msoEncodingEBCDICGreek = 20423, 
  msoEncodingEBCDICHebrew = 20424, 
  msoEncodingEBCDICKoreanExtended = 20833, 
  msoEncodingEBCDICThai = 20838, 
  msoEncodingEBCDICIcelandic = 20871, 
  msoEncodingEBCDICTurkish = 20905, 
  msoEncodingEBCDICRussian = 20880, 
  msoEncodingEBCDICSerbianBulgarian = 21025, 
  msoEncodingEBCDICJapaneseKatakanaExtendedAndJapanese = 50930, 
  msoEncodingEBCDICUSCanadaandJapanese = 50931, 
  msoEncodingEBCDICKoreanExtendedAndKorean = 50933, 
  msoEncodingEBCDICSimplifiedChineseExtendedAndSimplifiedChinese = 50935, 
  msoEncodingEBCDICUSCanadaAndTraditionalChinese = 50937, 
  msoEncodingEBCDICJapaneseLatinExtendedAndJapanese = 50939, 
  msoEncodingOEMUnitedStates = 437, 
  msoEncodingOEMGreek437G = 737, 
  msoEncodingOEMBaltic = 775, 
  msoEncodingOEMMultilingualLatinI = 850, 
  msoEncodingOEMMultilingualLatinII = 852, 
  msoEncodingOEMCyrillic = 855, 
  msoEncodingOEMTurkish = 857, 
  msoEncodingOEMPortuguese = 860, 
  msoEncodingOEMIcelandic = 861, 
  msoEncodingOEMHebrew = 862, 
  msoEncodingOEMCanadianFrench = 863, 
  msoEncodingOEMArabic = 864, 
  msoEncodingOEMNordic = 865, 
  msoEncodingOEMCyrillicII = 866, 
  msoEncodingOEMModernGreek = 869, 
  msoEncodingEUCJapanese = 51932, 
  msoEncodingEUCChineseSimplifiedChinese = 51936, 
  msoEncodingEUCKorean = 51949, 
  msoEncodingEUCTaiwaneseTraditionalChinese = 51950, 
  msoEncodingArabicASMO = 708, 
  msoEncodingArabicTransparentASMO = 720, 
  msoEncodingKoreanJohab = 1361, 
  msoEncodingTaiwanCNS = 20000, 
  msoEncodingTaiwanTCA = 20001, 
  msoEncodingTaiwanEten = 20002, 
  msoEncodingTaiwanIBM5550 = 20003, 
  msoEncodingTaiwanTeleText = 20004, 
  msoEncodingTaiwanWang = 20005, 
  msoEncodingIA5IRV = 20105, 
  msoEncodingIA5German = 20106, 
  msoEncodingIA5Swedish = 20107, 
  msoEncodingIA5Norwegian = 20108, 
  msoEncodingUSASCII = 20127, 
  msoEncodingT61 = 20261, 
  msoEncodingISO6937NonSpacingAccent = 20269, 
  msoEncodingKOI8R = 20866, 
  msoEncodingExtAlphaLowercase = 21027, 
  msoEncodingKOI8U = 21866, 
  msoEncodingEuropa3 = 29001, 
  msoEncodingHZGBSimplifiedChinese = 52936, 
  msoEncodingUTF7 = 65000, 
  msoEncodingUTF8 = 65001
} MsoEncoding;

typedef enum MsoHTMLProjectOpen
{
  msoHTMLProjectOpenSourceView = 1, 
  msoHTMLProjectOpenTextView = 2
} MsoHTMLProjectOpen;

typedef enum MsoHTMLProjectState
{
  msoHTMLProjectStateDocumentLocked = 1, 
  msoHTMLProjectStateProjectLocked = 2, 
  msoHTMLProjectStateDocumentProjectUnlocked = 3
} MsoHTMLProjectState;

// *********************************************************************//
// Interface: IAccessible
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {618736E0-3C3D-11CF-810C-00AA00389B71}
// *********************************************************************//
interface IAccessible  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_accParent(LPDISPATCH* ppdispParent/*[out,retval]*/) = 0; // [-5000]
  virtual HRESULT STDMETHODCALLTYPE get_accChildCount(long* pcountChildren/*[out,retval]*/) = 0; // [-5001]
  virtual HRESULT STDMETHODCALLTYPE get_accChild(TVariantInParam varChild/*[in]*/, 
                                                 LPDISPATCH* ppdispChild/*[out,retval]*/) = 0; // [-5002]
  virtual HRESULT STDMETHODCALLTYPE get_accName(TVariantInParam varChild/*[in,opt]*/, 
                                                BSTR* pszName/*[out,retval]*/) = 0; // [-5003]
  virtual HRESULT STDMETHODCALLTYPE get_accValue(TVariantInParam varChild/*[in,opt]*/, 
                                                 BSTR* pszValue/*[out,retval]*/) = 0; // [-5004]
  virtual HRESULT STDMETHODCALLTYPE get_accDescription(TVariantInParam varChild/*[in,opt]*/, 
                                                       BSTR* pszDescription/*[out,retval]*/) = 0; // [-5005]
  virtual HRESULT STDMETHODCALLTYPE get_accRole(TVariantInParam varChild/*[in,opt]*/, 
                                                TVariant* pvarRole/*[out,retval]*/) = 0; // [-5006]
  virtual HRESULT STDMETHODCALLTYPE get_accState(TVariantInParam varChild/*[in,opt]*/, 
                                                 TVariant* pvarState/*[out,retval]*/) = 0; // [-5007]
  virtual HRESULT STDMETHODCALLTYPE get_accHelp(TVariantInParam varChild/*[in,opt]*/, 
                                                BSTR* pszHelp/*[out,retval]*/) = 0; // [-5008]
  virtual HRESULT STDMETHODCALLTYPE get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                                     TVariantInParam varChild/*[in,opt]*/, 
                                                     long* pidTopic/*[out,retval]*/) = 0; // [-5009]
  virtual HRESULT STDMETHODCALLTYPE get_accKeyboardShortcut(TVariantInParam varChild/*[in,opt]*/, 
                                                            BSTR* pszKeyboardShortcut/*[out,retval]*/) = 0; // [-5010]
  virtual HRESULT STDMETHODCALLTYPE get_accFocus(TVariant* pvarChild/*[out,retval]*/) = 0; // [-5011]
  virtual HRESULT STDMETHODCALLTYPE get_accSelection(TVariant* pvarChildren/*[out,retval]*/) = 0; // [-5012]
  virtual HRESULT STDMETHODCALLTYPE get_accDefaultAction(TVariantInParam varChild/*[in,opt]*/, 
                                                         BSTR* pszDefaultAction/*[out,retval]*/) = 0; // [-5013]
  virtual HRESULT STDMETHODCALLTYPE accSelect(long flagsSelect/*[in]*/, 
                                              TVariantInParam varChild/*[in,opt]*/= TNoParam()) = 0; // [-5014]
  virtual HRESULT STDMETHODCALLTYPE accLocation(long* pxLeft/*[out]*/, long* pyTop/*[out]*/, 
                                                long* pcxWidth/*[out]*/, long* pcyHeight/*[out]*/, 
                                                TVariantInParam varChild/*[in,opt]*/= TNoParam()) = 0; // [-5015]
  virtual HRESULT STDMETHODCALLTYPE accNavigate(long navDir/*[in]*/, 
                                                TVariantInParam varStart/*[in,opt]*/, 
                                                TVariant* pvarEndUpAt/*[out,retval]*/) = 0; // [-5016]
  virtual HRESULT STDMETHODCALLTYPE accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/, 
                                               TVariant* pvarChild/*[out,retval]*/) = 0; // [-5017]
  virtual HRESULT STDMETHODCALLTYPE accDoDefaultAction(TVariantInParam varChild/*[in,opt]*/= TNoParam()) = 0; // [-5018]
  virtual HRESULT STDMETHODCALLTYPE set_accName(TVariantInParam varChild/*[in,opt]*/, 
                                                BSTR pszName/*[in]*/) = 0; // [-5003]
  virtual HRESULT STDMETHODCALLTYPE set_accValue(TVariantInParam varChild/*[in,opt]*/, 
                                                 BSTR pszValue/*[in]*/) = 0; // [-5004]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_accParent(void)
  {
    LPDISPATCH ppdispParent;
    OLECHECK(this->get_accParent((LPDISPATCH*)&ppdispParent));
    return ppdispParent;
  }

  long __fastcall get_accChildCount(void)
  {
    long pcountChildren;
    OLECHECK(this->get_accChildCount((long*)&pcountChildren));
    return pcountChildren;
  }

  LPDISPATCH __fastcall get_accChild(TVariantInParam varChild/*[in]*/)
  {
    LPDISPATCH ppdispChild;
    OLECHECK(this->get_accChild(varChild, (LPDISPATCH*)&ppdispChild));
    return ppdispChild;
  }

  BSTR __fastcall get_accName(TVariantInParam varChild/*[in,opt]*/= TNoParam())
  {
    BSTR pszName = 0;
    OLECHECK(this->get_accName(varChild, (BSTR*)&pszName));
    return pszName;
  }

  BSTR __fastcall get_accValue(TVariantInParam varChild/*[in,opt]*/= TNoParam())
  {
    BSTR pszValue = 0;
    OLECHECK(this->get_accValue(varChild, (BSTR*)&pszValue));
    return pszValue;
  }

  BSTR __fastcall get_accDescription(TVariantInParam varChild/*[in,opt]*/= TNoParam())
  {
    BSTR pszDescription = 0;
    OLECHECK(this->get_accDescription(varChild, (BSTR*)&pszDescription));
    return pszDescription;
  }

  TVariant __fastcall get_accRole(TVariantInParam varChild/*[in,opt]*/= TNoParam())
  {
    TVariant pvarRole;
    OLECHECK(this->get_accRole(varChild, (TVariant*)&pvarRole));
    return pvarRole;
  }

  TVariant __fastcall get_accState(TVariantInParam varChild/*[in,opt]*/= TNoParam())
  {
    TVariant pvarState;
    OLECHECK(this->get_accState(varChild, (TVariant*)&pvarState));
    return pvarState;
  }

  BSTR __fastcall get_accHelp(TVariantInParam varChild/*[in,opt]*/= TNoParam())
  {
    BSTR pszHelp = 0;
    OLECHECK(this->get_accHelp(varChild, (BSTR*)&pszHelp));
    return pszHelp;
  }

  long __fastcall get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                   TVariantInParam varChild/*[in,opt]*/= TNoParam())
  {
    long pidTopic;
    OLECHECK(this->get_accHelpTopic(pszHelpFile, varChild, (long*)&pidTopic));
    return pidTopic;
  }

  BSTR __fastcall get_accKeyboardShortcut(TVariantInParam varChild/*[in,opt]*/= TNoParam())
  {
    BSTR pszKeyboardShortcut = 0;
    OLECHECK(this->get_accKeyboardShortcut(varChild, (BSTR*)&pszKeyboardShortcut));
    return pszKeyboardShortcut;
  }

  TVariant __fastcall get_accFocus(void)
  {
    TVariant pvarChild;
    OLECHECK(this->get_accFocus((TVariant*)&pvarChild));
    return pvarChild;
  }

  TVariant __fastcall get_accSelection(void)
  {
    TVariant pvarChildren;
    OLECHECK(this->get_accSelection((TVariant*)&pvarChildren));
    return pvarChildren;
  }

  BSTR __fastcall get_accDefaultAction(TVariantInParam varChild/*[in,opt]*/= TNoParam())
  {
    BSTR pszDefaultAction = 0;
    OLECHECK(this->get_accDefaultAction(varChild, (BSTR*)&pszDefaultAction));
    return pszDefaultAction;
  }

  TVariant __fastcall accNavigate(long navDir/*[in]*/, 
                                  TVariantInParam varStart/*[in,opt]*/= TNoParam())
  {
    TVariant pvarEndUpAt;
    OLECHECK(this->accNavigate(navDir, varStart, (TVariant*)&pvarEndUpAt));
    return pvarEndUpAt;
  }

  TVariant __fastcall accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/)
  {
    TVariant pvarChild;
    OLECHECK(this->accHitTest(xLeft, yTop, (TVariant*)&pvarChild));
    return pvarChild;
  }


  __property   LPDISPATCH      accParent = {read = get_accParent};
  __property   long            accChildCount = {read = get_accChildCount};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _IMsoDispObj
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0300-0000-0000-C000-000000000046}
// *********************************************************************//
interface _IMsoDispObj  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Creator(long* plCreator/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Application(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Application((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  long __fastcall get_Creator(void)
  {
    long plCreator;
    OLECHECK(this->get_Creator((long*)&plCreator));
    return plCreator;
  }


  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _IMsoOleAccDispObj
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0301-0000-0000-C000-000000000046}
// *********************************************************************//
interface _IMsoOleAccDispObj  : public Office_2k::IAccessible
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Creator(long* plCreator/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Application(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Application((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  long __fastcall get_Creator(void)
  {
    long plCreator;
    OLECHECK(this->get_Creator((long*)&plCreator));
    return plCreator;
  }


  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CommandBars
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0302-0000-0000-C000-000000000046}
// *********************************************************************//
interface _CommandBars  : public Office_2k::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_ActionControl(Office_2k::CommandBarControlPtr* ppcbc/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ActiveMenuBar(Office_2k::CommandBarPtr* ppcb/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Add(TVariantInParam Name/*[in,opt]*/, 
                                        TVariantInParam Position/*[in,opt]*/, 
                                        TVariantInParam MenuBar/*[in,opt]*/, 
                                        TVariantInParam Temporary/*[in,opt]*/, 
                                        Office_2k::CommandBarPtr* ppcb/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Count(int* pcToolbars/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayTooltips(TOLEBOOL* pvarfDisplayTooltips/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayTooltips(TOLEBOOL pvarfDisplayTooltips/*[in]*/) = 0; // [1610809348]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayKeysInTooltips(TOLEBOOL* pvarfDisplayKeys/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayKeysInTooltips(TOLEBOOL pvarfDisplayKeys/*[in]*/) = 0; // [1610809350]
  virtual HRESULT STDMETHODCALLTYPE FindControl(TVariantInParam Type/*[in,opt]*/, 
                                                TVariantInParam Id/*[in,opt]*/, 
                                                TVariantInParam Tag/*[in,opt]*/, 
                                                TVariantInParam Visible/*[in,opt]*/, 
                                                Office_2k::CommandBarControlPtr* ppcbc/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Item(TVariantInParam Index/*[in]*/, 
                                             Office_2k::CommandBarPtr* ppcb/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_LargeButtons(TOLEBOOL* pvarfLargeButtons/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_LargeButtons(TOLEBOOL pvarfLargeButtons/*[in]*/) = 0; // [1610809354]
  virtual HRESULT STDMETHODCALLTYPE get_MenuAnimationStyle(Office_2k::MsoMenuAnimation* pma/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_MenuAnimationStyle(Office_2k::MsoMenuAnimation pma/*[in]*/) = 0; // [1610809356]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppienum/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ReleaseFocus(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_IdsString(int ids/*[in]*/, BSTR* pbstrName/*[out]*/, 
                                                  int* pcch/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_TmcGetName(int tmc/*[in]*/, BSTR* pbstrName/*[out]*/, 
                                                   int* pcch/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_AdaptiveMenus(TOLEBOOL* pvarfAdaptiveMenus/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_AdaptiveMenus(TOLEBOOL pvarfAdaptiveMenus/*[in]*/) = 0; // [1610809363]
  virtual HRESULT STDMETHODCALLTYPE FindControls(TVariantInParam Type/*[in,opt]*/, 
                                                 TVariantInParam Id/*[in,opt]*/, 
                                                 TVariantInParam Tag/*[in,opt]*/, 
                                                 TVariantInParam Visible/*[in,opt]*/, 
                                                 Office_2k::CommandBarControlsPtr* ppcbcs/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE AddEx(TVariantInParam TbidOrName/*[in,opt]*/, 
                                          TVariantInParam Position/*[in,opt]*/, 
                                          TVariantInParam MenuBar/*[in,opt]*/, 
                                          TVariantInParam Temporary/*[in,opt]*/, 
                                          TVariantInParam TbtrProtection/*[in,opt]*/, 
                                          Office_2k::CommandBarPtr* ppcb/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayFonts(TOLEBOOL* pvarfDisplayFonts/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayFonts(TOLEBOOL pvarfDisplayFonts/*[in]*/) = 0; // [1610809367]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Office_2k::CommandBarControlPtr __fastcall get_ActionControl(void)
  {
    Office_2k::CommandBarControlPtr ppcbc;
    OLECHECK(this->get_ActionControl((Office_2k::CommandBarControlPtr*)&ppcbc));
    return ppcbc;
  }

  Office_2k::CommandBarPtr __fastcall get_ActiveMenuBar(void)
  {
    Office_2k::CommandBarPtr ppcb;
    OLECHECK(this->get_ActiveMenuBar((Office_2k::CommandBarPtr*)&ppcb));
    return ppcb;
  }

  Office_2k::CommandBarPtr __fastcall Add(TVariantInParam Name/*[in,opt]*/= TNoParam(), 
                                          TVariantInParam Position/*[in,opt]*/= TNoParam(), 
                                          TVariantInParam MenuBar/*[in,opt]*/= TNoParam(), 
                                          TVariantInParam Temporary/*[in,opt]*/= TNoParam())
  {
    Office_2k::CommandBarPtr ppcb;
    OLECHECK(this->Add(Name, Position, MenuBar, Temporary, (Office_2k::CommandBarPtr*)&ppcb));
    return ppcb;
  }

  int __fastcall get_Count(void)
  {
    int pcToolbars;
    OLECHECK(this->get_Count((int*)&pcToolbars));
    return pcToolbars;
  }

  TOLEBOOL __fastcall get_DisplayTooltips(void)
  {
    TOLEBOOL pvarfDisplayTooltips;
    OLECHECK(this->get_DisplayTooltips((TOLEBOOL*)&pvarfDisplayTooltips));
    return pvarfDisplayTooltips;
  }

  TOLEBOOL __fastcall get_DisplayKeysInTooltips(void)
  {
    TOLEBOOL pvarfDisplayKeys;
    OLECHECK(this->get_DisplayKeysInTooltips((TOLEBOOL*)&pvarfDisplayKeys));
    return pvarfDisplayKeys;
  }

  Office_2k::CommandBarControlPtr __fastcall FindControl(TVariantInParam Type/*[in,opt]*/= TNoParam(), 
                                                         TVariantInParam Id/*[in,opt]*/= TNoParam(), 
                                                         TVariantInParam Tag/*[in,opt]*/= TNoParam(), 
                                                         TVariantInParam Visible/*[in,opt]*/= TNoParam())
  {
    Office_2k::CommandBarControlPtr ppcbc;
    OLECHECK(this->FindControl(Type, Id, Tag, Visible, (Office_2k::CommandBarControlPtr*)&ppcbc));
    return ppcbc;
  }

  Office_2k::CommandBarPtr __fastcall get_Item(TVariantInParam Index/*[in]*/)
  {
    Office_2k::CommandBarPtr ppcb;
    OLECHECK(this->get_Item(Index, (Office_2k::CommandBarPtr*)&ppcb));
    return ppcb;
  }

  TOLEBOOL __fastcall get_LargeButtons(void)
  {
    TOLEBOOL pvarfLargeButtons;
    OLECHECK(this->get_LargeButtons((TOLEBOOL*)&pvarfLargeButtons));
    return pvarfLargeButtons;
  }

  Office_2k::MsoMenuAnimation __fastcall get_MenuAnimationStyle(void)
  {
    Office_2k::MsoMenuAnimation pma;
    OLECHECK(this->get_MenuAnimationStyle((Office_2k::MsoMenuAnimation*)&pma));
    return pma;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppienum;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppienum));
    return ppienum;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Parent((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  int __fastcall get_IdsString(int ids/*[in]*/, BSTR* pbstrName/*[out]*/)
  {
    int pcch;
    OLECHECK(this->get_IdsString(ids, pbstrName, (int*)&pcch));
    return pcch;
  }

  int __fastcall get_TmcGetName(int tmc/*[in]*/, BSTR* pbstrName/*[out]*/)
  {
    int pcch;
    OLECHECK(this->get_TmcGetName(tmc, pbstrName, (int*)&pcch));
    return pcch;
  }

  TOLEBOOL __fastcall get_AdaptiveMenus(void)
  {
    TOLEBOOL pvarfAdaptiveMenus;
    OLECHECK(this->get_AdaptiveMenus((TOLEBOOL*)&pvarfAdaptiveMenus));
    return pvarfAdaptiveMenus;
  }

  Office_2k::CommandBarControlsPtr __fastcall FindControls(TVariantInParam Type/*[in,opt]*/= TNoParam(), 
                                                           TVariantInParam Id/*[in,opt]*/= TNoParam(), 
                                                           TVariantInParam Tag/*[in,opt]*/= TNoParam(), 
                                                           TVariantInParam Visible/*[in,opt]*/= TNoParam())
  {
    Office_2k::CommandBarControlsPtr ppcbcs;
    OLECHECK(this->FindControls(Type, Id, Tag, Visible, (Office_2k::CommandBarControlsPtr*)&ppcbcs));
    return ppcbcs;
  }

  Office_2k::CommandBarPtr __fastcall AddEx(TVariantInParam TbidOrName/*[in,opt]*/= TNoParam(), 
                                            TVariantInParam Position/*[in,opt]*/= TNoParam(), 
                                            TVariantInParam MenuBar/*[in,opt]*/= TNoParam(), 
                                            TVariantInParam Temporary/*[in,opt]*/= TNoParam(), 
                                            TVariantInParam TbtrProtection/*[in,opt]*/= TNoParam())
  {
    Office_2k::CommandBarPtr ppcb;
    OLECHECK(this->AddEx(TbidOrName, Position, MenuBar, Temporary, TbtrProtection, (Office_2k::CommandBarPtr*)&ppcb));
    return ppcb;
  }

  TOLEBOOL __fastcall get_DisplayFonts(void)
  {
    TOLEBOOL pvarfDisplayFonts;
    OLECHECK(this->get_DisplayFonts((TOLEBOOL*)&pvarfDisplayFonts));
    return pvarfDisplayFonts;
  }


  __property   Office_2k::CommandBarControlPtr ActionControl = {read = get_ActionControl};
  __property   Office_2k::CommandBarPtr ActiveMenuBar = {read = get_ActiveMenuBar};
  __property   int             Count = {read = get_Count};
  __property   TOLEBOOL        DisplayTooltips = {read = get_DisplayTooltips, write = set_DisplayTooltips};
  __property   TOLEBOOL        DisplayKeysInTooltips = {read = get_DisplayKeysInTooltips, write = set_DisplayKeysInTooltips};
  __property   TOLEBOOL        LargeButtons = {read = get_LargeButtons, write = set_LargeButtons};
  __property   Office_2k::MsoMenuAnimation MenuAnimationStyle = {read = get_MenuAnimationStyle, write = set_MenuAnimationStyle};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   TOLEBOOL        AdaptiveMenus = {read = get_AdaptiveMenus, write = set_AdaptiveMenus};
  __property   TOLEBOOL        DisplayFonts = {read = get_DisplayFonts, write = set_DisplayFonts};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: CommandBar
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0304-0000-0000-C000-000000000046}
// *********************************************************************//
interface CommandBar  : public Office_2k::_IMsoOleAccDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_BuiltIn(TOLEBOOL* pvarfBuiltIn/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Context(BSTR* pbstrContext/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Context(BSTR pbstrContext/*[in]*/) = 0; // [1610874881]
  virtual HRESULT STDMETHODCALLTYPE get_Controls(Office_2k::CommandBarControlsPtr* ppcbcs/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(TOLEBOOL* pvarfEnabled/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(TOLEBOOL pvarfEnabled/*[in]*/) = 0; // [1610874885]
  virtual HRESULT STDMETHODCALLTYPE FindControl(TVariantInParam Type/*[in,opt]*/, 
                                                TVariantInParam Id/*[in,opt]*/, 
                                                TVariantInParam Tag/*[in,opt]*/, 
                                                TVariantInParam Visible/*[in,opt]*/, 
                                                TVariantInParam Recursive/*[in,opt]*/, 
                                                Office_2k::CommandBarControlPtr* ppcbc/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Height(int* pdy/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Height(int pdy/*[in]*/) = 0; // [1610874888]
  virtual HRESULT STDMETHODCALLTYPE get_Index(int* pi/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_InstanceId(long* pid/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Left(int* pxpLeft/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Left(int pxpLeft/*[in]*/) = 0; // [1610874892]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pbstrName/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR pbstrName/*[in]*/) = 0; // [1610874894]
  virtual HRESULT STDMETHODCALLTYPE get_NameLocal(BSTR* pbstrNameLocal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_NameLocal(BSTR pbstrNameLocal/*[in]*/) = 0; // [1610874896]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Position(Office_2k::MsoBarPosition* ppos/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Position(Office_2k::MsoBarPosition ppos/*[in]*/) = 0; // [1610874899]
  virtual HRESULT STDMETHODCALLTYPE get_RowIndex(int* piRow/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_RowIndex(int piRow/*[in]*/) = 0; // [1610874901]
  virtual HRESULT STDMETHODCALLTYPE get_Protection(Office_2k::MsoBarProtection* pprot/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Protection(Office_2k::MsoBarProtection pprot/*[in]*/) = 0; // [1610874903]
  virtual HRESULT STDMETHODCALLTYPE Reset(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ShowPopup(TVariantInParam x/*[in,opt]*/= TNoParam(), 
                                              TVariantInParam y/*[in,opt]*/= TNoParam()) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Top(int* pypTop/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Top(int pypTop/*[in]*/) = 0; // [1610874907]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Office_2k::MsoBarType* ptype/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(TOLEBOOL* pvarfVisible/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(TOLEBOOL pvarfVisible/*[in]*/) = 0; // [1610874910]
  virtual HRESULT STDMETHODCALLTYPE get_Width(int* pdx/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Width(int pdx/*[in]*/) = 0; // [1610874912]
  virtual HRESULT STDMETHODCALLTYPE get_AdaptiveMenu(TOLEBOOL* pvarfAdaptiveMenu/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_AdaptiveMenu(TOLEBOOL pvarfAdaptiveMenu/*[in]*/) = 0; // [1610874914]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  TOLEBOOL __fastcall get_BuiltIn(void)
  {
    TOLEBOOL pvarfBuiltIn;
    OLECHECK(this->get_BuiltIn((TOLEBOOL*)&pvarfBuiltIn));
    return pvarfBuiltIn;
  }

  BSTR __fastcall get_Context(void)
  {
    BSTR pbstrContext = 0;
    OLECHECK(this->get_Context((BSTR*)&pbstrContext));
    return pbstrContext;
  }

  Office_2k::CommandBarControlsPtr __fastcall get_Controls(void)
  {
    Office_2k::CommandBarControlsPtr ppcbcs;
    OLECHECK(this->get_Controls((Office_2k::CommandBarControlsPtr*)&ppcbcs));
    return ppcbcs;
  }

  TOLEBOOL __fastcall get_Enabled(void)
  {
    TOLEBOOL pvarfEnabled;
    OLECHECK(this->get_Enabled((TOLEBOOL*)&pvarfEnabled));
    return pvarfEnabled;
  }

  Office_2k::CommandBarControlPtr __fastcall FindControl(TVariantInParam Type/*[in,opt]*/= TNoParam(), 
                                                         TVariantInParam Id/*[in,opt]*/= TNoParam(), 
                                                         TVariantInParam Tag/*[in,opt]*/= TNoParam(), 
                                                         TVariantInParam Visible/*[in,opt]*/= TNoParam(), 
                                                         TVariantInParam Recursive/*[in,opt]*/= TNoParam())
  {
    Office_2k::CommandBarControlPtr ppcbc;
    OLECHECK(this->FindControl(Type, Id, Tag, Visible, Recursive, (Office_2k::CommandBarControlPtr*)&ppcbc));
    return ppcbc;
  }

  int __fastcall get_Height(void)
  {
    int pdy;
    OLECHECK(this->get_Height((int*)&pdy));
    return pdy;
  }

  int __fastcall get_Index(void)
  {
    int pi;
    OLECHECK(this->get_Index((int*)&pi));
    return pi;
  }

  long __fastcall get_InstanceId(void)
  {
    long pid;
    OLECHECK(this->get_InstanceId((long*)&pid));
    return pid;
  }

  int __fastcall get_Left(void)
  {
    int pxpLeft;
    OLECHECK(this->get_Left((int*)&pxpLeft));
    return pxpLeft;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pbstrName = 0;
    OLECHECK(this->get_Name((BSTR*)&pbstrName));
    return pbstrName;
  }

  BSTR __fastcall get_NameLocal(void)
  {
    BSTR pbstrNameLocal = 0;
    OLECHECK(this->get_NameLocal((BSTR*)&pbstrNameLocal));
    return pbstrNameLocal;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Parent((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  Office_2k::MsoBarPosition __fastcall get_Position(void)
  {
    Office_2k::MsoBarPosition ppos;
    OLECHECK(this->get_Position((Office_2k::MsoBarPosition*)&ppos));
    return ppos;
  }

  int __fastcall get_RowIndex(void)
  {
    int piRow;
    OLECHECK(this->get_RowIndex((int*)&piRow));
    return piRow;
  }

  Office_2k::MsoBarProtection __fastcall get_Protection(void)
  {
    Office_2k::MsoBarProtection pprot;
    OLECHECK(this->get_Protection((Office_2k::MsoBarProtection*)&pprot));
    return pprot;
  }

  int __fastcall get_Top(void)
  {
    int pypTop;
    OLECHECK(this->get_Top((int*)&pypTop));
    return pypTop;
  }

  Office_2k::MsoBarType __fastcall get_Type(void)
  {
    Office_2k::MsoBarType ptype;
    OLECHECK(this->get_Type((Office_2k::MsoBarType*)&ptype));
    return ptype;
  }

  TOLEBOOL __fastcall get_Visible(void)
  {
    TOLEBOOL pvarfVisible;
    OLECHECK(this->get_Visible((TOLEBOOL*)&pvarfVisible));
    return pvarfVisible;
  }

  int __fastcall get_Width(void)
  {
    int pdx;
    OLECHECK(this->get_Width((int*)&pdx));
    return pdx;
  }

  TOLEBOOL __fastcall get_AdaptiveMenu(void)
  {
    TOLEBOOL pvarfAdaptiveMenu;
    OLECHECK(this->get_AdaptiveMenu((TOLEBOOL*)&pvarfAdaptiveMenu));
    return pvarfAdaptiveMenu;
  }


  __property   TOLEBOOL        BuiltIn = {read = get_BuiltIn};
  __property   BSTR            Context = {read = get_Context, write = set_Context};
  __property   Office_2k::CommandBarControlsPtr Controls = {read = get_Controls};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   int             Height = {read = get_Height, write = set_Height};
  __property   int             Index = {read = get_Index};
  __property   long            InstanceId = {read = get_InstanceId};
  __property   int             Left = {read = get_Left, write = set_Left};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            NameLocal = {read = get_NameLocal, write = set_NameLocal};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoBarPosition Position = {read = get_Position, write = set_Position};
  __property   int             RowIndex = {read = get_RowIndex, write = set_RowIndex};
  __property   Office_2k::MsoBarProtection Protection = {read = get_Protection, write = set_Protection};
  __property   int             Top = {read = get_Top, write = set_Top};
  __property   Office_2k::MsoBarType Type = {read = get_Type};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   int             Width = {read = get_Width, write = set_Width};
  __property   TOLEBOOL        AdaptiveMenu = {read = get_AdaptiveMenu, write = set_AdaptiveMenu};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: CommandBarControls
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0306-0000-0000-C000-000000000046}
// *********************************************************************//
interface CommandBarControls  : public Office_2k::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE Add(TVariantInParam Type/*[in,opt]*/, 
                                        TVariantInParam Id/*[in,opt]*/, 
                                        TVariantInParam Parameter/*[in,opt]*/, 
                                        TVariantInParam Before/*[in,opt]*/, 
                                        TVariantInParam Temporary/*[in,opt]*/, 
                                        Office_2k::CommandBarControlPtr* ppcbc/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Count(int* pcToolbarControls/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Item(TVariantInParam Index/*[in]*/, 
                                             Office_2k::CommandBarControlPtr* ppcbc/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppienum/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Office_2k::CommandBarPtr* ppcb/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Office_2k::CommandBarControlPtr __fastcall Add(TVariantInParam Type/*[in,opt]*/= TNoParam(), 
                                                 TVariantInParam Id/*[in,opt]*/= TNoParam(), 
                                                 TVariantInParam Parameter/*[in,opt]*/= TNoParam(), 
                                                 TVariantInParam Before/*[in,opt]*/= TNoParam(), 
                                                 TVariantInParam Temporary/*[in,opt]*/= TNoParam())
  {
    Office_2k::CommandBarControlPtr ppcbc;
    OLECHECK(this->Add(Type, Id, Parameter, Before, Temporary, (Office_2k::CommandBarControlPtr*)&ppcbc));
    return ppcbc;
  }

  int __fastcall get_Count(void)
  {
    int pcToolbarControls;
    OLECHECK(this->get_Count((int*)&pcToolbarControls));
    return pcToolbarControls;
  }

  Office_2k::CommandBarControlPtr __fastcall get_Item(TVariantInParam Index/*[in]*/)
  {
    Office_2k::CommandBarControlPtr ppcbc;
    OLECHECK(this->get_Item(Index, (Office_2k::CommandBarControlPtr*)&ppcbc));
    return ppcbc;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppienum;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppienum));
    return ppienum;
  }

  Office_2k::CommandBarPtr __fastcall get_Parent(void)
  {
    Office_2k::CommandBarPtr ppcb;
    OLECHECK(this->get_Parent((Office_2k::CommandBarPtr*)&ppcb));
    return ppcb;
  }


  __property   int             Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   Office_2k::CommandBarPtr Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: CommandBarControl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {000C0308-0000-0000-C000-000000000046}
// *********************************************************************//
interface CommandBarControl  : public Office_2k::_IMsoOleAccDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_BeginGroup(TOLEBOOL* pvarfBeginGroup/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_BeginGroup(TOLEBOOL pvarfBeginGroup/*[in]*/) = 0; // [1610874880]
  virtual HRESULT STDMETHODCALLTYPE get_BuiltIn(TOLEBOOL* pvarfBuiltIn/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Caption(BSTR* pbstrCaption/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Caption(BSTR pbstrCaption/*[in]*/) = 0; // [1610874883]
  virtual HRESULT STDMETHODCALLTYPE get_Control(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Copy(TVariantInParam Bar/*[in,opt]*/, 
                                         TVariantInParam Before/*[in,opt]*/, 
                                         Office_2k::CommandBarControlPtr* ppcbc/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Delete(TVariantInParam Temporary/*[in,opt]*/= TNoParam()) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DescriptionText(BSTR* pbstrText/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_DescriptionText(BSTR pbstrText/*[in]*/) = 0; // [1610874888]
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(TOLEBOOL* pvarfEnabled/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(TOLEBOOL pvarfEnabled/*[in]*/) = 0; // [1610874890]
  virtual HRESULT STDMETHODCALLTYPE Execute(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Height(int* pdy/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Height(int pdy/*[in]*/) = 0; // [1610874893]
  virtual HRESULT STDMETHODCALLTYPE get_HelpContextId(int* pid/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_HelpContextId(int pid/*[in]*/) = 0; // [1610874895]
  virtual HRESULT STDMETHODCALLTYPE get_HelpFile(BSTR* pbstrFilename/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_HelpFile(BSTR pbstrFilename/*[in]*/) = 0; // [1610874897]
  virtual HRESULT STDMETHODCALLTYPE get_Id(int* pid/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Index(int* pi/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_InstanceId(long* pid/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Move(TVariantInParam Bar/*[in,opt]*/, 
                                         TVariantInParam Before/*[in,opt]*/, 
                                         Office_2k::CommandBarControlPtr* ppcbc/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Left(int* px/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_OLEUsage(Office_2k::MsoControlOLEUsage* pcou/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_OLEUsage(Office_2k::MsoControlOLEUsage pcou/*[in]*/) = 0; // [1610874904]
  virtual HRESULT STDMETHODCALLTYPE get_OnAction(BSTR* pbstrOnAction/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_OnAction(BSTR pbstrOnAction/*[in]*/) = 0; // [1610874906]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Office_2k::CommandBarPtr* ppcb/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Parameter(BSTR* pbstrParam/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Parameter(BSTR pbstrParam/*[in]*/) = 0; // [1610874909]
  virtual HRESULT STDMETHODCALLTYPE get_Priority(int* pnPri/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Priority(int pnPri/*[in]*/) = 0; // [1610874911]
  virtual HRESULT STDMETHODCALLTYPE Reset(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SetFocus(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Tag(BSTR* pbstrTag/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Tag(BSTR pbstrTag/*[in]*/) = 0; // [1610874915]
  virtual HRESULT STDMETHODCALLTYPE get_TooltipText(BSTR* pbstrTooltip/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_TooltipText(BSTR pbstrTooltip/*[in]*/) = 0; // [1610874917]
  virtual HRESULT STDMETHODCALLTYPE get_Top(int* py/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Office_2k::MsoControlType* ptype/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(TOLEBOOL* pvarfVisible/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(TOLEBOOL pvarfVisible/*[in]*/) = 0; // [1610874921]
  virtual HRESULT STDMETHODCALLTYPE get_Width(int* pdx/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Width(int pdx/*[in]*/) = 0; // [1610874923]
  virtual HRESULT STDMETHODCALLTYPE get_IsPriorityDropped(TOLEBOOL* pvarfDropped/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Reserved1(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Reserved2(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Reserved3(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Reserved4(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Reserved5(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Reserved6(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Reserved7(void) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  TOLEBOOL __fastcall get_BeginGroup(void)
  {
    TOLEBOOL pvarfBeginGroup;
    OLECHECK(this->get_BeginGroup((TOLEBOOL*)&pvarfBeginGroup));
    return pvarfBeginGroup;
  }

  TOLEBOOL __fastcall get_BuiltIn(void)
  {
    TOLEBOOL pvarfBuiltIn;
    OLECHECK(this->get_BuiltIn((TOLEBOOL*)&pvarfBuiltIn));
    return pvarfBuiltIn;
  }

  BSTR __fastcall get_Caption(void)
  {
    BSTR pbstrCaption = 0;
    OLECHECK(this->get_Caption((BSTR*)&pbstrCaption));
    return pbstrCaption;
  }

  LPDISPATCH __fastcall get_Control(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Control((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  Office_2k::CommandBarControlPtr __fastcall Copy(TVariantInParam Bar/*[in,opt]*/= TNoParam(), 
                                                  TVariantInParam Before/*[in,opt]*/= TNoParam())
  {
    Office_2k::CommandBarControlPtr ppcbc;
    OLECHECK(this->Copy(Bar, Before, (Office_2k::CommandBarControlPtr*)&ppcbc));
    return ppcbc;
  }

  BSTR __fastcall get_DescriptionText(void)
  {
    BSTR pbstrText = 0;
    OLECHECK(this->get_DescriptionText((BSTR*)&pbstrText));
    return pbstrText;
  }

  TOLEBOOL __fastcall get_Enabled(void)
  {
    TOLEBOOL pvarfEnabled;
    OLECHECK(this->get_Enabled((TOLEBOOL*)&pvarfEnabled));
    return pvarfEnabled;
  }

  int __fastcall get_Height(void)
  {
    int pdy;
    OLECHECK(this->get_Height((int*)&pdy));
    return pdy;
  }

  int __fastcall get_HelpContextId(void)
  {
    int pid;
    OLECHECK(this->get_HelpContextId((int*)&pid));
    return pid;
  }

  BSTR __fastcall get_HelpFile(void)
  {
    BSTR pbstrFilename = 0;
    OLECHECK(this->get_HelpFile((BSTR*)&pbstrFilename));
    return pbstrFilename;
  }

  int __fastcall get_Id(void)
  {
    int pid;
    OLECHECK(this->get_Id((int*)&pid));
    return pid;
  }

  int __fastcall get_Index(void)
  {
    int pi;
    OLECHECK(this->get_Index((int*)&pi));
    return pi;
  }

  long __fastcall get_InstanceId(void)
  {
    long pid;
    OLECHECK(this->get_InstanceId((long*)&pid));
    return pid;
  }

  Office_2k::CommandBarControlPtr __fastcall Move(TVariantInParam Bar/*[in,opt]*/= TNoParam(), 
                                                  TVariantInParam Before/*[in,opt]*/= TNoParam())
  {
    Office_2k::CommandBarControlPtr ppcbc;
    OLECHECK(this->Move(Bar, Before, (Office_2k::CommandBarControlPtr*)&ppcbc));
    return ppcbc;
  }

  int __fastcall get_Left(void)
  {
    int px;
    OLECHECK(this->get_Left((int*)&px));
    return px;
  }

  Office_2k::MsoControlOLEUsage __fastcall get_OLEUsage(void)
  {
    Office_2k::MsoControlOLEUsage pcou;
    OLECHECK(this->get_OLEUsage((Office_2k::MsoControlOLEUsage*)&pcou));
    return pcou;
  }

  BSTR __fastcall get_OnAction(void)
  {
    BSTR pbstrOnAction = 0;
    OLECHECK(this->get_OnAction((BSTR*)&pbstrOnAction));
    return pbstrOnAction;
  }

  Office_2k::CommandBarPtr __fastcall get_Parent(void)
  {
    Office_2k::CommandBarPtr ppcb;
    OLECHECK(this->get_Parent((Office_2k::CommandBarPtr*)&ppcb));
    return ppcb;
  }

  BSTR __fastcall get_Parameter(void)
  {
    BSTR pbstrParam = 0;
    OLECHECK(this->get_Parameter((BSTR*)&pbstrParam));
    return pbstrParam;
  }

  int __fastcall get_Priority(void)
  {
    int pnPri;
    OLECHECK(this->get_Priority((int*)&pnPri));
    return pnPri;
  }

  BSTR __fastcall get_Tag(void)
  {
    BSTR pbstrTag = 0;
    OLECHECK(this->get_Tag((BSTR*)&pbstrTag));
    return pbstrTag;
  }

  BSTR __fastcall get_TooltipText(void)
  {
    BSTR pbstrTooltip = 0;
    OLECHECK(this->get_TooltipText((BSTR*)&pbstrTooltip));
    return pbstrTooltip;
  }

  int __fastcall get_Top(void)
  {
    int py;
    OLECHECK(this->get_Top((int*)&py));
    return py;
  }

  Office_2k::MsoControlType __fastcall get_Type(void)
  {
    Office_2k::MsoControlType ptype;
    OLECHECK(this->get_Type((Office_2k::MsoControlType*)&ptype));
    return ptype;
  }

  TOLEBOOL __fastcall get_Visible(void)
  {
    TOLEBOOL pvarfVisible;
    OLECHECK(this->get_Visible((TOLEBOOL*)&pvarfVisible));
    return pvarfVisible;
  }

  int __fastcall get_Width(void)
  {
    int pdx;
    OLECHECK(this->get_Width((int*)&pdx));
    return pdx;
  }

  TOLEBOOL __fastcall get_IsPriorityDropped(void)
  {
    TOLEBOOL pvarfDropped;
    OLECHECK(this->get_IsPriorityDropped((TOLEBOOL*)&pvarfDropped));
    return pvarfDropped;
  }


  __property   TOLEBOOL        BeginGroup = {read = get_BeginGroup, write = set_BeginGroup};
  __property   TOLEBOOL        BuiltIn = {read = get_BuiltIn};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   LPDISPATCH      Control = {read = get_Control};
  __property   BSTR            DescriptionText = {read = get_DescriptionText, write = set_DescriptionText};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   int             Height = {read = get_Height, write = set_Height};
  __property   int             HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   BSTR            HelpFile = {read = get_HelpFile, write = set_HelpFile};
  __property   int             Id = {read = get_Id};
  __property   int             Index = {read = get_Index};
  __property   long            InstanceId = {read = get_InstanceId};
  __property   int             Left = {read = get_Left};
  __property   Office_2k::MsoControlOLEUsage OLEUsage = {read = get_OLEUsage, write = set_OLEUsage};
  __property   BSTR            OnAction = {read = get_OnAction, write = set_OnAction};
  __property   Office_2k::CommandBarPtr Parent = {read = get_Parent};
  __property   BSTR            Parameter = {read = get_Parameter, write = set_Parameter};
  __property   int             Priority = {read = get_Priority, write = set_Priority};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   BSTR            TooltipText = {read = get_TooltipText, write = set_TooltipText};
  __property   int             Top = {read = get_Top};
  __property   Office_2k::MsoControlType Type = {read = get_Type};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   int             Width = {read = get_Width, write = set_Width};
  __property   TOLEBOOL        IsPriorityDropped = {read = get_IsPriorityDropped};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CommandBarButton
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C030E-0000-0000-C000-000000000046}
// *********************************************************************//
interface _CommandBarButton  : public Office_2k::CommandBarControl
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_BuiltInFace(TOLEBOOL* pvarfBuiltIn/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_BuiltInFace(TOLEBOOL pvarfBuiltIn/*[in]*/) = 0; // [1610940416]
  virtual HRESULT STDMETHODCALLTYPE CopyFace(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_FaceId(int* pid/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_FaceId(int pid/*[in]*/) = 0; // [1610940419]
  virtual HRESULT STDMETHODCALLTYPE PasteFace(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ShortcutText(BSTR* pbstrText/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_ShortcutText(BSTR pbstrText/*[in]*/) = 0; // [1610940422]
  virtual HRESULT STDMETHODCALLTYPE get_State(Office_2k::MsoButtonState* pstate/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_State(Office_2k::MsoButtonState pstate/*[in]*/) = 0; // [1610940424]
  virtual HRESULT STDMETHODCALLTYPE get_Style(Office_2k::MsoButtonStyle* pstyle/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Style(Office_2k::MsoButtonStyle pstyle/*[in]*/) = 0; // [1610940426]
  virtual HRESULT STDMETHODCALLTYPE get_HyperlinkType(Office_2k::MsoCommandBarButtonHyperlinkType* phlType/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_HyperlinkType(Office_2k::MsoCommandBarButtonHyperlinkType phlType/*[in]*/) = 0; // [1610940428]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  TOLEBOOL __fastcall get_BuiltInFace(void)
  {
    TOLEBOOL pvarfBuiltIn;
    OLECHECK(this->get_BuiltInFace((TOLEBOOL*)&pvarfBuiltIn));
    return pvarfBuiltIn;
  }

  int __fastcall get_FaceId(void)
  {
    int pid;
    OLECHECK(this->get_FaceId((int*)&pid));
    return pid;
  }

  BSTR __fastcall get_ShortcutText(void)
  {
    BSTR pbstrText = 0;
    OLECHECK(this->get_ShortcutText((BSTR*)&pbstrText));
    return pbstrText;
  }

  Office_2k::MsoButtonState __fastcall get_State(void)
  {
    Office_2k::MsoButtonState pstate;
    OLECHECK(this->get_State((Office_2k::MsoButtonState*)&pstate));
    return pstate;
  }

  Office_2k::MsoButtonStyle __fastcall get_Style(void)
  {
    Office_2k::MsoButtonStyle pstyle;
    OLECHECK(this->get_Style((Office_2k::MsoButtonStyle*)&pstyle));
    return pstyle;
  }

  Office_2k::MsoCommandBarButtonHyperlinkType __fastcall get_HyperlinkType(void)
  {
    Office_2k::MsoCommandBarButtonHyperlinkType phlType;
    OLECHECK(this->get_HyperlinkType((Office_2k::MsoCommandBarButtonHyperlinkType*)&phlType));
    return phlType;
  }


  __property   TOLEBOOL        BuiltInFace = {read = get_BuiltInFace, write = set_BuiltInFace};
  __property   int             FaceId = {read = get_FaceId, write = set_FaceId};
  __property   BSTR            ShortcutText = {read = get_ShortcutText, write = set_ShortcutText};
  __property   Office_2k::MsoButtonState State = {read = get_State, write = set_State};
  __property   Office_2k::MsoButtonStyle Style = {read = get_Style, write = set_Style};
  __property   Office_2k::MsoCommandBarButtonHyperlinkType HyperlinkType = {read = get_HyperlinkType, write = set_HyperlinkType};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: CommandBarPopup
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C030A-0000-0000-C000-000000000046}
// *********************************************************************//
interface CommandBarPopup  : public Office_2k::CommandBarControl
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_CommandBar(Office_2k::CommandBarPtr* ppcb/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Controls(Office_2k::CommandBarControlsPtr* ppcbcs/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_OLEMenuGroup(Office_2k::MsoOLEMenuGroup* pomg/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_OLEMenuGroup(Office_2k::MsoOLEMenuGroup pomg/*[in]*/) = 0; // [1610940418]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Office_2k::CommandBarPtr __fastcall get_CommandBar(void)
  {
    Office_2k::CommandBarPtr ppcb;
    OLECHECK(this->get_CommandBar((Office_2k::CommandBarPtr*)&ppcb));
    return ppcb;
  }

  Office_2k::CommandBarControlsPtr __fastcall get_Controls(void)
  {
    Office_2k::CommandBarControlsPtr ppcbcs;
    OLECHECK(this->get_Controls((Office_2k::CommandBarControlsPtr*)&ppcbcs));
    return ppcbcs;
  }

  Office_2k::MsoOLEMenuGroup __fastcall get_OLEMenuGroup(void)
  {
    Office_2k::MsoOLEMenuGroup pomg;
    OLECHECK(this->get_OLEMenuGroup((Office_2k::MsoOLEMenuGroup*)&pomg));
    return pomg;
  }


  __property   Office_2k::CommandBarPtr CommandBar = {read = get_CommandBar};
  __property   Office_2k::CommandBarControlsPtr Controls = {read = get_Controls};
  __property   Office_2k::MsoOLEMenuGroup OLEMenuGroup = {read = get_OLEMenuGroup, write = set_OLEMenuGroup};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CommandBarComboBox
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C030C-0000-0000-C000-000000000046}
// *********************************************************************//
interface _CommandBarComboBox  : public Office_2k::CommandBarControl
{
public:
  virtual HRESULT STDMETHODCALLTYPE AddItem(BSTR Text/*[in]*/, 
                                            TVariantInParam Index/*[in,opt]*/= TNoParam()) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Clear(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DropDownLines(int* pcLines/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_DropDownLines(int pcLines/*[in]*/) = 0; // [1610940418]
  virtual HRESULT STDMETHODCALLTYPE get_DropDownWidth(int* pdx/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_DropDownWidth(int pdx/*[in]*/) = 0; // [1610940420]
  virtual HRESULT STDMETHODCALLTYPE get_List(int Index/*[in]*/, BSTR* pbstrItem/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_List(int Index/*[in]*/, BSTR pbstrItem/*[in]*/) = 0; // [1610940422]
  virtual HRESULT STDMETHODCALLTYPE get_ListCount(int* pcItems/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ListHeaderCount(int* pcItems/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_ListHeaderCount(int pcItems/*[in]*/) = 0; // [1610940425]
  virtual HRESULT STDMETHODCALLTYPE get_ListIndex(int* pi/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_ListIndex(int pi/*[in]*/) = 0; // [1610940427]
  virtual HRESULT STDMETHODCALLTYPE RemoveItem(int Index/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Style(Office_2k::MsoComboStyle* pstyle/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Style(Office_2k::MsoComboStyle pstyle/*[in]*/) = 0; // [1610940430]
  virtual HRESULT STDMETHODCALLTYPE get_Text(BSTR* pbstrText/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Text(BSTR pbstrText/*[in]*/) = 0; // [1610940432]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  int __fastcall get_DropDownLines(void)
  {
    int pcLines;
    OLECHECK(this->get_DropDownLines((int*)&pcLines));
    return pcLines;
  }

  int __fastcall get_DropDownWidth(void)
  {
    int pdx;
    OLECHECK(this->get_DropDownWidth((int*)&pdx));
    return pdx;
  }

  BSTR __fastcall get_List(int Index/*[in]*/)
  {
    BSTR pbstrItem = 0;
    OLECHECK(this->get_List(Index, (BSTR*)&pbstrItem));
    return pbstrItem;
  }

  int __fastcall get_ListCount(void)
  {
    int pcItems;
    OLECHECK(this->get_ListCount((int*)&pcItems));
    return pcItems;
  }

  int __fastcall get_ListHeaderCount(void)
  {
    int pcItems;
    OLECHECK(this->get_ListHeaderCount((int*)&pcItems));
    return pcItems;
  }

  int __fastcall get_ListIndex(void)
  {
    int pi;
    OLECHECK(this->get_ListIndex((int*)&pi));
    return pi;
  }

  Office_2k::MsoComboStyle __fastcall get_Style(void)
  {
    Office_2k::MsoComboStyle pstyle;
    OLECHECK(this->get_Style((Office_2k::MsoComboStyle*)&pstyle));
    return pstyle;
  }

  BSTR __fastcall get_Text(void)
  {
    BSTR pbstrText = 0;
    OLECHECK(this->get_Text((BSTR*)&pbstrText));
    return pbstrText;
  }


  __property   int             DropDownLines = {read = get_DropDownLines, write = set_DropDownLines};
  __property   int             DropDownWidth = {read = get_DropDownWidth, write = set_DropDownWidth};
  __property   int             ListCount = {read = get_ListCount};
  __property   int             ListHeaderCount = {read = get_ListHeaderCount, write = set_ListHeaderCount};
  __property   int             ListIndex = {read = get_ListIndex, write = set_ListIndex};
  __property   Office_2k::MsoComboStyle Style = {read = get_Style, write = set_Style};
  __property   BSTR            Text = {read = get_Text, write = set_Text};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CommandBarActiveX
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C030D-0000-0000-C000-000000000046}
// *********************************************************************//
interface _CommandBarActiveX  : public Office_2k::CommandBarControl
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_ControlCLSID(BSTR* pbstrClsid/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_ControlCLSID(BSTR pbstrClsid/*[in]*/) = 0; // [1610940416]
  virtual HRESULT STDMETHODCALLTYPE get_QueryControlInterface(BSTR bstrIid/*[in]*/, 
                                                              LPUNKNOWN* ppUnk/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SetInnerObjectFactory(LPUNKNOWN pUnk/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE EnsureControl(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_InitWith(LPUNKNOWN Param1/*[in]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_ControlCLSID(void)
  {
    BSTR pbstrClsid = 0;
    OLECHECK(this->get_ControlCLSID((BSTR*)&pbstrClsid));
    return pbstrClsid;
  }

  LPUNKNOWN __fastcall get_QueryControlInterface(BSTR bstrIid/*[in]*/)
  {
    LPUNKNOWN ppUnk;
    OLECHECK(this->get_QueryControlInterface(bstrIid, (LPUNKNOWN*)&ppUnk));
    return ppUnk;
  }


  __property   BSTR            ControlCLSID = {read = get_ControlCLSID, write = set_ControlCLSID};
  __property   LPUNKNOWN       InitWith = {write = set_InitWith};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Adjustments
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0310-0000-0000-C000-000000000046}
// *********************************************************************//
interface Adjustments  : public Office_2k::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Count(int* Count/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_Item(int Index/*[in]*/, float* Val/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Item(int Index/*[in]*/, float Val/*[in]*/) = 0; // [0]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  int __fastcall get_Count(void)
  {
    int Count;
    OLECHECK(this->get_Count((int*)&Count));
    return Count;
  }

  float __fastcall get_Item(int Index/*[in]*/)
  {
    float Val;
    OLECHECK(this->get_Item(Index, (float*)&Val));
    return Val;
  }


  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: CalloutFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0311-0000-0000-C000-000000000046}
// *********************************************************************//
interface CalloutFormat  : public Office_2k::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE AutomaticLength(void) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE CustomDrop(float Drop/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE CustomLength(float Length/*[in]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE PresetDrop(Office_2k::MsoCalloutDropType DropType/*[in]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE get_Accent(Office_2k::MsoTriState* Accent/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE set_Accent(Office_2k::MsoTriState Accent/*[in]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_Angle(Office_2k::MsoCalloutAngleType* Angle/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_Angle(Office_2k::MsoCalloutAngleType Angle/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_AutoAttach(Office_2k::MsoTriState* AutoAttach/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_AutoAttach(Office_2k::MsoTriState AutoAttach/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_AutoLength(Office_2k::MsoTriState* AutoLength/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_Border(Office_2k::MsoTriState* Border/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE set_Border(Office_2k::MsoTriState Border/*[in]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_Drop(float* Drop/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_DropType(Office_2k::MsoCalloutDropType* DropType/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_Gap(float* Gap/*[out,retval]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE set_Gap(float Gap/*[in]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE get_Length(float* Length/*[out,retval]*/) = 0; // [108]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Office_2k::MsoCalloutType* Type/*[out,retval]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE set_Type(Office_2k::MsoCalloutType Type/*[in]*/) = 0; // [109]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Office_2k::MsoTriState __fastcall get_Accent(void)
  {
    Office_2k::MsoTriState Accent;
    OLECHECK(this->get_Accent((Office_2k::MsoTriState*)&Accent));
    return Accent;
  }

  Office_2k::MsoCalloutAngleType __fastcall get_Angle(void)
  {
    Office_2k::MsoCalloutAngleType Angle;
    OLECHECK(this->get_Angle((Office_2k::MsoCalloutAngleType*)&Angle));
    return Angle;
  }

  Office_2k::MsoTriState __fastcall get_AutoAttach(void)
  {
    Office_2k::MsoTriState AutoAttach;
    OLECHECK(this->get_AutoAttach((Office_2k::MsoTriState*)&AutoAttach));
    return AutoAttach;
  }

  Office_2k::MsoTriState __fastcall get_AutoLength(void)
  {
    Office_2k::MsoTriState AutoLength;
    OLECHECK(this->get_AutoLength((Office_2k::MsoTriState*)&AutoLength));
    return AutoLength;
  }

  Office_2k::MsoTriState __fastcall get_Border(void)
  {
    Office_2k::MsoTriState Border;
    OLECHECK(this->get_Border((Office_2k::MsoTriState*)&Border));
    return Border;
  }

  float __fastcall get_Drop(void)
  {
    float Drop;
    OLECHECK(this->get_Drop((float*)&Drop));
    return Drop;
  }

  Office_2k::MsoCalloutDropType __fastcall get_DropType(void)
  {
    Office_2k::MsoCalloutDropType DropType;
    OLECHECK(this->get_DropType((Office_2k::MsoCalloutDropType*)&DropType));
    return DropType;
  }

  float __fastcall get_Gap(void)
  {
    float Gap;
    OLECHECK(this->get_Gap((float*)&Gap));
    return Gap;
  }

  float __fastcall get_Length(void)
  {
    float Length;
    OLECHECK(this->get_Length((float*)&Length));
    return Length;
  }

  Office_2k::MsoCalloutType __fastcall get_Type(void)
  {
    Office_2k::MsoCalloutType Type;
    OLECHECK(this->get_Type((Office_2k::MsoCalloutType*)&Type));
    return Type;
  }


  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoTriState Accent = {read = get_Accent, write = set_Accent};
  __property   Office_2k::MsoCalloutAngleType Angle = {read = get_Angle, write = set_Angle};
  __property   Office_2k::MsoTriState AutoAttach = {read = get_AutoAttach, write = set_AutoAttach};
  __property   Office_2k::MsoTriState AutoLength = {read = get_AutoLength};
  __property   Office_2k::MsoTriState Border = {read = get_Border, write = set_Border};
  __property   float           Drop = {read = get_Drop};
  __property   Office_2k::MsoCalloutDropType DropType = {read = get_DropType};
  __property   float           Gap = {read = get_Gap, write = set_Gap};
  __property   float           Length = {read = get_Length};
  __property   Office_2k::MsoCalloutType Type = {read = get_Type, write = set_Type};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ColorFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0312-0000-0000-C000-000000000046}
// *********************************************************************//
interface ColorFormat  : public Office_2k::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_rgb(Office_2k::MsoRGBType* rgb/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_rgb(Office_2k::MsoRGBType rgb/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_SchemeColor(int* SchemeColor/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE set_SchemeColor(int SchemeColor/*[in]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Office_2k::MsoColorType* Type/*[out,retval]*/) = 0; // [101]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Office_2k::MsoRGBType __fastcall get_rgb(void)
  {
    Office_2k::MsoRGBType rgb;
    OLECHECK(this->get_rgb((Office_2k::MsoRGBType*)&rgb));
    return rgb;
  }

  int __fastcall get_SchemeColor(void)
  {
    int SchemeColor;
    OLECHECK(this->get_SchemeColor((int*)&SchemeColor));
    return SchemeColor;
  }

  Office_2k::MsoColorType __fastcall get_Type(void)
  {
    Office_2k::MsoColorType Type;
    OLECHECK(this->get_Type((Office_2k::MsoColorType*)&Type));
    return Type;
  }


  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoRGBType rgb = {read = get_rgb, write = set_rgb};
  __property   int             SchemeColor = {read = get_SchemeColor, write = set_SchemeColor};
  __property   Office_2k::MsoColorType Type = {read = get_Type};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ConnectorFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0313-0000-0000-C000-000000000046}
// *********************************************************************//
interface ConnectorFormat  : public Office_2k::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE BeginConnect(Office_2k::ShapePtr ConnectedShape/*[in]*/, 
                                                 int ConnectionSite/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE BeginDisconnect(void) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE EndConnect(Office_2k::ShapePtr ConnectedShape/*[in]*/, 
                                               int ConnectionSite/*[in]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE EndDisconnect(void) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE get_BeginConnected(Office_2k::MsoTriState* BeginConnected/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_BeginConnectedShape(Office_2k::ShapePtr* BeginConnectedShape/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_BeginConnectionSite(int* BeginConnectionSite/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_EndConnected(Office_2k::MsoTriState* EndConnected/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_EndConnectedShape(Office_2k::ShapePtr* EndConnectedShape/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_EndConnectionSite(int* EndConnectionSite/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Office_2k::MsoConnectorType* Type/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE set_Type(Office_2k::MsoConnectorType Type/*[in]*/) = 0; // [106]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Office_2k::MsoTriState __fastcall get_BeginConnected(void)
  {
    Office_2k::MsoTriState BeginConnected;
    OLECHECK(this->get_BeginConnected((Office_2k::MsoTriState*)&BeginConnected));
    return BeginConnected;
  }

  Office_2k::ShapePtr __fastcall get_BeginConnectedShape(void)
  {
    Office_2k::ShapePtr BeginConnectedShape;
    OLECHECK(this->get_BeginConnectedShape((Office_2k::ShapePtr*)&BeginConnectedShape));
    return BeginConnectedShape;
  }

  int __fastcall get_BeginConnectionSite(void)
  {
    int BeginConnectionSite;
    OLECHECK(this->get_BeginConnectionSite((int*)&BeginConnectionSite));
    return BeginConnectionSite;
  }

  Office_2k::MsoTriState __fastcall get_EndConnected(void)
  {
    Office_2k::MsoTriState EndConnected;
    OLECHECK(this->get_EndConnected((Office_2k::MsoTriState*)&EndConnected));
    return EndConnected;
  }

  Office_2k::ShapePtr __fastcall get_EndConnectedShape(void)
  {
    Office_2k::ShapePtr EndConnectedShape;
    OLECHECK(this->get_EndConnectedShape((Office_2k::ShapePtr*)&EndConnectedShape));
    return EndConnectedShape;
  }

  int __fastcall get_EndConnectionSite(void)
  {
    int EndConnectionSite;
    OLECHECK(this->get_EndConnectionSite((int*)&EndConnectionSite));
    return EndConnectionSite;
  }

  Office_2k::MsoConnectorType __fastcall get_Type(void)
  {
    Office_2k::MsoConnectorType Type;
    OLECHECK(this->get_Type((Office_2k::MsoConnectorType*)&Type));
    return Type;
  }


  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoTriState BeginConnected = {read = get_BeginConnected};
  __property   Office_2k::ShapePtr BeginConnectedShape = {read = get_BeginConnectedShape};
  __property   int             BeginConnectionSite = {read = get_BeginConnectionSite};
  __property   Office_2k::MsoTriState EndConnected = {read = get_EndConnected};
  __property   Office_2k::ShapePtr EndConnectedShape = {read = get_EndConnectedShape};
  __property   int             EndConnectionSite = {read = get_EndConnectionSite};
  __property   Office_2k::MsoConnectorType Type = {read = get_Type, write = set_Type};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: FillFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0314-0000-0000-C000-000000000046}
// *********************************************************************//
interface FillFormat  : public Office_2k::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE Background(void) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE OneColorGradient(Office_2k::MsoGradientStyle Style/*[in]*/, 
                                                     int Variant/*[in]*/, float Degree/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE Patterned(Office_2k::MsoPatternType Pattern/*[in]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE PresetGradient(Office_2k::MsoGradientStyle Style/*[in]*/, 
                                                   int Variant/*[in]*/, 
                                                   Office_2k::MsoPresetGradientType PresetGradientType/*[in]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE PresetTextured(Office_2k::MsoPresetTexture PresetTexture/*[in]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE Solid(void) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE TwoColorGradient(Office_2k::MsoGradientStyle Style/*[in]*/, 
                                                     int Variant/*[in]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE UserPicture(BSTR PictureFile/*[in]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE UserTextured(BSTR TextureFile/*[in]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE get_BackColor(Office_2k::ColorFormatPtr* BackColor/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE set_BackColor(Office_2k::ColorFormatPtr BackColor/*[in]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_ForeColor(Office_2k::ColorFormatPtr* ForeColor/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_ForeColor(Office_2k::ColorFormatPtr ForeColor/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_GradientColorType(Office_2k::MsoGradientColorType* GradientColorType/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_GradientDegree(float* GradientDegree/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_GradientStyle(Office_2k::MsoGradientStyle* GradientStyle/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_GradientVariant(int* GradientVariant/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_Pattern(Office_2k::MsoPatternType* Pattern/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_PresetGradientType(Office_2k::MsoPresetGradientType* PresetGradientType/*[out,retval]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE get_PresetTexture(Office_2k::MsoPresetTexture* PresetTexture/*[out,retval]*/) = 0; // [108]
  virtual HRESULT STDMETHODCALLTYPE get_TextureName(BSTR* TextureName/*[out,retval]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE get_TextureType(Office_2k::MsoTextureType* TextureType/*[out,retval]*/) = 0; // [110]
  virtual HRESULT STDMETHODCALLTYPE get_Transparency(float* Transparency/*[out,retval]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE set_Transparency(float Transparency/*[in]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Office_2k::MsoFillType* Type/*[out,retval]*/) = 0; // [112]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(Office_2k::MsoTriState Visible/*[in]*/) = 0; // [113]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Office_2k::ColorFormatPtr __fastcall get_BackColor(void)
  {
    Office_2k::ColorFormatPtr BackColor;
    OLECHECK(this->get_BackColor((Office_2k::ColorFormatPtr*)&BackColor));
    return BackColor;
  }

  Office_2k::ColorFormatPtr __fastcall get_ForeColor(void)
  {
    Office_2k::ColorFormatPtr ForeColor;
    OLECHECK(this->get_ForeColor((Office_2k::ColorFormatPtr*)&ForeColor));
    return ForeColor;
  }

  Office_2k::MsoGradientColorType __fastcall get_GradientColorType(void)
  {
    Office_2k::MsoGradientColorType GradientColorType;
    OLECHECK(this->get_GradientColorType((Office_2k::MsoGradientColorType*)&GradientColorType));
    return GradientColorType;
  }

  float __fastcall get_GradientDegree(void)
  {
    float GradientDegree;
    OLECHECK(this->get_GradientDegree((float*)&GradientDegree));
    return GradientDegree;
  }

  Office_2k::MsoGradientStyle __fastcall get_GradientStyle(void)
  {
    Office_2k::MsoGradientStyle GradientStyle;
    OLECHECK(this->get_GradientStyle((Office_2k::MsoGradientStyle*)&GradientStyle));
    return GradientStyle;
  }

  int __fastcall get_GradientVariant(void)
  {
    int GradientVariant;
    OLECHECK(this->get_GradientVariant((int*)&GradientVariant));
    return GradientVariant;
  }

  Office_2k::MsoPatternType __fastcall get_Pattern(void)
  {
    Office_2k::MsoPatternType Pattern;
    OLECHECK(this->get_Pattern((Office_2k::MsoPatternType*)&Pattern));
    return Pattern;
  }

  Office_2k::MsoPresetGradientType __fastcall get_PresetGradientType(void)
  {
    Office_2k::MsoPresetGradientType PresetGradientType;
    OLECHECK(this->get_PresetGradientType((Office_2k::MsoPresetGradientType*)&PresetGradientType));
    return PresetGradientType;
  }

  Office_2k::MsoPresetTexture __fastcall get_PresetTexture(void)
  {
    Office_2k::MsoPresetTexture PresetTexture;
    OLECHECK(this->get_PresetTexture((Office_2k::MsoPresetTexture*)&PresetTexture));
    return PresetTexture;
  }

  BSTR __fastcall get_TextureName(void)
  {
    BSTR TextureName = 0;
    OLECHECK(this->get_TextureName((BSTR*)&TextureName));
    return TextureName;
  }

  Office_2k::MsoTextureType __fastcall get_TextureType(void)
  {
    Office_2k::MsoTextureType TextureType;
    OLECHECK(this->get_TextureType((Office_2k::MsoTextureType*)&TextureType));
    return TextureType;
  }

  float __fastcall get_Transparency(void)
  {
    float Transparency;
    OLECHECK(this->get_Transparency((float*)&Transparency));
    return Transparency;
  }

  Office_2k::MsoFillType __fastcall get_Type(void)
  {
    Office_2k::MsoFillType Type;
    OLECHECK(this->get_Type((Office_2k::MsoFillType*)&Type));
    return Type;
  }

  Office_2k::MsoTriState __fastcall get_Visible(void)
  {
    Office_2k::MsoTriState Visible;
    OLECHECK(this->get_Visible((Office_2k::MsoTriState*)&Visible));
    return Visible;
  }


  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::ColorFormatPtr BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Office_2k::ColorFormatPtr ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   Office_2k::MsoGradientColorType GradientColorType = {read = get_GradientColorType};
  __property   float           GradientDegree = {read = get_GradientDegree};
  __property   Office_2k::MsoGradientStyle GradientStyle = {read = get_GradientStyle};
  __property   int             GradientVariant = {read = get_GradientVariant};
  __property   Office_2k::MsoPatternType Pattern = {read = get_Pattern};
  __property   Office_2k::MsoPresetGradientType PresetGradientType = {read = get_PresetGradientType};
  __property   Office_2k::MsoPresetTexture PresetTexture = {read = get_PresetTexture};
  __property   BSTR            TextureName = {read = get_TextureName};
  __property   Office_2k::MsoTextureType TextureType = {read = get_TextureType};
  __property   float           Transparency = {read = get_Transparency, write = set_Transparency};
  __property   Office_2k::MsoFillType Type = {read = get_Type};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: FreeformBuilder
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0315-0000-0000-C000-000000000046}
// *********************************************************************//
interface FreeformBuilder  : public Office_2k::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE AddNodes(Office_2k::MsoSegmentType SegmentType/*[in]*/, 
                                             Office_2k::MsoEditingType EditingType/*[in]*/, 
                                             float X1/*[in]*/, float Y1/*[in]*/, 
                                             float X2/*[in,def,opt]*/, float Y2/*[in,def,opt]*/, 
                                             float X3/*[in,def,opt]*/, float Y3/*[in,def,opt]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE ConvertToShape(Office_2k::ShapePtr* Freeform/*[out,retval]*/) = 0; // [11]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Office_2k::ShapePtr __fastcall ConvertToShape(void)
  {
    Office_2k::ShapePtr Freeform;
    OLECHECK(this->ConvertToShape((Office_2k::ShapePtr*)&Freeform));
    return Freeform;
  }


  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: GroupShapes
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0316-0000-0000-C000-000000000046}
// *********************************************************************//
interface GroupShapes  : public Office_2k::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Count(int* pnShapes/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE Item(TVariantInParam Index/*[in]*/, 
                                         Office_2k::ShapePtr* Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppienum/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Parent((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  int __fastcall get_Count(void)
  {
    int pnShapes;
    OLECHECK(this->get_Count((int*)&pnShapes));
    return pnShapes;
  }

  Office_2k::ShapePtr __fastcall Item(TVariantInParam Index/*[in]*/)
  {
    Office_2k::ShapePtr Item;
    OLECHECK(this->Item(Index, (Office_2k::ShapePtr*)&Item));
    return Item;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppienum;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppienum));
    return ppienum;
  }


  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: LineFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0317-0000-0000-C000-000000000046}
// *********************************************************************//
interface LineFormat  : public Office_2k::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_BackColor(Office_2k::ColorFormatPtr* BackColor/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE set_BackColor(Office_2k::ColorFormatPtr BackColor/*[in]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_BeginArrowheadLength(Office_2k::MsoArrowheadLength* BeginArrowheadLength/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_BeginArrowheadLength(Office_2k::MsoArrowheadLength BeginArrowheadLength/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_BeginArrowheadStyle(Office_2k::MsoArrowheadStyle* BeginArrowheadStyle/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_BeginArrowheadStyle(Office_2k::MsoArrowheadStyle BeginArrowheadStyle/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_BeginArrowheadWidth(Office_2k::MsoArrowheadWidth* BeginArrowheadWidth/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE set_BeginArrowheadWidth(Office_2k::MsoArrowheadWidth BeginArrowheadWidth/*[in]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_DashStyle(Office_2k::MsoLineDashStyle* DashStyle/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE set_DashStyle(Office_2k::MsoLineDashStyle DashStyle/*[in]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_EndArrowheadLength(Office_2k::MsoArrowheadLength* EndArrowheadLength/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE set_EndArrowheadLength(Office_2k::MsoArrowheadLength EndArrowheadLength/*[in]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_EndArrowheadStyle(Office_2k::MsoArrowheadStyle* EndArrowheadStyle/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE set_EndArrowheadStyle(Office_2k::MsoArrowheadStyle EndArrowheadStyle/*[in]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_EndArrowheadWidth(Office_2k::MsoArrowheadWidth* EndArrowheadWidth/*[out,retval]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE set_EndArrowheadWidth(Office_2k::MsoArrowheadWidth EndArrowheadWidth/*[in]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE get_ForeColor(Office_2k::ColorFormatPtr* ForeColor/*[out,retval]*/) = 0; // [108]
  virtual HRESULT STDMETHODCALLTYPE set_ForeColor(Office_2k::ColorFormatPtr ForeColor/*[in]*/) = 0; // [108]
  virtual HRESULT STDMETHODCALLTYPE get_Pattern(Office_2k::MsoPatternType* Pattern/*[out,retval]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE set_Pattern(Office_2k::MsoPatternType Pattern/*[in]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE get_Style(Office_2k::MsoLineStyle* Style/*[out,retval]*/) = 0; // [110]
  virtual HRESULT STDMETHODCALLTYPE set_Style(Office_2k::MsoLineStyle Style/*[in]*/) = 0; // [110]
  virtual HRESULT STDMETHODCALLTYPE get_Transparency(float* Transparency/*[out,retval]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE set_Transparency(float Transparency/*[in]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/) = 0; // [112]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(Office_2k::MsoTriState Visible/*[in]*/) = 0; // [112]
  virtual HRESULT STDMETHODCALLTYPE get_Weight(float* Weight/*[out,retval]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE set_Weight(float Weight/*[in]*/) = 0; // [113]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Office_2k::ColorFormatPtr __fastcall get_BackColor(void)
  {
    Office_2k::ColorFormatPtr BackColor;
    OLECHECK(this->get_BackColor((Office_2k::ColorFormatPtr*)&BackColor));
    return BackColor;
  }

  Office_2k::MsoArrowheadLength __fastcall get_BeginArrowheadLength(void)
  {
    Office_2k::MsoArrowheadLength BeginArrowheadLength;
    OLECHECK(this->get_BeginArrowheadLength((Office_2k::MsoArrowheadLength*)&BeginArrowheadLength));
    return BeginArrowheadLength;
  }

  Office_2k::MsoArrowheadStyle __fastcall get_BeginArrowheadStyle(void)
  {
    Office_2k::MsoArrowheadStyle BeginArrowheadStyle;
    OLECHECK(this->get_BeginArrowheadStyle((Office_2k::MsoArrowheadStyle*)&BeginArrowheadStyle));
    return BeginArrowheadStyle;
  }

  Office_2k::MsoArrowheadWidth __fastcall get_BeginArrowheadWidth(void)
  {
    Office_2k::MsoArrowheadWidth BeginArrowheadWidth;
    OLECHECK(this->get_BeginArrowheadWidth((Office_2k::MsoArrowheadWidth*)&BeginArrowheadWidth));
    return BeginArrowheadWidth;
  }

  Office_2k::MsoLineDashStyle __fastcall get_DashStyle(void)
  {
    Office_2k::MsoLineDashStyle DashStyle;
    OLECHECK(this->get_DashStyle((Office_2k::MsoLineDashStyle*)&DashStyle));
    return DashStyle;
  }

  Office_2k::MsoArrowheadLength __fastcall get_EndArrowheadLength(void)
  {
    Office_2k::MsoArrowheadLength EndArrowheadLength;
    OLECHECK(this->get_EndArrowheadLength((Office_2k::MsoArrowheadLength*)&EndArrowheadLength));
    return EndArrowheadLength;
  }

  Office_2k::MsoArrowheadStyle __fastcall get_EndArrowheadStyle(void)
  {
    Office_2k::MsoArrowheadStyle EndArrowheadStyle;
    OLECHECK(this->get_EndArrowheadStyle((Office_2k::MsoArrowheadStyle*)&EndArrowheadStyle));
    return EndArrowheadStyle;
  }

  Office_2k::MsoArrowheadWidth __fastcall get_EndArrowheadWidth(void)
  {
    Office_2k::MsoArrowheadWidth EndArrowheadWidth;
    OLECHECK(this->get_EndArrowheadWidth((Office_2k::MsoArrowheadWidth*)&EndArrowheadWidth));
    return EndArrowheadWidth;
  }

  Office_2k::ColorFormatPtr __fastcall get_ForeColor(void)
  {
    Office_2k::ColorFormatPtr ForeColor;
    OLECHECK(this->get_ForeColor((Office_2k::ColorFormatPtr*)&ForeColor));
    return ForeColor;
  }

  Office_2k::MsoPatternType __fastcall get_Pattern(void)
  {
    Office_2k::MsoPatternType Pattern;
    OLECHECK(this->get_Pattern((Office_2k::MsoPatternType*)&Pattern));
    return Pattern;
  }

  Office_2k::MsoLineStyle __fastcall get_Style(void)
  {
    Office_2k::MsoLineStyle Style;
    OLECHECK(this->get_Style((Office_2k::MsoLineStyle*)&Style));
    return Style;
  }

  float __fastcall get_Transparency(void)
  {
    float Transparency;
    OLECHECK(this->get_Transparency((float*)&Transparency));
    return Transparency;
  }

  Office_2k::MsoTriState __fastcall get_Visible(void)
  {
    Office_2k::MsoTriState Visible;
    OLECHECK(this->get_Visible((Office_2k::MsoTriState*)&Visible));
    return Visible;
  }

  float __fastcall get_Weight(void)
  {
    float Weight;
    OLECHECK(this->get_Weight((float*)&Weight));
    return Weight;
  }


  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::ColorFormatPtr BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Office_2k::MsoArrowheadLength BeginArrowheadLength = {read = get_BeginArrowheadLength, write = set_BeginArrowheadLength};
  __property   Office_2k::MsoArrowheadStyle BeginArrowheadStyle = {read = get_BeginArrowheadStyle, write = set_BeginArrowheadStyle};
  __property   Office_2k::MsoArrowheadWidth BeginArrowheadWidth = {read = get_BeginArrowheadWidth, write = set_BeginArrowheadWidth};
  __property   Office_2k::MsoLineDashStyle DashStyle = {read = get_DashStyle, write = set_DashStyle};
  __property   Office_2k::MsoArrowheadLength EndArrowheadLength = {read = get_EndArrowheadLength, write = set_EndArrowheadLength};
  __property   Office_2k::MsoArrowheadStyle EndArrowheadStyle = {read = get_EndArrowheadStyle, write = set_EndArrowheadStyle};
  __property   Office_2k::MsoArrowheadWidth EndArrowheadWidth = {read = get_EndArrowheadWidth, write = set_EndArrowheadWidth};
  __property   Office_2k::ColorFormatPtr ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   Office_2k::MsoPatternType Pattern = {read = get_Pattern, write = set_Pattern};
  __property   Office_2k::MsoLineStyle Style = {read = get_Style, write = set_Style};
  __property   float           Transparency = {read = get_Transparency, write = set_Transparency};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   float           Weight = {read = get_Weight, write = set_Weight};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ShapeNode
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0318-0000-0000-C000-000000000046}
// *********************************************************************//
interface ShapeNode  : public Office_2k::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_EditingType(Office_2k::MsoEditingType* EditingType/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_Points(TVariant* Points/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_SegmentType(Office_2k::MsoSegmentType* SegmentType/*[out,retval]*/) = 0; // [102]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Office_2k::MsoEditingType __fastcall get_EditingType(void)
  {
    Office_2k::MsoEditingType EditingType;
    OLECHECK(this->get_EditingType((Office_2k::MsoEditingType*)&EditingType));
    return EditingType;
  }

  TVariant __fastcall get_Points(void)
  {
    TVariant Points;
    OLECHECK(this->get_Points((TVariant*)&Points));
    return Points;
  }

  Office_2k::MsoSegmentType __fastcall get_SegmentType(void)
  {
    Office_2k::MsoSegmentType SegmentType;
    OLECHECK(this->get_SegmentType((Office_2k::MsoSegmentType*)&SegmentType));
    return SegmentType;
  }


  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoEditingType EditingType = {read = get_EditingType};
  __property   Office_2k::MsoSegmentType SegmentType = {read = get_SegmentType};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ShapeNodes
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0319-0000-0000-C000-000000000046}
// *********************************************************************//
interface ShapeNodes  : public Office_2k::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Count(int* Count/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE Item(TVariantInParam Index/*[in]*/, 
                                         Office_2k::ShapeNodePtr* Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE Delete(int Index/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE Insert(int Index/*[in]*/, 
                                           Office_2k::MsoSegmentType SegmentType/*[in]*/, 
                                           Office_2k::MsoEditingType EditingType/*[in]*/, 
                                           float X1/*[in]*/, float Y1/*[in]*/, 
                                           float X2/*[in,def,opt]*/, float Y2/*[in,def,opt]*/, 
                                           float X3/*[in,def,opt]*/, float Y3/*[in,def,opt]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE SetEditingType(int Index/*[in]*/, 
                                                   Office_2k::MsoEditingType EditingType/*[in]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE SetPosition(int Index/*[in]*/, float X1/*[in]*/, 
                                                float Y1/*[in]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE SetSegmentType(int Index/*[in]*/, 
                                                   Office_2k::MsoSegmentType SegmentType/*[in]*/) = 0; // [15]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  int __fastcall get_Count(void)
  {
    int Count;
    OLECHECK(this->get_Count((int*)&Count));
    return Count;
  }

  Office_2k::ShapeNodePtr __fastcall Item(TVariantInParam Index/*[in]*/)
  {
    Office_2k::ShapeNodePtr Item;
    OLECHECK(this->Item(Index, (Office_2k::ShapeNodePtr*)&Item));
    return Item;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN _NewEnum;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&_NewEnum));
    return _NewEnum;
  }


  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PictureFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C031A-0000-0000-C000-000000000046}
// *********************************************************************//
interface PictureFormat  : public Office_2k::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE IncrementBrightness(float Increment/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE IncrementContrast(float Increment/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_Brightness(float* Brightness/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE set_Brightness(float Brightness/*[in]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_ColorType(Office_2k::MsoPictureColorType* ColorType/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_ColorType(Office_2k::MsoPictureColorType ColorType/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_Contrast(float* Contrast/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_Contrast(float Contrast/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_CropBottom(float* CropBottom/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE set_CropBottom(float CropBottom/*[in]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_CropLeft(float* CropLeft/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE set_CropLeft(float CropLeft/*[in]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_CropRight(float* CropRight/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE set_CropRight(float CropRight/*[in]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_CropTop(float* CropTop/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE set_CropTop(float CropTop/*[in]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_TransparencyColor(Office_2k::MsoRGBType* TransparencyColor/*[out,retval]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE set_TransparencyColor(Office_2k::MsoRGBType TransparencyColor/*[in]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE get_TransparentBackground(Office_2k::MsoTriState* TransparentBackground/*[out,retval]*/) = 0; // [108]
  virtual HRESULT STDMETHODCALLTYPE set_TransparentBackground(Office_2k::MsoTriState TransparentBackground/*[in]*/) = 0; // [108]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  float __fastcall get_Brightness(void)
  {
    float Brightness;
    OLECHECK(this->get_Brightness((float*)&Brightness));
    return Brightness;
  }

  Office_2k::MsoPictureColorType __fastcall get_ColorType(void)
  {
    Office_2k::MsoPictureColorType ColorType;
    OLECHECK(this->get_ColorType((Office_2k::MsoPictureColorType*)&ColorType));
    return ColorType;
  }

  float __fastcall get_Contrast(void)
  {
    float Contrast;
    OLECHECK(this->get_Contrast((float*)&Contrast));
    return Contrast;
  }

  float __fastcall get_CropBottom(void)
  {
    float CropBottom;
    OLECHECK(this->get_CropBottom((float*)&CropBottom));
    return CropBottom;
  }

  float __fastcall get_CropLeft(void)
  {
    float CropLeft;
    OLECHECK(this->get_CropLeft((float*)&CropLeft));
    return CropLeft;
  }

  float __fastcall get_CropRight(void)
  {
    float CropRight;
    OLECHECK(this->get_CropRight((float*)&CropRight));
    return CropRight;
  }

  float __fastcall get_CropTop(void)
  {
    float CropTop;
    OLECHECK(this->get_CropTop((float*)&CropTop));
    return CropTop;
  }

  Office_2k::MsoRGBType __fastcall get_TransparencyColor(void)
  {
    Office_2k::MsoRGBType TransparencyColor;
    OLECHECK(this->get_TransparencyColor((Office_2k::MsoRGBType*)&TransparencyColor));
    return TransparencyColor;
  }

  Office_2k::MsoTriState __fastcall get_TransparentBackground(void)
  {
    Office_2k::MsoTriState TransparentBackground;
    OLECHECK(this->get_TransparentBackground((Office_2k::MsoTriState*)&TransparentBackground));
    return TransparentBackground;
  }


  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   float           Brightness = {read = get_Brightness, write = set_Brightness};
  __property   Office_2k::MsoPictureColorType ColorType = {read = get_ColorType, write = set_ColorType};
  __property   float           Contrast = {read = get_Contrast, write = set_Contrast};
  __property   float           CropBottom = {read = get_CropBottom, write = set_CropBottom};
  __property   float           CropLeft = {read = get_CropLeft, write = set_CropLeft};
  __property   float           CropRight = {read = get_CropRight, write = set_CropRight};
  __property   float           CropTop = {read = get_CropTop, write = set_CropTop};
  __property   Office_2k::MsoRGBType TransparencyColor = {read = get_TransparencyColor, write = set_TransparencyColor};
  __property   Office_2k::MsoTriState TransparentBackground = {read = get_TransparentBackground, write = set_TransparentBackground};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ShadowFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C031B-0000-0000-C000-000000000046}
// *********************************************************************//
interface ShadowFormat  : public Office_2k::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE IncrementOffsetX(float Increment/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE IncrementOffsetY(float Increment/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_ForeColor(Office_2k::ColorFormatPtr* ForeColor/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE set_ForeColor(Office_2k::ColorFormatPtr ForeColor/*[in]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_Obscured(Office_2k::MsoTriState* Obscured/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_Obscured(Office_2k::MsoTriState Obscured/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_OffsetX(float* OffsetX/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_OffsetX(float OffsetX/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_OffsetY(float* OffsetY/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE set_OffsetY(float OffsetY/*[in]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_Transparency(float* Transparency/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE set_Transparency(float Transparency/*[in]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Office_2k::MsoShadowType* Type/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE set_Type(Office_2k::MsoShadowType Type/*[in]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(Office_2k::MsoTriState Visible/*[in]*/) = 0; // [106]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Office_2k::ColorFormatPtr __fastcall get_ForeColor(void)
  {
    Office_2k::ColorFormatPtr ForeColor;
    OLECHECK(this->get_ForeColor((Office_2k::ColorFormatPtr*)&ForeColor));
    return ForeColor;
  }

  Office_2k::MsoTriState __fastcall get_Obscured(void)
  {
    Office_2k::MsoTriState Obscured;
    OLECHECK(this->get_Obscured((Office_2k::MsoTriState*)&Obscured));
    return Obscured;
  }

  float __fastcall get_OffsetX(void)
  {
    float OffsetX;
    OLECHECK(this->get_OffsetX((float*)&OffsetX));
    return OffsetX;
  }

  float __fastcall get_OffsetY(void)
  {
    float OffsetY;
    OLECHECK(this->get_OffsetY((float*)&OffsetY));
    return OffsetY;
  }

  float __fastcall get_Transparency(void)
  {
    float Transparency;
    OLECHECK(this->get_Transparency((float*)&Transparency));
    return Transparency;
  }

  Office_2k::MsoShadowType __fastcall get_Type(void)
  {
    Office_2k::MsoShadowType Type;
    OLECHECK(this->get_Type((Office_2k::MsoShadowType*)&Type));
    return Type;
  }

  Office_2k::MsoTriState __fastcall get_Visible(void)
  {
    Office_2k::MsoTriState Visible;
    OLECHECK(this->get_Visible((Office_2k::MsoTriState*)&Visible));
    return Visible;
  }


  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::ColorFormatPtr ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   Office_2k::MsoTriState Obscured = {read = get_Obscured, write = set_Obscured};
  __property   float           OffsetX = {read = get_OffsetX, write = set_OffsetX};
  __property   float           OffsetY = {read = get_OffsetY, write = set_OffsetY};
  __property   float           Transparency = {read = get_Transparency, write = set_Transparency};
  __property   Office_2k::MsoShadowType Type = {read = get_Type, write = set_Type};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Script
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0341-0000-0000-C000-000000000046}
// *********************************************************************//
interface Script  : public Office_2k::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Extended(BSTR* Extended/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Extended(BSTR Extended/*[in]*/) = 0; // [1610809345]
  virtual HRESULT STDMETHODCALLTYPE get_Id(BSTR* Id/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Id(BSTR Id/*[in]*/) = 0; // [1610809347]
  virtual HRESULT STDMETHODCALLTYPE get_Language(Office_2k::MsoScriptLanguage* Language/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Language(Office_2k::MsoScriptLanguage Language/*[in]*/) = 0; // [1610809349]
  virtual HRESULT STDMETHODCALLTYPE get_Location(Office_2k::MsoScriptLocation* Location/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Shape(LPDISPATCH* Object/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ScriptText(BSTR* Script/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_ScriptText(BSTR Script/*[in]*/) = 0; // [0]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  BSTR __fastcall get_Extended(void)
  {
    BSTR Extended = 0;
    OLECHECK(this->get_Extended((BSTR*)&Extended));
    return Extended;
  }

  BSTR __fastcall get_Id(void)
  {
    BSTR Id = 0;
    OLECHECK(this->get_Id((BSTR*)&Id));
    return Id;
  }

  Office_2k::MsoScriptLanguage __fastcall get_Language(void)
  {
    Office_2k::MsoScriptLanguage Language;
    OLECHECK(this->get_Language((Office_2k::MsoScriptLanguage*)&Language));
    return Language;
  }

  Office_2k::MsoScriptLocation __fastcall get_Location(void)
  {
    Office_2k::MsoScriptLocation Location;
    OLECHECK(this->get_Location((Office_2k::MsoScriptLocation*)&Location));
    return Location;
  }

  LPDISPATCH __fastcall get_Shape(void)
  {
    LPDISPATCH Object;
    OLECHECK(this->get_Shape((LPDISPATCH*)&Object));
    return Object;
  }

  BSTR __fastcall get_ScriptText(void)
  {
    BSTR Script = 0;
    OLECHECK(this->get_ScriptText((BSTR*)&Script));
    return Script;
  }


  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Extended = {read = get_Extended, write = set_Extended};
  __property   BSTR            Id = {read = get_Id, write = set_Id};
  __property   Office_2k::MsoScriptLanguage Language = {read = get_Language, write = set_Language};
  __property   Office_2k::MsoScriptLocation Location = {read = get_Location};
  __property   LPDISPATCH      Shape = {read = get_Shape};
  __property   BSTR            ScriptText = {read = get_ScriptText, write = set_ScriptText};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Scripts
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0340-0000-0000-C000-000000000046}
// *********************************************************************//
interface Scripts  : public Office_2k::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE Item(TVariantInParam Index/*[in]*/, 
                                         Office_2k::ScriptPtr* Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Add(LPDISPATCH Anchor/*[in,def,opt]*/, 
                                        Office_2k::MsoScriptLocation Location/*[in,def,opt]*/, 
                                        Office_2k::MsoScriptLanguage Language/*[in,def,opt]*/, 
                                        BSTR Id/*[in,def,opt]*/, BSTR Extended/*[in,def,opt]*/, 
                                        BSTR ScriptText/*[in,def,opt]*/, 
                                        Office_2k::ScriptPtr* Add/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN _NewEnum;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&_NewEnum));
    return _NewEnum;
  }

  Office_2k::ScriptPtr __fastcall Item(TVariantInParam Index/*[in]*/)
  {
    Office_2k::ScriptPtr Item;
    OLECHECK(this->Item(Index, (Office_2k::ScriptPtr*)&Item));
    return Item;
  }

  Office_2k::ScriptPtr __fastcall Add(LPDISPATCH Anchor/*[in,def,opt]*/, 
                                      Office_2k::MsoScriptLocation Location/*[in,def,opt]*/, 
                                      Office_2k::MsoScriptLanguage Language/*[in,def,opt]*/, 
                                      BSTR Id/*[in,def,opt]*/, BSTR Extended/*[in,def,opt]*/, 
                                      BSTR ScriptText/*[in,def,opt]*/)
  {
    Office_2k::ScriptPtr Add;
    OLECHECK(this->Add(Anchor, Location, Language, Id, Extended, ScriptText, (Office_2k::ScriptPtr*)&Add));
    return Add;
  }


  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Shape
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C031C-0000-0000-C000-000000000046}
// *********************************************************************//
interface Shape  : public Office_2k::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE Apply(void) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE Duplicate(Office_2k::ShapePtr* Duplicate/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE Flip(Office_2k::MsoFlipCmd FlipCmd/*[in]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE IncrementLeft(float Increment/*[in]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE IncrementRotation(float Increment/*[in]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE IncrementTop(float Increment/*[in]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE PickUp(void) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE RerouteConnections(void) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE ScaleHeight(float Factor/*[in]*/, 
                                                Office_2k::MsoTriState RelativeToOriginalSize/*[in]*/, 
                                                Office_2k::MsoScaleFrom fScale/*[in,def,opt]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE ScaleWidth(float Factor/*[in]*/, 
                                               Office_2k::MsoTriState RelativeToOriginalSize/*[in]*/, 
                                               Office_2k::MsoScaleFrom fScale/*[in,def,opt]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE Select(TVariantInParam Replace/*[in,opt]*/= TNoParam()) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE SetShapesDefaultProperties(void) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE Ungroup(Office_2k::ShapeRangePtr* Ungroup/*[out,retval]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE ZOrder(Office_2k::MsoZOrderCmd ZOrderCmd/*[in]*/) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE get_Adjustments(Office_2k::AdjustmentsPtr* Adjustments/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_AutoShapeType(Office_2k::MsoAutoShapeType* AutoShapeType/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_AutoShapeType(Office_2k::MsoAutoShapeType AutoShapeType/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_BlackWhiteMode(Office_2k::MsoBlackWhiteMode* BlackWhiteMode/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_BlackWhiteMode(Office_2k::MsoBlackWhiteMode BlackWhiteMode/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_Callout(Office_2k::CalloutFormatPtr* Callout/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_ConnectionSiteCount(int* ConnectionSiteCount/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_Connector(Office_2k::MsoTriState* Connector/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_ConnectorFormat(Office_2k::ConnectorFormatPtr* ConnectorFormat/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_Fill(Office_2k::FillFormatPtr* Fill/*[out,retval]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE get_GroupItems(Office_2k::GroupShapesPtr* GroupItems/*[out,retval]*/) = 0; // [108]
  virtual HRESULT STDMETHODCALLTYPE get_Height(float* Height/*[out,retval]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE set_Height(float Height/*[in]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE get_HorizontalFlip(Office_2k::MsoTriState* HorizontalFlip/*[out,retval]*/) = 0; // [110]
  virtual HRESULT STDMETHODCALLTYPE get_Left(float* Left/*[out,retval]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE set_Left(float Left/*[in]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE get_Line(Office_2k::LineFormatPtr* Line/*[out,retval]*/) = 0; // [112]
  virtual HRESULT STDMETHODCALLTYPE get_LockAspectRatio(Office_2k::MsoTriState* LockAspectRatio/*[out,retval]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE set_LockAspectRatio(Office_2k::MsoTriState LockAspectRatio/*[in]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [115]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR Name/*[in]*/) = 0; // [115]
  virtual HRESULT STDMETHODCALLTYPE get_Nodes(Office_2k::ShapeNodesPtr* Nodes/*[out,retval]*/) = 0; // [116]
  virtual HRESULT STDMETHODCALLTYPE get_Rotation(float* Rotation/*[out,retval]*/) = 0; // [117]
  virtual HRESULT STDMETHODCALLTYPE set_Rotation(float Rotation/*[in]*/) = 0; // [117]
  virtual HRESULT STDMETHODCALLTYPE get_PictureFormat(Office_2k::PictureFormatPtr* Picture/*[out,retval]*/) = 0; // [118]
  virtual HRESULT STDMETHODCALLTYPE get_Shadow(Office_2k::ShadowFormatPtr* Shadow/*[out,retval]*/) = 0; // [119]
  virtual HRESULT STDMETHODCALLTYPE get_TextEffect(Office_2k::TextEffectFormatPtr* TextEffect/*[out,retval]*/) = 0; // [120]
  virtual HRESULT STDMETHODCALLTYPE get_TextFrame(Office_2k::TextFramePtr* TextFrame/*[out,retval]*/) = 0; // [121]
  virtual HRESULT STDMETHODCALLTYPE get_ThreeD(Office_2k::ThreeDFormatPtr* ThreeD/*[out,retval]*/) = 0; // [122]
  virtual HRESULT STDMETHODCALLTYPE get_Top(float* Top/*[out,retval]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE set_Top(float Top/*[in]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Office_2k::MsoShapeType* Type/*[out,retval]*/) = 0; // [124]
  virtual HRESULT STDMETHODCALLTYPE get_VerticalFlip(Office_2k::MsoTriState* VerticalFlip/*[out,retval]*/) = 0; // [125]
  virtual HRESULT STDMETHODCALLTYPE get_Vertices(TVariant* Vertices/*[out,retval]*/) = 0; // [126]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/) = 0; // [127]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(Office_2k::MsoTriState Visible/*[in]*/) = 0; // [127]
  virtual HRESULT STDMETHODCALLTYPE get_Width(float* Width/*[out,retval]*/) = 0; // [128]
  virtual HRESULT STDMETHODCALLTYPE set_Width(float Width/*[in]*/) = 0; // [128]
  virtual HRESULT STDMETHODCALLTYPE get_ZOrderPosition(int* ZOrderPosition/*[out,retval]*/) = 0; // [129]
  virtual HRESULT STDMETHODCALLTYPE get_Script(Office_2k::ScriptPtr* Script/*[out,retval]*/) = 0; // [130]
  virtual HRESULT STDMETHODCALLTYPE get_AlternativeText(BSTR* AlternativeText/*[out,retval]*/) = 0; // [131]
  virtual HRESULT STDMETHODCALLTYPE set_AlternativeText(BSTR AlternativeText/*[in]*/) = 0; // [131]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Office_2k::ShapePtr __fastcall Duplicate(void)
  {
    Office_2k::ShapePtr Duplicate;
    OLECHECK(this->Duplicate((Office_2k::ShapePtr*)&Duplicate));
    return Duplicate;
  }

  Office_2k::ShapeRangePtr __fastcall Ungroup(void)
  {
    Office_2k::ShapeRangePtr Ungroup;
    OLECHECK(this->Ungroup((Office_2k::ShapeRangePtr*)&Ungroup));
    return Ungroup;
  }

  Office_2k::AdjustmentsPtr __fastcall get_Adjustments(void)
  {
    Office_2k::AdjustmentsPtr Adjustments;
    OLECHECK(this->get_Adjustments((Office_2k::AdjustmentsPtr*)&Adjustments));
    return Adjustments;
  }

  Office_2k::MsoAutoShapeType __fastcall get_AutoShapeType(void)
  {
    Office_2k::MsoAutoShapeType AutoShapeType;
    OLECHECK(this->get_AutoShapeType((Office_2k::MsoAutoShapeType*)&AutoShapeType));
    return AutoShapeType;
  }

  Office_2k::MsoBlackWhiteMode __fastcall get_BlackWhiteMode(void)
  {
    Office_2k::MsoBlackWhiteMode BlackWhiteMode;
    OLECHECK(this->get_BlackWhiteMode((Office_2k::MsoBlackWhiteMode*)&BlackWhiteMode));
    return BlackWhiteMode;
  }

  Office_2k::CalloutFormatPtr __fastcall get_Callout(void)
  {
    Office_2k::CalloutFormatPtr Callout;
    OLECHECK(this->get_Callout((Office_2k::CalloutFormatPtr*)&Callout));
    return Callout;
  }

  int __fastcall get_ConnectionSiteCount(void)
  {
    int ConnectionSiteCount;
    OLECHECK(this->get_ConnectionSiteCount((int*)&ConnectionSiteCount));
    return ConnectionSiteCount;
  }

  Office_2k::MsoTriState __fastcall get_Connector(void)
  {
    Office_2k::MsoTriState Connector;
    OLECHECK(this->get_Connector((Office_2k::MsoTriState*)&Connector));
    return Connector;
  }

  Office_2k::ConnectorFormatPtr __fastcall get_ConnectorFormat(void)
  {
    Office_2k::ConnectorFormatPtr ConnectorFormat;
    OLECHECK(this->get_ConnectorFormat((Office_2k::ConnectorFormatPtr*)&ConnectorFormat));
    return ConnectorFormat;
  }

  Office_2k::FillFormatPtr __fastcall get_Fill(void)
  {
    Office_2k::FillFormatPtr Fill;
    OLECHECK(this->get_Fill((Office_2k::FillFormatPtr*)&Fill));
    return Fill;
  }

  Office_2k::GroupShapesPtr __fastcall get_GroupItems(void)
  {
    Office_2k::GroupShapesPtr GroupItems;
    OLECHECK(this->get_GroupItems((Office_2k::GroupShapesPtr*)&GroupItems));
    return GroupItems;
  }

  float __fastcall get_Height(void)
  {
    float Height;
    OLECHECK(this->get_Height((float*)&Height));
    return Height;
  }

  Office_2k::MsoTriState __fastcall get_HorizontalFlip(void)
  {
    Office_2k::MsoTriState HorizontalFlip;
    OLECHECK(this->get_HorizontalFlip((Office_2k::MsoTriState*)&HorizontalFlip));
    return HorizontalFlip;
  }

  float __fastcall get_Left(void)
  {
    float Left;
    OLECHECK(this->get_Left((float*)&Left));
    return Left;
  }

  Office_2k::LineFormatPtr __fastcall get_Line(void)
  {
    Office_2k::LineFormatPtr Line;
    OLECHECK(this->get_Line((Office_2k::LineFormatPtr*)&Line));
    return Line;
  }

  Office_2k::MsoTriState __fastcall get_LockAspectRatio(void)
  {
    Office_2k::MsoTriState LockAspectRatio;
    OLECHECK(this->get_LockAspectRatio((Office_2k::MsoTriState*)&LockAspectRatio));
    return LockAspectRatio;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  Office_2k::ShapeNodesPtr __fastcall get_Nodes(void)
  {
    Office_2k::ShapeNodesPtr Nodes;
    OLECHECK(this->get_Nodes((Office_2k::ShapeNodesPtr*)&Nodes));
    return Nodes;
  }

  float __fastcall get_Rotation(void)
  {
    float Rotation;
    OLECHECK(this->get_Rotation((float*)&Rotation));
    return Rotation;
  }

  Office_2k::PictureFormatPtr __fastcall get_PictureFormat(void)
  {
    Office_2k::PictureFormatPtr Picture;
    OLECHECK(this->get_PictureFormat((Office_2k::PictureFormatPtr*)&Picture));
    return Picture;
  }

  Office_2k::ShadowFormatPtr __fastcall get_Shadow(void)
  {
    Office_2k::ShadowFormatPtr Shadow;
    OLECHECK(this->get_Shadow((Office_2k::ShadowFormatPtr*)&Shadow));
    return Shadow;
  }

  Office_2k::TextEffectFormatPtr __fastcall get_TextEffect(void)
  {
    Office_2k::TextEffectFormatPtr TextEffect;
    OLECHECK(this->get_TextEffect((Office_2k::TextEffectFormatPtr*)&TextEffect));
    return TextEffect;
  }

  Office_2k::TextFramePtr __fastcall get_TextFrame(void)
  {
    Office_2k::TextFramePtr TextFrame;
    OLECHECK(this->get_TextFrame((Office_2k::TextFramePtr*)&TextFrame));
    return TextFrame;
  }

  Office_2k::ThreeDFormatPtr __fastcall get_ThreeD(void)
  {
    Office_2k::ThreeDFormatPtr ThreeD;
    OLECHECK(this->get_ThreeD((Office_2k::ThreeDFormatPtr*)&ThreeD));
    return ThreeD;
  }

  float __fastcall get_Top(void)
  {
    float Top;
    OLECHECK(this->get_Top((float*)&Top));
    return Top;
  }

  Office_2k::MsoShapeType __fastcall get_Type(void)
  {
    Office_2k::MsoShapeType Type;
    OLECHECK(this->get_Type((Office_2k::MsoShapeType*)&Type));
    return Type;
  }

  Office_2k::MsoTriState __fastcall get_VerticalFlip(void)
  {
    Office_2k::MsoTriState VerticalFlip;
    OLECHECK(this->get_VerticalFlip((Office_2k::MsoTriState*)&VerticalFlip));
    return VerticalFlip;
  }

  TVariant __fastcall get_Vertices(void)
  {
    TVariant Vertices;
    OLECHECK(this->get_Vertices((TVariant*)&Vertices));
    return Vertices;
  }

  Office_2k::MsoTriState __fastcall get_Visible(void)
  {
    Office_2k::MsoTriState Visible;
    OLECHECK(this->get_Visible((Office_2k::MsoTriState*)&Visible));
    return Visible;
  }

  float __fastcall get_Width(void)
  {
    float Width;
    OLECHECK(this->get_Width((float*)&Width));
    return Width;
  }

  int __fastcall get_ZOrderPosition(void)
  {
    int ZOrderPosition;
    OLECHECK(this->get_ZOrderPosition((int*)&ZOrderPosition));
    return ZOrderPosition;
  }

  Office_2k::ScriptPtr __fastcall get_Script(void)
  {
    Office_2k::ScriptPtr Script;
    OLECHECK(this->get_Script((Office_2k::ScriptPtr*)&Script));
    return Script;
  }

  BSTR __fastcall get_AlternativeText(void)
  {
    BSTR AlternativeText = 0;
    OLECHECK(this->get_AlternativeText((BSTR*)&AlternativeText));
    return AlternativeText;
  }


  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::AdjustmentsPtr Adjustments = {read = get_Adjustments};
  __property   Office_2k::MsoAutoShapeType AutoShapeType = {read = get_AutoShapeType, write = set_AutoShapeType};
  __property   Office_2k::MsoBlackWhiteMode BlackWhiteMode = {read = get_BlackWhiteMode, write = set_BlackWhiteMode};
  __property   Office_2k::CalloutFormatPtr Callout = {read = get_Callout};
  __property   int             ConnectionSiteCount = {read = get_ConnectionSiteCount};
  __property   Office_2k::MsoTriState Connector = {read = get_Connector};
  __property   Office_2k::ConnectorFormatPtr ConnectorFormat = {read = get_ConnectorFormat};
  __property   Office_2k::FillFormatPtr Fill = {read = get_Fill};
  __property   Office_2k::GroupShapesPtr GroupItems = {read = get_GroupItems};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   Office_2k::MsoTriState HorizontalFlip = {read = get_HorizontalFlip};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   Office_2k::LineFormatPtr Line = {read = get_Line};
  __property   Office_2k::MsoTriState LockAspectRatio = {read = get_LockAspectRatio, write = set_LockAspectRatio};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   Office_2k::ShapeNodesPtr Nodes = {read = get_Nodes};
  __property   float           Rotation = {read = get_Rotation, write = set_Rotation};
  __property   Office_2k::PictureFormatPtr PictureFormat = {read = get_PictureFormat};
  __property   Office_2k::ShadowFormatPtr Shadow = {read = get_Shadow};
  __property   Office_2k::TextEffectFormatPtr TextEffect = {read = get_TextEffect};
  __property   Office_2k::TextFramePtr TextFrame = {read = get_TextFrame};
  __property   Office_2k::ThreeDFormatPtr ThreeD = {read = get_ThreeD};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   Office_2k::MsoShapeType Type = {read = get_Type};
  __property   Office_2k::MsoTriState VerticalFlip = {read = get_VerticalFlip};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   int             ZOrderPosition = {read = get_ZOrderPosition};
  __property   Office_2k::ScriptPtr Script = {read = get_Script};
  __property   BSTR            AlternativeText = {read = get_AlternativeText, write = set_AlternativeText};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ShapeRange
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C031D-0000-0000-C000-000000000046}
// *********************************************************************//
interface ShapeRange  : public Office_2k::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Count(int* Count/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE Item(TVariantInParam Index/*[in]*/, 
                                         Office_2k::ShapePtr* Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE Align(Office_2k::MsoAlignCmd AlignCmd/*[in]*/, 
                                          Office_2k::MsoTriState RelativeTo/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE Apply(void) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE Distribute(Office_2k::MsoDistributeCmd DistributeCmd/*[in]*/, 
                                               Office_2k::MsoTriState RelativeTo/*[in]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE Duplicate(Office_2k::ShapeRangePtr* Duplicate/*[out,retval]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE Flip(Office_2k::MsoFlipCmd FlipCmd/*[in]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE IncrementLeft(float Increment/*[in]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE IncrementRotation(float Increment/*[in]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE IncrementTop(float Increment/*[in]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE Group(Office_2k::ShapePtr* Group/*[out,retval]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE PickUp(void) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE Regroup(Office_2k::ShapePtr* Regroup/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE RerouteConnections(void) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE ScaleHeight(float Factor/*[in]*/, 
                                                Office_2k::MsoTriState RelativeToOriginalSize/*[in]*/, 
                                                Office_2k::MsoScaleFrom fScale/*[in,def,opt]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE ScaleWidth(float Factor/*[in]*/, 
                                               Office_2k::MsoTriState RelativeToOriginalSize/*[in]*/, 
                                               Office_2k::MsoScaleFrom fScale/*[in,def,opt]*/) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE Select(TVariantInParam Replace/*[in,opt]*/= TNoParam()) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE SetShapesDefaultProperties(void) = 0; // [26]
  virtual HRESULT STDMETHODCALLTYPE Ungroup(Office_2k::ShapeRangePtr* Ungroup/*[out,retval]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE ZOrder(Office_2k::MsoZOrderCmd ZOrderCmd/*[in]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE get_Adjustments(Office_2k::AdjustmentsPtr* Adjustments/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_AutoShapeType(Office_2k::MsoAutoShapeType* AutoShapeType/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_AutoShapeType(Office_2k::MsoAutoShapeType AutoShapeType/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_BlackWhiteMode(Office_2k::MsoBlackWhiteMode* BlackWhiteMode/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_BlackWhiteMode(Office_2k::MsoBlackWhiteMode BlackWhiteMode/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_Callout(Office_2k::CalloutFormatPtr* Callout/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_ConnectionSiteCount(int* ConnectionSiteCount/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_Connector(Office_2k::MsoTriState* Connector/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_ConnectorFormat(Office_2k::ConnectorFormatPtr* ConnectorFormat/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_Fill(Office_2k::FillFormatPtr* Fill/*[out,retval]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE get_GroupItems(Office_2k::GroupShapesPtr* GroupItems/*[out,retval]*/) = 0; // [108]
  virtual HRESULT STDMETHODCALLTYPE get_Height(float* Height/*[out,retval]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE set_Height(float Height/*[in]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE get_HorizontalFlip(Office_2k::MsoTriState* HorizontalFlip/*[out,retval]*/) = 0; // [110]
  virtual HRESULT STDMETHODCALLTYPE get_Left(float* Left/*[out,retval]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE set_Left(float Left/*[in]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE get_Line(Office_2k::LineFormatPtr* Line/*[out,retval]*/) = 0; // [112]
  virtual HRESULT STDMETHODCALLTYPE get_LockAspectRatio(Office_2k::MsoTriState* LockAspectRatio/*[out,retval]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE set_LockAspectRatio(Office_2k::MsoTriState LockAspectRatio/*[in]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [115]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR Name/*[in]*/) = 0; // [115]
  virtual HRESULT STDMETHODCALLTYPE get_Nodes(Office_2k::ShapeNodesPtr* Nodes/*[out,retval]*/) = 0; // [116]
  virtual HRESULT STDMETHODCALLTYPE get_Rotation(float* Rotation/*[out,retval]*/) = 0; // [117]
  virtual HRESULT STDMETHODCALLTYPE set_Rotation(float Rotation/*[in]*/) = 0; // [117]
  virtual HRESULT STDMETHODCALLTYPE get_PictureFormat(Office_2k::PictureFormatPtr* Picture/*[out,retval]*/) = 0; // [118]
  virtual HRESULT STDMETHODCALLTYPE get_Shadow(Office_2k::ShadowFormatPtr* Shadow/*[out,retval]*/) = 0; // [119]
  virtual HRESULT STDMETHODCALLTYPE get_TextEffect(Office_2k::TextEffectFormatPtr* TextEffect/*[out,retval]*/) = 0; // [120]
  virtual HRESULT STDMETHODCALLTYPE get_TextFrame(Office_2k::TextFramePtr* TextFrame/*[out,retval]*/) = 0; // [121]
  virtual HRESULT STDMETHODCALLTYPE get_ThreeD(Office_2k::ThreeDFormatPtr* ThreeD/*[out,retval]*/) = 0; // [122]
  virtual HRESULT STDMETHODCALLTYPE get_Top(float* Top/*[out,retval]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE set_Top(float Top/*[in]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Office_2k::MsoShapeType* Type/*[out,retval]*/) = 0; // [124]
  virtual HRESULT STDMETHODCALLTYPE get_VerticalFlip(Office_2k::MsoTriState* VerticalFlip/*[out,retval]*/) = 0; // [125]
  virtual HRESULT STDMETHODCALLTYPE get_Vertices(TVariant* Vertices/*[out,retval]*/) = 0; // [126]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/) = 0; // [127]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(Office_2k::MsoTriState Visible/*[in]*/) = 0; // [127]
  virtual HRESULT STDMETHODCALLTYPE get_Width(float* Width/*[out,retval]*/) = 0; // [128]
  virtual HRESULT STDMETHODCALLTYPE set_Width(float Width/*[in]*/) = 0; // [128]
  virtual HRESULT STDMETHODCALLTYPE get_ZOrderPosition(int* ZOrderPosition/*[out,retval]*/) = 0; // [129]
  virtual HRESULT STDMETHODCALLTYPE get_Script(Office_2k::ScriptPtr* Script/*[out,retval]*/) = 0; // [130]
  virtual HRESULT STDMETHODCALLTYPE get_AlternativeText(BSTR* AlternativeText/*[out,retval]*/) = 0; // [131]
  virtual HRESULT STDMETHODCALLTYPE set_AlternativeText(BSTR AlternativeText/*[in]*/) = 0; // [131]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  int __fastcall get_Count(void)
  {
    int Count;
    OLECHECK(this->get_Count((int*)&Count));
    return Count;
  }

  Office_2k::ShapePtr __fastcall Item(TVariantInParam Index/*[in]*/)
  {
    Office_2k::ShapePtr Item;
    OLECHECK(this->Item(Index, (Office_2k::ShapePtr*)&Item));
    return Item;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN _NewEnum;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&_NewEnum));
    return _NewEnum;
  }

  Office_2k::ShapeRangePtr __fastcall Duplicate(void)
  {
    Office_2k::ShapeRangePtr Duplicate;
    OLECHECK(this->Duplicate((Office_2k::ShapeRangePtr*)&Duplicate));
    return Duplicate;
  }

  Office_2k::ShapePtr __fastcall Group(void)
  {
    Office_2k::ShapePtr Group;
    OLECHECK(this->Group((Office_2k::ShapePtr*)&Group));
    return Group;
  }

  Office_2k::ShapePtr __fastcall Regroup(void)
  {
    Office_2k::ShapePtr Regroup;
    OLECHECK(this->Regroup((Office_2k::ShapePtr*)&Regroup));
    return Regroup;
  }

  Office_2k::ShapeRangePtr __fastcall Ungroup(void)
  {
    Office_2k::ShapeRangePtr Ungroup;
    OLECHECK(this->Ungroup((Office_2k::ShapeRangePtr*)&Ungroup));
    return Ungroup;
  }

  Office_2k::AdjustmentsPtr __fastcall get_Adjustments(void)
  {
    Office_2k::AdjustmentsPtr Adjustments;
    OLECHECK(this->get_Adjustments((Office_2k::AdjustmentsPtr*)&Adjustments));
    return Adjustments;
  }

  Office_2k::MsoAutoShapeType __fastcall get_AutoShapeType(void)
  {
    Office_2k::MsoAutoShapeType AutoShapeType;
    OLECHECK(this->get_AutoShapeType((Office_2k::MsoAutoShapeType*)&AutoShapeType));
    return AutoShapeType;
  }

  Office_2k::MsoBlackWhiteMode __fastcall get_BlackWhiteMode(void)
  {
    Office_2k::MsoBlackWhiteMode BlackWhiteMode;
    OLECHECK(this->get_BlackWhiteMode((Office_2k::MsoBlackWhiteMode*)&BlackWhiteMode));
    return BlackWhiteMode;
  }

  Office_2k::CalloutFormatPtr __fastcall get_Callout(void)
  {
    Office_2k::CalloutFormatPtr Callout;
    OLECHECK(this->get_Callout((Office_2k::CalloutFormatPtr*)&Callout));
    return Callout;
  }

  int __fastcall get_ConnectionSiteCount(void)
  {
    int ConnectionSiteCount;
    OLECHECK(this->get_ConnectionSiteCount((int*)&ConnectionSiteCount));
    return ConnectionSiteCount;
  }

  Office_2k::MsoTriState __fastcall get_Connector(void)
  {
    Office_2k::MsoTriState Connector;
    OLECHECK(this->get_Connector((Office_2k::MsoTriState*)&Connector));
    return Connector;
  }

  Office_2k::ConnectorFormatPtr __fastcall get_ConnectorFormat(void)
  {
    Office_2k::ConnectorFormatPtr ConnectorFormat;
    OLECHECK(this->get_ConnectorFormat((Office_2k::ConnectorFormatPtr*)&ConnectorFormat));
    return ConnectorFormat;
  }

  Office_2k::FillFormatPtr __fastcall get_Fill(void)
  {
    Office_2k::FillFormatPtr Fill;
    OLECHECK(this->get_Fill((Office_2k::FillFormatPtr*)&Fill));
    return Fill;
  }

  Office_2k::GroupShapesPtr __fastcall get_GroupItems(void)
  {
    Office_2k::GroupShapesPtr GroupItems;
    OLECHECK(this->get_GroupItems((Office_2k::GroupShapesPtr*)&GroupItems));
    return GroupItems;
  }

  float __fastcall get_Height(void)
  {
    float Height;
    OLECHECK(this->get_Height((float*)&Height));
    return Height;
  }

  Office_2k::MsoTriState __fastcall get_HorizontalFlip(void)
  {
    Office_2k::MsoTriState HorizontalFlip;
    OLECHECK(this->get_HorizontalFlip((Office_2k::MsoTriState*)&HorizontalFlip));
    return HorizontalFlip;
  }

  float __fastcall get_Left(void)
  {
    float Left;
    OLECHECK(this->get_Left((float*)&Left));
    return Left;
  }

  Office_2k::LineFormatPtr __fastcall get_Line(void)
  {
    Office_2k::LineFormatPtr Line;
    OLECHECK(this->get_Line((Office_2k::LineFormatPtr*)&Line));
    return Line;
  }

  Office_2k::MsoTriState __fastcall get_LockAspectRatio(void)
  {
    Office_2k::MsoTriState LockAspectRatio;
    OLECHECK(this->get_LockAspectRatio((Office_2k::MsoTriState*)&LockAspectRatio));
    return LockAspectRatio;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  Office_2k::ShapeNodesPtr __fastcall get_Nodes(void)
  {
    Office_2k::ShapeNodesPtr Nodes;
    OLECHECK(this->get_Nodes((Office_2k::ShapeNodesPtr*)&Nodes));
    return Nodes;
  }

  float __fastcall get_Rotation(void)
  {
    float Rotation;
    OLECHECK(this->get_Rotation((float*)&Rotation));
    return Rotation;
  }

  Office_2k::PictureFormatPtr __fastcall get_PictureFormat(void)
  {
    Office_2k::PictureFormatPtr Picture;
    OLECHECK(this->get_PictureFormat((Office_2k::PictureFormatPtr*)&Picture));
    return Picture;
  }

  Office_2k::ShadowFormatPtr __fastcall get_Shadow(void)
  {
    Office_2k::ShadowFormatPtr Shadow;
    OLECHECK(this->get_Shadow((Office_2k::ShadowFormatPtr*)&Shadow));
    return Shadow;
  }

  Office_2k::TextEffectFormatPtr __fastcall get_TextEffect(void)
  {
    Office_2k::TextEffectFormatPtr TextEffect;
    OLECHECK(this->get_TextEffect((Office_2k::TextEffectFormatPtr*)&TextEffect));
    return TextEffect;
  }

  Office_2k::TextFramePtr __fastcall get_TextFrame(void)
  {
    Office_2k::TextFramePtr TextFrame;
    OLECHECK(this->get_TextFrame((Office_2k::TextFramePtr*)&TextFrame));
    return TextFrame;
  }

  Office_2k::ThreeDFormatPtr __fastcall get_ThreeD(void)
  {
    Office_2k::ThreeDFormatPtr ThreeD;
    OLECHECK(this->get_ThreeD((Office_2k::ThreeDFormatPtr*)&ThreeD));
    return ThreeD;
  }

  float __fastcall get_Top(void)
  {
    float Top;
    OLECHECK(this->get_Top((float*)&Top));
    return Top;
  }

  Office_2k::MsoShapeType __fastcall get_Type(void)
  {
    Office_2k::MsoShapeType Type;
    OLECHECK(this->get_Type((Office_2k::MsoShapeType*)&Type));
    return Type;
  }

  Office_2k::MsoTriState __fastcall get_VerticalFlip(void)
  {
    Office_2k::MsoTriState VerticalFlip;
    OLECHECK(this->get_VerticalFlip((Office_2k::MsoTriState*)&VerticalFlip));
    return VerticalFlip;
  }

  TVariant __fastcall get_Vertices(void)
  {
    TVariant Vertices;
    OLECHECK(this->get_Vertices((TVariant*)&Vertices));
    return Vertices;
  }

  Office_2k::MsoTriState __fastcall get_Visible(void)
  {
    Office_2k::MsoTriState Visible;
    OLECHECK(this->get_Visible((Office_2k::MsoTriState*)&Visible));
    return Visible;
  }

  float __fastcall get_Width(void)
  {
    float Width;
    OLECHECK(this->get_Width((float*)&Width));
    return Width;
  }

  int __fastcall get_ZOrderPosition(void)
  {
    int ZOrderPosition;
    OLECHECK(this->get_ZOrderPosition((int*)&ZOrderPosition));
    return ZOrderPosition;
  }

  Office_2k::ScriptPtr __fastcall get_Script(void)
  {
    Office_2k::ScriptPtr Script;
    OLECHECK(this->get_Script((Office_2k::ScriptPtr*)&Script));
    return Script;
  }

  BSTR __fastcall get_AlternativeText(void)
  {
    BSTR AlternativeText = 0;
    OLECHECK(this->get_AlternativeText((BSTR*)&AlternativeText));
    return AlternativeText;
  }


  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   Office_2k::AdjustmentsPtr Adjustments = {read = get_Adjustments};
  __property   Office_2k::MsoAutoShapeType AutoShapeType = {read = get_AutoShapeType, write = set_AutoShapeType};
  __property   Office_2k::MsoBlackWhiteMode BlackWhiteMode = {read = get_BlackWhiteMode, write = set_BlackWhiteMode};
  __property   Office_2k::CalloutFormatPtr Callout = {read = get_Callout};
  __property   int             ConnectionSiteCount = {read = get_ConnectionSiteCount};
  __property   Office_2k::MsoTriState Connector = {read = get_Connector};
  __property   Office_2k::ConnectorFormatPtr ConnectorFormat = {read = get_ConnectorFormat};
  __property   Office_2k::FillFormatPtr Fill = {read = get_Fill};
  __property   Office_2k::GroupShapesPtr GroupItems = {read = get_GroupItems};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   Office_2k::MsoTriState HorizontalFlip = {read = get_HorizontalFlip};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   Office_2k::LineFormatPtr Line = {read = get_Line};
  __property   Office_2k::MsoTriState LockAspectRatio = {read = get_LockAspectRatio, write = set_LockAspectRatio};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   Office_2k::ShapeNodesPtr Nodes = {read = get_Nodes};
  __property   float           Rotation = {read = get_Rotation, write = set_Rotation};
  __property   Office_2k::PictureFormatPtr PictureFormat = {read = get_PictureFormat};
  __property   Office_2k::ShadowFormatPtr Shadow = {read = get_Shadow};
  __property   Office_2k::TextEffectFormatPtr TextEffect = {read = get_TextEffect};
  __property   Office_2k::TextFramePtr TextFrame = {read = get_TextFrame};
  __property   Office_2k::ThreeDFormatPtr ThreeD = {read = get_ThreeD};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   Office_2k::MsoShapeType Type = {read = get_Type};
  __property   Office_2k::MsoTriState VerticalFlip = {read = get_VerticalFlip};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   int             ZOrderPosition = {read = get_ZOrderPosition};
  __property   Office_2k::ScriptPtr Script = {read = get_Script};
  __property   BSTR            AlternativeText = {read = get_AlternativeText, write = set_AlternativeText};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Shapes
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C031E-0000-0000-C000-000000000046}
// *********************************************************************//
interface Shapes  : public Office_2k::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Count(int* Count/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE Item(TVariantInParam Index/*[in]*/, 
                                         Office_2k::ShapePtr* Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE AddCallout(Office_2k::MsoCalloutType Type/*[in]*/, 
                                               float Left/*[in]*/, float Top/*[in]*/, 
                                               float Width/*[in]*/, float Height/*[in]*/, 
                                               Office_2k::ShapePtr* Callout/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE AddConnector(Office_2k::MsoConnectorType Type/*[in]*/, 
                                                 float BeginX/*[in]*/, float BeginY/*[in]*/, 
                                                 float EndX/*[in]*/, float EndY/*[in]*/, 
                                                 Office_2k::ShapePtr* Connector/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE AddCurve(TVariantInParam SafeArrayOfPoints/*[in]*/, 
                                             Office_2k::ShapePtr* Curve/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE AddLabel(Office_2k::MsoTextOrientation Orientation/*[in]*/, 
                                             float Left/*[in]*/, float Top/*[in]*/, 
                                             float Width/*[in]*/, float Height/*[in]*/, 
                                             Office_2k::ShapePtr* Label/*[out,retval]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE AddLine(float BeginX/*[in]*/, float BeginY/*[in]*/, 
                                            float EndX/*[in]*/, float EndY/*[in]*/, 
                                            Office_2k::ShapePtr* Line/*[out,retval]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE AddPicture(BSTR FileName/*[in]*/, 
                                               Office_2k::MsoTriState LinkToFile/*[in]*/, 
                                               Office_2k::MsoTriState SaveWithDocument/*[in]*/, 
                                               float Left/*[in]*/, float Top/*[in]*/, 
                                               float Width/*[in,def,opt]*/, 
                                               float Height/*[in,def,opt]*/, 
                                               Office_2k::ShapePtr* Picture/*[out,retval]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE AddPolyline(TVariantInParam SafeArrayOfPoints/*[in]*/, 
                                                Office_2k::ShapePtr* Polyline/*[out,retval]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE AddShape(Office_2k::MsoAutoShapeType Type/*[in]*/, 
                                             float Left/*[in]*/, float Top/*[in]*/, 
                                             float Width/*[in]*/, float Height/*[in]*/, 
                                             Office_2k::ShapePtr* Shape/*[out,retval]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE AddTextEffect(Office_2k::MsoPresetTextEffect PresetTextEffect/*[in]*/, 
                                                  BSTR Text/*[in]*/, BSTR FontName/*[in]*/, 
                                                  float FontSize/*[in]*/, 
                                                  Office_2k::MsoTriState FontBold/*[in]*/, 
                                                  Office_2k::MsoTriState FontItalic/*[in]*/, 
                                                  float Left/*[in]*/, float Top/*[in]*/, 
                                                  Office_2k::ShapePtr* TextEffect/*[out,retval]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE AddTextbox(Office_2k::MsoTextOrientation Orientation/*[in]*/, 
                                               float Left/*[in]*/, float Top/*[in]*/, 
                                               float Width/*[in]*/, float Height/*[in]*/, 
                                               Office_2k::ShapePtr* Textbox/*[out,retval]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE BuildFreeform(Office_2k::MsoEditingType EditingType/*[in]*/, 
                                                  float X1/*[in]*/, float Y1/*[in]*/, 
                                                  Office_2k::FreeformBuilderPtr* FreeformBuilder/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE Range(TVariantInParam Index/*[in]*/, 
                                          Office_2k::ShapeRangePtr* Range/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE SelectAll(void) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE get_Background(Office_2k::ShapePtr* Background/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_Default(Office_2k::ShapePtr* Default/*[out,retval]*/) = 0; // [101]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  int __fastcall get_Count(void)
  {
    int Count;
    OLECHECK(this->get_Count((int*)&Count));
    return Count;
  }

  Office_2k::ShapePtr __fastcall Item(TVariantInParam Index/*[in]*/)
  {
    Office_2k::ShapePtr Item;
    OLECHECK(this->Item(Index, (Office_2k::ShapePtr*)&Item));
    return Item;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN _NewEnum;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&_NewEnum));
    return _NewEnum;
  }

  Office_2k::ShapePtr __fastcall AddCallout(Office_2k::MsoCalloutType Type/*[in]*/, 
                                            float Left/*[in]*/, float Top/*[in]*/, 
                                            float Width/*[in]*/, float Height/*[in]*/)
  {
    Office_2k::ShapePtr Callout;
    OLECHECK(this->AddCallout(Type, Left, Top, Width, Height, (Office_2k::ShapePtr*)&Callout));
    return Callout;
  }

  Office_2k::ShapePtr __fastcall AddConnector(Office_2k::MsoConnectorType Type/*[in]*/, 
                                              float BeginX/*[in]*/, float BeginY/*[in]*/, 
                                              float EndX/*[in]*/, float EndY/*[in]*/)
  {
    Office_2k::ShapePtr Connector;
    OLECHECK(this->AddConnector(Type, BeginX, BeginY, EndX, EndY, (Office_2k::ShapePtr*)&Connector));
    return Connector;
  }

  Office_2k::ShapePtr __fastcall AddCurve(TVariantInParam SafeArrayOfPoints/*[in]*/)
  {
    Office_2k::ShapePtr Curve;
    OLECHECK(this->AddCurve(SafeArrayOfPoints, (Office_2k::ShapePtr*)&Curve));
    return Curve;
  }

  Office_2k::ShapePtr __fastcall AddLabel(Office_2k::MsoTextOrientation Orientation/*[in]*/, 
                                          float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                                          float Height/*[in]*/)
  {
    Office_2k::ShapePtr Label;
    OLECHECK(this->AddLabel(Orientation, Left, Top, Width, Height, (Office_2k::ShapePtr*)&Label));
    return Label;
  }

  Office_2k::ShapePtr __fastcall AddLine(float BeginX/*[in]*/, float BeginY/*[in]*/, 
                                         float EndX/*[in]*/, float EndY/*[in]*/)
  {
    Office_2k::ShapePtr Line;
    OLECHECK(this->AddLine(BeginX, BeginY, EndX, EndY, (Office_2k::ShapePtr*)&Line));
    return Line;
  }

  Office_2k::ShapePtr __fastcall AddPicture(BSTR FileName/*[in]*/, 
                                            Office_2k::MsoTriState LinkToFile/*[in]*/, 
                                            Office_2k::MsoTriState SaveWithDocument/*[in]*/, 
                                            float Left/*[in]*/, float Top/*[in]*/, 
                                            float Width/*[in,def,opt]*/, 
                                            float Height/*[in,def,opt]*/)
  {
    Office_2k::ShapePtr Picture;
    OLECHECK(this->AddPicture(FileName, LinkToFile, SaveWithDocument, Left, Top, Width, Height, (Office_2k::ShapePtr*)&Picture));
    return Picture;
  }

  Office_2k::ShapePtr __fastcall AddPolyline(TVariantInParam SafeArrayOfPoints/*[in]*/)
  {
    Office_2k::ShapePtr Polyline;
    OLECHECK(this->AddPolyline(SafeArrayOfPoints, (Office_2k::ShapePtr*)&Polyline));
    return Polyline;
  }

  Office_2k::ShapePtr __fastcall AddShape(Office_2k::MsoAutoShapeType Type/*[in]*/, 
                                          float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                                          float Height/*[in]*/)
  {
    Office_2k::ShapePtr Shape;
    OLECHECK(this->AddShape(Type, Left, Top, Width, Height, (Office_2k::ShapePtr*)&Shape));
    return Shape;
  }

  Office_2k::ShapePtr __fastcall AddTextEffect(Office_2k::MsoPresetTextEffect PresetTextEffect/*[in]*/, 
                                               BSTR Text/*[in]*/, BSTR FontName/*[in]*/, 
                                               float FontSize/*[in]*/, 
                                               Office_2k::MsoTriState FontBold/*[in]*/, 
                                               Office_2k::MsoTriState FontItalic/*[in]*/, 
                                               float Left/*[in]*/, float Top/*[in]*/)
  {
    Office_2k::ShapePtr TextEffect;
    OLECHECK(this->AddTextEffect(PresetTextEffect, Text, FontName, FontSize, FontBold, FontItalic, 
                                 Left, Top, (Office_2k::ShapePtr*)&TextEffect));
    return TextEffect;
  }

  Office_2k::ShapePtr __fastcall AddTextbox(Office_2k::MsoTextOrientation Orientation/*[in]*/, 
                                            float Left/*[in]*/, float Top/*[in]*/, 
                                            float Width/*[in]*/, float Height/*[in]*/)
  {
    Office_2k::ShapePtr Textbox;
    OLECHECK(this->AddTextbox(Orientation, Left, Top, Width, Height, (Office_2k::ShapePtr*)&Textbox));
    return Textbox;
  }

  Office_2k::FreeformBuilderPtr __fastcall BuildFreeform(Office_2k::MsoEditingType EditingType/*[in]*/, 
                                                         float X1/*[in]*/, float Y1/*[in]*/)
  {
    Office_2k::FreeformBuilderPtr FreeformBuilder;
    OLECHECK(this->BuildFreeform(EditingType, X1, Y1, (Office_2k::FreeformBuilderPtr*)&FreeformBuilder));
    return FreeformBuilder;
  }

  Office_2k::ShapeRangePtr __fastcall Range(TVariantInParam Index/*[in]*/)
  {
    Office_2k::ShapeRangePtr Range;
    OLECHECK(this->Range(Index, (Office_2k::ShapeRangePtr*)&Range));
    return Range;
  }

  Office_2k::ShapePtr __fastcall get_Background(void)
  {
    Office_2k::ShapePtr Background;
    OLECHECK(this->get_Background((Office_2k::ShapePtr*)&Background));
    return Background;
  }

  Office_2k::ShapePtr __fastcall get_Default(void)
  {
    Office_2k::ShapePtr Default;
    OLECHECK(this->get_Default((Office_2k::ShapePtr*)&Default));
    return Default;
  }


  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   Office_2k::ShapePtr Background = {read = get_Background};
  __property   Office_2k::ShapePtr Default = {read = get_Default};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: TextEffectFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C031F-0000-0000-C000-000000000046}
// *********************************************************************//
interface TextEffectFormat  : public Office_2k::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE ToggleVerticalText(void) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_Alignment(Office_2k::MsoTextEffectAlignment* Alignment/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE set_Alignment(Office_2k::MsoTextEffectAlignment Alignment/*[in]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_FontBold(Office_2k::MsoTriState* FontBold/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_FontBold(Office_2k::MsoTriState FontBold/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_FontItalic(Office_2k::MsoTriState* FontItalic/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_FontItalic(Office_2k::MsoTriState FontItalic/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_FontName(BSTR* FontName/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE set_FontName(BSTR FontName/*[in]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_FontSize(float* FontSize/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE set_FontSize(float FontSize/*[in]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_KernedPairs(Office_2k::MsoTriState* KernedPairs/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE set_KernedPairs(Office_2k::MsoTriState KernedPairs/*[in]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_NormalizedHeight(Office_2k::MsoTriState* NormalizedHeight/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE set_NormalizedHeight(Office_2k::MsoTriState NormalizedHeight/*[in]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_PresetShape(Office_2k::MsoPresetTextEffectShape* PresetShape/*[out,retval]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE set_PresetShape(Office_2k::MsoPresetTextEffectShape PresetShape/*[in]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE get_PresetTextEffect(Office_2k::MsoPresetTextEffect* Preset/*[out,retval]*/) = 0; // [108]
  virtual HRESULT STDMETHODCALLTYPE set_PresetTextEffect(Office_2k::MsoPresetTextEffect Preset/*[in]*/) = 0; // [108]
  virtual HRESULT STDMETHODCALLTYPE get_RotatedChars(Office_2k::MsoTriState* RotatedChars/*[out,retval]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE set_RotatedChars(Office_2k::MsoTriState RotatedChars/*[in]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE get_Text(BSTR* Text/*[out,retval]*/) = 0; // [110]
  virtual HRESULT STDMETHODCALLTYPE set_Text(BSTR Text/*[in]*/) = 0; // [110]
  virtual HRESULT STDMETHODCALLTYPE get_Tracking(float* Tracking/*[out,retval]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE set_Tracking(float Tracking/*[in]*/) = 0; // [111]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Office_2k::MsoTextEffectAlignment __fastcall get_Alignment(void)
  {
    Office_2k::MsoTextEffectAlignment Alignment;
    OLECHECK(this->get_Alignment((Office_2k::MsoTextEffectAlignment*)&Alignment));
    return Alignment;
  }

  Office_2k::MsoTriState __fastcall get_FontBold(void)
  {
    Office_2k::MsoTriState FontBold;
    OLECHECK(this->get_FontBold((Office_2k::MsoTriState*)&FontBold));
    return FontBold;
  }

  Office_2k::MsoTriState __fastcall get_FontItalic(void)
  {
    Office_2k::MsoTriState FontItalic;
    OLECHECK(this->get_FontItalic((Office_2k::MsoTriState*)&FontItalic));
    return FontItalic;
  }

  BSTR __fastcall get_FontName(void)
  {
    BSTR FontName = 0;
    OLECHECK(this->get_FontName((BSTR*)&FontName));
    return FontName;
  }

  float __fastcall get_FontSize(void)
  {
    float FontSize;
    OLECHECK(this->get_FontSize((float*)&FontSize));
    return FontSize;
  }

  Office_2k::MsoTriState __fastcall get_KernedPairs(void)
  {
    Office_2k::MsoTriState KernedPairs;
    OLECHECK(this->get_KernedPairs((Office_2k::MsoTriState*)&KernedPairs));
    return KernedPairs;
  }

  Office_2k::MsoTriState __fastcall get_NormalizedHeight(void)
  {
    Office_2k::MsoTriState NormalizedHeight;
    OLECHECK(this->get_NormalizedHeight((Office_2k::MsoTriState*)&NormalizedHeight));
    return NormalizedHeight;
  }

  Office_2k::MsoPresetTextEffectShape __fastcall get_PresetShape(void)
  {
    Office_2k::MsoPresetTextEffectShape PresetShape;
    OLECHECK(this->get_PresetShape((Office_2k::MsoPresetTextEffectShape*)&PresetShape));
    return PresetShape;
  }

  Office_2k::MsoPresetTextEffect __fastcall get_PresetTextEffect(void)
  {
    Office_2k::MsoPresetTextEffect Preset;
    OLECHECK(this->get_PresetTextEffect((Office_2k::MsoPresetTextEffect*)&Preset));
    return Preset;
  }

  Office_2k::MsoTriState __fastcall get_RotatedChars(void)
  {
    Office_2k::MsoTriState RotatedChars;
    OLECHECK(this->get_RotatedChars((Office_2k::MsoTriState*)&RotatedChars));
    return RotatedChars;
  }

  BSTR __fastcall get_Text(void)
  {
    BSTR Text = 0;
    OLECHECK(this->get_Text((BSTR*)&Text));
    return Text;
  }

  float __fastcall get_Tracking(void)
  {
    float Tracking;
    OLECHECK(this->get_Tracking((float*)&Tracking));
    return Tracking;
  }


  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoTextEffectAlignment Alignment = {read = get_Alignment, write = set_Alignment};
  __property   Office_2k::MsoTriState FontBold = {read = get_FontBold, write = set_FontBold};
  __property   Office_2k::MsoTriState FontItalic = {read = get_FontItalic, write = set_FontItalic};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   float           FontSize = {read = get_FontSize, write = set_FontSize};
  __property   Office_2k::MsoTriState KernedPairs = {read = get_KernedPairs, write = set_KernedPairs};
  __property   Office_2k::MsoTriState NormalizedHeight = {read = get_NormalizedHeight, write = set_NormalizedHeight};
  __property   Office_2k::MsoPresetTextEffectShape PresetShape = {read = get_PresetShape, write = set_PresetShape};
  __property   Office_2k::MsoPresetTextEffect PresetTextEffect = {read = get_PresetTextEffect, write = set_PresetTextEffect};
  __property   Office_2k::MsoTriState RotatedChars = {read = get_RotatedChars, write = set_RotatedChars};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   float           Tracking = {read = get_Tracking, write = set_Tracking};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: TextFrame
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0320-0000-0000-C000-000000000046}
// *********************************************************************//
interface TextFrame  : public Office_2k::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_MarginBottom(float* MarginBottom/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE set_MarginBottom(float MarginBottom/*[in]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_MarginLeft(float* MarginLeft/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_MarginLeft(float MarginLeft/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_MarginRight(float* MarginRight/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_MarginRight(float MarginRight/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_MarginTop(float* MarginTop/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE set_MarginTop(float MarginTop/*[in]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_Orientation(Office_2k::MsoTextOrientation* Orientation/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE set_Orientation(Office_2k::MsoTextOrientation Orientation/*[in]*/) = 0; // [104]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  float __fastcall get_MarginBottom(void)
  {
    float MarginBottom;
    OLECHECK(this->get_MarginBottom((float*)&MarginBottom));
    return MarginBottom;
  }

  float __fastcall get_MarginLeft(void)
  {
    float MarginLeft;
    OLECHECK(this->get_MarginLeft((float*)&MarginLeft));
    return MarginLeft;
  }

  float __fastcall get_MarginRight(void)
  {
    float MarginRight;
    OLECHECK(this->get_MarginRight((float*)&MarginRight));
    return MarginRight;
  }

  float __fastcall get_MarginTop(void)
  {
    float MarginTop;
    OLECHECK(this->get_MarginTop((float*)&MarginTop));
    return MarginTop;
  }

  Office_2k::MsoTextOrientation __fastcall get_Orientation(void)
  {
    Office_2k::MsoTextOrientation Orientation;
    OLECHECK(this->get_Orientation((Office_2k::MsoTextOrientation*)&Orientation));
    return Orientation;
  }


  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   float           MarginBottom = {read = get_MarginBottom, write = set_MarginBottom};
  __property   float           MarginLeft = {read = get_MarginLeft, write = set_MarginLeft};
  __property   float           MarginRight = {read = get_MarginRight, write = set_MarginRight};
  __property   float           MarginTop = {read = get_MarginTop, write = set_MarginTop};
  __property   Office_2k::MsoTextOrientation Orientation = {read = get_Orientation, write = set_Orientation};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ThreeDFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0321-0000-0000-C000-000000000046}
// *********************************************************************//
interface ThreeDFormat  : public Office_2k::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE IncrementRotationX(float Increment/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE IncrementRotationY(float Increment/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE ResetRotation(void) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE SetThreeDFormat(Office_2k::MsoPresetThreeDFormat PresetThreeDFormat/*[in]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE SetExtrusionDirection(Office_2k::MsoPresetExtrusionDirection PresetExtrusionDirection/*[in]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE get_Depth(float* Depth/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE set_Depth(float Depth/*[in]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_ExtrusionColor(Office_2k::ColorFormatPtr* ExtrusionColor/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_ExtrusionColorType(Office_2k::MsoExtrusionColorType* ExtrusionColorType/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_ExtrusionColorType(Office_2k::MsoExtrusionColorType ExtrusionColorType/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_Perspective(Office_2k::MsoTriState* Perspective/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE set_Perspective(Office_2k::MsoTriState Perspective/*[in]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_PresetExtrusionDirection(Office_2k::MsoPresetExtrusionDirection* PresetExtrusionDirection/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_PresetLightingDirection(Office_2k::MsoPresetLightingDirection* PresetLightingDirection/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE set_PresetLightingDirection(Office_2k::MsoPresetLightingDirection PresetLightingDirection/*[in]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_PresetLightingSoftness(Office_2k::MsoPresetLightingSoftness* PresetLightingSoftness/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE set_PresetLightingSoftness(Office_2k::MsoPresetLightingSoftness PresetLightingSoftness/*[in]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_PresetMaterial(Office_2k::MsoPresetMaterial* PresetMaterial/*[out,retval]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE set_PresetMaterial(Office_2k::MsoPresetMaterial PresetMaterial/*[in]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE get_PresetThreeDFormat(Office_2k::MsoPresetThreeDFormat* PresetThreeDFormat/*[out,retval]*/) = 0; // [108]
  virtual HRESULT STDMETHODCALLTYPE get_RotationX(float* RotationX/*[out,retval]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE set_RotationX(float RotationX/*[in]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE get_RotationY(float* RotationY/*[out,retval]*/) = 0; // [110]
  virtual HRESULT STDMETHODCALLTYPE set_RotationY(float RotationY/*[in]*/) = 0; // [110]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(Office_2k::MsoTriState Visible/*[in]*/) = 0; // [111]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  float __fastcall get_Depth(void)
  {
    float Depth;
    OLECHECK(this->get_Depth((float*)&Depth));
    return Depth;
  }

  Office_2k::ColorFormatPtr __fastcall get_ExtrusionColor(void)
  {
    Office_2k::ColorFormatPtr ExtrusionColor;
    OLECHECK(this->get_ExtrusionColor((Office_2k::ColorFormatPtr*)&ExtrusionColor));
    return ExtrusionColor;
  }

  Office_2k::MsoExtrusionColorType __fastcall get_ExtrusionColorType(void)
  {
    Office_2k::MsoExtrusionColorType ExtrusionColorType;
    OLECHECK(this->get_ExtrusionColorType((Office_2k::MsoExtrusionColorType*)&ExtrusionColorType));
    return ExtrusionColorType;
  }

  Office_2k::MsoTriState __fastcall get_Perspective(void)
  {
    Office_2k::MsoTriState Perspective;
    OLECHECK(this->get_Perspective((Office_2k::MsoTriState*)&Perspective));
    return Perspective;
  }

  Office_2k::MsoPresetExtrusionDirection __fastcall get_PresetExtrusionDirection(void)
  {
    Office_2k::MsoPresetExtrusionDirection PresetExtrusionDirection;
    OLECHECK(this->get_PresetExtrusionDirection((Office_2k::MsoPresetExtrusionDirection*)&PresetExtrusionDirection));
    return PresetExtrusionDirection;
  }

  Office_2k::MsoPresetLightingDirection __fastcall get_PresetLightingDirection(void)
  {
    Office_2k::MsoPresetLightingDirection PresetLightingDirection;
    OLECHECK(this->get_PresetLightingDirection((Office_2k::MsoPresetLightingDirection*)&PresetLightingDirection));
    return PresetLightingDirection;
  }

  Office_2k::MsoPresetLightingSoftness __fastcall get_PresetLightingSoftness(void)
  {
    Office_2k::MsoPresetLightingSoftness PresetLightingSoftness;
    OLECHECK(this->get_PresetLightingSoftness((Office_2k::MsoPresetLightingSoftness*)&PresetLightingSoftness));
    return PresetLightingSoftness;
  }

  Office_2k::MsoPresetMaterial __fastcall get_PresetMaterial(void)
  {
    Office_2k::MsoPresetMaterial PresetMaterial;
    OLECHECK(this->get_PresetMaterial((Office_2k::MsoPresetMaterial*)&PresetMaterial));
    return PresetMaterial;
  }

  Office_2k::MsoPresetThreeDFormat __fastcall get_PresetThreeDFormat(void)
  {
    Office_2k::MsoPresetThreeDFormat PresetThreeDFormat;
    OLECHECK(this->get_PresetThreeDFormat((Office_2k::MsoPresetThreeDFormat*)&PresetThreeDFormat));
    return PresetThreeDFormat;
  }

  float __fastcall get_RotationX(void)
  {
    float RotationX;
    OLECHECK(this->get_RotationX((float*)&RotationX));
    return RotationX;
  }

  float __fastcall get_RotationY(void)
  {
    float RotationY;
    OLECHECK(this->get_RotationY((float*)&RotationY));
    return RotationY;
  }

  Office_2k::MsoTriState __fastcall get_Visible(void)
  {
    Office_2k::MsoTriState Visible;
    OLECHECK(this->get_Visible((Office_2k::MsoTriState*)&Visible));
    return Visible;
  }


  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   float           Depth = {read = get_Depth, write = set_Depth};
  __property   Office_2k::ColorFormatPtr ExtrusionColor = {read = get_ExtrusionColor};
  __property   Office_2k::MsoExtrusionColorType ExtrusionColorType = {read = get_ExtrusionColorType, write = set_ExtrusionColorType};
  __property   Office_2k::MsoTriState Perspective = {read = get_Perspective, write = set_Perspective};
  __property   Office_2k::MsoPresetExtrusionDirection PresetExtrusionDirection = {read = get_PresetExtrusionDirection};
  __property   Office_2k::MsoPresetLightingDirection PresetLightingDirection = {read = get_PresetLightingDirection, write = set_PresetLightingDirection};
  __property   Office_2k::MsoPresetLightingSoftness PresetLightingSoftness = {read = get_PresetLightingSoftness, write = set_PresetLightingSoftness};
  __property   Office_2k::MsoPresetMaterial PresetMaterial = {read = get_PresetMaterial, write = set_PresetMaterial};
  __property   Office_2k::MsoPresetThreeDFormat PresetThreeDFormat = {read = get_PresetThreeDFormat};
  __property   float           RotationX = {read = get_RotationX, write = set_RotationX};
  __property   float           RotationY = {read = get_RotationY, write = set_RotationY};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMsoDispCagNotifySink
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0359-0000-0000-C000-000000000046}
// *********************************************************************//
interface IMsoDispCagNotifySink  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE InsertClip(LPUNKNOWN pClipMoniker/*[in]*/, 
                                               LPUNKNOWN pItemMoniker/*[in]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE WindowIsClosing(void) = 0; // [2]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Balloon
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0324-0000-0000-C000-000000000046}
// *********************************************************************//
interface Balloon  : public Office_2k::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Checkboxes(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Labels(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_BalloonType(Office_2k::MsoBalloonType pbty/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_BalloonType(Office_2k::MsoBalloonType* pbty/*[out,retval]*/) = 0; // [1610809347]
  virtual HRESULT STDMETHODCALLTYPE set_Icon(Office_2k::MsoIconType picn/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Icon(Office_2k::MsoIconType* picn/*[out,retval]*/) = 0; // [1610809349]
  virtual HRESULT STDMETHODCALLTYPE set_Heading(BSTR pbstr/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Heading(BSTR* pbstr/*[out,retval]*/) = 0; // [1610809351]
  virtual HRESULT STDMETHODCALLTYPE set_Text(BSTR pbstr/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Text(BSTR* pbstr/*[out,retval]*/) = 0; // [1610809353]
  virtual HRESULT STDMETHODCALLTYPE set_Mode(Office_2k::MsoModeType pmd/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Mode(Office_2k::MsoModeType* pmd/*[out,retval]*/) = 0; // [1610809355]
  virtual HRESULT STDMETHODCALLTYPE set_Animation(Office_2k::MsoAnimationType pfca/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Animation(Office_2k::MsoAnimationType* pfca/*[out,retval]*/) = 0; // [1610809357]
  virtual HRESULT STDMETHODCALLTYPE set_Button(Office_2k::MsoButtonSetType psbs/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Button(Office_2k::MsoButtonSetType* psbs/*[out,retval]*/) = 0; // [1610809359]
  virtual HRESULT STDMETHODCALLTYPE set_Callback(BSTR pbstr/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Callback(BSTR* pbstr/*[out,retval]*/) = 0; // [1610809361]
  virtual HRESULT STDMETHODCALLTYPE set_Private(long plPrivate/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Private(long* plPrivate/*[out,retval]*/) = 0; // [1610809363]
  virtual HRESULT STDMETHODCALLTYPE SetAvoidRectangle(int Left/*[in]*/, int Top/*[in]*/, 
                                                      int Right/*[in]*/, int Bottom/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pbstrName/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Show(Office_2k::MsoBalloonButtonType* pibtn/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Close(void) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Parent((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  LPDISPATCH __fastcall get_Checkboxes(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Checkboxes((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  LPDISPATCH __fastcall get_Labels(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Labels((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  Office_2k::MsoBalloonType __fastcall get_BalloonType(void)
  {
    Office_2k::MsoBalloonType pbty;
    OLECHECK(this->get_BalloonType((Office_2k::MsoBalloonType*)&pbty));
    return pbty;
  }

  Office_2k::MsoIconType __fastcall get_Icon(void)
  {
    Office_2k::MsoIconType picn;
    OLECHECK(this->get_Icon((Office_2k::MsoIconType*)&picn));
    return picn;
  }

  BSTR __fastcall get_Heading(void)
  {
    BSTR pbstr = 0;
    OLECHECK(this->get_Heading((BSTR*)&pbstr));
    return pbstr;
  }

  BSTR __fastcall get_Text(void)
  {
    BSTR pbstr = 0;
    OLECHECK(this->get_Text((BSTR*)&pbstr));
    return pbstr;
  }

  Office_2k::MsoModeType __fastcall get_Mode(void)
  {
    Office_2k::MsoModeType pmd;
    OLECHECK(this->get_Mode((Office_2k::MsoModeType*)&pmd));
    return pmd;
  }

  Office_2k::MsoAnimationType __fastcall get_Animation(void)
  {
    Office_2k::MsoAnimationType pfca;
    OLECHECK(this->get_Animation((Office_2k::MsoAnimationType*)&pfca));
    return pfca;
  }

  Office_2k::MsoButtonSetType __fastcall get_Button(void)
  {
    Office_2k::MsoButtonSetType psbs;
    OLECHECK(this->get_Button((Office_2k::MsoButtonSetType*)&psbs));
    return psbs;
  }

  BSTR __fastcall get_Callback(void)
  {
    BSTR pbstr = 0;
    OLECHECK(this->get_Callback((BSTR*)&pbstr));
    return pbstr;
  }

  long __fastcall get_Private(void)
  {
    long plPrivate;
    OLECHECK(this->get_Private((long*)&plPrivate));
    return plPrivate;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pbstrName = 0;
    OLECHECK(this->get_Name((BSTR*)&pbstrName));
    return pbstrName;
  }

  Office_2k::MsoBalloonButtonType __fastcall Show(void)
  {
    Office_2k::MsoBalloonButtonType pibtn;
    OLECHECK(this->Show((Office_2k::MsoBalloonButtonType*)&pibtn));
    return pibtn;
  }


  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Checkboxes = {read = get_Checkboxes};
  __property   LPDISPATCH      Labels = {read = get_Labels};
  __property   Office_2k::MsoBalloonType BalloonType = {read = get_BalloonType, write = set_BalloonType};
  __property   Office_2k::MsoIconType Icon = {read = get_Icon, write = set_Icon};
  __property   BSTR            Heading = {read = get_Heading, write = set_Heading};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   Office_2k::MsoModeType Mode = {read = get_Mode, write = set_Mode};
  __property   Office_2k::MsoAnimationType Animation = {read = get_Animation, write = set_Animation};
  __property   Office_2k::MsoButtonSetType Button = {read = get_Button, write = set_Button};
  __property   BSTR            Callback = {read = get_Callback, write = set_Callback};
  __property   long            Private = {read = get_Private, write = set_Private};
  __property   BSTR            Name = {read = get_Name};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: BalloonCheckboxes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0326-0000-0000-C000-000000000046}
// *********************************************************************//
interface BalloonCheckboxes  : public Office_2k::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pbstrName/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Item(int Index/*[in]*/, LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(int* pccbx/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Count(int pccbx/*[in]*/) = 0; // [1610809347]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppienum/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Name(void)
  {
    BSTR pbstrName = 0;
    OLECHECK(this->get_Name((BSTR*)&pbstrName));
    return pbstrName;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Parent((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  LPDISPATCH __fastcall get_Item(int Index/*[in]*/)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Item(Index, (LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  int __fastcall get_Count(void)
  {
    int pccbx;
    OLECHECK(this->get_Count((int*)&pccbx));
    return pccbx;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppienum;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppienum));
    return ppienum;
  }


  __property   BSTR            Name = {read = get_Name};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count, write = set_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: BalloonCheckbox
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0328-0000-0000-C000-000000000046}
// *********************************************************************//
interface BalloonCheckbox  : public Office_2k::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Item(BSTR* pbstrName/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pbstrName/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Checked(TOLEBOOL pvarfChecked/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Checked(TOLEBOOL* pvarfChecked/*[out,retval]*/) = 0; // [1610809347]
  virtual HRESULT STDMETHODCALLTYPE set_Text(BSTR pbstr/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Text(BSTR* pbstr/*[out,retval]*/) = 0; // [1610809349]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Item(void)
  {
    BSTR pbstrName = 0;
    OLECHECK(this->get_Item((BSTR*)&pbstrName));
    return pbstrName;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pbstrName = 0;
    OLECHECK(this->get_Name((BSTR*)&pbstrName));
    return pbstrName;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Parent((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  TOLEBOOL __fastcall get_Checked(void)
  {
    TOLEBOOL pvarfChecked;
    OLECHECK(this->get_Checked((TOLEBOOL*)&pvarfChecked));
    return pvarfChecked;
  }

  BSTR __fastcall get_Text(void)
  {
    BSTR pbstr = 0;
    OLECHECK(this->get_Text((BSTR*)&pbstr));
    return pbstr;
  }


  __property   BSTR            Item = {read = get_Item};
  __property   BSTR            Name = {read = get_Name};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   TOLEBOOL        Checked = {read = get_Checked, write = set_Checked};
  __property   BSTR            Text = {read = get_Text, write = set_Text};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: BalloonLabels
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C032E-0000-0000-C000-000000000046}
// *********************************************************************//
interface BalloonLabels  : public Office_2k::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pbstrName/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Item(int Index/*[in]*/, LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(int* pcwz/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Count(int pcwz/*[in]*/) = 0; // [1610809347]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppienum/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Name(void)
  {
    BSTR pbstrName = 0;
    OLECHECK(this->get_Name((BSTR*)&pbstrName));
    return pbstrName;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Parent((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  LPDISPATCH __fastcall get_Item(int Index/*[in]*/)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Item(Index, (LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  int __fastcall get_Count(void)
  {
    int pcwz;
    OLECHECK(this->get_Count((int*)&pcwz));
    return pcwz;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppienum;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppienum));
    return ppienum;
  }


  __property   BSTR            Name = {read = get_Name};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count, write = set_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: BalloonLabel
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0330-0000-0000-C000-000000000046}
// *********************************************************************//
interface BalloonLabel  : public Office_2k::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Item(BSTR* pbstrName/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pbstrName/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Text(BSTR pbstr/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Text(BSTR* pbstr/*[out,retval]*/) = 0; // [1610809347]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Item(void)
  {
    BSTR pbstrName = 0;
    OLECHECK(this->get_Item((BSTR*)&pbstrName));
    return pbstrName;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pbstrName = 0;
    OLECHECK(this->get_Name((BSTR*)&pbstrName));
    return pbstrName;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Parent((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  BSTR __fastcall get_Text(void)
  {
    BSTR pbstr = 0;
    OLECHECK(this->get_Text((BSTR*)&pbstr));
    return pbstr;
  }


  __property   BSTR            Item = {read = get_Item};
  __property   BSTR            Name = {read = get_Name};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Text = {read = get_Text, write = set_Text};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: AnswerWizardFiles
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0361-0000-0000-C000-000000000046}
// *********************************************************************//
interface AnswerWizardFiles  : public Office_2k::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Item(int Index/*[in]*/, BSTR* pbstr/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(int* pCount/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Add(BSTR FileName/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Delete(BSTR FileName/*[in]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Parent((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  BSTR __fastcall get_Item(int Index/*[in]*/)
  {
    BSTR pbstr = 0;
    OLECHECK(this->get_Item(Index, (BSTR*)&pbstr));
    return pbstr;
  }

  int __fastcall get_Count(void)
  {
    int pCount;
    OLECHECK(this->get_Count((int*)&pCount));
    return pCount;
  }


  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: AnswerWizard
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0360-0000-0000-C000-000000000046}
// *********************************************************************//
interface AnswerWizard  : public Office_2k::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Files(Office_2k::AnswerWizardFilesPtr* Files/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ClearFileList(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ResetFileList(void) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Parent((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  Office_2k::AnswerWizardFilesPtr __fastcall get_Files(void)
  {
    Office_2k::AnswerWizardFilesPtr Files;
    OLECHECK(this->get_Files((Office_2k::AnswerWizardFilesPtr*)&Files));
    return Files;
  }


  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::AnswerWizardFilesPtr Files = {read = get_Files};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Assistant
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0322-0000-0000-C000-000000000046}
// *********************************************************************//
interface Assistant  : public Office_2k::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Move(int xLeft/*[in]*/, int yTop/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Top(int pyTop/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Top(int* pyTop/*[out,retval]*/) = 0; // [1610809346]
  virtual HRESULT STDMETHODCALLTYPE set_Left(int pxLeft/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Left(int* pxLeft/*[out,retval]*/) = 0; // [1610809348]
  virtual HRESULT STDMETHODCALLTYPE Help(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE StartWizard(TOLEBOOL On/*[in]*/, BSTR Callback/*[in]*/, 
                                                long PrivateX/*[in]*/, 
                                                TVariantInParam Animation/*[in,opt]*/, 
                                                TVariantInParam CustomTeaser/*[in,opt]*/, 
                                                TVariantInParam Top/*[in,opt]*/, 
                                                TVariantInParam Left/*[in,opt]*/, 
                                                TVariantInParam Bottom/*[in,opt]*/, 
                                                TVariantInParam Right/*[in,opt]*/, 
                                                long* plWizID/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE EndWizard(long WizardID/*[in]*/, TOLEBOOL varfSuccess/*[in]*/, 
                                              TVariantInParam Animation/*[in,opt]*/= TNoParam()) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ActivateWizard(long WizardID/*[in]*/, 
                                                   Office_2k::MsoWizardActType act/*[in]*/, 
                                                   TVariantInParam Animation/*[in,opt]*/= TNoParam()) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ResetTips(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_NewBalloon(Office_2k::BalloonPtr* ppibal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_BalloonError(Office_2k::MsoBalloonErrorType* pbne/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(TOLEBOOL* pvarfVisible/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(TOLEBOOL pvarfVisible/*[in]*/) = 0; // [1610809357]
  virtual HRESULT STDMETHODCALLTYPE get_Animation(Office_2k::MsoAnimationType* pfca/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Animation(Office_2k::MsoAnimationType pfca/*[in]*/) = 0; // [1610809359]
  virtual HRESULT STDMETHODCALLTYPE get_Reduced(TOLEBOOL* pvarfReduced/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Reduced(TOLEBOOL pvarfReduced/*[in]*/) = 0; // [1610809361]
  virtual HRESULT STDMETHODCALLTYPE set_AssistWithHelp(TOLEBOOL pvarfAssistWithHelp/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_AssistWithHelp(TOLEBOOL* pvarfAssistWithHelp/*[out,retval]*/) = 0; // [1610809363]
  virtual HRESULT STDMETHODCALLTYPE set_AssistWithWizards(TOLEBOOL pvarfAssistWithWizards/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_AssistWithWizards(TOLEBOOL* pvarfAssistWithWizards/*[out,retval]*/) = 0; // [1610809365]
  virtual HRESULT STDMETHODCALLTYPE set_AssistWithAlerts(TOLEBOOL pvarfAssistWithAlerts/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_AssistWithAlerts(TOLEBOOL* pvarfAssistWithAlerts/*[out,retval]*/) = 0; // [1610809367]
  virtual HRESULT STDMETHODCALLTYPE set_MoveWhenInTheWay(TOLEBOOL pvarfMove/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_MoveWhenInTheWay(TOLEBOOL* pvarfMove/*[out,retval]*/) = 0; // [1610809369]
  virtual HRESULT STDMETHODCALLTYPE set_Sounds(TOLEBOOL pvarfSounds/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Sounds(TOLEBOOL* pvarfSounds/*[out,retval]*/) = 0; // [1610809371]
  virtual HRESULT STDMETHODCALLTYPE set_FeatureTips(TOLEBOOL pvarfFeatures/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_FeatureTips(TOLEBOOL* pvarfFeatures/*[out,retval]*/) = 0; // [1610809373]
  virtual HRESULT STDMETHODCALLTYPE set_MouseTips(TOLEBOOL pvarfMouse/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_MouseTips(TOLEBOOL* pvarfMouse/*[out,retval]*/) = 0; // [1610809375]
  virtual HRESULT STDMETHODCALLTYPE set_KeyboardShortcutTips(TOLEBOOL pvarfKeyboardShortcuts/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_KeyboardShortcutTips(TOLEBOOL* pvarfKeyboardShortcuts/*[out,retval]*/) = 0; // [1610809377]
  virtual HRESULT STDMETHODCALLTYPE set_HighPriorityTips(TOLEBOOL pvarfHighPriorityTips/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_HighPriorityTips(TOLEBOOL* pvarfHighPriorityTips/*[out,retval]*/) = 0; // [1610809379]
  virtual HRESULT STDMETHODCALLTYPE set_TipOfDay(TOLEBOOL pvarfTipOfDay/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_TipOfDay(TOLEBOOL* pvarfTipOfDay/*[out,retval]*/) = 0; // [1610809381]
  virtual HRESULT STDMETHODCALLTYPE set_GuessHelp(TOLEBOOL pvarfGuessHelp/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_GuessHelp(TOLEBOOL* pvarfGuessHelp/*[out,retval]*/) = 0; // [1610809383]
  virtual HRESULT STDMETHODCALLTYPE set_SearchWhenProgramming(TOLEBOOL pvarfSearchInProgram/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_SearchWhenProgramming(TOLEBOOL* pvarfSearchInProgram/*[out,retval]*/) = 0; // [1610809385]
  virtual HRESULT STDMETHODCALLTYPE get_Item(BSTR* pbstrName/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_FileName(BSTR* pbstr/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_FileName(BSTR pbstr/*[in]*/) = 0; // [1610809388]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pbstrName/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_On(TOLEBOOL* pvarfOn/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_On(TOLEBOOL pvarfOn/*[in]*/) = 0; // [1610809391]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Parent((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  int __fastcall get_Top(void)
  {
    int pyTop;
    OLECHECK(this->get_Top((int*)&pyTop));
    return pyTop;
  }

  int __fastcall get_Left(void)
  {
    int pxLeft;
    OLECHECK(this->get_Left((int*)&pxLeft));
    return pxLeft;
  }

  long __fastcall StartWizard(TOLEBOOL On/*[in]*/, BSTR Callback/*[in]*/, long PrivateX/*[in]*/, 
                              TVariantInParam Animation/*[in,opt]*/= TNoParam(), 
                              TVariantInParam CustomTeaser/*[in,opt]*/= TNoParam(), 
                              TVariantInParam Top/*[in,opt]*/= TNoParam(), 
                              TVariantInParam Left/*[in,opt]*/= TNoParam(), 
                              TVariantInParam Bottom/*[in,opt]*/= TNoParam(), 
                              TVariantInParam Right/*[in,opt]*/= TNoParam())
  {
    long plWizID;
    OLECHECK(this->StartWizard(On, Callback, PrivateX, Animation, CustomTeaser, Top, Left, Bottom, 
                               Right, (long*)&plWizID));
    return plWizID;
  }

  Office_2k::BalloonPtr __fastcall get_NewBalloon(void)
  {
    Office_2k::BalloonPtr ppibal;
    OLECHECK(this->get_NewBalloon((Office_2k::BalloonPtr*)&ppibal));
    return ppibal;
  }

  Office_2k::MsoBalloonErrorType __fastcall get_BalloonError(void)
  {
    Office_2k::MsoBalloonErrorType pbne;
    OLECHECK(this->get_BalloonError((Office_2k::MsoBalloonErrorType*)&pbne));
    return pbne;
  }

  TOLEBOOL __fastcall get_Visible(void)
  {
    TOLEBOOL pvarfVisible;
    OLECHECK(this->get_Visible((TOLEBOOL*)&pvarfVisible));
    return pvarfVisible;
  }

  Office_2k::MsoAnimationType __fastcall get_Animation(void)
  {
    Office_2k::MsoAnimationType pfca;
    OLECHECK(this->get_Animation((Office_2k::MsoAnimationType*)&pfca));
    return pfca;
  }

  TOLEBOOL __fastcall get_Reduced(void)
  {
    TOLEBOOL pvarfReduced;
    OLECHECK(this->get_Reduced((TOLEBOOL*)&pvarfReduced));
    return pvarfReduced;
  }

  TOLEBOOL __fastcall get_AssistWithHelp(void)
  {
    TOLEBOOL pvarfAssistWithHelp;
    OLECHECK(this->get_AssistWithHelp((TOLEBOOL*)&pvarfAssistWithHelp));
    return pvarfAssistWithHelp;
  }

  TOLEBOOL __fastcall get_AssistWithWizards(void)
  {
    TOLEBOOL pvarfAssistWithWizards;
    OLECHECK(this->get_AssistWithWizards((TOLEBOOL*)&pvarfAssistWithWizards));
    return pvarfAssistWithWizards;
  }

  TOLEBOOL __fastcall get_AssistWithAlerts(void)
  {
    TOLEBOOL pvarfAssistWithAlerts;
    OLECHECK(this->get_AssistWithAlerts((TOLEBOOL*)&pvarfAssistWithAlerts));
    return pvarfAssistWithAlerts;
  }

  TOLEBOOL __fastcall get_MoveWhenInTheWay(void)
  {
    TOLEBOOL pvarfMove;
    OLECHECK(this->get_MoveWhenInTheWay((TOLEBOOL*)&pvarfMove));
    return pvarfMove;
  }

  TOLEBOOL __fastcall get_Sounds(void)
  {
    TOLEBOOL pvarfSounds;
    OLECHECK(this->get_Sounds((TOLEBOOL*)&pvarfSounds));
    return pvarfSounds;
  }

  TOLEBOOL __fastcall get_FeatureTips(void)
  {
    TOLEBOOL pvarfFeatures;
    OLECHECK(this->get_FeatureTips((TOLEBOOL*)&pvarfFeatures));
    return pvarfFeatures;
  }

  TOLEBOOL __fastcall get_MouseTips(void)
  {
    TOLEBOOL pvarfMouse;
    OLECHECK(this->get_MouseTips((TOLEBOOL*)&pvarfMouse));
    return pvarfMouse;
  }

  TOLEBOOL __fastcall get_KeyboardShortcutTips(void)
  {
    TOLEBOOL pvarfKeyboardShortcuts;
    OLECHECK(this->get_KeyboardShortcutTips((TOLEBOOL*)&pvarfKeyboardShortcuts));
    return pvarfKeyboardShortcuts;
  }

  TOLEBOOL __fastcall get_HighPriorityTips(void)
  {
    TOLEBOOL pvarfHighPriorityTips;
    OLECHECK(this->get_HighPriorityTips((TOLEBOOL*)&pvarfHighPriorityTips));
    return pvarfHighPriorityTips;
  }

  TOLEBOOL __fastcall get_TipOfDay(void)
  {
    TOLEBOOL pvarfTipOfDay;
    OLECHECK(this->get_TipOfDay((TOLEBOOL*)&pvarfTipOfDay));
    return pvarfTipOfDay;
  }

  TOLEBOOL __fastcall get_GuessHelp(void)
  {
    TOLEBOOL pvarfGuessHelp;
    OLECHECK(this->get_GuessHelp((TOLEBOOL*)&pvarfGuessHelp));
    return pvarfGuessHelp;
  }

  TOLEBOOL __fastcall get_SearchWhenProgramming(void)
  {
    TOLEBOOL pvarfSearchInProgram;
    OLECHECK(this->get_SearchWhenProgramming((TOLEBOOL*)&pvarfSearchInProgram));
    return pvarfSearchInProgram;
  }

  BSTR __fastcall get_Item(void)
  {
    BSTR pbstrName = 0;
    OLECHECK(this->get_Item((BSTR*)&pbstrName));
    return pbstrName;
  }

  BSTR __fastcall get_FileName(void)
  {
    BSTR pbstr = 0;
    OLECHECK(this->get_FileName((BSTR*)&pbstr));
    return pbstr;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pbstrName = 0;
    OLECHECK(this->get_Name((BSTR*)&pbstrName));
    return pbstrName;
  }

  TOLEBOOL __fastcall get_On(void)
  {
    TOLEBOOL pvarfOn;
    OLECHECK(this->get_On((TOLEBOOL*)&pvarfOn));
    return pvarfOn;
  }


  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Top = {read = get_Top, write = set_Top};
  __property   int             Left = {read = get_Left, write = set_Left};
  __property   Office_2k::BalloonPtr NewBalloon = {read = get_NewBalloon};
  __property   Office_2k::MsoBalloonErrorType BalloonError = {read = get_BalloonError};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   Office_2k::MsoAnimationType Animation = {read = get_Animation, write = set_Animation};
  __property   TOLEBOOL        Reduced = {read = get_Reduced, write = set_Reduced};
  __property   TOLEBOOL        AssistWithHelp = {read = get_AssistWithHelp, write = set_AssistWithHelp};
  __property   TOLEBOOL        AssistWithWizards = {read = get_AssistWithWizards, write = set_AssistWithWizards};
  __property   TOLEBOOL        AssistWithAlerts = {read = get_AssistWithAlerts, write = set_AssistWithAlerts};
  __property   TOLEBOOL        MoveWhenInTheWay = {read = get_MoveWhenInTheWay, write = set_MoveWhenInTheWay};
  __property   TOLEBOOL        Sounds = {read = get_Sounds, write = set_Sounds};
  __property   TOLEBOOL        FeatureTips = {read = get_FeatureTips, write = set_FeatureTips};
  __property   TOLEBOOL        MouseTips = {read = get_MouseTips, write = set_MouseTips};
  __property   TOLEBOOL        KeyboardShortcutTips = {read = get_KeyboardShortcutTips, write = set_KeyboardShortcutTips};
  __property   TOLEBOOL        HighPriorityTips = {read = get_HighPriorityTips, write = set_HighPriorityTips};
  __property   TOLEBOOL        TipOfDay = {read = get_TipOfDay, write = set_TipOfDay};
  __property   TOLEBOOL        GuessHelp = {read = get_GuessHelp, write = set_GuessHelp};
  __property   TOLEBOOL        SearchWhenProgramming = {read = get_SearchWhenProgramming, write = set_SearchWhenProgramming};
  __property   BSTR            Item = {read = get_Item};
  __property   BSTR            FileName = {read = get_FileName, write = set_FileName};
  __property   BSTR            Name = {read = get_Name};
  __property   TOLEBOOL        On = {read = get_On, write = set_On};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: DocumentProperty
// Flags:     (4096) Dispatchable
// GUID:      {2DF8D04E-5BFA-101B-BDE5-00AA0044DE52}
// *********************************************************************//
interface DocumentProperty  : public IDispatch
{
public:
   LPDISPATCH STDMETHODCALLTYPE get_Parent(void); // [1]
   HRESULT STDMETHODCALLTYPE Delete(void); // [2]
   HRESULT STDMETHODCALLTYPE get_Name(long lcid/*[in]*/, BSTR* pbstrRetVal/*[out,retval]*/); // [3]
   HRESULT STDMETHODCALLTYPE set_Name(long lcid/*[in]*/, BSTR pbstrRetVal/*[in]*/); // [3]
   HRESULT STDMETHODCALLTYPE get_Value(long lcid/*[in]*/, TVariant* pvargRetVal/*[out,retval]*/); // [0]
   HRESULT STDMETHODCALLTYPE set_Value(long lcid/*[in]*/, TVariantInParam pvargRetVal/*[in]*/); // [0]
   HRESULT STDMETHODCALLTYPE get_Type(long lcid/*[in]*/, 
                                      Office_2k::MsoDocProperties* ptypeRetVal/*[out,retval]*/); // [5]
   HRESULT STDMETHODCALLTYPE set_Type(long lcid/*[in]*/, 
                                      Office_2k::MsoDocProperties ptypeRetVal/*[in]*/); // [5]
   HRESULT STDMETHODCALLTYPE get_LinkToContent(TOLEBOOL* pfLinkRetVal/*[out,retval]*/); // [6]
   HRESULT STDMETHODCALLTYPE set_LinkToContent(TOLEBOOL pfLinkRetVal/*[in]*/); // [6]
   HRESULT STDMETHODCALLTYPE get_LinkSource(BSTR* pbstrSourceRetVal/*[out,retval]*/); // [7]
   HRESULT STDMETHODCALLTYPE set_LinkSource(BSTR pbstrSourceRetVal/*[in]*/); // [7]
   HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* ppidisp/*[out,retval]*/); // [-1]
   HRESULT STDMETHODCALLTYPE get_Creator(long* plCreator/*[out,retval]*/); // [-1]
};

// *********************************************************************//
// Interface: DocumentProperties
// Flags:     (4096) Dispatchable
// GUID:      {2DF8D04D-5BFA-101B-BDE5-00AA0044DE52}
// *********************************************************************//
interface DocumentProperties  : public IDispatch
{
public:
   LPDISPATCH STDMETHODCALLTYPE get_Parent(void); // [1]
   HRESULT STDMETHODCALLTYPE get_Item(TVariantInParam Index/*[in]*/, long lcid/*[in]*/, 
                                      Office_2k::DocumentPropertyPtr* ppIDocProp/*[out,retval]*/); // [0]
   HRESULT STDMETHODCALLTYPE get_Count(long* pc/*[out,retval]*/); // [4]
   HRESULT STDMETHODCALLTYPE Add(BSTR Name/*[in]*/, TOLEBOOL LinkToContent/*[in]*/, 
                                 TVariantInParam Type/*[in,opt]*/, TVariantInParam Value/*[in,opt]*/, 
                                 TVariantInParam LinkSource/*[in,opt]*/, long lcid/*[in]*/, 
                                 Office_2k::DocumentPropertyPtr* ppIDocProp/*[out,retval]*/); // [5]
   HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunkEnum/*[out,retval]*/); // [-4]
   HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* ppidisp/*[out,retval]*/); // [-1]
   HRESULT STDMETHODCALLTYPE get_Creator(long* plCreator/*[out,retval]*/); // [-1]
};

// *********************************************************************//
// Interface: IFoundFiles
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0338-0000-0000-C000-000000000046}
// *********************************************************************//
interface IFoundFiles  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Item(int Index/*[in]*/, BSTR* pbstr/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(int* pCount/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunkEnum/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Item(int Index/*[in]*/)
  {
    BSTR pbstr = 0;
    OLECHECK(this->get_Item(Index, (BSTR*)&pbstr));
    return pbstr;
  }

  int __fastcall get_Count(void)
  {
    int pCount;
    OLECHECK(this->get_Count((int*)&pCount));
    return pCount;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunkEnum;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunkEnum));
    return ppunkEnum;
  }


  __property   int             Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IFind
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0337-0000-0000-C000-000000000046}
// *********************************************************************//
interface IFind  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_SearchPath(BSTR* pbstr/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pbstr/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_SubDir(TOLEBOOL* retval/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Title(BSTR* pbstr/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Author(BSTR* pbstr/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Keywords(BSTR* pbstr/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Subject(BSTR* pbstr/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Options(Office_2k::MsoFileFindOptions* penmOptions/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_MatchCase(TOLEBOOL* retval/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Text(BSTR* pbstr/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_PatternMatch(TOLEBOOL* retval/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DateSavedFrom(TVariant* pdatSavedFrom/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DateSavedTo(TVariant* pdatSavedTo/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_SavedBy(BSTR* pbstr/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DateCreatedFrom(TVariant* pdatCreatedFrom/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DateCreatedTo(TVariant* pdatCreatedTo/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_View(Office_2k::MsoFileFindView* penmView/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_SortBy(Office_2k::MsoFileFindSortBy* penmSortBy/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ListBy(Office_2k::MsoFileFindListBy* penmListBy/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_SelectedFile(int* pintSelectedFile/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Results(Office_2k::IFoundFilesPtr* pdisp/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Show(int* pRows/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_SearchPath(BSTR pbstr/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR pbstr/*[in]*/) = 0; // [1610743809]
  virtual HRESULT STDMETHODCALLTYPE set_SubDir(TOLEBOOL retval/*[in]*/) = 0; // [1610743810]
  virtual HRESULT STDMETHODCALLTYPE set_Title(BSTR pbstr/*[in]*/) = 0; // [1610743811]
  virtual HRESULT STDMETHODCALLTYPE set_Author(BSTR pbstr/*[in]*/) = 0; // [1610743812]
  virtual HRESULT STDMETHODCALLTYPE set_Keywords(BSTR pbstr/*[in]*/) = 0; // [1610743813]
  virtual HRESULT STDMETHODCALLTYPE set_Subject(BSTR pbstr/*[in]*/) = 0; // [1610743814]
  virtual HRESULT STDMETHODCALLTYPE set_Options(Office_2k::MsoFileFindOptions penmOptions/*[in]*/) = 0; // [1610743815]
  virtual HRESULT STDMETHODCALLTYPE set_MatchCase(TOLEBOOL retval/*[in]*/) = 0; // [1610743816]
  virtual HRESULT STDMETHODCALLTYPE set_Text(BSTR pbstr/*[in]*/) = 0; // [1610743817]
  virtual HRESULT STDMETHODCALLTYPE set_PatternMatch(TOLEBOOL retval/*[in]*/) = 0; // [1610743818]
  virtual HRESULT STDMETHODCALLTYPE set_DateSavedFrom(TVariantInParam pdatSavedFrom/*[in]*/) = 0; // [1610743819]
  virtual HRESULT STDMETHODCALLTYPE set_DateSavedTo(TVariantInParam pdatSavedTo/*[in]*/) = 0; // [1610743820]
  virtual HRESULT STDMETHODCALLTYPE set_SavedBy(BSTR pbstr/*[in]*/) = 0; // [1610743821]
  virtual HRESULT STDMETHODCALLTYPE set_DateCreatedFrom(TVariantInParam pdatCreatedFrom/*[in]*/) = 0; // [1610743822]
  virtual HRESULT STDMETHODCALLTYPE set_DateCreatedTo(TVariantInParam pdatCreatedTo/*[in]*/) = 0; // [1610743823]
  virtual HRESULT STDMETHODCALLTYPE set_View(Office_2k::MsoFileFindView penmView/*[in]*/) = 0; // [1610743824]
  virtual HRESULT STDMETHODCALLTYPE set_SortBy(Office_2k::MsoFileFindSortBy penmSortBy/*[in]*/) = 0; // [1610743825]
  virtual HRESULT STDMETHODCALLTYPE set_ListBy(Office_2k::MsoFileFindListBy penmListBy/*[in]*/) = 0; // [1610743826]
  virtual HRESULT STDMETHODCALLTYPE set_SelectedFile(int pintSelectedFile/*[in]*/) = 0; // [1610743827]
  virtual HRESULT STDMETHODCALLTYPE Execute(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Load(BSTR bstrQueryName/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Save(BSTR bstrQueryName/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Delete(BSTR bstrQueryName/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_FileType(long* plFileType/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_FileType(long plFileType/*[in]*/) = 0; // [1610743854]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_SearchPath(void)
  {
    BSTR pbstr = 0;
    OLECHECK(this->get_SearchPath((BSTR*)&pbstr));
    return pbstr;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pbstr = 0;
    OLECHECK(this->get_Name((BSTR*)&pbstr));
    return pbstr;
  }

  TOLEBOOL __fastcall get_SubDir(void)
  {
    TOLEBOOL retval;
    OLECHECK(this->get_SubDir((TOLEBOOL*)&retval));
    return retval;
  }

  BSTR __fastcall get_Title(void)
  {
    BSTR pbstr = 0;
    OLECHECK(this->get_Title((BSTR*)&pbstr));
    return pbstr;
  }

  BSTR __fastcall get_Author(void)
  {
    BSTR pbstr = 0;
    OLECHECK(this->get_Author((BSTR*)&pbstr));
    return pbstr;
  }

  BSTR __fastcall get_Keywords(void)
  {
    BSTR pbstr = 0;
    OLECHECK(this->get_Keywords((BSTR*)&pbstr));
    return pbstr;
  }

  BSTR __fastcall get_Subject(void)
  {
    BSTR pbstr = 0;
    OLECHECK(this->get_Subject((BSTR*)&pbstr));
    return pbstr;
  }

  Office_2k::MsoFileFindOptions __fastcall get_Options(void)
  {
    Office_2k::MsoFileFindOptions penmOptions;
    OLECHECK(this->get_Options((Office_2k::MsoFileFindOptions*)&penmOptions));
    return penmOptions;
  }

  TOLEBOOL __fastcall get_MatchCase(void)
  {
    TOLEBOOL retval;
    OLECHECK(this->get_MatchCase((TOLEBOOL*)&retval));
    return retval;
  }

  BSTR __fastcall get_Text(void)
  {
    BSTR pbstr = 0;
    OLECHECK(this->get_Text((BSTR*)&pbstr));
    return pbstr;
  }

  TOLEBOOL __fastcall get_PatternMatch(void)
  {
    TOLEBOOL retval;
    OLECHECK(this->get_PatternMatch((TOLEBOOL*)&retval));
    return retval;
  }

  TVariant __fastcall get_DateSavedFrom(void)
  {
    TVariant pdatSavedFrom;
    OLECHECK(this->get_DateSavedFrom((TVariant*)&pdatSavedFrom));
    return pdatSavedFrom;
  }

  TVariant __fastcall get_DateSavedTo(void)
  {
    TVariant pdatSavedTo;
    OLECHECK(this->get_DateSavedTo((TVariant*)&pdatSavedTo));
    return pdatSavedTo;
  }

  BSTR __fastcall get_SavedBy(void)
  {
    BSTR pbstr = 0;
    OLECHECK(this->get_SavedBy((BSTR*)&pbstr));
    return pbstr;
  }

  TVariant __fastcall get_DateCreatedFrom(void)
  {
    TVariant pdatCreatedFrom;
    OLECHECK(this->get_DateCreatedFrom((TVariant*)&pdatCreatedFrom));
    return pdatCreatedFrom;
  }

  TVariant __fastcall get_DateCreatedTo(void)
  {
    TVariant pdatCreatedTo;
    OLECHECK(this->get_DateCreatedTo((TVariant*)&pdatCreatedTo));
    return pdatCreatedTo;
  }

  Office_2k::MsoFileFindView __fastcall get_View(void)
  {
    Office_2k::MsoFileFindView penmView;
    OLECHECK(this->get_View((Office_2k::MsoFileFindView*)&penmView));
    return penmView;
  }

  Office_2k::MsoFileFindSortBy __fastcall get_SortBy(void)
  {
    Office_2k::MsoFileFindSortBy penmSortBy;
    OLECHECK(this->get_SortBy((Office_2k::MsoFileFindSortBy*)&penmSortBy));
    return penmSortBy;
  }

  Office_2k::MsoFileFindListBy __fastcall get_ListBy(void)
  {
    Office_2k::MsoFileFindListBy penmListBy;
    OLECHECK(this->get_ListBy((Office_2k::MsoFileFindListBy*)&penmListBy));
    return penmListBy;
  }

  int __fastcall get_SelectedFile(void)
  {
    int pintSelectedFile;
    OLECHECK(this->get_SelectedFile((int*)&pintSelectedFile));
    return pintSelectedFile;
  }

  Office_2k::IFoundFilesPtr __fastcall get_Results(void)
  {
    Office_2k::IFoundFilesPtr pdisp;
    OLECHECK(this->get_Results((Office_2k::IFoundFilesPtr*)&pdisp));
    return pdisp;
  }

  int __fastcall Show(void)
  {
    int pRows;
    OLECHECK(this->Show((int*)&pRows));
    return pRows;
  }

  long __fastcall get_FileType(void)
  {
    long plFileType;
    OLECHECK(this->get_FileType((long*)&plFileType));
    return plFileType;
  }


  __property   BSTR            SearchPath = {read = get_SearchPath, write = set_SearchPath};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   TOLEBOOL        SubDir = {read = get_SubDir, write = set_SubDir};
  __property   BSTR            Title = {read = get_Title, write = set_Title};
  __property   BSTR            Author = {read = get_Author, write = set_Author};
  __property   BSTR            Keywords = {read = get_Keywords, write = set_Keywords};
  __property   BSTR            Subject = {read = get_Subject, write = set_Subject};
  __property   Office_2k::MsoFileFindOptions Options = {read = get_Options, write = set_Options};
  __property   TOLEBOOL        MatchCase = {read = get_MatchCase, write = set_MatchCase};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   TOLEBOOL        PatternMatch = {read = get_PatternMatch, write = set_PatternMatch};
  __property   BSTR            SavedBy = {read = get_SavedBy, write = set_SavedBy};
  __property   Office_2k::MsoFileFindView View = {read = get_View, write = set_View};
  __property   Office_2k::MsoFileFindSortBy SortBy = {read = get_SortBy, write = set_SortBy};
  __property   Office_2k::MsoFileFindListBy ListBy = {read = get_ListBy, write = set_ListBy};
  __property   int             SelectedFile = {read = get_SelectedFile, write = set_SelectedFile};
  __property   Office_2k::IFoundFilesPtr Results = {read = get_Results};
  __property   long            FileType = {read = get_FileType, write = set_FileType};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: FoundFiles
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {000C0331-0000-0000-C000-000000000046}
// *********************************************************************//
interface FoundFiles  : public Office_2k::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Item(int Index/*[in]*/, long lcid/*[in]*/, 
                                             BSTR* pbstrFile/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* pc/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunkEnum/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Item(int Index/*[in]*/, long lcid/*[in]*/= TDefLCID())
  {
    BSTR pbstrFile = 0;
    OLECHECK(this->get_Item(Index, lcid, (BSTR*)&pbstrFile));
    return pbstrFile;
  }

  long __fastcall get_Count(void)
  {
    long pc;
    OLECHECK(this->get_Count((long*)&pc));
    return pc;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunkEnum;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunkEnum));
    return ppunkEnum;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PropertyTest
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0333-0000-0000-C000-000000000046}
// *********************************************************************//
interface PropertyTest  : public Office_2k::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pbstrRetVal/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Condition(Office_2k::MsoCondition* pConditionRetVal/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_Value(TVariant* pvargRetVal/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_SecondValue(TVariant* pvargRetVal2/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_Connector(Office_2k::MsoConnector* pConnector/*[out,retval]*/) = 0; // [5]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Name(void)
  {
    BSTR pbstrRetVal = 0;
    OLECHECK(this->get_Name((BSTR*)&pbstrRetVal));
    return pbstrRetVal;
  }

  Office_2k::MsoCondition __fastcall get_Condition(void)
  {
    Office_2k::MsoCondition pConditionRetVal;
    OLECHECK(this->get_Condition((Office_2k::MsoCondition*)&pConditionRetVal));
    return pConditionRetVal;
  }

  TVariant __fastcall get_Value(void)
  {
    TVariant pvargRetVal;
    OLECHECK(this->get_Value((TVariant*)&pvargRetVal));
    return pvargRetVal;
  }

  TVariant __fastcall get_SecondValue(void)
  {
    TVariant pvargRetVal2;
    OLECHECK(this->get_SecondValue((TVariant*)&pvargRetVal2));
    return pvargRetVal2;
  }

  Office_2k::MsoConnector __fastcall get_Connector(void)
  {
    Office_2k::MsoConnector pConnector;
    OLECHECK(this->get_Connector((Office_2k::MsoConnector*)&pConnector));
    return pConnector;
  }


  __property   BSTR            Name = {read = get_Name};
  __property   Office_2k::MsoCondition Condition = {read = get_Condition};
  __property   Office_2k::MsoConnector Connector = {read = get_Connector};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PropertyTests
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {000C0334-0000-0000-C000-000000000046}
// *********************************************************************//
interface PropertyTests  : public Office_2k::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Item(int Index/*[in]*/, long lcid/*[in]*/, 
                                             Office_2k::PropertyTestPtr* ppIDocProp/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* pc/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE Add(BSTR Name/*[in]*/, Office_2k::MsoCondition Condition/*[in]*/, 
                                        TVariantInParam Value/*[in,opt]*/, 
                                        TVariantInParam SecondValue/*[in,opt]*/, 
                                        Office_2k::MsoConnector Connector/*[in,def,opt]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE Remove(int Index/*[in]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunkEnum/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Office_2k::PropertyTestPtr __fastcall get_Item(int Index/*[in]*/, long lcid/*[in]*/= TDefLCID())
  {
    Office_2k::PropertyTestPtr ppIDocProp;
    OLECHECK(this->get_Item(Index, lcid, (Office_2k::PropertyTestPtr*)&ppIDocProp));
    return ppIDocProp;
  }

  long __fastcall get_Count(void)
  {
    long pc;
    OLECHECK(this->get_Count((long*)&pc));
    return pc;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunkEnum;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunkEnum));
    return ppunkEnum;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: FileSearch
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {000C0332-0000-0000-C000-000000000046}
// *********************************************************************//
interface FileSearch  : public Office_2k::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_SearchSubFolders(TOLEBOOL* SearchSubFoldersRetVal/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE set_SearchSubFolders(TOLEBOOL SearchSubFoldersRetVal/*[in]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_MatchTextExactly(TOLEBOOL* MatchTextRetVal/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE set_MatchTextExactly(TOLEBOOL MatchTextRetVal/*[in]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_MatchAllWordForms(TOLEBOOL* MatchAllWordFormsRetVal/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE set_MatchAllWordForms(TOLEBOOL MatchAllWordFormsRetVal/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_FileName(BSTR* FileNameRetVal/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_FileName(BSTR FileNameRetVal/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_FileType(Office_2k::MsoFileType* FileTypeRetVal/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE set_FileType(Office_2k::MsoFileType FileTypeRetVal/*[in]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_LastModified(Office_2k::MsoLastModified* LastModifiedRetVal/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE set_LastModified(Office_2k::MsoLastModified LastModifiedRetVal/*[in]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_TextOrProperty(BSTR* TextOrProperty/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE set_TextOrProperty(BSTR TextOrProperty/*[in]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_LookIn(BSTR* LookInRetVal/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE set_LookIn(BSTR LookInRetVal/*[in]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE Execute(Office_2k::MsoSortBy SortBy/*[in,def,opt]*/, 
                                            Office_2k::MsoSortOrder SortOrder/*[in,def,opt]*/, 
                                            TOLEBOOL AlwaysAccurate/*[in,def,opt]*/, 
                                            int* pRet/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE NewSearch(void) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_FoundFiles(Office_2k::FoundFilesPtr* FoundFilesRet/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_PropertyTests(Office_2k::PropertyTestsPtr* PropTestsRet/*[out,retval]*/) = 0; // [12]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  TOLEBOOL __fastcall get_SearchSubFolders(void)
  {
    TOLEBOOL SearchSubFoldersRetVal;
    OLECHECK(this->get_SearchSubFolders((TOLEBOOL*)&SearchSubFoldersRetVal));
    return SearchSubFoldersRetVal;
  }

  TOLEBOOL __fastcall get_MatchTextExactly(void)
  {
    TOLEBOOL MatchTextRetVal;
    OLECHECK(this->get_MatchTextExactly((TOLEBOOL*)&MatchTextRetVal));
    return MatchTextRetVal;
  }

  TOLEBOOL __fastcall get_MatchAllWordForms(void)
  {
    TOLEBOOL MatchAllWordFormsRetVal;
    OLECHECK(this->get_MatchAllWordForms((TOLEBOOL*)&MatchAllWordFormsRetVal));
    return MatchAllWordFormsRetVal;
  }

  BSTR __fastcall get_FileName(void)
  {
    BSTR FileNameRetVal = 0;
    OLECHECK(this->get_FileName((BSTR*)&FileNameRetVal));
    return FileNameRetVal;
  }

  Office_2k::MsoFileType __fastcall get_FileType(void)
  {
    Office_2k::MsoFileType FileTypeRetVal;
    OLECHECK(this->get_FileType((Office_2k::MsoFileType*)&FileTypeRetVal));
    return FileTypeRetVal;
  }

  Office_2k::MsoLastModified __fastcall get_LastModified(void)
  {
    Office_2k::MsoLastModified LastModifiedRetVal;
    OLECHECK(this->get_LastModified((Office_2k::MsoLastModified*)&LastModifiedRetVal));
    return LastModifiedRetVal;
  }

  BSTR __fastcall get_TextOrProperty(void)
  {
    BSTR TextOrProperty = 0;
    OLECHECK(this->get_TextOrProperty((BSTR*)&TextOrProperty));
    return TextOrProperty;
  }

  BSTR __fastcall get_LookIn(void)
  {
    BSTR LookInRetVal = 0;
    OLECHECK(this->get_LookIn((BSTR*)&LookInRetVal));
    return LookInRetVal;
  }

  int __fastcall Execute(Office_2k::MsoSortBy SortBy/*[in,def,opt]*/, 
                         Office_2k::MsoSortOrder SortOrder/*[in,def,opt]*/, 
                         TOLEBOOL AlwaysAccurate/*[in,def,opt]*/)
  {
    int pRet;
    OLECHECK(this->Execute(SortBy, SortOrder, AlwaysAccurate, (int*)&pRet));
    return pRet;
  }

  Office_2k::FoundFilesPtr __fastcall get_FoundFiles(void)
  {
    Office_2k::FoundFilesPtr FoundFilesRet;
    OLECHECK(this->get_FoundFiles((Office_2k::FoundFilesPtr*)&FoundFilesRet));
    return FoundFilesRet;
  }

  Office_2k::PropertyTestsPtr __fastcall get_PropertyTests(void)
  {
    Office_2k::PropertyTestsPtr PropTestsRet;
    OLECHECK(this->get_PropertyTests((Office_2k::PropertyTestsPtr*)&PropTestsRet));
    return PropTestsRet;
  }


  __property   TOLEBOOL        SearchSubFolders = {read = get_SearchSubFolders, write = set_SearchSubFolders};
  __property   TOLEBOOL        MatchTextExactly = {read = get_MatchTextExactly, write = set_MatchTextExactly};
  __property   TOLEBOOL        MatchAllWordForms = {read = get_MatchAllWordForms, write = set_MatchAllWordForms};
  __property   BSTR            FileName = {read = get_FileName, write = set_FileName};
  __property   Office_2k::MsoFileType FileType = {read = get_FileType, write = set_FileType};
  __property   Office_2k::MsoLastModified LastModified = {read = get_LastModified, write = set_LastModified};
  __property   BSTR            TextOrProperty = {read = get_TextOrProperty, write = set_TextOrProperty};
  __property   BSTR            LookIn = {read = get_LookIn, write = set_LookIn};
  __property   Office_2k::FoundFilesPtr FoundFiles = {read = get_FoundFiles};
  __property   Office_2k::PropertyTestsPtr PropertyTests = {read = get_PropertyTests};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: COMAddIn
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C033A-0000-0000-C000-000000000046}
// *********************************************************************//
interface COMAddIn  : public Office_2k::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Description(BSTR* RetValue/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Description(BSTR RetValue/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_ProgId(BSTR* RetValue/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_Guid(BSTR* RetValue/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_Connect(TOLEBOOL* RetValue/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE set_Connect(TOLEBOOL RetValue/*[in]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_Object(LPDISPATCH* RetValue/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE set_Object(LPDISPATCH RetValue/*[in]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* retval/*[out,retval]*/) = 0; // [8]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Description(void)
  {
    BSTR RetValue = 0;
    OLECHECK(this->get_Description((BSTR*)&RetValue));
    return RetValue;
  }

  BSTR __fastcall get_ProgId(void)
  {
    BSTR RetValue = 0;
    OLECHECK(this->get_ProgId((BSTR*)&RetValue));
    return RetValue;
  }

  BSTR __fastcall get_Guid(void)
  {
    BSTR RetValue = 0;
    OLECHECK(this->get_Guid((BSTR*)&RetValue));
    return RetValue;
  }

  TOLEBOOL __fastcall get_Connect(void)
  {
    TOLEBOOL RetValue;
    OLECHECK(this->get_Connect((TOLEBOOL*)&RetValue));
    return RetValue;
  }

  LPDISPATCH __fastcall get_Object(void)
  {
    LPDISPATCH RetValue;
    OLECHECK(this->get_Object((LPDISPATCH*)&RetValue));
    return RetValue;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH retval;
    OLECHECK(this->get_Parent((LPDISPATCH*)&retval));
    return retval;
  }


  __property   BSTR            Description = {read = get_Description, write = set_Description};
  __property   BSTR            ProgId = {read = get_ProgId};
  __property   BSTR            Guid = {read = get_Guid};
  __property   TOLEBOOL        Connect = {read = get_Connect, write = set_Connect};
  __property   LPDISPATCH      Object = {read = get_Object, write = set_Object};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: COMAddIns
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0339-0000-0000-C000-000000000046}
// *********************************************************************//
interface COMAddIns  : public Office_2k::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE Item(TVariant* Index/*[in]*/, 
                                         Office_2k::COMAddInPtr* RetValue/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* RetValue/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* RetValue/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE _Update(void) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE SetAppModal(TOLEBOOL varfModal/*[in]*/) = 0; // [4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Office_2k::COMAddInPtr __fastcall Item(TVariant* Index/*[in]*/)
  {
    Office_2k::COMAddInPtr RetValue;
    OLECHECK(this->Item(Index, (Office_2k::COMAddInPtr*)&RetValue));
    return RetValue;
  }

  long __fastcall get_Count(void)
  {
    long RetValue;
    OLECHECK(this->get_Count((long*)&RetValue));
    return RetValue;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN RetValue;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&RetValue));
    return RetValue;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Parent((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: LanguageSettings
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0353-0000-0000-C000-000000000046}
// *********************************************************************//
interface LanguageSettings  : public Office_2k::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_LanguageID(Office_2k::MsoAppLanguageID Id/*[in]*/, 
                                                   int* plid/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_LanguagePreferredForEditing(Office_2k::MsoLanguageID lid/*[in]*/, 
                                                                    TOLEBOOL* pf/*[out,retval]*/) = 0; // [2]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  int __fastcall get_LanguageID(Office_2k::MsoAppLanguageID Id/*[in]*/)
  {
    int plid;
    OLECHECK(this->get_LanguageID(Id, (int*)&plid));
    return plid;
  }

  TOLEBOOL __fastcall get_LanguagePreferredForEditing(Office_2k::MsoLanguageID lid/*[in]*/)
  {
    TOLEBOOL pf;
    OLECHECK(this->get_LanguagePreferredForEditing(lid, (TOLEBOOL*)&pf));
    return pf;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ICommandBarsEvents
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {55F88892-7708-11D1-ACEB-006008961DA5}
// *********************************************************************//
interface ICommandBarsEvents  : public IDispatch
{
public:
  virtual void STDMETHODCALLTYPE OnUpdate(void) = 0; // [1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CommandBarsEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000C0352-0000-0000-C000-000000000046}
// *********************************************************************//
interface _CommandBarsEvents : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall OnUpdate()
  {
    _TDispID _dispid(/* OnUpdate */ DISPID(1));
    OleProcedure(_dispid);
  }


};
// *********************************************************************//
// Interface: ICommandBarComboBoxEvents
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {55F88896-7708-11D1-ACEB-006008961DA5}
// *********************************************************************//
interface ICommandBarComboBoxEvents  : public IDispatch
{
public:
  virtual void STDMETHODCALLTYPE Change(Office_2k::CommandBarComboBoxPtr Ctrl/*[in]*/) = 0; // [1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CommandBarComboBoxEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000C0354-0000-0000-C000-000000000046}
// *********************************************************************//
interface _CommandBarComboBoxEvents : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall Change(Office_2k::CommandBarComboBoxPtr Ctrl/*[in]*/)
  {
    _TDispID _dispid(/* Change */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Office_2k::CommandBarComboBox*)Ctrl /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: ICommandBarButtonEvents
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {55F88890-7708-11D1-ACEB-006008961DA5}
// *********************************************************************//
interface ICommandBarButtonEvents  : public IDispatch
{
public:
  virtual void STDMETHODCALLTYPE _Click(Office_2k::CommandBarButtonPtr Ctrl/*[in]*/, 
                                        TOLEBOOL* CancelDefault/*[in,out]*/) = 0; // [1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CommandBarButtonEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000C0351-0000-0000-C000-000000000046}
// *********************************************************************//
interface _CommandBarButtonEvents : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall _Click(Office_2k::CommandBarButtonPtr Ctrl/*[in]*/, 
                                         TOLEBOOL* CancelDefault/*[in,out]*/)
  {
    _TDispID _dispid(/* Click */ DISPID(1));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Office_2k::CommandBarButton*)Ctrl /*[VT_USERDEFINED:1]*/;
    _args[2] = CancelDefault /*[VT_BOOL:1]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: WebPageFont
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0913-0000-0000-C000-000000000046}
// *********************************************************************//
interface WebPageFont  : public Office_2k::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_ProportionalFont(BSTR* pstr/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE set_ProportionalFont(BSTR pstr/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_ProportionalFontSize(float* pf/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE set_ProportionalFontSize(float pf/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_FixedWidthFont(BSTR* pstr/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE set_FixedWidthFont(BSTR pstr/*[in]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE get_FixedWidthFontSize(float* pf/*[out,retval]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE set_FixedWidthFontSize(float pf/*[in]*/) = 0; // [13]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_ProportionalFont(void)
  {
    BSTR pstr = 0;
    OLECHECK(this->get_ProportionalFont((BSTR*)&pstr));
    return pstr;
  }

  float __fastcall get_ProportionalFontSize(void)
  {
    float pf;
    OLECHECK(this->get_ProportionalFontSize((float*)&pf));
    return pf;
  }

  BSTR __fastcall get_FixedWidthFont(void)
  {
    BSTR pstr = 0;
    OLECHECK(this->get_FixedWidthFont((BSTR*)&pstr));
    return pstr;
  }

  float __fastcall get_FixedWidthFontSize(void)
  {
    float pf;
    OLECHECK(this->get_FixedWidthFontSize((float*)&pf));
    return pf;
  }


  __property   BSTR            ProportionalFont = {read = get_ProportionalFont, write = set_ProportionalFont};
  __property   float           ProportionalFontSize = {read = get_ProportionalFontSize, write = set_ProportionalFontSize};
  __property   BSTR            FixedWidthFont = {read = get_FixedWidthFont, write = set_FixedWidthFont};
  __property   float           FixedWidthFontSize = {read = get_FixedWidthFontSize, write = set_FixedWidthFontSize};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: WebPageFonts
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0914-0000-0000-C000-000000000046}
// *********************************************************************//
interface WebPageFonts  : public Office_2k::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Count(int* Count/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Item(Office_2k::MsoCharacterSet Index/*[in]*/, 
                                             Office_2k::WebPageFontPtr* Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  int __fastcall get_Count(void)
  {
    int Count;
    OLECHECK(this->get_Count((int*)&Count));
    return Count;
  }

  Office_2k::WebPageFontPtr __fastcall get_Item(Office_2k::MsoCharacterSet Index/*[in]*/)
  {
    Office_2k::WebPageFontPtr Item;
    OLECHECK(this->get_Item(Index, (Office_2k::WebPageFontPtr*)&Item));
    return Item;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN _NewEnum;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&_NewEnum));
    return _NewEnum;
  }


  __property   int             Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: HTMLProjectItem
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0358-0000-0000-C000-000000000046}
// *********************************************************************//
interface HTMLProjectItem  : public Office_2k::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* RetValue/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_IsOpen(TOLEBOOL* RetValue/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE LoadFromFile(BSTR FileName/*[in]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE Open(Office_2k::MsoHTMLProjectOpen OpenKind/*[in,def,opt]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE SaveCopyAs(BSTR FileName/*[in]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_Text(BSTR* Text/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE set_Text(BSTR Text/*[in]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [10]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Name(void)
  {
    BSTR RetValue = 0;
    OLECHECK(this->get_Name((BSTR*)&RetValue));
    return RetValue;
  }

  TOLEBOOL __fastcall get_IsOpen(void)
  {
    TOLEBOOL RetValue;
    OLECHECK(this->get_IsOpen((TOLEBOOL*)&RetValue));
    return RetValue;
  }

  BSTR __fastcall get_Text(void)
  {
    BSTR Text = 0;
    OLECHECK(this->get_Text((BSTR*)&Text));
    return Text;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Parent((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }


  __property   BSTR            Name = {read = get_Name};
  __property   TOLEBOOL        IsOpen = {read = get_IsOpen};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: HTMLProjectItems
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0357-0000-0000-C000-000000000046}
// *********************************************************************//
interface HTMLProjectItems  : public Office_2k::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE Item(TVariant* Index/*[in]*/, 
                                         Office_2k::HTMLProjectItemPtr* RetValue/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* RetValue/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* RetValue/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [2]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Office_2k::HTMLProjectItemPtr __fastcall Item(TVariant* Index/*[in]*/)
  {
    Office_2k::HTMLProjectItemPtr RetValue;
    OLECHECK(this->Item(Index, (Office_2k::HTMLProjectItemPtr*)&RetValue));
    return RetValue;
  }

  long __fastcall get_Count(void)
  {
    long RetValue;
    OLECHECK(this->get_Count((long*)&RetValue));
    return RetValue;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN RetValue;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&RetValue));
    return RetValue;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Parent((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: HTMLProject
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0356-0000-0000-C000-000000000046}
// *********************************************************************//
interface HTMLProject  : public Office_2k::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_State(Office_2k::MsoHTMLProjectState* State/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE RefreshProject(TOLEBOOL Refresh/*[in,def,opt]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE RefreshDocument(TOLEBOOL Refresh/*[in,def,opt]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_HTMLProjectItems(Office_2k::HTMLProjectItemsPtr* HTMLProjectItems/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE Open(Office_2k::MsoHTMLProjectOpen OpenKind/*[in,def,opt]*/) = 0; // [5]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Office_2k::MsoHTMLProjectState __fastcall get_State(void)
  {
    Office_2k::MsoHTMLProjectState State;
    OLECHECK(this->get_State((Office_2k::MsoHTMLProjectState*)&State));
    return State;
  }

  Office_2k::HTMLProjectItemsPtr __fastcall get_HTMLProjectItems(void)
  {
    Office_2k::HTMLProjectItemsPtr HTMLProjectItems;
    OLECHECK(this->get_HTMLProjectItems((Office_2k::HTMLProjectItemsPtr*)&HTMLProjectItems));
    return HTMLProjectItems;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Parent((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }


  __property   Office_2k::MsoHTMLProjectState State = {read = get_State};
  __property   Office_2k::HTMLProjectItemsPtr HTMLProjectItems = {read = get_HTMLProjectItems};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: MsoDebugOptions
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C035A-0000-0000-C000-000000000046}
// *********************************************************************//
interface MsoDebugOptions  : public Office_2k::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_FeatureReports(int* puintFeatureReports/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_FeatureReports(int puintFeatureReports/*[in]*/) = 0; // [4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  int __fastcall get_FeatureReports(void)
  {
    int puintFeatureReports;
    OLECHECK(this->get_FeatureReports((int*)&puintFeatureReports));
    return puintFeatureReports;
  }


  __property   int             FeatureReports = {read = get_FeatureReports, write = set_FeatureReports};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
typedef TComInterface<IAccessible>  TCOMIAccessible;

// *********************************************************************//
// DispIntf:  IAccessible
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {618736E0-3C3D-11CF-810C-00AA00389B71}
// *********************************************************************//
template<class T>
class IAccessibleDispT : public TAutoDriver<IAccessible>
{
public:
  IAccessibleDispT(){}

  IAccessibleDispT(IAccessible *pintf)
  {
    TAutoDriver<IAccessible>::Bind(pintf, false);
  }

  IAccessibleDispT(IAccessiblePtr pintf)
  {
    TAutoDriver<IAccessible>::Bind(pintf, true);
  }

  IAccessibleDispT& operator=(IAccessible *pintf)
  {
    TAutoDriver<IAccessible>::Bind(pintf, false);
    return *this;
  }

  IAccessibleDispT& operator=(IAccessiblePtr pintf)
  {
    TAutoDriver<IAccessible>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accParent(LPDISPATCH* ppdispParent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_accParent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accChildCount(long* pcountChildren/*[out,retval]*/);
  long            __fastcall get_accChildCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accChild(TVariantInParam varChild/*[in]*/, 
                                                     LPDISPATCH* ppdispChild/*[out,retval]*/);
  LPDISPATCH      __fastcall get_accChild(TVariantInParam varChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accName(TVariantInParam varChild/*[in,opt]*/, 
                                                    BSTR* pszName/*[out,retval]*/);
  BSTR            __fastcall get_accName(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accValue(TVariantInParam varChild/*[in,opt]*/, 
                                                     BSTR* pszValue/*[out,retval]*/);
  BSTR            __fastcall get_accValue(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accDescription(TVariantInParam varChild/*[in,opt]*/, 
                                                           BSTR* pszDescription/*[out,retval]*/);
  BSTR            __fastcall get_accDescription(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accRole(TVariantInParam varChild/*[in,opt]*/, 
                                                    TVariant* pvarRole/*[out,retval]*/);
  TVariant        __fastcall get_accRole(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accState(TVariantInParam varChild/*[in,opt]*/, 
                                                     TVariant* pvarState/*[out,retval]*/);
  TVariant        __fastcall get_accState(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accHelp(TVariantInParam varChild/*[in,opt]*/, 
                                                    BSTR* pszHelp/*[out,retval]*/);
  BSTR            __fastcall get_accHelp(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                                         TVariantInParam varChild/*[in,opt]*/, 
                                                         long* pidTopic/*[out,retval]*/);
  long            __fastcall get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                              TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accKeyboardShortcut(TVariantInParam varChild/*[in,opt]*/
                                                                , 
                                                                BSTR* pszKeyboardShortcut/*[out,retval]*/);
  BSTR            __fastcall get_accKeyboardShortcut(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accFocus(TVariant* pvarChild/*[out,retval]*/);
  TVariant        __fastcall get_accFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accSelection(TVariant* pvarChildren/*[out,retval]*/);
  TVariant        __fastcall get_accSelection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accDefaultAction(TVariantInParam varChild/*[in,opt]*/, 
                                                             BSTR* pszDefaultAction/*[out,retval]*/);
  BSTR            __fastcall get_accDefaultAction(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accSelect(long flagsSelect/*[in]*/, 
                                                  TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accLocation(long* pxLeft/*[out]*/, long* pyTop/*[out]*/, 
                                                    long* pcxWidth/*[out]*/, 
                                                    long* pcyHeight/*[out]*/, 
                                                    TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accNavigate(long navDir/*[in]*/, 
                                                    TVariantInParam varStart/*[in,opt]*/, 
                                                    TVariant* pvarEndUpAt/*[out,retval]*/);
  TVariant        __fastcall accNavigate(long navDir/*[in]*/, 
                                         TVariantInParam varStart/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/, 
                                                   TVariant* pvarChild/*[out,retval]*/);
  TVariant        __fastcall accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accDoDefaultAction(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_accName(TVariantInParam varChild/*[in,opt]*/, 
                                                    BSTR pszName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_accValue(TVariantInParam varChild/*[in,opt]*/, 
                                                     BSTR pszValue/*[in]*/);

  __property   LPDISPATCH      accParent = {read = get_accParent};
  __property   long            accChildCount = {read = get_accChildCount};
};
typedef IAccessibleDispT<IAccessible> IAccessibleDisp;

typedef TComInterface<_IMsoDispObj>  TCOM_IMsoDispObj;

// *********************************************************************//
// DispIntf:  _IMsoDispObj
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0300-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class _IMsoDispObjDispT : public TAutoDriver<_IMsoDispObj>
{
public:
  _IMsoDispObjDispT(){}

  _IMsoDispObjDispT(_IMsoDispObj *pintf)
  {
    TAutoDriver<_IMsoDispObj>::Bind(pintf, false);
  }

  _IMsoDispObjDispT(_IMsoDispObjPtr pintf)
  {
    TAutoDriver<_IMsoDispObj>::Bind(pintf, true);
  }

  _IMsoDispObjDispT& operator=(_IMsoDispObj *pintf)
  {
    TAutoDriver<_IMsoDispObj>::Bind(pintf, false);
    return *this;
  }

  _IMsoDispObjDispT& operator=(_IMsoDispObjPtr pintf)
  {
    TAutoDriver<_IMsoDispObj>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef _IMsoDispObjDispT<_IMsoDispObj> _IMsoDispObjDisp;

typedef TComInterface<_IMsoOleAccDispObj>  TCOM_IMsoOleAccDispObj;

// *********************************************************************//
// DispIntf:  _IMsoOleAccDispObj
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0301-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class _IMsoOleAccDispObjDispT : public TAutoDriver<_IMsoOleAccDispObj>
{
public:
  _IMsoOleAccDispObjDispT(){}

  _IMsoOleAccDispObjDispT(_IMsoOleAccDispObj *pintf)
  {
    TAutoDriver<_IMsoOleAccDispObj>::Bind(pintf, false);
  }

  _IMsoOleAccDispObjDispT(_IMsoOleAccDispObjPtr pintf)
  {
    TAutoDriver<_IMsoOleAccDispObj>::Bind(pintf, true);
  }

  _IMsoOleAccDispObjDispT& operator=(_IMsoOleAccDispObj *pintf)
  {
    TAutoDriver<_IMsoOleAccDispObj>::Bind(pintf, false);
    return *this;
  }

  _IMsoOleAccDispObjDispT& operator=(_IMsoOleAccDispObjPtr pintf)
  {
    TAutoDriver<_IMsoOleAccDispObj>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accParent(LPDISPATCH* ppdispParent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_accParent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accChildCount(long* pcountChildren/*[out,retval]*/);
  long            __fastcall get_accChildCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accChild(TVariantInParam varChild/*[in]*/, 
                                                     LPDISPATCH* ppdispChild/*[out,retval]*/);
  LPDISPATCH      __fastcall get_accChild(TVariantInParam varChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accName(TVariantInParam varChild/*[in,opt]*/, 
                                                    BSTR* pszName/*[out,retval]*/);
  BSTR            __fastcall get_accName(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accValue(TVariantInParam varChild/*[in,opt]*/, 
                                                     BSTR* pszValue/*[out,retval]*/);
  BSTR            __fastcall get_accValue(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accDescription(TVariantInParam varChild/*[in,opt]*/, 
                                                           BSTR* pszDescription/*[out,retval]*/);
  BSTR            __fastcall get_accDescription(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accRole(TVariantInParam varChild/*[in,opt]*/, 
                                                    TVariant* pvarRole/*[out,retval]*/);
  TVariant        __fastcall get_accRole(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accState(TVariantInParam varChild/*[in,opt]*/, 
                                                     TVariant* pvarState/*[out,retval]*/);
  TVariant        __fastcall get_accState(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accHelp(TVariantInParam varChild/*[in,opt]*/, 
                                                    BSTR* pszHelp/*[out,retval]*/);
  BSTR            __fastcall get_accHelp(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                                         TVariantInParam varChild/*[in,opt]*/, 
                                                         long* pidTopic/*[out,retval]*/);
  long            __fastcall get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                              TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accKeyboardShortcut(TVariantInParam varChild/*[in,opt]*/
                                                                , 
                                                                BSTR* pszKeyboardShortcut/*[out,retval]*/);
  BSTR            __fastcall get_accKeyboardShortcut(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accFocus(TVariant* pvarChild/*[out,retval]*/);
  TVariant        __fastcall get_accFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accSelection(TVariant* pvarChildren/*[out,retval]*/);
  TVariant        __fastcall get_accSelection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accDefaultAction(TVariantInParam varChild/*[in,opt]*/, 
                                                             BSTR* pszDefaultAction/*[out,retval]*/);
  BSTR            __fastcall get_accDefaultAction(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accSelect(long flagsSelect/*[in]*/, 
                                                  TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accLocation(long* pxLeft/*[out]*/, long* pyTop/*[out]*/, 
                                                    long* pcxWidth/*[out]*/, 
                                                    long* pcyHeight/*[out]*/, 
                                                    TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accNavigate(long navDir/*[in]*/, 
                                                    TVariantInParam varStart/*[in,opt]*/, 
                                                    TVariant* pvarEndUpAt/*[out,retval]*/);
  TVariant        __fastcall accNavigate(long navDir/*[in]*/, 
                                         TVariantInParam varStart/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/, 
                                                   TVariant* pvarChild/*[out,retval]*/);
  TVariant        __fastcall accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accDoDefaultAction(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_accName(TVariantInParam varChild/*[in,opt]*/, 
                                                    BSTR pszName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_accValue(TVariantInParam varChild/*[in,opt]*/, 
                                                     BSTR pszValue/*[in]*/);

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};

  __property   LPDISPATCH      accParent = {read = get_accParent};
  __property   long            accChildCount = {read = get_accChildCount};
};
typedef _IMsoOleAccDispObjDispT<_IMsoOleAccDispObj> _IMsoOleAccDispObjDisp;

// *********************************************************************//
// SmartIntf: TCOM_CommandBars
// Interface: _CommandBars
// *********************************************************************//
template <class T /* _CommandBars */ >
class TCOM_CommandBarsT : public TComInterface<_CommandBars>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CommandBarsT() {}
  TCOM_CommandBarsT(_CommandBars *intf, bool addRef = false) : TComInterface<_CommandBars>(intf, addRef) {}
  TCOM_CommandBarsT(const TCOM_CommandBarsT& src) : TComInterface<_CommandBars>(src) {}
  TCOM_CommandBarsT& operator=(const TCOM_CommandBarsT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_ActionControl(Office_2k::CommandBarControlPtr* ppcbc/*[out,retval]*/);
  Office_2k::CommandBarControlPtr __fastcall get_ActionControl(void);
  HRESULT         __fastcall get_ActiveMenuBar(Office_2k::CommandBarPtr* ppcb/*[out,retval]*/);
  Office_2k::CommandBarPtr __fastcall get_ActiveMenuBar(void);
  HRESULT         __fastcall Add(TVariantInParam Name/*[in,opt]*/, 
                                 TVariantInParam Position/*[in,opt]*/, 
                                 TVariantInParam MenuBar/*[in,opt]*/, 
                                 TVariantInParam Temporary/*[in,opt]*/, 
                                 Office_2k::CommandBarPtr* ppcb/*[out,retval]*/);
  Office_2k::CommandBarPtr __fastcall Add(TVariantInParam Name/*[in,opt]*/= TNoParam(), 
                                          TVariantInParam Position/*[in,opt]*/= TNoParam(), 
                                          TVariantInParam MenuBar/*[in,opt]*/= TNoParam(), 
                                          TVariantInParam Temporary/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall get_Count(int* pcToolbars/*[out,retval]*/);
  int             __fastcall get_Count(void);
  HRESULT         __fastcall get_DisplayTooltips(TOLEBOOL* pvarfDisplayTooltips/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DisplayTooltips(void);
  HRESULT         __fastcall set_DisplayTooltips(TOLEBOOL pvarfDisplayTooltips/*[in]*/);
  HRESULT         __fastcall get_DisplayKeysInTooltips(TOLEBOOL* pvarfDisplayKeys/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DisplayKeysInTooltips(void);
  HRESULT         __fastcall set_DisplayKeysInTooltips(TOLEBOOL pvarfDisplayKeys/*[in]*/);
  HRESULT         __fastcall FindControl(TVariantInParam Type/*[in,opt]*/, 
                                         TVariantInParam Id/*[in,opt]*/, 
                                         TVariantInParam Tag/*[in,opt]*/, 
                                         TVariantInParam Visible/*[in,opt]*/, 
                                         Office_2k::CommandBarControlPtr* ppcbc/*[out,retval]*/);
  Office_2k::CommandBarControlPtr __fastcall FindControl(TVariantInParam Type/*[in,opt]*/= TNoParam(), 
                                                         TVariantInParam Id/*[in,opt]*/= TNoParam(), 
                                                         TVariantInParam Tag/*[in,opt]*/= TNoParam(), 
                                                         TVariantInParam Visible/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall get_Item(TVariantInParam Index/*[in]*/, 
                                      Office_2k::CommandBarPtr* ppcb/*[out,retval]*/);
  Office_2k::CommandBarPtr __fastcall get_Item(TVariantInParam Index/*[in]*/);
  HRESULT         __fastcall get_LargeButtons(TOLEBOOL* pvarfLargeButtons/*[out,retval]*/);
  TOLEBOOL        __fastcall get_LargeButtons(void);
  HRESULT         __fastcall set_LargeButtons(TOLEBOOL pvarfLargeButtons/*[in]*/);
  HRESULT         __fastcall get_MenuAnimationStyle(Office_2k::MsoMenuAnimation* pma/*[out,retval]*/);
  Office_2k::MsoMenuAnimation __fastcall get_MenuAnimationStyle(void);
  HRESULT         __fastcall set_MenuAnimationStyle(Office_2k::MsoMenuAnimation pma/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* ppienum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall ReleaseFocus(void);
  HRESULT         __fastcall get_IdsString(int ids/*[in]*/, BSTR* pbstrName/*[out]*/, 
                                           int* pcch/*[out,retval]*/);
  int             __fastcall get_IdsString(int ids/*[in]*/, BSTR* pbstrName/*[out]*/);
  HRESULT         __fastcall get_TmcGetName(int tmc/*[in]*/, BSTR* pbstrName/*[out]*/, 
                                            int* pcch/*[out,retval]*/);
  int             __fastcall get_TmcGetName(int tmc/*[in]*/, BSTR* pbstrName/*[out]*/);
  HRESULT         __fastcall get_AdaptiveMenus(TOLEBOOL* pvarfAdaptiveMenus/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AdaptiveMenus(void);
  HRESULT         __fastcall set_AdaptiveMenus(TOLEBOOL pvarfAdaptiveMenus/*[in]*/);
  HRESULT         __fastcall FindControls(TVariantInParam Type/*[in,opt]*/, 
                                          TVariantInParam Id/*[in,opt]*/, 
                                          TVariantInParam Tag/*[in,opt]*/, 
                                          TVariantInParam Visible/*[in,opt]*/, 
                                          Office_2k::CommandBarControlsPtr* ppcbcs/*[out,retval]*/);
  Office_2k::CommandBarControlsPtr __fastcall FindControls(TVariantInParam Type/*[in,opt]*/= TNoParam(), 
                                                           TVariantInParam Id/*[in,opt]*/= TNoParam(), 
                                                           TVariantInParam Tag/*[in,opt]*/= TNoParam(), 
                                                           TVariantInParam Visible/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall AddEx(TVariantInParam TbidOrName/*[in,opt]*/, 
                                   TVariantInParam Position/*[in,opt]*/, 
                                   TVariantInParam MenuBar/*[in,opt]*/, 
                                   TVariantInParam Temporary/*[in,opt]*/, 
                                   TVariantInParam TbtrProtection/*[in,opt]*/, 
                                   Office_2k::CommandBarPtr* ppcb/*[out,retval]*/);
  Office_2k::CommandBarPtr __fastcall AddEx(TVariantInParam TbidOrName/*[in,opt]*/= TNoParam(), 
                                            TVariantInParam Position/*[in,opt]*/= TNoParam(), 
                                            TVariantInParam MenuBar/*[in,opt]*/= TNoParam(), 
                                            TVariantInParam Temporary/*[in,opt]*/= TNoParam(), 
                                            TVariantInParam TbtrProtection/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall get_DisplayFonts(TOLEBOOL* pvarfDisplayFonts/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DisplayFonts(void);
  HRESULT         __fastcall set_DisplayFonts(TOLEBOOL pvarfDisplayFonts/*[in]*/);

  __property   Office_2k::CommandBarControlPtr ActionControl = {read = get_ActionControl};
  __property   Office_2k::CommandBarPtr ActiveMenuBar = {read = get_ActiveMenuBar};
  __property   int             Count = {read = get_Count};
  __property   TOLEBOOL        DisplayTooltips = {read = get_DisplayTooltips, write = set_DisplayTooltips};
  __property   TOLEBOOL        DisplayKeysInTooltips = {read = get_DisplayKeysInTooltips, write = set_DisplayKeysInTooltips};
  __property   TOLEBOOL        LargeButtons = {read = get_LargeButtons, write = set_LargeButtons};
  __property   Office_2k::MsoMenuAnimation MenuAnimationStyle = {read = get_MenuAnimationStyle, write = set_MenuAnimationStyle};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   TOLEBOOL        AdaptiveMenus = {read = get_AdaptiveMenus, write = set_AdaptiveMenus};
  __property   TOLEBOOL        DisplayFonts = {read = get_DisplayFonts, write = set_DisplayFonts};
};
typedef TCOM_CommandBarsT<_CommandBars> TCOM_CommandBars;

// *********************************************************************//
// DispIntf:  _CommandBars
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0302-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class _CommandBarsDispT : public TAutoDriver<_CommandBars>
{
public:
  _CommandBarsDispT(){}

  _CommandBarsDispT(_CommandBars *pintf)
  {
    TAutoDriver<_CommandBars>::Bind(pintf, false);
  }

  _CommandBarsDispT(_CommandBarsPtr pintf)
  {
    TAutoDriver<_CommandBars>::Bind(pintf, true);
  }

  _CommandBarsDispT& operator=(_CommandBars *pintf)
  {
    TAutoDriver<_CommandBars>::Bind(pintf, false);
    return *this;
  }

  _CommandBarsDispT& operator=(_CommandBarsPtr pintf)
  {
    TAutoDriver<_CommandBars>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CommandBars));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CommandBars);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActionControl(Office_2k::CommandBarControlPtr* ppcbc/*[out,retval]*/);
  Office_2k::CommandBarControlPtr __fastcall get_ActionControl(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActiveMenuBar(Office_2k::CommandBarPtr* ppcb/*[out,retval]*/);
  Office_2k::CommandBarPtr __fastcall get_ActiveMenuBar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(TVariantInParam Name/*[in,opt]*/, 
                                            TVariantInParam Position/*[in,opt]*/, 
                                            TVariantInParam MenuBar/*[in,opt]*/, 
                                            TVariantInParam Temporary/*[in,opt]*/, 
                                            Office_2k::CommandBarPtr* ppcb/*[out,retval]*/);
  Office_2k::CommandBarPtr __fastcall Add(TVariantInParam Name/*[in,opt]*/= TNoParam(), 
                                          TVariantInParam Position/*[in,opt]*/= TNoParam(), 
                                          TVariantInParam MenuBar/*[in,opt]*/= TNoParam(), 
                                          TVariantInParam Temporary/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(int* pcToolbars/*[out,retval]*/);
  int             __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayTooltips(TOLEBOOL* pvarfDisplayTooltips/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DisplayTooltips(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayTooltips(TOLEBOOL pvarfDisplayTooltips/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayKeysInTooltips(TOLEBOOL* pvarfDisplayKeys/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DisplayKeysInTooltips(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayKeysInTooltips(TOLEBOOL pvarfDisplayKeys/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall FindControl(TVariantInParam Type/*[in,opt]*/, 
                                                    TVariantInParam Id/*[in,opt]*/, 
                                                    TVariantInParam Tag/*[in,opt]*/, 
                                                    TVariantInParam Visible/*[in,opt]*/, 
                                                    Office_2k::CommandBarControlPtr* ppcbc/*[out,retval]*/);
  Office_2k::CommandBarControlPtr __fastcall FindControl(TVariantInParam Type/*[in,opt]*/= TNoParam(), 
                                                         TVariantInParam Id/*[in,opt]*/= TNoParam(), 
                                                         TVariantInParam Tag/*[in,opt]*/= TNoParam(), 
                                                         TVariantInParam Visible/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(TVariantInParam Index/*[in]*/, 
                                                 Office_2k::CommandBarPtr* ppcb/*[out,retval]*/);
  Office_2k::CommandBarPtr __fastcall get_Item(TVariantInParam Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LargeButtons(TOLEBOOL* pvarfLargeButtons/*[out,retval]*/);
  TOLEBOOL        __fastcall get_LargeButtons(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LargeButtons(TOLEBOOL pvarfLargeButtons/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MenuAnimationStyle(Office_2k::MsoMenuAnimation* pma/*[out,retval]*/);
  Office_2k::MsoMenuAnimation __fastcall get_MenuAnimationStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MenuAnimationStyle(Office_2k::MsoMenuAnimation pma/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppienum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ReleaseFocus();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IdsString(int ids/*[in]*/, BSTR* pbstrName/*[out]*/, 
                                                      int* pcch/*[out,retval]*/);
  int             __fastcall get_IdsString(int ids/*[in]*/, BSTR* pbstrName/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TmcGetName(int tmc/*[in]*/, BSTR* pbstrName/*[out]*/, 
                                                       int* pcch/*[out,retval]*/);
  int             __fastcall get_TmcGetName(int tmc/*[in]*/, BSTR* pbstrName/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AdaptiveMenus(TOLEBOOL* pvarfAdaptiveMenus/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AdaptiveMenus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AdaptiveMenus(TOLEBOOL pvarfAdaptiveMenus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall FindControls(TVariantInParam Type/*[in,opt]*/, 
                                                     TVariantInParam Id/*[in,opt]*/, 
                                                     TVariantInParam Tag/*[in,opt]*/, 
                                                     TVariantInParam Visible/*[in,opt]*/, 
                                                     Office_2k::CommandBarControlsPtr* ppcbcs/*[out,retval]*/);
  Office_2k::CommandBarControlsPtr __fastcall FindControls(TVariantInParam Type/*[in,opt]*/= TNoParam(), 
                                                           TVariantInParam Id/*[in,opt]*/= TNoParam(), 
                                                           TVariantInParam Tag/*[in,opt]*/= TNoParam(), 
                                                           TVariantInParam Visible/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddEx(TVariantInParam TbidOrName/*[in,opt]*/, 
                                              TVariantInParam Position/*[in,opt]*/, 
                                              TVariantInParam MenuBar/*[in,opt]*/, 
                                              TVariantInParam Temporary/*[in,opt]*/, 
                                              TVariantInParam TbtrProtection/*[in,opt]*/, 
                                              Office_2k::CommandBarPtr* ppcb/*[out,retval]*/);
  Office_2k::CommandBarPtr __fastcall AddEx(TVariantInParam TbidOrName/*[in,opt]*/= TNoParam(), 
                                            TVariantInParam Position/*[in,opt]*/= TNoParam(), 
                                            TVariantInParam MenuBar/*[in,opt]*/= TNoParam(), 
                                            TVariantInParam Temporary/*[in,opt]*/= TNoParam(), 
                                            TVariantInParam TbtrProtection/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayFonts(TOLEBOOL* pvarfDisplayFonts/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DisplayFonts(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayFonts(TOLEBOOL pvarfDisplayFonts/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   Office_2k::CommandBarControlPtr ActionControl = {read = get_ActionControl};
  __property   Office_2k::CommandBarPtr ActiveMenuBar = {read = get_ActiveMenuBar};
  __property   int             Count = {read = get_Count};
  __property   TOLEBOOL        DisplayTooltips = {read = get_DisplayTooltips, write = set_DisplayTooltips};
  __property   TOLEBOOL        DisplayKeysInTooltips = {read = get_DisplayKeysInTooltips, write = set_DisplayKeysInTooltips};
  __property   TOLEBOOL        LargeButtons = {read = get_LargeButtons, write = set_LargeButtons};
  __property   Office_2k::MsoMenuAnimation MenuAnimationStyle = {read = get_MenuAnimationStyle, write = set_MenuAnimationStyle};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   TOLEBOOL        AdaptiveMenus = {read = get_AdaptiveMenus, write = set_AdaptiveMenus};
  __property   TOLEBOOL        DisplayFonts = {read = get_DisplayFonts, write = set_DisplayFonts};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef _CommandBarsDispT<_CommandBars> _CommandBarsDisp;

typedef TComInterface<CommandBar>  TCOMCommandBar;

// *********************************************************************//
// DispIntf:  CommandBar
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0304-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class CommandBarDispT : public TAutoDriver<CommandBar>
{
public:
  CommandBarDispT(){}

  CommandBarDispT(CommandBar *pintf)
  {
    TAutoDriver<CommandBar>::Bind(pintf, false);
  }

  CommandBarDispT(CommandBarPtr pintf)
  {
    TAutoDriver<CommandBar>::Bind(pintf, true);
  }

  CommandBarDispT& operator=(CommandBar *pintf)
  {
    TAutoDriver<CommandBar>::Bind(pintf, false);
    return *this;
  }

  CommandBarDispT& operator=(CommandBarPtr pintf)
  {
    TAutoDriver<CommandBar>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BuiltIn(TOLEBOOL* pvarfBuiltIn/*[out,retval]*/);
  TOLEBOOL        __fastcall get_BuiltIn(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Context(BSTR* pbstrContext/*[out,retval]*/);
  BSTR            __fastcall get_Context(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Context(BSTR pbstrContext/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Controls(Office_2k::CommandBarControlsPtr* ppcbcs/*[out,retval]*/);
  Office_2k::CommandBarControlsPtr __fastcall get_Controls(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(TOLEBOOL* pvarfEnabled/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(TOLEBOOL pvarfEnabled/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall FindControl(TVariantInParam Type/*[in,opt]*/, 
                                                    TVariantInParam Id/*[in,opt]*/, 
                                                    TVariantInParam Tag/*[in,opt]*/, 
                                                    TVariantInParam Visible/*[in,opt]*/, 
                                                    TVariantInParam Recursive/*[in,opt]*/, 
                                                    Office_2k::CommandBarControlPtr* ppcbc/*[out,retval]*/);
  Office_2k::CommandBarControlPtr __fastcall FindControl(TVariantInParam Type/*[in,opt]*/= TNoParam(), 
                                                         TVariantInParam Id/*[in,opt]*/= TNoParam(), 
                                                         TVariantInParam Tag/*[in,opt]*/= TNoParam(), 
                                                         TVariantInParam Visible/*[in,opt]*/= TNoParam(), 
                                                         TVariantInParam Recursive/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(int* pdy/*[out,retval]*/);
  int             __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(int pdy/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Index(int* pi/*[out,retval]*/);
  int             __fastcall get_Index(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InstanceId(long* pid/*[out,retval]*/);
  long            __fastcall get_InstanceId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(int* pxpLeft/*[out,retval]*/);
  int             __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(int pxpLeft/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pbstrName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NameLocal(BSTR* pbstrNameLocal/*[out,retval]*/);
  BSTR            __fastcall get_NameLocal(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_NameLocal(BSTR pbstrNameLocal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Position(Office_2k::MsoBarPosition* ppos/*[out,retval]*/);
  Office_2k::MsoBarPosition __fastcall get_Position(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Position(Office_2k::MsoBarPosition ppos/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RowIndex(int* piRow/*[out,retval]*/);
  int             __fastcall get_RowIndex(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RowIndex(int piRow/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Protection(Office_2k::MsoBarProtection* pprot/*[out,retval]*/);
  Office_2k::MsoBarProtection __fastcall get_Protection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Protection(Office_2k::MsoBarProtection pprot/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reset();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ShowPopup(TVariantInParam x/*[in,opt]*/= TNoParam(), 
                                                  TVariantInParam y/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(int* pypTop/*[out,retval]*/);
  int             __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(int pypTop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Office_2k::MsoBarType* ptype/*[out,retval]*/);
  Office_2k::MsoBarType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(TOLEBOOL* pvarfVisible/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(TOLEBOOL pvarfVisible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(int* pdx/*[out,retval]*/);
  int             __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(int pdx/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AdaptiveMenu(TOLEBOOL* pvarfAdaptiveMenu/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AdaptiveMenu(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AdaptiveMenu(TOLEBOOL pvarfAdaptiveMenu/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accParent(LPDISPATCH* ppdispParent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_accParent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accChildCount(long* pcountChildren/*[out,retval]*/);
  long            __fastcall get_accChildCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accChild(TVariantInParam varChild/*[in]*/, 
                                                     LPDISPATCH* ppdispChild/*[out,retval]*/);
  LPDISPATCH      __fastcall get_accChild(TVariantInParam varChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accName(TVariantInParam varChild/*[in,opt]*/, 
                                                    BSTR* pszName/*[out,retval]*/);
  BSTR            __fastcall get_accName(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accValue(TVariantInParam varChild/*[in,opt]*/, 
                                                     BSTR* pszValue/*[out,retval]*/);
  BSTR            __fastcall get_accValue(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accDescription(TVariantInParam varChild/*[in,opt]*/, 
                                                           BSTR* pszDescription/*[out,retval]*/);
  BSTR            __fastcall get_accDescription(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accRole(TVariantInParam varChild/*[in,opt]*/, 
                                                    TVariant* pvarRole/*[out,retval]*/);
  TVariant        __fastcall get_accRole(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accState(TVariantInParam varChild/*[in,opt]*/, 
                                                     TVariant* pvarState/*[out,retval]*/);
  TVariant        __fastcall get_accState(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accHelp(TVariantInParam varChild/*[in,opt]*/, 
                                                    BSTR* pszHelp/*[out,retval]*/);
  BSTR            __fastcall get_accHelp(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                                         TVariantInParam varChild/*[in,opt]*/, 
                                                         long* pidTopic/*[out,retval]*/);
  long            __fastcall get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                              TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accKeyboardShortcut(TVariantInParam varChild/*[in,opt]*/
                                                                , 
                                                                BSTR* pszKeyboardShortcut/*[out,retval]*/);
  BSTR            __fastcall get_accKeyboardShortcut(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accFocus(TVariant* pvarChild/*[out,retval]*/);
  TVariant        __fastcall get_accFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accSelection(TVariant* pvarChildren/*[out,retval]*/);
  TVariant        __fastcall get_accSelection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accDefaultAction(TVariantInParam varChild/*[in,opt]*/, 
                                                             BSTR* pszDefaultAction/*[out,retval]*/);
  BSTR            __fastcall get_accDefaultAction(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accSelect(long flagsSelect/*[in]*/, 
                                                  TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accLocation(long* pxLeft/*[out]*/, long* pyTop/*[out]*/, 
                                                    long* pcxWidth/*[out]*/, 
                                                    long* pcyHeight/*[out]*/, 
                                                    TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accNavigate(long navDir/*[in]*/, 
                                                    TVariantInParam varStart/*[in,opt]*/, 
                                                    TVariant* pvarEndUpAt/*[out,retval]*/);
  TVariant        __fastcall accNavigate(long navDir/*[in]*/, 
                                         TVariantInParam varStart/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/, 
                                                   TVariant* pvarChild/*[out,retval]*/);
  TVariant        __fastcall accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accDoDefaultAction(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_accName(TVariantInParam varChild/*[in,opt]*/, 
                                                    BSTR pszName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_accValue(TVariantInParam varChild/*[in,opt]*/, 
                                                     BSTR pszValue/*[in]*/);

  __property   TOLEBOOL        BuiltIn = {read = get_BuiltIn};
  __property   BSTR            Context = {read = get_Context, write = set_Context};
  __property   Office_2k::CommandBarControlsPtr Controls = {read = get_Controls};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   int             Height = {read = get_Height, write = set_Height};
  __property   int             Index = {read = get_Index};
  __property   long            InstanceId = {read = get_InstanceId};
  __property   int             Left = {read = get_Left, write = set_Left};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            NameLocal = {read = get_NameLocal, write = set_NameLocal};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoBarPosition Position = {read = get_Position, write = set_Position};
  __property   int             RowIndex = {read = get_RowIndex, write = set_RowIndex};
  __property   Office_2k::MsoBarProtection Protection = {read = get_Protection, write = set_Protection};
  __property   int             Top = {read = get_Top, write = set_Top};
  __property   Office_2k::MsoBarType Type = {read = get_Type};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   int             Width = {read = get_Width, write = set_Width};
  __property   TOLEBOOL        AdaptiveMenu = {read = get_AdaptiveMenu, write = set_AdaptiveMenu};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};

  __property   LPDISPATCH      accParent = {read = get_accParent};
  __property   long            accChildCount = {read = get_accChildCount};
};
typedef CommandBarDispT<CommandBar> CommandBarDisp;

typedef TComInterface<CommandBarControls>  TCOMCommandBarControls;

// *********************************************************************//
// DispIntf:  CommandBarControls
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0306-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class CommandBarControlsDispT : public TAutoDriver<CommandBarControls>
{
public:
  CommandBarControlsDispT(){}

  CommandBarControlsDispT(CommandBarControls *pintf)
  {
    TAutoDriver<CommandBarControls>::Bind(pintf, false);
  }

  CommandBarControlsDispT(CommandBarControlsPtr pintf)
  {
    TAutoDriver<CommandBarControls>::Bind(pintf, true);
  }

  CommandBarControlsDispT& operator=(CommandBarControls *pintf)
  {
    TAutoDriver<CommandBarControls>::Bind(pintf, false);
    return *this;
  }

  CommandBarControlsDispT& operator=(CommandBarControlsPtr pintf)
  {
    TAutoDriver<CommandBarControls>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(TVariantInParam Type/*[in,opt]*/, 
                                            TVariantInParam Id/*[in,opt]*/, 
                                            TVariantInParam Parameter/*[in,opt]*/, 
                                            TVariantInParam Before/*[in,opt]*/, 
                                            TVariantInParam Temporary/*[in,opt]*/, 
                                            Office_2k::CommandBarControlPtr* ppcbc/*[out,retval]*/);
  Office_2k::CommandBarControlPtr __fastcall Add(TVariantInParam Type/*[in,opt]*/= TNoParam(), 
                                                 TVariantInParam Id/*[in,opt]*/= TNoParam(), 
                                                 TVariantInParam Parameter/*[in,opt]*/= TNoParam(), 
                                                 TVariantInParam Before/*[in,opt]*/= TNoParam(), 
                                                 TVariantInParam Temporary/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(int* pcToolbarControls/*[out,retval]*/);
  int             __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(TVariantInParam Index/*[in]*/, 
                                                 Office_2k::CommandBarControlPtr* ppcbc/*[out,retval]*/);
  Office_2k::CommandBarControlPtr __fastcall get_Item(TVariantInParam Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppienum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Office_2k::CommandBarPtr* ppcb/*[out,retval]*/);
  Office_2k::CommandBarPtr __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   int             Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   Office_2k::CommandBarPtr Parent = {read = get_Parent};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef CommandBarControlsDispT<CommandBarControls> CommandBarControlsDisp;

typedef TComInterface<CommandBarControl>  TCOMCommandBarControl;

// *********************************************************************//
// DispIntf:  CommandBarControl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {000C0308-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class CommandBarControlDispT : public TAutoDriver<CommandBarControl>
{
public:
  CommandBarControlDispT(){}

  CommandBarControlDispT(CommandBarControl *pintf)
  {
    TAutoDriver<CommandBarControl>::Bind(pintf, false);
  }

  CommandBarControlDispT(CommandBarControlPtr pintf)
  {
    TAutoDriver<CommandBarControl>::Bind(pintf, true);
  }

  CommandBarControlDispT& operator=(CommandBarControl *pintf)
  {
    TAutoDriver<CommandBarControl>::Bind(pintf, false);
    return *this;
  }

  CommandBarControlDispT& operator=(CommandBarControlPtr pintf)
  {
    TAutoDriver<CommandBarControl>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BeginGroup(TOLEBOOL* pvarfBeginGroup/*[out,retval]*/);
  TOLEBOOL        __fastcall get_BeginGroup(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BeginGroup(TOLEBOOL pvarfBeginGroup/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BuiltIn(TOLEBOOL* pvarfBuiltIn/*[out,retval]*/);
  TOLEBOOL        __fastcall get_BuiltIn(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* pbstrCaption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Caption(BSTR pbstrCaption/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Control(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Control(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Copy(TVariantInParam Bar/*[in,opt]*/, 
                                             TVariantInParam Before/*[in,opt]*/, 
                                             Office_2k::CommandBarControlPtr* ppcbc/*[out,retval]*/);
  Office_2k::CommandBarControlPtr __fastcall Copy(TVariantInParam Bar/*[in,opt]*/= TNoParam(), 
                                                  TVariantInParam Before/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(TVariantInParam Temporary/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DescriptionText(BSTR* pbstrText/*[out,retval]*/);
  BSTR            __fastcall get_DescriptionText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DescriptionText(BSTR pbstrText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(TOLEBOOL* pvarfEnabled/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(TOLEBOOL pvarfEnabled/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Execute();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(int* pdy/*[out,retval]*/);
  int             __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(int pdy/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpContextId(int* pid/*[out,retval]*/);
  int             __fastcall get_HelpContextId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpContextId(int pid/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpFile(BSTR* pbstrFilename/*[out,retval]*/);
  BSTR            __fastcall get_HelpFile(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpFile(BSTR pbstrFilename/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Id(int* pid/*[out,retval]*/);
  int             __fastcall get_Id(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Index(int* pi/*[out,retval]*/);
  int             __fastcall get_Index(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InstanceId(long* pid/*[out,retval]*/);
  long            __fastcall get_InstanceId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Move(TVariantInParam Bar/*[in,opt]*/, 
                                             TVariantInParam Before/*[in,opt]*/, 
                                             Office_2k::CommandBarControlPtr* ppcbc/*[out,retval]*/);
  Office_2k::CommandBarControlPtr __fastcall Move(TVariantInParam Bar/*[in,opt]*/= TNoParam(), 
                                                  TVariantInParam Before/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(int* px/*[out,retval]*/);
  int             __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OLEUsage(Office_2k::MsoControlOLEUsage* pcou/*[out,retval]*/);
  Office_2k::MsoControlOLEUsage __fastcall get_OLEUsage(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OLEUsage(Office_2k::MsoControlOLEUsage pcou/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnAction(BSTR* pbstrOnAction/*[out,retval]*/);
  BSTR            __fastcall get_OnAction(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnAction(BSTR pbstrOnAction/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Office_2k::CommandBarPtr* ppcb/*[out,retval]*/);
  Office_2k::CommandBarPtr __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parameter(BSTR* pbstrParam/*[out,retval]*/);
  BSTR            __fastcall get_Parameter(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Parameter(BSTR pbstrParam/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Priority(int* pnPri/*[out,retval]*/);
  int             __fastcall get_Priority(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Priority(int pnPri/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reset();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetFocus();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tag(BSTR* pbstrTag/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Tag(BSTR pbstrTag/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TooltipText(BSTR* pbstrTooltip/*[out,retval]*/);
  BSTR            __fastcall get_TooltipText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TooltipText(BSTR pbstrTooltip/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(int* py/*[out,retval]*/);
  int             __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Office_2k::MsoControlType* ptype/*[out,retval]*/);
  Office_2k::MsoControlType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(TOLEBOOL* pvarfVisible/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(TOLEBOOL pvarfVisible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(int* pdx/*[out,retval]*/);
  int             __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(int pdx/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsPriorityDropped(TOLEBOOL* pvarfDropped/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsPriorityDropped(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved1();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved2();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved3();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved4();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved5();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved6();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved7();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accParent(LPDISPATCH* ppdispParent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_accParent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accChildCount(long* pcountChildren/*[out,retval]*/);
  long            __fastcall get_accChildCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accChild(TVariantInParam varChild/*[in]*/, 
                                                     LPDISPATCH* ppdispChild/*[out,retval]*/);
  LPDISPATCH      __fastcall get_accChild(TVariantInParam varChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accName(TVariantInParam varChild/*[in,opt]*/, 
                                                    BSTR* pszName/*[out,retval]*/);
  BSTR            __fastcall get_accName(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accValue(TVariantInParam varChild/*[in,opt]*/, 
                                                     BSTR* pszValue/*[out,retval]*/);
  BSTR            __fastcall get_accValue(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accDescription(TVariantInParam varChild/*[in,opt]*/, 
                                                           BSTR* pszDescription/*[out,retval]*/);
  BSTR            __fastcall get_accDescription(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accRole(TVariantInParam varChild/*[in,opt]*/, 
                                                    TVariant* pvarRole/*[out,retval]*/);
  TVariant        __fastcall get_accRole(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accState(TVariantInParam varChild/*[in,opt]*/, 
                                                     TVariant* pvarState/*[out,retval]*/);
  TVariant        __fastcall get_accState(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accHelp(TVariantInParam varChild/*[in,opt]*/, 
                                                    BSTR* pszHelp/*[out,retval]*/);
  BSTR            __fastcall get_accHelp(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                                         TVariantInParam varChild/*[in,opt]*/, 
                                                         long* pidTopic/*[out,retval]*/);
  long            __fastcall get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                              TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accKeyboardShortcut(TVariantInParam varChild/*[in,opt]*/
                                                                , 
                                                                BSTR* pszKeyboardShortcut/*[out,retval]*/);
  BSTR            __fastcall get_accKeyboardShortcut(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accFocus(TVariant* pvarChild/*[out,retval]*/);
  TVariant        __fastcall get_accFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accSelection(TVariant* pvarChildren/*[out,retval]*/);
  TVariant        __fastcall get_accSelection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accDefaultAction(TVariantInParam varChild/*[in,opt]*/, 
                                                             BSTR* pszDefaultAction/*[out,retval]*/);
  BSTR            __fastcall get_accDefaultAction(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accSelect(long flagsSelect/*[in]*/, 
                                                  TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accLocation(long* pxLeft/*[out]*/, long* pyTop/*[out]*/, 
                                                    long* pcxWidth/*[out]*/, 
                                                    long* pcyHeight/*[out]*/, 
                                                    TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accNavigate(long navDir/*[in]*/, 
                                                    TVariantInParam varStart/*[in,opt]*/, 
                                                    TVariant* pvarEndUpAt/*[out,retval]*/);
  TVariant        __fastcall accNavigate(long navDir/*[in]*/, 
                                         TVariantInParam varStart/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/, 
                                                   TVariant* pvarChild/*[out,retval]*/);
  TVariant        __fastcall accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accDoDefaultAction(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_accName(TVariantInParam varChild/*[in,opt]*/, 
                                                    BSTR pszName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_accValue(TVariantInParam varChild/*[in,opt]*/, 
                                                     BSTR pszValue/*[in]*/);

  __property   TOLEBOOL        BeginGroup = {read = get_BeginGroup, write = set_BeginGroup};
  __property   TOLEBOOL        BuiltIn = {read = get_BuiltIn};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   LPDISPATCH      Control = {read = get_Control};
  __property   BSTR            DescriptionText = {read = get_DescriptionText, write = set_DescriptionText};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   int             Height = {read = get_Height, write = set_Height};
  __property   int             HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   BSTR            HelpFile = {read = get_HelpFile, write = set_HelpFile};
  __property   int             Id = {read = get_Id};
  __property   int             Index = {read = get_Index};
  __property   long            InstanceId = {read = get_InstanceId};
  __property   int             Left = {read = get_Left};
  __property   Office_2k::MsoControlOLEUsage OLEUsage = {read = get_OLEUsage, write = set_OLEUsage};
  __property   BSTR            OnAction = {read = get_OnAction, write = set_OnAction};
  __property   Office_2k::CommandBarPtr Parent = {read = get_Parent};
  __property   BSTR            Parameter = {read = get_Parameter, write = set_Parameter};
  __property   int             Priority = {read = get_Priority, write = set_Priority};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   BSTR            TooltipText = {read = get_TooltipText, write = set_TooltipText};
  __property   int             Top = {read = get_Top};
  __property   Office_2k::MsoControlType Type = {read = get_Type};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   int             Width = {read = get_Width, write = set_Width};
  __property   TOLEBOOL        IsPriorityDropped = {read = get_IsPriorityDropped};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};

  __property   LPDISPATCH      accParent = {read = get_accParent};
  __property   long            accChildCount = {read = get_accChildCount};
};
typedef CommandBarControlDispT<CommandBarControl> CommandBarControlDisp;

// *********************************************************************//
// SmartIntf: TCOM_CommandBarButton
// Interface: _CommandBarButton
// *********************************************************************//
template <class T /* _CommandBarButton */ >
class TCOM_CommandBarButtonT : public TComInterface<_CommandBarButton>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CommandBarButtonT() {}
  TCOM_CommandBarButtonT(_CommandBarButton *intf, bool addRef = false) : TComInterface<_CommandBarButton>(intf, addRef) {}
  TCOM_CommandBarButtonT(const TCOM_CommandBarButtonT& src) : TComInterface<_CommandBarButton>(src) {}
  TCOM_CommandBarButtonT& operator=(const TCOM_CommandBarButtonT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_BuiltInFace(TOLEBOOL* pvarfBuiltIn/*[out,retval]*/);
  TOLEBOOL        __fastcall get_BuiltInFace(void);
  HRESULT         __fastcall set_BuiltInFace(TOLEBOOL pvarfBuiltIn/*[in]*/);
  HRESULT         __fastcall CopyFace(void);
  HRESULT         __fastcall get_FaceId(int* pid/*[out,retval]*/);
  int             __fastcall get_FaceId(void);
  HRESULT         __fastcall set_FaceId(int pid/*[in]*/);
  HRESULT         __fastcall PasteFace(void);
  HRESULT         __fastcall get_ShortcutText(BSTR* pbstrText/*[out,retval]*/);
  BSTR            __fastcall get_ShortcutText(void);
  HRESULT         __fastcall set_ShortcutText(BSTR pbstrText/*[in]*/);
  HRESULT         __fastcall get_State(Office_2k::MsoButtonState* pstate/*[out,retval]*/);
  Office_2k::MsoButtonState __fastcall get_State(void);
  HRESULT         __fastcall set_State(Office_2k::MsoButtonState pstate/*[in]*/);
  HRESULT         __fastcall get_Style(Office_2k::MsoButtonStyle* pstyle/*[out,retval]*/);
  Office_2k::MsoButtonStyle __fastcall get_Style(void);
  HRESULT         __fastcall set_Style(Office_2k::MsoButtonStyle pstyle/*[in]*/);
  HRESULT         __fastcall get_HyperlinkType(Office_2k::MsoCommandBarButtonHyperlinkType* phlType/*[out,retval]*/);
  Office_2k::MsoCommandBarButtonHyperlinkType __fastcall get_HyperlinkType(void);
  HRESULT         __fastcall set_HyperlinkType(Office_2k::MsoCommandBarButtonHyperlinkType phlType/*[in]*/);

  __property   TOLEBOOL        BuiltInFace = {read = get_BuiltInFace, write = set_BuiltInFace};
  __property   int             FaceId = {read = get_FaceId, write = set_FaceId};
  __property   BSTR            ShortcutText = {read = get_ShortcutText, write = set_ShortcutText};
  __property   Office_2k::MsoButtonState State = {read = get_State, write = set_State};
  __property   Office_2k::MsoButtonStyle Style = {read = get_Style, write = set_Style};
  __property   Office_2k::MsoCommandBarButtonHyperlinkType HyperlinkType = {read = get_HyperlinkType, write = set_HyperlinkType};
};
typedef TCOM_CommandBarButtonT<_CommandBarButton> TCOM_CommandBarButton;

// *********************************************************************//
// DispIntf:  _CommandBarButton
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C030E-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class _CommandBarButtonDispT : public TAutoDriver<_CommandBarButton>
{
public:
  _CommandBarButtonDispT(){}

  _CommandBarButtonDispT(_CommandBarButton *pintf)
  {
    TAutoDriver<_CommandBarButton>::Bind(pintf, false);
  }

  _CommandBarButtonDispT(_CommandBarButtonPtr pintf)
  {
    TAutoDriver<_CommandBarButton>::Bind(pintf, true);
  }

  _CommandBarButtonDispT& operator=(_CommandBarButton *pintf)
  {
    TAutoDriver<_CommandBarButton>::Bind(pintf, false);
    return *this;
  }

  _CommandBarButtonDispT& operator=(_CommandBarButtonPtr pintf)
  {
    TAutoDriver<_CommandBarButton>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CommandBarButton));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CommandBarButton);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BuiltInFace(TOLEBOOL* pvarfBuiltIn/*[out,retval]*/);
  TOLEBOOL        __fastcall get_BuiltInFace(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BuiltInFace(TOLEBOOL pvarfBuiltIn/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CopyFace();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FaceId(int* pid/*[out,retval]*/);
  int             __fastcall get_FaceId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FaceId(int pid/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PasteFace();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShortcutText(BSTR* pbstrText/*[out,retval]*/);
  BSTR            __fastcall get_ShortcutText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShortcutText(BSTR pbstrText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_State(Office_2k::MsoButtonState* pstate/*[out,retval]*/);
  Office_2k::MsoButtonState __fastcall get_State(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_State(Office_2k::MsoButtonState pstate/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Style(Office_2k::MsoButtonStyle* pstyle/*[out,retval]*/);
  Office_2k::MsoButtonStyle __fastcall get_Style(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Style(Office_2k::MsoButtonStyle pstyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HyperlinkType(Office_2k::MsoCommandBarButtonHyperlinkType* phlType/*[out,retval]*/);
  Office_2k::MsoCommandBarButtonHyperlinkType __fastcall get_HyperlinkType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HyperlinkType(Office_2k::MsoCommandBarButtonHyperlinkType phlType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BeginGroup(TOLEBOOL* pvarfBeginGroup/*[out,retval]*/);
  TOLEBOOL        __fastcall get_BeginGroup(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BeginGroup(TOLEBOOL pvarfBeginGroup/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BuiltIn(TOLEBOOL* pvarfBuiltIn/*[out,retval]*/);
  TOLEBOOL        __fastcall get_BuiltIn(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* pbstrCaption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Caption(BSTR pbstrCaption/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Control(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Control(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Copy(TVariantInParam Bar/*[in,opt]*/, 
                                             TVariantInParam Before/*[in,opt]*/, 
                                             Office_2k::CommandBarControlPtr* ppcbc/*[out,retval]*/);
  Office_2k::CommandBarControlPtr __fastcall Copy(TVariantInParam Bar/*[in,opt]*/= TNoParam(), 
                                                  TVariantInParam Before/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(TVariantInParam Temporary/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DescriptionText(BSTR* pbstrText/*[out,retval]*/);
  BSTR            __fastcall get_DescriptionText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DescriptionText(BSTR pbstrText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(TOLEBOOL* pvarfEnabled/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(TOLEBOOL pvarfEnabled/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Execute();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(int* pdy/*[out,retval]*/);
  int             __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(int pdy/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpContextId(int* pid/*[out,retval]*/);
  int             __fastcall get_HelpContextId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpContextId(int pid/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpFile(BSTR* pbstrFilename/*[out,retval]*/);
  BSTR            __fastcall get_HelpFile(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpFile(BSTR pbstrFilename/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Id(int* pid/*[out,retval]*/);
  int             __fastcall get_Id(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Index(int* pi/*[out,retval]*/);
  int             __fastcall get_Index(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InstanceId(long* pid/*[out,retval]*/);
  long            __fastcall get_InstanceId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Move(TVariantInParam Bar/*[in,opt]*/, 
                                             TVariantInParam Before/*[in,opt]*/, 
                                             Office_2k::CommandBarControlPtr* ppcbc/*[out,retval]*/);
  Office_2k::CommandBarControlPtr __fastcall Move(TVariantInParam Bar/*[in,opt]*/= TNoParam(), 
                                                  TVariantInParam Before/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(int* px/*[out,retval]*/);
  int             __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OLEUsage(Office_2k::MsoControlOLEUsage* pcou/*[out,retval]*/);
  Office_2k::MsoControlOLEUsage __fastcall get_OLEUsage(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OLEUsage(Office_2k::MsoControlOLEUsage pcou/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnAction(BSTR* pbstrOnAction/*[out,retval]*/);
  BSTR            __fastcall get_OnAction(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnAction(BSTR pbstrOnAction/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Office_2k::CommandBarPtr* ppcb/*[out,retval]*/);
  Office_2k::CommandBarPtr __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parameter(BSTR* pbstrParam/*[out,retval]*/);
  BSTR            __fastcall get_Parameter(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Parameter(BSTR pbstrParam/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Priority(int* pnPri/*[out,retval]*/);
  int             __fastcall get_Priority(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Priority(int pnPri/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reset();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetFocus();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tag(BSTR* pbstrTag/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Tag(BSTR pbstrTag/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TooltipText(BSTR* pbstrTooltip/*[out,retval]*/);
  BSTR            __fastcall get_TooltipText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TooltipText(BSTR pbstrTooltip/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(int* py/*[out,retval]*/);
  int             __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Office_2k::MsoControlType* ptype/*[out,retval]*/);
  Office_2k::MsoControlType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(TOLEBOOL* pvarfVisible/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(TOLEBOOL pvarfVisible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(int* pdx/*[out,retval]*/);
  int             __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(int pdx/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsPriorityDropped(TOLEBOOL* pvarfDropped/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsPriorityDropped(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved1();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved2();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved3();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved4();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved5();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved6();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved7();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accParent(LPDISPATCH* ppdispParent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_accParent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accChildCount(long* pcountChildren/*[out,retval]*/);
  long            __fastcall get_accChildCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accChild(TVariantInParam varChild/*[in]*/, 
                                                     LPDISPATCH* ppdispChild/*[out,retval]*/);
  LPDISPATCH      __fastcall get_accChild(TVariantInParam varChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accName(TVariantInParam varChild/*[in,opt]*/, 
                                                    BSTR* pszName/*[out,retval]*/);
  BSTR            __fastcall get_accName(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accValue(TVariantInParam varChild/*[in,opt]*/, 
                                                     BSTR* pszValue/*[out,retval]*/);
  BSTR            __fastcall get_accValue(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accDescription(TVariantInParam varChild/*[in,opt]*/, 
                                                           BSTR* pszDescription/*[out,retval]*/);
  BSTR            __fastcall get_accDescription(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accRole(TVariantInParam varChild/*[in,opt]*/, 
                                                    TVariant* pvarRole/*[out,retval]*/);
  TVariant        __fastcall get_accRole(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accState(TVariantInParam varChild/*[in,opt]*/, 
                                                     TVariant* pvarState/*[out,retval]*/);
  TVariant        __fastcall get_accState(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accHelp(TVariantInParam varChild/*[in,opt]*/, 
                                                    BSTR* pszHelp/*[out,retval]*/);
  BSTR            __fastcall get_accHelp(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                                         TVariantInParam varChild/*[in,opt]*/, 
                                                         long* pidTopic/*[out,retval]*/);
  long            __fastcall get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                              TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accKeyboardShortcut(TVariantInParam varChild/*[in,opt]*/
                                                                , 
                                                                BSTR* pszKeyboardShortcut/*[out,retval]*/);
  BSTR            __fastcall get_accKeyboardShortcut(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accFocus(TVariant* pvarChild/*[out,retval]*/);
  TVariant        __fastcall get_accFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accSelection(TVariant* pvarChildren/*[out,retval]*/);
  TVariant        __fastcall get_accSelection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accDefaultAction(TVariantInParam varChild/*[in,opt]*/, 
                                                             BSTR* pszDefaultAction/*[out,retval]*/);
  BSTR            __fastcall get_accDefaultAction(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accSelect(long flagsSelect/*[in]*/, 
                                                  TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accLocation(long* pxLeft/*[out]*/, long* pyTop/*[out]*/, 
                                                    long* pcxWidth/*[out]*/, 
                                                    long* pcyHeight/*[out]*/, 
                                                    TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accNavigate(long navDir/*[in]*/, 
                                                    TVariantInParam varStart/*[in,opt]*/, 
                                                    TVariant* pvarEndUpAt/*[out,retval]*/);
  TVariant        __fastcall accNavigate(long navDir/*[in]*/, 
                                         TVariantInParam varStart/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/, 
                                                   TVariant* pvarChild/*[out,retval]*/);
  TVariant        __fastcall accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accDoDefaultAction(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_accName(TVariantInParam varChild/*[in,opt]*/, 
                                                    BSTR pszName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_accValue(TVariantInParam varChild/*[in,opt]*/, 
                                                     BSTR pszValue/*[in]*/);

  __property   TOLEBOOL        BuiltInFace = {read = get_BuiltInFace, write = set_BuiltInFace};
  __property   int             FaceId = {read = get_FaceId, write = set_FaceId};
  __property   BSTR            ShortcutText = {read = get_ShortcutText, write = set_ShortcutText};
  __property   Office_2k::MsoButtonState State = {read = get_State, write = set_State};
  __property   Office_2k::MsoButtonStyle Style = {read = get_Style, write = set_Style};
  __property   Office_2k::MsoCommandBarButtonHyperlinkType HyperlinkType = {read = get_HyperlinkType, write = set_HyperlinkType};

  __property   TOLEBOOL        BeginGroup = {read = get_BeginGroup, write = set_BeginGroup};
  __property   TOLEBOOL        BuiltIn = {read = get_BuiltIn};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   LPDISPATCH      Control = {read = get_Control};
  __property   BSTR            DescriptionText = {read = get_DescriptionText, write = set_DescriptionText};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   int             Height = {read = get_Height, write = set_Height};
  __property   int             HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   BSTR            HelpFile = {read = get_HelpFile, write = set_HelpFile};
  __property   int             Id = {read = get_Id};
  __property   int             Index = {read = get_Index};
  __property   long            InstanceId = {read = get_InstanceId};
  __property   int             Left = {read = get_Left};
  __property   Office_2k::MsoControlOLEUsage OLEUsage = {read = get_OLEUsage, write = set_OLEUsage};
  __property   BSTR            OnAction = {read = get_OnAction, write = set_OnAction};
  __property   Office_2k::CommandBarPtr Parent = {read = get_Parent};
  __property   BSTR            Parameter = {read = get_Parameter, write = set_Parameter};
  __property   int             Priority = {read = get_Priority, write = set_Priority};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   BSTR            TooltipText = {read = get_TooltipText, write = set_TooltipText};
  __property   int             Top = {read = get_Top};
  __property   Office_2k::MsoControlType Type = {read = get_Type};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   int             Width = {read = get_Width, write = set_Width};
  __property   TOLEBOOL        IsPriorityDropped = {read = get_IsPriorityDropped};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};

  __property   LPDISPATCH      accParent = {read = get_accParent};
  __property   long            accChildCount = {read = get_accChildCount};
};
typedef _CommandBarButtonDispT<_CommandBarButton> _CommandBarButtonDisp;

typedef TComInterface<CommandBarPopup>  TCOMCommandBarPopup;

// *********************************************************************//
// DispIntf:  CommandBarPopup
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C030A-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class CommandBarPopupDispT : public TAutoDriver<CommandBarPopup>
{
public:
  CommandBarPopupDispT(){}

  CommandBarPopupDispT(CommandBarPopup *pintf)
  {
    TAutoDriver<CommandBarPopup>::Bind(pintf, false);
  }

  CommandBarPopupDispT(CommandBarPopupPtr pintf)
  {
    TAutoDriver<CommandBarPopup>::Bind(pintf, true);
  }

  CommandBarPopupDispT& operator=(CommandBarPopup *pintf)
  {
    TAutoDriver<CommandBarPopup>::Bind(pintf, false);
    return *this;
  }

  CommandBarPopupDispT& operator=(CommandBarPopupPtr pintf)
  {
    TAutoDriver<CommandBarPopup>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CommandBar(Office_2k::CommandBarPtr* ppcb/*[out,retval]*/);
  Office_2k::CommandBarPtr __fastcall get_CommandBar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Controls(Office_2k::CommandBarControlsPtr* ppcbcs/*[out,retval]*/);
  Office_2k::CommandBarControlsPtr __fastcall get_Controls(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OLEMenuGroup(Office_2k::MsoOLEMenuGroup* pomg/*[out,retval]*/);
  Office_2k::MsoOLEMenuGroup __fastcall get_OLEMenuGroup(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OLEMenuGroup(Office_2k::MsoOLEMenuGroup pomg/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BeginGroup(TOLEBOOL* pvarfBeginGroup/*[out,retval]*/);
  TOLEBOOL        __fastcall get_BeginGroup(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BeginGroup(TOLEBOOL pvarfBeginGroup/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BuiltIn(TOLEBOOL* pvarfBuiltIn/*[out,retval]*/);
  TOLEBOOL        __fastcall get_BuiltIn(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* pbstrCaption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Caption(BSTR pbstrCaption/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Control(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Control(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Copy(TVariantInParam Bar/*[in,opt]*/, 
                                             TVariantInParam Before/*[in,opt]*/, 
                                             Office_2k::CommandBarControlPtr* ppcbc/*[out,retval]*/);
  Office_2k::CommandBarControlPtr __fastcall Copy(TVariantInParam Bar/*[in,opt]*/= TNoParam(), 
                                                  TVariantInParam Before/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(TVariantInParam Temporary/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DescriptionText(BSTR* pbstrText/*[out,retval]*/);
  BSTR            __fastcall get_DescriptionText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DescriptionText(BSTR pbstrText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(TOLEBOOL* pvarfEnabled/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(TOLEBOOL pvarfEnabled/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Execute();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(int* pdy/*[out,retval]*/);
  int             __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(int pdy/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpContextId(int* pid/*[out,retval]*/);
  int             __fastcall get_HelpContextId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpContextId(int pid/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpFile(BSTR* pbstrFilename/*[out,retval]*/);
  BSTR            __fastcall get_HelpFile(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpFile(BSTR pbstrFilename/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Id(int* pid/*[out,retval]*/);
  int             __fastcall get_Id(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Index(int* pi/*[out,retval]*/);
  int             __fastcall get_Index(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InstanceId(long* pid/*[out,retval]*/);
  long            __fastcall get_InstanceId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Move(TVariantInParam Bar/*[in,opt]*/, 
                                             TVariantInParam Before/*[in,opt]*/, 
                                             Office_2k::CommandBarControlPtr* ppcbc/*[out,retval]*/);
  Office_2k::CommandBarControlPtr __fastcall Move(TVariantInParam Bar/*[in,opt]*/= TNoParam(), 
                                                  TVariantInParam Before/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(int* px/*[out,retval]*/);
  int             __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OLEUsage(Office_2k::MsoControlOLEUsage* pcou/*[out,retval]*/);
  Office_2k::MsoControlOLEUsage __fastcall get_OLEUsage(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OLEUsage(Office_2k::MsoControlOLEUsage pcou/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnAction(BSTR* pbstrOnAction/*[out,retval]*/);
  BSTR            __fastcall get_OnAction(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnAction(BSTR pbstrOnAction/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Office_2k::CommandBarPtr* ppcb/*[out,retval]*/);
  Office_2k::CommandBarPtr __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parameter(BSTR* pbstrParam/*[out,retval]*/);
  BSTR            __fastcall get_Parameter(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Parameter(BSTR pbstrParam/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Priority(int* pnPri/*[out,retval]*/);
  int             __fastcall get_Priority(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Priority(int pnPri/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reset();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetFocus();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tag(BSTR* pbstrTag/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Tag(BSTR pbstrTag/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TooltipText(BSTR* pbstrTooltip/*[out,retval]*/);
  BSTR            __fastcall get_TooltipText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TooltipText(BSTR pbstrTooltip/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(int* py/*[out,retval]*/);
  int             __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Office_2k::MsoControlType* ptype/*[out,retval]*/);
  Office_2k::MsoControlType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(TOLEBOOL* pvarfVisible/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(TOLEBOOL pvarfVisible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(int* pdx/*[out,retval]*/);
  int             __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(int pdx/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsPriorityDropped(TOLEBOOL* pvarfDropped/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsPriorityDropped(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved1();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved2();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved3();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved4();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved5();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved6();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved7();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accParent(LPDISPATCH* ppdispParent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_accParent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accChildCount(long* pcountChildren/*[out,retval]*/);
  long            __fastcall get_accChildCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accChild(TVariantInParam varChild/*[in]*/, 
                                                     LPDISPATCH* ppdispChild/*[out,retval]*/);
  LPDISPATCH      __fastcall get_accChild(TVariantInParam varChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accName(TVariantInParam varChild/*[in,opt]*/, 
                                                    BSTR* pszName/*[out,retval]*/);
  BSTR            __fastcall get_accName(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accValue(TVariantInParam varChild/*[in,opt]*/, 
                                                     BSTR* pszValue/*[out,retval]*/);
  BSTR            __fastcall get_accValue(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accDescription(TVariantInParam varChild/*[in,opt]*/, 
                                                           BSTR* pszDescription/*[out,retval]*/);
  BSTR            __fastcall get_accDescription(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accRole(TVariantInParam varChild/*[in,opt]*/, 
                                                    TVariant* pvarRole/*[out,retval]*/);
  TVariant        __fastcall get_accRole(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accState(TVariantInParam varChild/*[in,opt]*/, 
                                                     TVariant* pvarState/*[out,retval]*/);
  TVariant        __fastcall get_accState(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accHelp(TVariantInParam varChild/*[in,opt]*/, 
                                                    BSTR* pszHelp/*[out,retval]*/);
  BSTR            __fastcall get_accHelp(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                                         TVariantInParam varChild/*[in,opt]*/, 
                                                         long* pidTopic/*[out,retval]*/);
  long            __fastcall get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                              TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accKeyboardShortcut(TVariantInParam varChild/*[in,opt]*/
                                                                , 
                                                                BSTR* pszKeyboardShortcut/*[out,retval]*/);
  BSTR            __fastcall get_accKeyboardShortcut(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accFocus(TVariant* pvarChild/*[out,retval]*/);
  TVariant        __fastcall get_accFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accSelection(TVariant* pvarChildren/*[out,retval]*/);
  TVariant        __fastcall get_accSelection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accDefaultAction(TVariantInParam varChild/*[in,opt]*/, 
                                                             BSTR* pszDefaultAction/*[out,retval]*/);
  BSTR            __fastcall get_accDefaultAction(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accSelect(long flagsSelect/*[in]*/, 
                                                  TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accLocation(long* pxLeft/*[out]*/, long* pyTop/*[out]*/, 
                                                    long* pcxWidth/*[out]*/, 
                                                    long* pcyHeight/*[out]*/, 
                                                    TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accNavigate(long navDir/*[in]*/, 
                                                    TVariantInParam varStart/*[in,opt]*/, 
                                                    TVariant* pvarEndUpAt/*[out,retval]*/);
  TVariant        __fastcall accNavigate(long navDir/*[in]*/, 
                                         TVariantInParam varStart/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/, 
                                                   TVariant* pvarChild/*[out,retval]*/);
  TVariant        __fastcall accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accDoDefaultAction(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_accName(TVariantInParam varChild/*[in,opt]*/, 
                                                    BSTR pszName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_accValue(TVariantInParam varChild/*[in,opt]*/, 
                                                     BSTR pszValue/*[in]*/);

  __property   Office_2k::CommandBarPtr CommandBar = {read = get_CommandBar};
  __property   Office_2k::CommandBarControlsPtr Controls = {read = get_Controls};
  __property   Office_2k::MsoOLEMenuGroup OLEMenuGroup = {read = get_OLEMenuGroup, write = set_OLEMenuGroup};

  __property   TOLEBOOL        BeginGroup = {read = get_BeginGroup, write = set_BeginGroup};
  __property   TOLEBOOL        BuiltIn = {read = get_BuiltIn};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   LPDISPATCH      Control = {read = get_Control};
  __property   BSTR            DescriptionText = {read = get_DescriptionText, write = set_DescriptionText};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   int             Height = {read = get_Height, write = set_Height};
  __property   int             HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   BSTR            HelpFile = {read = get_HelpFile, write = set_HelpFile};
  __property   int             Id = {read = get_Id};
  __property   int             Index = {read = get_Index};
  __property   long            InstanceId = {read = get_InstanceId};
  __property   int             Left = {read = get_Left};
  __property   Office_2k::MsoControlOLEUsage OLEUsage = {read = get_OLEUsage, write = set_OLEUsage};
  __property   BSTR            OnAction = {read = get_OnAction, write = set_OnAction};
  __property   Office_2k::CommandBarPtr Parent = {read = get_Parent};
  __property   BSTR            Parameter = {read = get_Parameter, write = set_Parameter};
  __property   int             Priority = {read = get_Priority, write = set_Priority};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   BSTR            TooltipText = {read = get_TooltipText, write = set_TooltipText};
  __property   int             Top = {read = get_Top};
  __property   Office_2k::MsoControlType Type = {read = get_Type};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   int             Width = {read = get_Width, write = set_Width};
  __property   TOLEBOOL        IsPriorityDropped = {read = get_IsPriorityDropped};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};

  __property   LPDISPATCH      accParent = {read = get_accParent};
  __property   long            accChildCount = {read = get_accChildCount};
};
typedef CommandBarPopupDispT<CommandBarPopup> CommandBarPopupDisp;

// *********************************************************************//
// SmartIntf: TCOM_CommandBarComboBox
// Interface: _CommandBarComboBox
// *********************************************************************//
template <class T /* _CommandBarComboBox */ >
class TCOM_CommandBarComboBoxT : public TComInterface<_CommandBarComboBox>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CommandBarComboBoxT() {}
  TCOM_CommandBarComboBoxT(_CommandBarComboBox *intf, bool addRef = false) : TComInterface<_CommandBarComboBox>(intf, addRef) {}
  TCOM_CommandBarComboBoxT(const TCOM_CommandBarComboBoxT& src) : TComInterface<_CommandBarComboBox>(src) {}
  TCOM_CommandBarComboBoxT& operator=(const TCOM_CommandBarComboBoxT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall AddItem(BSTR Text/*[in]*/, 
                                     TVariantInParam Index/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall Clear(void);
  HRESULT         __fastcall get_DropDownLines(int* pcLines/*[out,retval]*/);
  int             __fastcall get_DropDownLines(void);
  HRESULT         __fastcall set_DropDownLines(int pcLines/*[in]*/);
  HRESULT         __fastcall get_DropDownWidth(int* pdx/*[out,retval]*/);
  int             __fastcall get_DropDownWidth(void);
  HRESULT         __fastcall set_DropDownWidth(int pdx/*[in]*/);
  HRESULT         __fastcall get_List(int Index/*[in]*/, BSTR* pbstrItem/*[out,retval]*/);
  BSTR            __fastcall get_List(int Index/*[in]*/);
  HRESULT         __fastcall set_List(int Index/*[in]*/, BSTR pbstrItem/*[in]*/);
  HRESULT         __fastcall get_ListCount(int* pcItems/*[out,retval]*/);
  int             __fastcall get_ListCount(void);
  HRESULT         __fastcall get_ListHeaderCount(int* pcItems/*[out,retval]*/);
  int             __fastcall get_ListHeaderCount(void);
  HRESULT         __fastcall set_ListHeaderCount(int pcItems/*[in]*/);
  HRESULT         __fastcall get_ListIndex(int* pi/*[out,retval]*/);
  int             __fastcall get_ListIndex(void);
  HRESULT         __fastcall set_ListIndex(int pi/*[in]*/);
  HRESULT         __fastcall RemoveItem(int Index/*[in]*/);
  HRESULT         __fastcall get_Style(Office_2k::MsoComboStyle* pstyle/*[out,retval]*/);
  Office_2k::MsoComboStyle __fastcall get_Style(void);
  HRESULT         __fastcall set_Style(Office_2k::MsoComboStyle pstyle/*[in]*/);
  HRESULT         __fastcall get_Text(BSTR* pbstrText/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pbstrText/*[in]*/);

  __property   int             DropDownLines = {read = get_DropDownLines, write = set_DropDownLines};
  __property   int             DropDownWidth = {read = get_DropDownWidth, write = set_DropDownWidth};
  __property   int             ListCount = {read = get_ListCount};
  __property   int             ListHeaderCount = {read = get_ListHeaderCount, write = set_ListHeaderCount};
  __property   int             ListIndex = {read = get_ListIndex, write = set_ListIndex};
  __property   Office_2k::MsoComboStyle Style = {read = get_Style, write = set_Style};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
};
typedef TCOM_CommandBarComboBoxT<_CommandBarComboBox> TCOM_CommandBarComboBox;

// *********************************************************************//
// DispIntf:  _CommandBarComboBox
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C030C-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class _CommandBarComboBoxDispT : public TAutoDriver<_CommandBarComboBox>
{
public:
  _CommandBarComboBoxDispT(){}

  _CommandBarComboBoxDispT(_CommandBarComboBox *pintf)
  {
    TAutoDriver<_CommandBarComboBox>::Bind(pintf, false);
  }

  _CommandBarComboBoxDispT(_CommandBarComboBoxPtr pintf)
  {
    TAutoDriver<_CommandBarComboBox>::Bind(pintf, true);
  }

  _CommandBarComboBoxDispT& operator=(_CommandBarComboBox *pintf)
  {
    TAutoDriver<_CommandBarComboBox>::Bind(pintf, false);
    return *this;
  }

  _CommandBarComboBoxDispT& operator=(_CommandBarComboBoxPtr pintf)
  {
    TAutoDriver<_CommandBarComboBox>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CommandBarComboBox));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CommandBarComboBox);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddItem(BSTR Text/*[in]*/, 
                                                TVariantInParam Index/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Clear();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DropDownLines(int* pcLines/*[out,retval]*/);
  int             __fastcall get_DropDownLines(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DropDownLines(int pcLines/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DropDownWidth(int* pdx/*[out,retval]*/);
  int             __fastcall get_DropDownWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DropDownWidth(int pdx/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_List(int Index/*[in]*/, BSTR* pbstrItem/*[out,retval]*/);
  BSTR            __fastcall get_List(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_List(int Index/*[in]*/, BSTR pbstrItem/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ListCount(int* pcItems/*[out,retval]*/);
  int             __fastcall get_ListCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ListHeaderCount(int* pcItems/*[out,retval]*/);
  int             __fastcall get_ListHeaderCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ListHeaderCount(int pcItems/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ListIndex(int* pi/*[out,retval]*/);
  int             __fastcall get_ListIndex(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ListIndex(int pi/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RemoveItem(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Style(Office_2k::MsoComboStyle* pstyle/*[out,retval]*/);
  Office_2k::MsoComboStyle __fastcall get_Style(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Style(Office_2k::MsoComboStyle pstyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Text(BSTR* pbstrText/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Text(BSTR pbstrText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BeginGroup(TOLEBOOL* pvarfBeginGroup/*[out,retval]*/);
  TOLEBOOL        __fastcall get_BeginGroup(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BeginGroup(TOLEBOOL pvarfBeginGroup/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BuiltIn(TOLEBOOL* pvarfBuiltIn/*[out,retval]*/);
  TOLEBOOL        __fastcall get_BuiltIn(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* pbstrCaption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Caption(BSTR pbstrCaption/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Control(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Control(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Copy(TVariantInParam Bar/*[in,opt]*/, 
                                             TVariantInParam Before/*[in,opt]*/, 
                                             Office_2k::CommandBarControlPtr* ppcbc/*[out,retval]*/);
  Office_2k::CommandBarControlPtr __fastcall Copy(TVariantInParam Bar/*[in,opt]*/= TNoParam(), 
                                                  TVariantInParam Before/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(TVariantInParam Temporary/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DescriptionText(BSTR* pbstrText/*[out,retval]*/);
  BSTR            __fastcall get_DescriptionText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DescriptionText(BSTR pbstrText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(TOLEBOOL* pvarfEnabled/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(TOLEBOOL pvarfEnabled/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Execute();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(int* pdy/*[out,retval]*/);
  int             __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(int pdy/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpContextId(int* pid/*[out,retval]*/);
  int             __fastcall get_HelpContextId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpContextId(int pid/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpFile(BSTR* pbstrFilename/*[out,retval]*/);
  BSTR            __fastcall get_HelpFile(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpFile(BSTR pbstrFilename/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Id(int* pid/*[out,retval]*/);
  int             __fastcall get_Id(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Index(int* pi/*[out,retval]*/);
  int             __fastcall get_Index(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InstanceId(long* pid/*[out,retval]*/);
  long            __fastcall get_InstanceId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Move(TVariantInParam Bar/*[in,opt]*/, 
                                             TVariantInParam Before/*[in,opt]*/, 
                                             Office_2k::CommandBarControlPtr* ppcbc/*[out,retval]*/);
  Office_2k::CommandBarControlPtr __fastcall Move(TVariantInParam Bar/*[in,opt]*/= TNoParam(), 
                                                  TVariantInParam Before/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(int* px/*[out,retval]*/);
  int             __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OLEUsage(Office_2k::MsoControlOLEUsage* pcou/*[out,retval]*/);
  Office_2k::MsoControlOLEUsage __fastcall get_OLEUsage(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OLEUsage(Office_2k::MsoControlOLEUsage pcou/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnAction(BSTR* pbstrOnAction/*[out,retval]*/);
  BSTR            __fastcall get_OnAction(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnAction(BSTR pbstrOnAction/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Office_2k::CommandBarPtr* ppcb/*[out,retval]*/);
  Office_2k::CommandBarPtr __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parameter(BSTR* pbstrParam/*[out,retval]*/);
  BSTR            __fastcall get_Parameter(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Parameter(BSTR pbstrParam/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Priority(int* pnPri/*[out,retval]*/);
  int             __fastcall get_Priority(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Priority(int pnPri/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reset();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetFocus();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tag(BSTR* pbstrTag/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Tag(BSTR pbstrTag/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TooltipText(BSTR* pbstrTooltip/*[out,retval]*/);
  BSTR            __fastcall get_TooltipText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TooltipText(BSTR pbstrTooltip/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(int* py/*[out,retval]*/);
  int             __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Office_2k::MsoControlType* ptype/*[out,retval]*/);
  Office_2k::MsoControlType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(TOLEBOOL* pvarfVisible/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(TOLEBOOL pvarfVisible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(int* pdx/*[out,retval]*/);
  int             __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(int pdx/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsPriorityDropped(TOLEBOOL* pvarfDropped/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsPriorityDropped(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved1();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved2();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved3();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved4();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved5();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved6();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved7();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accParent(LPDISPATCH* ppdispParent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_accParent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accChildCount(long* pcountChildren/*[out,retval]*/);
  long            __fastcall get_accChildCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accChild(TVariantInParam varChild/*[in]*/, 
                                                     LPDISPATCH* ppdispChild/*[out,retval]*/);
  LPDISPATCH      __fastcall get_accChild(TVariantInParam varChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accName(TVariantInParam varChild/*[in,opt]*/, 
                                                    BSTR* pszName/*[out,retval]*/);
  BSTR            __fastcall get_accName(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accValue(TVariantInParam varChild/*[in,opt]*/, 
                                                     BSTR* pszValue/*[out,retval]*/);
  BSTR            __fastcall get_accValue(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accDescription(TVariantInParam varChild/*[in,opt]*/, 
                                                           BSTR* pszDescription/*[out,retval]*/);
  BSTR            __fastcall get_accDescription(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accRole(TVariantInParam varChild/*[in,opt]*/, 
                                                    TVariant* pvarRole/*[out,retval]*/);
  TVariant        __fastcall get_accRole(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accState(TVariantInParam varChild/*[in,opt]*/, 
                                                     TVariant* pvarState/*[out,retval]*/);
  TVariant        __fastcall get_accState(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accHelp(TVariantInParam varChild/*[in,opt]*/, 
                                                    BSTR* pszHelp/*[out,retval]*/);
  BSTR            __fastcall get_accHelp(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                                         TVariantInParam varChild/*[in,opt]*/, 
                                                         long* pidTopic/*[out,retval]*/);
  long            __fastcall get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                              TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accKeyboardShortcut(TVariantInParam varChild/*[in,opt]*/
                                                                , 
                                                                BSTR* pszKeyboardShortcut/*[out,retval]*/);
  BSTR            __fastcall get_accKeyboardShortcut(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accFocus(TVariant* pvarChild/*[out,retval]*/);
  TVariant        __fastcall get_accFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accSelection(TVariant* pvarChildren/*[out,retval]*/);
  TVariant        __fastcall get_accSelection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accDefaultAction(TVariantInParam varChild/*[in,opt]*/, 
                                                             BSTR* pszDefaultAction/*[out,retval]*/);
  BSTR            __fastcall get_accDefaultAction(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accSelect(long flagsSelect/*[in]*/, 
                                                  TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accLocation(long* pxLeft/*[out]*/, long* pyTop/*[out]*/, 
                                                    long* pcxWidth/*[out]*/, 
                                                    long* pcyHeight/*[out]*/, 
                                                    TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accNavigate(long navDir/*[in]*/, 
                                                    TVariantInParam varStart/*[in,opt]*/, 
                                                    TVariant* pvarEndUpAt/*[out,retval]*/);
  TVariant        __fastcall accNavigate(long navDir/*[in]*/, 
                                         TVariantInParam varStart/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/, 
                                                   TVariant* pvarChild/*[out,retval]*/);
  TVariant        __fastcall accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accDoDefaultAction(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_accName(TVariantInParam varChild/*[in,opt]*/, 
                                                    BSTR pszName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_accValue(TVariantInParam varChild/*[in,opt]*/, 
                                                     BSTR pszValue/*[in]*/);

  __property   int             DropDownLines = {read = get_DropDownLines, write = set_DropDownLines};
  __property   int             DropDownWidth = {read = get_DropDownWidth, write = set_DropDownWidth};
  __property   int             ListCount = {read = get_ListCount};
  __property   int             ListHeaderCount = {read = get_ListHeaderCount, write = set_ListHeaderCount};
  __property   int             ListIndex = {read = get_ListIndex, write = set_ListIndex};
  __property   Office_2k::MsoComboStyle Style = {read = get_Style, write = set_Style};
  __property   BSTR            Text = {read = get_Text, write = set_Text};

  __property   TOLEBOOL        BeginGroup = {read = get_BeginGroup, write = set_BeginGroup};
  __property   TOLEBOOL        BuiltIn = {read = get_BuiltIn};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   LPDISPATCH      Control = {read = get_Control};
  __property   BSTR            DescriptionText = {read = get_DescriptionText, write = set_DescriptionText};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   int             Height = {read = get_Height, write = set_Height};
  __property   int             HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   BSTR            HelpFile = {read = get_HelpFile, write = set_HelpFile};
  __property   int             Id = {read = get_Id};
  __property   int             Index = {read = get_Index};
  __property   long            InstanceId = {read = get_InstanceId};
  __property   int             Left = {read = get_Left};
  __property   Office_2k::MsoControlOLEUsage OLEUsage = {read = get_OLEUsage, write = set_OLEUsage};
  __property   BSTR            OnAction = {read = get_OnAction, write = set_OnAction};
  __property   Office_2k::CommandBarPtr Parent = {read = get_Parent};
  __property   BSTR            Parameter = {read = get_Parameter, write = set_Parameter};
  __property   int             Priority = {read = get_Priority, write = set_Priority};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   BSTR            TooltipText = {read = get_TooltipText, write = set_TooltipText};
  __property   int             Top = {read = get_Top};
  __property   Office_2k::MsoControlType Type = {read = get_Type};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   int             Width = {read = get_Width, write = set_Width};
  __property   TOLEBOOL        IsPriorityDropped = {read = get_IsPriorityDropped};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};

  __property   LPDISPATCH      accParent = {read = get_accParent};
  __property   long            accChildCount = {read = get_accChildCount};
};
typedef _CommandBarComboBoxDispT<_CommandBarComboBox> _CommandBarComboBoxDisp;

typedef TComInterface<_CommandBarActiveX>  TCOM_CommandBarActiveX;

// *********************************************************************//
// DispIntf:  _CommandBarActiveX
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C030D-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class _CommandBarActiveXDispT : public TAutoDriver<_CommandBarActiveX>
{
public:
  _CommandBarActiveXDispT(){}

  _CommandBarActiveXDispT(_CommandBarActiveX *pintf)
  {
    TAutoDriver<_CommandBarActiveX>::Bind(pintf, false);
  }

  _CommandBarActiveXDispT(_CommandBarActiveXPtr pintf)
  {
    TAutoDriver<_CommandBarActiveX>::Bind(pintf, true);
  }

  _CommandBarActiveXDispT& operator=(_CommandBarActiveX *pintf)
  {
    TAutoDriver<_CommandBarActiveX>::Bind(pintf, false);
    return *this;
  }

  _CommandBarActiveXDispT& operator=(_CommandBarActiveXPtr pintf)
  {
    TAutoDriver<_CommandBarActiveX>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlCLSID(BSTR* pbstrClsid/*[out,retval]*/);
  BSTR            __fastcall get_ControlCLSID(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlCLSID(BSTR pbstrClsid/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_QueryControlInterface(BSTR bstrIid/*[in]*/, 
                                                                  LPUNKNOWN* ppUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get_QueryControlInterface(BSTR bstrIid/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetInnerObjectFactory(LPUNKNOWN pUnk/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall EnsureControl();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_InitWith(LPUNKNOWN Param1/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BeginGroup(TOLEBOOL* pvarfBeginGroup/*[out,retval]*/);
  TOLEBOOL        __fastcall get_BeginGroup(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BeginGroup(TOLEBOOL pvarfBeginGroup/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BuiltIn(TOLEBOOL* pvarfBuiltIn/*[out,retval]*/);
  TOLEBOOL        __fastcall get_BuiltIn(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* pbstrCaption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Caption(BSTR pbstrCaption/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Control(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Control(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Copy(TVariantInParam Bar/*[in,opt]*/, 
                                             TVariantInParam Before/*[in,opt]*/, 
                                             Office_2k::CommandBarControlPtr* ppcbc/*[out,retval]*/);
  Office_2k::CommandBarControlPtr __fastcall Copy(TVariantInParam Bar/*[in,opt]*/= TNoParam(), 
                                                  TVariantInParam Before/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(TVariantInParam Temporary/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DescriptionText(BSTR* pbstrText/*[out,retval]*/);
  BSTR            __fastcall get_DescriptionText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DescriptionText(BSTR pbstrText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(TOLEBOOL* pvarfEnabled/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(TOLEBOOL pvarfEnabled/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Execute();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(int* pdy/*[out,retval]*/);
  int             __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(int pdy/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpContextId(int* pid/*[out,retval]*/);
  int             __fastcall get_HelpContextId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpContextId(int pid/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpFile(BSTR* pbstrFilename/*[out,retval]*/);
  BSTR            __fastcall get_HelpFile(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpFile(BSTR pbstrFilename/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Id(int* pid/*[out,retval]*/);
  int             __fastcall get_Id(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Index(int* pi/*[out,retval]*/);
  int             __fastcall get_Index(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InstanceId(long* pid/*[out,retval]*/);
  long            __fastcall get_InstanceId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Move(TVariantInParam Bar/*[in,opt]*/, 
                                             TVariantInParam Before/*[in,opt]*/, 
                                             Office_2k::CommandBarControlPtr* ppcbc/*[out,retval]*/);
  Office_2k::CommandBarControlPtr __fastcall Move(TVariantInParam Bar/*[in,opt]*/= TNoParam(), 
                                                  TVariantInParam Before/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(int* px/*[out,retval]*/);
  int             __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OLEUsage(Office_2k::MsoControlOLEUsage* pcou/*[out,retval]*/);
  Office_2k::MsoControlOLEUsage __fastcall get_OLEUsage(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OLEUsage(Office_2k::MsoControlOLEUsage pcou/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnAction(BSTR* pbstrOnAction/*[out,retval]*/);
  BSTR            __fastcall get_OnAction(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnAction(BSTR pbstrOnAction/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Office_2k::CommandBarPtr* ppcb/*[out,retval]*/);
  Office_2k::CommandBarPtr __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parameter(BSTR* pbstrParam/*[out,retval]*/);
  BSTR            __fastcall get_Parameter(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Parameter(BSTR pbstrParam/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Priority(int* pnPri/*[out,retval]*/);
  int             __fastcall get_Priority(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Priority(int pnPri/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reset();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetFocus();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tag(BSTR* pbstrTag/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Tag(BSTR pbstrTag/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TooltipText(BSTR* pbstrTooltip/*[out,retval]*/);
  BSTR            __fastcall get_TooltipText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TooltipText(BSTR pbstrTooltip/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(int* py/*[out,retval]*/);
  int             __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Office_2k::MsoControlType* ptype/*[out,retval]*/);
  Office_2k::MsoControlType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(TOLEBOOL* pvarfVisible/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(TOLEBOOL pvarfVisible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(int* pdx/*[out,retval]*/);
  int             __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(int pdx/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsPriorityDropped(TOLEBOOL* pvarfDropped/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsPriorityDropped(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved1();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved2();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved3();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved4();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved5();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved6();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved7();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accParent(LPDISPATCH* ppdispParent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_accParent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accChildCount(long* pcountChildren/*[out,retval]*/);
  long            __fastcall get_accChildCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accChild(TVariantInParam varChild/*[in]*/, 
                                                     LPDISPATCH* ppdispChild/*[out,retval]*/);
  LPDISPATCH      __fastcall get_accChild(TVariantInParam varChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accName(TVariantInParam varChild/*[in,opt]*/, 
                                                    BSTR* pszName/*[out,retval]*/);
  BSTR            __fastcall get_accName(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accValue(TVariantInParam varChild/*[in,opt]*/, 
                                                     BSTR* pszValue/*[out,retval]*/);
  BSTR            __fastcall get_accValue(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accDescription(TVariantInParam varChild/*[in,opt]*/, 
                                                           BSTR* pszDescription/*[out,retval]*/);
  BSTR            __fastcall get_accDescription(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accRole(TVariantInParam varChild/*[in,opt]*/, 
                                                    TVariant* pvarRole/*[out,retval]*/);
  TVariant        __fastcall get_accRole(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accState(TVariantInParam varChild/*[in,opt]*/, 
                                                     TVariant* pvarState/*[out,retval]*/);
  TVariant        __fastcall get_accState(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accHelp(TVariantInParam varChild/*[in,opt]*/, 
                                                    BSTR* pszHelp/*[out,retval]*/);
  BSTR            __fastcall get_accHelp(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                                         TVariantInParam varChild/*[in,opt]*/, 
                                                         long* pidTopic/*[out,retval]*/);
  long            __fastcall get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                              TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accKeyboardShortcut(TVariantInParam varChild/*[in,opt]*/
                                                                , 
                                                                BSTR* pszKeyboardShortcut/*[out,retval]*/);
  BSTR            __fastcall get_accKeyboardShortcut(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accFocus(TVariant* pvarChild/*[out,retval]*/);
  TVariant        __fastcall get_accFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accSelection(TVariant* pvarChildren/*[out,retval]*/);
  TVariant        __fastcall get_accSelection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accDefaultAction(TVariantInParam varChild/*[in,opt]*/, 
                                                             BSTR* pszDefaultAction/*[out,retval]*/);
  BSTR            __fastcall get_accDefaultAction(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accSelect(long flagsSelect/*[in]*/, 
                                                  TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accLocation(long* pxLeft/*[out]*/, long* pyTop/*[out]*/, 
                                                    long* pcxWidth/*[out]*/, 
                                                    long* pcyHeight/*[out]*/, 
                                                    TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accNavigate(long navDir/*[in]*/, 
                                                    TVariantInParam varStart/*[in,opt]*/, 
                                                    TVariant* pvarEndUpAt/*[out,retval]*/);
  TVariant        __fastcall accNavigate(long navDir/*[in]*/, 
                                         TVariantInParam varStart/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/, 
                                                   TVariant* pvarChild/*[out,retval]*/);
  TVariant        __fastcall accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accDoDefaultAction(TVariantInParam varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_accName(TVariantInParam varChild/*[in,opt]*/, 
                                                    BSTR pszName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_accValue(TVariantInParam varChild/*[in,opt]*/, 
                                                     BSTR pszValue/*[in]*/);

  __property   BSTR            ControlCLSID = {read = get_ControlCLSID, write = set_ControlCLSID};
  __property   LPUNKNOWN       InitWith = {write = set_InitWith};

  __property   TOLEBOOL        BeginGroup = {read = get_BeginGroup, write = set_BeginGroup};
  __property   TOLEBOOL        BuiltIn = {read = get_BuiltIn};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   LPDISPATCH      Control = {read = get_Control};
  __property   BSTR            DescriptionText = {read = get_DescriptionText, write = set_DescriptionText};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   int             Height = {read = get_Height, write = set_Height};
  __property   int             HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   BSTR            HelpFile = {read = get_HelpFile, write = set_HelpFile};
  __property   int             Id = {read = get_Id};
  __property   int             Index = {read = get_Index};
  __property   long            InstanceId = {read = get_InstanceId};
  __property   int             Left = {read = get_Left};
  __property   Office_2k::MsoControlOLEUsage OLEUsage = {read = get_OLEUsage, write = set_OLEUsage};
  __property   BSTR            OnAction = {read = get_OnAction, write = set_OnAction};
  __property   Office_2k::CommandBarPtr Parent = {read = get_Parent};
  __property   BSTR            Parameter = {read = get_Parameter, write = set_Parameter};
  __property   int             Priority = {read = get_Priority, write = set_Priority};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   BSTR            TooltipText = {read = get_TooltipText, write = set_TooltipText};
  __property   int             Top = {read = get_Top};
  __property   Office_2k::MsoControlType Type = {read = get_Type};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   int             Width = {read = get_Width, write = set_Width};
  __property   TOLEBOOL        IsPriorityDropped = {read = get_IsPriorityDropped};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};

  __property   LPDISPATCH      accParent = {read = get_accParent};
  __property   long            accChildCount = {read = get_accChildCount};
};
typedef _CommandBarActiveXDispT<_CommandBarActiveX> _CommandBarActiveXDisp;

typedef TComInterface<Adjustments>  TCOMAdjustments;

// *********************************************************************//
// DispIntf:  Adjustments
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0310-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class AdjustmentsDispT : public TAutoDriver<Adjustments>
{
public:
  AdjustmentsDispT(){}

  AdjustmentsDispT(Adjustments *pintf)
  {
    TAutoDriver<Adjustments>::Bind(pintf, false);
  }

  AdjustmentsDispT(AdjustmentsPtr pintf)
  {
    TAutoDriver<Adjustments>::Bind(pintf, true);
  }

  AdjustmentsDispT& operator=(Adjustments *pintf)
  {
    TAutoDriver<Adjustments>::Bind(pintf, false);
    return *this;
  }

  AdjustmentsDispT& operator=(AdjustmentsPtr pintf)
  {
    TAutoDriver<Adjustments>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(int* Count/*[out,retval]*/);
  int             __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(int Index/*[in]*/, float* Val/*[out,retval]*/);
  float           __fastcall get_Item(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Item(int Index/*[in]*/, float Val/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef AdjustmentsDispT<Adjustments> AdjustmentsDisp;

typedef TComInterface<CalloutFormat>  TCOMCalloutFormat;

// *********************************************************************//
// DispIntf:  CalloutFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0311-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class CalloutFormatDispT : public TAutoDriver<CalloutFormat>
{
public:
  CalloutFormatDispT(){}

  CalloutFormatDispT(CalloutFormat *pintf)
  {
    TAutoDriver<CalloutFormat>::Bind(pintf, false);
  }

  CalloutFormatDispT(CalloutFormatPtr pintf)
  {
    TAutoDriver<CalloutFormat>::Bind(pintf, true);
  }

  CalloutFormatDispT& operator=(CalloutFormat *pintf)
  {
    TAutoDriver<CalloutFormat>::Bind(pintf, false);
    return *this;
  }

  CalloutFormatDispT& operator=(CalloutFormatPtr pintf)
  {
    TAutoDriver<CalloutFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AutomaticLength();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CustomDrop(float Drop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CustomLength(float Length/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PresetDrop(Office_2k::MsoCalloutDropType DropType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Accent(Office_2k::MsoTriState* Accent/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Accent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Accent(Office_2k::MsoTriState Accent/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Angle(Office_2k::MsoCalloutAngleType* Angle/*[out,retval]*/);
  Office_2k::MsoCalloutAngleType __fastcall get_Angle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Angle(Office_2k::MsoCalloutAngleType Angle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoAttach(Office_2k::MsoTriState* AutoAttach/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_AutoAttach(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoAttach(Office_2k::MsoTriState AutoAttach/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoLength(Office_2k::MsoTriState* AutoLength/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_AutoLength(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Border(Office_2k::MsoTriState* Border/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Border(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Border(Office_2k::MsoTriState Border/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Drop(float* Drop/*[out,retval]*/);
  float           __fastcall get_Drop(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DropType(Office_2k::MsoCalloutDropType* DropType/*[out,retval]*/);
  Office_2k::MsoCalloutDropType __fastcall get_DropType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Gap(float* Gap/*[out,retval]*/);
  float           __fastcall get_Gap(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Gap(float Gap/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Length(float* Length/*[out,retval]*/);
  float           __fastcall get_Length(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Office_2k::MsoCalloutType* Type/*[out,retval]*/);
  Office_2k::MsoCalloutType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Type(Office_2k::MsoCalloutType Type/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoTriState Accent = {read = get_Accent, write = set_Accent};
  __property   Office_2k::MsoCalloutAngleType Angle = {read = get_Angle, write = set_Angle};
  __property   Office_2k::MsoTriState AutoAttach = {read = get_AutoAttach, write = set_AutoAttach};
  __property   Office_2k::MsoTriState AutoLength = {read = get_AutoLength};
  __property   Office_2k::MsoTriState Border = {read = get_Border, write = set_Border};
  __property   float           Drop = {read = get_Drop};
  __property   Office_2k::MsoCalloutDropType DropType = {read = get_DropType};
  __property   float           Gap = {read = get_Gap, write = set_Gap};
  __property   float           Length = {read = get_Length};
  __property   Office_2k::MsoCalloutType Type = {read = get_Type, write = set_Type};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef CalloutFormatDispT<CalloutFormat> CalloutFormatDisp;

typedef TComInterface<ColorFormat>  TCOMColorFormat;

// *********************************************************************//
// DispIntf:  ColorFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0312-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class ColorFormatDispT : public TAutoDriver<ColorFormat>
{
public:
  ColorFormatDispT(){}

  ColorFormatDispT(ColorFormat *pintf)
  {
    TAutoDriver<ColorFormat>::Bind(pintf, false);
  }

  ColorFormatDispT(ColorFormatPtr pintf)
  {
    TAutoDriver<ColorFormat>::Bind(pintf, true);
  }

  ColorFormatDispT& operator=(ColorFormat *pintf)
  {
    TAutoDriver<ColorFormat>::Bind(pintf, false);
    return *this;
  }

  ColorFormatDispT& operator=(ColorFormatPtr pintf)
  {
    TAutoDriver<ColorFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_rgb(Office_2k::MsoRGBType* rgb/*[out,retval]*/);
  Office_2k::MsoRGBType __fastcall get_rgb(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_rgb(Office_2k::MsoRGBType rgb/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SchemeColor(int* SchemeColor/*[out,retval]*/);
  int             __fastcall get_SchemeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SchemeColor(int SchemeColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Office_2k::MsoColorType* Type/*[out,retval]*/);
  Office_2k::MsoColorType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoRGBType rgb = {read = get_rgb, write = set_rgb};
  __property   int             SchemeColor = {read = get_SchemeColor, write = set_SchemeColor};
  __property   Office_2k::MsoColorType Type = {read = get_Type};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef ColorFormatDispT<ColorFormat> ColorFormatDisp;

typedef TComInterface<ConnectorFormat>  TCOMConnectorFormat;

// *********************************************************************//
// DispIntf:  ConnectorFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0313-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class ConnectorFormatDispT : public TAutoDriver<ConnectorFormat>
{
public:
  ConnectorFormatDispT(){}

  ConnectorFormatDispT(ConnectorFormat *pintf)
  {
    TAutoDriver<ConnectorFormat>::Bind(pintf, false);
  }

  ConnectorFormatDispT(ConnectorFormatPtr pintf)
  {
    TAutoDriver<ConnectorFormat>::Bind(pintf, true);
  }

  ConnectorFormatDispT& operator=(ConnectorFormat *pintf)
  {
    TAutoDriver<ConnectorFormat>::Bind(pintf, false);
    return *this;
  }

  ConnectorFormatDispT& operator=(ConnectorFormatPtr pintf)
  {
    TAutoDriver<ConnectorFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall BeginConnect(Office_2k::ShapePtr ConnectedShape/*[in]*/, 
                                                     int ConnectionSite/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall BeginDisconnect();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall EndConnect(Office_2k::ShapePtr ConnectedShape/*[in]*/, 
                                                   int ConnectionSite/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall EndDisconnect();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BeginConnected(Office_2k::MsoTriState* BeginConnected/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_BeginConnected(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BeginConnectedShape(Office_2k::ShapePtr* BeginConnectedShape/*[out,retval]*/);
  Office_2k::ShapePtr __fastcall get_BeginConnectedShape(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BeginConnectionSite(int* BeginConnectionSite/*[out,retval]*/);
  int             __fastcall get_BeginConnectionSite(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EndConnected(Office_2k::MsoTriState* EndConnected/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_EndConnected(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EndConnectedShape(Office_2k::ShapePtr* EndConnectedShape/*[out,retval]*/);
  Office_2k::ShapePtr __fastcall get_EndConnectedShape(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EndConnectionSite(int* EndConnectionSite/*[out,retval]*/);
  int             __fastcall get_EndConnectionSite(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Office_2k::MsoConnectorType* Type/*[out,retval]*/);
  Office_2k::MsoConnectorType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Type(Office_2k::MsoConnectorType Type/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoTriState BeginConnected = {read = get_BeginConnected};
  __property   Office_2k::ShapePtr BeginConnectedShape = {read = get_BeginConnectedShape};
  __property   int             BeginConnectionSite = {read = get_BeginConnectionSite};
  __property   Office_2k::MsoTriState EndConnected = {read = get_EndConnected};
  __property   Office_2k::ShapePtr EndConnectedShape = {read = get_EndConnectedShape};
  __property   int             EndConnectionSite = {read = get_EndConnectionSite};
  __property   Office_2k::MsoConnectorType Type = {read = get_Type, write = set_Type};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef ConnectorFormatDispT<ConnectorFormat> ConnectorFormatDisp;

typedef TComInterface<FillFormat>  TCOMFillFormat;

// *********************************************************************//
// DispIntf:  FillFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0314-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class FillFormatDispT : public TAutoDriver<FillFormat>
{
public:
  FillFormatDispT(){}

  FillFormatDispT(FillFormat *pintf)
  {
    TAutoDriver<FillFormat>::Bind(pintf, false);
  }

  FillFormatDispT(FillFormatPtr pintf)
  {
    TAutoDriver<FillFormat>::Bind(pintf, true);
  }

  FillFormatDispT& operator=(FillFormat *pintf)
  {
    TAutoDriver<FillFormat>::Bind(pintf, false);
    return *this;
  }

  FillFormatDispT& operator=(FillFormatPtr pintf)
  {
    TAutoDriver<FillFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Background();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall OneColorGradient(Office_2k::MsoGradientStyle Style/*[in]*/, 
                                                         int Variant/*[in]*/, float Degree/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Patterned(Office_2k::MsoPatternType Pattern/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PresetGradient(Office_2k::MsoGradientStyle Style/*[in]*/, 
                                                       int Variant/*[in]*/, 
                                                       Office_2k::MsoPresetGradientType PresetGradientType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PresetTextured(Office_2k::MsoPresetTexture PresetTexture/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Solid();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall TwoColorGradient(Office_2k::MsoGradientStyle Style/*[in]*/, 
                                                         int Variant/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall UserPicture(BSTR PictureFile/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall UserTextured(BSTR TextureFile/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackColor(Office_2k::ColorFormatPtr* BackColor/*[out,retval]*/);
  Office_2k::ColorFormatPtr __fastcall get_BackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackColor(Office_2k::ColorFormatPtr BackColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ForeColor(Office_2k::ColorFormatPtr* ForeColor/*[out,retval]*/);
  Office_2k::ColorFormatPtr __fastcall get_ForeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ForeColor(Office_2k::ColorFormatPtr ForeColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GradientColorType(Office_2k::MsoGradientColorType* GradientColorType/*[out,retval]*/);
  Office_2k::MsoGradientColorType __fastcall get_GradientColorType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GradientDegree(float* GradientDegree/*[out,retval]*/);
  float           __fastcall get_GradientDegree(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GradientStyle(Office_2k::MsoGradientStyle* GradientStyle/*[out,retval]*/);
  Office_2k::MsoGradientStyle __fastcall get_GradientStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GradientVariant(int* GradientVariant/*[out,retval]*/);
  int             __fastcall get_GradientVariant(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Pattern(Office_2k::MsoPatternType* Pattern/*[out,retval]*/);
  Office_2k::MsoPatternType __fastcall get_Pattern(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PresetGradientType(Office_2k::MsoPresetGradientType* PresetGradientType/*[out,retval]*/);
  Office_2k::MsoPresetGradientType __fastcall get_PresetGradientType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PresetTexture(Office_2k::MsoPresetTexture* PresetTexture/*[out,retval]*/);
  Office_2k::MsoPresetTexture __fastcall get_PresetTexture(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextureName(BSTR* TextureName/*[out,retval]*/);
  BSTR            __fastcall get_TextureName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextureType(Office_2k::MsoTextureType* TextureType/*[out,retval]*/);
  Office_2k::MsoTextureType __fastcall get_TextureType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Transparency(float* Transparency/*[out,retval]*/);
  float           __fastcall get_Transparency(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Transparency(float Transparency/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Office_2k::MsoFillType* Type/*[out,retval]*/);
  Office_2k::MsoFillType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_2k::MsoTriState Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::ColorFormatPtr BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Office_2k::ColorFormatPtr ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   Office_2k::MsoGradientColorType GradientColorType = {read = get_GradientColorType};
  __property   float           GradientDegree = {read = get_GradientDegree};
  __property   Office_2k::MsoGradientStyle GradientStyle = {read = get_GradientStyle};
  __property   int             GradientVariant = {read = get_GradientVariant};
  __property   Office_2k::MsoPatternType Pattern = {read = get_Pattern};
  __property   Office_2k::MsoPresetGradientType PresetGradientType = {read = get_PresetGradientType};
  __property   Office_2k::MsoPresetTexture PresetTexture = {read = get_PresetTexture};
  __property   BSTR            TextureName = {read = get_TextureName};
  __property   Office_2k::MsoTextureType TextureType = {read = get_TextureType};
  __property   float           Transparency = {read = get_Transparency, write = set_Transparency};
  __property   Office_2k::MsoFillType Type = {read = get_Type};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef FillFormatDispT<FillFormat> FillFormatDisp;

typedef TComInterface<FreeformBuilder>  TCOMFreeformBuilder;

// *********************************************************************//
// DispIntf:  FreeformBuilder
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0315-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class FreeformBuilderDispT : public TAutoDriver<FreeformBuilder>
{
public:
  FreeformBuilderDispT(){}

  FreeformBuilderDispT(FreeformBuilder *pintf)
  {
    TAutoDriver<FreeformBuilder>::Bind(pintf, false);
  }

  FreeformBuilderDispT(FreeformBuilderPtr pintf)
  {
    TAutoDriver<FreeformBuilder>::Bind(pintf, true);
  }

  FreeformBuilderDispT& operator=(FreeformBuilder *pintf)
  {
    TAutoDriver<FreeformBuilder>::Bind(pintf, false);
    return *this;
  }

  FreeformBuilderDispT& operator=(FreeformBuilderPtr pintf)
  {
    TAutoDriver<FreeformBuilder>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddNodes(Office_2k::MsoSegmentType SegmentType/*[in]*/, 
                                                 Office_2k::MsoEditingType EditingType/*[in]*/, 
                                                 float X1/*[in]*/, float Y1/*[in]*/, 
                                                 float X2/*[in,def,opt]*/, float Y2/*[in,def,opt]*/
                                                 , float X3/*[in,def,opt]*/, 
                                                 float Y3/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ConvertToShape(Office_2k::ShapePtr* Freeform/*[out,retval]*/);
  Office_2k::ShapePtr __fastcall ConvertToShape(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef FreeformBuilderDispT<FreeformBuilder> FreeformBuilderDisp;

typedef TComInterface<GroupShapes>  TCOMGroupShapes;

// *********************************************************************//
// DispIntf:  GroupShapes
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0316-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class GroupShapesDispT : public TAutoDriver<GroupShapes>
{
public:
  GroupShapesDispT(){}

  GroupShapesDispT(GroupShapes *pintf)
  {
    TAutoDriver<GroupShapes>::Bind(pintf, false);
  }

  GroupShapesDispT(GroupShapesPtr pintf)
  {
    TAutoDriver<GroupShapes>::Bind(pintf, true);
  }

  GroupShapesDispT& operator=(GroupShapes *pintf)
  {
    TAutoDriver<GroupShapes>::Bind(pintf, false);
    return *this;
  }

  GroupShapesDispT& operator=(GroupShapesPtr pintf)
  {
    TAutoDriver<GroupShapes>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(int* pnShapes/*[out,retval]*/);
  int             __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(TVariantInParam Index/*[in]*/, 
                                             Office_2k::ShapePtr* Item/*[out,retval]*/);
  Office_2k::ShapePtr __fastcall Item(TVariantInParam Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppienum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef GroupShapesDispT<GroupShapes> GroupShapesDisp;

typedef TComInterface<LineFormat>  TCOMLineFormat;

// *********************************************************************//
// DispIntf:  LineFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0317-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class LineFormatDispT : public TAutoDriver<LineFormat>
{
public:
  LineFormatDispT(){}

  LineFormatDispT(LineFormat *pintf)
  {
    TAutoDriver<LineFormat>::Bind(pintf, false);
  }

  LineFormatDispT(LineFormatPtr pintf)
  {
    TAutoDriver<LineFormat>::Bind(pintf, true);
  }

  LineFormatDispT& operator=(LineFormat *pintf)
  {
    TAutoDriver<LineFormat>::Bind(pintf, false);
    return *this;
  }

  LineFormatDispT& operator=(LineFormatPtr pintf)
  {
    TAutoDriver<LineFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackColor(Office_2k::ColorFormatPtr* BackColor/*[out,retval]*/);
  Office_2k::ColorFormatPtr __fastcall get_BackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackColor(Office_2k::ColorFormatPtr BackColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BeginArrowheadLength(Office_2k::MsoArrowheadLength* BeginArrowheadLength/*[out,retval]*/);
  Office_2k::MsoArrowheadLength __fastcall get_BeginArrowheadLength(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BeginArrowheadLength(Office_2k::MsoArrowheadLength BeginArrowheadLength/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BeginArrowheadStyle(Office_2k::MsoArrowheadStyle* BeginArrowheadStyle/*[out,retval]*/);
  Office_2k::MsoArrowheadStyle __fastcall get_BeginArrowheadStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BeginArrowheadStyle(Office_2k::MsoArrowheadStyle BeginArrowheadStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BeginArrowheadWidth(Office_2k::MsoArrowheadWidth* BeginArrowheadWidth/*[out,retval]*/);
  Office_2k::MsoArrowheadWidth __fastcall get_BeginArrowheadWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BeginArrowheadWidth(Office_2k::MsoArrowheadWidth BeginArrowheadWidth/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DashStyle(Office_2k::MsoLineDashStyle* DashStyle/*[out,retval]*/);
  Office_2k::MsoLineDashStyle __fastcall get_DashStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DashStyle(Office_2k::MsoLineDashStyle DashStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EndArrowheadLength(Office_2k::MsoArrowheadLength* EndArrowheadLength/*[out,retval]*/);
  Office_2k::MsoArrowheadLength __fastcall get_EndArrowheadLength(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EndArrowheadLength(Office_2k::MsoArrowheadLength EndArrowheadLength/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EndArrowheadStyle(Office_2k::MsoArrowheadStyle* EndArrowheadStyle/*[out,retval]*/);
  Office_2k::MsoArrowheadStyle __fastcall get_EndArrowheadStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EndArrowheadStyle(Office_2k::MsoArrowheadStyle EndArrowheadStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EndArrowheadWidth(Office_2k::MsoArrowheadWidth* EndArrowheadWidth/*[out,retval]*/);
  Office_2k::MsoArrowheadWidth __fastcall get_EndArrowheadWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EndArrowheadWidth(Office_2k::MsoArrowheadWidth EndArrowheadWidth/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ForeColor(Office_2k::ColorFormatPtr* ForeColor/*[out,retval]*/);
  Office_2k::ColorFormatPtr __fastcall get_ForeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ForeColor(Office_2k::ColorFormatPtr ForeColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Pattern(Office_2k::MsoPatternType* Pattern/*[out,retval]*/);
  Office_2k::MsoPatternType __fastcall get_Pattern(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Pattern(Office_2k::MsoPatternType Pattern/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Style(Office_2k::MsoLineStyle* Style/*[out,retval]*/);
  Office_2k::MsoLineStyle __fastcall get_Style(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Style(Office_2k::MsoLineStyle Style/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Transparency(float* Transparency/*[out,retval]*/);
  float           __fastcall get_Transparency(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Transparency(float Transparency/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_2k::MsoTriState Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Weight(float* Weight/*[out,retval]*/);
  float           __fastcall get_Weight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Weight(float Weight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::ColorFormatPtr BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Office_2k::MsoArrowheadLength BeginArrowheadLength = {read = get_BeginArrowheadLength, write = set_BeginArrowheadLength};
  __property   Office_2k::MsoArrowheadStyle BeginArrowheadStyle = {read = get_BeginArrowheadStyle, write = set_BeginArrowheadStyle};
  __property   Office_2k::MsoArrowheadWidth BeginArrowheadWidth = {read = get_BeginArrowheadWidth, write = set_BeginArrowheadWidth};
  __property   Office_2k::MsoLineDashStyle DashStyle = {read = get_DashStyle, write = set_DashStyle};
  __property   Office_2k::MsoArrowheadLength EndArrowheadLength = {read = get_EndArrowheadLength, write = set_EndArrowheadLength};
  __property   Office_2k::MsoArrowheadStyle EndArrowheadStyle = {read = get_EndArrowheadStyle, write = set_EndArrowheadStyle};
  __property   Office_2k::MsoArrowheadWidth EndArrowheadWidth = {read = get_EndArrowheadWidth, write = set_EndArrowheadWidth};
  __property   Office_2k::ColorFormatPtr ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   Office_2k::MsoPatternType Pattern = {read = get_Pattern, write = set_Pattern};
  __property   Office_2k::MsoLineStyle Style = {read = get_Style, write = set_Style};
  __property   float           Transparency = {read = get_Transparency, write = set_Transparency};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   float           Weight = {read = get_Weight, write = set_Weight};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef LineFormatDispT<LineFormat> LineFormatDisp;

typedef TComInterface<ShapeNode>  TCOMShapeNode;

// *********************************************************************//
// DispIntf:  ShapeNode
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0318-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class ShapeNodeDispT : public TAutoDriver<ShapeNode>
{
public:
  ShapeNodeDispT(){}

  ShapeNodeDispT(ShapeNode *pintf)
  {
    TAutoDriver<ShapeNode>::Bind(pintf, false);
  }

  ShapeNodeDispT(ShapeNodePtr pintf)
  {
    TAutoDriver<ShapeNode>::Bind(pintf, true);
  }

  ShapeNodeDispT& operator=(ShapeNode *pintf)
  {
    TAutoDriver<ShapeNode>::Bind(pintf, false);
    return *this;
  }

  ShapeNodeDispT& operator=(ShapeNodePtr pintf)
  {
    TAutoDriver<ShapeNode>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EditingType(Office_2k::MsoEditingType* EditingType/*[out,retval]*/);
  Office_2k::MsoEditingType __fastcall get_EditingType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Points(TVariant* Points/*[out,retval]*/);
  TVariant        __fastcall get_Points(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SegmentType(Office_2k::MsoSegmentType* SegmentType/*[out,retval]*/);
  Office_2k::MsoSegmentType __fastcall get_SegmentType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoEditingType EditingType = {read = get_EditingType};
  __property   Office_2k::MsoSegmentType SegmentType = {read = get_SegmentType};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef ShapeNodeDispT<ShapeNode> ShapeNodeDisp;

typedef TComInterface<ShapeNodes>  TCOMShapeNodes;

// *********************************************************************//
// DispIntf:  ShapeNodes
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0319-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class ShapeNodesDispT : public TAutoDriver<ShapeNodes>
{
public:
  ShapeNodesDispT(){}

  ShapeNodesDispT(ShapeNodes *pintf)
  {
    TAutoDriver<ShapeNodes>::Bind(pintf, false);
  }

  ShapeNodesDispT(ShapeNodesPtr pintf)
  {
    TAutoDriver<ShapeNodes>::Bind(pintf, true);
  }

  ShapeNodesDispT& operator=(ShapeNodes *pintf)
  {
    TAutoDriver<ShapeNodes>::Bind(pintf, false);
    return *this;
  }

  ShapeNodesDispT& operator=(ShapeNodesPtr pintf)
  {
    TAutoDriver<ShapeNodes>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(int* Count/*[out,retval]*/);
  int             __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(TVariantInParam Index/*[in]*/, 
                                             Office_2k::ShapeNodePtr* Item/*[out,retval]*/);
  Office_2k::ShapeNodePtr __fastcall Item(TVariantInParam Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Insert(int Index/*[in]*/, 
                                               Office_2k::MsoSegmentType SegmentType/*[in]*/, 
                                               Office_2k::MsoEditingType EditingType/*[in]*/, 
                                               float X1/*[in]*/, float Y1/*[in]*/, 
                                               float X2/*[in,def,opt]*/, float Y2/*[in,def,opt]*/, 
                                               float X3/*[in,def,opt]*/, float Y3/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetEditingType(int Index/*[in]*/, 
                                                       Office_2k::MsoEditingType EditingType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetPosition(int Index/*[in]*/, float X1/*[in]*/, 
                                                    float Y1/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetSegmentType(int Index/*[in]*/, 
                                                       Office_2k::MsoSegmentType SegmentType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef ShapeNodesDispT<ShapeNodes> ShapeNodesDisp;

typedef TComInterface<PictureFormat>  TCOMPictureFormat;

// *********************************************************************//
// DispIntf:  PictureFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C031A-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class PictureFormatDispT : public TAutoDriver<PictureFormat>
{
public:
  PictureFormatDispT(){}

  PictureFormatDispT(PictureFormat *pintf)
  {
    TAutoDriver<PictureFormat>::Bind(pintf, false);
  }

  PictureFormatDispT(PictureFormatPtr pintf)
  {
    TAutoDriver<PictureFormat>::Bind(pintf, true);
  }

  PictureFormatDispT& operator=(PictureFormat *pintf)
  {
    TAutoDriver<PictureFormat>::Bind(pintf, false);
    return *this;
  }

  PictureFormatDispT& operator=(PictureFormatPtr pintf)
  {
    TAutoDriver<PictureFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IncrementBrightness(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IncrementContrast(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Brightness(float* Brightness/*[out,retval]*/);
  float           __fastcall get_Brightness(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Brightness(float Brightness/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColorType(Office_2k::MsoPictureColorType* ColorType/*[out,retval]*/);
  Office_2k::MsoPictureColorType __fastcall get_ColorType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColorType(Office_2k::MsoPictureColorType ColorType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Contrast(float* Contrast/*[out,retval]*/);
  float           __fastcall get_Contrast(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Contrast(float Contrast/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CropBottom(float* CropBottom/*[out,retval]*/);
  float           __fastcall get_CropBottom(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CropBottom(float CropBottom/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CropLeft(float* CropLeft/*[out,retval]*/);
  float           __fastcall get_CropLeft(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CropLeft(float CropLeft/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CropRight(float* CropRight/*[out,retval]*/);
  float           __fastcall get_CropRight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CropRight(float CropRight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CropTop(float* CropTop/*[out,retval]*/);
  float           __fastcall get_CropTop(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CropTop(float CropTop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TransparencyColor(Office_2k::MsoRGBType* TransparencyColor/*[out,retval]*/);
  Office_2k::MsoRGBType __fastcall get_TransparencyColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TransparencyColor(Office_2k::MsoRGBType TransparencyColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TransparentBackground(Office_2k::MsoTriState* TransparentBackground/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_TransparentBackground(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TransparentBackground(Office_2k::MsoTriState TransparentBackground/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   float           Brightness = {read = get_Brightness, write = set_Brightness};
  __property   Office_2k::MsoPictureColorType ColorType = {read = get_ColorType, write = set_ColorType};
  __property   float           Contrast = {read = get_Contrast, write = set_Contrast};
  __property   float           CropBottom = {read = get_CropBottom, write = set_CropBottom};
  __property   float           CropLeft = {read = get_CropLeft, write = set_CropLeft};
  __property   float           CropRight = {read = get_CropRight, write = set_CropRight};
  __property   float           CropTop = {read = get_CropTop, write = set_CropTop};
  __property   Office_2k::MsoRGBType TransparencyColor = {read = get_TransparencyColor, write = set_TransparencyColor};
  __property   Office_2k::MsoTriState TransparentBackground = {read = get_TransparentBackground, write = set_TransparentBackground};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef PictureFormatDispT<PictureFormat> PictureFormatDisp;

typedef TComInterface<ShadowFormat>  TCOMShadowFormat;

// *********************************************************************//
// DispIntf:  ShadowFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C031B-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class ShadowFormatDispT : public TAutoDriver<ShadowFormat>
{
public:
  ShadowFormatDispT(){}

  ShadowFormatDispT(ShadowFormat *pintf)
  {
    TAutoDriver<ShadowFormat>::Bind(pintf, false);
  }

  ShadowFormatDispT(ShadowFormatPtr pintf)
  {
    TAutoDriver<ShadowFormat>::Bind(pintf, true);
  }

  ShadowFormatDispT& operator=(ShadowFormat *pintf)
  {
    TAutoDriver<ShadowFormat>::Bind(pintf, false);
    return *this;
  }

  ShadowFormatDispT& operator=(ShadowFormatPtr pintf)
  {
    TAutoDriver<ShadowFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IncrementOffsetX(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IncrementOffsetY(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ForeColor(Office_2k::ColorFormatPtr* ForeColor/*[out,retval]*/);
  Office_2k::ColorFormatPtr __fastcall get_ForeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ForeColor(Office_2k::ColorFormatPtr ForeColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Obscured(Office_2k::MsoTriState* Obscured/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Obscured(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Obscured(Office_2k::MsoTriState Obscured/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OffsetX(float* OffsetX/*[out,retval]*/);
  float           __fastcall get_OffsetX(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OffsetX(float OffsetX/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OffsetY(float* OffsetY/*[out,retval]*/);
  float           __fastcall get_OffsetY(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OffsetY(float OffsetY/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Transparency(float* Transparency/*[out,retval]*/);
  float           __fastcall get_Transparency(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Transparency(float Transparency/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Office_2k::MsoShadowType* Type/*[out,retval]*/);
  Office_2k::MsoShadowType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Type(Office_2k::MsoShadowType Type/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_2k::MsoTriState Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::ColorFormatPtr ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   Office_2k::MsoTriState Obscured = {read = get_Obscured, write = set_Obscured};
  __property   float           OffsetX = {read = get_OffsetX, write = set_OffsetX};
  __property   float           OffsetY = {read = get_OffsetY, write = set_OffsetY};
  __property   float           Transparency = {read = get_Transparency, write = set_Transparency};
  __property   Office_2k::MsoShadowType Type = {read = get_Type, write = set_Type};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef ShadowFormatDispT<ShadowFormat> ShadowFormatDisp;

typedef TComInterface<Script>  TCOMScript;

// *********************************************************************//
// DispIntf:  Script
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0341-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class ScriptDispT : public TAutoDriver<Script>
{
public:
  ScriptDispT(){}

  ScriptDispT(Script *pintf)
  {
    TAutoDriver<Script>::Bind(pintf, false);
  }

  ScriptDispT(ScriptPtr pintf)
  {
    TAutoDriver<Script>::Bind(pintf, true);
  }

  ScriptDispT& operator=(Script *pintf)
  {
    TAutoDriver<Script>::Bind(pintf, false);
    return *this;
  }

  ScriptDispT& operator=(ScriptPtr pintf)
  {
    TAutoDriver<Script>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Extended(BSTR* Extended/*[out,retval]*/);
  BSTR            __fastcall get_Extended(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Extended(BSTR Extended/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Id(BSTR* Id/*[out,retval]*/);
  BSTR            __fastcall get_Id(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Id(BSTR Id/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Language(Office_2k::MsoScriptLanguage* Language/*[out,retval]*/);
  Office_2k::MsoScriptLanguage __fastcall get_Language(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Language(Office_2k::MsoScriptLanguage Language/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Location(Office_2k::MsoScriptLocation* Location/*[out,retval]*/);
  Office_2k::MsoScriptLocation __fastcall get_Location(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Shape(LPDISPATCH* Object/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Shape(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ScriptText(BSTR* Script/*[out,retval]*/);
  BSTR            __fastcall get_ScriptText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ScriptText(BSTR Script/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Extended = {read = get_Extended, write = set_Extended};
  __property   BSTR            Id = {read = get_Id, write = set_Id};
  __property   Office_2k::MsoScriptLanguage Language = {read = get_Language, write = set_Language};
  __property   Office_2k::MsoScriptLocation Location = {read = get_Location};
  __property   LPDISPATCH      Shape = {read = get_Shape};
  __property   BSTR            ScriptText = {read = get_ScriptText, write = set_ScriptText};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef ScriptDispT<Script> ScriptDisp;

typedef TComInterface<Scripts>  TCOMScripts;

// *********************************************************************//
// DispIntf:  Scripts
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0340-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class ScriptsDispT : public TAutoDriver<Scripts>
{
public:
  ScriptsDispT(){}

  ScriptsDispT(Scripts *pintf)
  {
    TAutoDriver<Scripts>::Bind(pintf, false);
  }

  ScriptsDispT(ScriptsPtr pintf)
  {
    TAutoDriver<Scripts>::Bind(pintf, true);
  }

  ScriptsDispT& operator=(Scripts *pintf)
  {
    TAutoDriver<Scripts>::Bind(pintf, false);
    return *this;
  }

  ScriptsDispT& operator=(ScriptsPtr pintf)
  {
    TAutoDriver<Scripts>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(TVariantInParam Index/*[in]*/, 
                                             Office_2k::ScriptPtr* Item/*[out,retval]*/);
  Office_2k::ScriptPtr __fastcall Item(TVariantInParam Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(LPDISPATCH Anchor/*[in,def,opt]*/, 
                                            Office_2k::MsoScriptLocation Location/*[in,def,opt]*/, 
                                            Office_2k::MsoScriptLanguage Language/*[in,def,opt]*/, 
                                            BSTR Id/*[in,def,opt]*/, BSTR Extended/*[in,def,opt]*/, 
                                            BSTR ScriptText/*[in,def,opt]*/, 
                                            Office_2k::ScriptPtr* Add/*[out,retval]*/);
  Office_2k::ScriptPtr __fastcall Add(LPDISPATCH Anchor/*[in,def,opt]*/, 
                                      Office_2k::MsoScriptLocation Location/*[in,def,opt]*/, 
                                      Office_2k::MsoScriptLanguage Language/*[in,def,opt]*/, 
                                      BSTR Id/*[in,def,opt]*/, BSTR Extended/*[in,def,opt]*/, 
                                      BSTR ScriptText/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef ScriptsDispT<Scripts> ScriptsDisp;

typedef TComInterface<Shape>  TCOMShape;

// *********************************************************************//
// DispIntf:  Shape
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C031C-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class ShapeDispT : public TAutoDriver<Shape>
{
public:
  ShapeDispT(){}

  ShapeDispT(Shape *pintf)
  {
    TAutoDriver<Shape>::Bind(pintf, false);
  }

  ShapeDispT(ShapePtr pintf)
  {
    TAutoDriver<Shape>::Bind(pintf, true);
  }

  ShapeDispT& operator=(Shape *pintf)
  {
    TAutoDriver<Shape>::Bind(pintf, false);
    return *this;
  }

  ShapeDispT& operator=(ShapePtr pintf)
  {
    TAutoDriver<Shape>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Apply();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Duplicate(Office_2k::ShapePtr* Duplicate/*[out,retval]*/);
  Office_2k::ShapePtr __fastcall Duplicate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Flip(Office_2k::MsoFlipCmd FlipCmd/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IncrementLeft(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IncrementRotation(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IncrementTop(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PickUp();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RerouteConnections();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ScaleHeight(float Factor/*[in]*/, 
                                                    Office_2k::MsoTriState RelativeToOriginalSize/*[in]*/
                                                    , Office_2k::MsoScaleFrom fScale/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ScaleWidth(float Factor/*[in]*/, 
                                                   Office_2k::MsoTriState RelativeToOriginalSize/*[in]*/
                                                   , Office_2k::MsoScaleFrom fScale/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Select(TVariantInParam Replace/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetShapesDefaultProperties();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Ungroup(Office_2k::ShapeRangePtr* Ungroup/*[out,retval]*/);
  Office_2k::ShapeRangePtr __fastcall Ungroup(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ZOrder(Office_2k::MsoZOrderCmd ZOrderCmd/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Adjustments(Office_2k::AdjustmentsPtr* Adjustments/*[out,retval]*/);
  Office_2k::AdjustmentsPtr __fastcall get_Adjustments(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoShapeType(Office_2k::MsoAutoShapeType* AutoShapeType/*[out,retval]*/);
  Office_2k::MsoAutoShapeType __fastcall get_AutoShapeType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoShapeType(Office_2k::MsoAutoShapeType AutoShapeType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BlackWhiteMode(Office_2k::MsoBlackWhiteMode* BlackWhiteMode/*[out,retval]*/);
  Office_2k::MsoBlackWhiteMode __fastcall get_BlackWhiteMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BlackWhiteMode(Office_2k::MsoBlackWhiteMode BlackWhiteMode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Callout(Office_2k::CalloutFormatPtr* Callout/*[out,retval]*/);
  Office_2k::CalloutFormatPtr __fastcall get_Callout(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ConnectionSiteCount(int* ConnectionSiteCount/*[out,retval]*/);
  int             __fastcall get_ConnectionSiteCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Connector(Office_2k::MsoTriState* Connector/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Connector(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ConnectorFormat(Office_2k::ConnectorFormatPtr* ConnectorFormat/*[out,retval]*/);
  Office_2k::ConnectorFormatPtr __fastcall get_ConnectorFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Fill(Office_2k::FillFormatPtr* Fill/*[out,retval]*/);
  Office_2k::FillFormatPtr __fastcall get_Fill(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupItems(Office_2k::GroupShapesPtr* GroupItems/*[out,retval]*/);
  Office_2k::GroupShapesPtr __fastcall get_GroupItems(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(float* Height/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HorizontalFlip(Office_2k::MsoTriState* HorizontalFlip/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_HorizontalFlip(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(float* Left/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(float Left/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Line(Office_2k::LineFormatPtr* Line/*[out,retval]*/);
  Office_2k::LineFormatPtr __fastcall get_Line(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LockAspectRatio(Office_2k::MsoTriState* LockAspectRatio/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_LockAspectRatio(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LockAspectRatio(Office_2k::MsoTriState LockAspectRatio/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Nodes(Office_2k::ShapeNodesPtr* Nodes/*[out,retval]*/);
  Office_2k::ShapeNodesPtr __fastcall get_Nodes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Rotation(float* Rotation/*[out,retval]*/);
  float           __fastcall get_Rotation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Rotation(float Rotation/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureFormat(Office_2k::PictureFormatPtr* Picture/*[out,retval]*/);
  Office_2k::PictureFormatPtr __fastcall get_PictureFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Shadow(Office_2k::ShadowFormatPtr* Shadow/*[out,retval]*/);
  Office_2k::ShadowFormatPtr __fastcall get_Shadow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextEffect(Office_2k::TextEffectFormatPtr* TextEffect/*[out,retval]*/);
  Office_2k::TextEffectFormatPtr __fastcall get_TextEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextFrame(Office_2k::TextFramePtr* TextFrame/*[out,retval]*/);
  Office_2k::TextFramePtr __fastcall get_TextFrame(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ThreeD(Office_2k::ThreeDFormatPtr* ThreeD/*[out,retval]*/);
  Office_2k::ThreeDFormatPtr __fastcall get_ThreeD(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(float* Top/*[out,retval]*/);
  float           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(float Top/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Office_2k::MsoShapeType* Type/*[out,retval]*/);
  Office_2k::MsoShapeType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VerticalFlip(Office_2k::MsoTriState* VerticalFlip/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_VerticalFlip(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Vertices(TVariant* Vertices/*[out,retval]*/);
  TVariant        __fastcall get_Vertices(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_2k::MsoTriState Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(float* Width/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(float Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ZOrderPosition(int* ZOrderPosition/*[out,retval]*/);
  int             __fastcall get_ZOrderPosition(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Script(Office_2k::ScriptPtr* Script/*[out,retval]*/);
  Office_2k::ScriptPtr __fastcall get_Script(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AlternativeText(BSTR* AlternativeText/*[out,retval]*/);
  BSTR            __fastcall get_AlternativeText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AlternativeText(BSTR AlternativeText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::AdjustmentsPtr Adjustments = {read = get_Adjustments};
  __property   Office_2k::MsoAutoShapeType AutoShapeType = {read = get_AutoShapeType, write = set_AutoShapeType};
  __property   Office_2k::MsoBlackWhiteMode BlackWhiteMode = {read = get_BlackWhiteMode, write = set_BlackWhiteMode};
  __property   Office_2k::CalloutFormatPtr Callout = {read = get_Callout};
  __property   int             ConnectionSiteCount = {read = get_ConnectionSiteCount};
  __property   Office_2k::MsoTriState Connector = {read = get_Connector};
  __property   Office_2k::ConnectorFormatPtr ConnectorFormat = {read = get_ConnectorFormat};
  __property   Office_2k::FillFormatPtr Fill = {read = get_Fill};
  __property   Office_2k::GroupShapesPtr GroupItems = {read = get_GroupItems};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   Office_2k::MsoTriState HorizontalFlip = {read = get_HorizontalFlip};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   Office_2k::LineFormatPtr Line = {read = get_Line};
  __property   Office_2k::MsoTriState LockAspectRatio = {read = get_LockAspectRatio, write = set_LockAspectRatio};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   Office_2k::ShapeNodesPtr Nodes = {read = get_Nodes};
  __property   float           Rotation = {read = get_Rotation, write = set_Rotation};
  __property   Office_2k::PictureFormatPtr PictureFormat = {read = get_PictureFormat};
  __property   Office_2k::ShadowFormatPtr Shadow = {read = get_Shadow};
  __property   Office_2k::TextEffectFormatPtr TextEffect = {read = get_TextEffect};
  __property   Office_2k::TextFramePtr TextFrame = {read = get_TextFrame};
  __property   Office_2k::ThreeDFormatPtr ThreeD = {read = get_ThreeD};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   Office_2k::MsoShapeType Type = {read = get_Type};
  __property   Office_2k::MsoTriState VerticalFlip = {read = get_VerticalFlip};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   int             ZOrderPosition = {read = get_ZOrderPosition};
  __property   Office_2k::ScriptPtr Script = {read = get_Script};
  __property   BSTR            AlternativeText = {read = get_AlternativeText, write = set_AlternativeText};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef ShapeDispT<Shape> ShapeDisp;

typedef TComInterface<ShapeRange>  TCOMShapeRange;

// *********************************************************************//
// DispIntf:  ShapeRange
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C031D-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class ShapeRangeDispT : public TAutoDriver<ShapeRange>
{
public:
  ShapeRangeDispT(){}

  ShapeRangeDispT(ShapeRange *pintf)
  {
    TAutoDriver<ShapeRange>::Bind(pintf, false);
  }

  ShapeRangeDispT(ShapeRangePtr pintf)
  {
    TAutoDriver<ShapeRange>::Bind(pintf, true);
  }

  ShapeRangeDispT& operator=(ShapeRange *pintf)
  {
    TAutoDriver<ShapeRange>::Bind(pintf, false);
    return *this;
  }

  ShapeRangeDispT& operator=(ShapeRangePtr pintf)
  {
    TAutoDriver<ShapeRange>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(int* Count/*[out,retval]*/);
  int             __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(TVariantInParam Index/*[in]*/, 
                                             Office_2k::ShapePtr* Item/*[out,retval]*/);
  Office_2k::ShapePtr __fastcall Item(TVariantInParam Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Align(Office_2k::MsoAlignCmd AlignCmd/*[in]*/, 
                                              Office_2k::MsoTriState RelativeTo/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Apply();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Distribute(Office_2k::MsoDistributeCmd DistributeCmd/*[in]*/
                                                   , Office_2k::MsoTriState RelativeTo/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Duplicate(Office_2k::ShapeRangePtr* Duplicate/*[out,retval]*/);
  Office_2k::ShapeRangePtr __fastcall Duplicate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Flip(Office_2k::MsoFlipCmd FlipCmd/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IncrementLeft(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IncrementRotation(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IncrementTop(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Group(Office_2k::ShapePtr* Group/*[out,retval]*/);
  Office_2k::ShapePtr __fastcall Group(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PickUp();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Regroup(Office_2k::ShapePtr* Regroup/*[out,retval]*/);
  Office_2k::ShapePtr __fastcall Regroup(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RerouteConnections();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ScaleHeight(float Factor/*[in]*/, 
                                                    Office_2k::MsoTriState RelativeToOriginalSize/*[in]*/
                                                    , Office_2k::MsoScaleFrom fScale/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ScaleWidth(float Factor/*[in]*/, 
                                                   Office_2k::MsoTriState RelativeToOriginalSize/*[in]*/
                                                   , Office_2k::MsoScaleFrom fScale/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Select(TVariantInParam Replace/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetShapesDefaultProperties();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Ungroup(Office_2k::ShapeRangePtr* Ungroup/*[out,retval]*/);
  Office_2k::ShapeRangePtr __fastcall Ungroup(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ZOrder(Office_2k::MsoZOrderCmd ZOrderCmd/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Adjustments(Office_2k::AdjustmentsPtr* Adjustments/*[out,retval]*/);
  Office_2k::AdjustmentsPtr __fastcall get_Adjustments(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoShapeType(Office_2k::MsoAutoShapeType* AutoShapeType/*[out,retval]*/);
  Office_2k::MsoAutoShapeType __fastcall get_AutoShapeType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoShapeType(Office_2k::MsoAutoShapeType AutoShapeType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BlackWhiteMode(Office_2k::MsoBlackWhiteMode* BlackWhiteMode/*[out,retval]*/);
  Office_2k::MsoBlackWhiteMode __fastcall get_BlackWhiteMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BlackWhiteMode(Office_2k::MsoBlackWhiteMode BlackWhiteMode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Callout(Office_2k::CalloutFormatPtr* Callout/*[out,retval]*/);
  Office_2k::CalloutFormatPtr __fastcall get_Callout(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ConnectionSiteCount(int* ConnectionSiteCount/*[out,retval]*/);
  int             __fastcall get_ConnectionSiteCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Connector(Office_2k::MsoTriState* Connector/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Connector(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ConnectorFormat(Office_2k::ConnectorFormatPtr* ConnectorFormat/*[out,retval]*/);
  Office_2k::ConnectorFormatPtr __fastcall get_ConnectorFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Fill(Office_2k::FillFormatPtr* Fill/*[out,retval]*/);
  Office_2k::FillFormatPtr __fastcall get_Fill(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupItems(Office_2k::GroupShapesPtr* GroupItems/*[out,retval]*/);
  Office_2k::GroupShapesPtr __fastcall get_GroupItems(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(float* Height/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HorizontalFlip(Office_2k::MsoTriState* HorizontalFlip/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_HorizontalFlip(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(float* Left/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(float Left/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Line(Office_2k::LineFormatPtr* Line/*[out,retval]*/);
  Office_2k::LineFormatPtr __fastcall get_Line(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LockAspectRatio(Office_2k::MsoTriState* LockAspectRatio/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_LockAspectRatio(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LockAspectRatio(Office_2k::MsoTriState LockAspectRatio/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Nodes(Office_2k::ShapeNodesPtr* Nodes/*[out,retval]*/);
  Office_2k::ShapeNodesPtr __fastcall get_Nodes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Rotation(float* Rotation/*[out,retval]*/);
  float           __fastcall get_Rotation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Rotation(float Rotation/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureFormat(Office_2k::PictureFormatPtr* Picture/*[out,retval]*/);
  Office_2k::PictureFormatPtr __fastcall get_PictureFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Shadow(Office_2k::ShadowFormatPtr* Shadow/*[out,retval]*/);
  Office_2k::ShadowFormatPtr __fastcall get_Shadow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextEffect(Office_2k::TextEffectFormatPtr* TextEffect/*[out,retval]*/);
  Office_2k::TextEffectFormatPtr __fastcall get_TextEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextFrame(Office_2k::TextFramePtr* TextFrame/*[out,retval]*/);
  Office_2k::TextFramePtr __fastcall get_TextFrame(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ThreeD(Office_2k::ThreeDFormatPtr* ThreeD/*[out,retval]*/);
  Office_2k::ThreeDFormatPtr __fastcall get_ThreeD(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(float* Top/*[out,retval]*/);
  float           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(float Top/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Office_2k::MsoShapeType* Type/*[out,retval]*/);
  Office_2k::MsoShapeType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VerticalFlip(Office_2k::MsoTriState* VerticalFlip/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_VerticalFlip(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Vertices(TVariant* Vertices/*[out,retval]*/);
  TVariant        __fastcall get_Vertices(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_2k::MsoTriState Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(float* Width/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(float Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ZOrderPosition(int* ZOrderPosition/*[out,retval]*/);
  int             __fastcall get_ZOrderPosition(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Script(Office_2k::ScriptPtr* Script/*[out,retval]*/);
  Office_2k::ScriptPtr __fastcall get_Script(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AlternativeText(BSTR* AlternativeText/*[out,retval]*/);
  BSTR            __fastcall get_AlternativeText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AlternativeText(BSTR AlternativeText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   Office_2k::AdjustmentsPtr Adjustments = {read = get_Adjustments};
  __property   Office_2k::MsoAutoShapeType AutoShapeType = {read = get_AutoShapeType, write = set_AutoShapeType};
  __property   Office_2k::MsoBlackWhiteMode BlackWhiteMode = {read = get_BlackWhiteMode, write = set_BlackWhiteMode};
  __property   Office_2k::CalloutFormatPtr Callout = {read = get_Callout};
  __property   int             ConnectionSiteCount = {read = get_ConnectionSiteCount};
  __property   Office_2k::MsoTriState Connector = {read = get_Connector};
  __property   Office_2k::ConnectorFormatPtr ConnectorFormat = {read = get_ConnectorFormat};
  __property   Office_2k::FillFormatPtr Fill = {read = get_Fill};
  __property   Office_2k::GroupShapesPtr GroupItems = {read = get_GroupItems};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   Office_2k::MsoTriState HorizontalFlip = {read = get_HorizontalFlip};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   Office_2k::LineFormatPtr Line = {read = get_Line};
  __property   Office_2k::MsoTriState LockAspectRatio = {read = get_LockAspectRatio, write = set_LockAspectRatio};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   Office_2k::ShapeNodesPtr Nodes = {read = get_Nodes};
  __property   float           Rotation = {read = get_Rotation, write = set_Rotation};
  __property   Office_2k::PictureFormatPtr PictureFormat = {read = get_PictureFormat};
  __property   Office_2k::ShadowFormatPtr Shadow = {read = get_Shadow};
  __property   Office_2k::TextEffectFormatPtr TextEffect = {read = get_TextEffect};
  __property   Office_2k::TextFramePtr TextFrame = {read = get_TextFrame};
  __property   Office_2k::ThreeDFormatPtr ThreeD = {read = get_ThreeD};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   Office_2k::MsoShapeType Type = {read = get_Type};
  __property   Office_2k::MsoTriState VerticalFlip = {read = get_VerticalFlip};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   int             ZOrderPosition = {read = get_ZOrderPosition};
  __property   Office_2k::ScriptPtr Script = {read = get_Script};
  __property   BSTR            AlternativeText = {read = get_AlternativeText, write = set_AlternativeText};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef ShapeRangeDispT<ShapeRange> ShapeRangeDisp;

typedef TComInterface<Shapes>  TCOMShapes;

// *********************************************************************//
// DispIntf:  Shapes
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C031E-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class ShapesDispT : public TAutoDriver<Shapes>
{
public:
  ShapesDispT(){}

  ShapesDispT(Shapes *pintf)
  {
    TAutoDriver<Shapes>::Bind(pintf, false);
  }

  ShapesDispT(ShapesPtr pintf)
  {
    TAutoDriver<Shapes>::Bind(pintf, true);
  }

  ShapesDispT& operator=(Shapes *pintf)
  {
    TAutoDriver<Shapes>::Bind(pintf, false);
    return *this;
  }

  ShapesDispT& operator=(ShapesPtr pintf)
  {
    TAutoDriver<Shapes>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(int* Count/*[out,retval]*/);
  int             __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(TVariantInParam Index/*[in]*/, 
                                             Office_2k::ShapePtr* Item/*[out,retval]*/);
  Office_2k::ShapePtr __fastcall Item(TVariantInParam Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddCallout(Office_2k::MsoCalloutType Type/*[in]*/, 
                                                   float Left/*[in]*/, float Top/*[in]*/, 
                                                   float Width/*[in]*/, float Height/*[in]*/, 
                                                   Office_2k::ShapePtr* Callout/*[out,retval]*/);
  Office_2k::ShapePtr __fastcall AddCallout(Office_2k::MsoCalloutType Type/*[in]*/, 
                                            float Left/*[in]*/, float Top/*[in]*/, 
                                            float Width/*[in]*/, float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddConnector(Office_2k::MsoConnectorType Type/*[in]*/, 
                                                     float BeginX/*[in]*/, float BeginY/*[in]*/, 
                                                     float EndX/*[in]*/, float EndY/*[in]*/, 
                                                     Office_2k::ShapePtr* Connector/*[out,retval]*/);
  Office_2k::ShapePtr __fastcall AddConnector(Office_2k::MsoConnectorType Type/*[in]*/, 
                                              float BeginX/*[in]*/, float BeginY/*[in]*/, 
                                              float EndX/*[in]*/, float EndY/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddCurve(TVariantInParam SafeArrayOfPoints/*[in]*/, 
                                                 Office_2k::ShapePtr* Curve/*[out,retval]*/);
  Office_2k::ShapePtr __fastcall AddCurve(TVariantInParam SafeArrayOfPoints/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddLabel(Office_2k::MsoTextOrientation Orientation/*[in]*/, 
                                                 float Left/*[in]*/, float Top/*[in]*/, 
                                                 float Width/*[in]*/, float Height/*[in]*/, 
                                                 Office_2k::ShapePtr* Label/*[out,retval]*/);
  Office_2k::ShapePtr __fastcall AddLabel(Office_2k::MsoTextOrientation Orientation/*[in]*/, 
                                          float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                                          float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddLine(float BeginX/*[in]*/, float BeginY/*[in]*/, 
                                                float EndX/*[in]*/, float EndY/*[in]*/, 
                                                Office_2k::ShapePtr* Line/*[out,retval]*/);
  Office_2k::ShapePtr __fastcall AddLine(float BeginX/*[in]*/, float BeginY/*[in]*/, 
                                         float EndX/*[in]*/, float EndY/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddPicture(BSTR FileName/*[in]*/, 
                                                   Office_2k::MsoTriState LinkToFile/*[in]*/, 
                                                   Office_2k::MsoTriState SaveWithDocument/*[in]*/, 
                                                   float Left/*[in]*/, float Top/*[in]*/, 
                                                   float Width/*[in,def,opt]*/, 
                                                   float Height/*[in,def,opt]*/, 
                                                   Office_2k::ShapePtr* Picture/*[out,retval]*/);
  Office_2k::ShapePtr __fastcall AddPicture(BSTR FileName/*[in]*/, 
                                            Office_2k::MsoTriState LinkToFile/*[in]*/, 
                                            Office_2k::MsoTriState SaveWithDocument/*[in]*/, 
                                            float Left/*[in]*/, float Top/*[in]*/, 
                                            float Width/*[in,def,opt]*/, 
                                            float Height/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddPolyline(TVariantInParam SafeArrayOfPoints/*[in]*/, 
                                                    Office_2k::ShapePtr* Polyline/*[out,retval]*/);
  Office_2k::ShapePtr __fastcall AddPolyline(TVariantInParam SafeArrayOfPoints/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddShape(Office_2k::MsoAutoShapeType Type/*[in]*/, 
                                                 float Left/*[in]*/, float Top/*[in]*/, 
                                                 float Width/*[in]*/, float Height/*[in]*/, 
                                                 Office_2k::ShapePtr* Shape/*[out,retval]*/);
  Office_2k::ShapePtr __fastcall AddShape(Office_2k::MsoAutoShapeType Type/*[in]*/, 
                                          float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                                          float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddTextEffect(Office_2k::MsoPresetTextEffect PresetTextEffect/*[in]*/
                                                      , BSTR Text/*[in]*/, BSTR FontName/*[in]*/, 
                                                      float FontSize/*[in]*/, 
                                                      Office_2k::MsoTriState FontBold/*[in]*/, 
                                                      Office_2k::MsoTriState FontItalic/*[in]*/, 
                                                      float Left/*[in]*/, float Top/*[in]*/, 
                                                      Office_2k::ShapePtr* TextEffect/*[out,retval]*/);
  Office_2k::ShapePtr __fastcall AddTextEffect(Office_2k::MsoPresetTextEffect PresetTextEffect/*[in]*/, 
                                               BSTR Text/*[in]*/, BSTR FontName/*[in]*/, 
                                               float FontSize/*[in]*/, 
                                               Office_2k::MsoTriState FontBold/*[in]*/, 
                                               Office_2k::MsoTriState FontItalic/*[in]*/, 
                                               float Left/*[in]*/, float Top/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddTextbox(Office_2k::MsoTextOrientation Orientation/*[in]*/
                                                   , float Left/*[in]*/, float Top/*[in]*/, 
                                                   float Width/*[in]*/, float Height/*[in]*/, 
                                                   Office_2k::ShapePtr* Textbox/*[out,retval]*/);
  Office_2k::ShapePtr __fastcall AddTextbox(Office_2k::MsoTextOrientation Orientation/*[in]*/, 
                                            float Left/*[in]*/, float Top/*[in]*/, 
                                            float Width/*[in]*/, float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall BuildFreeform(Office_2k::MsoEditingType EditingType/*[in]*/
                                                      , float X1/*[in]*/, float Y1/*[in]*/, 
                                                      Office_2k::FreeformBuilderPtr* FreeformBuilder/*[out,retval]*/);
  Office_2k::FreeformBuilderPtr __fastcall BuildFreeform(Office_2k::MsoEditingType EditingType/*[in]*/, 
                                                         float X1/*[in]*/, float Y1/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Range(TVariantInParam Index/*[in]*/, 
                                              Office_2k::ShapeRangePtr* Range/*[out,retval]*/);
  Office_2k::ShapeRangePtr __fastcall Range(TVariantInParam Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SelectAll();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Background(Office_2k::ShapePtr* Background/*[out,retval]*/);
  Office_2k::ShapePtr __fastcall get_Background(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Default(Office_2k::ShapePtr* Default/*[out,retval]*/);
  Office_2k::ShapePtr __fastcall get_Default(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   Office_2k::ShapePtr Background = {read = get_Background};
  __property   Office_2k::ShapePtr Default = {read = get_Default};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef ShapesDispT<Shapes> ShapesDisp;

typedef TComInterface<TextEffectFormat>  TCOMTextEffectFormat;

// *********************************************************************//
// DispIntf:  TextEffectFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C031F-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class TextEffectFormatDispT : public TAutoDriver<TextEffectFormat>
{
public:
  TextEffectFormatDispT(){}

  TextEffectFormatDispT(TextEffectFormat *pintf)
  {
    TAutoDriver<TextEffectFormat>::Bind(pintf, false);
  }

  TextEffectFormatDispT(TextEffectFormatPtr pintf)
  {
    TAutoDriver<TextEffectFormat>::Bind(pintf, true);
  }

  TextEffectFormatDispT& operator=(TextEffectFormat *pintf)
  {
    TAutoDriver<TextEffectFormat>::Bind(pintf, false);
    return *this;
  }

  TextEffectFormatDispT& operator=(TextEffectFormatPtr pintf)
  {
    TAutoDriver<TextEffectFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ToggleVerticalText();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Alignment(Office_2k::MsoTextEffectAlignment* Alignment/*[out,retval]*/);
  Office_2k::MsoTextEffectAlignment __fastcall get_Alignment(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Alignment(Office_2k::MsoTextEffectAlignment Alignment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontBold(Office_2k::MsoTriState* FontBold/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_FontBold(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontBold(Office_2k::MsoTriState FontBold/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontItalic(Office_2k::MsoTriState* FontItalic/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_FontItalic(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontItalic(Office_2k::MsoTriState FontItalic/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontName(BSTR* FontName/*[out,retval]*/);
  BSTR            __fastcall get_FontName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontName(BSTR FontName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontSize(float* FontSize/*[out,retval]*/);
  float           __fastcall get_FontSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontSize(float FontSize/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_KernedPairs(Office_2k::MsoTriState* KernedPairs/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_KernedPairs(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_KernedPairs(Office_2k::MsoTriState KernedPairs/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NormalizedHeight(Office_2k::MsoTriState* NormalizedHeight/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_NormalizedHeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_NormalizedHeight(Office_2k::MsoTriState NormalizedHeight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PresetShape(Office_2k::MsoPresetTextEffectShape* PresetShape/*[out,retval]*/);
  Office_2k::MsoPresetTextEffectShape __fastcall get_PresetShape(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PresetShape(Office_2k::MsoPresetTextEffectShape PresetShape/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PresetTextEffect(Office_2k::MsoPresetTextEffect* Preset/*[out,retval]*/);
  Office_2k::MsoPresetTextEffect __fastcall get_PresetTextEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PresetTextEffect(Office_2k::MsoPresetTextEffect Preset/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RotatedChars(Office_2k::MsoTriState* RotatedChars/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_RotatedChars(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RotatedChars(Office_2k::MsoTriState RotatedChars/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Text(BSTR* Text/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Text(BSTR Text/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tracking(float* Tracking/*[out,retval]*/);
  float           __fastcall get_Tracking(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Tracking(float Tracking/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoTextEffectAlignment Alignment = {read = get_Alignment, write = set_Alignment};
  __property   Office_2k::MsoTriState FontBold = {read = get_FontBold, write = set_FontBold};
  __property   Office_2k::MsoTriState FontItalic = {read = get_FontItalic, write = set_FontItalic};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   float           FontSize = {read = get_FontSize, write = set_FontSize};
  __property   Office_2k::MsoTriState KernedPairs = {read = get_KernedPairs, write = set_KernedPairs};
  __property   Office_2k::MsoTriState NormalizedHeight = {read = get_NormalizedHeight, write = set_NormalizedHeight};
  __property   Office_2k::MsoPresetTextEffectShape PresetShape = {read = get_PresetShape, write = set_PresetShape};
  __property   Office_2k::MsoPresetTextEffect PresetTextEffect = {read = get_PresetTextEffect, write = set_PresetTextEffect};
  __property   Office_2k::MsoTriState RotatedChars = {read = get_RotatedChars, write = set_RotatedChars};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   float           Tracking = {read = get_Tracking, write = set_Tracking};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef TextEffectFormatDispT<TextEffectFormat> TextEffectFormatDisp;

typedef TComInterface<TextFrame>  TCOMTextFrame;

// *********************************************************************//
// DispIntf:  TextFrame
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0320-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class TextFrameDispT : public TAutoDriver<TextFrame>
{
public:
  TextFrameDispT(){}

  TextFrameDispT(TextFrame *pintf)
  {
    TAutoDriver<TextFrame>::Bind(pintf, false);
  }

  TextFrameDispT(TextFramePtr pintf)
  {
    TAutoDriver<TextFrame>::Bind(pintf, true);
  }

  TextFrameDispT& operator=(TextFrame *pintf)
  {
    TAutoDriver<TextFrame>::Bind(pintf, false);
    return *this;
  }

  TextFrameDispT& operator=(TextFramePtr pintf)
  {
    TAutoDriver<TextFrame>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MarginBottom(float* MarginBottom/*[out,retval]*/);
  float           __fastcall get_MarginBottom(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MarginBottom(float MarginBottom/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MarginLeft(float* MarginLeft/*[out,retval]*/);
  float           __fastcall get_MarginLeft(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MarginLeft(float MarginLeft/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MarginRight(float* MarginRight/*[out,retval]*/);
  float           __fastcall get_MarginRight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MarginRight(float MarginRight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MarginTop(float* MarginTop/*[out,retval]*/);
  float           __fastcall get_MarginTop(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MarginTop(float MarginTop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Orientation(Office_2k::MsoTextOrientation* Orientation/*[out,retval]*/);
  Office_2k::MsoTextOrientation __fastcall get_Orientation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Orientation(Office_2k::MsoTextOrientation Orientation/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   float           MarginBottom = {read = get_MarginBottom, write = set_MarginBottom};
  __property   float           MarginLeft = {read = get_MarginLeft, write = set_MarginLeft};
  __property   float           MarginRight = {read = get_MarginRight, write = set_MarginRight};
  __property   float           MarginTop = {read = get_MarginTop, write = set_MarginTop};
  __property   Office_2k::MsoTextOrientation Orientation = {read = get_Orientation, write = set_Orientation};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef TextFrameDispT<TextFrame> TextFrameDisp;

typedef TComInterface<ThreeDFormat>  TCOMThreeDFormat;

// *********************************************************************//
// DispIntf:  ThreeDFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0321-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class ThreeDFormatDispT : public TAutoDriver<ThreeDFormat>
{
public:
  ThreeDFormatDispT(){}

  ThreeDFormatDispT(ThreeDFormat *pintf)
  {
    TAutoDriver<ThreeDFormat>::Bind(pintf, false);
  }

  ThreeDFormatDispT(ThreeDFormatPtr pintf)
  {
    TAutoDriver<ThreeDFormat>::Bind(pintf, true);
  }

  ThreeDFormatDispT& operator=(ThreeDFormat *pintf)
  {
    TAutoDriver<ThreeDFormat>::Bind(pintf, false);
    return *this;
  }

  ThreeDFormatDispT& operator=(ThreeDFormatPtr pintf)
  {
    TAutoDriver<ThreeDFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IncrementRotationX(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IncrementRotationY(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ResetRotation();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetThreeDFormat(Office_2k::MsoPresetThreeDFormat PresetThreeDFormat/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetExtrusionDirection(Office_2k::MsoPresetExtrusionDirection PresetExtrusionDirection/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Depth(float* Depth/*[out,retval]*/);
  float           __fastcall get_Depth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Depth(float Depth/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ExtrusionColor(Office_2k::ColorFormatPtr* ExtrusionColor/*[out,retval]*/);
  Office_2k::ColorFormatPtr __fastcall get_ExtrusionColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ExtrusionColorType(Office_2k::MsoExtrusionColorType* ExtrusionColorType/*[out,retval]*/);
  Office_2k::MsoExtrusionColorType __fastcall get_ExtrusionColorType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ExtrusionColorType(Office_2k::MsoExtrusionColorType ExtrusionColorType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Perspective(Office_2k::MsoTriState* Perspective/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Perspective(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Perspective(Office_2k::MsoTriState Perspective/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PresetExtrusionDirection(Office_2k::MsoPresetExtrusionDirection* PresetExtrusionDirection/*[out,retval]*/);
  Office_2k::MsoPresetExtrusionDirection __fastcall get_PresetExtrusionDirection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PresetLightingDirection(Office_2k::MsoPresetLightingDirection* PresetLightingDirection/*[out,retval]*/);
  Office_2k::MsoPresetLightingDirection __fastcall get_PresetLightingDirection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PresetLightingDirection(Office_2k::MsoPresetLightingDirection PresetLightingDirection/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PresetLightingSoftness(Office_2k::MsoPresetLightingSoftness* PresetLightingSoftness/*[out,retval]*/);
  Office_2k::MsoPresetLightingSoftness __fastcall get_PresetLightingSoftness(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PresetLightingSoftness(Office_2k::MsoPresetLightingSoftness PresetLightingSoftness/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PresetMaterial(Office_2k::MsoPresetMaterial* PresetMaterial/*[out,retval]*/);
  Office_2k::MsoPresetMaterial __fastcall get_PresetMaterial(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PresetMaterial(Office_2k::MsoPresetMaterial PresetMaterial/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PresetThreeDFormat(Office_2k::MsoPresetThreeDFormat* PresetThreeDFormat/*[out,retval]*/);
  Office_2k::MsoPresetThreeDFormat __fastcall get_PresetThreeDFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RotationX(float* RotationX/*[out,retval]*/);
  float           __fastcall get_RotationX(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RotationX(float RotationX/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RotationY(float* RotationY/*[out,retval]*/);
  float           __fastcall get_RotationY(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RotationY(float RotationY/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_2k::MsoTriState Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   float           Depth = {read = get_Depth, write = set_Depth};
  __property   Office_2k::ColorFormatPtr ExtrusionColor = {read = get_ExtrusionColor};
  __property   Office_2k::MsoExtrusionColorType ExtrusionColorType = {read = get_ExtrusionColorType, write = set_ExtrusionColorType};
  __property   Office_2k::MsoTriState Perspective = {read = get_Perspective, write = set_Perspective};
  __property   Office_2k::MsoPresetExtrusionDirection PresetExtrusionDirection = {read = get_PresetExtrusionDirection};
  __property   Office_2k::MsoPresetLightingDirection PresetLightingDirection = {read = get_PresetLightingDirection, write = set_PresetLightingDirection};
  __property   Office_2k::MsoPresetLightingSoftness PresetLightingSoftness = {read = get_PresetLightingSoftness, write = set_PresetLightingSoftness};
  __property   Office_2k::MsoPresetMaterial PresetMaterial = {read = get_PresetMaterial, write = set_PresetMaterial};
  __property   Office_2k::MsoPresetThreeDFormat PresetThreeDFormat = {read = get_PresetThreeDFormat};
  __property   float           RotationX = {read = get_RotationX, write = set_RotationX};
  __property   float           RotationY = {read = get_RotationY, write = set_RotationY};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef ThreeDFormatDispT<ThreeDFormat> ThreeDFormatDisp;

typedef TComInterface<IMsoDispCagNotifySink>  TCOMIMsoDispCagNotifySink;

// *********************************************************************//
// DispIntf:  IMsoDispCagNotifySink
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0359-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class IMsoDispCagNotifySinkDispT : public TAutoDriver<IMsoDispCagNotifySink>
{
public:
  IMsoDispCagNotifySinkDispT(){}

  IMsoDispCagNotifySinkDispT(IMsoDispCagNotifySink *pintf)
  {
    TAutoDriver<IMsoDispCagNotifySink>::Bind(pintf, false);
  }

  IMsoDispCagNotifySinkDispT(IMsoDispCagNotifySinkPtr pintf)
  {
    TAutoDriver<IMsoDispCagNotifySink>::Bind(pintf, true);
  }

  IMsoDispCagNotifySinkDispT& operator=(IMsoDispCagNotifySink *pintf)
  {
    TAutoDriver<IMsoDispCagNotifySink>::Bind(pintf, false);
    return *this;
  }

  IMsoDispCagNotifySinkDispT& operator=(IMsoDispCagNotifySinkPtr pintf)
  {
    TAutoDriver<IMsoDispCagNotifySink>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall InsertClip(LPUNKNOWN pClipMoniker/*[in]*/, 
                                                   LPUNKNOWN pItemMoniker/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall WindowIsClosing();

};
typedef IMsoDispCagNotifySinkDispT<IMsoDispCagNotifySink> IMsoDispCagNotifySinkDisp;

typedef TComInterface<Balloon>  TCOMBalloon;

// *********************************************************************//
// DispIntf:  Balloon
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0324-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class BalloonDispT : public TAutoDriver<Balloon>
{
public:
  BalloonDispT(){}

  BalloonDispT(Balloon *pintf)
  {
    TAutoDriver<Balloon>::Bind(pintf, false);
  }

  BalloonDispT(BalloonPtr pintf)
  {
    TAutoDriver<Balloon>::Bind(pintf, true);
  }

  BalloonDispT& operator=(Balloon *pintf)
  {
    TAutoDriver<Balloon>::Bind(pintf, false);
    return *this;
  }

  BalloonDispT& operator=(BalloonPtr pintf)
  {
    TAutoDriver<Balloon>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Checkboxes(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Checkboxes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Labels(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Labels(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BalloonType(Office_2k::MsoBalloonType pbty/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BalloonType(Office_2k::MsoBalloonType* pbty/*[out,retval]*/);
  Office_2k::MsoBalloonType __fastcall get_BalloonType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Icon(Office_2k::MsoIconType picn/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Icon(Office_2k::MsoIconType* picn/*[out,retval]*/);
  Office_2k::MsoIconType __fastcall get_Icon(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Heading(BSTR pbstr/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Heading(BSTR* pbstr/*[out,retval]*/);
  BSTR            __fastcall get_Heading(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Text(BSTR pbstr/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Text(BSTR* pbstr/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Mode(Office_2k::MsoModeType pmd/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Mode(Office_2k::MsoModeType* pmd/*[out,retval]*/);
  Office_2k::MsoModeType __fastcall get_Mode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Animation(Office_2k::MsoAnimationType pfca/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Animation(Office_2k::MsoAnimationType* pfca/*[out,retval]*/);
  Office_2k::MsoAnimationType __fastcall get_Animation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Button(Office_2k::MsoButtonSetType psbs/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Button(Office_2k::MsoButtonSetType* psbs/*[out,retval]*/);
  Office_2k::MsoButtonSetType __fastcall get_Button(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Callback(BSTR pbstr/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Callback(BSTR* pbstr/*[out,retval]*/);
  BSTR            __fastcall get_Callback(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Private(long plPrivate/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Private(long* plPrivate/*[out,retval]*/);
  long            __fastcall get_Private(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetAvoidRectangle(int Left/*[in]*/, int Top/*[in]*/, 
                                                          int Right/*[in]*/, int Bottom/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Show(Office_2k::MsoBalloonButtonType* pibtn/*[out,retval]*/);
  Office_2k::MsoBalloonButtonType __fastcall Show(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Close();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Checkboxes = {read = get_Checkboxes};
  __property   LPDISPATCH      Labels = {read = get_Labels};
  __property   Office_2k::MsoBalloonType BalloonType = {read = get_BalloonType, write = set_BalloonType};
  __property   Office_2k::MsoIconType Icon = {read = get_Icon, write = set_Icon};
  __property   BSTR            Heading = {read = get_Heading, write = set_Heading};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   Office_2k::MsoModeType Mode = {read = get_Mode, write = set_Mode};
  __property   Office_2k::MsoAnimationType Animation = {read = get_Animation, write = set_Animation};
  __property   Office_2k::MsoButtonSetType Button = {read = get_Button, write = set_Button};
  __property   BSTR            Callback = {read = get_Callback, write = set_Callback};
  __property   long            Private = {read = get_Private, write = set_Private};
  __property   BSTR            Name = {read = get_Name};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef BalloonDispT<Balloon> BalloonDisp;

typedef TComInterface<BalloonCheckboxes>  TCOMBalloonCheckboxes;

// *********************************************************************//
// DispIntf:  BalloonCheckboxes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0326-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class BalloonCheckboxesDispT : public TAutoDriver<BalloonCheckboxes>
{
public:
  BalloonCheckboxesDispT(){}

  BalloonCheckboxesDispT(BalloonCheckboxes *pintf)
  {
    TAutoDriver<BalloonCheckboxes>::Bind(pintf, false);
  }

  BalloonCheckboxesDispT(BalloonCheckboxesPtr pintf)
  {
    TAutoDriver<BalloonCheckboxes>::Bind(pintf, true);
  }

  BalloonCheckboxesDispT& operator=(BalloonCheckboxes *pintf)
  {
    TAutoDriver<BalloonCheckboxes>::Bind(pintf, false);
    return *this;
  }

  BalloonCheckboxesDispT& operator=(BalloonCheckboxesPtr pintf)
  {
    TAutoDriver<BalloonCheckboxes>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(int Index/*[in]*/, 
                                                 LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Item(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(int* pccbx/*[out,retval]*/);
  int             __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Count(int pccbx/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppienum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   BSTR            Name = {read = get_Name};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count, write = set_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef BalloonCheckboxesDispT<BalloonCheckboxes> BalloonCheckboxesDisp;

typedef TComInterface<BalloonCheckbox>  TCOMBalloonCheckbox;

// *********************************************************************//
// DispIntf:  BalloonCheckbox
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0328-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class BalloonCheckboxDispT : public TAutoDriver<BalloonCheckbox>
{
public:
  BalloonCheckboxDispT(){}

  BalloonCheckboxDispT(BalloonCheckbox *pintf)
  {
    TAutoDriver<BalloonCheckbox>::Bind(pintf, false);
  }

  BalloonCheckboxDispT(BalloonCheckboxPtr pintf)
  {
    TAutoDriver<BalloonCheckbox>::Bind(pintf, true);
  }

  BalloonCheckboxDispT& operator=(BalloonCheckbox *pintf)
  {
    TAutoDriver<BalloonCheckbox>::Bind(pintf, false);
    return *this;
  }

  BalloonCheckboxDispT& operator=(BalloonCheckboxPtr pintf)
  {
    TAutoDriver<BalloonCheckbox>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Item(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Checked(TOLEBOOL pvarfChecked/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Checked(TOLEBOOL* pvarfChecked/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Checked(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Text(BSTR pbstr/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Text(BSTR* pbstr/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   BSTR            Item = {read = get_Item};
  __property   BSTR            Name = {read = get_Name};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   TOLEBOOL        Checked = {read = get_Checked, write = set_Checked};
  __property   BSTR            Text = {read = get_Text, write = set_Text};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef BalloonCheckboxDispT<BalloonCheckbox> BalloonCheckboxDisp;

typedef TComInterface<BalloonLabels>  TCOMBalloonLabels;

// *********************************************************************//
// DispIntf:  BalloonLabels
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C032E-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class BalloonLabelsDispT : public TAutoDriver<BalloonLabels>
{
public:
  BalloonLabelsDispT(){}

  BalloonLabelsDispT(BalloonLabels *pintf)
  {
    TAutoDriver<BalloonLabels>::Bind(pintf, false);
  }

  BalloonLabelsDispT(BalloonLabelsPtr pintf)
  {
    TAutoDriver<BalloonLabels>::Bind(pintf, true);
  }

  BalloonLabelsDispT& operator=(BalloonLabels *pintf)
  {
    TAutoDriver<BalloonLabels>::Bind(pintf, false);
    return *this;
  }

  BalloonLabelsDispT& operator=(BalloonLabelsPtr pintf)
  {
    TAutoDriver<BalloonLabels>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(int Index/*[in]*/, 
                                                 LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Item(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(int* pcwz/*[out,retval]*/);
  int             __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Count(int pcwz/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppienum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   BSTR            Name = {read = get_Name};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count, write = set_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef BalloonLabelsDispT<BalloonLabels> BalloonLabelsDisp;

typedef TComInterface<BalloonLabel>  TCOMBalloonLabel;

// *********************************************************************//
// DispIntf:  BalloonLabel
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0330-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class BalloonLabelDispT : public TAutoDriver<BalloonLabel>
{
public:
  BalloonLabelDispT(){}

  BalloonLabelDispT(BalloonLabel *pintf)
  {
    TAutoDriver<BalloonLabel>::Bind(pintf, false);
  }

  BalloonLabelDispT(BalloonLabelPtr pintf)
  {
    TAutoDriver<BalloonLabel>::Bind(pintf, true);
  }

  BalloonLabelDispT& operator=(BalloonLabel *pintf)
  {
    TAutoDriver<BalloonLabel>::Bind(pintf, false);
    return *this;
  }

  BalloonLabelDispT& operator=(BalloonLabelPtr pintf)
  {
    TAutoDriver<BalloonLabel>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Item(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Text(BSTR pbstr/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Text(BSTR* pbstr/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   BSTR            Item = {read = get_Item};
  __property   BSTR            Name = {read = get_Name};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Text = {read = get_Text, write = set_Text};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef BalloonLabelDispT<BalloonLabel> BalloonLabelDisp;

typedef TComInterface<AnswerWizardFiles>  TCOMAnswerWizardFiles;

// *********************************************************************//
// DispIntf:  AnswerWizardFiles
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0361-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class AnswerWizardFilesDispT : public TAutoDriver<AnswerWizardFiles>
{
public:
  AnswerWizardFilesDispT(){}

  AnswerWizardFilesDispT(AnswerWizardFiles *pintf)
  {
    TAutoDriver<AnswerWizardFiles>::Bind(pintf, false);
  }

  AnswerWizardFilesDispT(AnswerWizardFilesPtr pintf)
  {
    TAutoDriver<AnswerWizardFiles>::Bind(pintf, true);
  }

  AnswerWizardFilesDispT& operator=(AnswerWizardFiles *pintf)
  {
    TAutoDriver<AnswerWizardFiles>::Bind(pintf, false);
    return *this;
  }

  AnswerWizardFilesDispT& operator=(AnswerWizardFilesPtr pintf)
  {
    TAutoDriver<AnswerWizardFiles>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(int Index/*[in]*/, BSTR* pbstr/*[out,retval]*/);
  BSTR            __fastcall get_Item(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(int* pCount/*[out,retval]*/);
  int             __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(BSTR FileName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(BSTR FileName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef AnswerWizardFilesDispT<AnswerWizardFiles> AnswerWizardFilesDisp;

typedef TComInterface<AnswerWizard>  TCOMAnswerWizard;

// *********************************************************************//
// DispIntf:  AnswerWizard
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0360-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class AnswerWizardDispT : public TAutoDriver<AnswerWizard>
{
public:
  AnswerWizardDispT(){}

  AnswerWizardDispT(AnswerWizard *pintf)
  {
    TAutoDriver<AnswerWizard>::Bind(pintf, false);
  }

  AnswerWizardDispT(AnswerWizardPtr pintf)
  {
    TAutoDriver<AnswerWizard>::Bind(pintf, true);
  }

  AnswerWizardDispT& operator=(AnswerWizard *pintf)
  {
    TAutoDriver<AnswerWizard>::Bind(pintf, false);
    return *this;
  }

  AnswerWizardDispT& operator=(AnswerWizardPtr pintf)
  {
    TAutoDriver<AnswerWizard>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Files(Office_2k::AnswerWizardFilesPtr* Files/*[out,retval]*/);
  Office_2k::AnswerWizardFilesPtr __fastcall get_Files(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ClearFileList();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ResetFileList();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::AnswerWizardFilesPtr Files = {read = get_Files};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef AnswerWizardDispT<AnswerWizard> AnswerWizardDisp;

typedef TComInterface<Assistant>  TCOMAssistant;

// *********************************************************************//
// DispIntf:  Assistant
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0322-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class AssistantDispT : public TAutoDriver<Assistant>
{
public:
  AssistantDispT(){}

  AssistantDispT(Assistant *pintf)
  {
    TAutoDriver<Assistant>::Bind(pintf, false);
  }

  AssistantDispT(AssistantPtr pintf)
  {
    TAutoDriver<Assistant>::Bind(pintf, true);
  }

  AssistantDispT& operator=(Assistant *pintf)
  {
    TAutoDriver<Assistant>::Bind(pintf, false);
    return *this;
  }

  AssistantDispT& operator=(AssistantPtr pintf)
  {
    TAutoDriver<Assistant>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Move(int xLeft/*[in]*/, int yTop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(int pyTop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(int* pyTop/*[out,retval]*/);
  int             __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(int pxLeft/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(int* pxLeft/*[out,retval]*/);
  int             __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Help();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall StartWizard(TOLEBOOL On/*[in]*/, BSTR Callback/*[in]*/, 
                                                    long PrivateX/*[in]*/, 
                                                    TVariantInParam Animation/*[in,opt]*/, 
                                                    TVariantInParam CustomTeaser/*[in,opt]*/, 
                                                    TVariantInParam Top/*[in,opt]*/, 
                                                    TVariantInParam Left/*[in,opt]*/, 
                                                    TVariantInParam Bottom/*[in,opt]*/, 
                                                    TVariantInParam Right/*[in,opt]*/, 
                                                    long* plWizID/*[out,retval]*/);
  long            __fastcall StartWizard(TOLEBOOL On/*[in]*/, BSTR Callback/*[in]*/, 
                                         long PrivateX/*[in]*/, 
                                         TVariantInParam Animation/*[in,opt]*/= TNoParam(), 
                                         TVariantInParam CustomTeaser/*[in,opt]*/= TNoParam(), 
                                         TVariantInParam Top/*[in,opt]*/= TNoParam(), 
                                         TVariantInParam Left/*[in,opt]*/= TNoParam(), 
                                         TVariantInParam Bottom/*[in,opt]*/= TNoParam(), 
                                         TVariantInParam Right/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall EndWizard(long WizardID/*[in]*/, 
                                                  TOLEBOOL varfSuccess/*[in]*/, 
                                                  TVariantInParam Animation/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ActivateWizard(long WizardID/*[in]*/, 
                                                       Office_2k::MsoWizardActType act/*[in]*/, 
                                                       TVariantInParam Animation/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ResetTips();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NewBalloon(Office_2k::BalloonPtr* ppibal/*[out,retval]*/);
  Office_2k::BalloonPtr __fastcall get_NewBalloon(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BalloonError(Office_2k::MsoBalloonErrorType* pbne/*[out,retval]*/);
  Office_2k::MsoBalloonErrorType __fastcall get_BalloonError(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(TOLEBOOL* pvarfVisible/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(TOLEBOOL pvarfVisible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Animation(Office_2k::MsoAnimationType* pfca/*[out,retval]*/);
  Office_2k::MsoAnimationType __fastcall get_Animation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Animation(Office_2k::MsoAnimationType pfca/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Reduced(TOLEBOOL* pvarfReduced/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Reduced(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Reduced(TOLEBOOL pvarfReduced/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AssistWithHelp(TOLEBOOL pvarfAssistWithHelp/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AssistWithHelp(TOLEBOOL* pvarfAssistWithHelp/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AssistWithHelp(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AssistWithWizards(TOLEBOOL pvarfAssistWithWizards/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AssistWithWizards(TOLEBOOL* pvarfAssistWithWizards/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AssistWithWizards(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AssistWithAlerts(TOLEBOOL pvarfAssistWithAlerts/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AssistWithAlerts(TOLEBOOL* pvarfAssistWithAlerts/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AssistWithAlerts(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MoveWhenInTheWay(TOLEBOOL pvarfMove/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MoveWhenInTheWay(TOLEBOOL* pvarfMove/*[out,retval]*/);
  TOLEBOOL        __fastcall get_MoveWhenInTheWay(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Sounds(TOLEBOOL pvarfSounds/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Sounds(TOLEBOOL* pvarfSounds/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Sounds(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FeatureTips(TOLEBOOL pvarfFeatures/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FeatureTips(TOLEBOOL* pvarfFeatures/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FeatureTips(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MouseTips(TOLEBOOL pvarfMouse/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MouseTips(TOLEBOOL* pvarfMouse/*[out,retval]*/);
  TOLEBOOL        __fastcall get_MouseTips(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_KeyboardShortcutTips(TOLEBOOL pvarfKeyboardShortcuts/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_KeyboardShortcutTips(TOLEBOOL* pvarfKeyboardShortcuts/*[out,retval]*/);
  TOLEBOOL        __fastcall get_KeyboardShortcutTips(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HighPriorityTips(TOLEBOOL pvarfHighPriorityTips/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HighPriorityTips(TOLEBOOL* pvarfHighPriorityTips/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HighPriorityTips(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TipOfDay(TOLEBOOL pvarfTipOfDay/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TipOfDay(TOLEBOOL* pvarfTipOfDay/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TipOfDay(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GuessHelp(TOLEBOOL pvarfGuessHelp/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GuessHelp(TOLEBOOL* pvarfGuessHelp/*[out,retval]*/);
  TOLEBOOL        __fastcall get_GuessHelp(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SearchWhenProgramming(TOLEBOOL pvarfSearchInProgram/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SearchWhenProgramming(TOLEBOOL* pvarfSearchInProgram/*[out,retval]*/);
  TOLEBOOL        __fastcall get_SearchWhenProgramming(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Item(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FileName(BSTR* pbstr/*[out,retval]*/);
  BSTR            __fastcall get_FileName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FileName(BSTR pbstr/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_On(TOLEBOOL* pvarfOn/*[out,retval]*/);
  TOLEBOOL        __fastcall get_On(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_On(TOLEBOOL pvarfOn/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Top = {read = get_Top, write = set_Top};
  __property   int             Left = {read = get_Left, write = set_Left};
  __property   Office_2k::BalloonPtr NewBalloon = {read = get_NewBalloon};
  __property   Office_2k::MsoBalloonErrorType BalloonError = {read = get_BalloonError};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   Office_2k::MsoAnimationType Animation = {read = get_Animation, write = set_Animation};
  __property   TOLEBOOL        Reduced = {read = get_Reduced, write = set_Reduced};
  __property   TOLEBOOL        AssistWithHelp = {read = get_AssistWithHelp, write = set_AssistWithHelp};
  __property   TOLEBOOL        AssistWithWizards = {read = get_AssistWithWizards, write = set_AssistWithWizards};
  __property   TOLEBOOL        AssistWithAlerts = {read = get_AssistWithAlerts, write = set_AssistWithAlerts};
  __property   TOLEBOOL        MoveWhenInTheWay = {read = get_MoveWhenInTheWay, write = set_MoveWhenInTheWay};
  __property   TOLEBOOL        Sounds = {read = get_Sounds, write = set_Sounds};
  __property   TOLEBOOL        FeatureTips = {read = get_FeatureTips, write = set_FeatureTips};
  __property   TOLEBOOL        MouseTips = {read = get_MouseTips, write = set_MouseTips};
  __property   TOLEBOOL        KeyboardShortcutTips = {read = get_KeyboardShortcutTips, write = set_KeyboardShortcutTips};
  __property   TOLEBOOL        HighPriorityTips = {read = get_HighPriorityTips, write = set_HighPriorityTips};
  __property   TOLEBOOL        TipOfDay = {read = get_TipOfDay, write = set_TipOfDay};
  __property   TOLEBOOL        GuessHelp = {read = get_GuessHelp, write = set_GuessHelp};
  __property   TOLEBOOL        SearchWhenProgramming = {read = get_SearchWhenProgramming, write = set_SearchWhenProgramming};
  __property   BSTR            Item = {read = get_Item};
  __property   BSTR            FileName = {read = get_FileName, write = set_FileName};
  __property   BSTR            Name = {read = get_Name};
  __property   TOLEBOOL        On = {read = get_On, write = set_On};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef AssistantDispT<Assistant> AssistantDisp;

// *********************************************************************//
// DispIntf:  DocumentProperty
// Flags:     (4096) Dispatchable
// GUID:      {2DF8D04E-5BFA-101B-BDE5-00AA0044DE52}
// *********************************************************************//
template<class T>
class DocumentPropertyDispT : public TAutoDriver<DocumentProperty>
{
public:
  DocumentPropertyDispT(){}

  DocumentPropertyDispT(DocumentProperty *pintf)
  {
    TAutoDriver<DocumentProperty>::Bind(pintf, false);
  }

  DocumentPropertyDispT(DocumentPropertyPtr pintf)
  {
    TAutoDriver<DocumentProperty>::Bind(pintf, true);
  }

  DocumentPropertyDispT& operator=(DocumentProperty *pintf)
  {
    TAutoDriver<DocumentProperty>::Bind(pintf, false);
    return *this;
  }

  DocumentPropertyDispT& operator=(DocumentPropertyPtr pintf)
  {
    TAutoDriver<DocumentProperty>::Bind(pintf, true);
    return *this;
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbstrRetVal/*[out,retval]*/);
  BSTR            __fastcall get_Name();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pbstrRetVal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(TVariant* pvargRetVal/*[out,retval]*/);
  TVariant        __fastcall get_Value();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(TVariantInParam pvargRetVal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Office_2k::MsoDocProperties* ptypeRetVal/*[out,retval]*/);
  Office_2k::MsoDocProperties __fastcall get_Type();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Type(Office_2k::MsoDocProperties ptypeRetVal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LinkToContent(TOLEBOOL* pfLinkRetVal/*[out,retval]*/);
  TOLEBOOL        __fastcall get_LinkToContent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LinkToContent(TOLEBOOL pfLinkRetVal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LinkSource(BSTR* pbstrSourceRetVal/*[out,retval]*/);
  BSTR            __fastcall get_LinkSource(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LinkSource(BSTR pbstrSourceRetVal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {write = set_Name};
  __property   Office_2k::MsoDocProperties Type = {write = set_Type};
  __property   TOLEBOOL        LinkToContent = {read = get_LinkToContent, write = set_LinkToContent};
  __property   BSTR            LinkSource = {read = get_LinkSource, write = set_LinkSource};
  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef DocumentPropertyDispT<DocumentProperty> DocumentPropertyDisp;

// *********************************************************************//
// DispIntf:  DocumentProperties
// Flags:     (4096) Dispatchable
// GUID:      {2DF8D04D-5BFA-101B-BDE5-00AA0044DE52}
// *********************************************************************//
template<class T>
class DocumentPropertiesDispT : public TAutoDriver<DocumentProperties>
{
public:
  DocumentPropertiesDispT(){}

  DocumentPropertiesDispT(DocumentProperties *pintf)
  {
    TAutoDriver<DocumentProperties>::Bind(pintf, false);
  }

  DocumentPropertiesDispT(DocumentPropertiesPtr pintf)
  {
    TAutoDriver<DocumentProperties>::Bind(pintf, true);
  }

  DocumentPropertiesDispT& operator=(DocumentProperties *pintf)
  {
    TAutoDriver<DocumentProperties>::Bind(pintf, false);
    return *this;
  }

  DocumentPropertiesDispT& operator=(DocumentPropertiesPtr pintf)
  {
    TAutoDriver<DocumentProperties>::Bind(pintf, true);
    return *this;
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(TVariantInParam Index/*[in]*/, 
                                                 Office_2k::DocumentPropertyPtr* ppIDocProp/*[out,retval]*/);
  Office_2k::DocumentPropertyPtr __fastcall get_Item(TVariantInParam Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* pc/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(BSTR Name/*[in]*/, TOLEBOOL LinkToContent/*[in]*/, 
                                            TVariantInParam Type/*[in,opt]*/, 
                                            TVariantInParam Value/*[in,opt]*/, 
                                            TVariantInParam LinkSource/*[in,opt]*/, 
                                            Office_2k::DocumentPropertyPtr* ppIDocProp/*[out,retval]*/);
  Office_2k::DocumentPropertyPtr __fastcall Add(BSTR Name/*[in]*/, TOLEBOOL LinkToContent/*[in]*/, 
                                                TVariantInParam Type/*[in,opt]*/= TNoParam(), 
                                                TVariantInParam Value/*[in,opt]*/= TNoParam(), 
                                                TVariantInParam LinkSource/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunkEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef DocumentPropertiesDispT<DocumentProperties> DocumentPropertiesDisp;

typedef TComInterface<IFoundFiles>  TCOMIFoundFiles;

// *********************************************************************//
// DispIntf:  IFoundFiles
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0338-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class IFoundFilesDispT : public TAutoDriver<IFoundFiles>
{
public:
  IFoundFilesDispT(){}

  IFoundFilesDispT(IFoundFiles *pintf)
  {
    TAutoDriver<IFoundFiles>::Bind(pintf, false);
  }

  IFoundFilesDispT(IFoundFilesPtr pintf)
  {
    TAutoDriver<IFoundFiles>::Bind(pintf, true);
  }

  IFoundFilesDispT& operator=(IFoundFiles *pintf)
  {
    TAutoDriver<IFoundFiles>::Bind(pintf, false);
    return *this;
  }

  IFoundFilesDispT& operator=(IFoundFilesPtr pintf)
  {
    TAutoDriver<IFoundFiles>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(int Index/*[in]*/, BSTR* pbstr/*[out,retval]*/);
  BSTR            __fastcall get_Item(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(int* pCount/*[out,retval]*/);
  int             __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunkEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   int             Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef IFoundFilesDispT<IFoundFiles> IFoundFilesDisp;

typedef TComInterface<IFind>  TCOMIFind;

// *********************************************************************//
// DispIntf:  IFind
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0337-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class IFindDispT : public TAutoDriver<IFind>
{
public:
  IFindDispT(){}

  IFindDispT(IFind *pintf)
  {
    TAutoDriver<IFind>::Bind(pintf, false);
  }

  IFindDispT(IFindPtr pintf)
  {
    TAutoDriver<IFind>::Bind(pintf, true);
  }

  IFindDispT& operator=(IFind *pintf)
  {
    TAutoDriver<IFind>::Bind(pintf, false);
    return *this;
  }

  IFindDispT& operator=(IFindPtr pintf)
  {
    TAutoDriver<IFind>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SearchPath(BSTR* pbstr/*[out,retval]*/);
  BSTR            __fastcall get_SearchPath(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbstr/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SubDir(TOLEBOOL* retval/*[out,retval]*/);
  TOLEBOOL        __fastcall get_SubDir(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Title(BSTR* pbstr/*[out,retval]*/);
  BSTR            __fastcall get_Title(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Author(BSTR* pbstr/*[out,retval]*/);
  BSTR            __fastcall get_Author(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Keywords(BSTR* pbstr/*[out,retval]*/);
  BSTR            __fastcall get_Keywords(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Subject(BSTR* pbstr/*[out,retval]*/);
  BSTR            __fastcall get_Subject(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Options(Office_2k::MsoFileFindOptions* penmOptions/*[out,retval]*/);
  Office_2k::MsoFileFindOptions __fastcall get_Options(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MatchCase(TOLEBOOL* retval/*[out,retval]*/);
  TOLEBOOL        __fastcall get_MatchCase(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Text(BSTR* pbstr/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PatternMatch(TOLEBOOL* retval/*[out,retval]*/);
  TOLEBOOL        __fastcall get_PatternMatch(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DateSavedFrom(TVariant* pdatSavedFrom/*[out,retval]*/);
  TVariant        __fastcall get_DateSavedFrom(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DateSavedTo(TVariant* pdatSavedTo/*[out,retval]*/);
  TVariant        __fastcall get_DateSavedTo(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SavedBy(BSTR* pbstr/*[out,retval]*/);
  BSTR            __fastcall get_SavedBy(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DateCreatedFrom(TVariant* pdatCreatedFrom/*[out,retval]*/);
  TVariant        __fastcall get_DateCreatedFrom(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DateCreatedTo(TVariant* pdatCreatedTo/*[out,retval]*/);
  TVariant        __fastcall get_DateCreatedTo(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_View(Office_2k::MsoFileFindView* penmView/*[out,retval]*/);
  Office_2k::MsoFileFindView __fastcall get_View(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SortBy(Office_2k::MsoFileFindSortBy* penmSortBy/*[out,retval]*/);
  Office_2k::MsoFileFindSortBy __fastcall get_SortBy(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ListBy(Office_2k::MsoFileFindListBy* penmListBy/*[out,retval]*/);
  Office_2k::MsoFileFindListBy __fastcall get_ListBy(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SelectedFile(int* pintSelectedFile/*[out,retval]*/);
  int             __fastcall get_SelectedFile(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Results(Office_2k::IFoundFilesPtr* pdisp/*[out,retval]*/);
  Office_2k::IFoundFilesPtr __fastcall get_Results(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Show(int* pRows/*[out,retval]*/);
  int             __fastcall Show(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SearchPath(BSTR pbstr/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pbstr/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SubDir(TOLEBOOL retval/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Title(BSTR pbstr/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Author(BSTR pbstr/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Keywords(BSTR pbstr/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Subject(BSTR pbstr/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Options(Office_2k::MsoFileFindOptions penmOptions/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MatchCase(TOLEBOOL retval/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Text(BSTR pbstr/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PatternMatch(TOLEBOOL retval/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DateSavedFrom(TVariantInParam pdatSavedFrom/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DateSavedTo(TVariantInParam pdatSavedTo/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SavedBy(BSTR pbstr/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DateCreatedFrom(TVariantInParam pdatCreatedFrom/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DateCreatedTo(TVariantInParam pdatCreatedTo/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_View(Office_2k::MsoFileFindView penmView/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SortBy(Office_2k::MsoFileFindSortBy penmSortBy/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ListBy(Office_2k::MsoFileFindListBy penmListBy/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SelectedFile(int pintSelectedFile/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Execute();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Load(BSTR bstrQueryName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Save(BSTR bstrQueryName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(BSTR bstrQueryName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FileType(long* plFileType/*[out,retval]*/);
  long            __fastcall get_FileType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FileType(long plFileType/*[in]*/);

  __property   BSTR            SearchPath = {read = get_SearchPath, write = set_SearchPath};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   TOLEBOOL        SubDir = {read = get_SubDir, write = set_SubDir};
  __property   BSTR            Title = {read = get_Title, write = set_Title};
  __property   BSTR            Author = {read = get_Author, write = set_Author};
  __property   BSTR            Keywords = {read = get_Keywords, write = set_Keywords};
  __property   BSTR            Subject = {read = get_Subject, write = set_Subject};
  __property   Office_2k::MsoFileFindOptions Options = {read = get_Options, write = set_Options};
  __property   TOLEBOOL        MatchCase = {read = get_MatchCase, write = set_MatchCase};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   TOLEBOOL        PatternMatch = {read = get_PatternMatch, write = set_PatternMatch};
  __property   BSTR            SavedBy = {read = get_SavedBy, write = set_SavedBy};
  __property   Office_2k::MsoFileFindView View = {read = get_View, write = set_View};
  __property   Office_2k::MsoFileFindSortBy SortBy = {read = get_SortBy, write = set_SortBy};
  __property   Office_2k::MsoFileFindListBy ListBy = {read = get_ListBy, write = set_ListBy};
  __property   int             SelectedFile = {read = get_SelectedFile, write = set_SelectedFile};
  __property   Office_2k::IFoundFilesPtr Results = {read = get_Results};
  __property   long            FileType = {read = get_FileType, write = set_FileType};
};
typedef IFindDispT<IFind> IFindDisp;

typedef TComInterface<FoundFiles>  TCOMFoundFiles;

// *********************************************************************//
// DispIntf:  FoundFiles
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {000C0331-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class FoundFilesDispT : public TAutoDriver<FoundFiles>
{
public:
  FoundFilesDispT(){}

  FoundFilesDispT(FoundFiles *pintf)
  {
    TAutoDriver<FoundFiles>::Bind(pintf, false);
  }

  FoundFilesDispT(FoundFilesPtr pintf)
  {
    TAutoDriver<FoundFiles>::Bind(pintf, true);
  }

  FoundFilesDispT& operator=(FoundFiles *pintf)
  {
    TAutoDriver<FoundFiles>::Bind(pintf, false);
    return *this;
  }

  FoundFilesDispT& operator=(FoundFilesPtr pintf)
  {
    TAutoDriver<FoundFiles>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(int Index/*[in]*/, BSTR* pbstrFile/*[out,retval]*/);
  BSTR            __fastcall get_Item(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* pc/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunkEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef FoundFilesDispT<FoundFiles> FoundFilesDisp;

typedef TComInterface<PropertyTest>  TCOMPropertyTest;

// *********************************************************************//
// DispIntf:  PropertyTest
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0333-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class PropertyTestDispT : public TAutoDriver<PropertyTest>
{
public:
  PropertyTestDispT(){}

  PropertyTestDispT(PropertyTest *pintf)
  {
    TAutoDriver<PropertyTest>::Bind(pintf, false);
  }

  PropertyTestDispT(PropertyTestPtr pintf)
  {
    TAutoDriver<PropertyTest>::Bind(pintf, true);
  }

  PropertyTestDispT& operator=(PropertyTest *pintf)
  {
    TAutoDriver<PropertyTest>::Bind(pintf, false);
    return *this;
  }

  PropertyTestDispT& operator=(PropertyTestPtr pintf)
  {
    TAutoDriver<PropertyTest>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbstrRetVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Condition(Office_2k::MsoCondition* pConditionRetVal/*[out,retval]*/);
  Office_2k::MsoCondition __fastcall get_Condition(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(TVariant* pvargRetVal/*[out,retval]*/);
  TVariant        __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SecondValue(TVariant* pvargRetVal2/*[out,retval]*/);
  TVariant        __fastcall get_SecondValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Connector(Office_2k::MsoConnector* pConnector/*[out,retval]*/);
  Office_2k::MsoConnector __fastcall get_Connector(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   BSTR            Name = {read = get_Name};
  __property   Office_2k::MsoCondition Condition = {read = get_Condition};
  __property   Office_2k::MsoConnector Connector = {read = get_Connector};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef PropertyTestDispT<PropertyTest> PropertyTestDisp;

typedef TComInterface<PropertyTests>  TCOMPropertyTests;

// *********************************************************************//
// DispIntf:  PropertyTests
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {000C0334-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class PropertyTestsDispT : public TAutoDriver<PropertyTests>
{
public:
  PropertyTestsDispT(){}

  PropertyTestsDispT(PropertyTests *pintf)
  {
    TAutoDriver<PropertyTests>::Bind(pintf, false);
  }

  PropertyTestsDispT(PropertyTestsPtr pintf)
  {
    TAutoDriver<PropertyTests>::Bind(pintf, true);
  }

  PropertyTestsDispT& operator=(PropertyTests *pintf)
  {
    TAutoDriver<PropertyTests>::Bind(pintf, false);
    return *this;
  }

  PropertyTestsDispT& operator=(PropertyTestsPtr pintf)
  {
    TAutoDriver<PropertyTests>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(int Index/*[in]*/, 
                                                 Office_2k::PropertyTestPtr* ppIDocProp/*[out,retval]*/);
  Office_2k::PropertyTestPtr __fastcall get_Item(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* pc/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(BSTR Name/*[in]*/, 
                                            Office_2k::MsoCondition Condition/*[in]*/, 
                                            TVariantInParam Value/*[in,opt]*/, 
                                            TVariantInParam SecondValue/*[in,opt]*/, 
                                            Office_2k::MsoConnector Connector/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Remove(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunkEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef PropertyTestsDispT<PropertyTests> PropertyTestsDisp;

typedef TComInterface<FileSearch>  TCOMFileSearch;

// *********************************************************************//
// DispIntf:  FileSearch
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {000C0332-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class FileSearchDispT : public TAutoDriver<FileSearch>
{
public:
  FileSearchDispT(){}

  FileSearchDispT(FileSearch *pintf)
  {
    TAutoDriver<FileSearch>::Bind(pintf, false);
  }

  FileSearchDispT(FileSearchPtr pintf)
  {
    TAutoDriver<FileSearch>::Bind(pintf, true);
  }

  FileSearchDispT& operator=(FileSearch *pintf)
  {
    TAutoDriver<FileSearch>::Bind(pintf, false);
    return *this;
  }

  FileSearchDispT& operator=(FileSearchPtr pintf)
  {
    TAutoDriver<FileSearch>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SearchSubFolders(TOLEBOOL* SearchSubFoldersRetVal/*[out,retval]*/);
  TOLEBOOL        __fastcall get_SearchSubFolders(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SearchSubFolders(TOLEBOOL SearchSubFoldersRetVal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MatchTextExactly(TOLEBOOL* MatchTextRetVal/*[out,retval]*/);
  TOLEBOOL        __fastcall get_MatchTextExactly(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MatchTextExactly(TOLEBOOL MatchTextRetVal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MatchAllWordForms(TOLEBOOL* MatchAllWordFormsRetVal/*[out,retval]*/);
  TOLEBOOL        __fastcall get_MatchAllWordForms(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MatchAllWordForms(TOLEBOOL MatchAllWordFormsRetVal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FileName(BSTR* FileNameRetVal/*[out,retval]*/);
  BSTR            __fastcall get_FileName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FileName(BSTR FileNameRetVal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FileType(Office_2k::MsoFileType* FileTypeRetVal/*[out,retval]*/);
  Office_2k::MsoFileType __fastcall get_FileType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FileType(Office_2k::MsoFileType FileTypeRetVal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LastModified(Office_2k::MsoLastModified* LastModifiedRetVal/*[out,retval]*/);
  Office_2k::MsoLastModified __fastcall get_LastModified(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LastModified(Office_2k::MsoLastModified LastModifiedRetVal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextOrProperty(BSTR* TextOrProperty/*[out,retval]*/);
  BSTR            __fastcall get_TextOrProperty(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TextOrProperty(BSTR TextOrProperty/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LookIn(BSTR* LookInRetVal/*[out,retval]*/);
  BSTR            __fastcall get_LookIn(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LookIn(BSTR LookInRetVal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Execute(Office_2k::MsoSortBy SortBy/*[in,def,opt]*/, 
                                                Office_2k::MsoSortOrder SortOrder/*[in,def,opt]*/, 
                                                TOLEBOOL AlwaysAccurate/*[in,def,opt]*/, 
                                                int* pRet/*[out,retval]*/);
  int             __fastcall Execute(Office_2k::MsoSortBy SortBy/*[in,def,opt]*/, 
                                     Office_2k::MsoSortOrder SortOrder/*[in,def,opt]*/, 
                                     TOLEBOOL AlwaysAccurate/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall NewSearch();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FoundFiles(Office_2k::FoundFilesPtr* FoundFilesRet/*[out,retval]*/);
  Office_2k::FoundFilesPtr __fastcall get_FoundFiles(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PropertyTests(Office_2k::PropertyTestsPtr* PropTestsRet/*[out,retval]*/);
  Office_2k::PropertyTestsPtr __fastcall get_PropertyTests(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   TOLEBOOL        SearchSubFolders = {read = get_SearchSubFolders, write = set_SearchSubFolders};
  __property   TOLEBOOL        MatchTextExactly = {read = get_MatchTextExactly, write = set_MatchTextExactly};
  __property   TOLEBOOL        MatchAllWordForms = {read = get_MatchAllWordForms, write = set_MatchAllWordForms};
  __property   BSTR            FileName = {read = get_FileName, write = set_FileName};
  __property   Office_2k::MsoFileType FileType = {read = get_FileType, write = set_FileType};
  __property   Office_2k::MsoLastModified LastModified = {read = get_LastModified, write = set_LastModified};
  __property   BSTR            TextOrProperty = {read = get_TextOrProperty, write = set_TextOrProperty};
  __property   BSTR            LookIn = {read = get_LookIn, write = set_LookIn};
  __property   Office_2k::FoundFilesPtr FoundFiles = {read = get_FoundFiles};
  __property   Office_2k::PropertyTestsPtr PropertyTests = {read = get_PropertyTests};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef FileSearchDispT<FileSearch> FileSearchDisp;

typedef TComInterface<COMAddIn>  TCOMCOMAddIn;

// *********************************************************************//
// DispIntf:  COMAddIn
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C033A-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class COMAddInDispT : public TAutoDriver<COMAddIn>
{
public:
  COMAddInDispT(){}

  COMAddInDispT(COMAddIn *pintf)
  {
    TAutoDriver<COMAddIn>::Bind(pintf, false);
  }

  COMAddInDispT(COMAddInPtr pintf)
  {
    TAutoDriver<COMAddIn>::Bind(pintf, true);
  }

  COMAddInDispT& operator=(COMAddIn *pintf)
  {
    TAutoDriver<COMAddIn>::Bind(pintf, false);
    return *this;
  }

  COMAddInDispT& operator=(COMAddInPtr pintf)
  {
    TAutoDriver<COMAddIn>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Description(BSTR* RetValue/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Description(BSTR RetValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ProgId(BSTR* RetValue/*[out,retval]*/);
  BSTR            __fastcall get_ProgId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Guid(BSTR* RetValue/*[out,retval]*/);
  BSTR            __fastcall get_Guid(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Connect(TOLEBOOL* RetValue/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Connect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Connect(TOLEBOOL RetValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Object(LPDISPATCH* RetValue/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Object(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Object(LPDISPATCH RetValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* retval/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   BSTR            Description = {read = get_Description, write = set_Description};
  __property   BSTR            ProgId = {read = get_ProgId};
  __property   BSTR            Guid = {read = get_Guid};
  __property   TOLEBOOL        Connect = {read = get_Connect, write = set_Connect};
  __property   LPDISPATCH      Object = {read = get_Object, write = set_Object};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef COMAddInDispT<COMAddIn> COMAddInDisp;

typedef TComInterface<COMAddIns>  TCOMCOMAddIns;

// *********************************************************************//
// DispIntf:  COMAddIns
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0339-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class COMAddInsDispT : public TAutoDriver<COMAddIns>
{
public:
  COMAddInsDispT(){}

  COMAddInsDispT(COMAddIns *pintf)
  {
    TAutoDriver<COMAddIns>::Bind(pintf, false);
  }

  COMAddInsDispT(COMAddInsPtr pintf)
  {
    TAutoDriver<COMAddIns>::Bind(pintf, true);
  }

  COMAddInsDispT& operator=(COMAddIns *pintf)
  {
    TAutoDriver<COMAddIns>::Bind(pintf, false);
    return *this;
  }

  COMAddInsDispT& operator=(COMAddInsPtr pintf)
  {
    TAutoDriver<COMAddIns>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(TVariant* Index/*[in]*/, 
                                             Office_2k::COMAddInPtr* RetValue/*[out,retval]*/);
  Office_2k::COMAddInPtr __fastcall Item(TVariant* Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* RetValue/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* RetValue/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Update();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetAppModal(TOLEBOOL varfModal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef COMAddInsDispT<COMAddIns> COMAddInsDisp;

typedef TComInterface<LanguageSettings>  TCOMLanguageSettings;

// *********************************************************************//
// DispIntf:  LanguageSettings
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0353-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class LanguageSettingsDispT : public TAutoDriver<LanguageSettings>
{
public:
  LanguageSettingsDispT(){}

  LanguageSettingsDispT(LanguageSettings *pintf)
  {
    TAutoDriver<LanguageSettings>::Bind(pintf, false);
  }

  LanguageSettingsDispT(LanguageSettingsPtr pintf)
  {
    TAutoDriver<LanguageSettings>::Bind(pintf, true);
  }

  LanguageSettingsDispT& operator=(LanguageSettings *pintf)
  {
    TAutoDriver<LanguageSettings>::Bind(pintf, false);
    return *this;
  }

  LanguageSettingsDispT& operator=(LanguageSettingsPtr pintf)
  {
    TAutoDriver<LanguageSettings>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LanguageID(Office_2k::MsoAppLanguageID Id/*[in]*/, 
                                                       int* plid/*[out,retval]*/);
  int             __fastcall get_LanguageID(Office_2k::MsoAppLanguageID Id/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LanguagePreferredForEditing(Office_2k::MsoLanguageID lid/*[in]*/
                                                                        , 
                                                                        TOLEBOOL* pf/*[out,retval]*/);
  TOLEBOOL        __fastcall get_LanguagePreferredForEditing(Office_2k::MsoLanguageID lid/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);


  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef LanguageSettingsDispT<LanguageSettings> LanguageSettingsDisp;

typedef TComInterface<ICommandBarsEvents>  TCOMICommandBarsEvents;

// *********************************************************************//
// DispIntf:  ICommandBarsEvents
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {55F88892-7708-11D1-ACEB-006008961DA5}
// *********************************************************************//
template<class T>
class ICommandBarsEventsDispT : public TAutoDriver<ICommandBarsEvents>
{
public:
  ICommandBarsEventsDispT(){}

  ICommandBarsEventsDispT(ICommandBarsEvents *pintf)
  {
    TAutoDriver<ICommandBarsEvents>::Bind(pintf, false);
  }

  ICommandBarsEventsDispT(ICommandBarsEventsPtr pintf)
  {
    TAutoDriver<ICommandBarsEvents>::Bind(pintf, true);
  }

  ICommandBarsEventsDispT& operator=(ICommandBarsEvents *pintf)
  {
    TAutoDriver<ICommandBarsEvents>::Bind(pintf, false);
    return *this;
  }

  ICommandBarsEventsDispT& operator=(ICommandBarsEventsPtr pintf)
  {
    TAutoDriver<ICommandBarsEvents>::Bind(pintf, true);
    return *this;
  }

  void /*[VT_VOID:0]*/ __fastcall OnUpdate();

};
typedef ICommandBarsEventsDispT<ICommandBarsEvents> ICommandBarsEventsDisp;

// *********************************************************************//
// DispIntf:  _CommandBarsEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000C0352-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T>
class _CommandBarsEventsDispT : public TAutoDriver<_CommandBarsEvents>
{
public:
  _CommandBarsEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall OnUpdate();

};
typedef _CommandBarsEventsDispT<_CommandBarsEvents> _CommandBarsEventsDisp;

typedef TComInterface<ICommandBarComboBoxEvents>  TCOMICommandBarComboBoxEvents;

// *********************************************************************//
// DispIntf:  ICommandBarComboBoxEvents
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {55F88896-7708-11D1-ACEB-006008961DA5}
// *********************************************************************//
template<class T>
class ICommandBarComboBoxEventsDispT : public TAutoDriver<ICommandBarComboBoxEvents>
{
public:
  ICommandBarComboBoxEventsDispT(){}

  ICommandBarComboBoxEventsDispT(ICommandBarComboBoxEvents *pintf)
  {
    TAutoDriver<ICommandBarComboBoxEvents>::Bind(pintf, false);
  }

  ICommandBarComboBoxEventsDispT(ICommandBarComboBoxEventsPtr pintf)
  {
    TAutoDriver<ICommandBarComboBoxEvents>::Bind(pintf, true);
  }

  ICommandBarComboBoxEventsDispT& operator=(ICommandBarComboBoxEvents *pintf)
  {
    TAutoDriver<ICommandBarComboBoxEvents>::Bind(pintf, false);
    return *this;
  }

  ICommandBarComboBoxEventsDispT& operator=(ICommandBarComboBoxEventsPtr pintf)
  {
    TAutoDriver<ICommandBarComboBoxEvents>::Bind(pintf, true);
    return *this;
  }

  void /*[VT_VOID:0]*/ __fastcall Change(Office_2k::CommandBarComboBoxPtr Ctrl/*[in]*/);

};
typedef ICommandBarComboBoxEventsDispT<ICommandBarComboBoxEvents> ICommandBarComboBoxEventsDisp;

// *********************************************************************//
// DispIntf:  _CommandBarComboBoxEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000C0354-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T>
class _CommandBarComboBoxEventsDispT : public TAutoDriver<_CommandBarComboBoxEvents>
{
public:
  _CommandBarComboBoxEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall Change(Office_2k::CommandBarComboBoxPtr Ctrl/*[in]*/);

};
typedef _CommandBarComboBoxEventsDispT<_CommandBarComboBoxEvents> _CommandBarComboBoxEventsDisp;

typedef TComInterface<ICommandBarButtonEvents>  TCOMICommandBarButtonEvents;

// *********************************************************************//
// DispIntf:  ICommandBarButtonEvents
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {55F88890-7708-11D1-ACEB-006008961DA5}
// *********************************************************************//
template<class T>
class ICommandBarButtonEventsDispT : public TAutoDriver<ICommandBarButtonEvents>
{
public:
  ICommandBarButtonEventsDispT(){}

  ICommandBarButtonEventsDispT(ICommandBarButtonEvents *pintf)
  {
    TAutoDriver<ICommandBarButtonEvents>::Bind(pintf, false);
  }

  ICommandBarButtonEventsDispT(ICommandBarButtonEventsPtr pintf)
  {
    TAutoDriver<ICommandBarButtonEvents>::Bind(pintf, true);
  }

  ICommandBarButtonEventsDispT& operator=(ICommandBarButtonEvents *pintf)
  {
    TAutoDriver<ICommandBarButtonEvents>::Bind(pintf, false);
    return *this;
  }

  ICommandBarButtonEventsDispT& operator=(ICommandBarButtonEventsPtr pintf)
  {
    TAutoDriver<ICommandBarButtonEvents>::Bind(pintf, true);
    return *this;
  }

  void /*[VT_VOID:0]*/ __fastcall _Click(Office_2k::CommandBarButtonPtr Ctrl/*[in]*/, 
                                         TOLEBOOL* CancelDefault/*[in,out]*/);

};
typedef ICommandBarButtonEventsDispT<ICommandBarButtonEvents> ICommandBarButtonEventsDisp;

// *********************************************************************//
// DispIntf:  _CommandBarButtonEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000C0351-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T>
class _CommandBarButtonEventsDispT : public TAutoDriver<_CommandBarButtonEvents>
{
public:
  _CommandBarButtonEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall _Click(Office_2k::CommandBarButtonPtr Ctrl/*[in]*/, 
                                         TOLEBOOL* CancelDefault/*[in,out]*/);

};
typedef _CommandBarButtonEventsDispT<_CommandBarButtonEvents> _CommandBarButtonEventsDisp;

typedef TComInterface<WebPageFont>  TCOMWebPageFont;

// *********************************************************************//
// DispIntf:  WebPageFont
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0913-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class WebPageFontDispT : public TAutoDriver<WebPageFont>
{
public:
  WebPageFontDispT(){}

  WebPageFontDispT(WebPageFont *pintf)
  {
    TAutoDriver<WebPageFont>::Bind(pintf, false);
  }

  WebPageFontDispT(WebPageFontPtr pintf)
  {
    TAutoDriver<WebPageFont>::Bind(pintf, true);
  }

  WebPageFontDispT& operator=(WebPageFont *pintf)
  {
    TAutoDriver<WebPageFont>::Bind(pintf, false);
    return *this;
  }

  WebPageFontDispT& operator=(WebPageFontPtr pintf)
  {
    TAutoDriver<WebPageFont>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ProportionalFont(BSTR* pstr/*[out,retval]*/);
  BSTR            __fastcall get_ProportionalFont(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ProportionalFont(BSTR pstr/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ProportionalFontSize(float* pf/*[out,retval]*/);
  float           __fastcall get_ProportionalFontSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ProportionalFontSize(float pf/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FixedWidthFont(BSTR* pstr/*[out,retval]*/);
  BSTR            __fastcall get_FixedWidthFont(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FixedWidthFont(BSTR pstr/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FixedWidthFontSize(float* pf/*[out,retval]*/);
  float           __fastcall get_FixedWidthFontSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FixedWidthFontSize(float pf/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   BSTR            ProportionalFont = {read = get_ProportionalFont, write = set_ProportionalFont};
  __property   float           ProportionalFontSize = {read = get_ProportionalFontSize, write = set_ProportionalFontSize};
  __property   BSTR            FixedWidthFont = {read = get_FixedWidthFont, write = set_FixedWidthFont};
  __property   float           FixedWidthFontSize = {read = get_FixedWidthFontSize, write = set_FixedWidthFontSize};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef WebPageFontDispT<WebPageFont> WebPageFontDisp;

typedef TComInterface<WebPageFonts>  TCOMWebPageFonts;

// *********************************************************************//
// DispIntf:  WebPageFonts
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0914-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class WebPageFontsDispT : public TAutoDriver<WebPageFonts>
{
public:
  WebPageFontsDispT(){}

  WebPageFontsDispT(WebPageFonts *pintf)
  {
    TAutoDriver<WebPageFonts>::Bind(pintf, false);
  }

  WebPageFontsDispT(WebPageFontsPtr pintf)
  {
    TAutoDriver<WebPageFonts>::Bind(pintf, true);
  }

  WebPageFontsDispT& operator=(WebPageFonts *pintf)
  {
    TAutoDriver<WebPageFonts>::Bind(pintf, false);
    return *this;
  }

  WebPageFontsDispT& operator=(WebPageFontsPtr pintf)
  {
    TAutoDriver<WebPageFonts>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(int* Count/*[out,retval]*/);
  int             __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(Office_2k::MsoCharacterSet Index/*[in]*/, 
                                                 Office_2k::WebPageFontPtr* Item/*[out,retval]*/);
  Office_2k::WebPageFontPtr __fastcall get_Item(Office_2k::MsoCharacterSet Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   int             Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef WebPageFontsDispT<WebPageFonts> WebPageFontsDisp;

typedef TComInterface<HTMLProjectItem>  TCOMHTMLProjectItem;

// *********************************************************************//
// DispIntf:  HTMLProjectItem
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0358-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class HTMLProjectItemDispT : public TAutoDriver<HTMLProjectItem>
{
public:
  HTMLProjectItemDispT(){}

  HTMLProjectItemDispT(HTMLProjectItem *pintf)
  {
    TAutoDriver<HTMLProjectItem>::Bind(pintf, false);
  }

  HTMLProjectItemDispT(HTMLProjectItemPtr pintf)
  {
    TAutoDriver<HTMLProjectItem>::Bind(pintf, true);
  }

  HTMLProjectItemDispT& operator=(HTMLProjectItem *pintf)
  {
    TAutoDriver<HTMLProjectItem>::Bind(pintf, false);
    return *this;
  }

  HTMLProjectItemDispT& operator=(HTMLProjectItemPtr pintf)
  {
    TAutoDriver<HTMLProjectItem>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* RetValue/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsOpen(TOLEBOOL* RetValue/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsOpen(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall LoadFromFile(BSTR FileName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Open(Office_2k::MsoHTMLProjectOpen OpenKind/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SaveCopyAs(BSTR FileName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Text(BSTR* Text/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Text(BSTR Text/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   BSTR            Name = {read = get_Name};
  __property   TOLEBOOL        IsOpen = {read = get_IsOpen};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef HTMLProjectItemDispT<HTMLProjectItem> HTMLProjectItemDisp;

typedef TComInterface<HTMLProjectItems>  TCOMHTMLProjectItems;

// *********************************************************************//
// DispIntf:  HTMLProjectItems
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0357-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class HTMLProjectItemsDispT : public TAutoDriver<HTMLProjectItems>
{
public:
  HTMLProjectItemsDispT(){}

  HTMLProjectItemsDispT(HTMLProjectItems *pintf)
  {
    TAutoDriver<HTMLProjectItems>::Bind(pintf, false);
  }

  HTMLProjectItemsDispT(HTMLProjectItemsPtr pintf)
  {
    TAutoDriver<HTMLProjectItems>::Bind(pintf, true);
  }

  HTMLProjectItemsDispT& operator=(HTMLProjectItems *pintf)
  {
    TAutoDriver<HTMLProjectItems>::Bind(pintf, false);
    return *this;
  }

  HTMLProjectItemsDispT& operator=(HTMLProjectItemsPtr pintf)
  {
    TAutoDriver<HTMLProjectItems>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(TVariant* Index/*[in]*/, 
                                             Office_2k::HTMLProjectItemPtr* RetValue/*[out,retval]*/);
  Office_2k::HTMLProjectItemPtr __fastcall Item(TVariant* Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* RetValue/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* RetValue/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef HTMLProjectItemsDispT<HTMLProjectItems> HTMLProjectItemsDisp;

typedef TComInterface<HTMLProject>  TCOMHTMLProject;

// *********************************************************************//
// DispIntf:  HTMLProject
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0356-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class HTMLProjectDispT : public TAutoDriver<HTMLProject>
{
public:
  HTMLProjectDispT(){}

  HTMLProjectDispT(HTMLProject *pintf)
  {
    TAutoDriver<HTMLProject>::Bind(pintf, false);
  }

  HTMLProjectDispT(HTMLProjectPtr pintf)
  {
    TAutoDriver<HTMLProject>::Bind(pintf, true);
  }

  HTMLProjectDispT& operator=(HTMLProject *pintf)
  {
    TAutoDriver<HTMLProject>::Bind(pintf, false);
    return *this;
  }

  HTMLProjectDispT& operator=(HTMLProjectPtr pintf)
  {
    TAutoDriver<HTMLProject>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_State(Office_2k::MsoHTMLProjectState* State/*[out,retval]*/);
  Office_2k::MsoHTMLProjectState __fastcall get_State(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RefreshProject(TOLEBOOL Refresh/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RefreshDocument(TOLEBOOL Refresh/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HTMLProjectItems(Office_2k::HTMLProjectItemsPtr* HTMLProjectItems/*[out,retval]*/);
  Office_2k::HTMLProjectItemsPtr __fastcall get_HTMLProjectItems(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Open(Office_2k::MsoHTMLProjectOpen OpenKind/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   Office_2k::MsoHTMLProjectState State = {read = get_State};
  __property   Office_2k::HTMLProjectItemsPtr HTMLProjectItems = {read = get_HTMLProjectItems};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef HTMLProjectDispT<HTMLProject> HTMLProjectDisp;

typedef TComInterface<MsoDebugOptions>  TCOMMsoDebugOptions;

// *********************************************************************//
// DispIntf:  MsoDebugOptions
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C035A-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class MsoDebugOptionsDispT : public TAutoDriver<MsoDebugOptions>
{
public:
  MsoDebugOptionsDispT(){}

  MsoDebugOptionsDispT(MsoDebugOptions *pintf)
  {
    TAutoDriver<MsoDebugOptions>::Bind(pintf, false);
  }

  MsoDebugOptionsDispT(MsoDebugOptionsPtr pintf)
  {
    TAutoDriver<MsoDebugOptions>::Bind(pintf, true);
  }

  MsoDebugOptionsDispT& operator=(MsoDebugOptions *pintf)
  {
    TAutoDriver<MsoDebugOptions>::Bind(pintf, false);
    return *this;
  }

  MsoDebugOptionsDispT& operator=(MsoDebugOptionsPtr pintf)
  {
    TAutoDriver<MsoDebugOptions>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FeatureReports(int* puintFeatureReports/*[out,retval]*/);
  int             __fastcall get_FeatureReports(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FeatureReports(int puintFeatureReports/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   int             FeatureReports = {read = get_FeatureReports, write = set_FeatureReports};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef MsoDebugOptionsDispT<MsoDebugOptions> MsoDebugOptionsDisp;

// *********************************************************************//
// DispIntf:  IAccessible
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {618736E0-3C3D-11CF-810C-00AA00389B71}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IAccessibleDispT<T>::get_accParent(LPDISPATCH* ppdispParent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accParent"), DISPID(-5000));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppdispParent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IAccessibleDispT<T>::get_accParent(void)
{
  LPDISPATCH ppdispParent;
  this->get_accParent((LPDISPATCH*)&ppdispParent);
  return ppdispParent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IAccessibleDispT<T>::get_accChildCount(long* pcountChildren/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accChildCount"), DISPID(-5001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcountChildren /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IAccessibleDispT<T>::get_accChildCount(void)
{
  long pcountChildren;
  this->get_accChildCount((long*)&pcountChildren);
  return pcountChildren;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IAccessibleDispT<T>::get_accChild(TVariantInParam varChild/*[in]*/, 
                                  LPDISPATCH* ppdispChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accChild"), DISPID(-5002));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(ppdispChild /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IAccessibleDispT<T>::get_accChild(TVariantInParam varChild/*[in]*/)
{
  LPDISPATCH ppdispChild;
  this->get_accChild(varChild, (LPDISPATCH*)&ppdispChild);
  return ppdispChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IAccessibleDispT<T>::get_accName(TVariantInParam varChild/*[in,opt]*/, BSTR* pszName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accName"), DISPID(-5003));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IAccessibleDispT<T>::get_accName(TVariantInParam varChild/*[in,opt]*/)
{
  BSTR pszName;
  this->get_accName(varChild, (BSTR*)&pszName);
  return pszName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IAccessibleDispT<T>::get_accValue(TVariantInParam varChild/*[in,opt]*/, 
                                  BSTR* pszValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accValue"), DISPID(-5004));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszValue /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IAccessibleDispT<T>::get_accValue(TVariantInParam varChild/*[in,opt]*/)
{
  BSTR pszValue;
  this->get_accValue(varChild, (BSTR*)&pszValue);
  return pszValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IAccessibleDispT<T>::get_accDescription(TVariantInParam varChild/*[in,opt]*/, 
                                        BSTR* pszDescription/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDescription"), DISPID(-5005));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszDescription /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IAccessibleDispT<T>::get_accDescription(TVariantInParam varChild/*[in,opt]*/)
{
  BSTR pszDescription;
  this->get_accDescription(varChild, (BSTR*)&pszDescription);
  return pszDescription;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IAccessibleDispT<T>::get_accRole(TVariantInParam varChild/*[in,opt]*/, 
                                 TVariant* pvarRole/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accRole"), DISPID(-5006));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvarRole /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IAccessibleDispT<T>::get_accRole(TVariantInParam varChild/*[in,opt]*/)
{
  TVariant pvarRole;
  this->get_accRole(varChild, (TVariant*)&pvarRole);
  return pvarRole;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IAccessibleDispT<T>::get_accState(TVariantInParam varChild/*[in,opt]*/, 
                                  TVariant* pvarState/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accState"), DISPID(-5007));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvarState /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IAccessibleDispT<T>::get_accState(TVariantInParam varChild/*[in,opt]*/)
{
  TVariant pvarState;
  this->get_accState(varChild, (TVariant*)&pvarState);
  return pvarState;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IAccessibleDispT<T>::get_accHelp(TVariantInParam varChild/*[in,opt]*/, BSTR* pszHelp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accHelp"), DISPID(-5008));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszHelp /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IAccessibleDispT<T>::get_accHelp(TVariantInParam varChild/*[in,opt]*/)
{
  BSTR pszHelp;
  this->get_accHelp(varChild, (BSTR*)&pszHelp);
  return pszHelp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IAccessibleDispT<T>::get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                      TVariantInParam varChild/*[in,opt]*/, 
                                      long* pidTopic/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accHelpTopic"), DISPID(-5009));
  TAutoArgs<2> _args;
  _args[1] = pszHelpFile /*[VT_BSTR:1]*/;
  _args[2] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pidTopic /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IAccessibleDispT<T>::get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                      TVariantInParam varChild/*[in,opt]*/)
{
  long pidTopic;
  this->get_accHelpTopic(pszHelpFile, varChild, (long*)&pidTopic);
  return pidTopic;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IAccessibleDispT<T>::get_accKeyboardShortcut(TVariantInParam varChild/*[in,opt]*/, 
                                             BSTR* pszKeyboardShortcut/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accKeyboardShortcut"), DISPID(-5010));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszKeyboardShortcut /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IAccessibleDispT<T>::get_accKeyboardShortcut(TVariantInParam varChild/*[in,opt]*/)
{
  BSTR pszKeyboardShortcut;
  this->get_accKeyboardShortcut(varChild, (BSTR*)&pszKeyboardShortcut);
  return pszKeyboardShortcut;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IAccessibleDispT<T>::get_accFocus(TVariant* pvarChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accFocus"), DISPID(-5011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarChild /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IAccessibleDispT<T>::get_accFocus(void)
{
  TVariant pvarChild;
  this->get_accFocus((TVariant*)&pvarChild);
  return pvarChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IAccessibleDispT<T>::get_accSelection(TVariant* pvarChildren/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accSelection"), DISPID(-5012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarChildren /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IAccessibleDispT<T>::get_accSelection(void)
{
  TVariant pvarChildren;
  this->get_accSelection((TVariant*)&pvarChildren);
  return pvarChildren;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IAccessibleDispT<T>::get_accDefaultAction(TVariantInParam varChild/*[in,opt]*/, 
                                          BSTR* pszDefaultAction/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDefaultAction"), DISPID(-5013));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszDefaultAction /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IAccessibleDispT<T>::get_accDefaultAction(TVariantInParam varChild/*[in,opt]*/)
{
  BSTR pszDefaultAction;
  this->get_accDefaultAction(varChild, (BSTR*)&pszDefaultAction);
  return pszDefaultAction;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IAccessibleDispT<T>::accSelect(long flagsSelect/*[in]*/, TVariantInParam varChild/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("accSelect"), DISPID(-5014));
  TAutoArgs<2> _args;
  _args[1] = flagsSelect /*[VT_I4:0]*/;
  _args[2] = varChild /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IAccessibleDispT<T>::accLocation(long* pxLeft/*[out]*/, long* pyTop/*[out]*/, 
                                 long* pcxWidth/*[out]*/, long* pcyHeight/*[out]*/, 
                                 TVariantInParam varChild/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("accLocation"), DISPID(-5015));
  TAutoArgs<5> _args;
  _args[1] = pxLeft /*[VT_I4:1]*/;
  _args[2] = pyTop /*[VT_I4:1]*/;
  _args[3] = pcxWidth /*[VT_I4:1]*/;
  _args[4] = pcyHeight /*[VT_I4:1]*/;
  _args[5] = varChild /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IAccessibleDispT<T>::accNavigate(long navDir/*[in]*/, TVariantInParam varStart/*[in,opt]*/, 
                                 TVariant* pvarEndUpAt/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accNavigate"), DISPID(-5016));
  TAutoArgs<2> _args;
  _args[1] = navDir /*[VT_I4:0]*/;
  _args[2] = varStart /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvarEndUpAt /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
IAccessibleDispT<T>::accNavigate(long navDir/*[in]*/, TVariantInParam varStart/*[in,opt]*/)
{
  TVariant pvarEndUpAt;
  this->accNavigate(navDir, varStart, (TVariant*)&pvarEndUpAt);
  return pvarEndUpAt;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IAccessibleDispT<T>::accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/, 
                                TVariant* pvarChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accHitTest"), DISPID(-5017));
  TAutoArgs<2> _args;
  _args[1] = xLeft /*[VT_I4:0]*/;
  _args[2] = yTop /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pvarChild /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
IAccessibleDispT<T>::accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/)
{
  TVariant pvarChild;
  this->accHitTest(xLeft, yTop, (TVariant*)&pvarChild);
  return pvarChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IAccessibleDispT<T>::accDoDefaultAction(TVariantInParam varChild/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDoDefaultAction"), DISPID(-5018));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IAccessibleDispT<T>::set_accName(TVariantInParam varChild/*[in,opt]*/, BSTR pszName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("accName"), DISPID(-5003));
  TAutoArgs<2> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  _args[2] = pszName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IAccessibleDispT<T>::set_accValue(TVariantInParam varChild/*[in,opt]*/, BSTR pszValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("accValue"), DISPID(-5004));
  TAutoArgs<2> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  _args[2] = pszValue /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  _IMsoDispObj
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0300-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IMsoDispObjDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_IMsoDispObjDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IMsoDispObjDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_IMsoDispObjDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  _IMsoOleAccDispObj
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0301-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IMsoOleAccDispObjDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610809344]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_IMsoOleAccDispObjDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IMsoOleAccDispObjDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_IMsoOleAccDispObjDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IMsoOleAccDispObjDispT<T>::get_accParent(LPDISPATCH* ppdispParent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accParent"), DISPID(-5000));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppdispParent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_IMsoOleAccDispObjDispT<T>::get_accParent(void)
{
  LPDISPATCH ppdispParent;
  this->get_accParent((LPDISPATCH*)&ppdispParent);
  return ppdispParent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IMsoOleAccDispObjDispT<T>::get_accChildCount(long* pcountChildren/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accChildCount"), DISPID(-5001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcountChildren /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_IMsoOleAccDispObjDispT<T>::get_accChildCount(void)
{
  long pcountChildren;
  this->get_accChildCount((long*)&pcountChildren);
  return pcountChildren;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IMsoOleAccDispObjDispT<T>::get_accChild(TVariantInParam varChild/*[in]*/, 
                                         LPDISPATCH* ppdispChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accChild"), DISPID(-5002));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(ppdispChild /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_IMsoOleAccDispObjDispT<T>::get_accChild(TVariantInParam varChild/*[in]*/)
{
  LPDISPATCH ppdispChild;
  this->get_accChild(varChild, (LPDISPATCH*)&ppdispChild);
  return ppdispChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IMsoOleAccDispObjDispT<T>::get_accName(TVariantInParam varChild/*[in,opt]*/, 
                                        BSTR* pszName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accName"), DISPID(-5003));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_IMsoOleAccDispObjDispT<T>::get_accName(TVariantInParam varChild/*[in,opt]*/)
{
  BSTR pszName;
  this->get_accName(varChild, (BSTR*)&pszName);
  return pszName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IMsoOleAccDispObjDispT<T>::get_accValue(TVariantInParam varChild/*[in,opt]*/, 
                                         BSTR* pszValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accValue"), DISPID(-5004));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszValue /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_IMsoOleAccDispObjDispT<T>::get_accValue(TVariantInParam varChild/*[in,opt]*/)
{
  BSTR pszValue;
  this->get_accValue(varChild, (BSTR*)&pszValue);
  return pszValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IMsoOleAccDispObjDispT<T>::get_accDescription(TVariantInParam varChild/*[in,opt]*/, 
                                               BSTR* pszDescription/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDescription"), DISPID(-5005));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszDescription /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_IMsoOleAccDispObjDispT<T>::get_accDescription(TVariantInParam varChild/*[in,opt]*/)
{
  BSTR pszDescription;
  this->get_accDescription(varChild, (BSTR*)&pszDescription);
  return pszDescription;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IMsoOleAccDispObjDispT<T>::get_accRole(TVariantInParam varChild/*[in,opt]*/, 
                                        TVariant* pvarRole/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accRole"), DISPID(-5006));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvarRole /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_IMsoOleAccDispObjDispT<T>::get_accRole(TVariantInParam varChild/*[in,opt]*/)
{
  TVariant pvarRole;
  this->get_accRole(varChild, (TVariant*)&pvarRole);
  return pvarRole;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IMsoOleAccDispObjDispT<T>::get_accState(TVariantInParam varChild/*[in,opt]*/, 
                                         TVariant* pvarState/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accState"), DISPID(-5007));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvarState /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_IMsoOleAccDispObjDispT<T>::get_accState(TVariantInParam varChild/*[in,opt]*/)
{
  TVariant pvarState;
  this->get_accState(varChild, (TVariant*)&pvarState);
  return pvarState;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IMsoOleAccDispObjDispT<T>::get_accHelp(TVariantInParam varChild/*[in,opt]*/, 
                                        BSTR* pszHelp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accHelp"), DISPID(-5008));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszHelp /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_IMsoOleAccDispObjDispT<T>::get_accHelp(TVariantInParam varChild/*[in,opt]*/)
{
  BSTR pszHelp;
  this->get_accHelp(varChild, (BSTR*)&pszHelp);
  return pszHelp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IMsoOleAccDispObjDispT<T>::get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                             TVariantInParam varChild/*[in,opt]*/, 
                                             long* pidTopic/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accHelpTopic"), DISPID(-5009));
  TAutoArgs<2> _args;
  _args[1] = pszHelpFile /*[VT_BSTR:1]*/;
  _args[2] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pidTopic /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_IMsoOleAccDispObjDispT<T>::get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                             TVariantInParam varChild/*[in,opt]*/)
{
  long pidTopic;
  this->get_accHelpTopic(pszHelpFile, varChild, (long*)&pidTopic);
  return pidTopic;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IMsoOleAccDispObjDispT<T>::get_accKeyboardShortcut(TVariantInParam varChild/*[in,opt]*/, 
                                                    BSTR* pszKeyboardShortcut/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accKeyboardShortcut"), DISPID(-5010));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszKeyboardShortcut /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_IMsoOleAccDispObjDispT<T>::get_accKeyboardShortcut(TVariantInParam varChild/*[in,opt]*/)
{
  BSTR pszKeyboardShortcut;
  this->get_accKeyboardShortcut(varChild, (BSTR*)&pszKeyboardShortcut);
  return pszKeyboardShortcut;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IMsoOleAccDispObjDispT<T>::get_accFocus(TVariant* pvarChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accFocus"), DISPID(-5011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarChild /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_IMsoOleAccDispObjDispT<T>::get_accFocus(void)
{
  TVariant pvarChild;
  this->get_accFocus((TVariant*)&pvarChild);
  return pvarChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IMsoOleAccDispObjDispT<T>::get_accSelection(TVariant* pvarChildren/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accSelection"), DISPID(-5012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarChildren /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_IMsoOleAccDispObjDispT<T>::get_accSelection(void)
{
  TVariant pvarChildren;
  this->get_accSelection((TVariant*)&pvarChildren);
  return pvarChildren;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IMsoOleAccDispObjDispT<T>::get_accDefaultAction(TVariantInParam varChild/*[in,opt]*/, 
                                                 BSTR* pszDefaultAction/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDefaultAction"), DISPID(-5013));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszDefaultAction /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_IMsoOleAccDispObjDispT<T>::get_accDefaultAction(TVariantInParam varChild/*[in,opt]*/)
{
  BSTR pszDefaultAction;
  this->get_accDefaultAction(varChild, (BSTR*)&pszDefaultAction);
  return pszDefaultAction;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IMsoOleAccDispObjDispT<T>::accSelect(long flagsSelect/*[in]*/, TVariantInParam varChild/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("accSelect"), DISPID(-5014));
  TAutoArgs<2> _args;
  _args[1] = flagsSelect /*[VT_I4:0]*/;
  _args[2] = varChild /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IMsoOleAccDispObjDispT<T>::accLocation(long* pxLeft/*[out]*/, long* pyTop/*[out]*/, 
                                        long* pcxWidth/*[out]*/, long* pcyHeight/*[out]*/, 
                                        TVariantInParam varChild/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("accLocation"), DISPID(-5015));
  TAutoArgs<5> _args;
  _args[1] = pxLeft /*[VT_I4:1]*/;
  _args[2] = pyTop /*[VT_I4:1]*/;
  _args[3] = pcxWidth /*[VT_I4:1]*/;
  _args[4] = pcyHeight /*[VT_I4:1]*/;
  _args[5] = varChild /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IMsoOleAccDispObjDispT<T>::accNavigate(long navDir/*[in]*/, TVariantInParam varStart/*[in,opt]*/, 
                                        TVariant* pvarEndUpAt/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accNavigate"), DISPID(-5016));
  TAutoArgs<2> _args;
  _args[1] = navDir /*[VT_I4:0]*/;
  _args[2] = varStart /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvarEndUpAt /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_IMsoOleAccDispObjDispT<T>::accNavigate(long navDir/*[in]*/, TVariantInParam varStart/*[in,opt]*/)
{
  TVariant pvarEndUpAt;
  this->accNavigate(navDir, varStart, (TVariant*)&pvarEndUpAt);
  return pvarEndUpAt;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IMsoOleAccDispObjDispT<T>::accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/, 
                                       TVariant* pvarChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accHitTest"), DISPID(-5017));
  TAutoArgs<2> _args;
  _args[1] = xLeft /*[VT_I4:0]*/;
  _args[2] = yTop /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pvarChild /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_IMsoOleAccDispObjDispT<T>::accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/)
{
  TVariant pvarChild;
  this->accHitTest(xLeft, yTop, (TVariant*)&pvarChild);
  return pvarChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IMsoOleAccDispObjDispT<T>::accDoDefaultAction(TVariantInParam varChild/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDoDefaultAction"), DISPID(-5018));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IMsoOleAccDispObjDispT<T>::set_accName(TVariantInParam varChild/*[in,opt]*/, BSTR pszName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("accName"), DISPID(-5003));
  TAutoArgs<2> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  _args[2] = pszName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IMsoOleAccDispObjDispT<T>::set_accValue(TVariantInParam varChild/*[in,opt]*/, BSTR pszValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("accValue"), DISPID(-5004));
  TAutoArgs<2> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  _args[2] = pszValue /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOM_CommandBars
// Interface: _CommandBars
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_CommandBarsT<T>::get_ActionControl(Office_2k::CommandBarControlPtr* ppcbc/*[out,retval]*/)
{
  return (*this)->get_ActionControl(ppcbc);
}

template <class T> Office_2k::CommandBarControlPtr __fastcall
TCOM_CommandBarsT<T>::get_ActionControl(void)
{
  Office_2k::CommandBarControlPtr ppcbc;
  OLECHECK(this->get_ActionControl((Office_2k::CommandBarControlPtr*)&ppcbc));
  return ppcbc;
}

template <class T> HRESULT __fastcall
TCOM_CommandBarsT<T>::get_ActiveMenuBar(Office_2k::CommandBarPtr* ppcb/*[out,retval]*/)
{
  return (*this)->get_ActiveMenuBar(ppcb);
}

template <class T> Office_2k::CommandBarPtr __fastcall
TCOM_CommandBarsT<T>::get_ActiveMenuBar(void)
{
  Office_2k::CommandBarPtr ppcb;
  OLECHECK(this->get_ActiveMenuBar((Office_2k::CommandBarPtr*)&ppcb));
  return ppcb;
}

template <class T> HRESULT __fastcall
TCOM_CommandBarsT<T>::Add(TVariantInParam Name/*[in,opt]*/, TVariantInParam Position/*[in,opt]*/, 
                          TVariantInParam MenuBar/*[in,opt]*/, TVariantInParam Temporary/*[in,opt]*/, 
                          Office_2k::CommandBarPtr* ppcb/*[out,retval]*/)
{
  return (*this)->Add(Name, Position, MenuBar, Temporary, ppcb);
}

template <class T> Office_2k::CommandBarPtr __fastcall
TCOM_CommandBarsT<T>::Add(TVariantInParam Name/*[in,opt]*/, TVariantInParam Position/*[in,opt]*/, 
                          TVariantInParam MenuBar/*[in,opt]*/, TVariantInParam Temporary/*[in,opt]*/)
{
  Office_2k::CommandBarPtr ppcb;
  OLECHECK(this->Add(Name, Position, MenuBar, Temporary, (Office_2k::CommandBarPtr*)&ppcb));
  return ppcb;
}

template <class T> HRESULT __fastcall
TCOM_CommandBarsT<T>::get_Count(int* pcToolbars/*[out,retval]*/)
{
  return (*this)->get_Count(pcToolbars);
}

template <class T> int __fastcall
TCOM_CommandBarsT<T>::get_Count(void)
{
  int pcToolbars;
  OLECHECK(this->get_Count((int*)&pcToolbars));
  return pcToolbars;
}

template <class T> HRESULT __fastcall
TCOM_CommandBarsT<T>::get_DisplayTooltips(TOLEBOOL* pvarfDisplayTooltips/*[out,retval]*/)
{
  return (*this)->get_DisplayTooltips(pvarfDisplayTooltips);
}

template <class T> TOLEBOOL __fastcall
TCOM_CommandBarsT<T>::get_DisplayTooltips(void)
{
  TOLEBOOL pvarfDisplayTooltips;
  OLECHECK(this->get_DisplayTooltips((TOLEBOOL*)&pvarfDisplayTooltips));
  return pvarfDisplayTooltips;
}

template <class T> HRESULT __fastcall
TCOM_CommandBarsT<T>::set_DisplayTooltips(TOLEBOOL pvarfDisplayTooltips/*[in]*/)
{
  return (*this)->set_DisplayTooltips(pvarfDisplayTooltips);
}

template <class T> HRESULT __fastcall
TCOM_CommandBarsT<T>::get_DisplayKeysInTooltips(TOLEBOOL* pvarfDisplayKeys/*[out,retval]*/)
{
  return (*this)->get_DisplayKeysInTooltips(pvarfDisplayKeys);
}

template <class T> TOLEBOOL __fastcall
TCOM_CommandBarsT<T>::get_DisplayKeysInTooltips(void)
{
  TOLEBOOL pvarfDisplayKeys;
  OLECHECK(this->get_DisplayKeysInTooltips((TOLEBOOL*)&pvarfDisplayKeys));
  return pvarfDisplayKeys;
}

template <class T> HRESULT __fastcall
TCOM_CommandBarsT<T>::set_DisplayKeysInTooltips(TOLEBOOL pvarfDisplayKeys/*[in]*/)
{
  return (*this)->set_DisplayKeysInTooltips(pvarfDisplayKeys);
}

template <class T> HRESULT __fastcall
TCOM_CommandBarsT<T>::FindControl(TVariantInParam Type/*[in,opt]*/, TVariantInParam Id/*[in,opt]*/, 
                                  TVariantInParam Tag/*[in,opt]*/, 
                                  TVariantInParam Visible/*[in,opt]*/, 
                                  Office_2k::CommandBarControlPtr* ppcbc/*[out,retval]*/)
{
  return (*this)->FindControl(Type, Id, Tag, Visible, ppcbc);
}

template <class T> Office_2k::CommandBarControlPtr __fastcall
TCOM_CommandBarsT<T>::FindControl(TVariantInParam Type/*[in,opt]*/, TVariantInParam Id/*[in,opt]*/, 
                                  TVariantInParam Tag/*[in,opt]*/, 
                                  TVariantInParam Visible/*[in,opt]*/)
{
  Office_2k::CommandBarControlPtr ppcbc;
  OLECHECK(this->FindControl(Type, Id, Tag, Visible, (Office_2k::CommandBarControlPtr*)&ppcbc));
  return ppcbc;
}

template <class T> HRESULT __fastcall
TCOM_CommandBarsT<T>::get_Item(TVariantInParam Index/*[in]*/, 
                               Office_2k::CommandBarPtr* ppcb/*[out,retval]*/)
{
  return (*this)->get_Item(Index, ppcb);
}

template <class T> Office_2k::CommandBarPtr __fastcall
TCOM_CommandBarsT<T>::get_Item(TVariantInParam Index/*[in]*/)
{
  Office_2k::CommandBarPtr ppcb;
  OLECHECK(this->get_Item(Index, (Office_2k::CommandBarPtr*)&ppcb));
  return ppcb;
}

template <class T> HRESULT __fastcall
TCOM_CommandBarsT<T>::get_LargeButtons(TOLEBOOL* pvarfLargeButtons/*[out,retval]*/)
{
  return (*this)->get_LargeButtons(pvarfLargeButtons);
}

template <class T> TOLEBOOL __fastcall
TCOM_CommandBarsT<T>::get_LargeButtons(void)
{
  TOLEBOOL pvarfLargeButtons;
  OLECHECK(this->get_LargeButtons((TOLEBOOL*)&pvarfLargeButtons));
  return pvarfLargeButtons;
}

template <class T> HRESULT __fastcall
TCOM_CommandBarsT<T>::set_LargeButtons(TOLEBOOL pvarfLargeButtons/*[in]*/)
{
  return (*this)->set_LargeButtons(pvarfLargeButtons);
}

template <class T> HRESULT __fastcall
TCOM_CommandBarsT<T>::get_MenuAnimationStyle(Office_2k::MsoMenuAnimation* pma/*[out,retval]*/)
{
  return (*this)->get_MenuAnimationStyle(pma);
}

template <class T> Office_2k::MsoMenuAnimation __fastcall
TCOM_CommandBarsT<T>::get_MenuAnimationStyle(void)
{
  Office_2k::MsoMenuAnimation pma;
  OLECHECK(this->get_MenuAnimationStyle((Office_2k::MsoMenuAnimation*)&pma));
  return pma;
}

template <class T> HRESULT __fastcall
TCOM_CommandBarsT<T>::set_MenuAnimationStyle(Office_2k::MsoMenuAnimation pma/*[in]*/)
{
  return (*this)->set_MenuAnimationStyle(pma);
}

template <class T> HRESULT __fastcall
TCOM_CommandBarsT<T>::get__NewEnum(LPUNKNOWN* ppienum/*[out,retval]*/)
{
  return (*this)->get__NewEnum(ppienum);
}

template <class T> LPUNKNOWN __fastcall
TCOM_CommandBarsT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppienum;
  OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppienum));
  return ppienum;
}

template <class T> HRESULT __fastcall
TCOM_CommandBarsT<T>::get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  return (*this)->get_Parent(ppidisp);
}

template <class T> LPDISPATCH __fastcall
TCOM_CommandBarsT<T>::get_Parent(void)
{
  LPDISPATCH ppidisp;
  OLECHECK(this->get_Parent((LPDISPATCH*)&ppidisp));
  return ppidisp;
}

template <class T> HRESULT __fastcall
TCOM_CommandBarsT<T>::ReleaseFocus(void)
{
  return (*this)->ReleaseFocus();
}

template <class T> HRESULT __fastcall
TCOM_CommandBarsT<T>::get_IdsString(int ids/*[in]*/, BSTR* pbstrName/*[out]*/, 
                                    int* pcch/*[out,retval]*/)
{
  return (*this)->get_IdsString(ids, pbstrName, pcch);
}

template <class T> int __fastcall
TCOM_CommandBarsT<T>::get_IdsString(int ids/*[in]*/, BSTR* pbstrName/*[out]*/)
{
  int pcch;
  OLECHECK(this->get_IdsString(ids, pbstrName, (int*)&pcch));
  return pcch;
}

template <class T> HRESULT __fastcall
TCOM_CommandBarsT<T>::get_TmcGetName(int tmc/*[in]*/, BSTR* pbstrName/*[out]*/, 
                                     int* pcch/*[out,retval]*/)
{
  return (*this)->get_TmcGetName(tmc, pbstrName, pcch);
}

template <class T> int __fastcall
TCOM_CommandBarsT<T>::get_TmcGetName(int tmc/*[in]*/, BSTR* pbstrName/*[out]*/)
{
  int pcch;
  OLECHECK(this->get_TmcGetName(tmc, pbstrName, (int*)&pcch));
  return pcch;
}

template <class T> HRESULT __fastcall
TCOM_CommandBarsT<T>::get_AdaptiveMenus(TOLEBOOL* pvarfAdaptiveMenus/*[out,retval]*/)
{
  return (*this)->get_AdaptiveMenus(pvarfAdaptiveMenus);
}

template <class T> TOLEBOOL __fastcall
TCOM_CommandBarsT<T>::get_AdaptiveMenus(void)
{
  TOLEBOOL pvarfAdaptiveMenus;
  OLECHECK(this->get_AdaptiveMenus((TOLEBOOL*)&pvarfAdaptiveMenus));
  return pvarfAdaptiveMenus;
}

template <class T> HRESULT __fastcall
TCOM_CommandBarsT<T>::set_AdaptiveMenus(TOLEBOOL pvarfAdaptiveMenus/*[in]*/)
{
  return (*this)->set_AdaptiveMenus(pvarfAdaptiveMenus);
}

template <class T> HRESULT __fastcall
TCOM_CommandBarsT<T>::FindControls(TVariantInParam Type/*[in,opt]*/, TVariantInParam Id/*[in,opt]*/, 
                                   TVariantInParam Tag/*[in,opt]*/, 
                                   TVariantInParam Visible/*[in,opt]*/, 
                                   Office_2k::CommandBarControlsPtr* ppcbcs/*[out,retval]*/)
{
  return (*this)->FindControls(Type, Id, Tag, Visible, ppcbcs);
}

template <class T> Office_2k::CommandBarControlsPtr __fastcall
TCOM_CommandBarsT<T>::FindControls(TVariantInParam Type/*[in,opt]*/, TVariantInParam Id/*[in,opt]*/, 
                                   TVariantInParam Tag/*[in,opt]*/, 
                                   TVariantInParam Visible/*[in,opt]*/)
{
  Office_2k::CommandBarControlsPtr ppcbcs;
  OLECHECK(this->FindControls(Type, Id, Tag, Visible, (Office_2k::CommandBarControlsPtr*)&ppcbcs));
  return ppcbcs;
}

template <class T> HRESULT __fastcall
TCOM_CommandBarsT<T>::AddEx(TVariantInParam TbidOrName/*[in,opt]*/, 
                            TVariantInParam Position/*[in,opt]*/, 
                            TVariantInParam MenuBar/*[in,opt]*/, 
                            TVariantInParam Temporary/*[in,opt]*/, 
                            TVariantInParam TbtrProtection/*[in,opt]*/, 
                            Office_2k::CommandBarPtr* ppcb/*[out,retval]*/)
{
  return (*this)->AddEx(TbidOrName, Position, MenuBar, Temporary, TbtrProtection, ppcb);
}

template <class T> Office_2k::CommandBarPtr __fastcall
TCOM_CommandBarsT<T>::AddEx(TVariantInParam TbidOrName/*[in,opt]*/, 
                            TVariantInParam Position/*[in,opt]*/, 
                            TVariantInParam MenuBar/*[in,opt]*/, 
                            TVariantInParam Temporary/*[in,opt]*/, 
                            TVariantInParam TbtrProtection/*[in,opt]*/)
{
  Office_2k::CommandBarPtr ppcb;
  OLECHECK(this->AddEx(TbidOrName, Position, MenuBar, Temporary, TbtrProtection, (Office_2k::CommandBarPtr*)&ppcb));
  return ppcb;
}

template <class T> HRESULT __fastcall
TCOM_CommandBarsT<T>::get_DisplayFonts(TOLEBOOL* pvarfDisplayFonts/*[out,retval]*/)
{
  return (*this)->get_DisplayFonts(pvarfDisplayFonts);
}

template <class T> TOLEBOOL __fastcall
TCOM_CommandBarsT<T>::get_DisplayFonts(void)
{
  TOLEBOOL pvarfDisplayFonts;
  OLECHECK(this->get_DisplayFonts((TOLEBOOL*)&pvarfDisplayFonts));
  return pvarfDisplayFonts;
}

template <class T> HRESULT __fastcall
TCOM_CommandBarsT<T>::set_DisplayFonts(TOLEBOOL pvarfDisplayFonts/*[in]*/)
{
  return (*this)->set_DisplayFonts(pvarfDisplayFonts);
}

// *********************************************************************//
// DispIntf:  _CommandBars
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0302-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarsDispT<T>::get_ActionControl(Office_2k::CommandBarControlPtr* ppcbc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActionControl"), DISPID(DISPID_UNKNOWN/*[1610809344]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::CommandBarControl**)ppcbc /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::CommandBarControlPtr __fastcall
_CommandBarsDispT<T>::get_ActionControl(void)
{
  Office_2k::CommandBarControlPtr ppcbc;
  this->get_ActionControl((Office_2k::CommandBarControlPtr*)&ppcbc);
  return ppcbc;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarsDispT<T>::get_ActiveMenuBar(Office_2k::CommandBarPtr* ppcb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveMenuBar"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::CommandBar**)ppcb /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::CommandBarPtr __fastcall
_CommandBarsDispT<T>::get_ActiveMenuBar(void)
{
  Office_2k::CommandBarPtr ppcb;
  this->get_ActiveMenuBar((Office_2k::CommandBarPtr*)&ppcb);
  return ppcb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarsDispT<T>::Add(TVariantInParam Name/*[in,opt]*/, TVariantInParam Position/*[in,opt]*/, 
                          TVariantInParam MenuBar/*[in,opt]*/, TVariantInParam Temporary/*[in,opt]*/
                          , Office_2k::CommandBarPtr* ppcb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(DISPID_UNKNOWN/*[1610809346]*/));
  TAutoArgs<4> _args;
  _args[1] = Name /*[VT_VARIANT:0]*/;
  _args[2] = Position /*[VT_VARIANT:0]*/;
  _args[3] = MenuBar /*[VT_VARIANT:0]*/;
  _args[4] = Temporary /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::CommandBar**)ppcb /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_2k::CommandBarPtr __fastcall
_CommandBarsDispT<T>::Add(TVariantInParam Name/*[in,opt]*/, TVariantInParam Position/*[in,opt]*/, 
                          TVariantInParam MenuBar/*[in,opt]*/, TVariantInParam Temporary/*[in,opt]*/)
{
  Office_2k::CommandBarPtr ppcb;
  this->Add(Name, Position, MenuBar, Temporary, (Office_2k::CommandBarPtr*)&ppcb);
  return ppcb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarsDispT<T>::get_Count(int* pcToolbars/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610809347]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcToolbars /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
_CommandBarsDispT<T>::get_Count(void)
{
  int pcToolbars;
  this->get_Count((int*)&pcToolbars);
  return pcToolbars;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarsDispT<T>::get_DisplayTooltips(TOLEBOOL* pvarfDisplayTooltips/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayTooltips"), DISPID(DISPID_UNKNOWN/*[1610809348]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfDisplayTooltips /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CommandBarsDispT<T>::get_DisplayTooltips(void)
{
  TOLEBOOL pvarfDisplayTooltips;
  this->get_DisplayTooltips((TOLEBOOL*)&pvarfDisplayTooltips);
  return pvarfDisplayTooltips;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarsDispT<T>::set_DisplayTooltips(TOLEBOOL pvarfDisplayTooltips/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayTooltips"), DISPID(1610809348));
  TAutoArgs<1> _args;
  _args[1] = pvarfDisplayTooltips /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarsDispT<T>::get_DisplayKeysInTooltips(TOLEBOOL* pvarfDisplayKeys/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayKeysInTooltips"), DISPID(DISPID_UNKNOWN/*[1610809350]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfDisplayKeys /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CommandBarsDispT<T>::get_DisplayKeysInTooltips(void)
{
  TOLEBOOL pvarfDisplayKeys;
  this->get_DisplayKeysInTooltips((TOLEBOOL*)&pvarfDisplayKeys);
  return pvarfDisplayKeys;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarsDispT<T>::set_DisplayKeysInTooltips(TOLEBOOL pvarfDisplayKeys/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayKeysInTooltips"), DISPID(1610809350));
  TAutoArgs<1> _args;
  _args[1] = pvarfDisplayKeys /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarsDispT<T>::FindControl(TVariantInParam Type/*[in,opt]*/, TVariantInParam Id/*[in,opt]*/, 
                                  TVariantInParam Tag/*[in,opt]*/, 
                                  TVariantInParam Visible/*[in,opt]*/, 
                                  Office_2k::CommandBarControlPtr* ppcbc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FindControl"), DISPID(DISPID_UNKNOWN/*[1610809352]*/));
  TAutoArgs<4> _args;
  _args[1] = Type /*[VT_VARIANT:0]*/;
  _args[2] = Id /*[VT_VARIANT:0]*/;
  _args[3] = Tag /*[VT_VARIANT:0]*/;
  _args[4] = Visible /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::CommandBarControl**)ppcbc /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_2k::CommandBarControlPtr __fastcall
_CommandBarsDispT<T>::FindControl(TVariantInParam Type/*[in,opt]*/, TVariantInParam Id/*[in,opt]*/, 
                                  TVariantInParam Tag/*[in,opt]*/, 
                                  TVariantInParam Visible/*[in,opt]*/)
{
  Office_2k::CommandBarControlPtr ppcbc;
  this->FindControl(Type, Id, Tag, Visible, (Office_2k::CommandBarControlPtr*)&ppcbc);
  return ppcbc;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarsDispT<T>::get_Item(TVariantInParam Index/*[in]*/, 
                               Office_2k::CommandBarPtr* ppcb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::CommandBar**)ppcb /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::CommandBarPtr __fastcall
_CommandBarsDispT<T>::get_Item(TVariantInParam Index/*[in]*/)
{
  Office_2k::CommandBarPtr ppcb;
  this->get_Item(Index, (Office_2k::CommandBarPtr*)&ppcb);
  return ppcb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarsDispT<T>::get_LargeButtons(TOLEBOOL* pvarfLargeButtons/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LargeButtons"), DISPID(DISPID_UNKNOWN/*[1610809354]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfLargeButtons /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CommandBarsDispT<T>::get_LargeButtons(void)
{
  TOLEBOOL pvarfLargeButtons;
  this->get_LargeButtons((TOLEBOOL*)&pvarfLargeButtons);
  return pvarfLargeButtons;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarsDispT<T>::set_LargeButtons(TOLEBOOL pvarfLargeButtons/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LargeButtons"), DISPID(1610809354));
  TAutoArgs<1> _args;
  _args[1] = pvarfLargeButtons /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarsDispT<T>::get_MenuAnimationStyle(Office_2k::MsoMenuAnimation* pma/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MenuAnimationStyle"), DISPID(DISPID_UNKNOWN/*[1610809356]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pma /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoMenuAnimation __fastcall
_CommandBarsDispT<T>::get_MenuAnimationStyle(void)
{
  Office_2k::MsoMenuAnimation pma;
  this->get_MenuAnimationStyle((Office_2k::MsoMenuAnimation*)&pma);
  return pma;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarsDispT<T>::set_MenuAnimationStyle(Office_2k::MsoMenuAnimation pma/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MenuAnimationStyle"), DISPID(1610809356));
  TAutoArgs<1> _args;
  _args[1] = (int)pma /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarsDispT<T>::get__NewEnum(LPUNKNOWN* ppienum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppienum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
_CommandBarsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppienum;
  this->get__NewEnum((LPUNKNOWN*)&ppienum);
  return ppienum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarsDispT<T>::get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610809359]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_CommandBarsDispT<T>::get_Parent(void)
{
  LPDISPATCH ppidisp;
  this->get_Parent((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarsDispT<T>::ReleaseFocus()
{
  _TDispID _dispid(*this, OLETEXT("ReleaseFocus"), DISPID(DISPID_UNKNOWN/*[1610809360]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarsDispT<T>::get_IdsString(int ids/*[in]*/, BSTR* pbstrName/*[out]*/, 
                                    int* pcch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IdsString"), DISPID(DISPID_UNKNOWN/*[1610809361]*/));
  TAutoArgs<2> _args;
  _args[1] = ids /*[VT_INT:0]*/;
  _args[2] = pbstrName /*[VT_BSTR:1]*/;
  return OutRetValSetterPtr(pcch /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
_CommandBarsDispT<T>::get_IdsString(int ids/*[in]*/, BSTR* pbstrName/*[out]*/)
{
  int pcch;
  this->get_IdsString(ids, pbstrName, (int*)&pcch);
  return pcch;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarsDispT<T>::get_TmcGetName(int tmc/*[in]*/, BSTR* pbstrName/*[out]*/, 
                                     int* pcch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TmcGetName"), DISPID(DISPID_UNKNOWN/*[1610809362]*/));
  TAutoArgs<2> _args;
  _args[1] = tmc /*[VT_INT:0]*/;
  _args[2] = pbstrName /*[VT_BSTR:1]*/;
  return OutRetValSetterPtr(pcch /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
_CommandBarsDispT<T>::get_TmcGetName(int tmc/*[in]*/, BSTR* pbstrName/*[out]*/)
{
  int pcch;
  this->get_TmcGetName(tmc, pbstrName, (int*)&pcch);
  return pcch;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarsDispT<T>::get_AdaptiveMenus(TOLEBOOL* pvarfAdaptiveMenus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdaptiveMenus"), DISPID(DISPID_UNKNOWN/*[1610809363]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfAdaptiveMenus /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CommandBarsDispT<T>::get_AdaptiveMenus(void)
{
  TOLEBOOL pvarfAdaptiveMenus;
  this->get_AdaptiveMenus((TOLEBOOL*)&pvarfAdaptiveMenus);
  return pvarfAdaptiveMenus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarsDispT<T>::set_AdaptiveMenus(TOLEBOOL pvarfAdaptiveMenus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdaptiveMenus"), DISPID(1610809363));
  TAutoArgs<1> _args;
  _args[1] = pvarfAdaptiveMenus /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarsDispT<T>::FindControls(TVariantInParam Type/*[in,opt]*/, TVariantInParam Id/*[in,opt]*/
                                   , TVariantInParam Tag/*[in,opt]*/, 
                                   TVariantInParam Visible/*[in,opt]*/, 
                                   Office_2k::CommandBarControlsPtr* ppcbcs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FindControls"), DISPID(DISPID_UNKNOWN/*[1610809365]*/));
  TAutoArgs<4> _args;
  _args[1] = Type /*[VT_VARIANT:0]*/;
  _args[2] = Id /*[VT_VARIANT:0]*/;
  _args[3] = Tag /*[VT_VARIANT:0]*/;
  _args[4] = Visible /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::CommandBarControls**)ppcbcs /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_2k::CommandBarControlsPtr __fastcall
_CommandBarsDispT<T>::FindControls(TVariantInParam Type/*[in,opt]*/, TVariantInParam Id/*[in,opt]*/, 
                                   TVariantInParam Tag/*[in,opt]*/, 
                                   TVariantInParam Visible/*[in,opt]*/)
{
  Office_2k::CommandBarControlsPtr ppcbcs;
  this->FindControls(Type, Id, Tag, Visible, (Office_2k::CommandBarControlsPtr*)&ppcbcs);
  return ppcbcs;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarsDispT<T>::AddEx(TVariantInParam TbidOrName/*[in,opt]*/, 
                            TVariantInParam Position/*[in,opt]*/, 
                            TVariantInParam MenuBar/*[in,opt]*/, 
                            TVariantInParam Temporary/*[in,opt]*/, 
                            TVariantInParam TbtrProtection/*[in,opt]*/, 
                            Office_2k::CommandBarPtr* ppcb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddEx"), DISPID(DISPID_UNKNOWN/*[1610809366]*/));
  TAutoArgs<5> _args;
  _args[1] = TbidOrName /*[VT_VARIANT:0]*/;
  _args[2] = Position /*[VT_VARIANT:0]*/;
  _args[3] = MenuBar /*[VT_VARIANT:0]*/;
  _args[4] = Temporary /*[VT_VARIANT:0]*/;
  _args[5] = TbtrProtection /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::CommandBar**)ppcb /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_2k::CommandBarPtr __fastcall
_CommandBarsDispT<T>::AddEx(TVariantInParam TbidOrName/*[in,opt]*/, 
                            TVariantInParam Position/*[in,opt]*/, 
                            TVariantInParam MenuBar/*[in,opt]*/, 
                            TVariantInParam Temporary/*[in,opt]*/, 
                            TVariantInParam TbtrProtection/*[in,opt]*/)
{
  Office_2k::CommandBarPtr ppcb;
  this->AddEx(TbidOrName, Position, MenuBar, Temporary, TbtrProtection, (Office_2k::CommandBarPtr*)&ppcb);
  return ppcb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarsDispT<T>::get_DisplayFonts(TOLEBOOL* pvarfDisplayFonts/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayFonts"), DISPID(DISPID_UNKNOWN/*[1610809367]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfDisplayFonts /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CommandBarsDispT<T>::get_DisplayFonts(void)
{
  TOLEBOOL pvarfDisplayFonts;
  this->get_DisplayFonts((TOLEBOOL*)&pvarfDisplayFonts);
  return pvarfDisplayFonts;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarsDispT<T>::set_DisplayFonts(TOLEBOOL pvarfDisplayFonts/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayFonts"), DISPID(1610809367));
  TAutoArgs<1> _args;
  _args[1] = pvarfDisplayFonts /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarsDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_CommandBarsDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarsDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_CommandBarsDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  CommandBar
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0304-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_BuiltIn(TOLEBOOL* pvarfBuiltIn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuiltIn"), DISPID(DISPID_UNKNOWN/*[1610874880]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfBuiltIn /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
CommandBarDispT<T>::get_BuiltIn(void)
{
  TOLEBOOL pvarfBuiltIn;
  this->get_BuiltIn((TOLEBOOL*)&pvarfBuiltIn);
  return pvarfBuiltIn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_Context(BSTR* pbstrContext/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Context"), DISPID(DISPID_UNKNOWN/*[1610874881]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrContext /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarDispT<T>::get_Context(void)
{
  BSTR pbstrContext;
  this->get_Context((BSTR*)&pbstrContext);
  return pbstrContext;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::set_Context(BSTR pbstrContext/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Context"), DISPID(1610874881));
  TAutoArgs<1> _args;
  _args[1] = pbstrContext /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_Controls(Office_2k::CommandBarControlsPtr* ppcbcs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Controls"), DISPID(DISPID_UNKNOWN/*[1610874883]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::CommandBarControls**)ppcbcs /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::CommandBarControlsPtr __fastcall
CommandBarDispT<T>::get_Controls(void)
{
  Office_2k::CommandBarControlsPtr ppcbcs;
  this->get_Controls((Office_2k::CommandBarControlsPtr*)&ppcbcs);
  return ppcbcs;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(DISPID_UNKNOWN/*[1610874884]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_Enabled(TOLEBOOL* pvarfEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(DISPID_UNKNOWN/*[1610874885]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfEnabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
CommandBarDispT<T>::get_Enabled(void)
{
  TOLEBOOL pvarfEnabled;
  this->get_Enabled((TOLEBOOL*)&pvarfEnabled);
  return pvarfEnabled;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::set_Enabled(TOLEBOOL pvarfEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(1610874885));
  TAutoArgs<1> _args;
  _args[1] = pvarfEnabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::FindControl(TVariantInParam Type/*[in,opt]*/, TVariantInParam Id/*[in,opt]*/, 
                                TVariantInParam Tag/*[in,opt]*/, TVariantInParam Visible/*[in,opt]*/
                                , TVariantInParam Recursive/*[in,opt]*/, 
                                Office_2k::CommandBarControlPtr* ppcbc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FindControl"), DISPID(DISPID_UNKNOWN/*[1610874887]*/));
  TAutoArgs<5> _args;
  _args[1] = Type /*[VT_VARIANT:0]*/;
  _args[2] = Id /*[VT_VARIANT:0]*/;
  _args[3] = Tag /*[VT_VARIANT:0]*/;
  _args[4] = Visible /*[VT_VARIANT:0]*/;
  _args[5] = Recursive /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::CommandBarControl**)ppcbc /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_2k::CommandBarControlPtr __fastcall
CommandBarDispT<T>::FindControl(TVariantInParam Type/*[in,opt]*/, TVariantInParam Id/*[in,opt]*/, 
                                TVariantInParam Tag/*[in,opt]*/, TVariantInParam Visible/*[in,opt]*/, 
                                TVariantInParam Recursive/*[in,opt]*/)
{
  Office_2k::CommandBarControlPtr ppcbc;
  this->FindControl(Type, Id, Tag, Visible, Recursive, (Office_2k::CommandBarControlPtr*)&ppcbc);
  return ppcbc;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_Height(int* pdy/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(DISPID_UNKNOWN/*[1610874888]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdy /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarDispT<T>::get_Height(void)
{
  int pdy;
  this->get_Height((int*)&pdy);
  return pdy;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::set_Height(int pdy/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1610874888));
  TAutoArgs<1> _args;
  _args[1] = pdy /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_Index(int* pi/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(DISPID_UNKNOWN/*[1610874890]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pi /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarDispT<T>::get_Index(void)
{
  int pi;
  this->get_Index((int*)&pi);
  return pi;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_InstanceId(long* pid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InstanceId"), DISPID(DISPID_UNKNOWN/*[1610874891]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pid /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
CommandBarDispT<T>::get_InstanceId(void)
{
  long pid;
  this->get_InstanceId((long*)&pid);
  return pid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_Left(int* pxpLeft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(DISPID_UNKNOWN/*[1610874892]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pxpLeft /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarDispT<T>::get_Left(void)
{
  int pxpLeft;
  this->get_Left((int*)&pxpLeft);
  return pxpLeft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::set_Left(int pxpLeft/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1610874892));
  TAutoArgs<1> _args;
  _args[1] = pxpLeft /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_Name(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(DISPID_UNKNOWN/*[1610874894]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarDispT<T>::get_Name(void)
{
  BSTR pbstrName;
  this->get_Name((BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::set_Name(BSTR pbstrName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1610874894));
  TAutoArgs<1> _args;
  _args[1] = pbstrName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_NameLocal(BSTR* pbstrNameLocal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NameLocal"), DISPID(DISPID_UNKNOWN/*[1610874896]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrNameLocal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarDispT<T>::get_NameLocal(void)
{
  BSTR pbstrNameLocal;
  this->get_NameLocal((BSTR*)&pbstrNameLocal);
  return pbstrNameLocal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::set_NameLocal(BSTR pbstrNameLocal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NameLocal"), DISPID(1610874896));
  TAutoArgs<1> _args;
  _args[1] = pbstrNameLocal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610874898]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CommandBarDispT<T>::get_Parent(void)
{
  LPDISPATCH ppidisp;
  this->get_Parent((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_Position(Office_2k::MsoBarPosition* ppos/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Position"), DISPID(DISPID_UNKNOWN/*[1610874899]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ppos /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoBarPosition __fastcall
CommandBarDispT<T>::get_Position(void)
{
  Office_2k::MsoBarPosition ppos;
  this->get_Position((Office_2k::MsoBarPosition*)&ppos);
  return ppos;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::set_Position(Office_2k::MsoBarPosition ppos/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Position"), DISPID(1610874899));
  TAutoArgs<1> _args;
  _args[1] = (int)ppos /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_RowIndex(int* piRow/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RowIndex"), DISPID(DISPID_UNKNOWN/*[1610874901]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(piRow /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarDispT<T>::get_RowIndex(void)
{
  int piRow;
  this->get_RowIndex((int*)&piRow);
  return piRow;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::set_RowIndex(int piRow/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RowIndex"), DISPID(1610874901));
  TAutoArgs<1> _args;
  _args[1] = piRow /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_Protection(Office_2k::MsoBarProtection* pprot/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Protection"), DISPID(DISPID_UNKNOWN/*[1610874903]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pprot /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoBarProtection __fastcall
CommandBarDispT<T>::get_Protection(void)
{
  Office_2k::MsoBarProtection pprot;
  this->get_Protection((Office_2k::MsoBarProtection*)&pprot);
  return pprot;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::set_Protection(Office_2k::MsoBarProtection pprot/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Protection"), DISPID(1610874903));
  TAutoArgs<1> _args;
  _args[1] = (int)pprot /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::Reset()
{
  _TDispID _dispid(*this, OLETEXT("Reset"), DISPID(DISPID_UNKNOWN/*[1610874905]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::ShowPopup(TVariantInParam x/*[in,opt]*/, TVariantInParam y/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowPopup"), DISPID(DISPID_UNKNOWN/*[1610874906]*/));
  TAutoArgs<2> _args;
  _args[1] = x /*[VT_VARIANT:0]*/;
  _args[2] = y /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_Top(int* pypTop/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(DISPID_UNKNOWN/*[1610874907]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pypTop /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarDispT<T>::get_Top(void)
{
  int pypTop;
  this->get_Top((int*)&pypTop);
  return pypTop;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::set_Top(int pypTop/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1610874907));
  TAutoArgs<1> _args;
  _args[1] = pypTop /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_Type(Office_2k::MsoBarType* ptype/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(DISPID_UNKNOWN/*[1610874909]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ptype /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoBarType __fastcall
CommandBarDispT<T>::get_Type(void)
{
  Office_2k::MsoBarType ptype;
  this->get_Type((Office_2k::MsoBarType*)&ptype);
  return ptype;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_Visible(TOLEBOOL* pvarfVisible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(DISPID_UNKNOWN/*[1610874910]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfVisible /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
CommandBarDispT<T>::get_Visible(void)
{
  TOLEBOOL pvarfVisible;
  this->get_Visible((TOLEBOOL*)&pvarfVisible);
  return pvarfVisible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::set_Visible(TOLEBOOL pvarfVisible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1610874910));
  TAutoArgs<1> _args;
  _args[1] = pvarfVisible /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_Width(int* pdx/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(DISPID_UNKNOWN/*[1610874912]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdx /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarDispT<T>::get_Width(void)
{
  int pdx;
  this->get_Width((int*)&pdx);
  return pdx;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::set_Width(int pdx/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1610874912));
  TAutoArgs<1> _args;
  _args[1] = pdx /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_AdaptiveMenu(TOLEBOOL* pvarfAdaptiveMenu/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdaptiveMenu"), DISPID(DISPID_UNKNOWN/*[1610874914]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfAdaptiveMenu /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
CommandBarDispT<T>::get_AdaptiveMenu(void)
{
  TOLEBOOL pvarfAdaptiveMenu;
  this->get_AdaptiveMenu((TOLEBOOL*)&pvarfAdaptiveMenu);
  return pvarfAdaptiveMenu;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::set_AdaptiveMenu(TOLEBOOL pvarfAdaptiveMenu/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdaptiveMenu"), DISPID(1610874914));
  TAutoArgs<1> _args;
  _args[1] = pvarfAdaptiveMenu /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610809344]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CommandBarDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
CommandBarDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_accParent(LPDISPATCH* ppdispParent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accParent"), DISPID(-5000));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppdispParent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CommandBarDispT<T>::get_accParent(void)
{
  LPDISPATCH ppdispParent;
  this->get_accParent((LPDISPATCH*)&ppdispParent);
  return ppdispParent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_accChildCount(long* pcountChildren/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accChildCount"), DISPID(-5001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcountChildren /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
CommandBarDispT<T>::get_accChildCount(void)
{
  long pcountChildren;
  this->get_accChildCount((long*)&pcountChildren);
  return pcountChildren;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_accChild(TVariantInParam varChild/*[in]*/, 
                                 LPDISPATCH* ppdispChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accChild"), DISPID(-5002));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(ppdispChild /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CommandBarDispT<T>::get_accChild(TVariantInParam varChild/*[in]*/)
{
  LPDISPATCH ppdispChild;
  this->get_accChild(varChild, (LPDISPATCH*)&ppdispChild);
  return ppdispChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_accName(TVariantInParam varChild/*[in,opt]*/, BSTR* pszName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accName"), DISPID(-5003));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarDispT<T>::get_accName(TVariantInParam varChild/*[in,opt]*/)
{
  BSTR pszName;
  this->get_accName(varChild, (BSTR*)&pszName);
  return pszName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_accValue(TVariantInParam varChild/*[in,opt]*/, 
                                 BSTR* pszValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accValue"), DISPID(-5004));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszValue /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarDispT<T>::get_accValue(TVariantInParam varChild/*[in,opt]*/)
{
  BSTR pszValue;
  this->get_accValue(varChild, (BSTR*)&pszValue);
  return pszValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_accDescription(TVariantInParam varChild/*[in,opt]*/, 
                                       BSTR* pszDescription/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDescription"), DISPID(-5005));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszDescription /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarDispT<T>::get_accDescription(TVariantInParam varChild/*[in,opt]*/)
{
  BSTR pszDescription;
  this->get_accDescription(varChild, (BSTR*)&pszDescription);
  return pszDescription;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_accRole(TVariantInParam varChild/*[in,opt]*/, 
                                TVariant* pvarRole/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accRole"), DISPID(-5006));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvarRole /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
CommandBarDispT<T>::get_accRole(TVariantInParam varChild/*[in,opt]*/)
{
  TVariant pvarRole;
  this->get_accRole(varChild, (TVariant*)&pvarRole);
  return pvarRole;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_accState(TVariantInParam varChild/*[in,opt]*/, 
                                 TVariant* pvarState/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accState"), DISPID(-5007));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvarState /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
CommandBarDispT<T>::get_accState(TVariantInParam varChild/*[in,opt]*/)
{
  TVariant pvarState;
  this->get_accState(varChild, (TVariant*)&pvarState);
  return pvarState;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_accHelp(TVariantInParam varChild/*[in,opt]*/, BSTR* pszHelp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accHelp"), DISPID(-5008));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszHelp /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarDispT<T>::get_accHelp(TVariantInParam varChild/*[in,opt]*/)
{
  BSTR pszHelp;
  this->get_accHelp(varChild, (BSTR*)&pszHelp);
  return pszHelp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                     TVariantInParam varChild/*[in,opt]*/, 
                                     long* pidTopic/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accHelpTopic"), DISPID(-5009));
  TAutoArgs<2> _args;
  _args[1] = pszHelpFile /*[VT_BSTR:1]*/;
  _args[2] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pidTopic /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
CommandBarDispT<T>::get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                     TVariantInParam varChild/*[in,opt]*/)
{
  long pidTopic;
  this->get_accHelpTopic(pszHelpFile, varChild, (long*)&pidTopic);
  return pidTopic;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_accKeyboardShortcut(TVariantInParam varChild/*[in,opt]*/, 
                                            BSTR* pszKeyboardShortcut/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accKeyboardShortcut"), DISPID(-5010));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszKeyboardShortcut /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarDispT<T>::get_accKeyboardShortcut(TVariantInParam varChild/*[in,opt]*/)
{
  BSTR pszKeyboardShortcut;
  this->get_accKeyboardShortcut(varChild, (BSTR*)&pszKeyboardShortcut);
  return pszKeyboardShortcut;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_accFocus(TVariant* pvarChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accFocus"), DISPID(-5011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarChild /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
CommandBarDispT<T>::get_accFocus(void)
{
  TVariant pvarChild;
  this->get_accFocus((TVariant*)&pvarChild);
  return pvarChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_accSelection(TVariant* pvarChildren/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accSelection"), DISPID(-5012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarChildren /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
CommandBarDispT<T>::get_accSelection(void)
{
  TVariant pvarChildren;
  this->get_accSelection((TVariant*)&pvarChildren);
  return pvarChildren;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_accDefaultAction(TVariantInParam varChild/*[in,opt]*/, 
                                         BSTR* pszDefaultAction/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDefaultAction"), DISPID(-5013));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszDefaultAction /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarDispT<T>::get_accDefaultAction(TVariantInParam varChild/*[in,opt]*/)
{
  BSTR pszDefaultAction;
  this->get_accDefaultAction(varChild, (BSTR*)&pszDefaultAction);
  return pszDefaultAction;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::accSelect(long flagsSelect/*[in]*/, TVariantInParam varChild/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("accSelect"), DISPID(-5014));
  TAutoArgs<2> _args;
  _args[1] = flagsSelect /*[VT_I4:0]*/;
  _args[2] = varChild /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::accLocation(long* pxLeft/*[out]*/, long* pyTop/*[out]*/, long* pcxWidth/*[out]*/
                                , long* pcyHeight/*[out]*/, TVariantInParam varChild/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("accLocation"), DISPID(-5015));
  TAutoArgs<5> _args;
  _args[1] = pxLeft /*[VT_I4:1]*/;
  _args[2] = pyTop /*[VT_I4:1]*/;
  _args[3] = pcxWidth /*[VT_I4:1]*/;
  _args[4] = pcyHeight /*[VT_I4:1]*/;
  _args[5] = varChild /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::accNavigate(long navDir/*[in]*/, TVariantInParam varStart/*[in,opt]*/, 
                                TVariant* pvarEndUpAt/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accNavigate"), DISPID(-5016));
  TAutoArgs<2> _args;
  _args[1] = navDir /*[VT_I4:0]*/;
  _args[2] = varStart /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvarEndUpAt /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
CommandBarDispT<T>::accNavigate(long navDir/*[in]*/, TVariantInParam varStart/*[in,opt]*/)
{
  TVariant pvarEndUpAt;
  this->accNavigate(navDir, varStart, (TVariant*)&pvarEndUpAt);
  return pvarEndUpAt;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/, 
                               TVariant* pvarChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accHitTest"), DISPID(-5017));
  TAutoArgs<2> _args;
  _args[1] = xLeft /*[VT_I4:0]*/;
  _args[2] = yTop /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pvarChild /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
CommandBarDispT<T>::accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/)
{
  TVariant pvarChild;
  this->accHitTest(xLeft, yTop, (TVariant*)&pvarChild);
  return pvarChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::accDoDefaultAction(TVariantInParam varChild/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDoDefaultAction"), DISPID(-5018));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::set_accName(TVariantInParam varChild/*[in,opt]*/, BSTR pszName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("accName"), DISPID(-5003));
  TAutoArgs<2> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  _args[2] = pszName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::set_accValue(TVariantInParam varChild/*[in,opt]*/, BSTR pszValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("accValue"), DISPID(-5004));
  TAutoArgs<2> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  _args[2] = pszValue /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  CommandBarControls
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0306-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlsDispT<T>::Add(TVariantInParam Type/*[in,opt]*/, TVariantInParam Id/*[in,opt]*/, 
                                TVariantInParam Parameter/*[in,opt]*/, 
                                TVariantInParam Before/*[in,opt]*/, 
                                TVariantInParam Temporary/*[in,opt]*/, 
                                Office_2k::CommandBarControlPtr* ppcbc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(DISPID_UNKNOWN/*[1610809344]*/));
  TAutoArgs<5> _args;
  _args[1] = Type /*[VT_VARIANT:0]*/;
  _args[2] = Id /*[VT_VARIANT:0]*/;
  _args[3] = Parameter /*[VT_VARIANT:0]*/;
  _args[4] = Before /*[VT_VARIANT:0]*/;
  _args[5] = Temporary /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::CommandBarControl**)ppcbc /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_2k::CommandBarControlPtr __fastcall
CommandBarControlsDispT<T>::Add(TVariantInParam Type/*[in,opt]*/, TVariantInParam Id/*[in,opt]*/, 
                                TVariantInParam Parameter/*[in,opt]*/, 
                                TVariantInParam Before/*[in,opt]*/, 
                                TVariantInParam Temporary/*[in,opt]*/)
{
  Office_2k::CommandBarControlPtr ppcbc;
  this->Add(Type, Id, Parameter, Before, Temporary, (Office_2k::CommandBarControlPtr*)&ppcbc);
  return ppcbc;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlsDispT<T>::get_Count(int* pcToolbarControls/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcToolbarControls /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarControlsDispT<T>::get_Count(void)
{
  int pcToolbarControls;
  this->get_Count((int*)&pcToolbarControls);
  return pcToolbarControls;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlsDispT<T>::get_Item(TVariantInParam Index/*[in]*/, 
                                     Office_2k::CommandBarControlPtr* ppcbc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::CommandBarControl**)ppcbc /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::CommandBarControlPtr __fastcall
CommandBarControlsDispT<T>::get_Item(TVariantInParam Index/*[in]*/)
{
  Office_2k::CommandBarControlPtr ppcbc;
  this->get_Item(Index, (Office_2k::CommandBarControlPtr*)&ppcbc);
  return ppcbc;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlsDispT<T>::get__NewEnum(LPUNKNOWN* ppienum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppienum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
CommandBarControlsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppienum;
  this->get__NewEnum((LPUNKNOWN*)&ppienum);
  return ppienum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlsDispT<T>::get_Parent(Office_2k::CommandBarPtr* ppcb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610809348]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::CommandBar**)ppcb /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::CommandBarPtr __fastcall
CommandBarControlsDispT<T>::get_Parent(void)
{
  Office_2k::CommandBarPtr ppcb;
  this->get_Parent((Office_2k::CommandBarPtr*)&ppcb);
  return ppcb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlsDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CommandBarControlsDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlsDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
CommandBarControlsDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  CommandBarControl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {000C0308-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_BeginGroup(TOLEBOOL* pvarfBeginGroup/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginGroup"), DISPID(DISPID_UNKNOWN/*[1610874880]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfBeginGroup /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
CommandBarControlDispT<T>::get_BeginGroup(void)
{
  TOLEBOOL pvarfBeginGroup;
  this->get_BeginGroup((TOLEBOOL*)&pvarfBeginGroup);
  return pvarfBeginGroup;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::set_BeginGroup(TOLEBOOL pvarfBeginGroup/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginGroup"), DISPID(1610874880));
  TAutoArgs<1> _args;
  _args[1] = pvarfBeginGroup /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_BuiltIn(TOLEBOOL* pvarfBuiltIn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuiltIn"), DISPID(DISPID_UNKNOWN/*[1610874882]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfBuiltIn /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
CommandBarControlDispT<T>::get_BuiltIn(void)
{
  TOLEBOOL pvarfBuiltIn;
  this->get_BuiltIn((TOLEBOOL*)&pvarfBuiltIn);
  return pvarfBuiltIn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_Caption(BSTR* pbstrCaption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(DISPID_UNKNOWN/*[1610874883]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrCaption /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarControlDispT<T>::get_Caption(void)
{
  BSTR pbstrCaption;
  this->get_Caption((BSTR*)&pbstrCaption);
  return pbstrCaption;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::set_Caption(BSTR pbstrCaption/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(1610874883));
  TAutoArgs<1> _args;
  _args[1] = pbstrCaption /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_Control(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Control"), DISPID(DISPID_UNKNOWN/*[1610874885]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CommandBarControlDispT<T>::get_Control(void)
{
  LPDISPATCH ppidisp;
  this->get_Control((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::Copy(TVariantInParam Bar/*[in,opt]*/, TVariantInParam Before/*[in,opt]*/
                                , Office_2k::CommandBarControlPtr* ppcbc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Copy"), DISPID(DISPID_UNKNOWN/*[1610874886]*/));
  TAutoArgs<2> _args;
  _args[1] = Bar /*[VT_VARIANT:0]*/;
  _args[2] = Before /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::CommandBarControl**)ppcbc /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_2k::CommandBarControlPtr __fastcall
CommandBarControlDispT<T>::Copy(TVariantInParam Bar/*[in,opt]*/, TVariantInParam Before/*[in,opt]*/)
{
  Office_2k::CommandBarControlPtr ppcbc;
  this->Copy(Bar, Before, (Office_2k::CommandBarControlPtr*)&ppcbc);
  return ppcbc;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::Delete(TVariantInParam Temporary/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(DISPID_UNKNOWN/*[1610874887]*/));
  TAutoArgs<1> _args;
  _args[1] = Temporary /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_DescriptionText(BSTR* pbstrText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DescriptionText"), DISPID(DISPID_UNKNOWN/*[1610874888]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarControlDispT<T>::get_DescriptionText(void)
{
  BSTR pbstrText;
  this->get_DescriptionText((BSTR*)&pbstrText);
  return pbstrText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::set_DescriptionText(BSTR pbstrText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DescriptionText"), DISPID(1610874888));
  TAutoArgs<1> _args;
  _args[1] = pbstrText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_Enabled(TOLEBOOL* pvarfEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(DISPID_UNKNOWN/*[1610874890]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfEnabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
CommandBarControlDispT<T>::get_Enabled(void)
{
  TOLEBOOL pvarfEnabled;
  this->get_Enabled((TOLEBOOL*)&pvarfEnabled);
  return pvarfEnabled;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::set_Enabled(TOLEBOOL pvarfEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(1610874890));
  TAutoArgs<1> _args;
  _args[1] = pvarfEnabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::Execute()
{
  _TDispID _dispid(*this, OLETEXT("Execute"), DISPID(DISPID_UNKNOWN/*[1610874892]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_Height(int* pdy/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(DISPID_UNKNOWN/*[1610874893]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdy /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarControlDispT<T>::get_Height(void)
{
  int pdy;
  this->get_Height((int*)&pdy);
  return pdy;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::set_Height(int pdy/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1610874893));
  TAutoArgs<1> _args;
  _args[1] = pdy /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_HelpContextId(int* pid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(DISPID_UNKNOWN/*[1610874895]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pid /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarControlDispT<T>::get_HelpContextId(void)
{
  int pid;
  this->get_HelpContextId((int*)&pid);
  return pid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::set_HelpContextId(int pid/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(1610874895));
  TAutoArgs<1> _args;
  _args[1] = pid /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_HelpFile(BSTR* pbstrFilename/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpFile"), DISPID(DISPID_UNKNOWN/*[1610874897]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrFilename /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarControlDispT<T>::get_HelpFile(void)
{
  BSTR pbstrFilename;
  this->get_HelpFile((BSTR*)&pbstrFilename);
  return pbstrFilename;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::set_HelpFile(BSTR pbstrFilename/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpFile"), DISPID(1610874897));
  TAutoArgs<1> _args;
  _args[1] = pbstrFilename /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_Id(int* pid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Id"), DISPID(DISPID_UNKNOWN/*[1610874899]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pid /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarControlDispT<T>::get_Id(void)
{
  int pid;
  this->get_Id((int*)&pid);
  return pid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_Index(int* pi/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(DISPID_UNKNOWN/*[1610874900]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pi /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarControlDispT<T>::get_Index(void)
{
  int pi;
  this->get_Index((int*)&pi);
  return pi;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_InstanceId(long* pid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InstanceId"), DISPID(DISPID_UNKNOWN/*[1610874901]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pid /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
CommandBarControlDispT<T>::get_InstanceId(void)
{
  long pid;
  this->get_InstanceId((long*)&pid);
  return pid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::Move(TVariantInParam Bar/*[in,opt]*/, TVariantInParam Before/*[in,opt]*/
                                , Office_2k::CommandBarControlPtr* ppcbc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Move"), DISPID(DISPID_UNKNOWN/*[1610874902]*/));
  TAutoArgs<2> _args;
  _args[1] = Bar /*[VT_VARIANT:0]*/;
  _args[2] = Before /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::CommandBarControl**)ppcbc /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_2k::CommandBarControlPtr __fastcall
CommandBarControlDispT<T>::Move(TVariantInParam Bar/*[in,opt]*/, TVariantInParam Before/*[in,opt]*/)
{
  Office_2k::CommandBarControlPtr ppcbc;
  this->Move(Bar, Before, (Office_2k::CommandBarControlPtr*)&ppcbc);
  return ppcbc;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_Left(int* px/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(DISPID_UNKNOWN/*[1610874903]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(px /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarControlDispT<T>::get_Left(void)
{
  int px;
  this->get_Left((int*)&px);
  return px;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_OLEUsage(Office_2k::MsoControlOLEUsage* pcou/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEUsage"), DISPID(DISPID_UNKNOWN/*[1610874904]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pcou /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoControlOLEUsage __fastcall
CommandBarControlDispT<T>::get_OLEUsage(void)
{
  Office_2k::MsoControlOLEUsage pcou;
  this->get_OLEUsage((Office_2k::MsoControlOLEUsage*)&pcou);
  return pcou;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::set_OLEUsage(Office_2k::MsoControlOLEUsage pcou/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEUsage"), DISPID(1610874904));
  TAutoArgs<1> _args;
  _args[1] = (int)pcou /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_OnAction(BSTR* pbstrOnAction/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnAction"), DISPID(DISPID_UNKNOWN/*[1610874906]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrOnAction /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarControlDispT<T>::get_OnAction(void)
{
  BSTR pbstrOnAction;
  this->get_OnAction((BSTR*)&pbstrOnAction);
  return pbstrOnAction;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::set_OnAction(BSTR pbstrOnAction/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnAction"), DISPID(1610874906));
  TAutoArgs<1> _args;
  _args[1] = pbstrOnAction /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_Parent(Office_2k::CommandBarPtr* ppcb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610874908]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::CommandBar**)ppcb /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::CommandBarPtr __fastcall
CommandBarControlDispT<T>::get_Parent(void)
{
  Office_2k::CommandBarPtr ppcb;
  this->get_Parent((Office_2k::CommandBarPtr*)&ppcb);
  return ppcb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_Parameter(BSTR* pbstrParam/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parameter"), DISPID(DISPID_UNKNOWN/*[1610874909]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrParam /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarControlDispT<T>::get_Parameter(void)
{
  BSTR pbstrParam;
  this->get_Parameter((BSTR*)&pbstrParam);
  return pbstrParam;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::set_Parameter(BSTR pbstrParam/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parameter"), DISPID(1610874909));
  TAutoArgs<1> _args;
  _args[1] = pbstrParam /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_Priority(int* pnPri/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Priority"), DISPID(DISPID_UNKNOWN/*[1610874911]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pnPri /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarControlDispT<T>::get_Priority(void)
{
  int pnPri;
  this->get_Priority((int*)&pnPri);
  return pnPri;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::set_Priority(int pnPri/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Priority"), DISPID(1610874911));
  TAutoArgs<1> _args;
  _args[1] = pnPri /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::Reset()
{
  _TDispID _dispid(*this, OLETEXT("Reset"), DISPID(DISPID_UNKNOWN/*[1610874913]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::SetFocus()
{
  _TDispID _dispid(*this, OLETEXT("SetFocus"), DISPID(DISPID_UNKNOWN/*[1610874914]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_Tag(BSTR* pbstrTag/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(DISPID_UNKNOWN/*[1610874915]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrTag /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarControlDispT<T>::get_Tag(void)
{
  BSTR pbstrTag;
  this->get_Tag((BSTR*)&pbstrTag);
  return pbstrTag;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::set_Tag(BSTR pbstrTag/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(1610874915));
  TAutoArgs<1> _args;
  _args[1] = pbstrTag /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_TooltipText(BSTR* pbstrTooltip/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TooltipText"), DISPID(DISPID_UNKNOWN/*[1610874917]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrTooltip /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarControlDispT<T>::get_TooltipText(void)
{
  BSTR pbstrTooltip;
  this->get_TooltipText((BSTR*)&pbstrTooltip);
  return pbstrTooltip;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::set_TooltipText(BSTR pbstrTooltip/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TooltipText"), DISPID(1610874917));
  TAutoArgs<1> _args;
  _args[1] = pbstrTooltip /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_Top(int* py/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(DISPID_UNKNOWN/*[1610874919]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(py /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarControlDispT<T>::get_Top(void)
{
  int py;
  this->get_Top((int*)&py);
  return py;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_Type(Office_2k::MsoControlType* ptype/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(DISPID_UNKNOWN/*[1610874920]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ptype /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoControlType __fastcall
CommandBarControlDispT<T>::get_Type(void)
{
  Office_2k::MsoControlType ptype;
  this->get_Type((Office_2k::MsoControlType*)&ptype);
  return ptype;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_Visible(TOLEBOOL* pvarfVisible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(DISPID_UNKNOWN/*[1610874921]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfVisible /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
CommandBarControlDispT<T>::get_Visible(void)
{
  TOLEBOOL pvarfVisible;
  this->get_Visible((TOLEBOOL*)&pvarfVisible);
  return pvarfVisible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::set_Visible(TOLEBOOL pvarfVisible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1610874921));
  TAutoArgs<1> _args;
  _args[1] = pvarfVisible /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_Width(int* pdx/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(DISPID_UNKNOWN/*[1610874923]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdx /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarControlDispT<T>::get_Width(void)
{
  int pdx;
  this->get_Width((int*)&pdx);
  return pdx;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::set_Width(int pdx/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1610874923));
  TAutoArgs<1> _args;
  _args[1] = pdx /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_IsPriorityDropped(TOLEBOOL* pvarfDropped/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsPriorityDropped"), DISPID(DISPID_UNKNOWN/*[1610874925]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfDropped /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
CommandBarControlDispT<T>::get_IsPriorityDropped(void)
{
  TOLEBOOL pvarfDropped;
  this->get_IsPriorityDropped((TOLEBOOL*)&pvarfDropped);
  return pvarfDropped;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::Reserved1()
{
  _TDispID _dispid(*this, OLETEXT("Reserved1"), DISPID(DISPID_UNKNOWN/*[1610874926]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::Reserved2()
{
  _TDispID _dispid(*this, OLETEXT("Reserved2"), DISPID(DISPID_UNKNOWN/*[1610874927]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::Reserved3()
{
  _TDispID _dispid(*this, OLETEXT("Reserved3"), DISPID(DISPID_UNKNOWN/*[1610874928]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::Reserved4()
{
  _TDispID _dispid(*this, OLETEXT("Reserved4"), DISPID(DISPID_UNKNOWN/*[1610874929]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::Reserved5()
{
  _TDispID _dispid(*this, OLETEXT("Reserved5"), DISPID(DISPID_UNKNOWN/*[1610874930]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::Reserved6()
{
  _TDispID _dispid(*this, OLETEXT("Reserved6"), DISPID(DISPID_UNKNOWN/*[1610874931]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::Reserved7()
{
  _TDispID _dispid(*this, OLETEXT("Reserved7"), DISPID(DISPID_UNKNOWN/*[1610874932]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610809344]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CommandBarControlDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
CommandBarControlDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_accParent(LPDISPATCH* ppdispParent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accParent"), DISPID(-5000));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppdispParent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CommandBarControlDispT<T>::get_accParent(void)
{
  LPDISPATCH ppdispParent;
  this->get_accParent((LPDISPATCH*)&ppdispParent);
  return ppdispParent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_accChildCount(long* pcountChildren/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accChildCount"), DISPID(-5001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcountChildren /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
CommandBarControlDispT<T>::get_accChildCount(void)
{
  long pcountChildren;
  this->get_accChildCount((long*)&pcountChildren);
  return pcountChildren;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_accChild(TVariantInParam varChild/*[in]*/, 
                                        LPDISPATCH* ppdispChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accChild"), DISPID(-5002));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(ppdispChild /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CommandBarControlDispT<T>::get_accChild(TVariantInParam varChild/*[in]*/)
{
  LPDISPATCH ppdispChild;
  this->get_accChild(varChild, (LPDISPATCH*)&ppdispChild);
  return ppdispChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_accName(TVariantInParam varChild/*[in,opt]*/, 
                                       BSTR* pszName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accName"), DISPID(-5003));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarControlDispT<T>::get_accName(TVariantInParam varChild/*[in,opt]*/)
{
  BSTR pszName;
  this->get_accName(varChild, (BSTR*)&pszName);
  return pszName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_accValue(TVariantInParam varChild/*[in,opt]*/, 
                                        BSTR* pszValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accValue"), DISPID(-5004));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszValue /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarControlDispT<T>::get_accValue(TVariantInParam varChild/*[in,opt]*/)
{
  BSTR pszValue;
  this->get_accValue(varChild, (BSTR*)&pszValue);
  return pszValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_accDescription(TVariantInParam varChild/*[in,opt]*/, 
                                              BSTR* pszDescription/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDescription"), DISPID(-5005));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszDescription /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarControlDispT<T>::get_accDescription(TVariantInParam varChild/*[in,opt]*/)
{
  BSTR pszDescription;
  this->get_accDescription(varChild, (BSTR*)&pszDescription);
  return pszDescription;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_accRole(TVariantInParam varChild/*[in,opt]*/, 
                                       TVariant* pvarRole/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accRole"), DISPID(-5006));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvarRole /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
CommandBarControlDispT<T>::get_accRole(TVariantInParam varChild/*[in,opt]*/)
{
  TVariant pvarRole;
  this->get_accRole(varChild, (TVariant*)&pvarRole);
  return pvarRole;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_accState(TVariantInParam varChild/*[in,opt]*/, 
                                        TVariant* pvarState/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accState"), DISPID(-5007));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvarState /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
CommandBarControlDispT<T>::get_accState(TVariantInParam varChild/*[in,opt]*/)
{
  TVariant pvarState;
  this->get_accState(varChild, (TVariant*)&pvarState);
  return pvarState;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_accHelp(TVariantInParam varChild/*[in,opt]*/, 
                                       BSTR* pszHelp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accHelp"), DISPID(-5008));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszHelp /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarControlDispT<T>::get_accHelp(TVariantInParam varChild/*[in,opt]*/)
{
  BSTR pszHelp;
  this->get_accHelp(varChild, (BSTR*)&pszHelp);
  return pszHelp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                            TVariantInParam varChild/*[in,opt]*/, 
                                            long* pidTopic/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accHelpTopic"), DISPID(-5009));
  TAutoArgs<2> _args;
  _args[1] = pszHelpFile /*[VT_BSTR:1]*/;
  _args[2] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pidTopic /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
CommandBarControlDispT<T>::get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                            TVariantInParam varChild/*[in,opt]*/)
{
  long pidTopic;
  this->get_accHelpTopic(pszHelpFile, varChild, (long*)&pidTopic);
  return pidTopic;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_accKeyboardShortcut(TVariantInParam varChild/*[in,opt]*/, 
                                                   BSTR* pszKeyboardShortcut/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accKeyboardShortcut"), DISPID(-5010));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszKeyboardShortcut /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarControlDispT<T>::get_accKeyboardShortcut(TVariantInParam varChild/*[in,opt]*/)
{
  BSTR pszKeyboardShortcut;
  this->get_accKeyboardShortcut(varChild, (BSTR*)&pszKeyboardShortcut);
  return pszKeyboardShortcut;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_accFocus(TVariant* pvarChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accFocus"), DISPID(-5011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarChild /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
CommandBarControlDispT<T>::get_accFocus(void)
{
  TVariant pvarChild;
  this->get_accFocus((TVariant*)&pvarChild);
  return pvarChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_accSelection(TVariant* pvarChildren/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accSelection"), DISPID(-5012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarChildren /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
CommandBarControlDispT<T>::get_accSelection(void)
{
  TVariant pvarChildren;
  this->get_accSelection((TVariant*)&pvarChildren);
  return pvarChildren;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_accDefaultAction(TVariantInParam varChild/*[in,opt]*/, 
                                                BSTR* pszDefaultAction/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDefaultAction"), DISPID(-5013));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszDefaultAction /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarControlDispT<T>::get_accDefaultAction(TVariantInParam varChild/*[in,opt]*/)
{
  BSTR pszDefaultAction;
  this->get_accDefaultAction(varChild, (BSTR*)&pszDefaultAction);
  return pszDefaultAction;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::accSelect(long flagsSelect/*[in]*/, TVariantInParam varChild/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("accSelect"), DISPID(-5014));
  TAutoArgs<2> _args;
  _args[1] = flagsSelect /*[VT_I4:0]*/;
  _args[2] = varChild /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::accLocation(long* pxLeft/*[out]*/, long* pyTop/*[out]*/, 
                                       long* pcxWidth/*[out]*/, long* pcyHeight/*[out]*/, 
                                       TVariantInParam varChild/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("accLocation"), DISPID(-5015));
  TAutoArgs<5> _args;
  _args[1] = pxLeft /*[VT_I4:1]*/;
  _args[2] = pyTop /*[VT_I4:1]*/;
  _args[3] = pcxWidth /*[VT_I4:1]*/;
  _args[4] = pcyHeight /*[VT_I4:1]*/;
  _args[5] = varChild /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::accNavigate(long navDir/*[in]*/, TVariantInParam varStart/*[in,opt]*/, 
                                       TVariant* pvarEndUpAt/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accNavigate"), DISPID(-5016));
  TAutoArgs<2> _args;
  _args[1] = navDir /*[VT_I4:0]*/;
  _args[2] = varStart /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvarEndUpAt /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
CommandBarControlDispT<T>::accNavigate(long navDir/*[in]*/, TVariantInParam varStart/*[in,opt]*/)
{
  TVariant pvarEndUpAt;
  this->accNavigate(navDir, varStart, (TVariant*)&pvarEndUpAt);
  return pvarEndUpAt;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/, 
                                      TVariant* pvarChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accHitTest"), DISPID(-5017));
  TAutoArgs<2> _args;
  _args[1] = xLeft /*[VT_I4:0]*/;
  _args[2] = yTop /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pvarChild /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
CommandBarControlDispT<T>::accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/)
{
  TVariant pvarChild;
  this->accHitTest(xLeft, yTop, (TVariant*)&pvarChild);
  return pvarChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::accDoDefaultAction(TVariantInParam varChild/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDoDefaultAction"), DISPID(-5018));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::set_accName(TVariantInParam varChild/*[in,opt]*/, BSTR pszName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("accName"), DISPID(-5003));
  TAutoArgs<2> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  _args[2] = pszName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::set_accValue(TVariantInParam varChild/*[in,opt]*/, BSTR pszValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("accValue"), DISPID(-5004));
  TAutoArgs<2> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  _args[2] = pszValue /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOM_CommandBarButton
// Interface: _CommandBarButton
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_CommandBarButtonT<T>::get_BuiltInFace(TOLEBOOL* pvarfBuiltIn/*[out,retval]*/)
{
  return (*this)->get_BuiltInFace(pvarfBuiltIn);
}

template <class T> TOLEBOOL __fastcall
TCOM_CommandBarButtonT<T>::get_BuiltInFace(void)
{
  TOLEBOOL pvarfBuiltIn;
  OLECHECK(this->get_BuiltInFace((TOLEBOOL*)&pvarfBuiltIn));
  return pvarfBuiltIn;
}

template <class T> HRESULT __fastcall
TCOM_CommandBarButtonT<T>::set_BuiltInFace(TOLEBOOL pvarfBuiltIn/*[in]*/)
{
  return (*this)->set_BuiltInFace(pvarfBuiltIn);
}

template <class T> HRESULT __fastcall
TCOM_CommandBarButtonT<T>::CopyFace(void)
{
  return (*this)->CopyFace();
}

template <class T> HRESULT __fastcall
TCOM_CommandBarButtonT<T>::get_FaceId(int* pid/*[out,retval]*/)
{
  return (*this)->get_FaceId(pid);
}

template <class T> int __fastcall
TCOM_CommandBarButtonT<T>::get_FaceId(void)
{
  int pid;
  OLECHECK(this->get_FaceId((int*)&pid));
  return pid;
}

template <class T> HRESULT __fastcall
TCOM_CommandBarButtonT<T>::set_FaceId(int pid/*[in]*/)
{
  return (*this)->set_FaceId(pid);
}

template <class T> HRESULT __fastcall
TCOM_CommandBarButtonT<T>::PasteFace(void)
{
  return (*this)->PasteFace();
}

template <class T> HRESULT __fastcall
TCOM_CommandBarButtonT<T>::get_ShortcutText(BSTR* pbstrText/*[out,retval]*/)
{
  return (*this)->get_ShortcutText(pbstrText);
}

template <class T> BSTR __fastcall
TCOM_CommandBarButtonT<T>::get_ShortcutText(void)
{
  BSTR pbstrText = 0;
  OLECHECK(this->get_ShortcutText((BSTR*)&pbstrText));
  return pbstrText;
}

template <class T> HRESULT __fastcall
TCOM_CommandBarButtonT<T>::set_ShortcutText(BSTR pbstrText/*[in]*/)
{
  return (*this)->set_ShortcutText(pbstrText);
}

template <class T> HRESULT __fastcall
TCOM_CommandBarButtonT<T>::get_State(Office_2k::MsoButtonState* pstate/*[out,retval]*/)
{
  return (*this)->get_State(pstate);
}

template <class T> Office_2k::MsoButtonState __fastcall
TCOM_CommandBarButtonT<T>::get_State(void)
{
  Office_2k::MsoButtonState pstate;
  OLECHECK(this->get_State((Office_2k::MsoButtonState*)&pstate));
  return pstate;
}

template <class T> HRESULT __fastcall
TCOM_CommandBarButtonT<T>::set_State(Office_2k::MsoButtonState pstate/*[in]*/)
{
  return (*this)->set_State(pstate);
}

template <class T> HRESULT __fastcall
TCOM_CommandBarButtonT<T>::get_Style(Office_2k::MsoButtonStyle* pstyle/*[out,retval]*/)
{
  return (*this)->get_Style(pstyle);
}

template <class T> Office_2k::MsoButtonStyle __fastcall
TCOM_CommandBarButtonT<T>::get_Style(void)
{
  Office_2k::MsoButtonStyle pstyle;
  OLECHECK(this->get_Style((Office_2k::MsoButtonStyle*)&pstyle));
  return pstyle;
}

template <class T> HRESULT __fastcall
TCOM_CommandBarButtonT<T>::set_Style(Office_2k::MsoButtonStyle pstyle/*[in]*/)
{
  return (*this)->set_Style(pstyle);
}

template <class T> HRESULT __fastcall
TCOM_CommandBarButtonT<T>::get_HyperlinkType(Office_2k::MsoCommandBarButtonHyperlinkType* phlType/*[out,retval]*/)
{
  return (*this)->get_HyperlinkType(phlType);
}

template <class T> Office_2k::MsoCommandBarButtonHyperlinkType __fastcall
TCOM_CommandBarButtonT<T>::get_HyperlinkType(void)
{
  Office_2k::MsoCommandBarButtonHyperlinkType phlType;
  OLECHECK(this->get_HyperlinkType((Office_2k::MsoCommandBarButtonHyperlinkType*)&phlType));
  return phlType;
}

template <class T> HRESULT __fastcall
TCOM_CommandBarButtonT<T>::set_HyperlinkType(Office_2k::MsoCommandBarButtonHyperlinkType phlType/*[in]*/)
{
  return (*this)->set_HyperlinkType(phlType);
}

// *********************************************************************//
// DispIntf:  _CommandBarButton
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C030E-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::get_BuiltInFace(TOLEBOOL* pvarfBuiltIn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuiltInFace"), DISPID(DISPID_UNKNOWN/*[1610940416]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfBuiltIn /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CommandBarButtonDispT<T>::get_BuiltInFace(void)
{
  TOLEBOOL pvarfBuiltIn;
  this->get_BuiltInFace((TOLEBOOL*)&pvarfBuiltIn);
  return pvarfBuiltIn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::set_BuiltInFace(TOLEBOOL pvarfBuiltIn/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuiltInFace"), DISPID(1610940416));
  TAutoArgs<1> _args;
  _args[1] = pvarfBuiltIn /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::CopyFace()
{
  _TDispID _dispid(*this, OLETEXT("CopyFace"), DISPID(DISPID_UNKNOWN/*[1610940418]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::get_FaceId(int* pid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FaceId"), DISPID(DISPID_UNKNOWN/*[1610940419]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pid /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
_CommandBarButtonDispT<T>::get_FaceId(void)
{
  int pid;
  this->get_FaceId((int*)&pid);
  return pid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::set_FaceId(int pid/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FaceId"), DISPID(1610940419));
  TAutoArgs<1> _args;
  _args[1] = pid /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::PasteFace()
{
  _TDispID _dispid(*this, OLETEXT("PasteFace"), DISPID(DISPID_UNKNOWN/*[1610940421]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::get_ShortcutText(BSTR* pbstrText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShortcutText"), DISPID(DISPID_UNKNOWN/*[1610940422]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandBarButtonDispT<T>::get_ShortcutText(void)
{
  BSTR pbstrText;
  this->get_ShortcutText((BSTR*)&pbstrText);
  return pbstrText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::set_ShortcutText(BSTR pbstrText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShortcutText"), DISPID(1610940422));
  TAutoArgs<1> _args;
  _args[1] = pbstrText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::get_State(Office_2k::MsoButtonState* pstate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(DISPID_UNKNOWN/*[1610940424]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pstate /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoButtonState __fastcall
_CommandBarButtonDispT<T>::get_State(void)
{
  Office_2k::MsoButtonState pstate;
  this->get_State((Office_2k::MsoButtonState*)&pstate);
  return pstate;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::set_State(Office_2k::MsoButtonState pstate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(1610940424));
  TAutoArgs<1> _args;
  _args[1] = (int)pstate /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::get_Style(Office_2k::MsoButtonStyle* pstyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Style"), DISPID(DISPID_UNKNOWN/*[1610940426]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pstyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoButtonStyle __fastcall
_CommandBarButtonDispT<T>::get_Style(void)
{
  Office_2k::MsoButtonStyle pstyle;
  this->get_Style((Office_2k::MsoButtonStyle*)&pstyle);
  return pstyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::set_Style(Office_2k::MsoButtonStyle pstyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Style"), DISPID(1610940426));
  TAutoArgs<1> _args;
  _args[1] = (int)pstyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::get_HyperlinkType(Office_2k::MsoCommandBarButtonHyperlinkType* phlType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HyperlinkType"), DISPID(DISPID_UNKNOWN/*[1610940428]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)phlType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoCommandBarButtonHyperlinkType __fastcall
_CommandBarButtonDispT<T>::get_HyperlinkType(void)
{
  Office_2k::MsoCommandBarButtonHyperlinkType phlType;
  this->get_HyperlinkType((Office_2k::MsoCommandBarButtonHyperlinkType*)&phlType);
  return phlType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::set_HyperlinkType(Office_2k::MsoCommandBarButtonHyperlinkType phlType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HyperlinkType"), DISPID(1610940428));
  TAutoArgs<1> _args;
  _args[1] = (int)phlType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::get_BeginGroup(TOLEBOOL* pvarfBeginGroup/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginGroup"), DISPID(DISPID_UNKNOWN/*[1610874880]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfBeginGroup /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CommandBarButtonDispT<T>::get_BeginGroup(void)
{
  TOLEBOOL pvarfBeginGroup;
  this->get_BeginGroup((TOLEBOOL*)&pvarfBeginGroup);
  return pvarfBeginGroup;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::set_BeginGroup(TOLEBOOL pvarfBeginGroup/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginGroup"), DISPID(1610874880));
  TAutoArgs<1> _args;
  _args[1] = pvarfBeginGroup /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::get_BuiltIn(TOLEBOOL* pvarfBuiltIn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuiltIn"), DISPID(DISPID_UNKNOWN/*[1610874882]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfBuiltIn /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CommandBarButtonDispT<T>::get_BuiltIn(void)
{
  TOLEBOOL pvarfBuiltIn;
  this->get_BuiltIn((TOLEBOOL*)&pvarfBuiltIn);
  return pvarfBuiltIn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::get_Caption(BSTR* pbstrCaption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(DISPID_UNKNOWN/*[1610874883]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrCaption /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandBarButtonDispT<T>::get_Caption(void)
{
  BSTR pbstrCaption;
  this->get_Caption((BSTR*)&pbstrCaption);
  return pbstrCaption;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::set_Caption(BSTR pbstrCaption/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(1610874883));
  TAutoArgs<1> _args;
  _args[1] = pbstrCaption /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::get_Control(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Control"), DISPID(DISPID_UNKNOWN/*[1610874885]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_CommandBarButtonDispT<T>::get_Control(void)
{
  LPDISPATCH ppidisp;
  this->get_Control((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::Copy(TVariantInParam Bar/*[in,opt]*/, TVariantInParam Before/*[in,opt]*/
                                , Office_2k::CommandBarControlPtr* ppcbc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Copy"), DISPID(DISPID_UNKNOWN/*[1610874886]*/));
  TAutoArgs<2> _args;
  _args[1] = Bar /*[VT_VARIANT:0]*/;
  _args[2] = Before /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::CommandBarControl**)ppcbc /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_2k::CommandBarControlPtr __fastcall
_CommandBarButtonDispT<T>::Copy(TVariantInParam Bar/*[in,opt]*/, TVariantInParam Before/*[in,opt]*/)
{
  Office_2k::CommandBarControlPtr ppcbc;
  this->Copy(Bar, Before, (Office_2k::CommandBarControlPtr*)&ppcbc);
  return ppcbc;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::Delete(TVariantInParam Temporary/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(DISPID_UNKNOWN/*[1610874887]*/));
  TAutoArgs<1> _args;
  _args[1] = Temporary /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::get_DescriptionText(BSTR* pbstrText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DescriptionText"), DISPID(DISPID_UNKNOWN/*[1610874888]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandBarButtonDispT<T>::get_DescriptionText(void)
{
  BSTR pbstrText;
  this->get_DescriptionText((BSTR*)&pbstrText);
  return pbstrText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::set_DescriptionText(BSTR pbstrText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DescriptionText"), DISPID(1610874888));
  TAutoArgs<1> _args;
  _args[1] = pbstrText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::get_Enabled(TOLEBOOL* pvarfEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(DISPID_UNKNOWN/*[1610874890]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfEnabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CommandBarButtonDispT<T>::get_Enabled(void)
{
  TOLEBOOL pvarfEnabled;
  this->get_Enabled((TOLEBOOL*)&pvarfEnabled);
  return pvarfEnabled;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::set_Enabled(TOLEBOOL pvarfEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(1610874890));
  TAutoArgs<1> _args;
  _args[1] = pvarfEnabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::Execute()
{
  _TDispID _dispid(*this, OLETEXT("Execute"), DISPID(DISPID_UNKNOWN/*[1610874892]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::get_Height(int* pdy/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(DISPID_UNKNOWN/*[1610874893]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdy /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
_CommandBarButtonDispT<T>::get_Height(void)
{
  int pdy;
  this->get_Height((int*)&pdy);
  return pdy;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::set_Height(int pdy/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1610874893));
  TAutoArgs<1> _args;
  _args[1] = pdy /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::get_HelpContextId(int* pid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(DISPID_UNKNOWN/*[1610874895]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pid /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
_CommandBarButtonDispT<T>::get_HelpContextId(void)
{
  int pid;
  this->get_HelpContextId((int*)&pid);
  return pid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::set_HelpContextId(int pid/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(1610874895));
  TAutoArgs<1> _args;
  _args[1] = pid /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::get_HelpFile(BSTR* pbstrFilename/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpFile"), DISPID(DISPID_UNKNOWN/*[1610874897]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrFilename /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandBarButtonDispT<T>::get_HelpFile(void)
{
  BSTR pbstrFilename;
  this->get_HelpFile((BSTR*)&pbstrFilename);
  return pbstrFilename;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::set_HelpFile(BSTR pbstrFilename/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpFile"), DISPID(1610874897));
  TAutoArgs<1> _args;
  _args[1] = pbstrFilename /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::get_Id(int* pid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Id"), DISPID(DISPID_UNKNOWN/*[1610874899]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pid /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
_CommandBarButtonDispT<T>::get_Id(void)
{
  int pid;
  this->get_Id((int*)&pid);
  return pid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::get_Index(int* pi/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(DISPID_UNKNOWN/*[1610874900]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pi /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
_CommandBarButtonDispT<T>::get_Index(void)
{
  int pi;
  this->get_Index((int*)&pi);
  return pi;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::get_InstanceId(long* pid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InstanceId"), DISPID(DISPID_UNKNOWN/*[1610874901]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pid /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_CommandBarButtonDispT<T>::get_InstanceId(void)
{
  long pid;
  this->get_InstanceId((long*)&pid);
  return pid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::Move(TVariantInParam Bar/*[in,opt]*/, TVariantInParam Before/*[in,opt]*/
                                , Office_2k::CommandBarControlPtr* ppcbc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Move"), DISPID(DISPID_UNKNOWN/*[1610874902]*/));
  TAutoArgs<2> _args;
  _args[1] = Bar /*[VT_VARIANT:0]*/;
  _args[2] = Before /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::CommandBarControl**)ppcbc /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_2k::CommandBarControlPtr __fastcall
_CommandBarButtonDispT<T>::Move(TVariantInParam Bar/*[in,opt]*/, TVariantInParam Before/*[in,opt]*/)
{
  Office_2k::CommandBarControlPtr ppcbc;
  this->Move(Bar, Before, (Office_2k::CommandBarControlPtr*)&ppcbc);
  return ppcbc;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::get_Left(int* px/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(DISPID_UNKNOWN/*[1610874903]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(px /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
_CommandBarButtonDispT<T>::get_Left(void)
{
  int px;
  this->get_Left((int*)&px);
  return px;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::get_OLEUsage(Office_2k::MsoControlOLEUsage* pcou/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEUsage"), DISPID(DISPID_UNKNOWN/*[1610874904]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pcou /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoControlOLEUsage __fastcall
_CommandBarButtonDispT<T>::get_OLEUsage(void)
{
  Office_2k::MsoControlOLEUsage pcou;
  this->get_OLEUsage((Office_2k::MsoControlOLEUsage*)&pcou);
  return pcou;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::set_OLEUsage(Office_2k::MsoControlOLEUsage pcou/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEUsage"), DISPID(1610874904));
  TAutoArgs<1> _args;
  _args[1] = (int)pcou /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::get_OnAction(BSTR* pbstrOnAction/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnAction"), DISPID(DISPID_UNKNOWN/*[1610874906]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrOnAction /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandBarButtonDispT<T>::get_OnAction(void)
{
  BSTR pbstrOnAction;
  this->get_OnAction((BSTR*)&pbstrOnAction);
  return pbstrOnAction;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::set_OnAction(BSTR pbstrOnAction/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnAction"), DISPID(1610874906));
  TAutoArgs<1> _args;
  _args[1] = pbstrOnAction /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::get_Parent(Office_2k::CommandBarPtr* ppcb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610874908]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::CommandBar**)ppcb /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::CommandBarPtr __fastcall
_CommandBarButtonDispT<T>::get_Parent(void)
{
  Office_2k::CommandBarPtr ppcb;
  this->get_Parent((Office_2k::CommandBarPtr*)&ppcb);
  return ppcb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::get_Parameter(BSTR* pbstrParam/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parameter"), DISPID(DISPID_UNKNOWN/*[1610874909]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrParam /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandBarButtonDispT<T>::get_Parameter(void)
{
  BSTR pbstrParam;
  this->get_Parameter((BSTR*)&pbstrParam);
  return pbstrParam;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::set_Parameter(BSTR pbstrParam/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parameter"), DISPID(1610874909));
  TAutoArgs<1> _args;
  _args[1] = pbstrParam /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::get_Priority(int* pnPri/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Priority"), DISPID(DISPID_UNKNOWN/*[1610874911]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pnPri /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
_CommandBarButtonDispT<T>::get_Priority(void)
{
  int pnPri;
  this->get_Priority((int*)&pnPri);
  return pnPri;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::set_Priority(int pnPri/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Priority"), DISPID(1610874911));
  TAutoArgs<1> _args;
  _args[1] = pnPri /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::Reset()
{
  _TDispID _dispid(*this, OLETEXT("Reset"), DISPID(DISPID_UNKNOWN/*[1610874913]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::SetFocus()
{
  _TDispID _dispid(*this, OLETEXT("SetFocus"), DISPID(DISPID_UNKNOWN/*[1610874914]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::get_Tag(BSTR* pbstrTag/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(DISPID_UNKNOWN/*[1610874915]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrTag /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandBarButtonDispT<T>::get_Tag(void)
{
  BSTR pbstrTag;
  this->get_Tag((BSTR*)&pbstrTag);
  return pbstrTag;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::set_Tag(BSTR pbstrTag/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(1610874915));
  TAutoArgs<1> _args;
  _args[1] = pbstrTag /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::get_TooltipText(BSTR* pbstrTooltip/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TooltipText"), DISPID(DISPID_UNKNOWN/*[1610874917]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrTooltip /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandBarButtonDispT<T>::get_TooltipText(void)
{
  BSTR pbstrTooltip;
  this->get_TooltipText((BSTR*)&pbstrTooltip);
  return pbstrTooltip;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::set_TooltipText(BSTR pbstrTooltip/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TooltipText"), DISPID(1610874917));
  TAutoArgs<1> _args;
  _args[1] = pbstrTooltip /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::get_Top(int* py/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(DISPID_UNKNOWN/*[1610874919]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(py /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
_CommandBarButtonDispT<T>::get_Top(void)
{
  int py;
  this->get_Top((int*)&py);
  return py;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::get_Type(Office_2k::MsoControlType* ptype/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(DISPID_UNKNOWN/*[1610874920]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ptype /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoControlType __fastcall
_CommandBarButtonDispT<T>::get_Type(void)
{
  Office_2k::MsoControlType ptype;
  this->get_Type((Office_2k::MsoControlType*)&ptype);
  return ptype;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::get_Visible(TOLEBOOL* pvarfVisible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(DISPID_UNKNOWN/*[1610874921]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfVisible /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CommandBarButtonDispT<T>::get_Visible(void)
{
  TOLEBOOL pvarfVisible;
  this->get_Visible((TOLEBOOL*)&pvarfVisible);
  return pvarfVisible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::set_Visible(TOLEBOOL pvarfVisible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1610874921));
  TAutoArgs<1> _args;
  _args[1] = pvarfVisible /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::get_Width(int* pdx/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(DISPID_UNKNOWN/*[1610874923]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdx /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
_CommandBarButtonDispT<T>::get_Width(void)
{
  int pdx;
  this->get_Width((int*)&pdx);
  return pdx;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::set_Width(int pdx/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1610874923));
  TAutoArgs<1> _args;
  _args[1] = pdx /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::get_IsPriorityDropped(TOLEBOOL* pvarfDropped/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsPriorityDropped"), DISPID(DISPID_UNKNOWN/*[1610874925]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfDropped /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CommandBarButtonDispT<T>::get_IsPriorityDropped(void)
{
  TOLEBOOL pvarfDropped;
  this->get_IsPriorityDropped((TOLEBOOL*)&pvarfDropped);
  return pvarfDropped;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::Reserved1()
{
  _TDispID _dispid(*this, OLETEXT("Reserved1"), DISPID(DISPID_UNKNOWN/*[1610874926]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::Reserved2()
{
  _TDispID _dispid(*this, OLETEXT("Reserved2"), DISPID(DISPID_UNKNOWN/*[1610874927]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::Reserved3()
{
  _TDispID _dispid(*this, OLETEXT("Reserved3"), DISPID(DISPID_UNKNOWN/*[1610874928]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::Reserved4()
{
  _TDispID _dispid(*this, OLETEXT("Reserved4"), DISPID(DISPID_UNKNOWN/*[1610874929]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::Reserved5()
{
  _TDispID _dispid(*this, OLETEXT("Reserved5"), DISPID(DISPID_UNKNOWN/*[1610874930]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::Reserved6()
{
  _TDispID _dispid(*this, OLETEXT("Reserved6"), DISPID(DISPID_UNKNOWN/*[1610874931]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::Reserved7()
{
  _TDispID _dispid(*this, OLETEXT("Reserved7"), DISPID(DISPID_UNKNOWN/*[1610874932]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610809344]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_CommandBarButtonDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_CommandBarButtonDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::get_accParent(LPDISPATCH* ppdispParent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accParent"), DISPID(-5000));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppdispParent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_CommandBarButtonDispT<T>::get_accParent(void)
{
  LPDISPATCH ppdispParent;
  this->get_accParent((LPDISPATCH*)&ppdispParent);
  return ppdispParent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::get_accChildCount(long* pcountChildren/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accChildCount"), DISPID(-5001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcountChildren /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_CommandBarButtonDispT<T>::get_accChildCount(void)
{
  long pcountChildren;
  this->get_accChildCount((long*)&pcountChildren);
  return pcountChildren;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::get_accChild(TVariantInParam varChild/*[in]*/, 
                                        LPDISPATCH* ppdispChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accChild"), DISPID(-5002));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(ppdispChild /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_CommandBarButtonDispT<T>::get_accChild(TVariantInParam varChild/*[in]*/)
{
  LPDISPATCH ppdispChild;
  this->get_accChild(varChild, (LPDISPATCH*)&ppdispChild);
  return ppdispChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::get_accName(TVariantInParam varChild/*[in,opt]*/, 
                                       BSTR* pszName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accName"), DISPID(-5003));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandBarButtonDispT<T>::get_accName(TVariantInParam varChild/*[in,opt]*/)
{
  BSTR pszName;
  this->get_accName(varChild, (BSTR*)&pszName);
  return pszName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::get_accValue(TVariantInParam varChild/*[in,opt]*/, 
                                        BSTR* pszValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accValue"), DISPID(-5004));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszValue /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandBarButtonDispT<T>::get_accValue(TVariantInParam varChild/*[in,opt]*/)
{
  BSTR pszValue;
  this->get_accValue(varChild, (BSTR*)&pszValue);
  return pszValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::get_accDescription(TVariantInParam varChild/*[in,opt]*/, 
                                              BSTR* pszDescription/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDescription"), DISPID(-5005));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszDescription /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandBarButtonDispT<T>::get_accDescription(TVariantInParam varChild/*[in,opt]*/)
{
  BSTR pszDescription;
  this->get_accDescription(varChild, (BSTR*)&pszDescription);
  return pszDescription;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::get_accRole(TVariantInParam varChild/*[in,opt]*/, 
                                       TVariant* pvarRole/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accRole"), DISPID(-5006));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvarRole /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_CommandBarButtonDispT<T>::get_accRole(TVariantInParam varChild/*[in,opt]*/)
{
  TVariant pvarRole;
  this->get_accRole(varChild, (TVariant*)&pvarRole);
  return pvarRole;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::get_accState(TVariantInParam varChild/*[in,opt]*/, 
                                        TVariant* pvarState/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accState"), DISPID(-5007));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvarState /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_CommandBarButtonDispT<T>::get_accState(TVariantInParam varChild/*[in,opt]*/)
{
  TVariant pvarState;
  this->get_accState(varChild, (TVariant*)&pvarState);
  return pvarState;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::get_accHelp(TVariantInParam varChild/*[in,opt]*/, 
                                       BSTR* pszHelp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accHelp"), DISPID(-5008));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszHelp /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandBarButtonDispT<T>::get_accHelp(TVariantInParam varChild/*[in,opt]*/)
{
  BSTR pszHelp;
  this->get_accHelp(varChild, (BSTR*)&pszHelp);
  return pszHelp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                            TVariantInParam varChild/*[in,opt]*/, 
                                            long* pidTopic/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accHelpTopic"), DISPID(-5009));
  TAutoArgs<2> _args;
  _args[1] = pszHelpFile /*[VT_BSTR:1]*/;
  _args[2] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pidTopic /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_CommandBarButtonDispT<T>::get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                            TVariantInParam varChild/*[in,opt]*/)
{
  long pidTopic;
  this->get_accHelpTopic(pszHelpFile, varChild, (long*)&pidTopic);
  return pidTopic;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::get_accKeyboardShortcut(TVariantInParam varChild/*[in,opt]*/, 
                                                   BSTR* pszKeyboardShortcut/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accKeyboardShortcut"), DISPID(-5010));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszKeyboardShortcut /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandBarButtonDispT<T>::get_accKeyboardShortcut(TVariantInParam varChild/*[in,opt]*/)
{
  BSTR pszKeyboardShortcut;
  this->get_accKeyboardShortcut(varChild, (BSTR*)&pszKeyboardShortcut);
  return pszKeyboardShortcut;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::get_accFocus(TVariant* pvarChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accFocus"), DISPID(-5011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarChild /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_CommandBarButtonDispT<T>::get_accFocus(void)
{
  TVariant pvarChild;
  this->get_accFocus((TVariant*)&pvarChild);
  return pvarChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::get_accSelection(TVariant* pvarChildren/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accSelection"), DISPID(-5012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarChildren /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_CommandBarButtonDispT<T>::get_accSelection(void)
{
  TVariant pvarChildren;
  this->get_accSelection((TVariant*)&pvarChildren);
  return pvarChildren;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::get_accDefaultAction(TVariantInParam varChild/*[in,opt]*/, 
                                                BSTR* pszDefaultAction/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDefaultAction"), DISPID(-5013));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszDefaultAction /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandBarButtonDispT<T>::get_accDefaultAction(TVariantInParam varChild/*[in,opt]*/)
{
  BSTR pszDefaultAction;
  this->get_accDefaultAction(varChild, (BSTR*)&pszDefaultAction);
  return pszDefaultAction;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::accSelect(long flagsSelect/*[in]*/, TVariantInParam varChild/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("accSelect"), DISPID(-5014));
  TAutoArgs<2> _args;
  _args[1] = flagsSelect /*[VT_I4:0]*/;
  _args[2] = varChild /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::accLocation(long* pxLeft/*[out]*/, long* pyTop/*[out]*/, 
                                       long* pcxWidth/*[out]*/, long* pcyHeight/*[out]*/, 
                                       TVariantInParam varChild/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("accLocation"), DISPID(-5015));
  TAutoArgs<5> _args;
  _args[1] = pxLeft /*[VT_I4:1]*/;
  _args[2] = pyTop /*[VT_I4:1]*/;
  _args[3] = pcxWidth /*[VT_I4:1]*/;
  _args[4] = pcyHeight /*[VT_I4:1]*/;
  _args[5] = varChild /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::accNavigate(long navDir/*[in]*/, TVariantInParam varStart/*[in,opt]*/, 
                                       TVariant* pvarEndUpAt/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accNavigate"), DISPID(-5016));
  TAutoArgs<2> _args;
  _args[1] = navDir /*[VT_I4:0]*/;
  _args[2] = varStart /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvarEndUpAt /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_CommandBarButtonDispT<T>::accNavigate(long navDir/*[in]*/, TVariantInParam varStart/*[in,opt]*/)
{
  TVariant pvarEndUpAt;
  this->accNavigate(navDir, varStart, (TVariant*)&pvarEndUpAt);
  return pvarEndUpAt;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/, 
                                      TVariant* pvarChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accHitTest"), DISPID(-5017));
  TAutoArgs<2> _args;
  _args[1] = xLeft /*[VT_I4:0]*/;
  _args[2] = yTop /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pvarChild /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_CommandBarButtonDispT<T>::accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/)
{
  TVariant pvarChild;
  this->accHitTest(xLeft, yTop, (TVariant*)&pvarChild);
  return pvarChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::accDoDefaultAction(TVariantInParam varChild/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDoDefaultAction"), DISPID(-5018));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::set_accName(TVariantInParam varChild/*[in,opt]*/, BSTR pszName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("accName"), DISPID(-5003));
  TAutoArgs<2> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  _args[2] = pszName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarButtonDispT<T>::set_accValue(TVariantInParam varChild/*[in,opt]*/, BSTR pszValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("accValue"), DISPID(-5004));
  TAutoArgs<2> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  _args[2] = pszValue /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  CommandBarPopup
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C030A-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_CommandBar(Office_2k::CommandBarPtr* ppcb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CommandBar"), DISPID(DISPID_UNKNOWN/*[1610940416]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::CommandBar**)ppcb /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::CommandBarPtr __fastcall
CommandBarPopupDispT<T>::get_CommandBar(void)
{
  Office_2k::CommandBarPtr ppcb;
  this->get_CommandBar((Office_2k::CommandBarPtr*)&ppcb);
  return ppcb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_Controls(Office_2k::CommandBarControlsPtr* ppcbcs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Controls"), DISPID(DISPID_UNKNOWN/*[1610940417]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::CommandBarControls**)ppcbcs /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::CommandBarControlsPtr __fastcall
CommandBarPopupDispT<T>::get_Controls(void)
{
  Office_2k::CommandBarControlsPtr ppcbcs;
  this->get_Controls((Office_2k::CommandBarControlsPtr*)&ppcbcs);
  return ppcbcs;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_OLEMenuGroup(Office_2k::MsoOLEMenuGroup* pomg/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEMenuGroup"), DISPID(DISPID_UNKNOWN/*[1610940418]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pomg /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoOLEMenuGroup __fastcall
CommandBarPopupDispT<T>::get_OLEMenuGroup(void)
{
  Office_2k::MsoOLEMenuGroup pomg;
  this->get_OLEMenuGroup((Office_2k::MsoOLEMenuGroup*)&pomg);
  return pomg;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::set_OLEMenuGroup(Office_2k::MsoOLEMenuGroup pomg/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEMenuGroup"), DISPID(1610940418));
  TAutoArgs<1> _args;
  _args[1] = (int)pomg /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_BeginGroup(TOLEBOOL* pvarfBeginGroup/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginGroup"), DISPID(DISPID_UNKNOWN/*[1610874880]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfBeginGroup /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
CommandBarPopupDispT<T>::get_BeginGroup(void)
{
  TOLEBOOL pvarfBeginGroup;
  this->get_BeginGroup((TOLEBOOL*)&pvarfBeginGroup);
  return pvarfBeginGroup;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::set_BeginGroup(TOLEBOOL pvarfBeginGroup/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginGroup"), DISPID(1610874880));
  TAutoArgs<1> _args;
  _args[1] = pvarfBeginGroup /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_BuiltIn(TOLEBOOL* pvarfBuiltIn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuiltIn"), DISPID(DISPID_UNKNOWN/*[1610874882]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfBuiltIn /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
CommandBarPopupDispT<T>::get_BuiltIn(void)
{
  TOLEBOOL pvarfBuiltIn;
  this->get_BuiltIn((TOLEBOOL*)&pvarfBuiltIn);
  return pvarfBuiltIn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_Caption(BSTR* pbstrCaption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(DISPID_UNKNOWN/*[1610874883]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrCaption /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarPopupDispT<T>::get_Caption(void)
{
  BSTR pbstrCaption;
  this->get_Caption((BSTR*)&pbstrCaption);
  return pbstrCaption;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::set_Caption(BSTR pbstrCaption/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(1610874883));
  TAutoArgs<1> _args;
  _args[1] = pbstrCaption /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_Control(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Control"), DISPID(DISPID_UNKNOWN/*[1610874885]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CommandBarPopupDispT<T>::get_Control(void)
{
  LPDISPATCH ppidisp;
  this->get_Control((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::Copy(TVariantInParam Bar/*[in,opt]*/, TVariantInParam Before/*[in,opt]*/, 
                              Office_2k::CommandBarControlPtr* ppcbc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Copy"), DISPID(DISPID_UNKNOWN/*[1610874886]*/));
  TAutoArgs<2> _args;
  _args[1] = Bar /*[VT_VARIANT:0]*/;
  _args[2] = Before /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::CommandBarControl**)ppcbc /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_2k::CommandBarControlPtr __fastcall
CommandBarPopupDispT<T>::Copy(TVariantInParam Bar/*[in,opt]*/, TVariantInParam Before/*[in,opt]*/)
{
  Office_2k::CommandBarControlPtr ppcbc;
  this->Copy(Bar, Before, (Office_2k::CommandBarControlPtr*)&ppcbc);
  return ppcbc;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::Delete(TVariantInParam Temporary/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(DISPID_UNKNOWN/*[1610874887]*/));
  TAutoArgs<1> _args;
  _args[1] = Temporary /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_DescriptionText(BSTR* pbstrText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DescriptionText"), DISPID(DISPID_UNKNOWN/*[1610874888]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarPopupDispT<T>::get_DescriptionText(void)
{
  BSTR pbstrText;
  this->get_DescriptionText((BSTR*)&pbstrText);
  return pbstrText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::set_DescriptionText(BSTR pbstrText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DescriptionText"), DISPID(1610874888));
  TAutoArgs<1> _args;
  _args[1] = pbstrText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_Enabled(TOLEBOOL* pvarfEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(DISPID_UNKNOWN/*[1610874890]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfEnabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
CommandBarPopupDispT<T>::get_Enabled(void)
{
  TOLEBOOL pvarfEnabled;
  this->get_Enabled((TOLEBOOL*)&pvarfEnabled);
  return pvarfEnabled;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::set_Enabled(TOLEBOOL pvarfEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(1610874890));
  TAutoArgs<1> _args;
  _args[1] = pvarfEnabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::Execute()
{
  _TDispID _dispid(*this, OLETEXT("Execute"), DISPID(DISPID_UNKNOWN/*[1610874892]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_Height(int* pdy/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(DISPID_UNKNOWN/*[1610874893]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdy /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarPopupDispT<T>::get_Height(void)
{
  int pdy;
  this->get_Height((int*)&pdy);
  return pdy;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::set_Height(int pdy/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1610874893));
  TAutoArgs<1> _args;
  _args[1] = pdy /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_HelpContextId(int* pid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(DISPID_UNKNOWN/*[1610874895]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pid /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarPopupDispT<T>::get_HelpContextId(void)
{
  int pid;
  this->get_HelpContextId((int*)&pid);
  return pid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::set_HelpContextId(int pid/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(1610874895));
  TAutoArgs<1> _args;
  _args[1] = pid /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_HelpFile(BSTR* pbstrFilename/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpFile"), DISPID(DISPID_UNKNOWN/*[1610874897]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrFilename /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarPopupDispT<T>::get_HelpFile(void)
{
  BSTR pbstrFilename;
  this->get_HelpFile((BSTR*)&pbstrFilename);
  return pbstrFilename;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::set_HelpFile(BSTR pbstrFilename/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpFile"), DISPID(1610874897));
  TAutoArgs<1> _args;
  _args[1] = pbstrFilename /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_Id(int* pid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Id"), DISPID(DISPID_UNKNOWN/*[1610874899]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pid /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarPopupDispT<T>::get_Id(void)
{
  int pid;
  this->get_Id((int*)&pid);
  return pid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_Index(int* pi/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(DISPID_UNKNOWN/*[1610874900]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pi /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarPopupDispT<T>::get_Index(void)
{
  int pi;
  this->get_Index((int*)&pi);
  return pi;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_InstanceId(long* pid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InstanceId"), DISPID(DISPID_UNKNOWN/*[1610874901]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pid /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
CommandBarPopupDispT<T>::get_InstanceId(void)
{
  long pid;
  this->get_InstanceId((long*)&pid);
  return pid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::Move(TVariantInParam Bar/*[in,opt]*/, TVariantInParam Before/*[in,opt]*/, 
                              Office_2k::CommandBarControlPtr* ppcbc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Move"), DISPID(DISPID_UNKNOWN/*[1610874902]*/));
  TAutoArgs<2> _args;
  _args[1] = Bar /*[VT_VARIANT:0]*/;
  _args[2] = Before /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::CommandBarControl**)ppcbc /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_2k::CommandBarControlPtr __fastcall
CommandBarPopupDispT<T>::Move(TVariantInParam Bar/*[in,opt]*/, TVariantInParam Before/*[in,opt]*/)
{
  Office_2k::CommandBarControlPtr ppcbc;
  this->Move(Bar, Before, (Office_2k::CommandBarControlPtr*)&ppcbc);
  return ppcbc;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_Left(int* px/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(DISPID_UNKNOWN/*[1610874903]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(px /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarPopupDispT<T>::get_Left(void)
{
  int px;
  this->get_Left((int*)&px);
  return px;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_OLEUsage(Office_2k::MsoControlOLEUsage* pcou/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEUsage"), DISPID(DISPID_UNKNOWN/*[1610874904]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pcou /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoControlOLEUsage __fastcall
CommandBarPopupDispT<T>::get_OLEUsage(void)
{
  Office_2k::MsoControlOLEUsage pcou;
  this->get_OLEUsage((Office_2k::MsoControlOLEUsage*)&pcou);
  return pcou;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::set_OLEUsage(Office_2k::MsoControlOLEUsage pcou/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEUsage"), DISPID(1610874904));
  TAutoArgs<1> _args;
  _args[1] = (int)pcou /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_OnAction(BSTR* pbstrOnAction/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnAction"), DISPID(DISPID_UNKNOWN/*[1610874906]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrOnAction /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarPopupDispT<T>::get_OnAction(void)
{
  BSTR pbstrOnAction;
  this->get_OnAction((BSTR*)&pbstrOnAction);
  return pbstrOnAction;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::set_OnAction(BSTR pbstrOnAction/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnAction"), DISPID(1610874906));
  TAutoArgs<1> _args;
  _args[1] = pbstrOnAction /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_Parent(Office_2k::CommandBarPtr* ppcb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610874908]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::CommandBar**)ppcb /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::CommandBarPtr __fastcall
CommandBarPopupDispT<T>::get_Parent(void)
{
  Office_2k::CommandBarPtr ppcb;
  this->get_Parent((Office_2k::CommandBarPtr*)&ppcb);
  return ppcb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_Parameter(BSTR* pbstrParam/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parameter"), DISPID(DISPID_UNKNOWN/*[1610874909]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrParam /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarPopupDispT<T>::get_Parameter(void)
{
  BSTR pbstrParam;
  this->get_Parameter((BSTR*)&pbstrParam);
  return pbstrParam;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::set_Parameter(BSTR pbstrParam/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parameter"), DISPID(1610874909));
  TAutoArgs<1> _args;
  _args[1] = pbstrParam /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_Priority(int* pnPri/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Priority"), DISPID(DISPID_UNKNOWN/*[1610874911]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pnPri /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarPopupDispT<T>::get_Priority(void)
{
  int pnPri;
  this->get_Priority((int*)&pnPri);
  return pnPri;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::set_Priority(int pnPri/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Priority"), DISPID(1610874911));
  TAutoArgs<1> _args;
  _args[1] = pnPri /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::Reset()
{
  _TDispID _dispid(*this, OLETEXT("Reset"), DISPID(DISPID_UNKNOWN/*[1610874913]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::SetFocus()
{
  _TDispID _dispid(*this, OLETEXT("SetFocus"), DISPID(DISPID_UNKNOWN/*[1610874914]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_Tag(BSTR* pbstrTag/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(DISPID_UNKNOWN/*[1610874915]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrTag /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarPopupDispT<T>::get_Tag(void)
{
  BSTR pbstrTag;
  this->get_Tag((BSTR*)&pbstrTag);
  return pbstrTag;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::set_Tag(BSTR pbstrTag/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(1610874915));
  TAutoArgs<1> _args;
  _args[1] = pbstrTag /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_TooltipText(BSTR* pbstrTooltip/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TooltipText"), DISPID(DISPID_UNKNOWN/*[1610874917]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrTooltip /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarPopupDispT<T>::get_TooltipText(void)
{
  BSTR pbstrTooltip;
  this->get_TooltipText((BSTR*)&pbstrTooltip);
  return pbstrTooltip;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::set_TooltipText(BSTR pbstrTooltip/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TooltipText"), DISPID(1610874917));
  TAutoArgs<1> _args;
  _args[1] = pbstrTooltip /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_Top(int* py/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(DISPID_UNKNOWN/*[1610874919]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(py /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarPopupDispT<T>::get_Top(void)
{
  int py;
  this->get_Top((int*)&py);
  return py;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_Type(Office_2k::MsoControlType* ptype/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(DISPID_UNKNOWN/*[1610874920]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ptype /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoControlType __fastcall
CommandBarPopupDispT<T>::get_Type(void)
{
  Office_2k::MsoControlType ptype;
  this->get_Type((Office_2k::MsoControlType*)&ptype);
  return ptype;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_Visible(TOLEBOOL* pvarfVisible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(DISPID_UNKNOWN/*[1610874921]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfVisible /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
CommandBarPopupDispT<T>::get_Visible(void)
{
  TOLEBOOL pvarfVisible;
  this->get_Visible((TOLEBOOL*)&pvarfVisible);
  return pvarfVisible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::set_Visible(TOLEBOOL pvarfVisible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1610874921));
  TAutoArgs<1> _args;
  _args[1] = pvarfVisible /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_Width(int* pdx/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(DISPID_UNKNOWN/*[1610874923]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdx /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarPopupDispT<T>::get_Width(void)
{
  int pdx;
  this->get_Width((int*)&pdx);
  return pdx;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::set_Width(int pdx/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1610874923));
  TAutoArgs<1> _args;
  _args[1] = pdx /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_IsPriorityDropped(TOLEBOOL* pvarfDropped/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsPriorityDropped"), DISPID(DISPID_UNKNOWN/*[1610874925]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfDropped /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
CommandBarPopupDispT<T>::get_IsPriorityDropped(void)
{
  TOLEBOOL pvarfDropped;
  this->get_IsPriorityDropped((TOLEBOOL*)&pvarfDropped);
  return pvarfDropped;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::Reserved1()
{
  _TDispID _dispid(*this, OLETEXT("Reserved1"), DISPID(DISPID_UNKNOWN/*[1610874926]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::Reserved2()
{
  _TDispID _dispid(*this, OLETEXT("Reserved2"), DISPID(DISPID_UNKNOWN/*[1610874927]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::Reserved3()
{
  _TDispID _dispid(*this, OLETEXT("Reserved3"), DISPID(DISPID_UNKNOWN/*[1610874928]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::Reserved4()
{
  _TDispID _dispid(*this, OLETEXT("Reserved4"), DISPID(DISPID_UNKNOWN/*[1610874929]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::Reserved5()
{
  _TDispID _dispid(*this, OLETEXT("Reserved5"), DISPID(DISPID_UNKNOWN/*[1610874930]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::Reserved6()
{
  _TDispID _dispid(*this, OLETEXT("Reserved6"), DISPID(DISPID_UNKNOWN/*[1610874931]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::Reserved7()
{
  _TDispID _dispid(*this, OLETEXT("Reserved7"), DISPID(DISPID_UNKNOWN/*[1610874932]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610809344]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CommandBarPopupDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
CommandBarPopupDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_accParent(LPDISPATCH* ppdispParent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accParent"), DISPID(-5000));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppdispParent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CommandBarPopupDispT<T>::get_accParent(void)
{
  LPDISPATCH ppdispParent;
  this->get_accParent((LPDISPATCH*)&ppdispParent);
  return ppdispParent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_accChildCount(long* pcountChildren/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accChildCount"), DISPID(-5001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcountChildren /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
CommandBarPopupDispT<T>::get_accChildCount(void)
{
  long pcountChildren;
  this->get_accChildCount((long*)&pcountChildren);
  return pcountChildren;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_accChild(TVariantInParam varChild/*[in]*/, 
                                      LPDISPATCH* ppdispChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accChild"), DISPID(-5002));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(ppdispChild /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CommandBarPopupDispT<T>::get_accChild(TVariantInParam varChild/*[in]*/)
{
  LPDISPATCH ppdispChild;
  this->get_accChild(varChild, (LPDISPATCH*)&ppdispChild);
  return ppdispChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_accName(TVariantInParam varChild/*[in,opt]*/, 
                                     BSTR* pszName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accName"), DISPID(-5003));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarPopupDispT<T>::get_accName(TVariantInParam varChild/*[in,opt]*/)
{
  BSTR pszName;
  this->get_accName(varChild, (BSTR*)&pszName);
  return pszName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_accValue(TVariantInParam varChild/*[in,opt]*/, 
                                      BSTR* pszValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accValue"), DISPID(-5004));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszValue /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarPopupDispT<T>::get_accValue(TVariantInParam varChild/*[in,opt]*/)
{
  BSTR pszValue;
  this->get_accValue(varChild, (BSTR*)&pszValue);
  return pszValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_accDescription(TVariantInParam varChild/*[in,opt]*/, 
                                            BSTR* pszDescription/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDescription"), DISPID(-5005));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszDescription /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarPopupDispT<T>::get_accDescription(TVariantInParam varChild/*[in,opt]*/)
{
  BSTR pszDescription;
  this->get_accDescription(varChild, (BSTR*)&pszDescription);
  return pszDescription;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_accRole(TVariantInParam varChild/*[in,opt]*/, 
                                     TVariant* pvarRole/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accRole"), DISPID(-5006));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvarRole /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
CommandBarPopupDispT<T>::get_accRole(TVariantInParam varChild/*[in,opt]*/)
{
  TVariant pvarRole;
  this->get_accRole(varChild, (TVariant*)&pvarRole);
  return pvarRole;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_accState(TVariantInParam varChild/*[in,opt]*/, 
                                      TVariant* pvarState/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accState"), DISPID(-5007));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvarState /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
CommandBarPopupDispT<T>::get_accState(TVariantInParam varChild/*[in,opt]*/)
{
  TVariant pvarState;
  this->get_accState(varChild, (TVariant*)&pvarState);
  return pvarState;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_accHelp(TVariantInParam varChild/*[in,opt]*/, 
                                     BSTR* pszHelp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accHelp"), DISPID(-5008));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszHelp /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarPopupDispT<T>::get_accHelp(TVariantInParam varChild/*[in,opt]*/)
{
  BSTR pszHelp;
  this->get_accHelp(varChild, (BSTR*)&pszHelp);
  return pszHelp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                          TVariantInParam varChild/*[in,opt]*/, 
                                          long* pidTopic/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accHelpTopic"), DISPID(-5009));
  TAutoArgs<2> _args;
  _args[1] = pszHelpFile /*[VT_BSTR:1]*/;
  _args[2] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pidTopic /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
CommandBarPopupDispT<T>::get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                          TVariantInParam varChild/*[in,opt]*/)
{
  long pidTopic;
  this->get_accHelpTopic(pszHelpFile, varChild, (long*)&pidTopic);
  return pidTopic;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_accKeyboardShortcut(TVariantInParam varChild/*[in,opt]*/, 
                                                 BSTR* pszKeyboardShortcut/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accKeyboardShortcut"), DISPID(-5010));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszKeyboardShortcut /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarPopupDispT<T>::get_accKeyboardShortcut(TVariantInParam varChild/*[in,opt]*/)
{
  BSTR pszKeyboardShortcut;
  this->get_accKeyboardShortcut(varChild, (BSTR*)&pszKeyboardShortcut);
  return pszKeyboardShortcut;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_accFocus(TVariant* pvarChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accFocus"), DISPID(-5011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarChild /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
CommandBarPopupDispT<T>::get_accFocus(void)
{
  TVariant pvarChild;
  this->get_accFocus((TVariant*)&pvarChild);
  return pvarChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_accSelection(TVariant* pvarChildren/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accSelection"), DISPID(-5012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarChildren /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
CommandBarPopupDispT<T>::get_accSelection(void)
{
  TVariant pvarChildren;
  this->get_accSelection((TVariant*)&pvarChildren);
  return pvarChildren;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_accDefaultAction(TVariantInParam varChild/*[in,opt]*/, 
                                              BSTR* pszDefaultAction/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDefaultAction"), DISPID(-5013));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszDefaultAction /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarPopupDispT<T>::get_accDefaultAction(TVariantInParam varChild/*[in,opt]*/)
{
  BSTR pszDefaultAction;
  this->get_accDefaultAction(varChild, (BSTR*)&pszDefaultAction);
  return pszDefaultAction;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::accSelect(long flagsSelect/*[in]*/, TVariantInParam varChild/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("accSelect"), DISPID(-5014));
  TAutoArgs<2> _args;
  _args[1] = flagsSelect /*[VT_I4:0]*/;
  _args[2] = varChild /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::accLocation(long* pxLeft/*[out]*/, long* pyTop/*[out]*/, 
                                     long* pcxWidth/*[out]*/, long* pcyHeight/*[out]*/, 
                                     TVariantInParam varChild/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("accLocation"), DISPID(-5015));
  TAutoArgs<5> _args;
  _args[1] = pxLeft /*[VT_I4:1]*/;
  _args[2] = pyTop /*[VT_I4:1]*/;
  _args[3] = pcxWidth /*[VT_I4:1]*/;
  _args[4] = pcyHeight /*[VT_I4:1]*/;
  _args[5] = varChild /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::accNavigate(long navDir/*[in]*/, TVariantInParam varStart/*[in,opt]*/, 
                                     TVariant* pvarEndUpAt/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accNavigate"), DISPID(-5016));
  TAutoArgs<2> _args;
  _args[1] = navDir /*[VT_I4:0]*/;
  _args[2] = varStart /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvarEndUpAt /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
CommandBarPopupDispT<T>::accNavigate(long navDir/*[in]*/, TVariantInParam varStart/*[in,opt]*/)
{
  TVariant pvarEndUpAt;
  this->accNavigate(navDir, varStart, (TVariant*)&pvarEndUpAt);
  return pvarEndUpAt;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/, 
                                    TVariant* pvarChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accHitTest"), DISPID(-5017));
  TAutoArgs<2> _args;
  _args[1] = xLeft /*[VT_I4:0]*/;
  _args[2] = yTop /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pvarChild /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
CommandBarPopupDispT<T>::accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/)
{
  TVariant pvarChild;
  this->accHitTest(xLeft, yTop, (TVariant*)&pvarChild);
  return pvarChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::accDoDefaultAction(TVariantInParam varChild/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDoDefaultAction"), DISPID(-5018));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::set_accName(TVariantInParam varChild/*[in,opt]*/, BSTR pszName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("accName"), DISPID(-5003));
  TAutoArgs<2> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  _args[2] = pszName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::set_accValue(TVariantInParam varChild/*[in,opt]*/, BSTR pszValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("accValue"), DISPID(-5004));
  TAutoArgs<2> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  _args[2] = pszValue /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOM_CommandBarComboBox
// Interface: _CommandBarComboBox
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_CommandBarComboBoxT<T>::AddItem(BSTR Text/*[in]*/, TVariantInParam Index/*[in,opt]*/)
{
  return (*this)->AddItem(Text, Index);
}

template <class T> HRESULT __fastcall
TCOM_CommandBarComboBoxT<T>::Clear(void)
{
  return (*this)->Clear();
}

template <class T> HRESULT __fastcall
TCOM_CommandBarComboBoxT<T>::get_DropDownLines(int* pcLines/*[out,retval]*/)
{
  return (*this)->get_DropDownLines(pcLines);
}

template <class T> int __fastcall
TCOM_CommandBarComboBoxT<T>::get_DropDownLines(void)
{
  int pcLines;
  OLECHECK(this->get_DropDownLines((int*)&pcLines));
  return pcLines;
}

template <class T> HRESULT __fastcall
TCOM_CommandBarComboBoxT<T>::set_DropDownLines(int pcLines/*[in]*/)
{
  return (*this)->set_DropDownLines(pcLines);
}

template <class T> HRESULT __fastcall
TCOM_CommandBarComboBoxT<T>::get_DropDownWidth(int* pdx/*[out,retval]*/)
{
  return (*this)->get_DropDownWidth(pdx);
}

template <class T> int __fastcall
TCOM_CommandBarComboBoxT<T>::get_DropDownWidth(void)
{
  int pdx;
  OLECHECK(this->get_DropDownWidth((int*)&pdx));
  return pdx;
}

template <class T> HRESULT __fastcall
TCOM_CommandBarComboBoxT<T>::set_DropDownWidth(int pdx/*[in]*/)
{
  return (*this)->set_DropDownWidth(pdx);
}

template <class T> HRESULT __fastcall
TCOM_CommandBarComboBoxT<T>::get_List(int Index/*[in]*/, BSTR* pbstrItem/*[out,retval]*/)
{
  return (*this)->get_List(Index, pbstrItem);
}

template <class T> BSTR __fastcall
TCOM_CommandBarComboBoxT<T>::get_List(int Index/*[in]*/)
{
  BSTR pbstrItem = 0;
  OLECHECK(this->get_List(Index, (BSTR*)&pbstrItem));
  return pbstrItem;
}

template <class T> HRESULT __fastcall
TCOM_CommandBarComboBoxT<T>::set_List(int Index/*[in]*/, BSTR pbstrItem/*[in]*/)
{
  return (*this)->set_List(Index, pbstrItem);
}

template <class T> HRESULT __fastcall
TCOM_CommandBarComboBoxT<T>::get_ListCount(int* pcItems/*[out,retval]*/)
{
  return (*this)->get_ListCount(pcItems);
}

template <class T> int __fastcall
TCOM_CommandBarComboBoxT<T>::get_ListCount(void)
{
  int pcItems;
  OLECHECK(this->get_ListCount((int*)&pcItems));
  return pcItems;
}

template <class T> HRESULT __fastcall
TCOM_CommandBarComboBoxT<T>::get_ListHeaderCount(int* pcItems/*[out,retval]*/)
{
  return (*this)->get_ListHeaderCount(pcItems);
}

template <class T> int __fastcall
TCOM_CommandBarComboBoxT<T>::get_ListHeaderCount(void)
{
  int pcItems;
  OLECHECK(this->get_ListHeaderCount((int*)&pcItems));
  return pcItems;
}

template <class T> HRESULT __fastcall
TCOM_CommandBarComboBoxT<T>::set_ListHeaderCount(int pcItems/*[in]*/)
{
  return (*this)->set_ListHeaderCount(pcItems);
}

template <class T> HRESULT __fastcall
TCOM_CommandBarComboBoxT<T>::get_ListIndex(int* pi/*[out,retval]*/)
{
  return (*this)->get_ListIndex(pi);
}

template <class T> int __fastcall
TCOM_CommandBarComboBoxT<T>::get_ListIndex(void)
{
  int pi;
  OLECHECK(this->get_ListIndex((int*)&pi));
  return pi;
}

template <class T> HRESULT __fastcall
TCOM_CommandBarComboBoxT<T>::set_ListIndex(int pi/*[in]*/)
{
  return (*this)->set_ListIndex(pi);
}

template <class T> HRESULT __fastcall
TCOM_CommandBarComboBoxT<T>::RemoveItem(int Index/*[in]*/)
{
  return (*this)->RemoveItem(Index);
}

template <class T> HRESULT __fastcall
TCOM_CommandBarComboBoxT<T>::get_Style(Office_2k::MsoComboStyle* pstyle/*[out,retval]*/)
{
  return (*this)->get_Style(pstyle);
}

template <class T> Office_2k::MsoComboStyle __fastcall
TCOM_CommandBarComboBoxT<T>::get_Style(void)
{
  Office_2k::MsoComboStyle pstyle;
  OLECHECK(this->get_Style((Office_2k::MsoComboStyle*)&pstyle));
  return pstyle;
}

template <class T> HRESULT __fastcall
TCOM_CommandBarComboBoxT<T>::set_Style(Office_2k::MsoComboStyle pstyle/*[in]*/)
{
  return (*this)->set_Style(pstyle);
}

template <class T> HRESULT __fastcall
TCOM_CommandBarComboBoxT<T>::get_Text(BSTR* pbstrText/*[out,retval]*/)
{
  return (*this)->get_Text(pbstrText);
}

template <class T> BSTR __fastcall
TCOM_CommandBarComboBoxT<T>::get_Text(void)
{
  BSTR pbstrText = 0;
  OLECHECK(this->get_Text((BSTR*)&pbstrText));
  return pbstrText;
}

template <class T> HRESULT __fastcall
TCOM_CommandBarComboBoxT<T>::set_Text(BSTR pbstrText/*[in]*/)
{
  return (*this)->set_Text(pbstrText);
}

// *********************************************************************//
// DispIntf:  _CommandBarComboBox
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C030C-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::AddItem(BSTR Text/*[in]*/, TVariantInParam Index/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddItem"), DISPID(DISPID_UNKNOWN/*[1610940416]*/));
  TAutoArgs<2> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  _args[2] = Index /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::Clear()
{
  _TDispID _dispid(*this, OLETEXT("Clear"), DISPID(DISPID_UNKNOWN/*[1610940417]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::get_DropDownLines(int* pcLines/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DropDownLines"), DISPID(DISPID_UNKNOWN/*[1610940418]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcLines /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
_CommandBarComboBoxDispT<T>::get_DropDownLines(void)
{
  int pcLines;
  this->get_DropDownLines((int*)&pcLines);
  return pcLines;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::set_DropDownLines(int pcLines/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DropDownLines"), DISPID(1610940418));
  TAutoArgs<1> _args;
  _args[1] = pcLines /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::get_DropDownWidth(int* pdx/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DropDownWidth"), DISPID(DISPID_UNKNOWN/*[1610940420]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdx /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
_CommandBarComboBoxDispT<T>::get_DropDownWidth(void)
{
  int pdx;
  this->get_DropDownWidth((int*)&pdx);
  return pdx;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::set_DropDownWidth(int pdx/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DropDownWidth"), DISPID(1610940420));
  TAutoArgs<1> _args;
  _args[1] = pdx /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::get_List(int Index/*[in]*/, BSTR* pbstrItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("List"), DISPID(DISPID_UNKNOWN/*[1610940422]*/));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(pbstrItem /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandBarComboBoxDispT<T>::get_List(int Index/*[in]*/)
{
  BSTR pbstrItem;
  this->get_List(Index, (BSTR*)&pbstrItem);
  return pbstrItem;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::set_List(int Index/*[in]*/, BSTR pbstrItem/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("List"), DISPID(1610940422));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  _args[2] = pbstrItem /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::get_ListCount(int* pcItems/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListCount"), DISPID(DISPID_UNKNOWN/*[1610940424]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcItems /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
_CommandBarComboBoxDispT<T>::get_ListCount(void)
{
  int pcItems;
  this->get_ListCount((int*)&pcItems);
  return pcItems;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::get_ListHeaderCount(int* pcItems/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListHeaderCount"), DISPID(DISPID_UNKNOWN/*[1610940425]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcItems /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
_CommandBarComboBoxDispT<T>::get_ListHeaderCount(void)
{
  int pcItems;
  this->get_ListHeaderCount((int*)&pcItems);
  return pcItems;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::set_ListHeaderCount(int pcItems/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListHeaderCount"), DISPID(1610940425));
  TAutoArgs<1> _args;
  _args[1] = pcItems /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::get_ListIndex(int* pi/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListIndex"), DISPID(DISPID_UNKNOWN/*[1610940427]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pi /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
_CommandBarComboBoxDispT<T>::get_ListIndex(void)
{
  int pi;
  this->get_ListIndex((int*)&pi);
  return pi;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::set_ListIndex(int pi/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListIndex"), DISPID(1610940427));
  TAutoArgs<1> _args;
  _args[1] = pi /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::RemoveItem(int Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoveItem"), DISPID(DISPID_UNKNOWN/*[1610940429]*/));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::get_Style(Office_2k::MsoComboStyle* pstyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Style"), DISPID(DISPID_UNKNOWN/*[1610940430]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pstyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoComboStyle __fastcall
_CommandBarComboBoxDispT<T>::get_Style(void)
{
  Office_2k::MsoComboStyle pstyle;
  this->get_Style((Office_2k::MsoComboStyle*)&pstyle);
  return pstyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::set_Style(Office_2k::MsoComboStyle pstyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Style"), DISPID(1610940430));
  TAutoArgs<1> _args;
  _args[1] = (int)pstyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::get_Text(BSTR* pbstrText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(DISPID_UNKNOWN/*[1610940432]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandBarComboBoxDispT<T>::get_Text(void)
{
  BSTR pbstrText;
  this->get_Text((BSTR*)&pbstrText);
  return pbstrText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::set_Text(BSTR pbstrText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(1610940432));
  TAutoArgs<1> _args;
  _args[1] = pbstrText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::get_BeginGroup(TOLEBOOL* pvarfBeginGroup/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginGroup"), DISPID(DISPID_UNKNOWN/*[1610874880]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfBeginGroup /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CommandBarComboBoxDispT<T>::get_BeginGroup(void)
{
  TOLEBOOL pvarfBeginGroup;
  this->get_BeginGroup((TOLEBOOL*)&pvarfBeginGroup);
  return pvarfBeginGroup;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::set_BeginGroup(TOLEBOOL pvarfBeginGroup/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginGroup"), DISPID(1610874880));
  TAutoArgs<1> _args;
  _args[1] = pvarfBeginGroup /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::get_BuiltIn(TOLEBOOL* pvarfBuiltIn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuiltIn"), DISPID(DISPID_UNKNOWN/*[1610874882]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfBuiltIn /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CommandBarComboBoxDispT<T>::get_BuiltIn(void)
{
  TOLEBOOL pvarfBuiltIn;
  this->get_BuiltIn((TOLEBOOL*)&pvarfBuiltIn);
  return pvarfBuiltIn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::get_Caption(BSTR* pbstrCaption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(DISPID_UNKNOWN/*[1610874883]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrCaption /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandBarComboBoxDispT<T>::get_Caption(void)
{
  BSTR pbstrCaption;
  this->get_Caption((BSTR*)&pbstrCaption);
  return pbstrCaption;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::set_Caption(BSTR pbstrCaption/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(1610874883));
  TAutoArgs<1> _args;
  _args[1] = pbstrCaption /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::get_Control(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Control"), DISPID(DISPID_UNKNOWN/*[1610874885]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_CommandBarComboBoxDispT<T>::get_Control(void)
{
  LPDISPATCH ppidisp;
  this->get_Control((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::Copy(TVariantInParam Bar/*[in,opt]*/, 
                                  TVariantInParam Before/*[in,opt]*/, 
                                  Office_2k::CommandBarControlPtr* ppcbc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Copy"), DISPID(DISPID_UNKNOWN/*[1610874886]*/));
  TAutoArgs<2> _args;
  _args[1] = Bar /*[VT_VARIANT:0]*/;
  _args[2] = Before /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::CommandBarControl**)ppcbc /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_2k::CommandBarControlPtr __fastcall
_CommandBarComboBoxDispT<T>::Copy(TVariantInParam Bar/*[in,opt]*/, 
                                  TVariantInParam Before/*[in,opt]*/)
{
  Office_2k::CommandBarControlPtr ppcbc;
  this->Copy(Bar, Before, (Office_2k::CommandBarControlPtr*)&ppcbc);
  return ppcbc;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::Delete(TVariantInParam Temporary/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(DISPID_UNKNOWN/*[1610874887]*/));
  TAutoArgs<1> _args;
  _args[1] = Temporary /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::get_DescriptionText(BSTR* pbstrText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DescriptionText"), DISPID(DISPID_UNKNOWN/*[1610874888]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandBarComboBoxDispT<T>::get_DescriptionText(void)
{
  BSTR pbstrText;
  this->get_DescriptionText((BSTR*)&pbstrText);
  return pbstrText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::set_DescriptionText(BSTR pbstrText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DescriptionText"), DISPID(1610874888));
  TAutoArgs<1> _args;
  _args[1] = pbstrText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::get_Enabled(TOLEBOOL* pvarfEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(DISPID_UNKNOWN/*[1610874890]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfEnabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CommandBarComboBoxDispT<T>::get_Enabled(void)
{
  TOLEBOOL pvarfEnabled;
  this->get_Enabled((TOLEBOOL*)&pvarfEnabled);
  return pvarfEnabled;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::set_Enabled(TOLEBOOL pvarfEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(1610874890));
  TAutoArgs<1> _args;
  _args[1] = pvarfEnabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::Execute()
{
  _TDispID _dispid(*this, OLETEXT("Execute"), DISPID(DISPID_UNKNOWN/*[1610874892]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::get_Height(int* pdy/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(DISPID_UNKNOWN/*[1610874893]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdy /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
_CommandBarComboBoxDispT<T>::get_Height(void)
{
  int pdy;
  this->get_Height((int*)&pdy);
  return pdy;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::set_Height(int pdy/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1610874893));
  TAutoArgs<1> _args;
  _args[1] = pdy /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::get_HelpContextId(int* pid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(DISPID_UNKNOWN/*[1610874895]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pid /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
_CommandBarComboBoxDispT<T>::get_HelpContextId(void)
{
  int pid;
  this->get_HelpContextId((int*)&pid);
  return pid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::set_HelpContextId(int pid/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(1610874895));
  TAutoArgs<1> _args;
  _args[1] = pid /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::get_HelpFile(BSTR* pbstrFilename/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpFile"), DISPID(DISPID_UNKNOWN/*[1610874897]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrFilename /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandBarComboBoxDispT<T>::get_HelpFile(void)
{
  BSTR pbstrFilename;
  this->get_HelpFile((BSTR*)&pbstrFilename);
  return pbstrFilename;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::set_HelpFile(BSTR pbstrFilename/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpFile"), DISPID(1610874897));
  TAutoArgs<1> _args;
  _args[1] = pbstrFilename /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::get_Id(int* pid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Id"), DISPID(DISPID_UNKNOWN/*[1610874899]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pid /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
_CommandBarComboBoxDispT<T>::get_Id(void)
{
  int pid;
  this->get_Id((int*)&pid);
  return pid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::get_Index(int* pi/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(DISPID_UNKNOWN/*[1610874900]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pi /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
_CommandBarComboBoxDispT<T>::get_Index(void)
{
  int pi;
  this->get_Index((int*)&pi);
  return pi;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::get_InstanceId(long* pid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InstanceId"), DISPID(DISPID_UNKNOWN/*[1610874901]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pid /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_CommandBarComboBoxDispT<T>::get_InstanceId(void)
{
  long pid;
  this->get_InstanceId((long*)&pid);
  return pid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::Move(TVariantInParam Bar/*[in,opt]*/, 
                                  TVariantInParam Before/*[in,opt]*/, 
                                  Office_2k::CommandBarControlPtr* ppcbc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Move"), DISPID(DISPID_UNKNOWN/*[1610874902]*/));
  TAutoArgs<2> _args;
  _args[1] = Bar /*[VT_VARIANT:0]*/;
  _args[2] = Before /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::CommandBarControl**)ppcbc /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_2k::CommandBarControlPtr __fastcall
_CommandBarComboBoxDispT<T>::Move(TVariantInParam Bar/*[in,opt]*/, 
                                  TVariantInParam Before/*[in,opt]*/)
{
  Office_2k::CommandBarControlPtr ppcbc;
  this->Move(Bar, Before, (Office_2k::CommandBarControlPtr*)&ppcbc);
  return ppcbc;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::get_Left(int* px/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(DISPID_UNKNOWN/*[1610874903]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(px /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
_CommandBarComboBoxDispT<T>::get_Left(void)
{
  int px;
  this->get_Left((int*)&px);
  return px;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::get_OLEUsage(Office_2k::MsoControlOLEUsage* pcou/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEUsage"), DISPID(DISPID_UNKNOWN/*[1610874904]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pcou /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoControlOLEUsage __fastcall
_CommandBarComboBoxDispT<T>::get_OLEUsage(void)
{
  Office_2k::MsoControlOLEUsage pcou;
  this->get_OLEUsage((Office_2k::MsoControlOLEUsage*)&pcou);
  return pcou;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::set_OLEUsage(Office_2k::MsoControlOLEUsage pcou/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEUsage"), DISPID(1610874904));
  TAutoArgs<1> _args;
  _args[1] = (int)pcou /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::get_OnAction(BSTR* pbstrOnAction/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnAction"), DISPID(DISPID_UNKNOWN/*[1610874906]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrOnAction /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandBarComboBoxDispT<T>::get_OnAction(void)
{
  BSTR pbstrOnAction;
  this->get_OnAction((BSTR*)&pbstrOnAction);
  return pbstrOnAction;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::set_OnAction(BSTR pbstrOnAction/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnAction"), DISPID(1610874906));
  TAutoArgs<1> _args;
  _args[1] = pbstrOnAction /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::get_Parent(Office_2k::CommandBarPtr* ppcb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610874908]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::CommandBar**)ppcb /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::CommandBarPtr __fastcall
_CommandBarComboBoxDispT<T>::get_Parent(void)
{
  Office_2k::CommandBarPtr ppcb;
  this->get_Parent((Office_2k::CommandBarPtr*)&ppcb);
  return ppcb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::get_Parameter(BSTR* pbstrParam/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parameter"), DISPID(DISPID_UNKNOWN/*[1610874909]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrParam /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandBarComboBoxDispT<T>::get_Parameter(void)
{
  BSTR pbstrParam;
  this->get_Parameter((BSTR*)&pbstrParam);
  return pbstrParam;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::set_Parameter(BSTR pbstrParam/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parameter"), DISPID(1610874909));
  TAutoArgs<1> _args;
  _args[1] = pbstrParam /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::get_Priority(int* pnPri/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Priority"), DISPID(DISPID_UNKNOWN/*[1610874911]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pnPri /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
_CommandBarComboBoxDispT<T>::get_Priority(void)
{
  int pnPri;
  this->get_Priority((int*)&pnPri);
  return pnPri;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::set_Priority(int pnPri/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Priority"), DISPID(1610874911));
  TAutoArgs<1> _args;
  _args[1] = pnPri /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::Reset()
{
  _TDispID _dispid(*this, OLETEXT("Reset"), DISPID(DISPID_UNKNOWN/*[1610874913]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::SetFocus()
{
  _TDispID _dispid(*this, OLETEXT("SetFocus"), DISPID(DISPID_UNKNOWN/*[1610874914]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::get_Tag(BSTR* pbstrTag/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(DISPID_UNKNOWN/*[1610874915]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrTag /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandBarComboBoxDispT<T>::get_Tag(void)
{
  BSTR pbstrTag;
  this->get_Tag((BSTR*)&pbstrTag);
  return pbstrTag;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::set_Tag(BSTR pbstrTag/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(1610874915));
  TAutoArgs<1> _args;
  _args[1] = pbstrTag /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::get_TooltipText(BSTR* pbstrTooltip/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TooltipText"), DISPID(DISPID_UNKNOWN/*[1610874917]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrTooltip /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandBarComboBoxDispT<T>::get_TooltipText(void)
{
  BSTR pbstrTooltip;
  this->get_TooltipText((BSTR*)&pbstrTooltip);
  return pbstrTooltip;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::set_TooltipText(BSTR pbstrTooltip/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TooltipText"), DISPID(1610874917));
  TAutoArgs<1> _args;
  _args[1] = pbstrTooltip /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::get_Top(int* py/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(DISPID_UNKNOWN/*[1610874919]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(py /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
_CommandBarComboBoxDispT<T>::get_Top(void)
{
  int py;
  this->get_Top((int*)&py);
  return py;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::get_Type(Office_2k::MsoControlType* ptype/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(DISPID_UNKNOWN/*[1610874920]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ptype /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoControlType __fastcall
_CommandBarComboBoxDispT<T>::get_Type(void)
{
  Office_2k::MsoControlType ptype;
  this->get_Type((Office_2k::MsoControlType*)&ptype);
  return ptype;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::get_Visible(TOLEBOOL* pvarfVisible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(DISPID_UNKNOWN/*[1610874921]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfVisible /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CommandBarComboBoxDispT<T>::get_Visible(void)
{
  TOLEBOOL pvarfVisible;
  this->get_Visible((TOLEBOOL*)&pvarfVisible);
  return pvarfVisible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::set_Visible(TOLEBOOL pvarfVisible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1610874921));
  TAutoArgs<1> _args;
  _args[1] = pvarfVisible /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::get_Width(int* pdx/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(DISPID_UNKNOWN/*[1610874923]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdx /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
_CommandBarComboBoxDispT<T>::get_Width(void)
{
  int pdx;
  this->get_Width((int*)&pdx);
  return pdx;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::set_Width(int pdx/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1610874923));
  TAutoArgs<1> _args;
  _args[1] = pdx /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::get_IsPriorityDropped(TOLEBOOL* pvarfDropped/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsPriorityDropped"), DISPID(DISPID_UNKNOWN/*[1610874925]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfDropped /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CommandBarComboBoxDispT<T>::get_IsPriorityDropped(void)
{
  TOLEBOOL pvarfDropped;
  this->get_IsPriorityDropped((TOLEBOOL*)&pvarfDropped);
  return pvarfDropped;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::Reserved1()
{
  _TDispID _dispid(*this, OLETEXT("Reserved1"), DISPID(DISPID_UNKNOWN/*[1610874926]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::Reserved2()
{
  _TDispID _dispid(*this, OLETEXT("Reserved2"), DISPID(DISPID_UNKNOWN/*[1610874927]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::Reserved3()
{
  _TDispID _dispid(*this, OLETEXT("Reserved3"), DISPID(DISPID_UNKNOWN/*[1610874928]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::Reserved4()
{
  _TDispID _dispid(*this, OLETEXT("Reserved4"), DISPID(DISPID_UNKNOWN/*[1610874929]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::Reserved5()
{
  _TDispID _dispid(*this, OLETEXT("Reserved5"), DISPID(DISPID_UNKNOWN/*[1610874930]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::Reserved6()
{
  _TDispID _dispid(*this, OLETEXT("Reserved6"), DISPID(DISPID_UNKNOWN/*[1610874931]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::Reserved7()
{
  _TDispID _dispid(*this, OLETEXT("Reserved7"), DISPID(DISPID_UNKNOWN/*[1610874932]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610809344]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_CommandBarComboBoxDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_CommandBarComboBoxDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::get_accParent(LPDISPATCH* ppdispParent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accParent"), DISPID(-5000));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppdispParent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_CommandBarComboBoxDispT<T>::get_accParent(void)
{
  LPDISPATCH ppdispParent;
  this->get_accParent((LPDISPATCH*)&ppdispParent);
  return ppdispParent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::get_accChildCount(long* pcountChildren/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accChildCount"), DISPID(-5001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcountChildren /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_CommandBarComboBoxDispT<T>::get_accChildCount(void)
{
  long pcountChildren;
  this->get_accChildCount((long*)&pcountChildren);
  return pcountChildren;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::get_accChild(TVariantInParam varChild/*[in]*/, 
                                          LPDISPATCH* ppdispChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accChild"), DISPID(-5002));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(ppdispChild /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_CommandBarComboBoxDispT<T>::get_accChild(TVariantInParam varChild/*[in]*/)
{
  LPDISPATCH ppdispChild;
  this->get_accChild(varChild, (LPDISPATCH*)&ppdispChild);
  return ppdispChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::get_accName(TVariantInParam varChild/*[in,opt]*/, 
                                         BSTR* pszName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accName"), DISPID(-5003));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandBarComboBoxDispT<T>::get_accName(TVariantInParam varChild/*[in,opt]*/)
{
  BSTR pszName;
  this->get_accName(varChild, (BSTR*)&pszName);
  return pszName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::get_accValue(TVariantInParam varChild/*[in,opt]*/, 
                                          BSTR* pszValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accValue"), DISPID(-5004));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszValue /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandBarComboBoxDispT<T>::get_accValue(TVariantInParam varChild/*[in,opt]*/)
{
  BSTR pszValue;
  this->get_accValue(varChild, (BSTR*)&pszValue);
  return pszValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::get_accDescription(TVariantInParam varChild/*[in,opt]*/, 
                                                BSTR* pszDescription/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDescription"), DISPID(-5005));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszDescription /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandBarComboBoxDispT<T>::get_accDescription(TVariantInParam varChild/*[in,opt]*/)
{
  BSTR pszDescription;
  this->get_accDescription(varChild, (BSTR*)&pszDescription);
  return pszDescription;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::get_accRole(TVariantInParam varChild/*[in,opt]*/, 
                                         TVariant* pvarRole/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accRole"), DISPID(-5006));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvarRole /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_CommandBarComboBoxDispT<T>::get_accRole(TVariantInParam varChild/*[in,opt]*/)
{
  TVariant pvarRole;
  this->get_accRole(varChild, (TVariant*)&pvarRole);
  return pvarRole;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::get_accState(TVariantInParam varChild/*[in,opt]*/, 
                                          TVariant* pvarState/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accState"), DISPID(-5007));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvarState /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_CommandBarComboBoxDispT<T>::get_accState(TVariantInParam varChild/*[in,opt]*/)
{
  TVariant pvarState;
  this->get_accState(varChild, (TVariant*)&pvarState);
  return pvarState;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::get_accHelp(TVariantInParam varChild/*[in,opt]*/, 
                                         BSTR* pszHelp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accHelp"), DISPID(-5008));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszHelp /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandBarComboBoxDispT<T>::get_accHelp(TVariantInParam varChild/*[in,opt]*/)
{
  BSTR pszHelp;
  this->get_accHelp(varChild, (BSTR*)&pszHelp);
  return pszHelp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                              TVariantInParam varChild/*[in,opt]*/, 
                                              long* pidTopic/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accHelpTopic"), DISPID(-5009));
  TAutoArgs<2> _args;
  _args[1] = pszHelpFile /*[VT_BSTR:1]*/;
  _args[2] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pidTopic /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_CommandBarComboBoxDispT<T>::get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                              TVariantInParam varChild/*[in,opt]*/)
{
  long pidTopic;
  this->get_accHelpTopic(pszHelpFile, varChild, (long*)&pidTopic);
  return pidTopic;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::get_accKeyboardShortcut(TVariantInParam varChild/*[in,opt]*/, 
                                                     BSTR* pszKeyboardShortcut/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accKeyboardShortcut"), DISPID(-5010));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszKeyboardShortcut /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandBarComboBoxDispT<T>::get_accKeyboardShortcut(TVariantInParam varChild/*[in,opt]*/)
{
  BSTR pszKeyboardShortcut;
  this->get_accKeyboardShortcut(varChild, (BSTR*)&pszKeyboardShortcut);
  return pszKeyboardShortcut;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::get_accFocus(TVariant* pvarChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accFocus"), DISPID(-5011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarChild /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_CommandBarComboBoxDispT<T>::get_accFocus(void)
{
  TVariant pvarChild;
  this->get_accFocus((TVariant*)&pvarChild);
  return pvarChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::get_accSelection(TVariant* pvarChildren/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accSelection"), DISPID(-5012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarChildren /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_CommandBarComboBoxDispT<T>::get_accSelection(void)
{
  TVariant pvarChildren;
  this->get_accSelection((TVariant*)&pvarChildren);
  return pvarChildren;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::get_accDefaultAction(TVariantInParam varChild/*[in,opt]*/, 
                                                  BSTR* pszDefaultAction/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDefaultAction"), DISPID(-5013));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszDefaultAction /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandBarComboBoxDispT<T>::get_accDefaultAction(TVariantInParam varChild/*[in,opt]*/)
{
  BSTR pszDefaultAction;
  this->get_accDefaultAction(varChild, (BSTR*)&pszDefaultAction);
  return pszDefaultAction;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::accSelect(long flagsSelect/*[in]*/, 
                                       TVariantInParam varChild/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("accSelect"), DISPID(-5014));
  TAutoArgs<2> _args;
  _args[1] = flagsSelect /*[VT_I4:0]*/;
  _args[2] = varChild /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::accLocation(long* pxLeft/*[out]*/, long* pyTop/*[out]*/, 
                                         long* pcxWidth/*[out]*/, long* pcyHeight/*[out]*/, 
                                         TVariantInParam varChild/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("accLocation"), DISPID(-5015));
  TAutoArgs<5> _args;
  _args[1] = pxLeft /*[VT_I4:1]*/;
  _args[2] = pyTop /*[VT_I4:1]*/;
  _args[3] = pcxWidth /*[VT_I4:1]*/;
  _args[4] = pcyHeight /*[VT_I4:1]*/;
  _args[5] = varChild /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::accNavigate(long navDir/*[in]*/, TVariantInParam varStart/*[in,opt]*/, 
                                         TVariant* pvarEndUpAt/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accNavigate"), DISPID(-5016));
  TAutoArgs<2> _args;
  _args[1] = navDir /*[VT_I4:0]*/;
  _args[2] = varStart /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvarEndUpAt /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_CommandBarComboBoxDispT<T>::accNavigate(long navDir/*[in]*/, TVariantInParam varStart/*[in,opt]*/)
{
  TVariant pvarEndUpAt;
  this->accNavigate(navDir, varStart, (TVariant*)&pvarEndUpAt);
  return pvarEndUpAt;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/, 
                                        TVariant* pvarChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accHitTest"), DISPID(-5017));
  TAutoArgs<2> _args;
  _args[1] = xLeft /*[VT_I4:0]*/;
  _args[2] = yTop /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pvarChild /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_CommandBarComboBoxDispT<T>::accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/)
{
  TVariant pvarChild;
  this->accHitTest(xLeft, yTop, (TVariant*)&pvarChild);
  return pvarChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::accDoDefaultAction(TVariantInParam varChild/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDoDefaultAction"), DISPID(-5018));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::set_accName(TVariantInParam varChild/*[in,opt]*/, BSTR pszName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("accName"), DISPID(-5003));
  TAutoArgs<2> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  _args[2] = pszName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarComboBoxDispT<T>::set_accValue(TVariantInParam varChild/*[in,opt]*/, 
                                          BSTR pszValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("accValue"), DISPID(-5004));
  TAutoArgs<2> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  _args[2] = pszValue /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  _CommandBarActiveX
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C030D-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::get_ControlCLSID(BSTR* pbstrClsid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlCLSID"), DISPID(DISPID_UNKNOWN/*[1610940416]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrClsid /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandBarActiveXDispT<T>::get_ControlCLSID(void)
{
  BSTR pbstrClsid;
  this->get_ControlCLSID((BSTR*)&pbstrClsid);
  return pbstrClsid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::set_ControlCLSID(BSTR pbstrClsid/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlCLSID"), DISPID(1610940416));
  TAutoArgs<1> _args;
  _args[1] = pbstrClsid /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::get_QueryControlInterface(BSTR bstrIid/*[in]*/, 
                                                      LPUNKNOWN* ppUnk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryControlInterface"), DISPID(DISPID_UNKNOWN/*[1610940418]*/));
  TAutoArgs<1> _args;
  _args[1] = bstrIid /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(ppUnk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
_CommandBarActiveXDispT<T>::get_QueryControlInterface(BSTR bstrIid/*[in]*/)
{
  LPUNKNOWN ppUnk;
  this->get_QueryControlInterface(bstrIid, (LPUNKNOWN*)&ppUnk);
  return ppUnk;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::SetInnerObjectFactory(LPUNKNOWN pUnk/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetInnerObjectFactory"), DISPID(DISPID_UNKNOWN/*[1610940419]*/));
  TAutoArgs<1> _args;
  _args[1] = pUnk /*[VT_UNKNOWN:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::EnsureControl()
{
  _TDispID _dispid(*this, OLETEXT("EnsureControl"), DISPID(DISPID_UNKNOWN/*[1610940420]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::set_InitWith(LPUNKNOWN Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InitWith"), DISPID(DISPID_UNKNOWN/*[1610940421]*/));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_UNKNOWN:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::get_BeginGroup(TOLEBOOL* pvarfBeginGroup/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginGroup"), DISPID(DISPID_UNKNOWN/*[1610874880]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfBeginGroup /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CommandBarActiveXDispT<T>::get_BeginGroup(void)
{
  TOLEBOOL pvarfBeginGroup;
  this->get_BeginGroup((TOLEBOOL*)&pvarfBeginGroup);
  return pvarfBeginGroup;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::set_BeginGroup(TOLEBOOL pvarfBeginGroup/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginGroup"), DISPID(1610874880));
  TAutoArgs<1> _args;
  _args[1] = pvarfBeginGroup /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::get_BuiltIn(TOLEBOOL* pvarfBuiltIn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuiltIn"), DISPID(DISPID_UNKNOWN/*[1610874882]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfBuiltIn /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CommandBarActiveXDispT<T>::get_BuiltIn(void)
{
  TOLEBOOL pvarfBuiltIn;
  this->get_BuiltIn((TOLEBOOL*)&pvarfBuiltIn);
  return pvarfBuiltIn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::get_Caption(BSTR* pbstrCaption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(DISPID_UNKNOWN/*[1610874883]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrCaption /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandBarActiveXDispT<T>::get_Caption(void)
{
  BSTR pbstrCaption;
  this->get_Caption((BSTR*)&pbstrCaption);
  return pbstrCaption;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::set_Caption(BSTR pbstrCaption/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(1610874883));
  TAutoArgs<1> _args;
  _args[1] = pbstrCaption /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::get_Control(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Control"), DISPID(DISPID_UNKNOWN/*[1610874885]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_CommandBarActiveXDispT<T>::get_Control(void)
{
  LPDISPATCH ppidisp;
  this->get_Control((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::Copy(TVariantInParam Bar/*[in,opt]*/, TVariantInParam Before/*[in,opt]*/
                                 , Office_2k::CommandBarControlPtr* ppcbc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Copy"), DISPID(DISPID_UNKNOWN/*[1610874886]*/));
  TAutoArgs<2> _args;
  _args[1] = Bar /*[VT_VARIANT:0]*/;
  _args[2] = Before /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::CommandBarControl**)ppcbc /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_2k::CommandBarControlPtr __fastcall
_CommandBarActiveXDispT<T>::Copy(TVariantInParam Bar/*[in,opt]*/, TVariantInParam Before/*[in,opt]*/)
{
  Office_2k::CommandBarControlPtr ppcbc;
  this->Copy(Bar, Before, (Office_2k::CommandBarControlPtr*)&ppcbc);
  return ppcbc;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::Delete(TVariantInParam Temporary/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(DISPID_UNKNOWN/*[1610874887]*/));
  TAutoArgs<1> _args;
  _args[1] = Temporary /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::get_DescriptionText(BSTR* pbstrText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DescriptionText"), DISPID(DISPID_UNKNOWN/*[1610874888]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandBarActiveXDispT<T>::get_DescriptionText(void)
{
  BSTR pbstrText;
  this->get_DescriptionText((BSTR*)&pbstrText);
  return pbstrText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::set_DescriptionText(BSTR pbstrText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DescriptionText"), DISPID(1610874888));
  TAutoArgs<1> _args;
  _args[1] = pbstrText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::get_Enabled(TOLEBOOL* pvarfEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(DISPID_UNKNOWN/*[1610874890]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfEnabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CommandBarActiveXDispT<T>::get_Enabled(void)
{
  TOLEBOOL pvarfEnabled;
  this->get_Enabled((TOLEBOOL*)&pvarfEnabled);
  return pvarfEnabled;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::set_Enabled(TOLEBOOL pvarfEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(1610874890));
  TAutoArgs<1> _args;
  _args[1] = pvarfEnabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::Execute()
{
  _TDispID _dispid(*this, OLETEXT("Execute"), DISPID(DISPID_UNKNOWN/*[1610874892]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::get_Height(int* pdy/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(DISPID_UNKNOWN/*[1610874893]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdy /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
_CommandBarActiveXDispT<T>::get_Height(void)
{
  int pdy;
  this->get_Height((int*)&pdy);
  return pdy;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::set_Height(int pdy/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1610874893));
  TAutoArgs<1> _args;
  _args[1] = pdy /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::get_HelpContextId(int* pid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(DISPID_UNKNOWN/*[1610874895]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pid /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
_CommandBarActiveXDispT<T>::get_HelpContextId(void)
{
  int pid;
  this->get_HelpContextId((int*)&pid);
  return pid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::set_HelpContextId(int pid/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(1610874895));
  TAutoArgs<1> _args;
  _args[1] = pid /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::get_HelpFile(BSTR* pbstrFilename/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpFile"), DISPID(DISPID_UNKNOWN/*[1610874897]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrFilename /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandBarActiveXDispT<T>::get_HelpFile(void)
{
  BSTR pbstrFilename;
  this->get_HelpFile((BSTR*)&pbstrFilename);
  return pbstrFilename;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::set_HelpFile(BSTR pbstrFilename/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpFile"), DISPID(1610874897));
  TAutoArgs<1> _args;
  _args[1] = pbstrFilename /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::get_Id(int* pid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Id"), DISPID(DISPID_UNKNOWN/*[1610874899]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pid /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
_CommandBarActiveXDispT<T>::get_Id(void)
{
  int pid;
  this->get_Id((int*)&pid);
  return pid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::get_Index(int* pi/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(DISPID_UNKNOWN/*[1610874900]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pi /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
_CommandBarActiveXDispT<T>::get_Index(void)
{
  int pi;
  this->get_Index((int*)&pi);
  return pi;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::get_InstanceId(long* pid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InstanceId"), DISPID(DISPID_UNKNOWN/*[1610874901]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pid /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_CommandBarActiveXDispT<T>::get_InstanceId(void)
{
  long pid;
  this->get_InstanceId((long*)&pid);
  return pid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::Move(TVariantInParam Bar/*[in,opt]*/, TVariantInParam Before/*[in,opt]*/
                                 , Office_2k::CommandBarControlPtr* ppcbc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Move"), DISPID(DISPID_UNKNOWN/*[1610874902]*/));
  TAutoArgs<2> _args;
  _args[1] = Bar /*[VT_VARIANT:0]*/;
  _args[2] = Before /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::CommandBarControl**)ppcbc /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_2k::CommandBarControlPtr __fastcall
_CommandBarActiveXDispT<T>::Move(TVariantInParam Bar/*[in,opt]*/, TVariantInParam Before/*[in,opt]*/)
{
  Office_2k::CommandBarControlPtr ppcbc;
  this->Move(Bar, Before, (Office_2k::CommandBarControlPtr*)&ppcbc);
  return ppcbc;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::get_Left(int* px/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(DISPID_UNKNOWN/*[1610874903]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(px /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
_CommandBarActiveXDispT<T>::get_Left(void)
{
  int px;
  this->get_Left((int*)&px);
  return px;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::get_OLEUsage(Office_2k::MsoControlOLEUsage* pcou/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEUsage"), DISPID(DISPID_UNKNOWN/*[1610874904]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pcou /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoControlOLEUsage __fastcall
_CommandBarActiveXDispT<T>::get_OLEUsage(void)
{
  Office_2k::MsoControlOLEUsage pcou;
  this->get_OLEUsage((Office_2k::MsoControlOLEUsage*)&pcou);
  return pcou;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::set_OLEUsage(Office_2k::MsoControlOLEUsage pcou/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEUsage"), DISPID(1610874904));
  TAutoArgs<1> _args;
  _args[1] = (int)pcou /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::get_OnAction(BSTR* pbstrOnAction/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnAction"), DISPID(DISPID_UNKNOWN/*[1610874906]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrOnAction /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandBarActiveXDispT<T>::get_OnAction(void)
{
  BSTR pbstrOnAction;
  this->get_OnAction((BSTR*)&pbstrOnAction);
  return pbstrOnAction;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::set_OnAction(BSTR pbstrOnAction/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnAction"), DISPID(1610874906));
  TAutoArgs<1> _args;
  _args[1] = pbstrOnAction /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::get_Parent(Office_2k::CommandBarPtr* ppcb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610874908]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::CommandBar**)ppcb /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::CommandBarPtr __fastcall
_CommandBarActiveXDispT<T>::get_Parent(void)
{
  Office_2k::CommandBarPtr ppcb;
  this->get_Parent((Office_2k::CommandBarPtr*)&ppcb);
  return ppcb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::get_Parameter(BSTR* pbstrParam/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parameter"), DISPID(DISPID_UNKNOWN/*[1610874909]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrParam /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandBarActiveXDispT<T>::get_Parameter(void)
{
  BSTR pbstrParam;
  this->get_Parameter((BSTR*)&pbstrParam);
  return pbstrParam;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::set_Parameter(BSTR pbstrParam/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parameter"), DISPID(1610874909));
  TAutoArgs<1> _args;
  _args[1] = pbstrParam /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::get_Priority(int* pnPri/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Priority"), DISPID(DISPID_UNKNOWN/*[1610874911]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pnPri /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
_CommandBarActiveXDispT<T>::get_Priority(void)
{
  int pnPri;
  this->get_Priority((int*)&pnPri);
  return pnPri;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::set_Priority(int pnPri/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Priority"), DISPID(1610874911));
  TAutoArgs<1> _args;
  _args[1] = pnPri /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::Reset()
{
  _TDispID _dispid(*this, OLETEXT("Reset"), DISPID(DISPID_UNKNOWN/*[1610874913]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::SetFocus()
{
  _TDispID _dispid(*this, OLETEXT("SetFocus"), DISPID(DISPID_UNKNOWN/*[1610874914]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::get_Tag(BSTR* pbstrTag/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(DISPID_UNKNOWN/*[1610874915]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrTag /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandBarActiveXDispT<T>::get_Tag(void)
{
  BSTR pbstrTag;
  this->get_Tag((BSTR*)&pbstrTag);
  return pbstrTag;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::set_Tag(BSTR pbstrTag/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(1610874915));
  TAutoArgs<1> _args;
  _args[1] = pbstrTag /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::get_TooltipText(BSTR* pbstrTooltip/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TooltipText"), DISPID(DISPID_UNKNOWN/*[1610874917]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrTooltip /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandBarActiveXDispT<T>::get_TooltipText(void)
{
  BSTR pbstrTooltip;
  this->get_TooltipText((BSTR*)&pbstrTooltip);
  return pbstrTooltip;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::set_TooltipText(BSTR pbstrTooltip/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TooltipText"), DISPID(1610874917));
  TAutoArgs<1> _args;
  _args[1] = pbstrTooltip /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::get_Top(int* py/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(DISPID_UNKNOWN/*[1610874919]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(py /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
_CommandBarActiveXDispT<T>::get_Top(void)
{
  int py;
  this->get_Top((int*)&py);
  return py;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::get_Type(Office_2k::MsoControlType* ptype/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(DISPID_UNKNOWN/*[1610874920]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ptype /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoControlType __fastcall
_CommandBarActiveXDispT<T>::get_Type(void)
{
  Office_2k::MsoControlType ptype;
  this->get_Type((Office_2k::MsoControlType*)&ptype);
  return ptype;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::get_Visible(TOLEBOOL* pvarfVisible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(DISPID_UNKNOWN/*[1610874921]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfVisible /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CommandBarActiveXDispT<T>::get_Visible(void)
{
  TOLEBOOL pvarfVisible;
  this->get_Visible((TOLEBOOL*)&pvarfVisible);
  return pvarfVisible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::set_Visible(TOLEBOOL pvarfVisible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1610874921));
  TAutoArgs<1> _args;
  _args[1] = pvarfVisible /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::get_Width(int* pdx/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(DISPID_UNKNOWN/*[1610874923]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdx /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
_CommandBarActiveXDispT<T>::get_Width(void)
{
  int pdx;
  this->get_Width((int*)&pdx);
  return pdx;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::set_Width(int pdx/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1610874923));
  TAutoArgs<1> _args;
  _args[1] = pdx /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::get_IsPriorityDropped(TOLEBOOL* pvarfDropped/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsPriorityDropped"), DISPID(DISPID_UNKNOWN/*[1610874925]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfDropped /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CommandBarActiveXDispT<T>::get_IsPriorityDropped(void)
{
  TOLEBOOL pvarfDropped;
  this->get_IsPriorityDropped((TOLEBOOL*)&pvarfDropped);
  return pvarfDropped;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::Reserved1()
{
  _TDispID _dispid(*this, OLETEXT("Reserved1"), DISPID(DISPID_UNKNOWN/*[1610874926]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::Reserved2()
{
  _TDispID _dispid(*this, OLETEXT("Reserved2"), DISPID(DISPID_UNKNOWN/*[1610874927]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::Reserved3()
{
  _TDispID _dispid(*this, OLETEXT("Reserved3"), DISPID(DISPID_UNKNOWN/*[1610874928]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::Reserved4()
{
  _TDispID _dispid(*this, OLETEXT("Reserved4"), DISPID(DISPID_UNKNOWN/*[1610874929]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::Reserved5()
{
  _TDispID _dispid(*this, OLETEXT("Reserved5"), DISPID(DISPID_UNKNOWN/*[1610874930]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::Reserved6()
{
  _TDispID _dispid(*this, OLETEXT("Reserved6"), DISPID(DISPID_UNKNOWN/*[1610874931]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::Reserved7()
{
  _TDispID _dispid(*this, OLETEXT("Reserved7"), DISPID(DISPID_UNKNOWN/*[1610874932]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610809344]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_CommandBarActiveXDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_CommandBarActiveXDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::get_accParent(LPDISPATCH* ppdispParent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accParent"), DISPID(-5000));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppdispParent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_CommandBarActiveXDispT<T>::get_accParent(void)
{
  LPDISPATCH ppdispParent;
  this->get_accParent((LPDISPATCH*)&ppdispParent);
  return ppdispParent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::get_accChildCount(long* pcountChildren/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accChildCount"), DISPID(-5001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcountChildren /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_CommandBarActiveXDispT<T>::get_accChildCount(void)
{
  long pcountChildren;
  this->get_accChildCount((long*)&pcountChildren);
  return pcountChildren;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::get_accChild(TVariantInParam varChild/*[in]*/, 
                                         LPDISPATCH* ppdispChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accChild"), DISPID(-5002));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(ppdispChild /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_CommandBarActiveXDispT<T>::get_accChild(TVariantInParam varChild/*[in]*/)
{
  LPDISPATCH ppdispChild;
  this->get_accChild(varChild, (LPDISPATCH*)&ppdispChild);
  return ppdispChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::get_accName(TVariantInParam varChild/*[in,opt]*/, 
                                        BSTR* pszName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accName"), DISPID(-5003));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandBarActiveXDispT<T>::get_accName(TVariantInParam varChild/*[in,opt]*/)
{
  BSTR pszName;
  this->get_accName(varChild, (BSTR*)&pszName);
  return pszName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::get_accValue(TVariantInParam varChild/*[in,opt]*/, 
                                         BSTR* pszValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accValue"), DISPID(-5004));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszValue /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandBarActiveXDispT<T>::get_accValue(TVariantInParam varChild/*[in,opt]*/)
{
  BSTR pszValue;
  this->get_accValue(varChild, (BSTR*)&pszValue);
  return pszValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::get_accDescription(TVariantInParam varChild/*[in,opt]*/, 
                                               BSTR* pszDescription/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDescription"), DISPID(-5005));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszDescription /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandBarActiveXDispT<T>::get_accDescription(TVariantInParam varChild/*[in,opt]*/)
{
  BSTR pszDescription;
  this->get_accDescription(varChild, (BSTR*)&pszDescription);
  return pszDescription;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::get_accRole(TVariantInParam varChild/*[in,opt]*/, 
                                        TVariant* pvarRole/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accRole"), DISPID(-5006));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvarRole /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_CommandBarActiveXDispT<T>::get_accRole(TVariantInParam varChild/*[in,opt]*/)
{
  TVariant pvarRole;
  this->get_accRole(varChild, (TVariant*)&pvarRole);
  return pvarRole;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::get_accState(TVariantInParam varChild/*[in,opt]*/, 
                                         TVariant* pvarState/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accState"), DISPID(-5007));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvarState /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_CommandBarActiveXDispT<T>::get_accState(TVariantInParam varChild/*[in,opt]*/)
{
  TVariant pvarState;
  this->get_accState(varChild, (TVariant*)&pvarState);
  return pvarState;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::get_accHelp(TVariantInParam varChild/*[in,opt]*/, 
                                        BSTR* pszHelp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accHelp"), DISPID(-5008));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszHelp /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandBarActiveXDispT<T>::get_accHelp(TVariantInParam varChild/*[in,opt]*/)
{
  BSTR pszHelp;
  this->get_accHelp(varChild, (BSTR*)&pszHelp);
  return pszHelp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                             TVariantInParam varChild/*[in,opt]*/, 
                                             long* pidTopic/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accHelpTopic"), DISPID(-5009));
  TAutoArgs<2> _args;
  _args[1] = pszHelpFile /*[VT_BSTR:1]*/;
  _args[2] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pidTopic /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_CommandBarActiveXDispT<T>::get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                             TVariantInParam varChild/*[in,opt]*/)
{
  long pidTopic;
  this->get_accHelpTopic(pszHelpFile, varChild, (long*)&pidTopic);
  return pidTopic;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::get_accKeyboardShortcut(TVariantInParam varChild/*[in,opt]*/, 
                                                    BSTR* pszKeyboardShortcut/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accKeyboardShortcut"), DISPID(-5010));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszKeyboardShortcut /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandBarActiveXDispT<T>::get_accKeyboardShortcut(TVariantInParam varChild/*[in,opt]*/)
{
  BSTR pszKeyboardShortcut;
  this->get_accKeyboardShortcut(varChild, (BSTR*)&pszKeyboardShortcut);
  return pszKeyboardShortcut;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::get_accFocus(TVariant* pvarChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accFocus"), DISPID(-5011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarChild /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_CommandBarActiveXDispT<T>::get_accFocus(void)
{
  TVariant pvarChild;
  this->get_accFocus((TVariant*)&pvarChild);
  return pvarChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::get_accSelection(TVariant* pvarChildren/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accSelection"), DISPID(-5012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarChildren /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_CommandBarActiveXDispT<T>::get_accSelection(void)
{
  TVariant pvarChildren;
  this->get_accSelection((TVariant*)&pvarChildren);
  return pvarChildren;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::get_accDefaultAction(TVariantInParam varChild/*[in,opt]*/, 
                                                 BSTR* pszDefaultAction/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDefaultAction"), DISPID(-5013));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszDefaultAction /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandBarActiveXDispT<T>::get_accDefaultAction(TVariantInParam varChild/*[in,opt]*/)
{
  BSTR pszDefaultAction;
  this->get_accDefaultAction(varChild, (BSTR*)&pszDefaultAction);
  return pszDefaultAction;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::accSelect(long flagsSelect/*[in]*/, TVariantInParam varChild/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("accSelect"), DISPID(-5014));
  TAutoArgs<2> _args;
  _args[1] = flagsSelect /*[VT_I4:0]*/;
  _args[2] = varChild /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::accLocation(long* pxLeft/*[out]*/, long* pyTop/*[out]*/, 
                                        long* pcxWidth/*[out]*/, long* pcyHeight/*[out]*/, 
                                        TVariantInParam varChild/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("accLocation"), DISPID(-5015));
  TAutoArgs<5> _args;
  _args[1] = pxLeft /*[VT_I4:1]*/;
  _args[2] = pyTop /*[VT_I4:1]*/;
  _args[3] = pcxWidth /*[VT_I4:1]*/;
  _args[4] = pcyHeight /*[VT_I4:1]*/;
  _args[5] = varChild /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::accNavigate(long navDir/*[in]*/, TVariantInParam varStart/*[in,opt]*/, 
                                        TVariant* pvarEndUpAt/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accNavigate"), DISPID(-5016));
  TAutoArgs<2> _args;
  _args[1] = navDir /*[VT_I4:0]*/;
  _args[2] = varStart /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvarEndUpAt /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_CommandBarActiveXDispT<T>::accNavigate(long navDir/*[in]*/, TVariantInParam varStart/*[in,opt]*/)
{
  TVariant pvarEndUpAt;
  this->accNavigate(navDir, varStart, (TVariant*)&pvarEndUpAt);
  return pvarEndUpAt;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/, 
                                       TVariant* pvarChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accHitTest"), DISPID(-5017));
  TAutoArgs<2> _args;
  _args[1] = xLeft /*[VT_I4:0]*/;
  _args[2] = yTop /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pvarChild /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_CommandBarActiveXDispT<T>::accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/)
{
  TVariant pvarChild;
  this->accHitTest(xLeft, yTop, (TVariant*)&pvarChild);
  return pvarChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::accDoDefaultAction(TVariantInParam varChild/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDoDefaultAction"), DISPID(-5018));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::set_accName(TVariantInParam varChild/*[in,opt]*/, BSTR pszName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("accName"), DISPID(-5003));
  TAutoArgs<2> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  _args[2] = pszName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandBarActiveXDispT<T>::set_accValue(TVariantInParam varChild/*[in,opt]*/, BSTR pszValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("accValue"), DISPID(-5004));
  TAutoArgs<2> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  _args[2] = pszValue /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  Adjustments
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0310-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AdjustmentsDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
AdjustmentsDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AdjustmentsDispT<T>::get_Count(int* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
AdjustmentsDispT<T>::get_Count(void)
{
  int Count;
  this->get_Count((int*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AdjustmentsDispT<T>::get_Item(int Index/*[in]*/, float* Val/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(Val /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
AdjustmentsDispT<T>::get_Item(int Index/*[in]*/)
{
  float Val;
  this->get_Item(Index, (float*)&Val);
  return Val;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AdjustmentsDispT<T>::set_Item(int Index/*[in]*/, float Val/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  _args[2] = Val /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AdjustmentsDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
AdjustmentsDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AdjustmentsDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
AdjustmentsDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  CalloutFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0311-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CalloutFormatDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::AutomaticLength()
{
  _TDispID _dispid(*this, OLETEXT("AutomaticLength"), DISPID(10));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::CustomDrop(float Drop/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CustomDrop"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Drop /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::CustomLength(float Length/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CustomLength"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = Length /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::PresetDrop(Office_2k::MsoCalloutDropType DropType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetDrop"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = (int)DropType /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_Accent(Office_2k::MsoTriState* Accent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Accent"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Accent /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
CalloutFormatDispT<T>::get_Accent(void)
{
  Office_2k::MsoTriState Accent;
  this->get_Accent((Office_2k::MsoTriState*)&Accent);
  return Accent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::set_Accent(Office_2k::MsoTriState Accent/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Accent"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = (int)Accent /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_Angle(Office_2k::MsoCalloutAngleType* Angle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Angle"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Angle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoCalloutAngleType __fastcall
CalloutFormatDispT<T>::get_Angle(void)
{
  Office_2k::MsoCalloutAngleType Angle;
  this->get_Angle((Office_2k::MsoCalloutAngleType*)&Angle);
  return Angle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::set_Angle(Office_2k::MsoCalloutAngleType Angle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Angle"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = (int)Angle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_AutoAttach(Office_2k::MsoTriState* AutoAttach/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoAttach"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AutoAttach /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
CalloutFormatDispT<T>::get_AutoAttach(void)
{
  Office_2k::MsoTriState AutoAttach;
  this->get_AutoAttach((Office_2k::MsoTriState*)&AutoAttach);
  return AutoAttach;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::set_AutoAttach(Office_2k::MsoTriState AutoAttach/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoAttach"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = (int)AutoAttach /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_AutoLength(Office_2k::MsoTriState* AutoLength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoLength"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AutoLength /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
CalloutFormatDispT<T>::get_AutoLength(void)
{
  Office_2k::MsoTriState AutoLength;
  this->get_AutoLength((Office_2k::MsoTriState*)&AutoLength);
  return AutoLength;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_Border(Office_2k::MsoTriState* Border/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Border"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Border /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
CalloutFormatDispT<T>::get_Border(void)
{
  Office_2k::MsoTriState Border;
  this->get_Border((Office_2k::MsoTriState*)&Border);
  return Border;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::set_Border(Office_2k::MsoTriState Border/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Border"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = (int)Border /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_Drop(float* Drop/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Drop"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Drop /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
CalloutFormatDispT<T>::get_Drop(void)
{
  float Drop;
  this->get_Drop((float*)&Drop);
  return Drop;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_DropType(Office_2k::MsoCalloutDropType* DropType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DropType"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)DropType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoCalloutDropType __fastcall
CalloutFormatDispT<T>::get_DropType(void)
{
  Office_2k::MsoCalloutDropType DropType;
  this->get_DropType((Office_2k::MsoCalloutDropType*)&DropType);
  return DropType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_Gap(float* Gap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Gap"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Gap /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
CalloutFormatDispT<T>::get_Gap(void)
{
  float Gap;
  this->get_Gap((float*)&Gap);
  return Gap;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::set_Gap(float Gap/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Gap"), DISPID(107));
  TAutoArgs<1> _args;
  _args[1] = Gap /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_Length(float* Length/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Length"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Length /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
CalloutFormatDispT<T>::get_Length(void)
{
  float Length;
  this->get_Length((float*)&Length);
  return Length;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_Type(Office_2k::MsoCalloutType* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoCalloutType __fastcall
CalloutFormatDispT<T>::get_Type(void)
{
  Office_2k::MsoCalloutType Type;
  this->get_Type((Office_2k::MsoCalloutType*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::set_Type(Office_2k::MsoCalloutType Type/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CalloutFormatDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
CalloutFormatDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  ColorFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0312-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorFormatDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ColorFormatDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorFormatDispT<T>::get_rgb(Office_2k::MsoRGBType* rgb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RGB"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RGB /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoRGBType __fastcall
ColorFormatDispT<T>::get_rgb(void)
{
  Office_2k::MsoRGBType RGB;
  this->get_rgb((Office_2k::MsoRGBType*)&RGB);
  return RGB;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorFormatDispT<T>::set_rgb(Office_2k::MsoRGBType rgb/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RGB"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = RGB /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorFormatDispT<T>::get_SchemeColor(int* SchemeColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SchemeColor"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SchemeColor /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ColorFormatDispT<T>::get_SchemeColor(void)
{
  int SchemeColor;
  this->get_SchemeColor((int*)&SchemeColor);
  return SchemeColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorFormatDispT<T>::set_SchemeColor(int SchemeColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SchemeColor"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = SchemeColor /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorFormatDispT<T>::get_Type(Office_2k::MsoColorType* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoColorType __fastcall
ColorFormatDispT<T>::get_Type(void)
{
  Office_2k::MsoColorType Type;
  this->get_Type((Office_2k::MsoColorType*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorFormatDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ColorFormatDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorFormatDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ColorFormatDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  ConnectorFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0313-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ConnectorFormatDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::BeginConnect(Office_2k::ShapePtr ConnectedShape/*[in]*/, 
                                      int ConnectionSite/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginConnect"), DISPID(10));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Office_2k::Shape*)ConnectedShape /*[VT_USERDEFINED:1]*/;
  _args[2] = ConnectionSite /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::BeginDisconnect()
{
  _TDispID _dispid(*this, OLETEXT("BeginDisconnect"), DISPID(11));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::EndConnect(Office_2k::ShapePtr ConnectedShape/*[in]*/, 
                                    int ConnectionSite/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndConnect"), DISPID(12));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Office_2k::Shape*)ConnectedShape /*[VT_USERDEFINED:1]*/;
  _args[2] = ConnectionSite /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::EndDisconnect()
{
  _TDispID _dispid(*this, OLETEXT("EndDisconnect"), DISPID(13));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::get_BeginConnected(Office_2k::MsoTriState* BeginConnected/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginConnected"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)BeginConnected /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
ConnectorFormatDispT<T>::get_BeginConnected(void)
{
  Office_2k::MsoTriState BeginConnected;
  this->get_BeginConnected((Office_2k::MsoTriState*)&BeginConnected);
  return BeginConnected;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::get_BeginConnectedShape(Office_2k::ShapePtr* BeginConnectedShape/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginConnectedShape"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::Shape**)BeginConnectedShape /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::ShapePtr __fastcall
ConnectorFormatDispT<T>::get_BeginConnectedShape(void)
{
  Office_2k::ShapePtr BeginConnectedShape;
  this->get_BeginConnectedShape((Office_2k::ShapePtr*)&BeginConnectedShape);
  return BeginConnectedShape;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::get_BeginConnectionSite(int* BeginConnectionSite/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginConnectionSite"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BeginConnectionSite /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ConnectorFormatDispT<T>::get_BeginConnectionSite(void)
{
  int BeginConnectionSite;
  this->get_BeginConnectionSite((int*)&BeginConnectionSite);
  return BeginConnectionSite;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::get_EndConnected(Office_2k::MsoTriState* EndConnected/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndConnected"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)EndConnected /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
ConnectorFormatDispT<T>::get_EndConnected(void)
{
  Office_2k::MsoTriState EndConnected;
  this->get_EndConnected((Office_2k::MsoTriState*)&EndConnected);
  return EndConnected;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::get_EndConnectedShape(Office_2k::ShapePtr* EndConnectedShape/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndConnectedShape"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::Shape**)EndConnectedShape /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::ShapePtr __fastcall
ConnectorFormatDispT<T>::get_EndConnectedShape(void)
{
  Office_2k::ShapePtr EndConnectedShape;
  this->get_EndConnectedShape((Office_2k::ShapePtr*)&EndConnectedShape);
  return EndConnectedShape;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::get_EndConnectionSite(int* EndConnectionSite/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndConnectionSite"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(EndConnectionSite /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ConnectorFormatDispT<T>::get_EndConnectionSite(void)
{
  int EndConnectionSite;
  this->get_EndConnectionSite((int*)&EndConnectionSite);
  return EndConnectionSite;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::get_Type(Office_2k::MsoConnectorType* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoConnectorType __fastcall
ConnectorFormatDispT<T>::get_Type(void)
{
  Office_2k::MsoConnectorType Type;
  this->get_Type((Office_2k::MsoConnectorType*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::set_Type(Office_2k::MsoConnectorType Type/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ConnectorFormatDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ConnectorFormatDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  FillFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0314-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
FillFormatDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::Background()
{
  _TDispID _dispid(*this, OLETEXT("Background"), DISPID(10));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::OneColorGradient(Office_2k::MsoGradientStyle Style/*[in]*/, int Variant/*[in]*/
                                     , float Degree/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OneColorGradient"), DISPID(11));
  TAutoArgs<3> _args;
  _args[1] = (int)Style /*[VT_USERDEFINED:0]*/;
  _args[2] = Variant /*[VT_INT:0]*/;
  _args[3] = Degree /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::Patterned(Office_2k::MsoPatternType Pattern/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Patterned"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = (int)Pattern /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::PresetGradient(Office_2k::MsoGradientStyle Style/*[in]*/, int Variant/*[in]*/, 
                                   Office_2k::MsoPresetGradientType PresetGradientType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetGradient"), DISPID(13));
  TAutoArgs<3> _args;
  _args[1] = (int)Style /*[VT_USERDEFINED:0]*/;
  _args[2] = Variant /*[VT_INT:0]*/;
  _args[3] = (int)PresetGradientType /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::PresetTextured(Office_2k::MsoPresetTexture PresetTexture/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetTextured"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = (int)PresetTexture /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::Solid()
{
  _TDispID _dispid(*this, OLETEXT("Solid"), DISPID(15));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::TwoColorGradient(Office_2k::MsoGradientStyle Style/*[in]*/, int Variant/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TwoColorGradient"), DISPID(16));
  TAutoArgs<2> _args;
  _args[1] = (int)Style /*[VT_USERDEFINED:0]*/;
  _args[2] = Variant /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::UserPicture(BSTR PictureFile/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserPicture"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = PictureFile /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::UserTextured(BSTR TextureFile/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserTextured"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = TextureFile /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_BackColor(Office_2k::ColorFormatPtr* BackColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::ColorFormat**)BackColor /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::ColorFormatPtr __fastcall
FillFormatDispT<T>::get_BackColor(void)
{
  Office_2k::ColorFormatPtr BackColor;
  this->get_BackColor((Office_2k::ColorFormatPtr*)&BackColor);
  return BackColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::set_BackColor(Office_2k::ColorFormatPtr BackColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Office_2k::ColorFormat*)BackColor /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_ForeColor(Office_2k::ColorFormatPtr* ForeColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::ColorFormat**)ForeColor /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::ColorFormatPtr __fastcall
FillFormatDispT<T>::get_ForeColor(void)
{
  Office_2k::ColorFormatPtr ForeColor;
  this->get_ForeColor((Office_2k::ColorFormatPtr*)&ForeColor);
  return ForeColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::set_ForeColor(Office_2k::ColorFormatPtr ForeColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Office_2k::ColorFormat*)ForeColor /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_GradientColorType(Office_2k::MsoGradientColorType* GradientColorType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GradientColorType"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)GradientColorType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoGradientColorType __fastcall
FillFormatDispT<T>::get_GradientColorType(void)
{
  Office_2k::MsoGradientColorType GradientColorType;
  this->get_GradientColorType((Office_2k::MsoGradientColorType*)&GradientColorType);
  return GradientColorType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_GradientDegree(float* GradientDegree/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GradientDegree"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(GradientDegree /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
FillFormatDispT<T>::get_GradientDegree(void)
{
  float GradientDegree;
  this->get_GradientDegree((float*)&GradientDegree);
  return GradientDegree;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_GradientStyle(Office_2k::MsoGradientStyle* GradientStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GradientStyle"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)GradientStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoGradientStyle __fastcall
FillFormatDispT<T>::get_GradientStyle(void)
{
  Office_2k::MsoGradientStyle GradientStyle;
  this->get_GradientStyle((Office_2k::MsoGradientStyle*)&GradientStyle);
  return GradientStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_GradientVariant(int* GradientVariant/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GradientVariant"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(GradientVariant /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
FillFormatDispT<T>::get_GradientVariant(void)
{
  int GradientVariant;
  this->get_GradientVariant((int*)&GradientVariant);
  return GradientVariant;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_Pattern(Office_2k::MsoPatternType* Pattern/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Pattern"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Pattern /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoPatternType __fastcall
FillFormatDispT<T>::get_Pattern(void)
{
  Office_2k::MsoPatternType Pattern;
  this->get_Pattern((Office_2k::MsoPatternType*)&Pattern);
  return Pattern;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_PresetGradientType(Office_2k::MsoPresetGradientType* PresetGradientType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetGradientType"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PresetGradientType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoPresetGradientType __fastcall
FillFormatDispT<T>::get_PresetGradientType(void)
{
  Office_2k::MsoPresetGradientType PresetGradientType;
  this->get_PresetGradientType((Office_2k::MsoPresetGradientType*)&PresetGradientType);
  return PresetGradientType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_PresetTexture(Office_2k::MsoPresetTexture* PresetTexture/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetTexture"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PresetTexture /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoPresetTexture __fastcall
FillFormatDispT<T>::get_PresetTexture(void)
{
  Office_2k::MsoPresetTexture PresetTexture;
  this->get_PresetTexture((Office_2k::MsoPresetTexture*)&PresetTexture);
  return PresetTexture;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_TextureName(BSTR* TextureName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextureName"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(TextureName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
FillFormatDispT<T>::get_TextureName(void)
{
  BSTR TextureName;
  this->get_TextureName((BSTR*)&TextureName);
  return TextureName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_TextureType(Office_2k::MsoTextureType* TextureType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextureType"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)TextureType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTextureType __fastcall
FillFormatDispT<T>::get_TextureType(void)
{
  Office_2k::MsoTextureType TextureType;
  this->get_TextureType((Office_2k::MsoTextureType*)&TextureType);
  return TextureType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_Transparency(float* Transparency/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Transparency"), DISPID(111));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Transparency /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
FillFormatDispT<T>::get_Transparency(void)
{
  float Transparency;
  this->get_Transparency((float*)&Transparency);
  return Transparency;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::set_Transparency(float Transparency/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Transparency"), DISPID(111));
  TAutoArgs<1> _args;
  _args[1] = Transparency /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_Type(Office_2k::MsoFillType* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoFillType __fastcall
FillFormatDispT<T>::get_Type(void)
{
  Office_2k::MsoFillType Type;
  this->get_Type((Office_2k::MsoFillType*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(113));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
FillFormatDispT<T>::get_Visible(void)
{
  Office_2k::MsoTriState Visible;
  this->get_Visible((Office_2k::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::set_Visible(Office_2k::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(113));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
FillFormatDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
FillFormatDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  FreeformBuilder
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0315-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FreeformBuilderDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
FreeformBuilderDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FreeformBuilderDispT<T>::AddNodes(Office_2k::MsoSegmentType SegmentType/*[in]*/, 
                                  Office_2k::MsoEditingType EditingType/*[in]*/, float X1/*[in]*/, 
                                  float Y1/*[in]*/, float X2/*[in,def,opt]*/, 
                                  float Y2/*[in,def,opt]*/, float X3/*[in,def,opt]*/, 
                                  float Y3/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddNodes"), DISPID(10));
  TAutoArgs<8> _args;
  _args[1] = (int)SegmentType /*[VT_USERDEFINED:0]*/;
  _args[2] = (int)EditingType /*[VT_USERDEFINED:0]*/;
  _args[3] = X1 /*[VT_R4:0]*/;
  _args[4] = Y1 /*[VT_R4:0]*/;
  _args[5] = X2 /*[VT_R4:0]*/;
  _args[6] = Y2 /*[VT_R4:0]*/;
  _args[7] = X3 /*[VT_R4:0]*/;
  _args[8] = Y3 /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FreeformBuilderDispT<T>::ConvertToShape(Office_2k::ShapePtr* Freeform/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConvertToShape"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::Shape**)Freeform /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_2k::ShapePtr __fastcall
FreeformBuilderDispT<T>::ConvertToShape(void)
{
  Office_2k::ShapePtr Freeform;
  this->ConvertToShape((Office_2k::ShapePtr*)&Freeform);
  return Freeform;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FreeformBuilderDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
FreeformBuilderDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FreeformBuilderDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
FreeformBuilderDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  GroupShapes
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0316-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupShapesDispT<T>::get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
GroupShapesDispT<T>::get_Parent(void)
{
  LPDISPATCH ppidisp;
  this->get_Parent((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupShapesDispT<T>::get_Count(int* pnShapes/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pnShapes /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
GroupShapesDispT<T>::get_Count(void)
{
  int pnShapes;
  this->get_Count((int*)&pnShapes);
  return pnShapes;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupShapesDispT<T>::Item(TVariantInParam Index/*[in]*/, Office_2k::ShapePtr* Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::Shape**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_2k::ShapePtr __fastcall
GroupShapesDispT<T>::Item(TVariantInParam Index/*[in]*/)
{
  Office_2k::ShapePtr Item;
  this->Item(Index, (Office_2k::ShapePtr*)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupShapesDispT<T>::get__NewEnum(LPUNKNOWN* ppienum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppienum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
GroupShapesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppienum;
  this->get__NewEnum((LPUNKNOWN*)&ppienum);
  return ppienum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupShapesDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
GroupShapesDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupShapesDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
GroupShapesDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  LineFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0317-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
LineFormatDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_BackColor(Office_2k::ColorFormatPtr* BackColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::ColorFormat**)BackColor /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::ColorFormatPtr __fastcall
LineFormatDispT<T>::get_BackColor(void)
{
  Office_2k::ColorFormatPtr BackColor;
  this->get_BackColor((Office_2k::ColorFormatPtr*)&BackColor);
  return BackColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_BackColor(Office_2k::ColorFormatPtr BackColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Office_2k::ColorFormat*)BackColor /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_BeginArrowheadLength(Office_2k::MsoArrowheadLength* BeginArrowheadLength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginArrowheadLength"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)BeginArrowheadLength /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoArrowheadLength __fastcall
LineFormatDispT<T>::get_BeginArrowheadLength(void)
{
  Office_2k::MsoArrowheadLength BeginArrowheadLength;
  this->get_BeginArrowheadLength((Office_2k::MsoArrowheadLength*)&BeginArrowheadLength);
  return BeginArrowheadLength;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_BeginArrowheadLength(Office_2k::MsoArrowheadLength BeginArrowheadLength/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginArrowheadLength"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = (int)BeginArrowheadLength /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_BeginArrowheadStyle(Office_2k::MsoArrowheadStyle* BeginArrowheadStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginArrowheadStyle"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)BeginArrowheadStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoArrowheadStyle __fastcall
LineFormatDispT<T>::get_BeginArrowheadStyle(void)
{
  Office_2k::MsoArrowheadStyle BeginArrowheadStyle;
  this->get_BeginArrowheadStyle((Office_2k::MsoArrowheadStyle*)&BeginArrowheadStyle);
  return BeginArrowheadStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_BeginArrowheadStyle(Office_2k::MsoArrowheadStyle BeginArrowheadStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginArrowheadStyle"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = (int)BeginArrowheadStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_BeginArrowheadWidth(Office_2k::MsoArrowheadWidth* BeginArrowheadWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginArrowheadWidth"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)BeginArrowheadWidth /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoArrowheadWidth __fastcall
LineFormatDispT<T>::get_BeginArrowheadWidth(void)
{
  Office_2k::MsoArrowheadWidth BeginArrowheadWidth;
  this->get_BeginArrowheadWidth((Office_2k::MsoArrowheadWidth*)&BeginArrowheadWidth);
  return BeginArrowheadWidth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_BeginArrowheadWidth(Office_2k::MsoArrowheadWidth BeginArrowheadWidth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginArrowheadWidth"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = (int)BeginArrowheadWidth /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_DashStyle(Office_2k::MsoLineDashStyle* DashStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DashStyle"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)DashStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoLineDashStyle __fastcall
LineFormatDispT<T>::get_DashStyle(void)
{
  Office_2k::MsoLineDashStyle DashStyle;
  this->get_DashStyle((Office_2k::MsoLineDashStyle*)&DashStyle);
  return DashStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_DashStyle(Office_2k::MsoLineDashStyle DashStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DashStyle"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = (int)DashStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_EndArrowheadLength(Office_2k::MsoArrowheadLength* EndArrowheadLength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndArrowheadLength"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)EndArrowheadLength /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoArrowheadLength __fastcall
LineFormatDispT<T>::get_EndArrowheadLength(void)
{
  Office_2k::MsoArrowheadLength EndArrowheadLength;
  this->get_EndArrowheadLength((Office_2k::MsoArrowheadLength*)&EndArrowheadLength);
  return EndArrowheadLength;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_EndArrowheadLength(Office_2k::MsoArrowheadLength EndArrowheadLength/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndArrowheadLength"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = (int)EndArrowheadLength /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_EndArrowheadStyle(Office_2k::MsoArrowheadStyle* EndArrowheadStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndArrowheadStyle"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)EndArrowheadStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoArrowheadStyle __fastcall
LineFormatDispT<T>::get_EndArrowheadStyle(void)
{
  Office_2k::MsoArrowheadStyle EndArrowheadStyle;
  this->get_EndArrowheadStyle((Office_2k::MsoArrowheadStyle*)&EndArrowheadStyle);
  return EndArrowheadStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_EndArrowheadStyle(Office_2k::MsoArrowheadStyle EndArrowheadStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndArrowheadStyle"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = (int)EndArrowheadStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_EndArrowheadWidth(Office_2k::MsoArrowheadWidth* EndArrowheadWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndArrowheadWidth"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)EndArrowheadWidth /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoArrowheadWidth __fastcall
LineFormatDispT<T>::get_EndArrowheadWidth(void)
{
  Office_2k::MsoArrowheadWidth EndArrowheadWidth;
  this->get_EndArrowheadWidth((Office_2k::MsoArrowheadWidth*)&EndArrowheadWidth);
  return EndArrowheadWidth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_EndArrowheadWidth(Office_2k::MsoArrowheadWidth EndArrowheadWidth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndArrowheadWidth"), DISPID(107));
  TAutoArgs<1> _args;
  _args[1] = (int)EndArrowheadWidth /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_ForeColor(Office_2k::ColorFormatPtr* ForeColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::ColorFormat**)ForeColor /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::ColorFormatPtr __fastcall
LineFormatDispT<T>::get_ForeColor(void)
{
  Office_2k::ColorFormatPtr ForeColor;
  this->get_ForeColor((Office_2k::ColorFormatPtr*)&ForeColor);
  return ForeColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_ForeColor(Office_2k::ColorFormatPtr ForeColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(108));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Office_2k::ColorFormat*)ForeColor /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_Pattern(Office_2k::MsoPatternType* Pattern/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Pattern"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Pattern /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoPatternType __fastcall
LineFormatDispT<T>::get_Pattern(void)
{
  Office_2k::MsoPatternType Pattern;
  this->get_Pattern((Office_2k::MsoPatternType*)&Pattern);
  return Pattern;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_Pattern(Office_2k::MsoPatternType Pattern/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Pattern"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = (int)Pattern /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_Style(Office_2k::MsoLineStyle* Style/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Style"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Style /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoLineStyle __fastcall
LineFormatDispT<T>::get_Style(void)
{
  Office_2k::MsoLineStyle Style;
  this->get_Style((Office_2k::MsoLineStyle*)&Style);
  return Style;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_Style(Office_2k::MsoLineStyle Style/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Style"), DISPID(110));
  TAutoArgs<1> _args;
  _args[1] = (int)Style /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_Transparency(float* Transparency/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Transparency"), DISPID(111));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Transparency /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
LineFormatDispT<T>::get_Transparency(void)
{
  float Transparency;
  this->get_Transparency((float*)&Transparency);
  return Transparency;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_Transparency(float Transparency/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Transparency"), DISPID(111));
  TAutoArgs<1> _args;
  _args[1] = Transparency /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
LineFormatDispT<T>::get_Visible(void)
{
  Office_2k::MsoTriState Visible;
  this->get_Visible((Office_2k::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_Visible(Office_2k::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(112));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_Weight(float* Weight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Weight"), DISPID(113));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Weight /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
LineFormatDispT<T>::get_Weight(void)
{
  float Weight;
  this->get_Weight((float*)&Weight);
  return Weight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_Weight(float Weight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Weight"), DISPID(113));
  TAutoArgs<1> _args;
  _args[1] = Weight /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
LineFormatDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
LineFormatDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  ShapeNode
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0318-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodeDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ShapeNodeDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodeDispT<T>::get_EditingType(Office_2k::MsoEditingType* EditingType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EditingType"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)EditingType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoEditingType __fastcall
ShapeNodeDispT<T>::get_EditingType(void)
{
  Office_2k::MsoEditingType EditingType;
  this->get_EditingType((Office_2k::MsoEditingType*)&EditingType);
  return EditingType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodeDispT<T>::get_Points(TVariant* Points/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Points"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Points /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
ShapeNodeDispT<T>::get_Points(void)
{
  TVariant Points;
  this->get_Points((TVariant*)&Points);
  return Points;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodeDispT<T>::get_SegmentType(Office_2k::MsoSegmentType* SegmentType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SegmentType"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)SegmentType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoSegmentType __fastcall
ShapeNodeDispT<T>::get_SegmentType(void)
{
  Office_2k::MsoSegmentType SegmentType;
  this->get_SegmentType((Office_2k::MsoSegmentType*)&SegmentType);
  return SegmentType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodeDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ShapeNodeDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodeDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ShapeNodeDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  ShapeNodes
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0319-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodesDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ShapeNodesDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodesDispT<T>::get_Count(int* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ShapeNodesDispT<T>::get_Count(void)
{
  int Count;
  this->get_Count((int*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodesDispT<T>::Item(TVariantInParam Index/*[in]*/, 
                         Office_2k::ShapeNodePtr* Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::ShapeNode**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_2k::ShapeNodePtr __fastcall
ShapeNodesDispT<T>::Item(TVariantInParam Index/*[in]*/)
{
  Office_2k::ShapeNodePtr Item;
  this->Item(Index, (Office_2k::ShapeNodePtr*)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodesDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
ShapeNodesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodesDispT<T>::Delete(int Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodesDispT<T>::Insert(int Index/*[in]*/, Office_2k::MsoSegmentType SegmentType/*[in]*/, 
                           Office_2k::MsoEditingType EditingType/*[in]*/, float X1/*[in]*/, 
                           float Y1/*[in]*/, float X2/*[in,def,opt]*/, float Y2/*[in,def,opt]*/, 
                           float X3/*[in,def,opt]*/, float Y3/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Insert"), DISPID(12));
  TAutoArgs<9> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  _args[2] = (int)SegmentType /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)EditingType /*[VT_USERDEFINED:0]*/;
  _args[4] = X1 /*[VT_R4:0]*/;
  _args[5] = Y1 /*[VT_R4:0]*/;
  _args[6] = X2 /*[VT_R4:0]*/;
  _args[7] = Y2 /*[VT_R4:0]*/;
  _args[8] = X3 /*[VT_R4:0]*/;
  _args[9] = Y3 /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodesDispT<T>::SetEditingType(int Index/*[in]*/, Office_2k::MsoEditingType EditingType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetEditingType"), DISPID(13));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  _args[2] = (int)EditingType /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodesDispT<T>::SetPosition(int Index/*[in]*/, float X1/*[in]*/, float Y1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPosition"), DISPID(14));
  TAutoArgs<3> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  _args[2] = X1 /*[VT_R4:0]*/;
  _args[3] = Y1 /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodesDispT<T>::SetSegmentType(int Index/*[in]*/, Office_2k::MsoSegmentType SegmentType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetSegmentType"), DISPID(15));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  _args[2] = (int)SegmentType /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodesDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ShapeNodesDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodesDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ShapeNodesDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  PictureFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C031A-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PictureFormatDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::IncrementBrightness(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncrementBrightness"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::IncrementContrast(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncrementContrast"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::get_Brightness(float* Brightness/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Brightness"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Brightness /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PictureFormatDispT<T>::get_Brightness(void)
{
  float Brightness;
  this->get_Brightness((float*)&Brightness);
  return Brightness;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::set_Brightness(float Brightness/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Brightness"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = Brightness /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::get_ColorType(Office_2k::MsoPictureColorType* ColorType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorType"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ColorType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoPictureColorType __fastcall
PictureFormatDispT<T>::get_ColorType(void)
{
  Office_2k::MsoPictureColorType ColorType;
  this->get_ColorType((Office_2k::MsoPictureColorType*)&ColorType);
  return ColorType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::set_ColorType(Office_2k::MsoPictureColorType ColorType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorType"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = (int)ColorType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::get_Contrast(float* Contrast/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Contrast"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Contrast /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PictureFormatDispT<T>::get_Contrast(void)
{
  float Contrast;
  this->get_Contrast((float*)&Contrast);
  return Contrast;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::set_Contrast(float Contrast/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Contrast"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = Contrast /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::get_CropBottom(float* CropBottom/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CropBottom"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CropBottom /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PictureFormatDispT<T>::get_CropBottom(void)
{
  float CropBottom;
  this->get_CropBottom((float*)&CropBottom);
  return CropBottom;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::set_CropBottom(float CropBottom/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CropBottom"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = CropBottom /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::get_CropLeft(float* CropLeft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CropLeft"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CropLeft /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PictureFormatDispT<T>::get_CropLeft(void)
{
  float CropLeft;
  this->get_CropLeft((float*)&CropLeft);
  return CropLeft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::set_CropLeft(float CropLeft/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CropLeft"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = CropLeft /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::get_CropRight(float* CropRight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CropRight"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CropRight /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PictureFormatDispT<T>::get_CropRight(void)
{
  float CropRight;
  this->get_CropRight((float*)&CropRight);
  return CropRight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::set_CropRight(float CropRight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CropRight"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = CropRight /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::get_CropTop(float* CropTop/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CropTop"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CropTop /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PictureFormatDispT<T>::get_CropTop(void)
{
  float CropTop;
  this->get_CropTop((float*)&CropTop);
  return CropTop;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::set_CropTop(float CropTop/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CropTop"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = CropTop /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::get_TransparencyColor(Office_2k::MsoRGBType* TransparencyColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransparencyColor"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(TransparencyColor /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoRGBType __fastcall
PictureFormatDispT<T>::get_TransparencyColor(void)
{
  Office_2k::MsoRGBType TransparencyColor;
  this->get_TransparencyColor((Office_2k::MsoRGBType*)&TransparencyColor);
  return TransparencyColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::set_TransparencyColor(Office_2k::MsoRGBType TransparencyColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransparencyColor"), DISPID(107));
  TAutoArgs<1> _args;
  _args[1] = TransparencyColor /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::get_TransparentBackground(Office_2k::MsoTriState* TransparentBackground/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransparentBackground"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)TransparentBackground /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PictureFormatDispT<T>::get_TransparentBackground(void)
{
  Office_2k::MsoTriState TransparentBackground;
  this->get_TransparentBackground((Office_2k::MsoTriState*)&TransparentBackground);
  return TransparentBackground;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::set_TransparentBackground(Office_2k::MsoTriState TransparentBackground/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransparentBackground"), DISPID(108));
  TAutoArgs<1> _args;
  _args[1] = (int)TransparentBackground /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PictureFormatDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PictureFormatDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  ShadowFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C031B-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ShadowFormatDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::IncrementOffsetX(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncrementOffsetX"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::IncrementOffsetY(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncrementOffsetY"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::get_ForeColor(Office_2k::ColorFormatPtr* ForeColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::ColorFormat**)ForeColor /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::ColorFormatPtr __fastcall
ShadowFormatDispT<T>::get_ForeColor(void)
{
  Office_2k::ColorFormatPtr ForeColor;
  this->get_ForeColor((Office_2k::ColorFormatPtr*)&ForeColor);
  return ForeColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::set_ForeColor(Office_2k::ColorFormatPtr ForeColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Office_2k::ColorFormat*)ForeColor /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::get_Obscured(Office_2k::MsoTriState* Obscured/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Obscured"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Obscured /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
ShadowFormatDispT<T>::get_Obscured(void)
{
  Office_2k::MsoTriState Obscured;
  this->get_Obscured((Office_2k::MsoTriState*)&Obscured);
  return Obscured;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::set_Obscured(Office_2k::MsoTriState Obscured/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Obscured"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = (int)Obscured /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::get_OffsetX(float* OffsetX/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OffsetX"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OffsetX /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShadowFormatDispT<T>::get_OffsetX(void)
{
  float OffsetX;
  this->get_OffsetX((float*)&OffsetX);
  return OffsetX;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::set_OffsetX(float OffsetX/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OffsetX"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = OffsetX /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::get_OffsetY(float* OffsetY/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OffsetY"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OffsetY /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShadowFormatDispT<T>::get_OffsetY(void)
{
  float OffsetY;
  this->get_OffsetY((float*)&OffsetY);
  return OffsetY;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::set_OffsetY(float OffsetY/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OffsetY"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = OffsetY /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::get_Transparency(float* Transparency/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Transparency"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Transparency /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShadowFormatDispT<T>::get_Transparency(void)
{
  float Transparency;
  this->get_Transparency((float*)&Transparency);
  return Transparency;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::set_Transparency(float Transparency/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Transparency"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = Transparency /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::get_Type(Office_2k::MsoShadowType* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoShadowType __fastcall
ShadowFormatDispT<T>::get_Type(void)
{
  Office_2k::MsoShadowType Type;
  this->get_Type((Office_2k::MsoShadowType*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::set_Type(Office_2k::MsoShadowType Type/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
ShadowFormatDispT<T>::get_Visible(void)
{
  Office_2k::MsoTriState Visible;
  this->get_Visible((Office_2k::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::set_Visible(Office_2k::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ShadowFormatDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ShadowFormatDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  Script
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0341-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ScriptDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610809344]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ScriptDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ScriptDispT<T>::get_Extended(BSTR* Extended/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Extended"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Extended /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ScriptDispT<T>::get_Extended(void)
{
  BSTR Extended;
  this->get_Extended((BSTR*)&Extended);
  return Extended;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ScriptDispT<T>::set_Extended(BSTR Extended/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Extended"), DISPID(1610809345));
  TAutoArgs<1> _args;
  _args[1] = Extended /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ScriptDispT<T>::get_Id(BSTR* Id/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Id"), DISPID(DISPID_UNKNOWN/*[1610809347]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Id /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ScriptDispT<T>::get_Id(void)
{
  BSTR Id;
  this->get_Id((BSTR*)&Id);
  return Id;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ScriptDispT<T>::set_Id(BSTR Id/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Id"), DISPID(1610809347));
  TAutoArgs<1> _args;
  _args[1] = Id /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ScriptDispT<T>::get_Language(Office_2k::MsoScriptLanguage* Language/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Language"), DISPID(DISPID_UNKNOWN/*[1610809349]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Language /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoScriptLanguage __fastcall
ScriptDispT<T>::get_Language(void)
{
  Office_2k::MsoScriptLanguage Language;
  this->get_Language((Office_2k::MsoScriptLanguage*)&Language);
  return Language;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ScriptDispT<T>::set_Language(Office_2k::MsoScriptLanguage Language/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Language"), DISPID(1610809349));
  TAutoArgs<1> _args;
  _args[1] = (int)Language /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ScriptDispT<T>::get_Location(Office_2k::MsoScriptLocation* Location/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Location"), DISPID(DISPID_UNKNOWN/*[1610809351]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Location /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoScriptLocation __fastcall
ScriptDispT<T>::get_Location(void)
{
  Office_2k::MsoScriptLocation Location;
  this->get_Location((Office_2k::MsoScriptLocation*)&Location);
  return Location;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ScriptDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(DISPID_UNKNOWN/*[1610809352]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ScriptDispT<T>::get_Shape(LPDISPATCH* Object/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Shape"), DISPID(DISPID_UNKNOWN/*[1610809353]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Object /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ScriptDispT<T>::get_Shape(void)
{
  LPDISPATCH Object;
  this->get_Shape((LPDISPATCH*)&Object);
  return Object;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ScriptDispT<T>::get_ScriptText(BSTR* Script/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScriptText"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Script /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ScriptDispT<T>::get_ScriptText(void)
{
  BSTR Script;
  this->get_ScriptText((BSTR*)&Script);
  return Script;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ScriptDispT<T>::set_ScriptText(BSTR Script/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScriptText"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Script /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ScriptDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ScriptDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ScriptDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ScriptDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  Scripts
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0340-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ScriptsDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610809344]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ScriptsDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ScriptsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ScriptsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ScriptsDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
ScriptsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ScriptsDispT<T>::Item(TVariantInParam Index/*[in]*/, Office_2k::ScriptPtr* Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::Script**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_2k::ScriptPtr __fastcall
ScriptsDispT<T>::Item(TVariantInParam Index/*[in]*/)
{
  Office_2k::ScriptPtr Item;
  this->Item(Index, (Office_2k::ScriptPtr*)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ScriptsDispT<T>::Add(LPDISPATCH Anchor/*[in,def,opt]*/, 
                     Office_2k::MsoScriptLocation Location/*[in,def,opt]*/, 
                     Office_2k::MsoScriptLanguage Language/*[in,def,opt]*/, BSTR Id/*[in,def,opt]*/
                     , BSTR Extended/*[in,def,opt]*/, BSTR ScriptText/*[in,def,opt]*/, 
                     Office_2k::ScriptPtr* Add/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(DISPID_UNKNOWN/*[1610809348]*/));
  TAutoArgs<6> _args;
  _args[1] = Anchor /*[VT_DISPATCH:0]*/;
  _args[2] = (int)Location /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)Language /*[VT_USERDEFINED:0]*/;
  _args[4] = Id /*[VT_BSTR:0]*/;
  _args[5] = Extended /*[VT_BSTR:0]*/;
  _args[6] = ScriptText /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::Script**)Add /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_2k::ScriptPtr __fastcall
ScriptsDispT<T>::Add(LPDISPATCH Anchor/*[in,def,opt]*/, 
                     Office_2k::MsoScriptLocation Location/*[in,def,opt]*/, 
                     Office_2k::MsoScriptLanguage Language/*[in,def,opt]*/, BSTR Id/*[in,def,opt]*/, 
                     BSTR Extended/*[in,def,opt]*/, BSTR ScriptText/*[in,def,opt]*/)
{
  Office_2k::ScriptPtr Add;
  this->Add(Anchor, Location, Language, Id, Extended, ScriptText, (Office_2k::ScriptPtr*)&Add);
  return Add;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ScriptsDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(DISPID_UNKNOWN/*[1610809349]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ScriptsDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ScriptsDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ScriptsDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ScriptsDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  Shape
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C031C-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ShapeDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::Apply()
{
  _TDispID _dispid(*this, OLETEXT("Apply"), DISPID(10));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(11));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::Duplicate(Office_2k::ShapePtr* Duplicate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Duplicate"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::Shape**)Duplicate /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_2k::ShapePtr __fastcall
ShapeDispT<T>::Duplicate(void)
{
  Office_2k::ShapePtr Duplicate;
  this->Duplicate((Office_2k::ShapePtr*)&Duplicate);
  return Duplicate;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::Flip(Office_2k::MsoFlipCmd FlipCmd/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Flip"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = (int)FlipCmd /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::IncrementLeft(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncrementLeft"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::IncrementRotation(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncrementRotation"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::IncrementTop(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncrementTop"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::PickUp()
{
  _TDispID _dispid(*this, OLETEXT("PickUp"), DISPID(17));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::RerouteConnections()
{
  _TDispID _dispid(*this, OLETEXT("RerouteConnections"), DISPID(18));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::ScaleHeight(float Factor/*[in]*/, 
                           Office_2k::MsoTriState RelativeToOriginalSize/*[in]*/, 
                           Office_2k::MsoScaleFrom fScale/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScaleHeight"), DISPID(19));
  TAutoArgs<3> _args;
  _args[1] = Factor /*[VT_R4:0]*/;
  _args[2] = (int)RelativeToOriginalSize /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)fScale /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::ScaleWidth(float Factor/*[in]*/, 
                          Office_2k::MsoTriState RelativeToOriginalSize/*[in]*/, 
                          Office_2k::MsoScaleFrom fScale/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScaleWidth"), DISPID(20));
  TAutoArgs<3> _args;
  _args[1] = Factor /*[VT_R4:0]*/;
  _args[2] = (int)RelativeToOriginalSize /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)fScale /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::Select(TVariantInParam Replace/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Select"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = Replace /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::SetShapesDefaultProperties()
{
  _TDispID _dispid(*this, OLETEXT("SetShapesDefaultProperties"), DISPID(22));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::Ungroup(Office_2k::ShapeRangePtr* Ungroup/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Ungroup"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::ShapeRange**)Ungroup /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_2k::ShapeRangePtr __fastcall
ShapeDispT<T>::Ungroup(void)
{
  Office_2k::ShapeRangePtr Ungroup;
  this->Ungroup((Office_2k::ShapeRangePtr*)&Ungroup);
  return Ungroup;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::ZOrder(Office_2k::MsoZOrderCmd ZOrderCmd/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZOrder"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = (int)ZOrderCmd /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Adjustments(Office_2k::AdjustmentsPtr* Adjustments/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Adjustments"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::Adjustments**)Adjustments /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::AdjustmentsPtr __fastcall
ShapeDispT<T>::get_Adjustments(void)
{
  Office_2k::AdjustmentsPtr Adjustments;
  this->get_Adjustments((Office_2k::AdjustmentsPtr*)&Adjustments);
  return Adjustments;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_AutoShapeType(Office_2k::MsoAutoShapeType* AutoShapeType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoShapeType"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AutoShapeType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoAutoShapeType __fastcall
ShapeDispT<T>::get_AutoShapeType(void)
{
  Office_2k::MsoAutoShapeType AutoShapeType;
  this->get_AutoShapeType((Office_2k::MsoAutoShapeType*)&AutoShapeType);
  return AutoShapeType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::set_AutoShapeType(Office_2k::MsoAutoShapeType AutoShapeType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoShapeType"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = (int)AutoShapeType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_BlackWhiteMode(Office_2k::MsoBlackWhiteMode* BlackWhiteMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BlackWhiteMode"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)BlackWhiteMode /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoBlackWhiteMode __fastcall
ShapeDispT<T>::get_BlackWhiteMode(void)
{
  Office_2k::MsoBlackWhiteMode BlackWhiteMode;
  this->get_BlackWhiteMode((Office_2k::MsoBlackWhiteMode*)&BlackWhiteMode);
  return BlackWhiteMode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::set_BlackWhiteMode(Office_2k::MsoBlackWhiteMode BlackWhiteMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BlackWhiteMode"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = (int)BlackWhiteMode /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Callout(Office_2k::CalloutFormatPtr* Callout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Callout"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::CalloutFormat**)Callout /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::CalloutFormatPtr __fastcall
ShapeDispT<T>::get_Callout(void)
{
  Office_2k::CalloutFormatPtr Callout;
  this->get_Callout((Office_2k::CalloutFormatPtr*)&Callout);
  return Callout;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_ConnectionSiteCount(int* ConnectionSiteCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionSiteCount"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ConnectionSiteCount /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ShapeDispT<T>::get_ConnectionSiteCount(void)
{
  int ConnectionSiteCount;
  this->get_ConnectionSiteCount((int*)&ConnectionSiteCount);
  return ConnectionSiteCount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Connector(Office_2k::MsoTriState* Connector/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Connector"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Connector /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
ShapeDispT<T>::get_Connector(void)
{
  Office_2k::MsoTriState Connector;
  this->get_Connector((Office_2k::MsoTriState*)&Connector);
  return Connector;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_ConnectorFormat(Office_2k::ConnectorFormatPtr* ConnectorFormat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectorFormat"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::ConnectorFormat**)ConnectorFormat /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::ConnectorFormatPtr __fastcall
ShapeDispT<T>::get_ConnectorFormat(void)
{
  Office_2k::ConnectorFormatPtr ConnectorFormat;
  this->get_ConnectorFormat((Office_2k::ConnectorFormatPtr*)&ConnectorFormat);
  return ConnectorFormat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Fill(Office_2k::FillFormatPtr* Fill/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Fill"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::FillFormat**)Fill /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::FillFormatPtr __fastcall
ShapeDispT<T>::get_Fill(void)
{
  Office_2k::FillFormatPtr Fill;
  this->get_Fill((Office_2k::FillFormatPtr*)&Fill);
  return Fill;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_GroupItems(Office_2k::GroupShapesPtr* GroupItems/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupItems"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::GroupShapes**)GroupItems /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::GroupShapesPtr __fastcall
ShapeDispT<T>::get_GroupItems(void)
{
  Office_2k::GroupShapesPtr GroupItems;
  this->get_GroupItems((Office_2k::GroupShapesPtr*)&GroupItems);
  return GroupItems;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Height(float* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShapeDispT<T>::get_Height(void)
{
  float Height;
  this->get_Height((float*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::set_Height(float Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_HorizontalFlip(Office_2k::MsoTriState* HorizontalFlip/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HorizontalFlip"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)HorizontalFlip /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
ShapeDispT<T>::get_HorizontalFlip(void)
{
  Office_2k::MsoTriState HorizontalFlip;
  this->get_HorizontalFlip((Office_2k::MsoTriState*)&HorizontalFlip);
  return HorizontalFlip;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Left(float* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(111));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShapeDispT<T>::get_Left(void)
{
  float Left;
  this->get_Left((float*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::set_Left(float Left/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(111));
  TAutoArgs<1> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Line(Office_2k::LineFormatPtr* Line/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Line"), DISPID(112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::LineFormat**)Line /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::LineFormatPtr __fastcall
ShapeDispT<T>::get_Line(void)
{
  Office_2k::LineFormatPtr Line;
  this->get_Line((Office_2k::LineFormatPtr*)&Line);
  return Line;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_LockAspectRatio(Office_2k::MsoTriState* LockAspectRatio/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LockAspectRatio"), DISPID(113));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)LockAspectRatio /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
ShapeDispT<T>::get_LockAspectRatio(void)
{
  Office_2k::MsoTriState LockAspectRatio;
  this->get_LockAspectRatio((Office_2k::MsoTriState*)&LockAspectRatio);
  return LockAspectRatio;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::set_LockAspectRatio(Office_2k::MsoTriState LockAspectRatio/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LockAspectRatio"), DISPID(113));
  TAutoArgs<1> _args;
  _args[1] = (int)LockAspectRatio /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(115));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ShapeDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(115));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Nodes(Office_2k::ShapeNodesPtr* Nodes/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Nodes"), DISPID(116));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::ShapeNodes**)Nodes /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::ShapeNodesPtr __fastcall
ShapeDispT<T>::get_Nodes(void)
{
  Office_2k::ShapeNodesPtr Nodes;
  this->get_Nodes((Office_2k::ShapeNodesPtr*)&Nodes);
  return Nodes;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Rotation(float* Rotation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Rotation"), DISPID(117));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Rotation /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShapeDispT<T>::get_Rotation(void)
{
  float Rotation;
  this->get_Rotation((float*)&Rotation);
  return Rotation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::set_Rotation(float Rotation/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Rotation"), DISPID(117));
  TAutoArgs<1> _args;
  _args[1] = Rotation /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_PictureFormat(Office_2k::PictureFormatPtr* Picture/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureFormat"), DISPID(118));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::PictureFormat**)Picture /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::PictureFormatPtr __fastcall
ShapeDispT<T>::get_PictureFormat(void)
{
  Office_2k::PictureFormatPtr Picture;
  this->get_PictureFormat((Office_2k::PictureFormatPtr*)&Picture);
  return Picture;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Shadow(Office_2k::ShadowFormatPtr* Shadow/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Shadow"), DISPID(119));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::ShadowFormat**)Shadow /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::ShadowFormatPtr __fastcall
ShapeDispT<T>::get_Shadow(void)
{
  Office_2k::ShadowFormatPtr Shadow;
  this->get_Shadow((Office_2k::ShadowFormatPtr*)&Shadow);
  return Shadow;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_TextEffect(Office_2k::TextEffectFormatPtr* TextEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextEffect"), DISPID(120));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::TextEffectFormat**)TextEffect /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::TextEffectFormatPtr __fastcall
ShapeDispT<T>::get_TextEffect(void)
{
  Office_2k::TextEffectFormatPtr TextEffect;
  this->get_TextEffect((Office_2k::TextEffectFormatPtr*)&TextEffect);
  return TextEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_TextFrame(Office_2k::TextFramePtr* TextFrame/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextFrame"), DISPID(121));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::TextFrame**)TextFrame /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::TextFramePtr __fastcall
ShapeDispT<T>::get_TextFrame(void)
{
  Office_2k::TextFramePtr TextFrame;
  this->get_TextFrame((Office_2k::TextFramePtr*)&TextFrame);
  return TextFrame;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_ThreeD(Office_2k::ThreeDFormatPtr* ThreeD/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ThreeD"), DISPID(122));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::ThreeDFormat**)ThreeD /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::ThreeDFormatPtr __fastcall
ShapeDispT<T>::get_ThreeD(void)
{
  Office_2k::ThreeDFormatPtr ThreeD;
  this->get_ThreeD((Office_2k::ThreeDFormatPtr*)&ThreeD);
  return ThreeD;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Top(float* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(123));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShapeDispT<T>::get_Top(void)
{
  float Top;
  this->get_Top((float*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::set_Top(float Top/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(123));
  TAutoArgs<1> _args;
  _args[1] = Top /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Type(Office_2k::MsoShapeType* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(124));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoShapeType __fastcall
ShapeDispT<T>::get_Type(void)
{
  Office_2k::MsoShapeType Type;
  this->get_Type((Office_2k::MsoShapeType*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_VerticalFlip(Office_2k::MsoTriState* VerticalFlip/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VerticalFlip"), DISPID(125));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)VerticalFlip /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
ShapeDispT<T>::get_VerticalFlip(void)
{
  Office_2k::MsoTriState VerticalFlip;
  this->get_VerticalFlip((Office_2k::MsoTriState*)&VerticalFlip);
  return VerticalFlip;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Vertices(TVariant* Vertices/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Vertices"), DISPID(126));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Vertices /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
ShapeDispT<T>::get_Vertices(void)
{
  TVariant Vertices;
  this->get_Vertices((TVariant*)&Vertices);
  return Vertices;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(127));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
ShapeDispT<T>::get_Visible(void)
{
  Office_2k::MsoTriState Visible;
  this->get_Visible((Office_2k::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::set_Visible(Office_2k::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(127));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Width(float* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(128));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShapeDispT<T>::get_Width(void)
{
  float Width;
  this->get_Width((float*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::set_Width(float Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(128));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_ZOrderPosition(int* ZOrderPosition/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZOrderPosition"), DISPID(129));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ZOrderPosition /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ShapeDispT<T>::get_ZOrderPosition(void)
{
  int ZOrderPosition;
  this->get_ZOrderPosition((int*)&ZOrderPosition);
  return ZOrderPosition;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Script(Office_2k::ScriptPtr* Script/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Script"), DISPID(130));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::Script**)Script /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::ScriptPtr __fastcall
ShapeDispT<T>::get_Script(void)
{
  Office_2k::ScriptPtr Script;
  this->get_Script((Office_2k::ScriptPtr*)&Script);
  return Script;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_AlternativeText(BSTR* AlternativeText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AlternativeText"), DISPID(131));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AlternativeText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ShapeDispT<T>::get_AlternativeText(void)
{
  BSTR AlternativeText;
  this->get_AlternativeText((BSTR*)&AlternativeText);
  return AlternativeText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::set_AlternativeText(BSTR AlternativeText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AlternativeText"), DISPID(131));
  TAutoArgs<1> _args;
  _args[1] = AlternativeText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ShapeDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ShapeDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  ShapeRange
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C031D-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ShapeRangeDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Count(int* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ShapeRangeDispT<T>::get_Count(void)
{
  int Count;
  this->get_Count((int*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::Item(TVariantInParam Index/*[in]*/, Office_2k::ShapePtr* Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::Shape**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_2k::ShapePtr __fastcall
ShapeRangeDispT<T>::Item(TVariantInParam Index/*[in]*/)
{
  Office_2k::ShapePtr Item;
  this->Item(Index, (Office_2k::ShapePtr*)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
ShapeRangeDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::Align(Office_2k::MsoAlignCmd AlignCmd/*[in]*/, 
                          Office_2k::MsoTriState RelativeTo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Align"), DISPID(10));
  TAutoArgs<2> _args;
  _args[1] = (int)AlignCmd /*[VT_USERDEFINED:0]*/;
  _args[2] = (int)RelativeTo /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::Apply()
{
  _TDispID _dispid(*this, OLETEXT("Apply"), DISPID(11));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(12));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::Distribute(Office_2k::MsoDistributeCmd DistributeCmd/*[in]*/, 
                               Office_2k::MsoTriState RelativeTo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Distribute"), DISPID(13));
  TAutoArgs<2> _args;
  _args[1] = (int)DistributeCmd /*[VT_USERDEFINED:0]*/;
  _args[2] = (int)RelativeTo /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::Duplicate(Office_2k::ShapeRangePtr* Duplicate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Duplicate"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::ShapeRange**)Duplicate /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_2k::ShapeRangePtr __fastcall
ShapeRangeDispT<T>::Duplicate(void)
{
  Office_2k::ShapeRangePtr Duplicate;
  this->Duplicate((Office_2k::ShapeRangePtr*)&Duplicate);
  return Duplicate;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::Flip(Office_2k::MsoFlipCmd FlipCmd/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Flip"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = (int)FlipCmd /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::IncrementLeft(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncrementLeft"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::IncrementRotation(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncrementRotation"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::IncrementTop(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncrementTop"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::Group(Office_2k::ShapePtr* Group/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Group"), DISPID(19));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::Shape**)Group /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_2k::ShapePtr __fastcall
ShapeRangeDispT<T>::Group(void)
{
  Office_2k::ShapePtr Group;
  this->Group((Office_2k::ShapePtr*)&Group);
  return Group;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::PickUp()
{
  _TDispID _dispid(*this, OLETEXT("PickUp"), DISPID(20));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::Regroup(Office_2k::ShapePtr* Regroup/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Regroup"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::Shape**)Regroup /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_2k::ShapePtr __fastcall
ShapeRangeDispT<T>::Regroup(void)
{
  Office_2k::ShapePtr Regroup;
  this->Regroup((Office_2k::ShapePtr*)&Regroup);
  return Regroup;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::RerouteConnections()
{
  _TDispID _dispid(*this, OLETEXT("RerouteConnections"), DISPID(22));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::ScaleHeight(float Factor/*[in]*/, 
                                Office_2k::MsoTriState RelativeToOriginalSize/*[in]*/, 
                                Office_2k::MsoScaleFrom fScale/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScaleHeight"), DISPID(23));
  TAutoArgs<3> _args;
  _args[1] = Factor /*[VT_R4:0]*/;
  _args[2] = (int)RelativeToOriginalSize /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)fScale /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::ScaleWidth(float Factor/*[in]*/, 
                               Office_2k::MsoTriState RelativeToOriginalSize/*[in]*/, 
                               Office_2k::MsoScaleFrom fScale/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScaleWidth"), DISPID(24));
  TAutoArgs<3> _args;
  _args[1] = Factor /*[VT_R4:0]*/;
  _args[2] = (int)RelativeToOriginalSize /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)fScale /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::Select(TVariantInParam Replace/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Select"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = Replace /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::SetShapesDefaultProperties()
{
  _TDispID _dispid(*this, OLETEXT("SetShapesDefaultProperties"), DISPID(26));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::Ungroup(Office_2k::ShapeRangePtr* Ungroup/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Ungroup"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::ShapeRange**)Ungroup /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_2k::ShapeRangePtr __fastcall
ShapeRangeDispT<T>::Ungroup(void)
{
  Office_2k::ShapeRangePtr Ungroup;
  this->Ungroup((Office_2k::ShapeRangePtr*)&Ungroup);
  return Ungroup;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::ZOrder(Office_2k::MsoZOrderCmd ZOrderCmd/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZOrder"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = (int)ZOrderCmd /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Adjustments(Office_2k::AdjustmentsPtr* Adjustments/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Adjustments"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::Adjustments**)Adjustments /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::AdjustmentsPtr __fastcall
ShapeRangeDispT<T>::get_Adjustments(void)
{
  Office_2k::AdjustmentsPtr Adjustments;
  this->get_Adjustments((Office_2k::AdjustmentsPtr*)&Adjustments);
  return Adjustments;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_AutoShapeType(Office_2k::MsoAutoShapeType* AutoShapeType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoShapeType"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AutoShapeType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoAutoShapeType __fastcall
ShapeRangeDispT<T>::get_AutoShapeType(void)
{
  Office_2k::MsoAutoShapeType AutoShapeType;
  this->get_AutoShapeType((Office_2k::MsoAutoShapeType*)&AutoShapeType);
  return AutoShapeType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::set_AutoShapeType(Office_2k::MsoAutoShapeType AutoShapeType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoShapeType"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = (int)AutoShapeType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_BlackWhiteMode(Office_2k::MsoBlackWhiteMode* BlackWhiteMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BlackWhiteMode"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)BlackWhiteMode /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoBlackWhiteMode __fastcall
ShapeRangeDispT<T>::get_BlackWhiteMode(void)
{
  Office_2k::MsoBlackWhiteMode BlackWhiteMode;
  this->get_BlackWhiteMode((Office_2k::MsoBlackWhiteMode*)&BlackWhiteMode);
  return BlackWhiteMode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::set_BlackWhiteMode(Office_2k::MsoBlackWhiteMode BlackWhiteMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BlackWhiteMode"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = (int)BlackWhiteMode /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Callout(Office_2k::CalloutFormatPtr* Callout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Callout"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::CalloutFormat**)Callout /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::CalloutFormatPtr __fastcall
ShapeRangeDispT<T>::get_Callout(void)
{
  Office_2k::CalloutFormatPtr Callout;
  this->get_Callout((Office_2k::CalloutFormatPtr*)&Callout);
  return Callout;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_ConnectionSiteCount(int* ConnectionSiteCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionSiteCount"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ConnectionSiteCount /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ShapeRangeDispT<T>::get_ConnectionSiteCount(void)
{
  int ConnectionSiteCount;
  this->get_ConnectionSiteCount((int*)&ConnectionSiteCount);
  return ConnectionSiteCount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Connector(Office_2k::MsoTriState* Connector/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Connector"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Connector /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
ShapeRangeDispT<T>::get_Connector(void)
{
  Office_2k::MsoTriState Connector;
  this->get_Connector((Office_2k::MsoTriState*)&Connector);
  return Connector;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_ConnectorFormat(Office_2k::ConnectorFormatPtr* ConnectorFormat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectorFormat"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::ConnectorFormat**)ConnectorFormat /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::ConnectorFormatPtr __fastcall
ShapeRangeDispT<T>::get_ConnectorFormat(void)
{
  Office_2k::ConnectorFormatPtr ConnectorFormat;
  this->get_ConnectorFormat((Office_2k::ConnectorFormatPtr*)&ConnectorFormat);
  return ConnectorFormat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Fill(Office_2k::FillFormatPtr* Fill/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Fill"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::FillFormat**)Fill /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::FillFormatPtr __fastcall
ShapeRangeDispT<T>::get_Fill(void)
{
  Office_2k::FillFormatPtr Fill;
  this->get_Fill((Office_2k::FillFormatPtr*)&Fill);
  return Fill;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_GroupItems(Office_2k::GroupShapesPtr* GroupItems/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupItems"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::GroupShapes**)GroupItems /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::GroupShapesPtr __fastcall
ShapeRangeDispT<T>::get_GroupItems(void)
{
  Office_2k::GroupShapesPtr GroupItems;
  this->get_GroupItems((Office_2k::GroupShapesPtr*)&GroupItems);
  return GroupItems;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Height(float* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShapeRangeDispT<T>::get_Height(void)
{
  float Height;
  this->get_Height((float*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::set_Height(float Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_HorizontalFlip(Office_2k::MsoTriState* HorizontalFlip/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HorizontalFlip"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)HorizontalFlip /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
ShapeRangeDispT<T>::get_HorizontalFlip(void)
{
  Office_2k::MsoTriState HorizontalFlip;
  this->get_HorizontalFlip((Office_2k::MsoTriState*)&HorizontalFlip);
  return HorizontalFlip;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Left(float* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(111));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShapeRangeDispT<T>::get_Left(void)
{
  float Left;
  this->get_Left((float*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::set_Left(float Left/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(111));
  TAutoArgs<1> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Line(Office_2k::LineFormatPtr* Line/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Line"), DISPID(112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::LineFormat**)Line /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::LineFormatPtr __fastcall
ShapeRangeDispT<T>::get_Line(void)
{
  Office_2k::LineFormatPtr Line;
  this->get_Line((Office_2k::LineFormatPtr*)&Line);
  return Line;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_LockAspectRatio(Office_2k::MsoTriState* LockAspectRatio/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LockAspectRatio"), DISPID(113));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)LockAspectRatio /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
ShapeRangeDispT<T>::get_LockAspectRatio(void)
{
  Office_2k::MsoTriState LockAspectRatio;
  this->get_LockAspectRatio((Office_2k::MsoTriState*)&LockAspectRatio);
  return LockAspectRatio;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::set_LockAspectRatio(Office_2k::MsoTriState LockAspectRatio/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LockAspectRatio"), DISPID(113));
  TAutoArgs<1> _args;
  _args[1] = (int)LockAspectRatio /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(115));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ShapeRangeDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(115));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Nodes(Office_2k::ShapeNodesPtr* Nodes/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Nodes"), DISPID(116));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::ShapeNodes**)Nodes /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::ShapeNodesPtr __fastcall
ShapeRangeDispT<T>::get_Nodes(void)
{
  Office_2k::ShapeNodesPtr Nodes;
  this->get_Nodes((Office_2k::ShapeNodesPtr*)&Nodes);
  return Nodes;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Rotation(float* Rotation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Rotation"), DISPID(117));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Rotation /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShapeRangeDispT<T>::get_Rotation(void)
{
  float Rotation;
  this->get_Rotation((float*)&Rotation);
  return Rotation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::set_Rotation(float Rotation/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Rotation"), DISPID(117));
  TAutoArgs<1> _args;
  _args[1] = Rotation /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_PictureFormat(Office_2k::PictureFormatPtr* Picture/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureFormat"), DISPID(118));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::PictureFormat**)Picture /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::PictureFormatPtr __fastcall
ShapeRangeDispT<T>::get_PictureFormat(void)
{
  Office_2k::PictureFormatPtr Picture;
  this->get_PictureFormat((Office_2k::PictureFormatPtr*)&Picture);
  return Picture;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Shadow(Office_2k::ShadowFormatPtr* Shadow/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Shadow"), DISPID(119));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::ShadowFormat**)Shadow /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::ShadowFormatPtr __fastcall
ShapeRangeDispT<T>::get_Shadow(void)
{
  Office_2k::ShadowFormatPtr Shadow;
  this->get_Shadow((Office_2k::ShadowFormatPtr*)&Shadow);
  return Shadow;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_TextEffect(Office_2k::TextEffectFormatPtr* TextEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextEffect"), DISPID(120));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::TextEffectFormat**)TextEffect /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::TextEffectFormatPtr __fastcall
ShapeRangeDispT<T>::get_TextEffect(void)
{
  Office_2k::TextEffectFormatPtr TextEffect;
  this->get_TextEffect((Office_2k::TextEffectFormatPtr*)&TextEffect);
  return TextEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_TextFrame(Office_2k::TextFramePtr* TextFrame/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextFrame"), DISPID(121));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::TextFrame**)TextFrame /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::TextFramePtr __fastcall
ShapeRangeDispT<T>::get_TextFrame(void)
{
  Office_2k::TextFramePtr TextFrame;
  this->get_TextFrame((Office_2k::TextFramePtr*)&TextFrame);
  return TextFrame;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_ThreeD(Office_2k::ThreeDFormatPtr* ThreeD/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ThreeD"), DISPID(122));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::ThreeDFormat**)ThreeD /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::ThreeDFormatPtr __fastcall
ShapeRangeDispT<T>::get_ThreeD(void)
{
  Office_2k::ThreeDFormatPtr ThreeD;
  this->get_ThreeD((Office_2k::ThreeDFormatPtr*)&ThreeD);
  return ThreeD;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Top(float* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(123));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShapeRangeDispT<T>::get_Top(void)
{
  float Top;
  this->get_Top((float*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::set_Top(float Top/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(123));
  TAutoArgs<1> _args;
  _args[1] = Top /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Type(Office_2k::MsoShapeType* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(124));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoShapeType __fastcall
ShapeRangeDispT<T>::get_Type(void)
{
  Office_2k::MsoShapeType Type;
  this->get_Type((Office_2k::MsoShapeType*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_VerticalFlip(Office_2k::MsoTriState* VerticalFlip/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VerticalFlip"), DISPID(125));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)VerticalFlip /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
ShapeRangeDispT<T>::get_VerticalFlip(void)
{
  Office_2k::MsoTriState VerticalFlip;
  this->get_VerticalFlip((Office_2k::MsoTriState*)&VerticalFlip);
  return VerticalFlip;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Vertices(TVariant* Vertices/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Vertices"), DISPID(126));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Vertices /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
ShapeRangeDispT<T>::get_Vertices(void)
{
  TVariant Vertices;
  this->get_Vertices((TVariant*)&Vertices);
  return Vertices;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(127));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
ShapeRangeDispT<T>::get_Visible(void)
{
  Office_2k::MsoTriState Visible;
  this->get_Visible((Office_2k::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::set_Visible(Office_2k::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(127));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Width(float* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(128));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShapeRangeDispT<T>::get_Width(void)
{
  float Width;
  this->get_Width((float*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::set_Width(float Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(128));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_ZOrderPosition(int* ZOrderPosition/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZOrderPosition"), DISPID(129));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ZOrderPosition /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ShapeRangeDispT<T>::get_ZOrderPosition(void)
{
  int ZOrderPosition;
  this->get_ZOrderPosition((int*)&ZOrderPosition);
  return ZOrderPosition;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Script(Office_2k::ScriptPtr* Script/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Script"), DISPID(130));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::Script**)Script /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::ScriptPtr __fastcall
ShapeRangeDispT<T>::get_Script(void)
{
  Office_2k::ScriptPtr Script;
  this->get_Script((Office_2k::ScriptPtr*)&Script);
  return Script;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_AlternativeText(BSTR* AlternativeText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AlternativeText"), DISPID(131));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AlternativeText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ShapeRangeDispT<T>::get_AlternativeText(void)
{
  BSTR AlternativeText;
  this->get_AlternativeText((BSTR*)&AlternativeText);
  return AlternativeText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::set_AlternativeText(BSTR AlternativeText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AlternativeText"), DISPID(131));
  TAutoArgs<1> _args;
  _args[1] = AlternativeText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ShapeRangeDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ShapeRangeDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  Shapes
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C031E-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ShapesDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::get_Count(int* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ShapesDispT<T>::get_Count(void)
{
  int Count;
  this->get_Count((int*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::Item(TVariantInParam Index/*[in]*/, Office_2k::ShapePtr* Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::Shape**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_2k::ShapePtr __fastcall
ShapesDispT<T>::Item(TVariantInParam Index/*[in]*/)
{
  Office_2k::ShapePtr Item;
  this->Item(Index, (Office_2k::ShapePtr*)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
ShapesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddCallout(Office_2k::MsoCalloutType Type/*[in]*/, float Left/*[in]*/, 
                           float Top/*[in]*/, float Width/*[in]*/, float Height/*[in]*/, 
                           Office_2k::ShapePtr* Callout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddCallout"), DISPID(10));
  TAutoArgs<5> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  _args[2] = Left /*[VT_R4:0]*/;
  _args[3] = Top /*[VT_R4:0]*/;
  _args[4] = Width /*[VT_R4:0]*/;
  _args[5] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::Shape**)Callout /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_2k::ShapePtr __fastcall
ShapesDispT<T>::AddCallout(Office_2k::MsoCalloutType Type/*[in]*/, float Left/*[in]*/, 
                           float Top/*[in]*/, float Width/*[in]*/, float Height/*[in]*/)
{
  Office_2k::ShapePtr Callout;
  this->AddCallout(Type, Left, Top, Width, Height, (Office_2k::ShapePtr*)&Callout);
  return Callout;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddConnector(Office_2k::MsoConnectorType Type/*[in]*/, float BeginX/*[in]*/, 
                             float BeginY/*[in]*/, float EndX/*[in]*/, float EndY/*[in]*/, 
                             Office_2k::ShapePtr* Connector/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddConnector"), DISPID(11));
  TAutoArgs<5> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  _args[2] = BeginX /*[VT_R4:0]*/;
  _args[3] = BeginY /*[VT_R4:0]*/;
  _args[4] = EndX /*[VT_R4:0]*/;
  _args[5] = EndY /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::Shape**)Connector /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_2k::ShapePtr __fastcall
ShapesDispT<T>::AddConnector(Office_2k::MsoConnectorType Type/*[in]*/, float BeginX/*[in]*/, 
                             float BeginY/*[in]*/, float EndX/*[in]*/, float EndY/*[in]*/)
{
  Office_2k::ShapePtr Connector;
  this->AddConnector(Type, BeginX, BeginY, EndX, EndY, (Office_2k::ShapePtr*)&Connector);
  return Connector;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddCurve(TVariantInParam SafeArrayOfPoints/*[in]*/, 
                         Office_2k::ShapePtr* Curve/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddCurve"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = SafeArrayOfPoints /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::Shape**)Curve /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_2k::ShapePtr __fastcall
ShapesDispT<T>::AddCurve(TVariantInParam SafeArrayOfPoints/*[in]*/)
{
  Office_2k::ShapePtr Curve;
  this->AddCurve(SafeArrayOfPoints, (Office_2k::ShapePtr*)&Curve);
  return Curve;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddLabel(Office_2k::MsoTextOrientation Orientation/*[in]*/, float Left/*[in]*/, 
                         float Top/*[in]*/, float Width/*[in]*/, float Height/*[in]*/, 
                         Office_2k::ShapePtr* Label/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddLabel"), DISPID(13));
  TAutoArgs<5> _args;
  _args[1] = (int)Orientation /*[VT_USERDEFINED:0]*/;
  _args[2] = Left /*[VT_R4:0]*/;
  _args[3] = Top /*[VT_R4:0]*/;
  _args[4] = Width /*[VT_R4:0]*/;
  _args[5] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::Shape**)Label /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_2k::ShapePtr __fastcall
ShapesDispT<T>::AddLabel(Office_2k::MsoTextOrientation Orientation/*[in]*/, float Left/*[in]*/, 
                         float Top/*[in]*/, float Width/*[in]*/, float Height/*[in]*/)
{
  Office_2k::ShapePtr Label;
  this->AddLabel(Orientation, Left, Top, Width, Height, (Office_2k::ShapePtr*)&Label);
  return Label;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddLine(float BeginX/*[in]*/, float BeginY/*[in]*/, float EndX/*[in]*/, 
                        float EndY/*[in]*/, Office_2k::ShapePtr* Line/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddLine"), DISPID(14));
  TAutoArgs<4> _args;
  _args[1] = BeginX /*[VT_R4:0]*/;
  _args[2] = BeginY /*[VT_R4:0]*/;
  _args[3] = EndX /*[VT_R4:0]*/;
  _args[4] = EndY /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::Shape**)Line /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_2k::ShapePtr __fastcall
ShapesDispT<T>::AddLine(float BeginX/*[in]*/, float BeginY/*[in]*/, float EndX/*[in]*/, 
                        float EndY/*[in]*/)
{
  Office_2k::ShapePtr Line;
  this->AddLine(BeginX, BeginY, EndX, EndY, (Office_2k::ShapePtr*)&Line);
  return Line;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddPicture(BSTR FileName/*[in]*/, Office_2k::MsoTriState LinkToFile/*[in]*/, 
                           Office_2k::MsoTriState SaveWithDocument/*[in]*/, float Left/*[in]*/, 
                           float Top/*[in]*/, float Width/*[in,def,opt]*/, 
                           float Height/*[in,def,opt]*/, 
                           Office_2k::ShapePtr* Picture/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddPicture"), DISPID(15));
  TAutoArgs<7> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  _args[2] = (int)LinkToFile /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)SaveWithDocument /*[VT_USERDEFINED:0]*/;
  _args[4] = Left /*[VT_R4:0]*/;
  _args[5] = Top /*[VT_R4:0]*/;
  _args[6] = Width /*[VT_R4:0]*/;
  _args[7] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::Shape**)Picture /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_2k::ShapePtr __fastcall
ShapesDispT<T>::AddPicture(BSTR FileName/*[in]*/, Office_2k::MsoTriState LinkToFile/*[in]*/, 
                           Office_2k::MsoTriState SaveWithDocument/*[in]*/, float Left/*[in]*/, 
                           float Top/*[in]*/, float Width/*[in,def,opt]*/, 
                           float Height/*[in,def,opt]*/)
{
  Office_2k::ShapePtr Picture;
  this->AddPicture(FileName, LinkToFile, SaveWithDocument, Left, Top, Width, Height, (Office_2k::ShapePtr*)&Picture);
  return Picture;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddPolyline(TVariantInParam SafeArrayOfPoints/*[in]*/, 
                            Office_2k::ShapePtr* Polyline/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddPolyline"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = SafeArrayOfPoints /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::Shape**)Polyline /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_2k::ShapePtr __fastcall
ShapesDispT<T>::AddPolyline(TVariantInParam SafeArrayOfPoints/*[in]*/)
{
  Office_2k::ShapePtr Polyline;
  this->AddPolyline(SafeArrayOfPoints, (Office_2k::ShapePtr*)&Polyline);
  return Polyline;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddShape(Office_2k::MsoAutoShapeType Type/*[in]*/, float Left/*[in]*/, 
                         float Top/*[in]*/, float Width/*[in]*/, float Height/*[in]*/, 
                         Office_2k::ShapePtr* Shape/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddShape"), DISPID(17));
  TAutoArgs<5> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  _args[2] = Left /*[VT_R4:0]*/;
  _args[3] = Top /*[VT_R4:0]*/;
  _args[4] = Width /*[VT_R4:0]*/;
  _args[5] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::Shape**)Shape /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_2k::ShapePtr __fastcall
ShapesDispT<T>::AddShape(Office_2k::MsoAutoShapeType Type/*[in]*/, float Left/*[in]*/, 
                         float Top/*[in]*/, float Width/*[in]*/, float Height/*[in]*/)
{
  Office_2k::ShapePtr Shape;
  this->AddShape(Type, Left, Top, Width, Height, (Office_2k::ShapePtr*)&Shape);
  return Shape;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddTextEffect(Office_2k::MsoPresetTextEffect PresetTextEffect/*[in]*/, 
                              BSTR Text/*[in]*/, BSTR FontName/*[in]*/, float FontSize/*[in]*/, 
                              Office_2k::MsoTriState FontBold/*[in]*/, 
                              Office_2k::MsoTriState FontItalic/*[in]*/, float Left/*[in]*/, 
                              float Top/*[in]*/, Office_2k::ShapePtr* TextEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTextEffect"), DISPID(18));
  TAutoArgs<8> _args;
  _args[1] = (int)PresetTextEffect /*[VT_USERDEFINED:0]*/;
  _args[2] = Text /*[VT_BSTR:0]*/;
  _args[3] = FontName /*[VT_BSTR:0]*/;
  _args[4] = FontSize /*[VT_R4:0]*/;
  _args[5] = (int)FontBold /*[VT_USERDEFINED:0]*/;
  _args[6] = (int)FontItalic /*[VT_USERDEFINED:0]*/;
  _args[7] = Left /*[VT_R4:0]*/;
  _args[8] = Top /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::Shape**)TextEffect /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_2k::ShapePtr __fastcall
ShapesDispT<T>::AddTextEffect(Office_2k::MsoPresetTextEffect PresetTextEffect/*[in]*/, 
                              BSTR Text/*[in]*/, BSTR FontName/*[in]*/, float FontSize/*[in]*/, 
                              Office_2k::MsoTriState FontBold/*[in]*/, 
                              Office_2k::MsoTriState FontItalic/*[in]*/, float Left/*[in]*/, 
                              float Top/*[in]*/)
{
  Office_2k::ShapePtr TextEffect;
  this->AddTextEffect(PresetTextEffect, Text, FontName, FontSize, FontBold, FontItalic, Left, Top, (Office_2k::ShapePtr*)&TextEffect);
  return TextEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddTextbox(Office_2k::MsoTextOrientation Orientation/*[in]*/, float Left/*[in]*/, 
                           float Top/*[in]*/, float Width/*[in]*/, float Height/*[in]*/, 
                           Office_2k::ShapePtr* Textbox/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTextbox"), DISPID(19));
  TAutoArgs<5> _args;
  _args[1] = (int)Orientation /*[VT_USERDEFINED:0]*/;
  _args[2] = Left /*[VT_R4:0]*/;
  _args[3] = Top /*[VT_R4:0]*/;
  _args[4] = Width /*[VT_R4:0]*/;
  _args[5] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::Shape**)Textbox /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_2k::ShapePtr __fastcall
ShapesDispT<T>::AddTextbox(Office_2k::MsoTextOrientation Orientation/*[in]*/, float Left/*[in]*/, 
                           float Top/*[in]*/, float Width/*[in]*/, float Height/*[in]*/)
{
  Office_2k::ShapePtr Textbox;
  this->AddTextbox(Orientation, Left, Top, Width, Height, (Office_2k::ShapePtr*)&Textbox);
  return Textbox;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::BuildFreeform(Office_2k::MsoEditingType EditingType/*[in]*/, float X1/*[in]*/, 
                              float Y1/*[in]*/, 
                              Office_2k::FreeformBuilderPtr* FreeformBuilder/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuildFreeform"), DISPID(20));
  TAutoArgs<3> _args;
  _args[1] = (int)EditingType /*[VT_USERDEFINED:0]*/;
  _args[2] = X1 /*[VT_R4:0]*/;
  _args[3] = Y1 /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::FreeformBuilder**)FreeformBuilder /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_2k::FreeformBuilderPtr __fastcall
ShapesDispT<T>::BuildFreeform(Office_2k::MsoEditingType EditingType/*[in]*/, float X1/*[in]*/, 
                              float Y1/*[in]*/)
{
  Office_2k::FreeformBuilderPtr FreeformBuilder;
  this->BuildFreeform(EditingType, X1, Y1, (Office_2k::FreeformBuilderPtr*)&FreeformBuilder);
  return FreeformBuilder;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::Range(TVariantInParam Index/*[in]*/, Office_2k::ShapeRangePtr* Range/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Range"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::ShapeRange**)Range /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_2k::ShapeRangePtr __fastcall
ShapesDispT<T>::Range(TVariantInParam Index/*[in]*/)
{
  Office_2k::ShapeRangePtr Range;
  this->Range(Index, (Office_2k::ShapeRangePtr*)&Range);
  return Range;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::SelectAll()
{
  _TDispID _dispid(*this, OLETEXT("SelectAll"), DISPID(22));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::get_Background(Office_2k::ShapePtr* Background/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Background"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::Shape**)Background /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::ShapePtr __fastcall
ShapesDispT<T>::get_Background(void)
{
  Office_2k::ShapePtr Background;
  this->get_Background((Office_2k::ShapePtr*)&Background);
  return Background;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::get_Default(Office_2k::ShapePtr* Default/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Default"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::Shape**)Default /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::ShapePtr __fastcall
ShapesDispT<T>::get_Default(void)
{
  Office_2k::ShapePtr Default;
  this->get_Default((Office_2k::ShapePtr*)&Default);
  return Default;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ShapesDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ShapesDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  TextEffectFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C031F-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
TextEffectFormatDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::ToggleVerticalText()
{
  _TDispID _dispid(*this, OLETEXT("ToggleVerticalText"), DISPID(10));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_Alignment(Office_2k::MsoTextEffectAlignment* Alignment/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Alignment"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Alignment /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTextEffectAlignment __fastcall
TextEffectFormatDispT<T>::get_Alignment(void)
{
  Office_2k::MsoTextEffectAlignment Alignment;
  this->get_Alignment((Office_2k::MsoTextEffectAlignment*)&Alignment);
  return Alignment;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::set_Alignment(Office_2k::MsoTextEffectAlignment Alignment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Alignment"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = (int)Alignment /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_FontBold(Office_2k::MsoTriState* FontBold/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontBold"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)FontBold /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
TextEffectFormatDispT<T>::get_FontBold(void)
{
  Office_2k::MsoTriState FontBold;
  this->get_FontBold((Office_2k::MsoTriState*)&FontBold);
  return FontBold;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::set_FontBold(Office_2k::MsoTriState FontBold/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontBold"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = (int)FontBold /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_FontItalic(Office_2k::MsoTriState* FontItalic/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontItalic"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)FontItalic /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
TextEffectFormatDispT<T>::get_FontItalic(void)
{
  Office_2k::MsoTriState FontItalic;
  this->get_FontItalic((Office_2k::MsoTriState*)&FontItalic);
  return FontItalic;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::set_FontItalic(Office_2k::MsoTriState FontItalic/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontItalic"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = (int)FontItalic /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_FontName(BSTR* FontName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontName"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
TextEffectFormatDispT<T>::get_FontName(void)
{
  BSTR FontName;
  this->get_FontName((BSTR*)&FontName);
  return FontName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::set_FontName(BSTR FontName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontName"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = FontName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_FontSize(float* FontSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontSize"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontSize /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
TextEffectFormatDispT<T>::get_FontSize(void)
{
  float FontSize;
  this->get_FontSize((float*)&FontSize);
  return FontSize;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::set_FontSize(float FontSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontSize"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = FontSize /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_KernedPairs(Office_2k::MsoTriState* KernedPairs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KernedPairs"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)KernedPairs /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
TextEffectFormatDispT<T>::get_KernedPairs(void)
{
  Office_2k::MsoTriState KernedPairs;
  this->get_KernedPairs((Office_2k::MsoTriState*)&KernedPairs);
  return KernedPairs;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::set_KernedPairs(Office_2k::MsoTriState KernedPairs/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KernedPairs"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = (int)KernedPairs /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_NormalizedHeight(Office_2k::MsoTriState* NormalizedHeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NormalizedHeight"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)NormalizedHeight /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
TextEffectFormatDispT<T>::get_NormalizedHeight(void)
{
  Office_2k::MsoTriState NormalizedHeight;
  this->get_NormalizedHeight((Office_2k::MsoTriState*)&NormalizedHeight);
  return NormalizedHeight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::set_NormalizedHeight(Office_2k::MsoTriState NormalizedHeight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NormalizedHeight"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = (int)NormalizedHeight /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_PresetShape(Office_2k::MsoPresetTextEffectShape* PresetShape/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetShape"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PresetShape /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoPresetTextEffectShape __fastcall
TextEffectFormatDispT<T>::get_PresetShape(void)
{
  Office_2k::MsoPresetTextEffectShape PresetShape;
  this->get_PresetShape((Office_2k::MsoPresetTextEffectShape*)&PresetShape);
  return PresetShape;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::set_PresetShape(Office_2k::MsoPresetTextEffectShape PresetShape/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetShape"), DISPID(107));
  TAutoArgs<1> _args;
  _args[1] = (int)PresetShape /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_PresetTextEffect(Office_2k::MsoPresetTextEffect* Preset/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetTextEffect"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Preset /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoPresetTextEffect __fastcall
TextEffectFormatDispT<T>::get_PresetTextEffect(void)
{
  Office_2k::MsoPresetTextEffect Preset;
  this->get_PresetTextEffect((Office_2k::MsoPresetTextEffect*)&Preset);
  return Preset;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::set_PresetTextEffect(Office_2k::MsoPresetTextEffect Preset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetTextEffect"), DISPID(108));
  TAutoArgs<1> _args;
  _args[1] = (int)Preset /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_RotatedChars(Office_2k::MsoTriState* RotatedChars/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RotatedChars"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)RotatedChars /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
TextEffectFormatDispT<T>::get_RotatedChars(void)
{
  Office_2k::MsoTriState RotatedChars;
  this->get_RotatedChars((Office_2k::MsoTriState*)&RotatedChars);
  return RotatedChars;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::set_RotatedChars(Office_2k::MsoTriState RotatedChars/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RotatedChars"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = (int)RotatedChars /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_Text(BSTR* Text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Text /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
TextEffectFormatDispT<T>::get_Text(void)
{
  BSTR Text;
  this->get_Text((BSTR*)&Text);
  return Text;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::set_Text(BSTR Text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(110));
  TAutoArgs<1> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_Tracking(float* Tracking/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tracking"), DISPID(111));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Tracking /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
TextEffectFormatDispT<T>::get_Tracking(void)
{
  float Tracking;
  this->get_Tracking((float*)&Tracking);
  return Tracking;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::set_Tracking(float Tracking/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tracking"), DISPID(111));
  TAutoArgs<1> _args;
  _args[1] = Tracking /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
TextEffectFormatDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
TextEffectFormatDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  TextFrame
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0320-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
TextFrameDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::get_MarginBottom(float* MarginBottom/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarginBottom"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(MarginBottom /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
TextFrameDispT<T>::get_MarginBottom(void)
{
  float MarginBottom;
  this->get_MarginBottom((float*)&MarginBottom);
  return MarginBottom;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::set_MarginBottom(float MarginBottom/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarginBottom"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = MarginBottom /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::get_MarginLeft(float* MarginLeft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarginLeft"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(MarginLeft /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
TextFrameDispT<T>::get_MarginLeft(void)
{
  float MarginLeft;
  this->get_MarginLeft((float*)&MarginLeft);
  return MarginLeft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::set_MarginLeft(float MarginLeft/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarginLeft"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = MarginLeft /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::get_MarginRight(float* MarginRight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarginRight"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(MarginRight /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
TextFrameDispT<T>::get_MarginRight(void)
{
  float MarginRight;
  this->get_MarginRight((float*)&MarginRight);
  return MarginRight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::set_MarginRight(float MarginRight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarginRight"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = MarginRight /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::get_MarginTop(float* MarginTop/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarginTop"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(MarginTop /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
TextFrameDispT<T>::get_MarginTop(void)
{
  float MarginTop;
  this->get_MarginTop((float*)&MarginTop);
  return MarginTop;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::set_MarginTop(float MarginTop/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarginTop"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = MarginTop /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::get_Orientation(Office_2k::MsoTextOrientation* Orientation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Orientation"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Orientation /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTextOrientation __fastcall
TextFrameDispT<T>::get_Orientation(void)
{
  Office_2k::MsoTextOrientation Orientation;
  this->get_Orientation((Office_2k::MsoTextOrientation*)&Orientation);
  return Orientation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::set_Orientation(Office_2k::MsoTextOrientation Orientation/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Orientation"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = (int)Orientation /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
TextFrameDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
TextFrameDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  ThreeDFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0321-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ThreeDFormatDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::IncrementRotationX(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncrementRotationX"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::IncrementRotationY(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncrementRotationY"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::ResetRotation()
{
  _TDispID _dispid(*this, OLETEXT("ResetRotation"), DISPID(12));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::SetThreeDFormat(Office_2k::MsoPresetThreeDFormat PresetThreeDFormat/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetThreeDFormat"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = (int)PresetThreeDFormat /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::SetExtrusionDirection(Office_2k::MsoPresetExtrusionDirection PresetExtrusionDirection/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetExtrusionDirection"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = (int)PresetExtrusionDirection /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_Depth(float* Depth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Depth"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Depth /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ThreeDFormatDispT<T>::get_Depth(void)
{
  float Depth;
  this->get_Depth((float*)&Depth);
  return Depth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::set_Depth(float Depth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Depth"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = Depth /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_ExtrusionColor(Office_2k::ColorFormatPtr* ExtrusionColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExtrusionColor"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::ColorFormat**)ExtrusionColor /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::ColorFormatPtr __fastcall
ThreeDFormatDispT<T>::get_ExtrusionColor(void)
{
  Office_2k::ColorFormatPtr ExtrusionColor;
  this->get_ExtrusionColor((Office_2k::ColorFormatPtr*)&ExtrusionColor);
  return ExtrusionColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_ExtrusionColorType(Office_2k::MsoExtrusionColorType* ExtrusionColorType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExtrusionColorType"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ExtrusionColorType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoExtrusionColorType __fastcall
ThreeDFormatDispT<T>::get_ExtrusionColorType(void)
{
  Office_2k::MsoExtrusionColorType ExtrusionColorType;
  this->get_ExtrusionColorType((Office_2k::MsoExtrusionColorType*)&ExtrusionColorType);
  return ExtrusionColorType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::set_ExtrusionColorType(Office_2k::MsoExtrusionColorType ExtrusionColorType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExtrusionColorType"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = (int)ExtrusionColorType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_Perspective(Office_2k::MsoTriState* Perspective/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Perspective"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Perspective /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
ThreeDFormatDispT<T>::get_Perspective(void)
{
  Office_2k::MsoTriState Perspective;
  this->get_Perspective((Office_2k::MsoTriState*)&Perspective);
  return Perspective;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::set_Perspective(Office_2k::MsoTriState Perspective/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Perspective"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = (int)Perspective /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_PresetExtrusionDirection(Office_2k::MsoPresetExtrusionDirection* PresetExtrusionDirection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetExtrusionDirection"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PresetExtrusionDirection /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoPresetExtrusionDirection __fastcall
ThreeDFormatDispT<T>::get_PresetExtrusionDirection(void)
{
  Office_2k::MsoPresetExtrusionDirection PresetExtrusionDirection;
  this->get_PresetExtrusionDirection((Office_2k::MsoPresetExtrusionDirection*)&PresetExtrusionDirection);
  return PresetExtrusionDirection;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_PresetLightingDirection(Office_2k::MsoPresetLightingDirection* PresetLightingDirection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetLightingDirection"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PresetLightingDirection /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoPresetLightingDirection __fastcall
ThreeDFormatDispT<T>::get_PresetLightingDirection(void)
{
  Office_2k::MsoPresetLightingDirection PresetLightingDirection;
  this->get_PresetLightingDirection((Office_2k::MsoPresetLightingDirection*)&PresetLightingDirection);
  return PresetLightingDirection;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::set_PresetLightingDirection(Office_2k::MsoPresetLightingDirection PresetLightingDirection/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetLightingDirection"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = (int)PresetLightingDirection /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_PresetLightingSoftness(Office_2k::MsoPresetLightingSoftness* PresetLightingSoftness/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetLightingSoftness"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PresetLightingSoftness /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoPresetLightingSoftness __fastcall
ThreeDFormatDispT<T>::get_PresetLightingSoftness(void)
{
  Office_2k::MsoPresetLightingSoftness PresetLightingSoftness;
  this->get_PresetLightingSoftness((Office_2k::MsoPresetLightingSoftness*)&PresetLightingSoftness);
  return PresetLightingSoftness;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::set_PresetLightingSoftness(Office_2k::MsoPresetLightingSoftness PresetLightingSoftness/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetLightingSoftness"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = (int)PresetLightingSoftness /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_PresetMaterial(Office_2k::MsoPresetMaterial* PresetMaterial/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetMaterial"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PresetMaterial /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoPresetMaterial __fastcall
ThreeDFormatDispT<T>::get_PresetMaterial(void)
{
  Office_2k::MsoPresetMaterial PresetMaterial;
  this->get_PresetMaterial((Office_2k::MsoPresetMaterial*)&PresetMaterial);
  return PresetMaterial;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::set_PresetMaterial(Office_2k::MsoPresetMaterial PresetMaterial/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetMaterial"), DISPID(107));
  TAutoArgs<1> _args;
  _args[1] = (int)PresetMaterial /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_PresetThreeDFormat(Office_2k::MsoPresetThreeDFormat* PresetThreeDFormat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetThreeDFormat"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PresetThreeDFormat /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoPresetThreeDFormat __fastcall
ThreeDFormatDispT<T>::get_PresetThreeDFormat(void)
{
  Office_2k::MsoPresetThreeDFormat PresetThreeDFormat;
  this->get_PresetThreeDFormat((Office_2k::MsoPresetThreeDFormat*)&PresetThreeDFormat);
  return PresetThreeDFormat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_RotationX(float* RotationX/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RotationX"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RotationX /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ThreeDFormatDispT<T>::get_RotationX(void)
{
  float RotationX;
  this->get_RotationX((float*)&RotationX);
  return RotationX;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::set_RotationX(float RotationX/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RotationX"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = RotationX /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_RotationY(float* RotationY/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RotationY"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RotationY /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ThreeDFormatDispT<T>::get_RotationY(void)
{
  float RotationY;
  this->get_RotationY((float*)&RotationY);
  return RotationY;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::set_RotationY(float RotationY/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RotationY"), DISPID(110));
  TAutoArgs<1> _args;
  _args[1] = RotationY /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(111));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
ThreeDFormatDispT<T>::get_Visible(void)
{
  Office_2k::MsoTriState Visible;
  this->get_Visible((Office_2k::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::set_Visible(Office_2k::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(111));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ThreeDFormatDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ThreeDFormatDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  IMsoDispCagNotifySink
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0359-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMsoDispCagNotifySinkDispT<T>::InsertClip(LPUNKNOWN pClipMoniker/*[in]*/, 
                                          LPUNKNOWN pItemMoniker/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InsertClip"), DISPID(1));
  TAutoArgs<2> _args;
  _args[1] = pClipMoniker /*[VT_UNKNOWN:0]*/;
  _args[2] = pItemMoniker /*[VT_UNKNOWN:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IMsoDispCagNotifySinkDispT<T>::WindowIsClosing()
{
  _TDispID _dispid(*this, OLETEXT("WindowIsClosing"), DISPID(2));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  Balloon
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0324-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610809344]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
BalloonDispT<T>::get_Parent(void)
{
  LPDISPATCH ppidisp;
  this->get_Parent((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::get_Checkboxes(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Checkboxes"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
BalloonDispT<T>::get_Checkboxes(void)
{
  LPDISPATCH ppidisp;
  this->get_Checkboxes((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::get_Labels(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Labels"), DISPID(DISPID_UNKNOWN/*[1610809346]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
BalloonDispT<T>::get_Labels(void)
{
  LPDISPATCH ppidisp;
  this->get_Labels((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::set_BalloonType(Office_2k::MsoBalloonType pbty/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BalloonType"), DISPID(DISPID_UNKNOWN/*[1610809347]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)pbty /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::get_BalloonType(Office_2k::MsoBalloonType* pbty/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BalloonType"), DISPID(1610809347));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pbty /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoBalloonType __fastcall
BalloonDispT<T>::get_BalloonType(void)
{
  Office_2k::MsoBalloonType pbty;
  this->get_BalloonType((Office_2k::MsoBalloonType*)&pbty);
  return pbty;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::set_Icon(Office_2k::MsoIconType picn/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Icon"), DISPID(DISPID_UNKNOWN/*[1610809349]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)picn /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::get_Icon(Office_2k::MsoIconType* picn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Icon"), DISPID(1610809349));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)picn /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoIconType __fastcall
BalloonDispT<T>::get_Icon(void)
{
  Office_2k::MsoIconType picn;
  this->get_Icon((Office_2k::MsoIconType*)&picn);
  return picn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::set_Heading(BSTR pbstr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Heading"), DISPID(DISPID_UNKNOWN/*[1610809351]*/));
  TAutoArgs<1> _args;
  _args[1] = pbstr /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::get_Heading(BSTR* pbstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Heading"), DISPID(1610809351));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
BalloonDispT<T>::get_Heading(void)
{
  BSTR pbstr;
  this->get_Heading((BSTR*)&pbstr);
  return pbstr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::set_Text(BSTR pbstr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(DISPID_UNKNOWN/*[1610809353]*/));
  TAutoArgs<1> _args;
  _args[1] = pbstr /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::get_Text(BSTR* pbstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(1610809353));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
BalloonDispT<T>::get_Text(void)
{
  BSTR pbstr;
  this->get_Text((BSTR*)&pbstr);
  return pbstr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::set_Mode(Office_2k::MsoModeType pmd/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Mode"), DISPID(DISPID_UNKNOWN/*[1610809355]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)pmd /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::get_Mode(Office_2k::MsoModeType* pmd/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Mode"), DISPID(1610809355));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pmd /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoModeType __fastcall
BalloonDispT<T>::get_Mode(void)
{
  Office_2k::MsoModeType pmd;
  this->get_Mode((Office_2k::MsoModeType*)&pmd);
  return pmd;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::set_Animation(Office_2k::MsoAnimationType pfca/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Animation"), DISPID(DISPID_UNKNOWN/*[1610809357]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)pfca /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::get_Animation(Office_2k::MsoAnimationType* pfca/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Animation"), DISPID(1610809357));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pfca /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoAnimationType __fastcall
BalloonDispT<T>::get_Animation(void)
{
  Office_2k::MsoAnimationType pfca;
  this->get_Animation((Office_2k::MsoAnimationType*)&pfca);
  return pfca;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::set_Button(Office_2k::MsoButtonSetType psbs/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Button"), DISPID(DISPID_UNKNOWN/*[1610809359]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)psbs /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::get_Button(Office_2k::MsoButtonSetType* psbs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Button"), DISPID(1610809359));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)psbs /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoButtonSetType __fastcall
BalloonDispT<T>::get_Button(void)
{
  Office_2k::MsoButtonSetType psbs;
  this->get_Button((Office_2k::MsoButtonSetType*)&psbs);
  return psbs;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::set_Callback(BSTR pbstr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Callback"), DISPID(DISPID_UNKNOWN/*[1610809361]*/));
  TAutoArgs<1> _args;
  _args[1] = pbstr /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::get_Callback(BSTR* pbstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Callback"), DISPID(1610809361));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
BalloonDispT<T>::get_Callback(void)
{
  BSTR pbstr;
  this->get_Callback((BSTR*)&pbstr);
  return pbstr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::set_Private(long plPrivate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Private"), DISPID(DISPID_UNKNOWN/*[1610809363]*/));
  TAutoArgs<1> _args;
  _args[1] = plPrivate /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::get_Private(long* plPrivate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Private"), DISPID(1610809363));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plPrivate /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
BalloonDispT<T>::get_Private(void)
{
  long plPrivate;
  this->get_Private((long*)&plPrivate);
  return plPrivate;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::SetAvoidRectangle(int Left/*[in]*/, int Top/*[in]*/, int Right/*[in]*/, 
                                   int Bottom/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetAvoidRectangle"), DISPID(DISPID_UNKNOWN/*[1610809365]*/));
  TAutoArgs<4> _args;
  _args[1] = Left /*[VT_INT:0]*/;
  _args[2] = Top /*[VT_INT:0]*/;
  _args[3] = Right /*[VT_INT:0]*/;
  _args[4] = Bottom /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::get_Name(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(DISPID_UNKNOWN/*[1610809366]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
BalloonDispT<T>::get_Name(void)
{
  BSTR pbstrName;
  this->get_Name((BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::Show(Office_2k::MsoBalloonButtonType* pibtn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Show"), DISPID(DISPID_UNKNOWN/*[1610809367]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pibtn /*[VT_USERDEFINED:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_2k::MsoBalloonButtonType __fastcall
BalloonDispT<T>::Show(void)
{
  Office_2k::MsoBalloonButtonType pibtn;
  this->Show((Office_2k::MsoBalloonButtonType*)&pibtn);
  return pibtn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::Close()
{
  _TDispID _dispid(*this, OLETEXT("Close"), DISPID(DISPID_UNKNOWN/*[1610809368]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
BalloonDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
BalloonDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  BalloonCheckboxes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0326-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonCheckboxesDispT<T>::get_Name(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(DISPID_UNKNOWN/*[1610809344]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
BalloonCheckboxesDispT<T>::get_Name(void)
{
  BSTR pbstrName;
  this->get_Name((BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonCheckboxesDispT<T>::get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
BalloonCheckboxesDispT<T>::get_Parent(void)
{
  LPDISPATCH ppidisp;
  this->get_Parent((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonCheckboxesDispT<T>::get_Item(int Index/*[in]*/, LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
BalloonCheckboxesDispT<T>::get_Item(int Index/*[in]*/)
{
  LPDISPATCH ppidisp;
  this->get_Item(Index, (LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonCheckboxesDispT<T>::get_Count(int* pccbx/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610809347]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pccbx /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
BalloonCheckboxesDispT<T>::get_Count(void)
{
  int pccbx;
  this->get_Count((int*)&pccbx);
  return pccbx;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonCheckboxesDispT<T>::set_Count(int pccbx/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1610809347));
  TAutoArgs<1> _args;
  _args[1] = pccbx /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonCheckboxesDispT<T>::get__NewEnum(LPUNKNOWN* ppienum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppienum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
BalloonCheckboxesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppienum;
  this->get__NewEnum((LPUNKNOWN*)&ppienum);
  return ppienum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonCheckboxesDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
BalloonCheckboxesDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonCheckboxesDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
BalloonCheckboxesDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  BalloonCheckbox
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0328-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonCheckboxDispT<T>::get_Item(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
BalloonCheckboxDispT<T>::get_Item(void)
{
  BSTR pbstrName;
  this->get_Item((BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonCheckboxDispT<T>::get_Name(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
BalloonCheckboxDispT<T>::get_Name(void)
{
  BSTR pbstrName;
  this->get_Name((BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonCheckboxDispT<T>::get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610809346]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
BalloonCheckboxDispT<T>::get_Parent(void)
{
  LPDISPATCH ppidisp;
  this->get_Parent((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonCheckboxDispT<T>::set_Checked(TOLEBOOL pvarfChecked/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Checked"), DISPID(DISPID_UNKNOWN/*[1610809347]*/));
  TAutoArgs<1> _args;
  _args[1] = pvarfChecked /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonCheckboxDispT<T>::get_Checked(TOLEBOOL* pvarfChecked/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Checked"), DISPID(1610809347));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfChecked /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
BalloonCheckboxDispT<T>::get_Checked(void)
{
  TOLEBOOL pvarfChecked;
  this->get_Checked((TOLEBOOL*)&pvarfChecked);
  return pvarfChecked;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonCheckboxDispT<T>::set_Text(BSTR pbstr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(DISPID_UNKNOWN/*[1610809349]*/));
  TAutoArgs<1> _args;
  _args[1] = pbstr /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonCheckboxDispT<T>::get_Text(BSTR* pbstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(1610809349));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
BalloonCheckboxDispT<T>::get_Text(void)
{
  BSTR pbstr;
  this->get_Text((BSTR*)&pbstr);
  return pbstr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonCheckboxDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
BalloonCheckboxDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonCheckboxDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
BalloonCheckboxDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  BalloonLabels
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C032E-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonLabelsDispT<T>::get_Name(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(DISPID_UNKNOWN/*[1610809344]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
BalloonLabelsDispT<T>::get_Name(void)
{
  BSTR pbstrName;
  this->get_Name((BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonLabelsDispT<T>::get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
BalloonLabelsDispT<T>::get_Parent(void)
{
  LPDISPATCH ppidisp;
  this->get_Parent((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonLabelsDispT<T>::get_Item(int Index/*[in]*/, LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
BalloonLabelsDispT<T>::get_Item(int Index/*[in]*/)
{
  LPDISPATCH ppidisp;
  this->get_Item(Index, (LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonLabelsDispT<T>::get_Count(int* pcwz/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610809347]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcwz /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
BalloonLabelsDispT<T>::get_Count(void)
{
  int pcwz;
  this->get_Count((int*)&pcwz);
  return pcwz;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonLabelsDispT<T>::set_Count(int pcwz/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1610809347));
  TAutoArgs<1> _args;
  _args[1] = pcwz /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonLabelsDispT<T>::get__NewEnum(LPUNKNOWN* ppienum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppienum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
BalloonLabelsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppienum;
  this->get__NewEnum((LPUNKNOWN*)&ppienum);
  return ppienum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonLabelsDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
BalloonLabelsDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonLabelsDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
BalloonLabelsDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  BalloonLabel
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0330-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonLabelDispT<T>::get_Item(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
BalloonLabelDispT<T>::get_Item(void)
{
  BSTR pbstrName;
  this->get_Item((BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonLabelDispT<T>::get_Name(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
BalloonLabelDispT<T>::get_Name(void)
{
  BSTR pbstrName;
  this->get_Name((BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonLabelDispT<T>::get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610809346]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
BalloonLabelDispT<T>::get_Parent(void)
{
  LPDISPATCH ppidisp;
  this->get_Parent((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonLabelDispT<T>::set_Text(BSTR pbstr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(DISPID_UNKNOWN/*[1610809347]*/));
  TAutoArgs<1> _args;
  _args[1] = pbstr /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonLabelDispT<T>::get_Text(BSTR* pbstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(1610809347));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
BalloonLabelDispT<T>::get_Text(void)
{
  BSTR pbstr;
  this->get_Text((BSTR*)&pbstr);
  return pbstr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonLabelDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
BalloonLabelDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonLabelDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
BalloonLabelDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  AnswerWizardFiles
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0361-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnswerWizardFilesDispT<T>::get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610809344]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
AnswerWizardFilesDispT<T>::get_Parent(void)
{
  LPDISPATCH ppidisp;
  this->get_Parent((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnswerWizardFilesDispT<T>::get_Item(int Index/*[in]*/, BSTR* pbstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(pbstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
AnswerWizardFilesDispT<T>::get_Item(int Index/*[in]*/)
{
  BSTR pbstr;
  this->get_Item(Index, (BSTR*)&pbstr);
  return pbstr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnswerWizardFilesDispT<T>::get_Count(int* pCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610809346]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pCount /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
AnswerWizardFilesDispT<T>::get_Count(void)
{
  int pCount;
  this->get_Count((int*)&pCount);
  return pCount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnswerWizardFilesDispT<T>::Add(BSTR FileName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(DISPID_UNKNOWN/*[1610809347]*/));
  TAutoArgs<1> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnswerWizardFilesDispT<T>::Delete(BSTR FileName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(DISPID_UNKNOWN/*[1610809348]*/));
  TAutoArgs<1> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnswerWizardFilesDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
AnswerWizardFilesDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnswerWizardFilesDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
AnswerWizardFilesDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  AnswerWizard
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0360-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnswerWizardDispT<T>::get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610809344]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
AnswerWizardDispT<T>::get_Parent(void)
{
  LPDISPATCH ppidisp;
  this->get_Parent((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnswerWizardDispT<T>::get_Files(Office_2k::AnswerWizardFilesPtr* Files/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Files"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::AnswerWizardFiles**)Files /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::AnswerWizardFilesPtr __fastcall
AnswerWizardDispT<T>::get_Files(void)
{
  Office_2k::AnswerWizardFilesPtr Files;
  this->get_Files((Office_2k::AnswerWizardFilesPtr*)&Files);
  return Files;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnswerWizardDispT<T>::ClearFileList()
{
  _TDispID _dispid(*this, OLETEXT("ClearFileList"), DISPID(DISPID_UNKNOWN/*[1610809346]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnswerWizardDispT<T>::ResetFileList()
{
  _TDispID _dispid(*this, OLETEXT("ResetFileList"), DISPID(DISPID_UNKNOWN/*[1610809347]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnswerWizardDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
AnswerWizardDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnswerWizardDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
AnswerWizardDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  Assistant
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0322-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610809344]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
AssistantDispT<T>::get_Parent(void)
{
  LPDISPATCH ppidisp;
  this->get_Parent((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::Move(int xLeft/*[in]*/, int yTop/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Move"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<2> _args;
  _args[1] = xLeft /*[VT_INT:0]*/;
  _args[2] = yTop /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::set_Top(int pyTop/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(DISPID_UNKNOWN/*[1610809346]*/));
  TAutoArgs<1> _args;
  _args[1] = pyTop /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_Top(int* pyTop/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1610809346));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pyTop /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
AssistantDispT<T>::get_Top(void)
{
  int pyTop;
  this->get_Top((int*)&pyTop);
  return pyTop;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::set_Left(int pxLeft/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(DISPID_UNKNOWN/*[1610809348]*/));
  TAutoArgs<1> _args;
  _args[1] = pxLeft /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_Left(int* pxLeft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1610809348));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pxLeft /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
AssistantDispT<T>::get_Left(void)
{
  int pxLeft;
  this->get_Left((int*)&pxLeft);
  return pxLeft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::Help()
{
  _TDispID _dispid(*this, OLETEXT("Help"), DISPID(DISPID_UNKNOWN/*[1610809350]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::StartWizard(TOLEBOOL On/*[in]*/, BSTR Callback/*[in]*/, long PrivateX/*[in]*/, 
                               TVariantInParam Animation/*[in,opt]*/, 
                               TVariantInParam CustomTeaser/*[in,opt]*/, 
                               TVariantInParam Top/*[in,opt]*/, TVariantInParam Left/*[in,opt]*/, 
                               TVariantInParam Bottom/*[in,opt]*/, TVariantInParam Right/*[in,opt]*/
                               , long* plWizID/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartWizard"), DISPID(DISPID_UNKNOWN/*[1610809351]*/));
  TAutoArgs<9> _args;
  _args[1] = On /*[VT_BOOL:0]*/;
  _args[2] = Callback /*[VT_BSTR:0]*/;
  _args[3] = PrivateX /*[VT_I4:0]*/;
  _args[4] = Animation /*[VT_VARIANT:0]*/;
  _args[5] = CustomTeaser /*[VT_VARIANT:0]*/;
  _args[6] = Top /*[VT_VARIANT:0]*/;
  _args[7] = Left /*[VT_VARIANT:0]*/;
  _args[8] = Bottom /*[VT_VARIANT:0]*/;
  _args[9] = Right /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(plWizID /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
AssistantDispT<T>::StartWizard(TOLEBOOL On/*[in]*/, BSTR Callback/*[in]*/, long PrivateX/*[in]*/, 
                               TVariantInParam Animation/*[in,opt]*/, 
                               TVariantInParam CustomTeaser/*[in,opt]*/, 
                               TVariantInParam Top/*[in,opt]*/, TVariantInParam Left/*[in,opt]*/, 
                               TVariantInParam Bottom/*[in,opt]*/, TVariantInParam Right/*[in,opt]*/)
{
  long plWizID;
  this->StartWizard(On, Callback, PrivateX, Animation, CustomTeaser, Top, Left, Bottom, Right, (long*)&plWizID);
  return plWizID;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::EndWizard(long WizardID/*[in]*/, TOLEBOOL varfSuccess/*[in]*/, 
                             TVariantInParam Animation/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndWizard"), DISPID(DISPID_UNKNOWN/*[1610809352]*/));
  TAutoArgs<3> _args;
  _args[1] = WizardID /*[VT_I4:0]*/;
  _args[2] = varfSuccess /*[VT_BOOL:0]*/;
  _args[3] = Animation /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::ActivateWizard(long WizardID/*[in]*/, Office_2k::MsoWizardActType act/*[in]*/, 
                                  TVariantInParam Animation/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActivateWizard"), DISPID(DISPID_UNKNOWN/*[1610809353]*/));
  TAutoArgs<3> _args;
  _args[1] = WizardID /*[VT_I4:0]*/;
  _args[2] = (int)act /*[VT_USERDEFINED:0]*/;
  _args[3] = Animation /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::ResetTips()
{
  _TDispID _dispid(*this, OLETEXT("ResetTips"), DISPID(DISPID_UNKNOWN/*[1610809354]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_NewBalloon(Office_2k::BalloonPtr* ppibal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NewBalloon"), DISPID(DISPID_UNKNOWN/*[1610809355]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::Balloon**)ppibal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::BalloonPtr __fastcall
AssistantDispT<T>::get_NewBalloon(void)
{
  Office_2k::BalloonPtr ppibal;
  this->get_NewBalloon((Office_2k::BalloonPtr*)&ppibal);
  return ppibal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_BalloonError(Office_2k::MsoBalloonErrorType* pbne/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BalloonError"), DISPID(DISPID_UNKNOWN/*[1610809356]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pbne /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoBalloonErrorType __fastcall
AssistantDispT<T>::get_BalloonError(void)
{
  Office_2k::MsoBalloonErrorType pbne;
  this->get_BalloonError((Office_2k::MsoBalloonErrorType*)&pbne);
  return pbne;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_Visible(TOLEBOOL* pvarfVisible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(DISPID_UNKNOWN/*[1610809357]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfVisible /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
AssistantDispT<T>::get_Visible(void)
{
  TOLEBOOL pvarfVisible;
  this->get_Visible((TOLEBOOL*)&pvarfVisible);
  return pvarfVisible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::set_Visible(TOLEBOOL pvarfVisible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1610809357));
  TAutoArgs<1> _args;
  _args[1] = pvarfVisible /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_Animation(Office_2k::MsoAnimationType* pfca/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Animation"), DISPID(DISPID_UNKNOWN/*[1610809359]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pfca /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoAnimationType __fastcall
AssistantDispT<T>::get_Animation(void)
{
  Office_2k::MsoAnimationType pfca;
  this->get_Animation((Office_2k::MsoAnimationType*)&pfca);
  return pfca;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::set_Animation(Office_2k::MsoAnimationType pfca/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Animation"), DISPID(1610809359));
  TAutoArgs<1> _args;
  _args[1] = (int)pfca /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_Reduced(TOLEBOOL* pvarfReduced/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Reduced"), DISPID(DISPID_UNKNOWN/*[1610809361]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfReduced /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
AssistantDispT<T>::get_Reduced(void)
{
  TOLEBOOL pvarfReduced;
  this->get_Reduced((TOLEBOOL*)&pvarfReduced);
  return pvarfReduced;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::set_Reduced(TOLEBOOL pvarfReduced/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Reduced"), DISPID(1610809361));
  TAutoArgs<1> _args;
  _args[1] = pvarfReduced /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::set_AssistWithHelp(TOLEBOOL pvarfAssistWithHelp/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AssistWithHelp"), DISPID(DISPID_UNKNOWN/*[1610809363]*/));
  TAutoArgs<1> _args;
  _args[1] = pvarfAssistWithHelp /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_AssistWithHelp(TOLEBOOL* pvarfAssistWithHelp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AssistWithHelp"), DISPID(1610809363));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfAssistWithHelp /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
AssistantDispT<T>::get_AssistWithHelp(void)
{
  TOLEBOOL pvarfAssistWithHelp;
  this->get_AssistWithHelp((TOLEBOOL*)&pvarfAssistWithHelp);
  return pvarfAssistWithHelp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::set_AssistWithWizards(TOLEBOOL pvarfAssistWithWizards/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AssistWithWizards"), DISPID(DISPID_UNKNOWN/*[1610809365]*/));
  TAutoArgs<1> _args;
  _args[1] = pvarfAssistWithWizards /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_AssistWithWizards(TOLEBOOL* pvarfAssistWithWizards/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AssistWithWizards"), DISPID(1610809365));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfAssistWithWizards /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
AssistantDispT<T>::get_AssistWithWizards(void)
{
  TOLEBOOL pvarfAssistWithWizards;
  this->get_AssistWithWizards((TOLEBOOL*)&pvarfAssistWithWizards);
  return pvarfAssistWithWizards;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::set_AssistWithAlerts(TOLEBOOL pvarfAssistWithAlerts/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AssistWithAlerts"), DISPID(DISPID_UNKNOWN/*[1610809367]*/));
  TAutoArgs<1> _args;
  _args[1] = pvarfAssistWithAlerts /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_AssistWithAlerts(TOLEBOOL* pvarfAssistWithAlerts/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AssistWithAlerts"), DISPID(1610809367));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfAssistWithAlerts /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
AssistantDispT<T>::get_AssistWithAlerts(void)
{
  TOLEBOOL pvarfAssistWithAlerts;
  this->get_AssistWithAlerts((TOLEBOOL*)&pvarfAssistWithAlerts);
  return pvarfAssistWithAlerts;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::set_MoveWhenInTheWay(TOLEBOOL pvarfMove/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MoveWhenInTheWay"), DISPID(DISPID_UNKNOWN/*[1610809369]*/));
  TAutoArgs<1> _args;
  _args[1] = pvarfMove /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_MoveWhenInTheWay(TOLEBOOL* pvarfMove/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MoveWhenInTheWay"), DISPID(1610809369));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfMove /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
AssistantDispT<T>::get_MoveWhenInTheWay(void)
{
  TOLEBOOL pvarfMove;
  this->get_MoveWhenInTheWay((TOLEBOOL*)&pvarfMove);
  return pvarfMove;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::set_Sounds(TOLEBOOL pvarfSounds/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Sounds"), DISPID(DISPID_UNKNOWN/*[1610809371]*/));
  TAutoArgs<1> _args;
  _args[1] = pvarfSounds /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_Sounds(TOLEBOOL* pvarfSounds/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Sounds"), DISPID(1610809371));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfSounds /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
AssistantDispT<T>::get_Sounds(void)
{
  TOLEBOOL pvarfSounds;
  this->get_Sounds((TOLEBOOL*)&pvarfSounds);
  return pvarfSounds;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::set_FeatureTips(TOLEBOOL pvarfFeatures/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FeatureTips"), DISPID(DISPID_UNKNOWN/*[1610809373]*/));
  TAutoArgs<1> _args;
  _args[1] = pvarfFeatures /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_FeatureTips(TOLEBOOL* pvarfFeatures/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FeatureTips"), DISPID(1610809373));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfFeatures /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
AssistantDispT<T>::get_FeatureTips(void)
{
  TOLEBOOL pvarfFeatures;
  this->get_FeatureTips((TOLEBOOL*)&pvarfFeatures);
  return pvarfFeatures;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::set_MouseTips(TOLEBOOL pvarfMouse/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseTips"), DISPID(DISPID_UNKNOWN/*[1610809375]*/));
  TAutoArgs<1> _args;
  _args[1] = pvarfMouse /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_MouseTips(TOLEBOOL* pvarfMouse/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseTips"), DISPID(1610809375));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfMouse /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
AssistantDispT<T>::get_MouseTips(void)
{
  TOLEBOOL pvarfMouse;
  this->get_MouseTips((TOLEBOOL*)&pvarfMouse);
  return pvarfMouse;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::set_KeyboardShortcutTips(TOLEBOOL pvarfKeyboardShortcuts/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardShortcutTips"), DISPID(DISPID_UNKNOWN/*[1610809377]*/));
  TAutoArgs<1> _args;
  _args[1] = pvarfKeyboardShortcuts /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_KeyboardShortcutTips(TOLEBOOL* pvarfKeyboardShortcuts/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardShortcutTips"), DISPID(1610809377));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfKeyboardShortcuts /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
AssistantDispT<T>::get_KeyboardShortcutTips(void)
{
  TOLEBOOL pvarfKeyboardShortcuts;
  this->get_KeyboardShortcutTips((TOLEBOOL*)&pvarfKeyboardShortcuts);
  return pvarfKeyboardShortcuts;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::set_HighPriorityTips(TOLEBOOL pvarfHighPriorityTips/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HighPriorityTips"), DISPID(DISPID_UNKNOWN/*[1610809379]*/));
  TAutoArgs<1> _args;
  _args[1] = pvarfHighPriorityTips /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_HighPriorityTips(TOLEBOOL* pvarfHighPriorityTips/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HighPriorityTips"), DISPID(1610809379));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfHighPriorityTips /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
AssistantDispT<T>::get_HighPriorityTips(void)
{
  TOLEBOOL pvarfHighPriorityTips;
  this->get_HighPriorityTips((TOLEBOOL*)&pvarfHighPriorityTips);
  return pvarfHighPriorityTips;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::set_TipOfDay(TOLEBOOL pvarfTipOfDay/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TipOfDay"), DISPID(DISPID_UNKNOWN/*[1610809381]*/));
  TAutoArgs<1> _args;
  _args[1] = pvarfTipOfDay /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_TipOfDay(TOLEBOOL* pvarfTipOfDay/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TipOfDay"), DISPID(1610809381));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfTipOfDay /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
AssistantDispT<T>::get_TipOfDay(void)
{
  TOLEBOOL pvarfTipOfDay;
  this->get_TipOfDay((TOLEBOOL*)&pvarfTipOfDay);
  return pvarfTipOfDay;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::set_GuessHelp(TOLEBOOL pvarfGuessHelp/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GuessHelp"), DISPID(DISPID_UNKNOWN/*[1610809383]*/));
  TAutoArgs<1> _args;
  _args[1] = pvarfGuessHelp /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_GuessHelp(TOLEBOOL* pvarfGuessHelp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GuessHelp"), DISPID(1610809383));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfGuessHelp /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
AssistantDispT<T>::get_GuessHelp(void)
{
  TOLEBOOL pvarfGuessHelp;
  this->get_GuessHelp((TOLEBOOL*)&pvarfGuessHelp);
  return pvarfGuessHelp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::set_SearchWhenProgramming(TOLEBOOL pvarfSearchInProgram/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SearchWhenProgramming"), DISPID(DISPID_UNKNOWN/*[1610809385]*/));
  TAutoArgs<1> _args;
  _args[1] = pvarfSearchInProgram /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_SearchWhenProgramming(TOLEBOOL* pvarfSearchInProgram/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SearchWhenProgramming"), DISPID(1610809385));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfSearchInProgram /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
AssistantDispT<T>::get_SearchWhenProgramming(void)
{
  TOLEBOOL pvarfSearchInProgram;
  this->get_SearchWhenProgramming((TOLEBOOL*)&pvarfSearchInProgram);
  return pvarfSearchInProgram;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_Item(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
AssistantDispT<T>::get_Item(void)
{
  BSTR pbstrName;
  this->get_Item((BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_FileName(BSTR* pbstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileName"), DISPID(DISPID_UNKNOWN/*[1610809388]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
AssistantDispT<T>::get_FileName(void)
{
  BSTR pbstr;
  this->get_FileName((BSTR*)&pbstr);
  return pbstr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::set_FileName(BSTR pbstr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileName"), DISPID(1610809388));
  TAutoArgs<1> _args;
  _args[1] = pbstr /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_Name(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(DISPID_UNKNOWN/*[1610809390]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
AssistantDispT<T>::get_Name(void)
{
  BSTR pbstrName;
  this->get_Name((BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_On(TOLEBOOL* pvarfOn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("On"), DISPID(DISPID_UNKNOWN/*[1610809391]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfOn /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
AssistantDispT<T>::get_On(void)
{
  TOLEBOOL pvarfOn;
  this->get_On((TOLEBOOL*)&pvarfOn);
  return pvarfOn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::set_On(TOLEBOOL pvarfOn/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("On"), DISPID(1610809391));
  TAutoArgs<1> _args;
  _args[1] = pvarfOn /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
AssistantDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
AssistantDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  IFoundFiles
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0338-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFoundFilesDispT<T>::get_Item(int Index/*[in]*/, BSTR* pbstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(pbstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IFoundFilesDispT<T>::get_Item(int Index/*[in]*/)
{
  BSTR pbstr;
  this->get_Item(Index, (BSTR*)&pbstr);
  return pbstr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFoundFilesDispT<T>::get_Count(int* pCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pCount /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IFoundFilesDispT<T>::get_Count(void)
{
  int pCount;
  this->get_Count((int*)&pCount);
  return pCount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFoundFilesDispT<T>::get__NewEnum(LPUNKNOWN* ppunkEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunkEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IFoundFilesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunkEnum;
  this->get__NewEnum((LPUNKNOWN*)&ppunkEnum);
  return ppunkEnum;
}

// *********************************************************************//
// DispIntf:  IFind
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0337-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::get_SearchPath(BSTR* pbstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SearchPath"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IFindDispT<T>::get_SearchPath(void)
{
  BSTR pbstr;
  this->get_SearchPath((BSTR*)&pbstr);
  return pbstr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::get_Name(BSTR* pbstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IFindDispT<T>::get_Name(void)
{
  BSTR pbstr;
  this->get_Name((BSTR*)&pbstr);
  return pbstr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::get_SubDir(TOLEBOOL* retval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SubDir"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(retval /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IFindDispT<T>::get_SubDir(void)
{
  TOLEBOOL retval;
  this->get_SubDir((TOLEBOOL*)&retval);
  return retval;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::get_Title(BSTR* pbstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Title"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IFindDispT<T>::get_Title(void)
{
  BSTR pbstr;
  this->get_Title((BSTR*)&pbstr);
  return pbstr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::get_Author(BSTR* pbstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Author"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IFindDispT<T>::get_Author(void)
{
  BSTR pbstr;
  this->get_Author((BSTR*)&pbstr);
  return pbstr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::get_Keywords(BSTR* pbstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Keywords"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IFindDispT<T>::get_Keywords(void)
{
  BSTR pbstr;
  this->get_Keywords((BSTR*)&pbstr);
  return pbstr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::get_Subject(BSTR* pbstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Subject"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IFindDispT<T>::get_Subject(void)
{
  BSTR pbstr;
  this->get_Subject((BSTR*)&pbstr);
  return pbstr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::get_Options(Office_2k::MsoFileFindOptions* penmOptions/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Options"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)penmOptions /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoFileFindOptions __fastcall
IFindDispT<T>::get_Options(void)
{
  Office_2k::MsoFileFindOptions penmOptions;
  this->get_Options((Office_2k::MsoFileFindOptions*)&penmOptions);
  return penmOptions;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::get_MatchCase(TOLEBOOL* retval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MatchCase"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(retval /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IFindDispT<T>::get_MatchCase(void)
{
  TOLEBOOL retval;
  this->get_MatchCase((TOLEBOOL*)&retval);
  return retval;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::get_Text(BSTR* pbstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IFindDispT<T>::get_Text(void)
{
  BSTR pbstr;
  this->get_Text((BSTR*)&pbstr);
  return pbstr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::get_PatternMatch(TOLEBOOL* retval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PatternMatch"), DISPID(DISPID_UNKNOWN/*[1610743818]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(retval /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IFindDispT<T>::get_PatternMatch(void)
{
  TOLEBOOL retval;
  this->get_PatternMatch((TOLEBOOL*)&retval);
  return retval;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::get_DateSavedFrom(TVariant* pdatSavedFrom/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DateSavedFrom"), DISPID(DISPID_UNKNOWN/*[1610743819]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdatSavedFrom /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IFindDispT<T>::get_DateSavedFrom(void)
{
  TVariant pdatSavedFrom;
  this->get_DateSavedFrom((TVariant*)&pdatSavedFrom);
  return pdatSavedFrom;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::get_DateSavedTo(TVariant* pdatSavedTo/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DateSavedTo"), DISPID(DISPID_UNKNOWN/*[1610743820]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdatSavedTo /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IFindDispT<T>::get_DateSavedTo(void)
{
  TVariant pdatSavedTo;
  this->get_DateSavedTo((TVariant*)&pdatSavedTo);
  return pdatSavedTo;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::get_SavedBy(BSTR* pbstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SavedBy"), DISPID(DISPID_UNKNOWN/*[1610743821]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IFindDispT<T>::get_SavedBy(void)
{
  BSTR pbstr;
  this->get_SavedBy((BSTR*)&pbstr);
  return pbstr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::get_DateCreatedFrom(TVariant* pdatCreatedFrom/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DateCreatedFrom"), DISPID(DISPID_UNKNOWN/*[1610743822]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdatCreatedFrom /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IFindDispT<T>::get_DateCreatedFrom(void)
{
  TVariant pdatCreatedFrom;
  this->get_DateCreatedFrom((TVariant*)&pdatCreatedFrom);
  return pdatCreatedFrom;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::get_DateCreatedTo(TVariant* pdatCreatedTo/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DateCreatedTo"), DISPID(DISPID_UNKNOWN/*[1610743823]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdatCreatedTo /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IFindDispT<T>::get_DateCreatedTo(void)
{
  TVariant pdatCreatedTo;
  this->get_DateCreatedTo((TVariant*)&pdatCreatedTo);
  return pdatCreatedTo;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::get_View(Office_2k::MsoFileFindView* penmView/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("View"), DISPID(DISPID_UNKNOWN/*[1610743824]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)penmView /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoFileFindView __fastcall
IFindDispT<T>::get_View(void)
{
  Office_2k::MsoFileFindView penmView;
  this->get_View((Office_2k::MsoFileFindView*)&penmView);
  return penmView;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::get_SortBy(Office_2k::MsoFileFindSortBy* penmSortBy/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SortBy"), DISPID(DISPID_UNKNOWN/*[1610743825]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)penmSortBy /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoFileFindSortBy __fastcall
IFindDispT<T>::get_SortBy(void)
{
  Office_2k::MsoFileFindSortBy penmSortBy;
  this->get_SortBy((Office_2k::MsoFileFindSortBy*)&penmSortBy);
  return penmSortBy;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::get_ListBy(Office_2k::MsoFileFindListBy* penmListBy/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListBy"), DISPID(DISPID_UNKNOWN/*[1610743826]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)penmListBy /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoFileFindListBy __fastcall
IFindDispT<T>::get_ListBy(void)
{
  Office_2k::MsoFileFindListBy penmListBy;
  this->get_ListBy((Office_2k::MsoFileFindListBy*)&penmListBy);
  return penmListBy;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::get_SelectedFile(int* pintSelectedFile/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectedFile"), DISPID(DISPID_UNKNOWN/*[1610743827]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pintSelectedFile /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IFindDispT<T>::get_SelectedFile(void)
{
  int pintSelectedFile;
  this->get_SelectedFile((int*)&pintSelectedFile);
  return pintSelectedFile;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::get_Results(Office_2k::IFoundFilesPtr* pdisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Results"), DISPID(DISPID_UNKNOWN/*[1610743828]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::IFoundFiles**)pdisp /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::IFoundFilesPtr __fastcall
IFindDispT<T>::get_Results(void)
{
  Office_2k::IFoundFilesPtr pdisp;
  this->get_Results((Office_2k::IFoundFilesPtr*)&pdisp);
  return pdisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::Show(int* pRows/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Show"), DISPID(DISPID_UNKNOWN/*[1610743829]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRows /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
IFindDispT<T>::Show(void)
{
  int pRows;
  this->Show((int*)&pRows);
  return pRows;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::set_SearchPath(BSTR pbstr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SearchPath"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pbstr /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::set_Name(BSTR pbstr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1610743809));
  TAutoArgs<1> _args;
  _args[1] = pbstr /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::set_SubDir(TOLEBOOL retval/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SubDir"), DISPID(1610743810));
  TAutoArgs<1> _args;
  _args[1] = retval /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::set_Title(BSTR pbstr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Title"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = pbstr /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::set_Author(BSTR pbstr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Author"), DISPID(1610743812));
  TAutoArgs<1> _args;
  _args[1] = pbstr /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::set_Keywords(BSTR pbstr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Keywords"), DISPID(1610743813));
  TAutoArgs<1> _args;
  _args[1] = pbstr /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::set_Subject(BSTR pbstr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Subject"), DISPID(1610743814));
  TAutoArgs<1> _args;
  _args[1] = pbstr /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::set_Options(Office_2k::MsoFileFindOptions penmOptions/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Options"), DISPID(1610743815));
  TAutoArgs<1> _args;
  _args[1] = (int)penmOptions /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::set_MatchCase(TOLEBOOL retval/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MatchCase"), DISPID(1610743816));
  TAutoArgs<1> _args;
  _args[1] = retval /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::set_Text(BSTR pbstr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(1610743817));
  TAutoArgs<1> _args;
  _args[1] = pbstr /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::set_PatternMatch(TOLEBOOL retval/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PatternMatch"), DISPID(1610743818));
  TAutoArgs<1> _args;
  _args[1] = retval /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::set_DateSavedFrom(TVariantInParam pdatSavedFrom/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DateSavedFrom"), DISPID(1610743819));
  TAutoArgs<1> _args;
  _args[1] = pdatSavedFrom /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::set_DateSavedTo(TVariantInParam pdatSavedTo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DateSavedTo"), DISPID(1610743820));
  TAutoArgs<1> _args;
  _args[1] = pdatSavedTo /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::set_SavedBy(BSTR pbstr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SavedBy"), DISPID(1610743821));
  TAutoArgs<1> _args;
  _args[1] = pbstr /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::set_DateCreatedFrom(TVariantInParam pdatCreatedFrom/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DateCreatedFrom"), DISPID(1610743822));
  TAutoArgs<1> _args;
  _args[1] = pdatCreatedFrom /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::set_DateCreatedTo(TVariantInParam pdatCreatedTo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DateCreatedTo"), DISPID(1610743823));
  TAutoArgs<1> _args;
  _args[1] = pdatCreatedTo /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::set_View(Office_2k::MsoFileFindView penmView/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("View"), DISPID(1610743824));
  TAutoArgs<1> _args;
  _args[1] = (int)penmView /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::set_SortBy(Office_2k::MsoFileFindSortBy penmSortBy/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SortBy"), DISPID(1610743825));
  TAutoArgs<1> _args;
  _args[1] = (int)penmSortBy /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::set_ListBy(Office_2k::MsoFileFindListBy penmListBy/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListBy"), DISPID(1610743826));
  TAutoArgs<1> _args;
  _args[1] = (int)penmListBy /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::set_SelectedFile(int pintSelectedFile/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectedFile"), DISPID(1610743827));
  TAutoArgs<1> _args;
  _args[1] = pintSelectedFile /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::Execute()
{
  _TDispID _dispid(*this, OLETEXT("Execute"), DISPID(DISPID_UNKNOWN/*[1610743850]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::Load(BSTR bstrQueryName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Load"), DISPID(DISPID_UNKNOWN/*[1610743851]*/));
  TAutoArgs<1> _args;
  _args[1] = bstrQueryName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::Save(BSTR bstrQueryName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Save"), DISPID(DISPID_UNKNOWN/*[1610743852]*/));
  TAutoArgs<1> _args;
  _args[1] = bstrQueryName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::Delete(BSTR bstrQueryName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(DISPID_UNKNOWN/*[1610743853]*/));
  TAutoArgs<1> _args;
  _args[1] = bstrQueryName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::get_FileType(long* plFileType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileType"), DISPID(DISPID_UNKNOWN/*[1610743854]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plFileType /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IFindDispT<T>::get_FileType(void)
{
  long plFileType;
  this->get_FileType((long*)&plFileType);
  return plFileType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::set_FileType(long plFileType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileType"), DISPID(1610743854));
  TAutoArgs<1> _args;
  _args[1] = plFileType /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  FoundFiles
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {000C0331-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FoundFilesDispT<T>::get_Item(int Index/*[in]*/, BSTR* pbstrFile/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(pbstrFile /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
FoundFilesDispT<T>::get_Item(int Index/*[in]*/)
{
  BSTR pbstrFile;
  this->get_Item(Index, (BSTR*)&pbstrFile);
  return pbstrFile;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FoundFilesDispT<T>::get_Count(long* pc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pc /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
FoundFilesDispT<T>::get_Count(void)
{
  long pc;
  this->get_Count((long*)&pc);
  return pc;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FoundFilesDispT<T>::get__NewEnum(LPUNKNOWN* ppunkEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunkEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
FoundFilesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunkEnum;
  this->get__NewEnum((LPUNKNOWN*)&ppunkEnum);
  return ppunkEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FoundFilesDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
FoundFilesDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FoundFilesDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
FoundFilesDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  PropertyTest
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0333-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertyTestDispT<T>::get_Name(BSTR* pbstrRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrRetVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PropertyTestDispT<T>::get_Name(void)
{
  BSTR pbstrRetVal;
  this->get_Name((BSTR*)&pbstrRetVal);
  return pbstrRetVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertyTestDispT<T>::get_Condition(Office_2k::MsoCondition* pConditionRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Condition"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pConditionRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoCondition __fastcall
PropertyTestDispT<T>::get_Condition(void)
{
  Office_2k::MsoCondition pConditionRetVal;
  this->get_Condition((Office_2k::MsoCondition*)&pConditionRetVal);
  return pConditionRetVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertyTestDispT<T>::get_Value(TVariant* pvargRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvargRetVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
PropertyTestDispT<T>::get_Value(void)
{
  TVariant pvargRetVal;
  this->get_Value((TVariant*)&pvargRetVal);
  return pvargRetVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertyTestDispT<T>::get_SecondValue(TVariant* pvargRetVal2/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SecondValue"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvargRetVal2 /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
PropertyTestDispT<T>::get_SecondValue(void)
{
  TVariant pvargRetVal2;
  this->get_SecondValue((TVariant*)&pvargRetVal2);
  return pvargRetVal2;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertyTestDispT<T>::get_Connector(Office_2k::MsoConnector* pConnector/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Connector"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pConnector /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoConnector __fastcall
PropertyTestDispT<T>::get_Connector(void)
{
  Office_2k::MsoConnector pConnector;
  this->get_Connector((Office_2k::MsoConnector*)&pConnector);
  return pConnector;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertyTestDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PropertyTestDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertyTestDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PropertyTestDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  PropertyTests
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {000C0334-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertyTestsDispT<T>::get_Item(int Index/*[in]*/, 
                                Office_2k::PropertyTestPtr* ppIDocProp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::PropertyTest**)ppIDocProp /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::PropertyTestPtr __fastcall
PropertyTestsDispT<T>::get_Item(int Index/*[in]*/)
{
  Office_2k::PropertyTestPtr ppIDocProp;
  this->get_Item(Index, (Office_2k::PropertyTestPtr*)&ppIDocProp);
  return ppIDocProp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertyTestsDispT<T>::get_Count(long* pc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pc /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PropertyTestsDispT<T>::get_Count(void)
{
  long pc;
  this->get_Count((long*)&pc);
  return pc;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertyTestsDispT<T>::Add(BSTR Name/*[in]*/, Office_2k::MsoCondition Condition/*[in]*/, 
                           TVariantInParam Value/*[in,opt]*/, 
                           TVariantInParam SecondValue/*[in,opt]*/, 
                           Office_2k::MsoConnector Connector/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(5));
  TAutoArgs<5> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  _args[2] = (int)Condition /*[VT_USERDEFINED:0]*/;
  _args[3] = Value /*[VT_VARIANT:0]*/;
  _args[4] = SecondValue /*[VT_VARIANT:0]*/;
  _args[5] = (int)Connector /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertyTestsDispT<T>::Remove(int Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Remove"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertyTestsDispT<T>::get__NewEnum(LPUNKNOWN* ppunkEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunkEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
PropertyTestsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunkEnum;
  this->get__NewEnum((LPUNKNOWN*)&ppunkEnum);
  return ppunkEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertyTestsDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PropertyTestsDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertyTestsDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PropertyTestsDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  FileSearch
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {000C0332-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileSearchDispT<T>::get_SearchSubFolders(TOLEBOOL* SearchSubFoldersRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SearchSubFolders"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SearchSubFoldersRetVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
FileSearchDispT<T>::get_SearchSubFolders(void)
{
  TOLEBOOL SearchSubFoldersRetVal;
  this->get_SearchSubFolders((TOLEBOOL*)&SearchSubFoldersRetVal);
  return SearchSubFoldersRetVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileSearchDispT<T>::set_SearchSubFolders(TOLEBOOL SearchSubFoldersRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SearchSubFolders"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = SearchSubFoldersRetVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileSearchDispT<T>::get_MatchTextExactly(TOLEBOOL* MatchTextRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MatchTextExactly"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(MatchTextRetVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
FileSearchDispT<T>::get_MatchTextExactly(void)
{
  TOLEBOOL MatchTextRetVal;
  this->get_MatchTextExactly((TOLEBOOL*)&MatchTextRetVal);
  return MatchTextRetVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileSearchDispT<T>::set_MatchTextExactly(TOLEBOOL MatchTextRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MatchTextExactly"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = MatchTextRetVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileSearchDispT<T>::get_MatchAllWordForms(TOLEBOOL* MatchAllWordFormsRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MatchAllWordForms"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(MatchAllWordFormsRetVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
FileSearchDispT<T>::get_MatchAllWordForms(void)
{
  TOLEBOOL MatchAllWordFormsRetVal;
  this->get_MatchAllWordForms((TOLEBOOL*)&MatchAllWordFormsRetVal);
  return MatchAllWordFormsRetVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileSearchDispT<T>::set_MatchAllWordForms(TOLEBOOL MatchAllWordFormsRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MatchAllWordForms"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = MatchAllWordFormsRetVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileSearchDispT<T>::get_FileName(BSTR* FileNameRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileName"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FileNameRetVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
FileSearchDispT<T>::get_FileName(void)
{
  BSTR FileNameRetVal;
  this->get_FileName((BSTR*)&FileNameRetVal);
  return FileNameRetVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileSearchDispT<T>::set_FileName(BSTR FileNameRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileName"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = FileNameRetVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileSearchDispT<T>::get_FileType(Office_2k::MsoFileType* FileTypeRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileType"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)FileTypeRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoFileType __fastcall
FileSearchDispT<T>::get_FileType(void)
{
  Office_2k::MsoFileType FileTypeRetVal;
  this->get_FileType((Office_2k::MsoFileType*)&FileTypeRetVal);
  return FileTypeRetVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileSearchDispT<T>::set_FileType(Office_2k::MsoFileType FileTypeRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileType"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = (int)FileTypeRetVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileSearchDispT<T>::get_LastModified(Office_2k::MsoLastModified* LastModifiedRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastModified"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)LastModifiedRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoLastModified __fastcall
FileSearchDispT<T>::get_LastModified(void)
{
  Office_2k::MsoLastModified LastModifiedRetVal;
  this->get_LastModified((Office_2k::MsoLastModified*)&LastModifiedRetVal);
  return LastModifiedRetVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileSearchDispT<T>::set_LastModified(Office_2k::MsoLastModified LastModifiedRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastModified"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = (int)LastModifiedRetVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileSearchDispT<T>::get_TextOrProperty(BSTR* TextOrProperty/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextOrProperty"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(TextOrProperty /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
FileSearchDispT<T>::get_TextOrProperty(void)
{
  BSTR TextOrProperty;
  this->get_TextOrProperty((BSTR*)&TextOrProperty);
  return TextOrProperty;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileSearchDispT<T>::set_TextOrProperty(BSTR TextOrProperty/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextOrProperty"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = TextOrProperty /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileSearchDispT<T>::get_LookIn(BSTR* LookInRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LookIn"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(LookInRetVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
FileSearchDispT<T>::get_LookIn(void)
{
  BSTR LookInRetVal;
  this->get_LookIn((BSTR*)&LookInRetVal);
  return LookInRetVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileSearchDispT<T>::set_LookIn(BSTR LookInRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LookIn"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = LookInRetVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileSearchDispT<T>::Execute(Office_2k::MsoSortBy SortBy/*[in,def,opt]*/, 
                            Office_2k::MsoSortOrder SortOrder/*[in,def,opt]*/, 
                            TOLEBOOL AlwaysAccurate/*[in,def,opt]*/, int* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Execute"), DISPID(9));
  TAutoArgs<3> _args;
  _args[1] = (int)SortBy /*[VT_USERDEFINED:0]*/;
  _args[2] = (int)SortOrder /*[VT_USERDEFINED:0]*/;
  _args[3] = AlwaysAccurate /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr(pRet /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
FileSearchDispT<T>::Execute(Office_2k::MsoSortBy SortBy/*[in,def,opt]*/, 
                            Office_2k::MsoSortOrder SortOrder/*[in,def,opt]*/, 
                            TOLEBOOL AlwaysAccurate/*[in,def,opt]*/)
{
  int pRet;
  this->Execute(SortBy, SortOrder, AlwaysAccurate, (int*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileSearchDispT<T>::NewSearch()
{
  _TDispID _dispid(*this, OLETEXT("NewSearch"), DISPID(10));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileSearchDispT<T>::get_FoundFiles(Office_2k::FoundFilesPtr* FoundFilesRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FoundFiles"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::FoundFiles**)FoundFilesRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::FoundFilesPtr __fastcall
FileSearchDispT<T>::get_FoundFiles(void)
{
  Office_2k::FoundFilesPtr FoundFilesRet;
  this->get_FoundFiles((Office_2k::FoundFilesPtr*)&FoundFilesRet);
  return FoundFilesRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileSearchDispT<T>::get_PropertyTests(Office_2k::PropertyTestsPtr* PropTestsRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PropertyTests"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::PropertyTests**)PropTestsRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::PropertyTestsPtr __fastcall
FileSearchDispT<T>::get_PropertyTests(void)
{
  Office_2k::PropertyTestsPtr PropTestsRet;
  this->get_PropertyTests((Office_2k::PropertyTestsPtr*)&PropTestsRet);
  return PropTestsRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileSearchDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
FileSearchDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileSearchDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
FileSearchDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  COMAddIn
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C033A-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
COMAddInDispT<T>::get_Description(BSTR* RetValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RetValue /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
COMAddInDispT<T>::get_Description(void)
{
  BSTR RetValue;
  this->get_Description((BSTR*)&RetValue);
  return RetValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
COMAddInDispT<T>::set_Description(BSTR RetValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = RetValue /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
COMAddInDispT<T>::get_ProgId(BSTR* RetValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ProgId"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RetValue /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
COMAddInDispT<T>::get_ProgId(void)
{
  BSTR RetValue;
  this->get_ProgId((BSTR*)&RetValue);
  return RetValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
COMAddInDispT<T>::get_Guid(BSTR* RetValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Guid"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RetValue /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
COMAddInDispT<T>::get_Guid(void)
{
  BSTR RetValue;
  this->get_Guid((BSTR*)&RetValue);
  return RetValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
COMAddInDispT<T>::get_Connect(TOLEBOOL* RetValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Connect"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RetValue /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
COMAddInDispT<T>::get_Connect(void)
{
  TOLEBOOL RetValue;
  this->get_Connect((TOLEBOOL*)&RetValue);
  return RetValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
COMAddInDispT<T>::set_Connect(TOLEBOOL RetValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Connect"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = RetValue /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
COMAddInDispT<T>::get_Object(LPDISPATCH* RetValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Object"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RetValue /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
COMAddInDispT<T>::get_Object(void)
{
  LPDISPATCH RetValue;
  this->get_Object((LPDISPATCH*)&RetValue);
  return RetValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
COMAddInDispT<T>::set_Object(LPDISPATCH RetValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Object"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = RetValue /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
COMAddInDispT<T>::get_Parent(LPDISPATCH* retval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(retval /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
COMAddInDispT<T>::get_Parent(void)
{
  LPDISPATCH retval;
  this->get_Parent((LPDISPATCH*)&retval);
  return retval;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
COMAddInDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
COMAddInDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
COMAddInDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
COMAddInDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  COMAddIns
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0339-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
COMAddInsDispT<T>::Item(TVariant* Index/*[in]*/, Office_2k::COMAddInPtr* RetValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::COMAddIn**)RetValue /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_2k::COMAddInPtr __fastcall
COMAddInsDispT<T>::Item(TVariant* Index/*[in]*/)
{
  Office_2k::COMAddInPtr RetValue;
  this->Item(Index, (Office_2k::COMAddInPtr*)&RetValue);
  return RetValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
COMAddInsDispT<T>::get_Count(long* RetValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RetValue /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
COMAddInsDispT<T>::get_Count(void)
{
  long RetValue;
  this->get_Count((long*)&RetValue);
  return RetValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
COMAddInsDispT<T>::get__NewEnum(LPUNKNOWN* RetValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RetValue /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
COMAddInsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN RetValue;
  this->get__NewEnum((LPUNKNOWN*)&RetValue);
  return RetValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
COMAddInsDispT<T>::_Update()
{
  _TDispID _dispid(*this, OLETEXT("Update"), DISPID(2));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
COMAddInsDispT<T>::get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
COMAddInsDispT<T>::get_Parent(void)
{
  LPDISPATCH ppidisp;
  this->get_Parent((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
COMAddInsDispT<T>::SetAppModal(TOLEBOOL varfModal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetAppModal"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = varfModal /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
COMAddInsDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
COMAddInsDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
COMAddInsDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
COMAddInsDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  LanguageSettings
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0353-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LanguageSettingsDispT<T>::get_LanguageID(Office_2k::MsoAppLanguageID Id/*[in]*/, 
                                         int* plid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LanguageID"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = (int)Id /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(plid /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
LanguageSettingsDispT<T>::get_LanguageID(Office_2k::MsoAppLanguageID Id/*[in]*/)
{
  int plid;
  this->get_LanguageID(Id, (int*)&plid);
  return plid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LanguageSettingsDispT<T>::get_LanguagePreferredForEditing(Office_2k::MsoLanguageID lid/*[in]*/, 
                                                          TOLEBOOL* pf/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LanguagePreferredForEditing"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = (int)lid /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(pf /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
LanguageSettingsDispT<T>::get_LanguagePreferredForEditing(Office_2k::MsoLanguageID lid/*[in]*/)
{
  TOLEBOOL pf;
  this->get_LanguagePreferredForEditing(lid, (TOLEBOOL*)&pf);
  return pf;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LanguageSettingsDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
LanguageSettingsDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LanguageSettingsDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
LanguageSettingsDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  ICommandBarsEvents
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {55F88892-7708-11D1-ACEB-006008961DA5}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
ICommandBarsEventsDispT<T>::OnUpdate()
{
  _TDispID _dispid(*this, OLETEXT("OnUpdate"), DISPID(1));
  OleProcedure(_dispid);
}

// *********************************************************************//
// DispIntf:  _CommandBarsEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000C0352-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
_CommandBarsEventsDispT<T>::OnUpdate()
{
  _TDispID _dispid(/* OnUpdate */ DISPID(1));
  OleProcedure(_dispid);
}

// *********************************************************************//
// DispIntf:  ICommandBarComboBoxEvents
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {55F88896-7708-11D1-ACEB-006008961DA5}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
ICommandBarComboBoxEventsDispT<T>::Change(Office_2k::CommandBarComboBoxPtr Ctrl/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Change"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Office_2k::CommandBarComboBox*)Ctrl /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  _CommandBarComboBoxEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000C0354-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
_CommandBarComboBoxEventsDispT<T>::Change(Office_2k::CommandBarComboBoxPtr Ctrl/*[in]*/)
{
  _TDispID _dispid(/* Change */ DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Office_2k::CommandBarComboBox*)Ctrl /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ICommandBarButtonEvents
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {55F88890-7708-11D1-ACEB-006008961DA5}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
ICommandBarButtonEventsDispT<T>::_Click(Office_2k::CommandBarButtonPtr Ctrl/*[in]*/, 
                                        TOLEBOOL* CancelDefault/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("Click"), DISPID(1));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Office_2k::CommandBarButton*)Ctrl /*[VT_USERDEFINED:1]*/;
  _args[2] = CancelDefault /*[VT_BOOL:1]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  _CommandBarButtonEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000C0351-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
_CommandBarButtonEventsDispT<T>::_Click(Office_2k::CommandBarButtonPtr Ctrl/*[in]*/, 
                                        TOLEBOOL* CancelDefault/*[in,out]*/)
{
  _TDispID _dispid(/* Click */ DISPID(1));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Office_2k::CommandBarButton*)Ctrl /*[VT_USERDEFINED:1]*/;
  _args[2] = CancelDefault /*[VT_BOOL:1]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  WebPageFont
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0913-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebPageFontDispT<T>::get_ProportionalFont(BSTR* pstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ProportionalFont"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
WebPageFontDispT<T>::get_ProportionalFont(void)
{
  BSTR pstr;
  this->get_ProportionalFont((BSTR*)&pstr);
  return pstr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebPageFontDispT<T>::set_ProportionalFont(BSTR pstr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ProportionalFont"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = pstr /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebPageFontDispT<T>::get_ProportionalFontSize(float* pf/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ProportionalFontSize"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pf /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
WebPageFontDispT<T>::get_ProportionalFontSize(void)
{
  float pf;
  this->get_ProportionalFontSize((float*)&pf);
  return pf;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebPageFontDispT<T>::set_ProportionalFontSize(float pf/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ProportionalFontSize"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = pf /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebPageFontDispT<T>::get_FixedWidthFont(BSTR* pstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FixedWidthFont"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
WebPageFontDispT<T>::get_FixedWidthFont(void)
{
  BSTR pstr;
  this->get_FixedWidthFont((BSTR*)&pstr);
  return pstr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebPageFontDispT<T>::set_FixedWidthFont(BSTR pstr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FixedWidthFont"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = pstr /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebPageFontDispT<T>::get_FixedWidthFontSize(float* pf/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FixedWidthFontSize"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pf /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
WebPageFontDispT<T>::get_FixedWidthFontSize(void)
{
  float pf;
  this->get_FixedWidthFontSize((float*)&pf);
  return pf;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebPageFontDispT<T>::set_FixedWidthFontSize(float pf/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FixedWidthFontSize"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = pf /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebPageFontDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
WebPageFontDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebPageFontDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
WebPageFontDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  WebPageFonts
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0914-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebPageFontsDispT<T>::get_Count(int* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
WebPageFontsDispT<T>::get_Count(void)
{
  int Count;
  this->get_Count((int*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebPageFontsDispT<T>::get_Item(Office_2k::MsoCharacterSet Index/*[in]*/, 
                               Office_2k::WebPageFontPtr* Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = (int)Index /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::WebPageFont**)Item /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::WebPageFontPtr __fastcall
WebPageFontsDispT<T>::get_Item(Office_2k::MsoCharacterSet Index/*[in]*/)
{
  Office_2k::WebPageFontPtr Item;
  this->get_Item(Index, (Office_2k::WebPageFontPtr*)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebPageFontsDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
WebPageFontsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebPageFontsDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
WebPageFontsDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebPageFontsDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
WebPageFontsDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  HTMLProjectItem
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0358-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HTMLProjectItemDispT<T>::get_Name(BSTR* RetValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RetValue /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
HTMLProjectItemDispT<T>::get_Name(void)
{
  BSTR RetValue;
  this->get_Name((BSTR*)&RetValue);
  return RetValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HTMLProjectItemDispT<T>::get_IsOpen(TOLEBOOL* RetValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsOpen"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RetValue /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
HTMLProjectItemDispT<T>::get_IsOpen(void)
{
  TOLEBOOL RetValue;
  this->get_IsOpen((TOLEBOOL*)&RetValue);
  return RetValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HTMLProjectItemDispT<T>::LoadFromFile(BSTR FileName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LoadFromFile"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HTMLProjectItemDispT<T>::Open(Office_2k::MsoHTMLProjectOpen OpenKind/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Open"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = (int)OpenKind /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HTMLProjectItemDispT<T>::SaveCopyAs(BSTR FileName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SaveCopyAs"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HTMLProjectItemDispT<T>::get_Text(BSTR* Text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Text /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
HTMLProjectItemDispT<T>::get_Text(void)
{
  BSTR Text;
  this->get_Text((BSTR*)&Text);
  return Text;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HTMLProjectItemDispT<T>::set_Text(BSTR Text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HTMLProjectItemDispT<T>::get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
HTMLProjectItemDispT<T>::get_Parent(void)
{
  LPDISPATCH ppidisp;
  this->get_Parent((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HTMLProjectItemDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
HTMLProjectItemDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HTMLProjectItemDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
HTMLProjectItemDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  HTMLProjectItems
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0357-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HTMLProjectItemsDispT<T>::Item(TVariant* Index/*[in]*/, 
                               Office_2k::HTMLProjectItemPtr* RetValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::HTMLProjectItem**)RetValue /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_2k::HTMLProjectItemPtr __fastcall
HTMLProjectItemsDispT<T>::Item(TVariant* Index/*[in]*/)
{
  Office_2k::HTMLProjectItemPtr RetValue;
  this->Item(Index, (Office_2k::HTMLProjectItemPtr*)&RetValue);
  return RetValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HTMLProjectItemsDispT<T>::get_Count(long* RetValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RetValue /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
HTMLProjectItemsDispT<T>::get_Count(void)
{
  long RetValue;
  this->get_Count((long*)&RetValue);
  return RetValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HTMLProjectItemsDispT<T>::get__NewEnum(LPUNKNOWN* RetValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RetValue /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
HTMLProjectItemsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN RetValue;
  this->get__NewEnum((LPUNKNOWN*)&RetValue);
  return RetValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HTMLProjectItemsDispT<T>::get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
HTMLProjectItemsDispT<T>::get_Parent(void)
{
  LPDISPATCH ppidisp;
  this->get_Parent((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HTMLProjectItemsDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
HTMLProjectItemsDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HTMLProjectItemsDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
HTMLProjectItemsDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  HTMLProject
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0356-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HTMLProjectDispT<T>::get_State(Office_2k::MsoHTMLProjectState* State/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)State /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoHTMLProjectState __fastcall
HTMLProjectDispT<T>::get_State(void)
{
  Office_2k::MsoHTMLProjectState State;
  this->get_State((Office_2k::MsoHTMLProjectState*)&State);
  return State;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HTMLProjectDispT<T>::RefreshProject(TOLEBOOL Refresh/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("RefreshProject"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Refresh /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HTMLProjectDispT<T>::RefreshDocument(TOLEBOOL Refresh/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("RefreshDocument"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Refresh /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HTMLProjectDispT<T>::get_HTMLProjectItems(Office_2k::HTMLProjectItemsPtr* HTMLProjectItems/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLProjectItems"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::HTMLProjectItems**)HTMLProjectItems /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::HTMLProjectItemsPtr __fastcall
HTMLProjectDispT<T>::get_HTMLProjectItems(void)
{
  Office_2k::HTMLProjectItemsPtr HTMLProjectItems;
  this->get_HTMLProjectItems((Office_2k::HTMLProjectItemsPtr*)&HTMLProjectItems);
  return HTMLProjectItems;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HTMLProjectDispT<T>::get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
HTMLProjectDispT<T>::get_Parent(void)
{
  LPDISPATCH ppidisp;
  this->get_Parent((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HTMLProjectDispT<T>::Open(Office_2k::MsoHTMLProjectOpen OpenKind/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Open"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = (int)OpenKind /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HTMLProjectDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
HTMLProjectDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HTMLProjectDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
HTMLProjectDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  MsoDebugOptions
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C035A-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
MsoDebugOptionsDispT<T>::get_FeatureReports(int* puintFeatureReports/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FeatureReports"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(puintFeatureReports /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
MsoDebugOptionsDispT<T>::get_FeatureReports(void)
{
  int puintFeatureReports;
  this->get_FeatureReports((int*)&puintFeatureReports);
  return puintFeatureReports;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
MsoDebugOptionsDispT<T>::set_FeatureReports(int puintFeatureReports/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FeatureReports"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = puintFeatureReports /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
MsoDebugOptionsDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
MsoDebugOptionsDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
MsoDebugOptionsDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
MsoDebugOptionsDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CommandBars
// Interface: TCOM_CommandBars
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CommandBars, _CommandBars, &CLSID_CommandBars, &IID__CommandBars> CoCommandBars;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CommandBarComboBox
// Interface: TCOM_CommandBarComboBox
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CommandBarComboBox, _CommandBarComboBox, &CLSID_CommandBarComboBox, &IID__CommandBarComboBox> CoCommandBarComboBox;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CommandBarButton
// Interface: TCOM_CommandBarButton
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CommandBarButton, _CommandBarButton, &CLSID_CommandBarButton, &IID__CommandBarButton> CoCommandBarButton;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


};     // namespace Office_2k

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Office_2k;
#endif

#pragma option pop

#endif // __Office_2K_h__
