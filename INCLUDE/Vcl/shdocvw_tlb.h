// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.0.1.2  $
// File generated on 1/24/2000 10:19:59 AM from Type Library described below.

// ************************************************************************ //
// Type Lib: \winnt\system32\shdocvw.dll (1)
// IID\LCID: {EAB22AC0-30C1-11CF-A7EB-0000C05BAE0B}\0
// Helpfile: 
// DepndLst: 
//   (1) v2.0 stdole, (D:\WINNT\System32\stdole2.tlb)
//   (2) v4.0 StdVCL, (D:\tlbgen\rampage\typelib\typelibraries\testing\stdvcl40.tlb)
// ************************************************************************ //
#ifndef   __SHDocVw_TLB_h__
#define   __SHDocVw_TLB_h__

#pragma option push -b -w-inl

#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0500)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Shdocvw_tlb
{

// *********************************************************************//
// HelpString: Microsoft Internet Controls
// Version:    1.1
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_SHDocVw;
extern __declspec (package) const GUID IID_IWebBrowser;
extern __declspec (package) const GUID DIID_DWebBrowserEvents;
extern __declspec (package) const GUID GUID_CommandStateChangeConstants;
extern __declspec (package) const GUID IID_IWebBrowserApp;
extern __declspec (package) const GUID IID_IWebBrowser2;
extern __declspec (package) const GUID GUID_OLECMDID;
extern __declspec (package) const GUID GUID_OLECMDF;
extern __declspec (package) const GUID GUID_OLECMDEXECOPT;
extern __declspec (package) const GUID GUID_tagREADYSTATE;
extern __declspec (package) const GUID DIID_DWebBrowserEvents2;
extern __declspec (package) const GUID CLSID_CppWebBrowser_V1;
extern __declspec (package) const GUID CLSID_CppWebBrowser;
extern __declspec (package) const GUID CLSID_CppInternetExplorer;
extern __declspec (package) const GUID CLSID_CppShellBrowserWindow;
extern __declspec (package) const GUID GUID_ShellWindowTypeConstants;
extern __declspec (package) const GUID GUID_ShellWindowFindWindowOptions;
extern __declspec (package) const GUID DIID_DShellWindowsEvents;
extern __declspec (package) const GUID IID_IShellWindows;
extern __declspec (package) const GUID CLSID_CppShellWindows;
extern __declspec (package) const GUID IID_IShellUIHelper;
extern __declspec (package) const GUID CLSID_CppShellUIHelper;
extern __declspec (package) const GUID DIID__ShellFavoritesNameSpaceEvents;
extern __declspec (package) const GUID IID_IShellFavoritesNameSpace;
extern __declspec (package) const GUID CLSID_ShellFavoritesNameSpace;
extern __declspec (package) const GUID IID_IScriptErrorList;
extern __declspec (package) const GUID CLSID_CScriptErrorList;
extern __declspec (package) const GUID IID_ISearch;
extern __declspec (package) const GUID IID_ISearches;
extern __declspec (package) const GUID IID_ISearchAssistantOC;
extern __declspec (package) const GUID IID_ISearchAssistantOC2;
extern __declspec (package) const GUID DIID__SearchAssistantEvents;
extern __declspec (package) const GUID CLSID_CppSearchAssistantOC;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
enum      CommandStateChangeConstants;
enum      OLECMDID;
enum      OLECMDF;
enum      OLECMDEXECOPT;
enum      tagREADYSTATE;
enum      ShellWindowTypeConstants;
enum      ShellWindowFindWindowOptions;
interface DECLSPEC_UUID("{EAB22AC1-30C1-11CF-A7EB-0000C05BAE0B}") IWebBrowser;
typedef TComInterface<IWebBrowser, &IID_IWebBrowser> IWebBrowserPtr;
interface DECLSPEC_UUID("{EAB22AC2-30C1-11CF-A7EB-0000C05BAE0B}") DWebBrowserEvents;
typedef TComInterface<DWebBrowserEvents, &DIID_DWebBrowserEvents> DWebBrowserEventsPtr;
interface DECLSPEC_UUID("{0002DF05-0000-0000-C000-000000000046}") IWebBrowserApp;
typedef TComInterface<IWebBrowserApp, &IID_IWebBrowserApp> IWebBrowserAppPtr;
interface DECLSPEC_UUID("{D30C1661-CDAF-11D0-8A3E-00C04FC9E26E}") IWebBrowser2;
typedef TComInterface<IWebBrowser2, &IID_IWebBrowser2> IWebBrowser2Ptr;
interface DECLSPEC_UUID("{34A715A0-6587-11D0-924A-0020AFC7AC4D}") DWebBrowserEvents2;
typedef TComInterface<DWebBrowserEvents2, &DIID_DWebBrowserEvents2> DWebBrowserEvents2Ptr;
interface DECLSPEC_UUID("{FE4106E0-399A-11D0-A48C-00A0C90A8F39}") DShellWindowsEvents;
typedef TComInterface<DShellWindowsEvents, &DIID_DShellWindowsEvents> DShellWindowsEventsPtr;
interface DECLSPEC_UUID("{85CB6900-4D95-11CF-960C-0080C7F4EE85}") IShellWindows;
typedef TComInterface<IShellWindows, &IID_IShellWindows> IShellWindowsPtr;
interface DECLSPEC_UUID("{729FE2F8-1EA8-11D1-8F85-00C04FC2FBE1}") IShellUIHelper;
typedef TComInterface<IShellUIHelper, &IID_IShellUIHelper> IShellUIHelperPtr;
interface DECLSPEC_UUID("{55136806-B2DE-11D1-B9F2-00A0C98BC547}") _ShellFavoritesNameSpaceEvents;
typedef TComInterface<_ShellFavoritesNameSpaceEvents, &DIID__ShellFavoritesNameSpaceEvents> _ShellFavoritesNameSpaceEventsPtr;
interface DECLSPEC_UUID("{55136804-B2DE-11D1-B9F2-00A0C98BC547}") IShellFavoritesNameSpace;
typedef TComInterface<IShellFavoritesNameSpace, &IID_IShellFavoritesNameSpace> IShellFavoritesNameSpacePtr;
interface DECLSPEC_UUID("{F3470F24-15FD-11D2-BB2E-00805FF7EFCA}") IScriptErrorList;
typedef TComInterface<IScriptErrorList, &IID_IScriptErrorList> IScriptErrorListPtr;
interface DECLSPEC_UUID("{BA9239A4-3DD5-11D2-BF8B-00C04FB93661}") ISearch;
typedef TComInterface<ISearch, &IID_ISearch> ISearchPtr;
interface DECLSPEC_UUID("{47C922A2-3DD5-11D2-BF8B-00C04FB93661}") ISearches;
typedef TComInterface<ISearches, &IID_ISearches> ISearchesPtr;
interface DECLSPEC_UUID("{72423E8F-8011-11D2-BE79-00A0C9A83DA1}") ISearchAssistantOC;
typedef TComInterface<ISearchAssistantOC, &IID_ISearchAssistantOC> ISearchAssistantOCPtr;
interface DECLSPEC_UUID("{72423E8F-8011-11D2-BE79-00A0C9A83DA2}") ISearchAssistantOC2;
typedef TComInterface<ISearchAssistantOC2, &IID_ISearchAssistantOC2> ISearchAssistantOC2Ptr;
interface DECLSPEC_UUID("{1611FDDA-445B-11D2-85DE-00C04FA35C89}") _SearchAssistantEvents;
typedef TComInterface<_SearchAssistantEvents, &DIID__SearchAssistantEvents> _SearchAssistantEventsPtr;

// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef IWebBrowser CppWebBrowser_V1;
typedef IWebBrowserPtr CppWebBrowser_V1Ptr;
typedef IWebBrowser2 CppWebBrowser;
typedef IWebBrowser2Ptr CppWebBrowserPtr;
typedef IWebBrowser2 CppInternetExplorer;
typedef IWebBrowser2Ptr CppInternetExplorerPtr;
typedef IWebBrowser2 CppShellBrowserWindow;
typedef IWebBrowser2Ptr CppShellBrowserWindowPtr;
typedef IShellWindows CppShellWindows;
typedef IShellWindowsPtr CppShellWindowsPtr;
typedef IShellUIHelper CppShellUIHelper;
typedef IShellUIHelperPtr CppShellUIHelperPtr;
typedef IShellFavoritesNameSpace ShellFavoritesNameSpace;
typedef IShellFavoritesNameSpacePtr ShellFavoritesNameSpacePtr;
typedef IScriptErrorList CScriptErrorList;
typedef IScriptErrorListPtr CScriptErrorListPtr;
typedef ISearchAssistantOC2 CppSearchAssistantOC;
typedef ISearchAssistantOC2Ptr CppSearchAssistantOCPtr;

#define LIBID_OF_CppWebBrowser_V1 (&LIBID_SHDocVw)
#define LIBID_OF_CppWebBrowser (&LIBID_SHDocVw)
#define LIBID_OF_CppInternetExplorer (&LIBID_SHDocVw)
#define LIBID_OF_CppShellBrowserWindow (&LIBID_SHDocVw)
#define LIBID_OF_CppShellWindows (&LIBID_SHDocVw)
#define LIBID_OF_CppShellUIHelper (&LIBID_SHDocVw)
#define LIBID_OF_ShellFavoritesNameSpace (&LIBID_SHDocVw)
#define LIBID_OF_CScriptErrorList (&LIBID_SHDocVw)
#define LIBID_OF_CppSearchAssistantOC (&LIBID_SHDocVw)

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
typedef enum CommandStateChangeConstants
{
  CSC_UPDATECOMMANDS = 0xFFFFFFFF, 
  CSC_NAVIGATEFORWARD = 1, 
  CSC_NAVIGATEBACK = 2
} CommandStateChangeConstants;

typedef enum OLECMDID
{
  OLECMDID_OPEN = 1, 
  OLECMDID_NEW = 2, 
  OLECMDID_SAVE = 3, 
  OLECMDID_SAVEAS = 4, 
  OLECMDID_SAVECOPYAS = 5, 
  OLECMDID_PRINT = 6, 
  OLECMDID_PRINTPREVIEW = 7, 
  OLECMDID_PAGESETUP = 8, 
  OLECMDID_SPELL = 9, 
  OLECMDID_PROPERTIES = 10, 
  OLECMDID_CUT = 11, 
  OLECMDID_COPY = 12, 
  OLECMDID_PASTE = 13, 
  OLECMDID_PASTESPECIAL = 14, 
  OLECMDID_UNDO = 15, 
  OLECMDID_REDO = 16, 
  OLECMDID_SELECTALL = 17, 
  OLECMDID_CLEARSELECTION = 18, 
  OLECMDID_ZOOM = 19, 
  OLECMDID_GETZOOMRANGE = 20, 
  OLECMDID_UPDATECOMMANDS = 21, 
  OLECMDID_REFRESH = 22, 
  OLECMDID_STOP = 23, 
  OLECMDID_HIDETOOLBARS = 24, 
  OLECMDID_SETPROGRESSMAX = 25, 
  OLECMDID_SETPROGRESSPOS = 26, 
  OLECMDID_SETPROGRESSTEXT = 27, 
  OLECMDID_SETTITLE = 28, 
  OLECMDID_SETDOWNLOADSTATE = 29, 
  OLECMDID_STOPDOWNLOAD = 30, 
  OLECMDID_ONTOOLBARACTIVATED = 31, 
  OLECMDID_FIND = 32, 
  OLECMDID_DELETE = 33, 
  OLECMDID_HTTPEQUIV = 34, 
  OLECMDID_HTTPEQUIV_DONE = 35, 
  OLECMDID_ENABLE_INTERACTION = 36, 
  OLECMDID_ONUNLOAD = 37, 
  OLECMDID_PROPERTYBAG2 = 38, 
  OLECMDID_PREREFRESH = 39, 
  OLECMDID_SHOWSCRIPTERROR = 40, 
  OLECMDID_SHOWMESSAGE = 41, 
  OLECMDID_SHOWFIND = 42, 
  OLECMDID_SHOWPAGESETUP = 43, 
  OLECMDID_SHOWPRINT = 44, 
  OLECMDID_CLOSE = 45, 
  OLECMDID_ALLOWUILESSSAVEAS = 46, 
  OLECMDID_DONTDOWNLOADCSS = 47
} OLECMDID;

typedef enum OLECMDF
{
  OLECMDF_SUPPORTED = 1, 
  OLECMDF_ENABLED = 2, 
  OLECMDF_LATCHED = 4, 
  OLECMDF_NINCHED = 8, 
  OLECMDF_INVISIBLE = 16, 
  OLECMDF_DEFHIDEONCTXTMENU = 32
} OLECMDF;

typedef enum OLECMDEXECOPT
{
  OLECMDEXECOPT_DODEFAULT = 0, 
  OLECMDEXECOPT_PROMPTUSER = 1, 
  OLECMDEXECOPT_DONTPROMPTUSER = 2, 
  OLECMDEXECOPT_SHOWHELP = 3
} OLECMDEXECOPT;

typedef enum tagREADYSTATE
{
  READYSTATE_UNINITIALIZED = 0, 
  READYSTATE_LOADING = 1, 
  READYSTATE_LOADED = 2, 
  READYSTATE_INTERACTIVE = 3, 
  READYSTATE_COMPLETE = 4
} tagREADYSTATE;

typedef enum ShellWindowTypeConstants
{
  SWC_EXPLORER = 0, 
  SWC_BROWSER = 1, 
  SWC_3RDPARTY = 2, 
  SWC_CALLBACK = 4
} ShellWindowTypeConstants;

typedef enum ShellWindowFindWindowOptions
{
  SWFO_NEEDDISPATCH = 1, 
  SWFO_INCLUDEPENDING = 2, 
  SWFO_COOKIEPASSED = 4
} ShellWindowFindWindowOptions;

// *********************************************************************//
// Interface: IWebBrowser
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EAB22AC1-30C1-11CF-A7EB-0000C05BAE0B}
// *********************************************************************//
interface IWebBrowser  : public IDispatch
{
public:
  // [100] Navigates to the previous item in the history list.
  virtual HRESULT STDMETHODCALLTYPE GoBack(void) = 0;
  // [101] Navigates to the next item in the history list.
  virtual HRESULT STDMETHODCALLTYPE GoForward(void) = 0;
  // [102] Go home/start page.
  virtual HRESULT STDMETHODCALLTYPE GoHome(void) = 0;
  // [103] Go Search Page.
  virtual HRESULT STDMETHODCALLTYPE GoSearch(void) = 0;
  // [104] Navigates to a URL or file.
  virtual HRESULT STDMETHODCALLTYPE Navigate(BSTR URL/*[in]*/, 
                                             TVariant* Flags/*[in,opt]*/= TNoParam(), 
                                             TVariant* TargetFrameName/*[in,opt]*/= TNoParam(), 
                                             TVariant* PostData/*[in,opt]*/= TNoParam(), 
                                             TVariant* Headers/*[in,opt]*/= TNoParam()) = 0;
  // [-550] Refresh the currently viewed page.
  virtual HRESULT STDMETHODCALLTYPE Refresh(void) = 0;
  // [105] Refresh the currently viewed page.
  virtual HRESULT STDMETHODCALLTYPE Refresh2(TVariant* Level/*[in,opt]*/= TNoParam()) = 0;
  // [106] Stops opening a file.
  virtual HRESULT STDMETHODCALLTYPE Stop(void) = 0;
  // [200] Returns the application automation object if accessible, this automation object otherwise..
  virtual HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* ppDisp/*[out,retval]*/) = 0;
  // [201] Returns the automation object of the container/parent if one exists or this automation object.
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* ppDisp/*[out,retval]*/) = 0;
  // [202] Returns the container/parent automation object, if any.
  virtual HRESULT STDMETHODCALLTYPE get_Container(LPDISPATCH* ppDisp/*[out,retval]*/) = 0;
  // [203] Returns the active Document automation object, if any.
  virtual HRESULT STDMETHODCALLTYPE get_Document(LPDISPATCH* ppDisp/*[out,retval]*/) = 0;
  // [204] Returns True if this is the top level object.
  virtual HRESULT STDMETHODCALLTYPE get_TopLevelContainer(TOLEBOOL* pBool/*[out,retval]*/) = 0;
  // [205] Returns the type of the contained document object.
  virtual HRESULT STDMETHODCALLTYPE get_Type(BSTR* Type/*[out,retval]*/) = 0;
  // [206] The horizontal position (pixels) of the frame window relative to the screen/container.
  virtual HRESULT STDMETHODCALLTYPE get_Left(long* pl/*[out,retval]*/) = 0;
  // [206] The horizontal position (pixels) of the frame window relative to the screen/container.
  virtual HRESULT STDMETHODCALLTYPE set_Left(long pl/*[in]*/) = 0;
  // [207] The vertical position (pixels) of the frame window relative to the screen/container.
  virtual HRESULT STDMETHODCALLTYPE get_Top(long* pl/*[out,retval]*/) = 0;
  // [207] The vertical position (pixels) of the frame window relative to the screen/container.
  virtual HRESULT STDMETHODCALLTYPE set_Top(long pl/*[in]*/) = 0;
  // [208] The horizontal dimension (pixels) of the frame window/object.
  virtual HRESULT STDMETHODCALLTYPE get_Width(long* pl/*[out,retval]*/) = 0;
  // [208] The horizontal dimension (pixels) of the frame window/object.
  virtual HRESULT STDMETHODCALLTYPE set_Width(long pl/*[in]*/) = 0;
  // [209] The vertical dimension (pixels) of the frame window/object.
  virtual HRESULT STDMETHODCALLTYPE get_Height(long* pl/*[out,retval]*/) = 0;
  // [209] The vertical dimension (pixels) of the frame window/object.
  virtual HRESULT STDMETHODCALLTYPE set_Height(long pl/*[in]*/) = 0;
  // [210] Gets the short (UI-friendly) name of the URL/file currently viewed.
  virtual HRESULT STDMETHODCALLTYPE get_LocationName(BSTR* LocationName/*[out,retval]*/) = 0;
  // [211] Gets the full URL/path currently viewed.
  virtual HRESULT STDMETHODCALLTYPE get_LocationURL(BSTR* LocationURL/*[out,retval]*/) = 0;
  // [212] Query to see if something is still in progress.
  virtual HRESULT STDMETHODCALLTYPE get_Busy(TOLEBOOL* pBool/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Application(void)
  {
    LPDISPATCH ppDisp;
    OLECHECK(this->get_Application((LPDISPATCH*)&ppDisp));
    return ppDisp;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH ppDisp;
    OLECHECK(this->get_Parent((LPDISPATCH*)&ppDisp));
    return ppDisp;
  }

  LPDISPATCH __fastcall get_Container(void)
  {
    LPDISPATCH ppDisp;
    OLECHECK(this->get_Container((LPDISPATCH*)&ppDisp));
    return ppDisp;
  }

  LPDISPATCH __fastcall get_Document(void)
  {
    LPDISPATCH ppDisp;
    OLECHECK(this->get_Document((LPDISPATCH*)&ppDisp));
    return ppDisp;
  }

  TOLEBOOL __fastcall get_TopLevelContainer(void)
  {
    TOLEBOOL pBool;
    OLECHECK(this->get_TopLevelContainer((TOLEBOOL*)&pBool));
    return pBool;
  }

  BSTR __fastcall get_Type(void)
  {
    BSTR Type = 0;
    OLECHECK(this->get_Type((BSTR*)&Type));
    return Type;
  }

  long __fastcall get_Left(void)
  {
    long pl;
    OLECHECK(this->get_Left((long*)&pl));
    return pl;
  }

  long __fastcall get_Top(void)
  {
    long pl;
    OLECHECK(this->get_Top((long*)&pl));
    return pl;
  }

  long __fastcall get_Width(void)
  {
    long pl;
    OLECHECK(this->get_Width((long*)&pl));
    return pl;
  }

  long __fastcall get_Height(void)
  {
    long pl;
    OLECHECK(this->get_Height((long*)&pl));
    return pl;
  }

  BSTR __fastcall get_LocationName(void)
  {
    BSTR LocationName = 0;
    OLECHECK(this->get_LocationName((BSTR*)&LocationName));
    return LocationName;
  }

  BSTR __fastcall get_LocationURL(void)
  {
    BSTR LocationURL = 0;
    OLECHECK(this->get_LocationURL((BSTR*)&LocationURL));
    return LocationURL;
  }

  TOLEBOOL __fastcall get_Busy(void)
  {
    TOLEBOOL pBool;
    OLECHECK(this->get_Busy((TOLEBOOL*)&pBool));
    return pBool;
  }


  __property   LPDISPATCH      Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Container = {read = get_Container};
  __property   LPDISPATCH      Document = {read = get_Document};
  __property   TOLEBOOL        TopLevelContainer = {read = get_TopLevelContainer};
  __property   BSTR            Type = {read = get_Type};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   BSTR            LocationName = {read = get_LocationName};
  __property   BSTR            LocationURL = {read = get_LocationURL};
  __property   TOLEBOOL        Busy = {read = get_Busy};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: DWebBrowserEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {EAB22AC2-30C1-11CF-A7EB-0000C05BAE0B}
// *********************************************************************//
interface DWebBrowserEvents : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall BeforeNavigate(BSTR URL/*[in]*/, long Flags, BSTR TargetFrameName
                                                 , TVariant* PostData, BSTR Headers, 
                                                 TOLEBOOL* Cancel/*[in,out]*/)
  {
    _TDispID _dispid(/* BeforeNavigate */ DISPID(100));
    TAutoArgs<6> _args;
    _args[1] = URL /*[VT_BSTR:0]*/;
    _args[2] = Flags /*[VT_I4:0]*/;
    _args[3] = TargetFrameName /*[VT_BSTR:0]*/;
    _args[4] = PostData /*[VT_VARIANT:1]*/;
    _args[5] = Headers /*[VT_BSTR:0]*/;
    _args[6] = Cancel /*[VT_BOOL:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall NavigateComplete(BSTR URL/*[in]*/)
  {
    _TDispID _dispid(/* NavigateComplete */ DISPID(101));
    TAutoArgs<1> _args;
    _args[1] = URL /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall StatusTextChange(BSTR Text/*[in]*/)
  {
    _TDispID _dispid(/* StatusTextChange */ DISPID(102));
    TAutoArgs<1> _args;
    _args[1] = Text /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall ProgressChange(long Progress/*[in]*/, long ProgressMax/*[in]*/)
  {
    _TDispID _dispid(/* ProgressChange */ DISPID(108));
    TAutoArgs<2> _args;
    _args[1] = Progress /*[VT_I4:0]*/;
    _args[2] = ProgressMax /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall DownloadComplete()
  {
    _TDispID _dispid(/* DownloadComplete */ DISPID(104));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall CommandStateChange(long Command/*[in]*/, TOLEBOOL Enable/*[in]*/)
  {
    _TDispID _dispid(/* CommandStateChange */ DISPID(105));
    TAutoArgs<2> _args;
    _args[1] = Command /*[VT_I4:0]*/;
    _args[2] = Enable /*[VT_BOOL:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall DownloadBegin()
  {
    _TDispID _dispid(/* DownloadBegin */ DISPID(106));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall NewWindow(BSTR URL/*[in]*/, long Flags/*[in]*/, 
                                            BSTR TargetFrameName/*[in]*/, TVariant* PostData/*[in]*/
                                            , BSTR Headers/*[in]*/, TOLEBOOL* Processed/*[in,out]*/)
  {
    _TDispID _dispid(/* NewWindow */ DISPID(107));
    TAutoArgs<6> _args;
    _args[1] = URL /*[VT_BSTR:0]*/;
    _args[2] = Flags /*[VT_I4:0]*/;
    _args[3] = TargetFrameName /*[VT_BSTR:0]*/;
    _args[4] = PostData /*[VT_VARIANT:1]*/;
    _args[5] = Headers /*[VT_BSTR:0]*/;
    _args[6] = Processed /*[VT_BOOL:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall TitleChange(BSTR Text/*[in]*/)
  {
    _TDispID _dispid(/* TitleChange */ DISPID(113));
    TAutoArgs<1> _args;
    _args[1] = Text /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall FrameBeforeNavigate(BSTR URL/*[in]*/, long Flags, 
                                                      BSTR TargetFrameName, TVariant* PostData, 
                                                      BSTR Headers, TOLEBOOL* Cancel/*[in,out]*/)
  {
    _TDispID _dispid(/* FrameBeforeNavigate */ DISPID(200));
    TAutoArgs<6> _args;
    _args[1] = URL /*[VT_BSTR:0]*/;
    _args[2] = Flags /*[VT_I4:0]*/;
    _args[3] = TargetFrameName /*[VT_BSTR:0]*/;
    _args[4] = PostData /*[VT_VARIANT:1]*/;
    _args[5] = Headers /*[VT_BSTR:0]*/;
    _args[6] = Cancel /*[VT_BOOL:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall FrameNavigateComplete(BSTR URL/*[in]*/)
  {
    _TDispID _dispid(/* FrameNavigateComplete */ DISPID(201));
    TAutoArgs<1> _args;
    _args[1] = URL /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall FrameNewWindow(BSTR URL/*[in]*/, long Flags/*[in]*/, 
                                                 BSTR TargetFrameName/*[in]*/, 
                                                 TVariant* PostData/*[in]*/, BSTR Headers/*[in]*/, 
                                                 TOLEBOOL* Processed/*[in,out]*/)
  {
    _TDispID _dispid(/* FrameNewWindow */ DISPID(204));
    TAutoArgs<6> _args;
    _args[1] = URL /*[VT_BSTR:0]*/;
    _args[2] = Flags /*[VT_I4:0]*/;
    _args[3] = TargetFrameName /*[VT_BSTR:0]*/;
    _args[4] = PostData /*[VT_VARIANT:1]*/;
    _args[5] = Headers /*[VT_BSTR:0]*/;
    _args[6] = Processed /*[VT_BOOL:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Quit(TOLEBOOL* Cancel/*[in,out]*/)
  {
    _TDispID _dispid(/* Quit */ DISPID(103));
    TAutoArgs<1> _args;
    _args[1] = Cancel /*[VT_BOOL:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall WindowMove()
  {
    _TDispID _dispid(/* WindowMove */ DISPID(109));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall WindowResize()
  {
    _TDispID _dispid(/* WindowResize */ DISPID(110));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall WindowActivate()
  {
    _TDispID _dispid(/* WindowActivate */ DISPID(111));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall PropertyChange(BSTR Property/*[in]*/)
  {
    _TDispID _dispid(/* PropertyChange */ DISPID(112));
    TAutoArgs<1> _args;
    _args[1] = Property /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: IWebBrowserApp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0002DF05-0000-0000-C000-000000000046}
// *********************************************************************//
interface IWebBrowserApp  : public Shdocvw_tlb::IWebBrowser
{
public:
  // [300] Exits application and closes the open document.
  virtual HRESULT STDMETHODCALLTYPE Quit(void) = 0;
  // [301] Converts client sizes into window sizes.
  virtual HRESULT STDMETHODCALLTYPE ClientToWindow(int* pcx/*[in,out]*/, int* pcy/*[in,out]*/) = 0;
  // [302] Associates vtValue with the name szProperty in the context of the object.
  virtual HRESULT STDMETHODCALLTYPE PutProperty(BSTR Property/*[in]*/, 
                                                TVariantInParam vtValue/*[in]*/) = 0;
  // [303] Retrieve the Associated value for the property vtValue in the context of the object.
  virtual HRESULT STDMETHODCALLTYPE GetProperty(BSTR Property/*[in]*/, 
                                                TVariant* pvtValue/*[out,retval]*/) = 0;
  // [0] Returns name of the application.
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0;
  // [-515] Returns the HWND of the current IE window.
  virtual HRESULT STDMETHODCALLTYPE get_HWND(long* pHWND/*[out,retval]*/) = 0;
  // [400] Returns file specification of the application, including path.
  virtual HRESULT STDMETHODCALLTYPE get_FullName(BSTR* FullName/*[out,retval]*/) = 0;
  // [401] Returns the path to the application.
  virtual HRESULT STDMETHODCALLTYPE get_Path(BSTR* Path/*[out,retval]*/) = 0;
  // [402] Determines whether the application is visible or hidden.
  virtual HRESULT STDMETHODCALLTYPE get_Visible(TOLEBOOL* pBool/*[out,retval]*/) = 0;
  // [402] Determines whether the application is visible or hidden.
  virtual HRESULT STDMETHODCALLTYPE set_Visible(TOLEBOOL pBool/*[in]*/) = 0;
  // [403] Turn on or off the statusbar.
  virtual HRESULT STDMETHODCALLTYPE get_StatusBar(TOLEBOOL* pBool/*[out,retval]*/) = 0;
  // [403] Turn on or off the statusbar.
  virtual HRESULT STDMETHODCALLTYPE set_StatusBar(TOLEBOOL pBool/*[in]*/) = 0;
  // [404] Text of Status window.
  virtual HRESULT STDMETHODCALLTYPE get_StatusText(BSTR* StatusText/*[out,retval]*/) = 0;
  // [404] Text of Status window.
  virtual HRESULT STDMETHODCALLTYPE set_StatusText(BSTR StatusText/*[in]*/) = 0;
  // [405] Controls which toolbar is shown.
  virtual HRESULT STDMETHODCALLTYPE get_ToolBar(int* Value/*[out,retval]*/) = 0;
  // [405] Controls which toolbar is shown.
  virtual HRESULT STDMETHODCALLTYPE set_ToolBar(int Value/*[in]*/) = 0;
  // [406] Controls whether menubar is shown.
  virtual HRESULT STDMETHODCALLTYPE get_MenuBar(TOLEBOOL* Value/*[out,retval]*/) = 0;
  // [406] Controls whether menubar is shown.
  virtual HRESULT STDMETHODCALLTYPE set_MenuBar(TOLEBOOL Value/*[in]*/) = 0;
  // [407] Maximizes window and turns off statusbar, toolbar, menubar, and titlebar.
  virtual HRESULT STDMETHODCALLTYPE get_FullScreen(TOLEBOOL* pbFullScreen/*[out,retval]*/) = 0;
  // [407] Maximizes window and turns off statusbar, toolbar, menubar, and titlebar.
  virtual HRESULT STDMETHODCALLTYPE set_FullScreen(TOLEBOOL pbFullScreen/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  TVariant __fastcall GetProperty(BSTR Property/*[in]*/)
  {
    TVariant pvtValue;
    OLECHECK(this->GetProperty(Property, (TVariant*)&pvtValue));
    return pvtValue;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  long __fastcall get_HWND(void)
  {
    long pHWND;
    OLECHECK(this->get_HWND((long*)&pHWND));
    return pHWND;
  }

  BSTR __fastcall get_FullName(void)
  {
    BSTR FullName = 0;
    OLECHECK(this->get_FullName((BSTR*)&FullName));
    return FullName;
  }

  BSTR __fastcall get_Path(void)
  {
    BSTR Path = 0;
    OLECHECK(this->get_Path((BSTR*)&Path));
    return Path;
  }

  TOLEBOOL __fastcall get_Visible(void)
  {
    TOLEBOOL pBool;
    OLECHECK(this->get_Visible((TOLEBOOL*)&pBool));
    return pBool;
  }

  TOLEBOOL __fastcall get_StatusBar(void)
  {
    TOLEBOOL pBool;
    OLECHECK(this->get_StatusBar((TOLEBOOL*)&pBool));
    return pBool;
  }

  BSTR __fastcall get_StatusText(void)
  {
    BSTR StatusText = 0;
    OLECHECK(this->get_StatusText((BSTR*)&StatusText));
    return StatusText;
  }

  int __fastcall get_ToolBar(void)
  {
    int Value;
    OLECHECK(this->get_ToolBar((int*)&Value));
    return Value;
  }

  TOLEBOOL __fastcall get_MenuBar(void)
  {
    TOLEBOOL Value;
    OLECHECK(this->get_MenuBar((TOLEBOOL*)&Value));
    return Value;
  }

  TOLEBOOL __fastcall get_FullScreen(void)
  {
    TOLEBOOL pbFullScreen;
    OLECHECK(this->get_FullScreen((TOLEBOOL*)&pbFullScreen));
    return pbFullScreen;
  }


  __property   BSTR            Name = {read = get_Name};
  __property   long            HWND = {read = get_HWND};
  __property   BSTR            FullName = {read = get_FullName};
  __property   BSTR            Path = {read = get_Path};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   TOLEBOOL        StatusBar = {read = get_StatusBar, write = set_StatusBar};
  __property   BSTR            StatusText = {read = get_StatusText, write = set_StatusText};
  __property   int             ToolBar = {read = get_ToolBar, write = set_ToolBar};
  __property   TOLEBOOL        MenuBar = {read = get_MenuBar, write = set_MenuBar};
  __property   TOLEBOOL        FullScreen = {read = get_FullScreen, write = set_FullScreen};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWebBrowser2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D30C1661-CDAF-11D0-8A3E-00C04FC9E26E}
// *********************************************************************//
interface IWebBrowser2  : public Shdocvw_tlb::IWebBrowserApp
{
public:
  // [500] Navigates to a URL or file or pidl.
  virtual HRESULT STDMETHODCALLTYPE Navigate2(TVariant* URL/*[in]*/, 
                                              TVariant* Flags/*[in,opt]*/= TNoParam(), 
                                              TVariant* TargetFrameName/*[in,opt]*/= TNoParam(), 
                                              TVariant* PostData/*[in,opt]*/= TNoParam(), 
                                              TVariant* Headers/*[in,opt]*/= TNoParam()) = 0;
  // [501] IOleCommandTarget::QueryStatus
  virtual HRESULT STDMETHODCALLTYPE QueryStatusWB(Shdocvw_tlb::OLECMDID cmdID/*[in]*/, 
                                                  Shdocvw_tlb::OLECMDF* pcmdf/*[out,retval]*/) = 0;
  // [502] IOleCommandTarget::Exec
  virtual HRESULT STDMETHODCALLTYPE ExecWB(Shdocvw_tlb::OLECMDID cmdID/*[in]*/, 
                                           Shdocvw_tlb::OLECMDEXECOPT cmdexecopt/*[in]*/, 
                                           TVariant* pvaIn/*[in,opt]*/= TNoParam(), 
                                           TVariant* pvaOut/*[in,out,opt]*/= TNoParam()) = 0;
  // [503] Set BrowserBar to Clsid
  virtual HRESULT STDMETHODCALLTYPE ShowBrowserBar(TVariant* pvaClsid/*[in]*/, 
                                                   TVariant* pvarShow/*[in,opt]*/= TNoParam(), 
                                                   TVariant* pvarSize/*[in,opt]*/= TNoParam()) = 0;
  virtual HRESULT STDMETHODCALLTYPE get_ReadyState(Shdocvw_tlb::tagREADYSTATE* plReadyState/*[out,retval]*/) = 0; // [-525]
  // [550] Controls if the frame is offline (read from cache)
  virtual HRESULT STDMETHODCALLTYPE get_Offline(TOLEBOOL* pbOffline/*[out,retval]*/) = 0;
  // [550] Controls if the frame is offline (read from cache)
  virtual HRESULT STDMETHODCALLTYPE set_Offline(TOLEBOOL pbOffline/*[in]*/) = 0;
  // [551] Controls if any dialog boxes can be shown
  virtual HRESULT STDMETHODCALLTYPE get_Silent(TOLEBOOL* pbSilent/*[out,retval]*/) = 0;
  // [551] Controls if any dialog boxes can be shown
  virtual HRESULT STDMETHODCALLTYPE set_Silent(TOLEBOOL pbSilent/*[in]*/) = 0;
  // [552] Registers OC as a top-level browser (for target name resolution)
  virtual HRESULT STDMETHODCALLTYPE get_RegisterAsBrowser(TOLEBOOL* pbRegister/*[out,retval]*/) = 0;
  // [552] Registers OC as a top-level browser (for target name resolution)
  virtual HRESULT STDMETHODCALLTYPE set_RegisterAsBrowser(TOLEBOOL pbRegister/*[in]*/) = 0;
  // [553] Registers OC as a drop target for navigation
  virtual HRESULT STDMETHODCALLTYPE get_RegisterAsDropTarget(TOLEBOOL* pbRegister/*[out,retval]*/) = 0;
  // [553] Registers OC as a drop target for navigation
  virtual HRESULT STDMETHODCALLTYPE set_RegisterAsDropTarget(TOLEBOOL pbRegister/*[in]*/) = 0;
  // [554] Controls if the browser is in theater mode
  virtual HRESULT STDMETHODCALLTYPE get_TheaterMode(TOLEBOOL* pbRegister/*[out,retval]*/) = 0;
  // [554] Controls if the browser is in theater mode
  virtual HRESULT STDMETHODCALLTYPE set_TheaterMode(TOLEBOOL pbRegister/*[in]*/) = 0;
  // [555] Controls whether address bar is shown
  virtual HRESULT STDMETHODCALLTYPE get_AddressBar(TOLEBOOL* Value/*[out,retval]*/) = 0;
  // [555] Controls whether address bar is shown
  virtual HRESULT STDMETHODCALLTYPE set_AddressBar(TOLEBOOL Value/*[in]*/) = 0;
  // [556] Controls whether the window is resizable
  virtual HRESULT STDMETHODCALLTYPE get_Resizable(TOLEBOOL* Value/*[out,retval]*/) = 0;
  // [556] Controls whether the window is resizable
  virtual HRESULT STDMETHODCALLTYPE set_Resizable(TOLEBOOL Value/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Shdocvw_tlb::OLECMDF __fastcall QueryStatusWB(Shdocvw_tlb::OLECMDID cmdID/*[in]*/)
  {
    Shdocvw_tlb::OLECMDF pcmdf;
    OLECHECK(this->QueryStatusWB(cmdID, (Shdocvw_tlb::OLECMDF*)&pcmdf));
    return pcmdf;
  }

  Shdocvw_tlb::tagREADYSTATE __fastcall get_ReadyState(void)
  {
    Shdocvw_tlb::tagREADYSTATE plReadyState;
    OLECHECK(this->get_ReadyState((Shdocvw_tlb::tagREADYSTATE*)&plReadyState));
    return plReadyState;
  }

  TOLEBOOL __fastcall get_Offline(void)
  {
    TOLEBOOL pbOffline;
    OLECHECK(this->get_Offline((TOLEBOOL*)&pbOffline));
    return pbOffline;
  }

  TOLEBOOL __fastcall get_Silent(void)
  {
    TOLEBOOL pbSilent;
    OLECHECK(this->get_Silent((TOLEBOOL*)&pbSilent));
    return pbSilent;
  }

  TOLEBOOL __fastcall get_RegisterAsBrowser(void)
  {
    TOLEBOOL pbRegister;
    OLECHECK(this->get_RegisterAsBrowser((TOLEBOOL*)&pbRegister));
    return pbRegister;
  }

  TOLEBOOL __fastcall get_RegisterAsDropTarget(void)
  {
    TOLEBOOL pbRegister;
    OLECHECK(this->get_RegisterAsDropTarget((TOLEBOOL*)&pbRegister));
    return pbRegister;
  }

  TOLEBOOL __fastcall get_TheaterMode(void)
  {
    TOLEBOOL pbRegister;
    OLECHECK(this->get_TheaterMode((TOLEBOOL*)&pbRegister));
    return pbRegister;
  }

  TOLEBOOL __fastcall get_AddressBar(void)
  {
    TOLEBOOL Value;
    OLECHECK(this->get_AddressBar((TOLEBOOL*)&Value));
    return Value;
  }

  TOLEBOOL __fastcall get_Resizable(void)
  {
    TOLEBOOL Value;
    OLECHECK(this->get_Resizable((TOLEBOOL*)&Value));
    return Value;
  }


  __property   Shdocvw_tlb::tagREADYSTATE ReadyState = {read = get_ReadyState};
  __property   TOLEBOOL        Offline = {read = get_Offline, write = set_Offline};
  __property   TOLEBOOL        Silent = {read = get_Silent, write = set_Silent};
  __property   TOLEBOOL        RegisterAsBrowser = {read = get_RegisterAsBrowser, write = set_RegisterAsBrowser};
  __property   TOLEBOOL        RegisterAsDropTarget = {read = get_RegisterAsDropTarget, write = set_RegisterAsDropTarget};
  __property   TOLEBOOL        TheaterMode = {read = get_TheaterMode, write = set_TheaterMode};
  __property   TOLEBOOL        AddressBar = {read = get_AddressBar, write = set_AddressBar};
  __property   TOLEBOOL        Resizable = {read = get_Resizable, write = set_Resizable};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: DWebBrowserEvents2
// Flags:     (4112) Hidden Dispatchable
// GUID:      {34A715A0-6587-11D0-924A-0020AFC7AC4D}
// *********************************************************************//
interface DWebBrowserEvents2 : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall StatusTextChange(BSTR Text/*[in]*/)
  {
    _TDispID _dispid(/* StatusTextChange */ DISPID(102));
    TAutoArgs<1> _args;
    _args[1] = Text /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall ProgressChange(long Progress/*[in]*/, long ProgressMax/*[in]*/)
  {
    _TDispID _dispid(/* ProgressChange */ DISPID(108));
    TAutoArgs<2> _args;
    _args[1] = Progress /*[VT_I4:0]*/;
    _args[2] = ProgressMax /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall CommandStateChange(long Command/*[in]*/, TOLEBOOL Enable/*[in]*/)
  {
    _TDispID _dispid(/* CommandStateChange */ DISPID(105));
    TAutoArgs<2> _args;
    _args[1] = Command /*[VT_I4:0]*/;
    _args[2] = Enable /*[VT_BOOL:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall DownloadBegin()
  {
    _TDispID _dispid(/* DownloadBegin */ DISPID(106));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall DownloadComplete()
  {
    _TDispID _dispid(/* DownloadComplete */ DISPID(104));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall TitleChange(BSTR Text/*[in]*/)
  {
    _TDispID _dispid(/* TitleChange */ DISPID(113));
    TAutoArgs<1> _args;
    _args[1] = Text /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall PropertyChange(BSTR szProperty/*[in]*/)
  {
    _TDispID _dispid(/* PropertyChange */ DISPID(112));
    TAutoArgs<1> _args;
    _args[1] = szProperty /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall BeforeNavigate2(LPDISPATCH pDisp/*[in]*/, TVariant* URL/*[in]*/, 
                                                  TVariant* Flags/*[in]*/, 
                                                  TVariant* TargetFrameName/*[in]*/, 
                                                  TVariant* PostData/*[in]*/, 
                                                  TVariant* Headers/*[in]*/, 
                                                  TOLEBOOL* Cancel/*[in,out]*/)
  {
    _TDispID _dispid(/* BeforeNavigate2 */ DISPID(250));
    TAutoArgs<7> _args;
    _args[1] = pDisp /*[VT_DISPATCH:0]*/;
    _args[2] = URL /*[VT_VARIANT:1]*/;
    _args[3] = Flags /*[VT_VARIANT:1]*/;
    _args[4] = TargetFrameName /*[VT_VARIANT:1]*/;
    _args[5] = PostData /*[VT_VARIANT:1]*/;
    _args[6] = Headers /*[VT_VARIANT:1]*/;
    _args[7] = Cancel /*[VT_BOOL:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall NewWindow2(LPDISPATCH* ppDisp/*[in,out]*/, 
                                             TOLEBOOL* Cancel/*[in,out]*/)
  {
    _TDispID _dispid(/* NewWindow2 */ DISPID(251));
    TAutoArgs<2> _args;
    _args[1] = ppDisp /*[VT_DISPATCH:1]*/;
    _args[2] = Cancel /*[VT_BOOL:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall NavigateComplete2(LPDISPATCH pDisp/*[in]*/, TVariant* URL/*[in]*/)
  {
    _TDispID _dispid(/* NavigateComplete2 */ DISPID(252));
    TAutoArgs<2> _args;
    _args[1] = pDisp /*[VT_DISPATCH:0]*/;
    _args[2] = URL /*[VT_VARIANT:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall DocumentComplete(LPDISPATCH pDisp/*[in]*/, TVariant* URL/*[in]*/)
  {
    _TDispID _dispid(/* DocumentComplete */ DISPID(259));
    TAutoArgs<2> _args;
    _args[1] = pDisp /*[VT_DISPATCH:0]*/;
    _args[2] = URL /*[VT_VARIANT:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OnQuit()
  {
    _TDispID _dispid(/* OnQuit */ DISPID(253));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall OnVisible(TOLEBOOL Visible/*[in]*/)
  {
    _TDispID _dispid(/* OnVisible */ DISPID(254));
    TAutoArgs<1> _args;
    _args[1] = Visible /*[VT_BOOL:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OnToolBar(TOLEBOOL ToolBar/*[in]*/)
  {
    _TDispID _dispid(/* OnToolBar */ DISPID(255));
    TAutoArgs<1> _args;
    _args[1] = ToolBar /*[VT_BOOL:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OnMenuBar(TOLEBOOL MenuBar/*[in]*/)
  {
    _TDispID _dispid(/* OnMenuBar */ DISPID(256));
    TAutoArgs<1> _args;
    _args[1] = MenuBar /*[VT_BOOL:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OnStatusBar(TOLEBOOL StatusBar/*[in]*/)
  {
    _TDispID _dispid(/* OnStatusBar */ DISPID(257));
    TAutoArgs<1> _args;
    _args[1] = StatusBar /*[VT_BOOL:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OnFullScreen(TOLEBOOL FullScreen/*[in]*/)
  {
    _TDispID _dispid(/* OnFullScreen */ DISPID(258));
    TAutoArgs<1> _args;
    _args[1] = FullScreen /*[VT_BOOL:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OnTheaterMode(TOLEBOOL TheaterMode/*[in]*/)
  {
    _TDispID _dispid(/* OnTheaterMode */ DISPID(260));
    TAutoArgs<1> _args;
    _args[1] = TheaterMode /*[VT_BOOL:0]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: DShellWindowsEvents
// Flags:     (4096) Dispatchable
// GUID:      {FE4106E0-399A-11D0-A48C-00A0C90A8F39}
// *********************************************************************//
interface DShellWindowsEvents : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall WindowRegistered(long lCookie/*[in]*/)
  {
    _TDispID _dispid(/* WindowRegistered */ DISPID(200));
    TAutoArgs<1> _args;
    _args[1] = lCookie /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall WindowRevoked(long lCookie/*[in]*/)
  {
    _TDispID _dispid(/* WindowRevoked */ DISPID(201));
    TAutoArgs<1> _args;
    _args[1] = lCookie /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: IShellWindows
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {85CB6900-4D95-11CF-960C-0080C7F4EE85}
// *********************************************************************//
interface IShellWindows  : public IDispatch
{
public:
  // [-1] Get count of open Shell windows
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0;
  // [0] Return the shell window for the given index
  virtual HRESULT STDMETHODCALLTYPE Item(TVariantInParam index/*[in,opt]*/, 
                                         LPDISPATCH* Folder/*[out,retval]*/) = 0;
  // [-4] Enumerates the figures
  virtual HRESULT STDMETHODCALLTYPE _NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/) = 0;
  // [-1] Register a window with the list
  virtual HRESULT STDMETHODCALLTYPE Register(LPDISPATCH pid/*[in]*/, long HWND/*[in]*/, 
                                             int swClass/*[in]*/, long* plCookie/*[out]*/) = 0;
  // [-1] Register a pending open with the list
  virtual HRESULT STDMETHODCALLTYPE RegisterPending(long lThreadId/*[in]*/, 
                                                    TVariant* pvarloc/*[in]*/, 
                                                    TVariant* pvarlocRoot/*[in]*/, 
                                                    int swClass/*[in]*/, long* plCookie/*[out]*/) = 0;
  // [-1] Remove a window from the list
  virtual HRESULT STDMETHODCALLTYPE Revoke(long lCookie/*[in]*/) = 0;
  // [-1] Notifies the new location
  virtual HRESULT STDMETHODCALLTYPE OnNavigate(long lCookie/*[in]*/, TVariant* pvarloc/*[in]*/) = 0;
  // [-1] Notifies the activation
  virtual HRESULT STDMETHODCALLTYPE OnActivated(long lCookie/*[in]*/, TOLEBOOL fActive/*[in]*/) = 0;
  // [-1] Find the window based on the location
  virtual HRESULT STDMETHODCALLTYPE FindWindow(TVariant* pvarloc/*[in]*/, 
                                               TVariant* pvarlocRoot/*[in]*/, int swClass/*[in]*/, 
                                               long* pHWND/*[out]*/, int swfwOptions/*[in]*/, 
                                               LPDISPATCH* ppdispOut/*[out,retval]*/) = 0;
  // [-1] Notifies on creation and frame name set
  virtual HRESULT STDMETHODCALLTYPE OnCreated(long lCookie/*[in]*/, LPUNKNOWN punk/*[in]*/) = 0;
  // [-1] Used by IExplore to register different processes
  virtual HRESULT STDMETHODCALLTYPE ProcessAttachDetach(TOLEBOOL fAttach/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  LPDISPATCH __fastcall Item(TVariantInParam index/*[in,opt]*/= TNoParam())
  {
    LPDISPATCH Folder;
    OLECHECK(this->Item(index, (LPDISPATCH*)&Folder));
    return Folder;
  }

  LPUNKNOWN __fastcall _NewEnum(void)
  {
    LPUNKNOWN ppunk;
    OLECHECK(this->_NewEnum((LPUNKNOWN*)&ppunk));
    return ppunk;
  }

  LPDISPATCH __fastcall FindWindow(TVariant* pvarloc/*[in]*/, TVariant* pvarlocRoot/*[in]*/, 
                                   int swClass/*[in]*/, long* pHWND/*[out]*/, 
                                   int swfwOptions/*[in]*/)
  {
    LPDISPATCH ppdispOut;
    OLECHECK(this->FindWindow(pvarloc, pvarlocRoot, swClass, pHWND, swfwOptions, (LPDISPATCH*)&ppdispOut));
    return ppdispOut;
  }


  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IShellUIHelper
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {729FE2F8-1EA8-11D1-8F85-00C04FC2FBE1}
// *********************************************************************//
interface IShellUIHelper  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE ResetFirstBootMode(void) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE ResetSafeMode(void) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE RefreshOfflineDesktop(void) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE AddFavorite(BSTR URL/*[in]*/, 
                                                TVariant* Title/*[in,opt]*/= TNoParam()) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE AddChannel(BSTR URL/*[in]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE AddDesktopComponent(BSTR URL/*[in]*/, BSTR Type/*[in]*/, 
                                                        TVariant* Left/*[in,opt]*/= TNoParam(), 
                                                        TVariant* Top/*[in,opt]*/= TNoParam(), 
                                                        TVariant* Width/*[in,opt]*/= TNoParam(), 
                                                        TVariant* Height/*[in,opt]*/= TNoParam()) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE IsSubscribed(BSTR URL/*[in]*/, TOLEBOOL* pBool/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE NavigateAndFind(BSTR URL/*[in]*/, BSTR strQuery/*[in]*/, 
                                                    TVariant* varTargetFrame/*[in]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE ImportExportFavorites(TOLEBOOL fImport/*[in]*/, 
                                                          BSTR strImpExpPath/*[in]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE AutoCompleteSaveForm(TVariant* Form/*[in,opt]*/= TNoParam()) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE AutoScan(BSTR strSearch/*[in]*/, BSTR strFailureUrl/*[in]*/, 
                                             TVariant* pvarTargetFrame/*[in,opt]*/= TNoParam()) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE AutoCompleteAttach(TVariant* Reserved/*[in,opt]*/= TNoParam()) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE ShowBrowserUI(BSTR bstrName/*[in]*/, TVariant* pvarIn/*[in]*/, 
                                                  TVariant* pvarOut/*[out,retval]*/) = 0; // [13]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  TOLEBOOL __fastcall IsSubscribed(BSTR URL/*[in]*/)
  {
    TOLEBOOL pBool;
    OLECHECK(this->IsSubscribed(URL, (TOLEBOOL*)&pBool));
    return pBool;
  }

  TVariant __fastcall ShowBrowserUI(BSTR bstrName/*[in]*/, TVariant* pvarIn/*[in]*/)
  {
    TVariant pvarOut;
    OLECHECK(this->ShowBrowserUI(bstrName, pvarIn, (TVariant*)&pvarOut));
    return pvarOut;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ShellFavoritesNameSpaceEvents
// Flags:     (4096) Dispatchable
// GUID:      {55136806-B2DE-11D1-B9F2-00A0C98BC547}
// *********************************************************************//
interface _ShellFavoritesNameSpaceEvents : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall FavoritesSelectionChange(long cItems/*[in]*/, long hItem/*[in]*/, 
                                                           BSTR strName/*[in]*/, BSTR strUrl/*[in]*/
                                                           , long cVisits/*[in]*/, 
                                                           BSTR strDate/*[in]*/, 
                                                           long fAvailableOffline/*[in]*/)
  {
    _TDispID _dispid(/* FavoritesSelectionChange */ DISPID(1));
    TAutoArgs<7> _args;
    _args[1] = cItems /*[VT_I4:0]*/;
    _args[2] = hItem /*[VT_I4:0]*/;
    _args[3] = strName /*[VT_BSTR:0]*/;
    _args[4] = strUrl /*[VT_BSTR:0]*/;
    _args[5] = cVisits /*[VT_I4:0]*/;
    _args[6] = strDate /*[VT_BSTR:0]*/;
    _args[7] = fAvailableOffline /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: IShellFavoritesNameSpace
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {55136804-B2DE-11D1-B9F2-00A0C98BC547}
// *********************************************************************//
interface IShellFavoritesNameSpace  : public IDispatch
{
public:
  // [1] method MoveSelectionUp
  virtual HRESULT STDMETHODCALLTYPE MoveSelectionUp(void) = 0;
  // [2] method MoveSelectionDown
  virtual HRESULT STDMETHODCALLTYPE MoveSelectionDown(void) = 0;
  // [3] method ResetSort
  virtual HRESULT STDMETHODCALLTYPE ResetSort(void) = 0;
  // [4] method NewFolder
  virtual HRESULT STDMETHODCALLTYPE NewFolder(void) = 0;
  // [5] method Synchronize
  virtual HRESULT STDMETHODCALLTYPE Synchronize(void) = 0;
  // [6] method Import
  virtual HRESULT STDMETHODCALLTYPE Import(void) = 0;
  // [7] method Export
  virtual HRESULT STDMETHODCALLTYPE Export(void) = 0;
  // [8] method InvokeContextMenuCommand
  virtual HRESULT STDMETHODCALLTYPE InvokeContextMenuCommand(BSTR strCommand/*[in]*/) = 0;
  // [9] method MoveSelectionTo
  virtual HRESULT STDMETHODCALLTYPE MoveSelectionTo(void) = 0;
  // [10] Query to see if offline pack is installed
  virtual HRESULT STDMETHODCALLTYPE get_FOfflinePackInstalled(TOLEBOOL* pBool/*[out,retval]*/) = 0;
  // [11] method CreateSubscriptionForSelection
  virtual HRESULT STDMETHODCALLTYPE CreateSubscriptionForSelection(TOLEBOOL* pBool/*[out,retval]*/) = 0;
  // [12] method DeleteSubscriptionForSelection
  virtual HRESULT STDMETHODCALLTYPE DeleteSubscriptionForSelection(TOLEBOOL* pBool/*[out,retval]*/) = 0;
  // [13] method SetRoot
  virtual HRESULT STDMETHODCALLTYPE SetRoot(BSTR bstrFullPath/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  TOLEBOOL __fastcall get_FOfflinePackInstalled(void)
  {
    TOLEBOOL pBool;
    OLECHECK(this->get_FOfflinePackInstalled((TOLEBOOL*)&pBool));
    return pBool;
  }

  TOLEBOOL __fastcall CreateSubscriptionForSelection(void)
  {
    TOLEBOOL pBool;
    OLECHECK(this->CreateSubscriptionForSelection((TOLEBOOL*)&pBool));
    return pBool;
  }

  TOLEBOOL __fastcall DeleteSubscriptionForSelection(void)
  {
    TOLEBOOL pBool;
    OLECHECK(this->DeleteSubscriptionForSelection((TOLEBOOL*)&pBool));
    return pBool;
  }


  __property   TOLEBOOL        FOfflinePackInstalled = {read = get_FOfflinePackInstalled};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IScriptErrorList
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F3470F24-15FD-11D2-BB2E-00805FF7EFCA}
// *********************************************************************//
interface IScriptErrorList  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE advanceError(void) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE retreatError(void) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE canAdvanceError(long* pfCanAdvance/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE canRetreatError(long* pfCanRetreat/*[out,retval]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE getErrorLine(long* plLine/*[out,retval]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE getErrorChar(long* plChar/*[out,retval]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE getErrorCode(long* plCode/*[out,retval]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE getErrorMsg(BSTR* pstr/*[out,retval]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE getErrorUrl(BSTR* pstr/*[out,retval]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE getAlwaysShowLockState(long* pfAlwaysShowLocked/*[out,retval]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE getDetailsPaneOpen(long* pfDetailsPaneOpen/*[out,retval]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE setDetailsPaneOpen(long fDetailsPaneOpen) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE getPerErrorDisplay(long* pfPerErrorDisplay/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE setPerErrorDisplay(long fPerErrorDisplay) = 0; // [22]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall canAdvanceError(void)
  {
    long pfCanAdvance;
    OLECHECK(this->canAdvanceError((long*)&pfCanAdvance));
    return pfCanAdvance;
  }

  long __fastcall canRetreatError(void)
  {
    long pfCanRetreat;
    OLECHECK(this->canRetreatError((long*)&pfCanRetreat));
    return pfCanRetreat;
  }

  long __fastcall getErrorLine(void)
  {
    long plLine;
    OLECHECK(this->getErrorLine((long*)&plLine));
    return plLine;
  }

  long __fastcall getErrorChar(void)
  {
    long plChar;
    OLECHECK(this->getErrorChar((long*)&plChar));
    return plChar;
  }

  long __fastcall getErrorCode(void)
  {
    long plCode;
    OLECHECK(this->getErrorCode((long*)&plCode));
    return plCode;
  }

  BSTR __fastcall getErrorMsg(void)
  {
    BSTR pstr = 0;
    OLECHECK(this->getErrorMsg((BSTR*)&pstr));
    return pstr;
  }

  BSTR __fastcall getErrorUrl(void)
  {
    BSTR pstr = 0;
    OLECHECK(this->getErrorUrl((BSTR*)&pstr));
    return pstr;
  }

  long __fastcall getAlwaysShowLockState(void)
  {
    long pfAlwaysShowLocked;
    OLECHECK(this->getAlwaysShowLockState((long*)&pfAlwaysShowLocked));
    return pfAlwaysShowLocked;
  }

  long __fastcall getDetailsPaneOpen(void)
  {
    long pfDetailsPaneOpen;
    OLECHECK(this->getDetailsPaneOpen((long*)&pfDetailsPaneOpen));
    return pfDetailsPaneOpen;
  }

  long __fastcall getPerErrorDisplay(void)
  {
    long pfPerErrorDisplay;
    OLECHECK(this->getPerErrorDisplay((long*)&pfPerErrorDisplay));
    return pfPerErrorDisplay;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ISearch
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {BA9239A4-3DD5-11D2-BF8B-00C04FB93661}
// *********************************************************************//
interface ISearch  : public IDispatch
{
public:
  // [-1] Get search title
  virtual HRESULT STDMETHODCALLTYPE get_Title(BSTR* pbstrTitle/*[out,retval]*/) = 0;
  // [-1] Get search guid
  virtual HRESULT STDMETHODCALLTYPE get_Id(BSTR* pbstrId/*[out,retval]*/) = 0;
  // [-1] Get search url
  virtual HRESULT STDMETHODCALLTYPE get_URL(BSTR* pbstrUrl/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Title(void)
  {
    BSTR pbstrTitle = 0;
    OLECHECK(this->get_Title((BSTR*)&pbstrTitle));
    return pbstrTitle;
  }

  BSTR __fastcall get_Id(void)
  {
    BSTR pbstrId = 0;
    OLECHECK(this->get_Id((BSTR*)&pbstrId));
    return pbstrId;
  }

  BSTR __fastcall get_URL(void)
  {
    BSTR pbstrUrl = 0;
    OLECHECK(this->get_URL((BSTR*)&pbstrUrl));
    return pbstrUrl;
  }


  __property   BSTR            Title = {read = get_Title};
  __property   BSTR            Id = {read = get_Id};
  __property   BSTR            URL = {read = get_URL};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ISearches
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {47C922A2-3DD5-11D2-BF8B-00C04FB93661}
// *********************************************************************//
interface ISearches  : public IDispatch
{
public:
  // [-1] Get the count of searches
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* plCount/*[out,retval]*/) = 0;
  // [-1] Get the default search name
  virtual HRESULT STDMETHODCALLTYPE get_Default(BSTR* pbstrDefault/*[out,retval]*/) = 0;
  // [-1] Return the specified search
  virtual HRESULT STDMETHODCALLTYPE Item(TVariantInParam index/*[in,opt]*/, 
                                         Shdocvw_tlb::ISearchPtr* ppid/*[out,retval]*/) = 0;
  // [-4] Enumerates the searches
  virtual HRESULT STDMETHODCALLTYPE _NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long plCount;
    OLECHECK(this->get_Count((long*)&plCount));
    return plCount;
  }

  BSTR __fastcall get_Default(void)
  {
    BSTR pbstrDefault = 0;
    OLECHECK(this->get_Default((BSTR*)&pbstrDefault));
    return pbstrDefault;
  }

  Shdocvw_tlb::ISearchPtr __fastcall Item(TVariantInParam index/*[in,opt]*/= TNoParam())
  {
    Shdocvw_tlb::ISearchPtr ppid;
    OLECHECK(this->Item(index, (Shdocvw_tlb::ISearchPtr*)&ppid));
    return ppid;
  }

  LPUNKNOWN __fastcall _NewEnum(void)
  {
    LPUNKNOWN ppunk;
    OLECHECK(this->_NewEnum((LPUNKNOWN*)&ppunk));
    return ppunk;
  }


  __property   long            Count = {read = get_Count};
  __property   BSTR            Default = {read = get_Default};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ISearchAssistantOC
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {72423E8F-8011-11D2-BE79-00A0C9A83DA1}
// *********************************************************************//
interface ISearchAssistantOC  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE AddNextMenuItem(BSTR bstrText/*[in]*/, long idItem/*[in]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE SetDefaultSearchUrl(BSTR bstrUrl/*[in]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE NavigateToDefaultSearch(void) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE IsRestricted(BSTR bstrGuid/*[in]*/, 
                                                 TOLEBOOL* pVal/*[out,retval]*/) = 0; // [4]
  // [5] property ShellFeaturesEnabled
  virtual HRESULT STDMETHODCALLTYPE get_ShellFeaturesEnabled(TOLEBOOL* pVal/*[out,retval]*/) = 0;
  // [6] property SearchAssistantDefault
  virtual HRESULT STDMETHODCALLTYPE get_SearchAssistantDefault(TOLEBOOL* pVal/*[out,retval]*/) = 0;
  // [7] Get searches
  virtual HRESULT STDMETHODCALLTYPE get_Searches(Shdocvw_tlb::ISearchesPtr* ppid/*[out,retval]*/) = 0;
  // [8] Returns true if the current folder is web folder
  virtual HRESULT STDMETHODCALLTYPE get_InWebFolder(TOLEBOOL* pVal/*[out,retval]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE PutProperty(TOLEBOOL bPerLocale/*[in]*/, BSTR bstrName/*[in]*/, 
                                                BSTR bstrValue/*[in]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE GetProperty(TOLEBOOL bPerLocale/*[in]*/, BSTR bstrName/*[in]*/, 
                                                BSTR* pbstrValue/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE set_EventHandled(TOLEBOOL Param1/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE ResetNextMenu(void) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE FindOnWeb(void) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE FindFilesOrFolders(void) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE FindComputer(void) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE FindPrinter(void) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE FindPeople(void) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE GetSearchAssistantURL(TOLEBOOL bSubstitute/*[in]*/, 
                                                          TOLEBOOL bCustomize/*[in]*/, 
                                                          BSTR* pbstrValue/*[out,retval]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE NotifySearchSettingsChanged(void) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE set_ASProvider(BSTR pProvider/*[in]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_ASProvider(BSTR* pProvider/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE set_ASSetting(int pSetting/*[in]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE get_ASSetting(int* pSetting/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE NETDetectNextNavigate(void) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE PutFindText(BSTR FindText/*[in]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE get_Version(int* pVersion/*[out,retval]*/) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE EncodeString(BSTR bstrValue/*[in]*/, BSTR bstrCharSet/*[in]*/, 
                                                 TOLEBOOL bUseUTF8/*[in]*/, 
                                                 BSTR* pbstrResult/*[out,retval]*/) = 0; // [25]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  TOLEBOOL __fastcall IsRestricted(BSTR bstrGuid/*[in]*/)
  {
    TOLEBOOL pVal;
    OLECHECK(this->IsRestricted(bstrGuid, (TOLEBOOL*)&pVal));
    return pVal;
  }

  TOLEBOOL __fastcall get_ShellFeaturesEnabled(void)
  {
    TOLEBOOL pVal;
    OLECHECK(this->get_ShellFeaturesEnabled((TOLEBOOL*)&pVal));
    return pVal;
  }

  TOLEBOOL __fastcall get_SearchAssistantDefault(void)
  {
    TOLEBOOL pVal;
    OLECHECK(this->get_SearchAssistantDefault((TOLEBOOL*)&pVal));
    return pVal;
  }

  Shdocvw_tlb::ISearchesPtr __fastcall get_Searches(void)
  {
    Shdocvw_tlb::ISearchesPtr ppid;
    OLECHECK(this->get_Searches((Shdocvw_tlb::ISearchesPtr*)&ppid));
    return ppid;
  }

  TOLEBOOL __fastcall get_InWebFolder(void)
  {
    TOLEBOOL pVal;
    OLECHECK(this->get_InWebFolder((TOLEBOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall GetProperty(TOLEBOOL bPerLocale/*[in]*/, BSTR bstrName/*[in]*/)
  {
    BSTR pbstrValue = 0;
    OLECHECK(this->GetProperty(bPerLocale, bstrName, (BSTR*)&pbstrValue));
    return pbstrValue;
  }

  BSTR __fastcall GetSearchAssistantURL(TOLEBOOL bSubstitute/*[in]*/, TOLEBOOL bCustomize/*[in]*/)
  {
    BSTR pbstrValue = 0;
    OLECHECK(this->GetSearchAssistantURL(bSubstitute, bCustomize, (BSTR*)&pbstrValue));
    return pbstrValue;
  }

  BSTR __fastcall get_ASProvider(void)
  {
    BSTR pProvider = 0;
    OLECHECK(this->get_ASProvider((BSTR*)&pProvider));
    return pProvider;
  }

  int __fastcall get_ASSetting(void)
  {
    int pSetting;
    OLECHECK(this->get_ASSetting((int*)&pSetting));
    return pSetting;
  }

  int __fastcall get_Version(void)
  {
    int pVersion;
    OLECHECK(this->get_Version((int*)&pVersion));
    return pVersion;
  }

  BSTR __fastcall EncodeString(BSTR bstrValue/*[in]*/, BSTR bstrCharSet/*[in]*/, 
                               TOLEBOOL bUseUTF8/*[in]*/)
  {
    BSTR pbstrResult = 0;
    OLECHECK(this->EncodeString(bstrValue, bstrCharSet, bUseUTF8, (BSTR*)&pbstrResult));
    return pbstrResult;
  }


  __property   TOLEBOOL        ShellFeaturesEnabled = {read = get_ShellFeaturesEnabled};
  __property   TOLEBOOL        SearchAssistantDefault = {read = get_SearchAssistantDefault};
  __property   Shdocvw_tlb::ISearchesPtr Searches = {read = get_Searches};
  __property   TOLEBOOL        InWebFolder = {read = get_InWebFolder};
  __property   TOLEBOOL        EventHandled = {write = set_EventHandled};
  __property   BSTR            ASProvider = {read = get_ASProvider, write = set_ASProvider};
  __property   int             ASSetting = {read = get_ASSetting, write = set_ASSetting};
  __property   int             Version = {read = get_Version};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ISearchAssistantOC2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {72423E8F-8011-11D2-BE79-00A0C9A83DA2}
// *********************************************************************//
interface ISearchAssistantOC2  : public Shdocvw_tlb::ISearchAssistantOC
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_ShowFindPrinter(TOLEBOOL* pbShowFindPrinter/*[out,retval]*/) = 0; // [26]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  TOLEBOOL __fastcall get_ShowFindPrinter(void)
  {
    TOLEBOOL pbShowFindPrinter;
    OLECHECK(this->get_ShowFindPrinter((TOLEBOOL*)&pbShowFindPrinter));
    return pbShowFindPrinter;
  }


  __property   TOLEBOOL        ShowFindPrinter = {read = get_ShowFindPrinter};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _SearchAssistantEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {1611FDDA-445B-11D2-85DE-00C04FA35C89}
// *********************************************************************//
interface _SearchAssistantEvents : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall OnNextMenuSelect(long idItem/*[in]*/)
  {
    _TDispID _dispid(/* OnNextMenuSelect */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = idItem /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OnNewSearch()
  {
    _TDispID _dispid(/* OnNewSearch */ DISPID(2));
    OleProcedure(_dispid);
  }


};
#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// SmartIntf: TCOMIWebBrowser
// Interface: IWebBrowser
// *********************************************************************//
template <class T /* IWebBrowser */ >
class TCOMIWebBrowserT : public TComInterface<IWebBrowser>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIWebBrowserT() {}
  TCOMIWebBrowserT(IWebBrowser *intf, bool addRef = false) : TComInterface<IWebBrowser>(intf, addRef) {}
  TCOMIWebBrowserT(const TCOMIWebBrowserT& src) : TComInterface<IWebBrowser>(src) {}
  TCOMIWebBrowserT& operator=(const TCOMIWebBrowserT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall GoBack(void);
  HRESULT         __fastcall GoForward(void);
  HRESULT         __fastcall GoHome(void);
  HRESULT         __fastcall GoSearch(void);
  HRESULT         __fastcall Navigate(BSTR URL/*[in]*/, TVariant* Flags/*[in,opt]*/= TNoParam(), 
                                      TVariant* TargetFrameName/*[in,opt]*/= TNoParam(), 
                                      TVariant* PostData/*[in,opt]*/= TNoParam(), 
                                      TVariant* Headers/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall Refresh(void);
  HRESULT         __fastcall Refresh2(TVariant* Level/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall Stop(void);
  HRESULT         __fastcall get_Application(LPDISPATCH* ppDisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT         __fastcall get_Parent(LPDISPATCH* ppDisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Container(LPDISPATCH* ppDisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Container(void);
  HRESULT         __fastcall get_Document(LPDISPATCH* ppDisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Document(void);
  HRESULT         __fastcall get_TopLevelContainer(TOLEBOOL* pBool/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TopLevelContainer(void);
  HRESULT         __fastcall get_Type(BSTR* Type/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall get_Left(long* pl/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(long pl/*[in]*/);
  HRESULT         __fastcall get_Top(long* pl/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(long pl/*[in]*/);
  HRESULT         __fastcall get_Width(long* pl/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(long pl/*[in]*/);
  HRESULT         __fastcall get_Height(long* pl/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(long pl/*[in]*/);
  HRESULT         __fastcall get_LocationName(BSTR* LocationName/*[out,retval]*/);
  BSTR            __fastcall get_LocationName(void);
  HRESULT         __fastcall get_LocationURL(BSTR* LocationURL/*[out,retval]*/);
  BSTR            __fastcall get_LocationURL(void);
  HRESULT         __fastcall get_Busy(TOLEBOOL* pBool/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Busy(void);

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Container = {read = get_Container};
  __property   LPDISPATCH      Document = {read = get_Document};
  __property   TOLEBOOL        TopLevelContainer = {read = get_TopLevelContainer};
  __property   BSTR            Type = {read = get_Type};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   BSTR            LocationName = {read = get_LocationName};
  __property   BSTR            LocationURL = {read = get_LocationURL};
  __property   TOLEBOOL        Busy = {read = get_Busy};
};
typedef TCOMIWebBrowserT<IWebBrowser> TCOMIWebBrowser;

// *********************************************************************//
// DispIntf:  IWebBrowser
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EAB22AC1-30C1-11CF-A7EB-0000C05BAE0B}
// *********************************************************************//
template<class T>
class IWebBrowserDispT : public TAutoDriver<IWebBrowser>
{
public:
  IWebBrowserDispT(){}

  IWebBrowserDispT(IWebBrowser *pintf)
  {
    TAutoDriver<IWebBrowser>::Bind(pintf, false);
  }

  IWebBrowserDispT(IWebBrowserPtr pintf)
  {
    TAutoDriver<IWebBrowser>::Bind(pintf, true);
  }

  IWebBrowserDispT& operator=(IWebBrowser *pintf)
  {
    TAutoDriver<IWebBrowser>::Bind(pintf, false);
    return *this;
  }

  IWebBrowserDispT& operator=(IWebBrowserPtr pintf)
  {
    TAutoDriver<IWebBrowser>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CppWebBrowser_V1));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CppWebBrowser_V1);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall GoBack();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GoForward();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GoHome();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GoSearch();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Navigate(BSTR URL/*[in]*/, 
                                                 TVariant* Flags/*[in,opt]*/= TNoParam(), 
                                                 TVariant* TargetFrameName/*[in,opt]*/= TNoParam(), 
                                                 TVariant* PostData/*[in,opt]*/= TNoParam(), 
                                                 TVariant* Headers/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Refresh();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Refresh2(TVariant* Level/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Stop();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppDisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* ppDisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Container(LPDISPATCH* ppDisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Container(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Document(LPDISPATCH* ppDisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Document(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TopLevelContainer(TOLEBOOL* pBool/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TopLevelContainer(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(BSTR* Type/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(long* pl/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(long pl/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(long* pl/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(long pl/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(long* pl/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(long pl/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(long* pl/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(long pl/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LocationName(BSTR* LocationName/*[out,retval]*/);
  BSTR            __fastcall get_LocationName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LocationURL(BSTR* LocationURL/*[out,retval]*/);
  BSTR            __fastcall get_LocationURL(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Busy(TOLEBOOL* pBool/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Busy(void);

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Container = {read = get_Container};
  __property   LPDISPATCH      Document = {read = get_Document};
  __property   TOLEBOOL        TopLevelContainer = {read = get_TopLevelContainer};
  __property   BSTR            Type = {read = get_Type};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   BSTR            LocationName = {read = get_LocationName};
  __property   BSTR            LocationURL = {read = get_LocationURL};
  __property   TOLEBOOL        Busy = {read = get_Busy};
};
typedef IWebBrowserDispT<IWebBrowser> IWebBrowserDisp;

// *********************************************************************//
// DispIntf:  DWebBrowserEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {EAB22AC2-30C1-11CF-A7EB-0000C05BAE0B}
// *********************************************************************//
template <class T>
class DWebBrowserEventsDispT : public TAutoDriver<DWebBrowserEvents>
{
public:
  DWebBrowserEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall BeforeNavigate(BSTR URL/*[in]*/, long Flags, BSTR TargetFrameName
                                                 , TVariant* PostData, BSTR Headers, 
                                                 TOLEBOOL* Cancel/*[in,out]*/);
  void /*[VT_VOID:0]*/ __fastcall NavigateComplete(BSTR URL/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall StatusTextChange(BSTR Text/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall ProgressChange(long Progress/*[in]*/, long ProgressMax/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall DownloadComplete();
  void /*[VT_VOID:0]*/ __fastcall CommandStateChange(long Command/*[in]*/, TOLEBOOL Enable/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall DownloadBegin();
  void /*[VT_VOID:0]*/ __fastcall NewWindow(BSTR URL/*[in]*/, long Flags/*[in]*/, 
                                            BSTR TargetFrameName/*[in]*/, TVariant* PostData/*[in]*/
                                            , BSTR Headers/*[in]*/, TOLEBOOL* Processed/*[in,out]*/);
  void /*[VT_VOID:0]*/ __fastcall TitleChange(BSTR Text/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall FrameBeforeNavigate(BSTR URL/*[in]*/, long Flags, 
                                                      BSTR TargetFrameName, TVariant* PostData, 
                                                      BSTR Headers, TOLEBOOL* Cancel/*[in,out]*/);
  void /*[VT_VOID:0]*/ __fastcall FrameNavigateComplete(BSTR URL/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall FrameNewWindow(BSTR URL/*[in]*/, long Flags/*[in]*/, 
                                                 BSTR TargetFrameName/*[in]*/, 
                                                 TVariant* PostData/*[in]*/, BSTR Headers/*[in]*/, 
                                                 TOLEBOOL* Processed/*[in,out]*/);
  void /*[VT_VOID:0]*/ __fastcall Quit(TOLEBOOL* Cancel/*[in,out]*/);
  void /*[VT_VOID:0]*/ __fastcall WindowMove();
  void /*[VT_VOID:0]*/ __fastcall WindowResize();
  void /*[VT_VOID:0]*/ __fastcall WindowActivate();
  void /*[VT_VOID:0]*/ __fastcall PropertyChange(BSTR Property/*[in]*/);

};
typedef DWebBrowserEventsDispT<DWebBrowserEvents> DWebBrowserEventsDisp;

typedef TComInterface<IWebBrowserApp>  TCOMIWebBrowserApp;

// *********************************************************************//
// DispIntf:  IWebBrowserApp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0002DF05-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class IWebBrowserAppDispT : public TAutoDriver<IWebBrowserApp>
{
public:
  IWebBrowserAppDispT(){}

  IWebBrowserAppDispT(IWebBrowserApp *pintf)
  {
    TAutoDriver<IWebBrowserApp>::Bind(pintf, false);
  }

  IWebBrowserAppDispT(IWebBrowserAppPtr pintf)
  {
    TAutoDriver<IWebBrowserApp>::Bind(pintf, true);
  }

  IWebBrowserAppDispT& operator=(IWebBrowserApp *pintf)
  {
    TAutoDriver<IWebBrowserApp>::Bind(pintf, false);
    return *this;
  }

  IWebBrowserAppDispT& operator=(IWebBrowserAppPtr pintf)
  {
    TAutoDriver<IWebBrowserApp>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall Quit();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ClientToWindow(int* pcx/*[in,out]*/, int* pcy/*[in,out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PutProperty(BSTR Property/*[in]*/, 
                                                    TVariantInParam vtValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetProperty(BSTR Property/*[in]*/, 
                                                    TVariant* pvtValue/*[out,retval]*/);
  TVariant        __fastcall GetProperty(BSTR Property/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HWND(long* pHWND/*[out,retval]*/);
  long            __fastcall get_HWND(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FullName(BSTR* FullName/*[out,retval]*/);
  BSTR            __fastcall get_FullName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Path(BSTR* Path/*[out,retval]*/);
  BSTR            __fastcall get_Path(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(TOLEBOOL* pBool/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(TOLEBOOL pBool/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_StatusBar(TOLEBOOL* pBool/*[out,retval]*/);
  TOLEBOOL        __fastcall get_StatusBar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_StatusBar(TOLEBOOL pBool/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_StatusText(BSTR* StatusText/*[out,retval]*/);
  BSTR            __fastcall get_StatusText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_StatusText(BSTR StatusText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ToolBar(int* Value/*[out,retval]*/);
  int             __fastcall get_ToolBar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ToolBar(int Value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MenuBar(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_MenuBar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MenuBar(TOLEBOOL Value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FullScreen(TOLEBOOL* pbFullScreen/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FullScreen(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FullScreen(TOLEBOOL pbFullScreen/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GoBack();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GoForward();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GoHome();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GoSearch();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Navigate(BSTR URL/*[in]*/, 
                                                 TVariant* Flags/*[in,opt]*/= TNoParam(), 
                                                 TVariant* TargetFrameName/*[in,opt]*/= TNoParam(), 
                                                 TVariant* PostData/*[in,opt]*/= TNoParam(), 
                                                 TVariant* Headers/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Refresh();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Refresh2(TVariant* Level/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Stop();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppDisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* ppDisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Container(LPDISPATCH* ppDisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Container(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Document(LPDISPATCH* ppDisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Document(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TopLevelContainer(TOLEBOOL* pBool/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TopLevelContainer(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(BSTR* Type/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(long* pl/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(long pl/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(long* pl/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(long pl/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(long* pl/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(long pl/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(long* pl/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(long pl/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LocationName(BSTR* LocationName/*[out,retval]*/);
  BSTR            __fastcall get_LocationName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LocationURL(BSTR* LocationURL/*[out,retval]*/);
  BSTR            __fastcall get_LocationURL(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Busy(TOLEBOOL* pBool/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Busy(void);

  __property   BSTR            Name = {read = get_Name};
  __property   long            HWND = {read = get_HWND};
  __property   BSTR            FullName = {read = get_FullName};
  __property   BSTR            Path = {read = get_Path};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   TOLEBOOL        StatusBar = {read = get_StatusBar, write = set_StatusBar};
  __property   BSTR            StatusText = {read = get_StatusText, write = set_StatusText};
  __property   int             ToolBar = {read = get_ToolBar, write = set_ToolBar};
  __property   TOLEBOOL        MenuBar = {read = get_MenuBar, write = set_MenuBar};
  __property   TOLEBOOL        FullScreen = {read = get_FullScreen, write = set_FullScreen};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Container = {read = get_Container};
  __property   LPDISPATCH      Document = {read = get_Document};
  __property   TOLEBOOL        TopLevelContainer = {read = get_TopLevelContainer};
  __property   BSTR            Type = {read = get_Type};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   BSTR            LocationName = {read = get_LocationName};
  __property   BSTR            LocationURL = {read = get_LocationURL};
  __property   TOLEBOOL        Busy = {read = get_Busy};
};
typedef IWebBrowserAppDispT<IWebBrowserApp> IWebBrowserAppDisp;

// *********************************************************************//
// SmartIntf: TCOMIWebBrowser2
// Interface: IWebBrowser2
// *********************************************************************//
template <class T /* IWebBrowser2 */ >
class TCOMIWebBrowser2T : public TComInterface<IWebBrowser2>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIWebBrowser2T() {}
  TCOMIWebBrowser2T(IWebBrowser2 *intf, bool addRef = false) : TComInterface<IWebBrowser2>(intf, addRef) {}
  TCOMIWebBrowser2T(const TCOMIWebBrowser2T& src) : TComInterface<IWebBrowser2>(src) {}
  TCOMIWebBrowser2T& operator=(const TCOMIWebBrowser2T& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall Navigate2(TVariant* URL/*[in]*/, 
                                       TVariant* Flags/*[in,opt]*/= TNoParam(), 
                                       TVariant* TargetFrameName/*[in,opt]*/= TNoParam(), 
                                       TVariant* PostData/*[in,opt]*/= TNoParam(), 
                                       TVariant* Headers/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall QueryStatusWB(Shdocvw_tlb::OLECMDID cmdID/*[in]*/, 
                                           Shdocvw_tlb::OLECMDF* pcmdf/*[out,retval]*/);
  Shdocvw_tlb::OLECMDF __fastcall QueryStatusWB(Shdocvw_tlb::OLECMDID cmdID/*[in]*/);
  HRESULT         __fastcall ExecWB(Shdocvw_tlb::OLECMDID cmdID/*[in]*/, 
                                    Shdocvw_tlb::OLECMDEXECOPT cmdexecopt/*[in]*/, 
                                    TVariant* pvaIn/*[in,opt]*/= TNoParam(), 
                                    TVariant* pvaOut/*[in,out,opt]*/= TNoParam());
  HRESULT         __fastcall ShowBrowserBar(TVariant* pvaClsid/*[in]*/, 
                                            TVariant* pvarShow/*[in,opt]*/= TNoParam(), 
                                            TVariant* pvarSize/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall get_ReadyState(Shdocvw_tlb::tagREADYSTATE* plReadyState/*[out,retval]*/);
  Shdocvw_tlb::tagREADYSTATE __fastcall get_ReadyState(void);
  HRESULT         __fastcall get_Offline(TOLEBOOL* pbOffline/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Offline(void);
  HRESULT         __fastcall set_Offline(TOLEBOOL pbOffline/*[in]*/);
  HRESULT         __fastcall get_Silent(TOLEBOOL* pbSilent/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Silent(void);
  HRESULT         __fastcall set_Silent(TOLEBOOL pbSilent/*[in]*/);
  HRESULT         __fastcall get_RegisterAsBrowser(TOLEBOOL* pbRegister/*[out,retval]*/);
  TOLEBOOL        __fastcall get_RegisterAsBrowser(void);
  HRESULT         __fastcall set_RegisterAsBrowser(TOLEBOOL pbRegister/*[in]*/);
  HRESULT         __fastcall get_RegisterAsDropTarget(TOLEBOOL* pbRegister/*[out,retval]*/);
  TOLEBOOL        __fastcall get_RegisterAsDropTarget(void);
  HRESULT         __fastcall set_RegisterAsDropTarget(TOLEBOOL pbRegister/*[in]*/);
  HRESULT         __fastcall get_TheaterMode(TOLEBOOL* pbRegister/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TheaterMode(void);
  HRESULT         __fastcall set_TheaterMode(TOLEBOOL pbRegister/*[in]*/);
  HRESULT         __fastcall get_AddressBar(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AddressBar(void);
  HRESULT         __fastcall set_AddressBar(TOLEBOOL Value/*[in]*/);
  HRESULT         __fastcall get_Resizable(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Resizable(void);
  HRESULT         __fastcall set_Resizable(TOLEBOOL Value/*[in]*/);

  __property   Shdocvw_tlb::tagREADYSTATE ReadyState = {read = get_ReadyState};
  __property   TOLEBOOL        Offline = {read = get_Offline, write = set_Offline};
  __property   TOLEBOOL        Silent = {read = get_Silent, write = set_Silent};
  __property   TOLEBOOL        RegisterAsBrowser = {read = get_RegisterAsBrowser, write = set_RegisterAsBrowser};
  __property   TOLEBOOL        RegisterAsDropTarget = {read = get_RegisterAsDropTarget, write = set_RegisterAsDropTarget};
  __property   TOLEBOOL        TheaterMode = {read = get_TheaterMode, write = set_TheaterMode};
  __property   TOLEBOOL        AddressBar = {read = get_AddressBar, write = set_AddressBar};
  __property   TOLEBOOL        Resizable = {read = get_Resizable, write = set_Resizable};
};
typedef TCOMIWebBrowser2T<IWebBrowser2> TCOMIWebBrowser2;

// *********************************************************************//
// DispIntf:  IWebBrowser2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D30C1661-CDAF-11D0-8A3E-00C04FC9E26E}
// *********************************************************************//
template<class T>
class IWebBrowser2DispT : public TAutoDriver<IWebBrowser2>
{
public:
  IWebBrowser2DispT(){}

  IWebBrowser2DispT(IWebBrowser2 *pintf)
  {
    TAutoDriver<IWebBrowser2>::Bind(pintf, false);
  }

  IWebBrowser2DispT(IWebBrowser2Ptr pintf)
  {
    TAutoDriver<IWebBrowser2>::Bind(pintf, true);
  }

  IWebBrowser2DispT& operator=(IWebBrowser2 *pintf)
  {
    TAutoDriver<IWebBrowser2>::Bind(pintf, false);
    return *this;
  }

  IWebBrowser2DispT& operator=(IWebBrowser2Ptr pintf)
  {
    TAutoDriver<IWebBrowser2>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CppWebBrowser));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CppWebBrowser);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall Navigate2(TVariant* URL/*[in]*/, 
                                                  TVariant* Flags/*[in,opt]*/= TNoParam(), 
                                                  TVariant* TargetFrameName/*[in,opt]*/= TNoParam()
                                                  , TVariant* PostData/*[in,opt]*/= TNoParam(), 
                                                  TVariant* Headers/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall QueryStatusWB(Shdocvw_tlb::OLECMDID cmdID/*[in]*/, 
                                                      Shdocvw_tlb::OLECMDF* pcmdf/*[out,retval]*/);
  Shdocvw_tlb::OLECMDF __fastcall QueryStatusWB(Shdocvw_tlb::OLECMDID cmdID/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ExecWB(Shdocvw_tlb::OLECMDID cmdID/*[in]*/, 
                                               Shdocvw_tlb::OLECMDEXECOPT cmdexecopt/*[in]*/, 
                                               TVariant* pvaIn/*[in,opt]*/= TNoParam(), 
                                               TVariant* pvaOut/*[in,out,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ShowBrowserBar(TVariant* pvaClsid/*[in]*/, 
                                                       TVariant* pvarShow/*[in,opt]*/= TNoParam(), 
                                                       TVariant* pvarSize/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ReadyState(Shdocvw_tlb::tagREADYSTATE* plReadyState/*[out,retval]*/);
  Shdocvw_tlb::tagREADYSTATE __fastcall get_ReadyState(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Offline(TOLEBOOL* pbOffline/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Offline(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Offline(TOLEBOOL pbOffline/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Silent(TOLEBOOL* pbSilent/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Silent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Silent(TOLEBOOL pbSilent/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RegisterAsBrowser(TOLEBOOL* pbRegister/*[out,retval]*/);
  TOLEBOOL        __fastcall get_RegisterAsBrowser(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RegisterAsBrowser(TOLEBOOL pbRegister/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RegisterAsDropTarget(TOLEBOOL* pbRegister/*[out,retval]*/);
  TOLEBOOL        __fastcall get_RegisterAsDropTarget(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RegisterAsDropTarget(TOLEBOOL pbRegister/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TheaterMode(TOLEBOOL* pbRegister/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TheaterMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TheaterMode(TOLEBOOL pbRegister/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AddressBar(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AddressBar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AddressBar(TOLEBOOL Value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Resizable(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Resizable(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Resizable(TOLEBOOL Value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Quit();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ClientToWindow(int* pcx/*[in,out]*/, int* pcy/*[in,out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PutProperty(BSTR Property/*[in]*/, 
                                                    TVariantInParam vtValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetProperty(BSTR Property/*[in]*/, 
                                                    TVariant* pvtValue/*[out,retval]*/);
  TVariant        __fastcall GetProperty(BSTR Property/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HWND(long* pHWND/*[out,retval]*/);
  long            __fastcall get_HWND(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FullName(BSTR* FullName/*[out,retval]*/);
  BSTR            __fastcall get_FullName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Path(BSTR* Path/*[out,retval]*/);
  BSTR            __fastcall get_Path(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(TOLEBOOL* pBool/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(TOLEBOOL pBool/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_StatusBar(TOLEBOOL* pBool/*[out,retval]*/);
  TOLEBOOL        __fastcall get_StatusBar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_StatusBar(TOLEBOOL pBool/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_StatusText(BSTR* StatusText/*[out,retval]*/);
  BSTR            __fastcall get_StatusText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_StatusText(BSTR StatusText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ToolBar(int* Value/*[out,retval]*/);
  int             __fastcall get_ToolBar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ToolBar(int Value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MenuBar(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_MenuBar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MenuBar(TOLEBOOL Value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FullScreen(TOLEBOOL* pbFullScreen/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FullScreen(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FullScreen(TOLEBOOL pbFullScreen/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GoBack();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GoForward();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GoHome();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GoSearch();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Navigate(BSTR URL/*[in]*/, 
                                                 TVariant* Flags/*[in,opt]*/= TNoParam(), 
                                                 TVariant* TargetFrameName/*[in,opt]*/= TNoParam(), 
                                                 TVariant* PostData/*[in,opt]*/= TNoParam(), 
                                                 TVariant* Headers/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Refresh();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Refresh2(TVariant* Level/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Stop();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppDisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* ppDisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Container(LPDISPATCH* ppDisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Container(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Document(LPDISPATCH* ppDisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Document(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TopLevelContainer(TOLEBOOL* pBool/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TopLevelContainer(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(BSTR* Type/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(long* pl/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(long pl/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(long* pl/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(long pl/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(long* pl/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(long pl/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(long* pl/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(long pl/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LocationName(BSTR* LocationName/*[out,retval]*/);
  BSTR            __fastcall get_LocationName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LocationURL(BSTR* LocationURL/*[out,retval]*/);
  BSTR            __fastcall get_LocationURL(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Busy(TOLEBOOL* pBool/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Busy(void);

  __property   Shdocvw_tlb::tagREADYSTATE ReadyState = {read = get_ReadyState};
  __property   TOLEBOOL        Offline = {read = get_Offline, write = set_Offline};
  __property   TOLEBOOL        Silent = {read = get_Silent, write = set_Silent};
  __property   TOLEBOOL        RegisterAsBrowser = {read = get_RegisterAsBrowser, write = set_RegisterAsBrowser};
  __property   TOLEBOOL        RegisterAsDropTarget = {read = get_RegisterAsDropTarget, write = set_RegisterAsDropTarget};
  __property   TOLEBOOL        TheaterMode = {read = get_TheaterMode, write = set_TheaterMode};
  __property   TOLEBOOL        AddressBar = {read = get_AddressBar, write = set_AddressBar};
  __property   TOLEBOOL        Resizable = {read = get_Resizable, write = set_Resizable};

  __property   BSTR            Name = {read = get_Name};
  __property   long            HWND = {read = get_HWND};
  __property   BSTR            FullName = {read = get_FullName};
  __property   BSTR            Path = {read = get_Path};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   TOLEBOOL        StatusBar = {read = get_StatusBar, write = set_StatusBar};
  __property   BSTR            StatusText = {read = get_StatusText, write = set_StatusText};
  __property   int             ToolBar = {read = get_ToolBar, write = set_ToolBar};
  __property   TOLEBOOL        MenuBar = {read = get_MenuBar, write = set_MenuBar};
  __property   TOLEBOOL        FullScreen = {read = get_FullScreen, write = set_FullScreen};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Container = {read = get_Container};
  __property   LPDISPATCH      Document = {read = get_Document};
  __property   TOLEBOOL        TopLevelContainer = {read = get_TopLevelContainer};
  __property   BSTR            Type = {read = get_Type};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   BSTR            LocationName = {read = get_LocationName};
  __property   BSTR            LocationURL = {read = get_LocationURL};
  __property   TOLEBOOL        Busy = {read = get_Busy};
};
typedef IWebBrowser2DispT<IWebBrowser2> IWebBrowser2Disp;

// *********************************************************************//
// DispIntf:  DWebBrowserEvents2
// Flags:     (4112) Hidden Dispatchable
// GUID:      {34A715A0-6587-11D0-924A-0020AFC7AC4D}
// *********************************************************************//
template <class T>
class DWebBrowserEvents2DispT : public TAutoDriver<DWebBrowserEvents2>
{
public:
  DWebBrowserEvents2DispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall StatusTextChange(BSTR Text/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall ProgressChange(long Progress/*[in]*/, long ProgressMax/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall CommandStateChange(long Command/*[in]*/, TOLEBOOL Enable/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall DownloadBegin();
  void /*[VT_VOID:0]*/ __fastcall DownloadComplete();
  void /*[VT_VOID:0]*/ __fastcall TitleChange(BSTR Text/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall PropertyChange(BSTR szProperty/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall BeforeNavigate2(LPDISPATCH pDisp/*[in]*/, TVariant* URL/*[in]*/, 
                                                  TVariant* Flags/*[in]*/, 
                                                  TVariant* TargetFrameName/*[in]*/, 
                                                  TVariant* PostData/*[in]*/, 
                                                  TVariant* Headers/*[in]*/, 
                                                  TOLEBOOL* Cancel/*[in,out]*/);
  void /*[VT_VOID:0]*/ __fastcall NewWindow2(LPDISPATCH* ppDisp/*[in,out]*/, 
                                             TOLEBOOL* Cancel/*[in,out]*/);
  void /*[VT_VOID:0]*/ __fastcall NavigateComplete2(LPDISPATCH pDisp/*[in]*/, TVariant* URL/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall DocumentComplete(LPDISPATCH pDisp/*[in]*/, TVariant* URL/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall OnQuit();
  void /*[VT_VOID:0]*/ __fastcall OnVisible(TOLEBOOL Visible/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall OnToolBar(TOLEBOOL ToolBar/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall OnMenuBar(TOLEBOOL MenuBar/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall OnStatusBar(TOLEBOOL StatusBar/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall OnFullScreen(TOLEBOOL FullScreen/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall OnTheaterMode(TOLEBOOL TheaterMode/*[in]*/);

};
typedef DWebBrowserEvents2DispT<DWebBrowserEvents2> DWebBrowserEvents2Disp;

// *********************************************************************//
// DispIntf:  DShellWindowsEvents
// Flags:     (4096) Dispatchable
// GUID:      {FE4106E0-399A-11D0-A48C-00A0C90A8F39}
// *********************************************************************//
template <class T>
class DShellWindowsEventsDispT : public TAutoDriver<DShellWindowsEvents>
{
public:
  DShellWindowsEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall WindowRegistered(long lCookie/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall WindowRevoked(long lCookie/*[in]*/);

};
typedef DShellWindowsEventsDispT<DShellWindowsEvents> DShellWindowsEventsDisp;

// *********************************************************************//
// SmartIntf: TCOMIShellWindows
// Interface: IShellWindows
// *********************************************************************//
template <class T /* IShellWindows */ >
class TCOMIShellWindowsT : public TComInterface<IShellWindows>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIShellWindowsT() {}
  TCOMIShellWindowsT(IShellWindows *intf, bool addRef = false) : TComInterface<IShellWindows>(intf, addRef) {}
  TCOMIShellWindowsT(const TCOMIShellWindowsT& src) : TComInterface<IShellWindows>(src) {}
  TCOMIShellWindowsT& operator=(const TCOMIShellWindowsT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Item(TVariantInParam index/*[in,opt]*/, 
                                  LPDISPATCH* Folder/*[out,retval]*/);
  LPDISPATCH      __fastcall Item(TVariantInParam index/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall _NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);
  HRESULT         __fastcall Register(LPDISPATCH pid/*[in]*/, long HWND/*[in]*/, int swClass/*[in]*/, 
                                      long* plCookie/*[out]*/);
  HRESULT         __fastcall RegisterPending(long lThreadId/*[in]*/, TVariant* pvarloc/*[in]*/, 
                                             TVariant* pvarlocRoot/*[in]*/, int swClass/*[in]*/, 
                                             long* plCookie/*[out]*/);
  HRESULT         __fastcall Revoke(long lCookie/*[in]*/);
  HRESULT         __fastcall OnNavigate(long lCookie/*[in]*/, TVariant* pvarloc/*[in]*/);
  HRESULT         __fastcall OnActivated(long lCookie/*[in]*/, TOLEBOOL fActive/*[in]*/);
  HRESULT         __fastcall FindWindow(TVariant* pvarloc/*[in]*/, TVariant* pvarlocRoot/*[in]*/, 
                                        int swClass/*[in]*/, long* pHWND/*[out]*/, 
                                        int swfwOptions/*[in]*/, 
                                        LPDISPATCH* ppdispOut/*[out,retval]*/);
  LPDISPATCH      __fastcall FindWindow(TVariant* pvarloc/*[in]*/, TVariant* pvarlocRoot/*[in]*/, 
                                        int swClass/*[in]*/, long* pHWND/*[out]*/, 
                                        int swfwOptions/*[in]*/);
  HRESULT         __fastcall OnCreated(long lCookie/*[in]*/, LPUNKNOWN punk/*[in]*/);
  HRESULT         __fastcall ProcessAttachDetach(TOLEBOOL fAttach/*[in]*/);

  __property   long            Count = {read = get_Count};
};
typedef TCOMIShellWindowsT<IShellWindows> TCOMIShellWindows;

// *********************************************************************//
// DispIntf:  IShellWindows
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {85CB6900-4D95-11CF-960C-0080C7F4EE85}
// *********************************************************************//
template<class T>
class IShellWindowsDispT : public TAutoDriver<IShellWindows>
{
public:
  IShellWindowsDispT(){}

  IShellWindowsDispT(IShellWindows *pintf)
  {
    TAutoDriver<IShellWindows>::Bind(pintf, false);
  }

  IShellWindowsDispT(IShellWindowsPtr pintf)
  {
    TAutoDriver<IShellWindows>::Bind(pintf, true);
  }

  IShellWindowsDispT& operator=(IShellWindows *pintf)
  {
    TAutoDriver<IShellWindows>::Bind(pintf, false);
    return *this;
  }

  IShellWindowsDispT& operator=(IShellWindowsPtr pintf)
  {
    TAutoDriver<IShellWindows>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CppShellWindows));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CppShellWindows);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(TVariantInParam index/*[in,opt]*/, 
                                             LPDISPATCH* Folder/*[out,retval]*/);
  LPDISPATCH      __fastcall Item(TVariantInParam index/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Register(LPDISPATCH pid/*[in]*/, long HWND/*[in]*/, 
                                                 int swClass/*[in]*/, long* plCookie/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RegisterPending(long lThreadId/*[in]*/, 
                                                        TVariant* pvarloc/*[in]*/, 
                                                        TVariant* pvarlocRoot/*[in]*/, 
                                                        int swClass/*[in]*/, long* plCookie/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Revoke(long lCookie/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall OnNavigate(long lCookie/*[in]*/, TVariant* pvarloc/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall OnActivated(long lCookie/*[in]*/, TOLEBOOL fActive/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall FindWindow(TVariant* pvarloc/*[in]*/, 
                                                   TVariant* pvarlocRoot/*[in]*/, 
                                                   int swClass/*[in]*/, long* pHWND/*[out]*/, 
                                                   int swfwOptions/*[in]*/, 
                                                   LPDISPATCH* ppdispOut/*[out,retval]*/);
  LPDISPATCH      __fastcall FindWindow(TVariant* pvarloc/*[in]*/, TVariant* pvarlocRoot/*[in]*/, 
                                        int swClass/*[in]*/, long* pHWND/*[out]*/, 
                                        int swfwOptions/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall OnCreated(long lCookie/*[in]*/, LPUNKNOWN punk/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ProcessAttachDetach(TOLEBOOL fAttach/*[in]*/);

  __property   long            Count = {read = get_Count};
};
typedef IShellWindowsDispT<IShellWindows> IShellWindowsDisp;

// *********************************************************************//
// SmartIntf: TCOMIShellUIHelper
// Interface: IShellUIHelper
// *********************************************************************//
template <class T /* IShellUIHelper */ >
class TCOMIShellUIHelperT : public TComInterface<IShellUIHelper>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIShellUIHelperT() {}
  TCOMIShellUIHelperT(IShellUIHelper *intf, bool addRef = false) : TComInterface<IShellUIHelper>(intf, addRef) {}
  TCOMIShellUIHelperT(const TCOMIShellUIHelperT& src) : TComInterface<IShellUIHelper>(src) {}
  TCOMIShellUIHelperT& operator=(const TCOMIShellUIHelperT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall ResetFirstBootMode(void);
  HRESULT         __fastcall ResetSafeMode(void);
  HRESULT         __fastcall RefreshOfflineDesktop(void);
  HRESULT         __fastcall AddFavorite(BSTR URL/*[in]*/, TVariant* Title/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall AddChannel(BSTR URL/*[in]*/);
  HRESULT         __fastcall AddDesktopComponent(BSTR URL/*[in]*/, BSTR Type/*[in]*/, 
                                                 TVariant* Left/*[in,opt]*/= TNoParam(), 
                                                 TVariant* Top/*[in,opt]*/= TNoParam(), 
                                                 TVariant* Width/*[in,opt]*/= TNoParam(), 
                                                 TVariant* Height/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall IsSubscribed(BSTR URL/*[in]*/, TOLEBOOL* pBool/*[out,retval]*/);
  TOLEBOOL        __fastcall IsSubscribed(BSTR URL/*[in]*/);
  HRESULT         __fastcall NavigateAndFind(BSTR URL/*[in]*/, BSTR strQuery/*[in]*/, 
                                             TVariant* varTargetFrame/*[in]*/);
  HRESULT         __fastcall ImportExportFavorites(TOLEBOOL fImport/*[in]*/, 
                                                   BSTR strImpExpPath/*[in]*/);
  HRESULT         __fastcall AutoCompleteSaveForm(TVariant* Form/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall AutoScan(BSTR strSearch/*[in]*/, BSTR strFailureUrl/*[in]*/, 
                                      TVariant* pvarTargetFrame/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall AutoCompleteAttach(TVariant* Reserved/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall ShowBrowserUI(BSTR bstrName/*[in]*/, TVariant* pvarIn/*[in]*/, 
                                           TVariant* pvarOut/*[out,retval]*/);
  TVariant        __fastcall ShowBrowserUI(BSTR bstrName/*[in]*/, TVariant* pvarIn/*[in]*/);

};
typedef TCOMIShellUIHelperT<IShellUIHelper> TCOMIShellUIHelper;

// *********************************************************************//
// DispIntf:  IShellUIHelper
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {729FE2F8-1EA8-11D1-8F85-00C04FC2FBE1}
// *********************************************************************//
template<class T>
class IShellUIHelperDispT : public TAutoDriver<IShellUIHelper>
{
public:
  IShellUIHelperDispT(){}

  IShellUIHelperDispT(IShellUIHelper *pintf)
  {
    TAutoDriver<IShellUIHelper>::Bind(pintf, false);
  }

  IShellUIHelperDispT(IShellUIHelperPtr pintf)
  {
    TAutoDriver<IShellUIHelper>::Bind(pintf, true);
  }

  IShellUIHelperDispT& operator=(IShellUIHelper *pintf)
  {
    TAutoDriver<IShellUIHelper>::Bind(pintf, false);
    return *this;
  }

  IShellUIHelperDispT& operator=(IShellUIHelperPtr pintf)
  {
    TAutoDriver<IShellUIHelper>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CppShellUIHelper));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CppShellUIHelper);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall ResetFirstBootMode();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ResetSafeMode();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RefreshOfflineDesktop();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddFavorite(BSTR URL/*[in]*/, 
                                                    TVariant* Title/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddChannel(BSTR URL/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddDesktopComponent(BSTR URL/*[in]*/, BSTR Type/*[in]*/, 
                                                            TVariant* Left/*[in,opt]*/= TNoParam(), 
                                                            TVariant* Top/*[in,opt]*/= TNoParam(), 
                                                            TVariant* Width/*[in,opt]*/= TNoParam()
                                                            , 
                                                            TVariant* Height/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IsSubscribed(BSTR URL/*[in]*/, 
                                                     TOLEBOOL* pBool/*[out,retval]*/);
  TOLEBOOL        __fastcall IsSubscribed(BSTR URL/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall NavigateAndFind(BSTR URL/*[in]*/, BSTR strQuery/*[in]*/, 
                                                        TVariant* varTargetFrame/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ImportExportFavorites(TOLEBOOL fImport/*[in]*/, 
                                                              BSTR strImpExpPath/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AutoCompleteSaveForm(TVariant* Form/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AutoScan(BSTR strSearch/*[in]*/, BSTR strFailureUrl/*[in]*/
                                                 , TVariant* pvarTargetFrame/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AutoCompleteAttach(TVariant* Reserved/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ShowBrowserUI(BSTR bstrName/*[in]*/, 
                                                      TVariant* pvarIn/*[in]*/, 
                                                      TVariant* pvarOut/*[out,retval]*/);
  TVariant        __fastcall ShowBrowserUI(BSTR bstrName/*[in]*/, TVariant* pvarIn/*[in]*/);

};
typedef IShellUIHelperDispT<IShellUIHelper> IShellUIHelperDisp;

// *********************************************************************//
// DispIntf:  _ShellFavoritesNameSpaceEvents
// Flags:     (4096) Dispatchable
// GUID:      {55136806-B2DE-11D1-B9F2-00A0C98BC547}
// *********************************************************************//
template <class T>
class _ShellFavoritesNameSpaceEventsDispT : public TAutoDriver<_ShellFavoritesNameSpaceEvents>
{
public:
  _ShellFavoritesNameSpaceEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall FavoritesSelectionChange(long cItems/*[in]*/, long hItem/*[in]*/, 
                                                           BSTR strName/*[in]*/, BSTR strUrl/*[in]*/
                                                           , long cVisits/*[in]*/, 
                                                           BSTR strDate/*[in]*/, 
                                                           long fAvailableOffline/*[in]*/);

};
typedef _ShellFavoritesNameSpaceEventsDispT<_ShellFavoritesNameSpaceEvents> _ShellFavoritesNameSpaceEventsDisp;

// *********************************************************************//
// SmartIntf: TCOMIShellFavoritesNameSpace
// Interface: IShellFavoritesNameSpace
// *********************************************************************//
template <class T /* IShellFavoritesNameSpace */ >
class TCOMIShellFavoritesNameSpaceT : public TComInterface<IShellFavoritesNameSpace>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIShellFavoritesNameSpaceT() {}
  TCOMIShellFavoritesNameSpaceT(IShellFavoritesNameSpace *intf, bool addRef = false) : TComInterface<IShellFavoritesNameSpace>(intf, addRef) {}
  TCOMIShellFavoritesNameSpaceT(const TCOMIShellFavoritesNameSpaceT& src) : TComInterface<IShellFavoritesNameSpace>(src) {}
  TCOMIShellFavoritesNameSpaceT& operator=(const TCOMIShellFavoritesNameSpaceT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall MoveSelectionUp(void);
  HRESULT         __fastcall MoveSelectionDown(void);
  HRESULT         __fastcall ResetSort(void);
  HRESULT         __fastcall NewFolder(void);
  HRESULT         __fastcall Synchronize(void);
  HRESULT         __fastcall Import(void);
  HRESULT         __fastcall Export(void);
  HRESULT         __fastcall InvokeContextMenuCommand(BSTR strCommand/*[in]*/);
  HRESULT         __fastcall MoveSelectionTo(void);
  HRESULT         __fastcall get_FOfflinePackInstalled(TOLEBOOL* pBool/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FOfflinePackInstalled(void);
  HRESULT         __fastcall CreateSubscriptionForSelection(TOLEBOOL* pBool/*[out,retval]*/);
  TOLEBOOL        __fastcall CreateSubscriptionForSelection(void);
  HRESULT         __fastcall DeleteSubscriptionForSelection(TOLEBOOL* pBool/*[out,retval]*/);
  TOLEBOOL        __fastcall DeleteSubscriptionForSelection(void);
  HRESULT         __fastcall SetRoot(BSTR bstrFullPath/*[in]*/);

  __property   TOLEBOOL        FOfflinePackInstalled = {read = get_FOfflinePackInstalled};
};
typedef TCOMIShellFavoritesNameSpaceT<IShellFavoritesNameSpace> TCOMIShellFavoritesNameSpace;

// *********************************************************************//
// DispIntf:  IShellFavoritesNameSpace
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {55136804-B2DE-11D1-B9F2-00A0C98BC547}
// *********************************************************************//
template<class T>
class IShellFavoritesNameSpaceDispT : public TAutoDriver<IShellFavoritesNameSpace>
{
public:
  IShellFavoritesNameSpaceDispT(){}

  IShellFavoritesNameSpaceDispT(IShellFavoritesNameSpace *pintf)
  {
    TAutoDriver<IShellFavoritesNameSpace>::Bind(pintf, false);
  }

  IShellFavoritesNameSpaceDispT(IShellFavoritesNameSpacePtr pintf)
  {
    TAutoDriver<IShellFavoritesNameSpace>::Bind(pintf, true);
  }

  IShellFavoritesNameSpaceDispT& operator=(IShellFavoritesNameSpace *pintf)
  {
    TAutoDriver<IShellFavoritesNameSpace>::Bind(pintf, false);
    return *this;
  }

  IShellFavoritesNameSpaceDispT& operator=(IShellFavoritesNameSpacePtr pintf)
  {
    TAutoDriver<IShellFavoritesNameSpace>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ShellFavoritesNameSpace));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ShellFavoritesNameSpace);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall MoveSelectionUp();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall MoveSelectionDown();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ResetSort();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall NewFolder();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Synchronize();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Import();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Export();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall InvokeContextMenuCommand(BSTR strCommand/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall MoveSelectionTo();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FOfflinePackInstalled(TOLEBOOL* pBool/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FOfflinePackInstalled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CreateSubscriptionForSelection(TOLEBOOL* pBool/*[out,retval]*/);
  TOLEBOOL        __fastcall CreateSubscriptionForSelection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DeleteSubscriptionForSelection(TOLEBOOL* pBool/*[out,retval]*/);
  TOLEBOOL        __fastcall DeleteSubscriptionForSelection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetRoot(BSTR bstrFullPath/*[in]*/);

  __property   TOLEBOOL        FOfflinePackInstalled = {read = get_FOfflinePackInstalled};
};
typedef IShellFavoritesNameSpaceDispT<IShellFavoritesNameSpace> IShellFavoritesNameSpaceDisp;

// *********************************************************************//
// SmartIntf: TCOMIScriptErrorList
// Interface: IScriptErrorList
// *********************************************************************//
template <class T /* IScriptErrorList */ >
class TCOMIScriptErrorListT : public TComInterface<IScriptErrorList>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIScriptErrorListT() {}
  TCOMIScriptErrorListT(IScriptErrorList *intf, bool addRef = false) : TComInterface<IScriptErrorList>(intf, addRef) {}
  TCOMIScriptErrorListT(const TCOMIScriptErrorListT& src) : TComInterface<IScriptErrorList>(src) {}
  TCOMIScriptErrorListT& operator=(const TCOMIScriptErrorListT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall advanceError(void);
  HRESULT         __fastcall retreatError(void);
  HRESULT         __fastcall canAdvanceError(long* pfCanAdvance/*[out,retval]*/);
  long            __fastcall canAdvanceError(void);
  HRESULT         __fastcall canRetreatError(long* pfCanRetreat/*[out,retval]*/);
  long            __fastcall canRetreatError(void);
  HRESULT         __fastcall getErrorLine(long* plLine/*[out,retval]*/);
  long            __fastcall getErrorLine(void);
  HRESULT         __fastcall getErrorChar(long* plChar/*[out,retval]*/);
  long            __fastcall getErrorChar(void);
  HRESULT         __fastcall getErrorCode(long* plCode/*[out,retval]*/);
  long            __fastcall getErrorCode(void);
  HRESULT         __fastcall getErrorMsg(BSTR* pstr/*[out,retval]*/);
  BSTR            __fastcall getErrorMsg(void);
  HRESULT         __fastcall getErrorUrl(BSTR* pstr/*[out,retval]*/);
  BSTR            __fastcall getErrorUrl(void);
  HRESULT         __fastcall getAlwaysShowLockState(long* pfAlwaysShowLocked/*[out,retval]*/);
  long            __fastcall getAlwaysShowLockState(void);
  HRESULT         __fastcall getDetailsPaneOpen(long* pfDetailsPaneOpen/*[out,retval]*/);
  long            __fastcall getDetailsPaneOpen(void);
  HRESULT         __fastcall setDetailsPaneOpen(long fDetailsPaneOpen);
  HRESULT         __fastcall getPerErrorDisplay(long* pfPerErrorDisplay/*[out,retval]*/);
  long            __fastcall getPerErrorDisplay(void);
  HRESULT         __fastcall setPerErrorDisplay(long fPerErrorDisplay);

};
typedef TCOMIScriptErrorListT<IScriptErrorList> TCOMIScriptErrorList;

// *********************************************************************//
// DispIntf:  IScriptErrorList
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F3470F24-15FD-11D2-BB2E-00805FF7EFCA}
// *********************************************************************//
template<class T>
class IScriptErrorListDispT : public TAutoDriver<IScriptErrorList>
{
public:
  IScriptErrorListDispT(){}

  IScriptErrorListDispT(IScriptErrorList *pintf)
  {
    TAutoDriver<IScriptErrorList>::Bind(pintf, false);
  }

  IScriptErrorListDispT(IScriptErrorListPtr pintf)
  {
    TAutoDriver<IScriptErrorList>::Bind(pintf, true);
  }

  IScriptErrorListDispT& operator=(IScriptErrorList *pintf)
  {
    TAutoDriver<IScriptErrorList>::Bind(pintf, false);
    return *this;
  }

  IScriptErrorListDispT& operator=(IScriptErrorListPtr pintf)
  {
    TAutoDriver<IScriptErrorList>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CScriptErrorList));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CScriptErrorList);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall advanceError();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall retreatError();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall canAdvanceError(long* pfCanAdvance/*[out,retval]*/);
  long            __fastcall canAdvanceError(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall canRetreatError(long* pfCanRetreat/*[out,retval]*/);
  long            __fastcall canRetreatError(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall getErrorLine(long* plLine/*[out,retval]*/);
  long            __fastcall getErrorLine(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall getErrorChar(long* plChar/*[out,retval]*/);
  long            __fastcall getErrorChar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall getErrorCode(long* plCode/*[out,retval]*/);
  long            __fastcall getErrorCode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall getErrorMsg(BSTR* pstr/*[out,retval]*/);
  BSTR            __fastcall getErrorMsg(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall getErrorUrl(BSTR* pstr/*[out,retval]*/);
  BSTR            __fastcall getErrorUrl(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall getAlwaysShowLockState(long* pfAlwaysShowLocked/*[out,retval]*/);
  long            __fastcall getAlwaysShowLockState(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall getDetailsPaneOpen(long* pfDetailsPaneOpen/*[out,retval]*/);
  long            __fastcall getDetailsPaneOpen(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall setDetailsPaneOpen(long fDetailsPaneOpen);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall getPerErrorDisplay(long* pfPerErrorDisplay/*[out,retval]*/);
  long            __fastcall getPerErrorDisplay(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall setPerErrorDisplay(long fPerErrorDisplay);

};
typedef IScriptErrorListDispT<IScriptErrorList> IScriptErrorListDisp;

typedef TComInterface<ISearch>  TCOMISearch;

// *********************************************************************//
// DispIntf:  ISearch
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {BA9239A4-3DD5-11D2-BF8B-00C04FB93661}
// *********************************************************************//
template<class T>
class ISearchDispT : public TAutoDriver<ISearch>
{
public:
  ISearchDispT(){}

  ISearchDispT(ISearch *pintf)
  {
    TAutoDriver<ISearch>::Bind(pintf, false);
  }

  ISearchDispT(ISearchPtr pintf)
  {
    TAutoDriver<ISearch>::Bind(pintf, true);
  }

  ISearchDispT& operator=(ISearch *pintf)
  {
    TAutoDriver<ISearch>::Bind(pintf, false);
    return *this;
  }

  ISearchDispT& operator=(ISearchPtr pintf)
  {
    TAutoDriver<ISearch>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Title(BSTR* pbstrTitle/*[out,retval]*/);
  BSTR            __fastcall get_Title(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Id(BSTR* pbstrId/*[out,retval]*/);
  BSTR            __fastcall get_Id(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_URL(BSTR* pbstrUrl/*[out,retval]*/);
  BSTR            __fastcall get_URL(void);

  __property   BSTR            Title = {read = get_Title};
  __property   BSTR            Id = {read = get_Id};
  __property   BSTR            URL = {read = get_URL};
};
typedef ISearchDispT<ISearch> ISearchDisp;

typedef TComInterface<ISearches>  TCOMISearches;

// *********************************************************************//
// DispIntf:  ISearches
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {47C922A2-3DD5-11D2-BF8B-00C04FB93661}
// *********************************************************************//
template<class T>
class ISearchesDispT : public TAutoDriver<ISearches>
{
public:
  ISearchesDispT(){}

  ISearchesDispT(ISearches *pintf)
  {
    TAutoDriver<ISearches>::Bind(pintf, false);
  }

  ISearchesDispT(ISearchesPtr pintf)
  {
    TAutoDriver<ISearches>::Bind(pintf, true);
  }

  ISearchesDispT& operator=(ISearches *pintf)
  {
    TAutoDriver<ISearches>::Bind(pintf, false);
    return *this;
  }

  ISearchesDispT& operator=(ISearchesPtr pintf)
  {
    TAutoDriver<ISearches>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* plCount/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Default(BSTR* pbstrDefault/*[out,retval]*/);
  BSTR            __fastcall get_Default(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(TVariantInParam index/*[in,opt]*/, 
                                             Shdocvw_tlb::ISearchPtr* ppid/*[out,retval]*/);
  Shdocvw_tlb::ISearchPtr __fastcall Item(TVariantInParam index/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);

  __property   long            Count = {read = get_Count};
  __property   BSTR            Default = {read = get_Default};
};
typedef ISearchesDispT<ISearches> ISearchesDisp;

typedef TComInterface<ISearchAssistantOC>  TCOMISearchAssistantOC;

// *********************************************************************//
// DispIntf:  ISearchAssistantOC
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {72423E8F-8011-11D2-BE79-00A0C9A83DA1}
// *********************************************************************//
template<class T>
class ISearchAssistantOCDispT : public TAutoDriver<ISearchAssistantOC>
{
public:
  ISearchAssistantOCDispT(){}

  ISearchAssistantOCDispT(ISearchAssistantOC *pintf)
  {
    TAutoDriver<ISearchAssistantOC>::Bind(pintf, false);
  }

  ISearchAssistantOCDispT(ISearchAssistantOCPtr pintf)
  {
    TAutoDriver<ISearchAssistantOC>::Bind(pintf, true);
  }

  ISearchAssistantOCDispT& operator=(ISearchAssistantOC *pintf)
  {
    TAutoDriver<ISearchAssistantOC>::Bind(pintf, false);
    return *this;
  }

  ISearchAssistantOCDispT& operator=(ISearchAssistantOCPtr pintf)
  {
    TAutoDriver<ISearchAssistantOC>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddNextMenuItem(BSTR bstrText/*[in]*/, long idItem/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetDefaultSearchUrl(BSTR bstrUrl/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall NavigateToDefaultSearch();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IsRestricted(BSTR bstrGuid/*[in]*/, 
                                                     TOLEBOOL* pVal/*[out,retval]*/);
  TOLEBOOL        __fastcall IsRestricted(BSTR bstrGuid/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShellFeaturesEnabled(TOLEBOOL* pVal/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ShellFeaturesEnabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SearchAssistantDefault(TOLEBOOL* pVal/*[out,retval]*/);
  TOLEBOOL        __fastcall get_SearchAssistantDefault(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Searches(Shdocvw_tlb::ISearchesPtr* ppid/*[out,retval]*/);
  Shdocvw_tlb::ISearchesPtr __fastcall get_Searches(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InWebFolder(TOLEBOOL* pVal/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InWebFolder(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PutProperty(TOLEBOOL bPerLocale/*[in]*/, 
                                                    BSTR bstrName/*[in]*/, BSTR bstrValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetProperty(TOLEBOOL bPerLocale/*[in]*/, 
                                                    BSTR bstrName/*[in]*/, 
                                                    BSTR* pbstrValue/*[out,retval]*/);
  BSTR            __fastcall GetProperty(TOLEBOOL bPerLocale/*[in]*/, BSTR bstrName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EventHandled(TOLEBOOL Param1/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ResetNextMenu();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall FindOnWeb();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall FindFilesOrFolders();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall FindComputer();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall FindPrinter();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall FindPeople();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetSearchAssistantURL(TOLEBOOL bSubstitute/*[in]*/, 
                                                              TOLEBOOL bCustomize/*[in]*/, 
                                                              BSTR* pbstrValue/*[out,retval]*/);
  BSTR            __fastcall GetSearchAssistantURL(TOLEBOOL bSubstitute/*[in]*/, 
                                                   TOLEBOOL bCustomize/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall NotifySearchSettingsChanged();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ASProvider(BSTR pProvider/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ASProvider(BSTR* pProvider/*[out,retval]*/);
  BSTR            __fastcall get_ASProvider(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ASSetting(int pSetting/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ASSetting(int* pSetting/*[out,retval]*/);
  int             __fastcall get_ASSetting(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall NETDetectNextNavigate();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PutFindText(BSTR FindText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Version(int* pVersion/*[out,retval]*/);
  int             __fastcall get_Version(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall EncodeString(BSTR bstrValue/*[in]*/, 
                                                     BSTR bstrCharSet/*[in]*/, 
                                                     TOLEBOOL bUseUTF8/*[in]*/, 
                                                     BSTR* pbstrResult/*[out,retval]*/);
  BSTR            __fastcall EncodeString(BSTR bstrValue/*[in]*/, BSTR bstrCharSet/*[in]*/, 
                                          TOLEBOOL bUseUTF8/*[in]*/);

  __property   TOLEBOOL        ShellFeaturesEnabled = {read = get_ShellFeaturesEnabled};
  __property   TOLEBOOL        SearchAssistantDefault = {read = get_SearchAssistantDefault};
  __property   Shdocvw_tlb::ISearchesPtr Searches = {read = get_Searches};
  __property   TOLEBOOL        InWebFolder = {read = get_InWebFolder};
  __property   TOLEBOOL        EventHandled = {write = set_EventHandled};
  __property   BSTR            ASProvider = {read = get_ASProvider, write = set_ASProvider};
  __property   int             ASSetting = {read = get_ASSetting, write = set_ASSetting};
  __property   int             Version = {read = get_Version};
};
typedef ISearchAssistantOCDispT<ISearchAssistantOC> ISearchAssistantOCDisp;

// *********************************************************************//
// SmartIntf: TCOMISearchAssistantOC2
// Interface: ISearchAssistantOC2
// *********************************************************************//
template <class T /* ISearchAssistantOC2 */ >
class TCOMISearchAssistantOC2T : public TComInterface<ISearchAssistantOC2>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMISearchAssistantOC2T() {}
  TCOMISearchAssistantOC2T(ISearchAssistantOC2 *intf, bool addRef = false) : TComInterface<ISearchAssistantOC2>(intf, addRef) {}
  TCOMISearchAssistantOC2T(const TCOMISearchAssistantOC2T& src) : TComInterface<ISearchAssistantOC2>(src) {}
  TCOMISearchAssistantOC2T& operator=(const TCOMISearchAssistantOC2T& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_ShowFindPrinter(TOLEBOOL* pbShowFindPrinter/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ShowFindPrinter(void);

  __property   TOLEBOOL        ShowFindPrinter = {read = get_ShowFindPrinter};
};
typedef TCOMISearchAssistantOC2T<ISearchAssistantOC2> TCOMISearchAssistantOC2;

// *********************************************************************//
// DispIntf:  ISearchAssistantOC2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {72423E8F-8011-11D2-BE79-00A0C9A83DA2}
// *********************************************************************//
template<class T>
class ISearchAssistantOC2DispT : public TAutoDriver<ISearchAssistantOC2>
{
public:
  ISearchAssistantOC2DispT(){}

  ISearchAssistantOC2DispT(ISearchAssistantOC2 *pintf)
  {
    TAutoDriver<ISearchAssistantOC2>::Bind(pintf, false);
  }

  ISearchAssistantOC2DispT(ISearchAssistantOC2Ptr pintf)
  {
    TAutoDriver<ISearchAssistantOC2>::Bind(pintf, true);
  }

  ISearchAssistantOC2DispT& operator=(ISearchAssistantOC2 *pintf)
  {
    TAutoDriver<ISearchAssistantOC2>::Bind(pintf, false);
    return *this;
  }

  ISearchAssistantOC2DispT& operator=(ISearchAssistantOC2Ptr pintf)
  {
    TAutoDriver<ISearchAssistantOC2>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CppSearchAssistantOC));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CppSearchAssistantOC);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowFindPrinter(TOLEBOOL* pbShowFindPrinter/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ShowFindPrinter(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddNextMenuItem(BSTR bstrText/*[in]*/, long idItem/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetDefaultSearchUrl(BSTR bstrUrl/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall NavigateToDefaultSearch();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IsRestricted(BSTR bstrGuid/*[in]*/, 
                                                     TOLEBOOL* pVal/*[out,retval]*/);
  TOLEBOOL        __fastcall IsRestricted(BSTR bstrGuid/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShellFeaturesEnabled(TOLEBOOL* pVal/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ShellFeaturesEnabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SearchAssistantDefault(TOLEBOOL* pVal/*[out,retval]*/);
  TOLEBOOL        __fastcall get_SearchAssistantDefault(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Searches(Shdocvw_tlb::ISearchesPtr* ppid/*[out,retval]*/);
  Shdocvw_tlb::ISearchesPtr __fastcall get_Searches(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InWebFolder(TOLEBOOL* pVal/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InWebFolder(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PutProperty(TOLEBOOL bPerLocale/*[in]*/, 
                                                    BSTR bstrName/*[in]*/, BSTR bstrValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetProperty(TOLEBOOL bPerLocale/*[in]*/, 
                                                    BSTR bstrName/*[in]*/, 
                                                    BSTR* pbstrValue/*[out,retval]*/);
  BSTR            __fastcall GetProperty(TOLEBOOL bPerLocale/*[in]*/, BSTR bstrName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EventHandled(TOLEBOOL Param1/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ResetNextMenu();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall FindOnWeb();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall FindFilesOrFolders();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall FindComputer();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall FindPrinter();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall FindPeople();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetSearchAssistantURL(TOLEBOOL bSubstitute/*[in]*/, 
                                                              TOLEBOOL bCustomize/*[in]*/, 
                                                              BSTR* pbstrValue/*[out,retval]*/);
  BSTR            __fastcall GetSearchAssistantURL(TOLEBOOL bSubstitute/*[in]*/, 
                                                   TOLEBOOL bCustomize/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall NotifySearchSettingsChanged();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ASProvider(BSTR pProvider/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ASProvider(BSTR* pProvider/*[out,retval]*/);
  BSTR            __fastcall get_ASProvider(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ASSetting(int pSetting/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ASSetting(int* pSetting/*[out,retval]*/);
  int             __fastcall get_ASSetting(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall NETDetectNextNavigate();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PutFindText(BSTR FindText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Version(int* pVersion/*[out,retval]*/);
  int             __fastcall get_Version(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall EncodeString(BSTR bstrValue/*[in]*/, 
                                                     BSTR bstrCharSet/*[in]*/, 
                                                     TOLEBOOL bUseUTF8/*[in]*/, 
                                                     BSTR* pbstrResult/*[out,retval]*/);
  BSTR            __fastcall EncodeString(BSTR bstrValue/*[in]*/, BSTR bstrCharSet/*[in]*/, 
                                          TOLEBOOL bUseUTF8/*[in]*/);

  __property   TOLEBOOL        ShowFindPrinter = {read = get_ShowFindPrinter};

  __property   TOLEBOOL        ShellFeaturesEnabled = {read = get_ShellFeaturesEnabled};
  __property   TOLEBOOL        SearchAssistantDefault = {read = get_SearchAssistantDefault};
  __property   Shdocvw_tlb::ISearchesPtr Searches = {read = get_Searches};
  __property   TOLEBOOL        InWebFolder = {read = get_InWebFolder};
  __property   TOLEBOOL        EventHandled = {write = set_EventHandled};
  __property   BSTR            ASProvider = {read = get_ASProvider, write = set_ASProvider};
  __property   int             ASSetting = {read = get_ASSetting, write = set_ASSetting};
  __property   int             Version = {read = get_Version};
};
typedef ISearchAssistantOC2DispT<ISearchAssistantOC2> ISearchAssistantOC2Disp;

// *********************************************************************//
// DispIntf:  _SearchAssistantEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {1611FDDA-445B-11D2-85DE-00C04FA35C89}
// *********************************************************************//
template <class T>
class _SearchAssistantEventsDispT : public TAutoDriver<_SearchAssistantEvents>
{
public:
  _SearchAssistantEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall OnNextMenuSelect(long idItem/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall OnNewSearch();

};
typedef _SearchAssistantEventsDispT<_SearchAssistantEvents> _SearchAssistantEventsDisp;

// *********************************************************************//
// SmartIntf: TCOMIWebBrowser
// Interface: IWebBrowser
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIWebBrowserT<T>::GoBack(void)
{
  return (*this)->GoBack();
}

template <class T> HRESULT __fastcall
TCOMIWebBrowserT<T>::GoForward(void)
{
  return (*this)->GoForward();
}

template <class T> HRESULT __fastcall
TCOMIWebBrowserT<T>::GoHome(void)
{
  return (*this)->GoHome();
}

template <class T> HRESULT __fastcall
TCOMIWebBrowserT<T>::GoSearch(void)
{
  return (*this)->GoSearch();
}

template <class T> HRESULT __fastcall
TCOMIWebBrowserT<T>::Navigate(BSTR URL/*[in]*/, TVariant* Flags/*[in,opt]*/, 
                              TVariant* TargetFrameName/*[in,opt]*/, TVariant* PostData/*[in,opt]*/, 
                              TVariant* Headers/*[in,opt]*/)
{
  return (*this)->Navigate(URL, Flags, TargetFrameName, PostData, Headers);
}

template <class T> HRESULT __fastcall
TCOMIWebBrowserT<T>::Refresh(void)
{
  return (*this)->Refresh();
}

template <class T> HRESULT __fastcall
TCOMIWebBrowserT<T>::Refresh2(TVariant* Level/*[in,opt]*/)
{
  return (*this)->Refresh2(Level);
}

template <class T> HRESULT __fastcall
TCOMIWebBrowserT<T>::Stop(void)
{
  return (*this)->Stop();
}

template <class T> HRESULT __fastcall
TCOMIWebBrowserT<T>::get_Application(LPDISPATCH* ppDisp/*[out,retval]*/)
{
  return (*this)->get_Application(ppDisp);
}

template <class T> LPDISPATCH __fastcall
TCOMIWebBrowserT<T>::get_Application(void)
{
  LPDISPATCH ppDisp;
  OLECHECK(this->get_Application((LPDISPATCH*)&ppDisp));
  return ppDisp;
}

template <class T> HRESULT __fastcall
TCOMIWebBrowserT<T>::get_Parent(LPDISPATCH* ppDisp/*[out,retval]*/)
{
  return (*this)->get_Parent(ppDisp);
}

template <class T> LPDISPATCH __fastcall
TCOMIWebBrowserT<T>::get_Parent(void)
{
  LPDISPATCH ppDisp;
  OLECHECK(this->get_Parent((LPDISPATCH*)&ppDisp));
  return ppDisp;
}

template <class T> HRESULT __fastcall
TCOMIWebBrowserT<T>::get_Container(LPDISPATCH* ppDisp/*[out,retval]*/)
{
  return (*this)->get_Container(ppDisp);
}

template <class T> LPDISPATCH __fastcall
TCOMIWebBrowserT<T>::get_Container(void)
{
  LPDISPATCH ppDisp;
  OLECHECK(this->get_Container((LPDISPATCH*)&ppDisp));
  return ppDisp;
}

template <class T> HRESULT __fastcall
TCOMIWebBrowserT<T>::get_Document(LPDISPATCH* ppDisp/*[out,retval]*/)
{
  return (*this)->get_Document(ppDisp);
}

template <class T> LPDISPATCH __fastcall
TCOMIWebBrowserT<T>::get_Document(void)
{
  LPDISPATCH ppDisp;
  OLECHECK(this->get_Document((LPDISPATCH*)&ppDisp));
  return ppDisp;
}

template <class T> HRESULT __fastcall
TCOMIWebBrowserT<T>::get_TopLevelContainer(TOLEBOOL* pBool/*[out,retval]*/)
{
  return (*this)->get_TopLevelContainer(pBool);
}

template <class T> TOLEBOOL __fastcall
TCOMIWebBrowserT<T>::get_TopLevelContainer(void)
{
  TOLEBOOL pBool;
  OLECHECK(this->get_TopLevelContainer((TOLEBOOL*)&pBool));
  return pBool;
}

template <class T> HRESULT __fastcall
TCOMIWebBrowserT<T>::get_Type(BSTR* Type/*[out,retval]*/)
{
  return (*this)->get_Type(Type);
}

template <class T> BSTR __fastcall
TCOMIWebBrowserT<T>::get_Type(void)
{
  BSTR Type = 0;
  OLECHECK(this->get_Type((BSTR*)&Type));
  return Type;
}

template <class T> HRESULT __fastcall
TCOMIWebBrowserT<T>::get_Left(long* pl/*[out,retval]*/)
{
  return (*this)->get_Left(pl);
}

template <class T> long __fastcall
TCOMIWebBrowserT<T>::get_Left(void)
{
  long pl;
  OLECHECK(this->get_Left((long*)&pl));
  return pl;
}

template <class T> HRESULT __fastcall
TCOMIWebBrowserT<T>::set_Left(long pl/*[in]*/)
{
  return (*this)->set_Left(pl);
}

template <class T> HRESULT __fastcall
TCOMIWebBrowserT<T>::get_Top(long* pl/*[out,retval]*/)
{
  return (*this)->get_Top(pl);
}

template <class T> long __fastcall
TCOMIWebBrowserT<T>::get_Top(void)
{
  long pl;
  OLECHECK(this->get_Top((long*)&pl));
  return pl;
}

template <class T> HRESULT __fastcall
TCOMIWebBrowserT<T>::set_Top(long pl/*[in]*/)
{
  return (*this)->set_Top(pl);
}

template <class T> HRESULT __fastcall
TCOMIWebBrowserT<T>::get_Width(long* pl/*[out,retval]*/)
{
  return (*this)->get_Width(pl);
}

template <class T> long __fastcall
TCOMIWebBrowserT<T>::get_Width(void)
{
  long pl;
  OLECHECK(this->get_Width((long*)&pl));
  return pl;
}

template <class T> HRESULT __fastcall
TCOMIWebBrowserT<T>::set_Width(long pl/*[in]*/)
{
  return (*this)->set_Width(pl);
}

template <class T> HRESULT __fastcall
TCOMIWebBrowserT<T>::get_Height(long* pl/*[out,retval]*/)
{
  return (*this)->get_Height(pl);
}

template <class T> long __fastcall
TCOMIWebBrowserT<T>::get_Height(void)
{
  long pl;
  OLECHECK(this->get_Height((long*)&pl));
  return pl;
}

template <class T> HRESULT __fastcall
TCOMIWebBrowserT<T>::set_Height(long pl/*[in]*/)
{
  return (*this)->set_Height(pl);
}

template <class T> HRESULT __fastcall
TCOMIWebBrowserT<T>::get_LocationName(BSTR* LocationName/*[out,retval]*/)
{
  return (*this)->get_LocationName(LocationName);
}

template <class T> BSTR __fastcall
TCOMIWebBrowserT<T>::get_LocationName(void)
{
  BSTR LocationName = 0;
  OLECHECK(this->get_LocationName((BSTR*)&LocationName));
  return LocationName;
}

template <class T> HRESULT __fastcall
TCOMIWebBrowserT<T>::get_LocationURL(BSTR* LocationURL/*[out,retval]*/)
{
  return (*this)->get_LocationURL(LocationURL);
}

template <class T> BSTR __fastcall
TCOMIWebBrowserT<T>::get_LocationURL(void)
{
  BSTR LocationURL = 0;
  OLECHECK(this->get_LocationURL((BSTR*)&LocationURL));
  return LocationURL;
}

template <class T> HRESULT __fastcall
TCOMIWebBrowserT<T>::get_Busy(TOLEBOOL* pBool/*[out,retval]*/)
{
  return (*this)->get_Busy(pBool);
}

template <class T> TOLEBOOL __fastcall
TCOMIWebBrowserT<T>::get_Busy(void)
{
  TOLEBOOL pBool;
  OLECHECK(this->get_Busy((TOLEBOOL*)&pBool));
  return pBool;
}

// *********************************************************************//
// DispIntf:  IWebBrowser
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EAB22AC1-30C1-11CF-A7EB-0000C05BAE0B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserDispT<T>::GoBack()
{
  _TDispID _dispid(*this, OLETEXT("GoBack"), DISPID(100));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserDispT<T>::GoForward()
{
  _TDispID _dispid(*this, OLETEXT("GoForward"), DISPID(101));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserDispT<T>::GoHome()
{
  _TDispID _dispid(*this, OLETEXT("GoHome"), DISPID(102));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserDispT<T>::GoSearch()
{
  _TDispID _dispid(*this, OLETEXT("GoSearch"), DISPID(103));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserDispT<T>::Navigate(BSTR URL/*[in]*/, TVariant* Flags/*[in,opt]*/, 
                              TVariant* TargetFrameName/*[in,opt]*/, TVariant* PostData/*[in,opt]*/
                              , TVariant* Headers/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Navigate"), DISPID(104));
  TAutoArgs<5> _args;
  _args[1] = URL /*[VT_BSTR:0]*/;
  _args[2] = Flags /*[VT_VARIANT:1]*/;
  _args[3] = TargetFrameName /*[VT_VARIANT:1]*/;
  _args[4] = PostData /*[VT_VARIANT:1]*/;
  _args[5] = Headers /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserDispT<T>::Refresh()
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(-550));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserDispT<T>::Refresh2(TVariant* Level/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Refresh2"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = Level /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserDispT<T>::Stop()
{
  _TDispID _dispid(*this, OLETEXT("Stop"), DISPID(106));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserDispT<T>::get_Application(LPDISPATCH* ppDisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(200));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppDisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IWebBrowserDispT<T>::get_Application(void)
{
  LPDISPATCH ppDisp;
  this->get_Application((LPDISPATCH*)&ppDisp);
  return ppDisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserDispT<T>::get_Parent(LPDISPATCH* ppDisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppDisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IWebBrowserDispT<T>::get_Parent(void)
{
  LPDISPATCH ppDisp;
  this->get_Parent((LPDISPATCH*)&ppDisp);
  return ppDisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserDispT<T>::get_Container(LPDISPATCH* ppDisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Container"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppDisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IWebBrowserDispT<T>::get_Container(void)
{
  LPDISPATCH ppDisp;
  this->get_Container((LPDISPATCH*)&ppDisp);
  return ppDisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserDispT<T>::get_Document(LPDISPATCH* ppDisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Document"), DISPID(203));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppDisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IWebBrowserDispT<T>::get_Document(void)
{
  LPDISPATCH ppDisp;
  this->get_Document((LPDISPATCH*)&ppDisp);
  return ppDisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserDispT<T>::get_TopLevelContainer(TOLEBOOL* pBool/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TopLevelContainer"), DISPID(204));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBool /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IWebBrowserDispT<T>::get_TopLevelContainer(void)
{
  TOLEBOOL pBool;
  this->get_TopLevelContainer((TOLEBOOL*)&pBool);
  return pBool;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserDispT<T>::get_Type(BSTR* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(205));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Type /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWebBrowserDispT<T>::get_Type(void)
{
  BSTR Type;
  this->get_Type((BSTR*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserDispT<T>::get_Left(long* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(206));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pl /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWebBrowserDispT<T>::get_Left(void)
{
  long pl;
  this->get_Left((long*)&pl);
  return pl;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserDispT<T>::set_Left(long pl/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(206));
  TAutoArgs<1> _args;
  _args[1] = pl /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserDispT<T>::get_Top(long* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(207));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pl /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWebBrowserDispT<T>::get_Top(void)
{
  long pl;
  this->get_Top((long*)&pl);
  return pl;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserDispT<T>::set_Top(long pl/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(207));
  TAutoArgs<1> _args;
  _args[1] = pl /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserDispT<T>::get_Width(long* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(208));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pl /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWebBrowserDispT<T>::get_Width(void)
{
  long pl;
  this->get_Width((long*)&pl);
  return pl;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserDispT<T>::set_Width(long pl/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(208));
  TAutoArgs<1> _args;
  _args[1] = pl /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserDispT<T>::get_Height(long* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(209));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pl /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWebBrowserDispT<T>::get_Height(void)
{
  long pl;
  this->get_Height((long*)&pl);
  return pl;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserDispT<T>::set_Height(long pl/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(209));
  TAutoArgs<1> _args;
  _args[1] = pl /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserDispT<T>::get_LocationName(BSTR* LocationName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LocationName"), DISPID(210));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(LocationName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWebBrowserDispT<T>::get_LocationName(void)
{
  BSTR LocationName;
  this->get_LocationName((BSTR*)&LocationName);
  return LocationName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserDispT<T>::get_LocationURL(BSTR* LocationURL/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LocationURL"), DISPID(211));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(LocationURL /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWebBrowserDispT<T>::get_LocationURL(void)
{
  BSTR LocationURL;
  this->get_LocationURL((BSTR*)&LocationURL);
  return LocationURL;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserDispT<T>::get_Busy(TOLEBOOL* pBool/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Busy"), DISPID(212));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBool /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IWebBrowserDispT<T>::get_Busy(void)
{
  TOLEBOOL pBool;
  this->get_Busy((TOLEBOOL*)&pBool);
  return pBool;
}

// *********************************************************************//
// DispIntf:  DWebBrowserEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {EAB22AC2-30C1-11CF-A7EB-0000C05BAE0B}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
DWebBrowserEventsDispT<T>::BeforeNavigate(BSTR URL/*[in]*/, long Flags, BSTR TargetFrameName, 
                                          TVariant* PostData, BSTR Headers, 
                                          TOLEBOOL* Cancel/*[in,out]*/)
{
  _TDispID _dispid(/* BeforeNavigate */ DISPID(100));
  TAutoArgs<6> _args;
  _args[1] = URL /*[VT_BSTR:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = TargetFrameName /*[VT_BSTR:0]*/;
  _args[4] = PostData /*[VT_VARIANT:1]*/;
  _args[5] = Headers /*[VT_BSTR:0]*/;
  _args[6] = Cancel /*[VT_BOOL:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DWebBrowserEventsDispT<T>::NavigateComplete(BSTR URL/*[in]*/)
{
  _TDispID _dispid(/* NavigateComplete */ DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = URL /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DWebBrowserEventsDispT<T>::StatusTextChange(BSTR Text/*[in]*/)
{
  _TDispID _dispid(/* StatusTextChange */ DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DWebBrowserEventsDispT<T>::ProgressChange(long Progress/*[in]*/, long ProgressMax/*[in]*/)
{
  _TDispID _dispid(/* ProgressChange */ DISPID(108));
  TAutoArgs<2> _args;
  _args[1] = Progress /*[VT_I4:0]*/;
  _args[2] = ProgressMax /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DWebBrowserEventsDispT<T>::DownloadComplete()
{
  _TDispID _dispid(/* DownloadComplete */ DISPID(104));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DWebBrowserEventsDispT<T>::CommandStateChange(long Command/*[in]*/, TOLEBOOL Enable/*[in]*/)
{
  _TDispID _dispid(/* CommandStateChange */ DISPID(105));
  TAutoArgs<2> _args;
  _args[1] = Command /*[VT_I4:0]*/;
  _args[2] = Enable /*[VT_BOOL:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DWebBrowserEventsDispT<T>::DownloadBegin()
{
  _TDispID _dispid(/* DownloadBegin */ DISPID(106));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DWebBrowserEventsDispT<T>::NewWindow(BSTR URL/*[in]*/, long Flags/*[in]*/, 
                                     BSTR TargetFrameName/*[in]*/, TVariant* PostData/*[in]*/, 
                                     BSTR Headers/*[in]*/, TOLEBOOL* Processed/*[in,out]*/)
{
  _TDispID _dispid(/* NewWindow */ DISPID(107));
  TAutoArgs<6> _args;
  _args[1] = URL /*[VT_BSTR:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = TargetFrameName /*[VT_BSTR:0]*/;
  _args[4] = PostData /*[VT_VARIANT:1]*/;
  _args[5] = Headers /*[VT_BSTR:0]*/;
  _args[6] = Processed /*[VT_BOOL:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DWebBrowserEventsDispT<T>::TitleChange(BSTR Text/*[in]*/)
{
  _TDispID _dispid(/* TitleChange */ DISPID(113));
  TAutoArgs<1> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DWebBrowserEventsDispT<T>::FrameBeforeNavigate(BSTR URL/*[in]*/, long Flags, BSTR TargetFrameName, 
                                               TVariant* PostData, BSTR Headers, 
                                               TOLEBOOL* Cancel/*[in,out]*/)
{
  _TDispID _dispid(/* FrameBeforeNavigate */ DISPID(200));
  TAutoArgs<6> _args;
  _args[1] = URL /*[VT_BSTR:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = TargetFrameName /*[VT_BSTR:0]*/;
  _args[4] = PostData /*[VT_VARIANT:1]*/;
  _args[5] = Headers /*[VT_BSTR:0]*/;
  _args[6] = Cancel /*[VT_BOOL:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DWebBrowserEventsDispT<T>::FrameNavigateComplete(BSTR URL/*[in]*/)
{
  _TDispID _dispid(/* FrameNavigateComplete */ DISPID(201));
  TAutoArgs<1> _args;
  _args[1] = URL /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DWebBrowserEventsDispT<T>::FrameNewWindow(BSTR URL/*[in]*/, long Flags/*[in]*/, 
                                          BSTR TargetFrameName/*[in]*/, TVariant* PostData/*[in]*/, 
                                          BSTR Headers/*[in]*/, TOLEBOOL* Processed/*[in,out]*/)
{
  _TDispID _dispid(/* FrameNewWindow */ DISPID(204));
  TAutoArgs<6> _args;
  _args[1] = URL /*[VT_BSTR:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = TargetFrameName /*[VT_BSTR:0]*/;
  _args[4] = PostData /*[VT_VARIANT:1]*/;
  _args[5] = Headers /*[VT_BSTR:0]*/;
  _args[6] = Processed /*[VT_BOOL:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DWebBrowserEventsDispT<T>::Quit(TOLEBOOL* Cancel/*[in,out]*/)
{
  _TDispID _dispid(/* Quit */ DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = Cancel /*[VT_BOOL:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DWebBrowserEventsDispT<T>::WindowMove()
{
  _TDispID _dispid(/* WindowMove */ DISPID(109));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DWebBrowserEventsDispT<T>::WindowResize()
{
  _TDispID _dispid(/* WindowResize */ DISPID(110));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DWebBrowserEventsDispT<T>::WindowActivate()
{
  _TDispID _dispid(/* WindowActivate */ DISPID(111));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DWebBrowserEventsDispT<T>::PropertyChange(BSTR Property/*[in]*/)
{
  _TDispID _dispid(/* PropertyChange */ DISPID(112));
  TAutoArgs<1> _args;
  _args[1] = Property /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IWebBrowserApp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0002DF05-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserAppDispT<T>::Quit()
{
  _TDispID _dispid(*this, OLETEXT("Quit"), DISPID(300));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserAppDispT<T>::ClientToWindow(int* pcx/*[in,out]*/, int* pcy/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClientToWindow"), DISPID(301));
  TAutoArgs<2> _args;
  _args[1] = pcx /*[VT_INT:1]*/;
  _args[2] = pcy /*[VT_INT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserAppDispT<T>::PutProperty(BSTR Property/*[in]*/, TVariantInParam vtValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PutProperty"), DISPID(302));
  TAutoArgs<2> _args;
  _args[1] = Property /*[VT_BSTR:0]*/;
  _args[2] = vtValue /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserAppDispT<T>::GetProperty(BSTR Property/*[in]*/, TVariant* pvtValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetProperty"), DISPID(303));
  TAutoArgs<1> _args;
  _args[1] = Property /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pvtValue /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
IWebBrowserAppDispT<T>::GetProperty(BSTR Property/*[in]*/)
{
  TVariant pvtValue;
  this->GetProperty(Property, (TVariant*)&pvtValue);
  return pvtValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserAppDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWebBrowserAppDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserAppDispT<T>::get_HWND(long* pHWND/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HWND"), DISPID(-515));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pHWND /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWebBrowserAppDispT<T>::get_HWND(void)
{
  long pHWND;
  this->get_HWND((long*)&pHWND);
  return pHWND;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserAppDispT<T>::get_FullName(BSTR* FullName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullName"), DISPID(400));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FullName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWebBrowserAppDispT<T>::get_FullName(void)
{
  BSTR FullName;
  this->get_FullName((BSTR*)&FullName);
  return FullName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserAppDispT<T>::get_Path(BSTR* Path/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Path"), DISPID(401));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Path /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWebBrowserAppDispT<T>::get_Path(void)
{
  BSTR Path;
  this->get_Path((BSTR*)&Path);
  return Path;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserAppDispT<T>::get_Visible(TOLEBOOL* pBool/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(402));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBool /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IWebBrowserAppDispT<T>::get_Visible(void)
{
  TOLEBOOL pBool;
  this->get_Visible((TOLEBOOL*)&pBool);
  return pBool;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserAppDispT<T>::set_Visible(TOLEBOOL pBool/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(402));
  TAutoArgs<1> _args;
  _args[1] = pBool /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserAppDispT<T>::get_StatusBar(TOLEBOOL* pBool/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StatusBar"), DISPID(403));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBool /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IWebBrowserAppDispT<T>::get_StatusBar(void)
{
  TOLEBOOL pBool;
  this->get_StatusBar((TOLEBOOL*)&pBool);
  return pBool;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserAppDispT<T>::set_StatusBar(TOLEBOOL pBool/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StatusBar"), DISPID(403));
  TAutoArgs<1> _args;
  _args[1] = pBool /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserAppDispT<T>::get_StatusText(BSTR* StatusText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StatusText"), DISPID(404));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(StatusText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWebBrowserAppDispT<T>::get_StatusText(void)
{
  BSTR StatusText;
  this->get_StatusText((BSTR*)&StatusText);
  return StatusText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserAppDispT<T>::set_StatusText(BSTR StatusText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StatusText"), DISPID(404));
  TAutoArgs<1> _args;
  _args[1] = StatusText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserAppDispT<T>::get_ToolBar(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ToolBar"), DISPID(405));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IWebBrowserAppDispT<T>::get_ToolBar(void)
{
  int Value;
  this->get_ToolBar((int*)&Value);
  return Value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserAppDispT<T>::set_ToolBar(int Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ToolBar"), DISPID(405));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserAppDispT<T>::get_MenuBar(TOLEBOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MenuBar"), DISPID(406));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IWebBrowserAppDispT<T>::get_MenuBar(void)
{
  TOLEBOOL Value;
  this->get_MenuBar((TOLEBOOL*)&Value);
  return Value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserAppDispT<T>::set_MenuBar(TOLEBOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MenuBar"), DISPID(406));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserAppDispT<T>::get_FullScreen(TOLEBOOL* pbFullScreen/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullScreen"), DISPID(407));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbFullScreen /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IWebBrowserAppDispT<T>::get_FullScreen(void)
{
  TOLEBOOL pbFullScreen;
  this->get_FullScreen((TOLEBOOL*)&pbFullScreen);
  return pbFullScreen;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserAppDispT<T>::set_FullScreen(TOLEBOOL pbFullScreen/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullScreen"), DISPID(407));
  TAutoArgs<1> _args;
  _args[1] = pbFullScreen /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserAppDispT<T>::GoBack()
{
  _TDispID _dispid(*this, OLETEXT("GoBack"), DISPID(100));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserAppDispT<T>::GoForward()
{
  _TDispID _dispid(*this, OLETEXT("GoForward"), DISPID(101));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserAppDispT<T>::GoHome()
{
  _TDispID _dispid(*this, OLETEXT("GoHome"), DISPID(102));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserAppDispT<T>::GoSearch()
{
  _TDispID _dispid(*this, OLETEXT("GoSearch"), DISPID(103));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserAppDispT<T>::Navigate(BSTR URL/*[in]*/, TVariant* Flags/*[in,opt]*/, 
                                 TVariant* TargetFrameName/*[in,opt]*/, 
                                 TVariant* PostData/*[in,opt]*/, TVariant* Headers/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Navigate"), DISPID(104));
  TAutoArgs<5> _args;
  _args[1] = URL /*[VT_BSTR:0]*/;
  _args[2] = Flags /*[VT_VARIANT:1]*/;
  _args[3] = TargetFrameName /*[VT_VARIANT:1]*/;
  _args[4] = PostData /*[VT_VARIANT:1]*/;
  _args[5] = Headers /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserAppDispT<T>::Refresh()
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(-550));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserAppDispT<T>::Refresh2(TVariant* Level/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Refresh2"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = Level /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserAppDispT<T>::Stop()
{
  _TDispID _dispid(*this, OLETEXT("Stop"), DISPID(106));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserAppDispT<T>::get_Application(LPDISPATCH* ppDisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(200));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppDisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IWebBrowserAppDispT<T>::get_Application(void)
{
  LPDISPATCH ppDisp;
  this->get_Application((LPDISPATCH*)&ppDisp);
  return ppDisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserAppDispT<T>::get_Parent(LPDISPATCH* ppDisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppDisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IWebBrowserAppDispT<T>::get_Parent(void)
{
  LPDISPATCH ppDisp;
  this->get_Parent((LPDISPATCH*)&ppDisp);
  return ppDisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserAppDispT<T>::get_Container(LPDISPATCH* ppDisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Container"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppDisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IWebBrowserAppDispT<T>::get_Container(void)
{
  LPDISPATCH ppDisp;
  this->get_Container((LPDISPATCH*)&ppDisp);
  return ppDisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserAppDispT<T>::get_Document(LPDISPATCH* ppDisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Document"), DISPID(203));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppDisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IWebBrowserAppDispT<T>::get_Document(void)
{
  LPDISPATCH ppDisp;
  this->get_Document((LPDISPATCH*)&ppDisp);
  return ppDisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserAppDispT<T>::get_TopLevelContainer(TOLEBOOL* pBool/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TopLevelContainer"), DISPID(204));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBool /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IWebBrowserAppDispT<T>::get_TopLevelContainer(void)
{
  TOLEBOOL pBool;
  this->get_TopLevelContainer((TOLEBOOL*)&pBool);
  return pBool;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserAppDispT<T>::get_Type(BSTR* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(205));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Type /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWebBrowserAppDispT<T>::get_Type(void)
{
  BSTR Type;
  this->get_Type((BSTR*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserAppDispT<T>::get_Left(long* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(206));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pl /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWebBrowserAppDispT<T>::get_Left(void)
{
  long pl;
  this->get_Left((long*)&pl);
  return pl;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserAppDispT<T>::set_Left(long pl/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(206));
  TAutoArgs<1> _args;
  _args[1] = pl /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserAppDispT<T>::get_Top(long* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(207));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pl /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWebBrowserAppDispT<T>::get_Top(void)
{
  long pl;
  this->get_Top((long*)&pl);
  return pl;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserAppDispT<T>::set_Top(long pl/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(207));
  TAutoArgs<1> _args;
  _args[1] = pl /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserAppDispT<T>::get_Width(long* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(208));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pl /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWebBrowserAppDispT<T>::get_Width(void)
{
  long pl;
  this->get_Width((long*)&pl);
  return pl;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserAppDispT<T>::set_Width(long pl/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(208));
  TAutoArgs<1> _args;
  _args[1] = pl /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserAppDispT<T>::get_Height(long* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(209));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pl /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWebBrowserAppDispT<T>::get_Height(void)
{
  long pl;
  this->get_Height((long*)&pl);
  return pl;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserAppDispT<T>::set_Height(long pl/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(209));
  TAutoArgs<1> _args;
  _args[1] = pl /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserAppDispT<T>::get_LocationName(BSTR* LocationName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LocationName"), DISPID(210));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(LocationName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWebBrowserAppDispT<T>::get_LocationName(void)
{
  BSTR LocationName;
  this->get_LocationName((BSTR*)&LocationName);
  return LocationName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserAppDispT<T>::get_LocationURL(BSTR* LocationURL/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LocationURL"), DISPID(211));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(LocationURL /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWebBrowserAppDispT<T>::get_LocationURL(void)
{
  BSTR LocationURL;
  this->get_LocationURL((BSTR*)&LocationURL);
  return LocationURL;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowserAppDispT<T>::get_Busy(TOLEBOOL* pBool/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Busy"), DISPID(212));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBool /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IWebBrowserAppDispT<T>::get_Busy(void)
{
  TOLEBOOL pBool;
  this->get_Busy((TOLEBOOL*)&pBool);
  return pBool;
}

// *********************************************************************//
// SmartIntf: TCOMIWebBrowser2
// Interface: IWebBrowser2
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIWebBrowser2T<T>::Navigate2(TVariant* URL/*[in]*/, TVariant* Flags/*[in,opt]*/, 
                                TVariant* TargetFrameName/*[in,opt]*/, 
                                TVariant* PostData/*[in,opt]*/, TVariant* Headers/*[in,opt]*/)
{
  return (*this)->Navigate2(URL, Flags, TargetFrameName, PostData, Headers);
}

template <class T> HRESULT __fastcall
TCOMIWebBrowser2T<T>::QueryStatusWB(Shdocvw_tlb::OLECMDID cmdID/*[in]*/, 
                                    Shdocvw_tlb::OLECMDF* pcmdf/*[out,retval]*/)
{
  return (*this)->QueryStatusWB(cmdID, pcmdf);
}

template <class T> Shdocvw_tlb::OLECMDF __fastcall
TCOMIWebBrowser2T<T>::QueryStatusWB(Shdocvw_tlb::OLECMDID cmdID/*[in]*/)
{
  Shdocvw_tlb::OLECMDF pcmdf;
  OLECHECK(this->QueryStatusWB(cmdID, (Shdocvw_tlb::OLECMDF*)&pcmdf));
  return pcmdf;
}

template <class T> HRESULT __fastcall
TCOMIWebBrowser2T<T>::ExecWB(Shdocvw_tlb::OLECMDID cmdID/*[in]*/, 
                             Shdocvw_tlb::OLECMDEXECOPT cmdexecopt/*[in]*/, 
                             TVariant* pvaIn/*[in,opt]*/, TVariant* pvaOut/*[in,out,opt]*/)
{
  return (*this)->ExecWB(cmdID, cmdexecopt, pvaIn, pvaOut);
}

template <class T> HRESULT __fastcall
TCOMIWebBrowser2T<T>::ShowBrowserBar(TVariant* pvaClsid/*[in]*/, TVariant* pvarShow/*[in,opt]*/, 
                                     TVariant* pvarSize/*[in,opt]*/)
{
  return (*this)->ShowBrowserBar(pvaClsid, pvarShow, pvarSize);
}

template <class T> HRESULT __fastcall
TCOMIWebBrowser2T<T>::get_ReadyState(Shdocvw_tlb::tagREADYSTATE* plReadyState/*[out,retval]*/)
{
  return (*this)->get_ReadyState(plReadyState);
}

template <class T> Shdocvw_tlb::tagREADYSTATE __fastcall
TCOMIWebBrowser2T<T>::get_ReadyState(void)
{
  Shdocvw_tlb::tagREADYSTATE plReadyState;
  OLECHECK(this->get_ReadyState((Shdocvw_tlb::tagREADYSTATE*)&plReadyState));
  return plReadyState;
}

template <class T> HRESULT __fastcall
TCOMIWebBrowser2T<T>::get_Offline(TOLEBOOL* pbOffline/*[out,retval]*/)
{
  return (*this)->get_Offline(pbOffline);
}

template <class T> TOLEBOOL __fastcall
TCOMIWebBrowser2T<T>::get_Offline(void)
{
  TOLEBOOL pbOffline;
  OLECHECK(this->get_Offline((TOLEBOOL*)&pbOffline));
  return pbOffline;
}

template <class T> HRESULT __fastcall
TCOMIWebBrowser2T<T>::set_Offline(TOLEBOOL pbOffline/*[in]*/)
{
  return (*this)->set_Offline(pbOffline);
}

template <class T> HRESULT __fastcall
TCOMIWebBrowser2T<T>::get_Silent(TOLEBOOL* pbSilent/*[out,retval]*/)
{
  return (*this)->get_Silent(pbSilent);
}

template <class T> TOLEBOOL __fastcall
TCOMIWebBrowser2T<T>::get_Silent(void)
{
  TOLEBOOL pbSilent;
  OLECHECK(this->get_Silent((TOLEBOOL*)&pbSilent));
  return pbSilent;
}

template <class T> HRESULT __fastcall
TCOMIWebBrowser2T<T>::set_Silent(TOLEBOOL pbSilent/*[in]*/)
{
  return (*this)->set_Silent(pbSilent);
}

template <class T> HRESULT __fastcall
TCOMIWebBrowser2T<T>::get_RegisterAsBrowser(TOLEBOOL* pbRegister/*[out,retval]*/)
{
  return (*this)->get_RegisterAsBrowser(pbRegister);
}

template <class T> TOLEBOOL __fastcall
TCOMIWebBrowser2T<T>::get_RegisterAsBrowser(void)
{
  TOLEBOOL pbRegister;
  OLECHECK(this->get_RegisterAsBrowser((TOLEBOOL*)&pbRegister));
  return pbRegister;
}

template <class T> HRESULT __fastcall
TCOMIWebBrowser2T<T>::set_RegisterAsBrowser(TOLEBOOL pbRegister/*[in]*/)
{
  return (*this)->set_RegisterAsBrowser(pbRegister);
}

template <class T> HRESULT __fastcall
TCOMIWebBrowser2T<T>::get_RegisterAsDropTarget(TOLEBOOL* pbRegister/*[out,retval]*/)
{
  return (*this)->get_RegisterAsDropTarget(pbRegister);
}

template <class T> TOLEBOOL __fastcall
TCOMIWebBrowser2T<T>::get_RegisterAsDropTarget(void)
{
  TOLEBOOL pbRegister;
  OLECHECK(this->get_RegisterAsDropTarget((TOLEBOOL*)&pbRegister));
  return pbRegister;
}

template <class T> HRESULT __fastcall
TCOMIWebBrowser2T<T>::set_RegisterAsDropTarget(TOLEBOOL pbRegister/*[in]*/)
{
  return (*this)->set_RegisterAsDropTarget(pbRegister);
}

template <class T> HRESULT __fastcall
TCOMIWebBrowser2T<T>::get_TheaterMode(TOLEBOOL* pbRegister/*[out,retval]*/)
{
  return (*this)->get_TheaterMode(pbRegister);
}

template <class T> TOLEBOOL __fastcall
TCOMIWebBrowser2T<T>::get_TheaterMode(void)
{
  TOLEBOOL pbRegister;
  OLECHECK(this->get_TheaterMode((TOLEBOOL*)&pbRegister));
  return pbRegister;
}

template <class T> HRESULT __fastcall
TCOMIWebBrowser2T<T>::set_TheaterMode(TOLEBOOL pbRegister/*[in]*/)
{
  return (*this)->set_TheaterMode(pbRegister);
}

template <class T> HRESULT __fastcall
TCOMIWebBrowser2T<T>::get_AddressBar(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_AddressBar(Value);
}

template <class T> TOLEBOOL __fastcall
TCOMIWebBrowser2T<T>::get_AddressBar(void)
{
  TOLEBOOL Value;
  OLECHECK(this->get_AddressBar((TOLEBOOL*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIWebBrowser2T<T>::set_AddressBar(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_AddressBar(Value);
}

template <class T> HRESULT __fastcall
TCOMIWebBrowser2T<T>::get_Resizable(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Resizable(Value);
}

template <class T> TOLEBOOL __fastcall
TCOMIWebBrowser2T<T>::get_Resizable(void)
{
  TOLEBOOL Value;
  OLECHECK(this->get_Resizable((TOLEBOOL*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIWebBrowser2T<T>::set_Resizable(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_Resizable(Value);
}

// *********************************************************************//
// DispIntf:  IWebBrowser2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D30C1661-CDAF-11D0-8A3E-00C04FC9E26E}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::Navigate2(TVariant* URL/*[in]*/, TVariant* Flags/*[in,opt]*/, 
                                TVariant* TargetFrameName/*[in,opt]*/, 
                                TVariant* PostData/*[in,opt]*/, TVariant* Headers/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Navigate2"), DISPID(500));
  TAutoArgs<5> _args;
  _args[1] = URL /*[VT_VARIANT:1]*/;
  _args[2] = Flags /*[VT_VARIANT:1]*/;
  _args[3] = TargetFrameName /*[VT_VARIANT:1]*/;
  _args[4] = PostData /*[VT_VARIANT:1]*/;
  _args[5] = Headers /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::QueryStatusWB(Shdocvw_tlb::OLECMDID cmdID/*[in]*/, 
                                    Shdocvw_tlb::OLECMDF* pcmdf/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryStatusWB"), DISPID(501));
  TAutoArgs<1> _args;
  _args[1] = (int)cmdID /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((int*)pcmdf /*[VT_USERDEFINED:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Shdocvw_tlb::OLECMDF __fastcall
IWebBrowser2DispT<T>::QueryStatusWB(Shdocvw_tlb::OLECMDID cmdID/*[in]*/)
{
  Shdocvw_tlb::OLECMDF pcmdf;
  this->QueryStatusWB(cmdID, (Shdocvw_tlb::OLECMDF*)&pcmdf);
  return pcmdf;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::ExecWB(Shdocvw_tlb::OLECMDID cmdID/*[in]*/, 
                             Shdocvw_tlb::OLECMDEXECOPT cmdexecopt/*[in]*/, 
                             TVariant* pvaIn/*[in,opt]*/, TVariant* pvaOut/*[in,out,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExecWB"), DISPID(502));
  TAutoArgs<4> _args;
  _args[1] = (int)cmdID /*[VT_USERDEFINED:0]*/;
  _args[2] = (int)cmdexecopt /*[VT_USERDEFINED:0]*/;
  _args[3] = pvaIn /*[VT_VARIANT:1]*/;
  _args[4] = pvaOut /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::ShowBrowserBar(TVariant* pvaClsid/*[in]*/, TVariant* pvarShow/*[in,opt]*/, 
                                     TVariant* pvarSize/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowBrowserBar"), DISPID(503));
  TAutoArgs<3> _args;
  _args[1] = pvaClsid /*[VT_VARIANT:1]*/;
  _args[2] = pvarShow /*[VT_VARIANT:1]*/;
  _args[3] = pvarSize /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::get_ReadyState(Shdocvw_tlb::tagREADYSTATE* plReadyState/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReadyState"), DISPID(-525));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)plReadyState /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Shdocvw_tlb::tagREADYSTATE __fastcall
IWebBrowser2DispT<T>::get_ReadyState(void)
{
  Shdocvw_tlb::tagREADYSTATE plReadyState;
  this->get_ReadyState((Shdocvw_tlb::tagREADYSTATE*)&plReadyState);
  return plReadyState;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::get_Offline(TOLEBOOL* pbOffline/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Offline"), DISPID(550));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbOffline /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IWebBrowser2DispT<T>::get_Offline(void)
{
  TOLEBOOL pbOffline;
  this->get_Offline((TOLEBOOL*)&pbOffline);
  return pbOffline;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::set_Offline(TOLEBOOL pbOffline/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Offline"), DISPID(550));
  TAutoArgs<1> _args;
  _args[1] = pbOffline /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::get_Silent(TOLEBOOL* pbSilent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Silent"), DISPID(551));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbSilent /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IWebBrowser2DispT<T>::get_Silent(void)
{
  TOLEBOOL pbSilent;
  this->get_Silent((TOLEBOOL*)&pbSilent);
  return pbSilent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::set_Silent(TOLEBOOL pbSilent/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Silent"), DISPID(551));
  TAutoArgs<1> _args;
  _args[1] = pbSilent /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::get_RegisterAsBrowser(TOLEBOOL* pbRegister/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RegisterAsBrowser"), DISPID(552));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbRegister /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IWebBrowser2DispT<T>::get_RegisterAsBrowser(void)
{
  TOLEBOOL pbRegister;
  this->get_RegisterAsBrowser((TOLEBOOL*)&pbRegister);
  return pbRegister;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::set_RegisterAsBrowser(TOLEBOOL pbRegister/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RegisterAsBrowser"), DISPID(552));
  TAutoArgs<1> _args;
  _args[1] = pbRegister /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::get_RegisterAsDropTarget(TOLEBOOL* pbRegister/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RegisterAsDropTarget"), DISPID(553));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbRegister /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IWebBrowser2DispT<T>::get_RegisterAsDropTarget(void)
{
  TOLEBOOL pbRegister;
  this->get_RegisterAsDropTarget((TOLEBOOL*)&pbRegister);
  return pbRegister;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::set_RegisterAsDropTarget(TOLEBOOL pbRegister/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RegisterAsDropTarget"), DISPID(553));
  TAutoArgs<1> _args;
  _args[1] = pbRegister /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::get_TheaterMode(TOLEBOOL* pbRegister/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TheaterMode"), DISPID(554));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbRegister /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IWebBrowser2DispT<T>::get_TheaterMode(void)
{
  TOLEBOOL pbRegister;
  this->get_TheaterMode((TOLEBOOL*)&pbRegister);
  return pbRegister;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::set_TheaterMode(TOLEBOOL pbRegister/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TheaterMode"), DISPID(554));
  TAutoArgs<1> _args;
  _args[1] = pbRegister /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::get_AddressBar(TOLEBOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddressBar"), DISPID(555));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IWebBrowser2DispT<T>::get_AddressBar(void)
{
  TOLEBOOL Value;
  this->get_AddressBar((TOLEBOOL*)&Value);
  return Value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::set_AddressBar(TOLEBOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddressBar"), DISPID(555));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::get_Resizable(TOLEBOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Resizable"), DISPID(556));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IWebBrowser2DispT<T>::get_Resizable(void)
{
  TOLEBOOL Value;
  this->get_Resizable((TOLEBOOL*)&Value);
  return Value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::set_Resizable(TOLEBOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Resizable"), DISPID(556));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::Quit()
{
  _TDispID _dispid(*this, OLETEXT("Quit"), DISPID(300));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::ClientToWindow(int* pcx/*[in,out]*/, int* pcy/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClientToWindow"), DISPID(301));
  TAutoArgs<2> _args;
  _args[1] = pcx /*[VT_INT:1]*/;
  _args[2] = pcy /*[VT_INT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::PutProperty(BSTR Property/*[in]*/, TVariantInParam vtValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PutProperty"), DISPID(302));
  TAutoArgs<2> _args;
  _args[1] = Property /*[VT_BSTR:0]*/;
  _args[2] = vtValue /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::GetProperty(BSTR Property/*[in]*/, TVariant* pvtValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetProperty"), DISPID(303));
  TAutoArgs<1> _args;
  _args[1] = Property /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pvtValue /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
IWebBrowser2DispT<T>::GetProperty(BSTR Property/*[in]*/)
{
  TVariant pvtValue;
  this->GetProperty(Property, (TVariant*)&pvtValue);
  return pvtValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWebBrowser2DispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::get_HWND(long* pHWND/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HWND"), DISPID(-515));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pHWND /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWebBrowser2DispT<T>::get_HWND(void)
{
  long pHWND;
  this->get_HWND((long*)&pHWND);
  return pHWND;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::get_FullName(BSTR* FullName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullName"), DISPID(400));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FullName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWebBrowser2DispT<T>::get_FullName(void)
{
  BSTR FullName;
  this->get_FullName((BSTR*)&FullName);
  return FullName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::get_Path(BSTR* Path/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Path"), DISPID(401));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Path /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWebBrowser2DispT<T>::get_Path(void)
{
  BSTR Path;
  this->get_Path((BSTR*)&Path);
  return Path;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::get_Visible(TOLEBOOL* pBool/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(402));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBool /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IWebBrowser2DispT<T>::get_Visible(void)
{
  TOLEBOOL pBool;
  this->get_Visible((TOLEBOOL*)&pBool);
  return pBool;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::set_Visible(TOLEBOOL pBool/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(402));
  TAutoArgs<1> _args;
  _args[1] = pBool /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::get_StatusBar(TOLEBOOL* pBool/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StatusBar"), DISPID(403));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBool /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IWebBrowser2DispT<T>::get_StatusBar(void)
{
  TOLEBOOL pBool;
  this->get_StatusBar((TOLEBOOL*)&pBool);
  return pBool;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::set_StatusBar(TOLEBOOL pBool/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StatusBar"), DISPID(403));
  TAutoArgs<1> _args;
  _args[1] = pBool /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::get_StatusText(BSTR* StatusText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StatusText"), DISPID(404));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(StatusText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWebBrowser2DispT<T>::get_StatusText(void)
{
  BSTR StatusText;
  this->get_StatusText((BSTR*)&StatusText);
  return StatusText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::set_StatusText(BSTR StatusText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StatusText"), DISPID(404));
  TAutoArgs<1> _args;
  _args[1] = StatusText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::get_ToolBar(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ToolBar"), DISPID(405));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IWebBrowser2DispT<T>::get_ToolBar(void)
{
  int Value;
  this->get_ToolBar((int*)&Value);
  return Value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::set_ToolBar(int Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ToolBar"), DISPID(405));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::get_MenuBar(TOLEBOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MenuBar"), DISPID(406));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IWebBrowser2DispT<T>::get_MenuBar(void)
{
  TOLEBOOL Value;
  this->get_MenuBar((TOLEBOOL*)&Value);
  return Value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::set_MenuBar(TOLEBOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MenuBar"), DISPID(406));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::get_FullScreen(TOLEBOOL* pbFullScreen/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullScreen"), DISPID(407));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbFullScreen /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IWebBrowser2DispT<T>::get_FullScreen(void)
{
  TOLEBOOL pbFullScreen;
  this->get_FullScreen((TOLEBOOL*)&pbFullScreen);
  return pbFullScreen;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::set_FullScreen(TOLEBOOL pbFullScreen/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullScreen"), DISPID(407));
  TAutoArgs<1> _args;
  _args[1] = pbFullScreen /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::GoBack()
{
  _TDispID _dispid(*this, OLETEXT("GoBack"), DISPID(100));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::GoForward()
{
  _TDispID _dispid(*this, OLETEXT("GoForward"), DISPID(101));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::GoHome()
{
  _TDispID _dispid(*this, OLETEXT("GoHome"), DISPID(102));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::GoSearch()
{
  _TDispID _dispid(*this, OLETEXT("GoSearch"), DISPID(103));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::Navigate(BSTR URL/*[in]*/, TVariant* Flags/*[in,opt]*/, 
                               TVariant* TargetFrameName/*[in,opt]*/, TVariant* PostData/*[in,opt]*/
                               , TVariant* Headers/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Navigate"), DISPID(104));
  TAutoArgs<5> _args;
  _args[1] = URL /*[VT_BSTR:0]*/;
  _args[2] = Flags /*[VT_VARIANT:1]*/;
  _args[3] = TargetFrameName /*[VT_VARIANT:1]*/;
  _args[4] = PostData /*[VT_VARIANT:1]*/;
  _args[5] = Headers /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::Refresh()
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(-550));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::Refresh2(TVariant* Level/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Refresh2"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = Level /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::Stop()
{
  _TDispID _dispid(*this, OLETEXT("Stop"), DISPID(106));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::get_Application(LPDISPATCH* ppDisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(200));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppDisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IWebBrowser2DispT<T>::get_Application(void)
{
  LPDISPATCH ppDisp;
  this->get_Application((LPDISPATCH*)&ppDisp);
  return ppDisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::get_Parent(LPDISPATCH* ppDisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppDisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IWebBrowser2DispT<T>::get_Parent(void)
{
  LPDISPATCH ppDisp;
  this->get_Parent((LPDISPATCH*)&ppDisp);
  return ppDisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::get_Container(LPDISPATCH* ppDisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Container"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppDisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IWebBrowser2DispT<T>::get_Container(void)
{
  LPDISPATCH ppDisp;
  this->get_Container((LPDISPATCH*)&ppDisp);
  return ppDisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::get_Document(LPDISPATCH* ppDisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Document"), DISPID(203));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppDisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IWebBrowser2DispT<T>::get_Document(void)
{
  LPDISPATCH ppDisp;
  this->get_Document((LPDISPATCH*)&ppDisp);
  return ppDisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::get_TopLevelContainer(TOLEBOOL* pBool/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TopLevelContainer"), DISPID(204));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBool /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IWebBrowser2DispT<T>::get_TopLevelContainer(void)
{
  TOLEBOOL pBool;
  this->get_TopLevelContainer((TOLEBOOL*)&pBool);
  return pBool;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::get_Type(BSTR* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(205));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Type /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWebBrowser2DispT<T>::get_Type(void)
{
  BSTR Type;
  this->get_Type((BSTR*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::get_Left(long* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(206));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pl /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWebBrowser2DispT<T>::get_Left(void)
{
  long pl;
  this->get_Left((long*)&pl);
  return pl;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::set_Left(long pl/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(206));
  TAutoArgs<1> _args;
  _args[1] = pl /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::get_Top(long* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(207));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pl /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWebBrowser2DispT<T>::get_Top(void)
{
  long pl;
  this->get_Top((long*)&pl);
  return pl;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::set_Top(long pl/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(207));
  TAutoArgs<1> _args;
  _args[1] = pl /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::get_Width(long* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(208));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pl /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWebBrowser2DispT<T>::get_Width(void)
{
  long pl;
  this->get_Width((long*)&pl);
  return pl;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::set_Width(long pl/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(208));
  TAutoArgs<1> _args;
  _args[1] = pl /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::get_Height(long* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(209));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pl /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWebBrowser2DispT<T>::get_Height(void)
{
  long pl;
  this->get_Height((long*)&pl);
  return pl;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::set_Height(long pl/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(209));
  TAutoArgs<1> _args;
  _args[1] = pl /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::get_LocationName(BSTR* LocationName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LocationName"), DISPID(210));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(LocationName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWebBrowser2DispT<T>::get_LocationName(void)
{
  BSTR LocationName;
  this->get_LocationName((BSTR*)&LocationName);
  return LocationName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::get_LocationURL(BSTR* LocationURL/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LocationURL"), DISPID(211));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(LocationURL /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWebBrowser2DispT<T>::get_LocationURL(void)
{
  BSTR LocationURL;
  this->get_LocationURL((BSTR*)&LocationURL);
  return LocationURL;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IWebBrowser2DispT<T>::get_Busy(TOLEBOOL* pBool/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Busy"), DISPID(212));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBool /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IWebBrowser2DispT<T>::get_Busy(void)
{
  TOLEBOOL pBool;
  this->get_Busy((TOLEBOOL*)&pBool);
  return pBool;
}

// *********************************************************************//
// DispIntf:  DWebBrowserEvents2
// Flags:     (4112) Hidden Dispatchable
// GUID:      {34A715A0-6587-11D0-924A-0020AFC7AC4D}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
DWebBrowserEvents2DispT<T>::StatusTextChange(BSTR Text/*[in]*/)
{
  _TDispID _dispid(/* StatusTextChange */ DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DWebBrowserEvents2DispT<T>::ProgressChange(long Progress/*[in]*/, long ProgressMax/*[in]*/)
{
  _TDispID _dispid(/* ProgressChange */ DISPID(108));
  TAutoArgs<2> _args;
  _args[1] = Progress /*[VT_I4:0]*/;
  _args[2] = ProgressMax /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DWebBrowserEvents2DispT<T>::CommandStateChange(long Command/*[in]*/, TOLEBOOL Enable/*[in]*/)
{
  _TDispID _dispid(/* CommandStateChange */ DISPID(105));
  TAutoArgs<2> _args;
  _args[1] = Command /*[VT_I4:0]*/;
  _args[2] = Enable /*[VT_BOOL:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DWebBrowserEvents2DispT<T>::DownloadBegin()
{
  _TDispID _dispid(/* DownloadBegin */ DISPID(106));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DWebBrowserEvents2DispT<T>::DownloadComplete()
{
  _TDispID _dispid(/* DownloadComplete */ DISPID(104));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DWebBrowserEvents2DispT<T>::TitleChange(BSTR Text/*[in]*/)
{
  _TDispID _dispid(/* TitleChange */ DISPID(113));
  TAutoArgs<1> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DWebBrowserEvents2DispT<T>::PropertyChange(BSTR szProperty/*[in]*/)
{
  _TDispID _dispid(/* PropertyChange */ DISPID(112));
  TAutoArgs<1> _args;
  _args[1] = szProperty /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DWebBrowserEvents2DispT<T>::BeforeNavigate2(LPDISPATCH pDisp/*[in]*/, TVariant* URL/*[in]*/, 
                                            TVariant* Flags/*[in]*/, 
                                            TVariant* TargetFrameName/*[in]*/, 
                                            TVariant* PostData/*[in]*/, TVariant* Headers/*[in]*/, 
                                            TOLEBOOL* Cancel/*[in,out]*/)
{
  _TDispID _dispid(/* BeforeNavigate2 */ DISPID(250));
  TAutoArgs<7> _args;
  _args[1] = pDisp /*[VT_DISPATCH:0]*/;
  _args[2] = URL /*[VT_VARIANT:1]*/;
  _args[3] = Flags /*[VT_VARIANT:1]*/;
  _args[4] = TargetFrameName /*[VT_VARIANT:1]*/;
  _args[5] = PostData /*[VT_VARIANT:1]*/;
  _args[6] = Headers /*[VT_VARIANT:1]*/;
  _args[7] = Cancel /*[VT_BOOL:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DWebBrowserEvents2DispT<T>::NewWindow2(LPDISPATCH* ppDisp/*[in,out]*/, TOLEBOOL* Cancel/*[in,out]*/)
{
  _TDispID _dispid(/* NewWindow2 */ DISPID(251));
  TAutoArgs<2> _args;
  _args[1] = ppDisp /*[VT_DISPATCH:1]*/;
  _args[2] = Cancel /*[VT_BOOL:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DWebBrowserEvents2DispT<T>::NavigateComplete2(LPDISPATCH pDisp/*[in]*/, TVariant* URL/*[in]*/)
{
  _TDispID _dispid(/* NavigateComplete2 */ DISPID(252));
  TAutoArgs<2> _args;
  _args[1] = pDisp /*[VT_DISPATCH:0]*/;
  _args[2] = URL /*[VT_VARIANT:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DWebBrowserEvents2DispT<T>::DocumentComplete(LPDISPATCH pDisp/*[in]*/, TVariant* URL/*[in]*/)
{
  _TDispID _dispid(/* DocumentComplete */ DISPID(259));
  TAutoArgs<2> _args;
  _args[1] = pDisp /*[VT_DISPATCH:0]*/;
  _args[2] = URL /*[VT_VARIANT:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DWebBrowserEvents2DispT<T>::OnQuit()
{
  _TDispID _dispid(/* OnQuit */ DISPID(253));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DWebBrowserEvents2DispT<T>::OnVisible(TOLEBOOL Visible/*[in]*/)
{
  _TDispID _dispid(/* OnVisible */ DISPID(254));
  TAutoArgs<1> _args;
  _args[1] = Visible /*[VT_BOOL:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DWebBrowserEvents2DispT<T>::OnToolBar(TOLEBOOL ToolBar/*[in]*/)
{
  _TDispID _dispid(/* OnToolBar */ DISPID(255));
  TAutoArgs<1> _args;
  _args[1] = ToolBar /*[VT_BOOL:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DWebBrowserEvents2DispT<T>::OnMenuBar(TOLEBOOL MenuBar/*[in]*/)
{
  _TDispID _dispid(/* OnMenuBar */ DISPID(256));
  TAutoArgs<1> _args;
  _args[1] = MenuBar /*[VT_BOOL:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DWebBrowserEvents2DispT<T>::OnStatusBar(TOLEBOOL StatusBar/*[in]*/)
{
  _TDispID _dispid(/* OnStatusBar */ DISPID(257));
  TAutoArgs<1> _args;
  _args[1] = StatusBar /*[VT_BOOL:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DWebBrowserEvents2DispT<T>::OnFullScreen(TOLEBOOL FullScreen/*[in]*/)
{
  _TDispID _dispid(/* OnFullScreen */ DISPID(258));
  TAutoArgs<1> _args;
  _args[1] = FullScreen /*[VT_BOOL:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DWebBrowserEvents2DispT<T>::OnTheaterMode(TOLEBOOL TheaterMode/*[in]*/)
{
  _TDispID _dispid(/* OnTheaterMode */ DISPID(260));
  TAutoArgs<1> _args;
  _args[1] = TheaterMode /*[VT_BOOL:0]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  DShellWindowsEvents
// Flags:     (4096) Dispatchable
// GUID:      {FE4106E0-399A-11D0-A48C-00A0C90A8F39}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
DShellWindowsEventsDispT<T>::WindowRegistered(long lCookie/*[in]*/)
{
  _TDispID _dispid(/* WindowRegistered */ DISPID(200));
  TAutoArgs<1> _args;
  _args[1] = lCookie /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DShellWindowsEventsDispT<T>::WindowRevoked(long lCookie/*[in]*/)
{
  _TDispID _dispid(/* WindowRevoked */ DISPID(201));
  TAutoArgs<1> _args;
  _args[1] = lCookie /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIShellWindows
// Interface: IShellWindows
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIShellWindowsT<T>::get_Count(long* Count/*[out,retval]*/)
{
  return (*this)->get_Count(Count);
}

template <class T> long __fastcall
TCOMIShellWindowsT<T>::get_Count(void)
{
  long Count;
  OLECHECK(this->get_Count((long*)&Count));
  return Count;
}

template <class T> HRESULT __fastcall
TCOMIShellWindowsT<T>::Item(TVariantInParam index/*[in,opt]*/, LPDISPATCH* Folder/*[out,retval]*/)
{
  return (*this)->Item(index, Folder);
}

template <class T> LPDISPATCH __fastcall
TCOMIShellWindowsT<T>::Item(TVariantInParam index/*[in,opt]*/)
{
  LPDISPATCH Folder;
  OLECHECK(this->Item(index, (LPDISPATCH*)&Folder));
  return Folder;
}

template <class T> HRESULT __fastcall
TCOMIShellWindowsT<T>::_NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/)
{
  return (*this)->_NewEnum(ppunk);
}

template <class T> LPUNKNOWN __fastcall
TCOMIShellWindowsT<T>::_NewEnum(void)
{
  LPUNKNOWN ppunk;
  OLECHECK(this->_NewEnum((LPUNKNOWN*)&ppunk));
  return ppunk;
}

template <class T> HRESULT __fastcall
TCOMIShellWindowsT<T>::Register(LPDISPATCH pid/*[in]*/, long HWND/*[in]*/, int swClass/*[in]*/, 
                                long* plCookie/*[out]*/)
{
  return (*this)->Register(pid, HWND, swClass, plCookie);
}

template <class T> HRESULT __fastcall
TCOMIShellWindowsT<T>::RegisterPending(long lThreadId/*[in]*/, TVariant* pvarloc/*[in]*/, 
                                       TVariant* pvarlocRoot/*[in]*/, int swClass/*[in]*/, 
                                       long* plCookie/*[out]*/)
{
  return (*this)->RegisterPending(lThreadId, pvarloc, pvarlocRoot, swClass, plCookie);
}

template <class T> HRESULT __fastcall
TCOMIShellWindowsT<T>::Revoke(long lCookie/*[in]*/)
{
  return (*this)->Revoke(lCookie);
}

template <class T> HRESULT __fastcall
TCOMIShellWindowsT<T>::OnNavigate(long lCookie/*[in]*/, TVariant* pvarloc/*[in]*/)
{
  return (*this)->OnNavigate(lCookie, pvarloc);
}

template <class T> HRESULT __fastcall
TCOMIShellWindowsT<T>::OnActivated(long lCookie/*[in]*/, TOLEBOOL fActive/*[in]*/)
{
  return (*this)->OnActivated(lCookie, fActive);
}

template <class T> HRESULT __fastcall
TCOMIShellWindowsT<T>::FindWindow(TVariant* pvarloc/*[in]*/, TVariant* pvarlocRoot/*[in]*/, 
                                  int swClass/*[in]*/, long* pHWND/*[out]*/, int swfwOptions/*[in]*/, 
                                  LPDISPATCH* ppdispOut/*[out,retval]*/)
{
  return (*this)->FindWindow(pvarloc, pvarlocRoot, swClass, pHWND, swfwOptions, ppdispOut);
}

template <class T> LPDISPATCH __fastcall
TCOMIShellWindowsT<T>::FindWindow(TVariant* pvarloc/*[in]*/, TVariant* pvarlocRoot/*[in]*/, 
                                  int swClass/*[in]*/, long* pHWND/*[out]*/, int swfwOptions/*[in]*/)
{
  LPDISPATCH ppdispOut;
  OLECHECK(this->FindWindow(pvarloc, pvarlocRoot, swClass, pHWND, swfwOptions, (LPDISPATCH*)&ppdispOut));
  return ppdispOut;
}

template <class T> HRESULT __fastcall
TCOMIShellWindowsT<T>::OnCreated(long lCookie/*[in]*/, LPUNKNOWN punk/*[in]*/)
{
  return (*this)->OnCreated(lCookie, punk);
}

template <class T> HRESULT __fastcall
TCOMIShellWindowsT<T>::ProcessAttachDetach(TOLEBOOL fAttach/*[in]*/)
{
  return (*this)->ProcessAttachDetach(fAttach);
}

// *********************************************************************//
// DispIntf:  IShellWindows
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {85CB6900-4D95-11CF-960C-0080C7F4EE85}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IShellWindowsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IShellWindowsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IShellWindowsDispT<T>::Item(TVariantInParam index/*[in,opt]*/, LPDISPATCH* Folder/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(Folder /*[VT_DISPATCH:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IShellWindowsDispT<T>::Item(TVariantInParam index/*[in,opt]*/)
{
  LPDISPATCH Folder;
  this->Item(index, (LPDISPATCH*)&Folder);
  return Folder;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IShellWindowsDispT<T>::_NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunk /*[VT_UNKNOWN:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IShellWindowsDispT<T>::_NewEnum(void)
{
  LPUNKNOWN ppunk;
  this->_NewEnum((LPUNKNOWN*)&ppunk);
  return ppunk;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IShellWindowsDispT<T>::Register(LPDISPATCH pid/*[in]*/, long HWND/*[in]*/, int swClass/*[in]*/, 
                                long* plCookie/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("Register"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<4> _args;
  _args[1] = pid /*[VT_DISPATCH:0]*/;
  _args[2] = HWND /*[VT_I4:0]*/;
  _args[3] = swClass /*[VT_INT:0]*/;
  _args[4] = plCookie /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IShellWindowsDispT<T>::RegisterPending(long lThreadId/*[in]*/, TVariant* pvarloc/*[in]*/, 
                                       TVariant* pvarlocRoot/*[in]*/, int swClass/*[in]*/, 
                                       long* plCookie/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("RegisterPending"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<5> _args;
  _args[1] = lThreadId /*[VT_I4:0]*/;
  _args[2] = pvarloc /*[VT_VARIANT:1]*/;
  _args[3] = pvarlocRoot /*[VT_VARIANT:1]*/;
  _args[4] = swClass /*[VT_INT:0]*/;
  _args[5] = plCookie /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IShellWindowsDispT<T>::Revoke(long lCookie/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Revoke"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<1> _args;
  _args[1] = lCookie /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IShellWindowsDispT<T>::OnNavigate(long lCookie/*[in]*/, TVariant* pvarloc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnNavigate"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<2> _args;
  _args[1] = lCookie /*[VT_I4:0]*/;
  _args[2] = pvarloc /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IShellWindowsDispT<T>::OnActivated(long lCookie/*[in]*/, TOLEBOOL fActive/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnActivated"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<2> _args;
  _args[1] = lCookie /*[VT_I4:0]*/;
  _args[2] = fActive /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IShellWindowsDispT<T>::FindWindow(TVariant* pvarloc/*[in]*/, TVariant* pvarlocRoot/*[in]*/, 
                                  int swClass/*[in]*/, long* pHWND/*[out]*/, int swfwOptions/*[in]*/
                                  , LPDISPATCH* ppdispOut/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FindWindow"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<5> _args;
  _args[1] = pvarloc /*[VT_VARIANT:1]*/;
  _args[2] = pvarlocRoot /*[VT_VARIANT:1]*/;
  _args[3] = swClass /*[VT_INT:0]*/;
  _args[4] = pHWND /*[VT_I4:1]*/;
  _args[5] = swfwOptions /*[VT_INT:0]*/;
  return OutRetValSetterPtr(ppdispOut /*[VT_DISPATCH:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IShellWindowsDispT<T>::FindWindow(TVariant* pvarloc/*[in]*/, TVariant* pvarlocRoot/*[in]*/, 
                                  int swClass/*[in]*/, long* pHWND/*[out]*/, int swfwOptions/*[in]*/)
{
  LPDISPATCH ppdispOut;
  this->FindWindow(pvarloc, pvarlocRoot, swClass, pHWND, swfwOptions, (LPDISPATCH*)&ppdispOut);
  return ppdispOut;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IShellWindowsDispT<T>::OnCreated(long lCookie/*[in]*/, LPUNKNOWN punk/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnCreated"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  TAutoArgs<2> _args;
  _args[1] = lCookie /*[VT_I4:0]*/;
  _args[2] = punk /*[VT_UNKNOWN:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IShellWindowsDispT<T>::ProcessAttachDetach(TOLEBOOL fAttach/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ProcessAttachDetach"), DISPID(DISPID_UNKNOWN/*[1610743818]*/));
  TAutoArgs<1> _args;
  _args[1] = fAttach /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIShellUIHelper
// Interface: IShellUIHelper
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIShellUIHelperT<T>::ResetFirstBootMode(void)
{
  return (*this)->ResetFirstBootMode();
}

template <class T> HRESULT __fastcall
TCOMIShellUIHelperT<T>::ResetSafeMode(void)
{
  return (*this)->ResetSafeMode();
}

template <class T> HRESULT __fastcall
TCOMIShellUIHelperT<T>::RefreshOfflineDesktop(void)
{
  return (*this)->RefreshOfflineDesktop();
}

template <class T> HRESULT __fastcall
TCOMIShellUIHelperT<T>::AddFavorite(BSTR URL/*[in]*/, TVariant* Title/*[in,opt]*/)
{
  return (*this)->AddFavorite(URL, Title);
}

template <class T> HRESULT __fastcall
TCOMIShellUIHelperT<T>::AddChannel(BSTR URL/*[in]*/)
{
  return (*this)->AddChannel(URL);
}

template <class T> HRESULT __fastcall
TCOMIShellUIHelperT<T>::AddDesktopComponent(BSTR URL/*[in]*/, BSTR Type/*[in]*/, 
                                            TVariant* Left/*[in,opt]*/, TVariant* Top/*[in,opt]*/, 
                                            TVariant* Width/*[in,opt]*/, 
                                            TVariant* Height/*[in,opt]*/)
{
  return (*this)->AddDesktopComponent(URL, Type, Left, Top, Width, Height);
}

template <class T> HRESULT __fastcall
TCOMIShellUIHelperT<T>::IsSubscribed(BSTR URL/*[in]*/, TOLEBOOL* pBool/*[out,retval]*/)
{
  return (*this)->IsSubscribed(URL, pBool);
}

template <class T> TOLEBOOL __fastcall
TCOMIShellUIHelperT<T>::IsSubscribed(BSTR URL/*[in]*/)
{
  TOLEBOOL pBool;
  OLECHECK(this->IsSubscribed(URL, (TOLEBOOL*)&pBool));
  return pBool;
}

template <class T> HRESULT __fastcall
TCOMIShellUIHelperT<T>::NavigateAndFind(BSTR URL/*[in]*/, BSTR strQuery/*[in]*/, 
                                        TVariant* varTargetFrame/*[in]*/)
{
  return (*this)->NavigateAndFind(URL, strQuery, varTargetFrame);
}

template <class T> HRESULT __fastcall
TCOMIShellUIHelperT<T>::ImportExportFavorites(TOLEBOOL fImport/*[in]*/, BSTR strImpExpPath/*[in]*/)
{
  return (*this)->ImportExportFavorites(fImport, strImpExpPath);
}

template <class T> HRESULT __fastcall
TCOMIShellUIHelperT<T>::AutoCompleteSaveForm(TVariant* Form/*[in,opt]*/)
{
  return (*this)->AutoCompleteSaveForm(Form);
}

template <class T> HRESULT __fastcall
TCOMIShellUIHelperT<T>::AutoScan(BSTR strSearch/*[in]*/, BSTR strFailureUrl/*[in]*/, 
                                 TVariant* pvarTargetFrame/*[in,opt]*/)
{
  return (*this)->AutoScan(strSearch, strFailureUrl, pvarTargetFrame);
}

template <class T> HRESULT __fastcall
TCOMIShellUIHelperT<T>::AutoCompleteAttach(TVariant* Reserved/*[in,opt]*/)
{
  return (*this)->AutoCompleteAttach(Reserved);
}

template <class T> HRESULT __fastcall
TCOMIShellUIHelperT<T>::ShowBrowserUI(BSTR bstrName/*[in]*/, TVariant* pvarIn/*[in]*/, 
                                      TVariant* pvarOut/*[out,retval]*/)
{
  return (*this)->ShowBrowserUI(bstrName, pvarIn, pvarOut);
}

template <class T> TVariant __fastcall
TCOMIShellUIHelperT<T>::ShowBrowserUI(BSTR bstrName/*[in]*/, TVariant* pvarIn/*[in]*/)
{
  TVariant pvarOut;
  OLECHECK(this->ShowBrowserUI(bstrName, pvarIn, (TVariant*)&pvarOut));
  return pvarOut;
}

// *********************************************************************//
// DispIntf:  IShellUIHelper
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {729FE2F8-1EA8-11D1-8F85-00C04FC2FBE1}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IShellUIHelperDispT<T>::ResetFirstBootMode()
{
  _TDispID _dispid(*this, OLETEXT("ResetFirstBootMode"), DISPID(1));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IShellUIHelperDispT<T>::ResetSafeMode()
{
  _TDispID _dispid(*this, OLETEXT("ResetSafeMode"), DISPID(2));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IShellUIHelperDispT<T>::RefreshOfflineDesktop()
{
  _TDispID _dispid(*this, OLETEXT("RefreshOfflineDesktop"), DISPID(3));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IShellUIHelperDispT<T>::AddFavorite(BSTR URL/*[in]*/, TVariant* Title/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddFavorite"), DISPID(4));
  TAutoArgs<2> _args;
  _args[1] = URL /*[VT_BSTR:0]*/;
  _args[2] = Title /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IShellUIHelperDispT<T>::AddChannel(BSTR URL/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddChannel"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = URL /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IShellUIHelperDispT<T>::AddDesktopComponent(BSTR URL/*[in]*/, BSTR Type/*[in]*/, 
                                            TVariant* Left/*[in,opt]*/, TVariant* Top/*[in,opt]*/, 
                                            TVariant* Width/*[in,opt]*/, 
                                            TVariant* Height/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDesktopComponent"), DISPID(6));
  TAutoArgs<6> _args;
  _args[1] = URL /*[VT_BSTR:0]*/;
  _args[2] = Type /*[VT_BSTR:0]*/;
  _args[3] = Left /*[VT_VARIANT:1]*/;
  _args[4] = Top /*[VT_VARIANT:1]*/;
  _args[5] = Width /*[VT_VARIANT:1]*/;
  _args[6] = Height /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IShellUIHelperDispT<T>::IsSubscribed(BSTR URL/*[in]*/, TOLEBOOL* pBool/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsSubscribed"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = URL /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pBool /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IShellUIHelperDispT<T>::IsSubscribed(BSTR URL/*[in]*/)
{
  TOLEBOOL pBool;
  this->IsSubscribed(URL, (TOLEBOOL*)&pBool);
  return pBool;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IShellUIHelperDispT<T>::NavigateAndFind(BSTR URL/*[in]*/, BSTR strQuery/*[in]*/, 
                                        TVariant* varTargetFrame/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NavigateAndFind"), DISPID(8));
  TAutoArgs<3> _args;
  _args[1] = URL /*[VT_BSTR:0]*/;
  _args[2] = strQuery /*[VT_BSTR:0]*/;
  _args[3] = varTargetFrame /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IShellUIHelperDispT<T>::ImportExportFavorites(TOLEBOOL fImport/*[in]*/, BSTR strImpExpPath/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ImportExportFavorites"), DISPID(9));
  TAutoArgs<2> _args;
  _args[1] = fImport /*[VT_BOOL:0]*/;
  _args[2] = strImpExpPath /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IShellUIHelperDispT<T>::AutoCompleteSaveForm(TVariant* Form/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoCompleteSaveForm"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Form /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IShellUIHelperDispT<T>::AutoScan(BSTR strSearch/*[in]*/, BSTR strFailureUrl/*[in]*/, 
                                 TVariant* pvarTargetFrame/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoScan"), DISPID(11));
  TAutoArgs<3> _args;
  _args[1] = strSearch /*[VT_BSTR:0]*/;
  _args[2] = strFailureUrl /*[VT_BSTR:0]*/;
  _args[3] = pvarTargetFrame /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IShellUIHelperDispT<T>::AutoCompleteAttach(TVariant* Reserved/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoCompleteAttach"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = Reserved /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IShellUIHelperDispT<T>::ShowBrowserUI(BSTR bstrName/*[in]*/, TVariant* pvarIn/*[in]*/, 
                                      TVariant* pvarOut/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowBrowserUI"), DISPID(13));
  TAutoArgs<2> _args;
  _args[1] = bstrName /*[VT_BSTR:0]*/;
  _args[2] = pvarIn /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr(pvarOut /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
IShellUIHelperDispT<T>::ShowBrowserUI(BSTR bstrName/*[in]*/, TVariant* pvarIn/*[in]*/)
{
  TVariant pvarOut;
  this->ShowBrowserUI(bstrName, pvarIn, (TVariant*)&pvarOut);
  return pvarOut;
}

// *********************************************************************//
// DispIntf:  _ShellFavoritesNameSpaceEvents
// Flags:     (4096) Dispatchable
// GUID:      {55136806-B2DE-11D1-B9F2-00A0C98BC547}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
_ShellFavoritesNameSpaceEventsDispT<T>::FavoritesSelectionChange(long cItems/*[in]*/, 
                                                                 long hItem/*[in]*/, 
                                                                 BSTR strName/*[in]*/, 
                                                                 BSTR strUrl/*[in]*/, 
                                                                 long cVisits/*[in]*/, 
                                                                 BSTR strDate/*[in]*/, 
                                                                 long fAvailableOffline/*[in]*/)
{
  _TDispID _dispid(/* FavoritesSelectionChange */ DISPID(1));
  TAutoArgs<7> _args;
  _args[1] = cItems /*[VT_I4:0]*/;
  _args[2] = hItem /*[VT_I4:0]*/;
  _args[3] = strName /*[VT_BSTR:0]*/;
  _args[4] = strUrl /*[VT_BSTR:0]*/;
  _args[5] = cVisits /*[VT_I4:0]*/;
  _args[6] = strDate /*[VT_BSTR:0]*/;
  _args[7] = fAvailableOffline /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIShellFavoritesNameSpace
// Interface: IShellFavoritesNameSpace
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIShellFavoritesNameSpaceT<T>::MoveSelectionUp(void)
{
  return (*this)->MoveSelectionUp();
}

template <class T> HRESULT __fastcall
TCOMIShellFavoritesNameSpaceT<T>::MoveSelectionDown(void)
{
  return (*this)->MoveSelectionDown();
}

template <class T> HRESULT __fastcall
TCOMIShellFavoritesNameSpaceT<T>::ResetSort(void)
{
  return (*this)->ResetSort();
}

template <class T> HRESULT __fastcall
TCOMIShellFavoritesNameSpaceT<T>::NewFolder(void)
{
  return (*this)->NewFolder();
}

template <class T> HRESULT __fastcall
TCOMIShellFavoritesNameSpaceT<T>::Synchronize(void)
{
  return (*this)->Synchronize();
}

template <class T> HRESULT __fastcall
TCOMIShellFavoritesNameSpaceT<T>::Import(void)
{
  return (*this)->Import();
}

template <class T> HRESULT __fastcall
TCOMIShellFavoritesNameSpaceT<T>::Export(void)
{
  return (*this)->Export();
}

template <class T> HRESULT __fastcall
TCOMIShellFavoritesNameSpaceT<T>::InvokeContextMenuCommand(BSTR strCommand/*[in]*/)
{
  return (*this)->InvokeContextMenuCommand(strCommand);
}

template <class T> HRESULT __fastcall
TCOMIShellFavoritesNameSpaceT<T>::MoveSelectionTo(void)
{
  return (*this)->MoveSelectionTo();
}

template <class T> HRESULT __fastcall
TCOMIShellFavoritesNameSpaceT<T>::get_FOfflinePackInstalled(TOLEBOOL* pBool/*[out,retval]*/)
{
  return (*this)->get_FOfflinePackInstalled(pBool);
}

template <class T> TOLEBOOL __fastcall
TCOMIShellFavoritesNameSpaceT<T>::get_FOfflinePackInstalled(void)
{
  TOLEBOOL pBool;
  OLECHECK(this->get_FOfflinePackInstalled((TOLEBOOL*)&pBool));
  return pBool;
}

template <class T> HRESULT __fastcall
TCOMIShellFavoritesNameSpaceT<T>::CreateSubscriptionForSelection(TOLEBOOL* pBool/*[out,retval]*/)
{
  return (*this)->CreateSubscriptionForSelection(pBool);
}

template <class T> TOLEBOOL __fastcall
TCOMIShellFavoritesNameSpaceT<T>::CreateSubscriptionForSelection(void)
{
  TOLEBOOL pBool;
  OLECHECK(this->CreateSubscriptionForSelection((TOLEBOOL*)&pBool));
  return pBool;
}

template <class T> HRESULT __fastcall
TCOMIShellFavoritesNameSpaceT<T>::DeleteSubscriptionForSelection(TOLEBOOL* pBool/*[out,retval]*/)
{
  return (*this)->DeleteSubscriptionForSelection(pBool);
}

template <class T> TOLEBOOL __fastcall
TCOMIShellFavoritesNameSpaceT<T>::DeleteSubscriptionForSelection(void)
{
  TOLEBOOL pBool;
  OLECHECK(this->DeleteSubscriptionForSelection((TOLEBOOL*)&pBool));
  return pBool;
}

template <class T> HRESULT __fastcall
TCOMIShellFavoritesNameSpaceT<T>::SetRoot(BSTR bstrFullPath/*[in]*/)
{
  return (*this)->SetRoot(bstrFullPath);
}

// *********************************************************************//
// DispIntf:  IShellFavoritesNameSpace
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {55136804-B2DE-11D1-B9F2-00A0C98BC547}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IShellFavoritesNameSpaceDispT<T>::MoveSelectionUp()
{
  _TDispID _dispid(*this, OLETEXT("MoveSelectionUp"), DISPID(1));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IShellFavoritesNameSpaceDispT<T>::MoveSelectionDown()
{
  _TDispID _dispid(*this, OLETEXT("MoveSelectionDown"), DISPID(2));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IShellFavoritesNameSpaceDispT<T>::ResetSort()
{
  _TDispID _dispid(*this, OLETEXT("ResetSort"), DISPID(3));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IShellFavoritesNameSpaceDispT<T>::NewFolder()
{
  _TDispID _dispid(*this, OLETEXT("NewFolder"), DISPID(4));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IShellFavoritesNameSpaceDispT<T>::Synchronize()
{
  _TDispID _dispid(*this, OLETEXT("Synchronize"), DISPID(5));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IShellFavoritesNameSpaceDispT<T>::Import()
{
  _TDispID _dispid(*this, OLETEXT("Import"), DISPID(6));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IShellFavoritesNameSpaceDispT<T>::Export()
{
  _TDispID _dispid(*this, OLETEXT("Export"), DISPID(7));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IShellFavoritesNameSpaceDispT<T>::InvokeContextMenuCommand(BSTR strCommand/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InvokeContextMenuCommand"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = strCommand /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IShellFavoritesNameSpaceDispT<T>::MoveSelectionTo()
{
  _TDispID _dispid(*this, OLETEXT("MoveSelectionTo"), DISPID(9));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IShellFavoritesNameSpaceDispT<T>::get_FOfflinePackInstalled(TOLEBOOL* pBool/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FOfflinePackInstalled"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBool /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IShellFavoritesNameSpaceDispT<T>::get_FOfflinePackInstalled(void)
{
  TOLEBOOL pBool;
  this->get_FOfflinePackInstalled((TOLEBOOL*)&pBool);
  return pBool;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IShellFavoritesNameSpaceDispT<T>::CreateSubscriptionForSelection(TOLEBOOL* pBool/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateSubscriptionForSelection"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBool /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IShellFavoritesNameSpaceDispT<T>::CreateSubscriptionForSelection(void)
{
  TOLEBOOL pBool;
  this->CreateSubscriptionForSelection((TOLEBOOL*)&pBool);
  return pBool;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IShellFavoritesNameSpaceDispT<T>::DeleteSubscriptionForSelection(TOLEBOOL* pBool/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeleteSubscriptionForSelection"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBool /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IShellFavoritesNameSpaceDispT<T>::DeleteSubscriptionForSelection(void)
{
  TOLEBOOL pBool;
  this->DeleteSubscriptionForSelection((TOLEBOOL*)&pBool);
  return pBool;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IShellFavoritesNameSpaceDispT<T>::SetRoot(BSTR bstrFullPath/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetRoot"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = bstrFullPath /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIScriptErrorList
// Interface: IScriptErrorList
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIScriptErrorListT<T>::advanceError(void)
{
  return (*this)->advanceError();
}

template <class T> HRESULT __fastcall
TCOMIScriptErrorListT<T>::retreatError(void)
{
  return (*this)->retreatError();
}

template <class T> HRESULT __fastcall
TCOMIScriptErrorListT<T>::canAdvanceError(long* pfCanAdvance/*[out,retval]*/)
{
  return (*this)->canAdvanceError(pfCanAdvance);
}

template <class T> long __fastcall
TCOMIScriptErrorListT<T>::canAdvanceError(void)
{
  long pfCanAdvance;
  OLECHECK(this->canAdvanceError((long*)&pfCanAdvance));
  return pfCanAdvance;
}

template <class T> HRESULT __fastcall
TCOMIScriptErrorListT<T>::canRetreatError(long* pfCanRetreat/*[out,retval]*/)
{
  return (*this)->canRetreatError(pfCanRetreat);
}

template <class T> long __fastcall
TCOMIScriptErrorListT<T>::canRetreatError(void)
{
  long pfCanRetreat;
  OLECHECK(this->canRetreatError((long*)&pfCanRetreat));
  return pfCanRetreat;
}

template <class T> HRESULT __fastcall
TCOMIScriptErrorListT<T>::getErrorLine(long* plLine/*[out,retval]*/)
{
  return (*this)->getErrorLine(plLine);
}

template <class T> long __fastcall
TCOMIScriptErrorListT<T>::getErrorLine(void)
{
  long plLine;
  OLECHECK(this->getErrorLine((long*)&plLine));
  return plLine;
}

template <class T> HRESULT __fastcall
TCOMIScriptErrorListT<T>::getErrorChar(long* plChar/*[out,retval]*/)
{
  return (*this)->getErrorChar(plChar);
}

template <class T> long __fastcall
TCOMIScriptErrorListT<T>::getErrorChar(void)
{
  long plChar;
  OLECHECK(this->getErrorChar((long*)&plChar));
  return plChar;
}

template <class T> HRESULT __fastcall
TCOMIScriptErrorListT<T>::getErrorCode(long* plCode/*[out,retval]*/)
{
  return (*this)->getErrorCode(plCode);
}

template <class T> long __fastcall
TCOMIScriptErrorListT<T>::getErrorCode(void)
{
  long plCode;
  OLECHECK(this->getErrorCode((long*)&plCode));
  return plCode;
}

template <class T> HRESULT __fastcall
TCOMIScriptErrorListT<T>::getErrorMsg(BSTR* pstr/*[out,retval]*/)
{
  return (*this)->getErrorMsg(pstr);
}

template <class T> BSTR __fastcall
TCOMIScriptErrorListT<T>::getErrorMsg(void)
{
  BSTR pstr = 0;
  OLECHECK(this->getErrorMsg((BSTR*)&pstr));
  return pstr;
}

template <class T> HRESULT __fastcall
TCOMIScriptErrorListT<T>::getErrorUrl(BSTR* pstr/*[out,retval]*/)
{
  return (*this)->getErrorUrl(pstr);
}

template <class T> BSTR __fastcall
TCOMIScriptErrorListT<T>::getErrorUrl(void)
{
  BSTR pstr = 0;
  OLECHECK(this->getErrorUrl((BSTR*)&pstr));
  return pstr;
}

template <class T> HRESULT __fastcall
TCOMIScriptErrorListT<T>::getAlwaysShowLockState(long* pfAlwaysShowLocked/*[out,retval]*/)
{
  return (*this)->getAlwaysShowLockState(pfAlwaysShowLocked);
}

template <class T> long __fastcall
TCOMIScriptErrorListT<T>::getAlwaysShowLockState(void)
{
  long pfAlwaysShowLocked;
  OLECHECK(this->getAlwaysShowLockState((long*)&pfAlwaysShowLocked));
  return pfAlwaysShowLocked;
}

template <class T> HRESULT __fastcall
TCOMIScriptErrorListT<T>::getDetailsPaneOpen(long* pfDetailsPaneOpen/*[out,retval]*/)
{
  return (*this)->getDetailsPaneOpen(pfDetailsPaneOpen);
}

template <class T> long __fastcall
TCOMIScriptErrorListT<T>::getDetailsPaneOpen(void)
{
  long pfDetailsPaneOpen;
  OLECHECK(this->getDetailsPaneOpen((long*)&pfDetailsPaneOpen));
  return pfDetailsPaneOpen;
}

template <class T> HRESULT __fastcall
TCOMIScriptErrorListT<T>::setDetailsPaneOpen(long fDetailsPaneOpen)
{
  return (*this)->setDetailsPaneOpen(fDetailsPaneOpen);
}

template <class T> HRESULT __fastcall
TCOMIScriptErrorListT<T>::getPerErrorDisplay(long* pfPerErrorDisplay/*[out,retval]*/)
{
  return (*this)->getPerErrorDisplay(pfPerErrorDisplay);
}

template <class T> long __fastcall
TCOMIScriptErrorListT<T>::getPerErrorDisplay(void)
{
  long pfPerErrorDisplay;
  OLECHECK(this->getPerErrorDisplay((long*)&pfPerErrorDisplay));
  return pfPerErrorDisplay;
}

template <class T> HRESULT __fastcall
TCOMIScriptErrorListT<T>::setPerErrorDisplay(long fPerErrorDisplay)
{
  return (*this)->setPerErrorDisplay(fPerErrorDisplay);
}

// *********************************************************************//
// DispIntf:  IScriptErrorList
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F3470F24-15FD-11D2-BB2E-00805FF7EFCA}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IScriptErrorListDispT<T>::advanceError()
{
  _TDispID _dispid(*this, OLETEXT("advanceError"), DISPID(10));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IScriptErrorListDispT<T>::retreatError()
{
  _TDispID _dispid(*this, OLETEXT("retreatError"), DISPID(11));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IScriptErrorListDispT<T>::canAdvanceError(long* pfCanAdvance/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("canAdvanceError"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfCanAdvance /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IScriptErrorListDispT<T>::canAdvanceError(void)
{
  long pfCanAdvance;
  this->canAdvanceError((long*)&pfCanAdvance);
  return pfCanAdvance;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IScriptErrorListDispT<T>::canRetreatError(long* pfCanRetreat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("canRetreatError"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfCanRetreat /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IScriptErrorListDispT<T>::canRetreatError(void)
{
  long pfCanRetreat;
  this->canRetreatError((long*)&pfCanRetreat);
  return pfCanRetreat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IScriptErrorListDispT<T>::getErrorLine(long* plLine/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getErrorLine"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plLine /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IScriptErrorListDispT<T>::getErrorLine(void)
{
  long plLine;
  this->getErrorLine((long*)&plLine);
  return plLine;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IScriptErrorListDispT<T>::getErrorChar(long* plChar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getErrorChar"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plChar /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IScriptErrorListDispT<T>::getErrorChar(void)
{
  long plChar;
  this->getErrorChar((long*)&plChar);
  return plChar;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IScriptErrorListDispT<T>::getErrorCode(long* plCode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getErrorCode"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCode /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IScriptErrorListDispT<T>::getErrorCode(void)
{
  long plCode;
  this->getErrorCode((long*)&plCode);
  return plCode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IScriptErrorListDispT<T>::getErrorMsg(BSTR* pstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getErrorMsg"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pstr /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IScriptErrorListDispT<T>::getErrorMsg(void)
{
  BSTR pstr;
  this->getErrorMsg((BSTR*)&pstr);
  return pstr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IScriptErrorListDispT<T>::getErrorUrl(BSTR* pstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getErrorUrl"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pstr /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IScriptErrorListDispT<T>::getErrorUrl(void)
{
  BSTR pstr;
  this->getErrorUrl((BSTR*)&pstr);
  return pstr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IScriptErrorListDispT<T>::getAlwaysShowLockState(long* pfAlwaysShowLocked/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getAlwaysShowLockState"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfAlwaysShowLocked /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IScriptErrorListDispT<T>::getAlwaysShowLockState(void)
{
  long pfAlwaysShowLocked;
  this->getAlwaysShowLockState((long*)&pfAlwaysShowLocked);
  return pfAlwaysShowLocked;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IScriptErrorListDispT<T>::getDetailsPaneOpen(long* pfDetailsPaneOpen/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getDetailsPaneOpen"), DISPID(19));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfDetailsPaneOpen /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IScriptErrorListDispT<T>::getDetailsPaneOpen(void)
{
  long pfDetailsPaneOpen;
  this->getDetailsPaneOpen((long*)&pfDetailsPaneOpen);
  return pfDetailsPaneOpen;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IScriptErrorListDispT<T>::setDetailsPaneOpen(long fDetailsPaneOpen)
{
  _TDispID _dispid(*this, OLETEXT("setDetailsPaneOpen"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = fDetailsPaneOpen /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IScriptErrorListDispT<T>::getPerErrorDisplay(long* pfPerErrorDisplay/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getPerErrorDisplay"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfPerErrorDisplay /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IScriptErrorListDispT<T>::getPerErrorDisplay(void)
{
  long pfPerErrorDisplay;
  this->getPerErrorDisplay((long*)&pfPerErrorDisplay);
  return pfPerErrorDisplay;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IScriptErrorListDispT<T>::setPerErrorDisplay(long fPerErrorDisplay)
{
  _TDispID _dispid(*this, OLETEXT("setPerErrorDisplay"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = fPerErrorDisplay /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ISearch
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {BA9239A4-3DD5-11D2-BF8B-00C04FB93661}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchDispT<T>::get_Title(BSTR* pbstrTitle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Title"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrTitle /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISearchDispT<T>::get_Title(void)
{
  BSTR pbstrTitle;
  this->get_Title((BSTR*)&pbstrTitle);
  return pbstrTitle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchDispT<T>::get_Id(BSTR* pbstrId/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Id"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrId /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISearchDispT<T>::get_Id(void)
{
  BSTR pbstrId;
  this->get_Id((BSTR*)&pbstrId);
  return pbstrId;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchDispT<T>::get_URL(BSTR* pbstrUrl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("URL"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrUrl /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISearchDispT<T>::get_URL(void)
{
  BSTR pbstrUrl;
  this->get_URL((BSTR*)&pbstrUrl);
  return pbstrUrl;
}

// *********************************************************************//
// DispIntf:  ISearches
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {47C922A2-3DD5-11D2-BF8B-00C04FB93661}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchesDispT<T>::get_Count(long* plCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISearchesDispT<T>::get_Count(void)
{
  long plCount;
  this->get_Count((long*)&plCount);
  return plCount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchesDispT<T>::get_Default(BSTR* pbstrDefault/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Default"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrDefault /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISearchesDispT<T>::get_Default(void)
{
  BSTR pbstrDefault;
  this->get_Default((BSTR*)&pbstrDefault);
  return pbstrDefault;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchesDispT<T>::Item(TVariantInParam index/*[in,opt]*/, 
                        Shdocvw_tlb::ISearchPtr* ppid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Shdocvw_tlb::ISearch**)ppid /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Shdocvw_tlb::ISearchPtr __fastcall
ISearchesDispT<T>::Item(TVariantInParam index/*[in,opt]*/)
{
  Shdocvw_tlb::ISearchPtr ppid;
  this->Item(index, (Shdocvw_tlb::ISearchPtr*)&ppid);
  return ppid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchesDispT<T>::_NewEnum(LPUNKNOWN* ppunk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunk /*[VT_UNKNOWN:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
ISearchesDispT<T>::_NewEnum(void)
{
  LPUNKNOWN ppunk;
  this->_NewEnum((LPUNKNOWN*)&ppunk);
  return ppunk;
}

// *********************************************************************//
// DispIntf:  ISearchAssistantOC
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {72423E8F-8011-11D2-BE79-00A0C9A83DA1}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOCDispT<T>::AddNextMenuItem(BSTR bstrText/*[in]*/, long idItem/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddNextMenuItem"), DISPID(1));
  TAutoArgs<2> _args;
  _args[1] = bstrText /*[VT_BSTR:0]*/;
  _args[2] = idItem /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOCDispT<T>::SetDefaultSearchUrl(BSTR bstrUrl/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDefaultSearchUrl"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = bstrUrl /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOCDispT<T>::NavigateToDefaultSearch()
{
  _TDispID _dispid(*this, OLETEXT("NavigateToDefaultSearch"), DISPID(3));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOCDispT<T>::IsRestricted(BSTR bstrGuid/*[in]*/, TOLEBOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsRestricted"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = bstrGuid /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
ISearchAssistantOCDispT<T>::IsRestricted(BSTR bstrGuid/*[in]*/)
{
  TOLEBOOL pVal;
  this->IsRestricted(bstrGuid, (TOLEBOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOCDispT<T>::get_ShellFeaturesEnabled(TOLEBOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShellFeaturesEnabled"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
ISearchAssistantOCDispT<T>::get_ShellFeaturesEnabled(void)
{
  TOLEBOOL pVal;
  this->get_ShellFeaturesEnabled((TOLEBOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOCDispT<T>::get_SearchAssistantDefault(TOLEBOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SearchAssistantDefault"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
ISearchAssistantOCDispT<T>::get_SearchAssistantDefault(void)
{
  TOLEBOOL pVal;
  this->get_SearchAssistantDefault((TOLEBOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOCDispT<T>::get_Searches(Shdocvw_tlb::ISearchesPtr* ppid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Searches"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Shdocvw_tlb::ISearches**)ppid /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Shdocvw_tlb::ISearchesPtr __fastcall
ISearchAssistantOCDispT<T>::get_Searches(void)
{
  Shdocvw_tlb::ISearchesPtr ppid;
  this->get_Searches((Shdocvw_tlb::ISearchesPtr*)&ppid);
  return ppid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOCDispT<T>::get_InWebFolder(TOLEBOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InWebFolder"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
ISearchAssistantOCDispT<T>::get_InWebFolder(void)
{
  TOLEBOOL pVal;
  this->get_InWebFolder((TOLEBOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOCDispT<T>::PutProperty(TOLEBOOL bPerLocale/*[in]*/, BSTR bstrName/*[in]*/, 
                                        BSTR bstrValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PutProperty"), DISPID(9));
  TAutoArgs<3> _args;
  _args[1] = bPerLocale /*[VT_BOOL:0]*/;
  _args[2] = bstrName /*[VT_BSTR:0]*/;
  _args[3] = bstrValue /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOCDispT<T>::GetProperty(TOLEBOOL bPerLocale/*[in]*/, BSTR bstrName/*[in]*/, 
                                        BSTR* pbstrValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetProperty"), DISPID(10));
  TAutoArgs<2> _args;
  _args[1] = bPerLocale /*[VT_BOOL:0]*/;
  _args[2] = bstrName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pbstrValue /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
ISearchAssistantOCDispT<T>::GetProperty(TOLEBOOL bPerLocale/*[in]*/, BSTR bstrName/*[in]*/)
{
  BSTR pbstrValue;
  this->GetProperty(bPerLocale, bstrName, (BSTR*)&pbstrValue);
  return pbstrValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOCDispT<T>::set_EventHandled(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EventHandled"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOCDispT<T>::ResetNextMenu()
{
  _TDispID _dispid(*this, OLETEXT("ResetNextMenu"), DISPID(12));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOCDispT<T>::FindOnWeb()
{
  _TDispID _dispid(*this, OLETEXT("FindOnWeb"), DISPID(13));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOCDispT<T>::FindFilesOrFolders()
{
  _TDispID _dispid(*this, OLETEXT("FindFilesOrFolders"), DISPID(14));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOCDispT<T>::FindComputer()
{
  _TDispID _dispid(*this, OLETEXT("FindComputer"), DISPID(15));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOCDispT<T>::FindPrinter()
{
  _TDispID _dispid(*this, OLETEXT("FindPrinter"), DISPID(16));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOCDispT<T>::FindPeople()
{
  _TDispID _dispid(*this, OLETEXT("FindPeople"), DISPID(17));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOCDispT<T>::GetSearchAssistantURL(TOLEBOOL bSubstitute/*[in]*/, 
                                                  TOLEBOOL bCustomize/*[in]*/, 
                                                  BSTR* pbstrValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetSearchAssistantURL"), DISPID(18));
  TAutoArgs<2> _args;
  _args[1] = bSubstitute /*[VT_BOOL:0]*/;
  _args[2] = bCustomize /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr(pbstrValue /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
ISearchAssistantOCDispT<T>::GetSearchAssistantURL(TOLEBOOL bSubstitute/*[in]*/, 
                                                  TOLEBOOL bCustomize/*[in]*/)
{
  BSTR pbstrValue;
  this->GetSearchAssistantURL(bSubstitute, bCustomize, (BSTR*)&pbstrValue);
  return pbstrValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOCDispT<T>::NotifySearchSettingsChanged()
{
  _TDispID _dispid(*this, OLETEXT("NotifySearchSettingsChanged"), DISPID(19));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOCDispT<T>::set_ASProvider(BSTR pProvider/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ASProvider"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = pProvider /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOCDispT<T>::get_ASProvider(BSTR* pProvider/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ASProvider"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pProvider /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISearchAssistantOCDispT<T>::get_ASProvider(void)
{
  BSTR pProvider;
  this->get_ASProvider((BSTR*)&pProvider);
  return pProvider;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOCDispT<T>::set_ASSetting(int pSetting/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ASSetting"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = pSetting /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOCDispT<T>::get_ASSetting(int* pSetting/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ASSetting"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pSetting /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ISearchAssistantOCDispT<T>::get_ASSetting(void)
{
  int pSetting;
  this->get_ASSetting((int*)&pSetting);
  return pSetting;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOCDispT<T>::NETDetectNextNavigate()
{
  _TDispID _dispid(*this, OLETEXT("NETDetectNextNavigate"), DISPID(22));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOCDispT<T>::PutFindText(BSTR FindText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PutFindText"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = FindText /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOCDispT<T>::get_Version(int* pVersion/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVersion /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ISearchAssistantOCDispT<T>::get_Version(void)
{
  int pVersion;
  this->get_Version((int*)&pVersion);
  return pVersion;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOCDispT<T>::EncodeString(BSTR bstrValue/*[in]*/, BSTR bstrCharSet/*[in]*/, 
                                         TOLEBOOL bUseUTF8/*[in]*/, 
                                         BSTR* pbstrResult/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EncodeString"), DISPID(25));
  TAutoArgs<3> _args;
  _args[1] = bstrValue /*[VT_BSTR:0]*/;
  _args[2] = bstrCharSet /*[VT_BSTR:0]*/;
  _args[3] = bUseUTF8 /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr(pbstrResult /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
ISearchAssistantOCDispT<T>::EncodeString(BSTR bstrValue/*[in]*/, BSTR bstrCharSet/*[in]*/, 
                                         TOLEBOOL bUseUTF8/*[in]*/)
{
  BSTR pbstrResult;
  this->EncodeString(bstrValue, bstrCharSet, bUseUTF8, (BSTR*)&pbstrResult);
  return pbstrResult;
}

// *********************************************************************//
// SmartIntf: TCOMISearchAssistantOC2
// Interface: ISearchAssistantOC2
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMISearchAssistantOC2T<T>::get_ShowFindPrinter(TOLEBOOL* pbShowFindPrinter/*[out,retval]*/)
{
  return (*this)->get_ShowFindPrinter(pbShowFindPrinter);
}

template <class T> TOLEBOOL __fastcall
TCOMISearchAssistantOC2T<T>::get_ShowFindPrinter(void)
{
  TOLEBOOL pbShowFindPrinter;
  OLECHECK(this->get_ShowFindPrinter((TOLEBOOL*)&pbShowFindPrinter));
  return pbShowFindPrinter;
}

// *********************************************************************//
// DispIntf:  ISearchAssistantOC2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {72423E8F-8011-11D2-BE79-00A0C9A83DA2}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOC2DispT<T>::get_ShowFindPrinter(TOLEBOOL* pbShowFindPrinter/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowFindPrinter"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbShowFindPrinter /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
ISearchAssistantOC2DispT<T>::get_ShowFindPrinter(void)
{
  TOLEBOOL pbShowFindPrinter;
  this->get_ShowFindPrinter((TOLEBOOL*)&pbShowFindPrinter);
  return pbShowFindPrinter;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOC2DispT<T>::AddNextMenuItem(BSTR bstrText/*[in]*/, long idItem/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddNextMenuItem"), DISPID(1));
  TAutoArgs<2> _args;
  _args[1] = bstrText /*[VT_BSTR:0]*/;
  _args[2] = idItem /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOC2DispT<T>::SetDefaultSearchUrl(BSTR bstrUrl/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDefaultSearchUrl"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = bstrUrl /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOC2DispT<T>::NavigateToDefaultSearch()
{
  _TDispID _dispid(*this, OLETEXT("NavigateToDefaultSearch"), DISPID(3));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOC2DispT<T>::IsRestricted(BSTR bstrGuid/*[in]*/, TOLEBOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsRestricted"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = bstrGuid /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
ISearchAssistantOC2DispT<T>::IsRestricted(BSTR bstrGuid/*[in]*/)
{
  TOLEBOOL pVal;
  this->IsRestricted(bstrGuid, (TOLEBOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOC2DispT<T>::get_ShellFeaturesEnabled(TOLEBOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShellFeaturesEnabled"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
ISearchAssistantOC2DispT<T>::get_ShellFeaturesEnabled(void)
{
  TOLEBOOL pVal;
  this->get_ShellFeaturesEnabled((TOLEBOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOC2DispT<T>::get_SearchAssistantDefault(TOLEBOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SearchAssistantDefault"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
ISearchAssistantOC2DispT<T>::get_SearchAssistantDefault(void)
{
  TOLEBOOL pVal;
  this->get_SearchAssistantDefault((TOLEBOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOC2DispT<T>::get_Searches(Shdocvw_tlb::ISearchesPtr* ppid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Searches"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Shdocvw_tlb::ISearches**)ppid /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Shdocvw_tlb::ISearchesPtr __fastcall
ISearchAssistantOC2DispT<T>::get_Searches(void)
{
  Shdocvw_tlb::ISearchesPtr ppid;
  this->get_Searches((Shdocvw_tlb::ISearchesPtr*)&ppid);
  return ppid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOC2DispT<T>::get_InWebFolder(TOLEBOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InWebFolder"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
ISearchAssistantOC2DispT<T>::get_InWebFolder(void)
{
  TOLEBOOL pVal;
  this->get_InWebFolder((TOLEBOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOC2DispT<T>::PutProperty(TOLEBOOL bPerLocale/*[in]*/, BSTR bstrName/*[in]*/, 
                                         BSTR bstrValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PutProperty"), DISPID(9));
  TAutoArgs<3> _args;
  _args[1] = bPerLocale /*[VT_BOOL:0]*/;
  _args[2] = bstrName /*[VT_BSTR:0]*/;
  _args[3] = bstrValue /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOC2DispT<T>::GetProperty(TOLEBOOL bPerLocale/*[in]*/, BSTR bstrName/*[in]*/, 
                                         BSTR* pbstrValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetProperty"), DISPID(10));
  TAutoArgs<2> _args;
  _args[1] = bPerLocale /*[VT_BOOL:0]*/;
  _args[2] = bstrName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pbstrValue /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
ISearchAssistantOC2DispT<T>::GetProperty(TOLEBOOL bPerLocale/*[in]*/, BSTR bstrName/*[in]*/)
{
  BSTR pbstrValue;
  this->GetProperty(bPerLocale, bstrName, (BSTR*)&pbstrValue);
  return pbstrValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOC2DispT<T>::set_EventHandled(TOLEBOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EventHandled"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOC2DispT<T>::ResetNextMenu()
{
  _TDispID _dispid(*this, OLETEXT("ResetNextMenu"), DISPID(12));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOC2DispT<T>::FindOnWeb()
{
  _TDispID _dispid(*this, OLETEXT("FindOnWeb"), DISPID(13));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOC2DispT<T>::FindFilesOrFolders()
{
  _TDispID _dispid(*this, OLETEXT("FindFilesOrFolders"), DISPID(14));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOC2DispT<T>::FindComputer()
{
  _TDispID _dispid(*this, OLETEXT("FindComputer"), DISPID(15));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOC2DispT<T>::FindPrinter()
{
  _TDispID _dispid(*this, OLETEXT("FindPrinter"), DISPID(16));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOC2DispT<T>::FindPeople()
{
  _TDispID _dispid(*this, OLETEXT("FindPeople"), DISPID(17));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOC2DispT<T>::GetSearchAssistantURL(TOLEBOOL bSubstitute/*[in]*/, 
                                                   TOLEBOOL bCustomize/*[in]*/, 
                                                   BSTR* pbstrValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetSearchAssistantURL"), DISPID(18));
  TAutoArgs<2> _args;
  _args[1] = bSubstitute /*[VT_BOOL:0]*/;
  _args[2] = bCustomize /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr(pbstrValue /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
ISearchAssistantOC2DispT<T>::GetSearchAssistantURL(TOLEBOOL bSubstitute/*[in]*/, 
                                                   TOLEBOOL bCustomize/*[in]*/)
{
  BSTR pbstrValue;
  this->GetSearchAssistantURL(bSubstitute, bCustomize, (BSTR*)&pbstrValue);
  return pbstrValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOC2DispT<T>::NotifySearchSettingsChanged()
{
  _TDispID _dispid(*this, OLETEXT("NotifySearchSettingsChanged"), DISPID(19));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOC2DispT<T>::set_ASProvider(BSTR pProvider/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ASProvider"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = pProvider /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOC2DispT<T>::get_ASProvider(BSTR* pProvider/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ASProvider"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pProvider /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISearchAssistantOC2DispT<T>::get_ASProvider(void)
{
  BSTR pProvider;
  this->get_ASProvider((BSTR*)&pProvider);
  return pProvider;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOC2DispT<T>::set_ASSetting(int pSetting/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ASSetting"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = pSetting /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOC2DispT<T>::get_ASSetting(int* pSetting/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ASSetting"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pSetting /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ISearchAssistantOC2DispT<T>::get_ASSetting(void)
{
  int pSetting;
  this->get_ASSetting((int*)&pSetting);
  return pSetting;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOC2DispT<T>::NETDetectNextNavigate()
{
  _TDispID _dispid(*this, OLETEXT("NETDetectNextNavigate"), DISPID(22));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOC2DispT<T>::PutFindText(BSTR FindText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PutFindText"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = FindText /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOC2DispT<T>::get_Version(int* pVersion/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVersion /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ISearchAssistantOC2DispT<T>::get_Version(void)
{
  int pVersion;
  this->get_Version((int*)&pVersion);
  return pVersion;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISearchAssistantOC2DispT<T>::EncodeString(BSTR bstrValue/*[in]*/, BSTR bstrCharSet/*[in]*/, 
                                          TOLEBOOL bUseUTF8/*[in]*/, 
                                          BSTR* pbstrResult/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EncodeString"), DISPID(25));
  TAutoArgs<3> _args;
  _args[1] = bstrValue /*[VT_BSTR:0]*/;
  _args[2] = bstrCharSet /*[VT_BSTR:0]*/;
  _args[3] = bUseUTF8 /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr(pbstrResult /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
ISearchAssistantOC2DispT<T>::EncodeString(BSTR bstrValue/*[in]*/, BSTR bstrCharSet/*[in]*/, 
                                          TOLEBOOL bUseUTF8/*[in]*/)
{
  BSTR pbstrResult;
  this->EncodeString(bstrValue, bstrCharSet, bUseUTF8, (BSTR*)&pbstrResult);
  return pbstrResult;
}

// *********************************************************************//
// DispIntf:  _SearchAssistantEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {1611FDDA-445B-11D2-85DE-00C04FA35C89}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
_SearchAssistantEventsDispT<T>::OnNextMenuSelect(long idItem/*[in]*/)
{
  _TDispID _dispid(/* OnNextMenuSelect */ DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = idItem /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_SearchAssistantEventsDispT<T>::OnNewSearch()
{
  _TDispID _dispid(/* OnNewSearch */ DISPID(2));
  OleProcedure(_dispid);
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CppInternetExplorer
// Interface: TCOMIWebBrowser2
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIWebBrowser2, IWebBrowser2, &CLSID_CppInternetExplorer, &IID_IWebBrowser2> CoCppInternetExplorer;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CppShellBrowserWindow
// Interface: TCOMIWebBrowser2
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIWebBrowser2, IWebBrowser2, &CLSID_CppShellBrowserWindow, &IID_IWebBrowser2> CoCppShellBrowserWindow;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CppShellWindows
// Interface: TCOMIShellWindows
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIShellWindows, IShellWindows, &CLSID_CppShellWindows, &IID_IShellWindows> CoCppShellWindows;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CppShellUIHelper
// Interface: TCOMIShellUIHelper
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIShellUIHelper, IShellUIHelper, &CLSID_CppShellUIHelper, &IID_IShellUIHelper> CoCppShellUIHelper;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ShellFavoritesNameSpace
// Interface: TCOMIShellFavoritesNameSpace
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIShellFavoritesNameSpace, IShellFavoritesNameSpace, &CLSID_ShellFavoritesNameSpace, &IID_IShellFavoritesNameSpace> CoShellFavoritesNameSpace;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CScriptErrorList
// Interface: TCOMIScriptErrorList
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIScriptErrorList, IScriptErrorList, &CLSID_CScriptErrorList, &IID_IScriptErrorList> CoCScriptErrorList;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CppSearchAssistantOC
// Interface: TCOMISearchAssistantOC2
// *********************************************************************//
typedef TCoClassCreatorT<TCOMISearchAssistantOC2, ISearchAssistantOC2, &CLSID_CppSearchAssistantOC, &IID_ISearchAssistantOC2> CoCppSearchAssistantOC;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


};     // namespace Shdocvw_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Shdocvw_tlb;
#endif

#pragma option pop

#endif // __SHDocVw_TLB_h__
