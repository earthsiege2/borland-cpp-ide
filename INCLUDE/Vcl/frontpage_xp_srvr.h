// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.0.1.0.1.0  $
// File generated on 1/29/2002 1:29:49 PM from Type Library described below.

// ************************************************************************  //
// Type Lib: c:\program files\microsoft office\office10\frontpg.exe (1)
// LIBID: {3824BCD5-7042-11CE-8E17-0020AF9F9648}
// LCID: 0
// Helpfile: c:\program files\microsoft office\office10\vbafpw10.chm
// HelpString: Microsoft FrontPage 5.0 Web Object Reference Library
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINNT\System32\stdole2.tlb)
//   (2) v5.0 FrontPageEditor, (C:\PROGRA~1\MICROS~4\Office10\FPEDITAX.DLL)
//   (3) v2.2 Office, (C:\Program Files\Common Files\Microsoft Shared\Office10\MSO.DLL)
//   (4) v5.3 VBIDE, (C:\Program Files\Common Files\Microsoft Shared\VBA\VBA6\VBE6EXT.OLB)
// ************************************************************************ //
#ifndef   FrontPage_XP_srvrH
#define   FrontPage_XP_srvrH

#pragma option push -b -w-inl

#include <oleserver.hpp>
#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0600)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if !defined(_NO_VCL)
#include <stdvcl.hpp>
#endif  //   _NO_VCL
#include <ocxproxy.h>
#include "FrontPageEditor_XP.h"
#include "Office_XP.h"
#include "VBIDE_XP.h"

#include "FrontPage_XP.h"
namespace Frontpage_xp
{

// *********************************************************************//
// HelpString: Microsoft FrontPage 5.0 Web Object Reference Library
// Version:    5.0
// *********************************************************************//


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TApp
// Help String      : Microsoft FrontPage Application
// Default Interface: _Application
// Def. Intf. Object: _ApplicationPtr
// Def. Intf. DISP? : No
// Event   Interface: _IApplicationEvents
// TypeFlags        : (11) AppObject CanCreate Predeclid
// *********************************************************************//
typedef void __fastcall (__closure * TAppOnWebNew)(System::TObject * Sender, 
                                                   Frontpage_xp::Web* pWeb/*[in]*/);
typedef void __fastcall (__closure * TAppOnWebOpen)(System::TObject * Sender, 
                                                    Frontpage_xp::Web* pWeb/*[in]*/);
typedef void __fastcall (__closure * TAppOnWebClose)(System::TObject * Sender, 
                                                     Frontpage_xp::Web* pWeb/*[in]*/, 
                                                     VARIANT_BOOL* Cancel/*[in]*/);
typedef void __fastcall (__closure * TAppOnBeforeWebPublish)(System::TObject * Sender, 
                                                             Frontpage_xp::Web* pWeb/*[in]*/, 
                                                             BSTR* Destination/*[in]*/, 
                                                             VARIANT_BOOL* Cancel/*[in]*/);
typedef void __fastcall (__closure * TAppOnAfterWebPublish)(System::TObject * Sender, 
                                                            Frontpage_xp::Web* pWeb/*[in]*/, 
                                                            VARIANT_BOOL* Success/*[in]*/);
typedef void __fastcall (__closure * TAppOnPageNew)(System::TObject * Sender, 
                                                    Frontpage_xp::PageWindow* pPage/*[in]*/);
typedef void __fastcall (__closure * TAppOnPageOpen)(System::TObject * Sender, 
                                                     Frontpage_xp::PageWindow* pPage/*[in]*/);
typedef void __fastcall (__closure * TAppOnPageClose)(System::TObject * Sender, 
                                                      Frontpage_xp::PageWindow* pPage/*[in]*/, 
                                                      VARIANT_BOOL* Cancel/*[in]*/);
typedef void __fastcall (__closure * TAppOnBeforePageSave)(System::TObject * Sender, 
                                                           Frontpage_xp::PageWindow* pPage/*[in]*/, 
                                                           VARIANT_BOOL* SaveAsUI/*[in]*/, 
                                                           VARIANT_BOOL* Cancel/*[in]*/);
typedef void __fastcall (__closure * TAppOnAfterPageSave)(System::TObject * Sender, 
                                                          Frontpage_xp::PageWindow* pPage/*[in]*/, 
                                                          VARIANT_BOOL* Success/*[in]*/);
typedef void __fastcall (__closure * TAppWindowActivate)(System::TObject * Sender, 
                                                         Frontpage_xp::WebWindow* pWebWindow/*[in]*/);
typedef void __fastcall (__closure * TAppWindowDeactivate)(System::TObject * Sender, 
                                                           Frontpage_xp::WebWindow* pWebWindow/*[in]*/);
typedef void __fastcall (__closure * TAppOnBeforeWebWindowViewChange)(System::TObject * Sender, 
                                                                      Frontpage_xp::WebWindow* pWebWindow/*[in]*/, 
                                                                      Frontpage_xp::FpWebViewModeEx TargetView/*[in]*/, 
                                                                      VARIANT_BOOL* Cancel/*[in]*/);
typedef void __fastcall (__closure * TAppOnAfterWebWindowViewChange)(System::TObject * Sender, 
                                                                     Frontpage_xp::WebWindow* pWebWindow/*[in]*/);
typedef void __fastcall (__closure * TAppOnRecalculateHyperlinks)(System::TObject * Sender, 
                                                                  Frontpage_xp::Web* pWeb/*[in]*/, 
                                                                  VARIANT_BOOL* Cancel/*[in]*/);
typedef void __fastcall (__closure * TAppOnBeforePageWindowViewChange)(System::TObject * Sender, 
                                                                       Frontpage_xp::PageWindow* pPage/*[in]*/, 
                                                                       Frontpage_xp::FpPageViewMode TargetView/*[in]*/, 
                                                                       VARIANT_BOOL* Cancel/*[in]*/);
typedef void __fastcall (__closure * TAppOnAfterPageWindowViewChange)(System::TObject * Sender, 
                                                                      Frontpage_xp::PageWindow* pPage/*[in]*/);
typedef void __fastcall (__closure * TAppOnPageWindowActivate)(System::TObject * Sender, 
                                                               Frontpage_xp::PageWindow* pPage/*[in]*/);
typedef void __fastcall (__closure * TAppOnWebFileCheckOut)(System::TObject * Sender, 
                                                            Frontpage_xp::Web* pWeb/*[in]*/, 
                                                            Frontpage_xp::WebFile* pFile/*[in]*/, 
                                                            VARIANT_BOOL* CheckedOut/*[in]*/, 
                                                            Frontpage_xp::FpCheckOutOption* pCheckOutOption/*[in]*/);
typedef void __fastcall (__closure * TAppOnBeforeWebWindowSubViewChange)(System::TObject * Sender, 
                                                                         Frontpage_xp::WebWindow* pWebWindow/*[in]*/, 
                                                                         Frontpage_xp::FpWebSubView TargetSubView/*[in]*/, 
                                                                         VARIANT_BOOL* Cancel/*[in]*/);
typedef void __fastcall (__closure * TAppOnAfterWebWindowSubViewChange)(System::TObject * Sender, 
                                                                        Frontpage_xp::WebWindow* pWebWindow/*[in]*/);

class PACKAGE TApp : public Oleserver::TOleServer
{
  _ApplicationPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TApp(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  _ApplicationPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(_ApplicationPtr intf);

  virtual void __fastcall InvokeEvent(int DispID, Oleserver::TVariantArray& params);

  /*CoClassWriteArrayPropMethods*/
// StdProp:
  Frontpage_xp::_ApplicationPtr __fastcall get_Application(void)
  {
    return GetDefaultInterface()->get_Application();
  }

// StdProp:
  Frontpageeditor_xp::IHTMLDocumentPtr __fastcall get__deprecated_ActiveDocument(void)
  {
    return GetDefaultInterface()->get__deprecated_ActiveDocument();
  }

// StdProp:
  Frontpage_xp::PageWindowPtr __fastcall get_ActivePageWindow(void)
  {
    return GetDefaultInterface()->get_ActivePageWindow();
  }

// StdProp:
  Frontpage_xp::WebPtr __fastcall get_ActiveWeb(void)
  {
    return GetDefaultInterface()->get_ActiveWeb();
  }

// StdProp:
  Frontpage_xp::WebWindowPtr __fastcall get_ActiveWebWindow(void)
  {
    return GetDefaultInterface()->get_ActiveWebWindow();
  }

// StdProp:
  Office_xp::AnswerWizardPtr __fastcall get_AnswerWizard(void)
  {
    return GetDefaultInterface()->get_AnswerWizard();
  }

// StdProp:WideString
  BSTR __fastcall get_Build(void)
  {
    return GetDefaultInterface()->get_Build();
  }

// StdProp:
  Office_xp::COMAddInsPtr __fastcall get_COMAddIns(void)
  {
    return GetDefaultInterface()->get_COMAddIns();
  }

// StdProp:
  Office_xp::CommandBarsPtr __fastcall get_CommandBars(void)
  {
    return GetDefaultInterface()->get_CommandBars();
  }

// StdProp:
  Office_xp::FileSearchPtr __fastcall get_FileSearch(void)
  {
    return GetDefaultInterface()->get_FileSearch();
  }

// StdProp:
  Office_xp::LanguageSettingsPtr __fastcall get_LanguageSettings(void)
  {
    return GetDefaultInterface()->get_LanguageSettings();
  }

// StdProp:WideString
  BSTR __fastcall get_Name(void)
  {
    return GetDefaultInterface()->get_Name();
  }

// StdProp:WideString
  BSTR __fastcall get_OrganizationName(void)
  {
    return GetDefaultInterface()->get_OrganizationName();
  }

// StdProp:
  Frontpage_xp::SYSTEMPtr __fastcall get_System(void)
  {
    return GetDefaultInterface()->get_System();
  }

// StdProp:
  Frontpage_xp::ThemesPtr __fastcall get_Themes(void)
  {
    return GetDefaultInterface()->get_Themes();
  }

// StdProp:WideString
  BSTR __fastcall get_UserName(void)
  {
    return GetDefaultInterface()->get_UserName();
  }

// StdProp:WideString
  void __fastcall set_UserName(BSTR pVal/*[in]*/)
  {
    GetDefaultInterface()->set_UserName(pVal/*[in]*/);
  }

// StdProp:WideString
  BSTR __fastcall get_Version(void)
  {
    return GetDefaultInterface()->get_Version();
  }

// StdProp:
  Frontpage_xp::WebsPtr __fastcall get_Webs(void)
  {
    return GetDefaultInterface()->get_Webs();
  }

// StdProp:
  Frontpage_xp::WebWindowsPtr __fastcall get_WebWindows(void)
  {
    return GetDefaultInterface()->get_WebWindows();
  }

// StdProp:WideString
  BSTR __fastcall get_ProductCode(void)
  {
    return GetDefaultInterface()->get_ProductCode();
  }

// StdProp:
  Office_xp::AssistantPtr __fastcall get_Assistant(void)
  {
    return GetDefaultInterface()->get_Assistant();
  }

// StdProp:TOleEnum
  Frontpage_xp::FpConnectionSpeed __fastcall get_ConnectionSpeed(void)
  {
    return GetDefaultInterface()->get_ConnectionSpeed();
  }

// StdProp:TOleEnum
  void __fastcall set_ConnectionSpeed(Frontpage_xp::FpConnectionSpeed pConnectionSpeed/*[in]*/)
  {
    GetDefaultInterface()->set_ConnectionSpeed(pConnectionSpeed/*[in]*/);
  }

// StdProp:Integer
  long __fastcall get_OlderFile(void)
  {
    return GetDefaultInterface()->get_OlderFile();
  }

// StdProp:Integer
  void __fastcall set_OlderFile(long plDays/*[in]*/)
  {
    GetDefaultInterface()->set_OlderFile(plDays/*[in]*/);
  }

// StdProp:Integer
  long __fastcall get_RecentFile(void)
  {
    return GetDefaultInterface()->get_RecentFile();
  }

// StdProp:Integer
  void __fastcall set_RecentFile(long plDays/*[in]*/)
  {
    GetDefaultInterface()->set_RecentFile(plDays/*[in]*/);
  }

// StdProp:Integer
  long __fastcall get_SlowPage(void)
  {
    return GetDefaultInterface()->get_SlowPage();
  }

// StdProp:Integer
  void __fastcall set_SlowPage(long plSeconds/*[in]*/)
  {
    GetDefaultInterface()->set_SlowPage(plSeconds/*[in]*/);
  }

// StdProp:
  Office_xp::FileDialogPtr __fastcall get_FileDialog(Office_xp::MsoFileDialogType DialogType/*[in]*/)
  {
    return GetDefaultInterface()->get_FileDialog(DialogType/*[in]*/);
  }

// StdProp:
  Vbide_xp::VBEPtr __fastcall get_VBE(void)
  {
    return GetDefaultInterface()->get_VBE();
  }

// StdProp:Integer
  long __fastcall get_MonthsShown(void)
  {
    return GetDefaultInterface()->get_MonthsShown();
  }

// StdProp:Integer
  void __fastcall set_MonthsShown(long plMonths/*[in]*/)
  {
    GetDefaultInterface()->set_MonthsShown(plMonths/*[in]*/);
  }

// StdProp:
  Office_xp::NewFilePtr __fastcall get_NewPageorWeb(void)
  {
    return GetDefaultInterface()->get_NewPageorWeb();
  }

// StdProp:WordBool
  TOLEBOOL __fastcall get_ShowStartupDialog(void)
  {
    return GetDefaultInterface()->get_ShowStartupDialog();
  }

// StdProp:WordBool
  void __fastcall set_ShowStartupDialog(VARIANT_BOOL pfShowAtStartup/*[in]*/)
  {
    GetDefaultInterface()->set_ShowStartupDialog(pfShowAtStartup/*[in]*/);
  }

// StdProp:
  Frontpageeditor_xp::DispFPHTMLDocumentPtr __fastcall get_ActiveDocument(void)
  {
    return GetDefaultInterface()->get_ActiveDocument();
  }

  /*CoClassWriteMethods*/
  Frontpage_xp::PageWindowPtr __fastcall LocatePage(BSTR DocumentUrl/*[in]*/, 
                                                    Frontpage_xp::FpPageViewMode ViewMode/*[in,def,opt]*/)
  {
    return GetDefaultInterface()->LocatePage(DocumentUrl/*[in]*/, ViewMode/*[in,def,opt]*/);
  }

  BSTR __fastcall MakeAbs(VARIANT* UrlBase/*[in]*/, BSTR Url/*[in]*/)
  {
    return GetDefaultInterface()->MakeAbs(UrlBase/*[in]*/, Url/*[in]*/);
  }

  BSTR __fastcall MakeRel(VARIANT* UrlBase/*[in]*/, BSTR Url/*[in]*/)
  {
    return GetDefaultInterface()->MakeRel(UrlBase/*[in]*/, Url/*[in]*/);
  }

  void __fastcall Quit(void)
  {
    GetDefaultInterface()->Quit();
  }

  TVariant __fastcall Run(BSTR MacroName/*[in]*/, LPSAFEARRAY* safeArrayOfParams/*[in]*/)
  {
    return GetDefaultInterface()->Run(MacroName/*[in]*/, safeArrayOfParams/*[in]*/);
  }

  void __fastcall OnTime(VARIANT* When/*[in]*/, BSTR Name/*[in]*/, 
                         VARIANT* Tolerance/*[in,opt]*/= TNoParam())
  {
    GetDefaultInterface()->OnTime(When/*[in]*/, Name/*[in]*/, Tolerance/*[in,opt]*/);
  }

  BSTR __fastcall ParseURL(BSTR Url/*[in]*/, Frontpage_xp::FpURLComponent URLComponent/*[in]*/)
  {
    return GetDefaultInterface()->ParseURL(Url/*[in]*/, URLComponent/*[in]*/);
  }

  /*CoClassWriteProperties*/
  __property Frontpage_xp::_ApplicationPtr Application={ read=get_Application }; // 0, Yes
  __property Frontpageeditor_xp::IHTMLDocumentPtr _deprecated_ActiveDocument={ read=get__deprecated_ActiveDocument }; // 0, Yes
  __property Frontpage_xp::PageWindowPtr ActivePageWindow={ read=get_ActivePageWindow }; // 0, Yes
  __property Frontpage_xp::WebPtr ActiveWeb={ read=get_ActiveWeb }; // 0, Yes
  __property Frontpage_xp::WebWindowPtr ActiveWebWindow={ read=get_ActiveWebWindow }; // 0, Yes
  __property Office_xp::AnswerWizardPtr AnswerWizard={ read=get_AnswerWizard }; // 0, Yes
  __property BSTR Build={ read=get_Build }; // 0, No
  __property Office_xp::COMAddInsPtr COMAddIns={ read=get_COMAddIns }; // 0, Yes
  __property Office_xp::CommandBarsPtr CommandBars={ read=get_CommandBars }; // 0, Yes
  __property Office_xp::FileSearchPtr FileSearch={ read=get_FileSearch }; // 0, Yes
  __property Office_xp::LanguageSettingsPtr LanguageSettings={ read=get_LanguageSettings }; // 0, Yes
  __property BSTR Name={ read=get_Name }; // 0, No
  __property BSTR OrganizationName={ read=get_OrganizationName }; // 0, No
  __property Frontpage_xp::SYSTEMPtr System={ read=get_System }; // 0, Yes
  __property Frontpage_xp::ThemesPtr Themes={ read=get_Themes }; // 0, Yes
  __property BSTR Version={ read=get_Version }; // 0, No
  __property Frontpage_xp::WebsPtr Webs={ read=get_Webs }; // 0, Yes
  __property Frontpage_xp::WebWindowsPtr WebWindows={ read=get_WebWindows }; // 0, Yes
  __property BSTR ProductCode={ read=get_ProductCode }; // 0, No
  __property Office_xp::AssistantPtr Assistant={ read=get_Assistant }; // 0, Yes
  __property Office_xp::FileDialogPtr FileDialog[Office_xp::MsoFileDialogType DialogType]={ read=get_FileDialog }; // 0, Yes
  __property Vbide_xp::VBEPtr VBE={ read=get_VBE }; // 0, Yes
  __property Office_xp::NewFilePtr NewPageorWeb={ read=get_NewPageorWeb }; // 0, Yes
  __property Frontpageeditor_xp::DispFPHTMLDocumentPtr ActiveDocument={ read=get_ActiveDocument }; // 0, Yes
  /*CoClassWriteProperties*/
  __property BSTR UserName={ read=get_UserName, stored=false }; // 0, No
  __property Frontpage_xp::FpConnectionSpeed ConnectionSpeed={ read=get_ConnectionSpeed, stored=false }; // 0, No
  __property long OlderFile={ read=get_OlderFile, stored=false }; // 0, No
  __property long RecentFile={ read=get_RecentFile, stored=false }; // 0, No
  __property long SlowPage={ read=get_SlowPage, stored=false }; // 0, No
  __property long MonthsShown={ read=get_MonthsShown, stored=false }; // 0, No
  __property TOLEBOOL ShowStartupDialog={ read=get_ShowStartupDialog, stored=false }; // 0, No
  /*CoClassWriteEventDecls*/
private:
  TAppOnWebNew                   FOnWebNew;
  TAppOnWebOpen                  FOnWebOpen;
  TAppOnWebClose                 FOnWebClose;
  TAppOnBeforeWebPublish         FOnBeforeWebPublish;
  TAppOnAfterWebPublish          FOnAfterWebPublish;
  TAppOnPageNew                  FOnPageNew;
  TAppOnPageOpen                 FOnPageOpen;
  TAppOnPageClose                FOnPageClose;
  TAppOnBeforePageSave           FOnBeforePageSave;
  TAppOnAfterPageSave            FOnAfterPageSave;
  TAppWindowActivate             FOnWindowActivate;
  TAppWindowDeactivate           FOnWindowDeactivate;
  TAppOnBeforeWebWindowViewChange FOnBeforeWebWindowViewChange;
  TAppOnAfterWebWindowViewChange FOnAfterWebWindowViewChange;
  TAppOnRecalculateHyperlinks    FOnRecalculateHyperlinks;
  TAppOnBeforePageWindowViewChange FOnBeforePageWindowViewChange;
  TAppOnAfterPageWindowViewChange FOnAfterPageWindowViewChange;
  TAppOnPageWindowActivate       FOnPageWindowActivate;
  TAppOnWebFileCheckOut          FOnWebFileCheckOut;
  TAppOnBeforeWebWindowSubViewChange FOnBeforeWebWindowSubViewChange;
  TAppOnAfterWebWindowSubViewChange FOnAfterWebWindowSubViewChange;
__published:
  __property TAppOnWebNew OnWebNew={ read=FOnWebNew, write=FOnWebNew };
  __property TAppOnWebOpen OnWebOpen={ read=FOnWebOpen, write=FOnWebOpen };
  __property TAppOnWebClose OnWebClose={ read=FOnWebClose, write=FOnWebClose };
  __property TAppOnBeforeWebPublish OnBeforeWebPublish={ read=FOnBeforeWebPublish, write=FOnBeforeWebPublish };
  __property TAppOnAfterWebPublish OnAfterWebPublish={ read=FOnAfterWebPublish, write=FOnAfterWebPublish };
  __property TAppOnPageNew OnPageNew={ read=FOnPageNew, write=FOnPageNew };
  __property TAppOnPageOpen OnPageOpen={ read=FOnPageOpen, write=FOnPageOpen };
  __property TAppOnPageClose OnPageClose={ read=FOnPageClose, write=FOnPageClose };
  __property TAppOnBeforePageSave OnBeforePageSave={ read=FOnBeforePageSave, write=FOnBeforePageSave };
  __property TAppOnAfterPageSave OnAfterPageSave={ read=FOnAfterPageSave, write=FOnAfterPageSave };
  __property TAppWindowActivate OnWindowActivate={ read=FOnWindowActivate, write=FOnWindowActivate };
  __property TAppWindowDeactivate OnWindowDeactivate={ read=FOnWindowDeactivate, write=FOnWindowDeactivate };
  __property TAppOnBeforeWebWindowViewChange OnBeforeWebWindowViewChange={ read=FOnBeforeWebWindowViewChange, write=FOnBeforeWebWindowViewChange };
  __property TAppOnAfterWebWindowViewChange OnAfterWebWindowViewChange={ read=FOnAfterWebWindowViewChange, write=FOnAfterWebWindowViewChange };
  __property TAppOnRecalculateHyperlinks OnRecalculateHyperlinks={ read=FOnRecalculateHyperlinks, write=FOnRecalculateHyperlinks };
  __property TAppOnBeforePageWindowViewChange OnBeforePageWindowViewChange={ read=FOnBeforePageWindowViewChange, write=FOnBeforePageWindowViewChange };
  __property TAppOnAfterPageWindowViewChange OnAfterPageWindowViewChange={ read=FOnAfterPageWindowViewChange, write=FOnAfterPageWindowViewChange };
  __property TAppOnPageWindowActivate OnPageWindowActivate={ read=FOnPageWindowActivate, write=FOnPageWindowActivate };
  __property TAppOnWebFileCheckOut OnWebFileCheckOut={ read=FOnWebFileCheckOut, write=FOnWebFileCheckOut };
  __property TAppOnBeforeWebWindowSubViewChange OnBeforeWebWindowSubViewChange={ read=FOnBeforeWebWindowSubViewChange, write=FOnBeforeWebWindowSubViewChange };
  __property TAppOnAfterWebWindowSubViewChange OnAfterWebWindowSubViewChange={ read=FOnAfterWebWindowSubViewChange, write=FOnAfterWebWindowSubViewChange };
private:
  bool     FAutoQuit;
__published:
  __property bool AutoQuit = {read=FAutoQuit, write=FAutoQuit};
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TWebEx
// Help String      : 
// Default Interface: Web
// Def. Intf. Object: WebPtr
// Def. Intf. DISP? : No
// Event   Interface: _IWebEvents
// TypeFlags        : (2) CanCreate
// *********************************************************************//
typedef void __fastcall (__closure * TWebExOnBeforePublish)(System::TObject * Sender, 
                                                            BSTR* Destination/*[in]*/, 
                                                            VARIANT_BOOL* Cancel/*[in]*/);
typedef void __fastcall (__closure * TWebExOnAfterPublish)(System::TObject * Sender, 
                                                           VARIANT_BOOL* Success/*[in]*/);
typedef void __fastcall (__closure * TWebExOnRecalculateHyperlinks)(System::TObject * Sender, 
                                                                    VARIANT_BOOL* Cancel/*[in]*/);
typedef void __fastcall (__closure * TWebExOnWebFileCheckOut)(System::TObject * Sender, 
                                                              Frontpage_xp::WebFile* pFile/*[in]*/, 
                                                              VARIANT_BOOL* CheckedOut/*[in]*/, 
                                                              Frontpage_xp::FpCheckOutOption* pCheckOutOption/*[in]*/);
typedef void __fastcall (__closure * TWebExOnClose)(System::TObject * Sender, 
                                                    VARIANT_BOOL* pCancel/*[in]*/);

class PACKAGE TWebEx : public Oleserver::TOleServer
{
  WebPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TWebEx(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  WebPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(WebPtr intf);

  virtual void __fastcall InvokeEvent(int DispID, Oleserver::TVariantArray& params);

  /*CoClassWriteArrayPropMethods*/
// StdProp:
  Frontpage_xp::WebWindowPtr __fastcall get_ActiveWebWindow(void)
  {
    return GetDefaultInterface()->get_ActiveWebWindow();
  }

// StdProp:WordBool
  TOLEBOOL __fastcall get_AllowsLongFilenames(void)
  {
    return GetDefaultInterface()->get_AllowsLongFilenames();
  }

// StdProp:
  Frontpage_xp::NavigationNodePtr __fastcall get_RootNavigationNode(void)
  {
    return GetDefaultInterface()->get_RootNavigationNode();
  }

// StdProp:
  Frontpage_xp::NavigationNodePtr __fastcall get_HomeNavigationNode(void)
  {
    return GetDefaultInterface()->get_HomeNavigationNode();
  }

// StdProp:WordBool
  TOLEBOOL __fastcall get_IsUnderRevisionControl(void)
  {
    return GetDefaultInterface()->get_IsUnderRevisionControl();
  }

// StdProp:
  Frontpage_xp::PropertiesPtr __fastcall get_Properties(void)
  {
    return GetDefaultInterface()->get_Properties();
  }

// StdProp:WideString
  BSTR __fastcall get_RevisionControlProject(void)
  {
    return GetDefaultInterface()->get_RevisionControlProject();
  }

// StdProp:WideString
  void __fastcall set_RevisionControlProject(BSTR pbzRCSProjectName/*[in]*/)
  {
    GetDefaultInterface()->set_RevisionControlProject(pbzRCSProjectName/*[in]*/);
  }

// StdProp:
  Frontpage_xp::WebFolderPtr __fastcall get_RootFolder(void)
  {
    return GetDefaultInterface()->get_RootFolder();
  }

// StdProp:OleVariant
  TVariant __fastcall get_SharedBorders(Frontpage_xp::FpSharedBorders BorderIndex/*[in,def,opt]*/)
  {
    return GetDefaultInterface()->get_SharedBorders(BorderIndex/*[in,def,opt]*/);
  }

// StdProp:OleVariant
  void __fastcall set_SharedBorders(Frontpage_xp::FpSharedBorders BorderIndex/*[in,def,opt]*/, 
                                    VARIANT* ppv/*[in]*/)
  {
    GetDefaultInterface()->set_SharedBorders(BorderIndex/*[in,def,opt]*/, ppv/*[in]*/);
  }

// StdProp:OleVariant
  TVariant __fastcall get_ThemeProperties(Frontpage_xp::FpThemeProperties PropertyIndex/*[in,def,opt]*/)
  {
    return GetDefaultInterface()->get_ThemeProperties(PropertyIndex/*[in,def,opt]*/);
  }

// StdProp:
  Frontpage_xp::ThemesPtr __fastcall get_Themes(void)
  {
    return GetDefaultInterface()->get_Themes();
  }

// StdProp:WideString
  BSTR __fastcall get_Title(void)
  {
    return GetDefaultInterface()->get_Title();
  }

// StdProp:WideString
  void __fastcall set_Title(BSTR szWebTitle/*[in]*/)
  {
    GetDefaultInterface()->set_Title(szWebTitle/*[in]*/);
  }

// StdProp:WideString
  BSTR __fastcall get_Url(void)
  {
    return GetDefaultInterface()->get_Url();
  }

// StdProp:
  Frontpage_xp::WebWindowsPtr __fastcall get_WebWindows(void)
  {
    return GetDefaultInterface()->get_WebWindows();
  }

// StdProp:WordBool
  TOLEBOOL __fastcall get_IsHiddenFoldersEnabled(void)
  {
    return GetDefaultInterface()->get_IsHiddenFoldersEnabled();
  }

// StdProp:WordBool
  void __fastcall set_IsHiddenFoldersEnabled(VARIANT_BOOL pbIsHiddenFoldersEnabled/*[in]*/)
  {
    GetDefaultInterface()->set_IsHiddenFoldersEnabled(pbIsHiddenFoldersEnabled/*[in]*/);
  }

// StdProp:
  Frontpage_xp::WebFilesPtr __fastcall get_AllFiles(void)
  {
    return GetDefaultInterface()->get_AllFiles();
  }

// StdProp:
  Frontpage_xp::WebFoldersPtr __fastcall get_AllFolders(void)
  {
    return GetDefaultInterface()->get_AllFolders();
  }

// StdProp:
  Frontpage_xp::NavigationNodesPtr __fastcall get_AllNavigationNodes(void)
  {
    return GetDefaultInterface()->get_AllNavigationNodes();
  }

// StdProp:
  Frontpage_xp::_ListsPtr __fastcall get_Lists(void)
  {
    return GetDefaultInterface()->get_Lists();
  }

  /*CoClassWriteMethods*/
  void __fastcall Activate(void)
  {
    GetDefaultInterface()->Activate();
  }

  void __fastcall ApplyTheme(BSTR ThemeName/*[in]*/, 
                             Frontpage_xp::FpThemeProperties ThemeProperties/*[in,def,opt]*/)
  {
    GetDefaultInterface()->ApplyTheme(ThemeName/*[in]*/, ThemeProperties/*[in,def,opt]*/);
  }

  void __fastcall CancelRequests(void)
  {
    GetDefaultInterface()->CancelRequests();
  }

  void __fastcall Close(void)
  {
    GetDefaultInterface()->Close();
  }

  void __fastcall Delete(Frontpage_xp::FpWebDeleteFlags WebDeleteFlags/*[in,def,opt]*/)
  {
    GetDefaultInterface()->Delete(WebDeleteFlags/*[in,def,opt]*/);
  }

  Frontpage_xp::WebFilePtr __fastcall LocateFile(BSTR FileUrl/*[in]*/)
  {
    return GetDefaultInterface()->LocateFile(FileUrl/*[in]*/);
  }

  Frontpage_xp::WebFolderPtr __fastcall LocateFolder(BSTR FolderUrl/*[in]*/)
  {
    return GetDefaultInterface()->LocateFolder(FolderUrl/*[in]*/);
  }

  Frontpage_xp::PageWindowPtr __fastcall LocatePage(BSTR FileUrl/*[in]*/, 
                                                    Frontpage_xp::FpPageViewMode ViewMode/*[in,def,opt]*/)
  {
    return GetDefaultInterface()->LocatePage(FileUrl/*[in]*/, ViewMode/*[in,def,opt]*/);
  }

  void __fastcall Publish(BSTR DestinationUrl/*[in]*/, 
                          Frontpage_xp::FpWebPublishFlags PublishFlags/*[in,def,opt]*/, 
                          BSTR UserName/*[in,def,opt]*/, BSTR Password/*[in,def,opt]*/)
  {
    GetDefaultInterface()->Publish(DestinationUrl/*[in]*/, PublishFlags/*[in,def,opt]*/, 
                                   UserName/*[in,def,opt]*/, Password/*[in,def,opt]*/);
  }

  void __fastcall RecalcHyperlinks(void)
  {
    GetDefaultInterface()->RecalcHyperlinks();
  }

  void __fastcall Refresh(VARIANT_BOOL FetchAll/*[in,def,opt]*/)
  {
    GetDefaultInterface()->Refresh(FetchAll/*[in,def,opt]*/);
  }

  void __fastcall ApplyNavigationStructure(void)
  {
    GetDefaultInterface()->ApplyNavigationStructure();
  }

  void __fastcall ApplyTemplate(BSTR TemplateDir/*[in]*/, VARIANT_BOOL fOverWrite/*[in,def,opt]*/)
  {
    GetDefaultInterface()->ApplyTemplate(TemplateDir/*[in]*/, fOverWrite/*[in,def,opt]*/);
  }

  /*CoClassWriteProperties*/
  __property Frontpage_xp::WebWindowPtr ActiveWebWindow={ read=get_ActiveWebWindow }; // 0, Yes
  __property TOLEBOOL AllowsLongFilenames={ read=get_AllowsLongFilenames }; // 0, No
  __property Frontpage_xp::NavigationNodePtr RootNavigationNode={ read=get_RootNavigationNode }; // 0, Yes
  __property Frontpage_xp::NavigationNodePtr HomeNavigationNode={ read=get_HomeNavigationNode }; // 0, Yes
  __property TOLEBOOL IsUnderRevisionControl={ read=get_IsUnderRevisionControl }; // 0, No
  __property Frontpage_xp::PropertiesPtr Properties={ read=get_Properties }; // 0, Yes
  __property Frontpage_xp::WebFolderPtr RootFolder={ read=get_RootFolder }; // 0, Yes
  /* Warning: C++Builder is unable to validate the following property: 
  __property TVariant ThemeProperties[Frontpage_xp::FpThemeProperties PropertyIndex]={ read=get_ThemeProperties }; // 0, No
  */
  __property Frontpage_xp::ThemesPtr Themes={ read=get_Themes }; // 0, Yes
  __property BSTR Url={ read=get_Url }; // 0, No
  __property Frontpage_xp::WebWindowsPtr WebWindows={ read=get_WebWindows }; // 0, Yes
  __property Frontpage_xp::WebFilesPtr AllFiles={ read=get_AllFiles }; // 0, Yes
  __property Frontpage_xp::WebFoldersPtr AllFolders={ read=get_AllFolders }; // 0, Yes
  __property Frontpage_xp::NavigationNodesPtr AllNavigationNodes={ read=get_AllNavigationNodes }; // 0, Yes
  __property Frontpage_xp::_ListsPtr Lists={ read=get_Lists }; // 0, Yes
  /*CoClassWriteProperties*/
  __property BSTR RevisionControlProject={ read=get_RevisionControlProject, stored=false }; // 0, No
  __property BSTR Title={ read=get_Title, stored=false }; // 0, No
  __property TOLEBOOL IsHiddenFoldersEnabled={ read=get_IsHiddenFoldersEnabled, stored=false }; // 0, No
  /*CoClassWriteEventDecls*/
private:
  TWebExOnBeforePublish          FOnBeforePublish;
  TWebExOnAfterPublish           FOnAfterPublish;
  TWebExOnRecalculateHyperlinks  FOnRecalculateHyperlinks;
  TWebExOnWebFileCheckOut        FOnWebFileCheckOut;
  TWebExOnClose                  FOnClose;
__published:
  __property TWebExOnBeforePublish OnBeforePublish={ read=FOnBeforePublish, write=FOnBeforePublish };
  __property TWebExOnAfterPublish OnAfterPublish={ read=FOnAfterPublish, write=FOnAfterPublish };
  __property TWebExOnRecalculateHyperlinks OnRecalculateHyperlinks={ read=FOnRecalculateHyperlinks, write=FOnRecalculateHyperlinks };
  __property TWebExOnWebFileCheckOut OnWebFileCheckOut={ read=FOnWebFileCheckOut, write=FOnWebFileCheckOut };
  __property TWebExOnClose OnClose={ read=FOnClose, write=FOnClose };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TWebWindowEx
// Help String      : 
// Default Interface: WebWindow
// Def. Intf. Object: WebWindowPtr
// Def. Intf. DISP? : No
// Event   Interface: _IWebWindowEvents
// TypeFlags        : (2) CanCreate
// *********************************************************************//
typedef void __fastcall (__closure * TWebWindowExOnBeforeViewChange)(System::TObject * Sender, 
                                                                     Frontpage_xp::FpWebViewModeEx TargetView/*[in]*/, 
                                                                     VARIANT_BOOL* Cancel/*[in]*/);
typedef void __fastcall (__closure * TWebWindowExOnBeforeSubViewChange)(System::TObject * Sender, 
                                                                        Frontpage_xp::FpWebSubView TargetSubView/*[in]*/, 
                                                                        VARIANT_BOOL* Cancel/*[in]*/);

class PACKAGE TWebWindowEx : public Oleserver::TOleServer
{
  WebWindowPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TWebWindowEx(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  WebWindowPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(WebWindowPtr intf);

  virtual void __fastcall InvokeEvent(int DispID, Oleserver::TVariantArray& params);

  /*CoClassWriteArrayPropMethods*/
// StdProp:
  Frontpage_xp::PageWindowPtr __fastcall get_ActivePageWindow(void)
  {
    return GetDefaultInterface()->get_ActivePageWindow();
  }

// StdProp:WideString
  BSTR __fastcall get_Caption(void)
  {
    return GetDefaultInterface()->get_Caption();
  }

// StdProp:
  Frontpage_xp::WebPtr __fastcall get_Web(void)
  {
    return GetDefaultInterface()->get_Web();
  }

// StdProp:
  Frontpage_xp::PageWindowsPtr __fastcall get_PageWindows(void)
  {
    return GetDefaultInterface()->get_PageWindows();
  }

// StdProp:TOleEnum
  Frontpage_xp::FpWebViewMode __fastcall get_ViewMode(void)
  {
    return GetDefaultInterface()->get_ViewMode();
  }

// StdProp:TOleEnum
  void __fastcall set_ViewMode(Frontpage_xp::FpWebViewMode pviewMode/*[in]*/)
  {
    GetDefaultInterface()->set_ViewMode(pviewMode/*[in]*/);
  }

// StdProp:WordBool
  TOLEBOOL __fastcall get_Visible(void)
  {
    return GetDefaultInterface()->get_Visible();
  }

// StdProp:WordBool
  void __fastcall set_Visible(VARIANT_BOOL pfIsWindowVisible/*[in]*/)
  {
    GetDefaultInterface()->set_Visible(pfIsWindowVisible/*[in]*/);
  }

// StdProp:OleVariant
  LPSAFEARRAY __fastcall get_SelectedFiles(void)
  {
    return GetDefaultInterface()->get_SelectedFiles();
  }

// StdProp:OleVariant
  LPSAFEARRAY __fastcall get_SelectedFolders(void)
  {
    return GetDefaultInterface()->get_SelectedFolders();
  }

// StdProp:TOleEnum
  Frontpage_xp::FpWebViewModeEx __fastcall get_ViewModeEx(void)
  {
    return GetDefaultInterface()->get_ViewModeEx();
  }

// StdProp:TOleEnum
  void __fastcall set_ViewModeEx(Frontpage_xp::FpWebViewModeEx pviewModeEx/*[in]*/)
  {
    GetDefaultInterface()->set_ViewModeEx(pviewModeEx/*[in]*/);
  }

// StdProp:TOleEnum
  Frontpage_xp::FpWebSubView __fastcall get_SubViewMode(void)
  {
    return GetDefaultInterface()->get_SubViewMode();
  }

// StdProp:TOleEnum
  void __fastcall set_SubViewMode(Frontpage_xp::FpWebSubView pSubView/*[in]*/)
  {
    GetDefaultInterface()->set_SubViewMode(pSubView/*[in]*/);
  }

  /*CoClassWriteMethods*/
  void __fastcall Activate(void)
  {
    GetDefaultInterface()->Activate();
  }

  void __fastcall Close(void)
  {
    GetDefaultInterface()->Close();
  }

  void __fastcall VerifyAllLinks(void)
  {
    GetDefaultInterface()->VerifyAllLinks();
  }

  void __fastcall SaveReport(Frontpage_xp::FpWebViewModeEx reportviewModeEx/*[in]*/, 
                             BSTR DestinationUrl/*[in]*/, BSTR Title/*[in]*/, 
                             VARIANT_BOOL ForceOverwrite/*[in,def,opt]*/)
  {
    GetDefaultInterface()->SaveReport(reportviewModeEx/*[in]*/, DestinationUrl/*[in]*/, 
                                      Title/*[in]*/, ForceOverwrite/*[in,def,opt]*/);
  }

  /*CoClassWriteProperties*/
  __property Frontpage_xp::PageWindowPtr ActivePageWindow={ read=get_ActivePageWindow }; // 0, Yes
  __property BSTR Caption={ read=get_Caption }; // 0, No
  __property Frontpage_xp::WebPtr Web={ read=get_Web }; // 0, Yes
  __property Frontpage_xp::PageWindowsPtr PageWindows={ read=get_PageWindows }; // 0, Yes
  __property LPSAFEARRAY SelectedFiles={ read=get_SelectedFiles }; // 0, No
  __property LPSAFEARRAY SelectedFolders={ read=get_SelectedFolders }; // 0, No
  /*CoClassWriteProperties*/
  __property Frontpage_xp::FpWebViewMode ViewMode={ read=get_ViewMode, stored=false }; // 0, No
  __property TOLEBOOL Visible={ read=get_Visible, stored=false }; // 0, No
  __property Frontpage_xp::FpWebViewModeEx ViewModeEx={ read=get_ViewModeEx, stored=false }; // 0, No
  __property Frontpage_xp::FpWebSubView SubViewMode={ read=get_SubViewMode, stored=false }; // 0, No
  /*CoClassWriteEventDecls*/
private:
  TWebWindowExOnBeforeViewChange FOnBeforeViewChange;
  TNotifyEvent                   FOnAfterViewChange;
  TNotifyEvent                   FOnActivate;
  TNotifyEvent                   FOnDeactivate;
  TWebWindowExOnBeforeSubViewChange FOnBeforeSubViewChange;
  TNotifyEvent                   FOnAfterSubViewChange;
__published:
  __property TWebWindowExOnBeforeViewChange OnBeforeViewChange={ read=FOnBeforeViewChange, write=FOnBeforeViewChange };
  __property TNotifyEvent OnAfterViewChange={ read=FOnAfterViewChange, write=FOnAfterViewChange };
  __property TNotifyEvent OnActivate={ read=FOnActivate, write=FOnActivate };
  __property TNotifyEvent OnDeactivate={ read=FOnDeactivate, write=FOnDeactivate };
  __property TWebWindowExOnBeforeSubViewChange OnBeforeSubViewChange={ read=FOnBeforeSubViewChange, write=FOnBeforeSubViewChange };
  __property TNotifyEvent OnAfterSubViewChange={ read=FOnAfterSubViewChange, write=FOnAfterSubViewChange };
};

};     // namespace Frontpage_xp

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Frontpage_xp;
#endif

#pragma option pop

#endif // FrontPage_XP_srvrH
