// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.0.1.1  $
// File generated on 1/24/2000 09:46:11 AM from Type Library described below.

// ************************************************************************ //
// Type Lib: d:\tlbgen\rampage\typelib\TypeLibraries\MSPPT9.olb (1)
// IID\LCID: {91493440-5A91-11CF-8700-00AA0060263B}\0
// Helpfile: d:\tlbgen\rampage\typelib\TypeLibraries\VBAPPT9.CHM
// DepndLst: 
//   (1) v2.0 stdole, (D:\WINNT\System32\stdole2.tlb)
//   (2) v2.1 Office, (D:\msof2k\Office\mso9.dll)
//   (3) v5.3 VBIDE, (D:\Program Files\Common Files\Microsoft Shared\VBA\VBA6\VBE6EXT.OLB)
//   (4) v4.0 StdVCL, (D:\tlbgen\rampage\typelib\typelibraries\testing\stdvcl40.tlb)
// ************************************************************************ //
#ifndef   __PowerPoint_2K_h__
#define   __PowerPoint_2K_h__

#pragma option push -b -w-inl

#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0500)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#include "Office_2K.h"
#include "VBIDE_2K.h"


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Powerpoint_2k
{

// *********************************************************************//
// HelpString: Microsoft PowerPoint 9.0 Object Library
// Version:    2.6
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_PowerPoint;
extern __declspec (package) const GUID GUID_PpWindowState;
extern __declspec (package) const GUID GUID_PpArrangeStyle;
extern __declspec (package) const GUID GUID_PpViewType;
extern __declspec (package) const GUID GUID_PpColorSchemeIndex;
extern __declspec (package) const GUID GUID_PpSlideSizeType;
extern __declspec (package) const GUID GUID_PpSaveAsFileType;
extern __declspec (package) const GUID GUID_PpTextStyleType;
extern __declspec (package) const GUID GUID_PpSlideLayout;
extern __declspec (package) const GUID GUID_PpEntryEffect;
extern __declspec (package) const GUID GUID_PpTextLevelEffect;
extern __declspec (package) const GUID GUID_PpTextUnitEffect;
extern __declspec (package) const GUID GUID_PpChartUnitEffect;
extern __declspec (package) const GUID GUID_PpAfterEffect;
extern __declspec (package) const GUID GUID_PpAdvanceMode;
extern __declspec (package) const GUID GUID_PpSoundEffectType;
extern __declspec (package) const GUID GUID_PpFollowColors;
extern __declspec (package) const GUID GUID_PpUpdateOption;
extern __declspec (package) const GUID GUID_PpParagraphAlignment;
extern __declspec (package) const GUID GUID_PpBaselineAlignment;
extern __declspec (package) const GUID GUID_PpTabStopType;
extern __declspec (package) const GUID GUID_PpIndentControl;
extern __declspec (package) const GUID GUID_PpChangeCase;
extern __declspec (package) const GUID GUID_PpDialogMode;
extern __declspec (package) const GUID GUID_PpDialogStyle;
extern __declspec (package) const GUID GUID_PpDialogPositioning;
extern __declspec (package) const GUID GUID_PpDialogFontStyle;
extern __declspec (package) const GUID GUID_PpScrollBarStyle;
extern __declspec (package) const GUID GUID_PpListBoxSelectionStyle;
extern __declspec (package) const GUID GUID_PpListBoxAbbreviationStyle;
extern __declspec (package) const GUID GUID_PpAlertType;
extern __declspec (package) const GUID GUID_PpAlertButton;
extern __declspec (package) const GUID GUID_PpAlertIcon;
extern __declspec (package) const GUID GUID_PpSlideShowPointerType;
extern __declspec (package) const GUID GUID_PpSlideShowState;
extern __declspec (package) const GUID GUID_PpSlideShowAdvanceMode;
extern __declspec (package) const GUID GUID_PpFileDialogType;
extern __declspec (package) const GUID GUID_PpFileDialogView;
extern __declspec (package) const GUID GUID_PpPrintOutputType;
extern __declspec (package) const GUID GUID_PpPrintHandoutOrder;
extern __declspec (package) const GUID GUID_PpPrintColorType;
extern __declspec (package) const GUID GUID_PpSelectionType;
extern __declspec (package) const GUID GUID_PpDirection;
extern __declspec (package) const GUID GUID_PpDateTimeFormat;
extern __declspec (package) const GUID GUID_PpTransitionSpeed;
extern __declspec (package) const GUID GUID_PpMouseActivation;
extern __declspec (package) const GUID GUID_PpActionType;
extern __declspec (package) const GUID GUID_PpPlaceholderType;
extern __declspec (package) const GUID GUID_PpSlideShowType;
extern __declspec (package) const GUID GUID_PpPrintRangeType;
extern __declspec (package) const GUID GUID_PpAutoSize;
extern __declspec (package) const GUID GUID_PpMediaType;
extern __declspec (package) const GUID GUID_PpSoundFormatType;
extern __declspec (package) const GUID GUID_PpFarEastLineBreakLevel;
extern __declspec (package) const GUID GUID_PpSlideShowRangeType;
extern __declspec (package) const GUID GUID_PpFrameColors;
extern __declspec (package) const GUID IID_Collection;
extern __declspec (package) const GUID IID__Application;
extern __declspec (package) const GUID IID__Global;
extern __declspec (package) const GUID IID_EApplication;
extern __declspec (package) const GUID CLSID_PowerPointGlobal;
extern __declspec (package) const GUID IID_ColorFormat;
extern __declspec (package) const GUID IID_SlideShowWindow;
extern __declspec (package) const GUID IID_Selection;
extern __declspec (package) const GUID IID_DocumentWindows;
extern __declspec (package) const GUID IID_SlideShowWindows;
extern __declspec (package) const GUID IID_DocumentWindow;
extern __declspec (package) const GUID IID_View;
extern __declspec (package) const GUID IID_SlideShowView;
extern __declspec (package) const GUID IID_SlideShowSettings;
extern __declspec (package) const GUID IID_NamedSlideShows;
extern __declspec (package) const GUID IID_NamedSlideShow;
extern __declspec (package) const GUID IID_PrintOptions;
extern __declspec (package) const GUID IID_PrintRanges;
extern __declspec (package) const GUID IID_PrintRange;
extern __declspec (package) const GUID IID_AddIns;
extern __declspec (package) const GUID IID_AddIn;
extern __declspec (package) const GUID IID_Presentations;
extern __declspec (package) const GUID IID_PresEvents;
extern __declspec (package) const GUID IID__Presentation;
extern __declspec (package) const GUID IID_Hyperlinks;
extern __declspec (package) const GUID IID_Hyperlink;
extern __declspec (package) const GUID IID_PageSetup;
extern __declspec (package) const GUID IID_Fonts;
extern __declspec (package) const GUID IID_ExtraColors;
extern __declspec (package) const GUID IID_Slides;
extern __declspec (package) const GUID IID__Slide;
extern __declspec (package) const GUID IID_SlideRange;
extern __declspec (package) const GUID IID__Master;
extern __declspec (package) const GUID IID_SldEvents;
extern __declspec (package) const GUID CLSID_PowerPointSlide;
extern __declspec (package) const GUID IID_ColorSchemes;
extern __declspec (package) const GUID IID_ColorScheme;
extern __declspec (package) const GUID IID_RGBColor;
extern __declspec (package) const GUID IID_SlideShowTransition;
extern __declspec (package) const GUID IID_SoundEffect;
extern __declspec (package) const GUID IID_SoundFormat;
extern __declspec (package) const GUID IID_HeadersFooters;
extern __declspec (package) const GUID IID_Shapes;
extern __declspec (package) const GUID IID_Placeholders;
extern __declspec (package) const GUID IID_PlaceholderFormat;
extern __declspec (package) const GUID IID_FreeformBuilder;
extern __declspec (package) const GUID IID_Shape;
extern __declspec (package) const GUID IID_ShapeRange;
extern __declspec (package) const GUID IID_GroupShapes;
extern __declspec (package) const GUID IID_Adjustments;
extern __declspec (package) const GUID IID_PictureFormat;
extern __declspec (package) const GUID IID_FillFormat;
extern __declspec (package) const GUID IID_LineFormat;
extern __declspec (package) const GUID IID_ShadowFormat;
extern __declspec (package) const GUID IID_ConnectorFormat;
extern __declspec (package) const GUID IID_TextEffectFormat;
extern __declspec (package) const GUID IID_ThreeDFormat;
extern __declspec (package) const GUID IID_TextFrame;
extern __declspec (package) const GUID IID_CalloutFormat;
extern __declspec (package) const GUID IID_ShapeNodes;
extern __declspec (package) const GUID IID_ShapeNode;
extern __declspec (package) const GUID IID_OLEFormat;
extern __declspec (package) const GUID IID_LinkFormat;
extern __declspec (package) const GUID IID_ObjectVerbs;
extern __declspec (package) const GUID IID_AnimationSettings;
extern __declspec (package) const GUID IID_ActionSettings;
extern __declspec (package) const GUID IID_ActionSetting;
extern __declspec (package) const GUID IID_PlaySettings;
extern __declspec (package) const GUID IID_TextRange;
extern __declspec (package) const GUID IID_Ruler;
extern __declspec (package) const GUID IID_RulerLevels;
extern __declspec (package) const GUID IID_RulerLevel;
extern __declspec (package) const GUID IID_TabStops;
extern __declspec (package) const GUID IID_TabStop;
extern __declspec (package) const GUID IID_Font;
extern __declspec (package) const GUID IID_ParagraphFormat;
extern __declspec (package) const GUID IID_BulletFormat;
extern __declspec (package) const GUID IID_TextStyles;
extern __declspec (package) const GUID IID_TextStyle;
extern __declspec (package) const GUID IID_TextStyleLevels;
extern __declspec (package) const GUID IID_TextStyleLevel;
extern __declspec (package) const GUID IID_HeaderFooter;
extern __declspec (package) const GUID CLSID_PowerPointPresentation;
extern __declspec (package) const GUID IID_PPDialogs;
extern __declspec (package) const GUID IID_PPAlert;
extern __declspec (package) const GUID IID_PPDialog;
extern __declspec (package) const GUID IID_PPTabSheet;
extern __declspec (package) const GUID IID_PPControls;
extern __declspec (package) const GUID IID_PPTabSheets;
extern __declspec (package) const GUID IID_PPControl;
extern __declspec (package) const GUID IID_PPPushButton;
extern __declspec (package) const GUID IID_PPToggleButton;
extern __declspec (package) const GUID IID_PPBitmapButton;
extern __declspec (package) const GUID IID_PPListBox;
extern __declspec (package) const GUID IID_PPStrings;
extern __declspec (package) const GUID IID_PPCheckBox;
extern __declspec (package) const GUID IID_PPRadioCluster;
extern __declspec (package) const GUID IID_PPStaticText;
extern __declspec (package) const GUID IID_PPEditText;
extern __declspec (package) const GUID IID_PPIcon;
extern __declspec (package) const GUID IID_PPBitmap;
extern __declspec (package) const GUID IID_PPSpinner;
extern __declspec (package) const GUID IID_PPScrollBar;
extern __declspec (package) const GUID IID_PPGroupBox;
extern __declspec (package) const GUID IID_PPFrame;
extern __declspec (package) const GUID IID_PPTabControl;
extern __declspec (package) const GUID IID_PPDropDown;
extern __declspec (package) const GUID IID_PPDropDownEdit;
extern __declspec (package) const GUID IID_PPSlideMiniature;
extern __declspec (package) const GUID IID_PPRadioButton;
extern __declspec (package) const GUID IID_Tags;
extern __declspec (package) const GUID IID_FileDialogFileList;
extern __declspec (package) const GUID IID_FileDialogExtension;
extern __declspec (package) const GUID IID_FileDialogExtensionList;
extern __declspec (package) const GUID IID_FileDialog;
extern __declspec (package) const GUID IID_MouseTracker;
extern __declspec (package) const GUID IID_MouseDownHandler;
extern __declspec (package) const GUID IID_OCXExtender;
extern __declspec (package) const GUID IID_OCXExtenderEvents;
extern __declspec (package) const GUID CLSID_OLEControl;
extern __declspec (package) const GUID GUID_PpBorderType;
extern __declspec (package) const GUID GUID_PpHTMLVersion;
extern __declspec (package) const GUID GUID_PpPublishSourceType;
extern __declspec (package) const GUID GUID_PpBulletType;
extern __declspec (package) const GUID GUID_PpNumberedBulletStyle;
extern __declspec (package) const GUID GUID_PpMarkerType;
extern __declspec (package) const GUID GUID_PpShapeFormat;
extern __declspec (package) const GUID GUID_PpExportMode;
extern __declspec (package) const GUID CLSID_PowerPointApplication;
extern __declspec (package) const GUID IID_Table;
extern __declspec (package) const GUID IID_Columns;
extern __declspec (package) const GUID IID_Column;
extern __declspec (package) const GUID IID_Rows;
extern __declspec (package) const GUID IID_Row;
extern __declspec (package) const GUID IID_CellRange;
extern __declspec (package) const GUID IID_Cell;
extern __declspec (package) const GUID IID_Borders;
extern __declspec (package) const GUID IID_Panes;
extern __declspec (package) const GUID IID_Pane;
extern __declspec (package) const GUID IID_DefaultWebOptions;
extern __declspec (package) const GUID IID_WebOptions;
extern __declspec (package) const GUID IID_PublishObjects;
extern __declspec (package) const GUID IID_PublishObject;
extern __declspec (package) const GUID IID_Marker;
extern __declspec (package) const GUID IID_MasterEvents;
extern __declspec (package) const GUID CLSID_Master;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
enum      PpWindowState;
enum      PpArrangeStyle;
enum      PpViewType;
enum      PpColorSchemeIndex;
enum      PpSlideSizeType;
enum      PpSaveAsFileType;
enum      PpTextStyleType;
enum      PpSlideLayout;
enum      PpEntryEffect;
enum      PpTextLevelEffect;
enum      PpTextUnitEffect;
enum      PpChartUnitEffect;
enum      PpAfterEffect;
enum      PpAdvanceMode;
enum      PpSoundEffectType;
enum      PpFollowColors;
enum      PpUpdateOption;
enum      PpParagraphAlignment;
enum      PpBaselineAlignment;
enum      PpTabStopType;
enum      PpIndentControl;
enum      PpChangeCase;
enum      PpDialogMode;
enum      PpDialogStyle;
enum      PpDialogPositioning;
enum      PpDialogFontStyle;
enum      PpScrollBarStyle;
enum      PpListBoxSelectionStyle;
enum      PpListBoxAbbreviationStyle;
enum      PpAlertType;
enum      PpAlertButton;
enum      PpAlertIcon;
enum      PpSlideShowPointerType;
enum      PpSlideShowState;
enum      PpSlideShowAdvanceMode;
enum      PpFileDialogType;
enum      PpFileDialogView;
enum      PpPrintOutputType;
enum      PpPrintHandoutOrder;
enum      PpPrintColorType;
enum      PpSelectionType;
enum      PpDirection;
enum      PpDateTimeFormat;
enum      PpTransitionSpeed;
enum      PpMouseActivation;
enum      PpActionType;
enum      PpPlaceholderType;
enum      PpSlideShowType;
enum      PpPrintRangeType;
enum      PpAutoSize;
enum      PpMediaType;
enum      PpSoundFormatType;
enum      PpFarEastLineBreakLevel;
enum      PpSlideShowRangeType;
enum      PpFrameColors;
enum      PpBorderType;
enum      PpHTMLVersion;
enum      PpPublishSourceType;
enum      PpBulletType;
enum      PpNumberedBulletStyle;
enum      PpMarkerType;
enum      PpShapeFormat;
enum      PpExportMode;
interface DECLSPEC_UUID("{91493450-5A91-11CF-8700-00AA0060263B}") Collection;
typedef TComInterface<Collection, &IID_Collection> CollectionPtr;
interface DECLSPEC_UUID("{91493442-5A91-11CF-8700-00AA0060263B}") _Application;
typedef TComInterface<_Application, &IID__Application> _ApplicationPtr;
interface DECLSPEC_UUID("{91493451-5A91-11CF-8700-00AA0060263B}") _Global;
typedef TComInterface<_Global, &IID__Global> _GlobalPtr;
interface DECLSPEC_UUID("{914934C2-5A91-11CF-8700-00AA0060263B}") EApplication;
typedef TComInterface<EApplication, &IID_EApplication> EApplicationPtr;
interface DECLSPEC_UUID("{91493452-5A91-11CF-8700-00AA0060263B}") ColorFormat;
typedef TComInterface<ColorFormat, &IID_ColorFormat> ColorFormatPtr;
interface DECLSPEC_UUID("{91493453-5A91-11CF-8700-00AA0060263B}") SlideShowWindow;
typedef TComInterface<SlideShowWindow, &IID_SlideShowWindow> SlideShowWindowPtr;
interface DECLSPEC_UUID("{91493454-5A91-11CF-8700-00AA0060263B}") Selection;
typedef TComInterface<Selection, &IID_Selection> SelectionPtr;
interface DECLSPEC_UUID("{91493455-5A91-11CF-8700-00AA0060263B}") DocumentWindows;
typedef TComInterface<DocumentWindows, &IID_DocumentWindows> DocumentWindowsPtr;
interface DECLSPEC_UUID("{91493456-5A91-11CF-8700-00AA0060263B}") SlideShowWindows;
typedef TComInterface<SlideShowWindows, &IID_SlideShowWindows> SlideShowWindowsPtr;
interface DECLSPEC_UUID("{91493457-5A91-11CF-8700-00AA0060263B}") DocumentWindow;
typedef TComInterface<DocumentWindow, &IID_DocumentWindow> DocumentWindowPtr;
interface DECLSPEC_UUID("{91493458-5A91-11CF-8700-00AA0060263B}") View;
typedef TComInterface<View, &IID_View> ViewPtr;
interface DECLSPEC_UUID("{91493459-5A91-11CF-8700-00AA0060263B}") SlideShowView;
typedef TComInterface<SlideShowView, &IID_SlideShowView> SlideShowViewPtr;
interface DECLSPEC_UUID("{9149345A-5A91-11CF-8700-00AA0060263B}") SlideShowSettings;
typedef TComInterface<SlideShowSettings, &IID_SlideShowSettings> SlideShowSettingsPtr;
interface DECLSPEC_UUID("{9149345B-5A91-11CF-8700-00AA0060263B}") NamedSlideShows;
typedef TComInterface<NamedSlideShows, &IID_NamedSlideShows> NamedSlideShowsPtr;
interface DECLSPEC_UUID("{9149345C-5A91-11CF-8700-00AA0060263B}") NamedSlideShow;
typedef TComInterface<NamedSlideShow, &IID_NamedSlideShow> NamedSlideShowPtr;
interface DECLSPEC_UUID("{9149345D-5A91-11CF-8700-00AA0060263B}") PrintOptions;
typedef TComInterface<PrintOptions, &IID_PrintOptions> PrintOptionsPtr;
interface DECLSPEC_UUID("{9149345E-5A91-11CF-8700-00AA0060263B}") PrintRanges;
typedef TComInterface<PrintRanges, &IID_PrintRanges> PrintRangesPtr;
interface DECLSPEC_UUID("{9149345F-5A91-11CF-8700-00AA0060263B}") PrintRange;
typedef TComInterface<PrintRange, &IID_PrintRange> PrintRangePtr;
interface DECLSPEC_UUID("{91493460-5A91-11CF-8700-00AA0060263B}") AddIns;
typedef TComInterface<AddIns, &IID_AddIns> AddInsPtr;
interface DECLSPEC_UUID("{91493461-5A91-11CF-8700-00AA0060263B}") AddIn;
typedef TComInterface<AddIn, &IID_AddIn> AddInPtr;
interface DECLSPEC_UUID("{91493462-5A91-11CF-8700-00AA0060263B}") Presentations;
typedef TComInterface<Presentations, &IID_Presentations> PresentationsPtr;
interface DECLSPEC_UUID("{91493463-5A91-11CF-8700-00AA0060263B}") PresEvents;
typedef TComInterface<PresEvents, &IID_PresEvents> PresEventsPtr;
interface DECLSPEC_UUID("{9149349D-5A91-11CF-8700-00AA0060263B}") _Presentation;
typedef TComInterface<_Presentation, &IID__Presentation> _PresentationPtr;
interface DECLSPEC_UUID("{91493464-5A91-11CF-8700-00AA0060263B}") Hyperlinks;
typedef TComInterface<Hyperlinks, &IID_Hyperlinks> HyperlinksPtr;
interface DECLSPEC_UUID("{91493465-5A91-11CF-8700-00AA0060263B}") Hyperlink;
typedef TComInterface<Hyperlink, &IID_Hyperlink> HyperlinkPtr;
interface DECLSPEC_UUID("{91493466-5A91-11CF-8700-00AA0060263B}") PageSetup;
typedef TComInterface<PageSetup, &IID_PageSetup> PageSetupPtr;
interface DECLSPEC_UUID("{91493467-5A91-11CF-8700-00AA0060263B}") Fonts;
typedef TComInterface<Fonts, &IID_Fonts> FontsPtr;
interface DECLSPEC_UUID("{91493468-5A91-11CF-8700-00AA0060263B}") ExtraColors;
typedef TComInterface<ExtraColors, &IID_ExtraColors> ExtraColorsPtr;
interface DECLSPEC_UUID("{91493469-5A91-11CF-8700-00AA0060263B}") Slides;
typedef TComInterface<Slides, &IID_Slides> SlidesPtr;
interface DECLSPEC_UUID("{9149346A-5A91-11CF-8700-00AA0060263B}") _Slide;
typedef TComInterface<_Slide, &IID__Slide> _SlidePtr;
interface DECLSPEC_UUID("{9149346B-5A91-11CF-8700-00AA0060263B}") SlideRange;
typedef TComInterface<SlideRange, &IID_SlideRange> SlideRangePtr;
interface DECLSPEC_UUID("{9149346C-5A91-11CF-8700-00AA0060263B}") _Master;
typedef TComInterface<_Master, &IID__Master> _MasterPtr;
interface DECLSPEC_UUID("{9149346D-5A91-11CF-8700-00AA0060263B}") SldEvents;
typedef TComInterface<SldEvents, &IID_SldEvents> SldEventsPtr;
interface DECLSPEC_UUID("{9149346E-5A91-11CF-8700-00AA0060263B}") ColorSchemes;
typedef TComInterface<ColorSchemes, &IID_ColorSchemes> ColorSchemesPtr;
interface DECLSPEC_UUID("{9149346F-5A91-11CF-8700-00AA0060263B}") ColorScheme;
typedef TComInterface<ColorScheme, &IID_ColorScheme> ColorSchemePtr;
interface DECLSPEC_UUID("{91493470-5A91-11CF-8700-00AA0060263B}") RGBColor;
typedef TComInterface<RGBColor, &IID_RGBColor> RGBColorPtr;
interface DECLSPEC_UUID("{91493471-5A91-11CF-8700-00AA0060263B}") SlideShowTransition;
typedef TComInterface<SlideShowTransition, &IID_SlideShowTransition> SlideShowTransitionPtr;
interface DECLSPEC_UUID("{91493472-5A91-11CF-8700-00AA0060263B}") SoundEffect;
typedef TComInterface<SoundEffect, &IID_SoundEffect> SoundEffectPtr;
interface DECLSPEC_UUID("{91493473-5A91-11CF-8700-00AA0060263B}") SoundFormat;
typedef TComInterface<SoundFormat, &IID_SoundFormat> SoundFormatPtr;
interface DECLSPEC_UUID("{91493474-5A91-11CF-8700-00AA0060263B}") HeadersFooters;
typedef TComInterface<HeadersFooters, &IID_HeadersFooters> HeadersFootersPtr;
interface DECLSPEC_UUID("{91493475-5A91-11CF-8700-00AA0060263B}") Shapes;
typedef TComInterface<Shapes, &IID_Shapes> ShapesPtr;
interface DECLSPEC_UUID("{91493476-5A91-11CF-8700-00AA0060263B}") Placeholders;
typedef TComInterface<Placeholders, &IID_Placeholders> PlaceholdersPtr;
interface DECLSPEC_UUID("{91493477-5A91-11CF-8700-00AA0060263B}") PlaceholderFormat;
typedef TComInterface<PlaceholderFormat, &IID_PlaceholderFormat> PlaceholderFormatPtr;
interface DECLSPEC_UUID("{91493478-5A91-11CF-8700-00AA0060263B}") FreeformBuilder;
typedef TComInterface<FreeformBuilder, &IID_FreeformBuilder> FreeformBuilderPtr;
interface DECLSPEC_UUID("{91493479-5A91-11CF-8700-00AA0060263B}") Shape;
typedef TComInterface<Shape, &IID_Shape> ShapePtr;
interface DECLSPEC_UUID("{9149347A-5A91-11CF-8700-00AA0060263B}") ShapeRange;
typedef TComInterface<ShapeRange, &IID_ShapeRange> ShapeRangePtr;
interface DECLSPEC_UUID("{9149347B-5A91-11CF-8700-00AA0060263B}") GroupShapes;
typedef TComInterface<GroupShapes, &IID_GroupShapes> GroupShapesPtr;
interface DECLSPEC_UUID("{9149347C-5A91-11CF-8700-00AA0060263B}") Adjustments;
typedef TComInterface<Adjustments, &IID_Adjustments> AdjustmentsPtr;
interface DECLSPEC_UUID("{9149347D-5A91-11CF-8700-00AA0060263B}") PictureFormat;
typedef TComInterface<PictureFormat, &IID_PictureFormat> PictureFormatPtr;
interface DECLSPEC_UUID("{9149347E-5A91-11CF-8700-00AA0060263B}") FillFormat;
typedef TComInterface<FillFormat, &IID_FillFormat> FillFormatPtr;
interface DECLSPEC_UUID("{9149347F-5A91-11CF-8700-00AA0060263B}") LineFormat;
typedef TComInterface<LineFormat, &IID_LineFormat> LineFormatPtr;
interface DECLSPEC_UUID("{91493480-5A91-11CF-8700-00AA0060263B}") ShadowFormat;
typedef TComInterface<ShadowFormat, &IID_ShadowFormat> ShadowFormatPtr;
interface DECLSPEC_UUID("{91493481-5A91-11CF-8700-00AA0060263B}") ConnectorFormat;
typedef TComInterface<ConnectorFormat, &IID_ConnectorFormat> ConnectorFormatPtr;
interface DECLSPEC_UUID("{91493482-5A91-11CF-8700-00AA0060263B}") TextEffectFormat;
typedef TComInterface<TextEffectFormat, &IID_TextEffectFormat> TextEffectFormatPtr;
interface DECLSPEC_UUID("{91493483-5A91-11CF-8700-00AA0060263B}") ThreeDFormat;
typedef TComInterface<ThreeDFormat, &IID_ThreeDFormat> ThreeDFormatPtr;
interface DECLSPEC_UUID("{91493484-5A91-11CF-8700-00AA0060263B}") TextFrame;
typedef TComInterface<TextFrame, &IID_TextFrame> TextFramePtr;
interface DECLSPEC_UUID("{91493485-5A91-11CF-8700-00AA0060263B}") CalloutFormat;
typedef TComInterface<CalloutFormat, &IID_CalloutFormat> CalloutFormatPtr;
interface DECLSPEC_UUID("{91493486-5A91-11CF-8700-00AA0060263B}") ShapeNodes;
typedef TComInterface<ShapeNodes, &IID_ShapeNodes> ShapeNodesPtr;
interface DECLSPEC_UUID("{91493487-5A91-11CF-8700-00AA0060263B}") ShapeNode;
typedef TComInterface<ShapeNode, &IID_ShapeNode> ShapeNodePtr;
interface DECLSPEC_UUID("{91493488-5A91-11CF-8700-00AA0060263B}") OLEFormat;
typedef TComInterface<OLEFormat, &IID_OLEFormat> OLEFormatPtr;
interface DECLSPEC_UUID("{91493489-5A91-11CF-8700-00AA0060263B}") LinkFormat;
typedef TComInterface<LinkFormat, &IID_LinkFormat> LinkFormatPtr;
interface DECLSPEC_UUID("{9149348A-5A91-11CF-8700-00AA0060263B}") ObjectVerbs;
typedef TComInterface<ObjectVerbs, &IID_ObjectVerbs> ObjectVerbsPtr;
interface DECLSPEC_UUID("{9149348B-5A91-11CF-8700-00AA0060263B}") AnimationSettings;
typedef TComInterface<AnimationSettings, &IID_AnimationSettings> AnimationSettingsPtr;
interface DECLSPEC_UUID("{9149348C-5A91-11CF-8700-00AA0060263B}") ActionSettings;
typedef TComInterface<ActionSettings, &IID_ActionSettings> ActionSettingsPtr;
interface DECLSPEC_UUID("{9149348D-5A91-11CF-8700-00AA0060263B}") ActionSetting;
typedef TComInterface<ActionSetting, &IID_ActionSetting> ActionSettingPtr;
interface DECLSPEC_UUID("{9149348E-5A91-11CF-8700-00AA0060263B}") PlaySettings;
typedef TComInterface<PlaySettings, &IID_PlaySettings> PlaySettingsPtr;
interface DECLSPEC_UUID("{9149348F-5A91-11CF-8700-00AA0060263B}") TextRange;
typedef TComInterface<TextRange, &IID_TextRange> TextRangePtr;
interface DECLSPEC_UUID("{91493490-5A91-11CF-8700-00AA0060263B}") Ruler;
typedef TComInterface<Ruler, &IID_Ruler> RulerPtr;
interface DECLSPEC_UUID("{91493491-5A91-11CF-8700-00AA0060263B}") RulerLevels;
typedef TComInterface<RulerLevels, &IID_RulerLevels> RulerLevelsPtr;
interface DECLSPEC_UUID("{91493492-5A91-11CF-8700-00AA0060263B}") RulerLevel;
typedef TComInterface<RulerLevel, &IID_RulerLevel> RulerLevelPtr;
interface DECLSPEC_UUID("{91493493-5A91-11CF-8700-00AA0060263B}") TabStops;
typedef TComInterface<TabStops, &IID_TabStops> TabStopsPtr;
interface DECLSPEC_UUID("{91493494-5A91-11CF-8700-00AA0060263B}") TabStop;
typedef TComInterface<TabStop, &IID_TabStop> TabStopPtr;
interface DECLSPEC_UUID("{91493495-5A91-11CF-8700-00AA0060263B}") Font;
typedef TComInterface<Font, &IID_Font> FontPtr;
interface DECLSPEC_UUID("{91493496-5A91-11CF-8700-00AA0060263B}") ParagraphFormat;
typedef TComInterface<ParagraphFormat, &IID_ParagraphFormat> ParagraphFormatPtr;
interface DECLSPEC_UUID("{91493497-5A91-11CF-8700-00AA0060263B}") BulletFormat;
typedef TComInterface<BulletFormat, &IID_BulletFormat> BulletFormatPtr;
interface DECLSPEC_UUID("{91493498-5A91-11CF-8700-00AA0060263B}") TextStyles;
typedef TComInterface<TextStyles, &IID_TextStyles> TextStylesPtr;
interface DECLSPEC_UUID("{91493499-5A91-11CF-8700-00AA0060263B}") TextStyle;
typedef TComInterface<TextStyle, &IID_TextStyle> TextStylePtr;
interface DECLSPEC_UUID("{9149349A-5A91-11CF-8700-00AA0060263B}") TextStyleLevels;
typedef TComInterface<TextStyleLevels, &IID_TextStyleLevels> TextStyleLevelsPtr;
interface DECLSPEC_UUID("{9149349B-5A91-11CF-8700-00AA0060263B}") TextStyleLevel;
typedef TComInterface<TextStyleLevel, &IID_TextStyleLevel> TextStyleLevelPtr;
interface DECLSPEC_UUID("{9149349C-5A91-11CF-8700-00AA0060263B}") HeaderFooter;
typedef TComInterface<HeaderFooter, &IID_HeaderFooter> HeaderFooterPtr;
interface DECLSPEC_UUID("{9149349E-5A91-11CF-8700-00AA0060263B}") PPDialogs;
typedef TComInterface<PPDialogs, &IID_PPDialogs> PPDialogsPtr;
interface DECLSPEC_UUID("{9149349F-5A91-11CF-8700-00AA0060263B}") PPAlert;
typedef TComInterface<PPAlert, &IID_PPAlert> PPAlertPtr;
interface DECLSPEC_UUID("{914934A0-5A91-11CF-8700-00AA0060263B}") PPDialog;
typedef TComInterface<PPDialog, &IID_PPDialog> PPDialogPtr;
interface DECLSPEC_UUID("{914934A1-5A91-11CF-8700-00AA0060263B}") PPTabSheet;
typedef TComInterface<PPTabSheet, &IID_PPTabSheet> PPTabSheetPtr;
interface DECLSPEC_UUID("{914934A2-5A91-11CF-8700-00AA0060263B}") PPControls;
typedef TComInterface<PPControls, &IID_PPControls> PPControlsPtr;
interface DECLSPEC_UUID("{914934A3-5A91-11CF-8700-00AA0060263B}") PPTabSheets;
typedef TComInterface<PPTabSheets, &IID_PPTabSheets> PPTabSheetsPtr;
interface DECLSPEC_UUID("{914934A4-5A91-11CF-8700-00AA0060263B}") PPControl;
typedef TComInterface<PPControl, &IID_PPControl> PPControlPtr;
interface DECLSPEC_UUID("{914934A5-5A91-11CF-8700-00AA0060263B}") PPPushButton;
typedef TComInterface<PPPushButton, &IID_PPPushButton> PPPushButtonPtr;
interface DECLSPEC_UUID("{914934A6-5A91-11CF-8700-00AA0060263B}") PPToggleButton;
typedef TComInterface<PPToggleButton, &IID_PPToggleButton> PPToggleButtonPtr;
interface DECLSPEC_UUID("{914934A7-5A91-11CF-8700-00AA0060263B}") PPBitmapButton;
typedef TComInterface<PPBitmapButton, &IID_PPBitmapButton> PPBitmapButtonPtr;
interface DECLSPEC_UUID("{914934A8-5A91-11CF-8700-00AA0060263B}") PPListBox;
typedef TComInterface<PPListBox, &IID_PPListBox> PPListBoxPtr;
interface DECLSPEC_UUID("{914934A9-5A91-11CF-8700-00AA0060263B}") PPStrings;
typedef TComInterface<PPStrings, &IID_PPStrings> PPStringsPtr;
interface DECLSPEC_UUID("{914934AA-5A91-11CF-8700-00AA0060263B}") PPCheckBox;
typedef TComInterface<PPCheckBox, &IID_PPCheckBox> PPCheckBoxPtr;
interface DECLSPEC_UUID("{914934AB-5A91-11CF-8700-00AA0060263B}") PPRadioCluster;
typedef TComInterface<PPRadioCluster, &IID_PPRadioCluster> PPRadioClusterPtr;
interface DECLSPEC_UUID("{914934AC-5A91-11CF-8700-00AA0060263B}") PPStaticText;
typedef TComInterface<PPStaticText, &IID_PPStaticText> PPStaticTextPtr;
interface DECLSPEC_UUID("{914934AD-5A91-11CF-8700-00AA0060263B}") PPEditText;
typedef TComInterface<PPEditText, &IID_PPEditText> PPEditTextPtr;
interface DECLSPEC_UUID("{914934AE-5A91-11CF-8700-00AA0060263B}") PPIcon;
typedef TComInterface<PPIcon, &IID_PPIcon> PPIconPtr;
interface DECLSPEC_UUID("{914934AF-5A91-11CF-8700-00AA0060263B}") PPBitmap;
typedef TComInterface<PPBitmap, &IID_PPBitmap> PPBitmapPtr;
interface DECLSPEC_UUID("{914934B0-5A91-11CF-8700-00AA0060263B}") PPSpinner;
typedef TComInterface<PPSpinner, &IID_PPSpinner> PPSpinnerPtr;
interface DECLSPEC_UUID("{914934B1-5A91-11CF-8700-00AA0060263B}") PPScrollBar;
typedef TComInterface<PPScrollBar, &IID_PPScrollBar> PPScrollBarPtr;
interface DECLSPEC_UUID("{914934B2-5A91-11CF-8700-00AA0060263B}") PPGroupBox;
typedef TComInterface<PPGroupBox, &IID_PPGroupBox> PPGroupBoxPtr;
interface DECLSPEC_UUID("{914934B3-5A91-11CF-8700-00AA0060263B}") PPFrame;
typedef TComInterface<PPFrame, &IID_PPFrame> PPFramePtr;
interface DECLSPEC_UUID("{914934B4-5A91-11CF-8700-00AA0060263B}") PPTabControl;
typedef TComInterface<PPTabControl, &IID_PPTabControl> PPTabControlPtr;
interface DECLSPEC_UUID("{914934B5-5A91-11CF-8700-00AA0060263B}") PPDropDown;
typedef TComInterface<PPDropDown, &IID_PPDropDown> PPDropDownPtr;
interface DECLSPEC_UUID("{914934B6-5A91-11CF-8700-00AA0060263B}") PPDropDownEdit;
typedef TComInterface<PPDropDownEdit, &IID_PPDropDownEdit> PPDropDownEditPtr;
interface DECLSPEC_UUID("{914934B7-5A91-11CF-8700-00AA0060263B}") PPSlideMiniature;
typedef TComInterface<PPSlideMiniature, &IID_PPSlideMiniature> PPSlideMiniaturePtr;
interface DECLSPEC_UUID("{914934B8-5A91-11CF-8700-00AA0060263B}") PPRadioButton;
typedef TComInterface<PPRadioButton, &IID_PPRadioButton> PPRadioButtonPtr;
interface DECLSPEC_UUID("{914934B9-5A91-11CF-8700-00AA0060263B}") Tags;
typedef TComInterface<Tags, &IID_Tags> TagsPtr;
interface DECLSPEC_UUID("{914934BA-5A91-11CF-8700-00AA0060263B}") FileDialogFileList;
typedef TComInterface<FileDialogFileList, &IID_FileDialogFileList> FileDialogFileListPtr;
interface DECLSPEC_UUID("{914934BB-5A91-11CF-8700-00AA0060263B}") FileDialogExtension;
typedef TComInterface<FileDialogExtension, &IID_FileDialogExtension> FileDialogExtensionPtr;
interface DECLSPEC_UUID("{914934BC-5A91-11CF-8700-00AA0060263B}") FileDialogExtensionList;
typedef TComInterface<FileDialogExtensionList, &IID_FileDialogExtensionList> FileDialogExtensionListPtr;
interface DECLSPEC_UUID("{914934BD-5A91-11CF-8700-00AA0060263B}") FileDialog;
typedef TComInterface<FileDialog, &IID_FileDialog> FileDialogPtr;
interface DECLSPEC_UUID("{914934BE-5A91-11CF-8700-00AA0060263B}") MouseTracker;
typedef TComInterface<MouseTracker, &IID_MouseTracker> MouseTrackerPtr;
interface DECLSPEC_UUID("{914934BF-5A91-11CF-8700-00AA0060263B}") MouseDownHandler;
typedef TComInterface<MouseDownHandler, &IID_MouseDownHandler> MouseDownHandlerPtr;
interface DECLSPEC_UUID("{914934C0-5A91-11CF-8700-00AA0060263B}") OCXExtender;
typedef TComInterface<OCXExtender, &IID_OCXExtender> OCXExtenderPtr;
interface DECLSPEC_UUID("{914934C1-5A91-11CF-8700-00AA0060263B}") OCXExtenderEvents;
typedef TComInterface<OCXExtenderEvents, &IID_OCXExtenderEvents> OCXExtenderEventsPtr;
interface DECLSPEC_UUID("{914934C3-5A91-11CF-8700-00AA0060263B}") Table;
typedef TComInterface<Table, &IID_Table> TablePtr;
interface DECLSPEC_UUID("{914934C4-5A91-11CF-8700-00AA0060263B}") Columns;
typedef TComInterface<Columns, &IID_Columns> ColumnsPtr;
interface DECLSPEC_UUID("{914934C5-5A91-11CF-8700-00AA0060263B}") Column;
typedef TComInterface<Column, &IID_Column> ColumnPtr;
interface DECLSPEC_UUID("{914934C6-5A91-11CF-8700-00AA0060263B}") Rows;
typedef TComInterface<Rows, &IID_Rows> RowsPtr;
interface DECLSPEC_UUID("{914934C7-5A91-11CF-8700-00AA0060263B}") Row;
typedef TComInterface<Row, &IID_Row> RowPtr;
interface DECLSPEC_UUID("{914934C8-5A91-11CF-8700-00AA0060263B}") CellRange;
typedef TComInterface<CellRange, &IID_CellRange> CellRangePtr;
interface DECLSPEC_UUID("{914934C9-5A91-11CF-8700-00AA0060263B}") Cell;
typedef TComInterface<Cell, &IID_Cell> CellPtr;
interface DECLSPEC_UUID("{914934CA-5A91-11CF-8700-00AA0060263B}") Borders;
typedef TComInterface<Borders, &IID_Borders> BordersPtr;
interface DECLSPEC_UUID("{914934CB-5A91-11CF-8700-00AA0060263B}") Panes;
typedef TComInterface<Panes, &IID_Panes> PanesPtr;
interface DECLSPEC_UUID("{914934CC-5A91-11CF-8700-00AA0060263B}") Pane;
typedef TComInterface<Pane, &IID_Pane> PanePtr;
interface DECLSPEC_UUID("{914934CD-5A91-11CF-8700-00AA0060263B}") DefaultWebOptions;
typedef TComInterface<DefaultWebOptions, &IID_DefaultWebOptions> DefaultWebOptionsPtr;
interface DECLSPEC_UUID("{914934CE-5A91-11CF-8700-00AA0060263B}") WebOptions;
typedef TComInterface<WebOptions, &IID_WebOptions> WebOptionsPtr;
interface DECLSPEC_UUID("{914934CF-5A91-11CF-8700-00AA0060263B}") PublishObjects;
typedef TComInterface<PublishObjects, &IID_PublishObjects> PublishObjectsPtr;
interface DECLSPEC_UUID("{914934D0-5A91-11CF-8700-00AA0060263B}") PublishObject;
typedef TComInterface<PublishObject, &IID_PublishObject> PublishObjectPtr;
interface DECLSPEC_UUID("{914934D1-5A91-11CF-8700-00AA0060263B}") Marker;
typedef TComInterface<Marker, &IID_Marker> MarkerPtr;
interface DECLSPEC_UUID("{914934D2-5A91-11CF-8700-00AA0060263B}") MasterEvents;
typedef TComInterface<MasterEvents, &IID_MasterEvents> MasterEventsPtr;

// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef _Global PowerPointGlobal;
typedef _GlobalPtr PowerPointGlobalPtr;
typedef _Slide PowerPointSlide;
typedef _SlidePtr PowerPointSlidePtr;
typedef _Presentation PowerPointPresentation;
typedef _PresentationPtr PowerPointPresentationPtr;
typedef OCXExtender OLEControl;
typedef OCXExtenderPtr OLEControlPtr;
typedef _Application PowerPointApplication;
typedef _ApplicationPtr PowerPointApplicationPtr;
typedef _Master Master;
typedef _MasterPtr MasterPtr;

#define LIBID_OF_PowerPointGlobal (&LIBID_PowerPoint)
#define LIBID_OF_PowerPointSlide (&LIBID_PowerPoint)
#define LIBID_OF_PowerPointPresentation (&LIBID_PowerPoint)
#define LIBID_OF_OLEControl (&LIBID_PowerPoint)
#define LIBID_OF_PowerPointApplication (&LIBID_PowerPoint)
#define LIBID_OF_Master (&LIBID_PowerPoint)

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
typedef enum PpWindowState
{
  ppWindowNormal = 1, 
  ppWindowMinimized = 2, 
  ppWindowMaximized = 3
} PpWindowState;

typedef enum PpArrangeStyle
{
  ppArrangeTiled = 1, 
  ppArrangeCascade = 2
} PpArrangeStyle;

typedef enum PpViewType
{
  ppViewSlide = 1, 
  ppViewSlideMaster = 2, 
  ppViewNotesPage = 3, 
  ppViewHandoutMaster = 4, 
  ppViewNotesMaster = 5, 
  ppViewOutline = 6, 
  ppViewSlideSorter = 7, 
  ppViewTitleMaster = 8, 
  ppViewNormal = 9
} PpViewType;

typedef enum PpColorSchemeIndex
{
  ppSchemeColorMixed = 0xFFFFFFFE, 
  ppNotSchemeColor = 0, 
  ppBackground = 1, 
  ppForeground = 2, 
  ppShadow = 3, 
  ppTitle = 4, 
  ppFill = 5, 
  ppAccent1 = 6, 
  ppAccent2 = 7, 
  ppAccent3 = 8
} PpColorSchemeIndex;

typedef enum PpSlideSizeType
{
  ppSlideSizeOnScreen = 1, 
  ppSlideSizeLetterPaper = 2, 
  ppSlideSizeA4Paper = 3, 
  ppSlideSize35MM = 4, 
  ppSlideSizeOverhead = 5, 
  ppSlideSizeBanner = 6, 
  ppSlideSizeCustom = 7
} PpSlideSizeType;

typedef enum PpSaveAsFileType
{
  ppSaveAsPresentation = 1, 
  ppSaveAsPowerPoint7 = 2, 
  ppSaveAsPowerPoint4 = 3, 
  ppSaveAsPowerPoint3 = 4, 
  ppSaveAsTemplate = 5, 
  ppSaveAsRTF = 6, 
  ppSaveAsShow = 7, 
  ppSaveAsAddIn = 8, 
  ppSaveAsPowerPoint4FarEast = 10, 
  ppSaveAsDefault = 11, 
  ppSaveAsHTML = 12, 
  ppSaveAsHTMLv3 = 13, 
  ppSaveAsHTMLDual = 14, 
  ppSaveAsMetaFile = 15, 
  ppSaveAsGIF = 16, 
  ppSaveAsJPG = 17, 
  ppSaveAsPNG = 18, 
  ppSaveAsBMP = 19
} PpSaveAsFileType;

typedef enum PpTextStyleType
{
  ppDefaultStyle = 1, 
  ppTitleStyle = 2, 
  ppBodyStyle = 3
} PpTextStyleType;

typedef enum PpSlideLayout
{
  ppLayoutMixed = 0xFFFFFFFE, 
  ppLayoutTitle = 1, 
  ppLayoutText = 2, 
  ppLayoutTwoColumnText = 3, 
  ppLayoutTable = 4, 
  ppLayoutTextAndChart = 5, 
  ppLayoutChartAndText = 6, 
  ppLayoutOrgchart = 7, 
  ppLayoutChart = 8, 
  ppLayoutTextAndClipart = 9, 
  ppLayoutClipartAndText = 10, 
  ppLayoutTitleOnly = 11, 
  ppLayoutBlank = 12, 
  ppLayoutTextAndObject = 13, 
  ppLayoutObjectAndText = 14, 
  ppLayoutLargeObject = 15, 
  ppLayoutObject = 16, 
  ppLayoutTextAndMediaClip = 17, 
  ppLayoutMediaClipAndText = 18, 
  ppLayoutObjectOverText = 19, 
  ppLayoutTextOverObject = 20, 
  ppLayoutTextAndTwoObjects = 21, 
  ppLayoutTwoObjectsAndText = 22, 
  ppLayoutTwoObjectsOverText = 23, 
  ppLayoutFourObjects = 24, 
  ppLayoutVerticalText = 25, 
  ppLayoutClipArtAndVerticalText = 26, 
  ppLayoutVerticalTitleAndText = 27, 
  ppLayoutVerticalTitleAndTextOverChart = 28
} PpSlideLayout;

typedef enum PpEntryEffect
{
  ppEffectMixed = 0xFFFFFFFE, 
  ppEffectNone = 0, 
  ppEffectCut = 257, 
  ppEffectCutThroughBlack = 258, 
  ppEffectRandom = 513, 
  ppEffectBlindsHorizontal = 769, 
  ppEffectBlindsVertical = 770, 
  ppEffectCheckerboardAcross = 1025, 
  ppEffectCheckerboardDown = 1026, 
  ppEffectCoverLeft = 1281, 
  ppEffectCoverUp = 1282, 
  ppEffectCoverRight = 1283, 
  ppEffectCoverDown = 1284, 
  ppEffectCoverLeftUp = 1285, 
  ppEffectCoverRightUp = 1286, 
  ppEffectCoverLeftDown = 1287, 
  ppEffectCoverRightDown = 1288, 
  ppEffectDissolve = 1537, 
  ppEffectFade = 1793, 
  ppEffectUncoverLeft = 2049, 
  ppEffectUncoverUp = 2050, 
  ppEffectUncoverRight = 2051, 
  ppEffectUncoverDown = 2052, 
  ppEffectUncoverLeftUp = 2053, 
  ppEffectUncoverRightUp = 2054, 
  ppEffectUncoverLeftDown = 2055, 
  ppEffectUncoverRightDown = 2056, 
  ppEffectRandomBarsHorizontal = 2305, 
  ppEffectRandomBarsVertical = 2306, 
  ppEffectStripsUpLeft = 2561, 
  ppEffectStripsUpRight = 2562, 
  ppEffectStripsDownLeft = 2563, 
  ppEffectStripsDownRight = 2564, 
  ppEffectStripsLeftUp = 2565, 
  ppEffectStripsRightUp = 2566, 
  ppEffectStripsLeftDown = 2567, 
  ppEffectStripsRightDown = 2568, 
  ppEffectWipeLeft = 2817, 
  ppEffectWipeUp = 2818, 
  ppEffectWipeRight = 2819, 
  ppEffectWipeDown = 2820, 
  ppEffectBoxOut = 3073, 
  ppEffectBoxIn = 3074, 
  ppEffectFlyFromLeft = 3329, 
  ppEffectFlyFromTop = 3330, 
  ppEffectFlyFromRight = 3331, 
  ppEffectFlyFromBottom = 3332, 
  ppEffectFlyFromTopLeft = 3333, 
  ppEffectFlyFromTopRight = 3334, 
  ppEffectFlyFromBottomLeft = 3335, 
  ppEffectFlyFromBottomRight = 3336, 
  ppEffectPeekFromLeft = 3337, 
  ppEffectPeekFromDown = 3338, 
  ppEffectPeekFromRight = 3339, 
  ppEffectPeekFromUp = 3340, 
  ppEffectCrawlFromLeft = 3341, 
  ppEffectCrawlFromUp = 3342, 
  ppEffectCrawlFromRight = 3343, 
  ppEffectCrawlFromDown = 3344, 
  ppEffectZoomIn = 3345, 
  ppEffectZoomInSlightly = 3346, 
  ppEffectZoomOut = 3347, 
  ppEffectZoomOutSlightly = 3348, 
  ppEffectZoomCenter = 3349, 
  ppEffectZoomBottom = 3350, 
  ppEffectStretchAcross = 3351, 
  ppEffectStretchLeft = 3352, 
  ppEffectStretchUp = 3353, 
  ppEffectStretchRight = 3354, 
  ppEffectStretchDown = 3355, 
  ppEffectSwivel = 3356, 
  ppEffectSpiral = 3357, 
  ppEffectSplitHorizontalOut = 3585, 
  ppEffectSplitHorizontalIn = 3586, 
  ppEffectSplitVerticalOut = 3587, 
  ppEffectSplitVerticalIn = 3588, 
  ppEffectFlashOnceFast = 3841, 
  ppEffectFlashOnceMedium = 3842, 
  ppEffectFlashOnceSlow = 3843, 
  ppEffectAppear = 3844
} PpEntryEffect;

typedef enum PpTextLevelEffect
{
  ppAnimateLevelMixed = 0xFFFFFFFE, 
  ppAnimateLevelNone = 0, 
  ppAnimateByFirstLevel = 1, 
  ppAnimateBySecondLevel = 2, 
  ppAnimateByThirdLevel = 3, 
  ppAnimateByFourthLevel = 4, 
  ppAnimateByFifthLevel = 5, 
  ppAnimateByAllLevels = 16
} PpTextLevelEffect;

typedef enum PpTextUnitEffect
{
  ppAnimateUnitMixed = 0xFFFFFFFE, 
  ppAnimateByParagraph = 0, 
  ppAnimateByWord = 1, 
  ppAnimateByCharacter = 2
} PpTextUnitEffect;

typedef enum PpChartUnitEffect
{
  ppAnimateChartMixed = 0xFFFFFFFE, 
  ppAnimateBySeries = 1, 
  ppAnimateByCategory = 2, 
  ppAnimateBySeriesElements = 3, 
  ppAnimateByCategoryElements = 4
} PpChartUnitEffect;

typedef enum PpAfterEffect
{
  ppAfterEffectMixed = 0xFFFFFFFE, 
  ppAfterEffectNothing = 0, 
  ppAfterEffectHide = 1, 
  ppAfterEffectDim = 2, 
  ppAfterEffectHideOnClick = 3
} PpAfterEffect;

typedef enum PpAdvanceMode
{
  ppAdvanceModeMixed = 0xFFFFFFFE, 
  ppAdvanceOnClick = 1, 
  ppAdvanceOnTime = 2
} PpAdvanceMode;

typedef enum PpSoundEffectType
{
  ppSoundEffectsMixed = 0xFFFFFFFE, 
  ppSoundNone = 0, 
  ppSoundStopPrevious = 1, 
  ppSoundFile = 2
} PpSoundEffectType;

typedef enum PpFollowColors
{
  ppFollowColorsMixed = 0xFFFFFFFE, 
  ppFollowColorsNone = 0, 
  ppFollowColorsScheme = 1, 
  ppFollowColorsTextAndBackground = 2
} PpFollowColors;

typedef enum PpUpdateOption
{
  ppUpdateOptionMixed = 0xFFFFFFFE, 
  ppUpdateOptionManual = 1, 
  ppUpdateOptionAutomatic = 2
} PpUpdateOption;

typedef enum PpParagraphAlignment
{
  ppAlignmentMixed = 0xFFFFFFFE, 
  ppAlignLeft = 1, 
  ppAlignCenter = 2, 
  ppAlignRight = 3, 
  ppAlignJustify = 4, 
  ppAlignDistribute = 5
} PpParagraphAlignment;

typedef enum PpBaselineAlignment
{
  ppBaselineAlignMixed = 0xFFFFFFFE, 
  ppBaselineAlignBaseline = 1, 
  ppBaselineAlignTop = 2, 
  ppBaselineAlignCenter = 3, 
  ppBaselineAlignFarEast50 = 4
} PpBaselineAlignment;

typedef enum PpTabStopType
{
  ppTabStopMixed = 0xFFFFFFFE, 
  ppTabStopLeft = 1, 
  ppTabStopCenter = 2, 
  ppTabStopRight = 3, 
  ppTabStopDecimal = 4
} PpTabStopType;

typedef enum PpIndentControl
{
  ppIndentControlMixed = 0xFFFFFFFE, 
  ppIndentReplaceAttr = 1, 
  ppIndentKeepAttr = 2
} PpIndentControl;

typedef enum PpChangeCase
{
  ppCaseSentence = 1, 
  ppCaseLower = 2, 
  ppCaseUpper = 3, 
  ppCaseTitle = 4, 
  ppCaseToggle = 5
} PpChangeCase;

typedef enum PpDialogMode
{
  ppDialogModeMixed = 0xFFFFFFFE, 
  ppDialogModeless = 0, 
  ppDialogModal = 1
} PpDialogMode;

typedef enum PpDialogStyle
{
  ppDialogStyleMixed = 0xFFFFFFFE, 
  ppDialogStandard = 1, 
  ppDialogTabbed = 2
} PpDialogStyle;

typedef enum PpDialogPositioning
{
  ppDialogPositionNormal = 1, 
  ppDialogPositionCenterParent = 2, 
  ppDialogPositionCenterScreen = 3, 
  ppDialogPositionRememberLast = 4
} PpDialogPositioning;

typedef enum PpDialogFontStyle
{
  ppDialogFontStyleMixed = 0xFFFFFFFE, 
  ppDialogSmall = 0xFFFFFFFF, 
  ppDialogItalic = 0
} PpDialogFontStyle;

typedef enum PpScrollBarStyle
{
  ppScrollBarVertical = 0, 
  ppScrollBarHorizontal = 1
} PpScrollBarStyle;

typedef enum PpListBoxSelectionStyle
{
  ppListBoxSingle = 0, 
  ppListBoxMulti = 1
} PpListBoxSelectionStyle;

typedef enum PpListBoxAbbreviationStyle
{
  ppListBoxAbbreviationNone = 0, 
  ppListBoxAbbreviationTruncation = 1, 
  ppListBoxAbbreviationTruncationWithEllipsis = 2, 
  ppListBoxAbbreviationFileNames = 3
} PpListBoxAbbreviationStyle;

typedef enum PpAlertType
{
  ppAlertTypeOK = 0, 
  ppAlertTypeOKCANCEL = 1, 
  ppAlertTypeYESNO = 2, 
  ppAlertTypeYESNOCANCEL = 3, 
  ppAlertTypeBACKNEXTCLOSE = 4, 
  ppAlertTypeRETRYCANCEL = 5, 
  ppAlertTypeABORTRETRYIGNORE = 6
} PpAlertType;

typedef enum PpAlertButton
{
  ppAlertButtonCLOSE = 0, 
  ppAlertButtonSNOOZE = 1, 
  ppAlertButtonSEARCH = 2, 
  ppAlertButtonIGNORE = 3, 
  ppAlertButtonABORT = 4, 
  ppAlertButtonRETRY = 5, 
  ppAlertButtonNEXT = 6, 
  ppAlertButtonBACK = 7, 
  ppAlertButtonNO = 8, 
  ppAlertButtonYES = 9, 
  ppAlertButtonCANCEL = 10, 
  ppAlertButtonOK = 11, 
  ppAlertButtonNULL = 12
} PpAlertButton;

typedef enum PpAlertIcon
{
  ppAlertIconQuestionMark = 0, 
  ppAlertIconNote = 1, 
  ppAlertIconCaution = 2, 
  ppAlertIconStop = 3
} PpAlertIcon;

typedef enum PpSlideShowPointerType
{
  ppSlideShowPointerNone = 0, 
  ppSlideShowPointerArrow = 1, 
  ppSlideShowPointerPen = 2, 
  ppSlideShowPointerAlwaysHidden = 3, 
  ppSlideShowPointerAutoArrow = 4
} PpSlideShowPointerType;

typedef enum PpSlideShowState
{
  ppSlideShowRunning = 1, 
  ppSlideShowPaused = 2, 
  ppSlideShowBlackScreen = 3, 
  ppSlideShowWhiteScreen = 4, 
  ppSlideShowDone = 5
} PpSlideShowState;

typedef enum PpSlideShowAdvanceMode
{
  ppSlideShowManualAdvance = 1, 
  ppSlideShowUseSlideTimings = 2, 
  ppSlideShowRehearseNewTimings = 3
} PpSlideShowAdvanceMode;

typedef enum PpFileDialogType
{
  ppFileDialogOpen = 1, 
  ppFileDialogSave = 2
} PpFileDialogType;

typedef enum PpFileDialogView
{
  ppFileDialogViewDetails = 1, 
  ppFileDialogViewPreview = 2, 
  ppFileDialogViewProperties = 3, 
  ppFileDialogViewList = 4
} PpFileDialogView;

typedef enum PpPrintOutputType
{
  ppPrintOutputSlides = 1, 
  ppPrintOutputTwoSlideHandouts = 2, 
  ppPrintOutputThreeSlideHandouts = 3, 
  ppPrintOutputSixSlideHandouts = 4, 
  ppPrintOutputNotesPages = 5, 
  ppPrintOutputOutline = 6, 
  ppPrintOutputBuildSlides = 7, 
  ppPrintOutputFourSlideHandouts = 8, 
  ppPrintOutputNineSlideHandouts = 9
} PpPrintOutputType;

typedef enum PpPrintHandoutOrder
{
  ppPrintHandoutVerticalFirst = 1, 
  ppPrintHandoutHorizontalFirst = 2
} PpPrintHandoutOrder;

typedef enum PpPrintColorType
{
  ppPrintColor = 1, 
  ppPrintBlackAndWhite = 2, 
  ppPrintPureBlackAndWhite = 3
} PpPrintColorType;

typedef enum PpSelectionType
{
  ppSelectionNone = 0, 
  ppSelectionSlides = 1, 
  ppSelectionShapes = 2, 
  ppSelectionText = 3
} PpSelectionType;

typedef enum PpDirection
{
  ppDirectionMixed = 0xFFFFFFFE, 
  ppDirectionLeftToRight = 1, 
  ppDirectionRightToLeft = 2
} PpDirection;

typedef enum PpDateTimeFormat
{
  ppDateTimeFormatMixed = 0xFFFFFFFE, 
  ppDateTimeMdyy = 1, 
  ppDateTimeddddMMMMddyyyy = 2, 
  ppDateTimedMMMMyyyy = 3, 
  ppDateTimeMMMMdyyyy = 4, 
  ppDateTimedMMMyy = 5, 
  ppDateTimeMMMMyy = 6, 
  ppDateTimeMMyy = 7, 
  ppDateTimeMMddyyHmm = 8, 
  ppDateTimeMMddyyhmmAMPM = 9, 
  ppDateTimeHmm = 10, 
  ppDateTimeHmmss = 11, 
  ppDateTimehmmAMPM = 12, 
  ppDateTimehmmssAMPM = 13
} PpDateTimeFormat;

typedef enum PpTransitionSpeed
{
  ppTransitionSpeedMixed = 0xFFFFFFFE, 
  ppTransitionSpeedSlow = 1, 
  ppTransitionSpeedMedium = 2, 
  ppTransitionSpeedFast = 3
} PpTransitionSpeed;

typedef enum PpMouseActivation
{
  ppMouseClick = 1, 
  ppMouseOver = 2
} PpMouseActivation;

typedef enum PpActionType
{
  ppActionMixed = 0xFFFFFFFE, 
  ppActionNone = 0, 
  ppActionNextSlide = 1, 
  ppActionPreviousSlide = 2, 
  ppActionFirstSlide = 3, 
  ppActionLastSlide = 4, 
  ppActionLastSlideViewed = 5, 
  ppActionEndShow = 6, 
  ppActionHyperlink = 7, 
  ppActionRunMacro = 8, 
  ppActionRunProgram = 9, 
  ppActionNamedSlideShow = 10, 
  ppActionOLEVerb = 11, 
  ppActionPlay = 12
} PpActionType;

typedef enum PpPlaceholderType
{
  ppPlaceholderMixed = 0xFFFFFFFE, 
  ppPlaceholderTitle = 1, 
  ppPlaceholderBody = 2, 
  ppPlaceholderCenterTitle = 3, 
  ppPlaceholderSubtitle = 4, 
  ppPlaceholderVerticalTitle = 5, 
  ppPlaceholderVerticalBody = 6, 
  ppPlaceholderObject = 7, 
  ppPlaceholderChart = 8, 
  ppPlaceholderBitmap = 9, 
  ppPlaceholderMediaClip = 10, 
  ppPlaceholderOrgChart = 11, 
  ppPlaceholderTable = 12, 
  ppPlaceholderSlideNumber = 13, 
  ppPlaceholderHeader = 14, 
  ppPlaceholderFooter = 15, 
  ppPlaceholderDate = 16
} PpPlaceholderType;

typedef enum PpSlideShowType
{
  ppShowTypeSpeaker = 1, 
  ppShowTypeWindow = 2, 
  ppShowTypeKiosk = 3
} PpSlideShowType;

typedef enum PpPrintRangeType
{
  ppPrintAll = 1, 
  ppPrintSelection = 2, 
  ppPrintCurrent = 3, 
  ppPrintSlideRange = 4, 
  ppPrintNamedSlideShow = 5
} PpPrintRangeType;

typedef enum PpAutoSize
{
  ppAutoSizeMixed = 0xFFFFFFFE, 
  ppAutoSizeNone = 0, 
  ppAutoSizeShapeToFitText = 1
} PpAutoSize;

typedef enum PpMediaType
{
  ppMediaTypeMixed = 0xFFFFFFFE, 
  ppMediaTypeOther = 1, 
  ppMediaTypeSound = 2, 
  ppMediaTypeMovie = 3
} PpMediaType;

typedef enum PpSoundFormatType
{
  ppSoundFormatMixed = 0xFFFFFFFE, 
  ppSoundFormatNone = 0, 
  ppSoundFormatWAV = 1, 
  ppSoundFormatMIDI = 2, 
  ppSoundFormatCDAudio = 3
} PpSoundFormatType;

typedef enum PpFarEastLineBreakLevel
{
  ppFarEastLineBreakLevelNormal = 1, 
  ppFarEastLineBreakLevelStrict = 2, 
  ppFarEastLineBreakLevelCustom = 3
} PpFarEastLineBreakLevel;

typedef enum PpSlideShowRangeType
{
  ppShowAll = 1, 
  ppShowSlideRange = 2, 
  ppShowNamedSlideShow = 3
} PpSlideShowRangeType;

typedef enum PpFrameColors
{
  ppFrameColorsBrowserColors = 1, 
  ppFrameColorsPresentationSchemeTextColor = 2, 
  ppFrameColorsPresentationSchemeAccentColor = 3, 
  ppFrameColorsWhiteTextOnBlack = 4, 
  ppFrameColorsBlackTextOnWhite = 5
} PpFrameColors;

typedef enum PpBorderType
{
  ppBorderTop = 1, 
  ppBorderLeft = 2, 
  ppBorderBottom = 3, 
  ppBorderRight = 4, 
  ppBorderDiagonalDown = 5, 
  ppBorderDiagonalUp = 6
} PpBorderType;

typedef enum PpHTMLVersion
{
  ppHTMLv3 = 1, 
  ppHTMLv4 = 2, 
  ppHTMLDual = 3
} PpHTMLVersion;

typedef enum PpPublishSourceType
{
  ppPublishAll = 1, 
  ppPublishSlideRange = 2, 
  ppPublishNamedSlideShow = 3
} PpPublishSourceType;

typedef enum PpBulletType
{
  ppBulletMixed = 0xFFFFFFFE, 
  ppBulletNone = 0, 
  ppBulletUnnumbered = 1, 
  ppBulletNumbered = 2, 
  ppBulletPicture = 3
} PpBulletType;

typedef enum PpNumberedBulletStyle
{
  ppBulletStyleMixed = 0xFFFFFFFE, 
  ppBulletAlphaLCPeriod = 0, 
  ppBulletAlphaUCPeriod = 1, 
  ppBulletArabicParenRight = 2, 
  ppBulletArabicPeriod = 3, 
  ppBulletRomanLCParenBoth = 4, 
  ppBulletRomanLCParenRight = 5, 
  ppBulletRomanLCPeriod = 6, 
  ppBulletRomanUCPeriod = 7, 
  ppBulletAlphaLCParenBoth = 8, 
  ppBulletAlphaLCParenRight = 9, 
  ppBulletAlphaUCParenBoth = 10, 
  ppBulletAlphaUCParenRight = 11, 
  ppBulletArabicParenBoth = 12, 
  ppBulletArabicPlain = 13, 
  ppBulletRomanUCParenBoth = 14, 
  ppBulletRomanUCParenRight = 15, 
  ppBulletSimpChinPlain = 16, 
  ppBulletSimpChinPeriod = 17, 
  ppBulletCircleNumDBPlain = 18, 
  ppBulletCircleNumWDWhitePlain = 19, 
  ppBulletCircleNumWDBlackPlain = 20, 
  ppBulletTradChinPlain = 21, 
  ppBulletTradChinPeriod = 22, 
  ppBulletArabicAlphaDash = 23, 
  ppBulletArabicAbjadDash = 24, 
  ppBulletHebrewAlphaDash = 25, 
  ppBulletKanjiKoreanPlain = 26, 
  ppBulletKanjiKoreanPeriod = 27, 
  ppBulletArabicDBPlain = 28, 
  ppBulletArabicDBPeriod = 29
} PpNumberedBulletStyle;

typedef enum PpMarkerType
{
  ppBoot = 0, 
  ppFileNew = 1, 
  ppFileOpen = 2, 
  ppFileSave = 3, 
  ppPrintForeground = 4, 
  ppPrintBackground = 5, 
  ppOLEInsert = 6, 
  ppSlideShowStart = 7, 
  ppSlideShowDraw = 8, 
  ppSlideViewScroll = 9, 
  ppDialogStart = 10
} PpMarkerType;

typedef enum PpShapeFormat
{
  ppShapeFormatGIF = 0, 
  ppShapeFormatJPG = 1, 
  ppShapeFormatPNG = 2, 
  ppShapeFormatBMP = 3, 
  ppShapeFormatWMF = 4
} PpShapeFormat;

typedef enum PpExportMode
{
  ppRelativeToSlide = 1, 
  ppClipRelativeToSlide = 2, 
  ppScaleToFit = 3, 
  ppScaleXY = 4
} PpExportMode;

// *********************************************************************//
// Interface: Collection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {91493450-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Collection  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE _Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [11]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN _NewEnum;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&_NewEnum));
    return _NewEnum;
  }

  TVariant __fastcall _Index(int index/*[in]*/)
  {
    TVariant _Index;
    OLECHECK(this->_Index(index, (TVariant*)&_Index));
    return _Index;
  }

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _Application
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493442-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface _Application  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Presentations(Powerpoint_2k::PresentationsPtr* Presentations/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Windoz(Powerpoint_2k::DocumentWindowsPtr* Windoz/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Dialogs(Powerpoint_2k::PPDialogsPtr* Dialogs/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_ActiveWindow(Powerpoint_2k::DocumentWindowPtr* ActiveWindow/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_ActivePresentation(Powerpoint_2k::PowerPointPresentationPtr* ActivePresentation/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_SlideShowWindows(Powerpoint_2k::SlideShowWindowsPtr* SlideShowWindows/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_CommandBars(Office_2k::CommandBarsPtr* CommandBars/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_Path(BSTR* Path/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Caption(BSTR* Caption/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE set_Caption(BSTR Caption/*[in]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_Assistant(Office_2k::AssistantPtr* Assistant/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE get_FileSearch(Office_2k::FileSearchPtr* FileSearch/*[out,retval]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE get_FileFind(Office_2k::IFindPtr* FileFind/*[out,retval]*/) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE get_Build(BSTR* Build/*[out,retval]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE get_Version(BSTR* Version/*[out,retval]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE get_OperatingSystem(BSTR* OperatingSystem/*[out,retval]*/) = 0; // [2015]
  virtual HRESULT STDMETHODCALLTYPE get_ActivePrinter(BSTR* ActivePrinter/*[out,retval]*/) = 0; // [2016]
  virtual HRESULT STDMETHODCALLTYPE get_Creator(long* Creator/*[out,retval]*/) = 0; // [2017]
  virtual HRESULT STDMETHODCALLTYPE get_AddIns(Powerpoint_2k::AddInsPtr* AddIns/*[out,retval]*/) = 0; // [2018]
  virtual HRESULT STDMETHODCALLTYPE get_VBE(Vbide_2k::VBEPtr* VBE/*[out,retval]*/) = 0; // [2019]
  virtual HRESULT STDMETHODCALLTYPE Help(BSTR HelpFile/*[in,def,opt]*/, 
                                         int ContextID/*[in,def,opt]*/) = 0; // [2020]
  virtual HRESULT STDMETHODCALLTYPE Quit(void) = 0; // [2021]
  virtual HRESULT STDMETHODCALLTYPE Run(BSTR MacroName/*[in]*/, 
                                        LPSAFEARRAY* safeArrayOfParams/*[in]*/, 
                                        TVariant* Run/*[out,retval]*/) = 0; // [2022]
  virtual HRESULT STDMETHODCALLTYPE FileDialog(Powerpoint_2k::PpFileDialogType Type/*[in]*/, 
                                               Powerpoint_2k::FileDialogPtr* FileDialog/*[out,retval]*/) = 0; // [2023]
  virtual HRESULT STDMETHODCALLTYPE LaunchSpelling(Powerpoint_2k::DocumentWindowPtr pWindow/*[in]*/) = 0; // [2024]
  virtual HRESULT STDMETHODCALLTYPE get_Left(float* Left/*[out,retval]*/) = 0; // [2025]
  virtual HRESULT STDMETHODCALLTYPE set_Left(float Left/*[in]*/) = 0; // [2025]
  virtual HRESULT STDMETHODCALLTYPE get_Top(float* Top/*[out,retval]*/) = 0; // [2026]
  virtual HRESULT STDMETHODCALLTYPE set_Top(float Top/*[in]*/) = 0; // [2026]
  virtual HRESULT STDMETHODCALLTYPE get_Width(float* Width/*[out,retval]*/) = 0; // [2027]
  virtual HRESULT STDMETHODCALLTYPE set_Width(float Width/*[in]*/) = 0; // [2027]
  virtual HRESULT STDMETHODCALLTYPE get_Height(float* Height/*[out,retval]*/) = 0; // [2028]
  virtual HRESULT STDMETHODCALLTYPE set_Height(float Height/*[in]*/) = 0; // [2028]
  virtual HRESULT STDMETHODCALLTYPE get_WindowState(Powerpoint_2k::PpWindowState* WindowState/*[out,retval]*/) = 0; // [2029]
  virtual HRESULT STDMETHODCALLTYPE set_WindowState(Powerpoint_2k::PpWindowState WindowState/*[in]*/) = 0; // [2029]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/) = 0; // [2030]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(Office_2k::MsoTriState Visible/*[in]*/) = 0; // [2030]
  virtual HRESULT STDMETHODCALLTYPE get_HWND(long* HWND/*[out,retval]*/) = 0; // [2031]
  virtual HRESULT STDMETHODCALLTYPE get_Active(Office_2k::MsoTriState* Active/*[out,retval]*/) = 0; // [2032]
  virtual HRESULT STDMETHODCALLTYPE Activate(void) = 0; // [2033]
  virtual HRESULT STDMETHODCALLTYPE get_AnswerWizard(Office_2k::AnswerWizardPtr* AnswerWizard/*[out,retval]*/) = 0; // [2034]
  virtual HRESULT STDMETHODCALLTYPE get_COMAddIns(Office_2k::COMAddInsPtr* COMAddIns/*[out,retval]*/) = 0; // [2035]
  virtual HRESULT STDMETHODCALLTYPE get_ProductCode(BSTR* ProductCode/*[out,retval]*/) = 0; // [2036]
  virtual HRESULT STDMETHODCALLTYPE get_DefaultWebOptions(Powerpoint_2k::DefaultWebOptionsPtr* DefaultWebOptions/*[out,retval]*/) = 0; // [2037]
  virtual HRESULT STDMETHODCALLTYPE get_LanguageSettings(Office_2k::LanguageSettingsPtr* LanguageSettings/*[out,retval]*/) = 0; // [2038]
  virtual HRESULT STDMETHODCALLTYPE get_MsoDebugOptions(Office_2k::MsoDebugOptionsPtr* MsoDebugOptions/*[out,retval]*/) = 0; // [2039]
  virtual HRESULT STDMETHODCALLTYPE get_ShowWindowsInTaskbar(Office_2k::MsoTriState* ShowWindowsInTaskbar/*[out,retval]*/) = 0; // [2040]
  virtual HRESULT STDMETHODCALLTYPE set_ShowWindowsInTaskbar(Office_2k::MsoTriState ShowWindowsInTaskbar/*[in]*/) = 0; // [2040]
  virtual HRESULT STDMETHODCALLTYPE get_Marker(Powerpoint_2k::MarkerPtr* Marker/*[out,retval]*/) = 0; // [2041]
  virtual HRESULT STDMETHODCALLTYPE get_FeatureInstall(Office_2k::MsoFeatureInstall* FeatureInstall/*[out,retval]*/) = 0; // [2042]
  virtual HRESULT STDMETHODCALLTYPE set_FeatureInstall(Office_2k::MsoFeatureInstall FeatureInstall/*[in]*/) = 0; // [2042]
  virtual HRESULT STDMETHODCALLTYPE GetOptionFlag(long Option/*[in]*/, 
                                                  TOLEBOOL Persist/*[in,def,opt]*/, 
                                                  TOLEBOOL* GetOptionFlag/*[out,retval]*/) = 0; // [2043]
  virtual HRESULT STDMETHODCALLTYPE SetOptionFlag(long Option/*[in]*/, TOLEBOOL State/*[in]*/, 
                                                  TOLEBOOL Persist/*[in,def,opt]*/) = 0; // [2044]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PresentationsPtr __fastcall get_Presentations(void)
  {
    Powerpoint_2k::PresentationsPtr Presentations;
    OLECHECK(this->get_Presentations((Powerpoint_2k::PresentationsPtr*)&Presentations));
    return Presentations;
  }

  Powerpoint_2k::DocumentWindowsPtr __fastcall get_Windoz(void)
  {
    Powerpoint_2k::DocumentWindowsPtr Windoz;
    OLECHECK(this->get_Windoz((Powerpoint_2k::DocumentWindowsPtr*)&Windoz));
    return Windoz;
  }

  Powerpoint_2k::PPDialogsPtr __fastcall get_Dialogs(void)
  {
    Powerpoint_2k::PPDialogsPtr Dialogs;
    OLECHECK(this->get_Dialogs((Powerpoint_2k::PPDialogsPtr*)&Dialogs));
    return Dialogs;
  }

  Powerpoint_2k::DocumentWindowPtr __fastcall get_ActiveWindow(void)
  {
    Powerpoint_2k::DocumentWindowPtr ActiveWindow;
    OLECHECK(this->get_ActiveWindow((Powerpoint_2k::DocumentWindowPtr*)&ActiveWindow));
    return ActiveWindow;
  }

  Powerpoint_2k::PowerPointPresentationPtr __fastcall get_ActivePresentation(void)
  {
    Powerpoint_2k::PowerPointPresentationPtr ActivePresentation;
    OLECHECK(this->get_ActivePresentation((Powerpoint_2k::PowerPointPresentationPtr*)&ActivePresentation));
    return ActivePresentation;
  }

  Powerpoint_2k::SlideShowWindowsPtr __fastcall get_SlideShowWindows(void)
  {
    Powerpoint_2k::SlideShowWindowsPtr SlideShowWindows;
    OLECHECK(this->get_SlideShowWindows((Powerpoint_2k::SlideShowWindowsPtr*)&SlideShowWindows));
    return SlideShowWindows;
  }

  Office_2k::CommandBarsPtr __fastcall get_CommandBars(void)
  {
    Office_2k::CommandBarsPtr CommandBars;
    OLECHECK(this->get_CommandBars((Office_2k::CommandBarsPtr*)&CommandBars));
    return CommandBars;
  }

  BSTR __fastcall get_Path(void)
  {
    BSTR Path = 0;
    OLECHECK(this->get_Path((BSTR*)&Path));
    return Path;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  BSTR __fastcall get_Caption(void)
  {
    BSTR Caption = 0;
    OLECHECK(this->get_Caption((BSTR*)&Caption));
    return Caption;
  }

  Office_2k::AssistantPtr __fastcall get_Assistant(void)
  {
    Office_2k::AssistantPtr Assistant;
    OLECHECK(this->get_Assistant((Office_2k::AssistantPtr*)&Assistant));
    return Assistant;
  }

  Office_2k::FileSearchPtr __fastcall get_FileSearch(void)
  {
    Office_2k::FileSearchPtr FileSearch;
    OLECHECK(this->get_FileSearch((Office_2k::FileSearchPtr*)&FileSearch));
    return FileSearch;
  }

  Office_2k::IFindPtr __fastcall get_FileFind(void)
  {
    Office_2k::IFindPtr FileFind;
    OLECHECK(this->get_FileFind((Office_2k::IFindPtr*)&FileFind));
    return FileFind;
  }

  BSTR __fastcall get_Build(void)
  {
    BSTR Build = 0;
    OLECHECK(this->get_Build((BSTR*)&Build));
    return Build;
  }

  BSTR __fastcall get_Version(void)
  {
    BSTR Version = 0;
    OLECHECK(this->get_Version((BSTR*)&Version));
    return Version;
  }

  BSTR __fastcall get_OperatingSystem(void)
  {
    BSTR OperatingSystem = 0;
    OLECHECK(this->get_OperatingSystem((BSTR*)&OperatingSystem));
    return OperatingSystem;
  }

  BSTR __fastcall get_ActivePrinter(void)
  {
    BSTR ActivePrinter = 0;
    OLECHECK(this->get_ActivePrinter((BSTR*)&ActivePrinter));
    return ActivePrinter;
  }

  long __fastcall get_Creator(void)
  {
    long Creator;
    OLECHECK(this->get_Creator((long*)&Creator));
    return Creator;
  }

  Powerpoint_2k::AddInsPtr __fastcall get_AddIns(void)
  {
    Powerpoint_2k::AddInsPtr AddIns;
    OLECHECK(this->get_AddIns((Powerpoint_2k::AddInsPtr*)&AddIns));
    return AddIns;
  }

  Vbide_2k::VBEPtr __fastcall get_VBE(void)
  {
    Vbide_2k::VBEPtr VBE;
    OLECHECK(this->get_VBE((Vbide_2k::VBEPtr*)&VBE));
    return VBE;
  }

  TVariant __fastcall Run(BSTR MacroName/*[in]*/, LPSAFEARRAY* safeArrayOfParams/*[in]*/)
  {
    TVariant Run;
    OLECHECK(this->Run(MacroName, safeArrayOfParams, (TVariant*)&Run));
    return Run;
  }

  Powerpoint_2k::FileDialogPtr __fastcall FileDialog(Powerpoint_2k::PpFileDialogType Type/*[in]*/)
  {
    Powerpoint_2k::FileDialogPtr FileDialog;
    OLECHECK(this->FileDialog(Type, (Powerpoint_2k::FileDialogPtr*)&FileDialog));
    return FileDialog;
  }

  float __fastcall get_Left(void)
  {
    float Left;
    OLECHECK(this->get_Left((float*)&Left));
    return Left;
  }

  float __fastcall get_Top(void)
  {
    float Top;
    OLECHECK(this->get_Top((float*)&Top));
    return Top;
  }

  float __fastcall get_Width(void)
  {
    float Width;
    OLECHECK(this->get_Width((float*)&Width));
    return Width;
  }

  float __fastcall get_Height(void)
  {
    float Height;
    OLECHECK(this->get_Height((float*)&Height));
    return Height;
  }

  Powerpoint_2k::PpWindowState __fastcall get_WindowState(void)
  {
    Powerpoint_2k::PpWindowState WindowState;
    OLECHECK(this->get_WindowState((Powerpoint_2k::PpWindowState*)&WindowState));
    return WindowState;
  }

  Office_2k::MsoTriState __fastcall get_Visible(void)
  {
    Office_2k::MsoTriState Visible;
    OLECHECK(this->get_Visible((Office_2k::MsoTriState*)&Visible));
    return Visible;
  }

  long __fastcall get_HWND(void)
  {
    long HWND;
    OLECHECK(this->get_HWND((long*)&HWND));
    return HWND;
  }

  Office_2k::MsoTriState __fastcall get_Active(void)
  {
    Office_2k::MsoTriState Active;
    OLECHECK(this->get_Active((Office_2k::MsoTriState*)&Active));
    return Active;
  }

  Office_2k::AnswerWizardPtr __fastcall get_AnswerWizard(void)
  {
    Office_2k::AnswerWizardPtr AnswerWizard;
    OLECHECK(this->get_AnswerWizard((Office_2k::AnswerWizardPtr*)&AnswerWizard));
    return AnswerWizard;
  }

  Office_2k::COMAddInsPtr __fastcall get_COMAddIns(void)
  {
    Office_2k::COMAddInsPtr COMAddIns;
    OLECHECK(this->get_COMAddIns((Office_2k::COMAddInsPtr*)&COMAddIns));
    return COMAddIns;
  }

  BSTR __fastcall get_ProductCode(void)
  {
    BSTR ProductCode = 0;
    OLECHECK(this->get_ProductCode((BSTR*)&ProductCode));
    return ProductCode;
  }

  Powerpoint_2k::DefaultWebOptionsPtr __fastcall get_DefaultWebOptions(void)
  {
    Powerpoint_2k::DefaultWebOptionsPtr DefaultWebOptions;
    OLECHECK(this->get_DefaultWebOptions((Powerpoint_2k::DefaultWebOptionsPtr*)&DefaultWebOptions));
    return DefaultWebOptions;
  }

  Office_2k::LanguageSettingsPtr __fastcall get_LanguageSettings(void)
  {
    Office_2k::LanguageSettingsPtr LanguageSettings;
    OLECHECK(this->get_LanguageSettings((Office_2k::LanguageSettingsPtr*)&LanguageSettings));
    return LanguageSettings;
  }

  Office_2k::MsoDebugOptionsPtr __fastcall get_MsoDebugOptions(void)
  {
    Office_2k::MsoDebugOptionsPtr MsoDebugOptions;
    OLECHECK(this->get_MsoDebugOptions((Office_2k::MsoDebugOptionsPtr*)&MsoDebugOptions));
    return MsoDebugOptions;
  }

  Office_2k::MsoTriState __fastcall get_ShowWindowsInTaskbar(void)
  {
    Office_2k::MsoTriState ShowWindowsInTaskbar;
    OLECHECK(this->get_ShowWindowsInTaskbar((Office_2k::MsoTriState*)&ShowWindowsInTaskbar));
    return ShowWindowsInTaskbar;
  }

  Powerpoint_2k::MarkerPtr __fastcall get_Marker(void)
  {
    Powerpoint_2k::MarkerPtr Marker;
    OLECHECK(this->get_Marker((Powerpoint_2k::MarkerPtr*)&Marker));
    return Marker;
  }

  Office_2k::MsoFeatureInstall __fastcall get_FeatureInstall(void)
  {
    Office_2k::MsoFeatureInstall FeatureInstall;
    OLECHECK(this->get_FeatureInstall((Office_2k::MsoFeatureInstall*)&FeatureInstall));
    return FeatureInstall;
  }

  TOLEBOOL __fastcall GetOptionFlag(long Option/*[in]*/, TOLEBOOL Persist/*[in,def,opt]*/)
  {
    TOLEBOOL GetOptionFlag;
    OLECHECK(this->GetOptionFlag(Option, Persist, (TOLEBOOL*)&GetOptionFlag));
    return GetOptionFlag;
  }


  __property   Powerpoint_2k::PresentationsPtr Presentations = {read = get_Presentations};
  __property   Powerpoint_2k::DocumentWindowsPtr Windoz = {read = get_Windoz};
  __property   Powerpoint_2k::PPDialogsPtr Dialogs = {read = get_Dialogs};
  __property   Powerpoint_2k::DocumentWindowPtr ActiveWindow = {read = get_ActiveWindow};
  __property   Powerpoint_2k::PowerPointPresentationPtr ActivePresentation = {read = get_ActivePresentation};
  __property   Powerpoint_2k::SlideShowWindowsPtr SlideShowWindows = {read = get_SlideShowWindows};
  __property   Office_2k::CommandBarsPtr CommandBars = {read = get_CommandBars};
  __property   BSTR            Path = {read = get_Path};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   Office_2k::AssistantPtr Assistant = {read = get_Assistant};
  __property   Office_2k::FileSearchPtr FileSearch = {read = get_FileSearch};
  __property   Office_2k::IFindPtr FileFind = {read = get_FileFind};
  __property   BSTR            Build = {read = get_Build};
  __property   BSTR            Version = {read = get_Version};
  __property   BSTR            OperatingSystem = {read = get_OperatingSystem};
  __property   BSTR            ActivePrinter = {read = get_ActivePrinter};
  __property   long            Creator = {read = get_Creator};
  __property   Powerpoint_2k::AddInsPtr AddIns = {read = get_AddIns};
  __property   Vbide_2k::VBEPtr VBE = {read = get_VBE};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   Powerpoint_2k::PpWindowState WindowState = {read = get_WindowState, write = set_WindowState};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   long            HWND = {read = get_HWND};
  __property   Office_2k::MsoTriState Active = {read = get_Active};
  __property   Office_2k::AnswerWizardPtr AnswerWizard = {read = get_AnswerWizard};
  __property   Office_2k::COMAddInsPtr COMAddIns = {read = get_COMAddIns};
  __property   BSTR            ProductCode = {read = get_ProductCode};
  __property   Powerpoint_2k::DefaultWebOptionsPtr DefaultWebOptions = {read = get_DefaultWebOptions};
  __property   Office_2k::LanguageSettingsPtr LanguageSettings = {read = get_LanguageSettings};
  __property   Office_2k::MsoDebugOptionsPtr MsoDebugOptions = {read = get_MsoDebugOptions};
  __property   Office_2k::MsoTriState ShowWindowsInTaskbar = {read = get_ShowWindowsInTaskbar, write = set_ShowWindowsInTaskbar};
  __property   Powerpoint_2k::MarkerPtr Marker = {read = get_Marker};
  __property   Office_2k::MsoFeatureInstall FeatureInstall = {read = get_FeatureInstall, write = set_FeatureInstall};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _Global
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493451-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface _Global  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_ActivePresentation(Powerpoint_2k::PowerPointPresentationPtr* ActivePresentation/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_ActiveWindow(Powerpoint_2k::DocumentWindowPtr* ActiveWindow/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_AddIns(Powerpoint_2k::AddInsPtr* AddIns/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_Assistant(Office_2k::AssistantPtr* Assistant/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Dialogs(Powerpoint_2k::PPDialogsPtr* Dialogs/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_Presentations(Powerpoint_2k::PresentationsPtr* Presentations/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_SlideShowWindows(Powerpoint_2k::SlideShowWindowsPtr* SlideShowWindows/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_Windoz(Powerpoint_2k::DocumentWindowsPtr* Windoz/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_CommandBars(Office_2k::CommandBarsPtr* CommandBars/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE get_AnswerWizard(Office_2k::AnswerWizardPtr* AnswerWizard/*[out,retval]*/) = 0; // [2011]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointPresentationPtr __fastcall get_ActivePresentation(void)
  {
    Powerpoint_2k::PowerPointPresentationPtr ActivePresentation;
    OLECHECK(this->get_ActivePresentation((Powerpoint_2k::PowerPointPresentationPtr*)&ActivePresentation));
    return ActivePresentation;
  }

  Powerpoint_2k::DocumentWindowPtr __fastcall get_ActiveWindow(void)
  {
    Powerpoint_2k::DocumentWindowPtr ActiveWindow;
    OLECHECK(this->get_ActiveWindow((Powerpoint_2k::DocumentWindowPtr*)&ActiveWindow));
    return ActiveWindow;
  }

  Powerpoint_2k::AddInsPtr __fastcall get_AddIns(void)
  {
    Powerpoint_2k::AddInsPtr AddIns;
    OLECHECK(this->get_AddIns((Powerpoint_2k::AddInsPtr*)&AddIns));
    return AddIns;
  }

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  Office_2k::AssistantPtr __fastcall get_Assistant(void)
  {
    Office_2k::AssistantPtr Assistant;
    OLECHECK(this->get_Assistant((Office_2k::AssistantPtr*)&Assistant));
    return Assistant;
  }

  Powerpoint_2k::PPDialogsPtr __fastcall get_Dialogs(void)
  {
    Powerpoint_2k::PPDialogsPtr Dialogs;
    OLECHECK(this->get_Dialogs((Powerpoint_2k::PPDialogsPtr*)&Dialogs));
    return Dialogs;
  }

  Powerpoint_2k::PresentationsPtr __fastcall get_Presentations(void)
  {
    Powerpoint_2k::PresentationsPtr Presentations;
    OLECHECK(this->get_Presentations((Powerpoint_2k::PresentationsPtr*)&Presentations));
    return Presentations;
  }

  Powerpoint_2k::SlideShowWindowsPtr __fastcall get_SlideShowWindows(void)
  {
    Powerpoint_2k::SlideShowWindowsPtr SlideShowWindows;
    OLECHECK(this->get_SlideShowWindows((Powerpoint_2k::SlideShowWindowsPtr*)&SlideShowWindows));
    return SlideShowWindows;
  }

  Powerpoint_2k::DocumentWindowsPtr __fastcall get_Windoz(void)
  {
    Powerpoint_2k::DocumentWindowsPtr Windoz;
    OLECHECK(this->get_Windoz((Powerpoint_2k::DocumentWindowsPtr*)&Windoz));
    return Windoz;
  }

  Office_2k::CommandBarsPtr __fastcall get_CommandBars(void)
  {
    Office_2k::CommandBarsPtr CommandBars;
    OLECHECK(this->get_CommandBars((Office_2k::CommandBarsPtr*)&CommandBars));
    return CommandBars;
  }

  Office_2k::AnswerWizardPtr __fastcall get_AnswerWizard(void)
  {
    Office_2k::AnswerWizardPtr AnswerWizard;
    OLECHECK(this->get_AnswerWizard((Office_2k::AnswerWizardPtr*)&AnswerWizard));
    return AnswerWizard;
  }


  __property   Powerpoint_2k::PowerPointPresentationPtr ActivePresentation = {read = get_ActivePresentation};
  __property   Powerpoint_2k::DocumentWindowPtr ActiveWindow = {read = get_ActiveWindow};
  __property   Powerpoint_2k::AddInsPtr AddIns = {read = get_AddIns};
  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   Office_2k::AssistantPtr Assistant = {read = get_Assistant};
  __property   Powerpoint_2k::PPDialogsPtr Dialogs = {read = get_Dialogs};
  __property   Powerpoint_2k::PresentationsPtr Presentations = {read = get_Presentations};
  __property   Powerpoint_2k::SlideShowWindowsPtr SlideShowWindows = {read = get_SlideShowWindows};
  __property   Powerpoint_2k::DocumentWindowsPtr Windoz = {read = get_Windoz};
  __property   Office_2k::CommandBarsPtr CommandBars = {read = get_CommandBars};
  __property   Office_2k::AnswerWizardPtr AnswerWizard = {read = get_AnswerWizard};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: EApplication
// Flags:     (4096) Dispatchable
// GUID:      {914934C2-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface EApplication  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE WindowSelectionChange(Powerpoint_2k::SelectionPtr Sel/*[in]*/); // [2001]
   HRESULT STDMETHODCALLTYPE WindowBeforeRightClick(Powerpoint_2k::SelectionPtr Sel/*[in]*/, 
                                                    TOLEBOOL* Cancel/*[in,out]*/); // [2002]
   HRESULT STDMETHODCALLTYPE WindowBeforeDoubleClick(Powerpoint_2k::SelectionPtr Sel/*[in]*/, 
                                                     TOLEBOOL* Cancel/*[in,out]*/); // [2003]
   HRESULT STDMETHODCALLTYPE PresentationClose(Powerpoint_2k::PowerPointPresentationPtr Pres/*[in]*/); // [2004]
   HRESULT STDMETHODCALLTYPE PresentationSave(Powerpoint_2k::PowerPointPresentationPtr Pres/*[in]*/); // [2005]
   HRESULT STDMETHODCALLTYPE PresentationOpen(Powerpoint_2k::PowerPointPresentationPtr Pres/*[in]*/); // [2006]
   HRESULT STDMETHODCALLTYPE NewPresentation(Powerpoint_2k::PowerPointPresentationPtr Pres/*[in]*/); // [2007]
   HRESULT STDMETHODCALLTYPE PresentationNewSlide(Powerpoint_2k::PowerPointSlidePtr Sld/*[in]*/); // [2008]
   HRESULT STDMETHODCALLTYPE WindowActivate(Powerpoint_2k::PowerPointPresentationPtr Pres/*[in]*/, 
                                            Powerpoint_2k::DocumentWindowPtr Wn/*[in]*/); // [2009]
   HRESULT STDMETHODCALLTYPE WindowDeactivate(Powerpoint_2k::PowerPointPresentationPtr Pres/*[in]*/, 
                                              Powerpoint_2k::DocumentWindowPtr Wn/*[in]*/); // [2010]
   HRESULT STDMETHODCALLTYPE SlideShowBegin(Powerpoint_2k::SlideShowWindowPtr Wn/*[in]*/); // [2011]
   HRESULT STDMETHODCALLTYPE SlideShowNextBuild(Powerpoint_2k::SlideShowWindowPtr Wn/*[in]*/); // [2012]
   HRESULT STDMETHODCALLTYPE SlideShowNextSlide(Powerpoint_2k::SlideShowWindowPtr Wn/*[in]*/); // [2013]
   HRESULT STDMETHODCALLTYPE SlideShowEnd(Powerpoint_2k::PowerPointPresentationPtr Pres/*[in]*/); // [2014]
   HRESULT STDMETHODCALLTYPE PresentationPrint(Powerpoint_2k::PowerPointPresentationPtr Pres/*[in]*/); // [2015]
};

// *********************************************************************//
// Interface: ColorFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493452-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface ColorFormat  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Creator(long* plCreator/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_rgb(Office_2k::MsoRGBType* rgb/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_rgb(Office_2k::MsoRGBType rgb/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Office_2k::MsoColorType* Type/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_SchemeColor(Powerpoint_2k::PpColorSchemeIndex* SchemeColor/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_SchemeColor(Powerpoint_2k::PpColorSchemeIndex SchemeColor/*[in]*/) = 0; // [2003]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Application(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Application((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  long __fastcall get_Creator(void)
  {
    long plCreator;
    OLECHECK(this->get_Creator((long*)&plCreator));
    return plCreator;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Office_2k::MsoRGBType __fastcall get_rgb(void)
  {
    Office_2k::MsoRGBType rgb;
    OLECHECK(this->get_rgb((Office_2k::MsoRGBType*)&rgb));
    return rgb;
  }

  Office_2k::MsoColorType __fastcall get_Type(void)
  {
    Office_2k::MsoColorType Type;
    OLECHECK(this->get_Type((Office_2k::MsoColorType*)&Type));
    return Type;
  }

  Powerpoint_2k::PpColorSchemeIndex __fastcall get_SchemeColor(void)
  {
    Powerpoint_2k::PpColorSchemeIndex SchemeColor;
    OLECHECK(this->get_SchemeColor((Powerpoint_2k::PpColorSchemeIndex*)&SchemeColor));
    return SchemeColor;
  }


  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoRGBType rgb = {read = get_rgb, write = set_rgb};
  __property   Office_2k::MsoColorType Type = {read = get_Type};
  __property   Powerpoint_2k::PpColorSchemeIndex SchemeColor = {read = get_SchemeColor, write = set_SchemeColor};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: SlideShowWindow
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493453-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface SlideShowWindow  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_View(Powerpoint_2k::SlideShowViewPtr* View/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_Presentation(Powerpoint_2k::PowerPointPresentationPtr* Presentation/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_IsFullScreen(Office_2k::MsoTriState* IsFullScreen/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Left(float* Left/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_Left(float Left/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_Top(float* Top/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE set_Top(float Top/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_Width(float* Width/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE set_Width(float Width/*[in]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_Height(float* Height/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE set_Height(float Height/*[in]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_HWND(long* HWND/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE get_Active(Office_2k::MsoTriState* Active/*[out,retval]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE Activate(void) = 0; // [2012]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::SlideShowViewPtr __fastcall get_View(void)
  {
    Powerpoint_2k::SlideShowViewPtr View;
    OLECHECK(this->get_View((Powerpoint_2k::SlideShowViewPtr*)&View));
    return View;
  }

  Powerpoint_2k::PowerPointPresentationPtr __fastcall get_Presentation(void)
  {
    Powerpoint_2k::PowerPointPresentationPtr Presentation;
    OLECHECK(this->get_Presentation((Powerpoint_2k::PowerPointPresentationPtr*)&Presentation));
    return Presentation;
  }

  Office_2k::MsoTriState __fastcall get_IsFullScreen(void)
  {
    Office_2k::MsoTriState IsFullScreen;
    OLECHECK(this->get_IsFullScreen((Office_2k::MsoTriState*)&IsFullScreen));
    return IsFullScreen;
  }

  float __fastcall get_Left(void)
  {
    float Left;
    OLECHECK(this->get_Left((float*)&Left));
    return Left;
  }

  float __fastcall get_Top(void)
  {
    float Top;
    OLECHECK(this->get_Top((float*)&Top));
    return Top;
  }

  float __fastcall get_Width(void)
  {
    float Width;
    OLECHECK(this->get_Width((float*)&Width));
    return Width;
  }

  float __fastcall get_Height(void)
  {
    float Height;
    OLECHECK(this->get_Height((float*)&Height));
    return Height;
  }

  long __fastcall get_HWND(void)
  {
    long HWND;
    OLECHECK(this->get_HWND((long*)&HWND));
    return HWND;
  }

  Office_2k::MsoTriState __fastcall get_Active(void)
  {
    Office_2k::MsoTriState Active;
    OLECHECK(this->get_Active((Office_2k::MsoTriState*)&Active));
    return Active;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::SlideShowViewPtr View = {read = get_View};
  __property   Powerpoint_2k::PowerPointPresentationPtr Presentation = {read = get_Presentation};
  __property   Office_2k::MsoTriState IsFullScreen = {read = get_IsFullScreen};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   long            HWND = {read = get_HWND};
  __property   Office_2k::MsoTriState Active = {read = get_Active};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Selection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493454-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Selection  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Cut(void) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE Copy(void) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE Unselect(void) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Powerpoint_2k::PpSelectionType* Type/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_SlideRange(Powerpoint_2k::SlideRangePtr* SlideRange/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_ShapeRange(Powerpoint_2k::ShapeRangePtr* ShapeRange/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_TextRange(Powerpoint_2k::TextRangePtr* TextRange/*[out,retval]*/) = 0; // [2010]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::PpSelectionType __fastcall get_Type(void)
  {
    Powerpoint_2k::PpSelectionType Type;
    OLECHECK(this->get_Type((Powerpoint_2k::PpSelectionType*)&Type));
    return Type;
  }

  Powerpoint_2k::SlideRangePtr __fastcall get_SlideRange(void)
  {
    Powerpoint_2k::SlideRangePtr SlideRange;
    OLECHECK(this->get_SlideRange((Powerpoint_2k::SlideRangePtr*)&SlideRange));
    return SlideRange;
  }

  Powerpoint_2k::ShapeRangePtr __fastcall get_ShapeRange(void)
  {
    Powerpoint_2k::ShapeRangePtr ShapeRange;
    OLECHECK(this->get_ShapeRange((Powerpoint_2k::ShapeRangePtr*)&ShapeRange));
    return ShapeRange;
  }

  Powerpoint_2k::TextRangePtr __fastcall get_TextRange(void)
  {
    Powerpoint_2k::TextRangePtr TextRange;
    OLECHECK(this->get_TextRange((Powerpoint_2k::TextRangePtr*)&TextRange));
    return TextRange;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::PpSelectionType Type = {read = get_Type};
  __property   Powerpoint_2k::SlideRangePtr SlideRange = {read = get_SlideRange};
  __property   Powerpoint_2k::ShapeRangePtr ShapeRange = {read = get_ShapeRange};
  __property   Powerpoint_2k::TextRangePtr TextRange = {read = get_TextRange};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: DocumentWindows
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493455-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface DocumentWindows  : public Powerpoint_2k::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(int index/*[in]*/, 
                                         Powerpoint_2k::DocumentWindowPtr* Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Arrange(Powerpoint_2k::PpArrangeStyle arrangeStyle/*[in,def,opt]*/) = 0; // [2003]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::DocumentWindowPtr __fastcall Item(int index/*[in]*/)
  {
    Powerpoint_2k::DocumentWindowPtr Item;
    OLECHECK(this->Item(index, (Powerpoint_2k::DocumentWindowPtr*)&Item));
    return Item;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: SlideShowWindows
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493456-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface SlideShowWindows  : public Powerpoint_2k::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(int index/*[in]*/, 
                                         Powerpoint_2k::SlideShowWindowPtr* Item/*[out,retval]*/) = 0; // [0]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::SlideShowWindowPtr __fastcall Item(int index/*[in]*/)
  {
    Powerpoint_2k::SlideShowWindowPtr Item;
    OLECHECK(this->Item(index, (Powerpoint_2k::SlideShowWindowPtr*)&Item));
    return Item;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: DocumentWindow
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493457-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface DocumentWindow  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Selection(Powerpoint_2k::SelectionPtr* Selection/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_View(Powerpoint_2k::ViewPtr* View/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_Presentation(Powerpoint_2k::PowerPointPresentationPtr* Presentation/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_ViewType(Powerpoint_2k::PpViewType* ViewType/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_ViewType(Powerpoint_2k::PpViewType ViewType/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_BlackAndWhite(Office_2k::MsoTriState* BlackAndWhite/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE set_BlackAndWhite(Office_2k::MsoTriState BlackAndWhite/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_Active(Office_2k::MsoTriState* Active/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_WindowState(Powerpoint_2k::PpWindowState* WindowState/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE set_WindowState(Powerpoint_2k::PpWindowState WindowState/*[in]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_Caption(BSTR* Caption/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Left(float* Left/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE set_Left(float Left/*[in]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE get_Top(float* Top/*[out,retval]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE set_Top(float Top/*[in]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE get_Width(float* Width/*[out,retval]*/) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE set_Width(float Width/*[in]*/) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE get_Height(float* Height/*[out,retval]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE set_Height(float Height/*[in]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE FitToPage(void) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE Activate(void) = 0; // [2015]
  virtual HRESULT STDMETHODCALLTYPE LargeScroll(int Down/*[in,def,opt]*/, int Up/*[in,def,opt]*/, 
                                                int ToRight/*[in,def,opt]*/, 
                                                int ToLeft/*[in,def,opt]*/) = 0; // [2016]
  virtual HRESULT STDMETHODCALLTYPE SmallScroll(int Down/*[in,def,opt]*/, int Up/*[in,def,opt]*/, 
                                                int ToRight/*[in,def,opt]*/, 
                                                int ToLeft/*[in,def,opt]*/) = 0; // [2017]
  virtual HRESULT STDMETHODCALLTYPE NewWindow(Powerpoint_2k::DocumentWindowPtr* NewWindow/*[out,retval]*/) = 0; // [2018]
  virtual HRESULT STDMETHODCALLTYPE Close(void) = 0; // [2019]
  virtual HRESULT STDMETHODCALLTYPE get_HWND(long* HWND/*[out,retval]*/) = 0; // [2020]
  virtual HRESULT STDMETHODCALLTYPE get_ActivePane(Powerpoint_2k::PanePtr* ActivePane/*[out,retval]*/) = 0; // [2021]
  virtual HRESULT STDMETHODCALLTYPE get_Panes(Powerpoint_2k::PanesPtr* Panes/*[out,retval]*/) = 0; // [2022]
  virtual HRESULT STDMETHODCALLTYPE get_SplitVertical(long* SplitVertical/*[out,retval]*/) = 0; // [2023]
  virtual HRESULT STDMETHODCALLTYPE set_SplitVertical(long SplitVertical/*[in]*/) = 0; // [2023]
  virtual HRESULT STDMETHODCALLTYPE get_SplitHorizontal(long* SplitHorizontal/*[out,retval]*/) = 0; // [2024]
  virtual HRESULT STDMETHODCALLTYPE set_SplitHorizontal(long SplitHorizontal/*[in]*/) = 0; // [2024]
  virtual HRESULT STDMETHODCALLTYPE RangeFromPoint(int X/*[in]*/, int Y/*[in]*/, 
                                                   LPDISPATCH* RangeFromPoint/*[out,retval]*/) = 0; // [2025]
  virtual HRESULT STDMETHODCALLTYPE PointsToScreenPixelsX(float Points/*[in]*/, 
                                                          int* PointsToScreenPixelsX/*[out,retval]*/) = 0; // [2026]
  virtual HRESULT STDMETHODCALLTYPE PointsToScreenPixelsY(float Points/*[in]*/, 
                                                          int* PointsToScreenPixelsY/*[out,retval]*/) = 0; // [2027]
  virtual HRESULT STDMETHODCALLTYPE ScrollIntoView(float Left/*[in]*/, float Top/*[in]*/, 
                                                   float Width/*[in]*/, float Height/*[in]*/, 
                                                   Office_2k::MsoTriState Start/*[in,def,opt]*/) = 0; // [2028]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::SelectionPtr __fastcall get_Selection(void)
  {
    Powerpoint_2k::SelectionPtr Selection;
    OLECHECK(this->get_Selection((Powerpoint_2k::SelectionPtr*)&Selection));
    return Selection;
  }

  Powerpoint_2k::ViewPtr __fastcall get_View(void)
  {
    Powerpoint_2k::ViewPtr View;
    OLECHECK(this->get_View((Powerpoint_2k::ViewPtr*)&View));
    return View;
  }

  Powerpoint_2k::PowerPointPresentationPtr __fastcall get_Presentation(void)
  {
    Powerpoint_2k::PowerPointPresentationPtr Presentation;
    OLECHECK(this->get_Presentation((Powerpoint_2k::PowerPointPresentationPtr*)&Presentation));
    return Presentation;
  }

  Powerpoint_2k::PpViewType __fastcall get_ViewType(void)
  {
    Powerpoint_2k::PpViewType ViewType;
    OLECHECK(this->get_ViewType((Powerpoint_2k::PpViewType*)&ViewType));
    return ViewType;
  }

  Office_2k::MsoTriState __fastcall get_BlackAndWhite(void)
  {
    Office_2k::MsoTriState BlackAndWhite;
    OLECHECK(this->get_BlackAndWhite((Office_2k::MsoTriState*)&BlackAndWhite));
    return BlackAndWhite;
  }

  Office_2k::MsoTriState __fastcall get_Active(void)
  {
    Office_2k::MsoTriState Active;
    OLECHECK(this->get_Active((Office_2k::MsoTriState*)&Active));
    return Active;
  }

  Powerpoint_2k::PpWindowState __fastcall get_WindowState(void)
  {
    Powerpoint_2k::PpWindowState WindowState;
    OLECHECK(this->get_WindowState((Powerpoint_2k::PpWindowState*)&WindowState));
    return WindowState;
  }

  BSTR __fastcall get_Caption(void)
  {
    BSTR Caption = 0;
    OLECHECK(this->get_Caption((BSTR*)&Caption));
    return Caption;
  }

  float __fastcall get_Left(void)
  {
    float Left;
    OLECHECK(this->get_Left((float*)&Left));
    return Left;
  }

  float __fastcall get_Top(void)
  {
    float Top;
    OLECHECK(this->get_Top((float*)&Top));
    return Top;
  }

  float __fastcall get_Width(void)
  {
    float Width;
    OLECHECK(this->get_Width((float*)&Width));
    return Width;
  }

  float __fastcall get_Height(void)
  {
    float Height;
    OLECHECK(this->get_Height((float*)&Height));
    return Height;
  }

  Powerpoint_2k::DocumentWindowPtr __fastcall NewWindow(void)
  {
    Powerpoint_2k::DocumentWindowPtr NewWindow;
    OLECHECK(this->NewWindow((Powerpoint_2k::DocumentWindowPtr*)&NewWindow));
    return NewWindow;
  }

  long __fastcall get_HWND(void)
  {
    long HWND;
    OLECHECK(this->get_HWND((long*)&HWND));
    return HWND;
  }

  Powerpoint_2k::PanePtr __fastcall get_ActivePane(void)
  {
    Powerpoint_2k::PanePtr ActivePane;
    OLECHECK(this->get_ActivePane((Powerpoint_2k::PanePtr*)&ActivePane));
    return ActivePane;
  }

  Powerpoint_2k::PanesPtr __fastcall get_Panes(void)
  {
    Powerpoint_2k::PanesPtr Panes;
    OLECHECK(this->get_Panes((Powerpoint_2k::PanesPtr*)&Panes));
    return Panes;
  }

  long __fastcall get_SplitVertical(void)
  {
    long SplitVertical;
    OLECHECK(this->get_SplitVertical((long*)&SplitVertical));
    return SplitVertical;
  }

  long __fastcall get_SplitHorizontal(void)
  {
    long SplitHorizontal;
    OLECHECK(this->get_SplitHorizontal((long*)&SplitHorizontal));
    return SplitHorizontal;
  }

  LPDISPATCH __fastcall RangeFromPoint(int X/*[in]*/, int Y/*[in]*/)
  {
    LPDISPATCH RangeFromPoint;
    OLECHECK(this->RangeFromPoint(X, Y, (LPDISPATCH*)&RangeFromPoint));
    return RangeFromPoint;
  }

  int __fastcall PointsToScreenPixelsX(float Points/*[in]*/)
  {
    int PointsToScreenPixelsX;
    OLECHECK(this->PointsToScreenPixelsX(Points, (int*)&PointsToScreenPixelsX));
    return PointsToScreenPixelsX;
  }

  int __fastcall PointsToScreenPixelsY(float Points/*[in]*/)
  {
    int PointsToScreenPixelsY;
    OLECHECK(this->PointsToScreenPixelsY(Points, (int*)&PointsToScreenPixelsY));
    return PointsToScreenPixelsY;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::SelectionPtr Selection = {read = get_Selection};
  __property   Powerpoint_2k::ViewPtr View = {read = get_View};
  __property   Powerpoint_2k::PowerPointPresentationPtr Presentation = {read = get_Presentation};
  __property   Powerpoint_2k::PpViewType ViewType = {read = get_ViewType, write = set_ViewType};
  __property   Office_2k::MsoTriState BlackAndWhite = {read = get_BlackAndWhite, write = set_BlackAndWhite};
  __property   Office_2k::MsoTriState Active = {read = get_Active};
  __property   Powerpoint_2k::PpWindowState WindowState = {read = get_WindowState, write = set_WindowState};
  __property   BSTR            Caption = {read = get_Caption};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   long            HWND = {read = get_HWND};
  __property   Powerpoint_2k::PanePtr ActivePane = {read = get_ActivePane};
  __property   Powerpoint_2k::PanesPtr Panes = {read = get_Panes};
  __property   long            SplitVertical = {read = get_SplitVertical, write = set_SplitVertical};
  __property   long            SplitHorizontal = {read = get_SplitHorizontal, write = set_SplitHorizontal};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: View
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493458-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface View  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Powerpoint_2k::PpViewType* Type/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_Zoom(int* Zoom/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_Zoom(int Zoom/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE Paste(void) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Slide(LPDISPATCH* Slide/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_Slide(LPDISPATCH Slide/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE GotoSlide(int index/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_DisplaySlideMiniature(Office_2k::MsoTriState* DisplaySlideMiniature/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE set_DisplaySlideMiniature(Office_2k::MsoTriState DisplaySlideMiniature/*[in]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_ZoomToFit(Office_2k::MsoTriState* ZoomToFit/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE set_ZoomToFit(Office_2k::MsoTriState ZoomToFit/*[in]*/) = 0; // [2009]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::PpViewType __fastcall get_Type(void)
  {
    Powerpoint_2k::PpViewType Type;
    OLECHECK(this->get_Type((Powerpoint_2k::PpViewType*)&Type));
    return Type;
  }

  int __fastcall get_Zoom(void)
  {
    int Zoom;
    OLECHECK(this->get_Zoom((int*)&Zoom));
    return Zoom;
  }

  LPDISPATCH __fastcall get_Slide(void)
  {
    LPDISPATCH Slide;
    OLECHECK(this->get_Slide((LPDISPATCH*)&Slide));
    return Slide;
  }

  Office_2k::MsoTriState __fastcall get_DisplaySlideMiniature(void)
  {
    Office_2k::MsoTriState DisplaySlideMiniature;
    OLECHECK(this->get_DisplaySlideMiniature((Office_2k::MsoTriState*)&DisplaySlideMiniature));
    return DisplaySlideMiniature;
  }

  Office_2k::MsoTriState __fastcall get_ZoomToFit(void)
  {
    Office_2k::MsoTriState ZoomToFit;
    OLECHECK(this->get_ZoomToFit((Office_2k::MsoTriState*)&ZoomToFit));
    return ZoomToFit;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::PpViewType Type = {read = get_Type};
  __property   int             Zoom = {read = get_Zoom, write = set_Zoom};
  __property   LPDISPATCH      Slide = {read = get_Slide, write = set_Slide};
  __property   Office_2k::MsoTriState DisplaySlideMiniature = {read = get_DisplaySlideMiniature, write = set_DisplaySlideMiniature};
  __property   Office_2k::MsoTriState ZoomToFit = {read = get_ZoomToFit, write = set_ZoomToFit};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: SlideShowView
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493459-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface SlideShowView  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Zoom(int* Zoom/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_Slide(Powerpoint_2k::PowerPointSlidePtr* Slide/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_PointerType(Powerpoint_2k::PpSlideShowPointerType* PointerType/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_PointerType(Powerpoint_2k::PpSlideShowPointerType PointerType/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_State(Powerpoint_2k::PpSlideShowState* State/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_State(Powerpoint_2k::PpSlideShowState State/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_AcceleratorsEnabled(Office_2k::MsoTriState* AcceleratorsEnabled/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE set_AcceleratorsEnabled(Office_2k::MsoTriState AcceleratorsEnabled/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_PresentationElapsedTime(float* PresentationElapsedTime/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_SlideElapsedTime(float* SlideElapsedTime/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE set_SlideElapsedTime(float SlideElapsedTime/*[in]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_LastSlideViewed(Powerpoint_2k::PowerPointSlidePtr* LastSlideViewed/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE get_AdvanceMode(Powerpoint_2k::PpSlideShowAdvanceMode* AdvanceMode/*[out,retval]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE get_PointerColor(Powerpoint_2k::ColorFormatPtr* PointerColor/*[out,retval]*/) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE get_IsNamedShow(Office_2k::MsoTriState* IsNamedShow/*[out,retval]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE get_SlideShowName(BSTR* SlideShowName/*[out,retval]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE DrawLine(float BeginX/*[in]*/, float BeginY/*[in]*/, 
                                             float EndX/*[in]*/, float EndY/*[in]*/) = 0; // [2015]
  virtual HRESULT STDMETHODCALLTYPE EraseDrawing(void) = 0; // [2016]
  virtual HRESULT STDMETHODCALLTYPE First(void) = 0; // [2017]
  virtual HRESULT STDMETHODCALLTYPE Last(void) = 0; // [2018]
  virtual HRESULT STDMETHODCALLTYPE Next(void) = 0; // [2019]
  virtual HRESULT STDMETHODCALLTYPE Previous(void) = 0; // [2020]
  virtual HRESULT STDMETHODCALLTYPE GotoSlide(int index/*[in]*/, 
                                              Office_2k::MsoTriState ResetSlide/*[in,def,opt]*/) = 0; // [2021]
  virtual HRESULT STDMETHODCALLTYPE GotoNamedShow(BSTR SlideShowName/*[in]*/) = 0; // [2022]
  virtual HRESULT STDMETHODCALLTYPE EndNamedShow(void) = 0; // [2023]
  virtual HRESULT STDMETHODCALLTYPE ResetSlideTime(void) = 0; // [2024]
  virtual HRESULT STDMETHODCALLTYPE Exit(void) = 0; // [2025]
  virtual HRESULT STDMETHODCALLTYPE InstallTracker(Powerpoint_2k::MouseTrackerPtr pTracker/*[in]*/, 
                                                   Office_2k::MsoTriState Presenter/*[in]*/) = 0; // [2026]
  virtual HRESULT STDMETHODCALLTYPE get_CurrentShowPosition(int* CurrentShowPosition/*[out,retval]*/) = 0; // [2027]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  int __fastcall get_Zoom(void)
  {
    int Zoom;
    OLECHECK(this->get_Zoom((int*)&Zoom));
    return Zoom;
  }

  Powerpoint_2k::PowerPointSlidePtr __fastcall get_Slide(void)
  {
    Powerpoint_2k::PowerPointSlidePtr Slide;
    OLECHECK(this->get_Slide((Powerpoint_2k::PowerPointSlidePtr*)&Slide));
    return Slide;
  }

  Powerpoint_2k::PpSlideShowPointerType __fastcall get_PointerType(void)
  {
    Powerpoint_2k::PpSlideShowPointerType PointerType;
    OLECHECK(this->get_PointerType((Powerpoint_2k::PpSlideShowPointerType*)&PointerType));
    return PointerType;
  }

  Powerpoint_2k::PpSlideShowState __fastcall get_State(void)
  {
    Powerpoint_2k::PpSlideShowState State;
    OLECHECK(this->get_State((Powerpoint_2k::PpSlideShowState*)&State));
    return State;
  }

  Office_2k::MsoTriState __fastcall get_AcceleratorsEnabled(void)
  {
    Office_2k::MsoTriState AcceleratorsEnabled;
    OLECHECK(this->get_AcceleratorsEnabled((Office_2k::MsoTriState*)&AcceleratorsEnabled));
    return AcceleratorsEnabled;
  }

  float __fastcall get_PresentationElapsedTime(void)
  {
    float PresentationElapsedTime;
    OLECHECK(this->get_PresentationElapsedTime((float*)&PresentationElapsedTime));
    return PresentationElapsedTime;
  }

  float __fastcall get_SlideElapsedTime(void)
  {
    float SlideElapsedTime;
    OLECHECK(this->get_SlideElapsedTime((float*)&SlideElapsedTime));
    return SlideElapsedTime;
  }

  Powerpoint_2k::PowerPointSlidePtr __fastcall get_LastSlideViewed(void)
  {
    Powerpoint_2k::PowerPointSlidePtr LastSlideViewed;
    OLECHECK(this->get_LastSlideViewed((Powerpoint_2k::PowerPointSlidePtr*)&LastSlideViewed));
    return LastSlideViewed;
  }

  Powerpoint_2k::PpSlideShowAdvanceMode __fastcall get_AdvanceMode(void)
  {
    Powerpoint_2k::PpSlideShowAdvanceMode AdvanceMode;
    OLECHECK(this->get_AdvanceMode((Powerpoint_2k::PpSlideShowAdvanceMode*)&AdvanceMode));
    return AdvanceMode;
  }

  Powerpoint_2k::ColorFormatPtr __fastcall get_PointerColor(void)
  {
    Powerpoint_2k::ColorFormatPtr PointerColor;
    OLECHECK(this->get_PointerColor((Powerpoint_2k::ColorFormatPtr*)&PointerColor));
    return PointerColor;
  }

  Office_2k::MsoTriState __fastcall get_IsNamedShow(void)
  {
    Office_2k::MsoTriState IsNamedShow;
    OLECHECK(this->get_IsNamedShow((Office_2k::MsoTriState*)&IsNamedShow));
    return IsNamedShow;
  }

  BSTR __fastcall get_SlideShowName(void)
  {
    BSTR SlideShowName = 0;
    OLECHECK(this->get_SlideShowName((BSTR*)&SlideShowName));
    return SlideShowName;
  }

  int __fastcall get_CurrentShowPosition(void)
  {
    int CurrentShowPosition;
    OLECHECK(this->get_CurrentShowPosition((int*)&CurrentShowPosition));
    return CurrentShowPosition;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Zoom = {read = get_Zoom};
  __property   Powerpoint_2k::PowerPointSlidePtr Slide = {read = get_Slide};
  __property   Powerpoint_2k::PpSlideShowPointerType PointerType = {read = get_PointerType, write = set_PointerType};
  __property   Powerpoint_2k::PpSlideShowState State = {read = get_State, write = set_State};
  __property   Office_2k::MsoTriState AcceleratorsEnabled = {read = get_AcceleratorsEnabled, write = set_AcceleratorsEnabled};
  __property   float           PresentationElapsedTime = {read = get_PresentationElapsedTime};
  __property   float           SlideElapsedTime = {read = get_SlideElapsedTime, write = set_SlideElapsedTime};
  __property   Powerpoint_2k::PowerPointSlidePtr LastSlideViewed = {read = get_LastSlideViewed};
  __property   Powerpoint_2k::PpSlideShowAdvanceMode AdvanceMode = {read = get_AdvanceMode};
  __property   Powerpoint_2k::ColorFormatPtr PointerColor = {read = get_PointerColor};
  __property   Office_2k::MsoTriState IsNamedShow = {read = get_IsNamedShow};
  __property   BSTR            SlideShowName = {read = get_SlideShowName};
  __property   int             CurrentShowPosition = {read = get_CurrentShowPosition};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: SlideShowSettings
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149345A-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface SlideShowSettings  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_PointerColor(Powerpoint_2k::ColorFormatPtr* PointerColor/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_NamedSlideShows(Powerpoint_2k::NamedSlideShowsPtr* NamedSlideShows/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_StartingSlide(int* StartingSlide/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_StartingSlide(int StartingSlide/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_EndingSlide(int* EndingSlide/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_EndingSlide(int EndingSlide/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_AdvanceMode(Powerpoint_2k::PpSlideShowAdvanceMode* AdvanceMode/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE set_AdvanceMode(Powerpoint_2k::PpSlideShowAdvanceMode AdvanceMode/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE Run(Powerpoint_2k::SlideShowWindowPtr* Run/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_LoopUntilStopped(Office_2k::MsoTriState* LoopUntilStopped/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE set_LoopUntilStopped(Office_2k::MsoTriState LoopUntilStopped/*[in]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_ShowType(Powerpoint_2k::PpSlideShowType* ShowType/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE set_ShowType(Powerpoint_2k::PpSlideShowType ShowType/*[in]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE get_ShowWithNarration(Office_2k::MsoTriState* ShowWithNarration/*[out,retval]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE set_ShowWithNarration(Office_2k::MsoTriState ShowWithNarration/*[in]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE get_ShowWithAnimation(Office_2k::MsoTriState* ShowWithAnimation/*[out,retval]*/) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE set_ShowWithAnimation(Office_2k::MsoTriState ShowWithAnimation/*[in]*/) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE get_SlideShowName(BSTR* SlideShowName/*[out,retval]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE set_SlideShowName(BSTR SlideShowName/*[in]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE get_RangeType(Powerpoint_2k::PpSlideShowRangeType* RangeType/*[out,retval]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE set_RangeType(Powerpoint_2k::PpSlideShowRangeType RangeType/*[in]*/) = 0; // [2014]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::ColorFormatPtr __fastcall get_PointerColor(void)
  {
    Powerpoint_2k::ColorFormatPtr PointerColor;
    OLECHECK(this->get_PointerColor((Powerpoint_2k::ColorFormatPtr*)&PointerColor));
    return PointerColor;
  }

  Powerpoint_2k::NamedSlideShowsPtr __fastcall get_NamedSlideShows(void)
  {
    Powerpoint_2k::NamedSlideShowsPtr NamedSlideShows;
    OLECHECK(this->get_NamedSlideShows((Powerpoint_2k::NamedSlideShowsPtr*)&NamedSlideShows));
    return NamedSlideShows;
  }

  int __fastcall get_StartingSlide(void)
  {
    int StartingSlide;
    OLECHECK(this->get_StartingSlide((int*)&StartingSlide));
    return StartingSlide;
  }

  int __fastcall get_EndingSlide(void)
  {
    int EndingSlide;
    OLECHECK(this->get_EndingSlide((int*)&EndingSlide));
    return EndingSlide;
  }

  Powerpoint_2k::PpSlideShowAdvanceMode __fastcall get_AdvanceMode(void)
  {
    Powerpoint_2k::PpSlideShowAdvanceMode AdvanceMode;
    OLECHECK(this->get_AdvanceMode((Powerpoint_2k::PpSlideShowAdvanceMode*)&AdvanceMode));
    return AdvanceMode;
  }

  Powerpoint_2k::SlideShowWindowPtr __fastcall Run(void)
  {
    Powerpoint_2k::SlideShowWindowPtr Run;
    OLECHECK(this->Run((Powerpoint_2k::SlideShowWindowPtr*)&Run));
    return Run;
  }

  Office_2k::MsoTriState __fastcall get_LoopUntilStopped(void)
  {
    Office_2k::MsoTriState LoopUntilStopped;
    OLECHECK(this->get_LoopUntilStopped((Office_2k::MsoTriState*)&LoopUntilStopped));
    return LoopUntilStopped;
  }

  Powerpoint_2k::PpSlideShowType __fastcall get_ShowType(void)
  {
    Powerpoint_2k::PpSlideShowType ShowType;
    OLECHECK(this->get_ShowType((Powerpoint_2k::PpSlideShowType*)&ShowType));
    return ShowType;
  }

  Office_2k::MsoTriState __fastcall get_ShowWithNarration(void)
  {
    Office_2k::MsoTriState ShowWithNarration;
    OLECHECK(this->get_ShowWithNarration((Office_2k::MsoTriState*)&ShowWithNarration));
    return ShowWithNarration;
  }

  Office_2k::MsoTriState __fastcall get_ShowWithAnimation(void)
  {
    Office_2k::MsoTriState ShowWithAnimation;
    OLECHECK(this->get_ShowWithAnimation((Office_2k::MsoTriState*)&ShowWithAnimation));
    return ShowWithAnimation;
  }

  BSTR __fastcall get_SlideShowName(void)
  {
    BSTR SlideShowName = 0;
    OLECHECK(this->get_SlideShowName((BSTR*)&SlideShowName));
    return SlideShowName;
  }

  Powerpoint_2k::PpSlideShowRangeType __fastcall get_RangeType(void)
  {
    Powerpoint_2k::PpSlideShowRangeType RangeType;
    OLECHECK(this->get_RangeType((Powerpoint_2k::PpSlideShowRangeType*)&RangeType));
    return RangeType;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::ColorFormatPtr PointerColor = {read = get_PointerColor};
  __property   Powerpoint_2k::NamedSlideShowsPtr NamedSlideShows = {read = get_NamedSlideShows};
  __property   int             StartingSlide = {read = get_StartingSlide, write = set_StartingSlide};
  __property   int             EndingSlide = {read = get_EndingSlide, write = set_EndingSlide};
  __property   Powerpoint_2k::PpSlideShowAdvanceMode AdvanceMode = {read = get_AdvanceMode, write = set_AdvanceMode};
  __property   Office_2k::MsoTriState LoopUntilStopped = {read = get_LoopUntilStopped, write = set_LoopUntilStopped};
  __property   Powerpoint_2k::PpSlideShowType ShowType = {read = get_ShowType, write = set_ShowType};
  __property   Office_2k::MsoTriState ShowWithNarration = {read = get_ShowWithNarration, write = set_ShowWithNarration};
  __property   Office_2k::MsoTriState ShowWithAnimation = {read = get_ShowWithAnimation, write = set_ShowWithAnimation};
  __property   BSTR            SlideShowName = {read = get_SlideShowName, write = set_SlideShowName};
  __property   Powerpoint_2k::PpSlideShowRangeType RangeType = {read = get_RangeType, write = set_RangeType};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: NamedSlideShows
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149345B-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface NamedSlideShows  : public Powerpoint_2k::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(TVariantInParam index/*[in]*/, 
                                         Powerpoint_2k::NamedSlideShowPtr* Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Add(BSTR Name/*[in]*/, 
                                        TVariantInParam safeArrayOfSlideIDs/*[in]*/, 
                                        Powerpoint_2k::NamedSlideShowPtr* Add/*[out,retval]*/) = 0; // [2003]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::NamedSlideShowPtr __fastcall Item(TVariantInParam index/*[in]*/)
  {
    Powerpoint_2k::NamedSlideShowPtr Item;
    OLECHECK(this->Item(index, (Powerpoint_2k::NamedSlideShowPtr*)&Item));
    return Item;
  }

  Powerpoint_2k::NamedSlideShowPtr __fastcall Add(BSTR Name/*[in]*/, 
                                                  TVariantInParam safeArrayOfSlideIDs/*[in]*/)
  {
    Powerpoint_2k::NamedSlideShowPtr Add;
    OLECHECK(this->Add(Name, safeArrayOfSlideIDs, (Powerpoint_2k::NamedSlideShowPtr*)&Add));
    return Add;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: NamedSlideShow
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149345C-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface NamedSlideShow  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_SlideIDs(TVariant* SlideIDs/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [2006]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  TVariant __fastcall get_SlideIDs(void)
  {
    TVariant SlideIDs;
    OLECHECK(this->get_SlideIDs((TVariant*)&SlideIDs));
    return SlideIDs;
  }

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PrintOptions
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149345D-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface PrintOptions  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_PrintColorType(Powerpoint_2k::PpPrintColorType* PrintColorType/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE set_PrintColorType(Powerpoint_2k::PpPrintColorType PrintColorType/*[in]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Collate(Office_2k::MsoTriState* Collate/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_Collate(Office_2k::MsoTriState Collate/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_FitToPage(Office_2k::MsoTriState* FitToPage/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_FitToPage(Office_2k::MsoTriState FitToPage/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_FrameSlides(Office_2k::MsoTriState* FrameSlides/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_FrameSlides(Office_2k::MsoTriState FrameSlides/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_NumberOfCopies(int* NumberOfCopies/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_NumberOfCopies(int NumberOfCopies/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_OutputType(Powerpoint_2k::PpPrintOutputType* OutputType/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE set_OutputType(Powerpoint_2k::PpPrintOutputType OutputType/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_PrintHiddenSlides(Office_2k::MsoTriState* PrintHiddenSlides/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE set_PrintHiddenSlides(Office_2k::MsoTriState PrintHiddenSlides/*[in]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_PrintInBackground(Office_2k::MsoTriState* PrintInBackground/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE set_PrintInBackground(Office_2k::MsoTriState PrintInBackground/*[in]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE get_RangeType(Powerpoint_2k::PpPrintRangeType* RangeType/*[out,retval]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE set_RangeType(Powerpoint_2k::PpPrintRangeType RangeType/*[in]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE get_Ranges(Powerpoint_2k::PrintRangesPtr* Ranges/*[out,retval]*/) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE get_PrintFontsAsGraphics(Office_2k::MsoTriState* PrintFontsAsGraphics/*[out,retval]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE set_PrintFontsAsGraphics(Office_2k::MsoTriState PrintFontsAsGraphics/*[in]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE get_SlideShowName(BSTR* SlideShowName/*[out,retval]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE set_SlideShowName(BSTR SlideShowName/*[in]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE get_ActivePrinter(BSTR* ActivePrinter/*[out,retval]*/) = 0; // [2015]
  virtual HRESULT STDMETHODCALLTYPE set_ActivePrinter(BSTR ActivePrinter/*[in]*/) = 0; // [2015]
  virtual HRESULT STDMETHODCALLTYPE get_HandoutOrder(Powerpoint_2k::PpPrintHandoutOrder* HandoutOrder/*[out,retval]*/) = 0; // [2016]
  virtual HRESULT STDMETHODCALLTYPE set_HandoutOrder(Powerpoint_2k::PpPrintHandoutOrder HandoutOrder/*[in]*/) = 0; // [2016]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  Powerpoint_2k::PpPrintColorType __fastcall get_PrintColorType(void)
  {
    Powerpoint_2k::PpPrintColorType PrintColorType;
    OLECHECK(this->get_PrintColorType((Powerpoint_2k::PpPrintColorType*)&PrintColorType));
    return PrintColorType;
  }

  Office_2k::MsoTriState __fastcall get_Collate(void)
  {
    Office_2k::MsoTriState Collate;
    OLECHECK(this->get_Collate((Office_2k::MsoTriState*)&Collate));
    return Collate;
  }

  Office_2k::MsoTriState __fastcall get_FitToPage(void)
  {
    Office_2k::MsoTriState FitToPage;
    OLECHECK(this->get_FitToPage((Office_2k::MsoTriState*)&FitToPage));
    return FitToPage;
  }

  Office_2k::MsoTriState __fastcall get_FrameSlides(void)
  {
    Office_2k::MsoTriState FrameSlides;
    OLECHECK(this->get_FrameSlides((Office_2k::MsoTriState*)&FrameSlides));
    return FrameSlides;
  }

  int __fastcall get_NumberOfCopies(void)
  {
    int NumberOfCopies;
    OLECHECK(this->get_NumberOfCopies((int*)&NumberOfCopies));
    return NumberOfCopies;
  }

  Powerpoint_2k::PpPrintOutputType __fastcall get_OutputType(void)
  {
    Powerpoint_2k::PpPrintOutputType OutputType;
    OLECHECK(this->get_OutputType((Powerpoint_2k::PpPrintOutputType*)&OutputType));
    return OutputType;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Office_2k::MsoTriState __fastcall get_PrintHiddenSlides(void)
  {
    Office_2k::MsoTriState PrintHiddenSlides;
    OLECHECK(this->get_PrintHiddenSlides((Office_2k::MsoTriState*)&PrintHiddenSlides));
    return PrintHiddenSlides;
  }

  Office_2k::MsoTriState __fastcall get_PrintInBackground(void)
  {
    Office_2k::MsoTriState PrintInBackground;
    OLECHECK(this->get_PrintInBackground((Office_2k::MsoTriState*)&PrintInBackground));
    return PrintInBackground;
  }

  Powerpoint_2k::PpPrintRangeType __fastcall get_RangeType(void)
  {
    Powerpoint_2k::PpPrintRangeType RangeType;
    OLECHECK(this->get_RangeType((Powerpoint_2k::PpPrintRangeType*)&RangeType));
    return RangeType;
  }

  Powerpoint_2k::PrintRangesPtr __fastcall get_Ranges(void)
  {
    Powerpoint_2k::PrintRangesPtr Ranges;
    OLECHECK(this->get_Ranges((Powerpoint_2k::PrintRangesPtr*)&Ranges));
    return Ranges;
  }

  Office_2k::MsoTriState __fastcall get_PrintFontsAsGraphics(void)
  {
    Office_2k::MsoTriState PrintFontsAsGraphics;
    OLECHECK(this->get_PrintFontsAsGraphics((Office_2k::MsoTriState*)&PrintFontsAsGraphics));
    return PrintFontsAsGraphics;
  }

  BSTR __fastcall get_SlideShowName(void)
  {
    BSTR SlideShowName = 0;
    OLECHECK(this->get_SlideShowName((BSTR*)&SlideShowName));
    return SlideShowName;
  }

  BSTR __fastcall get_ActivePrinter(void)
  {
    BSTR ActivePrinter = 0;
    OLECHECK(this->get_ActivePrinter((BSTR*)&ActivePrinter));
    return ActivePrinter;
  }

  Powerpoint_2k::PpPrintHandoutOrder __fastcall get_HandoutOrder(void)
  {
    Powerpoint_2k::PpPrintHandoutOrder HandoutOrder;
    OLECHECK(this->get_HandoutOrder((Powerpoint_2k::PpPrintHandoutOrder*)&HandoutOrder));
    return HandoutOrder;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   Powerpoint_2k::PpPrintColorType PrintColorType = {read = get_PrintColorType, write = set_PrintColorType};
  __property   Office_2k::MsoTriState Collate = {read = get_Collate, write = set_Collate};
  __property   Office_2k::MsoTriState FitToPage = {read = get_FitToPage, write = set_FitToPage};
  __property   Office_2k::MsoTriState FrameSlides = {read = get_FrameSlides, write = set_FrameSlides};
  __property   int             NumberOfCopies = {read = get_NumberOfCopies, write = set_NumberOfCopies};
  __property   Powerpoint_2k::PpPrintOutputType OutputType = {read = get_OutputType, write = set_OutputType};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoTriState PrintHiddenSlides = {read = get_PrintHiddenSlides, write = set_PrintHiddenSlides};
  __property   Office_2k::MsoTriState PrintInBackground = {read = get_PrintInBackground, write = set_PrintInBackground};
  __property   Powerpoint_2k::PpPrintRangeType RangeType = {read = get_RangeType, write = set_RangeType};
  __property   Powerpoint_2k::PrintRangesPtr Ranges = {read = get_Ranges};
  __property   Office_2k::MsoTriState PrintFontsAsGraphics = {read = get_PrintFontsAsGraphics, write = set_PrintFontsAsGraphics};
  __property   BSTR            SlideShowName = {read = get_SlideShowName, write = set_SlideShowName};
  __property   BSTR            ActivePrinter = {read = get_ActivePrinter, write = set_ActivePrinter};
  __property   Powerpoint_2k::PpPrintHandoutOrder HandoutOrder = {read = get_HandoutOrder, write = set_HandoutOrder};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PrintRanges
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149345E-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface PrintRanges  : public Powerpoint_2k::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE Add(int Start/*[in]*/, int End/*[in]*/, 
                                        Powerpoint_2k::PrintRangePtr* Add/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE ClearAll(void) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE Item(int index/*[in]*/, 
                                         Powerpoint_2k::PrintRangePtr* Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2004]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PrintRangePtr __fastcall Add(int Start/*[in]*/, int End/*[in]*/)
  {
    Powerpoint_2k::PrintRangePtr Add;
    OLECHECK(this->Add(Start, End, (Powerpoint_2k::PrintRangePtr*)&Add));
    return Add;
  }

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  Powerpoint_2k::PrintRangePtr __fastcall Item(int index/*[in]*/)
  {
    Powerpoint_2k::PrintRangePtr Item;
    OLECHECK(this->Item(index, (Powerpoint_2k::PrintRangePtr*)&Item));
    return Item;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PrintRange
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149345F-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface PrintRange  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Start(int* Start/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_End(int* End/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [2005]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  int __fastcall get_Start(void)
  {
    int Start;
    OLECHECK(this->get_Start((int*)&Start));
    return Start;
  }

  int __fastcall get_End(void)
  {
    int End;
    OLECHECK(this->get_End((int*)&End));
    return End;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Start = {read = get_Start};
  __property   int             End = {read = get_End};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: AddIns
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493460-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface AddIns  : public Powerpoint_2k::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(TVariant* index/*[in]*/, 
                                         Powerpoint_2k::AddInPtr* Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Add(BSTR FileName/*[in]*/, 
                                        Powerpoint_2k::AddInPtr* Add/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE Remove(TVariant* index/*[in]*/) = 0; // [2004]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::AddInPtr __fastcall Item(TVariant* index/*[in]*/)
  {
    Powerpoint_2k::AddInPtr Item;
    OLECHECK(this->Item(index, (Powerpoint_2k::AddInPtr*)&Item));
    return Item;
  }

  Powerpoint_2k::AddInPtr __fastcall Add(BSTR FileName/*[in]*/)
  {
    Powerpoint_2k::AddInPtr Add;
    OLECHECK(this->Add(FileName, (Powerpoint_2k::AddInPtr*)&Add));
    return Add;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: AddIn
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493461-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface AddIn  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_FullName(BSTR* FullName/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_Path(BSTR* Path/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Registered(Office_2k::MsoTriState* Registered/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_Registered(Office_2k::MsoTriState Registered/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_AutoLoad(Office_2k::MsoTriState* AutoLoad/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE set_AutoLoad(Office_2k::MsoTriState AutoLoad/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_Loaded(Office_2k::MsoTriState* Loaded/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE set_Loaded(Office_2k::MsoTriState Loaded/*[in]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayAlerts(Office_2k::MsoTriState* DisplayAlerts/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayAlerts(Office_2k::MsoTriState DisplayAlerts/*[in]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_RegisteredInHKLM(Office_2k::MsoTriState* RegisteredInHKLM/*[out,retval]*/) = 0; // [2010]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  BSTR __fastcall get_FullName(void)
  {
    BSTR FullName = 0;
    OLECHECK(this->get_FullName((BSTR*)&FullName));
    return FullName;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  BSTR __fastcall get_Path(void)
  {
    BSTR Path = 0;
    OLECHECK(this->get_Path((BSTR*)&Path));
    return Path;
  }

  Office_2k::MsoTriState __fastcall get_Registered(void)
  {
    Office_2k::MsoTriState Registered;
    OLECHECK(this->get_Registered((Office_2k::MsoTriState*)&Registered));
    return Registered;
  }

  Office_2k::MsoTriState __fastcall get_AutoLoad(void)
  {
    Office_2k::MsoTriState AutoLoad;
    OLECHECK(this->get_AutoLoad((Office_2k::MsoTriState*)&AutoLoad));
    return AutoLoad;
  }

  Office_2k::MsoTriState __fastcall get_Loaded(void)
  {
    Office_2k::MsoTriState Loaded;
    OLECHECK(this->get_Loaded((Office_2k::MsoTriState*)&Loaded));
    return Loaded;
  }

  Office_2k::MsoTriState __fastcall get_DisplayAlerts(void)
  {
    Office_2k::MsoTriState DisplayAlerts;
    OLECHECK(this->get_DisplayAlerts((Office_2k::MsoTriState*)&DisplayAlerts));
    return DisplayAlerts;
  }

  Office_2k::MsoTriState __fastcall get_RegisteredInHKLM(void)
  {
    Office_2k::MsoTriState RegisteredInHKLM;
    OLECHECK(this->get_RegisteredInHKLM((Office_2k::MsoTriState*)&RegisteredInHKLM));
    return RegisteredInHKLM;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            FullName = {read = get_FullName};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Path = {read = get_Path};
  __property   Office_2k::MsoTriState Registered = {read = get_Registered, write = set_Registered};
  __property   Office_2k::MsoTriState AutoLoad = {read = get_AutoLoad, write = set_AutoLoad};
  __property   Office_2k::MsoTriState Loaded = {read = get_Loaded, write = set_Loaded};
  __property   Office_2k::MsoTriState DisplayAlerts = {read = get_DisplayAlerts, write = set_DisplayAlerts};
  __property   Office_2k::MsoTriState RegisteredInHKLM = {read = get_RegisteredInHKLM};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Presentations
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493462-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Presentations  : public Powerpoint_2k::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(TVariantInParam index/*[in]*/, 
                                         Powerpoint_2k::PowerPointPresentationPtr* Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Add(Office_2k::MsoTriState WithWindow/*[in,def,opt]*/, 
                                        Powerpoint_2k::PowerPointPresentationPtr* Add/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE Open(BSTR FileName/*[in]*/, 
                                         Office_2k::MsoTriState ReadOnly/*[in,def,opt]*/, 
                                         Office_2k::MsoTriState Untitled/*[in,def,opt]*/, 
                                         Office_2k::MsoTriState WithWindow/*[in,def,opt]*/, 
                                         Powerpoint_2k::PowerPointPresentationPtr* Open/*[out,retval]*/) = 0; // [2004]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::PowerPointPresentationPtr __fastcall Item(TVariantInParam index/*[in]*/)
  {
    Powerpoint_2k::PowerPointPresentationPtr Item;
    OLECHECK(this->Item(index, (Powerpoint_2k::PowerPointPresentationPtr*)&Item));
    return Item;
  }

  Powerpoint_2k::PowerPointPresentationPtr __fastcall Add(Office_2k::MsoTriState WithWindow/*[in,def,opt]*/)
  {
    Powerpoint_2k::PowerPointPresentationPtr Add;
    OLECHECK(this->Add(WithWindow, (Powerpoint_2k::PowerPointPresentationPtr*)&Add));
    return Add;
  }

  Powerpoint_2k::PowerPointPresentationPtr __fastcall Open(BSTR FileName/*[in]*/, 
                                                           Office_2k::MsoTriState ReadOnly/*[in,def,opt]*/, 
                                                           Office_2k::MsoTriState Untitled/*[in,def,opt]*/, 
                                                           Office_2k::MsoTriState WithWindow/*[in,def,opt]*/)
  {
    Powerpoint_2k::PowerPointPresentationPtr Open;
    OLECHECK(this->Open(FileName, ReadOnly, Untitled, WithWindow, (Powerpoint_2k::PowerPointPresentationPtr*)&Open));
    return Open;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PresEvents
// Flags:     (16) Hidden
// GUID:      {91493463-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface PresEvents  : public IUnknown
{
public:
};

// *********************************************************************//
// Interface: _Presentation
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149349D-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface _Presentation  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_SlideMaster(Powerpoint_2k::_MasterPtr* SlideMaster/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_TitleMaster(Powerpoint_2k::_MasterPtr* TitleMaster/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_HasTitleMaster(Office_2k::MsoTriState* HasTitleMaster/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE AddTitleMaster(Powerpoint_2k::_MasterPtr* TitleMaster/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE ApplyTemplate(BSTR FileName/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_TemplateName(BSTR* TemplateName/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_NotesMaster(Powerpoint_2k::_MasterPtr* NotesMaster/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_HandoutMaster(Powerpoint_2k::_MasterPtr* HandoutMaster/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE get_Slides(Powerpoint_2k::SlidesPtr* Slides/*[out,retval]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE get_PageSetup(Powerpoint_2k::PageSetupPtr* PageSetup/*[out,retval]*/) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE get_ColorSchemes(Powerpoint_2k::ColorSchemesPtr* ColorSchemes/*[out,retval]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE get_ExtraColors(Powerpoint_2k::ExtraColorsPtr* ExtraColors/*[out,retval]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE get_SlideShowSettings(Powerpoint_2k::SlideShowSettingsPtr* SlideShowSettings/*[out,retval]*/) = 0; // [2015]
  virtual HRESULT STDMETHODCALLTYPE get_Fonts(Powerpoint_2k::FontsPtr* Fonts/*[out,retval]*/) = 0; // [2016]
  virtual HRESULT STDMETHODCALLTYPE get_Windoz(Powerpoint_2k::DocumentWindowsPtr* Windoz/*[out,retval]*/) = 0; // [2017]
  virtual HRESULT STDMETHODCALLTYPE get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/) = 0; // [2018]
  virtual HRESULT STDMETHODCALLTYPE get_DefaultShape(Powerpoint_2k::ShapePtr* DefaultShape/*[out,retval]*/) = 0; // [2019]
  virtual HRESULT STDMETHODCALLTYPE get_BuiltInDocumentProperties(LPDISPATCH* BuiltInDocumentProperties/*[out,retval]*/) = 0; // [2020]
  virtual HRESULT STDMETHODCALLTYPE get_CustomDocumentProperties(LPDISPATCH* CustomDocumentProperties/*[out,retval]*/) = 0; // [2021]
  virtual HRESULT STDMETHODCALLTYPE get_VBProject(Vbide_2k::VBProjectPtr* VBProject/*[out,retval]*/) = 0; // [2022]
  virtual HRESULT STDMETHODCALLTYPE get_ReadOnly(Office_2k::MsoTriState* ReadOnly/*[out,retval]*/) = 0; // [2023]
  virtual HRESULT STDMETHODCALLTYPE get_FullName(BSTR* FullName/*[out,retval]*/) = 0; // [2024]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [2025]
  virtual HRESULT STDMETHODCALLTYPE get_Path(BSTR* Path/*[out,retval]*/) = 0; // [2026]
  virtual HRESULT STDMETHODCALLTYPE get_Saved(Office_2k::MsoTriState* Saved/*[out,retval]*/) = 0; // [2027]
  virtual HRESULT STDMETHODCALLTYPE set_Saved(Office_2k::MsoTriState Saved/*[in]*/) = 0; // [2027]
  virtual HRESULT STDMETHODCALLTYPE get_LayoutDirection(Powerpoint_2k::PpDirection* LayoutDirection/*[out,retval]*/) = 0; // [2028]
  virtual HRESULT STDMETHODCALLTYPE set_LayoutDirection(Powerpoint_2k::PpDirection LayoutDirection/*[in]*/) = 0; // [2028]
  virtual HRESULT STDMETHODCALLTYPE NewWindow(Powerpoint_2k::DocumentWindowPtr* NewWindow/*[out,retval]*/) = 0; // [2029]
  virtual HRESULT STDMETHODCALLTYPE FollowHyperlink(BSTR Address/*[in]*/, 
                                                    BSTR SubAddress/*[in,def,opt]*/, 
                                                    TOLEBOOL NewWindow/*[in,def,opt]*/, 
                                                    TOLEBOOL AddHistory/*[in,def,opt]*/, 
                                                    BSTR ExtraInfo/*[in,def,opt]*/, 
                                                    Office_2k::MsoExtraInfoMethod Method/*[in,def,opt]*/, 
                                                    BSTR HeaderInfo/*[in,def,opt]*/) = 0; // [2030]
  virtual HRESULT STDMETHODCALLTYPE AddToFavorites(void) = 0; // [2031]
  virtual HRESULT STDMETHODCALLTYPE Unused(void) = 0; // [2032]
  virtual HRESULT STDMETHODCALLTYPE get_PrintOptions(Powerpoint_2k::PrintOptionsPtr* PrintOptions/*[out,retval]*/) = 0; // [2033]
  virtual HRESULT STDMETHODCALLTYPE PrintOut(int From/*[in,def,opt]*/, int To/*[in,def,opt]*/, 
                                             BSTR PrintToFile/*[in,def,opt]*/, 
                                             int Copies/*[in,def,opt]*/, 
                                             Office_2k::MsoTriState Collate/*[in,def,opt]*/) = 0; // [2034]
  virtual HRESULT STDMETHODCALLTYPE Save(void) = 0; // [2035]
  virtual HRESULT STDMETHODCALLTYPE SaveAs(BSTR FileName/*[in]*/, 
                                           Powerpoint_2k::PpSaveAsFileType FileFormat/*[in,def,opt]*/, 
                                           Office_2k::MsoTriState EmbedTrueTypeFonts/*[in,def,opt]*/) = 0; // [2036]
  virtual HRESULT STDMETHODCALLTYPE SaveCopyAs(BSTR FileName/*[in]*/, 
                                               Powerpoint_2k::PpSaveAsFileType FileFormat/*[in,def,opt]*/, 
                                               Office_2k::MsoTriState EmbedTrueTypeFonts/*[in,def,opt]*/) = 0; // [2037]
  virtual HRESULT STDMETHODCALLTYPE Export(BSTR Path/*[in]*/, BSTR FilterName/*[in]*/, 
                                           int ScaleWidth/*[in,def,opt]*/, 
                                           int ScaleHeight/*[in,def,opt]*/) = 0; // [2038]
  virtual HRESULT STDMETHODCALLTYPE Close(void) = 0; // [2039]
  virtual HRESULT STDMETHODCALLTYPE SetUndoText(BSTR Text/*[in]*/) = 0; // [2040]
  virtual HRESULT STDMETHODCALLTYPE get_Container(LPDISPATCH* Container/*[out,retval]*/) = 0; // [2041]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayComments(Office_2k::MsoTriState* DisplayComments/*[out,retval]*/) = 0; // [2042]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayComments(Office_2k::MsoTriState DisplayComments/*[in]*/) = 0; // [2042]
  virtual HRESULT STDMETHODCALLTYPE get_FarEastLineBreakLevel(Powerpoint_2k::PpFarEastLineBreakLevel* FarEastLineBreakLevel/*[out,retval]*/) = 0; // [2043]
  virtual HRESULT STDMETHODCALLTYPE set_FarEastLineBreakLevel(Powerpoint_2k::PpFarEastLineBreakLevel FarEastLineBreakLevel/*[in]*/) = 0; // [2043]
  virtual HRESULT STDMETHODCALLTYPE get_NoLineBreakBefore(BSTR* NoLineBreakBefore/*[out,retval]*/) = 0; // [2044]
  virtual HRESULT STDMETHODCALLTYPE set_NoLineBreakBefore(BSTR NoLineBreakBefore/*[in]*/) = 0; // [2044]
  virtual HRESULT STDMETHODCALLTYPE get_NoLineBreakAfter(BSTR* NoLineBreakAfter/*[out,retval]*/) = 0; // [2045]
  virtual HRESULT STDMETHODCALLTYPE set_NoLineBreakAfter(BSTR NoLineBreakAfter/*[in]*/) = 0; // [2045]
  virtual HRESULT STDMETHODCALLTYPE UpdateLinks(void) = 0; // [2046]
  virtual HRESULT STDMETHODCALLTYPE get_SlideShowWindow(Powerpoint_2k::SlideShowWindowPtr* SlideShowWindow/*[out,retval]*/) = 0; // [2047]
  virtual HRESULT STDMETHODCALLTYPE get_FarEastLineBreakLanguage(Office_2k::MsoFarEastLineBreakLanguageID* FarEastLineBreakLanguage/*[out,retval]*/) = 0; // [2048]
  virtual HRESULT STDMETHODCALLTYPE set_FarEastLineBreakLanguage(Office_2k::MsoFarEastLineBreakLanguageID FarEastLineBreakLanguage/*[in]*/) = 0; // [2048]
  virtual HRESULT STDMETHODCALLTYPE WebPagePreview(void) = 0; // [2049]
  virtual HRESULT STDMETHODCALLTYPE get_DefaultLanguageID(Office_2k::MsoLanguageID* DefaultLanguageID/*[out,retval]*/) = 0; // [2050]
  virtual HRESULT STDMETHODCALLTYPE set_DefaultLanguageID(Office_2k::MsoLanguageID DefaultLanguageID/*[in]*/) = 0; // [2050]
  virtual HRESULT STDMETHODCALLTYPE get_CommandBars(Office_2k::CommandBarsPtr* CommandBars/*[out,retval]*/) = 0; // [2051]
  virtual HRESULT STDMETHODCALLTYPE get_PublishObjects(Powerpoint_2k::PublishObjectsPtr* PublishObjects/*[out,retval]*/) = 0; // [2052]
  virtual HRESULT STDMETHODCALLTYPE get_WebOptions(Powerpoint_2k::WebOptionsPtr* WebOptions/*[out,retval]*/) = 0; // [2053]
  virtual HRESULT STDMETHODCALLTYPE get_HTMLProject(Office_2k::HTMLProjectPtr* HTMLProject/*[out,retval]*/) = 0; // [2054]
  virtual HRESULT STDMETHODCALLTYPE ReloadAs(Office_2k::MsoEncoding cp/*[in]*/) = 0; // [2055]
  virtual HRESULT STDMETHODCALLTYPE MakeIntoTemplate(Office_2k::MsoTriState IsDesignTemplate/*[in]*/) = 0; // [2056]
  virtual HRESULT STDMETHODCALLTYPE get_EnvelopeVisible(Office_2k::MsoTriState* EnvelopeVisible/*[out,retval]*/) = 0; // [2057]
  virtual HRESULT STDMETHODCALLTYPE set_EnvelopeVisible(Office_2k::MsoTriState EnvelopeVisible/*[in]*/) = 0; // [2057]
  virtual HRESULT STDMETHODCALLTYPE sblt(BSTR s/*[in]*/) = 0; // [2058]
  virtual HRESULT STDMETHODCALLTYPE get_VBASigned(Office_2k::MsoTriState* VBASigned/*[out,retval]*/) = 0; // [2059]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::_MasterPtr __fastcall get_SlideMaster(void)
  {
    Powerpoint_2k::_MasterPtr SlideMaster;
    OLECHECK(this->get_SlideMaster((Powerpoint_2k::_MasterPtr*)&SlideMaster));
    return SlideMaster;
  }

  Powerpoint_2k::_MasterPtr __fastcall get_TitleMaster(void)
  {
    Powerpoint_2k::_MasterPtr TitleMaster;
    OLECHECK(this->get_TitleMaster((Powerpoint_2k::_MasterPtr*)&TitleMaster));
    return TitleMaster;
  }

  Office_2k::MsoTriState __fastcall get_HasTitleMaster(void)
  {
    Office_2k::MsoTriState HasTitleMaster;
    OLECHECK(this->get_HasTitleMaster((Office_2k::MsoTriState*)&HasTitleMaster));
    return HasTitleMaster;
  }

  Powerpoint_2k::_MasterPtr __fastcall AddTitleMaster(void)
  {
    Powerpoint_2k::_MasterPtr TitleMaster;
    OLECHECK(this->AddTitleMaster((Powerpoint_2k::_MasterPtr*)&TitleMaster));
    return TitleMaster;
  }

  BSTR __fastcall get_TemplateName(void)
  {
    BSTR TemplateName = 0;
    OLECHECK(this->get_TemplateName((BSTR*)&TemplateName));
    return TemplateName;
  }

  Powerpoint_2k::_MasterPtr __fastcall get_NotesMaster(void)
  {
    Powerpoint_2k::_MasterPtr NotesMaster;
    OLECHECK(this->get_NotesMaster((Powerpoint_2k::_MasterPtr*)&NotesMaster));
    return NotesMaster;
  }

  Powerpoint_2k::_MasterPtr __fastcall get_HandoutMaster(void)
  {
    Powerpoint_2k::_MasterPtr HandoutMaster;
    OLECHECK(this->get_HandoutMaster((Powerpoint_2k::_MasterPtr*)&HandoutMaster));
    return HandoutMaster;
  }

  Powerpoint_2k::SlidesPtr __fastcall get_Slides(void)
  {
    Powerpoint_2k::SlidesPtr Slides;
    OLECHECK(this->get_Slides((Powerpoint_2k::SlidesPtr*)&Slides));
    return Slides;
  }

  Powerpoint_2k::PageSetupPtr __fastcall get_PageSetup(void)
  {
    Powerpoint_2k::PageSetupPtr PageSetup;
    OLECHECK(this->get_PageSetup((Powerpoint_2k::PageSetupPtr*)&PageSetup));
    return PageSetup;
  }

  Powerpoint_2k::ColorSchemesPtr __fastcall get_ColorSchemes(void)
  {
    Powerpoint_2k::ColorSchemesPtr ColorSchemes;
    OLECHECK(this->get_ColorSchemes((Powerpoint_2k::ColorSchemesPtr*)&ColorSchemes));
    return ColorSchemes;
  }

  Powerpoint_2k::ExtraColorsPtr __fastcall get_ExtraColors(void)
  {
    Powerpoint_2k::ExtraColorsPtr ExtraColors;
    OLECHECK(this->get_ExtraColors((Powerpoint_2k::ExtraColorsPtr*)&ExtraColors));
    return ExtraColors;
  }

  Powerpoint_2k::SlideShowSettingsPtr __fastcall get_SlideShowSettings(void)
  {
    Powerpoint_2k::SlideShowSettingsPtr SlideShowSettings;
    OLECHECK(this->get_SlideShowSettings((Powerpoint_2k::SlideShowSettingsPtr*)&SlideShowSettings));
    return SlideShowSettings;
  }

  Powerpoint_2k::FontsPtr __fastcall get_Fonts(void)
  {
    Powerpoint_2k::FontsPtr Fonts;
    OLECHECK(this->get_Fonts((Powerpoint_2k::FontsPtr*)&Fonts));
    return Fonts;
  }

  Powerpoint_2k::DocumentWindowsPtr __fastcall get_Windoz(void)
  {
    Powerpoint_2k::DocumentWindowsPtr Windoz;
    OLECHECK(this->get_Windoz((Powerpoint_2k::DocumentWindowsPtr*)&Windoz));
    return Windoz;
  }

  Powerpoint_2k::TagsPtr __fastcall get_Tags(void)
  {
    Powerpoint_2k::TagsPtr Tags;
    OLECHECK(this->get_Tags((Powerpoint_2k::TagsPtr*)&Tags));
    return Tags;
  }

  Powerpoint_2k::ShapePtr __fastcall get_DefaultShape(void)
  {
    Powerpoint_2k::ShapePtr DefaultShape;
    OLECHECK(this->get_DefaultShape((Powerpoint_2k::ShapePtr*)&DefaultShape));
    return DefaultShape;
  }

  LPDISPATCH __fastcall get_BuiltInDocumentProperties(void)
  {
    LPDISPATCH BuiltInDocumentProperties;
    OLECHECK(this->get_BuiltInDocumentProperties((LPDISPATCH*)&BuiltInDocumentProperties));
    return BuiltInDocumentProperties;
  }

  LPDISPATCH __fastcall get_CustomDocumentProperties(void)
  {
    LPDISPATCH CustomDocumentProperties;
    OLECHECK(this->get_CustomDocumentProperties((LPDISPATCH*)&CustomDocumentProperties));
    return CustomDocumentProperties;
  }

  Vbide_2k::VBProjectPtr __fastcall get_VBProject(void)
  {
    Vbide_2k::VBProjectPtr VBProject;
    OLECHECK(this->get_VBProject((Vbide_2k::VBProjectPtr*)&VBProject));
    return VBProject;
  }

  Office_2k::MsoTriState __fastcall get_ReadOnly(void)
  {
    Office_2k::MsoTriState ReadOnly;
    OLECHECK(this->get_ReadOnly((Office_2k::MsoTriState*)&ReadOnly));
    return ReadOnly;
  }

  BSTR __fastcall get_FullName(void)
  {
    BSTR FullName = 0;
    OLECHECK(this->get_FullName((BSTR*)&FullName));
    return FullName;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  BSTR __fastcall get_Path(void)
  {
    BSTR Path = 0;
    OLECHECK(this->get_Path((BSTR*)&Path));
    return Path;
  }

  Office_2k::MsoTriState __fastcall get_Saved(void)
  {
    Office_2k::MsoTriState Saved;
    OLECHECK(this->get_Saved((Office_2k::MsoTriState*)&Saved));
    return Saved;
  }

  Powerpoint_2k::PpDirection __fastcall get_LayoutDirection(void)
  {
    Powerpoint_2k::PpDirection LayoutDirection;
    OLECHECK(this->get_LayoutDirection((Powerpoint_2k::PpDirection*)&LayoutDirection));
    return LayoutDirection;
  }

  Powerpoint_2k::DocumentWindowPtr __fastcall NewWindow(void)
  {
    Powerpoint_2k::DocumentWindowPtr NewWindow;
    OLECHECK(this->NewWindow((Powerpoint_2k::DocumentWindowPtr*)&NewWindow));
    return NewWindow;
  }

  Powerpoint_2k::PrintOptionsPtr __fastcall get_PrintOptions(void)
  {
    Powerpoint_2k::PrintOptionsPtr PrintOptions;
    OLECHECK(this->get_PrintOptions((Powerpoint_2k::PrintOptionsPtr*)&PrintOptions));
    return PrintOptions;
  }

  LPDISPATCH __fastcall get_Container(void)
  {
    LPDISPATCH Container;
    OLECHECK(this->get_Container((LPDISPATCH*)&Container));
    return Container;
  }

  Office_2k::MsoTriState __fastcall get_DisplayComments(void)
  {
    Office_2k::MsoTriState DisplayComments;
    OLECHECK(this->get_DisplayComments((Office_2k::MsoTriState*)&DisplayComments));
    return DisplayComments;
  }

  Powerpoint_2k::PpFarEastLineBreakLevel __fastcall get_FarEastLineBreakLevel(void)
  {
    Powerpoint_2k::PpFarEastLineBreakLevel FarEastLineBreakLevel;
    OLECHECK(this->get_FarEastLineBreakLevel((Powerpoint_2k::PpFarEastLineBreakLevel*)&FarEastLineBreakLevel));
    return FarEastLineBreakLevel;
  }

  BSTR __fastcall get_NoLineBreakBefore(void)
  {
    BSTR NoLineBreakBefore = 0;
    OLECHECK(this->get_NoLineBreakBefore((BSTR*)&NoLineBreakBefore));
    return NoLineBreakBefore;
  }

  BSTR __fastcall get_NoLineBreakAfter(void)
  {
    BSTR NoLineBreakAfter = 0;
    OLECHECK(this->get_NoLineBreakAfter((BSTR*)&NoLineBreakAfter));
    return NoLineBreakAfter;
  }

  Powerpoint_2k::SlideShowWindowPtr __fastcall get_SlideShowWindow(void)
  {
    Powerpoint_2k::SlideShowWindowPtr SlideShowWindow;
    OLECHECK(this->get_SlideShowWindow((Powerpoint_2k::SlideShowWindowPtr*)&SlideShowWindow));
    return SlideShowWindow;
  }

  Office_2k::MsoFarEastLineBreakLanguageID __fastcall get_FarEastLineBreakLanguage(void)
  {
    Office_2k::MsoFarEastLineBreakLanguageID FarEastLineBreakLanguage;
    OLECHECK(this->get_FarEastLineBreakLanguage((Office_2k::MsoFarEastLineBreakLanguageID*)&FarEastLineBreakLanguage));
    return FarEastLineBreakLanguage;
  }

  Office_2k::MsoLanguageID __fastcall get_DefaultLanguageID(void)
  {
    Office_2k::MsoLanguageID DefaultLanguageID;
    OLECHECK(this->get_DefaultLanguageID((Office_2k::MsoLanguageID*)&DefaultLanguageID));
    return DefaultLanguageID;
  }

  Office_2k::CommandBarsPtr __fastcall get_CommandBars(void)
  {
    Office_2k::CommandBarsPtr CommandBars;
    OLECHECK(this->get_CommandBars((Office_2k::CommandBarsPtr*)&CommandBars));
    return CommandBars;
  }

  Powerpoint_2k::PublishObjectsPtr __fastcall get_PublishObjects(void)
  {
    Powerpoint_2k::PublishObjectsPtr PublishObjects;
    OLECHECK(this->get_PublishObjects((Powerpoint_2k::PublishObjectsPtr*)&PublishObjects));
    return PublishObjects;
  }

  Powerpoint_2k::WebOptionsPtr __fastcall get_WebOptions(void)
  {
    Powerpoint_2k::WebOptionsPtr WebOptions;
    OLECHECK(this->get_WebOptions((Powerpoint_2k::WebOptionsPtr*)&WebOptions));
    return WebOptions;
  }

  Office_2k::HTMLProjectPtr __fastcall get_HTMLProject(void)
  {
    Office_2k::HTMLProjectPtr HTMLProject;
    OLECHECK(this->get_HTMLProject((Office_2k::HTMLProjectPtr*)&HTMLProject));
    return HTMLProject;
  }

  Office_2k::MsoTriState __fastcall get_EnvelopeVisible(void)
  {
    Office_2k::MsoTriState EnvelopeVisible;
    OLECHECK(this->get_EnvelopeVisible((Office_2k::MsoTriState*)&EnvelopeVisible));
    return EnvelopeVisible;
  }

  Office_2k::MsoTriState __fastcall get_VBASigned(void)
  {
    Office_2k::MsoTriState VBASigned;
    OLECHECK(this->get_VBASigned((Office_2k::MsoTriState*)&VBASigned));
    return VBASigned;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::_MasterPtr SlideMaster = {read = get_SlideMaster};
  __property   Powerpoint_2k::_MasterPtr TitleMaster = {read = get_TitleMaster};
  __property   Office_2k::MsoTriState HasTitleMaster = {read = get_HasTitleMaster};
  __property   BSTR            TemplateName = {read = get_TemplateName};
  __property   Powerpoint_2k::_MasterPtr NotesMaster = {read = get_NotesMaster};
  __property   Powerpoint_2k::_MasterPtr HandoutMaster = {read = get_HandoutMaster};
  __property   Powerpoint_2k::SlidesPtr Slides = {read = get_Slides};
  __property   Powerpoint_2k::PageSetupPtr PageSetup = {read = get_PageSetup};
  __property   Powerpoint_2k::ColorSchemesPtr ColorSchemes = {read = get_ColorSchemes};
  __property   Powerpoint_2k::ExtraColorsPtr ExtraColors = {read = get_ExtraColors};
  __property   Powerpoint_2k::SlideShowSettingsPtr SlideShowSettings = {read = get_SlideShowSettings};
  __property   Powerpoint_2k::FontsPtr Fonts = {read = get_Fonts};
  __property   Powerpoint_2k::DocumentWindowsPtr Windoz = {read = get_Windoz};
  __property   Powerpoint_2k::TagsPtr Tags = {read = get_Tags};
  __property   Powerpoint_2k::ShapePtr DefaultShape = {read = get_DefaultShape};
  __property   LPDISPATCH      BuiltInDocumentProperties = {read = get_BuiltInDocumentProperties};
  __property   LPDISPATCH      CustomDocumentProperties = {read = get_CustomDocumentProperties};
  __property   Vbide_2k::VBProjectPtr VBProject = {read = get_VBProject};
  __property   Office_2k::MsoTriState ReadOnly = {read = get_ReadOnly};
  __property   BSTR            FullName = {read = get_FullName};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Path = {read = get_Path};
  __property   Office_2k::MsoTriState Saved = {read = get_Saved, write = set_Saved};
  __property   Powerpoint_2k::PpDirection LayoutDirection = {read = get_LayoutDirection, write = set_LayoutDirection};
  __property   Powerpoint_2k::PrintOptionsPtr PrintOptions = {read = get_PrintOptions};
  __property   LPDISPATCH      Container = {read = get_Container};
  __property   Office_2k::MsoTriState DisplayComments = {read = get_DisplayComments, write = set_DisplayComments};
  __property   Powerpoint_2k::PpFarEastLineBreakLevel FarEastLineBreakLevel = {read = get_FarEastLineBreakLevel, write = set_FarEastLineBreakLevel};
  __property   BSTR            NoLineBreakBefore = {read = get_NoLineBreakBefore, write = set_NoLineBreakBefore};
  __property   BSTR            NoLineBreakAfter = {read = get_NoLineBreakAfter, write = set_NoLineBreakAfter};
  __property   Powerpoint_2k::SlideShowWindowPtr SlideShowWindow = {read = get_SlideShowWindow};
  __property   Office_2k::MsoFarEastLineBreakLanguageID FarEastLineBreakLanguage = {read = get_FarEastLineBreakLanguage, write = set_FarEastLineBreakLanguage};
  __property   Office_2k::MsoLanguageID DefaultLanguageID = {read = get_DefaultLanguageID, write = set_DefaultLanguageID};
  __property   Office_2k::CommandBarsPtr CommandBars = {read = get_CommandBars};
  __property   Powerpoint_2k::PublishObjectsPtr PublishObjects = {read = get_PublishObjects};
  __property   Powerpoint_2k::WebOptionsPtr WebOptions = {read = get_WebOptions};
  __property   Office_2k::HTMLProjectPtr HTMLProject = {read = get_HTMLProject};
  __property   Office_2k::MsoTriState EnvelopeVisible = {read = get_EnvelopeVisible, write = set_EnvelopeVisible};
  __property   Office_2k::MsoTriState VBASigned = {read = get_VBASigned};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Hyperlinks
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493464-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Hyperlinks  : public Powerpoint_2k::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(int index/*[in]*/, 
                                         Powerpoint_2k::HyperlinkPtr* Item/*[out,retval]*/) = 0; // [0]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::HyperlinkPtr __fastcall Item(int index/*[in]*/)
  {
    Powerpoint_2k::HyperlinkPtr Item;
    OLECHECK(this->Item(index, (Powerpoint_2k::HyperlinkPtr*)&Item));
    return Item;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Hyperlink
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493465-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Hyperlink  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Office_2k::MsoHyperlinkType* Type/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_Address(BSTR* Address/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_Address(BSTR Address/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_SubAddress(BSTR* SubAddress/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_SubAddress(BSTR SubAddress/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE AddToFavorites(void) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_EmailSubject(BSTR* EmailSubject/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE set_EmailSubject(BSTR EmailSubject/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_ScreenTip(BSTR* ScreenTip/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE set_ScreenTip(BSTR ScreenTip/*[in]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_TextToDisplay(BSTR* TextToDisplay/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE set_TextToDisplay(BSTR TextToDisplay/*[in]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_ShowandReturn(Office_2k::MsoTriState* ShowandReturn/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE set_ShowandReturn(Office_2k::MsoTriState ShowandReturn/*[in]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE Follow(void) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE CreateNewDocument(BSTR FileName/*[in]*/, 
                                                      Office_2k::MsoTriState EditNow/*[in]*/, 
                                                      Office_2k::MsoTriState Overwrite/*[in]*/) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [2013]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Office_2k::MsoHyperlinkType __fastcall get_Type(void)
  {
    Office_2k::MsoHyperlinkType Type;
    OLECHECK(this->get_Type((Office_2k::MsoHyperlinkType*)&Type));
    return Type;
  }

  BSTR __fastcall get_Address(void)
  {
    BSTR Address = 0;
    OLECHECK(this->get_Address((BSTR*)&Address));
    return Address;
  }

  BSTR __fastcall get_SubAddress(void)
  {
    BSTR SubAddress = 0;
    OLECHECK(this->get_SubAddress((BSTR*)&SubAddress));
    return SubAddress;
  }

  BSTR __fastcall get_EmailSubject(void)
  {
    BSTR EmailSubject = 0;
    OLECHECK(this->get_EmailSubject((BSTR*)&EmailSubject));
    return EmailSubject;
  }

  BSTR __fastcall get_ScreenTip(void)
  {
    BSTR ScreenTip = 0;
    OLECHECK(this->get_ScreenTip((BSTR*)&ScreenTip));
    return ScreenTip;
  }

  BSTR __fastcall get_TextToDisplay(void)
  {
    BSTR TextToDisplay = 0;
    OLECHECK(this->get_TextToDisplay((BSTR*)&TextToDisplay));
    return TextToDisplay;
  }

  Office_2k::MsoTriState __fastcall get_ShowandReturn(void)
  {
    Office_2k::MsoTriState ShowandReturn;
    OLECHECK(this->get_ShowandReturn((Office_2k::MsoTriState*)&ShowandReturn));
    return ShowandReturn;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoHyperlinkType Type = {read = get_Type};
  __property   BSTR            Address = {read = get_Address, write = set_Address};
  __property   BSTR            SubAddress = {read = get_SubAddress, write = set_SubAddress};
  __property   BSTR            EmailSubject = {read = get_EmailSubject, write = set_EmailSubject};
  __property   BSTR            ScreenTip = {read = get_ScreenTip, write = set_ScreenTip};
  __property   BSTR            TextToDisplay = {read = get_TextToDisplay, write = set_TextToDisplay};
  __property   Office_2k::MsoTriState ShowandReturn = {read = get_ShowandReturn, write = set_ShowandReturn};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PageSetup
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493466-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface PageSetup  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_FirstSlideNumber(int* FirstSlideNumber/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_FirstSlideNumber(int FirstSlideNumber/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_SlideHeight(float* SlideHeight/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_SlideHeight(float SlideHeight/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_SlideWidth(float* SlideWidth/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_SlideWidth(float SlideWidth/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_SlideSize(Powerpoint_2k::PpSlideSizeType* SlideSize/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_SlideSize(Powerpoint_2k::PpSlideSizeType SlideSize/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_NotesOrientation(Office_2k::MsoOrientation* NotesOrientation/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE set_NotesOrientation(Office_2k::MsoOrientation NotesOrientation/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_SlideOrientation(Office_2k::MsoOrientation* SlideOrientation/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE set_SlideOrientation(Office_2k::MsoOrientation SlideOrientation/*[in]*/) = 0; // [2008]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  int __fastcall get_FirstSlideNumber(void)
  {
    int FirstSlideNumber;
    OLECHECK(this->get_FirstSlideNumber((int*)&FirstSlideNumber));
    return FirstSlideNumber;
  }

  float __fastcall get_SlideHeight(void)
  {
    float SlideHeight;
    OLECHECK(this->get_SlideHeight((float*)&SlideHeight));
    return SlideHeight;
  }

  float __fastcall get_SlideWidth(void)
  {
    float SlideWidth;
    OLECHECK(this->get_SlideWidth((float*)&SlideWidth));
    return SlideWidth;
  }

  Powerpoint_2k::PpSlideSizeType __fastcall get_SlideSize(void)
  {
    Powerpoint_2k::PpSlideSizeType SlideSize;
    OLECHECK(this->get_SlideSize((Powerpoint_2k::PpSlideSizeType*)&SlideSize));
    return SlideSize;
  }

  Office_2k::MsoOrientation __fastcall get_NotesOrientation(void)
  {
    Office_2k::MsoOrientation NotesOrientation;
    OLECHECK(this->get_NotesOrientation((Office_2k::MsoOrientation*)&NotesOrientation));
    return NotesOrientation;
  }

  Office_2k::MsoOrientation __fastcall get_SlideOrientation(void)
  {
    Office_2k::MsoOrientation SlideOrientation;
    OLECHECK(this->get_SlideOrientation((Office_2k::MsoOrientation*)&SlideOrientation));
    return SlideOrientation;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             FirstSlideNumber = {read = get_FirstSlideNumber, write = set_FirstSlideNumber};
  __property   float           SlideHeight = {read = get_SlideHeight, write = set_SlideHeight};
  __property   float           SlideWidth = {read = get_SlideWidth, write = set_SlideWidth};
  __property   Powerpoint_2k::PpSlideSizeType SlideSize = {read = get_SlideSize, write = set_SlideSize};
  __property   Office_2k::MsoOrientation NotesOrientation = {read = get_NotesOrientation, write = set_NotesOrientation};
  __property   Office_2k::MsoOrientation SlideOrientation = {read = get_SlideOrientation, write = set_SlideOrientation};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Fonts
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493467-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Fonts  : public Powerpoint_2k::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(TVariantInParam index/*[in]*/, 
                                         Powerpoint_2k::FontPtr* Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Replace(BSTR Original/*[in]*/, BSTR Replacement/*[in]*/) = 0; // [2003]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::FontPtr __fastcall Item(TVariantInParam index/*[in]*/)
  {
    Powerpoint_2k::FontPtr Item;
    OLECHECK(this->Item(index, (Powerpoint_2k::FontPtr*)&Item));
    return Item;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ExtraColors
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493468-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface ExtraColors  : public Powerpoint_2k::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(int index/*[in]*/, 
                                         Office_2k::MsoRGBType* Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Add(Office_2k::MsoRGBType Type/*[in]*/) = 0; // [2003]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Office_2k::MsoRGBType __fastcall Item(int index/*[in]*/)
  {
    Office_2k::MsoRGBType Item;
    OLECHECK(this->Item(index, (Office_2k::MsoRGBType*)&Item));
    return Item;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Slides
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493469-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Slides  : public Powerpoint_2k::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(TVariantInParam index/*[in]*/, 
                                         Powerpoint_2k::PowerPointSlidePtr* Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE FindBySlideID(long SlideID/*[in]*/, 
                                                  Powerpoint_2k::PowerPointSlidePtr* FindBySlideID/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE Add(int index/*[in]*/, 
                                        Powerpoint_2k::PpSlideLayout Layout/*[in]*/, 
                                        Powerpoint_2k::PowerPointSlidePtr* Add/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE InsertFromFile(BSTR FileName/*[in]*/, int index/*[in]*/, 
                                                   int SlideStart/*[in,def,opt]*/, 
                                                   int SlideEnd/*[in,def,opt]*/, 
                                                   int* FromFile/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE Range(TVariantInParam index/*[in,opt]*/, 
                                          Powerpoint_2k::SlideRangePtr* Range/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE Paste(int index/*[in,def,opt]*/, 
                                          Powerpoint_2k::SlideRangePtr* Paste/*[out,retval]*/) = 0; // [2007]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::PowerPointSlidePtr __fastcall Item(TVariantInParam index/*[in]*/)
  {
    Powerpoint_2k::PowerPointSlidePtr Item;
    OLECHECK(this->Item(index, (Powerpoint_2k::PowerPointSlidePtr*)&Item));
    return Item;
  }

  Powerpoint_2k::PowerPointSlidePtr __fastcall FindBySlideID(long SlideID/*[in]*/)
  {
    Powerpoint_2k::PowerPointSlidePtr FindBySlideID;
    OLECHECK(this->FindBySlideID(SlideID, (Powerpoint_2k::PowerPointSlidePtr*)&FindBySlideID));
    return FindBySlideID;
  }

  Powerpoint_2k::PowerPointSlidePtr __fastcall Add(int index/*[in]*/, 
                                                   Powerpoint_2k::PpSlideLayout Layout/*[in]*/)
  {
    Powerpoint_2k::PowerPointSlidePtr Add;
    OLECHECK(this->Add(index, Layout, (Powerpoint_2k::PowerPointSlidePtr*)&Add));
    return Add;
  }

  int __fastcall InsertFromFile(BSTR FileName/*[in]*/, int index/*[in]*/, 
                                int SlideStart/*[in,def,opt]*/, int SlideEnd/*[in,def,opt]*/)
  {
    int FromFile;
    OLECHECK(this->InsertFromFile(FileName, index, SlideStart, SlideEnd, (int*)&FromFile));
    return FromFile;
  }

  Powerpoint_2k::SlideRangePtr __fastcall Range(TVariantInParam index/*[in,opt]*/= TNoParam())
  {
    Powerpoint_2k::SlideRangePtr Range;
    OLECHECK(this->Range(index, (Powerpoint_2k::SlideRangePtr*)&Range));
    return Range;
  }

  Powerpoint_2k::SlideRangePtr __fastcall Paste(int index/*[in,def,opt]*/)
  {
    Powerpoint_2k::SlideRangePtr Paste;
    OLECHECK(this->Paste(index, (Powerpoint_2k::SlideRangePtr*)&Paste));
    return Paste;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _Slide
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149346A-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface _Slide  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Shapes(Powerpoint_2k::ShapesPtr* Shapes/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_HeadersFooters(Powerpoint_2k::HeadersFootersPtr* HeadersFooters/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_SlideShowTransition(Powerpoint_2k::SlideShowTransitionPtr* SlideShowTransition/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_ColorScheme(Powerpoint_2k::ColorSchemePtr* ColorScheme/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_ColorScheme(Powerpoint_2k::ColorSchemePtr ColorScheme/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_Background(Powerpoint_2k::ShapeRangePtr* Background/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR Name/*[in]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_SlideID(long* SlideID/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_PrintSteps(int* PrintSteps/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE Select(void) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE Cut(void) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE Copy(void) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE get_Layout(Powerpoint_2k::PpSlideLayout* Layout/*[out,retval]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE set_Layout(Powerpoint_2k::PpSlideLayout Layout/*[in]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE Duplicate(Powerpoint_2k::SlideRangePtr* Duplicate/*[out,retval]*/) = 0; // [2015]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [2016]
  virtual HRESULT STDMETHODCALLTYPE get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/) = 0; // [2017]
  virtual HRESULT STDMETHODCALLTYPE get_SlideIndex(int* SlideIndex/*[out,retval]*/) = 0; // [2018]
  virtual HRESULT STDMETHODCALLTYPE get_SlideNumber(int* SlideNumber/*[out,retval]*/) = 0; // [2019]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayMasterShapes(Office_2k::MsoTriState* DisplayMasterShapes/*[out,retval]*/) = 0; // [2020]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayMasterShapes(Office_2k::MsoTriState DisplayMasterShapes/*[in]*/) = 0; // [2020]
  virtual HRESULT STDMETHODCALLTYPE get_FollowMasterBackground(Office_2k::MsoTriState* FollowMasterBackground/*[out,retval]*/) = 0; // [2021]
  virtual HRESULT STDMETHODCALLTYPE set_FollowMasterBackground(Office_2k::MsoTriState FollowMasterBackground/*[in]*/) = 0; // [2021]
  virtual HRESULT STDMETHODCALLTYPE get_NotesPage(Powerpoint_2k::SlideRangePtr* NotesPage/*[out,retval]*/) = 0; // [2022]
  virtual HRESULT STDMETHODCALLTYPE get_Master(Powerpoint_2k::_MasterPtr* Master/*[out,retval]*/) = 0; // [2023]
  virtual HRESULT STDMETHODCALLTYPE get_Hyperlinks(Powerpoint_2k::HyperlinksPtr* Hyperlinks/*[out,retval]*/) = 0; // [2024]
  virtual HRESULT STDMETHODCALLTYPE Export(BSTR FileName/*[in]*/, BSTR FilterName/*[in]*/, 
                                           int ScaleWidth/*[in,def,opt]*/, 
                                           int ScaleHeight/*[in,def,opt]*/) = 0; // [2025]
  virtual HRESULT STDMETHODCALLTYPE get_Scripts(Office_2k::ScriptsPtr* Scripts/*[out,retval]*/) = 0; // [2026]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::ShapesPtr __fastcall get_Shapes(void)
  {
    Powerpoint_2k::ShapesPtr Shapes;
    OLECHECK(this->get_Shapes((Powerpoint_2k::ShapesPtr*)&Shapes));
    return Shapes;
  }

  Powerpoint_2k::HeadersFootersPtr __fastcall get_HeadersFooters(void)
  {
    Powerpoint_2k::HeadersFootersPtr HeadersFooters;
    OLECHECK(this->get_HeadersFooters((Powerpoint_2k::HeadersFootersPtr*)&HeadersFooters));
    return HeadersFooters;
  }

  Powerpoint_2k::SlideShowTransitionPtr __fastcall get_SlideShowTransition(void)
  {
    Powerpoint_2k::SlideShowTransitionPtr SlideShowTransition;
    OLECHECK(this->get_SlideShowTransition((Powerpoint_2k::SlideShowTransitionPtr*)&SlideShowTransition));
    return SlideShowTransition;
  }

  Powerpoint_2k::ColorSchemePtr __fastcall get_ColorScheme(void)
  {
    Powerpoint_2k::ColorSchemePtr ColorScheme;
    OLECHECK(this->get_ColorScheme((Powerpoint_2k::ColorSchemePtr*)&ColorScheme));
    return ColorScheme;
  }

  Powerpoint_2k::ShapeRangePtr __fastcall get_Background(void)
  {
    Powerpoint_2k::ShapeRangePtr Background;
    OLECHECK(this->get_Background((Powerpoint_2k::ShapeRangePtr*)&Background));
    return Background;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  long __fastcall get_SlideID(void)
  {
    long SlideID;
    OLECHECK(this->get_SlideID((long*)&SlideID));
    return SlideID;
  }

  int __fastcall get_PrintSteps(void)
  {
    int PrintSteps;
    OLECHECK(this->get_PrintSteps((int*)&PrintSteps));
    return PrintSteps;
  }

  Powerpoint_2k::PpSlideLayout __fastcall get_Layout(void)
  {
    Powerpoint_2k::PpSlideLayout Layout;
    OLECHECK(this->get_Layout((Powerpoint_2k::PpSlideLayout*)&Layout));
    return Layout;
  }

  Powerpoint_2k::SlideRangePtr __fastcall Duplicate(void)
  {
    Powerpoint_2k::SlideRangePtr Duplicate;
    OLECHECK(this->Duplicate((Powerpoint_2k::SlideRangePtr*)&Duplicate));
    return Duplicate;
  }

  Powerpoint_2k::TagsPtr __fastcall get_Tags(void)
  {
    Powerpoint_2k::TagsPtr Tags;
    OLECHECK(this->get_Tags((Powerpoint_2k::TagsPtr*)&Tags));
    return Tags;
  }

  int __fastcall get_SlideIndex(void)
  {
    int SlideIndex;
    OLECHECK(this->get_SlideIndex((int*)&SlideIndex));
    return SlideIndex;
  }

  int __fastcall get_SlideNumber(void)
  {
    int SlideNumber;
    OLECHECK(this->get_SlideNumber((int*)&SlideNumber));
    return SlideNumber;
  }

  Office_2k::MsoTriState __fastcall get_DisplayMasterShapes(void)
  {
    Office_2k::MsoTriState DisplayMasterShapes;
    OLECHECK(this->get_DisplayMasterShapes((Office_2k::MsoTriState*)&DisplayMasterShapes));
    return DisplayMasterShapes;
  }

  Office_2k::MsoTriState __fastcall get_FollowMasterBackground(void)
  {
    Office_2k::MsoTriState FollowMasterBackground;
    OLECHECK(this->get_FollowMasterBackground((Office_2k::MsoTriState*)&FollowMasterBackground));
    return FollowMasterBackground;
  }

  Powerpoint_2k::SlideRangePtr __fastcall get_NotesPage(void)
  {
    Powerpoint_2k::SlideRangePtr NotesPage;
    OLECHECK(this->get_NotesPage((Powerpoint_2k::SlideRangePtr*)&NotesPage));
    return NotesPage;
  }

  Powerpoint_2k::_MasterPtr __fastcall get_Master(void)
  {
    Powerpoint_2k::_MasterPtr Master;
    OLECHECK(this->get_Master((Powerpoint_2k::_MasterPtr*)&Master));
    return Master;
  }

  Powerpoint_2k::HyperlinksPtr __fastcall get_Hyperlinks(void)
  {
    Powerpoint_2k::HyperlinksPtr Hyperlinks;
    OLECHECK(this->get_Hyperlinks((Powerpoint_2k::HyperlinksPtr*)&Hyperlinks));
    return Hyperlinks;
  }

  Office_2k::ScriptsPtr __fastcall get_Scripts(void)
  {
    Office_2k::ScriptsPtr Scripts;
    OLECHECK(this->get_Scripts((Office_2k::ScriptsPtr*)&Scripts));
    return Scripts;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::ShapesPtr Shapes = {read = get_Shapes};
  __property   Powerpoint_2k::HeadersFootersPtr HeadersFooters = {read = get_HeadersFooters};
  __property   Powerpoint_2k::SlideShowTransitionPtr SlideShowTransition = {read = get_SlideShowTransition};
  __property   Powerpoint_2k::ColorSchemePtr ColorScheme = {read = get_ColorScheme, write = set_ColorScheme};
  __property   Powerpoint_2k::ShapeRangePtr Background = {read = get_Background};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   long            SlideID = {read = get_SlideID};
  __property   int             PrintSteps = {read = get_PrintSteps};
  __property   Powerpoint_2k::PpSlideLayout Layout = {read = get_Layout, write = set_Layout};
  __property   Powerpoint_2k::TagsPtr Tags = {read = get_Tags};
  __property   int             SlideIndex = {read = get_SlideIndex};
  __property   int             SlideNumber = {read = get_SlideNumber};
  __property   Office_2k::MsoTriState DisplayMasterShapes = {read = get_DisplayMasterShapes, write = set_DisplayMasterShapes};
  __property   Office_2k::MsoTriState FollowMasterBackground = {read = get_FollowMasterBackground, write = set_FollowMasterBackground};
  __property   Powerpoint_2k::SlideRangePtr NotesPage = {read = get_NotesPage};
  __property   Powerpoint_2k::_MasterPtr Master = {read = get_Master};
  __property   Powerpoint_2k::HyperlinksPtr Hyperlinks = {read = get_Hyperlinks};
  __property   Office_2k::ScriptsPtr Scripts = {read = get_Scripts};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: SlideRange
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149346B-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface SlideRange  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Shapes(Powerpoint_2k::ShapesPtr* Shapes/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_HeadersFooters(Powerpoint_2k::HeadersFootersPtr* HeadersFooters/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_SlideShowTransition(Powerpoint_2k::SlideShowTransitionPtr* SlideShowTransition/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_ColorScheme(Powerpoint_2k::ColorSchemePtr* ColorScheme/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_ColorScheme(Powerpoint_2k::ColorSchemePtr ColorScheme/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_Background(Powerpoint_2k::ShapeRangePtr* Background/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR Name/*[in]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_SlideID(long* SlideID/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_PrintSteps(int* PrintSteps/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE Select(void) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE Cut(void) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE Copy(void) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE get_Layout(Powerpoint_2k::PpSlideLayout* Layout/*[out,retval]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE set_Layout(Powerpoint_2k::PpSlideLayout Layout/*[in]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE Duplicate(Powerpoint_2k::SlideRangePtr* Duplicate/*[out,retval]*/) = 0; // [2015]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [2016]
  virtual HRESULT STDMETHODCALLTYPE get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/) = 0; // [2017]
  virtual HRESULT STDMETHODCALLTYPE get_SlideIndex(int* SlideIndex/*[out,retval]*/) = 0; // [2018]
  virtual HRESULT STDMETHODCALLTYPE get_SlideNumber(int* SlideNumber/*[out,retval]*/) = 0; // [2019]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayMasterShapes(Office_2k::MsoTriState* DisplayMasterShapes/*[out,retval]*/) = 0; // [2020]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayMasterShapes(Office_2k::MsoTriState DisplayMasterShapes/*[in]*/) = 0; // [2020]
  virtual HRESULT STDMETHODCALLTYPE get_FollowMasterBackground(Office_2k::MsoTriState* FollowMasterBackground/*[out,retval]*/) = 0; // [2021]
  virtual HRESULT STDMETHODCALLTYPE set_FollowMasterBackground(Office_2k::MsoTriState FollowMasterBackground/*[in]*/) = 0; // [2021]
  virtual HRESULT STDMETHODCALLTYPE get_NotesPage(Powerpoint_2k::SlideRangePtr* NotesPage/*[out,retval]*/) = 0; // [2022]
  virtual HRESULT STDMETHODCALLTYPE get_Master(Powerpoint_2k::_MasterPtr* Master/*[out,retval]*/) = 0; // [2023]
  virtual HRESULT STDMETHODCALLTYPE get_Hyperlinks(Powerpoint_2k::HyperlinksPtr* Hyperlinks/*[out,retval]*/) = 0; // [2024]
  virtual HRESULT STDMETHODCALLTYPE Export(BSTR FileName/*[in]*/, BSTR FilterName/*[in]*/, 
                                           int ScaleWidth/*[in,def,opt]*/, 
                                           int ScaleHeight/*[in,def,opt]*/) = 0; // [2025]
  virtual HRESULT STDMETHODCALLTYPE Item(TVariantInParam index/*[in]*/, 
                                         Powerpoint_2k::PowerPointSlidePtr* Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE _Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_Scripts(Office_2k::ScriptsPtr* Scripts/*[out,retval]*/) = 0; // [2026]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::ShapesPtr __fastcall get_Shapes(void)
  {
    Powerpoint_2k::ShapesPtr Shapes;
    OLECHECK(this->get_Shapes((Powerpoint_2k::ShapesPtr*)&Shapes));
    return Shapes;
  }

  Powerpoint_2k::HeadersFootersPtr __fastcall get_HeadersFooters(void)
  {
    Powerpoint_2k::HeadersFootersPtr HeadersFooters;
    OLECHECK(this->get_HeadersFooters((Powerpoint_2k::HeadersFootersPtr*)&HeadersFooters));
    return HeadersFooters;
  }

  Powerpoint_2k::SlideShowTransitionPtr __fastcall get_SlideShowTransition(void)
  {
    Powerpoint_2k::SlideShowTransitionPtr SlideShowTransition;
    OLECHECK(this->get_SlideShowTransition((Powerpoint_2k::SlideShowTransitionPtr*)&SlideShowTransition));
    return SlideShowTransition;
  }

  Powerpoint_2k::ColorSchemePtr __fastcall get_ColorScheme(void)
  {
    Powerpoint_2k::ColorSchemePtr ColorScheme;
    OLECHECK(this->get_ColorScheme((Powerpoint_2k::ColorSchemePtr*)&ColorScheme));
    return ColorScheme;
  }

  Powerpoint_2k::ShapeRangePtr __fastcall get_Background(void)
  {
    Powerpoint_2k::ShapeRangePtr Background;
    OLECHECK(this->get_Background((Powerpoint_2k::ShapeRangePtr*)&Background));
    return Background;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  long __fastcall get_SlideID(void)
  {
    long SlideID;
    OLECHECK(this->get_SlideID((long*)&SlideID));
    return SlideID;
  }

  int __fastcall get_PrintSteps(void)
  {
    int PrintSteps;
    OLECHECK(this->get_PrintSteps((int*)&PrintSteps));
    return PrintSteps;
  }

  Powerpoint_2k::PpSlideLayout __fastcall get_Layout(void)
  {
    Powerpoint_2k::PpSlideLayout Layout;
    OLECHECK(this->get_Layout((Powerpoint_2k::PpSlideLayout*)&Layout));
    return Layout;
  }

  Powerpoint_2k::SlideRangePtr __fastcall Duplicate(void)
  {
    Powerpoint_2k::SlideRangePtr Duplicate;
    OLECHECK(this->Duplicate((Powerpoint_2k::SlideRangePtr*)&Duplicate));
    return Duplicate;
  }

  Powerpoint_2k::TagsPtr __fastcall get_Tags(void)
  {
    Powerpoint_2k::TagsPtr Tags;
    OLECHECK(this->get_Tags((Powerpoint_2k::TagsPtr*)&Tags));
    return Tags;
  }

  int __fastcall get_SlideIndex(void)
  {
    int SlideIndex;
    OLECHECK(this->get_SlideIndex((int*)&SlideIndex));
    return SlideIndex;
  }

  int __fastcall get_SlideNumber(void)
  {
    int SlideNumber;
    OLECHECK(this->get_SlideNumber((int*)&SlideNumber));
    return SlideNumber;
  }

  Office_2k::MsoTriState __fastcall get_DisplayMasterShapes(void)
  {
    Office_2k::MsoTriState DisplayMasterShapes;
    OLECHECK(this->get_DisplayMasterShapes((Office_2k::MsoTriState*)&DisplayMasterShapes));
    return DisplayMasterShapes;
  }

  Office_2k::MsoTriState __fastcall get_FollowMasterBackground(void)
  {
    Office_2k::MsoTriState FollowMasterBackground;
    OLECHECK(this->get_FollowMasterBackground((Office_2k::MsoTriState*)&FollowMasterBackground));
    return FollowMasterBackground;
  }

  Powerpoint_2k::SlideRangePtr __fastcall get_NotesPage(void)
  {
    Powerpoint_2k::SlideRangePtr NotesPage;
    OLECHECK(this->get_NotesPage((Powerpoint_2k::SlideRangePtr*)&NotesPage));
    return NotesPage;
  }

  Powerpoint_2k::_MasterPtr __fastcall get_Master(void)
  {
    Powerpoint_2k::_MasterPtr Master;
    OLECHECK(this->get_Master((Powerpoint_2k::_MasterPtr*)&Master));
    return Master;
  }

  Powerpoint_2k::HyperlinksPtr __fastcall get_Hyperlinks(void)
  {
    Powerpoint_2k::HyperlinksPtr Hyperlinks;
    OLECHECK(this->get_Hyperlinks((Powerpoint_2k::HyperlinksPtr*)&Hyperlinks));
    return Hyperlinks;
  }

  Powerpoint_2k::PowerPointSlidePtr __fastcall Item(TVariantInParam index/*[in]*/)
  {
    Powerpoint_2k::PowerPointSlidePtr Item;
    OLECHECK(this->Item(index, (Powerpoint_2k::PowerPointSlidePtr*)&Item));
    return Item;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN _NewEnum;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&_NewEnum));
    return _NewEnum;
  }

  TVariant __fastcall _Index(int index/*[in]*/)
  {
    TVariant _Index;
    OLECHECK(this->_Index(index, (TVariant*)&_Index));
    return _Index;
  }

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  Office_2k::ScriptsPtr __fastcall get_Scripts(void)
  {
    Office_2k::ScriptsPtr Scripts;
    OLECHECK(this->get_Scripts((Office_2k::ScriptsPtr*)&Scripts));
    return Scripts;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::ShapesPtr Shapes = {read = get_Shapes};
  __property   Powerpoint_2k::HeadersFootersPtr HeadersFooters = {read = get_HeadersFooters};
  __property   Powerpoint_2k::SlideShowTransitionPtr SlideShowTransition = {read = get_SlideShowTransition};
  __property   Powerpoint_2k::ColorSchemePtr ColorScheme = {read = get_ColorScheme, write = set_ColorScheme};
  __property   Powerpoint_2k::ShapeRangePtr Background = {read = get_Background};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   long            SlideID = {read = get_SlideID};
  __property   int             PrintSteps = {read = get_PrintSteps};
  __property   Powerpoint_2k::PpSlideLayout Layout = {read = get_Layout, write = set_Layout};
  __property   Powerpoint_2k::TagsPtr Tags = {read = get_Tags};
  __property   int             SlideIndex = {read = get_SlideIndex};
  __property   int             SlideNumber = {read = get_SlideNumber};
  __property   Office_2k::MsoTriState DisplayMasterShapes = {read = get_DisplayMasterShapes, write = set_DisplayMasterShapes};
  __property   Office_2k::MsoTriState FollowMasterBackground = {read = get_FollowMasterBackground, write = set_FollowMasterBackground};
  __property   Powerpoint_2k::SlideRangePtr NotesPage = {read = get_NotesPage};
  __property   Powerpoint_2k::_MasterPtr Master = {read = get_Master};
  __property   Powerpoint_2k::HyperlinksPtr Hyperlinks = {read = get_Hyperlinks};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
  __property   Office_2k::ScriptsPtr Scripts = {read = get_Scripts};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _Master
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149346C-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface _Master  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Shapes(Powerpoint_2k::ShapesPtr* Shapes/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_HeadersFooters(Powerpoint_2k::HeadersFootersPtr* HeadersFooters/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_ColorScheme(Powerpoint_2k::ColorSchemePtr* ColorScheme/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_ColorScheme(Powerpoint_2k::ColorSchemePtr ColorScheme/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Background(Powerpoint_2k::ShapeRangePtr* Background/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR Name/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_Height(float* Height/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_Width(float* Width/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE get_TextStyles(Powerpoint_2k::TextStylesPtr* TextStyles/*[out,retval]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE get_Hyperlinks(Powerpoint_2k::HyperlinksPtr* Hyperlinks/*[out,retval]*/) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE get_Scripts(Office_2k::ScriptsPtr* Scripts/*[out,retval]*/) = 0; // [2013]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::ShapesPtr __fastcall get_Shapes(void)
  {
    Powerpoint_2k::ShapesPtr Shapes;
    OLECHECK(this->get_Shapes((Powerpoint_2k::ShapesPtr*)&Shapes));
    return Shapes;
  }

  Powerpoint_2k::HeadersFootersPtr __fastcall get_HeadersFooters(void)
  {
    Powerpoint_2k::HeadersFootersPtr HeadersFooters;
    OLECHECK(this->get_HeadersFooters((Powerpoint_2k::HeadersFootersPtr*)&HeadersFooters));
    return HeadersFooters;
  }

  Powerpoint_2k::ColorSchemePtr __fastcall get_ColorScheme(void)
  {
    Powerpoint_2k::ColorSchemePtr ColorScheme;
    OLECHECK(this->get_ColorScheme((Powerpoint_2k::ColorSchemePtr*)&ColorScheme));
    return ColorScheme;
  }

  Powerpoint_2k::ShapeRangePtr __fastcall get_Background(void)
  {
    Powerpoint_2k::ShapeRangePtr Background;
    OLECHECK(this->get_Background((Powerpoint_2k::ShapeRangePtr*)&Background));
    return Background;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  float __fastcall get_Height(void)
  {
    float Height;
    OLECHECK(this->get_Height((float*)&Height));
    return Height;
  }

  float __fastcall get_Width(void)
  {
    float Width;
    OLECHECK(this->get_Width((float*)&Width));
    return Width;
  }

  Powerpoint_2k::TextStylesPtr __fastcall get_TextStyles(void)
  {
    Powerpoint_2k::TextStylesPtr TextStyles;
    OLECHECK(this->get_TextStyles((Powerpoint_2k::TextStylesPtr*)&TextStyles));
    return TextStyles;
  }

  Powerpoint_2k::HyperlinksPtr __fastcall get_Hyperlinks(void)
  {
    Powerpoint_2k::HyperlinksPtr Hyperlinks;
    OLECHECK(this->get_Hyperlinks((Powerpoint_2k::HyperlinksPtr*)&Hyperlinks));
    return Hyperlinks;
  }

  Office_2k::ScriptsPtr __fastcall get_Scripts(void)
  {
    Office_2k::ScriptsPtr Scripts;
    OLECHECK(this->get_Scripts((Office_2k::ScriptsPtr*)&Scripts));
    return Scripts;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::ShapesPtr Shapes = {read = get_Shapes};
  __property   Powerpoint_2k::HeadersFootersPtr HeadersFooters = {read = get_HeadersFooters};
  __property   Powerpoint_2k::ColorSchemePtr ColorScheme = {read = get_ColorScheme, write = set_ColorScheme};
  __property   Powerpoint_2k::ShapeRangePtr Background = {read = get_Background};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   float           Height = {read = get_Height};
  __property   float           Width = {read = get_Width};
  __property   Powerpoint_2k::TextStylesPtr TextStyles = {read = get_TextStyles};
  __property   Powerpoint_2k::HyperlinksPtr Hyperlinks = {read = get_Hyperlinks};
  __property   Office_2k::ScriptsPtr Scripts = {read = get_Scripts};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: SldEvents
// Flags:     (16) Hidden
// GUID:      {9149346D-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface SldEvents  : public IUnknown
{
public:
};

// *********************************************************************//
// Interface: ColorSchemes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149346E-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface ColorSchemes  : public Powerpoint_2k::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(int index/*[in]*/, 
                                         Powerpoint_2k::ColorSchemePtr* Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Add(Powerpoint_2k::ColorSchemePtr Scheme/*[in,def,opt]*/, 
                                        Powerpoint_2k::ColorSchemePtr* Add/*[out,retval]*/) = 0; // [2003]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::ColorSchemePtr __fastcall Item(int index/*[in]*/)
  {
    Powerpoint_2k::ColorSchemePtr Item;
    OLECHECK(this->Item(index, (Powerpoint_2k::ColorSchemePtr*)&Item));
    return Item;
  }

  Powerpoint_2k::ColorSchemePtr __fastcall Add(Powerpoint_2k::ColorSchemePtr Scheme/*[in,def,opt]*/)
  {
    Powerpoint_2k::ColorSchemePtr Add;
    OLECHECK(this->Add(Scheme, (Powerpoint_2k::ColorSchemePtr*)&Add));
    return Add;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ColorScheme
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149346F-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface ColorScheme  : public Powerpoint_2k::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Colors(Powerpoint_2k::PpColorSchemeIndex SchemeColor/*[in]*/, 
                                           Powerpoint_2k::RGBColorPtr* Colors/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [2003]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::RGBColorPtr __fastcall Colors(Powerpoint_2k::PpColorSchemeIndex SchemeColor/*[in]*/)
  {
    Powerpoint_2k::RGBColorPtr Colors;
    OLECHECK(this->Colors(SchemeColor, (Powerpoint_2k::RGBColorPtr*)&Colors));
    return Colors;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: RGBColor
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493470-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface RGBColor  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_rgb(Office_2k::MsoRGBType* rgb/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_rgb(Office_2k::MsoRGBType rgb/*[in]*/) = 0; // [0]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Office_2k::MsoRGBType __fastcall get_rgb(void)
  {
    Office_2k::MsoRGBType rgb;
    OLECHECK(this->get_rgb((Office_2k::MsoRGBType*)&rgb));
    return rgb;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoRGBType rgb = {read = get_rgb, write = set_rgb};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: SlideShowTransition
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493471-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface SlideShowTransition  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_AdvanceOnClick(Office_2k::MsoTriState* AdvanceOnClick/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_AdvanceOnClick(Office_2k::MsoTriState AdvanceOnClick/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_AdvanceOnTime(Office_2k::MsoTriState* AdvanceOnTime/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_AdvanceOnTime(Office_2k::MsoTriState AdvanceOnTime/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_AdvanceTime(float* AdvanceTime/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_AdvanceTime(float AdvanceTime/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_EntryEffect(Powerpoint_2k::PpEntryEffect* EntryEffect/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_EntryEffect(Powerpoint_2k::PpEntryEffect EntryEffect/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_Hidden(Office_2k::MsoTriState* Hidden/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE set_Hidden(Office_2k::MsoTriState Hidden/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_LoopSoundUntilNext(Office_2k::MsoTriState* LoopSoundUntilNext/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE set_LoopSoundUntilNext(Office_2k::MsoTriState LoopSoundUntilNext/*[in]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_SoundEffect(Powerpoint_2k::SoundEffectPtr* SoundEffect/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_Speed(Powerpoint_2k::PpTransitionSpeed* Speed/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE set_Speed(Powerpoint_2k::PpTransitionSpeed Speed/*[in]*/) = 0; // [2010]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Office_2k::MsoTriState __fastcall get_AdvanceOnClick(void)
  {
    Office_2k::MsoTriState AdvanceOnClick;
    OLECHECK(this->get_AdvanceOnClick((Office_2k::MsoTriState*)&AdvanceOnClick));
    return AdvanceOnClick;
  }

  Office_2k::MsoTriState __fastcall get_AdvanceOnTime(void)
  {
    Office_2k::MsoTriState AdvanceOnTime;
    OLECHECK(this->get_AdvanceOnTime((Office_2k::MsoTriState*)&AdvanceOnTime));
    return AdvanceOnTime;
  }

  float __fastcall get_AdvanceTime(void)
  {
    float AdvanceTime;
    OLECHECK(this->get_AdvanceTime((float*)&AdvanceTime));
    return AdvanceTime;
  }

  Powerpoint_2k::PpEntryEffect __fastcall get_EntryEffect(void)
  {
    Powerpoint_2k::PpEntryEffect EntryEffect;
    OLECHECK(this->get_EntryEffect((Powerpoint_2k::PpEntryEffect*)&EntryEffect));
    return EntryEffect;
  }

  Office_2k::MsoTriState __fastcall get_Hidden(void)
  {
    Office_2k::MsoTriState Hidden;
    OLECHECK(this->get_Hidden((Office_2k::MsoTriState*)&Hidden));
    return Hidden;
  }

  Office_2k::MsoTriState __fastcall get_LoopSoundUntilNext(void)
  {
    Office_2k::MsoTriState LoopSoundUntilNext;
    OLECHECK(this->get_LoopSoundUntilNext((Office_2k::MsoTriState*)&LoopSoundUntilNext));
    return LoopSoundUntilNext;
  }

  Powerpoint_2k::SoundEffectPtr __fastcall get_SoundEffect(void)
  {
    Powerpoint_2k::SoundEffectPtr SoundEffect;
    OLECHECK(this->get_SoundEffect((Powerpoint_2k::SoundEffectPtr*)&SoundEffect));
    return SoundEffect;
  }

  Powerpoint_2k::PpTransitionSpeed __fastcall get_Speed(void)
  {
    Powerpoint_2k::PpTransitionSpeed Speed;
    OLECHECK(this->get_Speed((Powerpoint_2k::PpTransitionSpeed*)&Speed));
    return Speed;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoTriState AdvanceOnClick = {read = get_AdvanceOnClick, write = set_AdvanceOnClick};
  __property   Office_2k::MsoTriState AdvanceOnTime = {read = get_AdvanceOnTime, write = set_AdvanceOnTime};
  __property   float           AdvanceTime = {read = get_AdvanceTime, write = set_AdvanceTime};
  __property   Powerpoint_2k::PpEntryEffect EntryEffect = {read = get_EntryEffect, write = set_EntryEffect};
  __property   Office_2k::MsoTriState Hidden = {read = get_Hidden, write = set_Hidden};
  __property   Office_2k::MsoTriState LoopSoundUntilNext = {read = get_LoopSoundUntilNext, write = set_LoopSoundUntilNext};
  __property   Powerpoint_2k::SoundEffectPtr SoundEffect = {read = get_SoundEffect};
  __property   Powerpoint_2k::PpTransitionSpeed Speed = {read = get_Speed, write = set_Speed};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: SoundEffect
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493472-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface SoundEffect  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR Name/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Powerpoint_2k::PpSoundEffectType* Type/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_Type(Powerpoint_2k::PpSoundEffectType Type/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE ImportFromFile(BSTR FileName/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE Play(void) = 0; // [2006]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  Powerpoint_2k::PpSoundEffectType __fastcall get_Type(void)
  {
    Powerpoint_2k::PpSoundEffectType Type;
    OLECHECK(this->get_Type((Powerpoint_2k::PpSoundEffectType*)&Type));
    return Type;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   Powerpoint_2k::PpSoundEffectType Type = {read = get_Type, write = set_Type};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: SoundFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493473-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface SoundFormat  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE Play(void) = 0; // [2000]
  virtual HRESULT STDMETHODCALLTYPE Import(BSTR FileName/*[in]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE Export(BSTR FileName/*[in]*/, 
                                           Powerpoint_2k::PpSoundFormatType* Export/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Powerpoint_2k::PpSoundFormatType* Type/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_SourceFullName(BSTR* SourceFullName/*[out,retval]*/) = 0; // [2004]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PpSoundFormatType __fastcall Export(BSTR FileName/*[in]*/)
  {
    Powerpoint_2k::PpSoundFormatType Export;
    OLECHECK(this->Export(FileName, (Powerpoint_2k::PpSoundFormatType*)&Export));
    return Export;
  }

  Powerpoint_2k::PpSoundFormatType __fastcall get_Type(void)
  {
    Powerpoint_2k::PpSoundFormatType Type;
    OLECHECK(this->get_Type((Powerpoint_2k::PpSoundFormatType*)&Type));
    return Type;
  }

  BSTR __fastcall get_SourceFullName(void)
  {
    BSTR SourceFullName = 0;
    OLECHECK(this->get_SourceFullName((BSTR*)&SourceFullName));
    return SourceFullName;
  }


  __property   Powerpoint_2k::PpSoundFormatType Type = {read = get_Type};
  __property   BSTR            SourceFullName = {read = get_SourceFullName};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: HeadersFooters
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493474-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface HeadersFooters  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_DateAndTime(Powerpoint_2k::HeaderFooterPtr* DateAndTime/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_SlideNumber(Powerpoint_2k::HeaderFooterPtr* SlideNumber/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_Header(Powerpoint_2k::HeaderFooterPtr* Header/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Footer(Powerpoint_2k::HeaderFooterPtr* Footer/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayOnTitleSlide(Office_2k::MsoTriState* DisplayOnTitleSlide/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayOnTitleSlide(Office_2k::MsoTriState DisplayOnTitleSlide/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE Clear(void) = 0; // [2008]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::HeaderFooterPtr __fastcall get_DateAndTime(void)
  {
    Powerpoint_2k::HeaderFooterPtr DateAndTime;
    OLECHECK(this->get_DateAndTime((Powerpoint_2k::HeaderFooterPtr*)&DateAndTime));
    return DateAndTime;
  }

  Powerpoint_2k::HeaderFooterPtr __fastcall get_SlideNumber(void)
  {
    Powerpoint_2k::HeaderFooterPtr SlideNumber;
    OLECHECK(this->get_SlideNumber((Powerpoint_2k::HeaderFooterPtr*)&SlideNumber));
    return SlideNumber;
  }

  Powerpoint_2k::HeaderFooterPtr __fastcall get_Header(void)
  {
    Powerpoint_2k::HeaderFooterPtr Header;
    OLECHECK(this->get_Header((Powerpoint_2k::HeaderFooterPtr*)&Header));
    return Header;
  }

  Powerpoint_2k::HeaderFooterPtr __fastcall get_Footer(void)
  {
    Powerpoint_2k::HeaderFooterPtr Footer;
    OLECHECK(this->get_Footer((Powerpoint_2k::HeaderFooterPtr*)&Footer));
    return Footer;
  }

  Office_2k::MsoTriState __fastcall get_DisplayOnTitleSlide(void)
  {
    Office_2k::MsoTriState DisplayOnTitleSlide;
    OLECHECK(this->get_DisplayOnTitleSlide((Office_2k::MsoTriState*)&DisplayOnTitleSlide));
    return DisplayOnTitleSlide;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::HeaderFooterPtr DateAndTime = {read = get_DateAndTime};
  __property   Powerpoint_2k::HeaderFooterPtr SlideNumber = {read = get_SlideNumber};
  __property   Powerpoint_2k::HeaderFooterPtr Header = {read = get_Header};
  __property   Powerpoint_2k::HeaderFooterPtr Footer = {read = get_Footer};
  __property   Office_2k::MsoTriState DisplayOnTitleSlide = {read = get_DisplayOnTitleSlide, write = set_DisplayOnTitleSlide};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Shapes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493475-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Shapes  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Creator(long* plCreator/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Count(int* Count/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE Item(TVariantInParam index/*[in]*/, 
                                         Powerpoint_2k::ShapePtr* Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE AddCallout(Office_2k::MsoCalloutType Type/*[in]*/, 
                                               float Left/*[in]*/, float Top/*[in]*/, 
                                               float Width/*[in]*/, float Height/*[in]*/, 
                                               Powerpoint_2k::ShapePtr* Callout/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE AddConnector(Office_2k::MsoConnectorType Type/*[in]*/, 
                                                 float BeginX/*[in]*/, float BeginY/*[in]*/, 
                                                 float EndX/*[in]*/, float EndY/*[in]*/, 
                                                 Powerpoint_2k::ShapePtr* Connector/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE AddCurve(TVariantInParam SafeArrayOfPoints/*[in]*/, 
                                             Powerpoint_2k::ShapePtr* Curve/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE AddLabel(Office_2k::MsoTextOrientation Orientation/*[in]*/, 
                                             float Left/*[in]*/, float Top/*[in]*/, 
                                             float Width/*[in]*/, float Height/*[in]*/, 
                                             Powerpoint_2k::ShapePtr* Label/*[out,retval]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE AddLine(float BeginX/*[in]*/, float BeginY/*[in]*/, 
                                            float EndX/*[in]*/, float EndY/*[in]*/, 
                                            Powerpoint_2k::ShapePtr* Line/*[out,retval]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE AddPicture(BSTR FileName/*[in]*/, 
                                               Office_2k::MsoTriState LinkToFile/*[in]*/, 
                                               Office_2k::MsoTriState SaveWithDocument/*[in]*/, 
                                               float Left/*[in]*/, float Top/*[in]*/, 
                                               float Width/*[in,def,opt]*/, 
                                               float Height/*[in,def,opt]*/, 
                                               Powerpoint_2k::ShapePtr* Picture/*[out,retval]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE AddPolyline(TVariantInParam SafeArrayOfPoints/*[in]*/, 
                                                Powerpoint_2k::ShapePtr* Polyline/*[out,retval]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE AddShape(Office_2k::MsoAutoShapeType Type/*[in]*/, 
                                             float Left/*[in]*/, float Top/*[in]*/, 
                                             float Width/*[in]*/, float Height/*[in]*/, 
                                             Powerpoint_2k::ShapePtr* Shape/*[out,retval]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE AddTextEffect(Office_2k::MsoPresetTextEffect PresetTextEffect/*[in]*/, 
                                                  BSTR Text/*[in]*/, BSTR FontName/*[in]*/, 
                                                  float FontSize/*[in]*/, 
                                                  Office_2k::MsoTriState FontBold/*[in]*/, 
                                                  Office_2k::MsoTriState FontItalic/*[in]*/, 
                                                  float Left/*[in]*/, float Top/*[in]*/, 
                                                  Powerpoint_2k::ShapePtr* TextEffect/*[out,retval]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE AddTextbox(Office_2k::MsoTextOrientation Orientation/*[in]*/, 
                                               float Left/*[in]*/, float Top/*[in]*/, 
                                               float Width/*[in]*/, float Height/*[in]*/, 
                                               Powerpoint_2k::ShapePtr* Textbox/*[out,retval]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE BuildFreeform(Office_2k::MsoEditingType EditingType/*[in]*/, 
                                                  float X1/*[in]*/, float Y1/*[in]*/, 
                                                  Powerpoint_2k::FreeformBuilderPtr* FreeformBuilder/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE SelectAll(void) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE Range(TVariantInParam index/*[in,opt]*/, 
                                          Powerpoint_2k::ShapeRangePtr* Range/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_HasTitle(Office_2k::MsoTriState* HasTitle/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE AddTitle(Powerpoint_2k::ShapePtr* Title/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Title(Powerpoint_2k::ShapePtr* Title/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_Placeholders(Powerpoint_2k::PlaceholdersPtr* Placeholders/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE AddOLEObject(float Left/*[in,def,opt]*/, 
                                                 float Top/*[in,def,opt]*/, 
                                                 float Width/*[in,def,opt]*/, 
                                                 float Height/*[in,def,opt]*/, 
                                                 BSTR ClassName/*[in,def,opt]*/, 
                                                 BSTR FileName/*[in,def,opt]*/, 
                                                 Office_2k::MsoTriState DisplayAsIcon/*[in,def,opt]*/, 
                                                 BSTR IconFileName/*[in,def,opt]*/, 
                                                 int IconIndex/*[in,def,opt]*/, 
                                                 BSTR IconLabel/*[in,def,opt]*/, 
                                                 Office_2k::MsoTriState Link/*[in,def,opt]*/, 
                                                 Powerpoint_2k::ShapePtr* OLEObject/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE AddComment(float Left/*[in,def,opt]*/, float Top/*[in,def,opt]*/, 
                                               float Width/*[in,def,opt]*/, 
                                               float Height/*[in,def,opt]*/, 
                                               Powerpoint_2k::ShapePtr* Comment/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE AddPlaceholder(Powerpoint_2k::PpPlaceholderType Type/*[in]*/, 
                                                   float Left/*[in,def,opt]*/, 
                                                   float Top/*[in,def,opt]*/, 
                                                   float Width/*[in,def,opt]*/, 
                                                   float Height/*[in,def,opt]*/, 
                                                   Powerpoint_2k::ShapePtr* Placeholder/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE AddMediaObject(BSTR FileName/*[in]*/, float Left/*[in,def,opt]*/, 
                                                   float Top/*[in,def,opt]*/, 
                                                   float Width/*[in,def,opt]*/, 
                                                   float Height/*[in,def,opt]*/, 
                                                   Powerpoint_2k::ShapePtr* MediaObject/*[out,retval]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE Paste(Powerpoint_2k::ShapeRangePtr* Paste/*[out,retval]*/) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE AddTable(int NumRows/*[in]*/, int NumColumns/*[in]*/, 
                                             float Left/*[in,def,opt]*/, float Top/*[in,def,opt]*/, 
                                             float Width/*[in,def,opt]*/, 
                                             float Height/*[in,def,opt]*/, 
                                             Powerpoint_2k::ShapePtr* Table/*[out,retval]*/) = 0; // [2013]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Application(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Application((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  long __fastcall get_Creator(void)
  {
    long plCreator;
    OLECHECK(this->get_Creator((long*)&plCreator));
    return plCreator;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  int __fastcall get_Count(void)
  {
    int Count;
    OLECHECK(this->get_Count((int*)&Count));
    return Count;
  }

  Powerpoint_2k::ShapePtr __fastcall Item(TVariantInParam index/*[in]*/)
  {
    Powerpoint_2k::ShapePtr Item;
    OLECHECK(this->Item(index, (Powerpoint_2k::ShapePtr*)&Item));
    return Item;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN _NewEnum;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&_NewEnum));
    return _NewEnum;
  }

  Powerpoint_2k::ShapePtr __fastcall AddCallout(Office_2k::MsoCalloutType Type/*[in]*/, 
                                                float Left/*[in]*/, float Top/*[in]*/, 
                                                float Width/*[in]*/, float Height/*[in]*/)
  {
    Powerpoint_2k::ShapePtr Callout;
    OLECHECK(this->AddCallout(Type, Left, Top, Width, Height, (Powerpoint_2k::ShapePtr*)&Callout));
    return Callout;
  }

  Powerpoint_2k::ShapePtr __fastcall AddConnector(Office_2k::MsoConnectorType Type/*[in]*/, 
                                                  float BeginX/*[in]*/, float BeginY/*[in]*/, 
                                                  float EndX/*[in]*/, float EndY/*[in]*/)
  {
    Powerpoint_2k::ShapePtr Connector;
    OLECHECK(this->AddConnector(Type, BeginX, BeginY, EndX, EndY, (Powerpoint_2k::ShapePtr*)&Connector));
    return Connector;
  }

  Powerpoint_2k::ShapePtr __fastcall AddCurve(TVariantInParam SafeArrayOfPoints/*[in]*/)
  {
    Powerpoint_2k::ShapePtr Curve;
    OLECHECK(this->AddCurve(SafeArrayOfPoints, (Powerpoint_2k::ShapePtr*)&Curve));
    return Curve;
  }

  Powerpoint_2k::ShapePtr __fastcall AddLabel(Office_2k::MsoTextOrientation Orientation/*[in]*/, 
                                              float Left/*[in]*/, float Top/*[in]*/, 
                                              float Width/*[in]*/, float Height/*[in]*/)
  {
    Powerpoint_2k::ShapePtr Label;
    OLECHECK(this->AddLabel(Orientation, Left, Top, Width, Height, (Powerpoint_2k::ShapePtr*)&Label));
    return Label;
  }

  Powerpoint_2k::ShapePtr __fastcall AddLine(float BeginX/*[in]*/, float BeginY/*[in]*/, 
                                             float EndX/*[in]*/, float EndY/*[in]*/)
  {
    Powerpoint_2k::ShapePtr Line;
    OLECHECK(this->AddLine(BeginX, BeginY, EndX, EndY, (Powerpoint_2k::ShapePtr*)&Line));
    return Line;
  }

  Powerpoint_2k::ShapePtr __fastcall AddPicture(BSTR FileName/*[in]*/, 
                                                Office_2k::MsoTriState LinkToFile/*[in]*/, 
                                                Office_2k::MsoTriState SaveWithDocument/*[in]*/, 
                                                float Left/*[in]*/, float Top/*[in]*/, 
                                                float Width/*[in,def,opt]*/, 
                                                float Height/*[in,def,opt]*/)
  {
    Powerpoint_2k::ShapePtr Picture;
    OLECHECK(this->AddPicture(FileName, LinkToFile, SaveWithDocument, Left, Top, Width, Height, (Powerpoint_2k::ShapePtr*)&Picture));
    return Picture;
  }

  Powerpoint_2k::ShapePtr __fastcall AddPolyline(TVariantInParam SafeArrayOfPoints/*[in]*/)
  {
    Powerpoint_2k::ShapePtr Polyline;
    OLECHECK(this->AddPolyline(SafeArrayOfPoints, (Powerpoint_2k::ShapePtr*)&Polyline));
    return Polyline;
  }

  Powerpoint_2k::ShapePtr __fastcall AddShape(Office_2k::MsoAutoShapeType Type/*[in]*/, 
                                              float Left/*[in]*/, float Top/*[in]*/, 
                                              float Width/*[in]*/, float Height/*[in]*/)
  {
    Powerpoint_2k::ShapePtr Shape;
    OLECHECK(this->AddShape(Type, Left, Top, Width, Height, (Powerpoint_2k::ShapePtr*)&Shape));
    return Shape;
  }

  Powerpoint_2k::ShapePtr __fastcall AddTextEffect(Office_2k::MsoPresetTextEffect PresetTextEffect/*[in]*/, 
                                                   BSTR Text/*[in]*/, BSTR FontName/*[in]*/, 
                                                   float FontSize/*[in]*/, 
                                                   Office_2k::MsoTriState FontBold/*[in]*/, 
                                                   Office_2k::MsoTriState FontItalic/*[in]*/, 
                                                   float Left/*[in]*/, float Top/*[in]*/)
  {
    Powerpoint_2k::ShapePtr TextEffect;
    OLECHECK(this->AddTextEffect(PresetTextEffect, Text, FontName, FontSize, FontBold, FontItalic, 
                                 Left, Top, (Powerpoint_2k::ShapePtr*)&TextEffect));
    return TextEffect;
  }

  Powerpoint_2k::ShapePtr __fastcall AddTextbox(Office_2k::MsoTextOrientation Orientation/*[in]*/, 
                                                float Left/*[in]*/, float Top/*[in]*/, 
                                                float Width/*[in]*/, float Height/*[in]*/)
  {
    Powerpoint_2k::ShapePtr Textbox;
    OLECHECK(this->AddTextbox(Orientation, Left, Top, Width, Height, (Powerpoint_2k::ShapePtr*)&Textbox));
    return Textbox;
  }

  Powerpoint_2k::FreeformBuilderPtr __fastcall BuildFreeform(Office_2k::MsoEditingType EditingType/*[in]*/, 
                                                             float X1/*[in]*/, float Y1/*[in]*/)
  {
    Powerpoint_2k::FreeformBuilderPtr FreeformBuilder;
    OLECHECK(this->BuildFreeform(EditingType, X1, Y1, (Powerpoint_2k::FreeformBuilderPtr*)&FreeformBuilder));
    return FreeformBuilder;
  }

  Powerpoint_2k::ShapeRangePtr __fastcall Range(TVariantInParam index/*[in,opt]*/= TNoParam())
  {
    Powerpoint_2k::ShapeRangePtr Range;
    OLECHECK(this->Range(index, (Powerpoint_2k::ShapeRangePtr*)&Range));
    return Range;
  }

  Office_2k::MsoTriState __fastcall get_HasTitle(void)
  {
    Office_2k::MsoTriState HasTitle;
    OLECHECK(this->get_HasTitle((Office_2k::MsoTriState*)&HasTitle));
    return HasTitle;
  }

  Powerpoint_2k::ShapePtr __fastcall AddTitle(void)
  {
    Powerpoint_2k::ShapePtr Title;
    OLECHECK(this->AddTitle((Powerpoint_2k::ShapePtr*)&Title));
    return Title;
  }

  Powerpoint_2k::ShapePtr __fastcall get_Title(void)
  {
    Powerpoint_2k::ShapePtr Title;
    OLECHECK(this->get_Title((Powerpoint_2k::ShapePtr*)&Title));
    return Title;
  }

  Powerpoint_2k::PlaceholdersPtr __fastcall get_Placeholders(void)
  {
    Powerpoint_2k::PlaceholdersPtr Placeholders;
    OLECHECK(this->get_Placeholders((Powerpoint_2k::PlaceholdersPtr*)&Placeholders));
    return Placeholders;
  }

  Powerpoint_2k::ShapePtr __fastcall AddOLEObject(float Left/*[in,def,opt]*/, 
                                                  float Top/*[in,def,opt]*/, 
                                                  float Width/*[in,def,opt]*/, 
                                                  float Height/*[in,def,opt]*/, 
                                                  BSTR ClassName/*[in,def,opt]*/, 
                                                  BSTR FileName/*[in,def,opt]*/, 
                                                  Office_2k::MsoTriState DisplayAsIcon/*[in,def,opt]*/, 
                                                  BSTR IconFileName/*[in,def,opt]*/, 
                                                  int IconIndex/*[in,def,opt]*/, 
                                                  BSTR IconLabel/*[in,def,opt]*/, 
                                                  Office_2k::MsoTriState Link/*[in,def,opt]*/)
  {
    Powerpoint_2k::ShapePtr OLEObject;
    OLECHECK(this->AddOLEObject(Left, Top, Width, Height, ClassName, FileName, DisplayAsIcon, 
                                IconFileName, IconIndex, IconLabel, Link, (Powerpoint_2k::ShapePtr*)&OLEObject));
    return OLEObject;
  }

  Powerpoint_2k::ShapePtr __fastcall AddComment(float Left/*[in,def,opt]*/, 
                                                float Top/*[in,def,opt]*/, 
                                                float Width/*[in,def,opt]*/, 
                                                float Height/*[in,def,opt]*/)
  {
    Powerpoint_2k::ShapePtr Comment;
    OLECHECK(this->AddComment(Left, Top, Width, Height, (Powerpoint_2k::ShapePtr*)&Comment));
    return Comment;
  }

  Powerpoint_2k::ShapePtr __fastcall AddPlaceholder(Powerpoint_2k::PpPlaceholderType Type/*[in]*/, 
                                                    float Left/*[in,def,opt]*/, 
                                                    float Top/*[in,def,opt]*/, 
                                                    float Width/*[in,def,opt]*/, 
                                                    float Height/*[in,def,opt]*/)
  {
    Powerpoint_2k::ShapePtr Placeholder;
    OLECHECK(this->AddPlaceholder(Type, Left, Top, Width, Height, (Powerpoint_2k::ShapePtr*)&Placeholder));
    return Placeholder;
  }

  Powerpoint_2k::ShapePtr __fastcall AddMediaObject(BSTR FileName/*[in]*/, 
                                                    float Left/*[in,def,opt]*/, 
                                                    float Top/*[in,def,opt]*/, 
                                                    float Width/*[in,def,opt]*/, 
                                                    float Height/*[in,def,opt]*/)
  {
    Powerpoint_2k::ShapePtr MediaObject;
    OLECHECK(this->AddMediaObject(FileName, Left, Top, Width, Height, (Powerpoint_2k::ShapePtr*)&MediaObject));
    return MediaObject;
  }

  Powerpoint_2k::ShapeRangePtr __fastcall Paste(void)
  {
    Powerpoint_2k::ShapeRangePtr Paste;
    OLECHECK(this->Paste((Powerpoint_2k::ShapeRangePtr*)&Paste));
    return Paste;
  }

  Powerpoint_2k::ShapePtr __fastcall AddTable(int NumRows/*[in]*/, int NumColumns/*[in]*/, 
                                              float Left/*[in,def,opt]*/, float Top/*[in,def,opt]*/, 
                                              float Width/*[in,def,opt]*/, 
                                              float Height/*[in,def,opt]*/)
  {
    Powerpoint_2k::ShapePtr Table;
    OLECHECK(this->AddTable(NumRows, NumColumns, Left, Top, Width, Height, (Powerpoint_2k::ShapePtr*)&Table));
    return Table;
  }


  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   Office_2k::MsoTriState HasTitle = {read = get_HasTitle};
  __property   Powerpoint_2k::ShapePtr Title = {read = get_Title};
  __property   Powerpoint_2k::PlaceholdersPtr Placeholders = {read = get_Placeholders};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Placeholders
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493476-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Placeholders  : public Powerpoint_2k::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(int index/*[in]*/, 
                                         Powerpoint_2k::ShapePtr* Item/*[out,retval]*/) = 0; // [0]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::ShapePtr __fastcall Item(int index/*[in]*/)
  {
    Powerpoint_2k::ShapePtr Item;
    OLECHECK(this->Item(index, (Powerpoint_2k::ShapePtr*)&Item));
    return Item;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PlaceholderFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493477-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface PlaceholderFormat  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Powerpoint_2k::PpPlaceholderType* Type/*[out,retval]*/) = 0; // [2003]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::PpPlaceholderType __fastcall get_Type(void)
  {
    Powerpoint_2k::PpPlaceholderType Type;
    OLECHECK(this->get_Type((Powerpoint_2k::PpPlaceholderType*)&Type));
    return Type;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::PpPlaceholderType Type = {read = get_Type};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: FreeformBuilder
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493478-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface FreeformBuilder  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Creator(long* plCreator/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE AddNodes(Office_2k::MsoSegmentType SegmentType/*[in]*/, 
                                             Office_2k::MsoEditingType EditingType/*[in]*/, 
                                             float X1/*[in]*/, float Y1/*[in]*/, 
                                             float X2/*[in,def,opt]*/, float Y2/*[in,def,opt]*/, 
                                             float X3/*[in,def,opt]*/, float Y3/*[in,def,opt]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE ConvertToShape(Powerpoint_2k::ShapePtr* Freeform/*[out,retval]*/) = 0; // [11]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Application(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Application((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  long __fastcall get_Creator(void)
  {
    long plCreator;
    OLECHECK(this->get_Creator((long*)&plCreator));
    return plCreator;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::ShapePtr __fastcall ConvertToShape(void)
  {
    Powerpoint_2k::ShapePtr Freeform;
    OLECHECK(this->ConvertToShape((Powerpoint_2k::ShapePtr*)&Freeform));
    return Freeform;
  }


  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Shape
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493479-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Shape  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Creator(long* plCreator/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE Apply(void) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE Flip(Office_2k::MsoFlipCmd FlipCmd/*[in]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE IncrementLeft(float Increment/*[in]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE IncrementRotation(float Increment/*[in]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE IncrementTop(float Increment/*[in]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE PickUp(void) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE RerouteConnections(void) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE ScaleHeight(float Factor/*[in]*/, 
                                                Office_2k::MsoTriState RelativeToOriginalSize/*[in]*/, 
                                                Office_2k::MsoScaleFrom fScale/*[in,def,opt]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE ScaleWidth(float Factor/*[in]*/, 
                                               Office_2k::MsoTriState RelativeToOriginalSize/*[in]*/, 
                                               Office_2k::MsoScaleFrom fScale/*[in,def,opt]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE SetShapesDefaultProperties(void) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE Ungroup(Powerpoint_2k::ShapeRangePtr* Ungroup/*[out,retval]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE ZOrder(Office_2k::MsoZOrderCmd ZOrderCmd/*[in]*/) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE get_Adjustments(Powerpoint_2k::AdjustmentsPtr* Adjustments/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_AutoShapeType(Office_2k::MsoAutoShapeType* AutoShapeType/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_AutoShapeType(Office_2k::MsoAutoShapeType AutoShapeType/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_BlackWhiteMode(Office_2k::MsoBlackWhiteMode* BlackWhiteMode/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_BlackWhiteMode(Office_2k::MsoBlackWhiteMode BlackWhiteMode/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_Callout(Powerpoint_2k::CalloutFormatPtr* Callout/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_ConnectionSiteCount(int* ConnectionSiteCount/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_Connector(Office_2k::MsoTriState* Connector/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_ConnectorFormat(Powerpoint_2k::ConnectorFormatPtr* ConnectorFormat/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_Fill(Powerpoint_2k::FillFormatPtr* Fill/*[out,retval]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE get_GroupItems(Powerpoint_2k::GroupShapesPtr* GroupItems/*[out,retval]*/) = 0; // [108]
  virtual HRESULT STDMETHODCALLTYPE get_Height(float* Height/*[out,retval]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE set_Height(float Height/*[in]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE get_HorizontalFlip(Office_2k::MsoTriState* HorizontalFlip/*[out,retval]*/) = 0; // [110]
  virtual HRESULT STDMETHODCALLTYPE get_Left(float* Left/*[out,retval]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE set_Left(float Left/*[in]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE get_Line(Powerpoint_2k::LineFormatPtr* Line/*[out,retval]*/) = 0; // [112]
  virtual HRESULT STDMETHODCALLTYPE get_LockAspectRatio(Office_2k::MsoTriState* LockAspectRatio/*[out,retval]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE set_LockAspectRatio(Office_2k::MsoTriState LockAspectRatio/*[in]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [115]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR Name/*[in]*/) = 0; // [115]
  virtual HRESULT STDMETHODCALLTYPE get_Nodes(Powerpoint_2k::ShapeNodesPtr* Nodes/*[out,retval]*/) = 0; // [116]
  virtual HRESULT STDMETHODCALLTYPE get_Rotation(float* Rotation/*[out,retval]*/) = 0; // [117]
  virtual HRESULT STDMETHODCALLTYPE set_Rotation(float Rotation/*[in]*/) = 0; // [117]
  virtual HRESULT STDMETHODCALLTYPE get_PictureFormat(Powerpoint_2k::PictureFormatPtr* Picture/*[out,retval]*/) = 0; // [118]
  virtual HRESULT STDMETHODCALLTYPE get_Shadow(Powerpoint_2k::ShadowFormatPtr* Shadow/*[out,retval]*/) = 0; // [119]
  virtual HRESULT STDMETHODCALLTYPE get_TextEffect(Powerpoint_2k::TextEffectFormatPtr* TextEffect/*[out,retval]*/) = 0; // [120]
  virtual HRESULT STDMETHODCALLTYPE get_TextFrame(Powerpoint_2k::TextFramePtr* TextFrame/*[out,retval]*/) = 0; // [121]
  virtual HRESULT STDMETHODCALLTYPE get_ThreeD(Powerpoint_2k::ThreeDFormatPtr* ThreeD/*[out,retval]*/) = 0; // [122]
  virtual HRESULT STDMETHODCALLTYPE get_Top(float* Top/*[out,retval]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE set_Top(float Top/*[in]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Office_2k::MsoShapeType* Type/*[out,retval]*/) = 0; // [124]
  virtual HRESULT STDMETHODCALLTYPE get_VerticalFlip(Office_2k::MsoTriState* VerticalFlip/*[out,retval]*/) = 0; // [125]
  virtual HRESULT STDMETHODCALLTYPE get_Vertices(TVariant* Vertices/*[out,retval]*/) = 0; // [126]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/) = 0; // [127]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(Office_2k::MsoTriState Visible/*[in]*/) = 0; // [127]
  virtual HRESULT STDMETHODCALLTYPE get_Width(float* Width/*[out,retval]*/) = 0; // [128]
  virtual HRESULT STDMETHODCALLTYPE set_Width(float Width/*[in]*/) = 0; // [128]
  virtual HRESULT STDMETHODCALLTYPE get_ZOrderPosition(int* ZOrderPosition/*[out,retval]*/) = 0; // [129]
  virtual HRESULT STDMETHODCALLTYPE get_OLEFormat(Powerpoint_2k::OLEFormatPtr* OLEFormat/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_LinkFormat(Powerpoint_2k::LinkFormatPtr* LinkFormat/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_PlaceholderFormat(Powerpoint_2k::PlaceholderFormatPtr* PlaceholderFormat/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_AnimationSettings(Powerpoint_2k::AnimationSettingsPtr* AnimationSettings/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_ActionSettings(Powerpoint_2k::ActionSettingsPtr* ActionSettings/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE Cut(void) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE Copy(void) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE Select(Office_2k::MsoTriState Replace/*[in,def,opt]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE Duplicate(Powerpoint_2k::ShapeRangePtr* Duplicate/*[out,retval]*/) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE get_MediaType(Powerpoint_2k::PpMediaType* MediaType/*[out,retval]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE get_HasTextFrame(Office_2k::MsoTriState* HasTextFrame/*[out,retval]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE get_SoundFormat(Powerpoint_2k::SoundFormatPtr* SoundFormat/*[out,retval]*/) = 0; // [2015]
  virtual HRESULT STDMETHODCALLTYPE get_Script(Office_2k::ScriptPtr* Script/*[out,retval]*/) = 0; // [130]
  virtual HRESULT STDMETHODCALLTYPE get_AlternativeText(BSTR* AlternativeText/*[out,retval]*/) = 0; // [131]
  virtual HRESULT STDMETHODCALLTYPE set_AlternativeText(BSTR AlternativeText/*[in]*/) = 0; // [131]
  virtual HRESULT STDMETHODCALLTYPE get_HasTable(Office_2k::MsoTriState* HasTable/*[out,retval]*/) = 0; // [2016]
  virtual HRESULT STDMETHODCALLTYPE get_Table(Powerpoint_2k::TablePtr* Table/*[out,retval]*/) = 0; // [2017]
  virtual HRESULT STDMETHODCALLTYPE Export(BSTR PathName/*[in]*/, 
                                           Powerpoint_2k::PpShapeFormat Filter/*[in]*/, 
                                           int ScaleWidth/*[in,def,opt]*/, 
                                           int ScaleHeight/*[in,def,opt]*/, 
                                           Powerpoint_2k::PpExportMode ExportMode/*[in,def,opt]*/) = 0; // [2018]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Application(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Application((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  long __fastcall get_Creator(void)
  {
    long plCreator;
    OLECHECK(this->get_Creator((long*)&plCreator));
    return plCreator;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::ShapeRangePtr __fastcall Ungroup(void)
  {
    Powerpoint_2k::ShapeRangePtr Ungroup;
    OLECHECK(this->Ungroup((Powerpoint_2k::ShapeRangePtr*)&Ungroup));
    return Ungroup;
  }

  Powerpoint_2k::AdjustmentsPtr __fastcall get_Adjustments(void)
  {
    Powerpoint_2k::AdjustmentsPtr Adjustments;
    OLECHECK(this->get_Adjustments((Powerpoint_2k::AdjustmentsPtr*)&Adjustments));
    return Adjustments;
  }

  Office_2k::MsoAutoShapeType __fastcall get_AutoShapeType(void)
  {
    Office_2k::MsoAutoShapeType AutoShapeType;
    OLECHECK(this->get_AutoShapeType((Office_2k::MsoAutoShapeType*)&AutoShapeType));
    return AutoShapeType;
  }

  Office_2k::MsoBlackWhiteMode __fastcall get_BlackWhiteMode(void)
  {
    Office_2k::MsoBlackWhiteMode BlackWhiteMode;
    OLECHECK(this->get_BlackWhiteMode((Office_2k::MsoBlackWhiteMode*)&BlackWhiteMode));
    return BlackWhiteMode;
  }

  Powerpoint_2k::CalloutFormatPtr __fastcall get_Callout(void)
  {
    Powerpoint_2k::CalloutFormatPtr Callout;
    OLECHECK(this->get_Callout((Powerpoint_2k::CalloutFormatPtr*)&Callout));
    return Callout;
  }

  int __fastcall get_ConnectionSiteCount(void)
  {
    int ConnectionSiteCount;
    OLECHECK(this->get_ConnectionSiteCount((int*)&ConnectionSiteCount));
    return ConnectionSiteCount;
  }

  Office_2k::MsoTriState __fastcall get_Connector(void)
  {
    Office_2k::MsoTriState Connector;
    OLECHECK(this->get_Connector((Office_2k::MsoTriState*)&Connector));
    return Connector;
  }

  Powerpoint_2k::ConnectorFormatPtr __fastcall get_ConnectorFormat(void)
  {
    Powerpoint_2k::ConnectorFormatPtr ConnectorFormat;
    OLECHECK(this->get_ConnectorFormat((Powerpoint_2k::ConnectorFormatPtr*)&ConnectorFormat));
    return ConnectorFormat;
  }

  Powerpoint_2k::FillFormatPtr __fastcall get_Fill(void)
  {
    Powerpoint_2k::FillFormatPtr Fill;
    OLECHECK(this->get_Fill((Powerpoint_2k::FillFormatPtr*)&Fill));
    return Fill;
  }

  Powerpoint_2k::GroupShapesPtr __fastcall get_GroupItems(void)
  {
    Powerpoint_2k::GroupShapesPtr GroupItems;
    OLECHECK(this->get_GroupItems((Powerpoint_2k::GroupShapesPtr*)&GroupItems));
    return GroupItems;
  }

  float __fastcall get_Height(void)
  {
    float Height;
    OLECHECK(this->get_Height((float*)&Height));
    return Height;
  }

  Office_2k::MsoTriState __fastcall get_HorizontalFlip(void)
  {
    Office_2k::MsoTriState HorizontalFlip;
    OLECHECK(this->get_HorizontalFlip((Office_2k::MsoTriState*)&HorizontalFlip));
    return HorizontalFlip;
  }

  float __fastcall get_Left(void)
  {
    float Left;
    OLECHECK(this->get_Left((float*)&Left));
    return Left;
  }

  Powerpoint_2k::LineFormatPtr __fastcall get_Line(void)
  {
    Powerpoint_2k::LineFormatPtr Line;
    OLECHECK(this->get_Line((Powerpoint_2k::LineFormatPtr*)&Line));
    return Line;
  }

  Office_2k::MsoTriState __fastcall get_LockAspectRatio(void)
  {
    Office_2k::MsoTriState LockAspectRatio;
    OLECHECK(this->get_LockAspectRatio((Office_2k::MsoTriState*)&LockAspectRatio));
    return LockAspectRatio;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  Powerpoint_2k::ShapeNodesPtr __fastcall get_Nodes(void)
  {
    Powerpoint_2k::ShapeNodesPtr Nodes;
    OLECHECK(this->get_Nodes((Powerpoint_2k::ShapeNodesPtr*)&Nodes));
    return Nodes;
  }

  float __fastcall get_Rotation(void)
  {
    float Rotation;
    OLECHECK(this->get_Rotation((float*)&Rotation));
    return Rotation;
  }

  Powerpoint_2k::PictureFormatPtr __fastcall get_PictureFormat(void)
  {
    Powerpoint_2k::PictureFormatPtr Picture;
    OLECHECK(this->get_PictureFormat((Powerpoint_2k::PictureFormatPtr*)&Picture));
    return Picture;
  }

  Powerpoint_2k::ShadowFormatPtr __fastcall get_Shadow(void)
  {
    Powerpoint_2k::ShadowFormatPtr Shadow;
    OLECHECK(this->get_Shadow((Powerpoint_2k::ShadowFormatPtr*)&Shadow));
    return Shadow;
  }

  Powerpoint_2k::TextEffectFormatPtr __fastcall get_TextEffect(void)
  {
    Powerpoint_2k::TextEffectFormatPtr TextEffect;
    OLECHECK(this->get_TextEffect((Powerpoint_2k::TextEffectFormatPtr*)&TextEffect));
    return TextEffect;
  }

  Powerpoint_2k::TextFramePtr __fastcall get_TextFrame(void)
  {
    Powerpoint_2k::TextFramePtr TextFrame;
    OLECHECK(this->get_TextFrame((Powerpoint_2k::TextFramePtr*)&TextFrame));
    return TextFrame;
  }

  Powerpoint_2k::ThreeDFormatPtr __fastcall get_ThreeD(void)
  {
    Powerpoint_2k::ThreeDFormatPtr ThreeD;
    OLECHECK(this->get_ThreeD((Powerpoint_2k::ThreeDFormatPtr*)&ThreeD));
    return ThreeD;
  }

  float __fastcall get_Top(void)
  {
    float Top;
    OLECHECK(this->get_Top((float*)&Top));
    return Top;
  }

  Office_2k::MsoShapeType __fastcall get_Type(void)
  {
    Office_2k::MsoShapeType Type;
    OLECHECK(this->get_Type((Office_2k::MsoShapeType*)&Type));
    return Type;
  }

  Office_2k::MsoTriState __fastcall get_VerticalFlip(void)
  {
    Office_2k::MsoTriState VerticalFlip;
    OLECHECK(this->get_VerticalFlip((Office_2k::MsoTriState*)&VerticalFlip));
    return VerticalFlip;
  }

  TVariant __fastcall get_Vertices(void)
  {
    TVariant Vertices;
    OLECHECK(this->get_Vertices((TVariant*)&Vertices));
    return Vertices;
  }

  Office_2k::MsoTriState __fastcall get_Visible(void)
  {
    Office_2k::MsoTriState Visible;
    OLECHECK(this->get_Visible((Office_2k::MsoTriState*)&Visible));
    return Visible;
  }

  float __fastcall get_Width(void)
  {
    float Width;
    OLECHECK(this->get_Width((float*)&Width));
    return Width;
  }

  int __fastcall get_ZOrderPosition(void)
  {
    int ZOrderPosition;
    OLECHECK(this->get_ZOrderPosition((int*)&ZOrderPosition));
    return ZOrderPosition;
  }

  Powerpoint_2k::OLEFormatPtr __fastcall get_OLEFormat(void)
  {
    Powerpoint_2k::OLEFormatPtr OLEFormat;
    OLECHECK(this->get_OLEFormat((Powerpoint_2k::OLEFormatPtr*)&OLEFormat));
    return OLEFormat;
  }

  Powerpoint_2k::LinkFormatPtr __fastcall get_LinkFormat(void)
  {
    Powerpoint_2k::LinkFormatPtr LinkFormat;
    OLECHECK(this->get_LinkFormat((Powerpoint_2k::LinkFormatPtr*)&LinkFormat));
    return LinkFormat;
  }

  Powerpoint_2k::PlaceholderFormatPtr __fastcall get_PlaceholderFormat(void)
  {
    Powerpoint_2k::PlaceholderFormatPtr PlaceholderFormat;
    OLECHECK(this->get_PlaceholderFormat((Powerpoint_2k::PlaceholderFormatPtr*)&PlaceholderFormat));
    return PlaceholderFormat;
  }

  Powerpoint_2k::AnimationSettingsPtr __fastcall get_AnimationSettings(void)
  {
    Powerpoint_2k::AnimationSettingsPtr AnimationSettings;
    OLECHECK(this->get_AnimationSettings((Powerpoint_2k::AnimationSettingsPtr*)&AnimationSettings));
    return AnimationSettings;
  }

  Powerpoint_2k::ActionSettingsPtr __fastcall get_ActionSettings(void)
  {
    Powerpoint_2k::ActionSettingsPtr ActionSettings;
    OLECHECK(this->get_ActionSettings((Powerpoint_2k::ActionSettingsPtr*)&ActionSettings));
    return ActionSettings;
  }

  Powerpoint_2k::TagsPtr __fastcall get_Tags(void)
  {
    Powerpoint_2k::TagsPtr Tags;
    OLECHECK(this->get_Tags((Powerpoint_2k::TagsPtr*)&Tags));
    return Tags;
  }

  Powerpoint_2k::ShapeRangePtr __fastcall Duplicate(void)
  {
    Powerpoint_2k::ShapeRangePtr Duplicate;
    OLECHECK(this->Duplicate((Powerpoint_2k::ShapeRangePtr*)&Duplicate));
    return Duplicate;
  }

  Powerpoint_2k::PpMediaType __fastcall get_MediaType(void)
  {
    Powerpoint_2k::PpMediaType MediaType;
    OLECHECK(this->get_MediaType((Powerpoint_2k::PpMediaType*)&MediaType));
    return MediaType;
  }

  Office_2k::MsoTriState __fastcall get_HasTextFrame(void)
  {
    Office_2k::MsoTriState HasTextFrame;
    OLECHECK(this->get_HasTextFrame((Office_2k::MsoTriState*)&HasTextFrame));
    return HasTextFrame;
  }

  Powerpoint_2k::SoundFormatPtr __fastcall get_SoundFormat(void)
  {
    Powerpoint_2k::SoundFormatPtr SoundFormat;
    OLECHECK(this->get_SoundFormat((Powerpoint_2k::SoundFormatPtr*)&SoundFormat));
    return SoundFormat;
  }

  Office_2k::ScriptPtr __fastcall get_Script(void)
  {
    Office_2k::ScriptPtr Script;
    OLECHECK(this->get_Script((Office_2k::ScriptPtr*)&Script));
    return Script;
  }

  BSTR __fastcall get_AlternativeText(void)
  {
    BSTR AlternativeText = 0;
    OLECHECK(this->get_AlternativeText((BSTR*)&AlternativeText));
    return AlternativeText;
  }

  Office_2k::MsoTriState __fastcall get_HasTable(void)
  {
    Office_2k::MsoTriState HasTable;
    OLECHECK(this->get_HasTable((Office_2k::MsoTriState*)&HasTable));
    return HasTable;
  }

  Powerpoint_2k::TablePtr __fastcall get_Table(void)
  {
    Powerpoint_2k::TablePtr Table;
    OLECHECK(this->get_Table((Powerpoint_2k::TablePtr*)&Table));
    return Table;
  }


  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::AdjustmentsPtr Adjustments = {read = get_Adjustments};
  __property   Office_2k::MsoAutoShapeType AutoShapeType = {read = get_AutoShapeType, write = set_AutoShapeType};
  __property   Office_2k::MsoBlackWhiteMode BlackWhiteMode = {read = get_BlackWhiteMode, write = set_BlackWhiteMode};
  __property   Powerpoint_2k::CalloutFormatPtr Callout = {read = get_Callout};
  __property   int             ConnectionSiteCount = {read = get_ConnectionSiteCount};
  __property   Office_2k::MsoTriState Connector = {read = get_Connector};
  __property   Powerpoint_2k::ConnectorFormatPtr ConnectorFormat = {read = get_ConnectorFormat};
  __property   Powerpoint_2k::FillFormatPtr Fill = {read = get_Fill};
  __property   Powerpoint_2k::GroupShapesPtr GroupItems = {read = get_GroupItems};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   Office_2k::MsoTriState HorizontalFlip = {read = get_HorizontalFlip};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   Powerpoint_2k::LineFormatPtr Line = {read = get_Line};
  __property   Office_2k::MsoTriState LockAspectRatio = {read = get_LockAspectRatio, write = set_LockAspectRatio};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   Powerpoint_2k::ShapeNodesPtr Nodes = {read = get_Nodes};
  __property   float           Rotation = {read = get_Rotation, write = set_Rotation};
  __property   Powerpoint_2k::PictureFormatPtr PictureFormat = {read = get_PictureFormat};
  __property   Powerpoint_2k::ShadowFormatPtr Shadow = {read = get_Shadow};
  __property   Powerpoint_2k::TextEffectFormatPtr TextEffect = {read = get_TextEffect};
  __property   Powerpoint_2k::TextFramePtr TextFrame = {read = get_TextFrame};
  __property   Powerpoint_2k::ThreeDFormatPtr ThreeD = {read = get_ThreeD};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   Office_2k::MsoShapeType Type = {read = get_Type};
  __property   Office_2k::MsoTriState VerticalFlip = {read = get_VerticalFlip};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   int             ZOrderPosition = {read = get_ZOrderPosition};
  __property   Powerpoint_2k::OLEFormatPtr OLEFormat = {read = get_OLEFormat};
  __property   Powerpoint_2k::LinkFormatPtr LinkFormat = {read = get_LinkFormat};
  __property   Powerpoint_2k::PlaceholderFormatPtr PlaceholderFormat = {read = get_PlaceholderFormat};
  __property   Powerpoint_2k::AnimationSettingsPtr AnimationSettings = {read = get_AnimationSettings};
  __property   Powerpoint_2k::ActionSettingsPtr ActionSettings = {read = get_ActionSettings};
  __property   Powerpoint_2k::TagsPtr Tags = {read = get_Tags};
  __property   Powerpoint_2k::PpMediaType MediaType = {read = get_MediaType};
  __property   Office_2k::MsoTriState HasTextFrame = {read = get_HasTextFrame};
  __property   Powerpoint_2k::SoundFormatPtr SoundFormat = {read = get_SoundFormat};
  __property   Office_2k::ScriptPtr Script = {read = get_Script};
  __property   BSTR            AlternativeText = {read = get_AlternativeText, write = set_AlternativeText};
  __property   Office_2k::MsoTriState HasTable = {read = get_HasTable};
  __property   Powerpoint_2k::TablePtr Table = {read = get_Table};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ShapeRange
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149347A-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface ShapeRange  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Creator(long* plCreator/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE Apply(void) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE Flip(Office_2k::MsoFlipCmd FlipCmd/*[in]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE IncrementLeft(float Increment/*[in]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE IncrementRotation(float Increment/*[in]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE IncrementTop(float Increment/*[in]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE PickUp(void) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE RerouteConnections(void) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE ScaleHeight(float Factor/*[in]*/, 
                                                Office_2k::MsoTriState RelativeToOriginalSize/*[in]*/, 
                                                Office_2k::MsoScaleFrom fScale/*[in,def,opt]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE ScaleWidth(float Factor/*[in]*/, 
                                               Office_2k::MsoTriState RelativeToOriginalSize/*[in]*/, 
                                               Office_2k::MsoScaleFrom fScale/*[in,def,opt]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE SetShapesDefaultProperties(void) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE Ungroup(Powerpoint_2k::ShapeRangePtr* Ungroup/*[out,retval]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE ZOrder(Office_2k::MsoZOrderCmd ZOrderCmd/*[in]*/) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE get_Adjustments(Powerpoint_2k::AdjustmentsPtr* Adjustments/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_AutoShapeType(Office_2k::MsoAutoShapeType* AutoShapeType/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_AutoShapeType(Office_2k::MsoAutoShapeType AutoShapeType/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_BlackWhiteMode(Office_2k::MsoBlackWhiteMode* BlackWhiteMode/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_BlackWhiteMode(Office_2k::MsoBlackWhiteMode BlackWhiteMode/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_Callout(Powerpoint_2k::CalloutFormatPtr* Callout/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_ConnectionSiteCount(int* ConnectionSiteCount/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_Connector(Office_2k::MsoTriState* Connector/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_ConnectorFormat(Powerpoint_2k::ConnectorFormatPtr* ConnectorFormat/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_Fill(Powerpoint_2k::FillFormatPtr* Fill/*[out,retval]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE get_GroupItems(Powerpoint_2k::GroupShapesPtr* GroupItems/*[out,retval]*/) = 0; // [108]
  virtual HRESULT STDMETHODCALLTYPE get_Height(float* Height/*[out,retval]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE set_Height(float Height/*[in]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE get_HorizontalFlip(Office_2k::MsoTriState* HorizontalFlip/*[out,retval]*/) = 0; // [110]
  virtual HRESULT STDMETHODCALLTYPE get_Left(float* Left/*[out,retval]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE set_Left(float Left/*[in]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE get_Line(Powerpoint_2k::LineFormatPtr* Line/*[out,retval]*/) = 0; // [112]
  virtual HRESULT STDMETHODCALLTYPE get_LockAspectRatio(Office_2k::MsoTriState* LockAspectRatio/*[out,retval]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE set_LockAspectRatio(Office_2k::MsoTriState LockAspectRatio/*[in]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [115]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR Name/*[in]*/) = 0; // [115]
  virtual HRESULT STDMETHODCALLTYPE get_Nodes(Powerpoint_2k::ShapeNodesPtr* Nodes/*[out,retval]*/) = 0; // [116]
  virtual HRESULT STDMETHODCALLTYPE get_Rotation(float* Rotation/*[out,retval]*/) = 0; // [117]
  virtual HRESULT STDMETHODCALLTYPE set_Rotation(float Rotation/*[in]*/) = 0; // [117]
  virtual HRESULT STDMETHODCALLTYPE get_PictureFormat(Powerpoint_2k::PictureFormatPtr* Picture/*[out,retval]*/) = 0; // [118]
  virtual HRESULT STDMETHODCALLTYPE get_Shadow(Powerpoint_2k::ShadowFormatPtr* Shadow/*[out,retval]*/) = 0; // [119]
  virtual HRESULT STDMETHODCALLTYPE get_TextEffect(Powerpoint_2k::TextEffectFormatPtr* TextEffect/*[out,retval]*/) = 0; // [120]
  virtual HRESULT STDMETHODCALLTYPE get_TextFrame(Powerpoint_2k::TextFramePtr* TextFrame/*[out,retval]*/) = 0; // [121]
  virtual HRESULT STDMETHODCALLTYPE get_ThreeD(Powerpoint_2k::ThreeDFormatPtr* ThreeD/*[out,retval]*/) = 0; // [122]
  virtual HRESULT STDMETHODCALLTYPE get_Top(float* Top/*[out,retval]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE set_Top(float Top/*[in]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Office_2k::MsoShapeType* Type/*[out,retval]*/) = 0; // [124]
  virtual HRESULT STDMETHODCALLTYPE get_VerticalFlip(Office_2k::MsoTriState* VerticalFlip/*[out,retval]*/) = 0; // [125]
  virtual HRESULT STDMETHODCALLTYPE get_Vertices(TVariant* Vertices/*[out,retval]*/) = 0; // [126]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/) = 0; // [127]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(Office_2k::MsoTriState Visible/*[in]*/) = 0; // [127]
  virtual HRESULT STDMETHODCALLTYPE get_Width(float* Width/*[out,retval]*/) = 0; // [128]
  virtual HRESULT STDMETHODCALLTYPE set_Width(float Width/*[in]*/) = 0; // [128]
  virtual HRESULT STDMETHODCALLTYPE get_ZOrderPosition(int* ZOrderPosition/*[out,retval]*/) = 0; // [129]
  virtual HRESULT STDMETHODCALLTYPE get_OLEFormat(Powerpoint_2k::OLEFormatPtr* OLEFormat/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_LinkFormat(Powerpoint_2k::LinkFormatPtr* LinkFormat/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_PlaceholderFormat(Powerpoint_2k::PlaceholderFormatPtr* PlaceholderFormat/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_AnimationSettings(Powerpoint_2k::AnimationSettingsPtr* AnimationSettings/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_ActionSettings(Powerpoint_2k::ActionSettingsPtr* ActionSettings/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE Cut(void) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE Copy(void) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE Select(Office_2k::MsoTriState Replace/*[in,def,opt]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE Duplicate(Powerpoint_2k::ShapeRangePtr* Duplicate/*[out,retval]*/) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE get_MediaType(Powerpoint_2k::PpMediaType* MediaType/*[out,retval]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE get_HasTextFrame(Office_2k::MsoTriState* HasTextFrame/*[out,retval]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE get_SoundFormat(Powerpoint_2k::SoundFormatPtr* SoundFormat/*[out,retval]*/) = 0; // [2015]
  virtual HRESULT STDMETHODCALLTYPE Item(TVariantInParam index/*[in]*/, 
                                         Powerpoint_2k::ShapePtr* Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE _Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE Group(Powerpoint_2k::ShapePtr* Group/*[out,retval]*/) = 0; // [2016]
  virtual HRESULT STDMETHODCALLTYPE Regroup(Powerpoint_2k::ShapePtr* Regroup/*[out,retval]*/) = 0; // [2017]
  virtual HRESULT STDMETHODCALLTYPE Align(Office_2k::MsoAlignCmd AlignCmd/*[in]*/, 
                                          Office_2k::MsoTriState RelativeTo/*[in]*/) = 0; // [2018]
  virtual HRESULT STDMETHODCALLTYPE Distribute(Office_2k::MsoDistributeCmd DistributeCmd/*[in]*/, 
                                               Office_2k::MsoTriState RelativeTo/*[in]*/) = 0; // [2019]
  virtual HRESULT STDMETHODCALLTYPE GetPolygonalRepresentation(unsigned_long maxPointsInBuffer/*[in]*/, 
                                                               float* pPoints/*[in]*/, 
                                                               unsigned_long* numPointsInPolygon/*[out]*/, 
                                                               Office_2k::MsoTriState* IsOpen/*[out]*/) = 0; // [2020]
  virtual HRESULT STDMETHODCALLTYPE get_Script(Office_2k::ScriptPtr* Script/*[out,retval]*/) = 0; // [130]
  virtual HRESULT STDMETHODCALLTYPE get_AlternativeText(BSTR* AlternativeText/*[out,retval]*/) = 0; // [131]
  virtual HRESULT STDMETHODCALLTYPE set_AlternativeText(BSTR AlternativeText/*[in]*/) = 0; // [131]
  virtual HRESULT STDMETHODCALLTYPE get_HasTable(Office_2k::MsoTriState* HasTable/*[out,retval]*/) = 0; // [2021]
  virtual HRESULT STDMETHODCALLTYPE get_Table(Powerpoint_2k::TablePtr* Table/*[out,retval]*/) = 0; // [2022]
  virtual HRESULT STDMETHODCALLTYPE Export(BSTR PathName/*[in]*/, 
                                           Powerpoint_2k::PpShapeFormat Filter/*[in]*/, 
                                           int ScaleWidth/*[in,def,opt]*/, 
                                           int ScaleHeight/*[in,def,opt]*/, 
                                           Powerpoint_2k::PpExportMode ExportMode/*[in,def,opt]*/) = 0; // [2023]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Application(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Application((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  long __fastcall get_Creator(void)
  {
    long plCreator;
    OLECHECK(this->get_Creator((long*)&plCreator));
    return plCreator;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::ShapeRangePtr __fastcall Ungroup(void)
  {
    Powerpoint_2k::ShapeRangePtr Ungroup;
    OLECHECK(this->Ungroup((Powerpoint_2k::ShapeRangePtr*)&Ungroup));
    return Ungroup;
  }

  Powerpoint_2k::AdjustmentsPtr __fastcall get_Adjustments(void)
  {
    Powerpoint_2k::AdjustmentsPtr Adjustments;
    OLECHECK(this->get_Adjustments((Powerpoint_2k::AdjustmentsPtr*)&Adjustments));
    return Adjustments;
  }

  Office_2k::MsoAutoShapeType __fastcall get_AutoShapeType(void)
  {
    Office_2k::MsoAutoShapeType AutoShapeType;
    OLECHECK(this->get_AutoShapeType((Office_2k::MsoAutoShapeType*)&AutoShapeType));
    return AutoShapeType;
  }

  Office_2k::MsoBlackWhiteMode __fastcall get_BlackWhiteMode(void)
  {
    Office_2k::MsoBlackWhiteMode BlackWhiteMode;
    OLECHECK(this->get_BlackWhiteMode((Office_2k::MsoBlackWhiteMode*)&BlackWhiteMode));
    return BlackWhiteMode;
  }

  Powerpoint_2k::CalloutFormatPtr __fastcall get_Callout(void)
  {
    Powerpoint_2k::CalloutFormatPtr Callout;
    OLECHECK(this->get_Callout((Powerpoint_2k::CalloutFormatPtr*)&Callout));
    return Callout;
  }

  int __fastcall get_ConnectionSiteCount(void)
  {
    int ConnectionSiteCount;
    OLECHECK(this->get_ConnectionSiteCount((int*)&ConnectionSiteCount));
    return ConnectionSiteCount;
  }

  Office_2k::MsoTriState __fastcall get_Connector(void)
  {
    Office_2k::MsoTriState Connector;
    OLECHECK(this->get_Connector((Office_2k::MsoTriState*)&Connector));
    return Connector;
  }

  Powerpoint_2k::ConnectorFormatPtr __fastcall get_ConnectorFormat(void)
  {
    Powerpoint_2k::ConnectorFormatPtr ConnectorFormat;
    OLECHECK(this->get_ConnectorFormat((Powerpoint_2k::ConnectorFormatPtr*)&ConnectorFormat));
    return ConnectorFormat;
  }

  Powerpoint_2k::FillFormatPtr __fastcall get_Fill(void)
  {
    Powerpoint_2k::FillFormatPtr Fill;
    OLECHECK(this->get_Fill((Powerpoint_2k::FillFormatPtr*)&Fill));
    return Fill;
  }

  Powerpoint_2k::GroupShapesPtr __fastcall get_GroupItems(void)
  {
    Powerpoint_2k::GroupShapesPtr GroupItems;
    OLECHECK(this->get_GroupItems((Powerpoint_2k::GroupShapesPtr*)&GroupItems));
    return GroupItems;
  }

  float __fastcall get_Height(void)
  {
    float Height;
    OLECHECK(this->get_Height((float*)&Height));
    return Height;
  }

  Office_2k::MsoTriState __fastcall get_HorizontalFlip(void)
  {
    Office_2k::MsoTriState HorizontalFlip;
    OLECHECK(this->get_HorizontalFlip((Office_2k::MsoTriState*)&HorizontalFlip));
    return HorizontalFlip;
  }

  float __fastcall get_Left(void)
  {
    float Left;
    OLECHECK(this->get_Left((float*)&Left));
    return Left;
  }

  Powerpoint_2k::LineFormatPtr __fastcall get_Line(void)
  {
    Powerpoint_2k::LineFormatPtr Line;
    OLECHECK(this->get_Line((Powerpoint_2k::LineFormatPtr*)&Line));
    return Line;
  }

  Office_2k::MsoTriState __fastcall get_LockAspectRatio(void)
  {
    Office_2k::MsoTriState LockAspectRatio;
    OLECHECK(this->get_LockAspectRatio((Office_2k::MsoTriState*)&LockAspectRatio));
    return LockAspectRatio;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  Powerpoint_2k::ShapeNodesPtr __fastcall get_Nodes(void)
  {
    Powerpoint_2k::ShapeNodesPtr Nodes;
    OLECHECK(this->get_Nodes((Powerpoint_2k::ShapeNodesPtr*)&Nodes));
    return Nodes;
  }

  float __fastcall get_Rotation(void)
  {
    float Rotation;
    OLECHECK(this->get_Rotation((float*)&Rotation));
    return Rotation;
  }

  Powerpoint_2k::PictureFormatPtr __fastcall get_PictureFormat(void)
  {
    Powerpoint_2k::PictureFormatPtr Picture;
    OLECHECK(this->get_PictureFormat((Powerpoint_2k::PictureFormatPtr*)&Picture));
    return Picture;
  }

  Powerpoint_2k::ShadowFormatPtr __fastcall get_Shadow(void)
  {
    Powerpoint_2k::ShadowFormatPtr Shadow;
    OLECHECK(this->get_Shadow((Powerpoint_2k::ShadowFormatPtr*)&Shadow));
    return Shadow;
  }

  Powerpoint_2k::TextEffectFormatPtr __fastcall get_TextEffect(void)
  {
    Powerpoint_2k::TextEffectFormatPtr TextEffect;
    OLECHECK(this->get_TextEffect((Powerpoint_2k::TextEffectFormatPtr*)&TextEffect));
    return TextEffect;
  }

  Powerpoint_2k::TextFramePtr __fastcall get_TextFrame(void)
  {
    Powerpoint_2k::TextFramePtr TextFrame;
    OLECHECK(this->get_TextFrame((Powerpoint_2k::TextFramePtr*)&TextFrame));
    return TextFrame;
  }

  Powerpoint_2k::ThreeDFormatPtr __fastcall get_ThreeD(void)
  {
    Powerpoint_2k::ThreeDFormatPtr ThreeD;
    OLECHECK(this->get_ThreeD((Powerpoint_2k::ThreeDFormatPtr*)&ThreeD));
    return ThreeD;
  }

  float __fastcall get_Top(void)
  {
    float Top;
    OLECHECK(this->get_Top((float*)&Top));
    return Top;
  }

  Office_2k::MsoShapeType __fastcall get_Type(void)
  {
    Office_2k::MsoShapeType Type;
    OLECHECK(this->get_Type((Office_2k::MsoShapeType*)&Type));
    return Type;
  }

  Office_2k::MsoTriState __fastcall get_VerticalFlip(void)
  {
    Office_2k::MsoTriState VerticalFlip;
    OLECHECK(this->get_VerticalFlip((Office_2k::MsoTriState*)&VerticalFlip));
    return VerticalFlip;
  }

  TVariant __fastcall get_Vertices(void)
  {
    TVariant Vertices;
    OLECHECK(this->get_Vertices((TVariant*)&Vertices));
    return Vertices;
  }

  Office_2k::MsoTriState __fastcall get_Visible(void)
  {
    Office_2k::MsoTriState Visible;
    OLECHECK(this->get_Visible((Office_2k::MsoTriState*)&Visible));
    return Visible;
  }

  float __fastcall get_Width(void)
  {
    float Width;
    OLECHECK(this->get_Width((float*)&Width));
    return Width;
  }

  int __fastcall get_ZOrderPosition(void)
  {
    int ZOrderPosition;
    OLECHECK(this->get_ZOrderPosition((int*)&ZOrderPosition));
    return ZOrderPosition;
  }

  Powerpoint_2k::OLEFormatPtr __fastcall get_OLEFormat(void)
  {
    Powerpoint_2k::OLEFormatPtr OLEFormat;
    OLECHECK(this->get_OLEFormat((Powerpoint_2k::OLEFormatPtr*)&OLEFormat));
    return OLEFormat;
  }

  Powerpoint_2k::LinkFormatPtr __fastcall get_LinkFormat(void)
  {
    Powerpoint_2k::LinkFormatPtr LinkFormat;
    OLECHECK(this->get_LinkFormat((Powerpoint_2k::LinkFormatPtr*)&LinkFormat));
    return LinkFormat;
  }

  Powerpoint_2k::PlaceholderFormatPtr __fastcall get_PlaceholderFormat(void)
  {
    Powerpoint_2k::PlaceholderFormatPtr PlaceholderFormat;
    OLECHECK(this->get_PlaceholderFormat((Powerpoint_2k::PlaceholderFormatPtr*)&PlaceholderFormat));
    return PlaceholderFormat;
  }

  Powerpoint_2k::AnimationSettingsPtr __fastcall get_AnimationSettings(void)
  {
    Powerpoint_2k::AnimationSettingsPtr AnimationSettings;
    OLECHECK(this->get_AnimationSettings((Powerpoint_2k::AnimationSettingsPtr*)&AnimationSettings));
    return AnimationSettings;
  }

  Powerpoint_2k::ActionSettingsPtr __fastcall get_ActionSettings(void)
  {
    Powerpoint_2k::ActionSettingsPtr ActionSettings;
    OLECHECK(this->get_ActionSettings((Powerpoint_2k::ActionSettingsPtr*)&ActionSettings));
    return ActionSettings;
  }

  Powerpoint_2k::TagsPtr __fastcall get_Tags(void)
  {
    Powerpoint_2k::TagsPtr Tags;
    OLECHECK(this->get_Tags((Powerpoint_2k::TagsPtr*)&Tags));
    return Tags;
  }

  Powerpoint_2k::ShapeRangePtr __fastcall Duplicate(void)
  {
    Powerpoint_2k::ShapeRangePtr Duplicate;
    OLECHECK(this->Duplicate((Powerpoint_2k::ShapeRangePtr*)&Duplicate));
    return Duplicate;
  }

  Powerpoint_2k::PpMediaType __fastcall get_MediaType(void)
  {
    Powerpoint_2k::PpMediaType MediaType;
    OLECHECK(this->get_MediaType((Powerpoint_2k::PpMediaType*)&MediaType));
    return MediaType;
  }

  Office_2k::MsoTriState __fastcall get_HasTextFrame(void)
  {
    Office_2k::MsoTriState HasTextFrame;
    OLECHECK(this->get_HasTextFrame((Office_2k::MsoTriState*)&HasTextFrame));
    return HasTextFrame;
  }

  Powerpoint_2k::SoundFormatPtr __fastcall get_SoundFormat(void)
  {
    Powerpoint_2k::SoundFormatPtr SoundFormat;
    OLECHECK(this->get_SoundFormat((Powerpoint_2k::SoundFormatPtr*)&SoundFormat));
    return SoundFormat;
  }

  Powerpoint_2k::ShapePtr __fastcall Item(TVariantInParam index/*[in]*/)
  {
    Powerpoint_2k::ShapePtr Item;
    OLECHECK(this->Item(index, (Powerpoint_2k::ShapePtr*)&Item));
    return Item;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN _NewEnum;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&_NewEnum));
    return _NewEnum;
  }

  TVariant __fastcall _Index(int index/*[in]*/)
  {
    TVariant _Index;
    OLECHECK(this->_Index(index, (TVariant*)&_Index));
    return _Index;
  }

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  Powerpoint_2k::ShapePtr __fastcall Group(void)
  {
    Powerpoint_2k::ShapePtr Group;
    OLECHECK(this->Group((Powerpoint_2k::ShapePtr*)&Group));
    return Group;
  }

  Powerpoint_2k::ShapePtr __fastcall Regroup(void)
  {
    Powerpoint_2k::ShapePtr Regroup;
    OLECHECK(this->Regroup((Powerpoint_2k::ShapePtr*)&Regroup));
    return Regroup;
  }

  Office_2k::ScriptPtr __fastcall get_Script(void)
  {
    Office_2k::ScriptPtr Script;
    OLECHECK(this->get_Script((Office_2k::ScriptPtr*)&Script));
    return Script;
  }

  BSTR __fastcall get_AlternativeText(void)
  {
    BSTR AlternativeText = 0;
    OLECHECK(this->get_AlternativeText((BSTR*)&AlternativeText));
    return AlternativeText;
  }

  Office_2k::MsoTriState __fastcall get_HasTable(void)
  {
    Office_2k::MsoTriState HasTable;
    OLECHECK(this->get_HasTable((Office_2k::MsoTriState*)&HasTable));
    return HasTable;
  }

  Powerpoint_2k::TablePtr __fastcall get_Table(void)
  {
    Powerpoint_2k::TablePtr Table;
    OLECHECK(this->get_Table((Powerpoint_2k::TablePtr*)&Table));
    return Table;
  }


  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::AdjustmentsPtr Adjustments = {read = get_Adjustments};
  __property   Office_2k::MsoAutoShapeType AutoShapeType = {read = get_AutoShapeType, write = set_AutoShapeType};
  __property   Office_2k::MsoBlackWhiteMode BlackWhiteMode = {read = get_BlackWhiteMode, write = set_BlackWhiteMode};
  __property   Powerpoint_2k::CalloutFormatPtr Callout = {read = get_Callout};
  __property   int             ConnectionSiteCount = {read = get_ConnectionSiteCount};
  __property   Office_2k::MsoTriState Connector = {read = get_Connector};
  __property   Powerpoint_2k::ConnectorFormatPtr ConnectorFormat = {read = get_ConnectorFormat};
  __property   Powerpoint_2k::FillFormatPtr Fill = {read = get_Fill};
  __property   Powerpoint_2k::GroupShapesPtr GroupItems = {read = get_GroupItems};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   Office_2k::MsoTriState HorizontalFlip = {read = get_HorizontalFlip};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   Powerpoint_2k::LineFormatPtr Line = {read = get_Line};
  __property   Office_2k::MsoTriState LockAspectRatio = {read = get_LockAspectRatio, write = set_LockAspectRatio};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   Powerpoint_2k::ShapeNodesPtr Nodes = {read = get_Nodes};
  __property   float           Rotation = {read = get_Rotation, write = set_Rotation};
  __property   Powerpoint_2k::PictureFormatPtr PictureFormat = {read = get_PictureFormat};
  __property   Powerpoint_2k::ShadowFormatPtr Shadow = {read = get_Shadow};
  __property   Powerpoint_2k::TextEffectFormatPtr TextEffect = {read = get_TextEffect};
  __property   Powerpoint_2k::TextFramePtr TextFrame = {read = get_TextFrame};
  __property   Powerpoint_2k::ThreeDFormatPtr ThreeD = {read = get_ThreeD};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   Office_2k::MsoShapeType Type = {read = get_Type};
  __property   Office_2k::MsoTriState VerticalFlip = {read = get_VerticalFlip};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   int             ZOrderPosition = {read = get_ZOrderPosition};
  __property   Powerpoint_2k::OLEFormatPtr OLEFormat = {read = get_OLEFormat};
  __property   Powerpoint_2k::LinkFormatPtr LinkFormat = {read = get_LinkFormat};
  __property   Powerpoint_2k::PlaceholderFormatPtr PlaceholderFormat = {read = get_PlaceholderFormat};
  __property   Powerpoint_2k::AnimationSettingsPtr AnimationSettings = {read = get_AnimationSettings};
  __property   Powerpoint_2k::ActionSettingsPtr ActionSettings = {read = get_ActionSettings};
  __property   Powerpoint_2k::TagsPtr Tags = {read = get_Tags};
  __property   Powerpoint_2k::PpMediaType MediaType = {read = get_MediaType};
  __property   Office_2k::MsoTriState HasTextFrame = {read = get_HasTextFrame};
  __property   Powerpoint_2k::SoundFormatPtr SoundFormat = {read = get_SoundFormat};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
  __property   Office_2k::ScriptPtr Script = {read = get_Script};
  __property   BSTR            AlternativeText = {read = get_AlternativeText, write = set_AlternativeText};
  __property   Office_2k::MsoTriState HasTable = {read = get_HasTable};
  __property   Powerpoint_2k::TablePtr Table = {read = get_Table};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: GroupShapes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149347B-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface GroupShapes  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Creator(long* plCreator/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Count(int* pnShapes/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE Item(TVariantInParam index/*[in]*/, 
                                         Powerpoint_2k::ShapePtr* Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppienum/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Application(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Application((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  long __fastcall get_Creator(void)
  {
    long plCreator;
    OLECHECK(this->get_Creator((long*)&plCreator));
    return plCreator;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Parent((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  int __fastcall get_Count(void)
  {
    int pnShapes;
    OLECHECK(this->get_Count((int*)&pnShapes));
    return pnShapes;
  }

  Powerpoint_2k::ShapePtr __fastcall Item(TVariantInParam index/*[in]*/)
  {
    Powerpoint_2k::ShapePtr Item;
    OLECHECK(this->Item(index, (Powerpoint_2k::ShapePtr*)&Item));
    return Item;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppienum;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppienum));
    return ppienum;
  }


  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Adjustments
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149347C-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Adjustments  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Creator(long* plCreator/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Count(int* Count/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_Item(int index/*[in]*/, float* Val/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Item(int index/*[in]*/, float Val/*[in]*/) = 0; // [0]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Application(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Application((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  long __fastcall get_Creator(void)
  {
    long plCreator;
    OLECHECK(this->get_Creator((long*)&plCreator));
    return plCreator;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  int __fastcall get_Count(void)
  {
    int Count;
    OLECHECK(this->get_Count((int*)&Count));
    return Count;
  }

  float __fastcall get_Item(int index/*[in]*/)
  {
    float Val;
    OLECHECK(this->get_Item(index, (float*)&Val));
    return Val;
  }


  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PictureFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149347D-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface PictureFormat  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Creator(long* plCreator/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE IncrementBrightness(float Increment/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE IncrementContrast(float Increment/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_Brightness(float* Brightness/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE set_Brightness(float Brightness/*[in]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_ColorType(Office_2k::MsoPictureColorType* ColorType/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_ColorType(Office_2k::MsoPictureColorType ColorType/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_Contrast(float* Contrast/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_Contrast(float Contrast/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_CropBottom(float* CropBottom/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE set_CropBottom(float CropBottom/*[in]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_CropLeft(float* CropLeft/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE set_CropLeft(float CropLeft/*[in]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_CropRight(float* CropRight/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE set_CropRight(float CropRight/*[in]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_CropTop(float* CropTop/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE set_CropTop(float CropTop/*[in]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_TransparencyColor(Office_2k::MsoRGBType* TransparencyColor/*[out,retval]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE set_TransparencyColor(Office_2k::MsoRGBType TransparencyColor/*[in]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE get_TransparentBackground(Office_2k::MsoTriState* TransparentBackground/*[out,retval]*/) = 0; // [108]
  virtual HRESULT STDMETHODCALLTYPE set_TransparentBackground(Office_2k::MsoTriState TransparentBackground/*[in]*/) = 0; // [108]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Application(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Application((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  long __fastcall get_Creator(void)
  {
    long plCreator;
    OLECHECK(this->get_Creator((long*)&plCreator));
    return plCreator;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  float __fastcall get_Brightness(void)
  {
    float Brightness;
    OLECHECK(this->get_Brightness((float*)&Brightness));
    return Brightness;
  }

  Office_2k::MsoPictureColorType __fastcall get_ColorType(void)
  {
    Office_2k::MsoPictureColorType ColorType;
    OLECHECK(this->get_ColorType((Office_2k::MsoPictureColorType*)&ColorType));
    return ColorType;
  }

  float __fastcall get_Contrast(void)
  {
    float Contrast;
    OLECHECK(this->get_Contrast((float*)&Contrast));
    return Contrast;
  }

  float __fastcall get_CropBottom(void)
  {
    float CropBottom;
    OLECHECK(this->get_CropBottom((float*)&CropBottom));
    return CropBottom;
  }

  float __fastcall get_CropLeft(void)
  {
    float CropLeft;
    OLECHECK(this->get_CropLeft((float*)&CropLeft));
    return CropLeft;
  }

  float __fastcall get_CropRight(void)
  {
    float CropRight;
    OLECHECK(this->get_CropRight((float*)&CropRight));
    return CropRight;
  }

  float __fastcall get_CropTop(void)
  {
    float CropTop;
    OLECHECK(this->get_CropTop((float*)&CropTop));
    return CropTop;
  }

  Office_2k::MsoRGBType __fastcall get_TransparencyColor(void)
  {
    Office_2k::MsoRGBType TransparencyColor;
    OLECHECK(this->get_TransparencyColor((Office_2k::MsoRGBType*)&TransparencyColor));
    return TransparencyColor;
  }

  Office_2k::MsoTriState __fastcall get_TransparentBackground(void)
  {
    Office_2k::MsoTriState TransparentBackground;
    OLECHECK(this->get_TransparentBackground((Office_2k::MsoTriState*)&TransparentBackground));
    return TransparentBackground;
  }


  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   float           Brightness = {read = get_Brightness, write = set_Brightness};
  __property   Office_2k::MsoPictureColorType ColorType = {read = get_ColorType, write = set_ColorType};
  __property   float           Contrast = {read = get_Contrast, write = set_Contrast};
  __property   float           CropBottom = {read = get_CropBottom, write = set_CropBottom};
  __property   float           CropLeft = {read = get_CropLeft, write = set_CropLeft};
  __property   float           CropRight = {read = get_CropRight, write = set_CropRight};
  __property   float           CropTop = {read = get_CropTop, write = set_CropTop};
  __property   Office_2k::MsoRGBType TransparencyColor = {read = get_TransparencyColor, write = set_TransparencyColor};
  __property   Office_2k::MsoTriState TransparentBackground = {read = get_TransparentBackground, write = set_TransparentBackground};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: FillFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149347E-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface FillFormat  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Creator(long* plCreator/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE Background(void) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE OneColorGradient(Office_2k::MsoGradientStyle Style/*[in]*/, 
                                                     int Variant/*[in]*/, float Degree/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE Patterned(Office_2k::MsoPatternType Pattern/*[in]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE PresetGradient(Office_2k::MsoGradientStyle Style/*[in]*/, 
                                                   int Variant/*[in]*/, 
                                                   Office_2k::MsoPresetGradientType PresetGradientType/*[in]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE PresetTextured(Office_2k::MsoPresetTexture PresetTexture/*[in]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE Solid(void) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE TwoColorGradient(Office_2k::MsoGradientStyle Style/*[in]*/, 
                                                     int Variant/*[in]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE UserPicture(BSTR PictureFile/*[in]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE UserTextured(BSTR TextureFile/*[in]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE get_BackColor(Powerpoint_2k::ColorFormatPtr* BackColor/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE set_BackColor(Powerpoint_2k::ColorFormatPtr BackColor/*[in]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_ForeColor(Powerpoint_2k::ColorFormatPtr* ForeColor/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_ForeColor(Powerpoint_2k::ColorFormatPtr ForeColor/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_GradientColorType(Office_2k::MsoGradientColorType* GradientColorType/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_GradientDegree(float* GradientDegree/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_GradientStyle(Office_2k::MsoGradientStyle* GradientStyle/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_GradientVariant(int* GradientVariant/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_Pattern(Office_2k::MsoPatternType* Pattern/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_PresetGradientType(Office_2k::MsoPresetGradientType* PresetGradientType/*[out,retval]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE get_PresetTexture(Office_2k::MsoPresetTexture* PresetTexture/*[out,retval]*/) = 0; // [108]
  virtual HRESULT STDMETHODCALLTYPE get_TextureName(BSTR* TextureName/*[out,retval]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE get_TextureType(Office_2k::MsoTextureType* TextureType/*[out,retval]*/) = 0; // [110]
  virtual HRESULT STDMETHODCALLTYPE get_Transparency(float* Transparency/*[out,retval]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE set_Transparency(float Transparency/*[in]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Office_2k::MsoFillType* Type/*[out,retval]*/) = 0; // [112]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(Office_2k::MsoTriState Visible/*[in]*/) = 0; // [113]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Application(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Application((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  long __fastcall get_Creator(void)
  {
    long plCreator;
    OLECHECK(this->get_Creator((long*)&plCreator));
    return plCreator;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::ColorFormatPtr __fastcall get_BackColor(void)
  {
    Powerpoint_2k::ColorFormatPtr BackColor;
    OLECHECK(this->get_BackColor((Powerpoint_2k::ColorFormatPtr*)&BackColor));
    return BackColor;
  }

  Powerpoint_2k::ColorFormatPtr __fastcall get_ForeColor(void)
  {
    Powerpoint_2k::ColorFormatPtr ForeColor;
    OLECHECK(this->get_ForeColor((Powerpoint_2k::ColorFormatPtr*)&ForeColor));
    return ForeColor;
  }

  Office_2k::MsoGradientColorType __fastcall get_GradientColorType(void)
  {
    Office_2k::MsoGradientColorType GradientColorType;
    OLECHECK(this->get_GradientColorType((Office_2k::MsoGradientColorType*)&GradientColorType));
    return GradientColorType;
  }

  float __fastcall get_GradientDegree(void)
  {
    float GradientDegree;
    OLECHECK(this->get_GradientDegree((float*)&GradientDegree));
    return GradientDegree;
  }

  Office_2k::MsoGradientStyle __fastcall get_GradientStyle(void)
  {
    Office_2k::MsoGradientStyle GradientStyle;
    OLECHECK(this->get_GradientStyle((Office_2k::MsoGradientStyle*)&GradientStyle));
    return GradientStyle;
  }

  int __fastcall get_GradientVariant(void)
  {
    int GradientVariant;
    OLECHECK(this->get_GradientVariant((int*)&GradientVariant));
    return GradientVariant;
  }

  Office_2k::MsoPatternType __fastcall get_Pattern(void)
  {
    Office_2k::MsoPatternType Pattern;
    OLECHECK(this->get_Pattern((Office_2k::MsoPatternType*)&Pattern));
    return Pattern;
  }

  Office_2k::MsoPresetGradientType __fastcall get_PresetGradientType(void)
  {
    Office_2k::MsoPresetGradientType PresetGradientType;
    OLECHECK(this->get_PresetGradientType((Office_2k::MsoPresetGradientType*)&PresetGradientType));
    return PresetGradientType;
  }

  Office_2k::MsoPresetTexture __fastcall get_PresetTexture(void)
  {
    Office_2k::MsoPresetTexture PresetTexture;
    OLECHECK(this->get_PresetTexture((Office_2k::MsoPresetTexture*)&PresetTexture));
    return PresetTexture;
  }

  BSTR __fastcall get_TextureName(void)
  {
    BSTR TextureName = 0;
    OLECHECK(this->get_TextureName((BSTR*)&TextureName));
    return TextureName;
  }

  Office_2k::MsoTextureType __fastcall get_TextureType(void)
  {
    Office_2k::MsoTextureType TextureType;
    OLECHECK(this->get_TextureType((Office_2k::MsoTextureType*)&TextureType));
    return TextureType;
  }

  float __fastcall get_Transparency(void)
  {
    float Transparency;
    OLECHECK(this->get_Transparency((float*)&Transparency));
    return Transparency;
  }

  Office_2k::MsoFillType __fastcall get_Type(void)
  {
    Office_2k::MsoFillType Type;
    OLECHECK(this->get_Type((Office_2k::MsoFillType*)&Type));
    return Type;
  }

  Office_2k::MsoTriState __fastcall get_Visible(void)
  {
    Office_2k::MsoTriState Visible;
    OLECHECK(this->get_Visible((Office_2k::MsoTriState*)&Visible));
    return Visible;
  }


  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::ColorFormatPtr BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Powerpoint_2k::ColorFormatPtr ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   Office_2k::MsoGradientColorType GradientColorType = {read = get_GradientColorType};
  __property   float           GradientDegree = {read = get_GradientDegree};
  __property   Office_2k::MsoGradientStyle GradientStyle = {read = get_GradientStyle};
  __property   int             GradientVariant = {read = get_GradientVariant};
  __property   Office_2k::MsoPatternType Pattern = {read = get_Pattern};
  __property   Office_2k::MsoPresetGradientType PresetGradientType = {read = get_PresetGradientType};
  __property   Office_2k::MsoPresetTexture PresetTexture = {read = get_PresetTexture};
  __property   BSTR            TextureName = {read = get_TextureName};
  __property   Office_2k::MsoTextureType TextureType = {read = get_TextureType};
  __property   float           Transparency = {read = get_Transparency, write = set_Transparency};
  __property   Office_2k::MsoFillType Type = {read = get_Type};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: LineFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149347F-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface LineFormat  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Creator(long* plCreator/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_BackColor(Powerpoint_2k::ColorFormatPtr* BackColor/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE set_BackColor(Powerpoint_2k::ColorFormatPtr BackColor/*[in]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_BeginArrowheadLength(Office_2k::MsoArrowheadLength* BeginArrowheadLength/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_BeginArrowheadLength(Office_2k::MsoArrowheadLength BeginArrowheadLength/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_BeginArrowheadStyle(Office_2k::MsoArrowheadStyle* BeginArrowheadStyle/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_BeginArrowheadStyle(Office_2k::MsoArrowheadStyle BeginArrowheadStyle/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_BeginArrowheadWidth(Office_2k::MsoArrowheadWidth* BeginArrowheadWidth/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE set_BeginArrowheadWidth(Office_2k::MsoArrowheadWidth BeginArrowheadWidth/*[in]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_DashStyle(Office_2k::MsoLineDashStyle* DashStyle/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE set_DashStyle(Office_2k::MsoLineDashStyle DashStyle/*[in]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_EndArrowheadLength(Office_2k::MsoArrowheadLength* EndArrowheadLength/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE set_EndArrowheadLength(Office_2k::MsoArrowheadLength EndArrowheadLength/*[in]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_EndArrowheadStyle(Office_2k::MsoArrowheadStyle* EndArrowheadStyle/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE set_EndArrowheadStyle(Office_2k::MsoArrowheadStyle EndArrowheadStyle/*[in]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_EndArrowheadWidth(Office_2k::MsoArrowheadWidth* EndArrowheadWidth/*[out,retval]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE set_EndArrowheadWidth(Office_2k::MsoArrowheadWidth EndArrowheadWidth/*[in]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE get_ForeColor(Powerpoint_2k::ColorFormatPtr* ForeColor/*[out,retval]*/) = 0; // [108]
  virtual HRESULT STDMETHODCALLTYPE set_ForeColor(Powerpoint_2k::ColorFormatPtr ForeColor/*[in]*/) = 0; // [108]
  virtual HRESULT STDMETHODCALLTYPE get_Pattern(Office_2k::MsoPatternType* Pattern/*[out,retval]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE set_Pattern(Office_2k::MsoPatternType Pattern/*[in]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE get_Style(Office_2k::MsoLineStyle* Style/*[out,retval]*/) = 0; // [110]
  virtual HRESULT STDMETHODCALLTYPE set_Style(Office_2k::MsoLineStyle Style/*[in]*/) = 0; // [110]
  virtual HRESULT STDMETHODCALLTYPE get_Transparency(float* Transparency/*[out,retval]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE set_Transparency(float Transparency/*[in]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/) = 0; // [112]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(Office_2k::MsoTriState Visible/*[in]*/) = 0; // [112]
  virtual HRESULT STDMETHODCALLTYPE get_Weight(float* Weight/*[out,retval]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE set_Weight(float Weight/*[in]*/) = 0; // [113]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Application(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Application((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  long __fastcall get_Creator(void)
  {
    long plCreator;
    OLECHECK(this->get_Creator((long*)&plCreator));
    return plCreator;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::ColorFormatPtr __fastcall get_BackColor(void)
  {
    Powerpoint_2k::ColorFormatPtr BackColor;
    OLECHECK(this->get_BackColor((Powerpoint_2k::ColorFormatPtr*)&BackColor));
    return BackColor;
  }

  Office_2k::MsoArrowheadLength __fastcall get_BeginArrowheadLength(void)
  {
    Office_2k::MsoArrowheadLength BeginArrowheadLength;
    OLECHECK(this->get_BeginArrowheadLength((Office_2k::MsoArrowheadLength*)&BeginArrowheadLength));
    return BeginArrowheadLength;
  }

  Office_2k::MsoArrowheadStyle __fastcall get_BeginArrowheadStyle(void)
  {
    Office_2k::MsoArrowheadStyle BeginArrowheadStyle;
    OLECHECK(this->get_BeginArrowheadStyle((Office_2k::MsoArrowheadStyle*)&BeginArrowheadStyle));
    return BeginArrowheadStyle;
  }

  Office_2k::MsoArrowheadWidth __fastcall get_BeginArrowheadWidth(void)
  {
    Office_2k::MsoArrowheadWidth BeginArrowheadWidth;
    OLECHECK(this->get_BeginArrowheadWidth((Office_2k::MsoArrowheadWidth*)&BeginArrowheadWidth));
    return BeginArrowheadWidth;
  }

  Office_2k::MsoLineDashStyle __fastcall get_DashStyle(void)
  {
    Office_2k::MsoLineDashStyle DashStyle;
    OLECHECK(this->get_DashStyle((Office_2k::MsoLineDashStyle*)&DashStyle));
    return DashStyle;
  }

  Office_2k::MsoArrowheadLength __fastcall get_EndArrowheadLength(void)
  {
    Office_2k::MsoArrowheadLength EndArrowheadLength;
    OLECHECK(this->get_EndArrowheadLength((Office_2k::MsoArrowheadLength*)&EndArrowheadLength));
    return EndArrowheadLength;
  }

  Office_2k::MsoArrowheadStyle __fastcall get_EndArrowheadStyle(void)
  {
    Office_2k::MsoArrowheadStyle EndArrowheadStyle;
    OLECHECK(this->get_EndArrowheadStyle((Office_2k::MsoArrowheadStyle*)&EndArrowheadStyle));
    return EndArrowheadStyle;
  }

  Office_2k::MsoArrowheadWidth __fastcall get_EndArrowheadWidth(void)
  {
    Office_2k::MsoArrowheadWidth EndArrowheadWidth;
    OLECHECK(this->get_EndArrowheadWidth((Office_2k::MsoArrowheadWidth*)&EndArrowheadWidth));
    return EndArrowheadWidth;
  }

  Powerpoint_2k::ColorFormatPtr __fastcall get_ForeColor(void)
  {
    Powerpoint_2k::ColorFormatPtr ForeColor;
    OLECHECK(this->get_ForeColor((Powerpoint_2k::ColorFormatPtr*)&ForeColor));
    return ForeColor;
  }

  Office_2k::MsoPatternType __fastcall get_Pattern(void)
  {
    Office_2k::MsoPatternType Pattern;
    OLECHECK(this->get_Pattern((Office_2k::MsoPatternType*)&Pattern));
    return Pattern;
  }

  Office_2k::MsoLineStyle __fastcall get_Style(void)
  {
    Office_2k::MsoLineStyle Style;
    OLECHECK(this->get_Style((Office_2k::MsoLineStyle*)&Style));
    return Style;
  }

  float __fastcall get_Transparency(void)
  {
    float Transparency;
    OLECHECK(this->get_Transparency((float*)&Transparency));
    return Transparency;
  }

  Office_2k::MsoTriState __fastcall get_Visible(void)
  {
    Office_2k::MsoTriState Visible;
    OLECHECK(this->get_Visible((Office_2k::MsoTriState*)&Visible));
    return Visible;
  }

  float __fastcall get_Weight(void)
  {
    float Weight;
    OLECHECK(this->get_Weight((float*)&Weight));
    return Weight;
  }


  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::ColorFormatPtr BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Office_2k::MsoArrowheadLength BeginArrowheadLength = {read = get_BeginArrowheadLength, write = set_BeginArrowheadLength};
  __property   Office_2k::MsoArrowheadStyle BeginArrowheadStyle = {read = get_BeginArrowheadStyle, write = set_BeginArrowheadStyle};
  __property   Office_2k::MsoArrowheadWidth BeginArrowheadWidth = {read = get_BeginArrowheadWidth, write = set_BeginArrowheadWidth};
  __property   Office_2k::MsoLineDashStyle DashStyle = {read = get_DashStyle, write = set_DashStyle};
  __property   Office_2k::MsoArrowheadLength EndArrowheadLength = {read = get_EndArrowheadLength, write = set_EndArrowheadLength};
  __property   Office_2k::MsoArrowheadStyle EndArrowheadStyle = {read = get_EndArrowheadStyle, write = set_EndArrowheadStyle};
  __property   Office_2k::MsoArrowheadWidth EndArrowheadWidth = {read = get_EndArrowheadWidth, write = set_EndArrowheadWidth};
  __property   Powerpoint_2k::ColorFormatPtr ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   Office_2k::MsoPatternType Pattern = {read = get_Pattern, write = set_Pattern};
  __property   Office_2k::MsoLineStyle Style = {read = get_Style, write = set_Style};
  __property   float           Transparency = {read = get_Transparency, write = set_Transparency};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   float           Weight = {read = get_Weight, write = set_Weight};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ShadowFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493480-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface ShadowFormat  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Creator(long* plCreator/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE IncrementOffsetX(float Increment/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE IncrementOffsetY(float Increment/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_ForeColor(Powerpoint_2k::ColorFormatPtr* ForeColor/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE set_ForeColor(Powerpoint_2k::ColorFormatPtr ForeColor/*[in]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_Obscured(Office_2k::MsoTriState* Obscured/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_Obscured(Office_2k::MsoTriState Obscured/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_OffsetX(float* OffsetX/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_OffsetX(float OffsetX/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_OffsetY(float* OffsetY/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE set_OffsetY(float OffsetY/*[in]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_Transparency(float* Transparency/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE set_Transparency(float Transparency/*[in]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Office_2k::MsoShadowType* Type/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE set_Type(Office_2k::MsoShadowType Type/*[in]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(Office_2k::MsoTriState Visible/*[in]*/) = 0; // [106]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Application(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Application((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  long __fastcall get_Creator(void)
  {
    long plCreator;
    OLECHECK(this->get_Creator((long*)&plCreator));
    return plCreator;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::ColorFormatPtr __fastcall get_ForeColor(void)
  {
    Powerpoint_2k::ColorFormatPtr ForeColor;
    OLECHECK(this->get_ForeColor((Powerpoint_2k::ColorFormatPtr*)&ForeColor));
    return ForeColor;
  }

  Office_2k::MsoTriState __fastcall get_Obscured(void)
  {
    Office_2k::MsoTriState Obscured;
    OLECHECK(this->get_Obscured((Office_2k::MsoTriState*)&Obscured));
    return Obscured;
  }

  float __fastcall get_OffsetX(void)
  {
    float OffsetX;
    OLECHECK(this->get_OffsetX((float*)&OffsetX));
    return OffsetX;
  }

  float __fastcall get_OffsetY(void)
  {
    float OffsetY;
    OLECHECK(this->get_OffsetY((float*)&OffsetY));
    return OffsetY;
  }

  float __fastcall get_Transparency(void)
  {
    float Transparency;
    OLECHECK(this->get_Transparency((float*)&Transparency));
    return Transparency;
  }

  Office_2k::MsoShadowType __fastcall get_Type(void)
  {
    Office_2k::MsoShadowType Type;
    OLECHECK(this->get_Type((Office_2k::MsoShadowType*)&Type));
    return Type;
  }

  Office_2k::MsoTriState __fastcall get_Visible(void)
  {
    Office_2k::MsoTriState Visible;
    OLECHECK(this->get_Visible((Office_2k::MsoTriState*)&Visible));
    return Visible;
  }


  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::ColorFormatPtr ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   Office_2k::MsoTriState Obscured = {read = get_Obscured, write = set_Obscured};
  __property   float           OffsetX = {read = get_OffsetX, write = set_OffsetX};
  __property   float           OffsetY = {read = get_OffsetY, write = set_OffsetY};
  __property   float           Transparency = {read = get_Transparency, write = set_Transparency};
  __property   Office_2k::MsoShadowType Type = {read = get_Type, write = set_Type};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ConnectorFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493481-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface ConnectorFormat  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Creator(long* plCreator/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE BeginConnect(Powerpoint_2k::ShapePtr ConnectedShape/*[in]*/, 
                                                 int ConnectionSite/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE BeginDisconnect(void) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE EndConnect(Powerpoint_2k::ShapePtr ConnectedShape/*[in]*/, 
                                               int ConnectionSite/*[in]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE EndDisconnect(void) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE get_BeginConnected(Office_2k::MsoTriState* BeginConnected/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_BeginConnectedShape(Powerpoint_2k::ShapePtr* BeginConnectedShape/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_BeginConnectionSite(int* BeginConnectionSite/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_EndConnected(Office_2k::MsoTriState* EndConnected/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_EndConnectedShape(Powerpoint_2k::ShapePtr* EndConnectedShape/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_EndConnectionSite(int* EndConnectionSite/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Office_2k::MsoConnectorType* Type/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE set_Type(Office_2k::MsoConnectorType Type/*[in]*/) = 0; // [106]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Application(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Application((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  long __fastcall get_Creator(void)
  {
    long plCreator;
    OLECHECK(this->get_Creator((long*)&plCreator));
    return plCreator;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Office_2k::MsoTriState __fastcall get_BeginConnected(void)
  {
    Office_2k::MsoTriState BeginConnected;
    OLECHECK(this->get_BeginConnected((Office_2k::MsoTriState*)&BeginConnected));
    return BeginConnected;
  }

  Powerpoint_2k::ShapePtr __fastcall get_BeginConnectedShape(void)
  {
    Powerpoint_2k::ShapePtr BeginConnectedShape;
    OLECHECK(this->get_BeginConnectedShape((Powerpoint_2k::ShapePtr*)&BeginConnectedShape));
    return BeginConnectedShape;
  }

  int __fastcall get_BeginConnectionSite(void)
  {
    int BeginConnectionSite;
    OLECHECK(this->get_BeginConnectionSite((int*)&BeginConnectionSite));
    return BeginConnectionSite;
  }

  Office_2k::MsoTriState __fastcall get_EndConnected(void)
  {
    Office_2k::MsoTriState EndConnected;
    OLECHECK(this->get_EndConnected((Office_2k::MsoTriState*)&EndConnected));
    return EndConnected;
  }

  Powerpoint_2k::ShapePtr __fastcall get_EndConnectedShape(void)
  {
    Powerpoint_2k::ShapePtr EndConnectedShape;
    OLECHECK(this->get_EndConnectedShape((Powerpoint_2k::ShapePtr*)&EndConnectedShape));
    return EndConnectedShape;
  }

  int __fastcall get_EndConnectionSite(void)
  {
    int EndConnectionSite;
    OLECHECK(this->get_EndConnectionSite((int*)&EndConnectionSite));
    return EndConnectionSite;
  }

  Office_2k::MsoConnectorType __fastcall get_Type(void)
  {
    Office_2k::MsoConnectorType Type;
    OLECHECK(this->get_Type((Office_2k::MsoConnectorType*)&Type));
    return Type;
  }


  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoTriState BeginConnected = {read = get_BeginConnected};
  __property   Powerpoint_2k::ShapePtr BeginConnectedShape = {read = get_BeginConnectedShape};
  __property   int             BeginConnectionSite = {read = get_BeginConnectionSite};
  __property   Office_2k::MsoTriState EndConnected = {read = get_EndConnected};
  __property   Powerpoint_2k::ShapePtr EndConnectedShape = {read = get_EndConnectedShape};
  __property   int             EndConnectionSite = {read = get_EndConnectionSite};
  __property   Office_2k::MsoConnectorType Type = {read = get_Type, write = set_Type};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: TextEffectFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493482-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface TextEffectFormat  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Creator(long* plCreator/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE ToggleVerticalText(void) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_Alignment(Office_2k::MsoTextEffectAlignment* Alignment/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE set_Alignment(Office_2k::MsoTextEffectAlignment Alignment/*[in]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_FontBold(Office_2k::MsoTriState* FontBold/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_FontBold(Office_2k::MsoTriState FontBold/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_FontItalic(Office_2k::MsoTriState* FontItalic/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_FontItalic(Office_2k::MsoTriState FontItalic/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_FontName(BSTR* FontName/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE set_FontName(BSTR FontName/*[in]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_FontSize(float* FontSize/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE set_FontSize(float FontSize/*[in]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_KernedPairs(Office_2k::MsoTriState* KernedPairs/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE set_KernedPairs(Office_2k::MsoTriState KernedPairs/*[in]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_NormalizedHeight(Office_2k::MsoTriState* NormalizedHeight/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE set_NormalizedHeight(Office_2k::MsoTriState NormalizedHeight/*[in]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_PresetShape(Office_2k::MsoPresetTextEffectShape* PresetShape/*[out,retval]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE set_PresetShape(Office_2k::MsoPresetTextEffectShape PresetShape/*[in]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE get_PresetTextEffect(Office_2k::MsoPresetTextEffect* Preset/*[out,retval]*/) = 0; // [108]
  virtual HRESULT STDMETHODCALLTYPE set_PresetTextEffect(Office_2k::MsoPresetTextEffect Preset/*[in]*/) = 0; // [108]
  virtual HRESULT STDMETHODCALLTYPE get_RotatedChars(Office_2k::MsoTriState* RotatedChars/*[out,retval]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE set_RotatedChars(Office_2k::MsoTriState RotatedChars/*[in]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE get_Text(BSTR* Text/*[out,retval]*/) = 0; // [110]
  virtual HRESULT STDMETHODCALLTYPE set_Text(BSTR Text/*[in]*/) = 0; // [110]
  virtual HRESULT STDMETHODCALLTYPE get_Tracking(float* Tracking/*[out,retval]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE set_Tracking(float Tracking/*[in]*/) = 0; // [111]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Application(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Application((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  long __fastcall get_Creator(void)
  {
    long plCreator;
    OLECHECK(this->get_Creator((long*)&plCreator));
    return plCreator;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Office_2k::MsoTextEffectAlignment __fastcall get_Alignment(void)
  {
    Office_2k::MsoTextEffectAlignment Alignment;
    OLECHECK(this->get_Alignment((Office_2k::MsoTextEffectAlignment*)&Alignment));
    return Alignment;
  }

  Office_2k::MsoTriState __fastcall get_FontBold(void)
  {
    Office_2k::MsoTriState FontBold;
    OLECHECK(this->get_FontBold((Office_2k::MsoTriState*)&FontBold));
    return FontBold;
  }

  Office_2k::MsoTriState __fastcall get_FontItalic(void)
  {
    Office_2k::MsoTriState FontItalic;
    OLECHECK(this->get_FontItalic((Office_2k::MsoTriState*)&FontItalic));
    return FontItalic;
  }

  BSTR __fastcall get_FontName(void)
  {
    BSTR FontName = 0;
    OLECHECK(this->get_FontName((BSTR*)&FontName));
    return FontName;
  }

  float __fastcall get_FontSize(void)
  {
    float FontSize;
    OLECHECK(this->get_FontSize((float*)&FontSize));
    return FontSize;
  }

  Office_2k::MsoTriState __fastcall get_KernedPairs(void)
  {
    Office_2k::MsoTriState KernedPairs;
    OLECHECK(this->get_KernedPairs((Office_2k::MsoTriState*)&KernedPairs));
    return KernedPairs;
  }

  Office_2k::MsoTriState __fastcall get_NormalizedHeight(void)
  {
    Office_2k::MsoTriState NormalizedHeight;
    OLECHECK(this->get_NormalizedHeight((Office_2k::MsoTriState*)&NormalizedHeight));
    return NormalizedHeight;
  }

  Office_2k::MsoPresetTextEffectShape __fastcall get_PresetShape(void)
  {
    Office_2k::MsoPresetTextEffectShape PresetShape;
    OLECHECK(this->get_PresetShape((Office_2k::MsoPresetTextEffectShape*)&PresetShape));
    return PresetShape;
  }

  Office_2k::MsoPresetTextEffect __fastcall get_PresetTextEffect(void)
  {
    Office_2k::MsoPresetTextEffect Preset;
    OLECHECK(this->get_PresetTextEffect((Office_2k::MsoPresetTextEffect*)&Preset));
    return Preset;
  }

  Office_2k::MsoTriState __fastcall get_RotatedChars(void)
  {
    Office_2k::MsoTriState RotatedChars;
    OLECHECK(this->get_RotatedChars((Office_2k::MsoTriState*)&RotatedChars));
    return RotatedChars;
  }

  BSTR __fastcall get_Text(void)
  {
    BSTR Text = 0;
    OLECHECK(this->get_Text((BSTR*)&Text));
    return Text;
  }

  float __fastcall get_Tracking(void)
  {
    float Tracking;
    OLECHECK(this->get_Tracking((float*)&Tracking));
    return Tracking;
  }


  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoTextEffectAlignment Alignment = {read = get_Alignment, write = set_Alignment};
  __property   Office_2k::MsoTriState FontBold = {read = get_FontBold, write = set_FontBold};
  __property   Office_2k::MsoTriState FontItalic = {read = get_FontItalic, write = set_FontItalic};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   float           FontSize = {read = get_FontSize, write = set_FontSize};
  __property   Office_2k::MsoTriState KernedPairs = {read = get_KernedPairs, write = set_KernedPairs};
  __property   Office_2k::MsoTriState NormalizedHeight = {read = get_NormalizedHeight, write = set_NormalizedHeight};
  __property   Office_2k::MsoPresetTextEffectShape PresetShape = {read = get_PresetShape, write = set_PresetShape};
  __property   Office_2k::MsoPresetTextEffect PresetTextEffect = {read = get_PresetTextEffect, write = set_PresetTextEffect};
  __property   Office_2k::MsoTriState RotatedChars = {read = get_RotatedChars, write = set_RotatedChars};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   float           Tracking = {read = get_Tracking, write = set_Tracking};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ThreeDFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493483-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface ThreeDFormat  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Creator(long* plCreator/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE IncrementRotationX(float Increment/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE IncrementRotationY(float Increment/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE ResetRotation(void) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE SetThreeDFormat(Office_2k::MsoPresetThreeDFormat PresetThreeDFormat/*[in]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE SetExtrusionDirection(Office_2k::MsoPresetExtrusionDirection PresetExtrusionDirection/*[in]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE get_Depth(float* Depth/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE set_Depth(float Depth/*[in]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_ExtrusionColor(Powerpoint_2k::ColorFormatPtr* ExtrusionColor/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_ExtrusionColorType(Office_2k::MsoExtrusionColorType* ExtrusionColorType/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_ExtrusionColorType(Office_2k::MsoExtrusionColorType ExtrusionColorType/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_Perspective(Office_2k::MsoTriState* Perspective/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE set_Perspective(Office_2k::MsoTriState Perspective/*[in]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_PresetExtrusionDirection(Office_2k::MsoPresetExtrusionDirection* PresetExtrusionDirection/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_PresetLightingDirection(Office_2k::MsoPresetLightingDirection* PresetLightingDirection/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE set_PresetLightingDirection(Office_2k::MsoPresetLightingDirection PresetLightingDirection/*[in]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_PresetLightingSoftness(Office_2k::MsoPresetLightingSoftness* PresetLightingSoftness/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE set_PresetLightingSoftness(Office_2k::MsoPresetLightingSoftness PresetLightingSoftness/*[in]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_PresetMaterial(Office_2k::MsoPresetMaterial* PresetMaterial/*[out,retval]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE set_PresetMaterial(Office_2k::MsoPresetMaterial PresetMaterial/*[in]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE get_PresetThreeDFormat(Office_2k::MsoPresetThreeDFormat* PresetThreeDFormat/*[out,retval]*/) = 0; // [108]
  virtual HRESULT STDMETHODCALLTYPE get_RotationX(float* RotationX/*[out,retval]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE set_RotationX(float RotationX/*[in]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE get_RotationY(float* RotationY/*[out,retval]*/) = 0; // [110]
  virtual HRESULT STDMETHODCALLTYPE set_RotationY(float RotationY/*[in]*/) = 0; // [110]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(Office_2k::MsoTriState Visible/*[in]*/) = 0; // [111]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Application(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Application((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  long __fastcall get_Creator(void)
  {
    long plCreator;
    OLECHECK(this->get_Creator((long*)&plCreator));
    return plCreator;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  float __fastcall get_Depth(void)
  {
    float Depth;
    OLECHECK(this->get_Depth((float*)&Depth));
    return Depth;
  }

  Powerpoint_2k::ColorFormatPtr __fastcall get_ExtrusionColor(void)
  {
    Powerpoint_2k::ColorFormatPtr ExtrusionColor;
    OLECHECK(this->get_ExtrusionColor((Powerpoint_2k::ColorFormatPtr*)&ExtrusionColor));
    return ExtrusionColor;
  }

  Office_2k::MsoExtrusionColorType __fastcall get_ExtrusionColorType(void)
  {
    Office_2k::MsoExtrusionColorType ExtrusionColorType;
    OLECHECK(this->get_ExtrusionColorType((Office_2k::MsoExtrusionColorType*)&ExtrusionColorType));
    return ExtrusionColorType;
  }

  Office_2k::MsoTriState __fastcall get_Perspective(void)
  {
    Office_2k::MsoTriState Perspective;
    OLECHECK(this->get_Perspective((Office_2k::MsoTriState*)&Perspective));
    return Perspective;
  }

  Office_2k::MsoPresetExtrusionDirection __fastcall get_PresetExtrusionDirection(void)
  {
    Office_2k::MsoPresetExtrusionDirection PresetExtrusionDirection;
    OLECHECK(this->get_PresetExtrusionDirection((Office_2k::MsoPresetExtrusionDirection*)&PresetExtrusionDirection));
    return PresetExtrusionDirection;
  }

  Office_2k::MsoPresetLightingDirection __fastcall get_PresetLightingDirection(void)
  {
    Office_2k::MsoPresetLightingDirection PresetLightingDirection;
    OLECHECK(this->get_PresetLightingDirection((Office_2k::MsoPresetLightingDirection*)&PresetLightingDirection));
    return PresetLightingDirection;
  }

  Office_2k::MsoPresetLightingSoftness __fastcall get_PresetLightingSoftness(void)
  {
    Office_2k::MsoPresetLightingSoftness PresetLightingSoftness;
    OLECHECK(this->get_PresetLightingSoftness((Office_2k::MsoPresetLightingSoftness*)&PresetLightingSoftness));
    return PresetLightingSoftness;
  }

  Office_2k::MsoPresetMaterial __fastcall get_PresetMaterial(void)
  {
    Office_2k::MsoPresetMaterial PresetMaterial;
    OLECHECK(this->get_PresetMaterial((Office_2k::MsoPresetMaterial*)&PresetMaterial));
    return PresetMaterial;
  }

  Office_2k::MsoPresetThreeDFormat __fastcall get_PresetThreeDFormat(void)
  {
    Office_2k::MsoPresetThreeDFormat PresetThreeDFormat;
    OLECHECK(this->get_PresetThreeDFormat((Office_2k::MsoPresetThreeDFormat*)&PresetThreeDFormat));
    return PresetThreeDFormat;
  }

  float __fastcall get_RotationX(void)
  {
    float RotationX;
    OLECHECK(this->get_RotationX((float*)&RotationX));
    return RotationX;
  }

  float __fastcall get_RotationY(void)
  {
    float RotationY;
    OLECHECK(this->get_RotationY((float*)&RotationY));
    return RotationY;
  }

  Office_2k::MsoTriState __fastcall get_Visible(void)
  {
    Office_2k::MsoTriState Visible;
    OLECHECK(this->get_Visible((Office_2k::MsoTriState*)&Visible));
    return Visible;
  }


  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   float           Depth = {read = get_Depth, write = set_Depth};
  __property   Powerpoint_2k::ColorFormatPtr ExtrusionColor = {read = get_ExtrusionColor};
  __property   Office_2k::MsoExtrusionColorType ExtrusionColorType = {read = get_ExtrusionColorType, write = set_ExtrusionColorType};
  __property   Office_2k::MsoTriState Perspective = {read = get_Perspective, write = set_Perspective};
  __property   Office_2k::MsoPresetExtrusionDirection PresetExtrusionDirection = {read = get_PresetExtrusionDirection};
  __property   Office_2k::MsoPresetLightingDirection PresetLightingDirection = {read = get_PresetLightingDirection, write = set_PresetLightingDirection};
  __property   Office_2k::MsoPresetLightingSoftness PresetLightingSoftness = {read = get_PresetLightingSoftness, write = set_PresetLightingSoftness};
  __property   Office_2k::MsoPresetMaterial PresetMaterial = {read = get_PresetMaterial, write = set_PresetMaterial};
  __property   Office_2k::MsoPresetThreeDFormat PresetThreeDFormat = {read = get_PresetThreeDFormat};
  __property   float           RotationX = {read = get_RotationX, write = set_RotationX};
  __property   float           RotationY = {read = get_RotationY, write = set_RotationY};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: TextFrame
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493484-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface TextFrame  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Creator(long* plCreator/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_MarginBottom(float* MarginBottom/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE set_MarginBottom(float MarginBottom/*[in]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_MarginLeft(float* MarginLeft/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_MarginLeft(float MarginLeft/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_MarginRight(float* MarginRight/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_MarginRight(float MarginRight/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_MarginTop(float* MarginTop/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE set_MarginTop(float MarginTop/*[in]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_Orientation(Office_2k::MsoTextOrientation* Orientation/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE set_Orientation(Office_2k::MsoTextOrientation Orientation/*[in]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_HasText(Office_2k::MsoTriState* HasText/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_TextRange(Powerpoint_2k::TextRangePtr* TextRange/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_Ruler(Powerpoint_2k::RulerPtr* Ruler/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_HorizontalAnchor(Office_2k::MsoHorizontalAnchor* HorizontalAnchor/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_HorizontalAnchor(Office_2k::MsoHorizontalAnchor HorizontalAnchor/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_VerticalAnchor(Office_2k::MsoVerticalAnchor* VerticalAnchor/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE set_VerticalAnchor(Office_2k::MsoVerticalAnchor VerticalAnchor/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_AutoSize(Powerpoint_2k::PpAutoSize* AutoSize/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE set_AutoSize(Powerpoint_2k::PpAutoSize AutoSize/*[in]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_WordWrap(Office_2k::MsoTriState* WordWrap/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE set_WordWrap(Office_2k::MsoTriState WordWrap/*[in]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE DeleteText(void) = 0; // [2010]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Application(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Application((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  long __fastcall get_Creator(void)
  {
    long plCreator;
    OLECHECK(this->get_Creator((long*)&plCreator));
    return plCreator;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  float __fastcall get_MarginBottom(void)
  {
    float MarginBottom;
    OLECHECK(this->get_MarginBottom((float*)&MarginBottom));
    return MarginBottom;
  }

  float __fastcall get_MarginLeft(void)
  {
    float MarginLeft;
    OLECHECK(this->get_MarginLeft((float*)&MarginLeft));
    return MarginLeft;
  }

  float __fastcall get_MarginRight(void)
  {
    float MarginRight;
    OLECHECK(this->get_MarginRight((float*)&MarginRight));
    return MarginRight;
  }

  float __fastcall get_MarginTop(void)
  {
    float MarginTop;
    OLECHECK(this->get_MarginTop((float*)&MarginTop));
    return MarginTop;
  }

  Office_2k::MsoTextOrientation __fastcall get_Orientation(void)
  {
    Office_2k::MsoTextOrientation Orientation;
    OLECHECK(this->get_Orientation((Office_2k::MsoTextOrientation*)&Orientation));
    return Orientation;
  }

  Office_2k::MsoTriState __fastcall get_HasText(void)
  {
    Office_2k::MsoTriState HasText;
    OLECHECK(this->get_HasText((Office_2k::MsoTriState*)&HasText));
    return HasText;
  }

  Powerpoint_2k::TextRangePtr __fastcall get_TextRange(void)
  {
    Powerpoint_2k::TextRangePtr TextRange;
    OLECHECK(this->get_TextRange((Powerpoint_2k::TextRangePtr*)&TextRange));
    return TextRange;
  }

  Powerpoint_2k::RulerPtr __fastcall get_Ruler(void)
  {
    Powerpoint_2k::RulerPtr Ruler;
    OLECHECK(this->get_Ruler((Powerpoint_2k::RulerPtr*)&Ruler));
    return Ruler;
  }

  Office_2k::MsoHorizontalAnchor __fastcall get_HorizontalAnchor(void)
  {
    Office_2k::MsoHorizontalAnchor HorizontalAnchor;
    OLECHECK(this->get_HorizontalAnchor((Office_2k::MsoHorizontalAnchor*)&HorizontalAnchor));
    return HorizontalAnchor;
  }

  Office_2k::MsoVerticalAnchor __fastcall get_VerticalAnchor(void)
  {
    Office_2k::MsoVerticalAnchor VerticalAnchor;
    OLECHECK(this->get_VerticalAnchor((Office_2k::MsoVerticalAnchor*)&VerticalAnchor));
    return VerticalAnchor;
  }

  Powerpoint_2k::PpAutoSize __fastcall get_AutoSize(void)
  {
    Powerpoint_2k::PpAutoSize AutoSize;
    OLECHECK(this->get_AutoSize((Powerpoint_2k::PpAutoSize*)&AutoSize));
    return AutoSize;
  }

  Office_2k::MsoTriState __fastcall get_WordWrap(void)
  {
    Office_2k::MsoTriState WordWrap;
    OLECHECK(this->get_WordWrap((Office_2k::MsoTriState*)&WordWrap));
    return WordWrap;
  }


  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   float           MarginBottom = {read = get_MarginBottom, write = set_MarginBottom};
  __property   float           MarginLeft = {read = get_MarginLeft, write = set_MarginLeft};
  __property   float           MarginRight = {read = get_MarginRight, write = set_MarginRight};
  __property   float           MarginTop = {read = get_MarginTop, write = set_MarginTop};
  __property   Office_2k::MsoTextOrientation Orientation = {read = get_Orientation, write = set_Orientation};
  __property   Office_2k::MsoTriState HasText = {read = get_HasText};
  __property   Powerpoint_2k::TextRangePtr TextRange = {read = get_TextRange};
  __property   Powerpoint_2k::RulerPtr Ruler = {read = get_Ruler};
  __property   Office_2k::MsoHorizontalAnchor HorizontalAnchor = {read = get_HorizontalAnchor, write = set_HorizontalAnchor};
  __property   Office_2k::MsoVerticalAnchor VerticalAnchor = {read = get_VerticalAnchor, write = set_VerticalAnchor};
  __property   Powerpoint_2k::PpAutoSize AutoSize = {read = get_AutoSize, write = set_AutoSize};
  __property   Office_2k::MsoTriState WordWrap = {read = get_WordWrap, write = set_WordWrap};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: CalloutFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493485-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface CalloutFormat  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Creator(long* plCreator/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE AutomaticLength(void) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE CustomDrop(float Drop/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE CustomLength(float Length/*[in]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE PresetDrop(Office_2k::MsoCalloutDropType DropType/*[in]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE get_Accent(Office_2k::MsoTriState* Accent/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE set_Accent(Office_2k::MsoTriState Accent/*[in]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_Angle(Office_2k::MsoCalloutAngleType* Angle/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_Angle(Office_2k::MsoCalloutAngleType Angle/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_AutoAttach(Office_2k::MsoTriState* AutoAttach/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_AutoAttach(Office_2k::MsoTriState AutoAttach/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_AutoLength(Office_2k::MsoTriState* AutoLength/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_Border(Office_2k::MsoTriState* Border/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE set_Border(Office_2k::MsoTriState Border/*[in]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_Drop(float* Drop/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_DropType(Office_2k::MsoCalloutDropType* DropType/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_Gap(float* Gap/*[out,retval]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE set_Gap(float Gap/*[in]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE get_Length(float* Length/*[out,retval]*/) = 0; // [108]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Office_2k::MsoCalloutType* Type/*[out,retval]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE set_Type(Office_2k::MsoCalloutType Type/*[in]*/) = 0; // [109]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Application(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Application((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  long __fastcall get_Creator(void)
  {
    long plCreator;
    OLECHECK(this->get_Creator((long*)&plCreator));
    return plCreator;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Office_2k::MsoTriState __fastcall get_Accent(void)
  {
    Office_2k::MsoTriState Accent;
    OLECHECK(this->get_Accent((Office_2k::MsoTriState*)&Accent));
    return Accent;
  }

  Office_2k::MsoCalloutAngleType __fastcall get_Angle(void)
  {
    Office_2k::MsoCalloutAngleType Angle;
    OLECHECK(this->get_Angle((Office_2k::MsoCalloutAngleType*)&Angle));
    return Angle;
  }

  Office_2k::MsoTriState __fastcall get_AutoAttach(void)
  {
    Office_2k::MsoTriState AutoAttach;
    OLECHECK(this->get_AutoAttach((Office_2k::MsoTriState*)&AutoAttach));
    return AutoAttach;
  }

  Office_2k::MsoTriState __fastcall get_AutoLength(void)
  {
    Office_2k::MsoTriState AutoLength;
    OLECHECK(this->get_AutoLength((Office_2k::MsoTriState*)&AutoLength));
    return AutoLength;
  }

  Office_2k::MsoTriState __fastcall get_Border(void)
  {
    Office_2k::MsoTriState Border;
    OLECHECK(this->get_Border((Office_2k::MsoTriState*)&Border));
    return Border;
  }

  float __fastcall get_Drop(void)
  {
    float Drop;
    OLECHECK(this->get_Drop((float*)&Drop));
    return Drop;
  }

  Office_2k::MsoCalloutDropType __fastcall get_DropType(void)
  {
    Office_2k::MsoCalloutDropType DropType;
    OLECHECK(this->get_DropType((Office_2k::MsoCalloutDropType*)&DropType));
    return DropType;
  }

  float __fastcall get_Gap(void)
  {
    float Gap;
    OLECHECK(this->get_Gap((float*)&Gap));
    return Gap;
  }

  float __fastcall get_Length(void)
  {
    float Length;
    OLECHECK(this->get_Length((float*)&Length));
    return Length;
  }

  Office_2k::MsoCalloutType __fastcall get_Type(void)
  {
    Office_2k::MsoCalloutType Type;
    OLECHECK(this->get_Type((Office_2k::MsoCalloutType*)&Type));
    return Type;
  }


  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoTriState Accent = {read = get_Accent, write = set_Accent};
  __property   Office_2k::MsoCalloutAngleType Angle = {read = get_Angle, write = set_Angle};
  __property   Office_2k::MsoTriState AutoAttach = {read = get_AutoAttach, write = set_AutoAttach};
  __property   Office_2k::MsoTriState AutoLength = {read = get_AutoLength};
  __property   Office_2k::MsoTriState Border = {read = get_Border, write = set_Border};
  __property   float           Drop = {read = get_Drop};
  __property   Office_2k::MsoCalloutDropType DropType = {read = get_DropType};
  __property   float           Gap = {read = get_Gap, write = set_Gap};
  __property   float           Length = {read = get_Length};
  __property   Office_2k::MsoCalloutType Type = {read = get_Type, write = set_Type};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ShapeNodes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493486-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface ShapeNodes  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Creator(long* plCreator/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Count(int* Count/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE Item(TVariantInParam index/*[in]*/, 
                                         Powerpoint_2k::ShapeNodePtr* Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE Delete(int index/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE Insert(int index/*[in]*/, 
                                           Office_2k::MsoSegmentType SegmentType/*[in]*/, 
                                           Office_2k::MsoEditingType EditingType/*[in]*/, 
                                           float X1/*[in]*/, float Y1/*[in]*/, 
                                           float X2/*[in,def,opt]*/, float Y2/*[in,def,opt]*/, 
                                           float X3/*[in,def,opt]*/, float Y3/*[in,def,opt]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE SetEditingType(int index/*[in]*/, 
                                                   Office_2k::MsoEditingType EditingType/*[in]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE SetPosition(int index/*[in]*/, float X1/*[in]*/, 
                                                float Y1/*[in]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE SetSegmentType(int index/*[in]*/, 
                                                   Office_2k::MsoSegmentType SegmentType/*[in]*/) = 0; // [15]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Application(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Application((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  long __fastcall get_Creator(void)
  {
    long plCreator;
    OLECHECK(this->get_Creator((long*)&plCreator));
    return plCreator;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  int __fastcall get_Count(void)
  {
    int Count;
    OLECHECK(this->get_Count((int*)&Count));
    return Count;
  }

  Powerpoint_2k::ShapeNodePtr __fastcall Item(TVariantInParam index/*[in]*/)
  {
    Powerpoint_2k::ShapeNodePtr Item;
    OLECHECK(this->Item(index, (Powerpoint_2k::ShapeNodePtr*)&Item));
    return Item;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN _NewEnum;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&_NewEnum));
    return _NewEnum;
  }


  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ShapeNode
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493487-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface ShapeNode  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Creator(long* plCreator/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_EditingType(Office_2k::MsoEditingType* EditingType/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_Points(TVariant* Points/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_SegmentType(Office_2k::MsoSegmentType* SegmentType/*[out,retval]*/) = 0; // [102]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Application(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Application((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  long __fastcall get_Creator(void)
  {
    long plCreator;
    OLECHECK(this->get_Creator((long*)&plCreator));
    return plCreator;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Office_2k::MsoEditingType __fastcall get_EditingType(void)
  {
    Office_2k::MsoEditingType EditingType;
    OLECHECK(this->get_EditingType((Office_2k::MsoEditingType*)&EditingType));
    return EditingType;
  }

  TVariant __fastcall get_Points(void)
  {
    TVariant Points;
    OLECHECK(this->get_Points((TVariant*)&Points));
    return Points;
  }

  Office_2k::MsoSegmentType __fastcall get_SegmentType(void)
  {
    Office_2k::MsoSegmentType SegmentType;
    OLECHECK(this->get_SegmentType((Office_2k::MsoSegmentType*)&SegmentType));
    return SegmentType;
  }


  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoEditingType EditingType = {read = get_EditingType};
  __property   Office_2k::MsoSegmentType SegmentType = {read = get_SegmentType};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: OLEFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493488-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface OLEFormat  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_ObjectVerbs(Powerpoint_2k::ObjectVerbsPtr* ObjectVerbs/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_Object(LPDISPATCH* Object/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_ProgID(BSTR* ProgID/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_FollowColors(Powerpoint_2k::PpFollowColors* FollowColors/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_FollowColors(Powerpoint_2k::PpFollowColors FollowColors/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE DoVerb(int index/*[in,def,opt]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE Activate(void) = 0; // [2008]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::ObjectVerbsPtr __fastcall get_ObjectVerbs(void)
  {
    Powerpoint_2k::ObjectVerbsPtr ObjectVerbs;
    OLECHECK(this->get_ObjectVerbs((Powerpoint_2k::ObjectVerbsPtr*)&ObjectVerbs));
    return ObjectVerbs;
  }

  LPDISPATCH __fastcall get_Object(void)
  {
    LPDISPATCH Object;
    OLECHECK(this->get_Object((LPDISPATCH*)&Object));
    return Object;
  }

  BSTR __fastcall get_ProgID(void)
  {
    BSTR ProgID = 0;
    OLECHECK(this->get_ProgID((BSTR*)&ProgID));
    return ProgID;
  }

  Powerpoint_2k::PpFollowColors __fastcall get_FollowColors(void)
  {
    Powerpoint_2k::PpFollowColors FollowColors;
    OLECHECK(this->get_FollowColors((Powerpoint_2k::PpFollowColors*)&FollowColors));
    return FollowColors;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::ObjectVerbsPtr ObjectVerbs = {read = get_ObjectVerbs};
  __property   LPDISPATCH      Object = {read = get_Object};
  __property   BSTR            ProgID = {read = get_ProgID};
  __property   Powerpoint_2k::PpFollowColors FollowColors = {read = get_FollowColors, write = set_FollowColors};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: LinkFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493489-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface LinkFormat  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_SourceFullName(BSTR* SourceFullName/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_SourceFullName(BSTR SourceFullName/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_AutoUpdate(Powerpoint_2k::PpUpdateOption* AutoUpdate/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_AutoUpdate(Powerpoint_2k::PpUpdateOption AutoUpdate/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE _Update(void) = 0; // [2005]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  BSTR __fastcall get_SourceFullName(void)
  {
    BSTR SourceFullName = 0;
    OLECHECK(this->get_SourceFullName((BSTR*)&SourceFullName));
    return SourceFullName;
  }

  Powerpoint_2k::PpUpdateOption __fastcall get_AutoUpdate(void)
  {
    Powerpoint_2k::PpUpdateOption AutoUpdate;
    OLECHECK(this->get_AutoUpdate((Powerpoint_2k::PpUpdateOption*)&AutoUpdate));
    return AutoUpdate;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            SourceFullName = {read = get_SourceFullName, write = set_SourceFullName};
  __property   Powerpoint_2k::PpUpdateOption AutoUpdate = {read = get_AutoUpdate, write = set_AutoUpdate};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ObjectVerbs
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149348A-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface ObjectVerbs  : public Powerpoint_2k::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(int index/*[in]*/, BSTR* Item/*[out,retval]*/) = 0; // [0]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  BSTR __fastcall Item(int index/*[in]*/)
  {
    BSTR Item = 0;
    OLECHECK(this->Item(index, (BSTR*)&Item));
    return Item;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: AnimationSettings
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149348B-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface AnimationSettings  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_DimColor(Powerpoint_2k::ColorFormatPtr* DimColor/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_SoundEffect(Powerpoint_2k::SoundEffectPtr* SoundEffect/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_EntryEffect(Powerpoint_2k::PpEntryEffect* EntryEffect/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_EntryEffect(Powerpoint_2k::PpEntryEffect EntryEffect/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_AfterEffect(Powerpoint_2k::PpAfterEffect* AfterEffect/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_AfterEffect(Powerpoint_2k::PpAfterEffect AfterEffect/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_AnimationOrder(int* AnimationOrder/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE set_AnimationOrder(int AnimationOrder/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_AdvanceMode(Powerpoint_2k::PpAdvanceMode* AdvanceMode/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE set_AdvanceMode(Powerpoint_2k::PpAdvanceMode AdvanceMode/*[in]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_AdvanceTime(float* AdvanceTime/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE set_AdvanceTime(float AdvanceTime/*[in]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_PlaySettings(Powerpoint_2k::PlaySettingsPtr* PlaySettings/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE get_TextLevelEffect(Powerpoint_2k::PpTextLevelEffect* TextLevelEffect/*[out,retval]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE set_TextLevelEffect(Powerpoint_2k::PpTextLevelEffect TextLevelEffect/*[in]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE get_TextUnitEffect(Powerpoint_2k::PpTextUnitEffect* TextUnitEffect/*[out,retval]*/) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE set_TextUnitEffect(Powerpoint_2k::PpTextUnitEffect TextUnitEffect/*[in]*/) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE get_Animate(Office_2k::MsoTriState* Animate/*[out,retval]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE set_Animate(Office_2k::MsoTriState Animate/*[in]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE get_AnimateBackground(Office_2k::MsoTriState* AnimateBackground/*[out,retval]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE set_AnimateBackground(Office_2k::MsoTriState AnimateBackground/*[in]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE get_AnimateTextInReverse(Office_2k::MsoTriState* AnimateTextInReverse/*[out,retval]*/) = 0; // [2015]
  virtual HRESULT STDMETHODCALLTYPE set_AnimateTextInReverse(Office_2k::MsoTriState AnimateTextInReverse/*[in]*/) = 0; // [2015]
  virtual HRESULT STDMETHODCALLTYPE get_ChartUnitEffect(Powerpoint_2k::PpChartUnitEffect* ChartUnitEffect/*[out,retval]*/) = 0; // [2016]
  virtual HRESULT STDMETHODCALLTYPE set_ChartUnitEffect(Powerpoint_2k::PpChartUnitEffect ChartUnitEffect/*[in]*/) = 0; // [2016]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::ColorFormatPtr __fastcall get_DimColor(void)
  {
    Powerpoint_2k::ColorFormatPtr DimColor;
    OLECHECK(this->get_DimColor((Powerpoint_2k::ColorFormatPtr*)&DimColor));
    return DimColor;
  }

  Powerpoint_2k::SoundEffectPtr __fastcall get_SoundEffect(void)
  {
    Powerpoint_2k::SoundEffectPtr SoundEffect;
    OLECHECK(this->get_SoundEffect((Powerpoint_2k::SoundEffectPtr*)&SoundEffect));
    return SoundEffect;
  }

  Powerpoint_2k::PpEntryEffect __fastcall get_EntryEffect(void)
  {
    Powerpoint_2k::PpEntryEffect EntryEffect;
    OLECHECK(this->get_EntryEffect((Powerpoint_2k::PpEntryEffect*)&EntryEffect));
    return EntryEffect;
  }

  Powerpoint_2k::PpAfterEffect __fastcall get_AfterEffect(void)
  {
    Powerpoint_2k::PpAfterEffect AfterEffect;
    OLECHECK(this->get_AfterEffect((Powerpoint_2k::PpAfterEffect*)&AfterEffect));
    return AfterEffect;
  }

  int __fastcall get_AnimationOrder(void)
  {
    int AnimationOrder;
    OLECHECK(this->get_AnimationOrder((int*)&AnimationOrder));
    return AnimationOrder;
  }

  Powerpoint_2k::PpAdvanceMode __fastcall get_AdvanceMode(void)
  {
    Powerpoint_2k::PpAdvanceMode AdvanceMode;
    OLECHECK(this->get_AdvanceMode((Powerpoint_2k::PpAdvanceMode*)&AdvanceMode));
    return AdvanceMode;
  }

  float __fastcall get_AdvanceTime(void)
  {
    float AdvanceTime;
    OLECHECK(this->get_AdvanceTime((float*)&AdvanceTime));
    return AdvanceTime;
  }

  Powerpoint_2k::PlaySettingsPtr __fastcall get_PlaySettings(void)
  {
    Powerpoint_2k::PlaySettingsPtr PlaySettings;
    OLECHECK(this->get_PlaySettings((Powerpoint_2k::PlaySettingsPtr*)&PlaySettings));
    return PlaySettings;
  }

  Powerpoint_2k::PpTextLevelEffect __fastcall get_TextLevelEffect(void)
  {
    Powerpoint_2k::PpTextLevelEffect TextLevelEffect;
    OLECHECK(this->get_TextLevelEffect((Powerpoint_2k::PpTextLevelEffect*)&TextLevelEffect));
    return TextLevelEffect;
  }

  Powerpoint_2k::PpTextUnitEffect __fastcall get_TextUnitEffect(void)
  {
    Powerpoint_2k::PpTextUnitEffect TextUnitEffect;
    OLECHECK(this->get_TextUnitEffect((Powerpoint_2k::PpTextUnitEffect*)&TextUnitEffect));
    return TextUnitEffect;
  }

  Office_2k::MsoTriState __fastcall get_Animate(void)
  {
    Office_2k::MsoTriState Animate;
    OLECHECK(this->get_Animate((Office_2k::MsoTriState*)&Animate));
    return Animate;
  }

  Office_2k::MsoTriState __fastcall get_AnimateBackground(void)
  {
    Office_2k::MsoTriState AnimateBackground;
    OLECHECK(this->get_AnimateBackground((Office_2k::MsoTriState*)&AnimateBackground));
    return AnimateBackground;
  }

  Office_2k::MsoTriState __fastcall get_AnimateTextInReverse(void)
  {
    Office_2k::MsoTriState AnimateTextInReverse;
    OLECHECK(this->get_AnimateTextInReverse((Office_2k::MsoTriState*)&AnimateTextInReverse));
    return AnimateTextInReverse;
  }

  Powerpoint_2k::PpChartUnitEffect __fastcall get_ChartUnitEffect(void)
  {
    Powerpoint_2k::PpChartUnitEffect ChartUnitEffect;
    OLECHECK(this->get_ChartUnitEffect((Powerpoint_2k::PpChartUnitEffect*)&ChartUnitEffect));
    return ChartUnitEffect;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::ColorFormatPtr DimColor = {read = get_DimColor};
  __property   Powerpoint_2k::SoundEffectPtr SoundEffect = {read = get_SoundEffect};
  __property   Powerpoint_2k::PpEntryEffect EntryEffect = {read = get_EntryEffect, write = set_EntryEffect};
  __property   Powerpoint_2k::PpAfterEffect AfterEffect = {read = get_AfterEffect, write = set_AfterEffect};
  __property   int             AnimationOrder = {read = get_AnimationOrder, write = set_AnimationOrder};
  __property   Powerpoint_2k::PpAdvanceMode AdvanceMode = {read = get_AdvanceMode, write = set_AdvanceMode};
  __property   float           AdvanceTime = {read = get_AdvanceTime, write = set_AdvanceTime};
  __property   Powerpoint_2k::PlaySettingsPtr PlaySettings = {read = get_PlaySettings};
  __property   Powerpoint_2k::PpTextLevelEffect TextLevelEffect = {read = get_TextLevelEffect, write = set_TextLevelEffect};
  __property   Powerpoint_2k::PpTextUnitEffect TextUnitEffect = {read = get_TextUnitEffect, write = set_TextUnitEffect};
  __property   Office_2k::MsoTriState Animate = {read = get_Animate, write = set_Animate};
  __property   Office_2k::MsoTriState AnimateBackground = {read = get_AnimateBackground, write = set_AnimateBackground};
  __property   Office_2k::MsoTriState AnimateTextInReverse = {read = get_AnimateTextInReverse, write = set_AnimateTextInReverse};
  __property   Powerpoint_2k::PpChartUnitEffect ChartUnitEffect = {read = get_ChartUnitEffect, write = set_ChartUnitEffect};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ActionSettings
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149348C-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface ActionSettings  : public Powerpoint_2k::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(Powerpoint_2k::PpMouseActivation index/*[in]*/, 
                                         Powerpoint_2k::ActionSettingPtr* Item/*[out,retval]*/) = 0; // [0]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::ActionSettingPtr __fastcall Item(Powerpoint_2k::PpMouseActivation index/*[in]*/)
  {
    Powerpoint_2k::ActionSettingPtr Item;
    OLECHECK(this->Item(index, (Powerpoint_2k::ActionSettingPtr*)&Item));
    return Item;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ActionSetting
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149348D-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface ActionSetting  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Action(Powerpoint_2k::PpActionType* Action/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_Action(Powerpoint_2k::PpActionType Action/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_ActionVerb(BSTR* ActionVerb/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_ActionVerb(BSTR ActionVerb/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_AnimateAction(Office_2k::MsoTriState* AnimateAction/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_AnimateAction(Office_2k::MsoTriState AnimateAction/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Run(BSTR* Run/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_Run(BSTR Run/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_SlideShowName(BSTR* SlideShowName/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE set_SlideShowName(BSTR SlideShowName/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_Hyperlink(Powerpoint_2k::HyperlinkPtr* Hyperlink/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_SoundEffect(Powerpoint_2k::SoundEffectPtr* SoundEffect/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_ShowandReturn(Office_2k::MsoTriState* ShowandReturn/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE set_ShowandReturn(Office_2k::MsoTriState ShowandReturn/*[in]*/) = 0; // [2010]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::PpActionType __fastcall get_Action(void)
  {
    Powerpoint_2k::PpActionType Action;
    OLECHECK(this->get_Action((Powerpoint_2k::PpActionType*)&Action));
    return Action;
  }

  BSTR __fastcall get_ActionVerb(void)
  {
    BSTR ActionVerb = 0;
    OLECHECK(this->get_ActionVerb((BSTR*)&ActionVerb));
    return ActionVerb;
  }

  Office_2k::MsoTriState __fastcall get_AnimateAction(void)
  {
    Office_2k::MsoTriState AnimateAction;
    OLECHECK(this->get_AnimateAction((Office_2k::MsoTriState*)&AnimateAction));
    return AnimateAction;
  }

  BSTR __fastcall get_Run(void)
  {
    BSTR Run = 0;
    OLECHECK(this->get_Run((BSTR*)&Run));
    return Run;
  }

  BSTR __fastcall get_SlideShowName(void)
  {
    BSTR SlideShowName = 0;
    OLECHECK(this->get_SlideShowName((BSTR*)&SlideShowName));
    return SlideShowName;
  }

  Powerpoint_2k::HyperlinkPtr __fastcall get_Hyperlink(void)
  {
    Powerpoint_2k::HyperlinkPtr Hyperlink;
    OLECHECK(this->get_Hyperlink((Powerpoint_2k::HyperlinkPtr*)&Hyperlink));
    return Hyperlink;
  }

  Powerpoint_2k::SoundEffectPtr __fastcall get_SoundEffect(void)
  {
    Powerpoint_2k::SoundEffectPtr SoundEffect;
    OLECHECK(this->get_SoundEffect((Powerpoint_2k::SoundEffectPtr*)&SoundEffect));
    return SoundEffect;
  }

  Office_2k::MsoTriState __fastcall get_ShowandReturn(void)
  {
    Office_2k::MsoTriState ShowandReturn;
    OLECHECK(this->get_ShowandReturn((Office_2k::MsoTriState*)&ShowandReturn));
    return ShowandReturn;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::PpActionType Action = {read = get_Action, write = set_Action};
  __property   BSTR            ActionVerb = {read = get_ActionVerb, write = set_ActionVerb};
  __property   Office_2k::MsoTriState AnimateAction = {read = get_AnimateAction, write = set_AnimateAction};
  __property   BSTR            Run = {read = get_Run, write = set_Run};
  __property   BSTR            SlideShowName = {read = get_SlideShowName, write = set_SlideShowName};
  __property   Powerpoint_2k::HyperlinkPtr Hyperlink = {read = get_Hyperlink};
  __property   Powerpoint_2k::SoundEffectPtr SoundEffect = {read = get_SoundEffect};
  __property   Office_2k::MsoTriState ShowandReturn = {read = get_ShowandReturn, write = set_ShowandReturn};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PlaySettings
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149348E-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface PlaySettings  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_ActionVerb(BSTR* ActionVerb/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_ActionVerb(BSTR ActionVerb/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_HideWhileNotPlaying(Office_2k::MsoTriState* HideWhileNotPlaying/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_HideWhileNotPlaying(Office_2k::MsoTriState HideWhileNotPlaying/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_LoopUntilStopped(Office_2k::MsoTriState* LoopUntilStopped/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_LoopUntilStopped(Office_2k::MsoTriState LoopUntilStopped/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_PlayOnEntry(Office_2k::MsoTriState* PlayOnEntry/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_PlayOnEntry(Office_2k::MsoTriState PlayOnEntry/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_RewindMovie(Office_2k::MsoTriState* RewindMovie/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE set_RewindMovie(Office_2k::MsoTriState RewindMovie/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_PauseAnimation(Office_2k::MsoTriState* PauseAnimation/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE set_PauseAnimation(Office_2k::MsoTriState PauseAnimation/*[in]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_StopAfterSlides(int* StopAfterSlides/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE set_StopAfterSlides(int StopAfterSlides/*[in]*/) = 0; // [2009]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  BSTR __fastcall get_ActionVerb(void)
  {
    BSTR ActionVerb = 0;
    OLECHECK(this->get_ActionVerb((BSTR*)&ActionVerb));
    return ActionVerb;
  }

  Office_2k::MsoTriState __fastcall get_HideWhileNotPlaying(void)
  {
    Office_2k::MsoTriState HideWhileNotPlaying;
    OLECHECK(this->get_HideWhileNotPlaying((Office_2k::MsoTriState*)&HideWhileNotPlaying));
    return HideWhileNotPlaying;
  }

  Office_2k::MsoTriState __fastcall get_LoopUntilStopped(void)
  {
    Office_2k::MsoTriState LoopUntilStopped;
    OLECHECK(this->get_LoopUntilStopped((Office_2k::MsoTriState*)&LoopUntilStopped));
    return LoopUntilStopped;
  }

  Office_2k::MsoTriState __fastcall get_PlayOnEntry(void)
  {
    Office_2k::MsoTriState PlayOnEntry;
    OLECHECK(this->get_PlayOnEntry((Office_2k::MsoTriState*)&PlayOnEntry));
    return PlayOnEntry;
  }

  Office_2k::MsoTriState __fastcall get_RewindMovie(void)
  {
    Office_2k::MsoTriState RewindMovie;
    OLECHECK(this->get_RewindMovie((Office_2k::MsoTriState*)&RewindMovie));
    return RewindMovie;
  }

  Office_2k::MsoTriState __fastcall get_PauseAnimation(void)
  {
    Office_2k::MsoTriState PauseAnimation;
    OLECHECK(this->get_PauseAnimation((Office_2k::MsoTriState*)&PauseAnimation));
    return PauseAnimation;
  }

  int __fastcall get_StopAfterSlides(void)
  {
    int StopAfterSlides;
    OLECHECK(this->get_StopAfterSlides((int*)&StopAfterSlides));
    return StopAfterSlides;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            ActionVerb = {read = get_ActionVerb, write = set_ActionVerb};
  __property   Office_2k::MsoTriState HideWhileNotPlaying = {read = get_HideWhileNotPlaying, write = set_HideWhileNotPlaying};
  __property   Office_2k::MsoTriState LoopUntilStopped = {read = get_LoopUntilStopped, write = set_LoopUntilStopped};
  __property   Office_2k::MsoTriState PlayOnEntry = {read = get_PlayOnEntry, write = set_PlayOnEntry};
  __property   Office_2k::MsoTriState RewindMovie = {read = get_RewindMovie, write = set_RewindMovie};
  __property   Office_2k::MsoTriState PauseAnimation = {read = get_PauseAnimation, write = set_PauseAnimation};
  __property   int             StopAfterSlides = {read = get_StopAfterSlides, write = set_StopAfterSlides};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: TextRange
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149348F-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface TextRange  : public Powerpoint_2k::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_ActionSettings(Powerpoint_2k::ActionSettingsPtr* ActionSettings/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_Start(long* Start/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_Length(long* Length/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_BoundLeft(float* BoundLeft/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_BoundTop(float* BoundTop/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_BoundWidth(float* BoundWidth/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_BoundHeight(float* BoundHeight/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE Paragraphs(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/, 
                                               Powerpoint_2k::TextRangePtr* Paragraphs/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE Sentences(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/, 
                                              Powerpoint_2k::TextRangePtr* Sentences/*[out,retval]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE Words(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/, 
                                          Powerpoint_2k::TextRangePtr* Words/*[out,retval]*/) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE Characters(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/, 
                                               Powerpoint_2k::TextRangePtr* Characters/*[out,retval]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE Lines(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/, 
                                          Powerpoint_2k::TextRangePtr* Lines/*[out,retval]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE Runs(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/, 
                                         Powerpoint_2k::TextRangePtr* Runs/*[out,retval]*/) = 0; // [2015]
  virtual HRESULT STDMETHODCALLTYPE TrimText(Powerpoint_2k::TextRangePtr* TrimText/*[out,retval]*/) = 0; // [2016]
  virtual HRESULT STDMETHODCALLTYPE get_Text(BSTR* Text/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Text(BSTR Text/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE InsertAfter(BSTR NewText/*[in,def,opt]*/, 
                                                Powerpoint_2k::TextRangePtr* After/*[out,retval]*/) = 0; // [2017]
  virtual HRESULT STDMETHODCALLTYPE InsertBefore(BSTR NewText/*[in,def,opt]*/, 
                                                 Powerpoint_2k::TextRangePtr* Before/*[out,retval]*/) = 0; // [2018]
  virtual HRESULT STDMETHODCALLTYPE InsertDateTime(Powerpoint_2k::PpDateTimeFormat DateTimeFormat/*[in]*/, 
                                                   Office_2k::MsoTriState InsertAsField/*[in,def,opt]*/, 
                                                   Powerpoint_2k::TextRangePtr* DateTime/*[out,retval]*/) = 0; // [2019]
  virtual HRESULT STDMETHODCALLTYPE InsertSlideNumber(Powerpoint_2k::TextRangePtr* SlideNumber/*[out,retval]*/) = 0; // [2020]
  virtual HRESULT STDMETHODCALLTYPE InsertSymbol(BSTR FontName/*[in]*/, int CharNumber/*[in]*/, 
                                                 Office_2k::MsoTriState Unicode/*[in,def,opt]*/, 
                                                 Powerpoint_2k::TextRangePtr* Symbol/*[out,retval]*/) = 0; // [2021]
  virtual HRESULT STDMETHODCALLTYPE get_Font(Powerpoint_2k::FontPtr* Font/*[out,retval]*/) = 0; // [2022]
  virtual HRESULT STDMETHODCALLTYPE get_ParagraphFormat(Powerpoint_2k::ParagraphFormatPtr* ParagraphFormat/*[out,retval]*/) = 0; // [2023]
  virtual HRESULT STDMETHODCALLTYPE get_IndentLevel(int* IndentLevel/*[out,retval]*/) = 0; // [2024]
  virtual HRESULT STDMETHODCALLTYPE set_IndentLevel(int IndentLevel/*[in]*/) = 0; // [2024]
  virtual HRESULT STDMETHODCALLTYPE Select(void) = 0; // [2025]
  virtual HRESULT STDMETHODCALLTYPE Cut(void) = 0; // [2026]
  virtual HRESULT STDMETHODCALLTYPE Copy(void) = 0; // [2027]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [2028]
  virtual HRESULT STDMETHODCALLTYPE Paste(Powerpoint_2k::TextRangePtr* Paste/*[out,retval]*/) = 0; // [2029]
  virtual HRESULT STDMETHODCALLTYPE ChangeCase(Powerpoint_2k::PpChangeCase Type/*[in]*/) = 0; // [2030]
  virtual HRESULT STDMETHODCALLTYPE AddPeriods(void) = 0; // [2031]
  virtual HRESULT STDMETHODCALLTYPE RemovePeriods(void) = 0; // [2032]
  virtual HRESULT STDMETHODCALLTYPE Find(BSTR FindWhat/*[in]*/, int After/*[in,def,opt]*/, 
                                         Office_2k::MsoTriState MatchCase/*[in,def,opt]*/, 
                                         Office_2k::MsoTriState WholeWords/*[in,def,opt]*/, 
                                         Powerpoint_2k::TextRangePtr* Find/*[out,retval]*/) = 0; // [2033]
  virtual HRESULT STDMETHODCALLTYPE Replace(BSTR FindWhat/*[in]*/, BSTR ReplaceWhat/*[in]*/, 
                                            int After/*[in,def,opt]*/, 
                                            Office_2k::MsoTriState MatchCase/*[in,def,opt]*/, 
                                            Office_2k::MsoTriState WholeWords/*[in,def,opt]*/, 
                                            Powerpoint_2k::TextRangePtr* Replace/*[out,retval]*/) = 0; // [2034]
  virtual HRESULT STDMETHODCALLTYPE RotatedBounds(float* X1/*[out]*/, float* Y1/*[out]*/, 
                                                  float* X2/*[out]*/, float* Y2/*[out]*/, 
                                                  float* X3/*[out]*/, float* Y3/*[out]*/, 
                                                  float* x4/*[out]*/, float* y4/*[out]*/) = 0; // [2035]
  virtual HRESULT STDMETHODCALLTYPE get_LanguageID(Office_2k::MsoLanguageID* LanguageID/*[out,retval]*/) = 0; // [2036]
  virtual HRESULT STDMETHODCALLTYPE set_LanguageID(Office_2k::MsoLanguageID LanguageID/*[in]*/) = 0; // [2036]
  virtual HRESULT STDMETHODCALLTYPE RtlRun(void) = 0; // [2037]
  virtual HRESULT STDMETHODCALLTYPE LtrRun(void) = 0; // [2038]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::ActionSettingsPtr __fastcall get_ActionSettings(void)
  {
    Powerpoint_2k::ActionSettingsPtr ActionSettings;
    OLECHECK(this->get_ActionSettings((Powerpoint_2k::ActionSettingsPtr*)&ActionSettings));
    return ActionSettings;
  }

  long __fastcall get_Start(void)
  {
    long Start;
    OLECHECK(this->get_Start((long*)&Start));
    return Start;
  }

  long __fastcall get_Length(void)
  {
    long Length;
    OLECHECK(this->get_Length((long*)&Length));
    return Length;
  }

  float __fastcall get_BoundLeft(void)
  {
    float BoundLeft;
    OLECHECK(this->get_BoundLeft((float*)&BoundLeft));
    return BoundLeft;
  }

  float __fastcall get_BoundTop(void)
  {
    float BoundTop;
    OLECHECK(this->get_BoundTop((float*)&BoundTop));
    return BoundTop;
  }

  float __fastcall get_BoundWidth(void)
  {
    float BoundWidth;
    OLECHECK(this->get_BoundWidth((float*)&BoundWidth));
    return BoundWidth;
  }

  float __fastcall get_BoundHeight(void)
  {
    float BoundHeight;
    OLECHECK(this->get_BoundHeight((float*)&BoundHeight));
    return BoundHeight;
  }

  Powerpoint_2k::TextRangePtr __fastcall Paragraphs(int Start/*[in,def,opt]*/, 
                                                    int Length/*[in,def,opt]*/)
  {
    Powerpoint_2k::TextRangePtr Paragraphs;
    OLECHECK(this->Paragraphs(Start, Length, (Powerpoint_2k::TextRangePtr*)&Paragraphs));
    return Paragraphs;
  }

  Powerpoint_2k::TextRangePtr __fastcall Sentences(int Start/*[in,def,opt]*/, 
                                                   int Length/*[in,def,opt]*/)
  {
    Powerpoint_2k::TextRangePtr Sentences;
    OLECHECK(this->Sentences(Start, Length, (Powerpoint_2k::TextRangePtr*)&Sentences));
    return Sentences;
  }

  Powerpoint_2k::TextRangePtr __fastcall Words(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/)
  {
    Powerpoint_2k::TextRangePtr Words;
    OLECHECK(this->Words(Start, Length, (Powerpoint_2k::TextRangePtr*)&Words));
    return Words;
  }

  Powerpoint_2k::TextRangePtr __fastcall Characters(int Start/*[in,def,opt]*/, 
                                                    int Length/*[in,def,opt]*/)
  {
    Powerpoint_2k::TextRangePtr Characters;
    OLECHECK(this->Characters(Start, Length, (Powerpoint_2k::TextRangePtr*)&Characters));
    return Characters;
  }

  Powerpoint_2k::TextRangePtr __fastcall Lines(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/)
  {
    Powerpoint_2k::TextRangePtr Lines;
    OLECHECK(this->Lines(Start, Length, (Powerpoint_2k::TextRangePtr*)&Lines));
    return Lines;
  }

  Powerpoint_2k::TextRangePtr __fastcall Runs(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/)
  {
    Powerpoint_2k::TextRangePtr Runs;
    OLECHECK(this->Runs(Start, Length, (Powerpoint_2k::TextRangePtr*)&Runs));
    return Runs;
  }

  Powerpoint_2k::TextRangePtr __fastcall TrimText(void)
  {
    Powerpoint_2k::TextRangePtr TrimText;
    OLECHECK(this->TrimText((Powerpoint_2k::TextRangePtr*)&TrimText));
    return TrimText;
  }

  BSTR __fastcall get_Text(void)
  {
    BSTR Text = 0;
    OLECHECK(this->get_Text((BSTR*)&Text));
    return Text;
  }

  Powerpoint_2k::TextRangePtr __fastcall InsertAfter(BSTR NewText/*[in,def,opt]*/)
  {
    Powerpoint_2k::TextRangePtr After;
    OLECHECK(this->InsertAfter(NewText, (Powerpoint_2k::TextRangePtr*)&After));
    return After;
  }

  Powerpoint_2k::TextRangePtr __fastcall InsertBefore(BSTR NewText/*[in,def,opt]*/)
  {
    Powerpoint_2k::TextRangePtr Before;
    OLECHECK(this->InsertBefore(NewText, (Powerpoint_2k::TextRangePtr*)&Before));
    return Before;
  }

  Powerpoint_2k::TextRangePtr __fastcall InsertDateTime(Powerpoint_2k::PpDateTimeFormat DateTimeFormat/*[in]*/, 
                                                        Office_2k::MsoTriState InsertAsField/*[in,def,opt]*/)
  {
    Powerpoint_2k::TextRangePtr DateTime;
    OLECHECK(this->InsertDateTime(DateTimeFormat, InsertAsField, (Powerpoint_2k::TextRangePtr*)&DateTime));
    return DateTime;
  }

  Powerpoint_2k::TextRangePtr __fastcall InsertSlideNumber(void)
  {
    Powerpoint_2k::TextRangePtr SlideNumber;
    OLECHECK(this->InsertSlideNumber((Powerpoint_2k::TextRangePtr*)&SlideNumber));
    return SlideNumber;
  }

  Powerpoint_2k::TextRangePtr __fastcall InsertSymbol(BSTR FontName/*[in]*/, int CharNumber/*[in]*/, 
                                                      Office_2k::MsoTriState Unicode/*[in,def,opt]*/)
  {
    Powerpoint_2k::TextRangePtr Symbol;
    OLECHECK(this->InsertSymbol(FontName, CharNumber, Unicode, (Powerpoint_2k::TextRangePtr*)&Symbol));
    return Symbol;
  }

  Powerpoint_2k::FontPtr __fastcall get_Font(void)
  {
    Powerpoint_2k::FontPtr Font;
    OLECHECK(this->get_Font((Powerpoint_2k::FontPtr*)&Font));
    return Font;
  }

  Powerpoint_2k::ParagraphFormatPtr __fastcall get_ParagraphFormat(void)
  {
    Powerpoint_2k::ParagraphFormatPtr ParagraphFormat;
    OLECHECK(this->get_ParagraphFormat((Powerpoint_2k::ParagraphFormatPtr*)&ParagraphFormat));
    return ParagraphFormat;
  }

  int __fastcall get_IndentLevel(void)
  {
    int IndentLevel;
    OLECHECK(this->get_IndentLevel((int*)&IndentLevel));
    return IndentLevel;
  }

  Powerpoint_2k::TextRangePtr __fastcall Paste(void)
  {
    Powerpoint_2k::TextRangePtr Paste;
    OLECHECK(this->Paste((Powerpoint_2k::TextRangePtr*)&Paste));
    return Paste;
  }

  Powerpoint_2k::TextRangePtr __fastcall Find(BSTR FindWhat/*[in]*/, int After/*[in,def,opt]*/, 
                                              Office_2k::MsoTriState MatchCase/*[in,def,opt]*/, 
                                              Office_2k::MsoTriState WholeWords/*[in,def,opt]*/)
  {
    Powerpoint_2k::TextRangePtr Find;
    OLECHECK(this->Find(FindWhat, After, MatchCase, WholeWords, (Powerpoint_2k::TextRangePtr*)&Find));
    return Find;
  }

  Powerpoint_2k::TextRangePtr __fastcall Replace(BSTR FindWhat/*[in]*/, BSTR ReplaceWhat/*[in]*/, 
                                                 int After/*[in,def,opt]*/, 
                                                 Office_2k::MsoTriState MatchCase/*[in,def,opt]*/, 
                                                 Office_2k::MsoTriState WholeWords/*[in,def,opt]*/)
  {
    Powerpoint_2k::TextRangePtr Replace;
    OLECHECK(this->Replace(FindWhat, ReplaceWhat, After, MatchCase, WholeWords, (Powerpoint_2k::TextRangePtr*)&Replace));
    return Replace;
  }

  Office_2k::MsoLanguageID __fastcall get_LanguageID(void)
  {
    Office_2k::MsoLanguageID LanguageID;
    OLECHECK(this->get_LanguageID((Office_2k::MsoLanguageID*)&LanguageID));
    return LanguageID;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::ActionSettingsPtr ActionSettings = {read = get_ActionSettings};
  __property   long            Start = {read = get_Start};
  __property   long            Length = {read = get_Length};
  __property   float           BoundLeft = {read = get_BoundLeft};
  __property   float           BoundTop = {read = get_BoundTop};
  __property   float           BoundWidth = {read = get_BoundWidth};
  __property   float           BoundHeight = {read = get_BoundHeight};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   Powerpoint_2k::FontPtr Font = {read = get_Font};
  __property   Powerpoint_2k::ParagraphFormatPtr ParagraphFormat = {read = get_ParagraphFormat};
  __property   int             IndentLevel = {read = get_IndentLevel, write = set_IndentLevel};
  __property   Office_2k::MsoLanguageID LanguageID = {read = get_LanguageID, write = set_LanguageID};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Ruler
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493490-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Ruler  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_TabStops(Powerpoint_2k::TabStopsPtr* TabStops/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_Levels(Powerpoint_2k::RulerLevelsPtr* Levels/*[out,retval]*/) = 0; // [2004]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::TabStopsPtr __fastcall get_TabStops(void)
  {
    Powerpoint_2k::TabStopsPtr TabStops;
    OLECHECK(this->get_TabStops((Powerpoint_2k::TabStopsPtr*)&TabStops));
    return TabStops;
  }

  Powerpoint_2k::RulerLevelsPtr __fastcall get_Levels(void)
  {
    Powerpoint_2k::RulerLevelsPtr Levels;
    OLECHECK(this->get_Levels((Powerpoint_2k::RulerLevelsPtr*)&Levels));
    return Levels;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::TabStopsPtr TabStops = {read = get_TabStops};
  __property   Powerpoint_2k::RulerLevelsPtr Levels = {read = get_Levels};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: RulerLevels
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493491-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface RulerLevels  : public Powerpoint_2k::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(int index/*[in]*/, 
                                         Powerpoint_2k::RulerLevelPtr* Item/*[out,retval]*/) = 0; // [0]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::RulerLevelPtr __fastcall Item(int index/*[in]*/)
  {
    Powerpoint_2k::RulerLevelPtr Item;
    OLECHECK(this->Item(index, (Powerpoint_2k::RulerLevelPtr*)&Item));
    return Item;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: RulerLevel
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493492-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface RulerLevel  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_FirstMargin(float* FirstMargin/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_FirstMargin(float FirstMargin/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_LeftMargin(float* LeftMargin/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_LeftMargin(float LeftMargin/*[in]*/) = 0; // [2004]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  float __fastcall get_FirstMargin(void)
  {
    float FirstMargin;
    OLECHECK(this->get_FirstMargin((float*)&FirstMargin));
    return FirstMargin;
  }

  float __fastcall get_LeftMargin(void)
  {
    float LeftMargin;
    OLECHECK(this->get_LeftMargin((float*)&LeftMargin));
    return LeftMargin;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   float           FirstMargin = {read = get_FirstMargin, write = set_FirstMargin};
  __property   float           LeftMargin = {read = get_LeftMargin, write = set_LeftMargin};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: TabStops
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493493-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface TabStops  : public Powerpoint_2k::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(int index/*[in]*/, 
                                         Powerpoint_2k::TabStopPtr* Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_DefaultSpacing(float* DefaultSpacing/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_DefaultSpacing(float DefaultSpacing/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE Add(Powerpoint_2k::PpTabStopType Type/*[in]*/, 
                                        float Position/*[in]*/, 
                                        Powerpoint_2k::TabStopPtr* Add/*[out,retval]*/) = 0; // [2004]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::TabStopPtr __fastcall Item(int index/*[in]*/)
  {
    Powerpoint_2k::TabStopPtr Item;
    OLECHECK(this->Item(index, (Powerpoint_2k::TabStopPtr*)&Item));
    return Item;
  }

  float __fastcall get_DefaultSpacing(void)
  {
    float DefaultSpacing;
    OLECHECK(this->get_DefaultSpacing((float*)&DefaultSpacing));
    return DefaultSpacing;
  }

  Powerpoint_2k::TabStopPtr __fastcall Add(Powerpoint_2k::PpTabStopType Type/*[in]*/, 
                                           float Position/*[in]*/)
  {
    Powerpoint_2k::TabStopPtr Add;
    OLECHECK(this->Add(Type, Position, (Powerpoint_2k::TabStopPtr*)&Add));
    return Add;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   float           DefaultSpacing = {read = get_DefaultSpacing, write = set_DefaultSpacing};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: TabStop
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493494-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface TabStop  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Powerpoint_2k::PpTabStopType* Type/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_Type(Powerpoint_2k::PpTabStopType Type/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_Position(float* Position/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_Position(float Position/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE Clear(void) = 0; // [2005]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::PpTabStopType __fastcall get_Type(void)
  {
    Powerpoint_2k::PpTabStopType Type;
    OLECHECK(this->get_Type((Powerpoint_2k::PpTabStopType*)&Type));
    return Type;
  }

  float __fastcall get_Position(void)
  {
    float Position;
    OLECHECK(this->get_Position((float*)&Position));
    return Position;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::PpTabStopType Type = {read = get_Type, write = set_Type};
  __property   float           Position = {read = get_Position, write = set_Position};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Font
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493495-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Font  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Color(Powerpoint_2k::ColorFormatPtr* Color/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_Bold(Office_2k::MsoTriState* Bold/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_Bold(Office_2k::MsoTriState Bold/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_Italic(Office_2k::MsoTriState* Italic/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_Italic(Office_2k::MsoTriState Italic/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Shadow(Office_2k::MsoTriState* Shadow/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_Shadow(Office_2k::MsoTriState Shadow/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_Emboss(Office_2k::MsoTriState* Emboss/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE set_Emboss(Office_2k::MsoTriState Emboss/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_Underline(Office_2k::MsoTriState* Underline/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE set_Underline(Office_2k::MsoTriState Underline/*[in]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_Subscript(Office_2k::MsoTriState* Subscript/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE set_Subscript(Office_2k::MsoTriState Subscript/*[in]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_Superscript(Office_2k::MsoTriState* Superscript/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE set_Superscript(Office_2k::MsoTriState Superscript/*[in]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE get_BaselineOffset(float* BaselineOffset/*[out,retval]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE set_BaselineOffset(float BaselineOffset/*[in]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE get_Embedded(Office_2k::MsoTriState* Embedded/*[out,retval]*/) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE get_Embeddable(Office_2k::MsoTriState* Embeddable/*[out,retval]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE get_Size(float* Size/*[out,retval]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE set_Size(float Size/*[in]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [2015]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR Name/*[in]*/) = 0; // [2015]
  virtual HRESULT STDMETHODCALLTYPE get_NameFarEast(BSTR* NameFarEast/*[out,retval]*/) = 0; // [2016]
  virtual HRESULT STDMETHODCALLTYPE set_NameFarEast(BSTR NameFarEast/*[in]*/) = 0; // [2016]
  virtual HRESULT STDMETHODCALLTYPE get_NameAscii(BSTR* NameAscii/*[out,retval]*/) = 0; // [2017]
  virtual HRESULT STDMETHODCALLTYPE set_NameAscii(BSTR NameAscii/*[in]*/) = 0; // [2017]
  virtual HRESULT STDMETHODCALLTYPE get_AutoRotateNumbers(Office_2k::MsoTriState* AutoRotateNumbers/*[out,retval]*/) = 0; // [2018]
  virtual HRESULT STDMETHODCALLTYPE set_AutoRotateNumbers(Office_2k::MsoTriState AutoRotateNumbers/*[in]*/) = 0; // [2018]
  virtual HRESULT STDMETHODCALLTYPE get_NameOther(BSTR* NameOther/*[out,retval]*/) = 0; // [2019]
  virtual HRESULT STDMETHODCALLTYPE set_NameOther(BSTR NameOther/*[in]*/) = 0; // [2019]
  virtual HRESULT STDMETHODCALLTYPE get_NameComplexScript(BSTR* NameComplexScript/*[out,retval]*/) = 0; // [2020]
  virtual HRESULT STDMETHODCALLTYPE set_NameComplexScript(BSTR NameComplexScript/*[in]*/) = 0; // [2020]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::ColorFormatPtr __fastcall get_Color(void)
  {
    Powerpoint_2k::ColorFormatPtr Color;
    OLECHECK(this->get_Color((Powerpoint_2k::ColorFormatPtr*)&Color));
    return Color;
  }

  Office_2k::MsoTriState __fastcall get_Bold(void)
  {
    Office_2k::MsoTriState Bold;
    OLECHECK(this->get_Bold((Office_2k::MsoTriState*)&Bold));
    return Bold;
  }

  Office_2k::MsoTriState __fastcall get_Italic(void)
  {
    Office_2k::MsoTriState Italic;
    OLECHECK(this->get_Italic((Office_2k::MsoTriState*)&Italic));
    return Italic;
  }

  Office_2k::MsoTriState __fastcall get_Shadow(void)
  {
    Office_2k::MsoTriState Shadow;
    OLECHECK(this->get_Shadow((Office_2k::MsoTriState*)&Shadow));
    return Shadow;
  }

  Office_2k::MsoTriState __fastcall get_Emboss(void)
  {
    Office_2k::MsoTriState Emboss;
    OLECHECK(this->get_Emboss((Office_2k::MsoTriState*)&Emboss));
    return Emboss;
  }

  Office_2k::MsoTriState __fastcall get_Underline(void)
  {
    Office_2k::MsoTriState Underline;
    OLECHECK(this->get_Underline((Office_2k::MsoTriState*)&Underline));
    return Underline;
  }

  Office_2k::MsoTriState __fastcall get_Subscript(void)
  {
    Office_2k::MsoTriState Subscript;
    OLECHECK(this->get_Subscript((Office_2k::MsoTriState*)&Subscript));
    return Subscript;
  }

  Office_2k::MsoTriState __fastcall get_Superscript(void)
  {
    Office_2k::MsoTriState Superscript;
    OLECHECK(this->get_Superscript((Office_2k::MsoTriState*)&Superscript));
    return Superscript;
  }

  float __fastcall get_BaselineOffset(void)
  {
    float BaselineOffset;
    OLECHECK(this->get_BaselineOffset((float*)&BaselineOffset));
    return BaselineOffset;
  }

  Office_2k::MsoTriState __fastcall get_Embedded(void)
  {
    Office_2k::MsoTriState Embedded;
    OLECHECK(this->get_Embedded((Office_2k::MsoTriState*)&Embedded));
    return Embedded;
  }

  Office_2k::MsoTriState __fastcall get_Embeddable(void)
  {
    Office_2k::MsoTriState Embeddable;
    OLECHECK(this->get_Embeddable((Office_2k::MsoTriState*)&Embeddable));
    return Embeddable;
  }

  float __fastcall get_Size(void)
  {
    float Size;
    OLECHECK(this->get_Size((float*)&Size));
    return Size;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  BSTR __fastcall get_NameFarEast(void)
  {
    BSTR NameFarEast = 0;
    OLECHECK(this->get_NameFarEast((BSTR*)&NameFarEast));
    return NameFarEast;
  }

  BSTR __fastcall get_NameAscii(void)
  {
    BSTR NameAscii = 0;
    OLECHECK(this->get_NameAscii((BSTR*)&NameAscii));
    return NameAscii;
  }

  Office_2k::MsoTriState __fastcall get_AutoRotateNumbers(void)
  {
    Office_2k::MsoTriState AutoRotateNumbers;
    OLECHECK(this->get_AutoRotateNumbers((Office_2k::MsoTriState*)&AutoRotateNumbers));
    return AutoRotateNumbers;
  }

  BSTR __fastcall get_NameOther(void)
  {
    BSTR NameOther = 0;
    OLECHECK(this->get_NameOther((BSTR*)&NameOther));
    return NameOther;
  }

  BSTR __fastcall get_NameComplexScript(void)
  {
    BSTR NameComplexScript = 0;
    OLECHECK(this->get_NameComplexScript((BSTR*)&NameComplexScript));
    return NameComplexScript;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::ColorFormatPtr Color = {read = get_Color};
  __property   Office_2k::MsoTriState Bold = {read = get_Bold, write = set_Bold};
  __property   Office_2k::MsoTriState Italic = {read = get_Italic, write = set_Italic};
  __property   Office_2k::MsoTriState Shadow = {read = get_Shadow, write = set_Shadow};
  __property   Office_2k::MsoTriState Emboss = {read = get_Emboss, write = set_Emboss};
  __property   Office_2k::MsoTriState Underline = {read = get_Underline, write = set_Underline};
  __property   Office_2k::MsoTriState Subscript = {read = get_Subscript, write = set_Subscript};
  __property   Office_2k::MsoTriState Superscript = {read = get_Superscript, write = set_Superscript};
  __property   float           BaselineOffset = {read = get_BaselineOffset, write = set_BaselineOffset};
  __property   Office_2k::MsoTriState Embedded = {read = get_Embedded};
  __property   Office_2k::MsoTriState Embeddable = {read = get_Embeddable};
  __property   float           Size = {read = get_Size, write = set_Size};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            NameFarEast = {read = get_NameFarEast, write = set_NameFarEast};
  __property   BSTR            NameAscii = {read = get_NameAscii, write = set_NameAscii};
  __property   Office_2k::MsoTriState AutoRotateNumbers = {read = get_AutoRotateNumbers, write = set_AutoRotateNumbers};
  __property   BSTR            NameOther = {read = get_NameOther, write = set_NameOther};
  __property   BSTR            NameComplexScript = {read = get_NameComplexScript, write = set_NameComplexScript};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ParagraphFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493496-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface ParagraphFormat  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Alignment(Powerpoint_2k::PpParagraphAlignment* Alignment/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_Alignment(Powerpoint_2k::PpParagraphAlignment Alignment/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_Bullet(Powerpoint_2k::BulletFormatPtr* Bullet/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_LineRuleBefore(Office_2k::MsoTriState* LineRuleBefore/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_LineRuleBefore(Office_2k::MsoTriState LineRuleBefore/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_LineRuleAfter(Office_2k::MsoTriState* LineRuleAfter/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_LineRuleAfter(Office_2k::MsoTriState LineRuleAfter/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_LineRuleWithin(Office_2k::MsoTriState* LineRuleWithin/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE set_LineRuleWithin(Office_2k::MsoTriState LineRuleWithin/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_SpaceBefore(float* SpaceBefore/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE set_SpaceBefore(float SpaceBefore/*[in]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_SpaceAfter(float* SpaceAfter/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE set_SpaceAfter(float SpaceAfter/*[in]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_SpaceWithin(float* SpaceWithin/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE set_SpaceWithin(float SpaceWithin/*[in]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE get_BaseLineAlignment(Powerpoint_2k::PpBaselineAlignment* BaseLineAlignment/*[out,retval]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE set_BaseLineAlignment(Powerpoint_2k::PpBaselineAlignment BaseLineAlignment/*[in]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE get_FarEastLineBreakControl(Office_2k::MsoTriState* FarEastLineBreakControl/*[out,retval]*/) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE set_FarEastLineBreakControl(Office_2k::MsoTriState FarEastLineBreakControl/*[in]*/) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE get_WordWrap(Office_2k::MsoTriState* WordWrap/*[out,retval]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE set_WordWrap(Office_2k::MsoTriState WordWrap/*[in]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE get_HangingPunctuation(Office_2k::MsoTriState* HangingPunctuation/*[out,retval]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE set_HangingPunctuation(Office_2k::MsoTriState HangingPunctuation/*[in]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE get_TextDirection(Powerpoint_2k::PpDirection* TextDirection/*[out,retval]*/) = 0; // [2015]
  virtual HRESULT STDMETHODCALLTYPE set_TextDirection(Powerpoint_2k::PpDirection TextDirection/*[in]*/) = 0; // [2015]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::PpParagraphAlignment __fastcall get_Alignment(void)
  {
    Powerpoint_2k::PpParagraphAlignment Alignment;
    OLECHECK(this->get_Alignment((Powerpoint_2k::PpParagraphAlignment*)&Alignment));
    return Alignment;
  }

  Powerpoint_2k::BulletFormatPtr __fastcall get_Bullet(void)
  {
    Powerpoint_2k::BulletFormatPtr Bullet;
    OLECHECK(this->get_Bullet((Powerpoint_2k::BulletFormatPtr*)&Bullet));
    return Bullet;
  }

  Office_2k::MsoTriState __fastcall get_LineRuleBefore(void)
  {
    Office_2k::MsoTriState LineRuleBefore;
    OLECHECK(this->get_LineRuleBefore((Office_2k::MsoTriState*)&LineRuleBefore));
    return LineRuleBefore;
  }

  Office_2k::MsoTriState __fastcall get_LineRuleAfter(void)
  {
    Office_2k::MsoTriState LineRuleAfter;
    OLECHECK(this->get_LineRuleAfter((Office_2k::MsoTriState*)&LineRuleAfter));
    return LineRuleAfter;
  }

  Office_2k::MsoTriState __fastcall get_LineRuleWithin(void)
  {
    Office_2k::MsoTriState LineRuleWithin;
    OLECHECK(this->get_LineRuleWithin((Office_2k::MsoTriState*)&LineRuleWithin));
    return LineRuleWithin;
  }

  float __fastcall get_SpaceBefore(void)
  {
    float SpaceBefore;
    OLECHECK(this->get_SpaceBefore((float*)&SpaceBefore));
    return SpaceBefore;
  }

  float __fastcall get_SpaceAfter(void)
  {
    float SpaceAfter;
    OLECHECK(this->get_SpaceAfter((float*)&SpaceAfter));
    return SpaceAfter;
  }

  float __fastcall get_SpaceWithin(void)
  {
    float SpaceWithin;
    OLECHECK(this->get_SpaceWithin((float*)&SpaceWithin));
    return SpaceWithin;
  }

  Powerpoint_2k::PpBaselineAlignment __fastcall get_BaseLineAlignment(void)
  {
    Powerpoint_2k::PpBaselineAlignment BaseLineAlignment;
    OLECHECK(this->get_BaseLineAlignment((Powerpoint_2k::PpBaselineAlignment*)&BaseLineAlignment));
    return BaseLineAlignment;
  }

  Office_2k::MsoTriState __fastcall get_FarEastLineBreakControl(void)
  {
    Office_2k::MsoTriState FarEastLineBreakControl;
    OLECHECK(this->get_FarEastLineBreakControl((Office_2k::MsoTriState*)&FarEastLineBreakControl));
    return FarEastLineBreakControl;
  }

  Office_2k::MsoTriState __fastcall get_WordWrap(void)
  {
    Office_2k::MsoTriState WordWrap;
    OLECHECK(this->get_WordWrap((Office_2k::MsoTriState*)&WordWrap));
    return WordWrap;
  }

  Office_2k::MsoTriState __fastcall get_HangingPunctuation(void)
  {
    Office_2k::MsoTriState HangingPunctuation;
    OLECHECK(this->get_HangingPunctuation((Office_2k::MsoTriState*)&HangingPunctuation));
    return HangingPunctuation;
  }

  Powerpoint_2k::PpDirection __fastcall get_TextDirection(void)
  {
    Powerpoint_2k::PpDirection TextDirection;
    OLECHECK(this->get_TextDirection((Powerpoint_2k::PpDirection*)&TextDirection));
    return TextDirection;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::PpParagraphAlignment Alignment = {read = get_Alignment, write = set_Alignment};
  __property   Powerpoint_2k::BulletFormatPtr Bullet = {read = get_Bullet};
  __property   Office_2k::MsoTriState LineRuleBefore = {read = get_LineRuleBefore, write = set_LineRuleBefore};
  __property   Office_2k::MsoTriState LineRuleAfter = {read = get_LineRuleAfter, write = set_LineRuleAfter};
  __property   Office_2k::MsoTriState LineRuleWithin = {read = get_LineRuleWithin, write = set_LineRuleWithin};
  __property   float           SpaceBefore = {read = get_SpaceBefore, write = set_SpaceBefore};
  __property   float           SpaceAfter = {read = get_SpaceAfter, write = set_SpaceAfter};
  __property   float           SpaceWithin = {read = get_SpaceWithin, write = set_SpaceWithin};
  __property   Powerpoint_2k::PpBaselineAlignment BaseLineAlignment = {read = get_BaseLineAlignment, write = set_BaseLineAlignment};
  __property   Office_2k::MsoTriState FarEastLineBreakControl = {read = get_FarEastLineBreakControl, write = set_FarEastLineBreakControl};
  __property   Office_2k::MsoTriState WordWrap = {read = get_WordWrap, write = set_WordWrap};
  __property   Office_2k::MsoTriState HangingPunctuation = {read = get_HangingPunctuation, write = set_HangingPunctuation};
  __property   Powerpoint_2k::PpDirection TextDirection = {read = get_TextDirection, write = set_TextDirection};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: BulletFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493497-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface BulletFormat  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(Office_2k::MsoTriState Visible/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Character(int* Character/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_Character(int Character/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_RelativeSize(float* RelativeSize/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_RelativeSize(float RelativeSize/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_UseTextColor(Office_2k::MsoTriState* UseTextColor/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_UseTextColor(Office_2k::MsoTriState UseTextColor/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_UseTextFont(Office_2k::MsoTriState* UseTextFont/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_UseTextFont(Office_2k::MsoTriState UseTextFont/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_Font(Powerpoint_2k::FontPtr* Font/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Powerpoint_2k::PpBulletType* Type/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE set_Type(Powerpoint_2k::PpBulletType Type/*[in]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_Style(Powerpoint_2k::PpNumberedBulletStyle* Style/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE set_Style(Powerpoint_2k::PpNumberedBulletStyle Style/*[in]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_StartValue(int* StartValue/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE set_StartValue(int StartValue/*[in]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE Picture(BSTR Picture/*[in]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE get_Number(int* Number/*[out,retval]*/) = 0; // [2012]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Office_2k::MsoTriState __fastcall get_Visible(void)
  {
    Office_2k::MsoTriState Visible;
    OLECHECK(this->get_Visible((Office_2k::MsoTriState*)&Visible));
    return Visible;
  }

  int __fastcall get_Character(void)
  {
    int Character;
    OLECHECK(this->get_Character((int*)&Character));
    return Character;
  }

  float __fastcall get_RelativeSize(void)
  {
    float RelativeSize;
    OLECHECK(this->get_RelativeSize((float*)&RelativeSize));
    return RelativeSize;
  }

  Office_2k::MsoTriState __fastcall get_UseTextColor(void)
  {
    Office_2k::MsoTriState UseTextColor;
    OLECHECK(this->get_UseTextColor((Office_2k::MsoTriState*)&UseTextColor));
    return UseTextColor;
  }

  Office_2k::MsoTriState __fastcall get_UseTextFont(void)
  {
    Office_2k::MsoTriState UseTextFont;
    OLECHECK(this->get_UseTextFont((Office_2k::MsoTriState*)&UseTextFont));
    return UseTextFont;
  }

  Powerpoint_2k::FontPtr __fastcall get_Font(void)
  {
    Powerpoint_2k::FontPtr Font;
    OLECHECK(this->get_Font((Powerpoint_2k::FontPtr*)&Font));
    return Font;
  }

  Powerpoint_2k::PpBulletType __fastcall get_Type(void)
  {
    Powerpoint_2k::PpBulletType Type;
    OLECHECK(this->get_Type((Powerpoint_2k::PpBulletType*)&Type));
    return Type;
  }

  Powerpoint_2k::PpNumberedBulletStyle __fastcall get_Style(void)
  {
    Powerpoint_2k::PpNumberedBulletStyle Style;
    OLECHECK(this->get_Style((Powerpoint_2k::PpNumberedBulletStyle*)&Style));
    return Style;
  }

  int __fastcall get_StartValue(void)
  {
    int StartValue;
    OLECHECK(this->get_StartValue((int*)&StartValue));
    return StartValue;
  }

  int __fastcall get_Number(void)
  {
    int Number;
    OLECHECK(this->get_Number((int*)&Number));
    return Number;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   int             Character = {read = get_Character, write = set_Character};
  __property   float           RelativeSize = {read = get_RelativeSize, write = set_RelativeSize};
  __property   Office_2k::MsoTriState UseTextColor = {read = get_UseTextColor, write = set_UseTextColor};
  __property   Office_2k::MsoTriState UseTextFont = {read = get_UseTextFont, write = set_UseTextFont};
  __property   Powerpoint_2k::FontPtr Font = {read = get_Font};
  __property   Powerpoint_2k::PpBulletType Type = {read = get_Type, write = set_Type};
  __property   Powerpoint_2k::PpNumberedBulletStyle Style = {read = get_Style, write = set_Style};
  __property   int             StartValue = {read = get_StartValue, write = set_StartValue};
  __property   int             Number = {read = get_Number};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: TextStyles
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493498-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface TextStyles  : public Powerpoint_2k::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(Powerpoint_2k::PpTextStyleType Type/*[in]*/, 
                                         Powerpoint_2k::TextStylePtr* Item/*[out,retval]*/) = 0; // [0]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::TextStylePtr __fastcall Item(Powerpoint_2k::PpTextStyleType Type/*[in]*/)
  {
    Powerpoint_2k::TextStylePtr Item;
    OLECHECK(this->Item(Type, (Powerpoint_2k::TextStylePtr*)&Item));
    return Item;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: TextStyle
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493499-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface TextStyle  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Ruler(Powerpoint_2k::RulerPtr* Ruler/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_TextFrame(Powerpoint_2k::TextFramePtr* TextFrame/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_Levels(Powerpoint_2k::TextStyleLevelsPtr* Levels/*[out,retval]*/) = 0; // [2005]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::RulerPtr __fastcall get_Ruler(void)
  {
    Powerpoint_2k::RulerPtr Ruler;
    OLECHECK(this->get_Ruler((Powerpoint_2k::RulerPtr*)&Ruler));
    return Ruler;
  }

  Powerpoint_2k::TextFramePtr __fastcall get_TextFrame(void)
  {
    Powerpoint_2k::TextFramePtr TextFrame;
    OLECHECK(this->get_TextFrame((Powerpoint_2k::TextFramePtr*)&TextFrame));
    return TextFrame;
  }

  Powerpoint_2k::TextStyleLevelsPtr __fastcall get_Levels(void)
  {
    Powerpoint_2k::TextStyleLevelsPtr Levels;
    OLECHECK(this->get_Levels((Powerpoint_2k::TextStyleLevelsPtr*)&Levels));
    return Levels;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::RulerPtr Ruler = {read = get_Ruler};
  __property   Powerpoint_2k::TextFramePtr TextFrame = {read = get_TextFrame};
  __property   Powerpoint_2k::TextStyleLevelsPtr Levels = {read = get_Levels};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: TextStyleLevels
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149349A-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface TextStyleLevels  : public Powerpoint_2k::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(int Level/*[in]*/, 
                                         Powerpoint_2k::TextStyleLevelPtr* Item/*[out,retval]*/) = 0; // [0]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::TextStyleLevelPtr __fastcall Item(int Level/*[in]*/)
  {
    Powerpoint_2k::TextStyleLevelPtr Item;
    OLECHECK(this->Item(Level, (Powerpoint_2k::TextStyleLevelPtr*)&Item));
    return Item;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: TextStyleLevel
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149349B-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface TextStyleLevel  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_ParagraphFormat(Powerpoint_2k::ParagraphFormatPtr* ParagraphFormat/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_Font(Powerpoint_2k::FontPtr* Font/*[out,retval]*/) = 0; // [2004]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::ParagraphFormatPtr __fastcall get_ParagraphFormat(void)
  {
    Powerpoint_2k::ParagraphFormatPtr ParagraphFormat;
    OLECHECK(this->get_ParagraphFormat((Powerpoint_2k::ParagraphFormatPtr*)&ParagraphFormat));
    return ParagraphFormat;
  }

  Powerpoint_2k::FontPtr __fastcall get_Font(void)
  {
    Powerpoint_2k::FontPtr Font;
    OLECHECK(this->get_Font((Powerpoint_2k::FontPtr*)&Font));
    return Font;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::ParagraphFormatPtr ParagraphFormat = {read = get_ParagraphFormat};
  __property   Powerpoint_2k::FontPtr Font = {read = get_Font};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: HeaderFooter
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149349C-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface HeaderFooter  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(Office_2k::MsoTriState Visible/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_Text(BSTR* Text/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_Text(BSTR Text/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_UseFormat(Office_2k::MsoTriState* UseFormat/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_UseFormat(Office_2k::MsoTriState UseFormat/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Format(Powerpoint_2k::PpDateTimeFormat* Format/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_Format(Powerpoint_2k::PpDateTimeFormat Format/*[in]*/) = 0; // [2006]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Office_2k::MsoTriState __fastcall get_Visible(void)
  {
    Office_2k::MsoTriState Visible;
    OLECHECK(this->get_Visible((Office_2k::MsoTriState*)&Visible));
    return Visible;
  }

  BSTR __fastcall get_Text(void)
  {
    BSTR Text = 0;
    OLECHECK(this->get_Text((BSTR*)&Text));
    return Text;
  }

  Office_2k::MsoTriState __fastcall get_UseFormat(void)
  {
    Office_2k::MsoTriState UseFormat;
    OLECHECK(this->get_UseFormat((Office_2k::MsoTriState*)&UseFormat));
    return UseFormat;
  }

  Powerpoint_2k::PpDateTimeFormat __fastcall get_Format(void)
  {
    Powerpoint_2k::PpDateTimeFormat Format;
    OLECHECK(this->get_Format((Powerpoint_2k::PpDateTimeFormat*)&Format));
    return Format;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   Office_2k::MsoTriState UseFormat = {read = get_UseFormat, write = set_UseFormat};
  __property   Powerpoint_2k::PpDateTimeFormat Format = {read = get_Format, write = set_Format};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PPDialogs
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149349E-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface PPDialogs  : public Powerpoint_2k::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE Item(TVariantInParam index/*[in]*/, 
                                         Powerpoint_2k::PPDialogPtr* Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE AddDialog(float Left/*[in]*/, float Top/*[in]*/, 
                                              float Width/*[in]*/, float Height/*[in]*/, 
                                              Office_2k::MsoTriState Modal/*[in,def,opt]*/, 
                                              LPUNKNOWN ParentWindow/*[in,def,opt]*/, 
                                              Powerpoint_2k::PpDialogPositioning Position/*[in,def,opt]*/, 
                                              Office_2k::MsoTriState DisplayHelp/*[in,def,opt]*/, 
                                              Powerpoint_2k::PPDialogPtr* Dialog/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE AddTabDialog(float Left/*[in]*/, float Top/*[in]*/, 
                                                 float Width/*[in]*/, float Height/*[in]*/, 
                                                 Office_2k::MsoTriState Modal/*[in,def,opt]*/, 
                                                 LPUNKNOWN ParentWindow/*[in,def,opt]*/, 
                                                 Powerpoint_2k::PpDialogPositioning Position/*[in,def,opt]*/, 
                                                 Office_2k::MsoTriState DisplayHelp/*[in,def,opt]*/, 
                                                 Powerpoint_2k::PPDialogPtr* TabDialog/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE LoadDialog(BSTR resourceDLL/*[in]*/, int nResID/*[in]*/, 
                                               Office_2k::MsoTriState bModal/*[in,def,opt]*/, 
                                               LPUNKNOWN ParentWindow/*[in,def,opt]*/, 
                                               Powerpoint_2k::PpDialogPositioning Position/*[in,def,opt]*/, 
                                               Powerpoint_2k::PPDialogPtr* LoadDialog/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE AddAlert(Powerpoint_2k::PPAlertPtr* Alert/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR Name/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE RunCharacterAlert(BSTR Text/*[in]*/, 
                                                      Powerpoint_2k::PpAlertType Type/*[in]*/, 
                                                      Powerpoint_2k::PpAlertIcon icon/*[in]*/, 
                                                      LPUNKNOWN ParentWindow/*[in,def,opt]*/, 
                                                      Powerpoint_2k::PpAlertButton* RunCharacterAlert/*[out,retval]*/) = 0; // [2008]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  Powerpoint_2k::PPDialogPtr __fastcall Item(TVariantInParam index/*[in]*/)
  {
    Powerpoint_2k::PPDialogPtr Item;
    OLECHECK(this->Item(index, (Powerpoint_2k::PPDialogPtr*)&Item));
    return Item;
  }

  Powerpoint_2k::PPDialogPtr __fastcall AddDialog(float Left/*[in]*/, float Top/*[in]*/, 
                                                  float Width/*[in]*/, float Height/*[in]*/, 
                                                  Office_2k::MsoTriState Modal/*[in,def,opt]*/, 
                                                  LPUNKNOWN ParentWindow/*[in,def,opt]*/, 
                                                  Powerpoint_2k::PpDialogPositioning Position/*[in,def,opt]*/, 
                                                  Office_2k::MsoTriState DisplayHelp/*[in,def,opt]*/)
  {
    Powerpoint_2k::PPDialogPtr Dialog;
    OLECHECK(this->AddDialog(Left, Top, Width, Height, Modal, ParentWindow, Position, DisplayHelp, (Powerpoint_2k::PPDialogPtr*)&Dialog));
    return Dialog;
  }

  Powerpoint_2k::PPDialogPtr __fastcall AddTabDialog(float Left/*[in]*/, float Top/*[in]*/, 
                                                     float Width/*[in]*/, float Height/*[in]*/, 
                                                     Office_2k::MsoTriState Modal/*[in,def,opt]*/, 
                                                     LPUNKNOWN ParentWindow/*[in,def,opt]*/, 
                                                     Powerpoint_2k::PpDialogPositioning Position/*[in,def,opt]*/, 
                                                     Office_2k::MsoTriState DisplayHelp/*[in,def,opt]*/)
  {
    Powerpoint_2k::PPDialogPtr TabDialog;
    OLECHECK(this->AddTabDialog(Left, Top, Width, Height, Modal, ParentWindow, Position, DisplayHelp, (Powerpoint_2k::PPDialogPtr*)&TabDialog));
    return TabDialog;
  }

  Powerpoint_2k::PPDialogPtr __fastcall LoadDialog(BSTR resourceDLL/*[in]*/, int nResID/*[in]*/, 
                                                   Office_2k::MsoTriState bModal/*[in,def,opt]*/, 
                                                   LPUNKNOWN ParentWindow/*[in,def,opt]*/, 
                                                   Powerpoint_2k::PpDialogPositioning Position/*[in,def,opt]*/)
  {
    Powerpoint_2k::PPDialogPtr LoadDialog;
    OLECHECK(this->LoadDialog(resourceDLL, nResID, bModal, ParentWindow, Position, (Powerpoint_2k::PPDialogPtr*)&LoadDialog));
    return LoadDialog;
  }

  Powerpoint_2k::PPAlertPtr __fastcall AddAlert(void)
  {
    Powerpoint_2k::PPAlertPtr Alert;
    OLECHECK(this->AddAlert((Powerpoint_2k::PPAlertPtr*)&Alert));
    return Alert;
  }

  Powerpoint_2k::TagsPtr __fastcall get_Tags(void)
  {
    Powerpoint_2k::TagsPtr Tags;
    OLECHECK(this->get_Tags((Powerpoint_2k::TagsPtr*)&Tags));
    return Tags;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  Powerpoint_2k::PpAlertButton __fastcall RunCharacterAlert(BSTR Text/*[in]*/, 
                                                            Powerpoint_2k::PpAlertType Type/*[in]*/, 
                                                            Powerpoint_2k::PpAlertIcon icon/*[in]*/, 
                                                            LPUNKNOWN ParentWindow/*[in,def,opt]*/)
  {
    Powerpoint_2k::PpAlertButton RunCharacterAlert;
    OLECHECK(this->RunCharacterAlert(Text, Type, icon, ParentWindow, (Powerpoint_2k::PpAlertButton*)&RunCharacterAlert));
    return RunCharacterAlert;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   Powerpoint_2k::TagsPtr Tags = {read = get_Tags};
  __property   BSTR            Name = {read = get_Name, write = set_Name};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PPAlert
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149349F-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface PPAlert  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Run(BSTR Title/*[in]*/, int Type/*[in]*/, BSTR Text/*[in]*/, 
                                        BSTR leftBtn/*[in]*/, BSTR middleBtn/*[in]*/, 
                                        BSTR rightBtn/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_PressedButton(int* PressedButton/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_OnButton(BSTR* OnButton/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_OnButton(BSTR OnButton/*[in]*/) = 0; // [2005]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  int __fastcall get_PressedButton(void)
  {
    int PressedButton;
    OLECHECK(this->get_PressedButton((int*)&PressedButton));
    return PressedButton;
  }

  BSTR __fastcall get_OnButton(void)
  {
    BSTR OnButton = 0;
    OLECHECK(this->get_OnButton((BSTR*)&OnButton));
    return OnButton;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             PressedButton = {read = get_PressedButton};
  __property   BSTR            OnButton = {read = get_OnButton, write = set_OnButton};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PPDialog
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934A0-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface PPDialog  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Style(Powerpoint_2k::PpDialogStyle* Style/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_Mode(Powerpoint_2k::PpDialogMode* Mode/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_Mode(Powerpoint_2k::PpDialogMode Mode/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_HelpId(int* HelpId/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_HelpId(int HelpId/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_HideOnIdle(Office_2k::MsoTriState* HideOnIdle/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_HideOnIdle(Office_2k::MsoTriState HideOnIdle/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_resourceDLL(BSTR* resourceDLL/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE set_resourceDLL(BSTR resourceDLL/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_Caption(BSTR* Caption/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE set_Caption(BSTR Caption/*[in]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_Left(float* Left/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE set_Left(float Left/*[in]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_Top(float* Top/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE set_Top(float Top/*[in]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE get_Width(float* Width/*[out,retval]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE set_Width(float Width/*[in]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE get_Height(float* Height/*[out,retval]*/) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE set_Height(float Height/*[in]*/) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE get_ClientLeft(float* ClientLeft/*[out,retval]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE get_ClientTop(float* ClientTop/*[out,retval]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE get_ClientWidth(float* ClientWidth/*[out,retval]*/) = 0; // [2015]
  virtual HRESULT STDMETHODCALLTYPE get_ClientHeight(float* ClientHeight/*[out,retval]*/) = 0; // [2016]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/) = 0; // [2017]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(Office_2k::MsoTriState Visible/*[in]*/) = 0; // [2017]
  virtual HRESULT STDMETHODCALLTYPE get_Controls(Powerpoint_2k::PPControlsPtr* Controls/*[out,retval]*/) = 0; // [2018]
  virtual HRESULT STDMETHODCALLTYPE get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/) = 0; // [2019]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [2020]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR Name/*[in]*/) = 0; // [2020]
  virtual HRESULT STDMETHODCALLTYPE get_Sheets(Powerpoint_2k::PPTabSheetsPtr* Sheets/*[out,retval]*/) = 0; // [2021]
  virtual HRESULT STDMETHODCALLTYPE get_TabControl(Powerpoint_2k::PPTabControlPtr* TabControl/*[out,retval]*/) = 0; // [2022]
  virtual HRESULT STDMETHODCALLTYPE get_DelayTime(int* DelayTime/*[out,retval]*/) = 0; // [2023]
  virtual HRESULT STDMETHODCALLTYPE set_DelayTime(int DelayTime/*[in]*/) = 0; // [2023]
  virtual HRESULT STDMETHODCALLTYPE SaveDialog(BSTR FileName/*[in]*/, 
                                               int* SaveDialog/*[out,retval]*/) = 0; // [2024]
  virtual HRESULT STDMETHODCALLTYPE Terminate(void) = 0; // [2025]
  virtual HRESULT STDMETHODCALLTYPE get_HWND(long* HWND/*[out,retval]*/) = 0; // [2026]
  virtual HRESULT STDMETHODCALLTYPE get_OnTerminate(BSTR* OnTerminate/*[out,retval]*/) = 0; // [2027]
  virtual HRESULT STDMETHODCALLTYPE set_OnTerminate(BSTR OnTerminate/*[in]*/) = 0; // [2027]
  virtual HRESULT STDMETHODCALLTYPE get_OnIdle(BSTR* OnIdle/*[out,retval]*/) = 0; // [2028]
  virtual HRESULT STDMETHODCALLTYPE set_OnIdle(BSTR OnIdle/*[in]*/) = 0; // [2028]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseDown(BSTR* OnMouseDown/*[out,retval]*/) = 0; // [2029]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseDown(BSTR OnMouseDown/*[in]*/) = 0; // [2029]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseUp(BSTR* OnMouseUp/*[out,retval]*/) = 0; // [2030]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseUp(BSTR OnMouseUp/*[in]*/) = 0; // [2030]
  virtual HRESULT STDMETHODCALLTYPE get_OnKeyPressed(BSTR* OnKeyPressed/*[out,retval]*/) = 0; // [2031]
  virtual HRESULT STDMETHODCALLTYPE set_OnKeyPressed(BSTR OnKeyPressed/*[in]*/) = 0; // [2031]
  virtual HRESULT STDMETHODCALLTYPE get_OnTimer(BSTR* OnTimer/*[out,retval]*/) = 0; // [2032]
  virtual HRESULT STDMETHODCALLTYPE set_OnTimer(BSTR OnTimer/*[in]*/) = 0; // [2032]
  virtual HRESULT STDMETHODCALLTYPE get_OnActivate(BSTR* OnActivate/*[out,retval]*/) = 0; // [2033]
  virtual HRESULT STDMETHODCALLTYPE set_OnActivate(BSTR OnActivate/*[in]*/) = 0; // [2033]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::PpDialogStyle __fastcall get_Style(void)
  {
    Powerpoint_2k::PpDialogStyle Style;
    OLECHECK(this->get_Style((Powerpoint_2k::PpDialogStyle*)&Style));
    return Style;
  }

  Powerpoint_2k::PpDialogMode __fastcall get_Mode(void)
  {
    Powerpoint_2k::PpDialogMode Mode;
    OLECHECK(this->get_Mode((Powerpoint_2k::PpDialogMode*)&Mode));
    return Mode;
  }

  int __fastcall get_HelpId(void)
  {
    int HelpId;
    OLECHECK(this->get_HelpId((int*)&HelpId));
    return HelpId;
  }

  Office_2k::MsoTriState __fastcall get_HideOnIdle(void)
  {
    Office_2k::MsoTriState HideOnIdle;
    OLECHECK(this->get_HideOnIdle((Office_2k::MsoTriState*)&HideOnIdle));
    return HideOnIdle;
  }

  BSTR __fastcall get_resourceDLL(void)
  {
    BSTR resourceDLL = 0;
    OLECHECK(this->get_resourceDLL((BSTR*)&resourceDLL));
    return resourceDLL;
  }

  BSTR __fastcall get_Caption(void)
  {
    BSTR Caption = 0;
    OLECHECK(this->get_Caption((BSTR*)&Caption));
    return Caption;
  }

  float __fastcall get_Left(void)
  {
    float Left;
    OLECHECK(this->get_Left((float*)&Left));
    return Left;
  }

  float __fastcall get_Top(void)
  {
    float Top;
    OLECHECK(this->get_Top((float*)&Top));
    return Top;
  }

  float __fastcall get_Width(void)
  {
    float Width;
    OLECHECK(this->get_Width((float*)&Width));
    return Width;
  }

  float __fastcall get_Height(void)
  {
    float Height;
    OLECHECK(this->get_Height((float*)&Height));
    return Height;
  }

  float __fastcall get_ClientLeft(void)
  {
    float ClientLeft;
    OLECHECK(this->get_ClientLeft((float*)&ClientLeft));
    return ClientLeft;
  }

  float __fastcall get_ClientTop(void)
  {
    float ClientTop;
    OLECHECK(this->get_ClientTop((float*)&ClientTop));
    return ClientTop;
  }

  float __fastcall get_ClientWidth(void)
  {
    float ClientWidth;
    OLECHECK(this->get_ClientWidth((float*)&ClientWidth));
    return ClientWidth;
  }

  float __fastcall get_ClientHeight(void)
  {
    float ClientHeight;
    OLECHECK(this->get_ClientHeight((float*)&ClientHeight));
    return ClientHeight;
  }

  Office_2k::MsoTriState __fastcall get_Visible(void)
  {
    Office_2k::MsoTriState Visible;
    OLECHECK(this->get_Visible((Office_2k::MsoTriState*)&Visible));
    return Visible;
  }

  Powerpoint_2k::PPControlsPtr __fastcall get_Controls(void)
  {
    Powerpoint_2k::PPControlsPtr Controls;
    OLECHECK(this->get_Controls((Powerpoint_2k::PPControlsPtr*)&Controls));
    return Controls;
  }

  Powerpoint_2k::TagsPtr __fastcall get_Tags(void)
  {
    Powerpoint_2k::TagsPtr Tags;
    OLECHECK(this->get_Tags((Powerpoint_2k::TagsPtr*)&Tags));
    return Tags;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  Powerpoint_2k::PPTabSheetsPtr __fastcall get_Sheets(void)
  {
    Powerpoint_2k::PPTabSheetsPtr Sheets;
    OLECHECK(this->get_Sheets((Powerpoint_2k::PPTabSheetsPtr*)&Sheets));
    return Sheets;
  }

  Powerpoint_2k::PPTabControlPtr __fastcall get_TabControl(void)
  {
    Powerpoint_2k::PPTabControlPtr TabControl;
    OLECHECK(this->get_TabControl((Powerpoint_2k::PPTabControlPtr*)&TabControl));
    return TabControl;
  }

  int __fastcall get_DelayTime(void)
  {
    int DelayTime;
    OLECHECK(this->get_DelayTime((int*)&DelayTime));
    return DelayTime;
  }

  int __fastcall SaveDialog(BSTR FileName/*[in]*/)
  {
    int SaveDialog;
    OLECHECK(this->SaveDialog(FileName, (int*)&SaveDialog));
    return SaveDialog;
  }

  long __fastcall get_HWND(void)
  {
    long HWND;
    OLECHECK(this->get_HWND((long*)&HWND));
    return HWND;
  }

  BSTR __fastcall get_OnTerminate(void)
  {
    BSTR OnTerminate = 0;
    OLECHECK(this->get_OnTerminate((BSTR*)&OnTerminate));
    return OnTerminate;
  }

  BSTR __fastcall get_OnIdle(void)
  {
    BSTR OnIdle = 0;
    OLECHECK(this->get_OnIdle((BSTR*)&OnIdle));
    return OnIdle;
  }

  BSTR __fastcall get_OnMouseDown(void)
  {
    BSTR OnMouseDown = 0;
    OLECHECK(this->get_OnMouseDown((BSTR*)&OnMouseDown));
    return OnMouseDown;
  }

  BSTR __fastcall get_OnMouseUp(void)
  {
    BSTR OnMouseUp = 0;
    OLECHECK(this->get_OnMouseUp((BSTR*)&OnMouseUp));
    return OnMouseUp;
  }

  BSTR __fastcall get_OnKeyPressed(void)
  {
    BSTR OnKeyPressed = 0;
    OLECHECK(this->get_OnKeyPressed((BSTR*)&OnKeyPressed));
    return OnKeyPressed;
  }

  BSTR __fastcall get_OnTimer(void)
  {
    BSTR OnTimer = 0;
    OLECHECK(this->get_OnTimer((BSTR*)&OnTimer));
    return OnTimer;
  }

  BSTR __fastcall get_OnActivate(void)
  {
    BSTR OnActivate = 0;
    OLECHECK(this->get_OnActivate((BSTR*)&OnActivate));
    return OnActivate;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::PpDialogStyle Style = {read = get_Style};
  __property   Powerpoint_2k::PpDialogMode Mode = {read = get_Mode, write = set_Mode};
  __property   int             HelpId = {read = get_HelpId, write = set_HelpId};
  __property   Office_2k::MsoTriState HideOnIdle = {read = get_HideOnIdle, write = set_HideOnIdle};
  __property   BSTR            resourceDLL = {read = get_resourceDLL, write = set_resourceDLL};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   float           ClientLeft = {read = get_ClientLeft};
  __property   float           ClientTop = {read = get_ClientTop};
  __property   float           ClientWidth = {read = get_ClientWidth};
  __property   float           ClientHeight = {read = get_ClientHeight};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   Powerpoint_2k::PPControlsPtr Controls = {read = get_Controls};
  __property   Powerpoint_2k::TagsPtr Tags = {read = get_Tags};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   Powerpoint_2k::PPTabSheetsPtr Sheets = {read = get_Sheets};
  __property   Powerpoint_2k::PPTabControlPtr TabControl = {read = get_TabControl};
  __property   int             DelayTime = {read = get_DelayTime, write = set_DelayTime};
  __property   long            HWND = {read = get_HWND};
  __property   BSTR            OnTerminate = {read = get_OnTerminate, write = set_OnTerminate};
  __property   BSTR            OnIdle = {read = get_OnIdle, write = set_OnIdle};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
  __property   BSTR            OnKeyPressed = {read = get_OnKeyPressed, write = set_OnKeyPressed};
  __property   BSTR            OnTimer = {read = get_OnTimer, write = set_OnTimer};
  __property   BSTR            OnActivate = {read = get_OnActivate, write = set_OnActivate};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PPTabSheet
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934A1-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface PPTabSheet  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR Name/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE Select(void) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_ClientLeft(float* ClientLeft/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_ClientTop(float* ClientTop/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_ClientWidth(float* ClientWidth/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_ClientHeight(float* ClientHeight/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_Controls(Powerpoint_2k::PPControlsPtr* Controls/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE get_OnActivate(BSTR* OnActivate/*[out,retval]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE set_OnActivate(BSTR OnActivate/*[in]*/) = 0; // [2011]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  float __fastcall get_ClientLeft(void)
  {
    float ClientLeft;
    OLECHECK(this->get_ClientLeft((float*)&ClientLeft));
    return ClientLeft;
  }

  float __fastcall get_ClientTop(void)
  {
    float ClientTop;
    OLECHECK(this->get_ClientTop((float*)&ClientTop));
    return ClientTop;
  }

  float __fastcall get_ClientWidth(void)
  {
    float ClientWidth;
    OLECHECK(this->get_ClientWidth((float*)&ClientWidth));
    return ClientWidth;
  }

  float __fastcall get_ClientHeight(void)
  {
    float ClientHeight;
    OLECHECK(this->get_ClientHeight((float*)&ClientHeight));
    return ClientHeight;
  }

  Powerpoint_2k::PPControlsPtr __fastcall get_Controls(void)
  {
    Powerpoint_2k::PPControlsPtr Controls;
    OLECHECK(this->get_Controls((Powerpoint_2k::PPControlsPtr*)&Controls));
    return Controls;
  }

  Powerpoint_2k::TagsPtr __fastcall get_Tags(void)
  {
    Powerpoint_2k::TagsPtr Tags;
    OLECHECK(this->get_Tags((Powerpoint_2k::TagsPtr*)&Tags));
    return Tags;
  }

  BSTR __fastcall get_OnActivate(void)
  {
    BSTR OnActivate = 0;
    OLECHECK(this->get_OnActivate((BSTR*)&OnActivate));
    return OnActivate;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   float           ClientLeft = {read = get_ClientLeft};
  __property   float           ClientTop = {read = get_ClientTop};
  __property   float           ClientWidth = {read = get_ClientWidth};
  __property   float           ClientHeight = {read = get_ClientHeight};
  __property   Powerpoint_2k::PPControlsPtr Controls = {read = get_Controls};
  __property   Powerpoint_2k::TagsPtr Tags = {read = get_Tags};
  __property   BSTR            OnActivate = {read = get_OnActivate, write = set_OnActivate};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PPControls
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934A2-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface PPControls  : public Powerpoint_2k::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE Item(TVariantInParam index/*[in]*/, 
                                         Powerpoint_2k::PPControlPtr* Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE AddPushButton(float Left/*[in]*/, float Top/*[in]*/, 
                                                  float Width/*[in]*/, float Height/*[in]*/, 
                                                  Powerpoint_2k::PPPushButtonPtr* PushButton/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE AddToggleButton(float Left/*[in]*/, float Top/*[in]*/, 
                                                    float Width/*[in]*/, float Height/*[in]*/, 
                                                    Powerpoint_2k::PPToggleButtonPtr* ToggleButton/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE AddBitmapButton(float Left/*[in]*/, float Top/*[in]*/, 
                                                    float Width/*[in]*/, float Height/*[in]*/, 
                                                    Powerpoint_2k::PPBitmapButtonPtr* BitmapButton/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE AddListBox(float Left/*[in]*/, float Top/*[in]*/, 
                                               float Width/*[in]*/, float Height/*[in]*/, 
                                               Powerpoint_2k::PPListBoxPtr* ListBox/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE AddCheckBox(float Left/*[in]*/, float Top/*[in]*/, 
                                                float Width/*[in]*/, float Height/*[in]*/, 
                                                Powerpoint_2k::PPCheckBoxPtr* CheckBox/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE AddRadioCluster(float Left/*[in]*/, float Top/*[in]*/, 
                                                    float Width/*[in]*/, float Height/*[in]*/, 
                                                    Powerpoint_2k::PPRadioClusterPtr* RadioCluster/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE AddStaticText(float Left/*[in]*/, float Top/*[in]*/, 
                                                  float Width/*[in]*/, float Height/*[in]*/, 
                                                  Powerpoint_2k::PPStaticTextPtr* StaticText/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE AddEditText(float Left/*[in]*/, float Top/*[in]*/, 
                                                float Width/*[in]*/, float Height/*[in]*/, 
                                                TVariantInParam VerticalScrollBar/*[in,opt]*/, 
                                                Powerpoint_2k::PPEditTextPtr* EditText/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE AddIcon(float Left/*[in]*/, float Top/*[in]*/, 
                                            float Width/*[in]*/, float Height/*[in]*/, 
                                            Powerpoint_2k::PPIconPtr* icon/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE AddBitmap(float Left/*[in]*/, float Top/*[in]*/, 
                                              float Width/*[in]*/, float Height/*[in]*/, 
                                              Powerpoint_2k::PPBitmapPtr* Bitmap/*[out,retval]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE AddSpinner(float Left/*[in]*/, float Top/*[in]*/, 
                                               float Width/*[in]*/, float Height/*[in]*/, 
                                               Powerpoint_2k::PPSpinnerPtr* Spinner/*[out,retval]*/) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE AddScrollBar(Powerpoint_2k::PpScrollBarStyle Style/*[in]*/, 
                                                 float Left/*[in]*/, float Top/*[in]*/, 
                                                 float Width/*[in]*/, float Height/*[in]*/, 
                                                 Powerpoint_2k::PPScrollBarPtr* ScrollBar/*[out,retval]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE AddGroupBox(float Left/*[in]*/, float Top/*[in]*/, 
                                                float Width/*[in]*/, float Height/*[in]*/, 
                                                Powerpoint_2k::PPGroupBoxPtr* GroupBox/*[out,retval]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE AddDropDown(float Left/*[in]*/, float Top/*[in]*/, 
                                                float Width/*[in]*/, float Height/*[in]*/, 
                                                Powerpoint_2k::PPDropDownPtr* DropDown/*[out,retval]*/) = 0; // [2015]
  virtual HRESULT STDMETHODCALLTYPE AddDropDownEdit(float Left/*[in]*/, float Top/*[in]*/, 
                                                    float Width/*[in]*/, float Height/*[in]*/, 
                                                    Powerpoint_2k::PPDropDownEditPtr* DropDownEdit/*[out,retval]*/) = 0; // [2016]
  virtual HRESULT STDMETHODCALLTYPE AddMiniature(float Left/*[in]*/, float Top/*[in]*/, 
                                                 float Width/*[in]*/, float Height/*[in]*/, 
                                                 Powerpoint_2k::PPSlideMiniaturePtr* Miniature/*[out,retval]*/) = 0; // [2017]
  virtual HRESULT STDMETHODCALLTYPE AddFrame(float Left/*[in]*/, float Top/*[in]*/, 
                                             float Width/*[in]*/, float Height/*[in]*/, 
                                             Powerpoint_2k::PPFramePtr* Frame/*[out,retval]*/) = 0; // [2018]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/) = 0; // [2019]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(Office_2k::MsoTriState Visible/*[in]*/) = 0; // [2019]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  Powerpoint_2k::PPControlPtr __fastcall Item(TVariantInParam index/*[in]*/)
  {
    Powerpoint_2k::PPControlPtr Item;
    OLECHECK(this->Item(index, (Powerpoint_2k::PPControlPtr*)&Item));
    return Item;
  }

  Powerpoint_2k::PPPushButtonPtr __fastcall AddPushButton(float Left/*[in]*/, float Top/*[in]*/, 
                                                          float Width/*[in]*/, float Height/*[in]*/)
  {
    Powerpoint_2k::PPPushButtonPtr PushButton;
    OLECHECK(this->AddPushButton(Left, Top, Width, Height, (Powerpoint_2k::PPPushButtonPtr*)&PushButton));
    return PushButton;
  }

  Powerpoint_2k::PPToggleButtonPtr __fastcall AddToggleButton(float Left/*[in]*/, float Top/*[in]*/, 
                                                              float Width/*[in]*/, 
                                                              float Height/*[in]*/)
  {
    Powerpoint_2k::PPToggleButtonPtr ToggleButton;
    OLECHECK(this->AddToggleButton(Left, Top, Width, Height, (Powerpoint_2k::PPToggleButtonPtr*)&ToggleButton));
    return ToggleButton;
  }

  Powerpoint_2k::PPBitmapButtonPtr __fastcall AddBitmapButton(float Left/*[in]*/, float Top/*[in]*/, 
                                                              float Width/*[in]*/, 
                                                              float Height/*[in]*/)
  {
    Powerpoint_2k::PPBitmapButtonPtr BitmapButton;
    OLECHECK(this->AddBitmapButton(Left, Top, Width, Height, (Powerpoint_2k::PPBitmapButtonPtr*)&BitmapButton));
    return BitmapButton;
  }

  Powerpoint_2k::PPListBoxPtr __fastcall AddListBox(float Left/*[in]*/, float Top/*[in]*/, 
                                                    float Width/*[in]*/, float Height/*[in]*/)
  {
    Powerpoint_2k::PPListBoxPtr ListBox;
    OLECHECK(this->AddListBox(Left, Top, Width, Height, (Powerpoint_2k::PPListBoxPtr*)&ListBox));
    return ListBox;
  }

  Powerpoint_2k::PPCheckBoxPtr __fastcall AddCheckBox(float Left/*[in]*/, float Top/*[in]*/, 
                                                      float Width/*[in]*/, float Height/*[in]*/)
  {
    Powerpoint_2k::PPCheckBoxPtr CheckBox;
    OLECHECK(this->AddCheckBox(Left, Top, Width, Height, (Powerpoint_2k::PPCheckBoxPtr*)&CheckBox));
    return CheckBox;
  }

  Powerpoint_2k::PPRadioClusterPtr __fastcall AddRadioCluster(float Left/*[in]*/, float Top/*[in]*/, 
                                                              float Width/*[in]*/, 
                                                              float Height/*[in]*/)
  {
    Powerpoint_2k::PPRadioClusterPtr RadioCluster;
    OLECHECK(this->AddRadioCluster(Left, Top, Width, Height, (Powerpoint_2k::PPRadioClusterPtr*)&RadioCluster));
    return RadioCluster;
  }

  Powerpoint_2k::PPStaticTextPtr __fastcall AddStaticText(float Left/*[in]*/, float Top/*[in]*/, 
                                                          float Width/*[in]*/, float Height/*[in]*/)
  {
    Powerpoint_2k::PPStaticTextPtr StaticText;
    OLECHECK(this->AddStaticText(Left, Top, Width, Height, (Powerpoint_2k::PPStaticTextPtr*)&StaticText));
    return StaticText;
  }

  Powerpoint_2k::PPEditTextPtr __fastcall AddEditText(float Left/*[in]*/, float Top/*[in]*/, 
                                                      float Width/*[in]*/, float Height/*[in]*/, 
                                                      TVariantInParam VerticalScrollBar/*[in,opt]*/= TNoParam())
  {
    Powerpoint_2k::PPEditTextPtr EditText;
    OLECHECK(this->AddEditText(Left, Top, Width, Height, VerticalScrollBar, (Powerpoint_2k::PPEditTextPtr*)&EditText));
    return EditText;
  }

  Powerpoint_2k::PPIconPtr __fastcall AddIcon(float Left/*[in]*/, float Top/*[in]*/, 
                                              float Width/*[in]*/, float Height/*[in]*/)
  {
    Powerpoint_2k::PPIconPtr icon;
    OLECHECK(this->AddIcon(Left, Top, Width, Height, (Powerpoint_2k::PPIconPtr*)&icon));
    return icon;
  }

  Powerpoint_2k::PPBitmapPtr __fastcall AddBitmap(float Left/*[in]*/, float Top/*[in]*/, 
                                                  float Width/*[in]*/, float Height/*[in]*/)
  {
    Powerpoint_2k::PPBitmapPtr Bitmap;
    OLECHECK(this->AddBitmap(Left, Top, Width, Height, (Powerpoint_2k::PPBitmapPtr*)&Bitmap));
    return Bitmap;
  }

  Powerpoint_2k::PPSpinnerPtr __fastcall AddSpinner(float Left/*[in]*/, float Top/*[in]*/, 
                                                    float Width/*[in]*/, float Height/*[in]*/)
  {
    Powerpoint_2k::PPSpinnerPtr Spinner;
    OLECHECK(this->AddSpinner(Left, Top, Width, Height, (Powerpoint_2k::PPSpinnerPtr*)&Spinner));
    return Spinner;
  }

  Powerpoint_2k::PPScrollBarPtr __fastcall AddScrollBar(Powerpoint_2k::PpScrollBarStyle Style/*[in]*/, 
                                                        float Left/*[in]*/, float Top/*[in]*/, 
                                                        float Width/*[in]*/, float Height/*[in]*/)
  {
    Powerpoint_2k::PPScrollBarPtr ScrollBar;
    OLECHECK(this->AddScrollBar(Style, Left, Top, Width, Height, (Powerpoint_2k::PPScrollBarPtr*)&ScrollBar));
    return ScrollBar;
  }

  Powerpoint_2k::PPGroupBoxPtr __fastcall AddGroupBox(float Left/*[in]*/, float Top/*[in]*/, 
                                                      float Width/*[in]*/, float Height/*[in]*/)
  {
    Powerpoint_2k::PPGroupBoxPtr GroupBox;
    OLECHECK(this->AddGroupBox(Left, Top, Width, Height, (Powerpoint_2k::PPGroupBoxPtr*)&GroupBox));
    return GroupBox;
  }

  Powerpoint_2k::PPDropDownPtr __fastcall AddDropDown(float Left/*[in]*/, float Top/*[in]*/, 
                                                      float Width/*[in]*/, float Height/*[in]*/)
  {
    Powerpoint_2k::PPDropDownPtr DropDown;
    OLECHECK(this->AddDropDown(Left, Top, Width, Height, (Powerpoint_2k::PPDropDownPtr*)&DropDown));
    return DropDown;
  }

  Powerpoint_2k::PPDropDownEditPtr __fastcall AddDropDownEdit(float Left/*[in]*/, float Top/*[in]*/, 
                                                              float Width/*[in]*/, 
                                                              float Height/*[in]*/)
  {
    Powerpoint_2k::PPDropDownEditPtr DropDownEdit;
    OLECHECK(this->AddDropDownEdit(Left, Top, Width, Height, (Powerpoint_2k::PPDropDownEditPtr*)&DropDownEdit));
    return DropDownEdit;
  }

  Powerpoint_2k::PPSlideMiniaturePtr __fastcall AddMiniature(float Left/*[in]*/, float Top/*[in]*/, 
                                                             float Width/*[in]*/, 
                                                             float Height/*[in]*/)
  {
    Powerpoint_2k::PPSlideMiniaturePtr Miniature;
    OLECHECK(this->AddMiniature(Left, Top, Width, Height, (Powerpoint_2k::PPSlideMiniaturePtr*)&Miniature));
    return Miniature;
  }

  Powerpoint_2k::PPFramePtr __fastcall AddFrame(float Left/*[in]*/, float Top/*[in]*/, 
                                                float Width/*[in]*/, float Height/*[in]*/)
  {
    Powerpoint_2k::PPFramePtr Frame;
    OLECHECK(this->AddFrame(Left, Top, Width, Height, (Powerpoint_2k::PPFramePtr*)&Frame));
    return Frame;
  }

  Office_2k::MsoTriState __fastcall get_Visible(void)
  {
    Office_2k::MsoTriState Visible;
    OLECHECK(this->get_Visible((Office_2k::MsoTriState*)&Visible));
    return Visible;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PPTabSheets
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934A3-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface PPTabSheets  : public Powerpoint_2k::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE Item(TVariantInParam index/*[in]*/, 
                                         Powerpoint_2k::PPTabSheetPtr* Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Add(BSTR Name/*[in]*/, 
                                        Powerpoint_2k::PPTabSheetPtr* Add/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_ActiveSheet(Powerpoint_2k::PPTabSheetPtr* ActiveSheet/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR Name/*[in]*/) = 0; // [2003]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PPTabSheetPtr __fastcall Item(TVariantInParam index/*[in]*/)
  {
    Powerpoint_2k::PPTabSheetPtr Item;
    OLECHECK(this->Item(index, (Powerpoint_2k::PPTabSheetPtr*)&Item));
    return Item;
  }

  Powerpoint_2k::PPTabSheetPtr __fastcall Add(BSTR Name/*[in]*/)
  {
    Powerpoint_2k::PPTabSheetPtr Add;
    OLECHECK(this->Add(Name, (Powerpoint_2k::PPTabSheetPtr*)&Add));
    return Add;
  }

  Powerpoint_2k::PPTabSheetPtr __fastcall get_ActiveSheet(void)
  {
    Powerpoint_2k::PPTabSheetPtr ActiveSheet;
    OLECHECK(this->get_ActiveSheet((Powerpoint_2k::PPTabSheetPtr*)&ActiveSheet));
    return ActiveSheet;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }


  __property   Powerpoint_2k::PPTabSheetPtr ActiveSheet = {read = get_ActiveSheet};
  __property   BSTR            Name = {read = get_Name, write = set_Name};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PPControl
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {914934A4-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface PPControl  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [1001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1002]
  virtual HRESULT STDMETHODCALLTYPE get_Enable(Office_2k::MsoTriState* Enable/*[out,retval]*/) = 0; // [1003]
  virtual HRESULT STDMETHODCALLTYPE set_Enable(Office_2k::MsoTriState Enable/*[in]*/) = 0; // [1003]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/) = 0; // [1004]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(Office_2k::MsoTriState Visible/*[in]*/) = 0; // [1004]
  virtual HRESULT STDMETHODCALLTYPE get_Focus(Office_2k::MsoTriState* Focus/*[out,retval]*/) = 0; // [1005]
  virtual HRESULT STDMETHODCALLTYPE set_Focus(Office_2k::MsoTriState Focus/*[in]*/) = 0; // [1005]
  virtual HRESULT STDMETHODCALLTYPE get_Label(BSTR* Label/*[out,retval]*/) = 0; // [1006]
  virtual HRESULT STDMETHODCALLTYPE set_Label(BSTR Label/*[in]*/) = 0; // [1006]
  virtual HRESULT STDMETHODCALLTYPE get_HelpId(int* HelpId/*[out,retval]*/) = 0; // [1007]
  virtual HRESULT STDMETHODCALLTYPE set_HelpId(int HelpId/*[in]*/) = 0; // [1007]
  virtual HRESULT STDMETHODCALLTYPE get_Left(float* Left/*[out,retval]*/) = 0; // [1008]
  virtual HRESULT STDMETHODCALLTYPE set_Left(float Left/*[in]*/) = 0; // [1008]
  virtual HRESULT STDMETHODCALLTYPE get_Top(float* Top/*[out,retval]*/) = 0; // [1009]
  virtual HRESULT STDMETHODCALLTYPE set_Top(float Top/*[in]*/) = 0; // [1009]
  virtual HRESULT STDMETHODCALLTYPE get_Width(float* Width/*[out,retval]*/) = 0; // [1010]
  virtual HRESULT STDMETHODCALLTYPE set_Width(float Width/*[in]*/) = 0; // [1010]
  virtual HRESULT STDMETHODCALLTYPE get_Height(float* Height/*[out,retval]*/) = 0; // [1011]
  virtual HRESULT STDMETHODCALLTYPE set_Height(float Height/*[in]*/) = 0; // [1011]
  virtual HRESULT STDMETHODCALLTYPE get_HWND(long* HWND/*[out,retval]*/) = 0; // [1012]
  virtual HRESULT STDMETHODCALLTYPE get_OnSetFocus(BSTR* OnSetFocus/*[out,retval]*/) = 0; // [1013]
  virtual HRESULT STDMETHODCALLTYPE set_OnSetFocus(BSTR OnSetFocus/*[in]*/) = 0; // [1013]
  virtual HRESULT STDMETHODCALLTYPE get_OnKillFocus(BSTR* OnKillFocus/*[out,retval]*/) = 0; // [1014]
  virtual HRESULT STDMETHODCALLTYPE set_OnKillFocus(BSTR OnKillFocus/*[in]*/) = 0; // [1014]
  virtual HRESULT STDMETHODCALLTYPE get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/) = 0; // [1015]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [1016]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR Name/*[in]*/) = 0; // [1016]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Office_2k::MsoTriState __fastcall get_Enable(void)
  {
    Office_2k::MsoTriState Enable;
    OLECHECK(this->get_Enable((Office_2k::MsoTriState*)&Enable));
    return Enable;
  }

  Office_2k::MsoTriState __fastcall get_Visible(void)
  {
    Office_2k::MsoTriState Visible;
    OLECHECK(this->get_Visible((Office_2k::MsoTriState*)&Visible));
    return Visible;
  }

  Office_2k::MsoTriState __fastcall get_Focus(void)
  {
    Office_2k::MsoTriState Focus;
    OLECHECK(this->get_Focus((Office_2k::MsoTriState*)&Focus));
    return Focus;
  }

  BSTR __fastcall get_Label(void)
  {
    BSTR Label = 0;
    OLECHECK(this->get_Label((BSTR*)&Label));
    return Label;
  }

  int __fastcall get_HelpId(void)
  {
    int HelpId;
    OLECHECK(this->get_HelpId((int*)&HelpId));
    return HelpId;
  }

  float __fastcall get_Left(void)
  {
    float Left;
    OLECHECK(this->get_Left((float*)&Left));
    return Left;
  }

  float __fastcall get_Top(void)
  {
    float Top;
    OLECHECK(this->get_Top((float*)&Top));
    return Top;
  }

  float __fastcall get_Width(void)
  {
    float Width;
    OLECHECK(this->get_Width((float*)&Width));
    return Width;
  }

  float __fastcall get_Height(void)
  {
    float Height;
    OLECHECK(this->get_Height((float*)&Height));
    return Height;
  }

  long __fastcall get_HWND(void)
  {
    long HWND;
    OLECHECK(this->get_HWND((long*)&HWND));
    return HWND;
  }

  BSTR __fastcall get_OnSetFocus(void)
  {
    BSTR OnSetFocus = 0;
    OLECHECK(this->get_OnSetFocus((BSTR*)&OnSetFocus));
    return OnSetFocus;
  }

  BSTR __fastcall get_OnKillFocus(void)
  {
    BSTR OnKillFocus = 0;
    OLECHECK(this->get_OnKillFocus((BSTR*)&OnKillFocus));
    return OnKillFocus;
  }

  Powerpoint_2k::TagsPtr __fastcall get_Tags(void)
  {
    Powerpoint_2k::TagsPtr Tags;
    OLECHECK(this->get_Tags((Powerpoint_2k::TagsPtr*)&Tags));
    return Tags;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoTriState Enable = {read = get_Enable, write = set_Enable};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   Office_2k::MsoTriState Focus = {read = get_Focus, write = set_Focus};
  __property   BSTR            Label = {read = get_Label, write = set_Label};
  __property   int             HelpId = {read = get_HelpId, write = set_HelpId};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   long            HWND = {read = get_HWND};
  __property   BSTR            OnSetFocus = {read = get_OnSetFocus, write = set_OnSetFocus};
  __property   BSTR            OnKillFocus = {read = get_OnKillFocus, write = set_OnKillFocus};
  __property   Powerpoint_2k::TagsPtr Tags = {read = get_Tags};
  __property   BSTR            Name = {read = get_Name, write = set_Name};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PPPushButton
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934A5-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface PPPushButton  : public Powerpoint_2k::PPControl
{
public:
  virtual HRESULT STDMETHODCALLTYPE _Click(void) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_IsDefault(Office_2k::MsoTriState* IsDefault/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE set_IsDefault(Office_2k::MsoTriState IsDefault/*[in]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_IsEscape(Office_2k::MsoTriState* IsEscape/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_IsEscape(Office_2k::MsoTriState IsEscape/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_OnPressed(BSTR* OnPressed/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_OnPressed(BSTR OnPressed/*[in]*/) = 0; // [2004]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Office_2k::MsoTriState __fastcall get_IsDefault(void)
  {
    Office_2k::MsoTriState IsDefault;
    OLECHECK(this->get_IsDefault((Office_2k::MsoTriState*)&IsDefault));
    return IsDefault;
  }

  Office_2k::MsoTriState __fastcall get_IsEscape(void)
  {
    Office_2k::MsoTriState IsEscape;
    OLECHECK(this->get_IsEscape((Office_2k::MsoTriState*)&IsEscape));
    return IsEscape;
  }

  BSTR __fastcall get_OnPressed(void)
  {
    BSTR OnPressed = 0;
    OLECHECK(this->get_OnPressed((BSTR*)&OnPressed));
    return OnPressed;
  }


  __property   Office_2k::MsoTriState IsDefault = {read = get_IsDefault, write = set_IsDefault};
  __property   Office_2k::MsoTriState IsEscape = {read = get_IsEscape, write = set_IsEscape};
  __property   BSTR            OnPressed = {read = get_OnPressed, write = set_OnPressed};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PPToggleButton
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934A6-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface PPToggleButton  : public Powerpoint_2k::PPControl
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_State(Office_2k::MsoTriState* State/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE set_State(Office_2k::MsoTriState State/*[in]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_ResourceID(int* ResourceID/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE set_ResourceID(int ResourceID/*[in]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE _Click(void) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_OnClick(BSTR* OnClick/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_OnClick(BSTR OnClick/*[in]*/) = 0; // [2004]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Office_2k::MsoTriState __fastcall get_State(void)
  {
    Office_2k::MsoTriState State;
    OLECHECK(this->get_State((Office_2k::MsoTriState*)&State));
    return State;
  }

  int __fastcall get_ResourceID(void)
  {
    int ResourceID;
    OLECHECK(this->get_ResourceID((int*)&ResourceID));
    return ResourceID;
  }

  BSTR __fastcall get_OnClick(void)
  {
    BSTR OnClick = 0;
    OLECHECK(this->get_OnClick((BSTR*)&OnClick));
    return OnClick;
  }


  __property   Office_2k::MsoTriState State = {read = get_State, write = set_State};
  __property   int             ResourceID = {read = get_ResourceID, write = set_ResourceID};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PPBitmapButton
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934A7-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface PPBitmapButton  : public Powerpoint_2k::PPControl
{
public:
  virtual HRESULT STDMETHODCALLTYPE _Click(void) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_ResourceID(int* ResourceID/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE set_ResourceID(int ResourceID/*[in]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_OnPressed(BSTR* OnPressed/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_OnPressed(BSTR OnPressed/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_IsDefault(Office_2k::MsoTriState* IsDefault/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_IsDefault(Office_2k::MsoTriState IsDefault/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_IsEscape(Office_2k::MsoTriState* IsEscape/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_IsEscape(Office_2k::MsoTriState IsEscape/*[in]*/) = 0; // [2005]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  int __fastcall get_ResourceID(void)
  {
    int ResourceID;
    OLECHECK(this->get_ResourceID((int*)&ResourceID));
    return ResourceID;
  }

  BSTR __fastcall get_OnPressed(void)
  {
    BSTR OnPressed = 0;
    OLECHECK(this->get_OnPressed((BSTR*)&OnPressed));
    return OnPressed;
  }

  Office_2k::MsoTriState __fastcall get_IsDefault(void)
  {
    Office_2k::MsoTriState IsDefault;
    OLECHECK(this->get_IsDefault((Office_2k::MsoTriState*)&IsDefault));
    return IsDefault;
  }

  Office_2k::MsoTriState __fastcall get_IsEscape(void)
  {
    Office_2k::MsoTriState IsEscape;
    OLECHECK(this->get_IsEscape((Office_2k::MsoTriState*)&IsEscape));
    return IsEscape;
  }


  __property   int             ResourceID = {read = get_ResourceID, write = set_ResourceID};
  __property   BSTR            OnPressed = {read = get_OnPressed, write = set_OnPressed};
  __property   Office_2k::MsoTriState IsDefault = {read = get_IsDefault, write = set_IsDefault};
  __property   Office_2k::MsoTriState IsEscape = {read = get_IsEscape, write = set_IsEscape};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PPListBox
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934A8-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface PPListBox  : public Powerpoint_2k::PPControl
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Strings(Powerpoint_2k::PPStringsPtr* Strings/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_SelectionStyle(Powerpoint_2k::PpListBoxSelectionStyle* SelectionStyle/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE set_SelectionStyle(Powerpoint_2k::PpListBoxSelectionStyle SelectionStyle/*[in]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE SetTabStops(TVariantInParam safeArrayTabStops/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_FocusItem(int* FocusItem/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_FocusItem(int FocusItem/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_TopItem(int* TopItem/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_OnSelectionChange(BSTR* OnSelectionChange/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_OnSelectionChange(BSTR OnSelectionChange/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_OnDoubleClick(BSTR* OnDoubleClick/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE set_OnDoubleClick(BSTR OnDoubleClick/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_IsSelected(int index/*[in]*/, 
                                                   Office_2k::MsoTriState* IsSelected/*[out,retval]*/) = 0; // [999]
  virtual HRESULT STDMETHODCALLTYPE set_IsSelected(int index/*[in]*/, 
                                                   Office_2k::MsoTriState IsSelected/*[in]*/) = 0; // [999]
  virtual HRESULT STDMETHODCALLTYPE Abbreviate(Powerpoint_2k::PpListBoxAbbreviationStyle Style/*[in]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_IsAbbreviated(Powerpoint_2k::PpListBoxAbbreviationStyle* IsAbbreviated/*[out,retval]*/) = 0; // [2009]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PPStringsPtr __fastcall get_Strings(void)
  {
    Powerpoint_2k::PPStringsPtr Strings;
    OLECHECK(this->get_Strings((Powerpoint_2k::PPStringsPtr*)&Strings));
    return Strings;
  }

  Powerpoint_2k::PpListBoxSelectionStyle __fastcall get_SelectionStyle(void)
  {
    Powerpoint_2k::PpListBoxSelectionStyle SelectionStyle;
    OLECHECK(this->get_SelectionStyle((Powerpoint_2k::PpListBoxSelectionStyle*)&SelectionStyle));
    return SelectionStyle;
  }

  int __fastcall get_FocusItem(void)
  {
    int FocusItem;
    OLECHECK(this->get_FocusItem((int*)&FocusItem));
    return FocusItem;
  }

  int __fastcall get_TopItem(void)
  {
    int TopItem;
    OLECHECK(this->get_TopItem((int*)&TopItem));
    return TopItem;
  }

  BSTR __fastcall get_OnSelectionChange(void)
  {
    BSTR OnSelectionChange = 0;
    OLECHECK(this->get_OnSelectionChange((BSTR*)&OnSelectionChange));
    return OnSelectionChange;
  }

  BSTR __fastcall get_OnDoubleClick(void)
  {
    BSTR OnDoubleClick = 0;
    OLECHECK(this->get_OnDoubleClick((BSTR*)&OnDoubleClick));
    return OnDoubleClick;
  }

  Office_2k::MsoTriState __fastcall get_IsSelected(int index/*[in]*/)
  {
    Office_2k::MsoTriState IsSelected;
    OLECHECK(this->get_IsSelected(index, (Office_2k::MsoTriState*)&IsSelected));
    return IsSelected;
  }

  Powerpoint_2k::PpListBoxAbbreviationStyle __fastcall get_IsAbbreviated(void)
  {
    Powerpoint_2k::PpListBoxAbbreviationStyle IsAbbreviated;
    OLECHECK(this->get_IsAbbreviated((Powerpoint_2k::PpListBoxAbbreviationStyle*)&IsAbbreviated));
    return IsAbbreviated;
  }


  __property   Powerpoint_2k::PPStringsPtr Strings = {read = get_Strings};
  __property   Powerpoint_2k::PpListBoxSelectionStyle SelectionStyle = {read = get_SelectionStyle, write = set_SelectionStyle};
  __property   int             FocusItem = {read = get_FocusItem, write = set_FocusItem};
  __property   int             TopItem = {read = get_TopItem};
  __property   BSTR            OnSelectionChange = {read = get_OnSelectionChange, write = set_OnSelectionChange};
  __property   BSTR            OnDoubleClick = {read = get_OnDoubleClick, write = set_OnDoubleClick};
  __property   Powerpoint_2k::PpListBoxAbbreviationStyle IsAbbreviated = {read = get_IsAbbreviated};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PPStrings
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934A9-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface PPStrings  : public Powerpoint_2k::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE Item(int index/*[in]*/, BSTR* Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Add(BSTR String/*[in]*/, BSTR* Add/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE Insert(BSTR String/*[in]*/, int Position/*[in]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Delete(int index/*[in]*/) = 0; // [2003]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall Item(int index/*[in]*/)
  {
    BSTR Item = 0;
    OLECHECK(this->Item(index, (BSTR*)&Item));
    return Item;
  }

  BSTR __fastcall Add(BSTR String/*[in]*/)
  {
    BSTR Add = 0;
    OLECHECK(this->Add(String, (BSTR*)&Add));
    return Add;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PPCheckBox
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934AA-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface PPCheckBox  : public Powerpoint_2k::PPControl
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_State(Office_2k::MsoTriState* State/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE set_State(Office_2k::MsoTriState State/*[in]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE _Click(void) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_OnClick(BSTR* OnClick/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_OnClick(BSTR OnClick/*[in]*/) = 0; // [2003]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Office_2k::MsoTriState __fastcall get_State(void)
  {
    Office_2k::MsoTriState State;
    OLECHECK(this->get_State((Office_2k::MsoTriState*)&State));
    return State;
  }

  BSTR __fastcall get_OnClick(void)
  {
    BSTR OnClick = 0;
    OLECHECK(this->get_OnClick((BSTR*)&OnClick));
    return OnClick;
  }


  __property   Office_2k::MsoTriState State = {read = get_State, write = set_State};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PPRadioCluster
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934AB-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface PPRadioCluster  : public Powerpoint_2k::PPControl
{
public:
  virtual HRESULT STDMETHODCALLTYPE Item(TVariantInParam index/*[in]*/, 
                                         Powerpoint_2k::PPRadioButtonPtr* Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Add(float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                                        float Height/*[in]*/, 
                                        Powerpoint_2k::PPRadioButtonPtr* Add/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Count(int* Count/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Selected(Powerpoint_2k::PPRadioButtonPtr* Selected/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_OnClick(BSTR* OnClick/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_OnClick(BSTR OnClick/*[in]*/) = 0; // [2004]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PPRadioButtonPtr __fastcall Item(TVariantInParam index/*[in]*/)
  {
    Powerpoint_2k::PPRadioButtonPtr Item;
    OLECHECK(this->Item(index, (Powerpoint_2k::PPRadioButtonPtr*)&Item));
    return Item;
  }

  Powerpoint_2k::PPRadioButtonPtr __fastcall Add(float Left/*[in]*/, float Top/*[in]*/, 
                                                 float Width/*[in]*/, float Height/*[in]*/)
  {
    Powerpoint_2k::PPRadioButtonPtr Add;
    OLECHECK(this->Add(Left, Top, Width, Height, (Powerpoint_2k::PPRadioButtonPtr*)&Add));
    return Add;
  }

  int __fastcall get_Count(void)
  {
    int Count;
    OLECHECK(this->get_Count((int*)&Count));
    return Count;
  }

  Powerpoint_2k::PPRadioButtonPtr __fastcall get_Selected(void)
  {
    Powerpoint_2k::PPRadioButtonPtr Selected;
    OLECHECK(this->get_Selected((Powerpoint_2k::PPRadioButtonPtr*)&Selected));
    return Selected;
  }

  BSTR __fastcall get_OnClick(void)
  {
    BSTR OnClick = 0;
    OLECHECK(this->get_OnClick((BSTR*)&OnClick));
    return OnClick;
  }


  __property   int             Count = {read = get_Count};
  __property   Powerpoint_2k::PPRadioButtonPtr Selected = {read = get_Selected};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PPStaticText
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934AC-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface PPStaticText  : public Powerpoint_2k::PPControl
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_UseForegroundColor(Office_2k::MsoTriState* UseForegroundColor/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE set_UseForegroundColor(Office_2k::MsoTriState UseForegroundColor/*[in]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_UseBackgroundColor(Office_2k::MsoTriState* UseBackgroundColor/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE set_UseBackgroundColor(Office_2k::MsoTriState UseBackgroundColor/*[in]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_ForegroundColor(Office_2k::MsoRGBType* ForegroundColor/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_ForegroundColor(Office_2k::MsoRGBType ForegroundColor/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_BackgroundColor(Office_2k::MsoRGBType* BackgroundColor/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_BackgroundColor(Office_2k::MsoRGBType BackgroundColor/*[in]*/) = 0; // [2004]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Office_2k::MsoTriState __fastcall get_UseForegroundColor(void)
  {
    Office_2k::MsoTriState UseForegroundColor;
    OLECHECK(this->get_UseForegroundColor((Office_2k::MsoTriState*)&UseForegroundColor));
    return UseForegroundColor;
  }

  Office_2k::MsoTriState __fastcall get_UseBackgroundColor(void)
  {
    Office_2k::MsoTriState UseBackgroundColor;
    OLECHECK(this->get_UseBackgroundColor((Office_2k::MsoTriState*)&UseBackgroundColor));
    return UseBackgroundColor;
  }

  Office_2k::MsoRGBType __fastcall get_ForegroundColor(void)
  {
    Office_2k::MsoRGBType ForegroundColor;
    OLECHECK(this->get_ForegroundColor((Office_2k::MsoRGBType*)&ForegroundColor));
    return ForegroundColor;
  }

  Office_2k::MsoRGBType __fastcall get_BackgroundColor(void)
  {
    Office_2k::MsoRGBType BackgroundColor;
    OLECHECK(this->get_BackgroundColor((Office_2k::MsoRGBType*)&BackgroundColor));
    return BackgroundColor;
  }


  __property   Office_2k::MsoTriState UseForegroundColor = {read = get_UseForegroundColor, write = set_UseForegroundColor};
  __property   Office_2k::MsoTriState UseBackgroundColor = {read = get_UseBackgroundColor, write = set_UseBackgroundColor};
  __property   Office_2k::MsoRGBType ForegroundColor = {read = get_ForegroundColor, write = set_ForegroundColor};
  __property   Office_2k::MsoRGBType BackgroundColor = {read = get_BackgroundColor, write = set_BackgroundColor};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PPEditText
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934AD-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface PPEditText  : public Powerpoint_2k::PPControl
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_MultiLine(Office_2k::MsoTriState* MultiLine/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE set_MultiLine(Office_2k::MsoTriState MultiLine/*[in]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_VerticalScrollBar(Office_2k::MsoTriState* VerticalScrollBar/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE set_VerticalScrollBar(Office_2k::MsoTriState VerticalScrollBar/*[in]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_WordWrap(Office_2k::MsoTriState* WordWrap/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_WordWrap(Office_2k::MsoTriState WordWrap/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_ReadOnly(Office_2k::MsoTriState* ReadOnly/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_ReadOnly(Office_2k::MsoTriState ReadOnly/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_Text(BSTR* Text/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_Text(BSTR Text/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_MaxLength(int* MaxLength/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_MaxLength(int MaxLength/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_OnAChange(BSTR* OnAChange/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE set_OnAChange(BSTR OnAChange/*[in]*/) = 0; // [2007]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Office_2k::MsoTriState __fastcall get_MultiLine(void)
  {
    Office_2k::MsoTriState MultiLine;
    OLECHECK(this->get_MultiLine((Office_2k::MsoTriState*)&MultiLine));
    return MultiLine;
  }

  Office_2k::MsoTriState __fastcall get_VerticalScrollBar(void)
  {
    Office_2k::MsoTriState VerticalScrollBar;
    OLECHECK(this->get_VerticalScrollBar((Office_2k::MsoTriState*)&VerticalScrollBar));
    return VerticalScrollBar;
  }

  Office_2k::MsoTriState __fastcall get_WordWrap(void)
  {
    Office_2k::MsoTriState WordWrap;
    OLECHECK(this->get_WordWrap((Office_2k::MsoTriState*)&WordWrap));
    return WordWrap;
  }

  Office_2k::MsoTriState __fastcall get_ReadOnly(void)
  {
    Office_2k::MsoTriState ReadOnly;
    OLECHECK(this->get_ReadOnly((Office_2k::MsoTriState*)&ReadOnly));
    return ReadOnly;
  }

  BSTR __fastcall get_Text(void)
  {
    BSTR Text = 0;
    OLECHECK(this->get_Text((BSTR*)&Text));
    return Text;
  }

  int __fastcall get_MaxLength(void)
  {
    int MaxLength;
    OLECHECK(this->get_MaxLength((int*)&MaxLength));
    return MaxLength;
  }

  BSTR __fastcall get_OnAChange(void)
  {
    BSTR OnAChange = 0;
    OLECHECK(this->get_OnAChange((BSTR*)&OnAChange));
    return OnAChange;
  }


  __property   Office_2k::MsoTriState MultiLine = {read = get_MultiLine, write = set_MultiLine};
  __property   Office_2k::MsoTriState VerticalScrollBar = {read = get_VerticalScrollBar, write = set_VerticalScrollBar};
  __property   Office_2k::MsoTriState WordWrap = {read = get_WordWrap, write = set_WordWrap};
  __property   Office_2k::MsoTriState ReadOnly = {read = get_ReadOnly, write = set_ReadOnly};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   int             MaxLength = {read = get_MaxLength, write = set_MaxLength};
  __property   BSTR            OnAChange = {read = get_OnAChange, write = set_OnAChange};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PPIcon
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934AE-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface PPIcon  : public Powerpoint_2k::PPControl
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_ResourceID(int* ResourceID/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE set_ResourceID(int ResourceID/*[in]*/) = 0; // [2001]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  int __fastcall get_ResourceID(void)
  {
    int ResourceID;
    OLECHECK(this->get_ResourceID((int*)&ResourceID));
    return ResourceID;
  }


  __property   int             ResourceID = {read = get_ResourceID, write = set_ResourceID};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PPBitmap
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934AF-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface PPBitmap  : public Powerpoint_2k::PPControl
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_ResourceID(int* ResourceID/*[out,retval]*/) = 0; // [2000]
  virtual HRESULT STDMETHODCALLTYPE set_ResourceID(int ResourceID/*[in]*/) = 0; // [2000]
  virtual HRESULT STDMETHODCALLTYPE get_OnClick(BSTR* OnClick/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE set_OnClick(BSTR OnClick/*[in]*/) = 0; // [2001]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  int __fastcall get_ResourceID(void)
  {
    int ResourceID;
    OLECHECK(this->get_ResourceID((int*)&ResourceID));
    return ResourceID;
  }

  BSTR __fastcall get_OnClick(void)
  {
    BSTR OnClick = 0;
    OLECHECK(this->get_OnClick((BSTR*)&OnClick));
    return OnClick;
  }


  __property   int             ResourceID = {read = get_ResourceID, write = set_ResourceID};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PPSpinner
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934B0-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface PPSpinner  : public Powerpoint_2k::PPControl
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Minimum(int* Minimum/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE set_Minimum(int Minimum/*[in]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Maximum(int* Maximum/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE set_Maximum(int Maximum/*[in]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Increment(int* Increment/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_Increment(int Increment/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_PageChange(int* PageChange/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_PageChange(int PageChange/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_CurrentValue(int* CurrentValue/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_CurrentValue(int CurrentValue/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_OnAChange(BSTR* OnAChange/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_OnAChange(BSTR OnAChange/*[in]*/) = 0; // [2006]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  int __fastcall get_Minimum(void)
  {
    int Minimum;
    OLECHECK(this->get_Minimum((int*)&Minimum));
    return Minimum;
  }

  int __fastcall get_Maximum(void)
  {
    int Maximum;
    OLECHECK(this->get_Maximum((int*)&Maximum));
    return Maximum;
  }

  int __fastcall get_Increment(void)
  {
    int Increment;
    OLECHECK(this->get_Increment((int*)&Increment));
    return Increment;
  }

  int __fastcall get_PageChange(void)
  {
    int PageChange;
    OLECHECK(this->get_PageChange((int*)&PageChange));
    return PageChange;
  }

  int __fastcall get_CurrentValue(void)
  {
    int CurrentValue;
    OLECHECK(this->get_CurrentValue((int*)&CurrentValue));
    return CurrentValue;
  }

  BSTR __fastcall get_OnAChange(void)
  {
    BSTR OnAChange = 0;
    OLECHECK(this->get_OnAChange((BSTR*)&OnAChange));
    return OnAChange;
  }


  __property   int             Minimum = {read = get_Minimum, write = set_Minimum};
  __property   int             Maximum = {read = get_Maximum, write = set_Maximum};
  __property   int             Increment = {read = get_Increment, write = set_Increment};
  __property   int             PageChange = {read = get_PageChange, write = set_PageChange};
  __property   int             CurrentValue = {read = get_CurrentValue, write = set_CurrentValue};
  __property   BSTR            OnAChange = {read = get_OnAChange, write = set_OnAChange};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PPScrollBar
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934B1-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface PPScrollBar  : public Powerpoint_2k::PPControl
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Minimum(int* Minimum/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE set_Minimum(int Minimum/*[in]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Maximum(int* Maximum/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE set_Maximum(int Maximum/*[in]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Increment(int* Increment/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_Increment(int Increment/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_PageChange(int* PageChange/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_PageChange(int PageChange/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_CurrentValue(int* CurrentValue/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_CurrentValue(int CurrentValue/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_OnScroll(BSTR* OnScroll/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_OnScroll(BSTR OnScroll/*[in]*/) = 0; // [2006]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  int __fastcall get_Minimum(void)
  {
    int Minimum;
    OLECHECK(this->get_Minimum((int*)&Minimum));
    return Minimum;
  }

  int __fastcall get_Maximum(void)
  {
    int Maximum;
    OLECHECK(this->get_Maximum((int*)&Maximum));
    return Maximum;
  }

  int __fastcall get_Increment(void)
  {
    int Increment;
    OLECHECK(this->get_Increment((int*)&Increment));
    return Increment;
  }

  int __fastcall get_PageChange(void)
  {
    int PageChange;
    OLECHECK(this->get_PageChange((int*)&PageChange));
    return PageChange;
  }

  int __fastcall get_CurrentValue(void)
  {
    int CurrentValue;
    OLECHECK(this->get_CurrentValue((int*)&CurrentValue));
    return CurrentValue;
  }

  BSTR __fastcall get_OnScroll(void)
  {
    BSTR OnScroll = 0;
    OLECHECK(this->get_OnScroll((BSTR*)&OnScroll));
    return OnScroll;
  }


  __property   int             Minimum = {read = get_Minimum, write = set_Minimum};
  __property   int             Maximum = {read = get_Maximum, write = set_Maximum};
  __property   int             Increment = {read = get_Increment, write = set_Increment};
  __property   int             PageChange = {read = get_PageChange, write = set_PageChange};
  __property   int             CurrentValue = {read = get_CurrentValue, write = set_CurrentValue};
  __property   BSTR            OnScroll = {read = get_OnScroll, write = set_OnScroll};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PPGroupBox
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934B2-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface PPGroupBox  : public Powerpoint_2k::PPControl
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PPFrame
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934B3-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface PPFrame  : public Powerpoint_2k::PPControl
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PPTabControl
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934B4-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface PPTabControl  : public Powerpoint_2k::PPControl
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PPDropDown
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934B5-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface PPDropDown  : public Powerpoint_2k::PPControl
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Strings(Powerpoint_2k::PPStringsPtr* Strings/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_FocusItem(int* FocusItem/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE set_FocusItem(int FocusItem/*[in]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_OnSelectionChange(BSTR* OnSelectionChange/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_OnSelectionChange(BSTR OnSelectionChange/*[in]*/) = 0; // [2003]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PPStringsPtr __fastcall get_Strings(void)
  {
    Powerpoint_2k::PPStringsPtr Strings;
    OLECHECK(this->get_Strings((Powerpoint_2k::PPStringsPtr*)&Strings));
    return Strings;
  }

  int __fastcall get_FocusItem(void)
  {
    int FocusItem;
    OLECHECK(this->get_FocusItem((int*)&FocusItem));
    return FocusItem;
  }

  BSTR __fastcall get_OnSelectionChange(void)
  {
    BSTR OnSelectionChange = 0;
    OLECHECK(this->get_OnSelectionChange((BSTR*)&OnSelectionChange));
    return OnSelectionChange;
  }


  __property   Powerpoint_2k::PPStringsPtr Strings = {read = get_Strings};
  __property   int             FocusItem = {read = get_FocusItem, write = set_FocusItem};
  __property   BSTR            OnSelectionChange = {read = get_OnSelectionChange, write = set_OnSelectionChange};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PPDropDownEdit
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934B6-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface PPDropDownEdit  : public Powerpoint_2k::PPControl
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Strings(Powerpoint_2k::PPStringsPtr* Strings/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_FocusItem(int* FocusItem/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE set_FocusItem(int FocusItem/*[in]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_OnSelectionChange(BSTR* OnSelectionChange/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_OnSelectionChange(BSTR OnSelectionChange/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_OnEdit(BSTR* OnEdit/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_OnEdit(BSTR OnEdit/*[in]*/) = 0; // [2004]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PPStringsPtr __fastcall get_Strings(void)
  {
    Powerpoint_2k::PPStringsPtr Strings;
    OLECHECK(this->get_Strings((Powerpoint_2k::PPStringsPtr*)&Strings));
    return Strings;
  }

  int __fastcall get_FocusItem(void)
  {
    int FocusItem;
    OLECHECK(this->get_FocusItem((int*)&FocusItem));
    return FocusItem;
  }

  BSTR __fastcall get_OnSelectionChange(void)
  {
    BSTR OnSelectionChange = 0;
    OLECHECK(this->get_OnSelectionChange((BSTR*)&OnSelectionChange));
    return OnSelectionChange;
  }

  BSTR __fastcall get_OnEdit(void)
  {
    BSTR OnEdit = 0;
    OLECHECK(this->get_OnEdit((BSTR*)&OnEdit));
    return OnEdit;
  }


  __property   Powerpoint_2k::PPStringsPtr Strings = {read = get_Strings};
  __property   int             FocusItem = {read = get_FocusItem, write = set_FocusItem};
  __property   BSTR            OnSelectionChange = {read = get_OnSelectionChange, write = set_OnSelectionChange};
  __property   BSTR            OnEdit = {read = get_OnEdit, write = set_OnEdit};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PPSlideMiniature
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934B7-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface PPSlideMiniature  : public Powerpoint_2k::PPControl
{
public:
  virtual HRESULT STDMETHODCALLTYPE SetImage(Powerpoint_2k::PowerPointSlidePtr Slide/*[in]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Selected(int* Selected/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE set_Selected(int Selected/*[in]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_OnClick(BSTR* OnClick/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_OnClick(BSTR OnClick/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_OnDoubleClick(BSTR* OnDoubleClick/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_OnDoubleClick(BSTR OnDoubleClick/*[in]*/) = 0; // [2004]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  int __fastcall get_Selected(void)
  {
    int Selected;
    OLECHECK(this->get_Selected((int*)&Selected));
    return Selected;
  }

  BSTR __fastcall get_OnClick(void)
  {
    BSTR OnClick = 0;
    OLECHECK(this->get_OnClick((BSTR*)&OnClick));
    return OnClick;
  }

  BSTR __fastcall get_OnDoubleClick(void)
  {
    BSTR OnDoubleClick = 0;
    OLECHECK(this->get_OnDoubleClick((BSTR*)&OnDoubleClick));
    return OnDoubleClick;
  }


  __property   int             Selected = {read = get_Selected, write = set_Selected};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDoubleClick = {read = get_OnDoubleClick, write = set_OnDoubleClick};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PPRadioButton
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934B8-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface PPRadioButton  : public Powerpoint_2k::PPControl
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_State(Office_2k::MsoTriState* State/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE set_State(Office_2k::MsoTriState State/*[in]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE _Click(void) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE DoubleClick(void) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_OnClick(BSTR* OnClick/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_OnClick(BSTR OnClick/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_OnDoubleClick(BSTR* OnDoubleClick/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_OnDoubleClick(BSTR OnDoubleClick/*[in]*/) = 0; // [2005]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Office_2k::MsoTriState __fastcall get_State(void)
  {
    Office_2k::MsoTriState State;
    OLECHECK(this->get_State((Office_2k::MsoTriState*)&State));
    return State;
  }

  BSTR __fastcall get_OnClick(void)
  {
    BSTR OnClick = 0;
    OLECHECK(this->get_OnClick((BSTR*)&OnClick));
    return OnClick;
  }

  BSTR __fastcall get_OnDoubleClick(void)
  {
    BSTR OnDoubleClick = 0;
    OLECHECK(this->get_OnDoubleClick((BSTR*)&OnDoubleClick));
    return OnDoubleClick;
  }


  __property   Office_2k::MsoTriState State = {read = get_State, write = set_State};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDoubleClick = {read = get_OnDoubleClick, write = set_OnDoubleClick};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Tags
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934B9-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Tags  : public Powerpoint_2k::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(BSTR Name/*[in]*/, BSTR* Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Add(BSTR Name/*[in]*/, BSTR Value/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE Delete(BSTR Name/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE AddBinary(BSTR Name/*[in]*/, BSTR FilePath/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE BinaryValue(BSTR Name/*[in]*/, long* BinaryValue/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE Name(int index/*[in]*/, BSTR* Name/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE Value(int index/*[in]*/, BSTR* Value/*[out,retval]*/) = 0; // [2008]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  BSTR __fastcall Item(BSTR Name/*[in]*/)
  {
    BSTR Item = 0;
    OLECHECK(this->Item(Name, (BSTR*)&Item));
    return Item;
  }

  long __fastcall BinaryValue(BSTR Name/*[in]*/)
  {
    long BinaryValue;
    OLECHECK(this->BinaryValue(Name, (long*)&BinaryValue));
    return BinaryValue;
  }

  BSTR __fastcall Name(int index/*[in]*/)
  {
    BSTR Name = 0;
    OLECHECK(this->Name(index, (BSTR*)&Name));
    return Name;
  }

  BSTR __fastcall Value(int index/*[in]*/)
  {
    BSTR Value = 0;
    OLECHECK(this->Value(index, (BSTR*)&Value));
    return Value;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: FileDialogFileList
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934BA-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface FileDialogFileList  : public Powerpoint_2k::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(int index/*[in]*/, BSTR* Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE DisplayName(int index/*[in]*/, BSTR* DisplayName/*[out,retval]*/) = 0; // [2003]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  BSTR __fastcall Item(int index/*[in]*/)
  {
    BSTR Item = 0;
    OLECHECK(this->Item(index, (BSTR*)&Item));
    return Item;
  }

  BSTR __fastcall DisplayName(int index/*[in]*/)
  {
    BSTR DisplayName = 0;
    OLECHECK(this->DisplayName(index, (BSTR*)&DisplayName));
    return DisplayName;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: FileDialogExtension
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934BB-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface FileDialogExtension  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Extensions(BSTR* Extensions/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_Extensions(BSTR Extensions/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_Description(BSTR* Description/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_Description(BSTR Description/*[in]*/) = 0; // [2004]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  BSTR __fastcall get_Extensions(void)
  {
    BSTR Extensions = 0;
    OLECHECK(this->get_Extensions((BSTR*)&Extensions));
    return Extensions;
  }

  BSTR __fastcall get_Description(void)
  {
    BSTR Description = 0;
    OLECHECK(this->get_Description((BSTR*)&Description));
    return Description;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Extensions = {read = get_Extensions, write = set_Extensions};
  __property   BSTR            Description = {read = get_Description, write = set_Description};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: FileDialogExtensionList
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934BC-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface FileDialogExtensionList  : public Powerpoint_2k::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(int index/*[in]*/, 
                                         Powerpoint_2k::FileDialogExtensionPtr* Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Add(BSTR Extension/*[in]*/, BSTR Description/*[in]*/, 
                                        Powerpoint_2k::FileDialogExtensionPtr* Add/*[out,retval]*/) = 0; // [2003]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::FileDialogExtensionPtr __fastcall Item(int index/*[in]*/)
  {
    Powerpoint_2k::FileDialogExtensionPtr Item;
    OLECHECK(this->Item(index, (Powerpoint_2k::FileDialogExtensionPtr*)&Item));
    return Item;
  }

  Powerpoint_2k::FileDialogExtensionPtr __fastcall Add(BSTR Extension/*[in]*/, 
                                                       BSTR Description/*[in]*/)
  {
    Powerpoint_2k::FileDialogExtensionPtr Add;
    OLECHECK(this->Add(Extension, Description, (Powerpoint_2k::FileDialogExtensionPtr*)&Add));
    return Add;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: FileDialog
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934BD-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface FileDialog  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Extensions(Powerpoint_2k::FileDialogExtensionListPtr* Extensions/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_DefaultDirectoryRegKey(BSTR* DefaultDirectoryRegKey/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_DefaultDirectoryRegKey(BSTR DefaultDirectoryRegKey/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_DialogTitle(BSTR* DialogTitle/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_DialogTitle(BSTR DialogTitle/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_ActionButtonName(BSTR* ActionButtonName/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_ActionButtonName(BSTR ActionButtonName/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_IsMultiSelect(Office_2k::MsoTriState* IsMultiSelect/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE set_IsMultiSelect(Office_2k::MsoTriState IsMultiSelect/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_IsPrintEnabled(Office_2k::MsoTriState* IsPrintEnabled/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE set_IsPrintEnabled(Office_2k::MsoTriState IsPrintEnabled/*[in]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_IsReadOnlyEnabled(Office_2k::MsoTriState* IsReadOnlyEnabled/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE set_IsReadOnlyEnabled(Office_2k::MsoTriState IsReadOnlyEnabled/*[in]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_DirectoriesOnly(Office_2k::MsoTriState* DirectoriesOnly/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE set_DirectoriesOnly(Office_2k::MsoTriState DirectoriesOnly/*[in]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE get_InitialView(Powerpoint_2k::PpFileDialogView* InitialView/*[out,retval]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE set_InitialView(Powerpoint_2k::PpFileDialogView InitialView/*[in]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE Launch(LPUNKNOWN pUnk/*[in,def,opt]*/) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE get_OnAction(BSTR* OnAction/*[out,retval]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE set_OnAction(BSTR OnAction/*[in]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE get_Files(Powerpoint_2k::FileDialogFileListPtr* Files/*[out,retval]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE get_UseODMADlgs(Office_2k::MsoTriState* UseODMADlgs/*[out,retval]*/) = 0; // [2015]
  virtual HRESULT STDMETHODCALLTYPE set_UseODMADlgs(Office_2k::MsoTriState UseODMADlgs/*[in]*/) = 0; // [2015]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::FileDialogExtensionListPtr __fastcall get_Extensions(void)
  {
    Powerpoint_2k::FileDialogExtensionListPtr Extensions;
    OLECHECK(this->get_Extensions((Powerpoint_2k::FileDialogExtensionListPtr*)&Extensions));
    return Extensions;
  }

  BSTR __fastcall get_DefaultDirectoryRegKey(void)
  {
    BSTR DefaultDirectoryRegKey = 0;
    OLECHECK(this->get_DefaultDirectoryRegKey((BSTR*)&DefaultDirectoryRegKey));
    return DefaultDirectoryRegKey;
  }

  BSTR __fastcall get_DialogTitle(void)
  {
    BSTR DialogTitle = 0;
    OLECHECK(this->get_DialogTitle((BSTR*)&DialogTitle));
    return DialogTitle;
  }

  BSTR __fastcall get_ActionButtonName(void)
  {
    BSTR ActionButtonName = 0;
    OLECHECK(this->get_ActionButtonName((BSTR*)&ActionButtonName));
    return ActionButtonName;
  }

  Office_2k::MsoTriState __fastcall get_IsMultiSelect(void)
  {
    Office_2k::MsoTriState IsMultiSelect;
    OLECHECK(this->get_IsMultiSelect((Office_2k::MsoTriState*)&IsMultiSelect));
    return IsMultiSelect;
  }

  Office_2k::MsoTriState __fastcall get_IsPrintEnabled(void)
  {
    Office_2k::MsoTriState IsPrintEnabled;
    OLECHECK(this->get_IsPrintEnabled((Office_2k::MsoTriState*)&IsPrintEnabled));
    return IsPrintEnabled;
  }

  Office_2k::MsoTriState __fastcall get_IsReadOnlyEnabled(void)
  {
    Office_2k::MsoTriState IsReadOnlyEnabled;
    OLECHECK(this->get_IsReadOnlyEnabled((Office_2k::MsoTriState*)&IsReadOnlyEnabled));
    return IsReadOnlyEnabled;
  }

  Office_2k::MsoTriState __fastcall get_DirectoriesOnly(void)
  {
    Office_2k::MsoTriState DirectoriesOnly;
    OLECHECK(this->get_DirectoriesOnly((Office_2k::MsoTriState*)&DirectoriesOnly));
    return DirectoriesOnly;
  }

  Powerpoint_2k::PpFileDialogView __fastcall get_InitialView(void)
  {
    Powerpoint_2k::PpFileDialogView InitialView;
    OLECHECK(this->get_InitialView((Powerpoint_2k::PpFileDialogView*)&InitialView));
    return InitialView;
  }

  BSTR __fastcall get_OnAction(void)
  {
    BSTR OnAction = 0;
    OLECHECK(this->get_OnAction((BSTR*)&OnAction));
    return OnAction;
  }

  Powerpoint_2k::FileDialogFileListPtr __fastcall get_Files(void)
  {
    Powerpoint_2k::FileDialogFileListPtr Files;
    OLECHECK(this->get_Files((Powerpoint_2k::FileDialogFileListPtr*)&Files));
    return Files;
  }

  Office_2k::MsoTriState __fastcall get_UseODMADlgs(void)
  {
    Office_2k::MsoTriState UseODMADlgs;
    OLECHECK(this->get_UseODMADlgs((Office_2k::MsoTriState*)&UseODMADlgs));
    return UseODMADlgs;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::FileDialogExtensionListPtr Extensions = {read = get_Extensions};
  __property   BSTR            DefaultDirectoryRegKey = {read = get_DefaultDirectoryRegKey, write = set_DefaultDirectoryRegKey};
  __property   BSTR            DialogTitle = {read = get_DialogTitle, write = set_DialogTitle};
  __property   BSTR            ActionButtonName = {read = get_ActionButtonName, write = set_ActionButtonName};
  __property   Office_2k::MsoTriState IsMultiSelect = {read = get_IsMultiSelect, write = set_IsMultiSelect};
  __property   Office_2k::MsoTriState IsPrintEnabled = {read = get_IsPrintEnabled, write = set_IsPrintEnabled};
  __property   Office_2k::MsoTriState IsReadOnlyEnabled = {read = get_IsReadOnlyEnabled, write = set_IsReadOnlyEnabled};
  __property   Office_2k::MsoTriState DirectoriesOnly = {read = get_DirectoriesOnly, write = set_DirectoriesOnly};
  __property   Powerpoint_2k::PpFileDialogView InitialView = {read = get_InitialView, write = set_InitialView};
  __property   BSTR            OnAction = {read = get_OnAction, write = set_OnAction};
  __property   Powerpoint_2k::FileDialogFileListPtr Files = {read = get_Files};
  __property   Office_2k::MsoTriState UseODMADlgs = {read = get_UseODMADlgs, write = set_UseODMADlgs};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: MouseTracker
// Flags:     (16) Hidden
// GUID:      {914934BE-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface MouseTracker  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE OnTrack(float X/*[in]*/, float Y/*[in]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE EndTrack(float X/*[in]*/, float Y/*[in]*/) = 0; // [2002]
};

// *********************************************************************//
// Interface: MouseDownHandler
// Flags:     (16) Hidden
// GUID:      {914934BF-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface MouseDownHandler  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE OnMouseDown(LPUNKNOWN activeWin/*[in]*/) = 0; // [2001]
};

// *********************************************************************//
// Interface: OCXExtender
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934C0-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface OCXExtender  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Visible(TOLEBOOL* Visible/*[out,retval]*/) = 0; // [-2147418105]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(TOLEBOOL Visible/*[in]*/) = 0; // [-2147418105]
  virtual HRESULT STDMETHODCALLTYPE get_Left(float* Left/*[out,retval]*/) = 0; // [-2147418109]
  virtual HRESULT STDMETHODCALLTYPE set_Left(float Left/*[in]*/) = 0; // [-2147418109]
  virtual HRESULT STDMETHODCALLTYPE get_Top(float* Top/*[out,retval]*/) = 0; // [-2147418108]
  virtual HRESULT STDMETHODCALLTYPE set_Top(float Top/*[in]*/) = 0; // [-2147418108]
  virtual HRESULT STDMETHODCALLTYPE get_Height(float* Height/*[out,retval]*/) = 0; // [-2147418107]
  virtual HRESULT STDMETHODCALLTYPE set_Height(float Height/*[in]*/) = 0; // [-2147418107]
  virtual HRESULT STDMETHODCALLTYPE get_Width(float* Width/*[out,retval]*/) = 0; // [-2147418106]
  virtual HRESULT STDMETHODCALLTYPE set_Width(float Width/*[in]*/) = 0; // [-2147418106]
  virtual HRESULT STDMETHODCALLTYPE get_ZOrderPosition(int* ZOrderPosition/*[out,retval]*/) = 0; // [-2147417882]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [-2147418112]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR Name/*[in]*/) = 0; // [-2147418112]
  virtual HRESULT STDMETHODCALLTYPE get_AltHTML(BSTR* AltHTML/*[out,retval]*/) = 0; // [-2147417881]
  virtual HRESULT STDMETHODCALLTYPE set_AltHTML(BSTR AltHTML/*[in]*/) = 0; // [-2147417881]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  TOLEBOOL __fastcall get_Visible(void)
  {
    TOLEBOOL Visible;
    OLECHECK(this->get_Visible((TOLEBOOL*)&Visible));
    return Visible;
  }

  float __fastcall get_Left(void)
  {
    float Left;
    OLECHECK(this->get_Left((float*)&Left));
    return Left;
  }

  float __fastcall get_Top(void)
  {
    float Top;
    OLECHECK(this->get_Top((float*)&Top));
    return Top;
  }

  float __fastcall get_Height(void)
  {
    float Height;
    OLECHECK(this->get_Height((float*)&Height));
    return Height;
  }

  float __fastcall get_Width(void)
  {
    float Width;
    OLECHECK(this->get_Width((float*)&Width));
    return Width;
  }

  int __fastcall get_ZOrderPosition(void)
  {
    int ZOrderPosition;
    OLECHECK(this->get_ZOrderPosition((int*)&ZOrderPosition));
    return ZOrderPosition;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  BSTR __fastcall get_AltHTML(void)
  {
    BSTR AltHTML = 0;
    OLECHECK(this->get_AltHTML((BSTR*)&AltHTML));
    return AltHTML;
  }


  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   int             ZOrderPosition = {read = get_ZOrderPosition};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            AltHTML = {read = get_AltHTML, write = set_AltHTML};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: OCXExtenderEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {914934C1-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface OCXExtenderEvents  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE GotFocus(void); // [-2147417888]
   HRESULT STDMETHODCALLTYPE LostFocus(void); // [-2147417887]
};

// *********************************************************************//
// Interface: Table
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934C3-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Table  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Columns(Powerpoint_2k::ColumnsPtr* Columns/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_Rows(Powerpoint_2k::RowsPtr* Rows/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE Cell(int Row/*[in]*/, int Column/*[in]*/, 
                                         Powerpoint_2k::CellPtr* Cell/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_TableDirection(Powerpoint_2k::PpDirection* TableDirection/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_TableDirection(Powerpoint_2k::PpDirection TableDirection/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE MergeBorders(void) = 0; // [2007]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::ColumnsPtr __fastcall get_Columns(void)
  {
    Powerpoint_2k::ColumnsPtr Columns;
    OLECHECK(this->get_Columns((Powerpoint_2k::ColumnsPtr*)&Columns));
    return Columns;
  }

  Powerpoint_2k::RowsPtr __fastcall get_Rows(void)
  {
    Powerpoint_2k::RowsPtr Rows;
    OLECHECK(this->get_Rows((Powerpoint_2k::RowsPtr*)&Rows));
    return Rows;
  }

  Powerpoint_2k::CellPtr __fastcall Cell(int Row/*[in]*/, int Column/*[in]*/)
  {
    Powerpoint_2k::CellPtr Cell;
    OLECHECK(this->Cell(Row, Column, (Powerpoint_2k::CellPtr*)&Cell));
    return Cell;
  }

  Powerpoint_2k::PpDirection __fastcall get_TableDirection(void)
  {
    Powerpoint_2k::PpDirection TableDirection;
    OLECHECK(this->get_TableDirection((Powerpoint_2k::PpDirection*)&TableDirection));
    return TableDirection;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::ColumnsPtr Columns = {read = get_Columns};
  __property   Powerpoint_2k::RowsPtr Rows = {read = get_Rows};
  __property   Powerpoint_2k::PpDirection TableDirection = {read = get_TableDirection, write = set_TableDirection};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Columns
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934C4-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Columns  : public Powerpoint_2k::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(int index/*[in]*/, 
                                         Powerpoint_2k::ColumnPtr* Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Add(int BeforeColumn/*[in,def,opt]*/, 
                                        Powerpoint_2k::ColumnPtr* Add/*[out,retval]*/) = 0; // [2003]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::ColumnPtr __fastcall Item(int index/*[in]*/)
  {
    Powerpoint_2k::ColumnPtr Item;
    OLECHECK(this->Item(index, (Powerpoint_2k::ColumnPtr*)&Item));
    return Item;
  }

  Powerpoint_2k::ColumnPtr __fastcall Add(int BeforeColumn/*[in,def,opt]*/)
  {
    Powerpoint_2k::ColumnPtr Add;
    OLECHECK(this->Add(BeforeColumn, (Powerpoint_2k::ColumnPtr*)&Add));
    return Add;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Column
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934C5-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Column  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Cells(Powerpoint_2k::CellRangePtr* Cells/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE Select(void) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Width(float* Width/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_Width(float Width/*[in]*/) = 0; // [2006]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::CellRangePtr __fastcall get_Cells(void)
  {
    Powerpoint_2k::CellRangePtr Cells;
    OLECHECK(this->get_Cells((Powerpoint_2k::CellRangePtr*)&Cells));
    return Cells;
  }

  float __fastcall get_Width(void)
  {
    float Width;
    OLECHECK(this->get_Width((float*)&Width));
    return Width;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::CellRangePtr Cells = {read = get_Cells};
  __property   float           Width = {read = get_Width, write = set_Width};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Rows
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934C6-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Rows  : public Powerpoint_2k::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(int index/*[in]*/, 
                                         Powerpoint_2k::RowPtr* Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Add(int BeforeRow/*[in,def,opt]*/, 
                                        Powerpoint_2k::RowPtr* Add/*[out,retval]*/) = 0; // [2003]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::RowPtr __fastcall Item(int index/*[in]*/)
  {
    Powerpoint_2k::RowPtr Item;
    OLECHECK(this->Item(index, (Powerpoint_2k::RowPtr*)&Item));
    return Item;
  }

  Powerpoint_2k::RowPtr __fastcall Add(int BeforeRow/*[in,def,opt]*/)
  {
    Powerpoint_2k::RowPtr Add;
    OLECHECK(this->Add(BeforeRow, (Powerpoint_2k::RowPtr*)&Add));
    return Add;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Row
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934C7-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Row  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Cells(Powerpoint_2k::CellRangePtr* Cells/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE Select(void) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Height(float* Height/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_Height(float Height/*[in]*/) = 0; // [2006]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::CellRangePtr __fastcall get_Cells(void)
  {
    Powerpoint_2k::CellRangePtr Cells;
    OLECHECK(this->get_Cells((Powerpoint_2k::CellRangePtr*)&Cells));
    return Cells;
  }

  float __fastcall get_Height(void)
  {
    float Height;
    OLECHECK(this->get_Height((float*)&Height));
    return Height;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::CellRangePtr Cells = {read = get_Cells};
  __property   float           Height = {read = get_Height, write = set_Height};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: CellRange
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934C8-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface CellRange  : public Powerpoint_2k::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(int index/*[in]*/, 
                                         Powerpoint_2k::CellPtr* Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Borders(Powerpoint_2k::BordersPtr* Borders/*[out,retval]*/) = 0; // [2003]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::CellPtr __fastcall Item(int index/*[in]*/)
  {
    Powerpoint_2k::CellPtr Item;
    OLECHECK(this->Item(index, (Powerpoint_2k::CellPtr*)&Item));
    return Item;
  }

  Powerpoint_2k::BordersPtr __fastcall get_Borders(void)
  {
    Powerpoint_2k::BordersPtr Borders;
    OLECHECK(this->get_Borders((Powerpoint_2k::BordersPtr*)&Borders));
    return Borders;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::BordersPtr Borders = {read = get_Borders};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Cell
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934C9-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Cell  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Shape(Powerpoint_2k::ShapePtr* Shape/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_Borders(Powerpoint_2k::BordersPtr* Borders/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE Merge(Powerpoint_2k::CellPtr MergeTo/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE Split(int NumRows/*[in]*/, int NumColumns/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE Select(void) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_Selected(TOLEBOOL* Selected/*[out,retval]*/) = 0; // [2008]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::ShapePtr __fastcall get_Shape(void)
  {
    Powerpoint_2k::ShapePtr Shape;
    OLECHECK(this->get_Shape((Powerpoint_2k::ShapePtr*)&Shape));
    return Shape;
  }

  Powerpoint_2k::BordersPtr __fastcall get_Borders(void)
  {
    Powerpoint_2k::BordersPtr Borders;
    OLECHECK(this->get_Borders((Powerpoint_2k::BordersPtr*)&Borders));
    return Borders;
  }

  TOLEBOOL __fastcall get_Selected(void)
  {
    TOLEBOOL Selected;
    OLECHECK(this->get_Selected((TOLEBOOL*)&Selected));
    return Selected;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::ShapePtr Shape = {read = get_Shape};
  __property   Powerpoint_2k::BordersPtr Borders = {read = get_Borders};
  __property   TOLEBOOL        Selected = {read = get_Selected};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Borders
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934CA-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Borders  : public Powerpoint_2k::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(Powerpoint_2k::PpBorderType BorderType/*[in]*/, 
                                         Powerpoint_2k::LineFormatPtr* Item/*[out,retval]*/) = 0; // [0]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::LineFormatPtr __fastcall Item(Powerpoint_2k::PpBorderType BorderType/*[in]*/)
  {
    Powerpoint_2k::LineFormatPtr Item;
    OLECHECK(this->Item(BorderType, (Powerpoint_2k::LineFormatPtr*)&Item));
    return Item;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Panes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934CB-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Panes  : public Powerpoint_2k::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE Item(int index/*[in]*/, 
                                         Powerpoint_2k::PanePtr* Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  Powerpoint_2k::PanePtr __fastcall Item(int index/*[in]*/)
  {
    Powerpoint_2k::PanePtr Item;
    OLECHECK(this->Item(index, (Powerpoint_2k::PanePtr*)&Item));
    return Item;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Pane
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934CC-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Pane  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2000]
  virtual HRESULT STDMETHODCALLTYPE Activate(void) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Active(Office_2k::MsoTriState* Active/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_ViewType(Powerpoint_2k::PpViewType* ViewType/*[out,retval]*/) = 0; // [2004]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Office_2k::MsoTriState __fastcall get_Active(void)
  {
    Office_2k::MsoTriState Active;
    OLECHECK(this->get_Active((Office_2k::MsoTriState*)&Active));
    return Active;
  }

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  Powerpoint_2k::PpViewType __fastcall get_ViewType(void)
  {
    Powerpoint_2k::PpViewType ViewType;
    OLECHECK(this->get_ViewType((Powerpoint_2k::PpViewType*)&ViewType));
    return ViewType;
  }


  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoTriState Active = {read = get_Active};
  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   Powerpoint_2k::PpViewType ViewType = {read = get_ViewType};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: DefaultWebOptions
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934CD-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface DefaultWebOptions  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_IncludeNavigation(Office_2k::MsoTriState* IncludeNavigation/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE set_IncludeNavigation(Office_2k::MsoTriState IncludeNavigation/*[in]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_FrameColors(Powerpoint_2k::PpFrameColors* FrameColors/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE set_FrameColors(Powerpoint_2k::PpFrameColors FrameColors/*[in]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_ResizeGraphics(Office_2k::MsoTriState* ResizeGraphics/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_ResizeGraphics(Office_2k::MsoTriState ResizeGraphics/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_ShowSlideAnimation(Office_2k::MsoTriState* ShowSlideAnimation/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_ShowSlideAnimation(Office_2k::MsoTriState ShowSlideAnimation/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_OrganizeInFolder(Office_2k::MsoTriState* OrganizeInFolder/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_OrganizeInFolder(Office_2k::MsoTriState OrganizeInFolder/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_UseLongFileNames(Office_2k::MsoTriState* UseLongFileNames/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_UseLongFileNames(Office_2k::MsoTriState UseLongFileNames/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_RelyOnVML(Office_2k::MsoTriState* RelyOnVML/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE set_RelyOnVML(Office_2k::MsoTriState RelyOnVML/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_AllowPNG(Office_2k::MsoTriState* AllowPNG/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE set_AllowPNG(Office_2k::MsoTriState AllowPNG/*[in]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_ScreenSize(Office_2k::MsoScreenSize* ScreenSize/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE set_ScreenSize(Office_2k::MsoScreenSize ScreenSize/*[in]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_Encoding(Office_2k::MsoEncoding* Encoding/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE set_Encoding(Office_2k::MsoEncoding Encoding/*[in]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE get_UpdateLinksOnSave(Office_2k::MsoTriState* UpdateLinksOnSave/*[out,retval]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE set_UpdateLinksOnSave(Office_2k::MsoTriState UpdateLinksOnSave/*[in]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE get_CheckIfOfficeIsHTMLEditor(Office_2k::MsoTriState* CheckIfOfficeIsHTMLEditor/*[out,retval]*/) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE set_CheckIfOfficeIsHTMLEditor(Office_2k::MsoTriState CheckIfOfficeIsHTMLEditor/*[in]*/) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE get_AlwaysSaveInDefaultEncoding(Office_2k::MsoTriState* AlwaysSaveInDefaultEncoding/*[out,retval]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE set_AlwaysSaveInDefaultEncoding(Office_2k::MsoTriState AlwaysSaveInDefaultEncoding/*[in]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE get_Fonts(Office_2k::WebPageFontsPtr* Fonts/*[out,retval]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE get_FolderSuffix(BSTR* FolderSuffix/*[out,retval]*/) = 0; // [2015]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Office_2k::MsoTriState __fastcall get_IncludeNavigation(void)
  {
    Office_2k::MsoTriState IncludeNavigation;
    OLECHECK(this->get_IncludeNavigation((Office_2k::MsoTriState*)&IncludeNavigation));
    return IncludeNavigation;
  }

  Powerpoint_2k::PpFrameColors __fastcall get_FrameColors(void)
  {
    Powerpoint_2k::PpFrameColors FrameColors;
    OLECHECK(this->get_FrameColors((Powerpoint_2k::PpFrameColors*)&FrameColors));
    return FrameColors;
  }

  Office_2k::MsoTriState __fastcall get_ResizeGraphics(void)
  {
    Office_2k::MsoTriState ResizeGraphics;
    OLECHECK(this->get_ResizeGraphics((Office_2k::MsoTriState*)&ResizeGraphics));
    return ResizeGraphics;
  }

  Office_2k::MsoTriState __fastcall get_ShowSlideAnimation(void)
  {
    Office_2k::MsoTriState ShowSlideAnimation;
    OLECHECK(this->get_ShowSlideAnimation((Office_2k::MsoTriState*)&ShowSlideAnimation));
    return ShowSlideAnimation;
  }

  Office_2k::MsoTriState __fastcall get_OrganizeInFolder(void)
  {
    Office_2k::MsoTriState OrganizeInFolder;
    OLECHECK(this->get_OrganizeInFolder((Office_2k::MsoTriState*)&OrganizeInFolder));
    return OrganizeInFolder;
  }

  Office_2k::MsoTriState __fastcall get_UseLongFileNames(void)
  {
    Office_2k::MsoTriState UseLongFileNames;
    OLECHECK(this->get_UseLongFileNames((Office_2k::MsoTriState*)&UseLongFileNames));
    return UseLongFileNames;
  }

  Office_2k::MsoTriState __fastcall get_RelyOnVML(void)
  {
    Office_2k::MsoTriState RelyOnVML;
    OLECHECK(this->get_RelyOnVML((Office_2k::MsoTriState*)&RelyOnVML));
    return RelyOnVML;
  }

  Office_2k::MsoTriState __fastcall get_AllowPNG(void)
  {
    Office_2k::MsoTriState AllowPNG;
    OLECHECK(this->get_AllowPNG((Office_2k::MsoTriState*)&AllowPNG));
    return AllowPNG;
  }

  Office_2k::MsoScreenSize __fastcall get_ScreenSize(void)
  {
    Office_2k::MsoScreenSize ScreenSize;
    OLECHECK(this->get_ScreenSize((Office_2k::MsoScreenSize*)&ScreenSize));
    return ScreenSize;
  }

  Office_2k::MsoEncoding __fastcall get_Encoding(void)
  {
    Office_2k::MsoEncoding Encoding;
    OLECHECK(this->get_Encoding((Office_2k::MsoEncoding*)&Encoding));
    return Encoding;
  }

  Office_2k::MsoTriState __fastcall get_UpdateLinksOnSave(void)
  {
    Office_2k::MsoTriState UpdateLinksOnSave;
    OLECHECK(this->get_UpdateLinksOnSave((Office_2k::MsoTriState*)&UpdateLinksOnSave));
    return UpdateLinksOnSave;
  }

  Office_2k::MsoTriState __fastcall get_CheckIfOfficeIsHTMLEditor(void)
  {
    Office_2k::MsoTriState CheckIfOfficeIsHTMLEditor;
    OLECHECK(this->get_CheckIfOfficeIsHTMLEditor((Office_2k::MsoTriState*)&CheckIfOfficeIsHTMLEditor));
    return CheckIfOfficeIsHTMLEditor;
  }

  Office_2k::MsoTriState __fastcall get_AlwaysSaveInDefaultEncoding(void)
  {
    Office_2k::MsoTriState AlwaysSaveInDefaultEncoding;
    OLECHECK(this->get_AlwaysSaveInDefaultEncoding((Office_2k::MsoTriState*)&AlwaysSaveInDefaultEncoding));
    return AlwaysSaveInDefaultEncoding;
  }

  Office_2k::WebPageFontsPtr __fastcall get_Fonts(void)
  {
    Office_2k::WebPageFontsPtr Fonts;
    OLECHECK(this->get_Fonts((Office_2k::WebPageFontsPtr*)&Fonts));
    return Fonts;
  }

  BSTR __fastcall get_FolderSuffix(void)
  {
    BSTR FolderSuffix = 0;
    OLECHECK(this->get_FolderSuffix((BSTR*)&FolderSuffix));
    return FolderSuffix;
  }


  __property   Office_2k::MsoTriState IncludeNavigation = {read = get_IncludeNavigation, write = set_IncludeNavigation};
  __property   Powerpoint_2k::PpFrameColors FrameColors = {read = get_FrameColors, write = set_FrameColors};
  __property   Office_2k::MsoTriState ResizeGraphics = {read = get_ResizeGraphics, write = set_ResizeGraphics};
  __property   Office_2k::MsoTriState ShowSlideAnimation = {read = get_ShowSlideAnimation, write = set_ShowSlideAnimation};
  __property   Office_2k::MsoTriState OrganizeInFolder = {read = get_OrganizeInFolder, write = set_OrganizeInFolder};
  __property   Office_2k::MsoTriState UseLongFileNames = {read = get_UseLongFileNames, write = set_UseLongFileNames};
  __property   Office_2k::MsoTriState RelyOnVML = {read = get_RelyOnVML, write = set_RelyOnVML};
  __property   Office_2k::MsoTriState AllowPNG = {read = get_AllowPNG, write = set_AllowPNG};
  __property   Office_2k::MsoScreenSize ScreenSize = {read = get_ScreenSize, write = set_ScreenSize};
  __property   Office_2k::MsoEncoding Encoding = {read = get_Encoding, write = set_Encoding};
  __property   Office_2k::MsoTriState UpdateLinksOnSave = {read = get_UpdateLinksOnSave, write = set_UpdateLinksOnSave};
  __property   Office_2k::MsoTriState CheckIfOfficeIsHTMLEditor = {read = get_CheckIfOfficeIsHTMLEditor, write = set_CheckIfOfficeIsHTMLEditor};
  __property   Office_2k::MsoTriState AlwaysSaveInDefaultEncoding = {read = get_AlwaysSaveInDefaultEncoding, write = set_AlwaysSaveInDefaultEncoding};
  __property   Office_2k::WebPageFontsPtr Fonts = {read = get_Fonts};
  __property   BSTR            FolderSuffix = {read = get_FolderSuffix};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: WebOptions
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934CE-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface WebOptions  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_IncludeNavigation(Office_2k::MsoTriState* IncludeNavigation/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE set_IncludeNavigation(Office_2k::MsoTriState IncludeNavigation/*[in]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_FrameColors(Powerpoint_2k::PpFrameColors* FrameColors/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE set_FrameColors(Powerpoint_2k::PpFrameColors FrameColors/*[in]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_ResizeGraphics(Office_2k::MsoTriState* ResizeGraphics/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_ResizeGraphics(Office_2k::MsoTriState ResizeGraphics/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_ShowSlideAnimation(Office_2k::MsoTriState* ShowSlideAnimation/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_ShowSlideAnimation(Office_2k::MsoTriState ShowSlideAnimation/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_OrganizeInFolder(Office_2k::MsoTriState* OrganizeInFolder/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_OrganizeInFolder(Office_2k::MsoTriState OrganizeInFolder/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_UseLongFileNames(Office_2k::MsoTriState* UseLongFileNames/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_UseLongFileNames(Office_2k::MsoTriState UseLongFileNames/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_RelyOnVML(Office_2k::MsoTriState* RelyOnVML/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE set_RelyOnVML(Office_2k::MsoTriState RelyOnVML/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_AllowPNG(Office_2k::MsoTriState* AllowPNG/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE set_AllowPNG(Office_2k::MsoTriState AllowPNG/*[in]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_ScreenSize(Office_2k::MsoScreenSize* ScreenSize/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE set_ScreenSize(Office_2k::MsoScreenSize ScreenSize/*[in]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_Encoding(Office_2k::MsoEncoding* Encoding/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE set_Encoding(Office_2k::MsoEncoding Encoding/*[in]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE get_FolderSuffix(BSTR* FolderSuffix/*[out,retval]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE UseDefaultFolderSuffix(void) = 0; // [2012]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Office_2k::MsoTriState __fastcall get_IncludeNavigation(void)
  {
    Office_2k::MsoTriState IncludeNavigation;
    OLECHECK(this->get_IncludeNavigation((Office_2k::MsoTriState*)&IncludeNavigation));
    return IncludeNavigation;
  }

  Powerpoint_2k::PpFrameColors __fastcall get_FrameColors(void)
  {
    Powerpoint_2k::PpFrameColors FrameColors;
    OLECHECK(this->get_FrameColors((Powerpoint_2k::PpFrameColors*)&FrameColors));
    return FrameColors;
  }

  Office_2k::MsoTriState __fastcall get_ResizeGraphics(void)
  {
    Office_2k::MsoTriState ResizeGraphics;
    OLECHECK(this->get_ResizeGraphics((Office_2k::MsoTriState*)&ResizeGraphics));
    return ResizeGraphics;
  }

  Office_2k::MsoTriState __fastcall get_ShowSlideAnimation(void)
  {
    Office_2k::MsoTriState ShowSlideAnimation;
    OLECHECK(this->get_ShowSlideAnimation((Office_2k::MsoTriState*)&ShowSlideAnimation));
    return ShowSlideAnimation;
  }

  Office_2k::MsoTriState __fastcall get_OrganizeInFolder(void)
  {
    Office_2k::MsoTriState OrganizeInFolder;
    OLECHECK(this->get_OrganizeInFolder((Office_2k::MsoTriState*)&OrganizeInFolder));
    return OrganizeInFolder;
  }

  Office_2k::MsoTriState __fastcall get_UseLongFileNames(void)
  {
    Office_2k::MsoTriState UseLongFileNames;
    OLECHECK(this->get_UseLongFileNames((Office_2k::MsoTriState*)&UseLongFileNames));
    return UseLongFileNames;
  }

  Office_2k::MsoTriState __fastcall get_RelyOnVML(void)
  {
    Office_2k::MsoTriState RelyOnVML;
    OLECHECK(this->get_RelyOnVML((Office_2k::MsoTriState*)&RelyOnVML));
    return RelyOnVML;
  }

  Office_2k::MsoTriState __fastcall get_AllowPNG(void)
  {
    Office_2k::MsoTriState AllowPNG;
    OLECHECK(this->get_AllowPNG((Office_2k::MsoTriState*)&AllowPNG));
    return AllowPNG;
  }

  Office_2k::MsoScreenSize __fastcall get_ScreenSize(void)
  {
    Office_2k::MsoScreenSize ScreenSize;
    OLECHECK(this->get_ScreenSize((Office_2k::MsoScreenSize*)&ScreenSize));
    return ScreenSize;
  }

  Office_2k::MsoEncoding __fastcall get_Encoding(void)
  {
    Office_2k::MsoEncoding Encoding;
    OLECHECK(this->get_Encoding((Office_2k::MsoEncoding*)&Encoding));
    return Encoding;
  }

  BSTR __fastcall get_FolderSuffix(void)
  {
    BSTR FolderSuffix = 0;
    OLECHECK(this->get_FolderSuffix((BSTR*)&FolderSuffix));
    return FolderSuffix;
  }


  __property   Office_2k::MsoTriState IncludeNavigation = {read = get_IncludeNavigation, write = set_IncludeNavigation};
  __property   Powerpoint_2k::PpFrameColors FrameColors = {read = get_FrameColors, write = set_FrameColors};
  __property   Office_2k::MsoTriState ResizeGraphics = {read = get_ResizeGraphics, write = set_ResizeGraphics};
  __property   Office_2k::MsoTriState ShowSlideAnimation = {read = get_ShowSlideAnimation, write = set_ShowSlideAnimation};
  __property   Office_2k::MsoTriState OrganizeInFolder = {read = get_OrganizeInFolder, write = set_OrganizeInFolder};
  __property   Office_2k::MsoTriState UseLongFileNames = {read = get_UseLongFileNames, write = set_UseLongFileNames};
  __property   Office_2k::MsoTriState RelyOnVML = {read = get_RelyOnVML, write = set_RelyOnVML};
  __property   Office_2k::MsoTriState AllowPNG = {read = get_AllowPNG, write = set_AllowPNG};
  __property   Office_2k::MsoScreenSize ScreenSize = {read = get_ScreenSize, write = set_ScreenSize};
  __property   Office_2k::MsoEncoding Encoding = {read = get_Encoding, write = set_Encoding};
  __property   BSTR            FolderSuffix = {read = get_FolderSuffix};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PublishObjects
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934CF-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface PublishObjects  : public Powerpoint_2k::Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE Item(int index/*[in]*/, 
                                         Powerpoint_2k::PublishObjectPtr* Item/*[out,retval]*/) = 0; // [0]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::PublishObjectPtr __fastcall Item(int index/*[in]*/)
  {
    Powerpoint_2k::PublishObjectPtr Item;
    OLECHECK(this->Item(index, (Powerpoint_2k::PublishObjectPtr*)&Item));
    return Item;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PublishObject
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934D0-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface PublishObject  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_HTMLVersion(Powerpoint_2k::PpHTMLVersion* HTMLVersion/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE set_HTMLVersion(Powerpoint_2k::PpHTMLVersion HTMLVersion/*[in]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_SourceType(Powerpoint_2k::PpPublishSourceType* SourceType/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE set_SourceType(Powerpoint_2k::PpPublishSourceType SourceType/*[in]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_RangeStart(int* RangeStart/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE set_RangeStart(int RangeStart/*[in]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_RangeEnd(int* RangeEnd/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE set_RangeEnd(int RangeEnd/*[in]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_SlideShowName(BSTR* SlideShowName/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE set_SlideShowName(BSTR SlideShowName/*[in]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_SpeakerNotes(Office_2k::MsoTriState* SpeakerNotes/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE set_SpeakerNotes(Office_2k::MsoTriState SpeakerNotes/*[in]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_FileName(BSTR* FileName/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE set_FileName(BSTR FileName/*[in]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE Publish(void) = 0; // [2010]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void)
  {
    Powerpoint_2k::PowerPointApplicationPtr Application;
    OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
    return Application;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Powerpoint_2k::PpHTMLVersion __fastcall get_HTMLVersion(void)
  {
    Powerpoint_2k::PpHTMLVersion HTMLVersion;
    OLECHECK(this->get_HTMLVersion((Powerpoint_2k::PpHTMLVersion*)&HTMLVersion));
    return HTMLVersion;
  }

  Powerpoint_2k::PpPublishSourceType __fastcall get_SourceType(void)
  {
    Powerpoint_2k::PpPublishSourceType SourceType;
    OLECHECK(this->get_SourceType((Powerpoint_2k::PpPublishSourceType*)&SourceType));
    return SourceType;
  }

  int __fastcall get_RangeStart(void)
  {
    int RangeStart;
    OLECHECK(this->get_RangeStart((int*)&RangeStart));
    return RangeStart;
  }

  int __fastcall get_RangeEnd(void)
  {
    int RangeEnd;
    OLECHECK(this->get_RangeEnd((int*)&RangeEnd));
    return RangeEnd;
  }

  BSTR __fastcall get_SlideShowName(void)
  {
    BSTR SlideShowName = 0;
    OLECHECK(this->get_SlideShowName((BSTR*)&SlideShowName));
    return SlideShowName;
  }

  Office_2k::MsoTriState __fastcall get_SpeakerNotes(void)
  {
    Office_2k::MsoTriState SpeakerNotes;
    OLECHECK(this->get_SpeakerNotes((Office_2k::MsoTriState*)&SpeakerNotes));
    return SpeakerNotes;
  }

  BSTR __fastcall get_FileName(void)
  {
    BSTR FileName = 0;
    OLECHECK(this->get_FileName((BSTR*)&FileName));
    return FileName;
  }


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::PpHTMLVersion HTMLVersion = {read = get_HTMLVersion, write = set_HTMLVersion};
  __property   Powerpoint_2k::PpPublishSourceType SourceType = {read = get_SourceType, write = set_SourceType};
  __property   int             RangeStart = {read = get_RangeStart, write = set_RangeStart};
  __property   int             RangeEnd = {read = get_RangeEnd, write = set_RangeEnd};
  __property   BSTR            SlideShowName = {read = get_SlideShowName, write = set_SlideShowName};
  __property   Office_2k::MsoTriState SpeakerNotes = {read = get_SpeakerNotes, write = set_SpeakerNotes};
  __property   BSTR            FileName = {read = get_FileName, write = set_FileName};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Marker
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934D1-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface Marker  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_MarkerType(Powerpoint_2k::PpMarkerType* MarkerType/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE set_MarkerType(Powerpoint_2k::PpMarkerType MarkerType/*[in]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE get_Time(int* Time/*[out,retval]*/) = 0; // [2002]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Powerpoint_2k::PpMarkerType __fastcall get_MarkerType(void)
  {
    Powerpoint_2k::PpMarkerType MarkerType;
    OLECHECK(this->get_MarkerType((Powerpoint_2k::PpMarkerType*)&MarkerType));
    return MarkerType;
  }

  int __fastcall get_Time(void)
  {
    int Time;
    OLECHECK(this->get_Time((int*)&Time));
    return Time;
  }


  __property   Powerpoint_2k::PpMarkerType MarkerType = {read = get_MarkerType, write = set_MarkerType};
  __property   int             Time = {read = get_Time};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: MasterEvents
// Flags:     (16) Hidden
// GUID:      {914934D2-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
interface MasterEvents  : public IUnknown
{
public:
};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
typedef TComInterface<Collection>  TCOMCollection;

// *********************************************************************//
// DispIntf:  Collection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {91493450-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class CollectionDispT : public TAutoDriver<Collection>
{
public:
  CollectionDispT(){}

  CollectionDispT(Collection *pintf)
  {
    TAutoDriver<Collection>::Bind(pintf, false);
  }

  CollectionDispT(CollectionPtr pintf)
  {
    TAutoDriver<Collection>::Bind(pintf, true);
  }

  CollectionDispT& operator=(Collection *pintf)
  {
    TAutoDriver<Collection>::Bind(pintf, false);
    return *this;
  }

  CollectionDispT& operator=(CollectionPtr pintf)
  {
    TAutoDriver<Collection>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/);
  TVariant        __fastcall _Index(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef CollectionDispT<Collection> CollectionDisp;

// *********************************************************************//
// SmartIntf: TCOM_Application
// Interface: _Application
// *********************************************************************//
template <class T /* _Application */ >
class TCOM_ApplicationT : public TComInterface<_Application>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ApplicationT() {}
  TCOM_ApplicationT(_Application *intf, bool addRef = false) : TComInterface<_Application>(intf, addRef) {}
  TCOM_ApplicationT(const TCOM_ApplicationT& src) : TComInterface<_Application>(src) {}
  TCOM_ApplicationT& operator=(const TCOM_ApplicationT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Presentations(Powerpoint_2k::PresentationsPtr* Presentations/*[out,retval]*/);
  Powerpoint_2k::PresentationsPtr __fastcall get_Presentations(void);
  HRESULT         __fastcall get_Windoz(Powerpoint_2k::DocumentWindowsPtr* Windoz/*[out,retval]*/);
  Powerpoint_2k::DocumentWindowsPtr __fastcall get_Windoz(void);
  HRESULT         __fastcall get_Dialogs(Powerpoint_2k::PPDialogsPtr* Dialogs/*[out,retval]*/);
  Powerpoint_2k::PPDialogsPtr __fastcall get_Dialogs(void);
  HRESULT         __fastcall get_ActiveWindow(Powerpoint_2k::DocumentWindowPtr* ActiveWindow/*[out,retval]*/);
  Powerpoint_2k::DocumentWindowPtr __fastcall get_ActiveWindow(void);
  HRESULT         __fastcall get_ActivePresentation(Powerpoint_2k::PowerPointPresentationPtr* ActivePresentation/*[out,retval]*/);
  Powerpoint_2k::PowerPointPresentationPtr __fastcall get_ActivePresentation(void);
  HRESULT         __fastcall get_SlideShowWindows(Powerpoint_2k::SlideShowWindowsPtr* SlideShowWindows/*[out,retval]*/);
  Powerpoint_2k::SlideShowWindowsPtr __fastcall get_SlideShowWindows(void);
  HRESULT         __fastcall get_CommandBars(Office_2k::CommandBarsPtr* CommandBars/*[out,retval]*/);
  Office_2k::CommandBarsPtr __fastcall get_CommandBars(void);
  HRESULT         __fastcall get_Path(BSTR* Path/*[out,retval]*/);
  BSTR            __fastcall get_Path(void);
  HRESULT         __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall get_Caption(BSTR* Caption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT         __fastcall set_Caption(BSTR Caption/*[in]*/);
  HRESULT         __fastcall get_Assistant(Office_2k::AssistantPtr* Assistant/*[out,retval]*/);
  Office_2k::AssistantPtr __fastcall get_Assistant(void);
  HRESULT         __fastcall get_FileSearch(Office_2k::FileSearchPtr* FileSearch/*[out,retval]*/);
  Office_2k::FileSearchPtr __fastcall get_FileSearch(void);
  HRESULT         __fastcall get_FileFind(Office_2k::IFindPtr* FileFind/*[out,retval]*/);
  Office_2k::IFindPtr __fastcall get_FileFind(void);
  HRESULT         __fastcall get_Build(BSTR* Build/*[out,retval]*/);
  BSTR            __fastcall get_Build(void);
  HRESULT         __fastcall get_Version(BSTR* Version/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT         __fastcall get_OperatingSystem(BSTR* OperatingSystem/*[out,retval]*/);
  BSTR            __fastcall get_OperatingSystem(void);
  HRESULT         __fastcall get_ActivePrinter(BSTR* ActivePrinter/*[out,retval]*/);
  BSTR            __fastcall get_ActivePrinter(void);
  HRESULT         __fastcall get_Creator(long* Creator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT         __fastcall get_AddIns(Powerpoint_2k::AddInsPtr* AddIns/*[out,retval]*/);
  Powerpoint_2k::AddInsPtr __fastcall get_AddIns(void);
  HRESULT         __fastcall get_VBE(Vbide_2k::VBEPtr* VBE/*[out,retval]*/);
  Vbide_2k::VBEPtr __fastcall get_VBE(void);
  HRESULT         __fastcall Help(BSTR HelpFile/*[in,def,opt]*/, int ContextID/*[in,def,opt]*/);
  HRESULT         __fastcall Quit(void);
  HRESULT         __fastcall Run(BSTR MacroName/*[in]*/, LPSAFEARRAY* safeArrayOfParams/*[in]*/, 
                                 TVariant* Run/*[out,retval]*/);
  TVariant        __fastcall Run(BSTR MacroName/*[in]*/, LPSAFEARRAY* safeArrayOfParams/*[in]*/);
  HRESULT         __fastcall FileDialog(Powerpoint_2k::PpFileDialogType Type/*[in]*/, 
                                        Powerpoint_2k::FileDialogPtr* FileDialog/*[out,retval]*/);
  Powerpoint_2k::FileDialogPtr __fastcall FileDialog(Powerpoint_2k::PpFileDialogType Type/*[in]*/);
  HRESULT         __fastcall LaunchSpelling(Powerpoint_2k::DocumentWindowPtr pWindow/*[in]*/);
  HRESULT         __fastcall get_Left(float* Left/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(float Left/*[in]*/);
  HRESULT         __fastcall get_Top(float* Top/*[out,retval]*/);
  float           __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(float Top/*[in]*/);
  HRESULT         __fastcall get_Width(float* Width/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(float Width/*[in]*/);
  HRESULT         __fastcall get_Height(float* Height/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(float Height/*[in]*/);
  HRESULT         __fastcall get_WindowState(Powerpoint_2k::PpWindowState* WindowState/*[out,retval]*/);
  Powerpoint_2k::PpWindowState __fastcall get_WindowState(void);
  HRESULT         __fastcall set_WindowState(Powerpoint_2k::PpWindowState WindowState/*[in]*/);
  HRESULT         __fastcall get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(Office_2k::MsoTriState Visible/*[in]*/);
  HRESULT         __fastcall get_HWND(long* HWND/*[out,retval]*/);
  long            __fastcall get_HWND(void);
  HRESULT         __fastcall get_Active(Office_2k::MsoTriState* Active/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Active(void);
  HRESULT         __fastcall Activate(void);
  HRESULT         __fastcall get_AnswerWizard(Office_2k::AnswerWizardPtr* AnswerWizard/*[out,retval]*/);
  Office_2k::AnswerWizardPtr __fastcall get_AnswerWizard(void);
  HRESULT         __fastcall get_COMAddIns(Office_2k::COMAddInsPtr* COMAddIns/*[out,retval]*/);
  Office_2k::COMAddInsPtr __fastcall get_COMAddIns(void);
  HRESULT         __fastcall get_ProductCode(BSTR* ProductCode/*[out,retval]*/);
  BSTR            __fastcall get_ProductCode(void);
  HRESULT         __fastcall get_DefaultWebOptions(Powerpoint_2k::DefaultWebOptionsPtr* DefaultWebOptions/*[out,retval]*/);
  Powerpoint_2k::DefaultWebOptionsPtr __fastcall get_DefaultWebOptions(void);
  HRESULT         __fastcall get_LanguageSettings(Office_2k::LanguageSettingsPtr* LanguageSettings/*[out,retval]*/);
  Office_2k::LanguageSettingsPtr __fastcall get_LanguageSettings(void);
  HRESULT         __fastcall get_MsoDebugOptions(Office_2k::MsoDebugOptionsPtr* MsoDebugOptions/*[out,retval]*/);
  Office_2k::MsoDebugOptionsPtr __fastcall get_MsoDebugOptions(void);
  HRESULT         __fastcall get_ShowWindowsInTaskbar(Office_2k::MsoTriState* ShowWindowsInTaskbar/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_ShowWindowsInTaskbar(void);
  HRESULT         __fastcall set_ShowWindowsInTaskbar(Office_2k::MsoTriState ShowWindowsInTaskbar/*[in]*/);
  HRESULT         __fastcall get_Marker(Powerpoint_2k::MarkerPtr* Marker/*[out,retval]*/);
  Powerpoint_2k::MarkerPtr __fastcall get_Marker(void);
  HRESULT         __fastcall get_FeatureInstall(Office_2k::MsoFeatureInstall* FeatureInstall/*[out,retval]*/);
  Office_2k::MsoFeatureInstall __fastcall get_FeatureInstall(void);
  HRESULT         __fastcall set_FeatureInstall(Office_2k::MsoFeatureInstall FeatureInstall/*[in]*/);
  HRESULT         __fastcall GetOptionFlag(long Option/*[in]*/, TOLEBOOL Persist/*[in,def,opt]*/, 
                                           TOLEBOOL* GetOptionFlag/*[out,retval]*/);
  TOLEBOOL        __fastcall GetOptionFlag(long Option/*[in]*/, TOLEBOOL Persist/*[in,def,opt]*/);
  HRESULT         __fastcall SetOptionFlag(long Option/*[in]*/, TOLEBOOL State/*[in]*/, 
                                           TOLEBOOL Persist/*[in,def,opt]*/);

  __property   Powerpoint_2k::PresentationsPtr Presentations = {read = get_Presentations};
  __property   Powerpoint_2k::DocumentWindowsPtr Windoz = {read = get_Windoz};
  __property   Powerpoint_2k::PPDialogsPtr Dialogs = {read = get_Dialogs};
  __property   Powerpoint_2k::DocumentWindowPtr ActiveWindow = {read = get_ActiveWindow};
  __property   Powerpoint_2k::PowerPointPresentationPtr ActivePresentation = {read = get_ActivePresentation};
  __property   Powerpoint_2k::SlideShowWindowsPtr SlideShowWindows = {read = get_SlideShowWindows};
  __property   Office_2k::CommandBarsPtr CommandBars = {read = get_CommandBars};
  __property   BSTR            Path = {read = get_Path};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   Office_2k::AssistantPtr Assistant = {read = get_Assistant};
  __property   Office_2k::FileSearchPtr FileSearch = {read = get_FileSearch};
  __property   Office_2k::IFindPtr FileFind = {read = get_FileFind};
  __property   BSTR            Build = {read = get_Build};
  __property   BSTR            Version = {read = get_Version};
  __property   BSTR            OperatingSystem = {read = get_OperatingSystem};
  __property   BSTR            ActivePrinter = {read = get_ActivePrinter};
  __property   long            Creator = {read = get_Creator};
  __property   Powerpoint_2k::AddInsPtr AddIns = {read = get_AddIns};
  __property   Vbide_2k::VBEPtr VBE = {read = get_VBE};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   Powerpoint_2k::PpWindowState WindowState = {read = get_WindowState, write = set_WindowState};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   long            HWND = {read = get_HWND};
  __property   Office_2k::MsoTriState Active = {read = get_Active};
  __property   Office_2k::AnswerWizardPtr AnswerWizard = {read = get_AnswerWizard};
  __property   Office_2k::COMAddInsPtr COMAddIns = {read = get_COMAddIns};
  __property   BSTR            ProductCode = {read = get_ProductCode};
  __property   Powerpoint_2k::DefaultWebOptionsPtr DefaultWebOptions = {read = get_DefaultWebOptions};
  __property   Office_2k::LanguageSettingsPtr LanguageSettings = {read = get_LanguageSettings};
  __property   Office_2k::MsoDebugOptionsPtr MsoDebugOptions = {read = get_MsoDebugOptions};
  __property   Office_2k::MsoTriState ShowWindowsInTaskbar = {read = get_ShowWindowsInTaskbar, write = set_ShowWindowsInTaskbar};
  __property   Powerpoint_2k::MarkerPtr Marker = {read = get_Marker};
  __property   Office_2k::MsoFeatureInstall FeatureInstall = {read = get_FeatureInstall, write = set_FeatureInstall};
};
typedef TCOM_ApplicationT<_Application> TCOM_Application;

// *********************************************************************//
// DispIntf:  _Application
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493442-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class _ApplicationDispT : public TAutoDriver<_Application>
{
public:
  _ApplicationDispT(){}

  _ApplicationDispT(_Application *pintf)
  {
    TAutoDriver<_Application>::Bind(pintf, false);
  }

  _ApplicationDispT(_ApplicationPtr pintf)
  {
    TAutoDriver<_Application>::Bind(pintf, true);
  }

  _ApplicationDispT& operator=(_Application *pintf)
  {
    TAutoDriver<_Application>::Bind(pintf, false);
    return *this;
  }

  _ApplicationDispT& operator=(_ApplicationPtr pintf)
  {
    TAutoDriver<_Application>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_PowerPointApplication));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_PowerPointApplication);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Presentations(Powerpoint_2k::PresentationsPtr* Presentations/*[out,retval]*/);
  Powerpoint_2k::PresentationsPtr __fastcall get_Presentations(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Windoz(Powerpoint_2k::DocumentWindowsPtr* Windoz/*[out,retval]*/);
  Powerpoint_2k::DocumentWindowsPtr __fastcall get_Windoz(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Dialogs(Powerpoint_2k::PPDialogsPtr* Dialogs/*[out,retval]*/);
  Powerpoint_2k::PPDialogsPtr __fastcall get_Dialogs(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActiveWindow(Powerpoint_2k::DocumentWindowPtr* ActiveWindow/*[out,retval]*/);
  Powerpoint_2k::DocumentWindowPtr __fastcall get_ActiveWindow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActivePresentation(Powerpoint_2k::PowerPointPresentationPtr* ActivePresentation/*[out,retval]*/);
  Powerpoint_2k::PowerPointPresentationPtr __fastcall get_ActivePresentation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideShowWindows(Powerpoint_2k::SlideShowWindowsPtr* SlideShowWindows/*[out,retval]*/);
  Powerpoint_2k::SlideShowWindowsPtr __fastcall get_SlideShowWindows(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CommandBars(Office_2k::CommandBarsPtr* CommandBars/*[out,retval]*/);
  Office_2k::CommandBarsPtr __fastcall get_CommandBars(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Path(BSTR* Path/*[out,retval]*/);
  BSTR            __fastcall get_Path(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* Caption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Caption(BSTR Caption/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Assistant(Office_2k::AssistantPtr* Assistant/*[out,retval]*/);
  Office_2k::AssistantPtr __fastcall get_Assistant(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FileSearch(Office_2k::FileSearchPtr* FileSearch/*[out,retval]*/);
  Office_2k::FileSearchPtr __fastcall get_FileSearch(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FileFind(Office_2k::IFindPtr* FileFind/*[out,retval]*/);
  Office_2k::IFindPtr __fastcall get_FileFind(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Build(BSTR* Build/*[out,retval]*/);
  BSTR            __fastcall get_Build(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Version(BSTR* Version/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OperatingSystem(BSTR* OperatingSystem/*[out,retval]*/);
  BSTR            __fastcall get_OperatingSystem(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActivePrinter(BSTR* ActivePrinter/*[out,retval]*/);
  BSTR            __fastcall get_ActivePrinter(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* Creator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AddIns(Powerpoint_2k::AddInsPtr* AddIns/*[out,retval]*/);
  Powerpoint_2k::AddInsPtr __fastcall get_AddIns(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VBE(Vbide_2k::VBEPtr* VBE/*[out,retval]*/);
  Vbide_2k::VBEPtr __fastcall get_VBE(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Help(BSTR HelpFile/*[in,def,opt]*/, 
                                             int ContextID/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Quit();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Run(BSTR MacroName/*[in]*/, 
                                            LPSAFEARRAY* safeArrayOfParams/*[in]*/, 
                                            TVariant* Run/*[out,retval]*/);
  TVariant        __fastcall Run(BSTR MacroName/*[in]*/, LPSAFEARRAY* safeArrayOfParams/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall FileDialog(Powerpoint_2k::PpFileDialogType Type/*[in]*/, 
                                                   Powerpoint_2k::FileDialogPtr* FileDialog/*[out,retval]*/);
  Powerpoint_2k::FileDialogPtr __fastcall FileDialog(Powerpoint_2k::PpFileDialogType Type/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall LaunchSpelling(Powerpoint_2k::DocumentWindowPtr pWindow/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(float* Left/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(float Left/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(float* Top/*[out,retval]*/);
  float           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(float Top/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(float* Width/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(float Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(float* Height/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_WindowState(Powerpoint_2k::PpWindowState* WindowState/*[out,retval]*/);
  Powerpoint_2k::PpWindowState __fastcall get_WindowState(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_WindowState(Powerpoint_2k::PpWindowState WindowState/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_2k::MsoTriState Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HWND(long* HWND/*[out,retval]*/);
  long            __fastcall get_HWND(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Active(Office_2k::MsoTriState* Active/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Active(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Activate();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AnswerWizard(Office_2k::AnswerWizardPtr* AnswerWizard/*[out,retval]*/);
  Office_2k::AnswerWizardPtr __fastcall get_AnswerWizard(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_COMAddIns(Office_2k::COMAddInsPtr* COMAddIns/*[out,retval]*/);
  Office_2k::COMAddInsPtr __fastcall get_COMAddIns(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ProductCode(BSTR* ProductCode/*[out,retval]*/);
  BSTR            __fastcall get_ProductCode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DefaultWebOptions(Powerpoint_2k::DefaultWebOptionsPtr* DefaultWebOptions/*[out,retval]*/);
  Powerpoint_2k::DefaultWebOptionsPtr __fastcall get_DefaultWebOptions(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LanguageSettings(Office_2k::LanguageSettingsPtr* LanguageSettings/*[out,retval]*/);
  Office_2k::LanguageSettingsPtr __fastcall get_LanguageSettings(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MsoDebugOptions(Office_2k::MsoDebugOptionsPtr* MsoDebugOptions/*[out,retval]*/);
  Office_2k::MsoDebugOptionsPtr __fastcall get_MsoDebugOptions(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowWindowsInTaskbar(Office_2k::MsoTriState* ShowWindowsInTaskbar/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_ShowWindowsInTaskbar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowWindowsInTaskbar(Office_2k::MsoTriState ShowWindowsInTaskbar/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Marker(Powerpoint_2k::MarkerPtr* Marker/*[out,retval]*/);
  Powerpoint_2k::MarkerPtr __fastcall get_Marker(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FeatureInstall(Office_2k::MsoFeatureInstall* FeatureInstall/*[out,retval]*/);
  Office_2k::MsoFeatureInstall __fastcall get_FeatureInstall(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FeatureInstall(Office_2k::MsoFeatureInstall FeatureInstall/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetOptionFlag(long Option/*[in]*/, 
                                                      TOLEBOOL Persist/*[in,def,opt]*/, 
                                                      TOLEBOOL* GetOptionFlag/*[out,retval]*/);
  TOLEBOOL        __fastcall GetOptionFlag(long Option/*[in]*/, TOLEBOOL Persist/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetOptionFlag(long Option/*[in]*/, TOLEBOOL State/*[in]*/, 
                                                      TOLEBOOL Persist/*[in,def,opt]*/);

  __property   Powerpoint_2k::PresentationsPtr Presentations = {read = get_Presentations};
  __property   Powerpoint_2k::DocumentWindowsPtr Windoz = {read = get_Windoz};
  __property   Powerpoint_2k::PPDialogsPtr Dialogs = {read = get_Dialogs};
  __property   Powerpoint_2k::DocumentWindowPtr ActiveWindow = {read = get_ActiveWindow};
  __property   Powerpoint_2k::PowerPointPresentationPtr ActivePresentation = {read = get_ActivePresentation};
  __property   Powerpoint_2k::SlideShowWindowsPtr SlideShowWindows = {read = get_SlideShowWindows};
  __property   Office_2k::CommandBarsPtr CommandBars = {read = get_CommandBars};
  __property   BSTR            Path = {read = get_Path};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   Office_2k::AssistantPtr Assistant = {read = get_Assistant};
  __property   Office_2k::FileSearchPtr FileSearch = {read = get_FileSearch};
  __property   Office_2k::IFindPtr FileFind = {read = get_FileFind};
  __property   BSTR            Build = {read = get_Build};
  __property   BSTR            Version = {read = get_Version};
  __property   BSTR            OperatingSystem = {read = get_OperatingSystem};
  __property   BSTR            ActivePrinter = {read = get_ActivePrinter};
  __property   long            Creator = {read = get_Creator};
  __property   Powerpoint_2k::AddInsPtr AddIns = {read = get_AddIns};
  __property   Vbide_2k::VBEPtr VBE = {read = get_VBE};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   Powerpoint_2k::PpWindowState WindowState = {read = get_WindowState, write = set_WindowState};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   long            HWND = {read = get_HWND};
  __property   Office_2k::MsoTriState Active = {read = get_Active};
  __property   Office_2k::AnswerWizardPtr AnswerWizard = {read = get_AnswerWizard};
  __property   Office_2k::COMAddInsPtr COMAddIns = {read = get_COMAddIns};
  __property   BSTR            ProductCode = {read = get_ProductCode};
  __property   Powerpoint_2k::DefaultWebOptionsPtr DefaultWebOptions = {read = get_DefaultWebOptions};
  __property   Office_2k::LanguageSettingsPtr LanguageSettings = {read = get_LanguageSettings};
  __property   Office_2k::MsoDebugOptionsPtr MsoDebugOptions = {read = get_MsoDebugOptions};
  __property   Office_2k::MsoTriState ShowWindowsInTaskbar = {read = get_ShowWindowsInTaskbar, write = set_ShowWindowsInTaskbar};
  __property   Powerpoint_2k::MarkerPtr Marker = {read = get_Marker};
  __property   Office_2k::MsoFeatureInstall FeatureInstall = {read = get_FeatureInstall, write = set_FeatureInstall};
};
typedef _ApplicationDispT<_Application> _ApplicationDisp;

// *********************************************************************//
// SmartIntf: TCOM_Global
// Interface: _Global
// *********************************************************************//
template <class T /* _Global */ >
class TCOM_GlobalT : public TComInterface<_Global>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_GlobalT() {}
  TCOM_GlobalT(_Global *intf, bool addRef = false) : TComInterface<_Global>(intf, addRef) {}
  TCOM_GlobalT(const TCOM_GlobalT& src) : TComInterface<_Global>(src) {}
  TCOM_GlobalT& operator=(const TCOM_GlobalT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_ActivePresentation(Powerpoint_2k::PowerPointPresentationPtr* ActivePresentation/*[out,retval]*/);
  Powerpoint_2k::PowerPointPresentationPtr __fastcall get_ActivePresentation(void);
  HRESULT         __fastcall get_ActiveWindow(Powerpoint_2k::DocumentWindowPtr* ActiveWindow/*[out,retval]*/);
  Powerpoint_2k::DocumentWindowPtr __fastcall get_ActiveWindow(void);
  HRESULT         __fastcall get_AddIns(Powerpoint_2k::AddInsPtr* AddIns/*[out,retval]*/);
  Powerpoint_2k::AddInsPtr __fastcall get_AddIns(void);
  HRESULT         __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT         __fastcall get_Assistant(Office_2k::AssistantPtr* Assistant/*[out,retval]*/);
  Office_2k::AssistantPtr __fastcall get_Assistant(void);
  HRESULT         __fastcall get_Dialogs(Powerpoint_2k::PPDialogsPtr* Dialogs/*[out,retval]*/);
  Powerpoint_2k::PPDialogsPtr __fastcall get_Dialogs(void);
  HRESULT         __fastcall get_Presentations(Powerpoint_2k::PresentationsPtr* Presentations/*[out,retval]*/);
  Powerpoint_2k::PresentationsPtr __fastcall get_Presentations(void);
  HRESULT         __fastcall get_SlideShowWindows(Powerpoint_2k::SlideShowWindowsPtr* SlideShowWindows/*[out,retval]*/);
  Powerpoint_2k::SlideShowWindowsPtr __fastcall get_SlideShowWindows(void);
  HRESULT         __fastcall get_Windoz(Powerpoint_2k::DocumentWindowsPtr* Windoz/*[out,retval]*/);
  Powerpoint_2k::DocumentWindowsPtr __fastcall get_Windoz(void);
  HRESULT         __fastcall get_CommandBars(Office_2k::CommandBarsPtr* CommandBars/*[out,retval]*/);
  Office_2k::CommandBarsPtr __fastcall get_CommandBars(void);
  HRESULT         __fastcall get_AnswerWizard(Office_2k::AnswerWizardPtr* AnswerWizard/*[out,retval]*/);
  Office_2k::AnswerWizardPtr __fastcall get_AnswerWizard(void);

  __property   Powerpoint_2k::PowerPointPresentationPtr ActivePresentation = {read = get_ActivePresentation};
  __property   Powerpoint_2k::DocumentWindowPtr ActiveWindow = {read = get_ActiveWindow};
  __property   Powerpoint_2k::AddInsPtr AddIns = {read = get_AddIns};
  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   Office_2k::AssistantPtr Assistant = {read = get_Assistant};
  __property   Powerpoint_2k::PPDialogsPtr Dialogs = {read = get_Dialogs};
  __property   Powerpoint_2k::PresentationsPtr Presentations = {read = get_Presentations};
  __property   Powerpoint_2k::SlideShowWindowsPtr SlideShowWindows = {read = get_SlideShowWindows};
  __property   Powerpoint_2k::DocumentWindowsPtr Windoz = {read = get_Windoz};
  __property   Office_2k::CommandBarsPtr CommandBars = {read = get_CommandBars};
  __property   Office_2k::AnswerWizardPtr AnswerWizard = {read = get_AnswerWizard};
};
typedef TCOM_GlobalT<_Global> TCOM_Global;

// *********************************************************************//
// DispIntf:  _Global
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493451-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class _GlobalDispT : public TAutoDriver<_Global>
{
public:
  _GlobalDispT(){}

  _GlobalDispT(_Global *pintf)
  {
    TAutoDriver<_Global>::Bind(pintf, false);
  }

  _GlobalDispT(_GlobalPtr pintf)
  {
    TAutoDriver<_Global>::Bind(pintf, true);
  }

  _GlobalDispT& operator=(_Global *pintf)
  {
    TAutoDriver<_Global>::Bind(pintf, false);
    return *this;
  }

  _GlobalDispT& operator=(_GlobalPtr pintf)
  {
    TAutoDriver<_Global>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_PowerPointGlobal));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_PowerPointGlobal);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActivePresentation(Powerpoint_2k::PowerPointPresentationPtr* ActivePresentation/*[out,retval]*/);
  Powerpoint_2k::PowerPointPresentationPtr __fastcall get_ActivePresentation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActiveWindow(Powerpoint_2k::DocumentWindowPtr* ActiveWindow/*[out,retval]*/);
  Powerpoint_2k::DocumentWindowPtr __fastcall get_ActiveWindow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AddIns(Powerpoint_2k::AddInsPtr* AddIns/*[out,retval]*/);
  Powerpoint_2k::AddInsPtr __fastcall get_AddIns(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Assistant(Office_2k::AssistantPtr* Assistant/*[out,retval]*/);
  Office_2k::AssistantPtr __fastcall get_Assistant(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Dialogs(Powerpoint_2k::PPDialogsPtr* Dialogs/*[out,retval]*/);
  Powerpoint_2k::PPDialogsPtr __fastcall get_Dialogs(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Presentations(Powerpoint_2k::PresentationsPtr* Presentations/*[out,retval]*/);
  Powerpoint_2k::PresentationsPtr __fastcall get_Presentations(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideShowWindows(Powerpoint_2k::SlideShowWindowsPtr* SlideShowWindows/*[out,retval]*/);
  Powerpoint_2k::SlideShowWindowsPtr __fastcall get_SlideShowWindows(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Windoz(Powerpoint_2k::DocumentWindowsPtr* Windoz/*[out,retval]*/);
  Powerpoint_2k::DocumentWindowsPtr __fastcall get_Windoz(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CommandBars(Office_2k::CommandBarsPtr* CommandBars/*[out,retval]*/);
  Office_2k::CommandBarsPtr __fastcall get_CommandBars(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AnswerWizard(Office_2k::AnswerWizardPtr* AnswerWizard/*[out,retval]*/);
  Office_2k::AnswerWizardPtr __fastcall get_AnswerWizard(void);

  __property   Powerpoint_2k::PowerPointPresentationPtr ActivePresentation = {read = get_ActivePresentation};
  __property   Powerpoint_2k::DocumentWindowPtr ActiveWindow = {read = get_ActiveWindow};
  __property   Powerpoint_2k::AddInsPtr AddIns = {read = get_AddIns};
  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   Office_2k::AssistantPtr Assistant = {read = get_Assistant};
  __property   Powerpoint_2k::PPDialogsPtr Dialogs = {read = get_Dialogs};
  __property   Powerpoint_2k::PresentationsPtr Presentations = {read = get_Presentations};
  __property   Powerpoint_2k::SlideShowWindowsPtr SlideShowWindows = {read = get_SlideShowWindows};
  __property   Powerpoint_2k::DocumentWindowsPtr Windoz = {read = get_Windoz};
  __property   Office_2k::CommandBarsPtr CommandBars = {read = get_CommandBars};
  __property   Office_2k::AnswerWizardPtr AnswerWizard = {read = get_AnswerWizard};
};
typedef _GlobalDispT<_Global> _GlobalDisp;

// *********************************************************************//
// DispIntf:  EApplication
// Flags:     (4096) Dispatchable
// GUID:      {914934C2-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T>
class EApplicationDispT : public TAutoDriver<EApplication>
{
public:
  EApplicationDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall WindowSelectionChange(Powerpoint_2k::SelectionPtr Sel/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall WindowBeforeRightClick(Powerpoint_2k::SelectionPtr Sel/*[in]*/
                                                               , TOLEBOOL* Cancel/*[in,out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall WindowBeforeDoubleClick(Powerpoint_2k::SelectionPtr Sel/*[in]*/
                                                                , TOLEBOOL* Cancel/*[in,out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PresentationClose(Powerpoint_2k::PowerPointPresentationPtr Pres/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PresentationSave(Powerpoint_2k::PowerPointPresentationPtr Pres/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PresentationOpen(Powerpoint_2k::PowerPointPresentationPtr Pres/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall NewPresentation(Powerpoint_2k::PowerPointPresentationPtr Pres/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PresentationNewSlide(Powerpoint_2k::PowerPointSlidePtr Sld/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall WindowActivate(Powerpoint_2k::PowerPointPresentationPtr Pres/*[in]*/
                                                       , Powerpoint_2k::DocumentWindowPtr Wn/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall WindowDeactivate(Powerpoint_2k::PowerPointPresentationPtr Pres/*[in]*/
                                                         , 
                                                         Powerpoint_2k::DocumentWindowPtr Wn/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SlideShowBegin(Powerpoint_2k::SlideShowWindowPtr Wn/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SlideShowNextBuild(Powerpoint_2k::SlideShowWindowPtr Wn/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SlideShowNextSlide(Powerpoint_2k::SlideShowWindowPtr Wn/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SlideShowEnd(Powerpoint_2k::PowerPointPresentationPtr Pres/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PresentationPrint(Powerpoint_2k::PowerPointPresentationPtr Pres/*[in]*/);

};
typedef EApplicationDispT<EApplication> EApplicationDisp;

typedef TComInterface<ColorFormat>  TCOMColorFormat;

// *********************************************************************//
// DispIntf:  ColorFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493452-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class ColorFormatDispT : public TAutoDriver<ColorFormat>
{
public:
  ColorFormatDispT(){}

  ColorFormatDispT(ColorFormat *pintf)
  {
    TAutoDriver<ColorFormat>::Bind(pintf, false);
  }

  ColorFormatDispT(ColorFormatPtr pintf)
  {
    TAutoDriver<ColorFormat>::Bind(pintf, true);
  }

  ColorFormatDispT& operator=(ColorFormat *pintf)
  {
    TAutoDriver<ColorFormat>::Bind(pintf, false);
    return *this;
  }

  ColorFormatDispT& operator=(ColorFormatPtr pintf)
  {
    TAutoDriver<ColorFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_rgb(Office_2k::MsoRGBType* rgb/*[out,retval]*/);
  Office_2k::MsoRGBType __fastcall get_rgb(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_rgb(Office_2k::MsoRGBType rgb/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Office_2k::MsoColorType* Type/*[out,retval]*/);
  Office_2k::MsoColorType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SchemeColor(Powerpoint_2k::PpColorSchemeIndex* SchemeColor/*[out,retval]*/);
  Powerpoint_2k::PpColorSchemeIndex __fastcall get_SchemeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SchemeColor(Powerpoint_2k::PpColorSchemeIndex SchemeColor/*[in]*/);

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoRGBType rgb = {read = get_rgb, write = set_rgb};
  __property   Office_2k::MsoColorType Type = {read = get_Type};
  __property   Powerpoint_2k::PpColorSchemeIndex SchemeColor = {read = get_SchemeColor, write = set_SchemeColor};
};
typedef ColorFormatDispT<ColorFormat> ColorFormatDisp;

typedef TComInterface<SlideShowWindow>  TCOMSlideShowWindow;

// *********************************************************************//
// DispIntf:  SlideShowWindow
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493453-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class SlideShowWindowDispT : public TAutoDriver<SlideShowWindow>
{
public:
  SlideShowWindowDispT(){}

  SlideShowWindowDispT(SlideShowWindow *pintf)
  {
    TAutoDriver<SlideShowWindow>::Bind(pintf, false);
  }

  SlideShowWindowDispT(SlideShowWindowPtr pintf)
  {
    TAutoDriver<SlideShowWindow>::Bind(pintf, true);
  }

  SlideShowWindowDispT& operator=(SlideShowWindow *pintf)
  {
    TAutoDriver<SlideShowWindow>::Bind(pintf, false);
    return *this;
  }

  SlideShowWindowDispT& operator=(SlideShowWindowPtr pintf)
  {
    TAutoDriver<SlideShowWindow>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_View(Powerpoint_2k::SlideShowViewPtr* View/*[out,retval]*/);
  Powerpoint_2k::SlideShowViewPtr __fastcall get_View(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Presentation(Powerpoint_2k::PowerPointPresentationPtr* Presentation/*[out,retval]*/);
  Powerpoint_2k::PowerPointPresentationPtr __fastcall get_Presentation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsFullScreen(Office_2k::MsoTriState* IsFullScreen/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_IsFullScreen(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(float* Left/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(float Left/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(float* Top/*[out,retval]*/);
  float           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(float Top/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(float* Width/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(float Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(float* Height/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HWND(long* HWND/*[out,retval]*/);
  long            __fastcall get_HWND(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Active(Office_2k::MsoTriState* Active/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Active(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Activate();

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::SlideShowViewPtr View = {read = get_View};
  __property   Powerpoint_2k::PowerPointPresentationPtr Presentation = {read = get_Presentation};
  __property   Office_2k::MsoTriState IsFullScreen = {read = get_IsFullScreen};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   long            HWND = {read = get_HWND};
  __property   Office_2k::MsoTriState Active = {read = get_Active};
};
typedef SlideShowWindowDispT<SlideShowWindow> SlideShowWindowDisp;

typedef TComInterface<Selection>  TCOMSelection;

// *********************************************************************//
// DispIntf:  Selection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493454-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class SelectionDispT : public TAutoDriver<Selection>
{
public:
  SelectionDispT(){}

  SelectionDispT(Selection *pintf)
  {
    TAutoDriver<Selection>::Bind(pintf, false);
  }

  SelectionDispT(SelectionPtr pintf)
  {
    TAutoDriver<Selection>::Bind(pintf, true);
  }

  SelectionDispT& operator=(Selection *pintf)
  {
    TAutoDriver<Selection>::Bind(pintf, false);
    return *this;
  }

  SelectionDispT& operator=(SelectionPtr pintf)
  {
    TAutoDriver<Selection>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Cut();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Copy();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Unselect();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Powerpoint_2k::PpSelectionType* Type/*[out,retval]*/);
  Powerpoint_2k::PpSelectionType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideRange(Powerpoint_2k::SlideRangePtr* SlideRange/*[out,retval]*/);
  Powerpoint_2k::SlideRangePtr __fastcall get_SlideRange(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShapeRange(Powerpoint_2k::ShapeRangePtr* ShapeRange/*[out,retval]*/);
  Powerpoint_2k::ShapeRangePtr __fastcall get_ShapeRange(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextRange(Powerpoint_2k::TextRangePtr* TextRange/*[out,retval]*/);
  Powerpoint_2k::TextRangePtr __fastcall get_TextRange(void);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::PpSelectionType Type = {read = get_Type};
  __property   Powerpoint_2k::SlideRangePtr SlideRange = {read = get_SlideRange};
  __property   Powerpoint_2k::ShapeRangePtr ShapeRange = {read = get_ShapeRange};
  __property   Powerpoint_2k::TextRangePtr TextRange = {read = get_TextRange};
};
typedef SelectionDispT<Selection> SelectionDisp;

typedef TComInterface<DocumentWindows>  TCOMDocumentWindows;

// *********************************************************************//
// DispIntf:  DocumentWindows
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493455-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class DocumentWindowsDispT : public TAutoDriver<DocumentWindows>
{
public:
  DocumentWindowsDispT(){}

  DocumentWindowsDispT(DocumentWindows *pintf)
  {
    TAutoDriver<DocumentWindows>::Bind(pintf, false);
  }

  DocumentWindowsDispT(DocumentWindowsPtr pintf)
  {
    TAutoDriver<DocumentWindows>::Bind(pintf, true);
  }

  DocumentWindowsDispT& operator=(DocumentWindows *pintf)
  {
    TAutoDriver<DocumentWindows>::Bind(pintf, false);
    return *this;
  }

  DocumentWindowsDispT& operator=(DocumentWindowsPtr pintf)
  {
    TAutoDriver<DocumentWindows>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(int index/*[in]*/, 
                                             Powerpoint_2k::DocumentWindowPtr* Item/*[out,retval]*/);
  Powerpoint_2k::DocumentWindowPtr __fastcall Item(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Arrange(Powerpoint_2k::PpArrangeStyle arrangeStyle/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/);
  TVariant        __fastcall _Index(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef DocumentWindowsDispT<DocumentWindows> DocumentWindowsDisp;

typedef TComInterface<SlideShowWindows>  TCOMSlideShowWindows;

// *********************************************************************//
// DispIntf:  SlideShowWindows
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493456-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class SlideShowWindowsDispT : public TAutoDriver<SlideShowWindows>
{
public:
  SlideShowWindowsDispT(){}

  SlideShowWindowsDispT(SlideShowWindows *pintf)
  {
    TAutoDriver<SlideShowWindows>::Bind(pintf, false);
  }

  SlideShowWindowsDispT(SlideShowWindowsPtr pintf)
  {
    TAutoDriver<SlideShowWindows>::Bind(pintf, true);
  }

  SlideShowWindowsDispT& operator=(SlideShowWindows *pintf)
  {
    TAutoDriver<SlideShowWindows>::Bind(pintf, false);
    return *this;
  }

  SlideShowWindowsDispT& operator=(SlideShowWindowsPtr pintf)
  {
    TAutoDriver<SlideShowWindows>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(int index/*[in]*/, 
                                             Powerpoint_2k::SlideShowWindowPtr* Item/*[out,retval]*/);
  Powerpoint_2k::SlideShowWindowPtr __fastcall Item(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/);
  TVariant        __fastcall _Index(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef SlideShowWindowsDispT<SlideShowWindows> SlideShowWindowsDisp;

typedef TComInterface<DocumentWindow>  TCOMDocumentWindow;

// *********************************************************************//
// DispIntf:  DocumentWindow
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493457-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class DocumentWindowDispT : public TAutoDriver<DocumentWindow>
{
public:
  DocumentWindowDispT(){}

  DocumentWindowDispT(DocumentWindow *pintf)
  {
    TAutoDriver<DocumentWindow>::Bind(pintf, false);
  }

  DocumentWindowDispT(DocumentWindowPtr pintf)
  {
    TAutoDriver<DocumentWindow>::Bind(pintf, true);
  }

  DocumentWindowDispT& operator=(DocumentWindow *pintf)
  {
    TAutoDriver<DocumentWindow>::Bind(pintf, false);
    return *this;
  }

  DocumentWindowDispT& operator=(DocumentWindowPtr pintf)
  {
    TAutoDriver<DocumentWindow>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Selection(Powerpoint_2k::SelectionPtr* Selection/*[out,retval]*/);
  Powerpoint_2k::SelectionPtr __fastcall get_Selection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_View(Powerpoint_2k::ViewPtr* View/*[out,retval]*/);
  Powerpoint_2k::ViewPtr __fastcall get_View(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Presentation(Powerpoint_2k::PowerPointPresentationPtr* Presentation/*[out,retval]*/);
  Powerpoint_2k::PowerPointPresentationPtr __fastcall get_Presentation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ViewType(Powerpoint_2k::PpViewType* ViewType/*[out,retval]*/);
  Powerpoint_2k::PpViewType __fastcall get_ViewType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ViewType(Powerpoint_2k::PpViewType ViewType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BlackAndWhite(Office_2k::MsoTriState* BlackAndWhite/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_BlackAndWhite(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BlackAndWhite(Office_2k::MsoTriState BlackAndWhite/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Active(Office_2k::MsoTriState* Active/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Active(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_WindowState(Powerpoint_2k::PpWindowState* WindowState/*[out,retval]*/);
  Powerpoint_2k::PpWindowState __fastcall get_WindowState(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_WindowState(Powerpoint_2k::PpWindowState WindowState/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* Caption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(float* Left/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(float Left/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(float* Top/*[out,retval]*/);
  float           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(float Top/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(float* Width/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(float Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(float* Height/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall FitToPage();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Activate();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall LargeScroll(int Down/*[in,def,opt]*/, int Up/*[in,def,opt]*/
                                                    , int ToRight/*[in,def,opt]*/, 
                                                    int ToLeft/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SmallScroll(int Down/*[in,def,opt]*/, int Up/*[in,def,opt]*/
                                                    , int ToRight/*[in,def,opt]*/, 
                                                    int ToLeft/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall NewWindow(Powerpoint_2k::DocumentWindowPtr* NewWindow/*[out,retval]*/);
  Powerpoint_2k::DocumentWindowPtr __fastcall NewWindow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Close();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HWND(long* HWND/*[out,retval]*/);
  long            __fastcall get_HWND(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActivePane(Powerpoint_2k::PanePtr* ActivePane/*[out,retval]*/);
  Powerpoint_2k::PanePtr __fastcall get_ActivePane(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Panes(Powerpoint_2k::PanesPtr* Panes/*[out,retval]*/);
  Powerpoint_2k::PanesPtr __fastcall get_Panes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SplitVertical(long* SplitVertical/*[out,retval]*/);
  long            __fastcall get_SplitVertical(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SplitVertical(long SplitVertical/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SplitHorizontal(long* SplitHorizontal/*[out,retval]*/);
  long            __fastcall get_SplitHorizontal(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SplitHorizontal(long SplitHorizontal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RangeFromPoint(int X/*[in]*/, int Y/*[in]*/, 
                                                       LPDISPATCH* RangeFromPoint/*[out,retval]*/);
  LPDISPATCH      __fastcall RangeFromPoint(int X/*[in]*/, int Y/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PointsToScreenPixelsX(float Points/*[in]*/, 
                                                              int* PointsToScreenPixelsX/*[out,retval]*/);
  int             __fastcall PointsToScreenPixelsX(float Points/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PointsToScreenPixelsY(float Points/*[in]*/, 
                                                              int* PointsToScreenPixelsY/*[out,retval]*/);
  int             __fastcall PointsToScreenPixelsY(float Points/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ScrollIntoView(float Left/*[in]*/, float Top/*[in]*/, 
                                                       float Width/*[in]*/, float Height/*[in]*/, 
                                                       Office_2k::MsoTriState Start/*[in,def,opt]*/);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::SelectionPtr Selection = {read = get_Selection};
  __property   Powerpoint_2k::ViewPtr View = {read = get_View};
  __property   Powerpoint_2k::PowerPointPresentationPtr Presentation = {read = get_Presentation};
  __property   Powerpoint_2k::PpViewType ViewType = {read = get_ViewType, write = set_ViewType};
  __property   Office_2k::MsoTriState BlackAndWhite = {read = get_BlackAndWhite, write = set_BlackAndWhite};
  __property   Office_2k::MsoTriState Active = {read = get_Active};
  __property   Powerpoint_2k::PpWindowState WindowState = {read = get_WindowState, write = set_WindowState};
  __property   BSTR            Caption = {read = get_Caption};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   long            HWND = {read = get_HWND};
  __property   Powerpoint_2k::PanePtr ActivePane = {read = get_ActivePane};
  __property   Powerpoint_2k::PanesPtr Panes = {read = get_Panes};
  __property   long            SplitVertical = {read = get_SplitVertical, write = set_SplitVertical};
  __property   long            SplitHorizontal = {read = get_SplitHorizontal, write = set_SplitHorizontal};
};
typedef DocumentWindowDispT<DocumentWindow> DocumentWindowDisp;

typedef TComInterface<View>  TCOMView;

// *********************************************************************//
// DispIntf:  View
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493458-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class ViewDispT : public TAutoDriver<View>
{
public:
  ViewDispT(){}

  ViewDispT(View *pintf)
  {
    TAutoDriver<View>::Bind(pintf, false);
  }

  ViewDispT(ViewPtr pintf)
  {
    TAutoDriver<View>::Bind(pintf, true);
  }

  ViewDispT& operator=(View *pintf)
  {
    TAutoDriver<View>::Bind(pintf, false);
    return *this;
  }

  ViewDispT& operator=(ViewPtr pintf)
  {
    TAutoDriver<View>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Powerpoint_2k::PpViewType* Type/*[out,retval]*/);
  Powerpoint_2k::PpViewType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Zoom(int* Zoom/*[out,retval]*/);
  int             __fastcall get_Zoom(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Zoom(int Zoom/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Paste();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Slide(LPDISPATCH* Slide/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Slide(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Slide(LPDISPATCH Slide/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GotoSlide(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplaySlideMiniature(Office_2k::MsoTriState* DisplaySlideMiniature/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_DisplaySlideMiniature(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplaySlideMiniature(Office_2k::MsoTriState DisplaySlideMiniature/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ZoomToFit(Office_2k::MsoTriState* ZoomToFit/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_ZoomToFit(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ZoomToFit(Office_2k::MsoTriState ZoomToFit/*[in]*/);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::PpViewType Type = {read = get_Type};
  __property   int             Zoom = {read = get_Zoom, write = set_Zoom};
  __property   LPDISPATCH      Slide = {read = get_Slide, write = set_Slide};
  __property   Office_2k::MsoTriState DisplaySlideMiniature = {read = get_DisplaySlideMiniature, write = set_DisplaySlideMiniature};
  __property   Office_2k::MsoTriState ZoomToFit = {read = get_ZoomToFit, write = set_ZoomToFit};
};
typedef ViewDispT<View> ViewDisp;

typedef TComInterface<SlideShowView>  TCOMSlideShowView;

// *********************************************************************//
// DispIntf:  SlideShowView
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493459-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class SlideShowViewDispT : public TAutoDriver<SlideShowView>
{
public:
  SlideShowViewDispT(){}

  SlideShowViewDispT(SlideShowView *pintf)
  {
    TAutoDriver<SlideShowView>::Bind(pintf, false);
  }

  SlideShowViewDispT(SlideShowViewPtr pintf)
  {
    TAutoDriver<SlideShowView>::Bind(pintf, true);
  }

  SlideShowViewDispT& operator=(SlideShowView *pintf)
  {
    TAutoDriver<SlideShowView>::Bind(pintf, false);
    return *this;
  }

  SlideShowViewDispT& operator=(SlideShowViewPtr pintf)
  {
    TAutoDriver<SlideShowView>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Zoom(int* Zoom/*[out,retval]*/);
  int             __fastcall get_Zoom(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Slide(Powerpoint_2k::PowerPointSlidePtr* Slide/*[out,retval]*/);
  Powerpoint_2k::PowerPointSlidePtr __fastcall get_Slide(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PointerType(Powerpoint_2k::PpSlideShowPointerType* PointerType/*[out,retval]*/);
  Powerpoint_2k::PpSlideShowPointerType __fastcall get_PointerType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PointerType(Powerpoint_2k::PpSlideShowPointerType PointerType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_State(Powerpoint_2k::PpSlideShowState* State/*[out,retval]*/);
  Powerpoint_2k::PpSlideShowState __fastcall get_State(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_State(Powerpoint_2k::PpSlideShowState State/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AcceleratorsEnabled(Office_2k::MsoTriState* AcceleratorsEnabled/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_AcceleratorsEnabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AcceleratorsEnabled(Office_2k::MsoTriState AcceleratorsEnabled/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PresentationElapsedTime(float* PresentationElapsedTime/*[out,retval]*/);
  float           __fastcall get_PresentationElapsedTime(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideElapsedTime(float* SlideElapsedTime/*[out,retval]*/);
  float           __fastcall get_SlideElapsedTime(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SlideElapsedTime(float SlideElapsedTime/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LastSlideViewed(Powerpoint_2k::PowerPointSlidePtr* LastSlideViewed/*[out,retval]*/);
  Powerpoint_2k::PowerPointSlidePtr __fastcall get_LastSlideViewed(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AdvanceMode(Powerpoint_2k::PpSlideShowAdvanceMode* AdvanceMode/*[out,retval]*/);
  Powerpoint_2k::PpSlideShowAdvanceMode __fastcall get_AdvanceMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PointerColor(Powerpoint_2k::ColorFormatPtr* PointerColor/*[out,retval]*/);
  Powerpoint_2k::ColorFormatPtr __fastcall get_PointerColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsNamedShow(Office_2k::MsoTriState* IsNamedShow/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_IsNamedShow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideShowName(BSTR* SlideShowName/*[out,retval]*/);
  BSTR            __fastcall get_SlideShowName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DrawLine(float BeginX/*[in]*/, float BeginY/*[in]*/, 
                                                 float EndX/*[in]*/, float EndY/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall EraseDrawing();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall First();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Last();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Next();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Previous();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GotoSlide(int index/*[in]*/, 
                                                  Office_2k::MsoTriState ResetSlide/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GotoNamedShow(BSTR SlideShowName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall EndNamedShow();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ResetSlideTime();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Exit();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall InstallTracker(Powerpoint_2k::MouseTrackerPtr pTracker/*[in]*/
                                                       , Office_2k::MsoTriState Presenter/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CurrentShowPosition(int* CurrentShowPosition/*[out,retval]*/);
  int             __fastcall get_CurrentShowPosition(void);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Zoom = {read = get_Zoom};
  __property   Powerpoint_2k::PowerPointSlidePtr Slide = {read = get_Slide};
  __property   Powerpoint_2k::PpSlideShowPointerType PointerType = {read = get_PointerType, write = set_PointerType};
  __property   Powerpoint_2k::PpSlideShowState State = {read = get_State, write = set_State};
  __property   Office_2k::MsoTriState AcceleratorsEnabled = {read = get_AcceleratorsEnabled, write = set_AcceleratorsEnabled};
  __property   float           PresentationElapsedTime = {read = get_PresentationElapsedTime};
  __property   float           SlideElapsedTime = {read = get_SlideElapsedTime, write = set_SlideElapsedTime};
  __property   Powerpoint_2k::PowerPointSlidePtr LastSlideViewed = {read = get_LastSlideViewed};
  __property   Powerpoint_2k::PpSlideShowAdvanceMode AdvanceMode = {read = get_AdvanceMode};
  __property   Powerpoint_2k::ColorFormatPtr PointerColor = {read = get_PointerColor};
  __property   Office_2k::MsoTriState IsNamedShow = {read = get_IsNamedShow};
  __property   BSTR            SlideShowName = {read = get_SlideShowName};
  __property   int             CurrentShowPosition = {read = get_CurrentShowPosition};
};
typedef SlideShowViewDispT<SlideShowView> SlideShowViewDisp;

typedef TComInterface<SlideShowSettings>  TCOMSlideShowSettings;

// *********************************************************************//
// DispIntf:  SlideShowSettings
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149345A-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class SlideShowSettingsDispT : public TAutoDriver<SlideShowSettings>
{
public:
  SlideShowSettingsDispT(){}

  SlideShowSettingsDispT(SlideShowSettings *pintf)
  {
    TAutoDriver<SlideShowSettings>::Bind(pintf, false);
  }

  SlideShowSettingsDispT(SlideShowSettingsPtr pintf)
  {
    TAutoDriver<SlideShowSettings>::Bind(pintf, true);
  }

  SlideShowSettingsDispT& operator=(SlideShowSettings *pintf)
  {
    TAutoDriver<SlideShowSettings>::Bind(pintf, false);
    return *this;
  }

  SlideShowSettingsDispT& operator=(SlideShowSettingsPtr pintf)
  {
    TAutoDriver<SlideShowSettings>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PointerColor(Powerpoint_2k::ColorFormatPtr* PointerColor/*[out,retval]*/);
  Powerpoint_2k::ColorFormatPtr __fastcall get_PointerColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NamedSlideShows(Powerpoint_2k::NamedSlideShowsPtr* NamedSlideShows/*[out,retval]*/);
  Powerpoint_2k::NamedSlideShowsPtr __fastcall get_NamedSlideShows(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_StartingSlide(int* StartingSlide/*[out,retval]*/);
  int             __fastcall get_StartingSlide(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_StartingSlide(int StartingSlide/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EndingSlide(int* EndingSlide/*[out,retval]*/);
  int             __fastcall get_EndingSlide(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EndingSlide(int EndingSlide/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AdvanceMode(Powerpoint_2k::PpSlideShowAdvanceMode* AdvanceMode/*[out,retval]*/);
  Powerpoint_2k::PpSlideShowAdvanceMode __fastcall get_AdvanceMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AdvanceMode(Powerpoint_2k::PpSlideShowAdvanceMode AdvanceMode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Run(Powerpoint_2k::SlideShowWindowPtr* Run/*[out,retval]*/);
  Powerpoint_2k::SlideShowWindowPtr __fastcall Run(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LoopUntilStopped(Office_2k::MsoTriState* LoopUntilStopped/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_LoopUntilStopped(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LoopUntilStopped(Office_2k::MsoTriState LoopUntilStopped/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowType(Powerpoint_2k::PpSlideShowType* ShowType/*[out,retval]*/);
  Powerpoint_2k::PpSlideShowType __fastcall get_ShowType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowType(Powerpoint_2k::PpSlideShowType ShowType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowWithNarration(Office_2k::MsoTriState* ShowWithNarration/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_ShowWithNarration(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowWithNarration(Office_2k::MsoTriState ShowWithNarration/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowWithAnimation(Office_2k::MsoTriState* ShowWithAnimation/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_ShowWithAnimation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowWithAnimation(Office_2k::MsoTriState ShowWithAnimation/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideShowName(BSTR* SlideShowName/*[out,retval]*/);
  BSTR            __fastcall get_SlideShowName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SlideShowName(BSTR SlideShowName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RangeType(Powerpoint_2k::PpSlideShowRangeType* RangeType/*[out,retval]*/);
  Powerpoint_2k::PpSlideShowRangeType __fastcall get_RangeType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RangeType(Powerpoint_2k::PpSlideShowRangeType RangeType/*[in]*/);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::ColorFormatPtr PointerColor = {read = get_PointerColor};
  __property   Powerpoint_2k::NamedSlideShowsPtr NamedSlideShows = {read = get_NamedSlideShows};
  __property   int             StartingSlide = {read = get_StartingSlide, write = set_StartingSlide};
  __property   int             EndingSlide = {read = get_EndingSlide, write = set_EndingSlide};
  __property   Powerpoint_2k::PpSlideShowAdvanceMode AdvanceMode = {read = get_AdvanceMode, write = set_AdvanceMode};
  __property   Office_2k::MsoTriState LoopUntilStopped = {read = get_LoopUntilStopped, write = set_LoopUntilStopped};
  __property   Powerpoint_2k::PpSlideShowType ShowType = {read = get_ShowType, write = set_ShowType};
  __property   Office_2k::MsoTriState ShowWithNarration = {read = get_ShowWithNarration, write = set_ShowWithNarration};
  __property   Office_2k::MsoTriState ShowWithAnimation = {read = get_ShowWithAnimation, write = set_ShowWithAnimation};
  __property   BSTR            SlideShowName = {read = get_SlideShowName, write = set_SlideShowName};
  __property   Powerpoint_2k::PpSlideShowRangeType RangeType = {read = get_RangeType, write = set_RangeType};
};
typedef SlideShowSettingsDispT<SlideShowSettings> SlideShowSettingsDisp;

typedef TComInterface<NamedSlideShows>  TCOMNamedSlideShows;

// *********************************************************************//
// DispIntf:  NamedSlideShows
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149345B-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class NamedSlideShowsDispT : public TAutoDriver<NamedSlideShows>
{
public:
  NamedSlideShowsDispT(){}

  NamedSlideShowsDispT(NamedSlideShows *pintf)
  {
    TAutoDriver<NamedSlideShows>::Bind(pintf, false);
  }

  NamedSlideShowsDispT(NamedSlideShowsPtr pintf)
  {
    TAutoDriver<NamedSlideShows>::Bind(pintf, true);
  }

  NamedSlideShowsDispT& operator=(NamedSlideShows *pintf)
  {
    TAutoDriver<NamedSlideShows>::Bind(pintf, false);
    return *this;
  }

  NamedSlideShowsDispT& operator=(NamedSlideShowsPtr pintf)
  {
    TAutoDriver<NamedSlideShows>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(TVariantInParam index/*[in]*/, 
                                             Powerpoint_2k::NamedSlideShowPtr* Item/*[out,retval]*/);
  Powerpoint_2k::NamedSlideShowPtr __fastcall Item(TVariantInParam index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(BSTR Name/*[in]*/, 
                                            TVariantInParam safeArrayOfSlideIDs/*[in]*/, 
                                            Powerpoint_2k::NamedSlideShowPtr* Add/*[out,retval]*/);
  Powerpoint_2k::NamedSlideShowPtr __fastcall Add(BSTR Name/*[in]*/, 
                                                  TVariantInParam safeArrayOfSlideIDs/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/);
  TVariant        __fastcall _Index(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef NamedSlideShowsDispT<NamedSlideShows> NamedSlideShowsDisp;

typedef TComInterface<NamedSlideShow>  TCOMNamedSlideShow;

// *********************************************************************//
// DispIntf:  NamedSlideShow
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149345C-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class NamedSlideShowDispT : public TAutoDriver<NamedSlideShow>
{
public:
  NamedSlideShowDispT(){}

  NamedSlideShowDispT(NamedSlideShow *pintf)
  {
    TAutoDriver<NamedSlideShow>::Bind(pintf, false);
  }

  NamedSlideShowDispT(NamedSlideShowPtr pintf)
  {
    TAutoDriver<NamedSlideShow>::Bind(pintf, true);
  }

  NamedSlideShowDispT& operator=(NamedSlideShow *pintf)
  {
    TAutoDriver<NamedSlideShow>::Bind(pintf, false);
    return *this;
  }

  NamedSlideShowDispT& operator=(NamedSlideShowPtr pintf)
  {
    TAutoDriver<NamedSlideShow>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideIDs(TVariant* SlideIDs/*[out,retval]*/);
  TVariant        __fastcall get_SlideIDs(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   long            Count = {read = get_Count};
};
typedef NamedSlideShowDispT<NamedSlideShow> NamedSlideShowDisp;

typedef TComInterface<PrintOptions>  TCOMPrintOptions;

// *********************************************************************//
// DispIntf:  PrintOptions
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149345D-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PrintOptionsDispT : public TAutoDriver<PrintOptions>
{
public:
  PrintOptionsDispT(){}

  PrintOptionsDispT(PrintOptions *pintf)
  {
    TAutoDriver<PrintOptions>::Bind(pintf, false);
  }

  PrintOptionsDispT(PrintOptionsPtr pintf)
  {
    TAutoDriver<PrintOptions>::Bind(pintf, true);
  }

  PrintOptionsDispT& operator=(PrintOptions *pintf)
  {
    TAutoDriver<PrintOptions>::Bind(pintf, false);
    return *this;
  }

  PrintOptionsDispT& operator=(PrintOptionsPtr pintf)
  {
    TAutoDriver<PrintOptions>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PrintColorType(Powerpoint_2k::PpPrintColorType* PrintColorType/*[out,retval]*/);
  Powerpoint_2k::PpPrintColorType __fastcall get_PrintColorType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PrintColorType(Powerpoint_2k::PpPrintColorType PrintColorType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Collate(Office_2k::MsoTriState* Collate/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Collate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Collate(Office_2k::MsoTriState Collate/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FitToPage(Office_2k::MsoTriState* FitToPage/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_FitToPage(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FitToPage(Office_2k::MsoTriState FitToPage/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FrameSlides(Office_2k::MsoTriState* FrameSlides/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_FrameSlides(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FrameSlides(Office_2k::MsoTriState FrameSlides/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NumberOfCopies(int* NumberOfCopies/*[out,retval]*/);
  int             __fastcall get_NumberOfCopies(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_NumberOfCopies(int NumberOfCopies/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OutputType(Powerpoint_2k::PpPrintOutputType* OutputType/*[out,retval]*/);
  Powerpoint_2k::PpPrintOutputType __fastcall get_OutputType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OutputType(Powerpoint_2k::PpPrintOutputType OutputType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PrintHiddenSlides(Office_2k::MsoTriState* PrintHiddenSlides/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_PrintHiddenSlides(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PrintHiddenSlides(Office_2k::MsoTriState PrintHiddenSlides/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PrintInBackground(Office_2k::MsoTriState* PrintInBackground/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_PrintInBackground(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PrintInBackground(Office_2k::MsoTriState PrintInBackground/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RangeType(Powerpoint_2k::PpPrintRangeType* RangeType/*[out,retval]*/);
  Powerpoint_2k::PpPrintRangeType __fastcall get_RangeType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RangeType(Powerpoint_2k::PpPrintRangeType RangeType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Ranges(Powerpoint_2k::PrintRangesPtr* Ranges/*[out,retval]*/);
  Powerpoint_2k::PrintRangesPtr __fastcall get_Ranges(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PrintFontsAsGraphics(Office_2k::MsoTriState* PrintFontsAsGraphics/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_PrintFontsAsGraphics(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PrintFontsAsGraphics(Office_2k::MsoTriState PrintFontsAsGraphics/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideShowName(BSTR* SlideShowName/*[out,retval]*/);
  BSTR            __fastcall get_SlideShowName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SlideShowName(BSTR SlideShowName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActivePrinter(BSTR* ActivePrinter/*[out,retval]*/);
  BSTR            __fastcall get_ActivePrinter(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ActivePrinter(BSTR ActivePrinter/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HandoutOrder(Powerpoint_2k::PpPrintHandoutOrder* HandoutOrder/*[out,retval]*/);
  Powerpoint_2k::PpPrintHandoutOrder __fastcall get_HandoutOrder(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HandoutOrder(Powerpoint_2k::PpPrintHandoutOrder HandoutOrder/*[in]*/);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   Powerpoint_2k::PpPrintColorType PrintColorType = {read = get_PrintColorType, write = set_PrintColorType};
  __property   Office_2k::MsoTriState Collate = {read = get_Collate, write = set_Collate};
  __property   Office_2k::MsoTriState FitToPage = {read = get_FitToPage, write = set_FitToPage};
  __property   Office_2k::MsoTriState FrameSlides = {read = get_FrameSlides, write = set_FrameSlides};
  __property   int             NumberOfCopies = {read = get_NumberOfCopies, write = set_NumberOfCopies};
  __property   Powerpoint_2k::PpPrintOutputType OutputType = {read = get_OutputType, write = set_OutputType};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoTriState PrintHiddenSlides = {read = get_PrintHiddenSlides, write = set_PrintHiddenSlides};
  __property   Office_2k::MsoTriState PrintInBackground = {read = get_PrintInBackground, write = set_PrintInBackground};
  __property   Powerpoint_2k::PpPrintRangeType RangeType = {read = get_RangeType, write = set_RangeType};
  __property   Powerpoint_2k::PrintRangesPtr Ranges = {read = get_Ranges};
  __property   Office_2k::MsoTriState PrintFontsAsGraphics = {read = get_PrintFontsAsGraphics, write = set_PrintFontsAsGraphics};
  __property   BSTR            SlideShowName = {read = get_SlideShowName, write = set_SlideShowName};
  __property   BSTR            ActivePrinter = {read = get_ActivePrinter, write = set_ActivePrinter};
  __property   Powerpoint_2k::PpPrintHandoutOrder HandoutOrder = {read = get_HandoutOrder, write = set_HandoutOrder};
};
typedef PrintOptionsDispT<PrintOptions> PrintOptionsDisp;

typedef TComInterface<PrintRanges>  TCOMPrintRanges;

// *********************************************************************//
// DispIntf:  PrintRanges
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149345E-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PrintRangesDispT : public TAutoDriver<PrintRanges>
{
public:
  PrintRangesDispT(){}

  PrintRangesDispT(PrintRanges *pintf)
  {
    TAutoDriver<PrintRanges>::Bind(pintf, false);
  }

  PrintRangesDispT(PrintRangesPtr pintf)
  {
    TAutoDriver<PrintRanges>::Bind(pintf, true);
  }

  PrintRangesDispT& operator=(PrintRanges *pintf)
  {
    TAutoDriver<PrintRanges>::Bind(pintf, false);
    return *this;
  }

  PrintRangesDispT& operator=(PrintRangesPtr pintf)
  {
    TAutoDriver<PrintRanges>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(int Start/*[in]*/, int End/*[in]*/, 
                                            Powerpoint_2k::PrintRangePtr* Add/*[out,retval]*/);
  Powerpoint_2k::PrintRangePtr __fastcall Add(int Start/*[in]*/, int End/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ClearAll();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(int index/*[in]*/, 
                                             Powerpoint_2k::PrintRangePtr* Item/*[out,retval]*/);
  Powerpoint_2k::PrintRangePtr __fastcall Item(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/);
  TVariant        __fastcall _Index(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef PrintRangesDispT<PrintRanges> PrintRangesDisp;

typedef TComInterface<PrintRange>  TCOMPrintRange;

// *********************************************************************//
// DispIntf:  PrintRange
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149345F-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PrintRangeDispT : public TAutoDriver<PrintRange>
{
public:
  PrintRangeDispT(){}

  PrintRangeDispT(PrintRange *pintf)
  {
    TAutoDriver<PrintRange>::Bind(pintf, false);
  }

  PrintRangeDispT(PrintRangePtr pintf)
  {
    TAutoDriver<PrintRange>::Bind(pintf, true);
  }

  PrintRangeDispT& operator=(PrintRange *pintf)
  {
    TAutoDriver<PrintRange>::Bind(pintf, false);
    return *this;
  }

  PrintRangeDispT& operator=(PrintRangePtr pintf)
  {
    TAutoDriver<PrintRange>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Start(int* Start/*[out,retval]*/);
  int             __fastcall get_Start(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_End(int* End/*[out,retval]*/);
  int             __fastcall get_End(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Start = {read = get_Start};
  __property   int             End = {read = get_End};
};
typedef PrintRangeDispT<PrintRange> PrintRangeDisp;

typedef TComInterface<AddIns>  TCOMAddIns;

// *********************************************************************//
// DispIntf:  AddIns
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493460-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class AddInsDispT : public TAutoDriver<AddIns>
{
public:
  AddInsDispT(){}

  AddInsDispT(AddIns *pintf)
  {
    TAutoDriver<AddIns>::Bind(pintf, false);
  }

  AddInsDispT(AddInsPtr pintf)
  {
    TAutoDriver<AddIns>::Bind(pintf, true);
  }

  AddInsDispT& operator=(AddIns *pintf)
  {
    TAutoDriver<AddIns>::Bind(pintf, false);
    return *this;
  }

  AddInsDispT& operator=(AddInsPtr pintf)
  {
    TAutoDriver<AddIns>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(TVariant* index/*[in]*/, 
                                             Powerpoint_2k::AddInPtr* Item/*[out,retval]*/);
  Powerpoint_2k::AddInPtr __fastcall Item(TVariant* index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(BSTR FileName/*[in]*/, 
                                            Powerpoint_2k::AddInPtr* Add/*[out,retval]*/);
  Powerpoint_2k::AddInPtr __fastcall Add(BSTR FileName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Remove(TVariant* index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/);
  TVariant        __fastcall _Index(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef AddInsDispT<AddIns> AddInsDisp;

typedef TComInterface<AddIn>  TCOMAddIn;

// *********************************************************************//
// DispIntf:  AddIn
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493461-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class AddInDispT : public TAutoDriver<AddIn>
{
public:
  AddInDispT(){}

  AddInDispT(AddIn *pintf)
  {
    TAutoDriver<AddIn>::Bind(pintf, false);
  }

  AddInDispT(AddInPtr pintf)
  {
    TAutoDriver<AddIn>::Bind(pintf, true);
  }

  AddInDispT& operator=(AddIn *pintf)
  {
    TAutoDriver<AddIn>::Bind(pintf, false);
    return *this;
  }

  AddInDispT& operator=(AddInPtr pintf)
  {
    TAutoDriver<AddIn>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FullName(BSTR* FullName/*[out,retval]*/);
  BSTR            __fastcall get_FullName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Path(BSTR* Path/*[out,retval]*/);
  BSTR            __fastcall get_Path(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Registered(Office_2k::MsoTriState* Registered/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Registered(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Registered(Office_2k::MsoTriState Registered/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoLoad(Office_2k::MsoTriState* AutoLoad/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_AutoLoad(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoLoad(Office_2k::MsoTriState AutoLoad/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Loaded(Office_2k::MsoTriState* Loaded/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Loaded(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Loaded(Office_2k::MsoTriState Loaded/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayAlerts(Office_2k::MsoTriState* DisplayAlerts/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_DisplayAlerts(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayAlerts(Office_2k::MsoTriState DisplayAlerts/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RegisteredInHKLM(Office_2k::MsoTriState* RegisteredInHKLM/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_RegisteredInHKLM(void);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            FullName = {read = get_FullName};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Path = {read = get_Path};
  __property   Office_2k::MsoTriState Registered = {read = get_Registered, write = set_Registered};
  __property   Office_2k::MsoTriState AutoLoad = {read = get_AutoLoad, write = set_AutoLoad};
  __property   Office_2k::MsoTriState Loaded = {read = get_Loaded, write = set_Loaded};
  __property   Office_2k::MsoTriState DisplayAlerts = {read = get_DisplayAlerts, write = set_DisplayAlerts};
  __property   Office_2k::MsoTriState RegisteredInHKLM = {read = get_RegisteredInHKLM};
};
typedef AddInDispT<AddIn> AddInDisp;

typedef TComInterface<Presentations>  TCOMPresentations;

// *********************************************************************//
// DispIntf:  Presentations
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493462-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PresentationsDispT : public TAutoDriver<Presentations>
{
public:
  PresentationsDispT(){}

  PresentationsDispT(Presentations *pintf)
  {
    TAutoDriver<Presentations>::Bind(pintf, false);
  }

  PresentationsDispT(PresentationsPtr pintf)
  {
    TAutoDriver<Presentations>::Bind(pintf, true);
  }

  PresentationsDispT& operator=(Presentations *pintf)
  {
    TAutoDriver<Presentations>::Bind(pintf, false);
    return *this;
  }

  PresentationsDispT& operator=(PresentationsPtr pintf)
  {
    TAutoDriver<Presentations>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(TVariantInParam index/*[in]*/, 
                                             Powerpoint_2k::PowerPointPresentationPtr* Item/*[out,retval]*/);
  Powerpoint_2k::PowerPointPresentationPtr __fastcall Item(TVariantInParam index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(Office_2k::MsoTriState WithWindow/*[in,def,opt]*/, 
                                            Powerpoint_2k::PowerPointPresentationPtr* Add/*[out,retval]*/);
  Powerpoint_2k::PowerPointPresentationPtr __fastcall Add(Office_2k::MsoTriState WithWindow/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Open(BSTR FileName/*[in]*/, 
                                             Office_2k::MsoTriState ReadOnly/*[in,def,opt]*/, 
                                             Office_2k::MsoTriState Untitled/*[in,def,opt]*/, 
                                             Office_2k::MsoTriState WithWindow/*[in,def,opt]*/, 
                                             Powerpoint_2k::PowerPointPresentationPtr* Open/*[out,retval]*/);
  Powerpoint_2k::PowerPointPresentationPtr __fastcall Open(BSTR FileName/*[in]*/, 
                                                           Office_2k::MsoTriState ReadOnly/*[in,def,opt]*/, 
                                                           Office_2k::MsoTriState Untitled/*[in,def,opt]*/, 
                                                           Office_2k::MsoTriState WithWindow/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/);
  TVariant        __fastcall _Index(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef PresentationsDispT<Presentations> PresentationsDisp;

typedef TComInterface<PresEvents>  TCOMPresEvents;

// *********************************************************************//
// SmartIntf: TCOM_Presentation
// Interface: _Presentation
// *********************************************************************//
template <class T /* _Presentation */ >
class TCOM_PresentationT : public TComInterface<_Presentation>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_PresentationT() {}
  TCOM_PresentationT(_Presentation *intf, bool addRef = false) : TComInterface<_Presentation>(intf, addRef) {}
  TCOM_PresentationT(const TCOM_PresentationT& src) : TComInterface<_Presentation>(src) {}
  TCOM_PresentationT& operator=(const TCOM_PresentationT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT         __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_SlideMaster(Powerpoint_2k::_MasterPtr* SlideMaster/*[out,retval]*/);
  Powerpoint_2k::_MasterPtr __fastcall get_SlideMaster(void);
  HRESULT         __fastcall get_TitleMaster(Powerpoint_2k::_MasterPtr* TitleMaster/*[out,retval]*/);
  Powerpoint_2k::_MasterPtr __fastcall get_TitleMaster(void);
  HRESULT         __fastcall get_HasTitleMaster(Office_2k::MsoTriState* HasTitleMaster/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_HasTitleMaster(void);
  HRESULT         __fastcall AddTitleMaster(Powerpoint_2k::_MasterPtr* TitleMaster/*[out,retval]*/);
  Powerpoint_2k::_MasterPtr __fastcall AddTitleMaster(void);
  HRESULT         __fastcall ApplyTemplate(BSTR FileName/*[in]*/);
  HRESULT         __fastcall get_TemplateName(BSTR* TemplateName/*[out,retval]*/);
  BSTR            __fastcall get_TemplateName(void);
  HRESULT         __fastcall get_NotesMaster(Powerpoint_2k::_MasterPtr* NotesMaster/*[out,retval]*/);
  Powerpoint_2k::_MasterPtr __fastcall get_NotesMaster(void);
  HRESULT         __fastcall get_HandoutMaster(Powerpoint_2k::_MasterPtr* HandoutMaster/*[out,retval]*/);
  Powerpoint_2k::_MasterPtr __fastcall get_HandoutMaster(void);
  HRESULT         __fastcall get_Slides(Powerpoint_2k::SlidesPtr* Slides/*[out,retval]*/);
  Powerpoint_2k::SlidesPtr __fastcall get_Slides(void);
  HRESULT         __fastcall get_PageSetup(Powerpoint_2k::PageSetupPtr* PageSetup/*[out,retval]*/);
  Powerpoint_2k::PageSetupPtr __fastcall get_PageSetup(void);
  HRESULT         __fastcall get_ColorSchemes(Powerpoint_2k::ColorSchemesPtr* ColorSchemes/*[out,retval]*/);
  Powerpoint_2k::ColorSchemesPtr __fastcall get_ColorSchemes(void);
  HRESULT         __fastcall get_ExtraColors(Powerpoint_2k::ExtraColorsPtr* ExtraColors/*[out,retval]*/);
  Powerpoint_2k::ExtraColorsPtr __fastcall get_ExtraColors(void);
  HRESULT         __fastcall get_SlideShowSettings(Powerpoint_2k::SlideShowSettingsPtr* SlideShowSettings/*[out,retval]*/);
  Powerpoint_2k::SlideShowSettingsPtr __fastcall get_SlideShowSettings(void);
  HRESULT         __fastcall get_Fonts(Powerpoint_2k::FontsPtr* Fonts/*[out,retval]*/);
  Powerpoint_2k::FontsPtr __fastcall get_Fonts(void);
  HRESULT         __fastcall get_Windoz(Powerpoint_2k::DocumentWindowsPtr* Windoz/*[out,retval]*/);
  Powerpoint_2k::DocumentWindowsPtr __fastcall get_Windoz(void);
  HRESULT         __fastcall get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/);
  Powerpoint_2k::TagsPtr __fastcall get_Tags(void);
  HRESULT         __fastcall get_DefaultShape(Powerpoint_2k::ShapePtr* DefaultShape/*[out,retval]*/);
  Powerpoint_2k::ShapePtr __fastcall get_DefaultShape(void);
  HRESULT         __fastcall get_BuiltInDocumentProperties(LPDISPATCH* BuiltInDocumentProperties/*[out,retval]*/);
  LPDISPATCH      __fastcall get_BuiltInDocumentProperties(void);
  HRESULT         __fastcall get_CustomDocumentProperties(LPDISPATCH* CustomDocumentProperties/*[out,retval]*/);
  LPDISPATCH      __fastcall get_CustomDocumentProperties(void);
  HRESULT         __fastcall get_VBProject(Vbide_2k::VBProjectPtr* VBProject/*[out,retval]*/);
  Vbide_2k::VBProjectPtr __fastcall get_VBProject(void);
  HRESULT         __fastcall get_ReadOnly(Office_2k::MsoTriState* ReadOnly/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_ReadOnly(void);
  HRESULT         __fastcall get_FullName(BSTR* FullName/*[out,retval]*/);
  BSTR            __fastcall get_FullName(void);
  HRESULT         __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall get_Path(BSTR* Path/*[out,retval]*/);
  BSTR            __fastcall get_Path(void);
  HRESULT         __fastcall get_Saved(Office_2k::MsoTriState* Saved/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Saved(void);
  HRESULT         __fastcall set_Saved(Office_2k::MsoTriState Saved/*[in]*/);
  HRESULT         __fastcall get_LayoutDirection(Powerpoint_2k::PpDirection* LayoutDirection/*[out,retval]*/);
  Powerpoint_2k::PpDirection __fastcall get_LayoutDirection(void);
  HRESULT         __fastcall set_LayoutDirection(Powerpoint_2k::PpDirection LayoutDirection/*[in]*/);
  HRESULT         __fastcall NewWindow(Powerpoint_2k::DocumentWindowPtr* NewWindow/*[out,retval]*/);
  Powerpoint_2k::DocumentWindowPtr __fastcall NewWindow(void);
  HRESULT         __fastcall FollowHyperlink(BSTR Address/*[in]*/, BSTR SubAddress/*[in,def,opt]*/, 
                                             TOLEBOOL NewWindow/*[in,def,opt]*/, 
                                             TOLEBOOL AddHistory/*[in,def,opt]*/, 
                                             BSTR ExtraInfo/*[in,def,opt]*/, 
                                             Office_2k::MsoExtraInfoMethod Method/*[in,def,opt]*/, 
                                             BSTR HeaderInfo/*[in,def,opt]*/);
  HRESULT         __fastcall AddToFavorites(void);
  HRESULT         __fastcall Unused(void);
  HRESULT         __fastcall get_PrintOptions(Powerpoint_2k::PrintOptionsPtr* PrintOptions/*[out,retval]*/);
  Powerpoint_2k::PrintOptionsPtr __fastcall get_PrintOptions(void);
  HRESULT         __fastcall PrintOut(int From/*[in,def,opt]*/, int To/*[in,def,opt]*/, 
                                      BSTR PrintToFile/*[in,def,opt]*/, int Copies/*[in,def,opt]*/, 
                                      Office_2k::MsoTriState Collate/*[in,def,opt]*/);
  HRESULT         __fastcall Save(void);
  HRESULT         __fastcall SaveAs(BSTR FileName/*[in]*/, 
                                    Powerpoint_2k::PpSaveAsFileType FileFormat/*[in,def,opt]*/, 
                                    Office_2k::MsoTriState EmbedTrueTypeFonts/*[in,def,opt]*/);
  HRESULT         __fastcall SaveCopyAs(BSTR FileName/*[in]*/, 
                                        Powerpoint_2k::PpSaveAsFileType FileFormat/*[in,def,opt]*/, 
                                        Office_2k::MsoTriState EmbedTrueTypeFonts/*[in,def,opt]*/);
  HRESULT         __fastcall Export(BSTR Path/*[in]*/, BSTR FilterName/*[in]*/, 
                                    int ScaleWidth/*[in,def,opt]*/, int ScaleHeight/*[in,def,opt]*/);
  HRESULT         __fastcall Close(void);
  HRESULT         __fastcall SetUndoText(BSTR Text/*[in]*/);
  HRESULT         __fastcall get_Container(LPDISPATCH* Container/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Container(void);
  HRESULT         __fastcall get_DisplayComments(Office_2k::MsoTriState* DisplayComments/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_DisplayComments(void);
  HRESULT         __fastcall set_DisplayComments(Office_2k::MsoTriState DisplayComments/*[in]*/);
  HRESULT         __fastcall get_FarEastLineBreakLevel(Powerpoint_2k::PpFarEastLineBreakLevel* FarEastLineBreakLevel/*[out,retval]*/);
  Powerpoint_2k::PpFarEastLineBreakLevel __fastcall get_FarEastLineBreakLevel(void);
  HRESULT         __fastcall set_FarEastLineBreakLevel(Powerpoint_2k::PpFarEastLineBreakLevel FarEastLineBreakLevel/*[in]*/);
  HRESULT         __fastcall get_NoLineBreakBefore(BSTR* NoLineBreakBefore/*[out,retval]*/);
  BSTR            __fastcall get_NoLineBreakBefore(void);
  HRESULT         __fastcall set_NoLineBreakBefore(BSTR NoLineBreakBefore/*[in]*/);
  HRESULT         __fastcall get_NoLineBreakAfter(BSTR* NoLineBreakAfter/*[out,retval]*/);
  BSTR            __fastcall get_NoLineBreakAfter(void);
  HRESULT         __fastcall set_NoLineBreakAfter(BSTR NoLineBreakAfter/*[in]*/);
  HRESULT         __fastcall UpdateLinks(void);
  HRESULT         __fastcall get_SlideShowWindow(Powerpoint_2k::SlideShowWindowPtr* SlideShowWindow/*[out,retval]*/);
  Powerpoint_2k::SlideShowWindowPtr __fastcall get_SlideShowWindow(void);
  HRESULT         __fastcall get_FarEastLineBreakLanguage(Office_2k::MsoFarEastLineBreakLanguageID* FarEastLineBreakLanguage/*[out,retval]*/);
  Office_2k::MsoFarEastLineBreakLanguageID __fastcall get_FarEastLineBreakLanguage(void);
  HRESULT         __fastcall set_FarEastLineBreakLanguage(Office_2k::MsoFarEastLineBreakLanguageID FarEastLineBreakLanguage/*[in]*/);
  HRESULT         __fastcall WebPagePreview(void);
  HRESULT         __fastcall get_DefaultLanguageID(Office_2k::MsoLanguageID* DefaultLanguageID/*[out,retval]*/);
  Office_2k::MsoLanguageID __fastcall get_DefaultLanguageID(void);
  HRESULT         __fastcall set_DefaultLanguageID(Office_2k::MsoLanguageID DefaultLanguageID/*[in]*/);
  HRESULT         __fastcall get_CommandBars(Office_2k::CommandBarsPtr* CommandBars/*[out,retval]*/);
  Office_2k::CommandBarsPtr __fastcall get_CommandBars(void);
  HRESULT         __fastcall get_PublishObjects(Powerpoint_2k::PublishObjectsPtr* PublishObjects/*[out,retval]*/);
  Powerpoint_2k::PublishObjectsPtr __fastcall get_PublishObjects(void);
  HRESULT         __fastcall get_WebOptions(Powerpoint_2k::WebOptionsPtr* WebOptions/*[out,retval]*/);
  Powerpoint_2k::WebOptionsPtr __fastcall get_WebOptions(void);
  HRESULT         __fastcall get_HTMLProject(Office_2k::HTMLProjectPtr* HTMLProject/*[out,retval]*/);
  Office_2k::HTMLProjectPtr __fastcall get_HTMLProject(void);
  HRESULT         __fastcall ReloadAs(Office_2k::MsoEncoding cp/*[in]*/);
  HRESULT         __fastcall MakeIntoTemplate(Office_2k::MsoTriState IsDesignTemplate/*[in]*/);
  HRESULT         __fastcall get_EnvelopeVisible(Office_2k::MsoTriState* EnvelopeVisible/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_EnvelopeVisible(void);
  HRESULT         __fastcall set_EnvelopeVisible(Office_2k::MsoTriState EnvelopeVisible/*[in]*/);
  HRESULT         __fastcall sblt(BSTR s/*[in]*/);
  HRESULT         __fastcall get_VBASigned(Office_2k::MsoTriState* VBASigned/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_VBASigned(void);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::_MasterPtr SlideMaster = {read = get_SlideMaster};
  __property   Powerpoint_2k::_MasterPtr TitleMaster = {read = get_TitleMaster};
  __property   Office_2k::MsoTriState HasTitleMaster = {read = get_HasTitleMaster};
  __property   BSTR            TemplateName = {read = get_TemplateName};
  __property   Powerpoint_2k::_MasterPtr NotesMaster = {read = get_NotesMaster};
  __property   Powerpoint_2k::_MasterPtr HandoutMaster = {read = get_HandoutMaster};
  __property   Powerpoint_2k::SlidesPtr Slides = {read = get_Slides};
  __property   Powerpoint_2k::PageSetupPtr PageSetup = {read = get_PageSetup};
  __property   Powerpoint_2k::ColorSchemesPtr ColorSchemes = {read = get_ColorSchemes};
  __property   Powerpoint_2k::ExtraColorsPtr ExtraColors = {read = get_ExtraColors};
  __property   Powerpoint_2k::SlideShowSettingsPtr SlideShowSettings = {read = get_SlideShowSettings};
  __property   Powerpoint_2k::FontsPtr Fonts = {read = get_Fonts};
  __property   Powerpoint_2k::DocumentWindowsPtr Windoz = {read = get_Windoz};
  __property   Powerpoint_2k::TagsPtr Tags = {read = get_Tags};
  __property   Powerpoint_2k::ShapePtr DefaultShape = {read = get_DefaultShape};
  __property   LPDISPATCH      BuiltInDocumentProperties = {read = get_BuiltInDocumentProperties};
  __property   LPDISPATCH      CustomDocumentProperties = {read = get_CustomDocumentProperties};
  __property   Vbide_2k::VBProjectPtr VBProject = {read = get_VBProject};
  __property   Office_2k::MsoTriState ReadOnly = {read = get_ReadOnly};
  __property   BSTR            FullName = {read = get_FullName};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Path = {read = get_Path};
  __property   Office_2k::MsoTriState Saved = {read = get_Saved, write = set_Saved};
  __property   Powerpoint_2k::PpDirection LayoutDirection = {read = get_LayoutDirection, write = set_LayoutDirection};
  __property   Powerpoint_2k::PrintOptionsPtr PrintOptions = {read = get_PrintOptions};
  __property   LPDISPATCH      Container = {read = get_Container};
  __property   Office_2k::MsoTriState DisplayComments = {read = get_DisplayComments, write = set_DisplayComments};
  __property   Powerpoint_2k::PpFarEastLineBreakLevel FarEastLineBreakLevel = {read = get_FarEastLineBreakLevel, write = set_FarEastLineBreakLevel};
  __property   BSTR            NoLineBreakBefore = {read = get_NoLineBreakBefore, write = set_NoLineBreakBefore};
  __property   BSTR            NoLineBreakAfter = {read = get_NoLineBreakAfter, write = set_NoLineBreakAfter};
  __property   Powerpoint_2k::SlideShowWindowPtr SlideShowWindow = {read = get_SlideShowWindow};
  __property   Office_2k::MsoFarEastLineBreakLanguageID FarEastLineBreakLanguage = {read = get_FarEastLineBreakLanguage, write = set_FarEastLineBreakLanguage};
  __property   Office_2k::MsoLanguageID DefaultLanguageID = {read = get_DefaultLanguageID, write = set_DefaultLanguageID};
  __property   Office_2k::CommandBarsPtr CommandBars = {read = get_CommandBars};
  __property   Powerpoint_2k::PublishObjectsPtr PublishObjects = {read = get_PublishObjects};
  __property   Powerpoint_2k::WebOptionsPtr WebOptions = {read = get_WebOptions};
  __property   Office_2k::HTMLProjectPtr HTMLProject = {read = get_HTMLProject};
  __property   Office_2k::MsoTriState EnvelopeVisible = {read = get_EnvelopeVisible, write = set_EnvelopeVisible};
  __property   Office_2k::MsoTriState VBASigned = {read = get_VBASigned};
};
typedef TCOM_PresentationT<_Presentation> TCOM_Presentation;

// *********************************************************************//
// DispIntf:  _Presentation
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149349D-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class _PresentationDispT : public TAutoDriver<_Presentation>
{
public:
  _PresentationDispT(){}

  _PresentationDispT(_Presentation *pintf)
  {
    TAutoDriver<_Presentation>::Bind(pintf, false);
  }

  _PresentationDispT(_PresentationPtr pintf)
  {
    TAutoDriver<_Presentation>::Bind(pintf, true);
  }

  _PresentationDispT& operator=(_Presentation *pintf)
  {
    TAutoDriver<_Presentation>::Bind(pintf, false);
    return *this;
  }

  _PresentationDispT& operator=(_PresentationPtr pintf)
  {
    TAutoDriver<_Presentation>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_PowerPointPresentation));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_PowerPointPresentation);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideMaster(Powerpoint_2k::_MasterPtr* SlideMaster/*[out,retval]*/);
  Powerpoint_2k::_MasterPtr __fastcall get_SlideMaster(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TitleMaster(Powerpoint_2k::_MasterPtr* TitleMaster/*[out,retval]*/);
  Powerpoint_2k::_MasterPtr __fastcall get_TitleMaster(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasTitleMaster(Office_2k::MsoTriState* HasTitleMaster/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_HasTitleMaster(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddTitleMaster(Powerpoint_2k::_MasterPtr* TitleMaster/*[out,retval]*/);
  Powerpoint_2k::_MasterPtr __fastcall AddTitleMaster(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ApplyTemplate(BSTR FileName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TemplateName(BSTR* TemplateName/*[out,retval]*/);
  BSTR            __fastcall get_TemplateName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NotesMaster(Powerpoint_2k::_MasterPtr* NotesMaster/*[out,retval]*/);
  Powerpoint_2k::_MasterPtr __fastcall get_NotesMaster(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HandoutMaster(Powerpoint_2k::_MasterPtr* HandoutMaster/*[out,retval]*/);
  Powerpoint_2k::_MasterPtr __fastcall get_HandoutMaster(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Slides(Powerpoint_2k::SlidesPtr* Slides/*[out,retval]*/);
  Powerpoint_2k::SlidesPtr __fastcall get_Slides(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PageSetup(Powerpoint_2k::PageSetupPtr* PageSetup/*[out,retval]*/);
  Powerpoint_2k::PageSetupPtr __fastcall get_PageSetup(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColorSchemes(Powerpoint_2k::ColorSchemesPtr* ColorSchemes/*[out,retval]*/);
  Powerpoint_2k::ColorSchemesPtr __fastcall get_ColorSchemes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ExtraColors(Powerpoint_2k::ExtraColorsPtr* ExtraColors/*[out,retval]*/);
  Powerpoint_2k::ExtraColorsPtr __fastcall get_ExtraColors(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideShowSettings(Powerpoint_2k::SlideShowSettingsPtr* SlideShowSettings/*[out,retval]*/);
  Powerpoint_2k::SlideShowSettingsPtr __fastcall get_SlideShowSettings(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Fonts(Powerpoint_2k::FontsPtr* Fonts/*[out,retval]*/);
  Powerpoint_2k::FontsPtr __fastcall get_Fonts(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Windoz(Powerpoint_2k::DocumentWindowsPtr* Windoz/*[out,retval]*/);
  Powerpoint_2k::DocumentWindowsPtr __fastcall get_Windoz(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/);
  Powerpoint_2k::TagsPtr __fastcall get_Tags(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DefaultShape(Powerpoint_2k::ShapePtr* DefaultShape/*[out,retval]*/);
  Powerpoint_2k::ShapePtr __fastcall get_DefaultShape(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BuiltInDocumentProperties(LPDISPATCH* BuiltInDocumentProperties/*[out,retval]*/);
  LPDISPATCH      __fastcall get_BuiltInDocumentProperties(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CustomDocumentProperties(LPDISPATCH* CustomDocumentProperties/*[out,retval]*/);
  LPDISPATCH      __fastcall get_CustomDocumentProperties(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VBProject(Vbide_2k::VBProjectPtr* VBProject/*[out,retval]*/);
  Vbide_2k::VBProjectPtr __fastcall get_VBProject(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ReadOnly(Office_2k::MsoTriState* ReadOnly/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_ReadOnly(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FullName(BSTR* FullName/*[out,retval]*/);
  BSTR            __fastcall get_FullName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Path(BSTR* Path/*[out,retval]*/);
  BSTR            __fastcall get_Path(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Saved(Office_2k::MsoTriState* Saved/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Saved(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Saved(Office_2k::MsoTriState Saved/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LayoutDirection(Powerpoint_2k::PpDirection* LayoutDirection/*[out,retval]*/);
  Powerpoint_2k::PpDirection __fastcall get_LayoutDirection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LayoutDirection(Powerpoint_2k::PpDirection LayoutDirection/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall NewWindow(Powerpoint_2k::DocumentWindowPtr* NewWindow/*[out,retval]*/);
  Powerpoint_2k::DocumentWindowPtr __fastcall NewWindow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall FollowHyperlink(BSTR Address/*[in]*/, 
                                                        BSTR SubAddress/*[in,def,opt]*/, 
                                                        TOLEBOOL NewWindow/*[in,def,opt]*/, 
                                                        TOLEBOOL AddHistory/*[in,def,opt]*/, 
                                                        BSTR ExtraInfo/*[in,def,opt]*/, 
                                                        Office_2k::MsoExtraInfoMethod Method/*[in,def,opt]*/
                                                        , BSTR HeaderInfo/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddToFavorites();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Unused();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PrintOptions(Powerpoint_2k::PrintOptionsPtr* PrintOptions/*[out,retval]*/);
  Powerpoint_2k::PrintOptionsPtr __fastcall get_PrintOptions(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PrintOut(int From/*[in,def,opt]*/, int To/*[in,def,opt]*/, 
                                                 BSTR PrintToFile/*[in,def,opt]*/, 
                                                 int Copies/*[in,def,opt]*/, 
                                                 Office_2k::MsoTriState Collate/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Save();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SaveAs(BSTR FileName/*[in]*/, 
                                               Powerpoint_2k::PpSaveAsFileType FileFormat/*[in,def,opt]*/
                                               , 
                                               Office_2k::MsoTriState EmbedTrueTypeFonts/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SaveCopyAs(BSTR FileName/*[in]*/, 
                                                   Powerpoint_2k::PpSaveAsFileType FileFormat/*[in,def,opt]*/
                                                   , 
                                                   Office_2k::MsoTriState EmbedTrueTypeFonts/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Export(BSTR Path/*[in]*/, BSTR FilterName/*[in]*/, 
                                               int ScaleWidth/*[in,def,opt]*/, 
                                               int ScaleHeight/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Close();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetUndoText(BSTR Text/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Container(LPDISPATCH* Container/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Container(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayComments(Office_2k::MsoTriState* DisplayComments/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_DisplayComments(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayComments(Office_2k::MsoTriState DisplayComments/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FarEastLineBreakLevel(Powerpoint_2k::PpFarEastLineBreakLevel* FarEastLineBreakLevel/*[out,retval]*/);
  Powerpoint_2k::PpFarEastLineBreakLevel __fastcall get_FarEastLineBreakLevel(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FarEastLineBreakLevel(Powerpoint_2k::PpFarEastLineBreakLevel FarEastLineBreakLevel/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NoLineBreakBefore(BSTR* NoLineBreakBefore/*[out,retval]*/);
  BSTR            __fastcall get_NoLineBreakBefore(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_NoLineBreakBefore(BSTR NoLineBreakBefore/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NoLineBreakAfter(BSTR* NoLineBreakAfter/*[out,retval]*/);
  BSTR            __fastcall get_NoLineBreakAfter(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_NoLineBreakAfter(BSTR NoLineBreakAfter/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall UpdateLinks();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideShowWindow(Powerpoint_2k::SlideShowWindowPtr* SlideShowWindow/*[out,retval]*/);
  Powerpoint_2k::SlideShowWindowPtr __fastcall get_SlideShowWindow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FarEastLineBreakLanguage(Office_2k::MsoFarEastLineBreakLanguageID* FarEastLineBreakLanguage/*[out,retval]*/);
  Office_2k::MsoFarEastLineBreakLanguageID __fastcall get_FarEastLineBreakLanguage(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FarEastLineBreakLanguage(Office_2k::MsoFarEastLineBreakLanguageID FarEastLineBreakLanguage/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall WebPagePreview();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DefaultLanguageID(Office_2k::MsoLanguageID* DefaultLanguageID/*[out,retval]*/);
  Office_2k::MsoLanguageID __fastcall get_DefaultLanguageID(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DefaultLanguageID(Office_2k::MsoLanguageID DefaultLanguageID/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CommandBars(Office_2k::CommandBarsPtr* CommandBars/*[out,retval]*/);
  Office_2k::CommandBarsPtr __fastcall get_CommandBars(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PublishObjects(Powerpoint_2k::PublishObjectsPtr* PublishObjects/*[out,retval]*/);
  Powerpoint_2k::PublishObjectsPtr __fastcall get_PublishObjects(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_WebOptions(Powerpoint_2k::WebOptionsPtr* WebOptions/*[out,retval]*/);
  Powerpoint_2k::WebOptionsPtr __fastcall get_WebOptions(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HTMLProject(Office_2k::HTMLProjectPtr* HTMLProject/*[out,retval]*/);
  Office_2k::HTMLProjectPtr __fastcall get_HTMLProject(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ReloadAs(Office_2k::MsoEncoding cp/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall MakeIntoTemplate(Office_2k::MsoTriState IsDesignTemplate/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EnvelopeVisible(Office_2k::MsoTriState* EnvelopeVisible/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_EnvelopeVisible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EnvelopeVisible(Office_2k::MsoTriState EnvelopeVisible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall sblt(BSTR s/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VBASigned(Office_2k::MsoTriState* VBASigned/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_VBASigned(void);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::_MasterPtr SlideMaster = {read = get_SlideMaster};
  __property   Powerpoint_2k::_MasterPtr TitleMaster = {read = get_TitleMaster};
  __property   Office_2k::MsoTriState HasTitleMaster = {read = get_HasTitleMaster};
  __property   BSTR            TemplateName = {read = get_TemplateName};
  __property   Powerpoint_2k::_MasterPtr NotesMaster = {read = get_NotesMaster};
  __property   Powerpoint_2k::_MasterPtr HandoutMaster = {read = get_HandoutMaster};
  __property   Powerpoint_2k::SlidesPtr Slides = {read = get_Slides};
  __property   Powerpoint_2k::PageSetupPtr PageSetup = {read = get_PageSetup};
  __property   Powerpoint_2k::ColorSchemesPtr ColorSchemes = {read = get_ColorSchemes};
  __property   Powerpoint_2k::ExtraColorsPtr ExtraColors = {read = get_ExtraColors};
  __property   Powerpoint_2k::SlideShowSettingsPtr SlideShowSettings = {read = get_SlideShowSettings};
  __property   Powerpoint_2k::FontsPtr Fonts = {read = get_Fonts};
  __property   Powerpoint_2k::DocumentWindowsPtr Windoz = {read = get_Windoz};
  __property   Powerpoint_2k::TagsPtr Tags = {read = get_Tags};
  __property   Powerpoint_2k::ShapePtr DefaultShape = {read = get_DefaultShape};
  __property   LPDISPATCH      BuiltInDocumentProperties = {read = get_BuiltInDocumentProperties};
  __property   LPDISPATCH      CustomDocumentProperties = {read = get_CustomDocumentProperties};
  __property   Vbide_2k::VBProjectPtr VBProject = {read = get_VBProject};
  __property   Office_2k::MsoTriState ReadOnly = {read = get_ReadOnly};
  __property   BSTR            FullName = {read = get_FullName};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Path = {read = get_Path};
  __property   Office_2k::MsoTriState Saved = {read = get_Saved, write = set_Saved};
  __property   Powerpoint_2k::PpDirection LayoutDirection = {read = get_LayoutDirection, write = set_LayoutDirection};
  __property   Powerpoint_2k::PrintOptionsPtr PrintOptions = {read = get_PrintOptions};
  __property   LPDISPATCH      Container = {read = get_Container};
  __property   Office_2k::MsoTriState DisplayComments = {read = get_DisplayComments, write = set_DisplayComments};
  __property   Powerpoint_2k::PpFarEastLineBreakLevel FarEastLineBreakLevel = {read = get_FarEastLineBreakLevel, write = set_FarEastLineBreakLevel};
  __property   BSTR            NoLineBreakBefore = {read = get_NoLineBreakBefore, write = set_NoLineBreakBefore};
  __property   BSTR            NoLineBreakAfter = {read = get_NoLineBreakAfter, write = set_NoLineBreakAfter};
  __property   Powerpoint_2k::SlideShowWindowPtr SlideShowWindow = {read = get_SlideShowWindow};
  __property   Office_2k::MsoFarEastLineBreakLanguageID FarEastLineBreakLanguage = {read = get_FarEastLineBreakLanguage, write = set_FarEastLineBreakLanguage};
  __property   Office_2k::MsoLanguageID DefaultLanguageID = {read = get_DefaultLanguageID, write = set_DefaultLanguageID};
  __property   Office_2k::CommandBarsPtr CommandBars = {read = get_CommandBars};
  __property   Powerpoint_2k::PublishObjectsPtr PublishObjects = {read = get_PublishObjects};
  __property   Powerpoint_2k::WebOptionsPtr WebOptions = {read = get_WebOptions};
  __property   Office_2k::HTMLProjectPtr HTMLProject = {read = get_HTMLProject};
  __property   Office_2k::MsoTriState EnvelopeVisible = {read = get_EnvelopeVisible, write = set_EnvelopeVisible};
  __property   Office_2k::MsoTriState VBASigned = {read = get_VBASigned};
};
typedef _PresentationDispT<_Presentation> _PresentationDisp;

typedef TComInterface<Hyperlinks>  TCOMHyperlinks;

// *********************************************************************//
// DispIntf:  Hyperlinks
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493464-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class HyperlinksDispT : public TAutoDriver<Hyperlinks>
{
public:
  HyperlinksDispT(){}

  HyperlinksDispT(Hyperlinks *pintf)
  {
    TAutoDriver<Hyperlinks>::Bind(pintf, false);
  }

  HyperlinksDispT(HyperlinksPtr pintf)
  {
    TAutoDriver<Hyperlinks>::Bind(pintf, true);
  }

  HyperlinksDispT& operator=(Hyperlinks *pintf)
  {
    TAutoDriver<Hyperlinks>::Bind(pintf, false);
    return *this;
  }

  HyperlinksDispT& operator=(HyperlinksPtr pintf)
  {
    TAutoDriver<Hyperlinks>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(int index/*[in]*/, 
                                             Powerpoint_2k::HyperlinkPtr* Item/*[out,retval]*/);
  Powerpoint_2k::HyperlinkPtr __fastcall Item(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/);
  TVariant        __fastcall _Index(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef HyperlinksDispT<Hyperlinks> HyperlinksDisp;

typedef TComInterface<Hyperlink>  TCOMHyperlink;

// *********************************************************************//
// DispIntf:  Hyperlink
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493465-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class HyperlinkDispT : public TAutoDriver<Hyperlink>
{
public:
  HyperlinkDispT(){}

  HyperlinkDispT(Hyperlink *pintf)
  {
    TAutoDriver<Hyperlink>::Bind(pintf, false);
  }

  HyperlinkDispT(HyperlinkPtr pintf)
  {
    TAutoDriver<Hyperlink>::Bind(pintf, true);
  }

  HyperlinkDispT& operator=(Hyperlink *pintf)
  {
    TAutoDriver<Hyperlink>::Bind(pintf, false);
    return *this;
  }

  HyperlinkDispT& operator=(HyperlinkPtr pintf)
  {
    TAutoDriver<Hyperlink>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Office_2k::MsoHyperlinkType* Type/*[out,retval]*/);
  Office_2k::MsoHyperlinkType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Address(BSTR* Address/*[out,retval]*/);
  BSTR            __fastcall get_Address(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Address(BSTR Address/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SubAddress(BSTR* SubAddress/*[out,retval]*/);
  BSTR            __fastcall get_SubAddress(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SubAddress(BSTR SubAddress/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddToFavorites();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EmailSubject(BSTR* EmailSubject/*[out,retval]*/);
  BSTR            __fastcall get_EmailSubject(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EmailSubject(BSTR EmailSubject/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ScreenTip(BSTR* ScreenTip/*[out,retval]*/);
  BSTR            __fastcall get_ScreenTip(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ScreenTip(BSTR ScreenTip/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextToDisplay(BSTR* TextToDisplay/*[out,retval]*/);
  BSTR            __fastcall get_TextToDisplay(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TextToDisplay(BSTR TextToDisplay/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowandReturn(Office_2k::MsoTriState* ShowandReturn/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_ShowandReturn(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowandReturn(Office_2k::MsoTriState ShowandReturn/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Follow();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CreateNewDocument(BSTR FileName/*[in]*/, 
                                                          Office_2k::MsoTriState EditNow/*[in]*/, 
                                                          Office_2k::MsoTriState Overwrite/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoHyperlinkType Type = {read = get_Type};
  __property   BSTR            Address = {read = get_Address, write = set_Address};
  __property   BSTR            SubAddress = {read = get_SubAddress, write = set_SubAddress};
  __property   BSTR            EmailSubject = {read = get_EmailSubject, write = set_EmailSubject};
  __property   BSTR            ScreenTip = {read = get_ScreenTip, write = set_ScreenTip};
  __property   BSTR            TextToDisplay = {read = get_TextToDisplay, write = set_TextToDisplay};
  __property   Office_2k::MsoTriState ShowandReturn = {read = get_ShowandReturn, write = set_ShowandReturn};
};
typedef HyperlinkDispT<Hyperlink> HyperlinkDisp;

typedef TComInterface<PageSetup>  TCOMPageSetup;

// *********************************************************************//
// DispIntf:  PageSetup
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493466-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PageSetupDispT : public TAutoDriver<PageSetup>
{
public:
  PageSetupDispT(){}

  PageSetupDispT(PageSetup *pintf)
  {
    TAutoDriver<PageSetup>::Bind(pintf, false);
  }

  PageSetupDispT(PageSetupPtr pintf)
  {
    TAutoDriver<PageSetup>::Bind(pintf, true);
  }

  PageSetupDispT& operator=(PageSetup *pintf)
  {
    TAutoDriver<PageSetup>::Bind(pintf, false);
    return *this;
  }

  PageSetupDispT& operator=(PageSetupPtr pintf)
  {
    TAutoDriver<PageSetup>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FirstSlideNumber(int* FirstSlideNumber/*[out,retval]*/);
  int             __fastcall get_FirstSlideNumber(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FirstSlideNumber(int FirstSlideNumber/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideHeight(float* SlideHeight/*[out,retval]*/);
  float           __fastcall get_SlideHeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SlideHeight(float SlideHeight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideWidth(float* SlideWidth/*[out,retval]*/);
  float           __fastcall get_SlideWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SlideWidth(float SlideWidth/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideSize(Powerpoint_2k::PpSlideSizeType* SlideSize/*[out,retval]*/);
  Powerpoint_2k::PpSlideSizeType __fastcall get_SlideSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SlideSize(Powerpoint_2k::PpSlideSizeType SlideSize/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NotesOrientation(Office_2k::MsoOrientation* NotesOrientation/*[out,retval]*/);
  Office_2k::MsoOrientation __fastcall get_NotesOrientation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_NotesOrientation(Office_2k::MsoOrientation NotesOrientation/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideOrientation(Office_2k::MsoOrientation* SlideOrientation/*[out,retval]*/);
  Office_2k::MsoOrientation __fastcall get_SlideOrientation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SlideOrientation(Office_2k::MsoOrientation SlideOrientation/*[in]*/);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             FirstSlideNumber = {read = get_FirstSlideNumber, write = set_FirstSlideNumber};
  __property   float           SlideHeight = {read = get_SlideHeight, write = set_SlideHeight};
  __property   float           SlideWidth = {read = get_SlideWidth, write = set_SlideWidth};
  __property   Powerpoint_2k::PpSlideSizeType SlideSize = {read = get_SlideSize, write = set_SlideSize};
  __property   Office_2k::MsoOrientation NotesOrientation = {read = get_NotesOrientation, write = set_NotesOrientation};
  __property   Office_2k::MsoOrientation SlideOrientation = {read = get_SlideOrientation, write = set_SlideOrientation};
};
typedef PageSetupDispT<PageSetup> PageSetupDisp;

typedef TComInterface<Fonts>  TCOMFonts;

// *********************************************************************//
// DispIntf:  Fonts
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493467-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class FontsDispT : public TAutoDriver<Fonts>
{
public:
  FontsDispT(){}

  FontsDispT(Fonts *pintf)
  {
    TAutoDriver<Fonts>::Bind(pintf, false);
  }

  FontsDispT(FontsPtr pintf)
  {
    TAutoDriver<Fonts>::Bind(pintf, true);
  }

  FontsDispT& operator=(Fonts *pintf)
  {
    TAutoDriver<Fonts>::Bind(pintf, false);
    return *this;
  }

  FontsDispT& operator=(FontsPtr pintf)
  {
    TAutoDriver<Fonts>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(TVariantInParam index/*[in]*/, 
                                             Powerpoint_2k::FontPtr* Item/*[out,retval]*/);
  Powerpoint_2k::FontPtr __fastcall Item(TVariantInParam index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Replace(BSTR Original/*[in]*/, BSTR Replacement/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/);
  TVariant        __fastcall _Index(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef FontsDispT<Fonts> FontsDisp;

typedef TComInterface<ExtraColors>  TCOMExtraColors;

// *********************************************************************//
// DispIntf:  ExtraColors
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493468-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class ExtraColorsDispT : public TAutoDriver<ExtraColors>
{
public:
  ExtraColorsDispT(){}

  ExtraColorsDispT(ExtraColors *pintf)
  {
    TAutoDriver<ExtraColors>::Bind(pintf, false);
  }

  ExtraColorsDispT(ExtraColorsPtr pintf)
  {
    TAutoDriver<ExtraColors>::Bind(pintf, true);
  }

  ExtraColorsDispT& operator=(ExtraColors *pintf)
  {
    TAutoDriver<ExtraColors>::Bind(pintf, false);
    return *this;
  }

  ExtraColorsDispT& operator=(ExtraColorsPtr pintf)
  {
    TAutoDriver<ExtraColors>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(int index/*[in]*/, 
                                             Office_2k::MsoRGBType* Item/*[out,retval]*/);
  Office_2k::MsoRGBType __fastcall Item(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(Office_2k::MsoRGBType Type/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/);
  TVariant        __fastcall _Index(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef ExtraColorsDispT<ExtraColors> ExtraColorsDisp;

typedef TComInterface<Slides>  TCOMSlides;

// *********************************************************************//
// DispIntf:  Slides
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493469-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class SlidesDispT : public TAutoDriver<Slides>
{
public:
  SlidesDispT(){}

  SlidesDispT(Slides *pintf)
  {
    TAutoDriver<Slides>::Bind(pintf, false);
  }

  SlidesDispT(SlidesPtr pintf)
  {
    TAutoDriver<Slides>::Bind(pintf, true);
  }

  SlidesDispT& operator=(Slides *pintf)
  {
    TAutoDriver<Slides>::Bind(pintf, false);
    return *this;
  }

  SlidesDispT& operator=(SlidesPtr pintf)
  {
    TAutoDriver<Slides>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(TVariantInParam index/*[in]*/, 
                                             Powerpoint_2k::PowerPointSlidePtr* Item/*[out,retval]*/);
  Powerpoint_2k::PowerPointSlidePtr __fastcall Item(TVariantInParam index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall FindBySlideID(long SlideID/*[in]*/, 
                                                      Powerpoint_2k::PowerPointSlidePtr* FindBySlideID/*[out,retval]*/);
  Powerpoint_2k::PowerPointSlidePtr __fastcall FindBySlideID(long SlideID/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(int index/*[in]*/, 
                                            Powerpoint_2k::PpSlideLayout Layout/*[in]*/, 
                                            Powerpoint_2k::PowerPointSlidePtr* Add/*[out,retval]*/);
  Powerpoint_2k::PowerPointSlidePtr __fastcall Add(int index/*[in]*/, 
                                                   Powerpoint_2k::PpSlideLayout Layout/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall InsertFromFile(BSTR FileName/*[in]*/, int index/*[in]*/, 
                                                       int SlideStart/*[in,def,opt]*/, 
                                                       int SlideEnd/*[in,def,opt]*/, 
                                                       int* FromFile/*[out,retval]*/);
  int             __fastcall InsertFromFile(BSTR FileName/*[in]*/, int index/*[in]*/, 
                                            int SlideStart/*[in,def,opt]*/, 
                                            int SlideEnd/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Range(TVariantInParam index/*[in,opt]*/, 
                                              Powerpoint_2k::SlideRangePtr* Range/*[out,retval]*/);
  Powerpoint_2k::SlideRangePtr __fastcall Range(TVariantInParam index/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Paste(int index/*[in,def,opt]*/, 
                                              Powerpoint_2k::SlideRangePtr* Paste/*[out,retval]*/);
  Powerpoint_2k::SlideRangePtr __fastcall Paste(int index/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/);
  TVariant        __fastcall _Index(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef SlidesDispT<Slides> SlidesDisp;

// *********************************************************************//
// SmartIntf: TCOM_Slide
// Interface: _Slide
// *********************************************************************//
template <class T /* _Slide */ >
class TCOM_SlideT : public TComInterface<_Slide>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_SlideT() {}
  TCOM_SlideT(_Slide *intf, bool addRef = false) : TComInterface<_Slide>(intf, addRef) {}
  TCOM_SlideT(const TCOM_SlideT& src) : TComInterface<_Slide>(src) {}
  TCOM_SlideT& operator=(const TCOM_SlideT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT         __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Shapes(Powerpoint_2k::ShapesPtr* Shapes/*[out,retval]*/);
  Powerpoint_2k::ShapesPtr __fastcall get_Shapes(void);
  HRESULT         __fastcall get_HeadersFooters(Powerpoint_2k::HeadersFootersPtr* HeadersFooters/*[out,retval]*/);
  Powerpoint_2k::HeadersFootersPtr __fastcall get_HeadersFooters(void);
  HRESULT         __fastcall get_SlideShowTransition(Powerpoint_2k::SlideShowTransitionPtr* SlideShowTransition/*[out,retval]*/);
  Powerpoint_2k::SlideShowTransitionPtr __fastcall get_SlideShowTransition(void);
  HRESULT         __fastcall get_ColorScheme(Powerpoint_2k::ColorSchemePtr* ColorScheme/*[out,retval]*/);
  Powerpoint_2k::ColorSchemePtr __fastcall get_ColorScheme(void);
  HRESULT         __fastcall set_ColorScheme(Powerpoint_2k::ColorSchemePtr ColorScheme/*[in]*/);
  HRESULT         __fastcall get_Background(Powerpoint_2k::ShapeRangePtr* Background/*[out,retval]*/);
  Powerpoint_2k::ShapeRangePtr __fastcall get_Background(void);
  HRESULT         __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT         __fastcall get_SlideID(long* SlideID/*[out,retval]*/);
  long            __fastcall get_SlideID(void);
  HRESULT         __fastcall get_PrintSteps(int* PrintSteps/*[out,retval]*/);
  int             __fastcall get_PrintSteps(void);
  HRESULT         __fastcall Select(void);
  HRESULT         __fastcall Cut(void);
  HRESULT         __fastcall Copy(void);
  HRESULT         __fastcall get_Layout(Powerpoint_2k::PpSlideLayout* Layout/*[out,retval]*/);
  Powerpoint_2k::PpSlideLayout __fastcall get_Layout(void);
  HRESULT         __fastcall set_Layout(Powerpoint_2k::PpSlideLayout Layout/*[in]*/);
  HRESULT         __fastcall Duplicate(Powerpoint_2k::SlideRangePtr* Duplicate/*[out,retval]*/);
  Powerpoint_2k::SlideRangePtr __fastcall Duplicate(void);
  HRESULT         __fastcall Delete(void);
  HRESULT         __fastcall get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/);
  Powerpoint_2k::TagsPtr __fastcall get_Tags(void);
  HRESULT         __fastcall get_SlideIndex(int* SlideIndex/*[out,retval]*/);
  int             __fastcall get_SlideIndex(void);
  HRESULT         __fastcall get_SlideNumber(int* SlideNumber/*[out,retval]*/);
  int             __fastcall get_SlideNumber(void);
  HRESULT         __fastcall get_DisplayMasterShapes(Office_2k::MsoTriState* DisplayMasterShapes/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_DisplayMasterShapes(void);
  HRESULT         __fastcall set_DisplayMasterShapes(Office_2k::MsoTriState DisplayMasterShapes/*[in]*/);
  HRESULT         __fastcall get_FollowMasterBackground(Office_2k::MsoTriState* FollowMasterBackground/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_FollowMasterBackground(void);
  HRESULT         __fastcall set_FollowMasterBackground(Office_2k::MsoTriState FollowMasterBackground/*[in]*/);
  HRESULT         __fastcall get_NotesPage(Powerpoint_2k::SlideRangePtr* NotesPage/*[out,retval]*/);
  Powerpoint_2k::SlideRangePtr __fastcall get_NotesPage(void);
  HRESULT         __fastcall get_Master(Powerpoint_2k::_MasterPtr* Master/*[out,retval]*/);
  Powerpoint_2k::_MasterPtr __fastcall get_Master(void);
  HRESULT         __fastcall get_Hyperlinks(Powerpoint_2k::HyperlinksPtr* Hyperlinks/*[out,retval]*/);
  Powerpoint_2k::HyperlinksPtr __fastcall get_Hyperlinks(void);
  HRESULT         __fastcall Export(BSTR FileName/*[in]*/, BSTR FilterName/*[in]*/, 
                                    int ScaleWidth/*[in,def,opt]*/, int ScaleHeight/*[in,def,opt]*/);
  HRESULT         __fastcall get_Scripts(Office_2k::ScriptsPtr* Scripts/*[out,retval]*/);
  Office_2k::ScriptsPtr __fastcall get_Scripts(void);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::ShapesPtr Shapes = {read = get_Shapes};
  __property   Powerpoint_2k::HeadersFootersPtr HeadersFooters = {read = get_HeadersFooters};
  __property   Powerpoint_2k::SlideShowTransitionPtr SlideShowTransition = {read = get_SlideShowTransition};
  __property   Powerpoint_2k::ColorSchemePtr ColorScheme = {read = get_ColorScheme, write = set_ColorScheme};
  __property   Powerpoint_2k::ShapeRangePtr Background = {read = get_Background};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   long            SlideID = {read = get_SlideID};
  __property   int             PrintSteps = {read = get_PrintSteps};
  __property   Powerpoint_2k::PpSlideLayout Layout = {read = get_Layout, write = set_Layout};
  __property   Powerpoint_2k::TagsPtr Tags = {read = get_Tags};
  __property   int             SlideIndex = {read = get_SlideIndex};
  __property   int             SlideNumber = {read = get_SlideNumber};
  __property   Office_2k::MsoTriState DisplayMasterShapes = {read = get_DisplayMasterShapes, write = set_DisplayMasterShapes};
  __property   Office_2k::MsoTriState FollowMasterBackground = {read = get_FollowMasterBackground, write = set_FollowMasterBackground};
  __property   Powerpoint_2k::SlideRangePtr NotesPage = {read = get_NotesPage};
  __property   Powerpoint_2k::_MasterPtr Master = {read = get_Master};
  __property   Powerpoint_2k::HyperlinksPtr Hyperlinks = {read = get_Hyperlinks};
  __property   Office_2k::ScriptsPtr Scripts = {read = get_Scripts};
};
typedef TCOM_SlideT<_Slide> TCOM_Slide;

// *********************************************************************//
// DispIntf:  _Slide
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149346A-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class _SlideDispT : public TAutoDriver<_Slide>
{
public:
  _SlideDispT(){}

  _SlideDispT(_Slide *pintf)
  {
    TAutoDriver<_Slide>::Bind(pintf, false);
  }

  _SlideDispT(_SlidePtr pintf)
  {
    TAutoDriver<_Slide>::Bind(pintf, true);
  }

  _SlideDispT& operator=(_Slide *pintf)
  {
    TAutoDriver<_Slide>::Bind(pintf, false);
    return *this;
  }

  _SlideDispT& operator=(_SlidePtr pintf)
  {
    TAutoDriver<_Slide>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_PowerPointSlide));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_PowerPointSlide);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Shapes(Powerpoint_2k::ShapesPtr* Shapes/*[out,retval]*/);
  Powerpoint_2k::ShapesPtr __fastcall get_Shapes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HeadersFooters(Powerpoint_2k::HeadersFootersPtr* HeadersFooters/*[out,retval]*/);
  Powerpoint_2k::HeadersFootersPtr __fastcall get_HeadersFooters(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideShowTransition(Powerpoint_2k::SlideShowTransitionPtr* SlideShowTransition/*[out,retval]*/);
  Powerpoint_2k::SlideShowTransitionPtr __fastcall get_SlideShowTransition(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColorScheme(Powerpoint_2k::ColorSchemePtr* ColorScheme/*[out,retval]*/);
  Powerpoint_2k::ColorSchemePtr __fastcall get_ColorScheme(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColorScheme(Powerpoint_2k::ColorSchemePtr ColorScheme/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Background(Powerpoint_2k::ShapeRangePtr* Background/*[out,retval]*/);
  Powerpoint_2k::ShapeRangePtr __fastcall get_Background(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideID(long* SlideID/*[out,retval]*/);
  long            __fastcall get_SlideID(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PrintSteps(int* PrintSteps/*[out,retval]*/);
  int             __fastcall get_PrintSteps(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Select();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Cut();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Copy();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Layout(Powerpoint_2k::PpSlideLayout* Layout/*[out,retval]*/);
  Powerpoint_2k::PpSlideLayout __fastcall get_Layout(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Layout(Powerpoint_2k::PpSlideLayout Layout/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Duplicate(Powerpoint_2k::SlideRangePtr* Duplicate/*[out,retval]*/);
  Powerpoint_2k::SlideRangePtr __fastcall Duplicate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/);
  Powerpoint_2k::TagsPtr __fastcall get_Tags(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideIndex(int* SlideIndex/*[out,retval]*/);
  int             __fastcall get_SlideIndex(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideNumber(int* SlideNumber/*[out,retval]*/);
  int             __fastcall get_SlideNumber(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayMasterShapes(Office_2k::MsoTriState* DisplayMasterShapes/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_DisplayMasterShapes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayMasterShapes(Office_2k::MsoTriState DisplayMasterShapes/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FollowMasterBackground(Office_2k::MsoTriState* FollowMasterBackground/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_FollowMasterBackground(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FollowMasterBackground(Office_2k::MsoTriState FollowMasterBackground/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NotesPage(Powerpoint_2k::SlideRangePtr* NotesPage/*[out,retval]*/);
  Powerpoint_2k::SlideRangePtr __fastcall get_NotesPage(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Master(Powerpoint_2k::_MasterPtr* Master/*[out,retval]*/);
  Powerpoint_2k::_MasterPtr __fastcall get_Master(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Hyperlinks(Powerpoint_2k::HyperlinksPtr* Hyperlinks/*[out,retval]*/);
  Powerpoint_2k::HyperlinksPtr __fastcall get_Hyperlinks(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Export(BSTR FileName/*[in]*/, BSTR FilterName/*[in]*/, 
                                               int ScaleWidth/*[in,def,opt]*/, 
                                               int ScaleHeight/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Scripts(Office_2k::ScriptsPtr* Scripts/*[out,retval]*/);
  Office_2k::ScriptsPtr __fastcall get_Scripts(void);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::ShapesPtr Shapes = {read = get_Shapes};
  __property   Powerpoint_2k::HeadersFootersPtr HeadersFooters = {read = get_HeadersFooters};
  __property   Powerpoint_2k::SlideShowTransitionPtr SlideShowTransition = {read = get_SlideShowTransition};
  __property   Powerpoint_2k::ColorSchemePtr ColorScheme = {read = get_ColorScheme, write = set_ColorScheme};
  __property   Powerpoint_2k::ShapeRangePtr Background = {read = get_Background};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   long            SlideID = {read = get_SlideID};
  __property   int             PrintSteps = {read = get_PrintSteps};
  __property   Powerpoint_2k::PpSlideLayout Layout = {read = get_Layout, write = set_Layout};
  __property   Powerpoint_2k::TagsPtr Tags = {read = get_Tags};
  __property   int             SlideIndex = {read = get_SlideIndex};
  __property   int             SlideNumber = {read = get_SlideNumber};
  __property   Office_2k::MsoTriState DisplayMasterShapes = {read = get_DisplayMasterShapes, write = set_DisplayMasterShapes};
  __property   Office_2k::MsoTriState FollowMasterBackground = {read = get_FollowMasterBackground, write = set_FollowMasterBackground};
  __property   Powerpoint_2k::SlideRangePtr NotesPage = {read = get_NotesPage};
  __property   Powerpoint_2k::_MasterPtr Master = {read = get_Master};
  __property   Powerpoint_2k::HyperlinksPtr Hyperlinks = {read = get_Hyperlinks};
  __property   Office_2k::ScriptsPtr Scripts = {read = get_Scripts};
};
typedef _SlideDispT<_Slide> _SlideDisp;

typedef TComInterface<SlideRange>  TCOMSlideRange;

// *********************************************************************//
// DispIntf:  SlideRange
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149346B-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class SlideRangeDispT : public TAutoDriver<SlideRange>
{
public:
  SlideRangeDispT(){}

  SlideRangeDispT(SlideRange *pintf)
  {
    TAutoDriver<SlideRange>::Bind(pintf, false);
  }

  SlideRangeDispT(SlideRangePtr pintf)
  {
    TAutoDriver<SlideRange>::Bind(pintf, true);
  }

  SlideRangeDispT& operator=(SlideRange *pintf)
  {
    TAutoDriver<SlideRange>::Bind(pintf, false);
    return *this;
  }

  SlideRangeDispT& operator=(SlideRangePtr pintf)
  {
    TAutoDriver<SlideRange>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Shapes(Powerpoint_2k::ShapesPtr* Shapes/*[out,retval]*/);
  Powerpoint_2k::ShapesPtr __fastcall get_Shapes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HeadersFooters(Powerpoint_2k::HeadersFootersPtr* HeadersFooters/*[out,retval]*/);
  Powerpoint_2k::HeadersFootersPtr __fastcall get_HeadersFooters(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideShowTransition(Powerpoint_2k::SlideShowTransitionPtr* SlideShowTransition/*[out,retval]*/);
  Powerpoint_2k::SlideShowTransitionPtr __fastcall get_SlideShowTransition(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColorScheme(Powerpoint_2k::ColorSchemePtr* ColorScheme/*[out,retval]*/);
  Powerpoint_2k::ColorSchemePtr __fastcall get_ColorScheme(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColorScheme(Powerpoint_2k::ColorSchemePtr ColorScheme/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Background(Powerpoint_2k::ShapeRangePtr* Background/*[out,retval]*/);
  Powerpoint_2k::ShapeRangePtr __fastcall get_Background(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideID(long* SlideID/*[out,retval]*/);
  long            __fastcall get_SlideID(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PrintSteps(int* PrintSteps/*[out,retval]*/);
  int             __fastcall get_PrintSteps(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Select();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Cut();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Copy();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Layout(Powerpoint_2k::PpSlideLayout* Layout/*[out,retval]*/);
  Powerpoint_2k::PpSlideLayout __fastcall get_Layout(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Layout(Powerpoint_2k::PpSlideLayout Layout/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Duplicate(Powerpoint_2k::SlideRangePtr* Duplicate/*[out,retval]*/);
  Powerpoint_2k::SlideRangePtr __fastcall Duplicate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/);
  Powerpoint_2k::TagsPtr __fastcall get_Tags(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideIndex(int* SlideIndex/*[out,retval]*/);
  int             __fastcall get_SlideIndex(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideNumber(int* SlideNumber/*[out,retval]*/);
  int             __fastcall get_SlideNumber(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayMasterShapes(Office_2k::MsoTriState* DisplayMasterShapes/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_DisplayMasterShapes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayMasterShapes(Office_2k::MsoTriState DisplayMasterShapes/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FollowMasterBackground(Office_2k::MsoTriState* FollowMasterBackground/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_FollowMasterBackground(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FollowMasterBackground(Office_2k::MsoTriState FollowMasterBackground/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NotesPage(Powerpoint_2k::SlideRangePtr* NotesPage/*[out,retval]*/);
  Powerpoint_2k::SlideRangePtr __fastcall get_NotesPage(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Master(Powerpoint_2k::_MasterPtr* Master/*[out,retval]*/);
  Powerpoint_2k::_MasterPtr __fastcall get_Master(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Hyperlinks(Powerpoint_2k::HyperlinksPtr* Hyperlinks/*[out,retval]*/);
  Powerpoint_2k::HyperlinksPtr __fastcall get_Hyperlinks(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Export(BSTR FileName/*[in]*/, BSTR FilterName/*[in]*/, 
                                               int ScaleWidth/*[in,def,opt]*/, 
                                               int ScaleHeight/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(TVariantInParam index/*[in]*/, 
                                             Powerpoint_2k::PowerPointSlidePtr* Item/*[out,retval]*/);
  Powerpoint_2k::PowerPointSlidePtr __fastcall Item(TVariantInParam index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/);
  TVariant        __fastcall _Index(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Scripts(Office_2k::ScriptsPtr* Scripts/*[out,retval]*/);
  Office_2k::ScriptsPtr __fastcall get_Scripts(void);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::ShapesPtr Shapes = {read = get_Shapes};
  __property   Powerpoint_2k::HeadersFootersPtr HeadersFooters = {read = get_HeadersFooters};
  __property   Powerpoint_2k::SlideShowTransitionPtr SlideShowTransition = {read = get_SlideShowTransition};
  __property   Powerpoint_2k::ColorSchemePtr ColorScheme = {read = get_ColorScheme, write = set_ColorScheme};
  __property   Powerpoint_2k::ShapeRangePtr Background = {read = get_Background};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   long            SlideID = {read = get_SlideID};
  __property   int             PrintSteps = {read = get_PrintSteps};
  __property   Powerpoint_2k::PpSlideLayout Layout = {read = get_Layout, write = set_Layout};
  __property   Powerpoint_2k::TagsPtr Tags = {read = get_Tags};
  __property   int             SlideIndex = {read = get_SlideIndex};
  __property   int             SlideNumber = {read = get_SlideNumber};
  __property   Office_2k::MsoTriState DisplayMasterShapes = {read = get_DisplayMasterShapes, write = set_DisplayMasterShapes};
  __property   Office_2k::MsoTriState FollowMasterBackground = {read = get_FollowMasterBackground, write = set_FollowMasterBackground};
  __property   Powerpoint_2k::SlideRangePtr NotesPage = {read = get_NotesPage};
  __property   Powerpoint_2k::_MasterPtr Master = {read = get_Master};
  __property   Powerpoint_2k::HyperlinksPtr Hyperlinks = {read = get_Hyperlinks};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
  __property   Office_2k::ScriptsPtr Scripts = {read = get_Scripts};
};
typedef SlideRangeDispT<SlideRange> SlideRangeDisp;

// *********************************************************************//
// SmartIntf: TCOM_Master
// Interface: _Master
// *********************************************************************//
template <class T /* _Master */ >
class TCOM_MasterT : public TComInterface<_Master>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_MasterT() {}
  TCOM_MasterT(_Master *intf, bool addRef = false) : TComInterface<_Master>(intf, addRef) {}
  TCOM_MasterT(const TCOM_MasterT& src) : TComInterface<_Master>(src) {}
  TCOM_MasterT& operator=(const TCOM_MasterT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT         __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Shapes(Powerpoint_2k::ShapesPtr* Shapes/*[out,retval]*/);
  Powerpoint_2k::ShapesPtr __fastcall get_Shapes(void);
  HRESULT         __fastcall get_HeadersFooters(Powerpoint_2k::HeadersFootersPtr* HeadersFooters/*[out,retval]*/);
  Powerpoint_2k::HeadersFootersPtr __fastcall get_HeadersFooters(void);
  HRESULT         __fastcall get_ColorScheme(Powerpoint_2k::ColorSchemePtr* ColorScheme/*[out,retval]*/);
  Powerpoint_2k::ColorSchemePtr __fastcall get_ColorScheme(void);
  HRESULT         __fastcall set_ColorScheme(Powerpoint_2k::ColorSchemePtr ColorScheme/*[in]*/);
  HRESULT         __fastcall get_Background(Powerpoint_2k::ShapeRangePtr* Background/*[out,retval]*/);
  Powerpoint_2k::ShapeRangePtr __fastcall get_Background(void);
  HRESULT         __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT         __fastcall Delete(void);
  HRESULT         __fastcall get_Height(float* Height/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT         __fastcall get_Width(float* Width/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT         __fastcall get_TextStyles(Powerpoint_2k::TextStylesPtr* TextStyles/*[out,retval]*/);
  Powerpoint_2k::TextStylesPtr __fastcall get_TextStyles(void);
  HRESULT         __fastcall get_Hyperlinks(Powerpoint_2k::HyperlinksPtr* Hyperlinks/*[out,retval]*/);
  Powerpoint_2k::HyperlinksPtr __fastcall get_Hyperlinks(void);
  HRESULT         __fastcall get_Scripts(Office_2k::ScriptsPtr* Scripts/*[out,retval]*/);
  Office_2k::ScriptsPtr __fastcall get_Scripts(void);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::ShapesPtr Shapes = {read = get_Shapes};
  __property   Powerpoint_2k::HeadersFootersPtr HeadersFooters = {read = get_HeadersFooters};
  __property   Powerpoint_2k::ColorSchemePtr ColorScheme = {read = get_ColorScheme, write = set_ColorScheme};
  __property   Powerpoint_2k::ShapeRangePtr Background = {read = get_Background};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   float           Height = {read = get_Height};
  __property   float           Width = {read = get_Width};
  __property   Powerpoint_2k::TextStylesPtr TextStyles = {read = get_TextStyles};
  __property   Powerpoint_2k::HyperlinksPtr Hyperlinks = {read = get_Hyperlinks};
  __property   Office_2k::ScriptsPtr Scripts = {read = get_Scripts};
};
typedef TCOM_MasterT<_Master> TCOM_Master;

// *********************************************************************//
// DispIntf:  _Master
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149346C-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class _MasterDispT : public TAutoDriver<_Master>
{
public:
  _MasterDispT(){}

  _MasterDispT(_Master *pintf)
  {
    TAutoDriver<_Master>::Bind(pintf, false);
  }

  _MasterDispT(_MasterPtr pintf)
  {
    TAutoDriver<_Master>::Bind(pintf, true);
  }

  _MasterDispT& operator=(_Master *pintf)
  {
    TAutoDriver<_Master>::Bind(pintf, false);
    return *this;
  }

  _MasterDispT& operator=(_MasterPtr pintf)
  {
    TAutoDriver<_Master>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Master));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Master);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Shapes(Powerpoint_2k::ShapesPtr* Shapes/*[out,retval]*/);
  Powerpoint_2k::ShapesPtr __fastcall get_Shapes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HeadersFooters(Powerpoint_2k::HeadersFootersPtr* HeadersFooters/*[out,retval]*/);
  Powerpoint_2k::HeadersFootersPtr __fastcall get_HeadersFooters(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColorScheme(Powerpoint_2k::ColorSchemePtr* ColorScheme/*[out,retval]*/);
  Powerpoint_2k::ColorSchemePtr __fastcall get_ColorScheme(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColorScheme(Powerpoint_2k::ColorSchemePtr ColorScheme/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Background(Powerpoint_2k::ShapeRangePtr* Background/*[out,retval]*/);
  Powerpoint_2k::ShapeRangePtr __fastcall get_Background(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(float* Height/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(float* Width/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextStyles(Powerpoint_2k::TextStylesPtr* TextStyles/*[out,retval]*/);
  Powerpoint_2k::TextStylesPtr __fastcall get_TextStyles(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Hyperlinks(Powerpoint_2k::HyperlinksPtr* Hyperlinks/*[out,retval]*/);
  Powerpoint_2k::HyperlinksPtr __fastcall get_Hyperlinks(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Scripts(Office_2k::ScriptsPtr* Scripts/*[out,retval]*/);
  Office_2k::ScriptsPtr __fastcall get_Scripts(void);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::ShapesPtr Shapes = {read = get_Shapes};
  __property   Powerpoint_2k::HeadersFootersPtr HeadersFooters = {read = get_HeadersFooters};
  __property   Powerpoint_2k::ColorSchemePtr ColorScheme = {read = get_ColorScheme, write = set_ColorScheme};
  __property   Powerpoint_2k::ShapeRangePtr Background = {read = get_Background};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   float           Height = {read = get_Height};
  __property   float           Width = {read = get_Width};
  __property   Powerpoint_2k::TextStylesPtr TextStyles = {read = get_TextStyles};
  __property   Powerpoint_2k::HyperlinksPtr Hyperlinks = {read = get_Hyperlinks};
  __property   Office_2k::ScriptsPtr Scripts = {read = get_Scripts};
};
typedef _MasterDispT<_Master> _MasterDisp;

typedef TComInterface<SldEvents>  TCOMSldEvents;

typedef TComInterface<ColorSchemes>  TCOMColorSchemes;

// *********************************************************************//
// DispIntf:  ColorSchemes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149346E-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class ColorSchemesDispT : public TAutoDriver<ColorSchemes>
{
public:
  ColorSchemesDispT(){}

  ColorSchemesDispT(ColorSchemes *pintf)
  {
    TAutoDriver<ColorSchemes>::Bind(pintf, false);
  }

  ColorSchemesDispT(ColorSchemesPtr pintf)
  {
    TAutoDriver<ColorSchemes>::Bind(pintf, true);
  }

  ColorSchemesDispT& operator=(ColorSchemes *pintf)
  {
    TAutoDriver<ColorSchemes>::Bind(pintf, false);
    return *this;
  }

  ColorSchemesDispT& operator=(ColorSchemesPtr pintf)
  {
    TAutoDriver<ColorSchemes>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(int index/*[in]*/, 
                                             Powerpoint_2k::ColorSchemePtr* Item/*[out,retval]*/);
  Powerpoint_2k::ColorSchemePtr __fastcall Item(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(Powerpoint_2k::ColorSchemePtr Scheme/*[in,def,opt]*/, 
                                            Powerpoint_2k::ColorSchemePtr* Add/*[out,retval]*/);
  Powerpoint_2k::ColorSchemePtr __fastcall Add(Powerpoint_2k::ColorSchemePtr Scheme/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/);
  TVariant        __fastcall _Index(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef ColorSchemesDispT<ColorSchemes> ColorSchemesDisp;

typedef TComInterface<ColorScheme>  TCOMColorScheme;

// *********************************************************************//
// DispIntf:  ColorScheme
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149346F-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class ColorSchemeDispT : public TAutoDriver<ColorScheme>
{
public:
  ColorSchemeDispT(){}

  ColorSchemeDispT(ColorScheme *pintf)
  {
    TAutoDriver<ColorScheme>::Bind(pintf, false);
  }

  ColorSchemeDispT(ColorSchemePtr pintf)
  {
    TAutoDriver<ColorScheme>::Bind(pintf, true);
  }

  ColorSchemeDispT& operator=(ColorScheme *pintf)
  {
    TAutoDriver<ColorScheme>::Bind(pintf, false);
    return *this;
  }

  ColorSchemeDispT& operator=(ColorSchemePtr pintf)
  {
    TAutoDriver<ColorScheme>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Colors(Powerpoint_2k::PpColorSchemeIndex SchemeColor/*[in]*/
                                               , Powerpoint_2k::RGBColorPtr* Colors/*[out,retval]*/);
  Powerpoint_2k::RGBColorPtr __fastcall Colors(Powerpoint_2k::PpColorSchemeIndex SchemeColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/);
  TVariant        __fastcall _Index(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef ColorSchemeDispT<ColorScheme> ColorSchemeDisp;

typedef TComInterface<RGBColor>  TCOMRGBColor;

// *********************************************************************//
// DispIntf:  RGBColor
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493470-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class RGBColorDispT : public TAutoDriver<RGBColor>
{
public:
  RGBColorDispT(){}

  RGBColorDispT(RGBColor *pintf)
  {
    TAutoDriver<RGBColor>::Bind(pintf, false);
  }

  RGBColorDispT(RGBColorPtr pintf)
  {
    TAutoDriver<RGBColor>::Bind(pintf, true);
  }

  RGBColorDispT& operator=(RGBColor *pintf)
  {
    TAutoDriver<RGBColor>::Bind(pintf, false);
    return *this;
  }

  RGBColorDispT& operator=(RGBColorPtr pintf)
  {
    TAutoDriver<RGBColor>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_rgb(Office_2k::MsoRGBType* rgb/*[out,retval]*/);
  Office_2k::MsoRGBType __fastcall get_rgb(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_rgb(Office_2k::MsoRGBType rgb/*[in]*/);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoRGBType rgb = {read = get_rgb, write = set_rgb};
};
typedef RGBColorDispT<RGBColor> RGBColorDisp;

typedef TComInterface<SlideShowTransition>  TCOMSlideShowTransition;

// *********************************************************************//
// DispIntf:  SlideShowTransition
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493471-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class SlideShowTransitionDispT : public TAutoDriver<SlideShowTransition>
{
public:
  SlideShowTransitionDispT(){}

  SlideShowTransitionDispT(SlideShowTransition *pintf)
  {
    TAutoDriver<SlideShowTransition>::Bind(pintf, false);
  }

  SlideShowTransitionDispT(SlideShowTransitionPtr pintf)
  {
    TAutoDriver<SlideShowTransition>::Bind(pintf, true);
  }

  SlideShowTransitionDispT& operator=(SlideShowTransition *pintf)
  {
    TAutoDriver<SlideShowTransition>::Bind(pintf, false);
    return *this;
  }

  SlideShowTransitionDispT& operator=(SlideShowTransitionPtr pintf)
  {
    TAutoDriver<SlideShowTransition>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AdvanceOnClick(Office_2k::MsoTriState* AdvanceOnClick/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_AdvanceOnClick(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AdvanceOnClick(Office_2k::MsoTriState AdvanceOnClick/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AdvanceOnTime(Office_2k::MsoTriState* AdvanceOnTime/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_AdvanceOnTime(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AdvanceOnTime(Office_2k::MsoTriState AdvanceOnTime/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AdvanceTime(float* AdvanceTime/*[out,retval]*/);
  float           __fastcall get_AdvanceTime(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AdvanceTime(float AdvanceTime/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EntryEffect(Powerpoint_2k::PpEntryEffect* EntryEffect/*[out,retval]*/);
  Powerpoint_2k::PpEntryEffect __fastcall get_EntryEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EntryEffect(Powerpoint_2k::PpEntryEffect EntryEffect/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Hidden(Office_2k::MsoTriState* Hidden/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Hidden(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Hidden(Office_2k::MsoTriState Hidden/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LoopSoundUntilNext(Office_2k::MsoTriState* LoopSoundUntilNext/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_LoopSoundUntilNext(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LoopSoundUntilNext(Office_2k::MsoTriState LoopSoundUntilNext/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SoundEffect(Powerpoint_2k::SoundEffectPtr* SoundEffect/*[out,retval]*/);
  Powerpoint_2k::SoundEffectPtr __fastcall get_SoundEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Speed(Powerpoint_2k::PpTransitionSpeed* Speed/*[out,retval]*/);
  Powerpoint_2k::PpTransitionSpeed __fastcall get_Speed(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Speed(Powerpoint_2k::PpTransitionSpeed Speed/*[in]*/);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoTriState AdvanceOnClick = {read = get_AdvanceOnClick, write = set_AdvanceOnClick};
  __property   Office_2k::MsoTriState AdvanceOnTime = {read = get_AdvanceOnTime, write = set_AdvanceOnTime};
  __property   float           AdvanceTime = {read = get_AdvanceTime, write = set_AdvanceTime};
  __property   Powerpoint_2k::PpEntryEffect EntryEffect = {read = get_EntryEffect, write = set_EntryEffect};
  __property   Office_2k::MsoTriState Hidden = {read = get_Hidden, write = set_Hidden};
  __property   Office_2k::MsoTriState LoopSoundUntilNext = {read = get_LoopSoundUntilNext, write = set_LoopSoundUntilNext};
  __property   Powerpoint_2k::SoundEffectPtr SoundEffect = {read = get_SoundEffect};
  __property   Powerpoint_2k::PpTransitionSpeed Speed = {read = get_Speed, write = set_Speed};
};
typedef SlideShowTransitionDispT<SlideShowTransition> SlideShowTransitionDisp;

typedef TComInterface<SoundEffect>  TCOMSoundEffect;

// *********************************************************************//
// DispIntf:  SoundEffect
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493472-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class SoundEffectDispT : public TAutoDriver<SoundEffect>
{
public:
  SoundEffectDispT(){}

  SoundEffectDispT(SoundEffect *pintf)
  {
    TAutoDriver<SoundEffect>::Bind(pintf, false);
  }

  SoundEffectDispT(SoundEffectPtr pintf)
  {
    TAutoDriver<SoundEffect>::Bind(pintf, true);
  }

  SoundEffectDispT& operator=(SoundEffect *pintf)
  {
    TAutoDriver<SoundEffect>::Bind(pintf, false);
    return *this;
  }

  SoundEffectDispT& operator=(SoundEffectPtr pintf)
  {
    TAutoDriver<SoundEffect>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Powerpoint_2k::PpSoundEffectType* Type/*[out,retval]*/);
  Powerpoint_2k::PpSoundEffectType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Type(Powerpoint_2k::PpSoundEffectType Type/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ImportFromFile(BSTR FileName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Play();

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   Powerpoint_2k::PpSoundEffectType Type = {read = get_Type, write = set_Type};
};
typedef SoundEffectDispT<SoundEffect> SoundEffectDisp;

typedef TComInterface<SoundFormat>  TCOMSoundFormat;

// *********************************************************************//
// DispIntf:  SoundFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493473-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class SoundFormatDispT : public TAutoDriver<SoundFormat>
{
public:
  SoundFormatDispT(){}

  SoundFormatDispT(SoundFormat *pintf)
  {
    TAutoDriver<SoundFormat>::Bind(pintf, false);
  }

  SoundFormatDispT(SoundFormatPtr pintf)
  {
    TAutoDriver<SoundFormat>::Bind(pintf, true);
  }

  SoundFormatDispT& operator=(SoundFormat *pintf)
  {
    TAutoDriver<SoundFormat>::Bind(pintf, false);
    return *this;
  }

  SoundFormatDispT& operator=(SoundFormatPtr pintf)
  {
    TAutoDriver<SoundFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall Play();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Import(BSTR FileName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Export(BSTR FileName/*[in]*/, 
                                               Powerpoint_2k::PpSoundFormatType* Export/*[out,retval]*/);
  Powerpoint_2k::PpSoundFormatType __fastcall Export(BSTR FileName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Powerpoint_2k::PpSoundFormatType* Type/*[out,retval]*/);
  Powerpoint_2k::PpSoundFormatType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SourceFullName(BSTR* SourceFullName/*[out,retval]*/);
  BSTR            __fastcall get_SourceFullName(void);

  __property   Powerpoint_2k::PpSoundFormatType Type = {read = get_Type};
  __property   BSTR            SourceFullName = {read = get_SourceFullName};
};
typedef SoundFormatDispT<SoundFormat> SoundFormatDisp;

typedef TComInterface<HeadersFooters>  TCOMHeadersFooters;

// *********************************************************************//
// DispIntf:  HeadersFooters
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493474-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class HeadersFootersDispT : public TAutoDriver<HeadersFooters>
{
public:
  HeadersFootersDispT(){}

  HeadersFootersDispT(HeadersFooters *pintf)
  {
    TAutoDriver<HeadersFooters>::Bind(pintf, false);
  }

  HeadersFootersDispT(HeadersFootersPtr pintf)
  {
    TAutoDriver<HeadersFooters>::Bind(pintf, true);
  }

  HeadersFootersDispT& operator=(HeadersFooters *pintf)
  {
    TAutoDriver<HeadersFooters>::Bind(pintf, false);
    return *this;
  }

  HeadersFootersDispT& operator=(HeadersFootersPtr pintf)
  {
    TAutoDriver<HeadersFooters>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DateAndTime(Powerpoint_2k::HeaderFooterPtr* DateAndTime/*[out,retval]*/);
  Powerpoint_2k::HeaderFooterPtr __fastcall get_DateAndTime(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideNumber(Powerpoint_2k::HeaderFooterPtr* SlideNumber/*[out,retval]*/);
  Powerpoint_2k::HeaderFooterPtr __fastcall get_SlideNumber(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Header(Powerpoint_2k::HeaderFooterPtr* Header/*[out,retval]*/);
  Powerpoint_2k::HeaderFooterPtr __fastcall get_Header(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Footer(Powerpoint_2k::HeaderFooterPtr* Footer/*[out,retval]*/);
  Powerpoint_2k::HeaderFooterPtr __fastcall get_Footer(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayOnTitleSlide(Office_2k::MsoTriState* DisplayOnTitleSlide/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_DisplayOnTitleSlide(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayOnTitleSlide(Office_2k::MsoTriState DisplayOnTitleSlide/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Clear();

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::HeaderFooterPtr DateAndTime = {read = get_DateAndTime};
  __property   Powerpoint_2k::HeaderFooterPtr SlideNumber = {read = get_SlideNumber};
  __property   Powerpoint_2k::HeaderFooterPtr Header = {read = get_Header};
  __property   Powerpoint_2k::HeaderFooterPtr Footer = {read = get_Footer};
  __property   Office_2k::MsoTriState DisplayOnTitleSlide = {read = get_DisplayOnTitleSlide, write = set_DisplayOnTitleSlide};
};
typedef HeadersFootersDispT<HeadersFooters> HeadersFootersDisp;

typedef TComInterface<Shapes>  TCOMShapes;

// *********************************************************************//
// DispIntf:  Shapes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493475-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class ShapesDispT : public TAutoDriver<Shapes>
{
public:
  ShapesDispT(){}

  ShapesDispT(Shapes *pintf)
  {
    TAutoDriver<Shapes>::Bind(pintf, false);
  }

  ShapesDispT(ShapesPtr pintf)
  {
    TAutoDriver<Shapes>::Bind(pintf, true);
  }

  ShapesDispT& operator=(Shapes *pintf)
  {
    TAutoDriver<Shapes>::Bind(pintf, false);
    return *this;
  }

  ShapesDispT& operator=(ShapesPtr pintf)
  {
    TAutoDriver<Shapes>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(int* Count/*[out,retval]*/);
  int             __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(TVariantInParam index/*[in]*/, 
                                             Powerpoint_2k::ShapePtr* Item/*[out,retval]*/);
  Powerpoint_2k::ShapePtr __fastcall Item(TVariantInParam index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddCallout(Office_2k::MsoCalloutType Type/*[in]*/, 
                                                   float Left/*[in]*/, float Top/*[in]*/, 
                                                   float Width/*[in]*/, float Height/*[in]*/, 
                                                   Powerpoint_2k::ShapePtr* Callout/*[out,retval]*/);
  Powerpoint_2k::ShapePtr __fastcall AddCallout(Office_2k::MsoCalloutType Type/*[in]*/, 
                                                float Left/*[in]*/, float Top/*[in]*/, 
                                                float Width/*[in]*/, float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddConnector(Office_2k::MsoConnectorType Type/*[in]*/, 
                                                     float BeginX/*[in]*/, float BeginY/*[in]*/, 
                                                     float EndX/*[in]*/, float EndY/*[in]*/, 
                                                     Powerpoint_2k::ShapePtr* Connector/*[out,retval]*/);
  Powerpoint_2k::ShapePtr __fastcall AddConnector(Office_2k::MsoConnectorType Type/*[in]*/, 
                                                  float BeginX/*[in]*/, float BeginY/*[in]*/, 
                                                  float EndX/*[in]*/, float EndY/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddCurve(TVariantInParam SafeArrayOfPoints/*[in]*/, 
                                                 Powerpoint_2k::ShapePtr* Curve/*[out,retval]*/);
  Powerpoint_2k::ShapePtr __fastcall AddCurve(TVariantInParam SafeArrayOfPoints/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddLabel(Office_2k::MsoTextOrientation Orientation/*[in]*/, 
                                                 float Left/*[in]*/, float Top/*[in]*/, 
                                                 float Width/*[in]*/, float Height/*[in]*/, 
                                                 Powerpoint_2k::ShapePtr* Label/*[out,retval]*/);
  Powerpoint_2k::ShapePtr __fastcall AddLabel(Office_2k::MsoTextOrientation Orientation/*[in]*/, 
                                              float Left/*[in]*/, float Top/*[in]*/, 
                                              float Width/*[in]*/, float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddLine(float BeginX/*[in]*/, float BeginY/*[in]*/, 
                                                float EndX/*[in]*/, float EndY/*[in]*/, 
                                                Powerpoint_2k::ShapePtr* Line/*[out,retval]*/);
  Powerpoint_2k::ShapePtr __fastcall AddLine(float BeginX/*[in]*/, float BeginY/*[in]*/, 
                                             float EndX/*[in]*/, float EndY/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddPicture(BSTR FileName/*[in]*/, 
                                                   Office_2k::MsoTriState LinkToFile/*[in]*/, 
                                                   Office_2k::MsoTriState SaveWithDocument/*[in]*/, 
                                                   float Left/*[in]*/, float Top/*[in]*/, 
                                                   float Width/*[in,def,opt]*/, 
                                                   float Height/*[in,def,opt]*/, 
                                                   Powerpoint_2k::ShapePtr* Picture/*[out,retval]*/);
  Powerpoint_2k::ShapePtr __fastcall AddPicture(BSTR FileName/*[in]*/, 
                                                Office_2k::MsoTriState LinkToFile/*[in]*/, 
                                                Office_2k::MsoTriState SaveWithDocument/*[in]*/, 
                                                float Left/*[in]*/, float Top/*[in]*/, 
                                                float Width/*[in,def,opt]*/, 
                                                float Height/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddPolyline(TVariantInParam SafeArrayOfPoints/*[in]*/, 
                                                    Powerpoint_2k::ShapePtr* Polyline/*[out,retval]*/);
  Powerpoint_2k::ShapePtr __fastcall AddPolyline(TVariantInParam SafeArrayOfPoints/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddShape(Office_2k::MsoAutoShapeType Type/*[in]*/, 
                                                 float Left/*[in]*/, float Top/*[in]*/, 
                                                 float Width/*[in]*/, float Height/*[in]*/, 
                                                 Powerpoint_2k::ShapePtr* Shape/*[out,retval]*/);
  Powerpoint_2k::ShapePtr __fastcall AddShape(Office_2k::MsoAutoShapeType Type/*[in]*/, 
                                              float Left/*[in]*/, float Top/*[in]*/, 
                                              float Width/*[in]*/, float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddTextEffect(Office_2k::MsoPresetTextEffect PresetTextEffect/*[in]*/
                                                      , BSTR Text/*[in]*/, BSTR FontName/*[in]*/, 
                                                      float FontSize/*[in]*/, 
                                                      Office_2k::MsoTriState FontBold/*[in]*/, 
                                                      Office_2k::MsoTriState FontItalic/*[in]*/, 
                                                      float Left/*[in]*/, float Top/*[in]*/, 
                                                      Powerpoint_2k::ShapePtr* TextEffect/*[out,retval]*/);
  Powerpoint_2k::ShapePtr __fastcall AddTextEffect(Office_2k::MsoPresetTextEffect PresetTextEffect/*[in]*/, 
                                                   BSTR Text/*[in]*/, BSTR FontName/*[in]*/, 
                                                   float FontSize/*[in]*/, 
                                                   Office_2k::MsoTriState FontBold/*[in]*/, 
                                                   Office_2k::MsoTriState FontItalic/*[in]*/, 
                                                   float Left/*[in]*/, float Top/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddTextbox(Office_2k::MsoTextOrientation Orientation/*[in]*/
                                                   , float Left/*[in]*/, float Top/*[in]*/, 
                                                   float Width/*[in]*/, float Height/*[in]*/, 
                                                   Powerpoint_2k::ShapePtr* Textbox/*[out,retval]*/);
  Powerpoint_2k::ShapePtr __fastcall AddTextbox(Office_2k::MsoTextOrientation Orientation/*[in]*/, 
                                                float Left/*[in]*/, float Top/*[in]*/, 
                                                float Width/*[in]*/, float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall BuildFreeform(Office_2k::MsoEditingType EditingType/*[in]*/
                                                      , float X1/*[in]*/, float Y1/*[in]*/, 
                                                      Powerpoint_2k::FreeformBuilderPtr* FreeformBuilder/*[out,retval]*/);
  Powerpoint_2k::FreeformBuilderPtr __fastcall BuildFreeform(Office_2k::MsoEditingType EditingType/*[in]*/, 
                                                             float X1/*[in]*/, float Y1/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SelectAll();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Range(TVariantInParam index/*[in,opt]*/, 
                                              Powerpoint_2k::ShapeRangePtr* Range/*[out,retval]*/);
  Powerpoint_2k::ShapeRangePtr __fastcall Range(TVariantInParam index/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasTitle(Office_2k::MsoTriState* HasTitle/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_HasTitle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddTitle(Powerpoint_2k::ShapePtr* Title/*[out,retval]*/);
  Powerpoint_2k::ShapePtr __fastcall AddTitle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Title(Powerpoint_2k::ShapePtr* Title/*[out,retval]*/);
  Powerpoint_2k::ShapePtr __fastcall get_Title(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Placeholders(Powerpoint_2k::PlaceholdersPtr* Placeholders/*[out,retval]*/);
  Powerpoint_2k::PlaceholdersPtr __fastcall get_Placeholders(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddOLEObject(float Left/*[in,def,opt]*/, 
                                                     float Top/*[in,def,opt]*/, 
                                                     float Width/*[in,def,opt]*/, 
                                                     float Height/*[in,def,opt]*/, 
                                                     BSTR ClassName/*[in,def,opt]*/, 
                                                     BSTR FileName/*[in,def,opt]*/, 
                                                     Office_2k::MsoTriState DisplayAsIcon/*[in,def,opt]*/
                                                     , BSTR IconFileName/*[in,def,opt]*/, 
                                                     int IconIndex/*[in,def,opt]*/, 
                                                     BSTR IconLabel/*[in,def,opt]*/, 
                                                     Office_2k::MsoTriState Link/*[in,def,opt]*/, 
                                                     Powerpoint_2k::ShapePtr* OLEObject/*[out,retval]*/);
  Powerpoint_2k::ShapePtr __fastcall AddOLEObject(float Left/*[in,def,opt]*/, 
                                                  float Top/*[in,def,opt]*/, 
                                                  float Width/*[in,def,opt]*/, 
                                                  float Height/*[in,def,opt]*/, 
                                                  BSTR ClassName/*[in,def,opt]*/, 
                                                  BSTR FileName/*[in,def,opt]*/, 
                                                  Office_2k::MsoTriState DisplayAsIcon/*[in,def,opt]*/, 
                                                  BSTR IconFileName/*[in,def,opt]*/, 
                                                  int IconIndex/*[in,def,opt]*/, 
                                                  BSTR IconLabel/*[in,def,opt]*/, 
                                                  Office_2k::MsoTriState Link/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddComment(float Left/*[in,def,opt]*/, 
                                                   float Top/*[in,def,opt]*/, 
                                                   float Width/*[in,def,opt]*/, 
                                                   float Height/*[in,def,opt]*/, 
                                                   Powerpoint_2k::ShapePtr* Comment/*[out,retval]*/);
  Powerpoint_2k::ShapePtr __fastcall AddComment(float Left/*[in,def,opt]*/, 
                                                float Top/*[in,def,opt]*/, 
                                                float Width/*[in,def,opt]*/, 
                                                float Height/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddPlaceholder(Powerpoint_2k::PpPlaceholderType Type/*[in]*/
                                                       , float Left/*[in,def,opt]*/, 
                                                       float Top/*[in,def,opt]*/, 
                                                       float Width/*[in,def,opt]*/, 
                                                       float Height/*[in,def,opt]*/, 
                                                       Powerpoint_2k::ShapePtr* Placeholder/*[out,retval]*/);
  Powerpoint_2k::ShapePtr __fastcall AddPlaceholder(Powerpoint_2k::PpPlaceholderType Type/*[in]*/, 
                                                    float Left/*[in,def,opt]*/, 
                                                    float Top/*[in,def,opt]*/, 
                                                    float Width/*[in,def,opt]*/, 
                                                    float Height/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddMediaObject(BSTR FileName/*[in]*/, 
                                                       float Left/*[in,def,opt]*/, 
                                                       float Top/*[in,def,opt]*/, 
                                                       float Width/*[in,def,opt]*/, 
                                                       float Height/*[in,def,opt]*/, 
                                                       Powerpoint_2k::ShapePtr* MediaObject/*[out,retval]*/);
  Powerpoint_2k::ShapePtr __fastcall AddMediaObject(BSTR FileName/*[in]*/, 
                                                    float Left/*[in,def,opt]*/, 
                                                    float Top/*[in,def,opt]*/, 
                                                    float Width/*[in,def,opt]*/, 
                                                    float Height/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Paste(Powerpoint_2k::ShapeRangePtr* Paste/*[out,retval]*/);
  Powerpoint_2k::ShapeRangePtr __fastcall Paste(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddTable(int NumRows/*[in]*/, int NumColumns/*[in]*/, 
                                                 float Left/*[in,def,opt]*/, 
                                                 float Top/*[in,def,opt]*/, 
                                                 float Width/*[in,def,opt]*/, 
                                                 float Height/*[in,def,opt]*/, 
                                                 Powerpoint_2k::ShapePtr* Table/*[out,retval]*/);
  Powerpoint_2k::ShapePtr __fastcall AddTable(int NumRows/*[in]*/, int NumColumns/*[in]*/, 
                                              float Left/*[in,def,opt]*/, float Top/*[in,def,opt]*/, 
                                              float Width/*[in,def,opt]*/, 
                                              float Height/*[in,def,opt]*/);

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   Office_2k::MsoTriState HasTitle = {read = get_HasTitle};
  __property   Powerpoint_2k::ShapePtr Title = {read = get_Title};
  __property   Powerpoint_2k::PlaceholdersPtr Placeholders = {read = get_Placeholders};
};
typedef ShapesDispT<Shapes> ShapesDisp;

typedef TComInterface<Placeholders>  TCOMPlaceholders;

// *********************************************************************//
// DispIntf:  Placeholders
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493476-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PlaceholdersDispT : public TAutoDriver<Placeholders>
{
public:
  PlaceholdersDispT(){}

  PlaceholdersDispT(Placeholders *pintf)
  {
    TAutoDriver<Placeholders>::Bind(pintf, false);
  }

  PlaceholdersDispT(PlaceholdersPtr pintf)
  {
    TAutoDriver<Placeholders>::Bind(pintf, true);
  }

  PlaceholdersDispT& operator=(Placeholders *pintf)
  {
    TAutoDriver<Placeholders>::Bind(pintf, false);
    return *this;
  }

  PlaceholdersDispT& operator=(PlaceholdersPtr pintf)
  {
    TAutoDriver<Placeholders>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(int index/*[in]*/, 
                                             Powerpoint_2k::ShapePtr* Item/*[out,retval]*/);
  Powerpoint_2k::ShapePtr __fastcall Item(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/);
  TVariant        __fastcall _Index(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef PlaceholdersDispT<Placeholders> PlaceholdersDisp;

typedef TComInterface<PlaceholderFormat>  TCOMPlaceholderFormat;

// *********************************************************************//
// DispIntf:  PlaceholderFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493477-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PlaceholderFormatDispT : public TAutoDriver<PlaceholderFormat>
{
public:
  PlaceholderFormatDispT(){}

  PlaceholderFormatDispT(PlaceholderFormat *pintf)
  {
    TAutoDriver<PlaceholderFormat>::Bind(pintf, false);
  }

  PlaceholderFormatDispT(PlaceholderFormatPtr pintf)
  {
    TAutoDriver<PlaceholderFormat>::Bind(pintf, true);
  }

  PlaceholderFormatDispT& operator=(PlaceholderFormat *pintf)
  {
    TAutoDriver<PlaceholderFormat>::Bind(pintf, false);
    return *this;
  }

  PlaceholderFormatDispT& operator=(PlaceholderFormatPtr pintf)
  {
    TAutoDriver<PlaceholderFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Powerpoint_2k::PpPlaceholderType* Type/*[out,retval]*/);
  Powerpoint_2k::PpPlaceholderType __fastcall get_Type(void);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::PpPlaceholderType Type = {read = get_Type};
};
typedef PlaceholderFormatDispT<PlaceholderFormat> PlaceholderFormatDisp;

typedef TComInterface<FreeformBuilder>  TCOMFreeformBuilder;

// *********************************************************************//
// DispIntf:  FreeformBuilder
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493478-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class FreeformBuilderDispT : public TAutoDriver<FreeformBuilder>
{
public:
  FreeformBuilderDispT(){}

  FreeformBuilderDispT(FreeformBuilder *pintf)
  {
    TAutoDriver<FreeformBuilder>::Bind(pintf, false);
  }

  FreeformBuilderDispT(FreeformBuilderPtr pintf)
  {
    TAutoDriver<FreeformBuilder>::Bind(pintf, true);
  }

  FreeformBuilderDispT& operator=(FreeformBuilder *pintf)
  {
    TAutoDriver<FreeformBuilder>::Bind(pintf, false);
    return *this;
  }

  FreeformBuilderDispT& operator=(FreeformBuilderPtr pintf)
  {
    TAutoDriver<FreeformBuilder>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddNodes(Office_2k::MsoSegmentType SegmentType/*[in]*/, 
                                                 Office_2k::MsoEditingType EditingType/*[in]*/, 
                                                 float X1/*[in]*/, float Y1/*[in]*/, 
                                                 float X2/*[in,def,opt]*/, float Y2/*[in,def,opt]*/
                                                 , float X3/*[in,def,opt]*/, 
                                                 float Y3/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ConvertToShape(Powerpoint_2k::ShapePtr* Freeform/*[out,retval]*/);
  Powerpoint_2k::ShapePtr __fastcall ConvertToShape(void);

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef FreeformBuilderDispT<FreeformBuilder> FreeformBuilderDisp;

typedef TComInterface<Shape>  TCOMShape;

// *********************************************************************//
// DispIntf:  Shape
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493479-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class ShapeDispT : public TAutoDriver<Shape>
{
public:
  ShapeDispT(){}

  ShapeDispT(Shape *pintf)
  {
    TAutoDriver<Shape>::Bind(pintf, false);
  }

  ShapeDispT(ShapePtr pintf)
  {
    TAutoDriver<Shape>::Bind(pintf, true);
  }

  ShapeDispT& operator=(Shape *pintf)
  {
    TAutoDriver<Shape>::Bind(pintf, false);
    return *this;
  }

  ShapeDispT& operator=(ShapePtr pintf)
  {
    TAutoDriver<Shape>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Apply();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Flip(Office_2k::MsoFlipCmd FlipCmd/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IncrementLeft(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IncrementRotation(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IncrementTop(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PickUp();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RerouteConnections();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ScaleHeight(float Factor/*[in]*/, 
                                                    Office_2k::MsoTriState RelativeToOriginalSize/*[in]*/
                                                    , Office_2k::MsoScaleFrom fScale/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ScaleWidth(float Factor/*[in]*/, 
                                                   Office_2k::MsoTriState RelativeToOriginalSize/*[in]*/
                                                   , Office_2k::MsoScaleFrom fScale/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetShapesDefaultProperties();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Ungroup(Powerpoint_2k::ShapeRangePtr* Ungroup/*[out,retval]*/);
  Powerpoint_2k::ShapeRangePtr __fastcall Ungroup(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ZOrder(Office_2k::MsoZOrderCmd ZOrderCmd/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Adjustments(Powerpoint_2k::AdjustmentsPtr* Adjustments/*[out,retval]*/);
  Powerpoint_2k::AdjustmentsPtr __fastcall get_Adjustments(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoShapeType(Office_2k::MsoAutoShapeType* AutoShapeType/*[out,retval]*/);
  Office_2k::MsoAutoShapeType __fastcall get_AutoShapeType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoShapeType(Office_2k::MsoAutoShapeType AutoShapeType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BlackWhiteMode(Office_2k::MsoBlackWhiteMode* BlackWhiteMode/*[out,retval]*/);
  Office_2k::MsoBlackWhiteMode __fastcall get_BlackWhiteMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BlackWhiteMode(Office_2k::MsoBlackWhiteMode BlackWhiteMode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Callout(Powerpoint_2k::CalloutFormatPtr* Callout/*[out,retval]*/);
  Powerpoint_2k::CalloutFormatPtr __fastcall get_Callout(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ConnectionSiteCount(int* ConnectionSiteCount/*[out,retval]*/);
  int             __fastcall get_ConnectionSiteCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Connector(Office_2k::MsoTriState* Connector/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Connector(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ConnectorFormat(Powerpoint_2k::ConnectorFormatPtr* ConnectorFormat/*[out,retval]*/);
  Powerpoint_2k::ConnectorFormatPtr __fastcall get_ConnectorFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Fill(Powerpoint_2k::FillFormatPtr* Fill/*[out,retval]*/);
  Powerpoint_2k::FillFormatPtr __fastcall get_Fill(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupItems(Powerpoint_2k::GroupShapesPtr* GroupItems/*[out,retval]*/);
  Powerpoint_2k::GroupShapesPtr __fastcall get_GroupItems(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(float* Height/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HorizontalFlip(Office_2k::MsoTriState* HorizontalFlip/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_HorizontalFlip(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(float* Left/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(float Left/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Line(Powerpoint_2k::LineFormatPtr* Line/*[out,retval]*/);
  Powerpoint_2k::LineFormatPtr __fastcall get_Line(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LockAspectRatio(Office_2k::MsoTriState* LockAspectRatio/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_LockAspectRatio(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LockAspectRatio(Office_2k::MsoTriState LockAspectRatio/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Nodes(Powerpoint_2k::ShapeNodesPtr* Nodes/*[out,retval]*/);
  Powerpoint_2k::ShapeNodesPtr __fastcall get_Nodes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Rotation(float* Rotation/*[out,retval]*/);
  float           __fastcall get_Rotation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Rotation(float Rotation/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureFormat(Powerpoint_2k::PictureFormatPtr* Picture/*[out,retval]*/);
  Powerpoint_2k::PictureFormatPtr __fastcall get_PictureFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Shadow(Powerpoint_2k::ShadowFormatPtr* Shadow/*[out,retval]*/);
  Powerpoint_2k::ShadowFormatPtr __fastcall get_Shadow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextEffect(Powerpoint_2k::TextEffectFormatPtr* TextEffect/*[out,retval]*/);
  Powerpoint_2k::TextEffectFormatPtr __fastcall get_TextEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextFrame(Powerpoint_2k::TextFramePtr* TextFrame/*[out,retval]*/);
  Powerpoint_2k::TextFramePtr __fastcall get_TextFrame(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ThreeD(Powerpoint_2k::ThreeDFormatPtr* ThreeD/*[out,retval]*/);
  Powerpoint_2k::ThreeDFormatPtr __fastcall get_ThreeD(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(float* Top/*[out,retval]*/);
  float           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(float Top/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Office_2k::MsoShapeType* Type/*[out,retval]*/);
  Office_2k::MsoShapeType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VerticalFlip(Office_2k::MsoTriState* VerticalFlip/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_VerticalFlip(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Vertices(TVariant* Vertices/*[out,retval]*/);
  TVariant        __fastcall get_Vertices(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_2k::MsoTriState Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(float* Width/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(float Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ZOrderPosition(int* ZOrderPosition/*[out,retval]*/);
  int             __fastcall get_ZOrderPosition(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OLEFormat(Powerpoint_2k::OLEFormatPtr* OLEFormat/*[out,retval]*/);
  Powerpoint_2k::OLEFormatPtr __fastcall get_OLEFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LinkFormat(Powerpoint_2k::LinkFormatPtr* LinkFormat/*[out,retval]*/);
  Powerpoint_2k::LinkFormatPtr __fastcall get_LinkFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PlaceholderFormat(Powerpoint_2k::PlaceholderFormatPtr* PlaceholderFormat/*[out,retval]*/);
  Powerpoint_2k::PlaceholderFormatPtr __fastcall get_PlaceholderFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AnimationSettings(Powerpoint_2k::AnimationSettingsPtr* AnimationSettings/*[out,retval]*/);
  Powerpoint_2k::AnimationSettingsPtr __fastcall get_AnimationSettings(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActionSettings(Powerpoint_2k::ActionSettingsPtr* ActionSettings/*[out,retval]*/);
  Powerpoint_2k::ActionSettingsPtr __fastcall get_ActionSettings(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/);
  Powerpoint_2k::TagsPtr __fastcall get_Tags(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Cut();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Copy();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Select(Office_2k::MsoTriState Replace/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Duplicate(Powerpoint_2k::ShapeRangePtr* Duplicate/*[out,retval]*/);
  Powerpoint_2k::ShapeRangePtr __fastcall Duplicate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MediaType(Powerpoint_2k::PpMediaType* MediaType/*[out,retval]*/);
  Powerpoint_2k::PpMediaType __fastcall get_MediaType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasTextFrame(Office_2k::MsoTriState* HasTextFrame/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_HasTextFrame(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SoundFormat(Powerpoint_2k::SoundFormatPtr* SoundFormat/*[out,retval]*/);
  Powerpoint_2k::SoundFormatPtr __fastcall get_SoundFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Script(Office_2k::ScriptPtr* Script/*[out,retval]*/);
  Office_2k::ScriptPtr __fastcall get_Script(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AlternativeText(BSTR* AlternativeText/*[out,retval]*/);
  BSTR            __fastcall get_AlternativeText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AlternativeText(BSTR AlternativeText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasTable(Office_2k::MsoTriState* HasTable/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_HasTable(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Table(Powerpoint_2k::TablePtr* Table/*[out,retval]*/);
  Powerpoint_2k::TablePtr __fastcall get_Table(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Export(BSTR PathName/*[in]*/, 
                                               Powerpoint_2k::PpShapeFormat Filter/*[in]*/, 
                                               int ScaleWidth/*[in,def,opt]*/, 
                                               int ScaleHeight/*[in,def,opt]*/, 
                                               Powerpoint_2k::PpExportMode ExportMode/*[in,def,opt]*/);

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::AdjustmentsPtr Adjustments = {read = get_Adjustments};
  __property   Office_2k::MsoAutoShapeType AutoShapeType = {read = get_AutoShapeType, write = set_AutoShapeType};
  __property   Office_2k::MsoBlackWhiteMode BlackWhiteMode = {read = get_BlackWhiteMode, write = set_BlackWhiteMode};
  __property   Powerpoint_2k::CalloutFormatPtr Callout = {read = get_Callout};
  __property   int             ConnectionSiteCount = {read = get_ConnectionSiteCount};
  __property   Office_2k::MsoTriState Connector = {read = get_Connector};
  __property   Powerpoint_2k::ConnectorFormatPtr ConnectorFormat = {read = get_ConnectorFormat};
  __property   Powerpoint_2k::FillFormatPtr Fill = {read = get_Fill};
  __property   Powerpoint_2k::GroupShapesPtr GroupItems = {read = get_GroupItems};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   Office_2k::MsoTriState HorizontalFlip = {read = get_HorizontalFlip};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   Powerpoint_2k::LineFormatPtr Line = {read = get_Line};
  __property   Office_2k::MsoTriState LockAspectRatio = {read = get_LockAspectRatio, write = set_LockAspectRatio};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   Powerpoint_2k::ShapeNodesPtr Nodes = {read = get_Nodes};
  __property   float           Rotation = {read = get_Rotation, write = set_Rotation};
  __property   Powerpoint_2k::PictureFormatPtr PictureFormat = {read = get_PictureFormat};
  __property   Powerpoint_2k::ShadowFormatPtr Shadow = {read = get_Shadow};
  __property   Powerpoint_2k::TextEffectFormatPtr TextEffect = {read = get_TextEffect};
  __property   Powerpoint_2k::TextFramePtr TextFrame = {read = get_TextFrame};
  __property   Powerpoint_2k::ThreeDFormatPtr ThreeD = {read = get_ThreeD};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   Office_2k::MsoShapeType Type = {read = get_Type};
  __property   Office_2k::MsoTriState VerticalFlip = {read = get_VerticalFlip};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   int             ZOrderPosition = {read = get_ZOrderPosition};
  __property   Powerpoint_2k::OLEFormatPtr OLEFormat = {read = get_OLEFormat};
  __property   Powerpoint_2k::LinkFormatPtr LinkFormat = {read = get_LinkFormat};
  __property   Powerpoint_2k::PlaceholderFormatPtr PlaceholderFormat = {read = get_PlaceholderFormat};
  __property   Powerpoint_2k::AnimationSettingsPtr AnimationSettings = {read = get_AnimationSettings};
  __property   Powerpoint_2k::ActionSettingsPtr ActionSettings = {read = get_ActionSettings};
  __property   Powerpoint_2k::TagsPtr Tags = {read = get_Tags};
  __property   Powerpoint_2k::PpMediaType MediaType = {read = get_MediaType};
  __property   Office_2k::MsoTriState HasTextFrame = {read = get_HasTextFrame};
  __property   Powerpoint_2k::SoundFormatPtr SoundFormat = {read = get_SoundFormat};
  __property   Office_2k::ScriptPtr Script = {read = get_Script};
  __property   BSTR            AlternativeText = {read = get_AlternativeText, write = set_AlternativeText};
  __property   Office_2k::MsoTriState HasTable = {read = get_HasTable};
  __property   Powerpoint_2k::TablePtr Table = {read = get_Table};
};
typedef ShapeDispT<Shape> ShapeDisp;

typedef TComInterface<ShapeRange>  TCOMShapeRange;

// *********************************************************************//
// DispIntf:  ShapeRange
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149347A-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class ShapeRangeDispT : public TAutoDriver<ShapeRange>
{
public:
  ShapeRangeDispT(){}

  ShapeRangeDispT(ShapeRange *pintf)
  {
    TAutoDriver<ShapeRange>::Bind(pintf, false);
  }

  ShapeRangeDispT(ShapeRangePtr pintf)
  {
    TAutoDriver<ShapeRange>::Bind(pintf, true);
  }

  ShapeRangeDispT& operator=(ShapeRange *pintf)
  {
    TAutoDriver<ShapeRange>::Bind(pintf, false);
    return *this;
  }

  ShapeRangeDispT& operator=(ShapeRangePtr pintf)
  {
    TAutoDriver<ShapeRange>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Apply();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Flip(Office_2k::MsoFlipCmd FlipCmd/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IncrementLeft(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IncrementRotation(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IncrementTop(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PickUp();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RerouteConnections();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ScaleHeight(float Factor/*[in]*/, 
                                                    Office_2k::MsoTriState RelativeToOriginalSize/*[in]*/
                                                    , Office_2k::MsoScaleFrom fScale/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ScaleWidth(float Factor/*[in]*/, 
                                                   Office_2k::MsoTriState RelativeToOriginalSize/*[in]*/
                                                   , Office_2k::MsoScaleFrom fScale/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetShapesDefaultProperties();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Ungroup(Powerpoint_2k::ShapeRangePtr* Ungroup/*[out,retval]*/);
  Powerpoint_2k::ShapeRangePtr __fastcall Ungroup(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ZOrder(Office_2k::MsoZOrderCmd ZOrderCmd/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Adjustments(Powerpoint_2k::AdjustmentsPtr* Adjustments/*[out,retval]*/);
  Powerpoint_2k::AdjustmentsPtr __fastcall get_Adjustments(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoShapeType(Office_2k::MsoAutoShapeType* AutoShapeType/*[out,retval]*/);
  Office_2k::MsoAutoShapeType __fastcall get_AutoShapeType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoShapeType(Office_2k::MsoAutoShapeType AutoShapeType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BlackWhiteMode(Office_2k::MsoBlackWhiteMode* BlackWhiteMode/*[out,retval]*/);
  Office_2k::MsoBlackWhiteMode __fastcall get_BlackWhiteMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BlackWhiteMode(Office_2k::MsoBlackWhiteMode BlackWhiteMode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Callout(Powerpoint_2k::CalloutFormatPtr* Callout/*[out,retval]*/);
  Powerpoint_2k::CalloutFormatPtr __fastcall get_Callout(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ConnectionSiteCount(int* ConnectionSiteCount/*[out,retval]*/);
  int             __fastcall get_ConnectionSiteCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Connector(Office_2k::MsoTriState* Connector/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Connector(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ConnectorFormat(Powerpoint_2k::ConnectorFormatPtr* ConnectorFormat/*[out,retval]*/);
  Powerpoint_2k::ConnectorFormatPtr __fastcall get_ConnectorFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Fill(Powerpoint_2k::FillFormatPtr* Fill/*[out,retval]*/);
  Powerpoint_2k::FillFormatPtr __fastcall get_Fill(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupItems(Powerpoint_2k::GroupShapesPtr* GroupItems/*[out,retval]*/);
  Powerpoint_2k::GroupShapesPtr __fastcall get_GroupItems(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(float* Height/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HorizontalFlip(Office_2k::MsoTriState* HorizontalFlip/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_HorizontalFlip(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(float* Left/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(float Left/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Line(Powerpoint_2k::LineFormatPtr* Line/*[out,retval]*/);
  Powerpoint_2k::LineFormatPtr __fastcall get_Line(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LockAspectRatio(Office_2k::MsoTriState* LockAspectRatio/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_LockAspectRatio(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LockAspectRatio(Office_2k::MsoTriState LockAspectRatio/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Nodes(Powerpoint_2k::ShapeNodesPtr* Nodes/*[out,retval]*/);
  Powerpoint_2k::ShapeNodesPtr __fastcall get_Nodes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Rotation(float* Rotation/*[out,retval]*/);
  float           __fastcall get_Rotation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Rotation(float Rotation/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureFormat(Powerpoint_2k::PictureFormatPtr* Picture/*[out,retval]*/);
  Powerpoint_2k::PictureFormatPtr __fastcall get_PictureFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Shadow(Powerpoint_2k::ShadowFormatPtr* Shadow/*[out,retval]*/);
  Powerpoint_2k::ShadowFormatPtr __fastcall get_Shadow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextEffect(Powerpoint_2k::TextEffectFormatPtr* TextEffect/*[out,retval]*/);
  Powerpoint_2k::TextEffectFormatPtr __fastcall get_TextEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextFrame(Powerpoint_2k::TextFramePtr* TextFrame/*[out,retval]*/);
  Powerpoint_2k::TextFramePtr __fastcall get_TextFrame(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ThreeD(Powerpoint_2k::ThreeDFormatPtr* ThreeD/*[out,retval]*/);
  Powerpoint_2k::ThreeDFormatPtr __fastcall get_ThreeD(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(float* Top/*[out,retval]*/);
  float           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(float Top/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Office_2k::MsoShapeType* Type/*[out,retval]*/);
  Office_2k::MsoShapeType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VerticalFlip(Office_2k::MsoTriState* VerticalFlip/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_VerticalFlip(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Vertices(TVariant* Vertices/*[out,retval]*/);
  TVariant        __fastcall get_Vertices(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_2k::MsoTriState Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(float* Width/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(float Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ZOrderPosition(int* ZOrderPosition/*[out,retval]*/);
  int             __fastcall get_ZOrderPosition(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OLEFormat(Powerpoint_2k::OLEFormatPtr* OLEFormat/*[out,retval]*/);
  Powerpoint_2k::OLEFormatPtr __fastcall get_OLEFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LinkFormat(Powerpoint_2k::LinkFormatPtr* LinkFormat/*[out,retval]*/);
  Powerpoint_2k::LinkFormatPtr __fastcall get_LinkFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PlaceholderFormat(Powerpoint_2k::PlaceholderFormatPtr* PlaceholderFormat/*[out,retval]*/);
  Powerpoint_2k::PlaceholderFormatPtr __fastcall get_PlaceholderFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AnimationSettings(Powerpoint_2k::AnimationSettingsPtr* AnimationSettings/*[out,retval]*/);
  Powerpoint_2k::AnimationSettingsPtr __fastcall get_AnimationSettings(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActionSettings(Powerpoint_2k::ActionSettingsPtr* ActionSettings/*[out,retval]*/);
  Powerpoint_2k::ActionSettingsPtr __fastcall get_ActionSettings(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/);
  Powerpoint_2k::TagsPtr __fastcall get_Tags(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Cut();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Copy();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Select(Office_2k::MsoTriState Replace/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Duplicate(Powerpoint_2k::ShapeRangePtr* Duplicate/*[out,retval]*/);
  Powerpoint_2k::ShapeRangePtr __fastcall Duplicate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MediaType(Powerpoint_2k::PpMediaType* MediaType/*[out,retval]*/);
  Powerpoint_2k::PpMediaType __fastcall get_MediaType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasTextFrame(Office_2k::MsoTriState* HasTextFrame/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_HasTextFrame(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SoundFormat(Powerpoint_2k::SoundFormatPtr* SoundFormat/*[out,retval]*/);
  Powerpoint_2k::SoundFormatPtr __fastcall get_SoundFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(TVariantInParam index/*[in]*/, 
                                             Powerpoint_2k::ShapePtr* Item/*[out,retval]*/);
  Powerpoint_2k::ShapePtr __fastcall Item(TVariantInParam index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/);
  TVariant        __fastcall _Index(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Group(Powerpoint_2k::ShapePtr* Group/*[out,retval]*/);
  Powerpoint_2k::ShapePtr __fastcall Group(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Regroup(Powerpoint_2k::ShapePtr* Regroup/*[out,retval]*/);
  Powerpoint_2k::ShapePtr __fastcall Regroup(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Align(Office_2k::MsoAlignCmd AlignCmd/*[in]*/, 
                                              Office_2k::MsoTriState RelativeTo/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Distribute(Office_2k::MsoDistributeCmd DistributeCmd/*[in]*/
                                                   , Office_2k::MsoTriState RelativeTo/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetPolygonalRepresentation(unsigned_long maxPointsInBuffer/*[in]*/
                                                                   , float* pPoints/*[in]*/, 
                                                                   unsigned_long* numPointsInPolygon/*[out]*/
                                                                   , 
                                                                   Office_2k::MsoTriState* IsOpen/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Script(Office_2k::ScriptPtr* Script/*[out,retval]*/);
  Office_2k::ScriptPtr __fastcall get_Script(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AlternativeText(BSTR* AlternativeText/*[out,retval]*/);
  BSTR            __fastcall get_AlternativeText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AlternativeText(BSTR AlternativeText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasTable(Office_2k::MsoTriState* HasTable/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_HasTable(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Table(Powerpoint_2k::TablePtr* Table/*[out,retval]*/);
  Powerpoint_2k::TablePtr __fastcall get_Table(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Export(BSTR PathName/*[in]*/, 
                                               Powerpoint_2k::PpShapeFormat Filter/*[in]*/, 
                                               int ScaleWidth/*[in,def,opt]*/, 
                                               int ScaleHeight/*[in,def,opt]*/, 
                                               Powerpoint_2k::PpExportMode ExportMode/*[in,def,opt]*/);

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::AdjustmentsPtr Adjustments = {read = get_Adjustments};
  __property   Office_2k::MsoAutoShapeType AutoShapeType = {read = get_AutoShapeType, write = set_AutoShapeType};
  __property   Office_2k::MsoBlackWhiteMode BlackWhiteMode = {read = get_BlackWhiteMode, write = set_BlackWhiteMode};
  __property   Powerpoint_2k::CalloutFormatPtr Callout = {read = get_Callout};
  __property   int             ConnectionSiteCount = {read = get_ConnectionSiteCount};
  __property   Office_2k::MsoTriState Connector = {read = get_Connector};
  __property   Powerpoint_2k::ConnectorFormatPtr ConnectorFormat = {read = get_ConnectorFormat};
  __property   Powerpoint_2k::FillFormatPtr Fill = {read = get_Fill};
  __property   Powerpoint_2k::GroupShapesPtr GroupItems = {read = get_GroupItems};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   Office_2k::MsoTriState HorizontalFlip = {read = get_HorizontalFlip};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   Powerpoint_2k::LineFormatPtr Line = {read = get_Line};
  __property   Office_2k::MsoTriState LockAspectRatio = {read = get_LockAspectRatio, write = set_LockAspectRatio};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   Powerpoint_2k::ShapeNodesPtr Nodes = {read = get_Nodes};
  __property   float           Rotation = {read = get_Rotation, write = set_Rotation};
  __property   Powerpoint_2k::PictureFormatPtr PictureFormat = {read = get_PictureFormat};
  __property   Powerpoint_2k::ShadowFormatPtr Shadow = {read = get_Shadow};
  __property   Powerpoint_2k::TextEffectFormatPtr TextEffect = {read = get_TextEffect};
  __property   Powerpoint_2k::TextFramePtr TextFrame = {read = get_TextFrame};
  __property   Powerpoint_2k::ThreeDFormatPtr ThreeD = {read = get_ThreeD};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   Office_2k::MsoShapeType Type = {read = get_Type};
  __property   Office_2k::MsoTriState VerticalFlip = {read = get_VerticalFlip};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   int             ZOrderPosition = {read = get_ZOrderPosition};
  __property   Powerpoint_2k::OLEFormatPtr OLEFormat = {read = get_OLEFormat};
  __property   Powerpoint_2k::LinkFormatPtr LinkFormat = {read = get_LinkFormat};
  __property   Powerpoint_2k::PlaceholderFormatPtr PlaceholderFormat = {read = get_PlaceholderFormat};
  __property   Powerpoint_2k::AnimationSettingsPtr AnimationSettings = {read = get_AnimationSettings};
  __property   Powerpoint_2k::ActionSettingsPtr ActionSettings = {read = get_ActionSettings};
  __property   Powerpoint_2k::TagsPtr Tags = {read = get_Tags};
  __property   Powerpoint_2k::PpMediaType MediaType = {read = get_MediaType};
  __property   Office_2k::MsoTriState HasTextFrame = {read = get_HasTextFrame};
  __property   Powerpoint_2k::SoundFormatPtr SoundFormat = {read = get_SoundFormat};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
  __property   Office_2k::ScriptPtr Script = {read = get_Script};
  __property   BSTR            AlternativeText = {read = get_AlternativeText, write = set_AlternativeText};
  __property   Office_2k::MsoTriState HasTable = {read = get_HasTable};
  __property   Powerpoint_2k::TablePtr Table = {read = get_Table};
};
typedef ShapeRangeDispT<ShapeRange> ShapeRangeDisp;

typedef TComInterface<GroupShapes>  TCOMGroupShapes;

// *********************************************************************//
// DispIntf:  GroupShapes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149347B-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class GroupShapesDispT : public TAutoDriver<GroupShapes>
{
public:
  GroupShapesDispT(){}

  GroupShapesDispT(GroupShapes *pintf)
  {
    TAutoDriver<GroupShapes>::Bind(pintf, false);
  }

  GroupShapesDispT(GroupShapesPtr pintf)
  {
    TAutoDriver<GroupShapes>::Bind(pintf, true);
  }

  GroupShapesDispT& operator=(GroupShapes *pintf)
  {
    TAutoDriver<GroupShapes>::Bind(pintf, false);
    return *this;
  }

  GroupShapesDispT& operator=(GroupShapesPtr pintf)
  {
    TAutoDriver<GroupShapes>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(int* pnShapes/*[out,retval]*/);
  int             __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(TVariantInParam index/*[in]*/, 
                                             Powerpoint_2k::ShapePtr* Item/*[out,retval]*/);
  Powerpoint_2k::ShapePtr __fastcall Item(TVariantInParam index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppienum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef GroupShapesDispT<GroupShapes> GroupShapesDisp;

typedef TComInterface<Adjustments>  TCOMAdjustments;

// *********************************************************************//
// DispIntf:  Adjustments
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149347C-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class AdjustmentsDispT : public TAutoDriver<Adjustments>
{
public:
  AdjustmentsDispT(){}

  AdjustmentsDispT(Adjustments *pintf)
  {
    TAutoDriver<Adjustments>::Bind(pintf, false);
  }

  AdjustmentsDispT(AdjustmentsPtr pintf)
  {
    TAutoDriver<Adjustments>::Bind(pintf, true);
  }

  AdjustmentsDispT& operator=(Adjustments *pintf)
  {
    TAutoDriver<Adjustments>::Bind(pintf, false);
    return *this;
  }

  AdjustmentsDispT& operator=(AdjustmentsPtr pintf)
  {
    TAutoDriver<Adjustments>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(int* Count/*[out,retval]*/);
  int             __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(int index/*[in]*/, float* Val/*[out,retval]*/);
  float           __fastcall get_Item(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Item(int index/*[in]*/, float Val/*[in]*/);

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count};
};
typedef AdjustmentsDispT<Adjustments> AdjustmentsDisp;

typedef TComInterface<PictureFormat>  TCOMPictureFormat;

// *********************************************************************//
// DispIntf:  PictureFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149347D-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PictureFormatDispT : public TAutoDriver<PictureFormat>
{
public:
  PictureFormatDispT(){}

  PictureFormatDispT(PictureFormat *pintf)
  {
    TAutoDriver<PictureFormat>::Bind(pintf, false);
  }

  PictureFormatDispT(PictureFormatPtr pintf)
  {
    TAutoDriver<PictureFormat>::Bind(pintf, true);
  }

  PictureFormatDispT& operator=(PictureFormat *pintf)
  {
    TAutoDriver<PictureFormat>::Bind(pintf, false);
    return *this;
  }

  PictureFormatDispT& operator=(PictureFormatPtr pintf)
  {
    TAutoDriver<PictureFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IncrementBrightness(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IncrementContrast(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Brightness(float* Brightness/*[out,retval]*/);
  float           __fastcall get_Brightness(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Brightness(float Brightness/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColorType(Office_2k::MsoPictureColorType* ColorType/*[out,retval]*/);
  Office_2k::MsoPictureColorType __fastcall get_ColorType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColorType(Office_2k::MsoPictureColorType ColorType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Contrast(float* Contrast/*[out,retval]*/);
  float           __fastcall get_Contrast(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Contrast(float Contrast/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CropBottom(float* CropBottom/*[out,retval]*/);
  float           __fastcall get_CropBottom(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CropBottom(float CropBottom/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CropLeft(float* CropLeft/*[out,retval]*/);
  float           __fastcall get_CropLeft(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CropLeft(float CropLeft/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CropRight(float* CropRight/*[out,retval]*/);
  float           __fastcall get_CropRight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CropRight(float CropRight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CropTop(float* CropTop/*[out,retval]*/);
  float           __fastcall get_CropTop(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CropTop(float CropTop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TransparencyColor(Office_2k::MsoRGBType* TransparencyColor/*[out,retval]*/);
  Office_2k::MsoRGBType __fastcall get_TransparencyColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TransparencyColor(Office_2k::MsoRGBType TransparencyColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TransparentBackground(Office_2k::MsoTriState* TransparentBackground/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_TransparentBackground(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TransparentBackground(Office_2k::MsoTriState TransparentBackground/*[in]*/);

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   float           Brightness = {read = get_Brightness, write = set_Brightness};
  __property   Office_2k::MsoPictureColorType ColorType = {read = get_ColorType, write = set_ColorType};
  __property   float           Contrast = {read = get_Contrast, write = set_Contrast};
  __property   float           CropBottom = {read = get_CropBottom, write = set_CropBottom};
  __property   float           CropLeft = {read = get_CropLeft, write = set_CropLeft};
  __property   float           CropRight = {read = get_CropRight, write = set_CropRight};
  __property   float           CropTop = {read = get_CropTop, write = set_CropTop};
  __property   Office_2k::MsoRGBType TransparencyColor = {read = get_TransparencyColor, write = set_TransparencyColor};
  __property   Office_2k::MsoTriState TransparentBackground = {read = get_TransparentBackground, write = set_TransparentBackground};
};
typedef PictureFormatDispT<PictureFormat> PictureFormatDisp;

typedef TComInterface<FillFormat>  TCOMFillFormat;

// *********************************************************************//
// DispIntf:  FillFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149347E-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class FillFormatDispT : public TAutoDriver<FillFormat>
{
public:
  FillFormatDispT(){}

  FillFormatDispT(FillFormat *pintf)
  {
    TAutoDriver<FillFormat>::Bind(pintf, false);
  }

  FillFormatDispT(FillFormatPtr pintf)
  {
    TAutoDriver<FillFormat>::Bind(pintf, true);
  }

  FillFormatDispT& operator=(FillFormat *pintf)
  {
    TAutoDriver<FillFormat>::Bind(pintf, false);
    return *this;
  }

  FillFormatDispT& operator=(FillFormatPtr pintf)
  {
    TAutoDriver<FillFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Background();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall OneColorGradient(Office_2k::MsoGradientStyle Style/*[in]*/, 
                                                         int Variant/*[in]*/, float Degree/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Patterned(Office_2k::MsoPatternType Pattern/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PresetGradient(Office_2k::MsoGradientStyle Style/*[in]*/, 
                                                       int Variant/*[in]*/, 
                                                       Office_2k::MsoPresetGradientType PresetGradientType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PresetTextured(Office_2k::MsoPresetTexture PresetTexture/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Solid();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall TwoColorGradient(Office_2k::MsoGradientStyle Style/*[in]*/, 
                                                         int Variant/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall UserPicture(BSTR PictureFile/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall UserTextured(BSTR TextureFile/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackColor(Powerpoint_2k::ColorFormatPtr* BackColor/*[out,retval]*/);
  Powerpoint_2k::ColorFormatPtr __fastcall get_BackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackColor(Powerpoint_2k::ColorFormatPtr BackColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ForeColor(Powerpoint_2k::ColorFormatPtr* ForeColor/*[out,retval]*/);
  Powerpoint_2k::ColorFormatPtr __fastcall get_ForeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ForeColor(Powerpoint_2k::ColorFormatPtr ForeColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GradientColorType(Office_2k::MsoGradientColorType* GradientColorType/*[out,retval]*/);
  Office_2k::MsoGradientColorType __fastcall get_GradientColorType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GradientDegree(float* GradientDegree/*[out,retval]*/);
  float           __fastcall get_GradientDegree(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GradientStyle(Office_2k::MsoGradientStyle* GradientStyle/*[out,retval]*/);
  Office_2k::MsoGradientStyle __fastcall get_GradientStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GradientVariant(int* GradientVariant/*[out,retval]*/);
  int             __fastcall get_GradientVariant(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Pattern(Office_2k::MsoPatternType* Pattern/*[out,retval]*/);
  Office_2k::MsoPatternType __fastcall get_Pattern(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PresetGradientType(Office_2k::MsoPresetGradientType* PresetGradientType/*[out,retval]*/);
  Office_2k::MsoPresetGradientType __fastcall get_PresetGradientType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PresetTexture(Office_2k::MsoPresetTexture* PresetTexture/*[out,retval]*/);
  Office_2k::MsoPresetTexture __fastcall get_PresetTexture(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextureName(BSTR* TextureName/*[out,retval]*/);
  BSTR            __fastcall get_TextureName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextureType(Office_2k::MsoTextureType* TextureType/*[out,retval]*/);
  Office_2k::MsoTextureType __fastcall get_TextureType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Transparency(float* Transparency/*[out,retval]*/);
  float           __fastcall get_Transparency(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Transparency(float Transparency/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Office_2k::MsoFillType* Type/*[out,retval]*/);
  Office_2k::MsoFillType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_2k::MsoTriState Visible/*[in]*/);

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::ColorFormatPtr BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Powerpoint_2k::ColorFormatPtr ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   Office_2k::MsoGradientColorType GradientColorType = {read = get_GradientColorType};
  __property   float           GradientDegree = {read = get_GradientDegree};
  __property   Office_2k::MsoGradientStyle GradientStyle = {read = get_GradientStyle};
  __property   int             GradientVariant = {read = get_GradientVariant};
  __property   Office_2k::MsoPatternType Pattern = {read = get_Pattern};
  __property   Office_2k::MsoPresetGradientType PresetGradientType = {read = get_PresetGradientType};
  __property   Office_2k::MsoPresetTexture PresetTexture = {read = get_PresetTexture};
  __property   BSTR            TextureName = {read = get_TextureName};
  __property   Office_2k::MsoTextureType TextureType = {read = get_TextureType};
  __property   float           Transparency = {read = get_Transparency, write = set_Transparency};
  __property   Office_2k::MsoFillType Type = {read = get_Type};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};
};
typedef FillFormatDispT<FillFormat> FillFormatDisp;

typedef TComInterface<LineFormat>  TCOMLineFormat;

// *********************************************************************//
// DispIntf:  LineFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149347F-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class LineFormatDispT : public TAutoDriver<LineFormat>
{
public:
  LineFormatDispT(){}

  LineFormatDispT(LineFormat *pintf)
  {
    TAutoDriver<LineFormat>::Bind(pintf, false);
  }

  LineFormatDispT(LineFormatPtr pintf)
  {
    TAutoDriver<LineFormat>::Bind(pintf, true);
  }

  LineFormatDispT& operator=(LineFormat *pintf)
  {
    TAutoDriver<LineFormat>::Bind(pintf, false);
    return *this;
  }

  LineFormatDispT& operator=(LineFormatPtr pintf)
  {
    TAutoDriver<LineFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackColor(Powerpoint_2k::ColorFormatPtr* BackColor/*[out,retval]*/);
  Powerpoint_2k::ColorFormatPtr __fastcall get_BackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackColor(Powerpoint_2k::ColorFormatPtr BackColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BeginArrowheadLength(Office_2k::MsoArrowheadLength* BeginArrowheadLength/*[out,retval]*/);
  Office_2k::MsoArrowheadLength __fastcall get_BeginArrowheadLength(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BeginArrowheadLength(Office_2k::MsoArrowheadLength BeginArrowheadLength/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BeginArrowheadStyle(Office_2k::MsoArrowheadStyle* BeginArrowheadStyle/*[out,retval]*/);
  Office_2k::MsoArrowheadStyle __fastcall get_BeginArrowheadStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BeginArrowheadStyle(Office_2k::MsoArrowheadStyle BeginArrowheadStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BeginArrowheadWidth(Office_2k::MsoArrowheadWidth* BeginArrowheadWidth/*[out,retval]*/);
  Office_2k::MsoArrowheadWidth __fastcall get_BeginArrowheadWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BeginArrowheadWidth(Office_2k::MsoArrowheadWidth BeginArrowheadWidth/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DashStyle(Office_2k::MsoLineDashStyle* DashStyle/*[out,retval]*/);
  Office_2k::MsoLineDashStyle __fastcall get_DashStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DashStyle(Office_2k::MsoLineDashStyle DashStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EndArrowheadLength(Office_2k::MsoArrowheadLength* EndArrowheadLength/*[out,retval]*/);
  Office_2k::MsoArrowheadLength __fastcall get_EndArrowheadLength(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EndArrowheadLength(Office_2k::MsoArrowheadLength EndArrowheadLength/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EndArrowheadStyle(Office_2k::MsoArrowheadStyle* EndArrowheadStyle/*[out,retval]*/);
  Office_2k::MsoArrowheadStyle __fastcall get_EndArrowheadStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EndArrowheadStyle(Office_2k::MsoArrowheadStyle EndArrowheadStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EndArrowheadWidth(Office_2k::MsoArrowheadWidth* EndArrowheadWidth/*[out,retval]*/);
  Office_2k::MsoArrowheadWidth __fastcall get_EndArrowheadWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EndArrowheadWidth(Office_2k::MsoArrowheadWidth EndArrowheadWidth/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ForeColor(Powerpoint_2k::ColorFormatPtr* ForeColor/*[out,retval]*/);
  Powerpoint_2k::ColorFormatPtr __fastcall get_ForeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ForeColor(Powerpoint_2k::ColorFormatPtr ForeColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Pattern(Office_2k::MsoPatternType* Pattern/*[out,retval]*/);
  Office_2k::MsoPatternType __fastcall get_Pattern(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Pattern(Office_2k::MsoPatternType Pattern/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Style(Office_2k::MsoLineStyle* Style/*[out,retval]*/);
  Office_2k::MsoLineStyle __fastcall get_Style(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Style(Office_2k::MsoLineStyle Style/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Transparency(float* Transparency/*[out,retval]*/);
  float           __fastcall get_Transparency(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Transparency(float Transparency/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_2k::MsoTriState Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Weight(float* Weight/*[out,retval]*/);
  float           __fastcall get_Weight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Weight(float Weight/*[in]*/);

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::ColorFormatPtr BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Office_2k::MsoArrowheadLength BeginArrowheadLength = {read = get_BeginArrowheadLength, write = set_BeginArrowheadLength};
  __property   Office_2k::MsoArrowheadStyle BeginArrowheadStyle = {read = get_BeginArrowheadStyle, write = set_BeginArrowheadStyle};
  __property   Office_2k::MsoArrowheadWidth BeginArrowheadWidth = {read = get_BeginArrowheadWidth, write = set_BeginArrowheadWidth};
  __property   Office_2k::MsoLineDashStyle DashStyle = {read = get_DashStyle, write = set_DashStyle};
  __property   Office_2k::MsoArrowheadLength EndArrowheadLength = {read = get_EndArrowheadLength, write = set_EndArrowheadLength};
  __property   Office_2k::MsoArrowheadStyle EndArrowheadStyle = {read = get_EndArrowheadStyle, write = set_EndArrowheadStyle};
  __property   Office_2k::MsoArrowheadWidth EndArrowheadWidth = {read = get_EndArrowheadWidth, write = set_EndArrowheadWidth};
  __property   Powerpoint_2k::ColorFormatPtr ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   Office_2k::MsoPatternType Pattern = {read = get_Pattern, write = set_Pattern};
  __property   Office_2k::MsoLineStyle Style = {read = get_Style, write = set_Style};
  __property   float           Transparency = {read = get_Transparency, write = set_Transparency};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   float           Weight = {read = get_Weight, write = set_Weight};
};
typedef LineFormatDispT<LineFormat> LineFormatDisp;

typedef TComInterface<ShadowFormat>  TCOMShadowFormat;

// *********************************************************************//
// DispIntf:  ShadowFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493480-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class ShadowFormatDispT : public TAutoDriver<ShadowFormat>
{
public:
  ShadowFormatDispT(){}

  ShadowFormatDispT(ShadowFormat *pintf)
  {
    TAutoDriver<ShadowFormat>::Bind(pintf, false);
  }

  ShadowFormatDispT(ShadowFormatPtr pintf)
  {
    TAutoDriver<ShadowFormat>::Bind(pintf, true);
  }

  ShadowFormatDispT& operator=(ShadowFormat *pintf)
  {
    TAutoDriver<ShadowFormat>::Bind(pintf, false);
    return *this;
  }

  ShadowFormatDispT& operator=(ShadowFormatPtr pintf)
  {
    TAutoDriver<ShadowFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IncrementOffsetX(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IncrementOffsetY(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ForeColor(Powerpoint_2k::ColorFormatPtr* ForeColor/*[out,retval]*/);
  Powerpoint_2k::ColorFormatPtr __fastcall get_ForeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ForeColor(Powerpoint_2k::ColorFormatPtr ForeColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Obscured(Office_2k::MsoTriState* Obscured/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Obscured(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Obscured(Office_2k::MsoTriState Obscured/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OffsetX(float* OffsetX/*[out,retval]*/);
  float           __fastcall get_OffsetX(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OffsetX(float OffsetX/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OffsetY(float* OffsetY/*[out,retval]*/);
  float           __fastcall get_OffsetY(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OffsetY(float OffsetY/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Transparency(float* Transparency/*[out,retval]*/);
  float           __fastcall get_Transparency(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Transparency(float Transparency/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Office_2k::MsoShadowType* Type/*[out,retval]*/);
  Office_2k::MsoShadowType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Type(Office_2k::MsoShadowType Type/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_2k::MsoTriState Visible/*[in]*/);

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::ColorFormatPtr ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   Office_2k::MsoTriState Obscured = {read = get_Obscured, write = set_Obscured};
  __property   float           OffsetX = {read = get_OffsetX, write = set_OffsetX};
  __property   float           OffsetY = {read = get_OffsetY, write = set_OffsetY};
  __property   float           Transparency = {read = get_Transparency, write = set_Transparency};
  __property   Office_2k::MsoShadowType Type = {read = get_Type, write = set_Type};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};
};
typedef ShadowFormatDispT<ShadowFormat> ShadowFormatDisp;

typedef TComInterface<ConnectorFormat>  TCOMConnectorFormat;

// *********************************************************************//
// DispIntf:  ConnectorFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493481-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class ConnectorFormatDispT : public TAutoDriver<ConnectorFormat>
{
public:
  ConnectorFormatDispT(){}

  ConnectorFormatDispT(ConnectorFormat *pintf)
  {
    TAutoDriver<ConnectorFormat>::Bind(pintf, false);
  }

  ConnectorFormatDispT(ConnectorFormatPtr pintf)
  {
    TAutoDriver<ConnectorFormat>::Bind(pintf, true);
  }

  ConnectorFormatDispT& operator=(ConnectorFormat *pintf)
  {
    TAutoDriver<ConnectorFormat>::Bind(pintf, false);
    return *this;
  }

  ConnectorFormatDispT& operator=(ConnectorFormatPtr pintf)
  {
    TAutoDriver<ConnectorFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall BeginConnect(Powerpoint_2k::ShapePtr ConnectedShape/*[in]*/
                                                     , int ConnectionSite/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall BeginDisconnect();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall EndConnect(Powerpoint_2k::ShapePtr ConnectedShape/*[in]*/, 
                                                   int ConnectionSite/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall EndDisconnect();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BeginConnected(Office_2k::MsoTriState* BeginConnected/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_BeginConnected(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BeginConnectedShape(Powerpoint_2k::ShapePtr* BeginConnectedShape/*[out,retval]*/);
  Powerpoint_2k::ShapePtr __fastcall get_BeginConnectedShape(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BeginConnectionSite(int* BeginConnectionSite/*[out,retval]*/);
  int             __fastcall get_BeginConnectionSite(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EndConnected(Office_2k::MsoTriState* EndConnected/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_EndConnected(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EndConnectedShape(Powerpoint_2k::ShapePtr* EndConnectedShape/*[out,retval]*/);
  Powerpoint_2k::ShapePtr __fastcall get_EndConnectedShape(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EndConnectionSite(int* EndConnectionSite/*[out,retval]*/);
  int             __fastcall get_EndConnectionSite(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Office_2k::MsoConnectorType* Type/*[out,retval]*/);
  Office_2k::MsoConnectorType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Type(Office_2k::MsoConnectorType Type/*[in]*/);

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoTriState BeginConnected = {read = get_BeginConnected};
  __property   Powerpoint_2k::ShapePtr BeginConnectedShape = {read = get_BeginConnectedShape};
  __property   int             BeginConnectionSite = {read = get_BeginConnectionSite};
  __property   Office_2k::MsoTriState EndConnected = {read = get_EndConnected};
  __property   Powerpoint_2k::ShapePtr EndConnectedShape = {read = get_EndConnectedShape};
  __property   int             EndConnectionSite = {read = get_EndConnectionSite};
  __property   Office_2k::MsoConnectorType Type = {read = get_Type, write = set_Type};
};
typedef ConnectorFormatDispT<ConnectorFormat> ConnectorFormatDisp;

typedef TComInterface<TextEffectFormat>  TCOMTextEffectFormat;

// *********************************************************************//
// DispIntf:  TextEffectFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493482-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class TextEffectFormatDispT : public TAutoDriver<TextEffectFormat>
{
public:
  TextEffectFormatDispT(){}

  TextEffectFormatDispT(TextEffectFormat *pintf)
  {
    TAutoDriver<TextEffectFormat>::Bind(pintf, false);
  }

  TextEffectFormatDispT(TextEffectFormatPtr pintf)
  {
    TAutoDriver<TextEffectFormat>::Bind(pintf, true);
  }

  TextEffectFormatDispT& operator=(TextEffectFormat *pintf)
  {
    TAutoDriver<TextEffectFormat>::Bind(pintf, false);
    return *this;
  }

  TextEffectFormatDispT& operator=(TextEffectFormatPtr pintf)
  {
    TAutoDriver<TextEffectFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ToggleVerticalText();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Alignment(Office_2k::MsoTextEffectAlignment* Alignment/*[out,retval]*/);
  Office_2k::MsoTextEffectAlignment __fastcall get_Alignment(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Alignment(Office_2k::MsoTextEffectAlignment Alignment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontBold(Office_2k::MsoTriState* FontBold/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_FontBold(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontBold(Office_2k::MsoTriState FontBold/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontItalic(Office_2k::MsoTriState* FontItalic/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_FontItalic(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontItalic(Office_2k::MsoTriState FontItalic/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontName(BSTR* FontName/*[out,retval]*/);
  BSTR            __fastcall get_FontName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontName(BSTR FontName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontSize(float* FontSize/*[out,retval]*/);
  float           __fastcall get_FontSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontSize(float FontSize/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_KernedPairs(Office_2k::MsoTriState* KernedPairs/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_KernedPairs(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_KernedPairs(Office_2k::MsoTriState KernedPairs/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NormalizedHeight(Office_2k::MsoTriState* NormalizedHeight/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_NormalizedHeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_NormalizedHeight(Office_2k::MsoTriState NormalizedHeight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PresetShape(Office_2k::MsoPresetTextEffectShape* PresetShape/*[out,retval]*/);
  Office_2k::MsoPresetTextEffectShape __fastcall get_PresetShape(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PresetShape(Office_2k::MsoPresetTextEffectShape PresetShape/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PresetTextEffect(Office_2k::MsoPresetTextEffect* Preset/*[out,retval]*/);
  Office_2k::MsoPresetTextEffect __fastcall get_PresetTextEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PresetTextEffect(Office_2k::MsoPresetTextEffect Preset/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RotatedChars(Office_2k::MsoTriState* RotatedChars/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_RotatedChars(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RotatedChars(Office_2k::MsoTriState RotatedChars/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Text(BSTR* Text/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Text(BSTR Text/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tracking(float* Tracking/*[out,retval]*/);
  float           __fastcall get_Tracking(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Tracking(float Tracking/*[in]*/);

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoTextEffectAlignment Alignment = {read = get_Alignment, write = set_Alignment};
  __property   Office_2k::MsoTriState FontBold = {read = get_FontBold, write = set_FontBold};
  __property   Office_2k::MsoTriState FontItalic = {read = get_FontItalic, write = set_FontItalic};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   float           FontSize = {read = get_FontSize, write = set_FontSize};
  __property   Office_2k::MsoTriState KernedPairs = {read = get_KernedPairs, write = set_KernedPairs};
  __property   Office_2k::MsoTriState NormalizedHeight = {read = get_NormalizedHeight, write = set_NormalizedHeight};
  __property   Office_2k::MsoPresetTextEffectShape PresetShape = {read = get_PresetShape, write = set_PresetShape};
  __property   Office_2k::MsoPresetTextEffect PresetTextEffect = {read = get_PresetTextEffect, write = set_PresetTextEffect};
  __property   Office_2k::MsoTriState RotatedChars = {read = get_RotatedChars, write = set_RotatedChars};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   float           Tracking = {read = get_Tracking, write = set_Tracking};
};
typedef TextEffectFormatDispT<TextEffectFormat> TextEffectFormatDisp;

typedef TComInterface<ThreeDFormat>  TCOMThreeDFormat;

// *********************************************************************//
// DispIntf:  ThreeDFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493483-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class ThreeDFormatDispT : public TAutoDriver<ThreeDFormat>
{
public:
  ThreeDFormatDispT(){}

  ThreeDFormatDispT(ThreeDFormat *pintf)
  {
    TAutoDriver<ThreeDFormat>::Bind(pintf, false);
  }

  ThreeDFormatDispT(ThreeDFormatPtr pintf)
  {
    TAutoDriver<ThreeDFormat>::Bind(pintf, true);
  }

  ThreeDFormatDispT& operator=(ThreeDFormat *pintf)
  {
    TAutoDriver<ThreeDFormat>::Bind(pintf, false);
    return *this;
  }

  ThreeDFormatDispT& operator=(ThreeDFormatPtr pintf)
  {
    TAutoDriver<ThreeDFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IncrementRotationX(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IncrementRotationY(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ResetRotation();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetThreeDFormat(Office_2k::MsoPresetThreeDFormat PresetThreeDFormat/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetExtrusionDirection(Office_2k::MsoPresetExtrusionDirection PresetExtrusionDirection/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Depth(float* Depth/*[out,retval]*/);
  float           __fastcall get_Depth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Depth(float Depth/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ExtrusionColor(Powerpoint_2k::ColorFormatPtr* ExtrusionColor/*[out,retval]*/);
  Powerpoint_2k::ColorFormatPtr __fastcall get_ExtrusionColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ExtrusionColorType(Office_2k::MsoExtrusionColorType* ExtrusionColorType/*[out,retval]*/);
  Office_2k::MsoExtrusionColorType __fastcall get_ExtrusionColorType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ExtrusionColorType(Office_2k::MsoExtrusionColorType ExtrusionColorType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Perspective(Office_2k::MsoTriState* Perspective/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Perspective(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Perspective(Office_2k::MsoTriState Perspective/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PresetExtrusionDirection(Office_2k::MsoPresetExtrusionDirection* PresetExtrusionDirection/*[out,retval]*/);
  Office_2k::MsoPresetExtrusionDirection __fastcall get_PresetExtrusionDirection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PresetLightingDirection(Office_2k::MsoPresetLightingDirection* PresetLightingDirection/*[out,retval]*/);
  Office_2k::MsoPresetLightingDirection __fastcall get_PresetLightingDirection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PresetLightingDirection(Office_2k::MsoPresetLightingDirection PresetLightingDirection/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PresetLightingSoftness(Office_2k::MsoPresetLightingSoftness* PresetLightingSoftness/*[out,retval]*/);
  Office_2k::MsoPresetLightingSoftness __fastcall get_PresetLightingSoftness(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PresetLightingSoftness(Office_2k::MsoPresetLightingSoftness PresetLightingSoftness/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PresetMaterial(Office_2k::MsoPresetMaterial* PresetMaterial/*[out,retval]*/);
  Office_2k::MsoPresetMaterial __fastcall get_PresetMaterial(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PresetMaterial(Office_2k::MsoPresetMaterial PresetMaterial/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PresetThreeDFormat(Office_2k::MsoPresetThreeDFormat* PresetThreeDFormat/*[out,retval]*/);
  Office_2k::MsoPresetThreeDFormat __fastcall get_PresetThreeDFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RotationX(float* RotationX/*[out,retval]*/);
  float           __fastcall get_RotationX(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RotationX(float RotationX/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RotationY(float* RotationY/*[out,retval]*/);
  float           __fastcall get_RotationY(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RotationY(float RotationY/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_2k::MsoTriState Visible/*[in]*/);

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   float           Depth = {read = get_Depth, write = set_Depth};
  __property   Powerpoint_2k::ColorFormatPtr ExtrusionColor = {read = get_ExtrusionColor};
  __property   Office_2k::MsoExtrusionColorType ExtrusionColorType = {read = get_ExtrusionColorType, write = set_ExtrusionColorType};
  __property   Office_2k::MsoTriState Perspective = {read = get_Perspective, write = set_Perspective};
  __property   Office_2k::MsoPresetExtrusionDirection PresetExtrusionDirection = {read = get_PresetExtrusionDirection};
  __property   Office_2k::MsoPresetLightingDirection PresetLightingDirection = {read = get_PresetLightingDirection, write = set_PresetLightingDirection};
  __property   Office_2k::MsoPresetLightingSoftness PresetLightingSoftness = {read = get_PresetLightingSoftness, write = set_PresetLightingSoftness};
  __property   Office_2k::MsoPresetMaterial PresetMaterial = {read = get_PresetMaterial, write = set_PresetMaterial};
  __property   Office_2k::MsoPresetThreeDFormat PresetThreeDFormat = {read = get_PresetThreeDFormat};
  __property   float           RotationX = {read = get_RotationX, write = set_RotationX};
  __property   float           RotationY = {read = get_RotationY, write = set_RotationY};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};
};
typedef ThreeDFormatDispT<ThreeDFormat> ThreeDFormatDisp;

typedef TComInterface<TextFrame>  TCOMTextFrame;

// *********************************************************************//
// DispIntf:  TextFrame
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493484-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class TextFrameDispT : public TAutoDriver<TextFrame>
{
public:
  TextFrameDispT(){}

  TextFrameDispT(TextFrame *pintf)
  {
    TAutoDriver<TextFrame>::Bind(pintf, false);
  }

  TextFrameDispT(TextFramePtr pintf)
  {
    TAutoDriver<TextFrame>::Bind(pintf, true);
  }

  TextFrameDispT& operator=(TextFrame *pintf)
  {
    TAutoDriver<TextFrame>::Bind(pintf, false);
    return *this;
  }

  TextFrameDispT& operator=(TextFramePtr pintf)
  {
    TAutoDriver<TextFrame>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MarginBottom(float* MarginBottom/*[out,retval]*/);
  float           __fastcall get_MarginBottom(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MarginBottom(float MarginBottom/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MarginLeft(float* MarginLeft/*[out,retval]*/);
  float           __fastcall get_MarginLeft(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MarginLeft(float MarginLeft/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MarginRight(float* MarginRight/*[out,retval]*/);
  float           __fastcall get_MarginRight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MarginRight(float MarginRight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MarginTop(float* MarginTop/*[out,retval]*/);
  float           __fastcall get_MarginTop(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MarginTop(float MarginTop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Orientation(Office_2k::MsoTextOrientation* Orientation/*[out,retval]*/);
  Office_2k::MsoTextOrientation __fastcall get_Orientation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Orientation(Office_2k::MsoTextOrientation Orientation/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasText(Office_2k::MsoTriState* HasText/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_HasText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextRange(Powerpoint_2k::TextRangePtr* TextRange/*[out,retval]*/);
  Powerpoint_2k::TextRangePtr __fastcall get_TextRange(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Ruler(Powerpoint_2k::RulerPtr* Ruler/*[out,retval]*/);
  Powerpoint_2k::RulerPtr __fastcall get_Ruler(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HorizontalAnchor(Office_2k::MsoHorizontalAnchor* HorizontalAnchor/*[out,retval]*/);
  Office_2k::MsoHorizontalAnchor __fastcall get_HorizontalAnchor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HorizontalAnchor(Office_2k::MsoHorizontalAnchor HorizontalAnchor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VerticalAnchor(Office_2k::MsoVerticalAnchor* VerticalAnchor/*[out,retval]*/);
  Office_2k::MsoVerticalAnchor __fastcall get_VerticalAnchor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_VerticalAnchor(Office_2k::MsoVerticalAnchor VerticalAnchor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoSize(Powerpoint_2k::PpAutoSize* AutoSize/*[out,retval]*/);
  Powerpoint_2k::PpAutoSize __fastcall get_AutoSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoSize(Powerpoint_2k::PpAutoSize AutoSize/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_WordWrap(Office_2k::MsoTriState* WordWrap/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_WordWrap(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_WordWrap(Office_2k::MsoTriState WordWrap/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DeleteText();

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   float           MarginBottom = {read = get_MarginBottom, write = set_MarginBottom};
  __property   float           MarginLeft = {read = get_MarginLeft, write = set_MarginLeft};
  __property   float           MarginRight = {read = get_MarginRight, write = set_MarginRight};
  __property   float           MarginTop = {read = get_MarginTop, write = set_MarginTop};
  __property   Office_2k::MsoTextOrientation Orientation = {read = get_Orientation, write = set_Orientation};
  __property   Office_2k::MsoTriState HasText = {read = get_HasText};
  __property   Powerpoint_2k::TextRangePtr TextRange = {read = get_TextRange};
  __property   Powerpoint_2k::RulerPtr Ruler = {read = get_Ruler};
  __property   Office_2k::MsoHorizontalAnchor HorizontalAnchor = {read = get_HorizontalAnchor, write = set_HorizontalAnchor};
  __property   Office_2k::MsoVerticalAnchor VerticalAnchor = {read = get_VerticalAnchor, write = set_VerticalAnchor};
  __property   Powerpoint_2k::PpAutoSize AutoSize = {read = get_AutoSize, write = set_AutoSize};
  __property   Office_2k::MsoTriState WordWrap = {read = get_WordWrap, write = set_WordWrap};
};
typedef TextFrameDispT<TextFrame> TextFrameDisp;

typedef TComInterface<CalloutFormat>  TCOMCalloutFormat;

// *********************************************************************//
// DispIntf:  CalloutFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493485-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class CalloutFormatDispT : public TAutoDriver<CalloutFormat>
{
public:
  CalloutFormatDispT(){}

  CalloutFormatDispT(CalloutFormat *pintf)
  {
    TAutoDriver<CalloutFormat>::Bind(pintf, false);
  }

  CalloutFormatDispT(CalloutFormatPtr pintf)
  {
    TAutoDriver<CalloutFormat>::Bind(pintf, true);
  }

  CalloutFormatDispT& operator=(CalloutFormat *pintf)
  {
    TAutoDriver<CalloutFormat>::Bind(pintf, false);
    return *this;
  }

  CalloutFormatDispT& operator=(CalloutFormatPtr pintf)
  {
    TAutoDriver<CalloutFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AutomaticLength();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CustomDrop(float Drop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CustomLength(float Length/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PresetDrop(Office_2k::MsoCalloutDropType DropType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Accent(Office_2k::MsoTriState* Accent/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Accent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Accent(Office_2k::MsoTriState Accent/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Angle(Office_2k::MsoCalloutAngleType* Angle/*[out,retval]*/);
  Office_2k::MsoCalloutAngleType __fastcall get_Angle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Angle(Office_2k::MsoCalloutAngleType Angle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoAttach(Office_2k::MsoTriState* AutoAttach/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_AutoAttach(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoAttach(Office_2k::MsoTriState AutoAttach/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoLength(Office_2k::MsoTriState* AutoLength/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_AutoLength(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Border(Office_2k::MsoTriState* Border/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Border(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Border(Office_2k::MsoTriState Border/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Drop(float* Drop/*[out,retval]*/);
  float           __fastcall get_Drop(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DropType(Office_2k::MsoCalloutDropType* DropType/*[out,retval]*/);
  Office_2k::MsoCalloutDropType __fastcall get_DropType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Gap(float* Gap/*[out,retval]*/);
  float           __fastcall get_Gap(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Gap(float Gap/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Length(float* Length/*[out,retval]*/);
  float           __fastcall get_Length(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Office_2k::MsoCalloutType* Type/*[out,retval]*/);
  Office_2k::MsoCalloutType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Type(Office_2k::MsoCalloutType Type/*[in]*/);

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoTriState Accent = {read = get_Accent, write = set_Accent};
  __property   Office_2k::MsoCalloutAngleType Angle = {read = get_Angle, write = set_Angle};
  __property   Office_2k::MsoTriState AutoAttach = {read = get_AutoAttach, write = set_AutoAttach};
  __property   Office_2k::MsoTriState AutoLength = {read = get_AutoLength};
  __property   Office_2k::MsoTriState Border = {read = get_Border, write = set_Border};
  __property   float           Drop = {read = get_Drop};
  __property   Office_2k::MsoCalloutDropType DropType = {read = get_DropType};
  __property   float           Gap = {read = get_Gap, write = set_Gap};
  __property   float           Length = {read = get_Length};
  __property   Office_2k::MsoCalloutType Type = {read = get_Type, write = set_Type};
};
typedef CalloutFormatDispT<CalloutFormat> CalloutFormatDisp;

typedef TComInterface<ShapeNodes>  TCOMShapeNodes;

// *********************************************************************//
// DispIntf:  ShapeNodes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493486-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class ShapeNodesDispT : public TAutoDriver<ShapeNodes>
{
public:
  ShapeNodesDispT(){}

  ShapeNodesDispT(ShapeNodes *pintf)
  {
    TAutoDriver<ShapeNodes>::Bind(pintf, false);
  }

  ShapeNodesDispT(ShapeNodesPtr pintf)
  {
    TAutoDriver<ShapeNodes>::Bind(pintf, true);
  }

  ShapeNodesDispT& operator=(ShapeNodes *pintf)
  {
    TAutoDriver<ShapeNodes>::Bind(pintf, false);
    return *this;
  }

  ShapeNodesDispT& operator=(ShapeNodesPtr pintf)
  {
    TAutoDriver<ShapeNodes>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(int* Count/*[out,retval]*/);
  int             __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(TVariantInParam index/*[in]*/, 
                                             Powerpoint_2k::ShapeNodePtr* Item/*[out,retval]*/);
  Powerpoint_2k::ShapeNodePtr __fastcall Item(TVariantInParam index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Insert(int index/*[in]*/, 
                                               Office_2k::MsoSegmentType SegmentType/*[in]*/, 
                                               Office_2k::MsoEditingType EditingType/*[in]*/, 
                                               float X1/*[in]*/, float Y1/*[in]*/, 
                                               float X2/*[in,def,opt]*/, float Y2/*[in,def,opt]*/, 
                                               float X3/*[in,def,opt]*/, float Y3/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetEditingType(int index/*[in]*/, 
                                                       Office_2k::MsoEditingType EditingType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetPosition(int index/*[in]*/, float X1/*[in]*/, 
                                                    float Y1/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetSegmentType(int index/*[in]*/, 
                                                       Office_2k::MsoSegmentType SegmentType/*[in]*/);

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef ShapeNodesDispT<ShapeNodes> ShapeNodesDisp;

typedef TComInterface<ShapeNode>  TCOMShapeNode;

// *********************************************************************//
// DispIntf:  ShapeNode
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493487-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class ShapeNodeDispT : public TAutoDriver<ShapeNode>
{
public:
  ShapeNodeDispT(){}

  ShapeNodeDispT(ShapeNode *pintf)
  {
    TAutoDriver<ShapeNode>::Bind(pintf, false);
  }

  ShapeNodeDispT(ShapeNodePtr pintf)
  {
    TAutoDriver<ShapeNode>::Bind(pintf, true);
  }

  ShapeNodeDispT& operator=(ShapeNode *pintf)
  {
    TAutoDriver<ShapeNode>::Bind(pintf, false);
    return *this;
  }

  ShapeNodeDispT& operator=(ShapeNodePtr pintf)
  {
    TAutoDriver<ShapeNode>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EditingType(Office_2k::MsoEditingType* EditingType/*[out,retval]*/);
  Office_2k::MsoEditingType __fastcall get_EditingType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Points(TVariant* Points/*[out,retval]*/);
  TVariant        __fastcall get_Points(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SegmentType(Office_2k::MsoSegmentType* SegmentType/*[out,retval]*/);
  Office_2k::MsoSegmentType __fastcall get_SegmentType(void);

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoEditingType EditingType = {read = get_EditingType};
  __property   Office_2k::MsoSegmentType SegmentType = {read = get_SegmentType};
};
typedef ShapeNodeDispT<ShapeNode> ShapeNodeDisp;

typedef TComInterface<OLEFormat>  TCOMOLEFormat;

// *********************************************************************//
// DispIntf:  OLEFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493488-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class OLEFormatDispT : public TAutoDriver<OLEFormat>
{
public:
  OLEFormatDispT(){}

  OLEFormatDispT(OLEFormat *pintf)
  {
    TAutoDriver<OLEFormat>::Bind(pintf, false);
  }

  OLEFormatDispT(OLEFormatPtr pintf)
  {
    TAutoDriver<OLEFormat>::Bind(pintf, true);
  }

  OLEFormatDispT& operator=(OLEFormat *pintf)
  {
    TAutoDriver<OLEFormat>::Bind(pintf, false);
    return *this;
  }

  OLEFormatDispT& operator=(OLEFormatPtr pintf)
  {
    TAutoDriver<OLEFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ObjectVerbs(Powerpoint_2k::ObjectVerbsPtr* ObjectVerbs/*[out,retval]*/);
  Powerpoint_2k::ObjectVerbsPtr __fastcall get_ObjectVerbs(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Object(LPDISPATCH* Object/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Object(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ProgID(BSTR* ProgID/*[out,retval]*/);
  BSTR            __fastcall get_ProgID(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FollowColors(Powerpoint_2k::PpFollowColors* FollowColors/*[out,retval]*/);
  Powerpoint_2k::PpFollowColors __fastcall get_FollowColors(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FollowColors(Powerpoint_2k::PpFollowColors FollowColors/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DoVerb(int index/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Activate();

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::ObjectVerbsPtr ObjectVerbs = {read = get_ObjectVerbs};
  __property   LPDISPATCH      Object = {read = get_Object};
  __property   BSTR            ProgID = {read = get_ProgID};
  __property   Powerpoint_2k::PpFollowColors FollowColors = {read = get_FollowColors, write = set_FollowColors};
};
typedef OLEFormatDispT<OLEFormat> OLEFormatDisp;

typedef TComInterface<LinkFormat>  TCOMLinkFormat;

// *********************************************************************//
// DispIntf:  LinkFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493489-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class LinkFormatDispT : public TAutoDriver<LinkFormat>
{
public:
  LinkFormatDispT(){}

  LinkFormatDispT(LinkFormat *pintf)
  {
    TAutoDriver<LinkFormat>::Bind(pintf, false);
  }

  LinkFormatDispT(LinkFormatPtr pintf)
  {
    TAutoDriver<LinkFormat>::Bind(pintf, true);
  }

  LinkFormatDispT& operator=(LinkFormat *pintf)
  {
    TAutoDriver<LinkFormat>::Bind(pintf, false);
    return *this;
  }

  LinkFormatDispT& operator=(LinkFormatPtr pintf)
  {
    TAutoDriver<LinkFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SourceFullName(BSTR* SourceFullName/*[out,retval]*/);
  BSTR            __fastcall get_SourceFullName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SourceFullName(BSTR SourceFullName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoUpdate(Powerpoint_2k::PpUpdateOption* AutoUpdate/*[out,retval]*/);
  Powerpoint_2k::PpUpdateOption __fastcall get_AutoUpdate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoUpdate(Powerpoint_2k::PpUpdateOption AutoUpdate/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Update();

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            SourceFullName = {read = get_SourceFullName, write = set_SourceFullName};
  __property   Powerpoint_2k::PpUpdateOption AutoUpdate = {read = get_AutoUpdate, write = set_AutoUpdate};
};
typedef LinkFormatDispT<LinkFormat> LinkFormatDisp;

typedef TComInterface<ObjectVerbs>  TCOMObjectVerbs;

// *********************************************************************//
// DispIntf:  ObjectVerbs
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149348A-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class ObjectVerbsDispT : public TAutoDriver<ObjectVerbs>
{
public:
  ObjectVerbsDispT(){}

  ObjectVerbsDispT(ObjectVerbs *pintf)
  {
    TAutoDriver<ObjectVerbs>::Bind(pintf, false);
  }

  ObjectVerbsDispT(ObjectVerbsPtr pintf)
  {
    TAutoDriver<ObjectVerbs>::Bind(pintf, true);
  }

  ObjectVerbsDispT& operator=(ObjectVerbs *pintf)
  {
    TAutoDriver<ObjectVerbs>::Bind(pintf, false);
    return *this;
  }

  ObjectVerbsDispT& operator=(ObjectVerbsPtr pintf)
  {
    TAutoDriver<ObjectVerbs>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(int index/*[in]*/, BSTR* Item/*[out,retval]*/);
  BSTR            __fastcall Item(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/);
  TVariant        __fastcall _Index(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef ObjectVerbsDispT<ObjectVerbs> ObjectVerbsDisp;

typedef TComInterface<AnimationSettings>  TCOMAnimationSettings;

// *********************************************************************//
// DispIntf:  AnimationSettings
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149348B-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class AnimationSettingsDispT : public TAutoDriver<AnimationSettings>
{
public:
  AnimationSettingsDispT(){}

  AnimationSettingsDispT(AnimationSettings *pintf)
  {
    TAutoDriver<AnimationSettings>::Bind(pintf, false);
  }

  AnimationSettingsDispT(AnimationSettingsPtr pintf)
  {
    TAutoDriver<AnimationSettings>::Bind(pintf, true);
  }

  AnimationSettingsDispT& operator=(AnimationSettings *pintf)
  {
    TAutoDriver<AnimationSettings>::Bind(pintf, false);
    return *this;
  }

  AnimationSettingsDispT& operator=(AnimationSettingsPtr pintf)
  {
    TAutoDriver<AnimationSettings>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DimColor(Powerpoint_2k::ColorFormatPtr* DimColor/*[out,retval]*/);
  Powerpoint_2k::ColorFormatPtr __fastcall get_DimColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SoundEffect(Powerpoint_2k::SoundEffectPtr* SoundEffect/*[out,retval]*/);
  Powerpoint_2k::SoundEffectPtr __fastcall get_SoundEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EntryEffect(Powerpoint_2k::PpEntryEffect* EntryEffect/*[out,retval]*/);
  Powerpoint_2k::PpEntryEffect __fastcall get_EntryEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EntryEffect(Powerpoint_2k::PpEntryEffect EntryEffect/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AfterEffect(Powerpoint_2k::PpAfterEffect* AfterEffect/*[out,retval]*/);
  Powerpoint_2k::PpAfterEffect __fastcall get_AfterEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AfterEffect(Powerpoint_2k::PpAfterEffect AfterEffect/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AnimationOrder(int* AnimationOrder/*[out,retval]*/);
  int             __fastcall get_AnimationOrder(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AnimationOrder(int AnimationOrder/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AdvanceMode(Powerpoint_2k::PpAdvanceMode* AdvanceMode/*[out,retval]*/);
  Powerpoint_2k::PpAdvanceMode __fastcall get_AdvanceMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AdvanceMode(Powerpoint_2k::PpAdvanceMode AdvanceMode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AdvanceTime(float* AdvanceTime/*[out,retval]*/);
  float           __fastcall get_AdvanceTime(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AdvanceTime(float AdvanceTime/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PlaySettings(Powerpoint_2k::PlaySettingsPtr* PlaySettings/*[out,retval]*/);
  Powerpoint_2k::PlaySettingsPtr __fastcall get_PlaySettings(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextLevelEffect(Powerpoint_2k::PpTextLevelEffect* TextLevelEffect/*[out,retval]*/);
  Powerpoint_2k::PpTextLevelEffect __fastcall get_TextLevelEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TextLevelEffect(Powerpoint_2k::PpTextLevelEffect TextLevelEffect/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextUnitEffect(Powerpoint_2k::PpTextUnitEffect* TextUnitEffect/*[out,retval]*/);
  Powerpoint_2k::PpTextUnitEffect __fastcall get_TextUnitEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TextUnitEffect(Powerpoint_2k::PpTextUnitEffect TextUnitEffect/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Animate(Office_2k::MsoTriState* Animate/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Animate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Animate(Office_2k::MsoTriState Animate/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AnimateBackground(Office_2k::MsoTriState* AnimateBackground/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_AnimateBackground(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AnimateBackground(Office_2k::MsoTriState AnimateBackground/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AnimateTextInReverse(Office_2k::MsoTriState* AnimateTextInReverse/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_AnimateTextInReverse(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AnimateTextInReverse(Office_2k::MsoTriState AnimateTextInReverse/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ChartUnitEffect(Powerpoint_2k::PpChartUnitEffect* ChartUnitEffect/*[out,retval]*/);
  Powerpoint_2k::PpChartUnitEffect __fastcall get_ChartUnitEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ChartUnitEffect(Powerpoint_2k::PpChartUnitEffect ChartUnitEffect/*[in]*/);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::ColorFormatPtr DimColor = {read = get_DimColor};
  __property   Powerpoint_2k::SoundEffectPtr SoundEffect = {read = get_SoundEffect};
  __property   Powerpoint_2k::PpEntryEffect EntryEffect = {read = get_EntryEffect, write = set_EntryEffect};
  __property   Powerpoint_2k::PpAfterEffect AfterEffect = {read = get_AfterEffect, write = set_AfterEffect};
  __property   int             AnimationOrder = {read = get_AnimationOrder, write = set_AnimationOrder};
  __property   Powerpoint_2k::PpAdvanceMode AdvanceMode = {read = get_AdvanceMode, write = set_AdvanceMode};
  __property   float           AdvanceTime = {read = get_AdvanceTime, write = set_AdvanceTime};
  __property   Powerpoint_2k::PlaySettingsPtr PlaySettings = {read = get_PlaySettings};
  __property   Powerpoint_2k::PpTextLevelEffect TextLevelEffect = {read = get_TextLevelEffect, write = set_TextLevelEffect};
  __property   Powerpoint_2k::PpTextUnitEffect TextUnitEffect = {read = get_TextUnitEffect, write = set_TextUnitEffect};
  __property   Office_2k::MsoTriState Animate = {read = get_Animate, write = set_Animate};
  __property   Office_2k::MsoTriState AnimateBackground = {read = get_AnimateBackground, write = set_AnimateBackground};
  __property   Office_2k::MsoTriState AnimateTextInReverse = {read = get_AnimateTextInReverse, write = set_AnimateTextInReverse};
  __property   Powerpoint_2k::PpChartUnitEffect ChartUnitEffect = {read = get_ChartUnitEffect, write = set_ChartUnitEffect};
};
typedef AnimationSettingsDispT<AnimationSettings> AnimationSettingsDisp;

typedef TComInterface<ActionSettings>  TCOMActionSettings;

// *********************************************************************//
// DispIntf:  ActionSettings
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149348C-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class ActionSettingsDispT : public TAutoDriver<ActionSettings>
{
public:
  ActionSettingsDispT(){}

  ActionSettingsDispT(ActionSettings *pintf)
  {
    TAutoDriver<ActionSettings>::Bind(pintf, false);
  }

  ActionSettingsDispT(ActionSettingsPtr pintf)
  {
    TAutoDriver<ActionSettings>::Bind(pintf, true);
  }

  ActionSettingsDispT& operator=(ActionSettings *pintf)
  {
    TAutoDriver<ActionSettings>::Bind(pintf, false);
    return *this;
  }

  ActionSettingsDispT& operator=(ActionSettingsPtr pintf)
  {
    TAutoDriver<ActionSettings>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(Powerpoint_2k::PpMouseActivation index/*[in]*/, 
                                             Powerpoint_2k::ActionSettingPtr* Item/*[out,retval]*/);
  Powerpoint_2k::ActionSettingPtr __fastcall Item(Powerpoint_2k::PpMouseActivation index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/);
  TVariant        __fastcall _Index(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef ActionSettingsDispT<ActionSettings> ActionSettingsDisp;

typedef TComInterface<ActionSetting>  TCOMActionSetting;

// *********************************************************************//
// DispIntf:  ActionSetting
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149348D-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class ActionSettingDispT : public TAutoDriver<ActionSetting>
{
public:
  ActionSettingDispT(){}

  ActionSettingDispT(ActionSetting *pintf)
  {
    TAutoDriver<ActionSetting>::Bind(pintf, false);
  }

  ActionSettingDispT(ActionSettingPtr pintf)
  {
    TAutoDriver<ActionSetting>::Bind(pintf, true);
  }

  ActionSettingDispT& operator=(ActionSetting *pintf)
  {
    TAutoDriver<ActionSetting>::Bind(pintf, false);
    return *this;
  }

  ActionSettingDispT& operator=(ActionSettingPtr pintf)
  {
    TAutoDriver<ActionSetting>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Action(Powerpoint_2k::PpActionType* Action/*[out,retval]*/);
  Powerpoint_2k::PpActionType __fastcall get_Action(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Action(Powerpoint_2k::PpActionType Action/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActionVerb(BSTR* ActionVerb/*[out,retval]*/);
  BSTR            __fastcall get_ActionVerb(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ActionVerb(BSTR ActionVerb/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AnimateAction(Office_2k::MsoTriState* AnimateAction/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_AnimateAction(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AnimateAction(Office_2k::MsoTriState AnimateAction/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Run(BSTR* Run/*[out,retval]*/);
  BSTR            __fastcall get_Run(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Run(BSTR Run/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideShowName(BSTR* SlideShowName/*[out,retval]*/);
  BSTR            __fastcall get_SlideShowName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SlideShowName(BSTR SlideShowName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Hyperlink(Powerpoint_2k::HyperlinkPtr* Hyperlink/*[out,retval]*/);
  Powerpoint_2k::HyperlinkPtr __fastcall get_Hyperlink(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SoundEffect(Powerpoint_2k::SoundEffectPtr* SoundEffect/*[out,retval]*/);
  Powerpoint_2k::SoundEffectPtr __fastcall get_SoundEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowandReturn(Office_2k::MsoTriState* ShowandReturn/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_ShowandReturn(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowandReturn(Office_2k::MsoTriState ShowandReturn/*[in]*/);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::PpActionType Action = {read = get_Action, write = set_Action};
  __property   BSTR            ActionVerb = {read = get_ActionVerb, write = set_ActionVerb};
  __property   Office_2k::MsoTriState AnimateAction = {read = get_AnimateAction, write = set_AnimateAction};
  __property   BSTR            Run = {read = get_Run, write = set_Run};
  __property   BSTR            SlideShowName = {read = get_SlideShowName, write = set_SlideShowName};
  __property   Powerpoint_2k::HyperlinkPtr Hyperlink = {read = get_Hyperlink};
  __property   Powerpoint_2k::SoundEffectPtr SoundEffect = {read = get_SoundEffect};
  __property   Office_2k::MsoTriState ShowandReturn = {read = get_ShowandReturn, write = set_ShowandReturn};
};
typedef ActionSettingDispT<ActionSetting> ActionSettingDisp;

typedef TComInterface<PlaySettings>  TCOMPlaySettings;

// *********************************************************************//
// DispIntf:  PlaySettings
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149348E-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PlaySettingsDispT : public TAutoDriver<PlaySettings>
{
public:
  PlaySettingsDispT(){}

  PlaySettingsDispT(PlaySettings *pintf)
  {
    TAutoDriver<PlaySettings>::Bind(pintf, false);
  }

  PlaySettingsDispT(PlaySettingsPtr pintf)
  {
    TAutoDriver<PlaySettings>::Bind(pintf, true);
  }

  PlaySettingsDispT& operator=(PlaySettings *pintf)
  {
    TAutoDriver<PlaySettings>::Bind(pintf, false);
    return *this;
  }

  PlaySettingsDispT& operator=(PlaySettingsPtr pintf)
  {
    TAutoDriver<PlaySettings>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActionVerb(BSTR* ActionVerb/*[out,retval]*/);
  BSTR            __fastcall get_ActionVerb(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ActionVerb(BSTR ActionVerb/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HideWhileNotPlaying(Office_2k::MsoTriState* HideWhileNotPlaying/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_HideWhileNotPlaying(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HideWhileNotPlaying(Office_2k::MsoTriState HideWhileNotPlaying/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LoopUntilStopped(Office_2k::MsoTriState* LoopUntilStopped/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_LoopUntilStopped(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LoopUntilStopped(Office_2k::MsoTriState LoopUntilStopped/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PlayOnEntry(Office_2k::MsoTriState* PlayOnEntry/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_PlayOnEntry(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PlayOnEntry(Office_2k::MsoTriState PlayOnEntry/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RewindMovie(Office_2k::MsoTriState* RewindMovie/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_RewindMovie(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RewindMovie(Office_2k::MsoTriState RewindMovie/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PauseAnimation(Office_2k::MsoTriState* PauseAnimation/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_PauseAnimation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PauseAnimation(Office_2k::MsoTriState PauseAnimation/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_StopAfterSlides(int* StopAfterSlides/*[out,retval]*/);
  int             __fastcall get_StopAfterSlides(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_StopAfterSlides(int StopAfterSlides/*[in]*/);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            ActionVerb = {read = get_ActionVerb, write = set_ActionVerb};
  __property   Office_2k::MsoTriState HideWhileNotPlaying = {read = get_HideWhileNotPlaying, write = set_HideWhileNotPlaying};
  __property   Office_2k::MsoTriState LoopUntilStopped = {read = get_LoopUntilStopped, write = set_LoopUntilStopped};
  __property   Office_2k::MsoTriState PlayOnEntry = {read = get_PlayOnEntry, write = set_PlayOnEntry};
  __property   Office_2k::MsoTriState RewindMovie = {read = get_RewindMovie, write = set_RewindMovie};
  __property   Office_2k::MsoTriState PauseAnimation = {read = get_PauseAnimation, write = set_PauseAnimation};
  __property   int             StopAfterSlides = {read = get_StopAfterSlides, write = set_StopAfterSlides};
};
typedef PlaySettingsDispT<PlaySettings> PlaySettingsDisp;

typedef TComInterface<TextRange>  TCOMTextRange;

// *********************************************************************//
// DispIntf:  TextRange
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149348F-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class TextRangeDispT : public TAutoDriver<TextRange>
{
public:
  TextRangeDispT(){}

  TextRangeDispT(TextRange *pintf)
  {
    TAutoDriver<TextRange>::Bind(pintf, false);
  }

  TextRangeDispT(TextRangePtr pintf)
  {
    TAutoDriver<TextRange>::Bind(pintf, true);
  }

  TextRangeDispT& operator=(TextRange *pintf)
  {
    TAutoDriver<TextRange>::Bind(pintf, false);
    return *this;
  }

  TextRangeDispT& operator=(TextRangePtr pintf)
  {
    TAutoDriver<TextRange>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActionSettings(Powerpoint_2k::ActionSettingsPtr* ActionSettings/*[out,retval]*/);
  Powerpoint_2k::ActionSettingsPtr __fastcall get_ActionSettings(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Start(long* Start/*[out,retval]*/);
  long            __fastcall get_Start(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Length(long* Length/*[out,retval]*/);
  long            __fastcall get_Length(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BoundLeft(float* BoundLeft/*[out,retval]*/);
  float           __fastcall get_BoundLeft(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BoundTop(float* BoundTop/*[out,retval]*/);
  float           __fastcall get_BoundTop(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BoundWidth(float* BoundWidth/*[out,retval]*/);
  float           __fastcall get_BoundWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BoundHeight(float* BoundHeight/*[out,retval]*/);
  float           __fastcall get_BoundHeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Paragraphs(int Start/*[in,def,opt]*/, 
                                                   int Length/*[in,def,opt]*/, 
                                                   Powerpoint_2k::TextRangePtr* Paragraphs/*[out,retval]*/);
  Powerpoint_2k::TextRangePtr __fastcall Paragraphs(int Start/*[in,def,opt]*/, 
                                                    int Length/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Sentences(int Start/*[in,def,opt]*/, 
                                                  int Length/*[in,def,opt]*/, 
                                                  Powerpoint_2k::TextRangePtr* Sentences/*[out,retval]*/);
  Powerpoint_2k::TextRangePtr __fastcall Sentences(int Start/*[in,def,opt]*/, 
                                                   int Length/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Words(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/
                                              , Powerpoint_2k::TextRangePtr* Words/*[out,retval]*/);
  Powerpoint_2k::TextRangePtr __fastcall Words(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Characters(int Start/*[in,def,opt]*/, 
                                                   int Length/*[in,def,opt]*/, 
                                                   Powerpoint_2k::TextRangePtr* Characters/*[out,retval]*/);
  Powerpoint_2k::TextRangePtr __fastcall Characters(int Start/*[in,def,opt]*/, 
                                                    int Length/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Lines(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/
                                              , Powerpoint_2k::TextRangePtr* Lines/*[out,retval]*/);
  Powerpoint_2k::TextRangePtr __fastcall Lines(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Runs(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/, 
                                             Powerpoint_2k::TextRangePtr* Runs/*[out,retval]*/);
  Powerpoint_2k::TextRangePtr __fastcall Runs(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall TrimText(Powerpoint_2k::TextRangePtr* TrimText/*[out,retval]*/);
  Powerpoint_2k::TextRangePtr __fastcall TrimText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Text(BSTR* Text/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Text(BSTR Text/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall InsertAfter(BSTR NewText/*[in,def,opt]*/, 
                                                    Powerpoint_2k::TextRangePtr* After/*[out,retval]*/);
  Powerpoint_2k::TextRangePtr __fastcall InsertAfter(BSTR NewText/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall InsertBefore(BSTR NewText/*[in,def,opt]*/, 
                                                     Powerpoint_2k::TextRangePtr* Before/*[out,retval]*/);
  Powerpoint_2k::TextRangePtr __fastcall InsertBefore(BSTR NewText/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall InsertDateTime(Powerpoint_2k::PpDateTimeFormat DateTimeFormat/*[in]*/
                                                       , 
                                                       Office_2k::MsoTriState InsertAsField/*[in,def,opt]*/
                                                       , 
                                                       Powerpoint_2k::TextRangePtr* DateTime/*[out,retval]*/);
  Powerpoint_2k::TextRangePtr __fastcall InsertDateTime(Powerpoint_2k::PpDateTimeFormat DateTimeFormat/*[in]*/, 
                                                        Office_2k::MsoTriState InsertAsField/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall InsertSlideNumber(Powerpoint_2k::TextRangePtr* SlideNumber/*[out,retval]*/);
  Powerpoint_2k::TextRangePtr __fastcall InsertSlideNumber(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall InsertSymbol(BSTR FontName/*[in]*/, int CharNumber/*[in]*/, 
                                                     Office_2k::MsoTriState Unicode/*[in,def,opt]*/
                                                     , 
                                                     Powerpoint_2k::TextRangePtr* Symbol/*[out,retval]*/);
  Powerpoint_2k::TextRangePtr __fastcall InsertSymbol(BSTR FontName/*[in]*/, int CharNumber/*[in]*/, 
                                                      Office_2k::MsoTriState Unicode/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Font(Powerpoint_2k::FontPtr* Font/*[out,retval]*/);
  Powerpoint_2k::FontPtr __fastcall get_Font(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ParagraphFormat(Powerpoint_2k::ParagraphFormatPtr* ParagraphFormat/*[out,retval]*/);
  Powerpoint_2k::ParagraphFormatPtr __fastcall get_ParagraphFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IndentLevel(int* IndentLevel/*[out,retval]*/);
  int             __fastcall get_IndentLevel(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IndentLevel(int IndentLevel/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Select();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Cut();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Copy();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Paste(Powerpoint_2k::TextRangePtr* Paste/*[out,retval]*/);
  Powerpoint_2k::TextRangePtr __fastcall Paste(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ChangeCase(Powerpoint_2k::PpChangeCase Type/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddPeriods();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RemovePeriods();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Find(BSTR FindWhat/*[in]*/, int After/*[in,def,opt]*/, 
                                             Office_2k::MsoTriState MatchCase/*[in,def,opt]*/, 
                                             Office_2k::MsoTriState WholeWords/*[in,def,opt]*/, 
                                             Powerpoint_2k::TextRangePtr* Find/*[out,retval]*/);
  Powerpoint_2k::TextRangePtr __fastcall Find(BSTR FindWhat/*[in]*/, int After/*[in,def,opt]*/, 
                                              Office_2k::MsoTriState MatchCase/*[in,def,opt]*/, 
                                              Office_2k::MsoTriState WholeWords/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Replace(BSTR FindWhat/*[in]*/, BSTR ReplaceWhat/*[in]*/, 
                                                int After/*[in,def,opt]*/, 
                                                Office_2k::MsoTriState MatchCase/*[in,def,opt]*/, 
                                                Office_2k::MsoTriState WholeWords/*[in,def,opt]*/, 
                                                Powerpoint_2k::TextRangePtr* Replace/*[out,retval]*/);
  Powerpoint_2k::TextRangePtr __fastcall Replace(BSTR FindWhat/*[in]*/, BSTR ReplaceWhat/*[in]*/, 
                                                 int After/*[in,def,opt]*/, 
                                                 Office_2k::MsoTriState MatchCase/*[in,def,opt]*/, 
                                                 Office_2k::MsoTriState WholeWords/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RotatedBounds(float* X1/*[out]*/, float* Y1/*[out]*/, 
                                                      float* X2/*[out]*/, float* Y2/*[out]*/, 
                                                      float* X3/*[out]*/, float* Y3/*[out]*/, 
                                                      float* x4/*[out]*/, float* y4/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LanguageID(Office_2k::MsoLanguageID* LanguageID/*[out,retval]*/);
  Office_2k::MsoLanguageID __fastcall get_LanguageID(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LanguageID(Office_2k::MsoLanguageID LanguageID/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RtlRun();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall LtrRun();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/);
  TVariant        __fastcall _Index(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::ActionSettingsPtr ActionSettings = {read = get_ActionSettings};
  __property   long            Start = {read = get_Start};
  __property   long            Length = {read = get_Length};
  __property   float           BoundLeft = {read = get_BoundLeft};
  __property   float           BoundTop = {read = get_BoundTop};
  __property   float           BoundWidth = {read = get_BoundWidth};
  __property   float           BoundHeight = {read = get_BoundHeight};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   Powerpoint_2k::FontPtr Font = {read = get_Font};
  __property   Powerpoint_2k::ParagraphFormatPtr ParagraphFormat = {read = get_ParagraphFormat};
  __property   int             IndentLevel = {read = get_IndentLevel, write = set_IndentLevel};
  __property   Office_2k::MsoLanguageID LanguageID = {read = get_LanguageID, write = set_LanguageID};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef TextRangeDispT<TextRange> TextRangeDisp;

typedef TComInterface<Ruler>  TCOMRuler;

// *********************************************************************//
// DispIntf:  Ruler
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493490-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class RulerDispT : public TAutoDriver<Ruler>
{
public:
  RulerDispT(){}

  RulerDispT(Ruler *pintf)
  {
    TAutoDriver<Ruler>::Bind(pintf, false);
  }

  RulerDispT(RulerPtr pintf)
  {
    TAutoDriver<Ruler>::Bind(pintf, true);
  }

  RulerDispT& operator=(Ruler *pintf)
  {
    TAutoDriver<Ruler>::Bind(pintf, false);
    return *this;
  }

  RulerDispT& operator=(RulerPtr pintf)
  {
    TAutoDriver<Ruler>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TabStops(Powerpoint_2k::TabStopsPtr* TabStops/*[out,retval]*/);
  Powerpoint_2k::TabStopsPtr __fastcall get_TabStops(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Levels(Powerpoint_2k::RulerLevelsPtr* Levels/*[out,retval]*/);
  Powerpoint_2k::RulerLevelsPtr __fastcall get_Levels(void);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::TabStopsPtr TabStops = {read = get_TabStops};
  __property   Powerpoint_2k::RulerLevelsPtr Levels = {read = get_Levels};
};
typedef RulerDispT<Ruler> RulerDisp;

typedef TComInterface<RulerLevels>  TCOMRulerLevels;

// *********************************************************************//
// DispIntf:  RulerLevels
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493491-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class RulerLevelsDispT : public TAutoDriver<RulerLevels>
{
public:
  RulerLevelsDispT(){}

  RulerLevelsDispT(RulerLevels *pintf)
  {
    TAutoDriver<RulerLevels>::Bind(pintf, false);
  }

  RulerLevelsDispT(RulerLevelsPtr pintf)
  {
    TAutoDriver<RulerLevels>::Bind(pintf, true);
  }

  RulerLevelsDispT& operator=(RulerLevels *pintf)
  {
    TAutoDriver<RulerLevels>::Bind(pintf, false);
    return *this;
  }

  RulerLevelsDispT& operator=(RulerLevelsPtr pintf)
  {
    TAutoDriver<RulerLevels>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(int index/*[in]*/, 
                                             Powerpoint_2k::RulerLevelPtr* Item/*[out,retval]*/);
  Powerpoint_2k::RulerLevelPtr __fastcall Item(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/);
  TVariant        __fastcall _Index(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef RulerLevelsDispT<RulerLevels> RulerLevelsDisp;

typedef TComInterface<RulerLevel>  TCOMRulerLevel;

// *********************************************************************//
// DispIntf:  RulerLevel
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493492-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class RulerLevelDispT : public TAutoDriver<RulerLevel>
{
public:
  RulerLevelDispT(){}

  RulerLevelDispT(RulerLevel *pintf)
  {
    TAutoDriver<RulerLevel>::Bind(pintf, false);
  }

  RulerLevelDispT(RulerLevelPtr pintf)
  {
    TAutoDriver<RulerLevel>::Bind(pintf, true);
  }

  RulerLevelDispT& operator=(RulerLevel *pintf)
  {
    TAutoDriver<RulerLevel>::Bind(pintf, false);
    return *this;
  }

  RulerLevelDispT& operator=(RulerLevelPtr pintf)
  {
    TAutoDriver<RulerLevel>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FirstMargin(float* FirstMargin/*[out,retval]*/);
  float           __fastcall get_FirstMargin(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FirstMargin(float FirstMargin/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LeftMargin(float* LeftMargin/*[out,retval]*/);
  float           __fastcall get_LeftMargin(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LeftMargin(float LeftMargin/*[in]*/);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   float           FirstMargin = {read = get_FirstMargin, write = set_FirstMargin};
  __property   float           LeftMargin = {read = get_LeftMargin, write = set_LeftMargin};
};
typedef RulerLevelDispT<RulerLevel> RulerLevelDisp;

typedef TComInterface<TabStops>  TCOMTabStops;

// *********************************************************************//
// DispIntf:  TabStops
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493493-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class TabStopsDispT : public TAutoDriver<TabStops>
{
public:
  TabStopsDispT(){}

  TabStopsDispT(TabStops *pintf)
  {
    TAutoDriver<TabStops>::Bind(pintf, false);
  }

  TabStopsDispT(TabStopsPtr pintf)
  {
    TAutoDriver<TabStops>::Bind(pintf, true);
  }

  TabStopsDispT& operator=(TabStops *pintf)
  {
    TAutoDriver<TabStops>::Bind(pintf, false);
    return *this;
  }

  TabStopsDispT& operator=(TabStopsPtr pintf)
  {
    TAutoDriver<TabStops>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(int index/*[in]*/, 
                                             Powerpoint_2k::TabStopPtr* Item/*[out,retval]*/);
  Powerpoint_2k::TabStopPtr __fastcall Item(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DefaultSpacing(float* DefaultSpacing/*[out,retval]*/);
  float           __fastcall get_DefaultSpacing(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DefaultSpacing(float DefaultSpacing/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(Powerpoint_2k::PpTabStopType Type/*[in]*/, 
                                            float Position/*[in]*/, 
                                            Powerpoint_2k::TabStopPtr* Add/*[out,retval]*/);
  Powerpoint_2k::TabStopPtr __fastcall Add(Powerpoint_2k::PpTabStopType Type/*[in]*/, 
                                           float Position/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/);
  TVariant        __fastcall _Index(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   float           DefaultSpacing = {read = get_DefaultSpacing, write = set_DefaultSpacing};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef TabStopsDispT<TabStops> TabStopsDisp;

typedef TComInterface<TabStop>  TCOMTabStop;

// *********************************************************************//
// DispIntf:  TabStop
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493494-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class TabStopDispT : public TAutoDriver<TabStop>
{
public:
  TabStopDispT(){}

  TabStopDispT(TabStop *pintf)
  {
    TAutoDriver<TabStop>::Bind(pintf, false);
  }

  TabStopDispT(TabStopPtr pintf)
  {
    TAutoDriver<TabStop>::Bind(pintf, true);
  }

  TabStopDispT& operator=(TabStop *pintf)
  {
    TAutoDriver<TabStop>::Bind(pintf, false);
    return *this;
  }

  TabStopDispT& operator=(TabStopPtr pintf)
  {
    TAutoDriver<TabStop>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Powerpoint_2k::PpTabStopType* Type/*[out,retval]*/);
  Powerpoint_2k::PpTabStopType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Type(Powerpoint_2k::PpTabStopType Type/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Position(float* Position/*[out,retval]*/);
  float           __fastcall get_Position(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Position(float Position/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Clear();

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::PpTabStopType Type = {read = get_Type, write = set_Type};
  __property   float           Position = {read = get_Position, write = set_Position};
};
typedef TabStopDispT<TabStop> TabStopDisp;

typedef TComInterface<Font>  TCOMFont;

// *********************************************************************//
// DispIntf:  Font
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493495-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class FontDispT : public TAutoDriver<Font>
{
public:
  FontDispT(){}

  FontDispT(Font *pintf)
  {
    TAutoDriver<Font>::Bind(pintf, false);
  }

  FontDispT(FontPtr pintf)
  {
    TAutoDriver<Font>::Bind(pintf, true);
  }

  FontDispT& operator=(Font *pintf)
  {
    TAutoDriver<Font>::Bind(pintf, false);
    return *this;
  }

  FontDispT& operator=(FontPtr pintf)
  {
    TAutoDriver<Font>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Color(Powerpoint_2k::ColorFormatPtr* Color/*[out,retval]*/);
  Powerpoint_2k::ColorFormatPtr __fastcall get_Color(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Bold(Office_2k::MsoTriState* Bold/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Bold(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Bold(Office_2k::MsoTriState Bold/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Italic(Office_2k::MsoTriState* Italic/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Italic(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Italic(Office_2k::MsoTriState Italic/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Shadow(Office_2k::MsoTriState* Shadow/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Shadow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Shadow(Office_2k::MsoTriState Shadow/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Emboss(Office_2k::MsoTriState* Emboss/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Emboss(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Emboss(Office_2k::MsoTriState Emboss/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Underline(Office_2k::MsoTriState* Underline/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Underline(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Underline(Office_2k::MsoTriState Underline/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Subscript(Office_2k::MsoTriState* Subscript/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Subscript(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Subscript(Office_2k::MsoTriState Subscript/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Superscript(Office_2k::MsoTriState* Superscript/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Superscript(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Superscript(Office_2k::MsoTriState Superscript/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BaselineOffset(float* BaselineOffset/*[out,retval]*/);
  float           __fastcall get_BaselineOffset(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BaselineOffset(float BaselineOffset/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Embedded(Office_2k::MsoTriState* Embedded/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Embedded(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Embeddable(Office_2k::MsoTriState* Embeddable/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Embeddable(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Size(float* Size/*[out,retval]*/);
  float           __fastcall get_Size(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Size(float Size/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NameFarEast(BSTR* NameFarEast/*[out,retval]*/);
  BSTR            __fastcall get_NameFarEast(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_NameFarEast(BSTR NameFarEast/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NameAscii(BSTR* NameAscii/*[out,retval]*/);
  BSTR            __fastcall get_NameAscii(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_NameAscii(BSTR NameAscii/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoRotateNumbers(Office_2k::MsoTriState* AutoRotateNumbers/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_AutoRotateNumbers(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoRotateNumbers(Office_2k::MsoTriState AutoRotateNumbers/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NameOther(BSTR* NameOther/*[out,retval]*/);
  BSTR            __fastcall get_NameOther(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_NameOther(BSTR NameOther/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NameComplexScript(BSTR* NameComplexScript/*[out,retval]*/);
  BSTR            __fastcall get_NameComplexScript(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_NameComplexScript(BSTR NameComplexScript/*[in]*/);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::ColorFormatPtr Color = {read = get_Color};
  __property   Office_2k::MsoTriState Bold = {read = get_Bold, write = set_Bold};
  __property   Office_2k::MsoTriState Italic = {read = get_Italic, write = set_Italic};
  __property   Office_2k::MsoTriState Shadow = {read = get_Shadow, write = set_Shadow};
  __property   Office_2k::MsoTriState Emboss = {read = get_Emboss, write = set_Emboss};
  __property   Office_2k::MsoTriState Underline = {read = get_Underline, write = set_Underline};
  __property   Office_2k::MsoTriState Subscript = {read = get_Subscript, write = set_Subscript};
  __property   Office_2k::MsoTriState Superscript = {read = get_Superscript, write = set_Superscript};
  __property   float           BaselineOffset = {read = get_BaselineOffset, write = set_BaselineOffset};
  __property   Office_2k::MsoTriState Embedded = {read = get_Embedded};
  __property   Office_2k::MsoTriState Embeddable = {read = get_Embeddable};
  __property   float           Size = {read = get_Size, write = set_Size};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            NameFarEast = {read = get_NameFarEast, write = set_NameFarEast};
  __property   BSTR            NameAscii = {read = get_NameAscii, write = set_NameAscii};
  __property   Office_2k::MsoTriState AutoRotateNumbers = {read = get_AutoRotateNumbers, write = set_AutoRotateNumbers};
  __property   BSTR            NameOther = {read = get_NameOther, write = set_NameOther};
  __property   BSTR            NameComplexScript = {read = get_NameComplexScript, write = set_NameComplexScript};
};
typedef FontDispT<Font> FontDisp;

typedef TComInterface<ParagraphFormat>  TCOMParagraphFormat;

// *********************************************************************//
// DispIntf:  ParagraphFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493496-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class ParagraphFormatDispT : public TAutoDriver<ParagraphFormat>
{
public:
  ParagraphFormatDispT(){}

  ParagraphFormatDispT(ParagraphFormat *pintf)
  {
    TAutoDriver<ParagraphFormat>::Bind(pintf, false);
  }

  ParagraphFormatDispT(ParagraphFormatPtr pintf)
  {
    TAutoDriver<ParagraphFormat>::Bind(pintf, true);
  }

  ParagraphFormatDispT& operator=(ParagraphFormat *pintf)
  {
    TAutoDriver<ParagraphFormat>::Bind(pintf, false);
    return *this;
  }

  ParagraphFormatDispT& operator=(ParagraphFormatPtr pintf)
  {
    TAutoDriver<ParagraphFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Alignment(Powerpoint_2k::PpParagraphAlignment* Alignment/*[out,retval]*/);
  Powerpoint_2k::PpParagraphAlignment __fastcall get_Alignment(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Alignment(Powerpoint_2k::PpParagraphAlignment Alignment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Bullet(Powerpoint_2k::BulletFormatPtr* Bullet/*[out,retval]*/);
  Powerpoint_2k::BulletFormatPtr __fastcall get_Bullet(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LineRuleBefore(Office_2k::MsoTriState* LineRuleBefore/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_LineRuleBefore(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LineRuleBefore(Office_2k::MsoTriState LineRuleBefore/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LineRuleAfter(Office_2k::MsoTriState* LineRuleAfter/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_LineRuleAfter(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LineRuleAfter(Office_2k::MsoTriState LineRuleAfter/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LineRuleWithin(Office_2k::MsoTriState* LineRuleWithin/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_LineRuleWithin(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LineRuleWithin(Office_2k::MsoTriState LineRuleWithin/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SpaceBefore(float* SpaceBefore/*[out,retval]*/);
  float           __fastcall get_SpaceBefore(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SpaceBefore(float SpaceBefore/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SpaceAfter(float* SpaceAfter/*[out,retval]*/);
  float           __fastcall get_SpaceAfter(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SpaceAfter(float SpaceAfter/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SpaceWithin(float* SpaceWithin/*[out,retval]*/);
  float           __fastcall get_SpaceWithin(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SpaceWithin(float SpaceWithin/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BaseLineAlignment(Powerpoint_2k::PpBaselineAlignment* BaseLineAlignment/*[out,retval]*/);
  Powerpoint_2k::PpBaselineAlignment __fastcall get_BaseLineAlignment(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BaseLineAlignment(Powerpoint_2k::PpBaselineAlignment BaseLineAlignment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FarEastLineBreakControl(Office_2k::MsoTriState* FarEastLineBreakControl/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_FarEastLineBreakControl(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FarEastLineBreakControl(Office_2k::MsoTriState FarEastLineBreakControl/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_WordWrap(Office_2k::MsoTriState* WordWrap/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_WordWrap(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_WordWrap(Office_2k::MsoTriState WordWrap/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HangingPunctuation(Office_2k::MsoTriState* HangingPunctuation/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_HangingPunctuation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HangingPunctuation(Office_2k::MsoTriState HangingPunctuation/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextDirection(Powerpoint_2k::PpDirection* TextDirection/*[out,retval]*/);
  Powerpoint_2k::PpDirection __fastcall get_TextDirection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TextDirection(Powerpoint_2k::PpDirection TextDirection/*[in]*/);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::PpParagraphAlignment Alignment = {read = get_Alignment, write = set_Alignment};
  __property   Powerpoint_2k::BulletFormatPtr Bullet = {read = get_Bullet};
  __property   Office_2k::MsoTriState LineRuleBefore = {read = get_LineRuleBefore, write = set_LineRuleBefore};
  __property   Office_2k::MsoTriState LineRuleAfter = {read = get_LineRuleAfter, write = set_LineRuleAfter};
  __property   Office_2k::MsoTriState LineRuleWithin = {read = get_LineRuleWithin, write = set_LineRuleWithin};
  __property   float           SpaceBefore = {read = get_SpaceBefore, write = set_SpaceBefore};
  __property   float           SpaceAfter = {read = get_SpaceAfter, write = set_SpaceAfter};
  __property   float           SpaceWithin = {read = get_SpaceWithin, write = set_SpaceWithin};
  __property   Powerpoint_2k::PpBaselineAlignment BaseLineAlignment = {read = get_BaseLineAlignment, write = set_BaseLineAlignment};
  __property   Office_2k::MsoTriState FarEastLineBreakControl = {read = get_FarEastLineBreakControl, write = set_FarEastLineBreakControl};
  __property   Office_2k::MsoTriState WordWrap = {read = get_WordWrap, write = set_WordWrap};
  __property   Office_2k::MsoTriState HangingPunctuation = {read = get_HangingPunctuation, write = set_HangingPunctuation};
  __property   Powerpoint_2k::PpDirection TextDirection = {read = get_TextDirection, write = set_TextDirection};
};
typedef ParagraphFormatDispT<ParagraphFormat> ParagraphFormatDisp;

typedef TComInterface<BulletFormat>  TCOMBulletFormat;

// *********************************************************************//
// DispIntf:  BulletFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493497-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class BulletFormatDispT : public TAutoDriver<BulletFormat>
{
public:
  BulletFormatDispT(){}

  BulletFormatDispT(BulletFormat *pintf)
  {
    TAutoDriver<BulletFormat>::Bind(pintf, false);
  }

  BulletFormatDispT(BulletFormatPtr pintf)
  {
    TAutoDriver<BulletFormat>::Bind(pintf, true);
  }

  BulletFormatDispT& operator=(BulletFormat *pintf)
  {
    TAutoDriver<BulletFormat>::Bind(pintf, false);
    return *this;
  }

  BulletFormatDispT& operator=(BulletFormatPtr pintf)
  {
    TAutoDriver<BulletFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_2k::MsoTriState Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Character(int* Character/*[out,retval]*/);
  int             __fastcall get_Character(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Character(int Character/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RelativeSize(float* RelativeSize/*[out,retval]*/);
  float           __fastcall get_RelativeSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RelativeSize(float RelativeSize/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_UseTextColor(Office_2k::MsoTriState* UseTextColor/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_UseTextColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_UseTextColor(Office_2k::MsoTriState UseTextColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_UseTextFont(Office_2k::MsoTriState* UseTextFont/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_UseTextFont(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_UseTextFont(Office_2k::MsoTriState UseTextFont/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Font(Powerpoint_2k::FontPtr* Font/*[out,retval]*/);
  Powerpoint_2k::FontPtr __fastcall get_Font(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Powerpoint_2k::PpBulletType* Type/*[out,retval]*/);
  Powerpoint_2k::PpBulletType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Type(Powerpoint_2k::PpBulletType Type/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Style(Powerpoint_2k::PpNumberedBulletStyle* Style/*[out,retval]*/);
  Powerpoint_2k::PpNumberedBulletStyle __fastcall get_Style(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Style(Powerpoint_2k::PpNumberedBulletStyle Style/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_StartValue(int* StartValue/*[out,retval]*/);
  int             __fastcall get_StartValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_StartValue(int StartValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Picture(BSTR Picture/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Number(int* Number/*[out,retval]*/);
  int             __fastcall get_Number(void);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   int             Character = {read = get_Character, write = set_Character};
  __property   float           RelativeSize = {read = get_RelativeSize, write = set_RelativeSize};
  __property   Office_2k::MsoTriState UseTextColor = {read = get_UseTextColor, write = set_UseTextColor};
  __property   Office_2k::MsoTriState UseTextFont = {read = get_UseTextFont, write = set_UseTextFont};
  __property   Powerpoint_2k::FontPtr Font = {read = get_Font};
  __property   Powerpoint_2k::PpBulletType Type = {read = get_Type, write = set_Type};
  __property   Powerpoint_2k::PpNumberedBulletStyle Style = {read = get_Style, write = set_Style};
  __property   int             StartValue = {read = get_StartValue, write = set_StartValue};
  __property   int             Number = {read = get_Number};
};
typedef BulletFormatDispT<BulletFormat> BulletFormatDisp;

typedef TComInterface<TextStyles>  TCOMTextStyles;

// *********************************************************************//
// DispIntf:  TextStyles
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493498-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class TextStylesDispT : public TAutoDriver<TextStyles>
{
public:
  TextStylesDispT(){}

  TextStylesDispT(TextStyles *pintf)
  {
    TAutoDriver<TextStyles>::Bind(pintf, false);
  }

  TextStylesDispT(TextStylesPtr pintf)
  {
    TAutoDriver<TextStyles>::Bind(pintf, true);
  }

  TextStylesDispT& operator=(TextStyles *pintf)
  {
    TAutoDriver<TextStyles>::Bind(pintf, false);
    return *this;
  }

  TextStylesDispT& operator=(TextStylesPtr pintf)
  {
    TAutoDriver<TextStyles>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(Powerpoint_2k::PpTextStyleType Type/*[in]*/, 
                                             Powerpoint_2k::TextStylePtr* Item/*[out,retval]*/);
  Powerpoint_2k::TextStylePtr __fastcall Item(Powerpoint_2k::PpTextStyleType Type/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/);
  TVariant        __fastcall _Index(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef TextStylesDispT<TextStyles> TextStylesDisp;

typedef TComInterface<TextStyle>  TCOMTextStyle;

// *********************************************************************//
// DispIntf:  TextStyle
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493499-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class TextStyleDispT : public TAutoDriver<TextStyle>
{
public:
  TextStyleDispT(){}

  TextStyleDispT(TextStyle *pintf)
  {
    TAutoDriver<TextStyle>::Bind(pintf, false);
  }

  TextStyleDispT(TextStylePtr pintf)
  {
    TAutoDriver<TextStyle>::Bind(pintf, true);
  }

  TextStyleDispT& operator=(TextStyle *pintf)
  {
    TAutoDriver<TextStyle>::Bind(pintf, false);
    return *this;
  }

  TextStyleDispT& operator=(TextStylePtr pintf)
  {
    TAutoDriver<TextStyle>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Ruler(Powerpoint_2k::RulerPtr* Ruler/*[out,retval]*/);
  Powerpoint_2k::RulerPtr __fastcall get_Ruler(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextFrame(Powerpoint_2k::TextFramePtr* TextFrame/*[out,retval]*/);
  Powerpoint_2k::TextFramePtr __fastcall get_TextFrame(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Levels(Powerpoint_2k::TextStyleLevelsPtr* Levels/*[out,retval]*/);
  Powerpoint_2k::TextStyleLevelsPtr __fastcall get_Levels(void);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::RulerPtr Ruler = {read = get_Ruler};
  __property   Powerpoint_2k::TextFramePtr TextFrame = {read = get_TextFrame};
  __property   Powerpoint_2k::TextStyleLevelsPtr Levels = {read = get_Levels};
};
typedef TextStyleDispT<TextStyle> TextStyleDisp;

typedef TComInterface<TextStyleLevels>  TCOMTextStyleLevels;

// *********************************************************************//
// DispIntf:  TextStyleLevels
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149349A-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class TextStyleLevelsDispT : public TAutoDriver<TextStyleLevels>
{
public:
  TextStyleLevelsDispT(){}

  TextStyleLevelsDispT(TextStyleLevels *pintf)
  {
    TAutoDriver<TextStyleLevels>::Bind(pintf, false);
  }

  TextStyleLevelsDispT(TextStyleLevelsPtr pintf)
  {
    TAutoDriver<TextStyleLevels>::Bind(pintf, true);
  }

  TextStyleLevelsDispT& operator=(TextStyleLevels *pintf)
  {
    TAutoDriver<TextStyleLevels>::Bind(pintf, false);
    return *this;
  }

  TextStyleLevelsDispT& operator=(TextStyleLevelsPtr pintf)
  {
    TAutoDriver<TextStyleLevels>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(int Level/*[in]*/, 
                                             Powerpoint_2k::TextStyleLevelPtr* Item/*[out,retval]*/);
  Powerpoint_2k::TextStyleLevelPtr __fastcall Item(int Level/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/);
  TVariant        __fastcall _Index(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef TextStyleLevelsDispT<TextStyleLevels> TextStyleLevelsDisp;

typedef TComInterface<TextStyleLevel>  TCOMTextStyleLevel;

// *********************************************************************//
// DispIntf:  TextStyleLevel
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149349B-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class TextStyleLevelDispT : public TAutoDriver<TextStyleLevel>
{
public:
  TextStyleLevelDispT(){}

  TextStyleLevelDispT(TextStyleLevel *pintf)
  {
    TAutoDriver<TextStyleLevel>::Bind(pintf, false);
  }

  TextStyleLevelDispT(TextStyleLevelPtr pintf)
  {
    TAutoDriver<TextStyleLevel>::Bind(pintf, true);
  }

  TextStyleLevelDispT& operator=(TextStyleLevel *pintf)
  {
    TAutoDriver<TextStyleLevel>::Bind(pintf, false);
    return *this;
  }

  TextStyleLevelDispT& operator=(TextStyleLevelPtr pintf)
  {
    TAutoDriver<TextStyleLevel>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ParagraphFormat(Powerpoint_2k::ParagraphFormatPtr* ParagraphFormat/*[out,retval]*/);
  Powerpoint_2k::ParagraphFormatPtr __fastcall get_ParagraphFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Font(Powerpoint_2k::FontPtr* Font/*[out,retval]*/);
  Powerpoint_2k::FontPtr __fastcall get_Font(void);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::ParagraphFormatPtr ParagraphFormat = {read = get_ParagraphFormat};
  __property   Powerpoint_2k::FontPtr Font = {read = get_Font};
};
typedef TextStyleLevelDispT<TextStyleLevel> TextStyleLevelDisp;

typedef TComInterface<HeaderFooter>  TCOMHeaderFooter;

// *********************************************************************//
// DispIntf:  HeaderFooter
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149349C-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class HeaderFooterDispT : public TAutoDriver<HeaderFooter>
{
public:
  HeaderFooterDispT(){}

  HeaderFooterDispT(HeaderFooter *pintf)
  {
    TAutoDriver<HeaderFooter>::Bind(pintf, false);
  }

  HeaderFooterDispT(HeaderFooterPtr pintf)
  {
    TAutoDriver<HeaderFooter>::Bind(pintf, true);
  }

  HeaderFooterDispT& operator=(HeaderFooter *pintf)
  {
    TAutoDriver<HeaderFooter>::Bind(pintf, false);
    return *this;
  }

  HeaderFooterDispT& operator=(HeaderFooterPtr pintf)
  {
    TAutoDriver<HeaderFooter>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_2k::MsoTriState Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Text(BSTR* Text/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Text(BSTR Text/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_UseFormat(Office_2k::MsoTriState* UseFormat/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_UseFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_UseFormat(Office_2k::MsoTriState UseFormat/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Format(Powerpoint_2k::PpDateTimeFormat* Format/*[out,retval]*/);
  Powerpoint_2k::PpDateTimeFormat __fastcall get_Format(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Format(Powerpoint_2k::PpDateTimeFormat Format/*[in]*/);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   Office_2k::MsoTriState UseFormat = {read = get_UseFormat, write = set_UseFormat};
  __property   Powerpoint_2k::PpDateTimeFormat Format = {read = get_Format, write = set_Format};
};
typedef HeaderFooterDispT<HeaderFooter> HeaderFooterDisp;

typedef TComInterface<PPDialogs>  TCOMPPDialogs;

// *********************************************************************//
// DispIntf:  PPDialogs
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149349E-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PPDialogsDispT : public TAutoDriver<PPDialogs>
{
public:
  PPDialogsDispT(){}

  PPDialogsDispT(PPDialogs *pintf)
  {
    TAutoDriver<PPDialogs>::Bind(pintf, false);
  }

  PPDialogsDispT(PPDialogsPtr pintf)
  {
    TAutoDriver<PPDialogs>::Bind(pintf, true);
  }

  PPDialogsDispT& operator=(PPDialogs *pintf)
  {
    TAutoDriver<PPDialogs>::Bind(pintf, false);
    return *this;
  }

  PPDialogsDispT& operator=(PPDialogsPtr pintf)
  {
    TAutoDriver<PPDialogs>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(TVariantInParam index/*[in]*/, 
                                             Powerpoint_2k::PPDialogPtr* Item/*[out,retval]*/);
  Powerpoint_2k::PPDialogPtr __fastcall Item(TVariantInParam index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddDialog(float Left/*[in]*/, float Top/*[in]*/, 
                                                  float Width/*[in]*/, float Height/*[in]*/, 
                                                  Office_2k::MsoTriState Modal/*[in,def,opt]*/, 
                                                  LPUNKNOWN ParentWindow/*[in,def,opt]*/, 
                                                  Powerpoint_2k::PpDialogPositioning Position/*[in,def,opt]*/
                                                  , 
                                                  Office_2k::MsoTriState DisplayHelp/*[in,def,opt]*/
                                                  , 
                                                  Powerpoint_2k::PPDialogPtr* Dialog/*[out,retval]*/);
  Powerpoint_2k::PPDialogPtr __fastcall AddDialog(float Left/*[in]*/, float Top/*[in]*/, 
                                                  float Width/*[in]*/, float Height/*[in]*/, 
                                                  Office_2k::MsoTriState Modal/*[in,def,opt]*/, 
                                                  LPUNKNOWN ParentWindow/*[in,def,opt]*/, 
                                                  Powerpoint_2k::PpDialogPositioning Position/*[in,def,opt]*/, 
                                                  Office_2k::MsoTriState DisplayHelp/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddTabDialog(float Left/*[in]*/, float Top/*[in]*/, 
                                                     float Width/*[in]*/, float Height/*[in]*/, 
                                                     Office_2k::MsoTriState Modal/*[in,def,opt]*/, 
                                                     LPUNKNOWN ParentWindow/*[in,def,opt]*/, 
                                                     Powerpoint_2k::PpDialogPositioning Position/*[in,def,opt]*/
                                                     , 
                                                     Office_2k::MsoTriState DisplayHelp/*[in,def,opt]*/
                                                     , 
                                                     Powerpoint_2k::PPDialogPtr* TabDialog/*[out,retval]*/);
  Powerpoint_2k::PPDialogPtr __fastcall AddTabDialog(float Left/*[in]*/, float Top/*[in]*/, 
                                                     float Width/*[in]*/, float Height/*[in]*/, 
                                                     Office_2k::MsoTriState Modal/*[in,def,opt]*/, 
                                                     LPUNKNOWN ParentWindow/*[in,def,opt]*/, 
                                                     Powerpoint_2k::PpDialogPositioning Position/*[in,def,opt]*/, 
                                                     Office_2k::MsoTriState DisplayHelp/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall LoadDialog(BSTR resourceDLL/*[in]*/, int nResID/*[in]*/, 
                                                   Office_2k::MsoTriState bModal/*[in,def,opt]*/, 
                                                   LPUNKNOWN ParentWindow/*[in,def,opt]*/, 
                                                   Powerpoint_2k::PpDialogPositioning Position/*[in,def,opt]*/
                                                   , 
                                                   Powerpoint_2k::PPDialogPtr* LoadDialog/*[out,retval]*/);
  Powerpoint_2k::PPDialogPtr __fastcall LoadDialog(BSTR resourceDLL/*[in]*/, int nResID/*[in]*/, 
                                                   Office_2k::MsoTriState bModal/*[in,def,opt]*/, 
                                                   LPUNKNOWN ParentWindow/*[in,def,opt]*/, 
                                                   Powerpoint_2k::PpDialogPositioning Position/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddAlert(Powerpoint_2k::PPAlertPtr* Alert/*[out,retval]*/);
  Powerpoint_2k::PPAlertPtr __fastcall AddAlert(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/);
  Powerpoint_2k::TagsPtr __fastcall get_Tags(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RunCharacterAlert(BSTR Text/*[in]*/, 
                                                          Powerpoint_2k::PpAlertType Type/*[in]*/, 
                                                          Powerpoint_2k::PpAlertIcon icon/*[in]*/, 
                                                          LPUNKNOWN ParentWindow/*[in,def,opt]*/, 
                                                          Powerpoint_2k::PpAlertButton* RunCharacterAlert/*[out,retval]*/);
  Powerpoint_2k::PpAlertButton __fastcall RunCharacterAlert(BSTR Text/*[in]*/, 
                                                            Powerpoint_2k::PpAlertType Type/*[in]*/, 
                                                            Powerpoint_2k::PpAlertIcon icon/*[in]*/, 
                                                            LPUNKNOWN ParentWindow/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/);
  TVariant        __fastcall _Index(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   Powerpoint_2k::TagsPtr Tags = {read = get_Tags};
  __property   BSTR            Name = {read = get_Name, write = set_Name};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef PPDialogsDispT<PPDialogs> PPDialogsDisp;

typedef TComInterface<PPAlert>  TCOMPPAlert;

// *********************************************************************//
// DispIntf:  PPAlert
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149349F-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PPAlertDispT : public TAutoDriver<PPAlert>
{
public:
  PPAlertDispT(){}

  PPAlertDispT(PPAlert *pintf)
  {
    TAutoDriver<PPAlert>::Bind(pintf, false);
  }

  PPAlertDispT(PPAlertPtr pintf)
  {
    TAutoDriver<PPAlert>::Bind(pintf, true);
  }

  PPAlertDispT& operator=(PPAlert *pintf)
  {
    TAutoDriver<PPAlert>::Bind(pintf, false);
    return *this;
  }

  PPAlertDispT& operator=(PPAlertPtr pintf)
  {
    TAutoDriver<PPAlert>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Run(BSTR Title/*[in]*/, int Type/*[in]*/, BSTR Text/*[in]*/
                                            , BSTR leftBtn/*[in]*/, BSTR middleBtn/*[in]*/, 
                                            BSTR rightBtn/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PressedButton(int* PressedButton/*[out,retval]*/);
  int             __fastcall get_PressedButton(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnButton(BSTR* OnButton/*[out,retval]*/);
  BSTR            __fastcall get_OnButton(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnButton(BSTR OnButton/*[in]*/);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             PressedButton = {read = get_PressedButton};
  __property   BSTR            OnButton = {read = get_OnButton, write = set_OnButton};
};
typedef PPAlertDispT<PPAlert> PPAlertDisp;

typedef TComInterface<PPDialog>  TCOMPPDialog;

// *********************************************************************//
// DispIntf:  PPDialog
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934A0-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PPDialogDispT : public TAutoDriver<PPDialog>
{
public:
  PPDialogDispT(){}

  PPDialogDispT(PPDialog *pintf)
  {
    TAutoDriver<PPDialog>::Bind(pintf, false);
  }

  PPDialogDispT(PPDialogPtr pintf)
  {
    TAutoDriver<PPDialog>::Bind(pintf, true);
  }

  PPDialogDispT& operator=(PPDialog *pintf)
  {
    TAutoDriver<PPDialog>::Bind(pintf, false);
    return *this;
  }

  PPDialogDispT& operator=(PPDialogPtr pintf)
  {
    TAutoDriver<PPDialog>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Style(Powerpoint_2k::PpDialogStyle* Style/*[out,retval]*/);
  Powerpoint_2k::PpDialogStyle __fastcall get_Style(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Mode(Powerpoint_2k::PpDialogMode* Mode/*[out,retval]*/);
  Powerpoint_2k::PpDialogMode __fastcall get_Mode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Mode(Powerpoint_2k::PpDialogMode Mode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpId(int* HelpId/*[out,retval]*/);
  int             __fastcall get_HelpId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpId(int HelpId/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HideOnIdle(Office_2k::MsoTriState* HideOnIdle/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_HideOnIdle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HideOnIdle(Office_2k::MsoTriState HideOnIdle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_resourceDLL(BSTR* resourceDLL/*[out,retval]*/);
  BSTR            __fastcall get_resourceDLL(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_resourceDLL(BSTR resourceDLL/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* Caption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Caption(BSTR Caption/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(float* Left/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(float Left/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(float* Top/*[out,retval]*/);
  float           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(float Top/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(float* Width/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(float Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(float* Height/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ClientLeft(float* ClientLeft/*[out,retval]*/);
  float           __fastcall get_ClientLeft(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ClientTop(float* ClientTop/*[out,retval]*/);
  float           __fastcall get_ClientTop(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ClientWidth(float* ClientWidth/*[out,retval]*/);
  float           __fastcall get_ClientWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ClientHeight(float* ClientHeight/*[out,retval]*/);
  float           __fastcall get_ClientHeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_2k::MsoTriState Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Controls(Powerpoint_2k::PPControlsPtr* Controls/*[out,retval]*/);
  Powerpoint_2k::PPControlsPtr __fastcall get_Controls(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/);
  Powerpoint_2k::TagsPtr __fastcall get_Tags(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Sheets(Powerpoint_2k::PPTabSheetsPtr* Sheets/*[out,retval]*/);
  Powerpoint_2k::PPTabSheetsPtr __fastcall get_Sheets(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TabControl(Powerpoint_2k::PPTabControlPtr* TabControl/*[out,retval]*/);
  Powerpoint_2k::PPTabControlPtr __fastcall get_TabControl(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DelayTime(int* DelayTime/*[out,retval]*/);
  int             __fastcall get_DelayTime(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DelayTime(int DelayTime/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SaveDialog(BSTR FileName/*[in]*/, 
                                                   int* SaveDialog/*[out,retval]*/);
  int             __fastcall SaveDialog(BSTR FileName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Terminate();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HWND(long* HWND/*[out,retval]*/);
  long            __fastcall get_HWND(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnTerminate(BSTR* OnTerminate/*[out,retval]*/);
  BSTR            __fastcall get_OnTerminate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnTerminate(BSTR OnTerminate/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnIdle(BSTR* OnIdle/*[out,retval]*/);
  BSTR            __fastcall get_OnIdle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnIdle(BSTR OnIdle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseDown(BSTR* OnMouseDown/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseDown(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseDown(BSTR OnMouseDown/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseUp(BSTR* OnMouseUp/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseUp(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseUp(BSTR OnMouseUp/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKeyPressed(BSTR* OnKeyPressed/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyPressed(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKeyPressed(BSTR OnKeyPressed/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnTimer(BSTR* OnTimer/*[out,retval]*/);
  BSTR            __fastcall get_OnTimer(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnTimer(BSTR OnTimer/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnActivate(BSTR* OnActivate/*[out,retval]*/);
  BSTR            __fastcall get_OnActivate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnActivate(BSTR OnActivate/*[in]*/);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::PpDialogStyle Style = {read = get_Style};
  __property   Powerpoint_2k::PpDialogMode Mode = {read = get_Mode, write = set_Mode};
  __property   int             HelpId = {read = get_HelpId, write = set_HelpId};
  __property   Office_2k::MsoTriState HideOnIdle = {read = get_HideOnIdle, write = set_HideOnIdle};
  __property   BSTR            resourceDLL = {read = get_resourceDLL, write = set_resourceDLL};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   float           ClientLeft = {read = get_ClientLeft};
  __property   float           ClientTop = {read = get_ClientTop};
  __property   float           ClientWidth = {read = get_ClientWidth};
  __property   float           ClientHeight = {read = get_ClientHeight};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   Powerpoint_2k::PPControlsPtr Controls = {read = get_Controls};
  __property   Powerpoint_2k::TagsPtr Tags = {read = get_Tags};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   Powerpoint_2k::PPTabSheetsPtr Sheets = {read = get_Sheets};
  __property   Powerpoint_2k::PPTabControlPtr TabControl = {read = get_TabControl};
  __property   int             DelayTime = {read = get_DelayTime, write = set_DelayTime};
  __property   long            HWND = {read = get_HWND};
  __property   BSTR            OnTerminate = {read = get_OnTerminate, write = set_OnTerminate};
  __property   BSTR            OnIdle = {read = get_OnIdle, write = set_OnIdle};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
  __property   BSTR            OnKeyPressed = {read = get_OnKeyPressed, write = set_OnKeyPressed};
  __property   BSTR            OnTimer = {read = get_OnTimer, write = set_OnTimer};
  __property   BSTR            OnActivate = {read = get_OnActivate, write = set_OnActivate};
};
typedef PPDialogDispT<PPDialog> PPDialogDisp;

typedef TComInterface<PPTabSheet>  TCOMPPTabSheet;

// *********************************************************************//
// DispIntf:  PPTabSheet
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934A1-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PPTabSheetDispT : public TAutoDriver<PPTabSheet>
{
public:
  PPTabSheetDispT(){}

  PPTabSheetDispT(PPTabSheet *pintf)
  {
    TAutoDriver<PPTabSheet>::Bind(pintf, false);
  }

  PPTabSheetDispT(PPTabSheetPtr pintf)
  {
    TAutoDriver<PPTabSheet>::Bind(pintf, true);
  }

  PPTabSheetDispT& operator=(PPTabSheet *pintf)
  {
    TAutoDriver<PPTabSheet>::Bind(pintf, false);
    return *this;
  }

  PPTabSheetDispT& operator=(PPTabSheetPtr pintf)
  {
    TAutoDriver<PPTabSheet>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Select();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ClientLeft(float* ClientLeft/*[out,retval]*/);
  float           __fastcall get_ClientLeft(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ClientTop(float* ClientTop/*[out,retval]*/);
  float           __fastcall get_ClientTop(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ClientWidth(float* ClientWidth/*[out,retval]*/);
  float           __fastcall get_ClientWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ClientHeight(float* ClientHeight/*[out,retval]*/);
  float           __fastcall get_ClientHeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Controls(Powerpoint_2k::PPControlsPtr* Controls/*[out,retval]*/);
  Powerpoint_2k::PPControlsPtr __fastcall get_Controls(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/);
  Powerpoint_2k::TagsPtr __fastcall get_Tags(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnActivate(BSTR* OnActivate/*[out,retval]*/);
  BSTR            __fastcall get_OnActivate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnActivate(BSTR OnActivate/*[in]*/);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   float           ClientLeft = {read = get_ClientLeft};
  __property   float           ClientTop = {read = get_ClientTop};
  __property   float           ClientWidth = {read = get_ClientWidth};
  __property   float           ClientHeight = {read = get_ClientHeight};
  __property   Powerpoint_2k::PPControlsPtr Controls = {read = get_Controls};
  __property   Powerpoint_2k::TagsPtr Tags = {read = get_Tags};
  __property   BSTR            OnActivate = {read = get_OnActivate, write = set_OnActivate};
};
typedef PPTabSheetDispT<PPTabSheet> PPTabSheetDisp;

typedef TComInterface<PPControls>  TCOMPPControls;

// *********************************************************************//
// DispIntf:  PPControls
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934A2-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PPControlsDispT : public TAutoDriver<PPControls>
{
public:
  PPControlsDispT(){}

  PPControlsDispT(PPControls *pintf)
  {
    TAutoDriver<PPControls>::Bind(pintf, false);
  }

  PPControlsDispT(PPControlsPtr pintf)
  {
    TAutoDriver<PPControls>::Bind(pintf, true);
  }

  PPControlsDispT& operator=(PPControls *pintf)
  {
    TAutoDriver<PPControls>::Bind(pintf, false);
    return *this;
  }

  PPControlsDispT& operator=(PPControlsPtr pintf)
  {
    TAutoDriver<PPControls>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(TVariantInParam index/*[in]*/, 
                                             Powerpoint_2k::PPControlPtr* Item/*[out,retval]*/);
  Powerpoint_2k::PPControlPtr __fastcall Item(TVariantInParam index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddPushButton(float Left/*[in]*/, float Top/*[in]*/, 
                                                      float Width/*[in]*/, float Height/*[in]*/, 
                                                      Powerpoint_2k::PPPushButtonPtr* PushButton/*[out,retval]*/);
  Powerpoint_2k::PPPushButtonPtr __fastcall AddPushButton(float Left/*[in]*/, float Top/*[in]*/, 
                                                          float Width/*[in]*/, float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddToggleButton(float Left/*[in]*/, float Top/*[in]*/, 
                                                        float Width/*[in]*/, float Height/*[in]*/, 
                                                        Powerpoint_2k::PPToggleButtonPtr* ToggleButton/*[out,retval]*/);
  Powerpoint_2k::PPToggleButtonPtr __fastcall AddToggleButton(float Left/*[in]*/, float Top/*[in]*/, 
                                                              float Width/*[in]*/, 
                                                              float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddBitmapButton(float Left/*[in]*/, float Top/*[in]*/, 
                                                        float Width/*[in]*/, float Height/*[in]*/, 
                                                        Powerpoint_2k::PPBitmapButtonPtr* BitmapButton/*[out,retval]*/);
  Powerpoint_2k::PPBitmapButtonPtr __fastcall AddBitmapButton(float Left/*[in]*/, float Top/*[in]*/, 
                                                              float Width/*[in]*/, 
                                                              float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddListBox(float Left/*[in]*/, float Top/*[in]*/, 
                                                   float Width/*[in]*/, float Height/*[in]*/, 
                                                   Powerpoint_2k::PPListBoxPtr* ListBox/*[out,retval]*/);
  Powerpoint_2k::PPListBoxPtr __fastcall AddListBox(float Left/*[in]*/, float Top/*[in]*/, 
                                                    float Width/*[in]*/, float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddCheckBox(float Left/*[in]*/, float Top/*[in]*/, 
                                                    float Width/*[in]*/, float Height/*[in]*/, 
                                                    Powerpoint_2k::PPCheckBoxPtr* CheckBox/*[out,retval]*/);
  Powerpoint_2k::PPCheckBoxPtr __fastcall AddCheckBox(float Left/*[in]*/, float Top/*[in]*/, 
                                                      float Width/*[in]*/, float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddRadioCluster(float Left/*[in]*/, float Top/*[in]*/, 
                                                        float Width/*[in]*/, float Height/*[in]*/, 
                                                        Powerpoint_2k::PPRadioClusterPtr* RadioCluster/*[out,retval]*/);
  Powerpoint_2k::PPRadioClusterPtr __fastcall AddRadioCluster(float Left/*[in]*/, float Top/*[in]*/, 
                                                              float Width/*[in]*/, 
                                                              float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddStaticText(float Left/*[in]*/, float Top/*[in]*/, 
                                                      float Width/*[in]*/, float Height/*[in]*/, 
                                                      Powerpoint_2k::PPStaticTextPtr* StaticText/*[out,retval]*/);
  Powerpoint_2k::PPStaticTextPtr __fastcall AddStaticText(float Left/*[in]*/, float Top/*[in]*/, 
                                                          float Width/*[in]*/, float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddEditText(float Left/*[in]*/, float Top/*[in]*/, 
                                                    float Width/*[in]*/, float Height/*[in]*/, 
                                                    TVariantInParam VerticalScrollBar/*[in,opt]*/, 
                                                    Powerpoint_2k::PPEditTextPtr* EditText/*[out,retval]*/);
  Powerpoint_2k::PPEditTextPtr __fastcall AddEditText(float Left/*[in]*/, float Top/*[in]*/, 
                                                      float Width/*[in]*/, float Height/*[in]*/, 
                                                      TVariantInParam VerticalScrollBar/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddIcon(float Left/*[in]*/, float Top/*[in]*/, 
                                                float Width/*[in]*/, float Height/*[in]*/, 
                                                Powerpoint_2k::PPIconPtr* icon/*[out,retval]*/);
  Powerpoint_2k::PPIconPtr __fastcall AddIcon(float Left/*[in]*/, float Top/*[in]*/, 
                                              float Width/*[in]*/, float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddBitmap(float Left/*[in]*/, float Top/*[in]*/, 
                                                  float Width/*[in]*/, float Height/*[in]*/, 
                                                  Powerpoint_2k::PPBitmapPtr* Bitmap/*[out,retval]*/);
  Powerpoint_2k::PPBitmapPtr __fastcall AddBitmap(float Left/*[in]*/, float Top/*[in]*/, 
                                                  float Width/*[in]*/, float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddSpinner(float Left/*[in]*/, float Top/*[in]*/, 
                                                   float Width/*[in]*/, float Height/*[in]*/, 
                                                   Powerpoint_2k::PPSpinnerPtr* Spinner/*[out,retval]*/);
  Powerpoint_2k::PPSpinnerPtr __fastcall AddSpinner(float Left/*[in]*/, float Top/*[in]*/, 
                                                    float Width/*[in]*/, float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddScrollBar(Powerpoint_2k::PpScrollBarStyle Style/*[in]*/, 
                                                     float Left/*[in]*/, float Top/*[in]*/, 
                                                     float Width/*[in]*/, float Height/*[in]*/, 
                                                     Powerpoint_2k::PPScrollBarPtr* ScrollBar/*[out,retval]*/);
  Powerpoint_2k::PPScrollBarPtr __fastcall AddScrollBar(Powerpoint_2k::PpScrollBarStyle Style/*[in]*/, 
                                                        float Left/*[in]*/, float Top/*[in]*/, 
                                                        float Width/*[in]*/, float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddGroupBox(float Left/*[in]*/, float Top/*[in]*/, 
                                                    float Width/*[in]*/, float Height/*[in]*/, 
                                                    Powerpoint_2k::PPGroupBoxPtr* GroupBox/*[out,retval]*/);
  Powerpoint_2k::PPGroupBoxPtr __fastcall AddGroupBox(float Left/*[in]*/, float Top/*[in]*/, 
                                                      float Width/*[in]*/, float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddDropDown(float Left/*[in]*/, float Top/*[in]*/, 
                                                    float Width/*[in]*/, float Height/*[in]*/, 
                                                    Powerpoint_2k::PPDropDownPtr* DropDown/*[out,retval]*/);
  Powerpoint_2k::PPDropDownPtr __fastcall AddDropDown(float Left/*[in]*/, float Top/*[in]*/, 
                                                      float Width/*[in]*/, float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddDropDownEdit(float Left/*[in]*/, float Top/*[in]*/, 
                                                        float Width/*[in]*/, float Height/*[in]*/, 
                                                        Powerpoint_2k::PPDropDownEditPtr* DropDownEdit/*[out,retval]*/);
  Powerpoint_2k::PPDropDownEditPtr __fastcall AddDropDownEdit(float Left/*[in]*/, float Top/*[in]*/, 
                                                              float Width/*[in]*/, 
                                                              float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddMiniature(float Left/*[in]*/, float Top/*[in]*/, 
                                                     float Width/*[in]*/, float Height/*[in]*/, 
                                                     Powerpoint_2k::PPSlideMiniaturePtr* Miniature/*[out,retval]*/);
  Powerpoint_2k::PPSlideMiniaturePtr __fastcall AddMiniature(float Left/*[in]*/, float Top/*[in]*/, 
                                                             float Width/*[in]*/, 
                                                             float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddFrame(float Left/*[in]*/, float Top/*[in]*/, 
                                                 float Width/*[in]*/, float Height/*[in]*/, 
                                                 Powerpoint_2k::PPFramePtr* Frame/*[out,retval]*/);
  Powerpoint_2k::PPFramePtr __fastcall AddFrame(float Left/*[in]*/, float Top/*[in]*/, 
                                                float Width/*[in]*/, float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_2k::MsoTriState Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/);
  TVariant        __fastcall _Index(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef PPControlsDispT<PPControls> PPControlsDisp;

typedef TComInterface<PPTabSheets>  TCOMPPTabSheets;

// *********************************************************************//
// DispIntf:  PPTabSheets
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934A3-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PPTabSheetsDispT : public TAutoDriver<PPTabSheets>
{
public:
  PPTabSheetsDispT(){}

  PPTabSheetsDispT(PPTabSheets *pintf)
  {
    TAutoDriver<PPTabSheets>::Bind(pintf, false);
  }

  PPTabSheetsDispT(PPTabSheetsPtr pintf)
  {
    TAutoDriver<PPTabSheets>::Bind(pintf, true);
  }

  PPTabSheetsDispT& operator=(PPTabSheets *pintf)
  {
    TAutoDriver<PPTabSheets>::Bind(pintf, false);
    return *this;
  }

  PPTabSheetsDispT& operator=(PPTabSheetsPtr pintf)
  {
    TAutoDriver<PPTabSheets>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(TVariantInParam index/*[in]*/, 
                                             Powerpoint_2k::PPTabSheetPtr* Item/*[out,retval]*/);
  Powerpoint_2k::PPTabSheetPtr __fastcall Item(TVariantInParam index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(BSTR Name/*[in]*/, 
                                            Powerpoint_2k::PPTabSheetPtr* Add/*[out,retval]*/);
  Powerpoint_2k::PPTabSheetPtr __fastcall Add(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActiveSheet(Powerpoint_2k::PPTabSheetPtr* ActiveSheet/*[out,retval]*/);
  Powerpoint_2k::PPTabSheetPtr __fastcall get_ActiveSheet(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/);
  TVariant        __fastcall _Index(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_2k::PPTabSheetPtr ActiveSheet = {read = get_ActiveSheet};
  __property   BSTR            Name = {read = get_Name, write = set_Name};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef PPTabSheetsDispT<PPTabSheets> PPTabSheetsDisp;

typedef TComInterface<PPControl>  TCOMPPControl;

// *********************************************************************//
// DispIntf:  PPControl
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {914934A4-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PPControlDispT : public TAutoDriver<PPControl>
{
public:
  PPControlDispT(){}

  PPControlDispT(PPControl *pintf)
  {
    TAutoDriver<PPControl>::Bind(pintf, false);
  }

  PPControlDispT(PPControlPtr pintf)
  {
    TAutoDriver<PPControl>::Bind(pintf, true);
  }

  PPControlDispT& operator=(PPControl *pintf)
  {
    TAutoDriver<PPControl>::Bind(pintf, false);
    return *this;
  }

  PPControlDispT& operator=(PPControlPtr pintf)
  {
    TAutoDriver<PPControl>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enable(Office_2k::MsoTriState* Enable/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Enable(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enable(Office_2k::MsoTriState Enable/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_2k::MsoTriState Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Focus(Office_2k::MsoTriState* Focus/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Focus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Focus(Office_2k::MsoTriState Focus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Label(BSTR* Label/*[out,retval]*/);
  BSTR            __fastcall get_Label(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Label(BSTR Label/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpId(int* HelpId/*[out,retval]*/);
  int             __fastcall get_HelpId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpId(int HelpId/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(float* Left/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(float Left/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(float* Top/*[out,retval]*/);
  float           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(float Top/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(float* Width/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(float Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(float* Height/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HWND(long* HWND/*[out,retval]*/);
  long            __fastcall get_HWND(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnSetFocus(BSTR* OnSetFocus/*[out,retval]*/);
  BSTR            __fastcall get_OnSetFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnSetFocus(BSTR OnSetFocus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKillFocus(BSTR* OnKillFocus/*[out,retval]*/);
  BSTR            __fastcall get_OnKillFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKillFocus(BSTR OnKillFocus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/);
  Powerpoint_2k::TagsPtr __fastcall get_Tags(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoTriState Enable = {read = get_Enable, write = set_Enable};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   Office_2k::MsoTriState Focus = {read = get_Focus, write = set_Focus};
  __property   BSTR            Label = {read = get_Label, write = set_Label};
  __property   int             HelpId = {read = get_HelpId, write = set_HelpId};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   long            HWND = {read = get_HWND};
  __property   BSTR            OnSetFocus = {read = get_OnSetFocus, write = set_OnSetFocus};
  __property   BSTR            OnKillFocus = {read = get_OnKillFocus, write = set_OnKillFocus};
  __property   Powerpoint_2k::TagsPtr Tags = {read = get_Tags};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
};
typedef PPControlDispT<PPControl> PPControlDisp;

typedef TComInterface<PPPushButton>  TCOMPPPushButton;

// *********************************************************************//
// DispIntf:  PPPushButton
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934A5-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PPPushButtonDispT : public TAutoDriver<PPPushButton>
{
public:
  PPPushButtonDispT(){}

  PPPushButtonDispT(PPPushButton *pintf)
  {
    TAutoDriver<PPPushButton>::Bind(pintf, false);
  }

  PPPushButtonDispT(PPPushButtonPtr pintf)
  {
    TAutoDriver<PPPushButton>::Bind(pintf, true);
  }

  PPPushButtonDispT& operator=(PPPushButton *pintf)
  {
    TAutoDriver<PPPushButton>::Bind(pintf, false);
    return *this;
  }

  PPPushButtonDispT& operator=(PPPushButtonPtr pintf)
  {
    TAutoDriver<PPPushButton>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Click();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsDefault(Office_2k::MsoTriState* IsDefault/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_IsDefault(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IsDefault(Office_2k::MsoTriState IsDefault/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsEscape(Office_2k::MsoTriState* IsEscape/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_IsEscape(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IsEscape(Office_2k::MsoTriState IsEscape/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnPressed(BSTR* OnPressed/*[out,retval]*/);
  BSTR            __fastcall get_OnPressed(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnPressed(BSTR OnPressed/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enable(Office_2k::MsoTriState* Enable/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Enable(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enable(Office_2k::MsoTriState Enable/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_2k::MsoTriState Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Focus(Office_2k::MsoTriState* Focus/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Focus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Focus(Office_2k::MsoTriState Focus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Label(BSTR* Label/*[out,retval]*/);
  BSTR            __fastcall get_Label(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Label(BSTR Label/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpId(int* HelpId/*[out,retval]*/);
  int             __fastcall get_HelpId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpId(int HelpId/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(float* Left/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(float Left/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(float* Top/*[out,retval]*/);
  float           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(float Top/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(float* Width/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(float Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(float* Height/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HWND(long* HWND/*[out,retval]*/);
  long            __fastcall get_HWND(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnSetFocus(BSTR* OnSetFocus/*[out,retval]*/);
  BSTR            __fastcall get_OnSetFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnSetFocus(BSTR OnSetFocus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKillFocus(BSTR* OnKillFocus/*[out,retval]*/);
  BSTR            __fastcall get_OnKillFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKillFocus(BSTR OnKillFocus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/);
  Powerpoint_2k::TagsPtr __fastcall get_Tags(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);

  __property   Office_2k::MsoTriState IsDefault = {read = get_IsDefault, write = set_IsDefault};
  __property   Office_2k::MsoTriState IsEscape = {read = get_IsEscape, write = set_IsEscape};
  __property   BSTR            OnPressed = {read = get_OnPressed, write = set_OnPressed};

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoTriState Enable = {read = get_Enable, write = set_Enable};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   Office_2k::MsoTriState Focus = {read = get_Focus, write = set_Focus};
  __property   BSTR            Label = {read = get_Label, write = set_Label};
  __property   int             HelpId = {read = get_HelpId, write = set_HelpId};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   long            HWND = {read = get_HWND};
  __property   BSTR            OnSetFocus = {read = get_OnSetFocus, write = set_OnSetFocus};
  __property   BSTR            OnKillFocus = {read = get_OnKillFocus, write = set_OnKillFocus};
  __property   Powerpoint_2k::TagsPtr Tags = {read = get_Tags};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
};
typedef PPPushButtonDispT<PPPushButton> PPPushButtonDisp;

typedef TComInterface<PPToggleButton>  TCOMPPToggleButton;

// *********************************************************************//
// DispIntf:  PPToggleButton
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934A6-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PPToggleButtonDispT : public TAutoDriver<PPToggleButton>
{
public:
  PPToggleButtonDispT(){}

  PPToggleButtonDispT(PPToggleButton *pintf)
  {
    TAutoDriver<PPToggleButton>::Bind(pintf, false);
  }

  PPToggleButtonDispT(PPToggleButtonPtr pintf)
  {
    TAutoDriver<PPToggleButton>::Bind(pintf, true);
  }

  PPToggleButtonDispT& operator=(PPToggleButton *pintf)
  {
    TAutoDriver<PPToggleButton>::Bind(pintf, false);
    return *this;
  }

  PPToggleButtonDispT& operator=(PPToggleButtonPtr pintf)
  {
    TAutoDriver<PPToggleButton>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_State(Office_2k::MsoTriState* State/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_State(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_State(Office_2k::MsoTriState State/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ResourceID(int* ResourceID/*[out,retval]*/);
  int             __fastcall get_ResourceID(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ResourceID(int ResourceID/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Click();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnClick(BSTR* OnClick/*[out,retval]*/);
  BSTR            __fastcall get_OnClick(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnClick(BSTR OnClick/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enable(Office_2k::MsoTriState* Enable/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Enable(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enable(Office_2k::MsoTriState Enable/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_2k::MsoTriState Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Focus(Office_2k::MsoTriState* Focus/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Focus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Focus(Office_2k::MsoTriState Focus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Label(BSTR* Label/*[out,retval]*/);
  BSTR            __fastcall get_Label(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Label(BSTR Label/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpId(int* HelpId/*[out,retval]*/);
  int             __fastcall get_HelpId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpId(int HelpId/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(float* Left/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(float Left/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(float* Top/*[out,retval]*/);
  float           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(float Top/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(float* Width/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(float Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(float* Height/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HWND(long* HWND/*[out,retval]*/);
  long            __fastcall get_HWND(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnSetFocus(BSTR* OnSetFocus/*[out,retval]*/);
  BSTR            __fastcall get_OnSetFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnSetFocus(BSTR OnSetFocus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKillFocus(BSTR* OnKillFocus/*[out,retval]*/);
  BSTR            __fastcall get_OnKillFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKillFocus(BSTR OnKillFocus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/);
  Powerpoint_2k::TagsPtr __fastcall get_Tags(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);

  __property   Office_2k::MsoTriState State = {read = get_State, write = set_State};
  __property   int             ResourceID = {read = get_ResourceID, write = set_ResourceID};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoTriState Enable = {read = get_Enable, write = set_Enable};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   Office_2k::MsoTriState Focus = {read = get_Focus, write = set_Focus};
  __property   BSTR            Label = {read = get_Label, write = set_Label};
  __property   int             HelpId = {read = get_HelpId, write = set_HelpId};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   long            HWND = {read = get_HWND};
  __property   BSTR            OnSetFocus = {read = get_OnSetFocus, write = set_OnSetFocus};
  __property   BSTR            OnKillFocus = {read = get_OnKillFocus, write = set_OnKillFocus};
  __property   Powerpoint_2k::TagsPtr Tags = {read = get_Tags};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
};
typedef PPToggleButtonDispT<PPToggleButton> PPToggleButtonDisp;

typedef TComInterface<PPBitmapButton>  TCOMPPBitmapButton;

// *********************************************************************//
// DispIntf:  PPBitmapButton
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934A7-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PPBitmapButtonDispT : public TAutoDriver<PPBitmapButton>
{
public:
  PPBitmapButtonDispT(){}

  PPBitmapButtonDispT(PPBitmapButton *pintf)
  {
    TAutoDriver<PPBitmapButton>::Bind(pintf, false);
  }

  PPBitmapButtonDispT(PPBitmapButtonPtr pintf)
  {
    TAutoDriver<PPBitmapButton>::Bind(pintf, true);
  }

  PPBitmapButtonDispT& operator=(PPBitmapButton *pintf)
  {
    TAutoDriver<PPBitmapButton>::Bind(pintf, false);
    return *this;
  }

  PPBitmapButtonDispT& operator=(PPBitmapButtonPtr pintf)
  {
    TAutoDriver<PPBitmapButton>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Click();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ResourceID(int* ResourceID/*[out,retval]*/);
  int             __fastcall get_ResourceID(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ResourceID(int ResourceID/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnPressed(BSTR* OnPressed/*[out,retval]*/);
  BSTR            __fastcall get_OnPressed(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnPressed(BSTR OnPressed/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsDefault(Office_2k::MsoTriState* IsDefault/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_IsDefault(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IsDefault(Office_2k::MsoTriState IsDefault/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsEscape(Office_2k::MsoTriState* IsEscape/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_IsEscape(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IsEscape(Office_2k::MsoTriState IsEscape/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enable(Office_2k::MsoTriState* Enable/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Enable(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enable(Office_2k::MsoTriState Enable/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_2k::MsoTriState Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Focus(Office_2k::MsoTriState* Focus/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Focus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Focus(Office_2k::MsoTriState Focus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Label(BSTR* Label/*[out,retval]*/);
  BSTR            __fastcall get_Label(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Label(BSTR Label/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpId(int* HelpId/*[out,retval]*/);
  int             __fastcall get_HelpId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpId(int HelpId/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(float* Left/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(float Left/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(float* Top/*[out,retval]*/);
  float           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(float Top/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(float* Width/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(float Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(float* Height/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HWND(long* HWND/*[out,retval]*/);
  long            __fastcall get_HWND(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnSetFocus(BSTR* OnSetFocus/*[out,retval]*/);
  BSTR            __fastcall get_OnSetFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnSetFocus(BSTR OnSetFocus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKillFocus(BSTR* OnKillFocus/*[out,retval]*/);
  BSTR            __fastcall get_OnKillFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKillFocus(BSTR OnKillFocus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/);
  Powerpoint_2k::TagsPtr __fastcall get_Tags(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);

  __property   int             ResourceID = {read = get_ResourceID, write = set_ResourceID};
  __property   BSTR            OnPressed = {read = get_OnPressed, write = set_OnPressed};
  __property   Office_2k::MsoTriState IsDefault = {read = get_IsDefault, write = set_IsDefault};
  __property   Office_2k::MsoTriState IsEscape = {read = get_IsEscape, write = set_IsEscape};

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoTriState Enable = {read = get_Enable, write = set_Enable};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   Office_2k::MsoTriState Focus = {read = get_Focus, write = set_Focus};
  __property   BSTR            Label = {read = get_Label, write = set_Label};
  __property   int             HelpId = {read = get_HelpId, write = set_HelpId};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   long            HWND = {read = get_HWND};
  __property   BSTR            OnSetFocus = {read = get_OnSetFocus, write = set_OnSetFocus};
  __property   BSTR            OnKillFocus = {read = get_OnKillFocus, write = set_OnKillFocus};
  __property   Powerpoint_2k::TagsPtr Tags = {read = get_Tags};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
};
typedef PPBitmapButtonDispT<PPBitmapButton> PPBitmapButtonDisp;

typedef TComInterface<PPListBox>  TCOMPPListBox;

// *********************************************************************//
// DispIntf:  PPListBox
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934A8-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PPListBoxDispT : public TAutoDriver<PPListBox>
{
public:
  PPListBoxDispT(){}

  PPListBoxDispT(PPListBox *pintf)
  {
    TAutoDriver<PPListBox>::Bind(pintf, false);
  }

  PPListBoxDispT(PPListBoxPtr pintf)
  {
    TAutoDriver<PPListBox>::Bind(pintf, true);
  }

  PPListBoxDispT& operator=(PPListBox *pintf)
  {
    TAutoDriver<PPListBox>::Bind(pintf, false);
    return *this;
  }

  PPListBoxDispT& operator=(PPListBoxPtr pintf)
  {
    TAutoDriver<PPListBox>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Strings(Powerpoint_2k::PPStringsPtr* Strings/*[out,retval]*/);
  Powerpoint_2k::PPStringsPtr __fastcall get_Strings(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SelectionStyle(Powerpoint_2k::PpListBoxSelectionStyle* SelectionStyle/*[out,retval]*/);
  Powerpoint_2k::PpListBoxSelectionStyle __fastcall get_SelectionStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SelectionStyle(Powerpoint_2k::PpListBoxSelectionStyle SelectionStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetTabStops(TVariantInParam safeArrayTabStops/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FocusItem(int* FocusItem/*[out,retval]*/);
  int             __fastcall get_FocusItem(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FocusItem(int FocusItem/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TopItem(int* TopItem/*[out,retval]*/);
  int             __fastcall get_TopItem(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnSelectionChange(BSTR* OnSelectionChange/*[out,retval]*/);
  BSTR            __fastcall get_OnSelectionChange(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnSelectionChange(BSTR OnSelectionChange/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnDoubleClick(BSTR* OnDoubleClick/*[out,retval]*/);
  BSTR            __fastcall get_OnDoubleClick(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnDoubleClick(BSTR OnDoubleClick/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsSelected(int index/*[in]*/, 
                                                       Office_2k::MsoTriState* IsSelected/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_IsSelected(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IsSelected(int index/*[in]*/, 
                                                       Office_2k::MsoTriState IsSelected/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Abbreviate(Powerpoint_2k::PpListBoxAbbreviationStyle Style/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsAbbreviated(Powerpoint_2k::PpListBoxAbbreviationStyle* IsAbbreviated/*[out,retval]*/);
  Powerpoint_2k::PpListBoxAbbreviationStyle __fastcall get_IsAbbreviated(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enable(Office_2k::MsoTriState* Enable/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Enable(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enable(Office_2k::MsoTriState Enable/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_2k::MsoTriState Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Focus(Office_2k::MsoTriState* Focus/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Focus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Focus(Office_2k::MsoTriState Focus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Label(BSTR* Label/*[out,retval]*/);
  BSTR            __fastcall get_Label(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Label(BSTR Label/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpId(int* HelpId/*[out,retval]*/);
  int             __fastcall get_HelpId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpId(int HelpId/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(float* Left/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(float Left/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(float* Top/*[out,retval]*/);
  float           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(float Top/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(float* Width/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(float Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(float* Height/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HWND(long* HWND/*[out,retval]*/);
  long            __fastcall get_HWND(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnSetFocus(BSTR* OnSetFocus/*[out,retval]*/);
  BSTR            __fastcall get_OnSetFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnSetFocus(BSTR OnSetFocus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKillFocus(BSTR* OnKillFocus/*[out,retval]*/);
  BSTR            __fastcall get_OnKillFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKillFocus(BSTR OnKillFocus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/);
  Powerpoint_2k::TagsPtr __fastcall get_Tags(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);

  __property   Powerpoint_2k::PPStringsPtr Strings = {read = get_Strings};
  __property   Powerpoint_2k::PpListBoxSelectionStyle SelectionStyle = {read = get_SelectionStyle, write = set_SelectionStyle};
  __property   int             FocusItem = {read = get_FocusItem, write = set_FocusItem};
  __property   int             TopItem = {read = get_TopItem};
  __property   BSTR            OnSelectionChange = {read = get_OnSelectionChange, write = set_OnSelectionChange};
  __property   BSTR            OnDoubleClick = {read = get_OnDoubleClick, write = set_OnDoubleClick};
  __property   Powerpoint_2k::PpListBoxAbbreviationStyle IsAbbreviated = {read = get_IsAbbreviated};

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoTriState Enable = {read = get_Enable, write = set_Enable};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   Office_2k::MsoTriState Focus = {read = get_Focus, write = set_Focus};
  __property   BSTR            Label = {read = get_Label, write = set_Label};
  __property   int             HelpId = {read = get_HelpId, write = set_HelpId};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   long            HWND = {read = get_HWND};
  __property   BSTR            OnSetFocus = {read = get_OnSetFocus, write = set_OnSetFocus};
  __property   BSTR            OnKillFocus = {read = get_OnKillFocus, write = set_OnKillFocus};
  __property   Powerpoint_2k::TagsPtr Tags = {read = get_Tags};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
};
typedef PPListBoxDispT<PPListBox> PPListBoxDisp;

typedef TComInterface<PPStrings>  TCOMPPStrings;

// *********************************************************************//
// DispIntf:  PPStrings
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934A9-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PPStringsDispT : public TAutoDriver<PPStrings>
{
public:
  PPStringsDispT(){}

  PPStringsDispT(PPStrings *pintf)
  {
    TAutoDriver<PPStrings>::Bind(pintf, false);
  }

  PPStringsDispT(PPStringsPtr pintf)
  {
    TAutoDriver<PPStrings>::Bind(pintf, true);
  }

  PPStringsDispT& operator=(PPStrings *pintf)
  {
    TAutoDriver<PPStrings>::Bind(pintf, false);
    return *this;
  }

  PPStringsDispT& operator=(PPStringsPtr pintf)
  {
    TAutoDriver<PPStrings>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(int index/*[in]*/, BSTR* Item/*[out,retval]*/);
  BSTR            __fastcall Item(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(BSTR String/*[in]*/, BSTR* Add/*[out,retval]*/);
  BSTR            __fastcall Add(BSTR String/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Insert(BSTR String/*[in]*/, int Position/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/);
  TVariant        __fastcall _Index(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef PPStringsDispT<PPStrings> PPStringsDisp;

typedef TComInterface<PPCheckBox>  TCOMPPCheckBox;

// *********************************************************************//
// DispIntf:  PPCheckBox
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934AA-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PPCheckBoxDispT : public TAutoDriver<PPCheckBox>
{
public:
  PPCheckBoxDispT(){}

  PPCheckBoxDispT(PPCheckBox *pintf)
  {
    TAutoDriver<PPCheckBox>::Bind(pintf, false);
  }

  PPCheckBoxDispT(PPCheckBoxPtr pintf)
  {
    TAutoDriver<PPCheckBox>::Bind(pintf, true);
  }

  PPCheckBoxDispT& operator=(PPCheckBox *pintf)
  {
    TAutoDriver<PPCheckBox>::Bind(pintf, false);
    return *this;
  }

  PPCheckBoxDispT& operator=(PPCheckBoxPtr pintf)
  {
    TAutoDriver<PPCheckBox>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_State(Office_2k::MsoTriState* State/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_State(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_State(Office_2k::MsoTriState State/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Click();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnClick(BSTR* OnClick/*[out,retval]*/);
  BSTR            __fastcall get_OnClick(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnClick(BSTR OnClick/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enable(Office_2k::MsoTriState* Enable/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Enable(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enable(Office_2k::MsoTriState Enable/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_2k::MsoTriState Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Focus(Office_2k::MsoTriState* Focus/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Focus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Focus(Office_2k::MsoTriState Focus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Label(BSTR* Label/*[out,retval]*/);
  BSTR            __fastcall get_Label(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Label(BSTR Label/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpId(int* HelpId/*[out,retval]*/);
  int             __fastcall get_HelpId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpId(int HelpId/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(float* Left/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(float Left/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(float* Top/*[out,retval]*/);
  float           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(float Top/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(float* Width/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(float Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(float* Height/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HWND(long* HWND/*[out,retval]*/);
  long            __fastcall get_HWND(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnSetFocus(BSTR* OnSetFocus/*[out,retval]*/);
  BSTR            __fastcall get_OnSetFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnSetFocus(BSTR OnSetFocus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKillFocus(BSTR* OnKillFocus/*[out,retval]*/);
  BSTR            __fastcall get_OnKillFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKillFocus(BSTR OnKillFocus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/);
  Powerpoint_2k::TagsPtr __fastcall get_Tags(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);

  __property   Office_2k::MsoTriState State = {read = get_State, write = set_State};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoTriState Enable = {read = get_Enable, write = set_Enable};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   Office_2k::MsoTriState Focus = {read = get_Focus, write = set_Focus};
  __property   BSTR            Label = {read = get_Label, write = set_Label};
  __property   int             HelpId = {read = get_HelpId, write = set_HelpId};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   long            HWND = {read = get_HWND};
  __property   BSTR            OnSetFocus = {read = get_OnSetFocus, write = set_OnSetFocus};
  __property   BSTR            OnKillFocus = {read = get_OnKillFocus, write = set_OnKillFocus};
  __property   Powerpoint_2k::TagsPtr Tags = {read = get_Tags};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
};
typedef PPCheckBoxDispT<PPCheckBox> PPCheckBoxDisp;

typedef TComInterface<PPRadioCluster>  TCOMPPRadioCluster;

// *********************************************************************//
// DispIntf:  PPRadioCluster
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934AB-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PPRadioClusterDispT : public TAutoDriver<PPRadioCluster>
{
public:
  PPRadioClusterDispT(){}

  PPRadioClusterDispT(PPRadioCluster *pintf)
  {
    TAutoDriver<PPRadioCluster>::Bind(pintf, false);
  }

  PPRadioClusterDispT(PPRadioClusterPtr pintf)
  {
    TAutoDriver<PPRadioCluster>::Bind(pintf, true);
  }

  PPRadioClusterDispT& operator=(PPRadioCluster *pintf)
  {
    TAutoDriver<PPRadioCluster>::Bind(pintf, false);
    return *this;
  }

  PPRadioClusterDispT& operator=(PPRadioClusterPtr pintf)
  {
    TAutoDriver<PPRadioCluster>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(TVariantInParam index/*[in]*/, 
                                             Powerpoint_2k::PPRadioButtonPtr* Item/*[out,retval]*/);
  Powerpoint_2k::PPRadioButtonPtr __fastcall Item(TVariantInParam index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(float Left/*[in]*/, float Top/*[in]*/, 
                                            float Width/*[in]*/, float Height/*[in]*/, 
                                            Powerpoint_2k::PPRadioButtonPtr* Add/*[out,retval]*/);
  Powerpoint_2k::PPRadioButtonPtr __fastcall Add(float Left/*[in]*/, float Top/*[in]*/, 
                                                 float Width/*[in]*/, float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(int* Count/*[out,retval]*/);
  int             __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Selected(Powerpoint_2k::PPRadioButtonPtr* Selected/*[out,retval]*/);
  Powerpoint_2k::PPRadioButtonPtr __fastcall get_Selected(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnClick(BSTR* OnClick/*[out,retval]*/);
  BSTR            __fastcall get_OnClick(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnClick(BSTR OnClick/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enable(Office_2k::MsoTriState* Enable/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Enable(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enable(Office_2k::MsoTriState Enable/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_2k::MsoTriState Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Focus(Office_2k::MsoTriState* Focus/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Focus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Focus(Office_2k::MsoTriState Focus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Label(BSTR* Label/*[out,retval]*/);
  BSTR            __fastcall get_Label(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Label(BSTR Label/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpId(int* HelpId/*[out,retval]*/);
  int             __fastcall get_HelpId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpId(int HelpId/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(float* Left/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(float Left/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(float* Top/*[out,retval]*/);
  float           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(float Top/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(float* Width/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(float Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(float* Height/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HWND(long* HWND/*[out,retval]*/);
  long            __fastcall get_HWND(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnSetFocus(BSTR* OnSetFocus/*[out,retval]*/);
  BSTR            __fastcall get_OnSetFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnSetFocus(BSTR OnSetFocus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKillFocus(BSTR* OnKillFocus/*[out,retval]*/);
  BSTR            __fastcall get_OnKillFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKillFocus(BSTR OnKillFocus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/);
  Powerpoint_2k::TagsPtr __fastcall get_Tags(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);

  __property   int             Count = {read = get_Count};
  __property   Powerpoint_2k::PPRadioButtonPtr Selected = {read = get_Selected};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoTriState Enable = {read = get_Enable, write = set_Enable};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   Office_2k::MsoTriState Focus = {read = get_Focus, write = set_Focus};
  __property   BSTR            Label = {read = get_Label, write = set_Label};
  __property   int             HelpId = {read = get_HelpId, write = set_HelpId};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   long            HWND = {read = get_HWND};
  __property   BSTR            OnSetFocus = {read = get_OnSetFocus, write = set_OnSetFocus};
  __property   BSTR            OnKillFocus = {read = get_OnKillFocus, write = set_OnKillFocus};
  __property   Powerpoint_2k::TagsPtr Tags = {read = get_Tags};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
};
typedef PPRadioClusterDispT<PPRadioCluster> PPRadioClusterDisp;

typedef TComInterface<PPStaticText>  TCOMPPStaticText;

// *********************************************************************//
// DispIntf:  PPStaticText
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934AC-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PPStaticTextDispT : public TAutoDriver<PPStaticText>
{
public:
  PPStaticTextDispT(){}

  PPStaticTextDispT(PPStaticText *pintf)
  {
    TAutoDriver<PPStaticText>::Bind(pintf, false);
  }

  PPStaticTextDispT(PPStaticTextPtr pintf)
  {
    TAutoDriver<PPStaticText>::Bind(pintf, true);
  }

  PPStaticTextDispT& operator=(PPStaticText *pintf)
  {
    TAutoDriver<PPStaticText>::Bind(pintf, false);
    return *this;
  }

  PPStaticTextDispT& operator=(PPStaticTextPtr pintf)
  {
    TAutoDriver<PPStaticText>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_UseForegroundColor(Office_2k::MsoTriState* UseForegroundColor/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_UseForegroundColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_UseForegroundColor(Office_2k::MsoTriState UseForegroundColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_UseBackgroundColor(Office_2k::MsoTriState* UseBackgroundColor/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_UseBackgroundColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_UseBackgroundColor(Office_2k::MsoTriState UseBackgroundColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ForegroundColor(Office_2k::MsoRGBType* ForegroundColor/*[out,retval]*/);
  Office_2k::MsoRGBType __fastcall get_ForegroundColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ForegroundColor(Office_2k::MsoRGBType ForegroundColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackgroundColor(Office_2k::MsoRGBType* BackgroundColor/*[out,retval]*/);
  Office_2k::MsoRGBType __fastcall get_BackgroundColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackgroundColor(Office_2k::MsoRGBType BackgroundColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enable(Office_2k::MsoTriState* Enable/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Enable(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enable(Office_2k::MsoTriState Enable/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_2k::MsoTriState Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Focus(Office_2k::MsoTriState* Focus/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Focus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Focus(Office_2k::MsoTriState Focus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Label(BSTR* Label/*[out,retval]*/);
  BSTR            __fastcall get_Label(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Label(BSTR Label/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpId(int* HelpId/*[out,retval]*/);
  int             __fastcall get_HelpId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpId(int HelpId/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(float* Left/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(float Left/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(float* Top/*[out,retval]*/);
  float           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(float Top/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(float* Width/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(float Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(float* Height/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HWND(long* HWND/*[out,retval]*/);
  long            __fastcall get_HWND(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnSetFocus(BSTR* OnSetFocus/*[out,retval]*/);
  BSTR            __fastcall get_OnSetFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnSetFocus(BSTR OnSetFocus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKillFocus(BSTR* OnKillFocus/*[out,retval]*/);
  BSTR            __fastcall get_OnKillFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKillFocus(BSTR OnKillFocus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/);
  Powerpoint_2k::TagsPtr __fastcall get_Tags(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);

  __property   Office_2k::MsoTriState UseForegroundColor = {read = get_UseForegroundColor, write = set_UseForegroundColor};
  __property   Office_2k::MsoTriState UseBackgroundColor = {read = get_UseBackgroundColor, write = set_UseBackgroundColor};
  __property   Office_2k::MsoRGBType ForegroundColor = {read = get_ForegroundColor, write = set_ForegroundColor};
  __property   Office_2k::MsoRGBType BackgroundColor = {read = get_BackgroundColor, write = set_BackgroundColor};

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoTriState Enable = {read = get_Enable, write = set_Enable};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   Office_2k::MsoTriState Focus = {read = get_Focus, write = set_Focus};
  __property   BSTR            Label = {read = get_Label, write = set_Label};
  __property   int             HelpId = {read = get_HelpId, write = set_HelpId};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   long            HWND = {read = get_HWND};
  __property   BSTR            OnSetFocus = {read = get_OnSetFocus, write = set_OnSetFocus};
  __property   BSTR            OnKillFocus = {read = get_OnKillFocus, write = set_OnKillFocus};
  __property   Powerpoint_2k::TagsPtr Tags = {read = get_Tags};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
};
typedef PPStaticTextDispT<PPStaticText> PPStaticTextDisp;

typedef TComInterface<PPEditText>  TCOMPPEditText;

// *********************************************************************//
// DispIntf:  PPEditText
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934AD-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PPEditTextDispT : public TAutoDriver<PPEditText>
{
public:
  PPEditTextDispT(){}

  PPEditTextDispT(PPEditText *pintf)
  {
    TAutoDriver<PPEditText>::Bind(pintf, false);
  }

  PPEditTextDispT(PPEditTextPtr pintf)
  {
    TAutoDriver<PPEditText>::Bind(pintf, true);
  }

  PPEditTextDispT& operator=(PPEditText *pintf)
  {
    TAutoDriver<PPEditText>::Bind(pintf, false);
    return *this;
  }

  PPEditTextDispT& operator=(PPEditTextPtr pintf)
  {
    TAutoDriver<PPEditText>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MultiLine(Office_2k::MsoTriState* MultiLine/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_MultiLine(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MultiLine(Office_2k::MsoTriState MultiLine/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VerticalScrollBar(Office_2k::MsoTriState* VerticalScrollBar/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_VerticalScrollBar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_VerticalScrollBar(Office_2k::MsoTriState VerticalScrollBar/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_WordWrap(Office_2k::MsoTriState* WordWrap/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_WordWrap(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_WordWrap(Office_2k::MsoTriState WordWrap/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ReadOnly(Office_2k::MsoTriState* ReadOnly/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_ReadOnly(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ReadOnly(Office_2k::MsoTriState ReadOnly/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Text(BSTR* Text/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Text(BSTR Text/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MaxLength(int* MaxLength/*[out,retval]*/);
  int             __fastcall get_MaxLength(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MaxLength(int MaxLength/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnAChange(BSTR* OnAChange/*[out,retval]*/);
  BSTR            __fastcall get_OnAChange(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnAChange(BSTR OnAChange/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enable(Office_2k::MsoTriState* Enable/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Enable(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enable(Office_2k::MsoTriState Enable/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_2k::MsoTriState Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Focus(Office_2k::MsoTriState* Focus/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Focus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Focus(Office_2k::MsoTriState Focus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Label(BSTR* Label/*[out,retval]*/);
  BSTR            __fastcall get_Label(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Label(BSTR Label/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpId(int* HelpId/*[out,retval]*/);
  int             __fastcall get_HelpId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpId(int HelpId/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(float* Left/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(float Left/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(float* Top/*[out,retval]*/);
  float           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(float Top/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(float* Width/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(float Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(float* Height/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HWND(long* HWND/*[out,retval]*/);
  long            __fastcall get_HWND(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnSetFocus(BSTR* OnSetFocus/*[out,retval]*/);
  BSTR            __fastcall get_OnSetFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnSetFocus(BSTR OnSetFocus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKillFocus(BSTR* OnKillFocus/*[out,retval]*/);
  BSTR            __fastcall get_OnKillFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKillFocus(BSTR OnKillFocus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/);
  Powerpoint_2k::TagsPtr __fastcall get_Tags(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);

  __property   Office_2k::MsoTriState MultiLine = {read = get_MultiLine, write = set_MultiLine};
  __property   Office_2k::MsoTriState VerticalScrollBar = {read = get_VerticalScrollBar, write = set_VerticalScrollBar};
  __property   Office_2k::MsoTriState WordWrap = {read = get_WordWrap, write = set_WordWrap};
  __property   Office_2k::MsoTriState ReadOnly = {read = get_ReadOnly, write = set_ReadOnly};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   int             MaxLength = {read = get_MaxLength, write = set_MaxLength};
  __property   BSTR            OnAChange = {read = get_OnAChange, write = set_OnAChange};

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoTriState Enable = {read = get_Enable, write = set_Enable};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   Office_2k::MsoTriState Focus = {read = get_Focus, write = set_Focus};
  __property   BSTR            Label = {read = get_Label, write = set_Label};
  __property   int             HelpId = {read = get_HelpId, write = set_HelpId};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   long            HWND = {read = get_HWND};
  __property   BSTR            OnSetFocus = {read = get_OnSetFocus, write = set_OnSetFocus};
  __property   BSTR            OnKillFocus = {read = get_OnKillFocus, write = set_OnKillFocus};
  __property   Powerpoint_2k::TagsPtr Tags = {read = get_Tags};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
};
typedef PPEditTextDispT<PPEditText> PPEditTextDisp;

typedef TComInterface<PPIcon>  TCOMPPIcon;

// *********************************************************************//
// DispIntf:  PPIcon
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934AE-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PPIconDispT : public TAutoDriver<PPIcon>
{
public:
  PPIconDispT(){}

  PPIconDispT(PPIcon *pintf)
  {
    TAutoDriver<PPIcon>::Bind(pintf, false);
  }

  PPIconDispT(PPIconPtr pintf)
  {
    TAutoDriver<PPIcon>::Bind(pintf, true);
  }

  PPIconDispT& operator=(PPIcon *pintf)
  {
    TAutoDriver<PPIcon>::Bind(pintf, false);
    return *this;
  }

  PPIconDispT& operator=(PPIconPtr pintf)
  {
    TAutoDriver<PPIcon>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ResourceID(int* ResourceID/*[out,retval]*/);
  int             __fastcall get_ResourceID(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ResourceID(int ResourceID/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enable(Office_2k::MsoTriState* Enable/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Enable(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enable(Office_2k::MsoTriState Enable/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_2k::MsoTriState Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Focus(Office_2k::MsoTriState* Focus/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Focus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Focus(Office_2k::MsoTriState Focus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Label(BSTR* Label/*[out,retval]*/);
  BSTR            __fastcall get_Label(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Label(BSTR Label/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpId(int* HelpId/*[out,retval]*/);
  int             __fastcall get_HelpId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpId(int HelpId/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(float* Left/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(float Left/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(float* Top/*[out,retval]*/);
  float           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(float Top/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(float* Width/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(float Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(float* Height/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HWND(long* HWND/*[out,retval]*/);
  long            __fastcall get_HWND(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnSetFocus(BSTR* OnSetFocus/*[out,retval]*/);
  BSTR            __fastcall get_OnSetFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnSetFocus(BSTR OnSetFocus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKillFocus(BSTR* OnKillFocus/*[out,retval]*/);
  BSTR            __fastcall get_OnKillFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKillFocus(BSTR OnKillFocus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/);
  Powerpoint_2k::TagsPtr __fastcall get_Tags(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);

  __property   int             ResourceID = {read = get_ResourceID, write = set_ResourceID};

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoTriState Enable = {read = get_Enable, write = set_Enable};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   Office_2k::MsoTriState Focus = {read = get_Focus, write = set_Focus};
  __property   BSTR            Label = {read = get_Label, write = set_Label};
  __property   int             HelpId = {read = get_HelpId, write = set_HelpId};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   long            HWND = {read = get_HWND};
  __property   BSTR            OnSetFocus = {read = get_OnSetFocus, write = set_OnSetFocus};
  __property   BSTR            OnKillFocus = {read = get_OnKillFocus, write = set_OnKillFocus};
  __property   Powerpoint_2k::TagsPtr Tags = {read = get_Tags};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
};
typedef PPIconDispT<PPIcon> PPIconDisp;

typedef TComInterface<PPBitmap>  TCOMPPBitmap;

// *********************************************************************//
// DispIntf:  PPBitmap
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934AF-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PPBitmapDispT : public TAutoDriver<PPBitmap>
{
public:
  PPBitmapDispT(){}

  PPBitmapDispT(PPBitmap *pintf)
  {
    TAutoDriver<PPBitmap>::Bind(pintf, false);
  }

  PPBitmapDispT(PPBitmapPtr pintf)
  {
    TAutoDriver<PPBitmap>::Bind(pintf, true);
  }

  PPBitmapDispT& operator=(PPBitmap *pintf)
  {
    TAutoDriver<PPBitmap>::Bind(pintf, false);
    return *this;
  }

  PPBitmapDispT& operator=(PPBitmapPtr pintf)
  {
    TAutoDriver<PPBitmap>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ResourceID(int* ResourceID/*[out,retval]*/);
  int             __fastcall get_ResourceID(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ResourceID(int ResourceID/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnClick(BSTR* OnClick/*[out,retval]*/);
  BSTR            __fastcall get_OnClick(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnClick(BSTR OnClick/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enable(Office_2k::MsoTriState* Enable/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Enable(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enable(Office_2k::MsoTriState Enable/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_2k::MsoTriState Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Focus(Office_2k::MsoTriState* Focus/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Focus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Focus(Office_2k::MsoTriState Focus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Label(BSTR* Label/*[out,retval]*/);
  BSTR            __fastcall get_Label(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Label(BSTR Label/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpId(int* HelpId/*[out,retval]*/);
  int             __fastcall get_HelpId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpId(int HelpId/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(float* Left/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(float Left/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(float* Top/*[out,retval]*/);
  float           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(float Top/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(float* Width/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(float Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(float* Height/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HWND(long* HWND/*[out,retval]*/);
  long            __fastcall get_HWND(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnSetFocus(BSTR* OnSetFocus/*[out,retval]*/);
  BSTR            __fastcall get_OnSetFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnSetFocus(BSTR OnSetFocus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKillFocus(BSTR* OnKillFocus/*[out,retval]*/);
  BSTR            __fastcall get_OnKillFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKillFocus(BSTR OnKillFocus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/);
  Powerpoint_2k::TagsPtr __fastcall get_Tags(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);

  __property   int             ResourceID = {read = get_ResourceID, write = set_ResourceID};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoTriState Enable = {read = get_Enable, write = set_Enable};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   Office_2k::MsoTriState Focus = {read = get_Focus, write = set_Focus};
  __property   BSTR            Label = {read = get_Label, write = set_Label};
  __property   int             HelpId = {read = get_HelpId, write = set_HelpId};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   long            HWND = {read = get_HWND};
  __property   BSTR            OnSetFocus = {read = get_OnSetFocus, write = set_OnSetFocus};
  __property   BSTR            OnKillFocus = {read = get_OnKillFocus, write = set_OnKillFocus};
  __property   Powerpoint_2k::TagsPtr Tags = {read = get_Tags};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
};
typedef PPBitmapDispT<PPBitmap> PPBitmapDisp;

typedef TComInterface<PPSpinner>  TCOMPPSpinner;

// *********************************************************************//
// DispIntf:  PPSpinner
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934B0-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PPSpinnerDispT : public TAutoDriver<PPSpinner>
{
public:
  PPSpinnerDispT(){}

  PPSpinnerDispT(PPSpinner *pintf)
  {
    TAutoDriver<PPSpinner>::Bind(pintf, false);
  }

  PPSpinnerDispT(PPSpinnerPtr pintf)
  {
    TAutoDriver<PPSpinner>::Bind(pintf, true);
  }

  PPSpinnerDispT& operator=(PPSpinner *pintf)
  {
    TAutoDriver<PPSpinner>::Bind(pintf, false);
    return *this;
  }

  PPSpinnerDispT& operator=(PPSpinnerPtr pintf)
  {
    TAutoDriver<PPSpinner>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Minimum(int* Minimum/*[out,retval]*/);
  int             __fastcall get_Minimum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Minimum(int Minimum/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Maximum(int* Maximum/*[out,retval]*/);
  int             __fastcall get_Maximum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Maximum(int Maximum/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Increment(int* Increment/*[out,retval]*/);
  int             __fastcall get_Increment(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Increment(int Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PageChange(int* PageChange/*[out,retval]*/);
  int             __fastcall get_PageChange(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PageChange(int PageChange/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CurrentValue(int* CurrentValue/*[out,retval]*/);
  int             __fastcall get_CurrentValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CurrentValue(int CurrentValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnAChange(BSTR* OnAChange/*[out,retval]*/);
  BSTR            __fastcall get_OnAChange(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnAChange(BSTR OnAChange/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enable(Office_2k::MsoTriState* Enable/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Enable(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enable(Office_2k::MsoTriState Enable/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_2k::MsoTriState Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Focus(Office_2k::MsoTriState* Focus/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Focus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Focus(Office_2k::MsoTriState Focus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Label(BSTR* Label/*[out,retval]*/);
  BSTR            __fastcall get_Label(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Label(BSTR Label/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpId(int* HelpId/*[out,retval]*/);
  int             __fastcall get_HelpId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpId(int HelpId/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(float* Left/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(float Left/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(float* Top/*[out,retval]*/);
  float           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(float Top/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(float* Width/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(float Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(float* Height/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HWND(long* HWND/*[out,retval]*/);
  long            __fastcall get_HWND(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnSetFocus(BSTR* OnSetFocus/*[out,retval]*/);
  BSTR            __fastcall get_OnSetFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnSetFocus(BSTR OnSetFocus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKillFocus(BSTR* OnKillFocus/*[out,retval]*/);
  BSTR            __fastcall get_OnKillFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKillFocus(BSTR OnKillFocus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/);
  Powerpoint_2k::TagsPtr __fastcall get_Tags(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);

  __property   int             Minimum = {read = get_Minimum, write = set_Minimum};
  __property   int             Maximum = {read = get_Maximum, write = set_Maximum};
  __property   int             Increment = {read = get_Increment, write = set_Increment};
  __property   int             PageChange = {read = get_PageChange, write = set_PageChange};
  __property   int             CurrentValue = {read = get_CurrentValue, write = set_CurrentValue};
  __property   BSTR            OnAChange = {read = get_OnAChange, write = set_OnAChange};

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoTriState Enable = {read = get_Enable, write = set_Enable};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   Office_2k::MsoTriState Focus = {read = get_Focus, write = set_Focus};
  __property   BSTR            Label = {read = get_Label, write = set_Label};
  __property   int             HelpId = {read = get_HelpId, write = set_HelpId};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   long            HWND = {read = get_HWND};
  __property   BSTR            OnSetFocus = {read = get_OnSetFocus, write = set_OnSetFocus};
  __property   BSTR            OnKillFocus = {read = get_OnKillFocus, write = set_OnKillFocus};
  __property   Powerpoint_2k::TagsPtr Tags = {read = get_Tags};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
};
typedef PPSpinnerDispT<PPSpinner> PPSpinnerDisp;

typedef TComInterface<PPScrollBar>  TCOMPPScrollBar;

// *********************************************************************//
// DispIntf:  PPScrollBar
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934B1-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PPScrollBarDispT : public TAutoDriver<PPScrollBar>
{
public:
  PPScrollBarDispT(){}

  PPScrollBarDispT(PPScrollBar *pintf)
  {
    TAutoDriver<PPScrollBar>::Bind(pintf, false);
  }

  PPScrollBarDispT(PPScrollBarPtr pintf)
  {
    TAutoDriver<PPScrollBar>::Bind(pintf, true);
  }

  PPScrollBarDispT& operator=(PPScrollBar *pintf)
  {
    TAutoDriver<PPScrollBar>::Bind(pintf, false);
    return *this;
  }

  PPScrollBarDispT& operator=(PPScrollBarPtr pintf)
  {
    TAutoDriver<PPScrollBar>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Minimum(int* Minimum/*[out,retval]*/);
  int             __fastcall get_Minimum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Minimum(int Minimum/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Maximum(int* Maximum/*[out,retval]*/);
  int             __fastcall get_Maximum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Maximum(int Maximum/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Increment(int* Increment/*[out,retval]*/);
  int             __fastcall get_Increment(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Increment(int Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PageChange(int* PageChange/*[out,retval]*/);
  int             __fastcall get_PageChange(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PageChange(int PageChange/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CurrentValue(int* CurrentValue/*[out,retval]*/);
  int             __fastcall get_CurrentValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CurrentValue(int CurrentValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnScroll(BSTR* OnScroll/*[out,retval]*/);
  BSTR            __fastcall get_OnScroll(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnScroll(BSTR OnScroll/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enable(Office_2k::MsoTriState* Enable/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Enable(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enable(Office_2k::MsoTriState Enable/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_2k::MsoTriState Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Focus(Office_2k::MsoTriState* Focus/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Focus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Focus(Office_2k::MsoTriState Focus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Label(BSTR* Label/*[out,retval]*/);
  BSTR            __fastcall get_Label(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Label(BSTR Label/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpId(int* HelpId/*[out,retval]*/);
  int             __fastcall get_HelpId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpId(int HelpId/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(float* Left/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(float Left/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(float* Top/*[out,retval]*/);
  float           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(float Top/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(float* Width/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(float Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(float* Height/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HWND(long* HWND/*[out,retval]*/);
  long            __fastcall get_HWND(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnSetFocus(BSTR* OnSetFocus/*[out,retval]*/);
  BSTR            __fastcall get_OnSetFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnSetFocus(BSTR OnSetFocus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKillFocus(BSTR* OnKillFocus/*[out,retval]*/);
  BSTR            __fastcall get_OnKillFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKillFocus(BSTR OnKillFocus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/);
  Powerpoint_2k::TagsPtr __fastcall get_Tags(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);

  __property   int             Minimum = {read = get_Minimum, write = set_Minimum};
  __property   int             Maximum = {read = get_Maximum, write = set_Maximum};
  __property   int             Increment = {read = get_Increment, write = set_Increment};
  __property   int             PageChange = {read = get_PageChange, write = set_PageChange};
  __property   int             CurrentValue = {read = get_CurrentValue, write = set_CurrentValue};
  __property   BSTR            OnScroll = {read = get_OnScroll, write = set_OnScroll};

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoTriState Enable = {read = get_Enable, write = set_Enable};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   Office_2k::MsoTriState Focus = {read = get_Focus, write = set_Focus};
  __property   BSTR            Label = {read = get_Label, write = set_Label};
  __property   int             HelpId = {read = get_HelpId, write = set_HelpId};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   long            HWND = {read = get_HWND};
  __property   BSTR            OnSetFocus = {read = get_OnSetFocus, write = set_OnSetFocus};
  __property   BSTR            OnKillFocus = {read = get_OnKillFocus, write = set_OnKillFocus};
  __property   Powerpoint_2k::TagsPtr Tags = {read = get_Tags};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
};
typedef PPScrollBarDispT<PPScrollBar> PPScrollBarDisp;

typedef TComInterface<PPGroupBox>  TCOMPPGroupBox;

// *********************************************************************//
// DispIntf:  PPGroupBox
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934B2-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PPGroupBoxDispT : public TAutoDriver<PPGroupBox>
{
public:
  PPGroupBoxDispT(){}

  PPGroupBoxDispT(PPGroupBox *pintf)
  {
    TAutoDriver<PPGroupBox>::Bind(pintf, false);
  }

  PPGroupBoxDispT(PPGroupBoxPtr pintf)
  {
    TAutoDriver<PPGroupBox>::Bind(pintf, true);
  }

  PPGroupBoxDispT& operator=(PPGroupBox *pintf)
  {
    TAutoDriver<PPGroupBox>::Bind(pintf, false);
    return *this;
  }

  PPGroupBoxDispT& operator=(PPGroupBoxPtr pintf)
  {
    TAutoDriver<PPGroupBox>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enable(Office_2k::MsoTriState* Enable/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Enable(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enable(Office_2k::MsoTriState Enable/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_2k::MsoTriState Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Focus(Office_2k::MsoTriState* Focus/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Focus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Focus(Office_2k::MsoTriState Focus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Label(BSTR* Label/*[out,retval]*/);
  BSTR            __fastcall get_Label(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Label(BSTR Label/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpId(int* HelpId/*[out,retval]*/);
  int             __fastcall get_HelpId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpId(int HelpId/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(float* Left/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(float Left/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(float* Top/*[out,retval]*/);
  float           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(float Top/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(float* Width/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(float Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(float* Height/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HWND(long* HWND/*[out,retval]*/);
  long            __fastcall get_HWND(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnSetFocus(BSTR* OnSetFocus/*[out,retval]*/);
  BSTR            __fastcall get_OnSetFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnSetFocus(BSTR OnSetFocus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKillFocus(BSTR* OnKillFocus/*[out,retval]*/);
  BSTR            __fastcall get_OnKillFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKillFocus(BSTR OnKillFocus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/);
  Powerpoint_2k::TagsPtr __fastcall get_Tags(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoTriState Enable = {read = get_Enable, write = set_Enable};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   Office_2k::MsoTriState Focus = {read = get_Focus, write = set_Focus};
  __property   BSTR            Label = {read = get_Label, write = set_Label};
  __property   int             HelpId = {read = get_HelpId, write = set_HelpId};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   long            HWND = {read = get_HWND};
  __property   BSTR            OnSetFocus = {read = get_OnSetFocus, write = set_OnSetFocus};
  __property   BSTR            OnKillFocus = {read = get_OnKillFocus, write = set_OnKillFocus};
  __property   Powerpoint_2k::TagsPtr Tags = {read = get_Tags};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
};
typedef PPGroupBoxDispT<PPGroupBox> PPGroupBoxDisp;

typedef TComInterface<PPFrame>  TCOMPPFrame;

// *********************************************************************//
// DispIntf:  PPFrame
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934B3-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PPFrameDispT : public TAutoDriver<PPFrame>
{
public:
  PPFrameDispT(){}

  PPFrameDispT(PPFrame *pintf)
  {
    TAutoDriver<PPFrame>::Bind(pintf, false);
  }

  PPFrameDispT(PPFramePtr pintf)
  {
    TAutoDriver<PPFrame>::Bind(pintf, true);
  }

  PPFrameDispT& operator=(PPFrame *pintf)
  {
    TAutoDriver<PPFrame>::Bind(pintf, false);
    return *this;
  }

  PPFrameDispT& operator=(PPFramePtr pintf)
  {
    TAutoDriver<PPFrame>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enable(Office_2k::MsoTriState* Enable/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Enable(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enable(Office_2k::MsoTriState Enable/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_2k::MsoTriState Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Focus(Office_2k::MsoTriState* Focus/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Focus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Focus(Office_2k::MsoTriState Focus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Label(BSTR* Label/*[out,retval]*/);
  BSTR            __fastcall get_Label(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Label(BSTR Label/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpId(int* HelpId/*[out,retval]*/);
  int             __fastcall get_HelpId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpId(int HelpId/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(float* Left/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(float Left/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(float* Top/*[out,retval]*/);
  float           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(float Top/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(float* Width/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(float Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(float* Height/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HWND(long* HWND/*[out,retval]*/);
  long            __fastcall get_HWND(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnSetFocus(BSTR* OnSetFocus/*[out,retval]*/);
  BSTR            __fastcall get_OnSetFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnSetFocus(BSTR OnSetFocus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKillFocus(BSTR* OnKillFocus/*[out,retval]*/);
  BSTR            __fastcall get_OnKillFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKillFocus(BSTR OnKillFocus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/);
  Powerpoint_2k::TagsPtr __fastcall get_Tags(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoTriState Enable = {read = get_Enable, write = set_Enable};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   Office_2k::MsoTriState Focus = {read = get_Focus, write = set_Focus};
  __property   BSTR            Label = {read = get_Label, write = set_Label};
  __property   int             HelpId = {read = get_HelpId, write = set_HelpId};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   long            HWND = {read = get_HWND};
  __property   BSTR            OnSetFocus = {read = get_OnSetFocus, write = set_OnSetFocus};
  __property   BSTR            OnKillFocus = {read = get_OnKillFocus, write = set_OnKillFocus};
  __property   Powerpoint_2k::TagsPtr Tags = {read = get_Tags};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
};
typedef PPFrameDispT<PPFrame> PPFrameDisp;

typedef TComInterface<PPTabControl>  TCOMPPTabControl;

// *********************************************************************//
// DispIntf:  PPTabControl
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934B4-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PPTabControlDispT : public TAutoDriver<PPTabControl>
{
public:
  PPTabControlDispT(){}

  PPTabControlDispT(PPTabControl *pintf)
  {
    TAutoDriver<PPTabControl>::Bind(pintf, false);
  }

  PPTabControlDispT(PPTabControlPtr pintf)
  {
    TAutoDriver<PPTabControl>::Bind(pintf, true);
  }

  PPTabControlDispT& operator=(PPTabControl *pintf)
  {
    TAutoDriver<PPTabControl>::Bind(pintf, false);
    return *this;
  }

  PPTabControlDispT& operator=(PPTabControlPtr pintf)
  {
    TAutoDriver<PPTabControl>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enable(Office_2k::MsoTriState* Enable/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Enable(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enable(Office_2k::MsoTriState Enable/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_2k::MsoTriState Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Focus(Office_2k::MsoTriState* Focus/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Focus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Focus(Office_2k::MsoTriState Focus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Label(BSTR* Label/*[out,retval]*/);
  BSTR            __fastcall get_Label(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Label(BSTR Label/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpId(int* HelpId/*[out,retval]*/);
  int             __fastcall get_HelpId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpId(int HelpId/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(float* Left/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(float Left/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(float* Top/*[out,retval]*/);
  float           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(float Top/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(float* Width/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(float Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(float* Height/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HWND(long* HWND/*[out,retval]*/);
  long            __fastcall get_HWND(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnSetFocus(BSTR* OnSetFocus/*[out,retval]*/);
  BSTR            __fastcall get_OnSetFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnSetFocus(BSTR OnSetFocus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKillFocus(BSTR* OnKillFocus/*[out,retval]*/);
  BSTR            __fastcall get_OnKillFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKillFocus(BSTR OnKillFocus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/);
  Powerpoint_2k::TagsPtr __fastcall get_Tags(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);


  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoTriState Enable = {read = get_Enable, write = set_Enable};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   Office_2k::MsoTriState Focus = {read = get_Focus, write = set_Focus};
  __property   BSTR            Label = {read = get_Label, write = set_Label};
  __property   int             HelpId = {read = get_HelpId, write = set_HelpId};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   long            HWND = {read = get_HWND};
  __property   BSTR            OnSetFocus = {read = get_OnSetFocus, write = set_OnSetFocus};
  __property   BSTR            OnKillFocus = {read = get_OnKillFocus, write = set_OnKillFocus};
  __property   Powerpoint_2k::TagsPtr Tags = {read = get_Tags};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
};
typedef PPTabControlDispT<PPTabControl> PPTabControlDisp;

typedef TComInterface<PPDropDown>  TCOMPPDropDown;

// *********************************************************************//
// DispIntf:  PPDropDown
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934B5-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PPDropDownDispT : public TAutoDriver<PPDropDown>
{
public:
  PPDropDownDispT(){}

  PPDropDownDispT(PPDropDown *pintf)
  {
    TAutoDriver<PPDropDown>::Bind(pintf, false);
  }

  PPDropDownDispT(PPDropDownPtr pintf)
  {
    TAutoDriver<PPDropDown>::Bind(pintf, true);
  }

  PPDropDownDispT& operator=(PPDropDown *pintf)
  {
    TAutoDriver<PPDropDown>::Bind(pintf, false);
    return *this;
  }

  PPDropDownDispT& operator=(PPDropDownPtr pintf)
  {
    TAutoDriver<PPDropDown>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Strings(Powerpoint_2k::PPStringsPtr* Strings/*[out,retval]*/);
  Powerpoint_2k::PPStringsPtr __fastcall get_Strings(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FocusItem(int* FocusItem/*[out,retval]*/);
  int             __fastcall get_FocusItem(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FocusItem(int FocusItem/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnSelectionChange(BSTR* OnSelectionChange/*[out,retval]*/);
  BSTR            __fastcall get_OnSelectionChange(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnSelectionChange(BSTR OnSelectionChange/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enable(Office_2k::MsoTriState* Enable/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Enable(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enable(Office_2k::MsoTriState Enable/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_2k::MsoTriState Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Focus(Office_2k::MsoTriState* Focus/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Focus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Focus(Office_2k::MsoTriState Focus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Label(BSTR* Label/*[out,retval]*/);
  BSTR            __fastcall get_Label(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Label(BSTR Label/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpId(int* HelpId/*[out,retval]*/);
  int             __fastcall get_HelpId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpId(int HelpId/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(float* Left/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(float Left/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(float* Top/*[out,retval]*/);
  float           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(float Top/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(float* Width/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(float Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(float* Height/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HWND(long* HWND/*[out,retval]*/);
  long            __fastcall get_HWND(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnSetFocus(BSTR* OnSetFocus/*[out,retval]*/);
  BSTR            __fastcall get_OnSetFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnSetFocus(BSTR OnSetFocus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKillFocus(BSTR* OnKillFocus/*[out,retval]*/);
  BSTR            __fastcall get_OnKillFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKillFocus(BSTR OnKillFocus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/);
  Powerpoint_2k::TagsPtr __fastcall get_Tags(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);

  __property   Powerpoint_2k::PPStringsPtr Strings = {read = get_Strings};
  __property   int             FocusItem = {read = get_FocusItem, write = set_FocusItem};
  __property   BSTR            OnSelectionChange = {read = get_OnSelectionChange, write = set_OnSelectionChange};

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoTriState Enable = {read = get_Enable, write = set_Enable};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   Office_2k::MsoTriState Focus = {read = get_Focus, write = set_Focus};
  __property   BSTR            Label = {read = get_Label, write = set_Label};
  __property   int             HelpId = {read = get_HelpId, write = set_HelpId};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   long            HWND = {read = get_HWND};
  __property   BSTR            OnSetFocus = {read = get_OnSetFocus, write = set_OnSetFocus};
  __property   BSTR            OnKillFocus = {read = get_OnKillFocus, write = set_OnKillFocus};
  __property   Powerpoint_2k::TagsPtr Tags = {read = get_Tags};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
};
typedef PPDropDownDispT<PPDropDown> PPDropDownDisp;

typedef TComInterface<PPDropDownEdit>  TCOMPPDropDownEdit;

// *********************************************************************//
// DispIntf:  PPDropDownEdit
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934B6-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PPDropDownEditDispT : public TAutoDriver<PPDropDownEdit>
{
public:
  PPDropDownEditDispT(){}

  PPDropDownEditDispT(PPDropDownEdit *pintf)
  {
    TAutoDriver<PPDropDownEdit>::Bind(pintf, false);
  }

  PPDropDownEditDispT(PPDropDownEditPtr pintf)
  {
    TAutoDriver<PPDropDownEdit>::Bind(pintf, true);
  }

  PPDropDownEditDispT& operator=(PPDropDownEdit *pintf)
  {
    TAutoDriver<PPDropDownEdit>::Bind(pintf, false);
    return *this;
  }

  PPDropDownEditDispT& operator=(PPDropDownEditPtr pintf)
  {
    TAutoDriver<PPDropDownEdit>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Strings(Powerpoint_2k::PPStringsPtr* Strings/*[out,retval]*/);
  Powerpoint_2k::PPStringsPtr __fastcall get_Strings(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FocusItem(int* FocusItem/*[out,retval]*/);
  int             __fastcall get_FocusItem(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FocusItem(int FocusItem/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnSelectionChange(BSTR* OnSelectionChange/*[out,retval]*/);
  BSTR            __fastcall get_OnSelectionChange(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnSelectionChange(BSTR OnSelectionChange/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnEdit(BSTR* OnEdit/*[out,retval]*/);
  BSTR            __fastcall get_OnEdit(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnEdit(BSTR OnEdit/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enable(Office_2k::MsoTriState* Enable/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Enable(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enable(Office_2k::MsoTriState Enable/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_2k::MsoTriState Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Focus(Office_2k::MsoTriState* Focus/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Focus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Focus(Office_2k::MsoTriState Focus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Label(BSTR* Label/*[out,retval]*/);
  BSTR            __fastcall get_Label(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Label(BSTR Label/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpId(int* HelpId/*[out,retval]*/);
  int             __fastcall get_HelpId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpId(int HelpId/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(float* Left/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(float Left/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(float* Top/*[out,retval]*/);
  float           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(float Top/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(float* Width/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(float Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(float* Height/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HWND(long* HWND/*[out,retval]*/);
  long            __fastcall get_HWND(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnSetFocus(BSTR* OnSetFocus/*[out,retval]*/);
  BSTR            __fastcall get_OnSetFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnSetFocus(BSTR OnSetFocus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKillFocus(BSTR* OnKillFocus/*[out,retval]*/);
  BSTR            __fastcall get_OnKillFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKillFocus(BSTR OnKillFocus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/);
  Powerpoint_2k::TagsPtr __fastcall get_Tags(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);

  __property   Powerpoint_2k::PPStringsPtr Strings = {read = get_Strings};
  __property   int             FocusItem = {read = get_FocusItem, write = set_FocusItem};
  __property   BSTR            OnSelectionChange = {read = get_OnSelectionChange, write = set_OnSelectionChange};
  __property   BSTR            OnEdit = {read = get_OnEdit, write = set_OnEdit};

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoTriState Enable = {read = get_Enable, write = set_Enable};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   Office_2k::MsoTriState Focus = {read = get_Focus, write = set_Focus};
  __property   BSTR            Label = {read = get_Label, write = set_Label};
  __property   int             HelpId = {read = get_HelpId, write = set_HelpId};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   long            HWND = {read = get_HWND};
  __property   BSTR            OnSetFocus = {read = get_OnSetFocus, write = set_OnSetFocus};
  __property   BSTR            OnKillFocus = {read = get_OnKillFocus, write = set_OnKillFocus};
  __property   Powerpoint_2k::TagsPtr Tags = {read = get_Tags};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
};
typedef PPDropDownEditDispT<PPDropDownEdit> PPDropDownEditDisp;

typedef TComInterface<PPSlideMiniature>  TCOMPPSlideMiniature;

// *********************************************************************//
// DispIntf:  PPSlideMiniature
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934B7-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PPSlideMiniatureDispT : public TAutoDriver<PPSlideMiniature>
{
public:
  PPSlideMiniatureDispT(){}

  PPSlideMiniatureDispT(PPSlideMiniature *pintf)
  {
    TAutoDriver<PPSlideMiniature>::Bind(pintf, false);
  }

  PPSlideMiniatureDispT(PPSlideMiniaturePtr pintf)
  {
    TAutoDriver<PPSlideMiniature>::Bind(pintf, true);
  }

  PPSlideMiniatureDispT& operator=(PPSlideMiniature *pintf)
  {
    TAutoDriver<PPSlideMiniature>::Bind(pintf, false);
    return *this;
  }

  PPSlideMiniatureDispT& operator=(PPSlideMiniaturePtr pintf)
  {
    TAutoDriver<PPSlideMiniature>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetImage(Powerpoint_2k::PowerPointSlidePtr Slide/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Selected(int* Selected/*[out,retval]*/);
  int             __fastcall get_Selected(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Selected(int Selected/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnClick(BSTR* OnClick/*[out,retval]*/);
  BSTR            __fastcall get_OnClick(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnClick(BSTR OnClick/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnDoubleClick(BSTR* OnDoubleClick/*[out,retval]*/);
  BSTR            __fastcall get_OnDoubleClick(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnDoubleClick(BSTR OnDoubleClick/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enable(Office_2k::MsoTriState* Enable/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Enable(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enable(Office_2k::MsoTriState Enable/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_2k::MsoTriState Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Focus(Office_2k::MsoTriState* Focus/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Focus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Focus(Office_2k::MsoTriState Focus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Label(BSTR* Label/*[out,retval]*/);
  BSTR            __fastcall get_Label(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Label(BSTR Label/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpId(int* HelpId/*[out,retval]*/);
  int             __fastcall get_HelpId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpId(int HelpId/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(float* Left/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(float Left/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(float* Top/*[out,retval]*/);
  float           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(float Top/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(float* Width/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(float Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(float* Height/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HWND(long* HWND/*[out,retval]*/);
  long            __fastcall get_HWND(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnSetFocus(BSTR* OnSetFocus/*[out,retval]*/);
  BSTR            __fastcall get_OnSetFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnSetFocus(BSTR OnSetFocus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKillFocus(BSTR* OnKillFocus/*[out,retval]*/);
  BSTR            __fastcall get_OnKillFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKillFocus(BSTR OnKillFocus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/);
  Powerpoint_2k::TagsPtr __fastcall get_Tags(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);

  __property   int             Selected = {read = get_Selected, write = set_Selected};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDoubleClick = {read = get_OnDoubleClick, write = set_OnDoubleClick};

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoTriState Enable = {read = get_Enable, write = set_Enable};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   Office_2k::MsoTriState Focus = {read = get_Focus, write = set_Focus};
  __property   BSTR            Label = {read = get_Label, write = set_Label};
  __property   int             HelpId = {read = get_HelpId, write = set_HelpId};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   long            HWND = {read = get_HWND};
  __property   BSTR            OnSetFocus = {read = get_OnSetFocus, write = set_OnSetFocus};
  __property   BSTR            OnKillFocus = {read = get_OnKillFocus, write = set_OnKillFocus};
  __property   Powerpoint_2k::TagsPtr Tags = {read = get_Tags};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
};
typedef PPSlideMiniatureDispT<PPSlideMiniature> PPSlideMiniatureDisp;

typedef TComInterface<PPRadioButton>  TCOMPPRadioButton;

// *********************************************************************//
// DispIntf:  PPRadioButton
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934B8-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PPRadioButtonDispT : public TAutoDriver<PPRadioButton>
{
public:
  PPRadioButtonDispT(){}

  PPRadioButtonDispT(PPRadioButton *pintf)
  {
    TAutoDriver<PPRadioButton>::Bind(pintf, false);
  }

  PPRadioButtonDispT(PPRadioButtonPtr pintf)
  {
    TAutoDriver<PPRadioButton>::Bind(pintf, true);
  }

  PPRadioButtonDispT& operator=(PPRadioButton *pintf)
  {
    TAutoDriver<PPRadioButton>::Bind(pintf, false);
    return *this;
  }

  PPRadioButtonDispT& operator=(PPRadioButtonPtr pintf)
  {
    TAutoDriver<PPRadioButton>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_State(Office_2k::MsoTriState* State/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_State(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_State(Office_2k::MsoTriState State/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Click();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DoubleClick();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnClick(BSTR* OnClick/*[out,retval]*/);
  BSTR            __fastcall get_OnClick(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnClick(BSTR OnClick/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnDoubleClick(BSTR* OnDoubleClick/*[out,retval]*/);
  BSTR            __fastcall get_OnDoubleClick(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnDoubleClick(BSTR OnDoubleClick/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enable(Office_2k::MsoTriState* Enable/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Enable(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enable(Office_2k::MsoTriState Enable/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_2k::MsoTriState Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Focus(Office_2k::MsoTriState* Focus/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Focus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Focus(Office_2k::MsoTriState Focus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Label(BSTR* Label/*[out,retval]*/);
  BSTR            __fastcall get_Label(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Label(BSTR Label/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpId(int* HelpId/*[out,retval]*/);
  int             __fastcall get_HelpId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpId(int HelpId/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(float* Left/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(float Left/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(float* Top/*[out,retval]*/);
  float           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(float Top/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(float* Width/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(float Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(float* Height/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HWND(long* HWND/*[out,retval]*/);
  long            __fastcall get_HWND(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnSetFocus(BSTR* OnSetFocus/*[out,retval]*/);
  BSTR            __fastcall get_OnSetFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnSetFocus(BSTR OnSetFocus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKillFocus(BSTR* OnKillFocus/*[out,retval]*/);
  BSTR            __fastcall get_OnKillFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKillFocus(BSTR OnKillFocus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/);
  Powerpoint_2k::TagsPtr __fastcall get_Tags(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);

  __property   Office_2k::MsoTriState State = {read = get_State, write = set_State};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDoubleClick = {read = get_OnDoubleClick, write = set_OnDoubleClick};

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoTriState Enable = {read = get_Enable, write = set_Enable};
  __property   Office_2k::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   Office_2k::MsoTriState Focus = {read = get_Focus, write = set_Focus};
  __property   BSTR            Label = {read = get_Label, write = set_Label};
  __property   int             HelpId = {read = get_HelpId, write = set_HelpId};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   long            HWND = {read = get_HWND};
  __property   BSTR            OnSetFocus = {read = get_OnSetFocus, write = set_OnSetFocus};
  __property   BSTR            OnKillFocus = {read = get_OnKillFocus, write = set_OnKillFocus};
  __property   Powerpoint_2k::TagsPtr Tags = {read = get_Tags};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
};
typedef PPRadioButtonDispT<PPRadioButton> PPRadioButtonDisp;

typedef TComInterface<Tags>  TCOMTags;

// *********************************************************************//
// DispIntf:  Tags
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934B9-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class TagsDispT : public TAutoDriver<Tags>
{
public:
  TagsDispT(){}

  TagsDispT(Tags *pintf)
  {
    TAutoDriver<Tags>::Bind(pintf, false);
  }

  TagsDispT(TagsPtr pintf)
  {
    TAutoDriver<Tags>::Bind(pintf, true);
  }

  TagsDispT& operator=(Tags *pintf)
  {
    TAutoDriver<Tags>::Bind(pintf, false);
    return *this;
  }

  TagsDispT& operator=(TagsPtr pintf)
  {
    TAutoDriver<Tags>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(BSTR Name/*[in]*/, BSTR* Item/*[out,retval]*/);
  BSTR            __fastcall Item(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(BSTR Name/*[in]*/, BSTR Value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddBinary(BSTR Name/*[in]*/, BSTR FilePath/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall BinaryValue(BSTR Name/*[in]*/, 
                                                    long* BinaryValue/*[out,retval]*/);
  long            __fastcall BinaryValue(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Name(int index/*[in]*/, BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall Name(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Value(int index/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall Value(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/);
  TVariant        __fastcall _Index(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef TagsDispT<Tags> TagsDisp;

typedef TComInterface<FileDialogFileList>  TCOMFileDialogFileList;

// *********************************************************************//
// DispIntf:  FileDialogFileList
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934BA-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class FileDialogFileListDispT : public TAutoDriver<FileDialogFileList>
{
public:
  FileDialogFileListDispT(){}

  FileDialogFileListDispT(FileDialogFileList *pintf)
  {
    TAutoDriver<FileDialogFileList>::Bind(pintf, false);
  }

  FileDialogFileListDispT(FileDialogFileListPtr pintf)
  {
    TAutoDriver<FileDialogFileList>::Bind(pintf, true);
  }

  FileDialogFileListDispT& operator=(FileDialogFileList *pintf)
  {
    TAutoDriver<FileDialogFileList>::Bind(pintf, false);
    return *this;
  }

  FileDialogFileListDispT& operator=(FileDialogFileListPtr pintf)
  {
    TAutoDriver<FileDialogFileList>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(int index/*[in]*/, BSTR* Item/*[out,retval]*/);
  BSTR            __fastcall Item(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DisplayName(int index/*[in]*/, 
                                                    BSTR* DisplayName/*[out,retval]*/);
  BSTR            __fastcall DisplayName(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/);
  TVariant        __fastcall _Index(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef FileDialogFileListDispT<FileDialogFileList> FileDialogFileListDisp;

typedef TComInterface<FileDialogExtension>  TCOMFileDialogExtension;

// *********************************************************************//
// DispIntf:  FileDialogExtension
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934BB-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class FileDialogExtensionDispT : public TAutoDriver<FileDialogExtension>
{
public:
  FileDialogExtensionDispT(){}

  FileDialogExtensionDispT(FileDialogExtension *pintf)
  {
    TAutoDriver<FileDialogExtension>::Bind(pintf, false);
  }

  FileDialogExtensionDispT(FileDialogExtensionPtr pintf)
  {
    TAutoDriver<FileDialogExtension>::Bind(pintf, true);
  }

  FileDialogExtensionDispT& operator=(FileDialogExtension *pintf)
  {
    TAutoDriver<FileDialogExtension>::Bind(pintf, false);
    return *this;
  }

  FileDialogExtensionDispT& operator=(FileDialogExtensionPtr pintf)
  {
    TAutoDriver<FileDialogExtension>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Extensions(BSTR* Extensions/*[out,retval]*/);
  BSTR            __fastcall get_Extensions(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Extensions(BSTR Extensions/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Description(BSTR* Description/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Description(BSTR Description/*[in]*/);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Extensions = {read = get_Extensions, write = set_Extensions};
  __property   BSTR            Description = {read = get_Description, write = set_Description};
};
typedef FileDialogExtensionDispT<FileDialogExtension> FileDialogExtensionDisp;

typedef TComInterface<FileDialogExtensionList>  TCOMFileDialogExtensionList;

// *********************************************************************//
// DispIntf:  FileDialogExtensionList
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934BC-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class FileDialogExtensionListDispT : public TAutoDriver<FileDialogExtensionList>
{
public:
  FileDialogExtensionListDispT(){}

  FileDialogExtensionListDispT(FileDialogExtensionList *pintf)
  {
    TAutoDriver<FileDialogExtensionList>::Bind(pintf, false);
  }

  FileDialogExtensionListDispT(FileDialogExtensionListPtr pintf)
  {
    TAutoDriver<FileDialogExtensionList>::Bind(pintf, true);
  }

  FileDialogExtensionListDispT& operator=(FileDialogExtensionList *pintf)
  {
    TAutoDriver<FileDialogExtensionList>::Bind(pintf, false);
    return *this;
  }

  FileDialogExtensionListDispT& operator=(FileDialogExtensionListPtr pintf)
  {
    TAutoDriver<FileDialogExtensionList>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(int index/*[in]*/, 
                                             Powerpoint_2k::FileDialogExtensionPtr* Item/*[out,retval]*/);
  Powerpoint_2k::FileDialogExtensionPtr __fastcall Item(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(BSTR Extension/*[in]*/, BSTR Description/*[in]*/, 
                                            Powerpoint_2k::FileDialogExtensionPtr* Add/*[out,retval]*/);
  Powerpoint_2k::FileDialogExtensionPtr __fastcall Add(BSTR Extension/*[in]*/, 
                                                       BSTR Description/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/);
  TVariant        __fastcall _Index(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef FileDialogExtensionListDispT<FileDialogExtensionList> FileDialogExtensionListDisp;

typedef TComInterface<FileDialog>  TCOMFileDialog;

// *********************************************************************//
// DispIntf:  FileDialog
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934BD-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class FileDialogDispT : public TAutoDriver<FileDialog>
{
public:
  FileDialogDispT(){}

  FileDialogDispT(FileDialog *pintf)
  {
    TAutoDriver<FileDialog>::Bind(pintf, false);
  }

  FileDialogDispT(FileDialogPtr pintf)
  {
    TAutoDriver<FileDialog>::Bind(pintf, true);
  }

  FileDialogDispT& operator=(FileDialog *pintf)
  {
    TAutoDriver<FileDialog>::Bind(pintf, false);
    return *this;
  }

  FileDialogDispT& operator=(FileDialogPtr pintf)
  {
    TAutoDriver<FileDialog>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Extensions(Powerpoint_2k::FileDialogExtensionListPtr* Extensions/*[out,retval]*/);
  Powerpoint_2k::FileDialogExtensionListPtr __fastcall get_Extensions(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DefaultDirectoryRegKey(BSTR* DefaultDirectoryRegKey/*[out,retval]*/);
  BSTR            __fastcall get_DefaultDirectoryRegKey(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DefaultDirectoryRegKey(BSTR DefaultDirectoryRegKey/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DialogTitle(BSTR* DialogTitle/*[out,retval]*/);
  BSTR            __fastcall get_DialogTitle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DialogTitle(BSTR DialogTitle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActionButtonName(BSTR* ActionButtonName/*[out,retval]*/);
  BSTR            __fastcall get_ActionButtonName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ActionButtonName(BSTR ActionButtonName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsMultiSelect(Office_2k::MsoTriState* IsMultiSelect/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_IsMultiSelect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IsMultiSelect(Office_2k::MsoTriState IsMultiSelect/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsPrintEnabled(Office_2k::MsoTriState* IsPrintEnabled/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_IsPrintEnabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IsPrintEnabled(Office_2k::MsoTriState IsPrintEnabled/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsReadOnlyEnabled(Office_2k::MsoTriState* IsReadOnlyEnabled/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_IsReadOnlyEnabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IsReadOnlyEnabled(Office_2k::MsoTriState IsReadOnlyEnabled/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DirectoriesOnly(Office_2k::MsoTriState* DirectoriesOnly/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_DirectoriesOnly(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DirectoriesOnly(Office_2k::MsoTriState DirectoriesOnly/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InitialView(Powerpoint_2k::PpFileDialogView* InitialView/*[out,retval]*/);
  Powerpoint_2k::PpFileDialogView __fastcall get_InitialView(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_InitialView(Powerpoint_2k::PpFileDialogView InitialView/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Launch(LPUNKNOWN pUnk/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnAction(BSTR* OnAction/*[out,retval]*/);
  BSTR            __fastcall get_OnAction(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnAction(BSTR OnAction/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Files(Powerpoint_2k::FileDialogFileListPtr* Files/*[out,retval]*/);
  Powerpoint_2k::FileDialogFileListPtr __fastcall get_Files(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_UseODMADlgs(Office_2k::MsoTriState* UseODMADlgs/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_UseODMADlgs(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_UseODMADlgs(Office_2k::MsoTriState UseODMADlgs/*[in]*/);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::FileDialogExtensionListPtr Extensions = {read = get_Extensions};
  __property   BSTR            DefaultDirectoryRegKey = {read = get_DefaultDirectoryRegKey, write = set_DefaultDirectoryRegKey};
  __property   BSTR            DialogTitle = {read = get_DialogTitle, write = set_DialogTitle};
  __property   BSTR            ActionButtonName = {read = get_ActionButtonName, write = set_ActionButtonName};
  __property   Office_2k::MsoTriState IsMultiSelect = {read = get_IsMultiSelect, write = set_IsMultiSelect};
  __property   Office_2k::MsoTriState IsPrintEnabled = {read = get_IsPrintEnabled, write = set_IsPrintEnabled};
  __property   Office_2k::MsoTriState IsReadOnlyEnabled = {read = get_IsReadOnlyEnabled, write = set_IsReadOnlyEnabled};
  __property   Office_2k::MsoTriState DirectoriesOnly = {read = get_DirectoriesOnly, write = set_DirectoriesOnly};
  __property   Powerpoint_2k::PpFileDialogView InitialView = {read = get_InitialView, write = set_InitialView};
  __property   BSTR            OnAction = {read = get_OnAction, write = set_OnAction};
  __property   Powerpoint_2k::FileDialogFileListPtr Files = {read = get_Files};
  __property   Office_2k::MsoTriState UseODMADlgs = {read = get_UseODMADlgs, write = set_UseODMADlgs};
};
typedef FileDialogDispT<FileDialog> FileDialogDisp;

typedef TComInterface<MouseTracker>  TCOMMouseTracker;

typedef TComInterface<MouseDownHandler>  TCOMMouseDownHandler;

// *********************************************************************//
// SmartIntf: TCOMOCXExtender
// Interface: OCXExtender
// *********************************************************************//
template <class T /* OCXExtender */ >
class TCOMOCXExtenderT : public TComInterface<OCXExtender>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMOCXExtenderT() {}
  TCOMOCXExtenderT(OCXExtender *intf, bool addRef = false) : TComInterface<OCXExtender>(intf, addRef) {}
  TCOMOCXExtenderT(const TCOMOCXExtenderT& src) : TComInterface<OCXExtender>(src) {}
  TCOMOCXExtenderT& operator=(const TCOMOCXExtenderT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Visible(TOLEBOOL* Visible/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(TOLEBOOL Visible/*[in]*/);
  HRESULT         __fastcall get_Left(float* Left/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(float Left/*[in]*/);
  HRESULT         __fastcall get_Top(float* Top/*[out,retval]*/);
  float           __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(float Top/*[in]*/);
  HRESULT         __fastcall get_Height(float* Height/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(float Height/*[in]*/);
  HRESULT         __fastcall get_Width(float* Width/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(float Width/*[in]*/);
  HRESULT         __fastcall get_ZOrderPosition(int* ZOrderPosition/*[out,retval]*/);
  int             __fastcall get_ZOrderPosition(void);
  HRESULT         __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT         __fastcall get_AltHTML(BSTR* AltHTML/*[out,retval]*/);
  BSTR            __fastcall get_AltHTML(void);
  HRESULT         __fastcall set_AltHTML(BSTR AltHTML/*[in]*/);

  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   int             ZOrderPosition = {read = get_ZOrderPosition};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            AltHTML = {read = get_AltHTML, write = set_AltHTML};
};
typedef TCOMOCXExtenderT<OCXExtender> TCOMOCXExtender;

// *********************************************************************//
// DispIntf:  OCXExtender
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934C0-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class OCXExtenderDispT : public TAutoDriver<OCXExtender>
{
public:
  OCXExtenderDispT(){}

  OCXExtenderDispT(OCXExtender *pintf)
  {
    TAutoDriver<OCXExtender>::Bind(pintf, false);
  }

  OCXExtenderDispT(OCXExtenderPtr pintf)
  {
    TAutoDriver<OCXExtender>::Bind(pintf, true);
  }

  OCXExtenderDispT& operator=(OCXExtender *pintf)
  {
    TAutoDriver<OCXExtender>::Bind(pintf, false);
    return *this;
  }

  OCXExtenderDispT& operator=(OCXExtenderPtr pintf)
  {
    TAutoDriver<OCXExtender>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_OLEControl));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_OLEControl);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(TOLEBOOL* Visible/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(TOLEBOOL Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(float* Left/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(float Left/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(float* Top/*[out,retval]*/);
  float           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(float Top/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(float* Height/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(float* Width/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(float Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ZOrderPosition(int* ZOrderPosition/*[out,retval]*/);
  int             __fastcall get_ZOrderPosition(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AltHTML(BSTR* AltHTML/*[out,retval]*/);
  BSTR            __fastcall get_AltHTML(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AltHTML(BSTR AltHTML/*[in]*/);

  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   int             ZOrderPosition = {read = get_ZOrderPosition};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            AltHTML = {read = get_AltHTML, write = set_AltHTML};
};
typedef OCXExtenderDispT<OCXExtender> OCXExtenderDisp;

// *********************************************************************//
// DispIntf:  OCXExtenderEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {914934C1-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T>
class OCXExtenderEventsDispT : public TAutoDriver<OCXExtenderEvents>
{
public:
  OCXExtenderEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall GotFocus();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall LostFocus();

};
typedef OCXExtenderEventsDispT<OCXExtenderEvents> OCXExtenderEventsDisp;

typedef TComInterface<Table>  TCOMTable;

// *********************************************************************//
// DispIntf:  Table
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934C3-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class TableDispT : public TAutoDriver<Table>
{
public:
  TableDispT(){}

  TableDispT(Table *pintf)
  {
    TAutoDriver<Table>::Bind(pintf, false);
  }

  TableDispT(TablePtr pintf)
  {
    TAutoDriver<Table>::Bind(pintf, true);
  }

  TableDispT& operator=(Table *pintf)
  {
    TAutoDriver<Table>::Bind(pintf, false);
    return *this;
  }

  TableDispT& operator=(TablePtr pintf)
  {
    TAutoDriver<Table>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Columns(Powerpoint_2k::ColumnsPtr* Columns/*[out,retval]*/);
  Powerpoint_2k::ColumnsPtr __fastcall get_Columns(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Rows(Powerpoint_2k::RowsPtr* Rows/*[out,retval]*/);
  Powerpoint_2k::RowsPtr __fastcall get_Rows(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Cell(int Row/*[in]*/, int Column/*[in]*/, 
                                             Powerpoint_2k::CellPtr* Cell/*[out,retval]*/);
  Powerpoint_2k::CellPtr __fastcall Cell(int Row/*[in]*/, int Column/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TableDirection(Powerpoint_2k::PpDirection* TableDirection/*[out,retval]*/);
  Powerpoint_2k::PpDirection __fastcall get_TableDirection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TableDirection(Powerpoint_2k::PpDirection TableDirection/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall MergeBorders();

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::ColumnsPtr Columns = {read = get_Columns};
  __property   Powerpoint_2k::RowsPtr Rows = {read = get_Rows};
  __property   Powerpoint_2k::PpDirection TableDirection = {read = get_TableDirection, write = set_TableDirection};
};
typedef TableDispT<Table> TableDisp;

typedef TComInterface<Columns>  TCOMColumns;

// *********************************************************************//
// DispIntf:  Columns
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934C4-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class ColumnsDispT : public TAutoDriver<Columns>
{
public:
  ColumnsDispT(){}

  ColumnsDispT(Columns *pintf)
  {
    TAutoDriver<Columns>::Bind(pintf, false);
  }

  ColumnsDispT(ColumnsPtr pintf)
  {
    TAutoDriver<Columns>::Bind(pintf, true);
  }

  ColumnsDispT& operator=(Columns *pintf)
  {
    TAutoDriver<Columns>::Bind(pintf, false);
    return *this;
  }

  ColumnsDispT& operator=(ColumnsPtr pintf)
  {
    TAutoDriver<Columns>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(int index/*[in]*/, 
                                             Powerpoint_2k::ColumnPtr* Item/*[out,retval]*/);
  Powerpoint_2k::ColumnPtr __fastcall Item(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(int BeforeColumn/*[in,def,opt]*/, 
                                            Powerpoint_2k::ColumnPtr* Add/*[out,retval]*/);
  Powerpoint_2k::ColumnPtr __fastcall Add(int BeforeColumn/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/);
  TVariant        __fastcall _Index(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef ColumnsDispT<Columns> ColumnsDisp;

typedef TComInterface<Column>  TCOMColumn;

// *********************************************************************//
// DispIntf:  Column
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934C5-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class ColumnDispT : public TAutoDriver<Column>
{
public:
  ColumnDispT(){}

  ColumnDispT(Column *pintf)
  {
    TAutoDriver<Column>::Bind(pintf, false);
  }

  ColumnDispT(ColumnPtr pintf)
  {
    TAutoDriver<Column>::Bind(pintf, true);
  }

  ColumnDispT& operator=(Column *pintf)
  {
    TAutoDriver<Column>::Bind(pintf, false);
    return *this;
  }

  ColumnDispT& operator=(ColumnPtr pintf)
  {
    TAutoDriver<Column>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Cells(Powerpoint_2k::CellRangePtr* Cells/*[out,retval]*/);
  Powerpoint_2k::CellRangePtr __fastcall get_Cells(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Select();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(float* Width/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(float Width/*[in]*/);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::CellRangePtr Cells = {read = get_Cells};
  __property   float           Width = {read = get_Width, write = set_Width};
};
typedef ColumnDispT<Column> ColumnDisp;

typedef TComInterface<Rows>  TCOMRows;

// *********************************************************************//
// DispIntf:  Rows
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934C6-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class RowsDispT : public TAutoDriver<Rows>
{
public:
  RowsDispT(){}

  RowsDispT(Rows *pintf)
  {
    TAutoDriver<Rows>::Bind(pintf, false);
  }

  RowsDispT(RowsPtr pintf)
  {
    TAutoDriver<Rows>::Bind(pintf, true);
  }

  RowsDispT& operator=(Rows *pintf)
  {
    TAutoDriver<Rows>::Bind(pintf, false);
    return *this;
  }

  RowsDispT& operator=(RowsPtr pintf)
  {
    TAutoDriver<Rows>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(int index/*[in]*/, 
                                             Powerpoint_2k::RowPtr* Item/*[out,retval]*/);
  Powerpoint_2k::RowPtr __fastcall Item(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(int BeforeRow/*[in,def,opt]*/, 
                                            Powerpoint_2k::RowPtr* Add/*[out,retval]*/);
  Powerpoint_2k::RowPtr __fastcall Add(int BeforeRow/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/);
  TVariant        __fastcall _Index(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef RowsDispT<Rows> RowsDisp;

typedef TComInterface<Row>  TCOMRow;

// *********************************************************************//
// DispIntf:  Row
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934C7-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class RowDispT : public TAutoDriver<Row>
{
public:
  RowDispT(){}

  RowDispT(Row *pintf)
  {
    TAutoDriver<Row>::Bind(pintf, false);
  }

  RowDispT(RowPtr pintf)
  {
    TAutoDriver<Row>::Bind(pintf, true);
  }

  RowDispT& operator=(Row *pintf)
  {
    TAutoDriver<Row>::Bind(pintf, false);
    return *this;
  }

  RowDispT& operator=(RowPtr pintf)
  {
    TAutoDriver<Row>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Cells(Powerpoint_2k::CellRangePtr* Cells/*[out,retval]*/);
  Powerpoint_2k::CellRangePtr __fastcall get_Cells(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Select();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(float* Height/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(float Height/*[in]*/);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::CellRangePtr Cells = {read = get_Cells};
  __property   float           Height = {read = get_Height, write = set_Height};
};
typedef RowDispT<Row> RowDisp;

typedef TComInterface<CellRange>  TCOMCellRange;

// *********************************************************************//
// DispIntf:  CellRange
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934C8-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class CellRangeDispT : public TAutoDriver<CellRange>
{
public:
  CellRangeDispT(){}

  CellRangeDispT(CellRange *pintf)
  {
    TAutoDriver<CellRange>::Bind(pintf, false);
  }

  CellRangeDispT(CellRangePtr pintf)
  {
    TAutoDriver<CellRange>::Bind(pintf, true);
  }

  CellRangeDispT& operator=(CellRange *pintf)
  {
    TAutoDriver<CellRange>::Bind(pintf, false);
    return *this;
  }

  CellRangeDispT& operator=(CellRangePtr pintf)
  {
    TAutoDriver<CellRange>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(int index/*[in]*/, 
                                             Powerpoint_2k::CellPtr* Item/*[out,retval]*/);
  Powerpoint_2k::CellPtr __fastcall Item(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Borders(Powerpoint_2k::BordersPtr* Borders/*[out,retval]*/);
  Powerpoint_2k::BordersPtr __fastcall get_Borders(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/);
  TVariant        __fastcall _Index(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::BordersPtr Borders = {read = get_Borders};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef CellRangeDispT<CellRange> CellRangeDisp;

typedef TComInterface<Cell>  TCOMCell;

// *********************************************************************//
// DispIntf:  Cell
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934C9-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class CellDispT : public TAutoDriver<Cell>
{
public:
  CellDispT(){}

  CellDispT(Cell *pintf)
  {
    TAutoDriver<Cell>::Bind(pintf, false);
  }

  CellDispT(CellPtr pintf)
  {
    TAutoDriver<Cell>::Bind(pintf, true);
  }

  CellDispT& operator=(Cell *pintf)
  {
    TAutoDriver<Cell>::Bind(pintf, false);
    return *this;
  }

  CellDispT& operator=(CellPtr pintf)
  {
    TAutoDriver<Cell>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Shape(Powerpoint_2k::ShapePtr* Shape/*[out,retval]*/);
  Powerpoint_2k::ShapePtr __fastcall get_Shape(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Borders(Powerpoint_2k::BordersPtr* Borders/*[out,retval]*/);
  Powerpoint_2k::BordersPtr __fastcall get_Borders(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Merge(Powerpoint_2k::CellPtr MergeTo/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Split(int NumRows/*[in]*/, int NumColumns/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Select();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Selected(TOLEBOOL* Selected/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Selected(void);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::ShapePtr Shape = {read = get_Shape};
  __property   Powerpoint_2k::BordersPtr Borders = {read = get_Borders};
  __property   TOLEBOOL        Selected = {read = get_Selected};
};
typedef CellDispT<Cell> CellDisp;

typedef TComInterface<Borders>  TCOMBorders;

// *********************************************************************//
// DispIntf:  Borders
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934CA-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class BordersDispT : public TAutoDriver<Borders>
{
public:
  BordersDispT(){}

  BordersDispT(Borders *pintf)
  {
    TAutoDriver<Borders>::Bind(pintf, false);
  }

  BordersDispT(BordersPtr pintf)
  {
    TAutoDriver<Borders>::Bind(pintf, true);
  }

  BordersDispT& operator=(Borders *pintf)
  {
    TAutoDriver<Borders>::Bind(pintf, false);
    return *this;
  }

  BordersDispT& operator=(BordersPtr pintf)
  {
    TAutoDriver<Borders>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(Powerpoint_2k::PpBorderType BorderType/*[in]*/, 
                                             Powerpoint_2k::LineFormatPtr* Item/*[out,retval]*/);
  Powerpoint_2k::LineFormatPtr __fastcall Item(Powerpoint_2k::PpBorderType BorderType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/);
  TVariant        __fastcall _Index(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef BordersDispT<Borders> BordersDisp;

typedef TComInterface<Panes>  TCOMPanes;

// *********************************************************************//
// DispIntf:  Panes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934CB-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PanesDispT : public TAutoDriver<Panes>
{
public:
  PanesDispT(){}

  PanesDispT(Panes *pintf)
  {
    TAutoDriver<Panes>::Bind(pintf, false);
  }

  PanesDispT(PanesPtr pintf)
  {
    TAutoDriver<Panes>::Bind(pintf, true);
  }

  PanesDispT& operator=(Panes *pintf)
  {
    TAutoDriver<Panes>::Bind(pintf, false);
    return *this;
  }

  PanesDispT& operator=(PanesPtr pintf)
  {
    TAutoDriver<Panes>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(int index/*[in]*/, 
                                             Powerpoint_2k::PanePtr* Item/*[out,retval]*/);
  Powerpoint_2k::PanePtr __fastcall Item(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/);
  TVariant        __fastcall _Index(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef PanesDispT<Panes> PanesDisp;

typedef TComInterface<Pane>  TCOMPane;

// *********************************************************************//
// DispIntf:  Pane
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934CC-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PaneDispT : public TAutoDriver<Pane>
{
public:
  PaneDispT(){}

  PaneDispT(Pane *pintf)
  {
    TAutoDriver<Pane>::Bind(pintf, false);
  }

  PaneDispT(PanePtr pintf)
  {
    TAutoDriver<Pane>::Bind(pintf, true);
  }

  PaneDispT& operator=(Pane *pintf)
  {
    TAutoDriver<Pane>::Bind(pintf, false);
    return *this;
  }

  PaneDispT& operator=(PanePtr pintf)
  {
    TAutoDriver<Pane>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Activate();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Active(Office_2k::MsoTriState* Active/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_Active(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ViewType(Powerpoint_2k::PpViewType* ViewType/*[out,retval]*/);
  Powerpoint_2k::PpViewType __fastcall get_ViewType(void);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_2k::MsoTriState Active = {read = get_Active};
  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   Powerpoint_2k::PpViewType ViewType = {read = get_ViewType};
};
typedef PaneDispT<Pane> PaneDisp;

typedef TComInterface<DefaultWebOptions>  TCOMDefaultWebOptions;

// *********************************************************************//
// DispIntf:  DefaultWebOptions
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934CD-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class DefaultWebOptionsDispT : public TAutoDriver<DefaultWebOptions>
{
public:
  DefaultWebOptionsDispT(){}

  DefaultWebOptionsDispT(DefaultWebOptions *pintf)
  {
    TAutoDriver<DefaultWebOptions>::Bind(pintf, false);
  }

  DefaultWebOptionsDispT(DefaultWebOptionsPtr pintf)
  {
    TAutoDriver<DefaultWebOptions>::Bind(pintf, true);
  }

  DefaultWebOptionsDispT& operator=(DefaultWebOptions *pintf)
  {
    TAutoDriver<DefaultWebOptions>::Bind(pintf, false);
    return *this;
  }

  DefaultWebOptionsDispT& operator=(DefaultWebOptionsPtr pintf)
  {
    TAutoDriver<DefaultWebOptions>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IncludeNavigation(Office_2k::MsoTriState* IncludeNavigation/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_IncludeNavigation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IncludeNavigation(Office_2k::MsoTriState IncludeNavigation/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FrameColors(Powerpoint_2k::PpFrameColors* FrameColors/*[out,retval]*/);
  Powerpoint_2k::PpFrameColors __fastcall get_FrameColors(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FrameColors(Powerpoint_2k::PpFrameColors FrameColors/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ResizeGraphics(Office_2k::MsoTriState* ResizeGraphics/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_ResizeGraphics(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ResizeGraphics(Office_2k::MsoTriState ResizeGraphics/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowSlideAnimation(Office_2k::MsoTriState* ShowSlideAnimation/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_ShowSlideAnimation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowSlideAnimation(Office_2k::MsoTriState ShowSlideAnimation/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OrganizeInFolder(Office_2k::MsoTriState* OrganizeInFolder/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_OrganizeInFolder(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OrganizeInFolder(Office_2k::MsoTriState OrganizeInFolder/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_UseLongFileNames(Office_2k::MsoTriState* UseLongFileNames/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_UseLongFileNames(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_UseLongFileNames(Office_2k::MsoTriState UseLongFileNames/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RelyOnVML(Office_2k::MsoTriState* RelyOnVML/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_RelyOnVML(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RelyOnVML(Office_2k::MsoTriState RelyOnVML/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllowPNG(Office_2k::MsoTriState* AllowPNG/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_AllowPNG(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AllowPNG(Office_2k::MsoTriState AllowPNG/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ScreenSize(Office_2k::MsoScreenSize* ScreenSize/*[out,retval]*/);
  Office_2k::MsoScreenSize __fastcall get_ScreenSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ScreenSize(Office_2k::MsoScreenSize ScreenSize/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Encoding(Office_2k::MsoEncoding* Encoding/*[out,retval]*/);
  Office_2k::MsoEncoding __fastcall get_Encoding(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Encoding(Office_2k::MsoEncoding Encoding/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_UpdateLinksOnSave(Office_2k::MsoTriState* UpdateLinksOnSave/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_UpdateLinksOnSave(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_UpdateLinksOnSave(Office_2k::MsoTriState UpdateLinksOnSave/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CheckIfOfficeIsHTMLEditor(Office_2k::MsoTriState* CheckIfOfficeIsHTMLEditor/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_CheckIfOfficeIsHTMLEditor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CheckIfOfficeIsHTMLEditor(Office_2k::MsoTriState CheckIfOfficeIsHTMLEditor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AlwaysSaveInDefaultEncoding(Office_2k::MsoTriState* AlwaysSaveInDefaultEncoding/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_AlwaysSaveInDefaultEncoding(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AlwaysSaveInDefaultEncoding(Office_2k::MsoTriState AlwaysSaveInDefaultEncoding/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Fonts(Office_2k::WebPageFontsPtr* Fonts/*[out,retval]*/);
  Office_2k::WebPageFontsPtr __fastcall get_Fonts(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FolderSuffix(BSTR* FolderSuffix/*[out,retval]*/);
  BSTR            __fastcall get_FolderSuffix(void);

  __property   Office_2k::MsoTriState IncludeNavigation = {read = get_IncludeNavigation, write = set_IncludeNavigation};
  __property   Powerpoint_2k::PpFrameColors FrameColors = {read = get_FrameColors, write = set_FrameColors};
  __property   Office_2k::MsoTriState ResizeGraphics = {read = get_ResizeGraphics, write = set_ResizeGraphics};
  __property   Office_2k::MsoTriState ShowSlideAnimation = {read = get_ShowSlideAnimation, write = set_ShowSlideAnimation};
  __property   Office_2k::MsoTriState OrganizeInFolder = {read = get_OrganizeInFolder, write = set_OrganizeInFolder};
  __property   Office_2k::MsoTriState UseLongFileNames = {read = get_UseLongFileNames, write = set_UseLongFileNames};
  __property   Office_2k::MsoTriState RelyOnVML = {read = get_RelyOnVML, write = set_RelyOnVML};
  __property   Office_2k::MsoTriState AllowPNG = {read = get_AllowPNG, write = set_AllowPNG};
  __property   Office_2k::MsoScreenSize ScreenSize = {read = get_ScreenSize, write = set_ScreenSize};
  __property   Office_2k::MsoEncoding Encoding = {read = get_Encoding, write = set_Encoding};
  __property   Office_2k::MsoTriState UpdateLinksOnSave = {read = get_UpdateLinksOnSave, write = set_UpdateLinksOnSave};
  __property   Office_2k::MsoTriState CheckIfOfficeIsHTMLEditor = {read = get_CheckIfOfficeIsHTMLEditor, write = set_CheckIfOfficeIsHTMLEditor};
  __property   Office_2k::MsoTriState AlwaysSaveInDefaultEncoding = {read = get_AlwaysSaveInDefaultEncoding, write = set_AlwaysSaveInDefaultEncoding};
  __property   Office_2k::WebPageFontsPtr Fonts = {read = get_Fonts};
  __property   BSTR            FolderSuffix = {read = get_FolderSuffix};
};
typedef DefaultWebOptionsDispT<DefaultWebOptions> DefaultWebOptionsDisp;

typedef TComInterface<WebOptions>  TCOMWebOptions;

// *********************************************************************//
// DispIntf:  WebOptions
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934CE-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class WebOptionsDispT : public TAutoDriver<WebOptions>
{
public:
  WebOptionsDispT(){}

  WebOptionsDispT(WebOptions *pintf)
  {
    TAutoDriver<WebOptions>::Bind(pintf, false);
  }

  WebOptionsDispT(WebOptionsPtr pintf)
  {
    TAutoDriver<WebOptions>::Bind(pintf, true);
  }

  WebOptionsDispT& operator=(WebOptions *pintf)
  {
    TAutoDriver<WebOptions>::Bind(pintf, false);
    return *this;
  }

  WebOptionsDispT& operator=(WebOptionsPtr pintf)
  {
    TAutoDriver<WebOptions>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IncludeNavigation(Office_2k::MsoTriState* IncludeNavigation/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_IncludeNavigation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IncludeNavigation(Office_2k::MsoTriState IncludeNavigation/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FrameColors(Powerpoint_2k::PpFrameColors* FrameColors/*[out,retval]*/);
  Powerpoint_2k::PpFrameColors __fastcall get_FrameColors(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FrameColors(Powerpoint_2k::PpFrameColors FrameColors/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ResizeGraphics(Office_2k::MsoTriState* ResizeGraphics/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_ResizeGraphics(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ResizeGraphics(Office_2k::MsoTriState ResizeGraphics/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowSlideAnimation(Office_2k::MsoTriState* ShowSlideAnimation/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_ShowSlideAnimation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowSlideAnimation(Office_2k::MsoTriState ShowSlideAnimation/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OrganizeInFolder(Office_2k::MsoTriState* OrganizeInFolder/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_OrganizeInFolder(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OrganizeInFolder(Office_2k::MsoTriState OrganizeInFolder/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_UseLongFileNames(Office_2k::MsoTriState* UseLongFileNames/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_UseLongFileNames(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_UseLongFileNames(Office_2k::MsoTriState UseLongFileNames/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RelyOnVML(Office_2k::MsoTriState* RelyOnVML/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_RelyOnVML(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RelyOnVML(Office_2k::MsoTriState RelyOnVML/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllowPNG(Office_2k::MsoTriState* AllowPNG/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_AllowPNG(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AllowPNG(Office_2k::MsoTriState AllowPNG/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ScreenSize(Office_2k::MsoScreenSize* ScreenSize/*[out,retval]*/);
  Office_2k::MsoScreenSize __fastcall get_ScreenSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ScreenSize(Office_2k::MsoScreenSize ScreenSize/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Encoding(Office_2k::MsoEncoding* Encoding/*[out,retval]*/);
  Office_2k::MsoEncoding __fastcall get_Encoding(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Encoding(Office_2k::MsoEncoding Encoding/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FolderSuffix(BSTR* FolderSuffix/*[out,retval]*/);
  BSTR            __fastcall get_FolderSuffix(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall UseDefaultFolderSuffix();

  __property   Office_2k::MsoTriState IncludeNavigation = {read = get_IncludeNavigation, write = set_IncludeNavigation};
  __property   Powerpoint_2k::PpFrameColors FrameColors = {read = get_FrameColors, write = set_FrameColors};
  __property   Office_2k::MsoTriState ResizeGraphics = {read = get_ResizeGraphics, write = set_ResizeGraphics};
  __property   Office_2k::MsoTriState ShowSlideAnimation = {read = get_ShowSlideAnimation, write = set_ShowSlideAnimation};
  __property   Office_2k::MsoTriState OrganizeInFolder = {read = get_OrganizeInFolder, write = set_OrganizeInFolder};
  __property   Office_2k::MsoTriState UseLongFileNames = {read = get_UseLongFileNames, write = set_UseLongFileNames};
  __property   Office_2k::MsoTriState RelyOnVML = {read = get_RelyOnVML, write = set_RelyOnVML};
  __property   Office_2k::MsoTriState AllowPNG = {read = get_AllowPNG, write = set_AllowPNG};
  __property   Office_2k::MsoScreenSize ScreenSize = {read = get_ScreenSize, write = set_ScreenSize};
  __property   Office_2k::MsoEncoding Encoding = {read = get_Encoding, write = set_Encoding};
  __property   BSTR            FolderSuffix = {read = get_FolderSuffix};
};
typedef WebOptionsDispT<WebOptions> WebOptionsDisp;

typedef TComInterface<PublishObjects>  TCOMPublishObjects;

// *********************************************************************//
// DispIntf:  PublishObjects
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934CF-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PublishObjectsDispT : public TAutoDriver<PublishObjects>
{
public:
  PublishObjectsDispT(){}

  PublishObjectsDispT(PublishObjects *pintf)
  {
    TAutoDriver<PublishObjects>::Bind(pintf, false);
  }

  PublishObjectsDispT(PublishObjectsPtr pintf)
  {
    TAutoDriver<PublishObjects>::Bind(pintf, true);
  }

  PublishObjectsDispT& operator=(PublishObjects *pintf)
  {
    TAutoDriver<PublishObjects>::Bind(pintf, false);
    return *this;
  }

  PublishObjectsDispT& operator=(PublishObjectsPtr pintf)
  {
    TAutoDriver<PublishObjects>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(int index/*[in]*/, 
                                             Powerpoint_2k::PublishObjectPtr* Item/*[out,retval]*/);
  Powerpoint_2k::PublishObjectPtr __fastcall Item(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/);
  TVariant        __fastcall _Index(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef PublishObjectsDispT<PublishObjects> PublishObjectsDisp;

typedef TComInterface<PublishObject>  TCOMPublishObject;

// *********************************************************************//
// DispIntf:  PublishObject
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934D0-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class PublishObjectDispT : public TAutoDriver<PublishObject>
{
public:
  PublishObjectDispT(){}

  PublishObjectDispT(PublishObject *pintf)
  {
    TAutoDriver<PublishObject>::Bind(pintf, false);
  }

  PublishObjectDispT(PublishObjectPtr pintf)
  {
    TAutoDriver<PublishObject>::Bind(pintf, true);
  }

  PublishObjectDispT& operator=(PublishObject *pintf)
  {
    TAutoDriver<PublishObject>::Bind(pintf, false);
    return *this;
  }

  PublishObjectDispT& operator=(PublishObjectPtr pintf)
  {
    TAutoDriver<PublishObject>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/);
  Powerpoint_2k::PowerPointApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HTMLVersion(Powerpoint_2k::PpHTMLVersion* HTMLVersion/*[out,retval]*/);
  Powerpoint_2k::PpHTMLVersion __fastcall get_HTMLVersion(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HTMLVersion(Powerpoint_2k::PpHTMLVersion HTMLVersion/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SourceType(Powerpoint_2k::PpPublishSourceType* SourceType/*[out,retval]*/);
  Powerpoint_2k::PpPublishSourceType __fastcall get_SourceType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SourceType(Powerpoint_2k::PpPublishSourceType SourceType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RangeStart(int* RangeStart/*[out,retval]*/);
  int             __fastcall get_RangeStart(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RangeStart(int RangeStart/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RangeEnd(int* RangeEnd/*[out,retval]*/);
  int             __fastcall get_RangeEnd(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RangeEnd(int RangeEnd/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlideShowName(BSTR* SlideShowName/*[out,retval]*/);
  BSTR            __fastcall get_SlideShowName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SlideShowName(BSTR SlideShowName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SpeakerNotes(Office_2k::MsoTriState* SpeakerNotes/*[out,retval]*/);
  Office_2k::MsoTriState __fastcall get_SpeakerNotes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SpeakerNotes(Office_2k::MsoTriState SpeakerNotes/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FileName(BSTR* FileName/*[out,retval]*/);
  BSTR            __fastcall get_FileName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FileName(BSTR FileName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Publish();

  __property   Powerpoint_2k::PowerPointApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Powerpoint_2k::PpHTMLVersion HTMLVersion = {read = get_HTMLVersion, write = set_HTMLVersion};
  __property   Powerpoint_2k::PpPublishSourceType SourceType = {read = get_SourceType, write = set_SourceType};
  __property   int             RangeStart = {read = get_RangeStart, write = set_RangeStart};
  __property   int             RangeEnd = {read = get_RangeEnd, write = set_RangeEnd};
  __property   BSTR            SlideShowName = {read = get_SlideShowName, write = set_SlideShowName};
  __property   Office_2k::MsoTriState SpeakerNotes = {read = get_SpeakerNotes, write = set_SpeakerNotes};
  __property   BSTR            FileName = {read = get_FileName, write = set_FileName};
};
typedef PublishObjectDispT<PublishObject> PublishObjectDisp;

typedef TComInterface<Marker>  TCOMMarker;

// *********************************************************************//
// DispIntf:  Marker
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934D1-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template<class T>
class MarkerDispT : public TAutoDriver<Marker>
{
public:
  MarkerDispT(){}

  MarkerDispT(Marker *pintf)
  {
    TAutoDriver<Marker>::Bind(pintf, false);
  }

  MarkerDispT(MarkerPtr pintf)
  {
    TAutoDriver<Marker>::Bind(pintf, true);
  }

  MarkerDispT& operator=(Marker *pintf)
  {
    TAutoDriver<Marker>::Bind(pintf, false);
    return *this;
  }

  MarkerDispT& operator=(MarkerPtr pintf)
  {
    TAutoDriver<Marker>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MarkerType(Powerpoint_2k::PpMarkerType* MarkerType/*[out,retval]*/);
  Powerpoint_2k::PpMarkerType __fastcall get_MarkerType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MarkerType(Powerpoint_2k::PpMarkerType MarkerType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Time(int* Time/*[out,retval]*/);
  int             __fastcall get_Time(void);

  __property   Powerpoint_2k::PpMarkerType MarkerType = {read = get_MarkerType, write = set_MarkerType};
  __property   int             Time = {read = get_Time};
};
typedef MarkerDispT<Marker> MarkerDisp;

typedef TComInterface<MasterEvents>  TCOMMasterEvents;

// *********************************************************************//
// DispIntf:  Collection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {91493450-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CollectionDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
CollectionDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CollectionDispT<T>::_Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
CollectionDispT<T>::_Index(int index/*[in]*/)
{
  TVariant _Index;
  this->_Index(index, (TVariant*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CollectionDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
CollectionDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// SmartIntf: TCOM_Application
// Interface: _Application
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Presentations(Powerpoint_2k::PresentationsPtr* Presentations/*[out,retval]*/)
{
  return (*this)->get_Presentations(Presentations);
}

template <class T> Powerpoint_2k::PresentationsPtr __fastcall
TCOM_ApplicationT<T>::get_Presentations(void)
{
  Powerpoint_2k::PresentationsPtr Presentations;
  OLECHECK(this->get_Presentations((Powerpoint_2k::PresentationsPtr*)&Presentations));
  return Presentations;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Windoz(Powerpoint_2k::DocumentWindowsPtr* Windoz/*[out,retval]*/)
{
  return (*this)->get_Windoz(Windoz);
}

template <class T> Powerpoint_2k::DocumentWindowsPtr __fastcall
TCOM_ApplicationT<T>::get_Windoz(void)
{
  Powerpoint_2k::DocumentWindowsPtr Windows;
  OLECHECK(this->get_Windoz((Powerpoint_2k::DocumentWindowsPtr*)&Windows));
  return Windows;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Dialogs(Powerpoint_2k::PPDialogsPtr* Dialogs/*[out,retval]*/)
{
  return (*this)->get_Dialogs(Dialogs);
}

template <class T> Powerpoint_2k::PPDialogsPtr __fastcall
TCOM_ApplicationT<T>::get_Dialogs(void)
{
  Powerpoint_2k::PPDialogsPtr Dialogs;
  OLECHECK(this->get_Dialogs((Powerpoint_2k::PPDialogsPtr*)&Dialogs));
  return Dialogs;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_ActiveWindow(Powerpoint_2k::DocumentWindowPtr* ActiveWindow/*[out,retval]*/)
{
  return (*this)->get_ActiveWindow(ActiveWindow);
}

template <class T> Powerpoint_2k::DocumentWindowPtr __fastcall
TCOM_ApplicationT<T>::get_ActiveWindow(void)
{
  Powerpoint_2k::DocumentWindowPtr ActiveWindow;
  OLECHECK(this->get_ActiveWindow((Powerpoint_2k::DocumentWindowPtr*)&ActiveWindow));
  return ActiveWindow;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_ActivePresentation(Powerpoint_2k::PowerPointPresentationPtr* ActivePresentation/*[out,retval]*/)
{
  return (*this)->get_ActivePresentation(ActivePresentation);
}

template <class T> Powerpoint_2k::PowerPointPresentationPtr __fastcall
TCOM_ApplicationT<T>::get_ActivePresentation(void)
{
  Powerpoint_2k::PowerPointPresentationPtr ActivePresentation;
  OLECHECK(this->get_ActivePresentation((Powerpoint_2k::PowerPointPresentationPtr*)&ActivePresentation));
  return ActivePresentation;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_SlideShowWindows(Powerpoint_2k::SlideShowWindowsPtr* SlideShowWindows/*[out,retval]*/)
{
  return (*this)->get_SlideShowWindows(SlideShowWindows);
}

template <class T> Powerpoint_2k::SlideShowWindowsPtr __fastcall
TCOM_ApplicationT<T>::get_SlideShowWindows(void)
{
  Powerpoint_2k::SlideShowWindowsPtr SlideShowWindows;
  OLECHECK(this->get_SlideShowWindows((Powerpoint_2k::SlideShowWindowsPtr*)&SlideShowWindows));
  return SlideShowWindows;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_CommandBars(Office_2k::CommandBarsPtr* CommandBars/*[out,retval]*/)
{
  return (*this)->get_CommandBars(CommandBars);
}

template <class T> Office_2k::CommandBarsPtr __fastcall
TCOM_ApplicationT<T>::get_CommandBars(void)
{
  Office_2k::CommandBarsPtr CommandBars;
  OLECHECK(this->get_CommandBars((Office_2k::CommandBarsPtr*)&CommandBars));
  return CommandBars;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Path(BSTR* Path/*[out,retval]*/)
{
  return (*this)->get_Path(Path);
}

template <class T> BSTR __fastcall
TCOM_ApplicationT<T>::get_Path(void)
{
  BSTR Path = 0;
  OLECHECK(this->get_Path((BSTR*)&Path));
  return Path;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  return (*this)->get_Name(Name);
}

template <class T> BSTR __fastcall
TCOM_ApplicationT<T>::get_Name(void)
{
  BSTR Name = 0;
  OLECHECK(this->get_Name((BSTR*)&Name));
  return Name;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Caption(BSTR* Caption/*[out,retval]*/)
{
  return (*this)->get_Caption(Caption);
}

template <class T> BSTR __fastcall
TCOM_ApplicationT<T>::get_Caption(void)
{
  BSTR Caption = 0;
  OLECHECK(this->get_Caption((BSTR*)&Caption));
  return Caption;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::set_Caption(BSTR Caption/*[in]*/)
{
  return (*this)->set_Caption(Caption);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Assistant(Office_2k::AssistantPtr* Assistant/*[out,retval]*/)
{
  return (*this)->get_Assistant(Assistant);
}

template <class T> Office_2k::AssistantPtr __fastcall
TCOM_ApplicationT<T>::get_Assistant(void)
{
  Office_2k::AssistantPtr Assistant;
  OLECHECK(this->get_Assistant((Office_2k::AssistantPtr*)&Assistant));
  return Assistant;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_FileSearch(Office_2k::FileSearchPtr* FileSearch/*[out,retval]*/)
{
  return (*this)->get_FileSearch(FileSearch);
}

template <class T> Office_2k::FileSearchPtr __fastcall
TCOM_ApplicationT<T>::get_FileSearch(void)
{
  Office_2k::FileSearchPtr FileSearch;
  OLECHECK(this->get_FileSearch((Office_2k::FileSearchPtr*)&FileSearch));
  return FileSearch;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_FileFind(Office_2k::IFindPtr* FileFind/*[out,retval]*/)
{
  return (*this)->get_FileFind(FileFind);
}

template <class T> Office_2k::IFindPtr __fastcall
TCOM_ApplicationT<T>::get_FileFind(void)
{
  Office_2k::IFindPtr FileFind;
  OLECHECK(this->get_FileFind((Office_2k::IFindPtr*)&FileFind));
  return FileFind;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Build(BSTR* Build/*[out,retval]*/)
{
  return (*this)->get_Build(Build);
}

template <class T> BSTR __fastcall
TCOM_ApplicationT<T>::get_Build(void)
{
  BSTR Build = 0;
  OLECHECK(this->get_Build((BSTR*)&Build));
  return Build;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Version(BSTR* Version/*[out,retval]*/)
{
  return (*this)->get_Version(Version);
}

template <class T> BSTR __fastcall
TCOM_ApplicationT<T>::get_Version(void)
{
  BSTR Version = 0;
  OLECHECK(this->get_Version((BSTR*)&Version));
  return Version;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_OperatingSystem(BSTR* OperatingSystem/*[out,retval]*/)
{
  return (*this)->get_OperatingSystem(OperatingSystem);
}

template <class T> BSTR __fastcall
TCOM_ApplicationT<T>::get_OperatingSystem(void)
{
  BSTR OperatingSystem = 0;
  OLECHECK(this->get_OperatingSystem((BSTR*)&OperatingSystem));
  return OperatingSystem;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_ActivePrinter(BSTR* ActivePrinter/*[out,retval]*/)
{
  return (*this)->get_ActivePrinter(ActivePrinter);
}

template <class T> BSTR __fastcall
TCOM_ApplicationT<T>::get_ActivePrinter(void)
{
  BSTR ActivePrinter = 0;
  OLECHECK(this->get_ActivePrinter((BSTR*)&ActivePrinter));
  return ActivePrinter;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Creator(long* Creator/*[out,retval]*/)
{
  return (*this)->get_Creator(Creator);
}

template <class T> long __fastcall
TCOM_ApplicationT<T>::get_Creator(void)
{
  long Creator;
  OLECHECK(this->get_Creator((long*)&Creator));
  return Creator;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_AddIns(Powerpoint_2k::AddInsPtr* AddIns/*[out,retval]*/)
{
  return (*this)->get_AddIns(AddIns);
}

template <class T> Powerpoint_2k::AddInsPtr __fastcall
TCOM_ApplicationT<T>::get_AddIns(void)
{
  Powerpoint_2k::AddInsPtr AddIns;
  OLECHECK(this->get_AddIns((Powerpoint_2k::AddInsPtr*)&AddIns));
  return AddIns;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_VBE(Vbide_2k::VBEPtr* VBE/*[out,retval]*/)
{
  return (*this)->get_VBE(VBE);
}

template <class T> Vbide_2k::VBEPtr __fastcall
TCOM_ApplicationT<T>::get_VBE(void)
{
  Vbide_2k::VBEPtr VBE;
  OLECHECK(this->get_VBE((Vbide_2k::VBEPtr*)&VBE));
  return VBE;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::Help(BSTR HelpFile/*[in,def,opt]*/, int ContextID/*[in,def,opt]*/)
{
  return (*this)->Help(HelpFile, ContextID);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::Quit(void)
{
  return (*this)->Quit();
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::Run(BSTR MacroName/*[in]*/, LPSAFEARRAY* safeArrayOfParams/*[in]*/, 
                          TVariant* Run/*[out,retval]*/)
{
  return (*this)->Run(MacroName, safeArrayOfParams, Run);
}

template <class T> TVariant __fastcall
TCOM_ApplicationT<T>::Run(BSTR MacroName/*[in]*/, LPSAFEARRAY* safeArrayOfParams/*[in]*/)
{
  TVariant Run;
  OLECHECK(this->Run(MacroName, safeArrayOfParams, (TVariant*)&Run));
  return Run;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::FileDialog(Powerpoint_2k::PpFileDialogType Type/*[in]*/, 
                                 Powerpoint_2k::FileDialogPtr* FileDialog/*[out,retval]*/)
{
  return (*this)->FileDialog(Type, FileDialog);
}

template <class T> Powerpoint_2k::FileDialogPtr __fastcall
TCOM_ApplicationT<T>::FileDialog(Powerpoint_2k::PpFileDialogType Type/*[in]*/)
{
  Powerpoint_2k::FileDialogPtr FileDialog;
  OLECHECK(this->FileDialog(Type, (Powerpoint_2k::FileDialogPtr*)&FileDialog));
  return FileDialog;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::LaunchSpelling(Powerpoint_2k::DocumentWindowPtr pWindow/*[in]*/)
{
  return (*this)->LaunchSpelling(pWindow);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Left(float* Left/*[out,retval]*/)
{
  return (*this)->get_Left(Left);
}

template <class T> float __fastcall
TCOM_ApplicationT<T>::get_Left(void)
{
  float Left;
  OLECHECK(this->get_Left((float*)&Left));
  return Left;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::set_Left(float Left/*[in]*/)
{
  return (*this)->set_Left(Left);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Top(float* Top/*[out,retval]*/)
{
  return (*this)->get_Top(Top);
}

template <class T> float __fastcall
TCOM_ApplicationT<T>::get_Top(void)
{
  float Top;
  OLECHECK(this->get_Top((float*)&Top));
  return Top;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::set_Top(float Top/*[in]*/)
{
  return (*this)->set_Top(Top);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Width(float* Width/*[out,retval]*/)
{
  return (*this)->get_Width(Width);
}

template <class T> float __fastcall
TCOM_ApplicationT<T>::get_Width(void)
{
  float Width;
  OLECHECK(this->get_Width((float*)&Width));
  return Width;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::set_Width(float Width/*[in]*/)
{
  return (*this)->set_Width(Width);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Height(float* Height/*[out,retval]*/)
{
  return (*this)->get_Height(Height);
}

template <class T> float __fastcall
TCOM_ApplicationT<T>::get_Height(void)
{
  float Height;
  OLECHECK(this->get_Height((float*)&Height));
  return Height;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::set_Height(float Height/*[in]*/)
{
  return (*this)->set_Height(Height);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_WindowState(Powerpoint_2k::PpWindowState* WindowState/*[out,retval]*/)
{
  return (*this)->get_WindowState(WindowState);
}

template <class T> Powerpoint_2k::PpWindowState __fastcall
TCOM_ApplicationT<T>::get_WindowState(void)
{
  Powerpoint_2k::PpWindowState WindowState;
  OLECHECK(this->get_WindowState((Powerpoint_2k::PpWindowState*)&WindowState));
  return WindowState;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::set_WindowState(Powerpoint_2k::PpWindowState WindowState/*[in]*/)
{
  return (*this)->set_WindowState(WindowState);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/)
{
  return (*this)->get_Visible(Visible);
}

template <class T> Office_2k::MsoTriState __fastcall
TCOM_ApplicationT<T>::get_Visible(void)
{
  Office_2k::MsoTriState Visible;
  OLECHECK(this->get_Visible((Office_2k::MsoTriState*)&Visible));
  return Visible;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::set_Visible(Office_2k::MsoTriState Visible/*[in]*/)
{
  return (*this)->set_Visible(Visible);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_HWND(long* HWND/*[out,retval]*/)
{
  return (*this)->get_HWND(HWND);
}

template <class T> long __fastcall
TCOM_ApplicationT<T>::get_HWND(void)
{
  long HWND;
  OLECHECK(this->get_HWND((long*)&HWND));
  return HWND;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Active(Office_2k::MsoTriState* Active/*[out,retval]*/)
{
  return (*this)->get_Active(Active);
}

template <class T> Office_2k::MsoTriState __fastcall
TCOM_ApplicationT<T>::get_Active(void)
{
  Office_2k::MsoTriState Active;
  OLECHECK(this->get_Active((Office_2k::MsoTriState*)&Active));
  return Active;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::Activate(void)
{
  return (*this)->Activate();
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_AnswerWizard(Office_2k::AnswerWizardPtr* AnswerWizard/*[out,retval]*/)
{
  return (*this)->get_AnswerWizard(AnswerWizard);
}

template <class T> Office_2k::AnswerWizardPtr __fastcall
TCOM_ApplicationT<T>::get_AnswerWizard(void)
{
  Office_2k::AnswerWizardPtr AnswerWizard;
  OLECHECK(this->get_AnswerWizard((Office_2k::AnswerWizardPtr*)&AnswerWizard));
  return AnswerWizard;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_COMAddIns(Office_2k::COMAddInsPtr* COMAddIns/*[out,retval]*/)
{
  return (*this)->get_COMAddIns(COMAddIns);
}

template <class T> Office_2k::COMAddInsPtr __fastcall
TCOM_ApplicationT<T>::get_COMAddIns(void)
{
  Office_2k::COMAddInsPtr COMAddIns;
  OLECHECK(this->get_COMAddIns((Office_2k::COMAddInsPtr*)&COMAddIns));
  return COMAddIns;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_ProductCode(BSTR* ProductCode/*[out,retval]*/)
{
  return (*this)->get_ProductCode(ProductCode);
}

template <class T> BSTR __fastcall
TCOM_ApplicationT<T>::get_ProductCode(void)
{
  BSTR ProductCode = 0;
  OLECHECK(this->get_ProductCode((BSTR*)&ProductCode));
  return ProductCode;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_DefaultWebOptions(Powerpoint_2k::DefaultWebOptionsPtr* DefaultWebOptions/*[out,retval]*/)
{
  return (*this)->get_DefaultWebOptions(DefaultWebOptions);
}

template <class T> Powerpoint_2k::DefaultWebOptionsPtr __fastcall
TCOM_ApplicationT<T>::get_DefaultWebOptions(void)
{
  Powerpoint_2k::DefaultWebOptionsPtr DefaultWebOptions;
  OLECHECK(this->get_DefaultWebOptions((Powerpoint_2k::DefaultWebOptionsPtr*)&DefaultWebOptions));
  return DefaultWebOptions;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_LanguageSettings(Office_2k::LanguageSettingsPtr* LanguageSettings/*[out,retval]*/)
{
  return (*this)->get_LanguageSettings(LanguageSettings);
}

template <class T> Office_2k::LanguageSettingsPtr __fastcall
TCOM_ApplicationT<T>::get_LanguageSettings(void)
{
  Office_2k::LanguageSettingsPtr LanguageSettings;
  OLECHECK(this->get_LanguageSettings((Office_2k::LanguageSettingsPtr*)&LanguageSettings));
  return LanguageSettings;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_MsoDebugOptions(Office_2k::MsoDebugOptionsPtr* MsoDebugOptions/*[out,retval]*/)
{
  return (*this)->get_MsoDebugOptions(MsoDebugOptions);
}

template <class T> Office_2k::MsoDebugOptionsPtr __fastcall
TCOM_ApplicationT<T>::get_MsoDebugOptions(void)
{
  Office_2k::MsoDebugOptionsPtr MsoDebugOptions;
  OLECHECK(this->get_MsoDebugOptions((Office_2k::MsoDebugOptionsPtr*)&MsoDebugOptions));
  return MsoDebugOptions;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_ShowWindowsInTaskbar(Office_2k::MsoTriState* ShowWindowsInTaskbar/*[out,retval]*/)
{
  return (*this)->get_ShowWindowsInTaskbar(ShowWindowsInTaskbar);
}

template <class T> Office_2k::MsoTriState __fastcall
TCOM_ApplicationT<T>::get_ShowWindowsInTaskbar(void)
{
  Office_2k::MsoTriState ShowWindowsInTaskbar;
  OLECHECK(this->get_ShowWindowsInTaskbar((Office_2k::MsoTriState*)&ShowWindowsInTaskbar));
  return ShowWindowsInTaskbar;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::set_ShowWindowsInTaskbar(Office_2k::MsoTriState ShowWindowsInTaskbar/*[in]*/)
{
  return (*this)->set_ShowWindowsInTaskbar(ShowWindowsInTaskbar);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Marker(Powerpoint_2k::MarkerPtr* Marker/*[out,retval]*/)
{
  return (*this)->get_Marker(Marker);
}

template <class T> Powerpoint_2k::MarkerPtr __fastcall
TCOM_ApplicationT<T>::get_Marker(void)
{
  Powerpoint_2k::MarkerPtr Marker;
  OLECHECK(this->get_Marker((Powerpoint_2k::MarkerPtr*)&Marker));
  return Marker;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_FeatureInstall(Office_2k::MsoFeatureInstall* FeatureInstall/*[out,retval]*/)
{
  return (*this)->get_FeatureInstall(FeatureInstall);
}

template <class T> Office_2k::MsoFeatureInstall __fastcall
TCOM_ApplicationT<T>::get_FeatureInstall(void)
{
  Office_2k::MsoFeatureInstall FeatureInstall;
  OLECHECK(this->get_FeatureInstall((Office_2k::MsoFeatureInstall*)&FeatureInstall));
  return FeatureInstall;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::set_FeatureInstall(Office_2k::MsoFeatureInstall FeatureInstall/*[in]*/)
{
  return (*this)->set_FeatureInstall(FeatureInstall);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::GetOptionFlag(long Option/*[in]*/, TOLEBOOL Persist/*[in,def,opt]*/, 
                                    TOLEBOOL* GetOptionFlag/*[out,retval]*/)
{
  return (*this)->GetOptionFlag(Option, Persist, GetOptionFlag);
}

template <class T> TOLEBOOL __fastcall
TCOM_ApplicationT<T>::GetOptionFlag(long Option/*[in]*/, TOLEBOOL Persist/*[in,def,opt]*/)
{
  TOLEBOOL GetOptionFlag;
  OLECHECK(this->GetOptionFlag(Option, Persist, (TOLEBOOL*)&GetOptionFlag));
  return GetOptionFlag;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::SetOptionFlag(long Option/*[in]*/, TOLEBOOL State/*[in]*/, 
                                    TOLEBOOL Persist/*[in,def,opt]*/)
{
  return (*this)->SetOptionFlag(Option, State, Persist);
}

// *********************************************************************//
// DispIntf:  _Application
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493442-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_Presentations(Powerpoint_2k::PresentationsPtr* Presentations/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Presentations"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Presentations**)Presentations /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PresentationsPtr __fastcall
_ApplicationDispT<T>::get_Presentations(void)
{
  Powerpoint_2k::PresentationsPtr Presentations;
  this->get_Presentations((Powerpoint_2k::PresentationsPtr*)&Presentations);
  return Presentations;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_Windoz(Powerpoint_2k::DocumentWindowsPtr* Windoz/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Windows"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::DocumentWindows**)Windows /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::DocumentWindowsPtr __fastcall
_ApplicationDispT<T>::get_Windoz(void)
{
  Powerpoint_2k::DocumentWindowsPtr Windows;
  this->get_Windoz((Powerpoint_2k::DocumentWindowsPtr*)&Windows);
  return Windows;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_Dialogs(Powerpoint_2k::PPDialogsPtr* Dialogs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Dialogs"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PPDialogs**)Dialogs /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PPDialogsPtr __fastcall
_ApplicationDispT<T>::get_Dialogs(void)
{
  Powerpoint_2k::PPDialogsPtr Dialogs;
  this->get_Dialogs((Powerpoint_2k::PPDialogsPtr*)&Dialogs);
  return Dialogs;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_ActiveWindow(Powerpoint_2k::DocumentWindowPtr* ActiveWindow/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveWindow"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::DocumentWindow**)ActiveWindow /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::DocumentWindowPtr __fastcall
_ApplicationDispT<T>::get_ActiveWindow(void)
{
  Powerpoint_2k::DocumentWindowPtr ActiveWindow;
  this->get_ActiveWindow((Powerpoint_2k::DocumentWindowPtr*)&ActiveWindow);
  return ActiveWindow;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_ActivePresentation(Powerpoint_2k::PowerPointPresentationPtr* ActivePresentation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActivePresentation"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointPresentation**)ActivePresentation /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointPresentationPtr __fastcall
_ApplicationDispT<T>::get_ActivePresentation(void)
{
  Powerpoint_2k::PowerPointPresentationPtr ActivePresentation;
  this->get_ActivePresentation((Powerpoint_2k::PowerPointPresentationPtr*)&ActivePresentation);
  return ActivePresentation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_SlideShowWindows(Powerpoint_2k::SlideShowWindowsPtr* SlideShowWindows/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideShowWindows"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::SlideShowWindows**)SlideShowWindows /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::SlideShowWindowsPtr __fastcall
_ApplicationDispT<T>::get_SlideShowWindows(void)
{
  Powerpoint_2k::SlideShowWindowsPtr SlideShowWindows;
  this->get_SlideShowWindows((Powerpoint_2k::SlideShowWindowsPtr*)&SlideShowWindows);
  return SlideShowWindows;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_CommandBars(Office_2k::CommandBarsPtr* CommandBars/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CommandBars"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::CommandBars**)CommandBars /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::CommandBarsPtr __fastcall
_ApplicationDispT<T>::get_CommandBars(void)
{
  Office_2k::CommandBarsPtr CommandBars;
  this->get_CommandBars((Office_2k::CommandBarsPtr*)&CommandBars);
  return CommandBars;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_Path(BSTR* Path/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Path"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Path /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ApplicationDispT<T>::get_Path(void)
{
  BSTR Path;
  this->get_Path((BSTR*)&Path);
  return Path;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ApplicationDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_Caption(BSTR* Caption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Caption /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ApplicationDispT<T>::get_Caption(void)
{
  BSTR Caption;
  this->get_Caption((BSTR*)&Caption);
  return Caption;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::set_Caption(BSTR Caption/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(2009));
  TAutoArgs<1> _args;
  _args[1] = Caption /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_Assistant(Office_2k::AssistantPtr* Assistant/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Assistant"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::Assistant**)Assistant /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::AssistantPtr __fastcall
_ApplicationDispT<T>::get_Assistant(void)
{
  Office_2k::AssistantPtr Assistant;
  this->get_Assistant((Office_2k::AssistantPtr*)&Assistant);
  return Assistant;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_FileSearch(Office_2k::FileSearchPtr* FileSearch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileSearch"), DISPID(2011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::FileSearch**)FileSearch /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::FileSearchPtr __fastcall
_ApplicationDispT<T>::get_FileSearch(void)
{
  Office_2k::FileSearchPtr FileSearch;
  this->get_FileSearch((Office_2k::FileSearchPtr*)&FileSearch);
  return FileSearch;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_FileFind(Office_2k::IFindPtr* FileFind/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileFind"), DISPID(2012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::IFind**)FileFind /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::IFindPtr __fastcall
_ApplicationDispT<T>::get_FileFind(void)
{
  Office_2k::IFindPtr FileFind;
  this->get_FileFind((Office_2k::IFindPtr*)&FileFind);
  return FileFind;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_Build(BSTR* Build/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Build"), DISPID(2013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Build /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ApplicationDispT<T>::get_Build(void)
{
  BSTR Build;
  this->get_Build((BSTR*)&Build);
  return Build;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_Version(BSTR* Version/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(2014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Version /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ApplicationDispT<T>::get_Version(void)
{
  BSTR Version;
  this->get_Version((BSTR*)&Version);
  return Version;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_OperatingSystem(BSTR* OperatingSystem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OperatingSystem"), DISPID(2015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OperatingSystem /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ApplicationDispT<T>::get_OperatingSystem(void)
{
  BSTR OperatingSystem;
  this->get_OperatingSystem((BSTR*)&OperatingSystem);
  return OperatingSystem;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_ActivePrinter(BSTR* ActivePrinter/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActivePrinter"), DISPID(2016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ActivePrinter /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ApplicationDispT<T>::get_ActivePrinter(void)
{
  BSTR ActivePrinter;
  this->get_ActivePrinter((BSTR*)&ActivePrinter);
  return ActivePrinter;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_Creator(long* Creator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(2017));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Creator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ApplicationDispT<T>::get_Creator(void)
{
  long Creator;
  this->get_Creator((long*)&Creator);
  return Creator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_AddIns(Powerpoint_2k::AddInsPtr* AddIns/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddIns"), DISPID(2018));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::AddIns**)AddIns /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::AddInsPtr __fastcall
_ApplicationDispT<T>::get_AddIns(void)
{
  Powerpoint_2k::AddInsPtr AddIns;
  this->get_AddIns((Powerpoint_2k::AddInsPtr*)&AddIns);
  return AddIns;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_VBE(Vbide_2k::VBEPtr* VBE/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VBE"), DISPID(2019));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_2k::VBE**)VBE /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_2k::VBEPtr __fastcall
_ApplicationDispT<T>::get_VBE(void)
{
  Vbide_2k::VBEPtr VBE;
  this->get_VBE((Vbide_2k::VBEPtr*)&VBE);
  return VBE;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::Help(BSTR HelpFile/*[in,def,opt]*/, int ContextID/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Help"), DISPID(2020));
  TAutoArgs<2> _args;
  _args[1] = HelpFile /*[VT_BSTR:0]*/;
  _args[2] = ContextID /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::Quit()
{
  _TDispID _dispid(*this, OLETEXT("Quit"), DISPID(2021));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::Run(BSTR MacroName/*[in]*/, LPSAFEARRAY* safeArrayOfParams/*[in]*/, 
                          TVariant* Run/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Run"), DISPID(2022));
  TAutoArgs<2> _args;
  _args[1] = MacroName /*[VT_BSTR:0]*/;
  _args[2] = safeArrayOfParams /*[VT_SAFEARRAY:1]*/;
  return OutRetValSetterPtr(Run /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_ApplicationDispT<T>::Run(BSTR MacroName/*[in]*/, LPSAFEARRAY* safeArrayOfParams/*[in]*/)
{
  TVariant Run;
  this->Run(MacroName, safeArrayOfParams, (TVariant*)&Run);
  return Run;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::FileDialog(Powerpoint_2k::PpFileDialogType Type/*[in]*/, 
                                 Powerpoint_2k::FileDialogPtr* FileDialog/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileDialog"), DISPID(2023));
  TAutoArgs<1> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::FileDialog**)FileDialog /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::FileDialogPtr __fastcall
_ApplicationDispT<T>::FileDialog(Powerpoint_2k::PpFileDialogType Type/*[in]*/)
{
  Powerpoint_2k::FileDialogPtr FileDialog;
  this->FileDialog(Type, (Powerpoint_2k::FileDialogPtr*)&FileDialog);
  return FileDialog;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::LaunchSpelling(Powerpoint_2k::DocumentWindowPtr pWindow/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LaunchSpelling"), DISPID(2024));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Powerpoint_2k::DocumentWindow*)pWindow /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_Left(float* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(2025));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
_ApplicationDispT<T>::get_Left(void)
{
  float Left;
  this->get_Left((float*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::set_Left(float Left/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(2025));
  TAutoArgs<1> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_Top(float* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(2026));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
_ApplicationDispT<T>::get_Top(void)
{
  float Top;
  this->get_Top((float*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::set_Top(float Top/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(2026));
  TAutoArgs<1> _args;
  _args[1] = Top /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_Width(float* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(2027));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
_ApplicationDispT<T>::get_Width(void)
{
  float Width;
  this->get_Width((float*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::set_Width(float Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(2027));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_Height(float* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(2028));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
_ApplicationDispT<T>::get_Height(void)
{
  float Height;
  this->get_Height((float*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::set_Height(float Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(2028));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_WindowState(Powerpoint_2k::PpWindowState* WindowState/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WindowState"), DISPID(2029));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)WindowState /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpWindowState __fastcall
_ApplicationDispT<T>::get_WindowState(void)
{
  Powerpoint_2k::PpWindowState WindowState;
  this->get_WindowState((Powerpoint_2k::PpWindowState*)&WindowState);
  return WindowState;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::set_WindowState(Powerpoint_2k::PpWindowState WindowState/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WindowState"), DISPID(2029));
  TAutoArgs<1> _args;
  _args[1] = (int)WindowState /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(2030));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
_ApplicationDispT<T>::get_Visible(void)
{
  Office_2k::MsoTriState Visible;
  this->get_Visible((Office_2k::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::set_Visible(Office_2k::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(2030));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_HWND(long* HWND/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HWND"), DISPID(2031));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HWND /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ApplicationDispT<T>::get_HWND(void)
{
  long HWND;
  this->get_HWND((long*)&HWND);
  return HWND;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_Active(Office_2k::MsoTriState* Active/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(2032));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Active /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
_ApplicationDispT<T>::get_Active(void)
{
  Office_2k::MsoTriState Active;
  this->get_Active((Office_2k::MsoTriState*)&Active);
  return Active;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::Activate()
{
  _TDispID _dispid(*this, OLETEXT("Activate"), DISPID(2033));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_AnswerWizard(Office_2k::AnswerWizardPtr* AnswerWizard/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AnswerWizard"), DISPID(2034));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::AnswerWizard**)AnswerWizard /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::AnswerWizardPtr __fastcall
_ApplicationDispT<T>::get_AnswerWizard(void)
{
  Office_2k::AnswerWizardPtr AnswerWizard;
  this->get_AnswerWizard((Office_2k::AnswerWizardPtr*)&AnswerWizard);
  return AnswerWizard;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_COMAddIns(Office_2k::COMAddInsPtr* COMAddIns/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("COMAddIns"), DISPID(2035));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::COMAddIns**)COMAddIns /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::COMAddInsPtr __fastcall
_ApplicationDispT<T>::get_COMAddIns(void)
{
  Office_2k::COMAddInsPtr COMAddIns;
  this->get_COMAddIns((Office_2k::COMAddInsPtr*)&COMAddIns);
  return COMAddIns;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_ProductCode(BSTR* ProductCode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ProductCode"), DISPID(2036));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ProductCode /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ApplicationDispT<T>::get_ProductCode(void)
{
  BSTR ProductCode;
  this->get_ProductCode((BSTR*)&ProductCode);
  return ProductCode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_DefaultWebOptions(Powerpoint_2k::DefaultWebOptionsPtr* DefaultWebOptions/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultWebOptions"), DISPID(2037));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::DefaultWebOptions**)DefaultWebOptions /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::DefaultWebOptionsPtr __fastcall
_ApplicationDispT<T>::get_DefaultWebOptions(void)
{
  Powerpoint_2k::DefaultWebOptionsPtr DefaultWebOptions;
  this->get_DefaultWebOptions((Powerpoint_2k::DefaultWebOptionsPtr*)&DefaultWebOptions);
  return DefaultWebOptions;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_LanguageSettings(Office_2k::LanguageSettingsPtr* LanguageSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LanguageSettings"), DISPID(2038));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::LanguageSettings**)LanguageSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::LanguageSettingsPtr __fastcall
_ApplicationDispT<T>::get_LanguageSettings(void)
{
  Office_2k::LanguageSettingsPtr LanguageSettings;
  this->get_LanguageSettings((Office_2k::LanguageSettingsPtr*)&LanguageSettings);
  return LanguageSettings;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_MsoDebugOptions(Office_2k::MsoDebugOptionsPtr* MsoDebugOptions/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MsoDebugOptions"), DISPID(2039));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::MsoDebugOptions**)MsoDebugOptions /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoDebugOptionsPtr __fastcall
_ApplicationDispT<T>::get_MsoDebugOptions(void)
{
  Office_2k::MsoDebugOptionsPtr MsoDebugOptions;
  this->get_MsoDebugOptions((Office_2k::MsoDebugOptionsPtr*)&MsoDebugOptions);
  return MsoDebugOptions;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_ShowWindowsInTaskbar(Office_2k::MsoTriState* ShowWindowsInTaskbar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowWindowsInTaskbar"), DISPID(2040));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ShowWindowsInTaskbar /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
_ApplicationDispT<T>::get_ShowWindowsInTaskbar(void)
{
  Office_2k::MsoTriState ShowWindowsInTaskbar;
  this->get_ShowWindowsInTaskbar((Office_2k::MsoTriState*)&ShowWindowsInTaskbar);
  return ShowWindowsInTaskbar;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::set_ShowWindowsInTaskbar(Office_2k::MsoTriState ShowWindowsInTaskbar/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowWindowsInTaskbar"), DISPID(2040));
  TAutoArgs<1> _args;
  _args[1] = (int)ShowWindowsInTaskbar /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_Marker(Powerpoint_2k::MarkerPtr* Marker/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Marker"), DISPID(2041));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Marker**)Marker /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::MarkerPtr __fastcall
_ApplicationDispT<T>::get_Marker(void)
{
  Powerpoint_2k::MarkerPtr Marker;
  this->get_Marker((Powerpoint_2k::MarkerPtr*)&Marker);
  return Marker;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_FeatureInstall(Office_2k::MsoFeatureInstall* FeatureInstall/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FeatureInstall"), DISPID(2042));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)FeatureInstall /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoFeatureInstall __fastcall
_ApplicationDispT<T>::get_FeatureInstall(void)
{
  Office_2k::MsoFeatureInstall FeatureInstall;
  this->get_FeatureInstall((Office_2k::MsoFeatureInstall*)&FeatureInstall);
  return FeatureInstall;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::set_FeatureInstall(Office_2k::MsoFeatureInstall FeatureInstall/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FeatureInstall"), DISPID(2042));
  TAutoArgs<1> _args;
  _args[1] = (int)FeatureInstall /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::GetOptionFlag(long Option/*[in]*/, TOLEBOOL Persist/*[in,def,opt]*/, 
                                    TOLEBOOL* GetOptionFlag/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetOptionFlag"), DISPID(2043));
  TAutoArgs<2> _args;
  _args[1] = Option /*[VT_I4:0]*/;
  _args[2] = Persist /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr(GetOptionFlag /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ApplicationDispT<T>::GetOptionFlag(long Option/*[in]*/, TOLEBOOL Persist/*[in,def,opt]*/)
{
  TOLEBOOL GetOptionFlag;
  this->GetOptionFlag(Option, Persist, (TOLEBOOL*)&GetOptionFlag);
  return GetOptionFlag;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::SetOptionFlag(long Option/*[in]*/, TOLEBOOL State/*[in]*/, 
                                    TOLEBOOL Persist/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetOptionFlag"), DISPID(2044));
  TAutoArgs<3> _args;
  _args[1] = Option /*[VT_I4:0]*/;
  _args[2] = State /*[VT_BOOL:0]*/;
  _args[3] = Persist /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOM_Global
// Interface: _Global
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_GlobalT<T>::get_ActivePresentation(Powerpoint_2k::PowerPointPresentationPtr* ActivePresentation/*[out,retval]*/)
{
  return (*this)->get_ActivePresentation(ActivePresentation);
}

template <class T> Powerpoint_2k::PowerPointPresentationPtr __fastcall
TCOM_GlobalT<T>::get_ActivePresentation(void)
{
  Powerpoint_2k::PowerPointPresentationPtr ActivePresentation;
  OLECHECK(this->get_ActivePresentation((Powerpoint_2k::PowerPointPresentationPtr*)&ActivePresentation));
  return ActivePresentation;
}

template <class T> HRESULT __fastcall
TCOM_GlobalT<T>::get_ActiveWindow(Powerpoint_2k::DocumentWindowPtr* ActiveWindow/*[out,retval]*/)
{
  return (*this)->get_ActiveWindow(ActiveWindow);
}

template <class T> Powerpoint_2k::DocumentWindowPtr __fastcall
TCOM_GlobalT<T>::get_ActiveWindow(void)
{
  Powerpoint_2k::DocumentWindowPtr ActiveWindow;
  OLECHECK(this->get_ActiveWindow((Powerpoint_2k::DocumentWindowPtr*)&ActiveWindow));
  return ActiveWindow;
}

template <class T> HRESULT __fastcall
TCOM_GlobalT<T>::get_AddIns(Powerpoint_2k::AddInsPtr* AddIns/*[out,retval]*/)
{
  return (*this)->get_AddIns(AddIns);
}

template <class T> Powerpoint_2k::AddInsPtr __fastcall
TCOM_GlobalT<T>::get_AddIns(void)
{
  Powerpoint_2k::AddInsPtr AddIns;
  OLECHECK(this->get_AddIns((Powerpoint_2k::AddInsPtr*)&AddIns));
  return AddIns;
}

template <class T> HRESULT __fastcall
TCOM_GlobalT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  return (*this)->get_Application(Application);
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
TCOM_GlobalT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
  return Application;
}

template <class T> HRESULT __fastcall
TCOM_GlobalT<T>::get_Assistant(Office_2k::AssistantPtr* Assistant/*[out,retval]*/)
{
  return (*this)->get_Assistant(Assistant);
}

template <class T> Office_2k::AssistantPtr __fastcall
TCOM_GlobalT<T>::get_Assistant(void)
{
  Office_2k::AssistantPtr Assistant;
  OLECHECK(this->get_Assistant((Office_2k::AssistantPtr*)&Assistant));
  return Assistant;
}

template <class T> HRESULT __fastcall
TCOM_GlobalT<T>::get_Dialogs(Powerpoint_2k::PPDialogsPtr* Dialogs/*[out,retval]*/)
{
  return (*this)->get_Dialogs(Dialogs);
}

template <class T> Powerpoint_2k::PPDialogsPtr __fastcall
TCOM_GlobalT<T>::get_Dialogs(void)
{
  Powerpoint_2k::PPDialogsPtr Dialogs;
  OLECHECK(this->get_Dialogs((Powerpoint_2k::PPDialogsPtr*)&Dialogs));
  return Dialogs;
}

template <class T> HRESULT __fastcall
TCOM_GlobalT<T>::get_Presentations(Powerpoint_2k::PresentationsPtr* Presentations/*[out,retval]*/)
{
  return (*this)->get_Presentations(Presentations);
}

template <class T> Powerpoint_2k::PresentationsPtr __fastcall
TCOM_GlobalT<T>::get_Presentations(void)
{
  Powerpoint_2k::PresentationsPtr Presentations;
  OLECHECK(this->get_Presentations((Powerpoint_2k::PresentationsPtr*)&Presentations));
  return Presentations;
}

template <class T> HRESULT __fastcall
TCOM_GlobalT<T>::get_SlideShowWindows(Powerpoint_2k::SlideShowWindowsPtr* SlideShowWindows/*[out,retval]*/)
{
  return (*this)->get_SlideShowWindows(SlideShowWindows);
}

template <class T> Powerpoint_2k::SlideShowWindowsPtr __fastcall
TCOM_GlobalT<T>::get_SlideShowWindows(void)
{
  Powerpoint_2k::SlideShowWindowsPtr SlideShowWindows;
  OLECHECK(this->get_SlideShowWindows((Powerpoint_2k::SlideShowWindowsPtr*)&SlideShowWindows));
  return SlideShowWindows;
}

template <class T> HRESULT __fastcall
TCOM_GlobalT<T>::get_Windoz(Powerpoint_2k::DocumentWindowsPtr* Windoz/*[out,retval]*/)
{
  return (*this)->get_Windoz(Windoz);
}

template <class T> Powerpoint_2k::DocumentWindowsPtr __fastcall
TCOM_GlobalT<T>::get_Windoz(void)
{
  Powerpoint_2k::DocumentWindowsPtr Windows;
  OLECHECK(this->get_Windoz((Powerpoint_2k::DocumentWindowsPtr*)&Windows));
  return Windows;
}

template <class T> HRESULT __fastcall
TCOM_GlobalT<T>::get_CommandBars(Office_2k::CommandBarsPtr* CommandBars/*[out,retval]*/)
{
  return (*this)->get_CommandBars(CommandBars);
}

template <class T> Office_2k::CommandBarsPtr __fastcall
TCOM_GlobalT<T>::get_CommandBars(void)
{
  Office_2k::CommandBarsPtr CommandBars;
  OLECHECK(this->get_CommandBars((Office_2k::CommandBarsPtr*)&CommandBars));
  return CommandBars;
}

template <class T> HRESULT __fastcall
TCOM_GlobalT<T>::get_AnswerWizard(Office_2k::AnswerWizardPtr* AnswerWizard/*[out,retval]*/)
{
  return (*this)->get_AnswerWizard(AnswerWizard);
}

template <class T> Office_2k::AnswerWizardPtr __fastcall
TCOM_GlobalT<T>::get_AnswerWizard(void)
{
  Office_2k::AnswerWizardPtr AnswerWizard;
  OLECHECK(this->get_AnswerWizard((Office_2k::AnswerWizardPtr*)&AnswerWizard));
  return AnswerWizard;
}

// *********************************************************************//
// DispIntf:  _Global
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493451-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_GlobalDispT<T>::get_ActivePresentation(Powerpoint_2k::PowerPointPresentationPtr* ActivePresentation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActivePresentation"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointPresentation**)ActivePresentation /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointPresentationPtr __fastcall
_GlobalDispT<T>::get_ActivePresentation(void)
{
  Powerpoint_2k::PowerPointPresentationPtr ActivePresentation;
  this->get_ActivePresentation((Powerpoint_2k::PowerPointPresentationPtr*)&ActivePresentation);
  return ActivePresentation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_GlobalDispT<T>::get_ActiveWindow(Powerpoint_2k::DocumentWindowPtr* ActiveWindow/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveWindow"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::DocumentWindow**)ActiveWindow /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::DocumentWindowPtr __fastcall
_GlobalDispT<T>::get_ActiveWindow(void)
{
  Powerpoint_2k::DocumentWindowPtr ActiveWindow;
  this->get_ActiveWindow((Powerpoint_2k::DocumentWindowPtr*)&ActiveWindow);
  return ActiveWindow;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_GlobalDispT<T>::get_AddIns(Powerpoint_2k::AddInsPtr* AddIns/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddIns"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::AddIns**)AddIns /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::AddInsPtr __fastcall
_GlobalDispT<T>::get_AddIns(void)
{
  Powerpoint_2k::AddInsPtr AddIns;
  this->get_AddIns((Powerpoint_2k::AddInsPtr*)&AddIns);
  return AddIns;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_GlobalDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
_GlobalDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_GlobalDispT<T>::get_Assistant(Office_2k::AssistantPtr* Assistant/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Assistant"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::Assistant**)Assistant /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::AssistantPtr __fastcall
_GlobalDispT<T>::get_Assistant(void)
{
  Office_2k::AssistantPtr Assistant;
  this->get_Assistant((Office_2k::AssistantPtr*)&Assistant);
  return Assistant;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_GlobalDispT<T>::get_Dialogs(Powerpoint_2k::PPDialogsPtr* Dialogs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Dialogs"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PPDialogs**)Dialogs /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PPDialogsPtr __fastcall
_GlobalDispT<T>::get_Dialogs(void)
{
  Powerpoint_2k::PPDialogsPtr Dialogs;
  this->get_Dialogs((Powerpoint_2k::PPDialogsPtr*)&Dialogs);
  return Dialogs;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_GlobalDispT<T>::get_Presentations(Powerpoint_2k::PresentationsPtr* Presentations/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Presentations"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Presentations**)Presentations /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PresentationsPtr __fastcall
_GlobalDispT<T>::get_Presentations(void)
{
  Powerpoint_2k::PresentationsPtr Presentations;
  this->get_Presentations((Powerpoint_2k::PresentationsPtr*)&Presentations);
  return Presentations;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_GlobalDispT<T>::get_SlideShowWindows(Powerpoint_2k::SlideShowWindowsPtr* SlideShowWindows/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideShowWindows"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::SlideShowWindows**)SlideShowWindows /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::SlideShowWindowsPtr __fastcall
_GlobalDispT<T>::get_SlideShowWindows(void)
{
  Powerpoint_2k::SlideShowWindowsPtr SlideShowWindows;
  this->get_SlideShowWindows((Powerpoint_2k::SlideShowWindowsPtr*)&SlideShowWindows);
  return SlideShowWindows;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_GlobalDispT<T>::get_Windoz(Powerpoint_2k::DocumentWindowsPtr* Windoz/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Windows"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::DocumentWindows**)Windows /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::DocumentWindowsPtr __fastcall
_GlobalDispT<T>::get_Windoz(void)
{
  Powerpoint_2k::DocumentWindowsPtr Windows;
  this->get_Windoz((Powerpoint_2k::DocumentWindowsPtr*)&Windows);
  return Windows;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_GlobalDispT<T>::get_CommandBars(Office_2k::CommandBarsPtr* CommandBars/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CommandBars"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::CommandBars**)CommandBars /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::CommandBarsPtr __fastcall
_GlobalDispT<T>::get_CommandBars(void)
{
  Office_2k::CommandBarsPtr CommandBars;
  this->get_CommandBars((Office_2k::CommandBarsPtr*)&CommandBars);
  return CommandBars;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_GlobalDispT<T>::get_AnswerWizard(Office_2k::AnswerWizardPtr* AnswerWizard/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AnswerWizard"), DISPID(2011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::AnswerWizard**)AnswerWizard /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::AnswerWizardPtr __fastcall
_GlobalDispT<T>::get_AnswerWizard(void)
{
  Office_2k::AnswerWizardPtr AnswerWizard;
  this->get_AnswerWizard((Office_2k::AnswerWizardPtr*)&AnswerWizard);
  return AnswerWizard;
}

// *********************************************************************//
// DispIntf:  ColorFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493452-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorFormatDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ColorFormatDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorFormatDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ColorFormatDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorFormatDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ColorFormatDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorFormatDispT<T>::get_rgb(Office_2k::MsoRGBType* rgb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RGB"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RGB /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoRGBType __fastcall
ColorFormatDispT<T>::get_rgb(void)
{
  Office_2k::MsoRGBType RGB;
  this->get_rgb((Office_2k::MsoRGBType*)&RGB);
  return RGB;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorFormatDispT<T>::set_rgb(Office_2k::MsoRGBType rgb/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RGB"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = RGB /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorFormatDispT<T>::get_Type(Office_2k::MsoColorType* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoColorType __fastcall
ColorFormatDispT<T>::get_Type(void)
{
  Office_2k::MsoColorType Type;
  this->get_Type((Office_2k::MsoColorType*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorFormatDispT<T>::get_SchemeColor(Powerpoint_2k::PpColorSchemeIndex* SchemeColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SchemeColor"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)SchemeColor /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpColorSchemeIndex __fastcall
ColorFormatDispT<T>::get_SchemeColor(void)
{
  Powerpoint_2k::PpColorSchemeIndex SchemeColor;
  this->get_SchemeColor((Powerpoint_2k::PpColorSchemeIndex*)&SchemeColor);
  return SchemeColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorFormatDispT<T>::set_SchemeColor(Powerpoint_2k::PpColorSchemeIndex SchemeColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SchemeColor"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = (int)SchemeColor /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  SlideShowWindow
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493453-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowWindowDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
SlideShowWindowDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowWindowDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
SlideShowWindowDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowWindowDispT<T>::get_View(Powerpoint_2k::SlideShowViewPtr* View/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("View"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::SlideShowView**)View /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::SlideShowViewPtr __fastcall
SlideShowWindowDispT<T>::get_View(void)
{
  Powerpoint_2k::SlideShowViewPtr View;
  this->get_View((Powerpoint_2k::SlideShowViewPtr*)&View);
  return View;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowWindowDispT<T>::get_Presentation(Powerpoint_2k::PowerPointPresentationPtr* Presentation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Presentation"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointPresentation**)Presentation /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointPresentationPtr __fastcall
SlideShowWindowDispT<T>::get_Presentation(void)
{
  Powerpoint_2k::PowerPointPresentationPtr Presentation;
  this->get_Presentation((Powerpoint_2k::PowerPointPresentationPtr*)&Presentation);
  return Presentation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowWindowDispT<T>::get_IsFullScreen(Office_2k::MsoTriState* IsFullScreen/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsFullScreen"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)IsFullScreen /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
SlideShowWindowDispT<T>::get_IsFullScreen(void)
{
  Office_2k::MsoTriState IsFullScreen;
  this->get_IsFullScreen((Office_2k::MsoTriState*)&IsFullScreen);
  return IsFullScreen;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowWindowDispT<T>::get_Left(float* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
SlideShowWindowDispT<T>::get_Left(void)
{
  float Left;
  this->get_Left((float*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowWindowDispT<T>::set_Left(float Left/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowWindowDispT<T>::get_Top(float* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
SlideShowWindowDispT<T>::get_Top(void)
{
  float Top;
  this->get_Top((float*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowWindowDispT<T>::set_Top(float Top/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = Top /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowWindowDispT<T>::get_Width(float* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
SlideShowWindowDispT<T>::get_Width(void)
{
  float Width;
  this->get_Width((float*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowWindowDispT<T>::set_Width(float Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(2008));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowWindowDispT<T>::get_Height(float* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
SlideShowWindowDispT<T>::get_Height(void)
{
  float Height;
  this->get_Height((float*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowWindowDispT<T>::set_Height(float Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(2009));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowWindowDispT<T>::get_HWND(long* HWND/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HWND"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HWND /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
SlideShowWindowDispT<T>::get_HWND(void)
{
  long HWND;
  this->get_HWND((long*)&HWND);
  return HWND;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowWindowDispT<T>::get_Active(Office_2k::MsoTriState* Active/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(2011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Active /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
SlideShowWindowDispT<T>::get_Active(void)
{
  Office_2k::MsoTriState Active;
  this->get_Active((Office_2k::MsoTriState*)&Active);
  return Active;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowWindowDispT<T>::Activate()
{
  _TDispID _dispid(*this, OLETEXT("Activate"), DISPID(2012));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  Selection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493454-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SelectionDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
SelectionDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SelectionDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
SelectionDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SelectionDispT<T>::Cut()
{
  _TDispID _dispid(*this, OLETEXT("Cut"), DISPID(2003));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SelectionDispT<T>::Copy()
{
  _TDispID _dispid(*this, OLETEXT("Copy"), DISPID(2004));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SelectionDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(2005));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SelectionDispT<T>::Unselect()
{
  _TDispID _dispid(*this, OLETEXT("Unselect"), DISPID(2006));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SelectionDispT<T>::get_Type(Powerpoint_2k::PpSelectionType* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpSelectionType __fastcall
SelectionDispT<T>::get_Type(void)
{
  Powerpoint_2k::PpSelectionType Type;
  this->get_Type((Powerpoint_2k::PpSelectionType*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SelectionDispT<T>::get_SlideRange(Powerpoint_2k::SlideRangePtr* SlideRange/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideRange"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::SlideRange**)SlideRange /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::SlideRangePtr __fastcall
SelectionDispT<T>::get_SlideRange(void)
{
  Powerpoint_2k::SlideRangePtr SlideRange;
  this->get_SlideRange((Powerpoint_2k::SlideRangePtr*)&SlideRange);
  return SlideRange;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SelectionDispT<T>::get_ShapeRange(Powerpoint_2k::ShapeRangePtr* ShapeRange/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShapeRange"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::ShapeRange**)ShapeRange /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::ShapeRangePtr __fastcall
SelectionDispT<T>::get_ShapeRange(void)
{
  Powerpoint_2k::ShapeRangePtr ShapeRange;
  this->get_ShapeRange((Powerpoint_2k::ShapeRangePtr*)&ShapeRange);
  return ShapeRange;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SelectionDispT<T>::get_TextRange(Powerpoint_2k::TextRangePtr* TextRange/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextRange"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::TextRange**)TextRange /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::TextRangePtr __fastcall
SelectionDispT<T>::get_TextRange(void)
{
  Powerpoint_2k::TextRangePtr TextRange;
  this->get_TextRange((Powerpoint_2k::TextRangePtr*)&TextRange);
  return TextRange;
}

// *********************************************************************//
// DispIntf:  DocumentWindows
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493455-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowsDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
DocumentWindowsDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowsDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
DocumentWindowsDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowsDispT<T>::Item(int index/*[in]*/, 
                              Powerpoint_2k::DocumentWindowPtr* Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::DocumentWindow**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::DocumentWindowPtr __fastcall
DocumentWindowsDispT<T>::Item(int index/*[in]*/)
{
  Powerpoint_2k::DocumentWindowPtr Item;
  this->Item(index, (Powerpoint_2k::DocumentWindowPtr*)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowsDispT<T>::Arrange(Powerpoint_2k::PpArrangeStyle arrangeStyle/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Arrange"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = (int)arrangeStyle /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowsDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
DocumentWindowsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowsDispT<T>::_Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
DocumentWindowsDispT<T>::_Index(int index/*[in]*/)
{
  TVariant _Index;
  this->_Index(index, (TVariant*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
DocumentWindowsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  SlideShowWindows
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493456-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowWindowsDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
SlideShowWindowsDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowWindowsDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
SlideShowWindowsDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowWindowsDispT<T>::Item(int index/*[in]*/, 
                               Powerpoint_2k::SlideShowWindowPtr* Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::SlideShowWindow**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::SlideShowWindowPtr __fastcall
SlideShowWindowsDispT<T>::Item(int index/*[in]*/)
{
  Powerpoint_2k::SlideShowWindowPtr Item;
  this->Item(index, (Powerpoint_2k::SlideShowWindowPtr*)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowWindowsDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
SlideShowWindowsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowWindowsDispT<T>::_Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
SlideShowWindowsDispT<T>::_Index(int index/*[in]*/)
{
  TVariant _Index;
  this->_Index(index, (TVariant*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowWindowsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
SlideShowWindowsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  DocumentWindow
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493457-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
DocumentWindowDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
DocumentWindowDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::get_Selection(Powerpoint_2k::SelectionPtr* Selection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Selection"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Selection**)Selection /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::SelectionPtr __fastcall
DocumentWindowDispT<T>::get_Selection(void)
{
  Powerpoint_2k::SelectionPtr Selection;
  this->get_Selection((Powerpoint_2k::SelectionPtr*)&Selection);
  return Selection;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::get_View(Powerpoint_2k::ViewPtr* View/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("View"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::View**)View /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::ViewPtr __fastcall
DocumentWindowDispT<T>::get_View(void)
{
  Powerpoint_2k::ViewPtr View;
  this->get_View((Powerpoint_2k::ViewPtr*)&View);
  return View;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::get_Presentation(Powerpoint_2k::PowerPointPresentationPtr* Presentation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Presentation"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointPresentation**)Presentation /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointPresentationPtr __fastcall
DocumentWindowDispT<T>::get_Presentation(void)
{
  Powerpoint_2k::PowerPointPresentationPtr Presentation;
  this->get_Presentation((Powerpoint_2k::PowerPointPresentationPtr*)&Presentation);
  return Presentation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::get_ViewType(Powerpoint_2k::PpViewType* ViewType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ViewType"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ViewType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpViewType __fastcall
DocumentWindowDispT<T>::get_ViewType(void)
{
  Powerpoint_2k::PpViewType ViewType;
  this->get_ViewType((Powerpoint_2k::PpViewType*)&ViewType);
  return ViewType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::set_ViewType(Powerpoint_2k::PpViewType ViewType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ViewType"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = (int)ViewType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::get_BlackAndWhite(Office_2k::MsoTriState* BlackAndWhite/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BlackAndWhite"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)BlackAndWhite /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
DocumentWindowDispT<T>::get_BlackAndWhite(void)
{
  Office_2k::MsoTriState BlackAndWhite;
  this->get_BlackAndWhite((Office_2k::MsoTriState*)&BlackAndWhite);
  return BlackAndWhite;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::set_BlackAndWhite(Office_2k::MsoTriState BlackAndWhite/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BlackAndWhite"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = (int)BlackAndWhite /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::get_Active(Office_2k::MsoTriState* Active/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Active /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
DocumentWindowDispT<T>::get_Active(void)
{
  Office_2k::MsoTriState Active;
  this->get_Active((Office_2k::MsoTriState*)&Active);
  return Active;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::get_WindowState(Powerpoint_2k::PpWindowState* WindowState/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WindowState"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)WindowState /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpWindowState __fastcall
DocumentWindowDispT<T>::get_WindowState(void)
{
  Powerpoint_2k::PpWindowState WindowState;
  this->get_WindowState((Powerpoint_2k::PpWindowState*)&WindowState);
  return WindowState;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::set_WindowState(Powerpoint_2k::PpWindowState WindowState/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WindowState"), DISPID(2009));
  TAutoArgs<1> _args;
  _args[1] = (int)WindowState /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::get_Caption(BSTR* Caption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Caption /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
DocumentWindowDispT<T>::get_Caption(void)
{
  BSTR Caption;
  this->get_Caption((BSTR*)&Caption);
  return Caption;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::get_Left(float* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
DocumentWindowDispT<T>::get_Left(void)
{
  float Left;
  this->get_Left((float*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::set_Left(float Left/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(2010));
  TAutoArgs<1> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::get_Top(float* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(2011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
DocumentWindowDispT<T>::get_Top(void)
{
  float Top;
  this->get_Top((float*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::set_Top(float Top/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(2011));
  TAutoArgs<1> _args;
  _args[1] = Top /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::get_Width(float* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(2012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
DocumentWindowDispT<T>::get_Width(void)
{
  float Width;
  this->get_Width((float*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::set_Width(float Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(2012));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::get_Height(float* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(2013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
DocumentWindowDispT<T>::get_Height(void)
{
  float Height;
  this->get_Height((float*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::set_Height(float Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(2013));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::FitToPage()
{
  _TDispID _dispid(*this, OLETEXT("FitToPage"), DISPID(2014));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::Activate()
{
  _TDispID _dispid(*this, OLETEXT("Activate"), DISPID(2015));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::LargeScroll(int Down/*[in,def,opt]*/, int Up/*[in,def,opt]*/, 
                                    int ToRight/*[in,def,opt]*/, int ToLeft/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("LargeScroll"), DISPID(2016));
  TAutoArgs<4> _args;
  _args[1] = Down /*[VT_INT:0]*/;
  _args[2] = Up /*[VT_INT:0]*/;
  _args[3] = ToRight /*[VT_INT:0]*/;
  _args[4] = ToLeft /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::SmallScroll(int Down/*[in,def,opt]*/, int Up/*[in,def,opt]*/, 
                                    int ToRight/*[in,def,opt]*/, int ToLeft/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmallScroll"), DISPID(2017));
  TAutoArgs<4> _args;
  _args[1] = Down /*[VT_INT:0]*/;
  _args[2] = Up /*[VT_INT:0]*/;
  _args[3] = ToRight /*[VT_INT:0]*/;
  _args[4] = ToLeft /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::NewWindow(Powerpoint_2k::DocumentWindowPtr* NewWindow/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NewWindow"), DISPID(2018));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::DocumentWindow**)NewWindow /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::DocumentWindowPtr __fastcall
DocumentWindowDispT<T>::NewWindow(void)
{
  Powerpoint_2k::DocumentWindowPtr NewWindow;
  this->NewWindow((Powerpoint_2k::DocumentWindowPtr*)&NewWindow);
  return NewWindow;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::Close()
{
  _TDispID _dispid(*this, OLETEXT("Close"), DISPID(2019));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::get_HWND(long* HWND/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HWND"), DISPID(2020));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HWND /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
DocumentWindowDispT<T>::get_HWND(void)
{
  long HWND;
  this->get_HWND((long*)&HWND);
  return HWND;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::get_ActivePane(Powerpoint_2k::PanePtr* ActivePane/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActivePane"), DISPID(2021));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Pane**)ActivePane /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PanePtr __fastcall
DocumentWindowDispT<T>::get_ActivePane(void)
{
  Powerpoint_2k::PanePtr ActivePane;
  this->get_ActivePane((Powerpoint_2k::PanePtr*)&ActivePane);
  return ActivePane;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::get_Panes(Powerpoint_2k::PanesPtr* Panes/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Panes"), DISPID(2022));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Panes**)Panes /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PanesPtr __fastcall
DocumentWindowDispT<T>::get_Panes(void)
{
  Powerpoint_2k::PanesPtr Panes;
  this->get_Panes((Powerpoint_2k::PanesPtr*)&Panes);
  return Panes;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::get_SplitVertical(long* SplitVertical/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SplitVertical"), DISPID(2023));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SplitVertical /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
DocumentWindowDispT<T>::get_SplitVertical(void)
{
  long SplitVertical;
  this->get_SplitVertical((long*)&SplitVertical);
  return SplitVertical;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::set_SplitVertical(long SplitVertical/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SplitVertical"), DISPID(2023));
  TAutoArgs<1> _args;
  _args[1] = SplitVertical /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::get_SplitHorizontal(long* SplitHorizontal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SplitHorizontal"), DISPID(2024));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SplitHorizontal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
DocumentWindowDispT<T>::get_SplitHorizontal(void)
{
  long SplitHorizontal;
  this->get_SplitHorizontal((long*)&SplitHorizontal);
  return SplitHorizontal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::set_SplitHorizontal(long SplitHorizontal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SplitHorizontal"), DISPID(2024));
  TAutoArgs<1> _args;
  _args[1] = SplitHorizontal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::RangeFromPoint(int X/*[in]*/, int Y/*[in]*/, 
                                       LPDISPATCH* RangeFromPoint/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RangeFromPoint"), DISPID(2025));
  TAutoArgs<2> _args;
  _args[1] = X /*[VT_INT:0]*/;
  _args[2] = Y /*[VT_INT:0]*/;
  return OutRetValSetterPtr(RangeFromPoint /*[VT_DISPATCH:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
DocumentWindowDispT<T>::RangeFromPoint(int X/*[in]*/, int Y/*[in]*/)
{
  LPDISPATCH RangeFromPoint;
  this->RangeFromPoint(X, Y, (LPDISPATCH*)&RangeFromPoint);
  return RangeFromPoint;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::PointsToScreenPixelsX(float Points/*[in]*/, 
                                              int* PointsToScreenPixelsX/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PointsToScreenPixelsX"), DISPID(2026));
  TAutoArgs<1> _args;
  _args[1] = Points /*[VT_R4:0]*/;
  return OutRetValSetterPtr(PointsToScreenPixelsX /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
DocumentWindowDispT<T>::PointsToScreenPixelsX(float Points/*[in]*/)
{
  int PointsToScreenPixelsX;
  this->PointsToScreenPixelsX(Points, (int*)&PointsToScreenPixelsX);
  return PointsToScreenPixelsX;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::PointsToScreenPixelsY(float Points/*[in]*/, 
                                              int* PointsToScreenPixelsY/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PointsToScreenPixelsY"), DISPID(2027));
  TAutoArgs<1> _args;
  _args[1] = Points /*[VT_R4:0]*/;
  return OutRetValSetterPtr(PointsToScreenPixelsY /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
DocumentWindowDispT<T>::PointsToScreenPixelsY(float Points/*[in]*/)
{
  int PointsToScreenPixelsY;
  this->PointsToScreenPixelsY(Points, (int*)&PointsToScreenPixelsY);
  return PointsToScreenPixelsY;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DocumentWindowDispT<T>::ScrollIntoView(float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                                       float Height/*[in]*/, 
                                       Office_2k::MsoTriState Start/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScrollIntoView"), DISPID(2028));
  TAutoArgs<5> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  _args[2] = Top /*[VT_R4:0]*/;
  _args[3] = Width /*[VT_R4:0]*/;
  _args[4] = Height /*[VT_R4:0]*/;
  _args[5] = (int)Start /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  View
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493458-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ViewDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
ViewDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ViewDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ViewDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ViewDispT<T>::get_Type(Powerpoint_2k::PpViewType* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpViewType __fastcall
ViewDispT<T>::get_Type(void)
{
  Powerpoint_2k::PpViewType Type;
  this->get_Type((Powerpoint_2k::PpViewType*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ViewDispT<T>::get_Zoom(int* Zoom/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Zoom"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Zoom /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ViewDispT<T>::get_Zoom(void)
{
  int Zoom;
  this->get_Zoom((int*)&Zoom);
  return Zoom;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ViewDispT<T>::set_Zoom(int Zoom/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Zoom"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = Zoom /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ViewDispT<T>::Paste()
{
  _TDispID _dispid(*this, OLETEXT("Paste"), DISPID(2005));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ViewDispT<T>::get_Slide(LPDISPATCH* Slide/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Slide"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Slide /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ViewDispT<T>::get_Slide(void)
{
  LPDISPATCH Slide;
  this->get_Slide((LPDISPATCH*)&Slide);
  return Slide;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ViewDispT<T>::set_Slide(LPDISPATCH Slide/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Slide"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = Slide /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ViewDispT<T>::GotoSlide(int index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GotoSlide"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ViewDispT<T>::get_DisplaySlideMiniature(Office_2k::MsoTriState* DisplaySlideMiniature/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplaySlideMiniature"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)DisplaySlideMiniature /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
ViewDispT<T>::get_DisplaySlideMiniature(void)
{
  Office_2k::MsoTriState DisplaySlideMiniature;
  this->get_DisplaySlideMiniature((Office_2k::MsoTriState*)&DisplaySlideMiniature);
  return DisplaySlideMiniature;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ViewDispT<T>::set_DisplaySlideMiniature(Office_2k::MsoTriState DisplaySlideMiniature/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplaySlideMiniature"), DISPID(2008));
  TAutoArgs<1> _args;
  _args[1] = (int)DisplaySlideMiniature /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ViewDispT<T>::get_ZoomToFit(Office_2k::MsoTriState* ZoomToFit/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZoomToFit"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ZoomToFit /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
ViewDispT<T>::get_ZoomToFit(void)
{
  Office_2k::MsoTriState ZoomToFit;
  this->get_ZoomToFit((Office_2k::MsoTriState*)&ZoomToFit);
  return ZoomToFit;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ViewDispT<T>::set_ZoomToFit(Office_2k::MsoTriState ZoomToFit/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZoomToFit"), DISPID(2009));
  TAutoArgs<1> _args;
  _args[1] = (int)ZoomToFit /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  SlideShowView
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493459-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
SlideShowViewDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
SlideShowViewDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::get_Zoom(int* Zoom/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Zoom"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Zoom /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
SlideShowViewDispT<T>::get_Zoom(void)
{
  int Zoom;
  this->get_Zoom((int*)&Zoom);
  return Zoom;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::get_Slide(Powerpoint_2k::PowerPointSlidePtr* Slide/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Slide"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointSlide**)Slide /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointSlidePtr __fastcall
SlideShowViewDispT<T>::get_Slide(void)
{
  Powerpoint_2k::PowerPointSlidePtr Slide;
  this->get_Slide((Powerpoint_2k::PowerPointSlidePtr*)&Slide);
  return Slide;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::get_PointerType(Powerpoint_2k::PpSlideShowPointerType* PointerType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PointerType"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PointerType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpSlideShowPointerType __fastcall
SlideShowViewDispT<T>::get_PointerType(void)
{
  Powerpoint_2k::PpSlideShowPointerType PointerType;
  this->get_PointerType((Powerpoint_2k::PpSlideShowPointerType*)&PointerType);
  return PointerType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::set_PointerType(Powerpoint_2k::PpSlideShowPointerType PointerType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PointerType"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = (int)PointerType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::get_State(Powerpoint_2k::PpSlideShowState* State/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)State /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpSlideShowState __fastcall
SlideShowViewDispT<T>::get_State(void)
{
  Powerpoint_2k::PpSlideShowState State;
  this->get_State((Powerpoint_2k::PpSlideShowState*)&State);
  return State;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::set_State(Powerpoint_2k::PpSlideShowState State/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = (int)State /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::get_AcceleratorsEnabled(Office_2k::MsoTriState* AcceleratorsEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AcceleratorsEnabled"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AcceleratorsEnabled /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
SlideShowViewDispT<T>::get_AcceleratorsEnabled(void)
{
  Office_2k::MsoTriState AcceleratorsEnabled;
  this->get_AcceleratorsEnabled((Office_2k::MsoTriState*)&AcceleratorsEnabled);
  return AcceleratorsEnabled;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::set_AcceleratorsEnabled(Office_2k::MsoTriState AcceleratorsEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AcceleratorsEnabled"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = (int)AcceleratorsEnabled /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::get_PresentationElapsedTime(float* PresentationElapsedTime/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresentationElapsedTime"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(PresentationElapsedTime /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
SlideShowViewDispT<T>::get_PresentationElapsedTime(void)
{
  float PresentationElapsedTime;
  this->get_PresentationElapsedTime((float*)&PresentationElapsedTime);
  return PresentationElapsedTime;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::get_SlideElapsedTime(float* SlideElapsedTime/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideElapsedTime"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SlideElapsedTime /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
SlideShowViewDispT<T>::get_SlideElapsedTime(void)
{
  float SlideElapsedTime;
  this->get_SlideElapsedTime((float*)&SlideElapsedTime);
  return SlideElapsedTime;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::set_SlideElapsedTime(float SlideElapsedTime/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideElapsedTime"), DISPID(2009));
  TAutoArgs<1> _args;
  _args[1] = SlideElapsedTime /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::get_LastSlideViewed(Powerpoint_2k::PowerPointSlidePtr* LastSlideViewed/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastSlideViewed"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointSlide**)LastSlideViewed /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointSlidePtr __fastcall
SlideShowViewDispT<T>::get_LastSlideViewed(void)
{
  Powerpoint_2k::PowerPointSlidePtr LastSlideViewed;
  this->get_LastSlideViewed((Powerpoint_2k::PowerPointSlidePtr*)&LastSlideViewed);
  return LastSlideViewed;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::get_AdvanceMode(Powerpoint_2k::PpSlideShowAdvanceMode* AdvanceMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvanceMode"), DISPID(2011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AdvanceMode /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpSlideShowAdvanceMode __fastcall
SlideShowViewDispT<T>::get_AdvanceMode(void)
{
  Powerpoint_2k::PpSlideShowAdvanceMode AdvanceMode;
  this->get_AdvanceMode((Powerpoint_2k::PpSlideShowAdvanceMode*)&AdvanceMode);
  return AdvanceMode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::get_PointerColor(Powerpoint_2k::ColorFormatPtr* PointerColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PointerColor"), DISPID(2012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::ColorFormat**)PointerColor /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::ColorFormatPtr __fastcall
SlideShowViewDispT<T>::get_PointerColor(void)
{
  Powerpoint_2k::ColorFormatPtr PointerColor;
  this->get_PointerColor((Powerpoint_2k::ColorFormatPtr*)&PointerColor);
  return PointerColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::get_IsNamedShow(Office_2k::MsoTriState* IsNamedShow/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsNamedShow"), DISPID(2013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)IsNamedShow /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
SlideShowViewDispT<T>::get_IsNamedShow(void)
{
  Office_2k::MsoTriState IsNamedShow;
  this->get_IsNamedShow((Office_2k::MsoTriState*)&IsNamedShow);
  return IsNamedShow;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::get_SlideShowName(BSTR* SlideShowName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideShowName"), DISPID(2014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SlideShowName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
SlideShowViewDispT<T>::get_SlideShowName(void)
{
  BSTR SlideShowName;
  this->get_SlideShowName((BSTR*)&SlideShowName);
  return SlideShowName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::DrawLine(float BeginX/*[in]*/, float BeginY/*[in]*/, float EndX/*[in]*/, 
                                float EndY/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DrawLine"), DISPID(2015));
  TAutoArgs<4> _args;
  _args[1] = BeginX /*[VT_R4:0]*/;
  _args[2] = BeginY /*[VT_R4:0]*/;
  _args[3] = EndX /*[VT_R4:0]*/;
  _args[4] = EndY /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::EraseDrawing()
{
  _TDispID _dispid(*this, OLETEXT("EraseDrawing"), DISPID(2016));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::First()
{
  _TDispID _dispid(*this, OLETEXT("First"), DISPID(2017));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::Last()
{
  _TDispID _dispid(*this, OLETEXT("Last"), DISPID(2018));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::Next()
{
  _TDispID _dispid(*this, OLETEXT("Next"), DISPID(2019));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::Previous()
{
  _TDispID _dispid(*this, OLETEXT("Previous"), DISPID(2020));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::GotoSlide(int index/*[in]*/, 
                                 Office_2k::MsoTriState ResetSlide/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("GotoSlide"), DISPID(2021));
  TAutoArgs<2> _args;
  _args[1] = index /*[VT_INT:0]*/;
  _args[2] = (int)ResetSlide /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::GotoNamedShow(BSTR SlideShowName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GotoNamedShow"), DISPID(2022));
  TAutoArgs<1> _args;
  _args[1] = SlideShowName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::EndNamedShow()
{
  _TDispID _dispid(*this, OLETEXT("EndNamedShow"), DISPID(2023));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::ResetSlideTime()
{
  _TDispID _dispid(*this, OLETEXT("ResetSlideTime"), DISPID(2024));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::Exit()
{
  _TDispID _dispid(*this, OLETEXT("Exit"), DISPID(2025));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::InstallTracker(Powerpoint_2k::MouseTrackerPtr pTracker/*[in]*/, 
                                      Office_2k::MsoTriState Presenter/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InstallTracker"), DISPID(2026));
  TAutoArgs<2> _args;
  _args[1] = (LPUNKNOWN)(Powerpoint_2k::MouseTracker*)pTracker /*[VT_USERDEFINED:1]*/;
  _args[2] = (int)Presenter /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowViewDispT<T>::get_CurrentShowPosition(int* CurrentShowPosition/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentShowPosition"), DISPID(2027));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CurrentShowPosition /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
SlideShowViewDispT<T>::get_CurrentShowPosition(void)
{
  int CurrentShowPosition;
  this->get_CurrentShowPosition((int*)&CurrentShowPosition);
  return CurrentShowPosition;
}

// *********************************************************************//
// DispIntf:  SlideShowSettings
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149345A-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowSettingsDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
SlideShowSettingsDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowSettingsDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
SlideShowSettingsDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowSettingsDispT<T>::get_PointerColor(Powerpoint_2k::ColorFormatPtr* PointerColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PointerColor"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::ColorFormat**)PointerColor /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::ColorFormatPtr __fastcall
SlideShowSettingsDispT<T>::get_PointerColor(void)
{
  Powerpoint_2k::ColorFormatPtr PointerColor;
  this->get_PointerColor((Powerpoint_2k::ColorFormatPtr*)&PointerColor);
  return PointerColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowSettingsDispT<T>::get_NamedSlideShows(Powerpoint_2k::NamedSlideShowsPtr* NamedSlideShows/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NamedSlideShows"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::NamedSlideShows**)NamedSlideShows /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::NamedSlideShowsPtr __fastcall
SlideShowSettingsDispT<T>::get_NamedSlideShows(void)
{
  Powerpoint_2k::NamedSlideShowsPtr NamedSlideShows;
  this->get_NamedSlideShows((Powerpoint_2k::NamedSlideShowsPtr*)&NamedSlideShows);
  return NamedSlideShows;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowSettingsDispT<T>::get_StartingSlide(int* StartingSlide/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartingSlide"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(StartingSlide /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
SlideShowSettingsDispT<T>::get_StartingSlide(void)
{
  int StartingSlide;
  this->get_StartingSlide((int*)&StartingSlide);
  return StartingSlide;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowSettingsDispT<T>::set_StartingSlide(int StartingSlide/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartingSlide"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = StartingSlide /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowSettingsDispT<T>::get_EndingSlide(int* EndingSlide/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndingSlide"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(EndingSlide /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
SlideShowSettingsDispT<T>::get_EndingSlide(void)
{
  int EndingSlide;
  this->get_EndingSlide((int*)&EndingSlide);
  return EndingSlide;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowSettingsDispT<T>::set_EndingSlide(int EndingSlide/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndingSlide"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = EndingSlide /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowSettingsDispT<T>::get_AdvanceMode(Powerpoint_2k::PpSlideShowAdvanceMode* AdvanceMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvanceMode"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AdvanceMode /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpSlideShowAdvanceMode __fastcall
SlideShowSettingsDispT<T>::get_AdvanceMode(void)
{
  Powerpoint_2k::PpSlideShowAdvanceMode AdvanceMode;
  this->get_AdvanceMode((Powerpoint_2k::PpSlideShowAdvanceMode*)&AdvanceMode);
  return AdvanceMode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowSettingsDispT<T>::set_AdvanceMode(Powerpoint_2k::PpSlideShowAdvanceMode AdvanceMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvanceMode"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = (int)AdvanceMode /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowSettingsDispT<T>::Run(Powerpoint_2k::SlideShowWindowPtr* Run/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Run"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::SlideShowWindow**)Run /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::SlideShowWindowPtr __fastcall
SlideShowSettingsDispT<T>::Run(void)
{
  Powerpoint_2k::SlideShowWindowPtr Run;
  this->Run((Powerpoint_2k::SlideShowWindowPtr*)&Run);
  return Run;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowSettingsDispT<T>::get_LoopUntilStopped(Office_2k::MsoTriState* LoopUntilStopped/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LoopUntilStopped"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)LoopUntilStopped /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
SlideShowSettingsDispT<T>::get_LoopUntilStopped(void)
{
  Office_2k::MsoTriState LoopUntilStopped;
  this->get_LoopUntilStopped((Office_2k::MsoTriState*)&LoopUntilStopped);
  return LoopUntilStopped;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowSettingsDispT<T>::set_LoopUntilStopped(Office_2k::MsoTriState LoopUntilStopped/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LoopUntilStopped"), DISPID(2009));
  TAutoArgs<1> _args;
  _args[1] = (int)LoopUntilStopped /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowSettingsDispT<T>::get_ShowType(Powerpoint_2k::PpSlideShowType* ShowType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowType"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ShowType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpSlideShowType __fastcall
SlideShowSettingsDispT<T>::get_ShowType(void)
{
  Powerpoint_2k::PpSlideShowType ShowType;
  this->get_ShowType((Powerpoint_2k::PpSlideShowType*)&ShowType);
  return ShowType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowSettingsDispT<T>::set_ShowType(Powerpoint_2k::PpSlideShowType ShowType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowType"), DISPID(2010));
  TAutoArgs<1> _args;
  _args[1] = (int)ShowType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowSettingsDispT<T>::get_ShowWithNarration(Office_2k::MsoTriState* ShowWithNarration/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowWithNarration"), DISPID(2011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ShowWithNarration /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
SlideShowSettingsDispT<T>::get_ShowWithNarration(void)
{
  Office_2k::MsoTriState ShowWithNarration;
  this->get_ShowWithNarration((Office_2k::MsoTriState*)&ShowWithNarration);
  return ShowWithNarration;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowSettingsDispT<T>::set_ShowWithNarration(Office_2k::MsoTriState ShowWithNarration/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowWithNarration"), DISPID(2011));
  TAutoArgs<1> _args;
  _args[1] = (int)ShowWithNarration /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowSettingsDispT<T>::get_ShowWithAnimation(Office_2k::MsoTriState* ShowWithAnimation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowWithAnimation"), DISPID(2012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ShowWithAnimation /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
SlideShowSettingsDispT<T>::get_ShowWithAnimation(void)
{
  Office_2k::MsoTriState ShowWithAnimation;
  this->get_ShowWithAnimation((Office_2k::MsoTriState*)&ShowWithAnimation);
  return ShowWithAnimation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowSettingsDispT<T>::set_ShowWithAnimation(Office_2k::MsoTriState ShowWithAnimation/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowWithAnimation"), DISPID(2012));
  TAutoArgs<1> _args;
  _args[1] = (int)ShowWithAnimation /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowSettingsDispT<T>::get_SlideShowName(BSTR* SlideShowName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideShowName"), DISPID(2013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SlideShowName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
SlideShowSettingsDispT<T>::get_SlideShowName(void)
{
  BSTR SlideShowName;
  this->get_SlideShowName((BSTR*)&SlideShowName);
  return SlideShowName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowSettingsDispT<T>::set_SlideShowName(BSTR SlideShowName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideShowName"), DISPID(2013));
  TAutoArgs<1> _args;
  _args[1] = SlideShowName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowSettingsDispT<T>::get_RangeType(Powerpoint_2k::PpSlideShowRangeType* RangeType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RangeType"), DISPID(2014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)RangeType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpSlideShowRangeType __fastcall
SlideShowSettingsDispT<T>::get_RangeType(void)
{
  Powerpoint_2k::PpSlideShowRangeType RangeType;
  this->get_RangeType((Powerpoint_2k::PpSlideShowRangeType*)&RangeType);
  return RangeType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowSettingsDispT<T>::set_RangeType(Powerpoint_2k::PpSlideShowRangeType RangeType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RangeType"), DISPID(2014));
  TAutoArgs<1> _args;
  _args[1] = (int)RangeType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  NamedSlideShows
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149345B-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NamedSlideShowsDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
NamedSlideShowsDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NamedSlideShowsDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
NamedSlideShowsDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NamedSlideShowsDispT<T>::Item(TVariantInParam index/*[in]*/, 
                              Powerpoint_2k::NamedSlideShowPtr* Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::NamedSlideShow**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::NamedSlideShowPtr __fastcall
NamedSlideShowsDispT<T>::Item(TVariantInParam index/*[in]*/)
{
  Powerpoint_2k::NamedSlideShowPtr Item;
  this->Item(index, (Powerpoint_2k::NamedSlideShowPtr*)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NamedSlideShowsDispT<T>::Add(BSTR Name/*[in]*/, TVariantInParam safeArrayOfSlideIDs/*[in]*/, 
                             Powerpoint_2k::NamedSlideShowPtr* Add/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2003));
  TAutoArgs<2> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  _args[2] = safeArrayOfSlideIDs /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::NamedSlideShow**)Add /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::NamedSlideShowPtr __fastcall
NamedSlideShowsDispT<T>::Add(BSTR Name/*[in]*/, TVariantInParam safeArrayOfSlideIDs/*[in]*/)
{
  Powerpoint_2k::NamedSlideShowPtr Add;
  this->Add(Name, safeArrayOfSlideIDs, (Powerpoint_2k::NamedSlideShowPtr*)&Add);
  return Add;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NamedSlideShowsDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
NamedSlideShowsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NamedSlideShowsDispT<T>::_Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
NamedSlideShowsDispT<T>::_Index(int index/*[in]*/)
{
  TVariant _Index;
  this->_Index(index, (TVariant*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NamedSlideShowsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
NamedSlideShowsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  NamedSlideShow
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149345C-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NamedSlideShowDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
NamedSlideShowDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NamedSlideShowDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
NamedSlideShowDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NamedSlideShowDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
NamedSlideShowDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NamedSlideShowDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(2004));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NamedSlideShowDispT<T>::get_SlideIDs(TVariant* SlideIDs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideIDs"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SlideIDs /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
NamedSlideShowDispT<T>::get_SlideIDs(void)
{
  TVariant SlideIDs;
  this->get_SlideIDs((TVariant*)&SlideIDs);
  return SlideIDs;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NamedSlideShowDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
NamedSlideShowDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  PrintOptions
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149345D-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
PrintOptionsDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::get_PrintColorType(Powerpoint_2k::PpPrintColorType* PrintColorType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintColorType"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PrintColorType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpPrintColorType __fastcall
PrintOptionsDispT<T>::get_PrintColorType(void)
{
  Powerpoint_2k::PpPrintColorType PrintColorType;
  this->get_PrintColorType((Powerpoint_2k::PpPrintColorType*)&PrintColorType);
  return PrintColorType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::set_PrintColorType(Powerpoint_2k::PpPrintColorType PrintColorType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintColorType"), DISPID(2002));
  TAutoArgs<1> _args;
  _args[1] = (int)PrintColorType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::get_Collate(Office_2k::MsoTriState* Collate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Collate"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Collate /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PrintOptionsDispT<T>::get_Collate(void)
{
  Office_2k::MsoTriState Collate;
  this->get_Collate((Office_2k::MsoTriState*)&Collate);
  return Collate;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::set_Collate(Office_2k::MsoTriState Collate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Collate"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = (int)Collate /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::get_FitToPage(Office_2k::MsoTriState* FitToPage/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FitToPage"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)FitToPage /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PrintOptionsDispT<T>::get_FitToPage(void)
{
  Office_2k::MsoTriState FitToPage;
  this->get_FitToPage((Office_2k::MsoTriState*)&FitToPage);
  return FitToPage;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::set_FitToPage(Office_2k::MsoTriState FitToPage/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FitToPage"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = (int)FitToPage /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::get_FrameSlides(Office_2k::MsoTriState* FrameSlides/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FrameSlides"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)FrameSlides /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PrintOptionsDispT<T>::get_FrameSlides(void)
{
  Office_2k::MsoTriState FrameSlides;
  this->get_FrameSlides((Office_2k::MsoTriState*)&FrameSlides);
  return FrameSlides;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::set_FrameSlides(Office_2k::MsoTriState FrameSlides/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FrameSlides"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = (int)FrameSlides /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::get_NumberOfCopies(int* NumberOfCopies/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumberOfCopies"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(NumberOfCopies /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PrintOptionsDispT<T>::get_NumberOfCopies(void)
{
  int NumberOfCopies;
  this->get_NumberOfCopies((int*)&NumberOfCopies);
  return NumberOfCopies;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::set_NumberOfCopies(int NumberOfCopies/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumberOfCopies"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = NumberOfCopies /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::get_OutputType(Powerpoint_2k::PpPrintOutputType* OutputType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OutputType"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)OutputType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpPrintOutputType __fastcall
PrintOptionsDispT<T>::get_OutputType(void)
{
  Powerpoint_2k::PpPrintOutputType OutputType;
  this->get_OutputType((Powerpoint_2k::PpPrintOutputType*)&OutputType);
  return OutputType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::set_OutputType(Powerpoint_2k::PpPrintOutputType OutputType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OutputType"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = (int)OutputType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PrintOptionsDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::get_PrintHiddenSlides(Office_2k::MsoTriState* PrintHiddenSlides/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintHiddenSlides"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PrintHiddenSlides /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PrintOptionsDispT<T>::get_PrintHiddenSlides(void)
{
  Office_2k::MsoTriState PrintHiddenSlides;
  this->get_PrintHiddenSlides((Office_2k::MsoTriState*)&PrintHiddenSlides);
  return PrintHiddenSlides;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::set_PrintHiddenSlides(Office_2k::MsoTriState PrintHiddenSlides/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintHiddenSlides"), DISPID(2009));
  TAutoArgs<1> _args;
  _args[1] = (int)PrintHiddenSlides /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::get_PrintInBackground(Office_2k::MsoTriState* PrintInBackground/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintInBackground"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PrintInBackground /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PrintOptionsDispT<T>::get_PrintInBackground(void)
{
  Office_2k::MsoTriState PrintInBackground;
  this->get_PrintInBackground((Office_2k::MsoTriState*)&PrintInBackground);
  return PrintInBackground;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::set_PrintInBackground(Office_2k::MsoTriState PrintInBackground/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintInBackground"), DISPID(2010));
  TAutoArgs<1> _args;
  _args[1] = (int)PrintInBackground /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::get_RangeType(Powerpoint_2k::PpPrintRangeType* RangeType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RangeType"), DISPID(2011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)RangeType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpPrintRangeType __fastcall
PrintOptionsDispT<T>::get_RangeType(void)
{
  Powerpoint_2k::PpPrintRangeType RangeType;
  this->get_RangeType((Powerpoint_2k::PpPrintRangeType*)&RangeType);
  return RangeType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::set_RangeType(Powerpoint_2k::PpPrintRangeType RangeType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RangeType"), DISPID(2011));
  TAutoArgs<1> _args;
  _args[1] = (int)RangeType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::get_Ranges(Powerpoint_2k::PrintRangesPtr* Ranges/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Ranges"), DISPID(2012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PrintRanges**)Ranges /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PrintRangesPtr __fastcall
PrintOptionsDispT<T>::get_Ranges(void)
{
  Powerpoint_2k::PrintRangesPtr Ranges;
  this->get_Ranges((Powerpoint_2k::PrintRangesPtr*)&Ranges);
  return Ranges;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::get_PrintFontsAsGraphics(Office_2k::MsoTriState* PrintFontsAsGraphics/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintFontsAsGraphics"), DISPID(2013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PrintFontsAsGraphics /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PrintOptionsDispT<T>::get_PrintFontsAsGraphics(void)
{
  Office_2k::MsoTriState PrintFontsAsGraphics;
  this->get_PrintFontsAsGraphics((Office_2k::MsoTriState*)&PrintFontsAsGraphics);
  return PrintFontsAsGraphics;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::set_PrintFontsAsGraphics(Office_2k::MsoTriState PrintFontsAsGraphics/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintFontsAsGraphics"), DISPID(2013));
  TAutoArgs<1> _args;
  _args[1] = (int)PrintFontsAsGraphics /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::get_SlideShowName(BSTR* SlideShowName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideShowName"), DISPID(2014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SlideShowName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PrintOptionsDispT<T>::get_SlideShowName(void)
{
  BSTR SlideShowName;
  this->get_SlideShowName((BSTR*)&SlideShowName);
  return SlideShowName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::set_SlideShowName(BSTR SlideShowName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideShowName"), DISPID(2014));
  TAutoArgs<1> _args;
  _args[1] = SlideShowName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::get_ActivePrinter(BSTR* ActivePrinter/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActivePrinter"), DISPID(2015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ActivePrinter /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PrintOptionsDispT<T>::get_ActivePrinter(void)
{
  BSTR ActivePrinter;
  this->get_ActivePrinter((BSTR*)&ActivePrinter);
  return ActivePrinter;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::set_ActivePrinter(BSTR ActivePrinter/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActivePrinter"), DISPID(2015));
  TAutoArgs<1> _args;
  _args[1] = ActivePrinter /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::get_HandoutOrder(Powerpoint_2k::PpPrintHandoutOrder* HandoutOrder/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HandoutOrder"), DISPID(2016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)HandoutOrder /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpPrintHandoutOrder __fastcall
PrintOptionsDispT<T>::get_HandoutOrder(void)
{
  Powerpoint_2k::PpPrintHandoutOrder HandoutOrder;
  this->get_HandoutOrder((Powerpoint_2k::PpPrintHandoutOrder*)&HandoutOrder);
  return HandoutOrder;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintOptionsDispT<T>::set_HandoutOrder(Powerpoint_2k::PpPrintHandoutOrder HandoutOrder/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HandoutOrder"), DISPID(2016));
  TAutoArgs<1> _args;
  _args[1] = (int)HandoutOrder /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  PrintRanges
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149345E-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintRangesDispT<T>::Add(int Start/*[in]*/, int End/*[in]*/, 
                         Powerpoint_2k::PrintRangePtr* Add/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2001));
  TAutoArgs<2> _args;
  _args[1] = Start /*[VT_INT:0]*/;
  _args[2] = End /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PrintRange**)Add /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::PrintRangePtr __fastcall
PrintRangesDispT<T>::Add(int Start/*[in]*/, int End/*[in]*/)
{
  Powerpoint_2k::PrintRangePtr Add;
  this->Add(Start, End, (Powerpoint_2k::PrintRangePtr*)&Add);
  return Add;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintRangesDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
PrintRangesDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintRangesDispT<T>::ClearAll()
{
  _TDispID _dispid(*this, OLETEXT("ClearAll"), DISPID(2003));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintRangesDispT<T>::Item(int index/*[in]*/, Powerpoint_2k::PrintRangePtr* Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PrintRange**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::PrintRangePtr __fastcall
PrintRangesDispT<T>::Item(int index/*[in]*/)
{
  Powerpoint_2k::PrintRangePtr Item;
  this->Item(index, (Powerpoint_2k::PrintRangePtr*)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintRangesDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PrintRangesDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintRangesDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
PrintRangesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintRangesDispT<T>::_Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
PrintRangesDispT<T>::_Index(int index/*[in]*/)
{
  TVariant _Index;
  this->_Index(index, (TVariant*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintRangesDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PrintRangesDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  PrintRange
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149345F-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintRangeDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
PrintRangeDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintRangeDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PrintRangeDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintRangeDispT<T>::get_Start(int* Start/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Start"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Start /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PrintRangeDispT<T>::get_Start(void)
{
  int Start;
  this->get_Start((int*)&Start);
  return Start;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintRangeDispT<T>::get_End(int* End/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("End"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(End /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PrintRangeDispT<T>::get_End(void)
{
  int End;
  this->get_End((int*)&End);
  return End;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PrintRangeDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(2005));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  AddIns
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493460-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AddInsDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
AddInsDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AddInsDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
AddInsDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AddInsDispT<T>::Item(TVariant* index/*[in]*/, Powerpoint_2k::AddInPtr* Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::AddIn**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::AddInPtr __fastcall
AddInsDispT<T>::Item(TVariant* index/*[in]*/)
{
  Powerpoint_2k::AddInPtr Item;
  this->Item(index, (Powerpoint_2k::AddInPtr*)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AddInsDispT<T>::Add(BSTR FileName/*[in]*/, Powerpoint_2k::AddInPtr* Add/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::AddIn**)Add /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::AddInPtr __fastcall
AddInsDispT<T>::Add(BSTR FileName/*[in]*/)
{
  Powerpoint_2k::AddInPtr Add;
  this->Add(FileName, (Powerpoint_2k::AddInPtr*)&Add);
  return Add;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AddInsDispT<T>::Remove(TVariant* index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Remove"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AddInsDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
AddInsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AddInsDispT<T>::_Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
AddInsDispT<T>::_Index(int index/*[in]*/)
{
  TVariant _Index;
  this->_Index(index, (TVariant*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AddInsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
AddInsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  AddIn
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493461-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AddInDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
AddInDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AddInDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
AddInDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AddInDispT<T>::get_FullName(BSTR* FullName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullName"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FullName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
AddInDispT<T>::get_FullName(void)
{
  BSTR FullName;
  this->get_FullName((BSTR*)&FullName);
  return FullName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AddInDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
AddInDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AddInDispT<T>::get_Path(BSTR* Path/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Path"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Path /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
AddInDispT<T>::get_Path(void)
{
  BSTR Path;
  this->get_Path((BSTR*)&Path);
  return Path;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AddInDispT<T>::get_Registered(Office_2k::MsoTriState* Registered/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Registered"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Registered /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
AddInDispT<T>::get_Registered(void)
{
  Office_2k::MsoTriState Registered;
  this->get_Registered((Office_2k::MsoTriState*)&Registered);
  return Registered;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AddInDispT<T>::set_Registered(Office_2k::MsoTriState Registered/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Registered"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = (int)Registered /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AddInDispT<T>::get_AutoLoad(Office_2k::MsoTriState* AutoLoad/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoLoad"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AutoLoad /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
AddInDispT<T>::get_AutoLoad(void)
{
  Office_2k::MsoTriState AutoLoad;
  this->get_AutoLoad((Office_2k::MsoTriState*)&AutoLoad);
  return AutoLoad;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AddInDispT<T>::set_AutoLoad(Office_2k::MsoTriState AutoLoad/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoLoad"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = (int)AutoLoad /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AddInDispT<T>::get_Loaded(Office_2k::MsoTriState* Loaded/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Loaded"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Loaded /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
AddInDispT<T>::get_Loaded(void)
{
  Office_2k::MsoTriState Loaded;
  this->get_Loaded((Office_2k::MsoTriState*)&Loaded);
  return Loaded;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AddInDispT<T>::set_Loaded(Office_2k::MsoTriState Loaded/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Loaded"), DISPID(2008));
  TAutoArgs<1> _args;
  _args[1] = (int)Loaded /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AddInDispT<T>::get_DisplayAlerts(Office_2k::MsoTriState* DisplayAlerts/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayAlerts"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)DisplayAlerts /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
AddInDispT<T>::get_DisplayAlerts(void)
{
  Office_2k::MsoTriState DisplayAlerts;
  this->get_DisplayAlerts((Office_2k::MsoTriState*)&DisplayAlerts);
  return DisplayAlerts;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AddInDispT<T>::set_DisplayAlerts(Office_2k::MsoTriState DisplayAlerts/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayAlerts"), DISPID(2009));
  TAutoArgs<1> _args;
  _args[1] = (int)DisplayAlerts /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AddInDispT<T>::get_RegisteredInHKLM(Office_2k::MsoTriState* RegisteredInHKLM/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RegisteredInHKLM"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)RegisteredInHKLM /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
AddInDispT<T>::get_RegisteredInHKLM(void)
{
  Office_2k::MsoTriState RegisteredInHKLM;
  this->get_RegisteredInHKLM((Office_2k::MsoTriState*)&RegisteredInHKLM);
  return RegisteredInHKLM;
}

// *********************************************************************//
// DispIntf:  Presentations
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493462-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PresentationsDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
PresentationsDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PresentationsDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PresentationsDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PresentationsDispT<T>::Item(TVariantInParam index/*[in]*/, 
                            Powerpoint_2k::PowerPointPresentationPtr* Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointPresentation**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointPresentationPtr __fastcall
PresentationsDispT<T>::Item(TVariantInParam index/*[in]*/)
{
  Powerpoint_2k::PowerPointPresentationPtr Item;
  this->Item(index, (Powerpoint_2k::PowerPointPresentationPtr*)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PresentationsDispT<T>::Add(Office_2k::MsoTriState WithWindow/*[in,def,opt]*/, 
                           Powerpoint_2k::PowerPointPresentationPtr* Add/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = (int)WithWindow /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointPresentation**)Add /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointPresentationPtr __fastcall
PresentationsDispT<T>::Add(Office_2k::MsoTriState WithWindow/*[in,def,opt]*/)
{
  Powerpoint_2k::PowerPointPresentationPtr Add;
  this->Add(WithWindow, (Powerpoint_2k::PowerPointPresentationPtr*)&Add);
  return Add;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PresentationsDispT<T>::Open(BSTR FileName/*[in]*/, Office_2k::MsoTriState ReadOnly/*[in,def,opt]*/, 
                            Office_2k::MsoTriState Untitled/*[in,def,opt]*/, 
                            Office_2k::MsoTriState WithWindow/*[in,def,opt]*/, 
                            Powerpoint_2k::PowerPointPresentationPtr* Open/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Open"), DISPID(2004));
  TAutoArgs<4> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  _args[2] = (int)ReadOnly /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)Untitled /*[VT_USERDEFINED:0]*/;
  _args[4] = (int)WithWindow /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointPresentation**)Open /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointPresentationPtr __fastcall
PresentationsDispT<T>::Open(BSTR FileName/*[in]*/, Office_2k::MsoTriState ReadOnly/*[in,def,opt]*/, 
                            Office_2k::MsoTriState Untitled/*[in,def,opt]*/, 
                            Office_2k::MsoTriState WithWindow/*[in,def,opt]*/)
{
  Powerpoint_2k::PowerPointPresentationPtr Open;
  this->Open(FileName, ReadOnly, Untitled, WithWindow, (Powerpoint_2k::PowerPointPresentationPtr*)&Open);
  return Open;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PresentationsDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
PresentationsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PresentationsDispT<T>::_Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
PresentationsDispT<T>::_Index(int index/*[in]*/)
{
  TVariant _Index;
  this->_Index(index, (TVariant*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PresentationsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PresentationsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// SmartIntf: TCOM_Presentation
// Interface: _Presentation
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  return (*this)->get_Application(Application);
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
TCOM_PresentationT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
  return Application;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  return (*this)->get_Parent(Parent);
}

template <class T> LPDISPATCH __fastcall
TCOM_PresentationT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
  return Parent;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_SlideMaster(Powerpoint_2k::_MasterPtr* SlideMaster/*[out,retval]*/)
{
  return (*this)->get_SlideMaster(SlideMaster);
}

template <class T> Powerpoint_2k::_MasterPtr __fastcall
TCOM_PresentationT<T>::get_SlideMaster(void)
{
  Powerpoint_2k::_MasterPtr SlideMaster;
  OLECHECK(this->get_SlideMaster((Powerpoint_2k::_MasterPtr*)&SlideMaster));
  return SlideMaster;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_TitleMaster(Powerpoint_2k::_MasterPtr* TitleMaster/*[out,retval]*/)
{
  return (*this)->get_TitleMaster(TitleMaster);
}

template <class T> Powerpoint_2k::_MasterPtr __fastcall
TCOM_PresentationT<T>::get_TitleMaster(void)
{
  Powerpoint_2k::_MasterPtr TitleMaster;
  OLECHECK(this->get_TitleMaster((Powerpoint_2k::_MasterPtr*)&TitleMaster));
  return TitleMaster;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_HasTitleMaster(Office_2k::MsoTriState* HasTitleMaster/*[out,retval]*/)
{
  return (*this)->get_HasTitleMaster(HasTitleMaster);
}

template <class T> Office_2k::MsoTriState __fastcall
TCOM_PresentationT<T>::get_HasTitleMaster(void)
{
  Office_2k::MsoTriState HasTitleMaster;
  OLECHECK(this->get_HasTitleMaster((Office_2k::MsoTriState*)&HasTitleMaster));
  return HasTitleMaster;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::AddTitleMaster(Powerpoint_2k::_MasterPtr* TitleMaster/*[out,retval]*/)
{
  return (*this)->AddTitleMaster(TitleMaster);
}

template <class T> Powerpoint_2k::_MasterPtr __fastcall
TCOM_PresentationT<T>::AddTitleMaster(void)
{
  Powerpoint_2k::_MasterPtr TitleMaster;
  OLECHECK(this->AddTitleMaster((Powerpoint_2k::_MasterPtr*)&TitleMaster));
  return TitleMaster;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::ApplyTemplate(BSTR FileName/*[in]*/)
{
  return (*this)->ApplyTemplate(FileName);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_TemplateName(BSTR* TemplateName/*[out,retval]*/)
{
  return (*this)->get_TemplateName(TemplateName);
}

template <class T> BSTR __fastcall
TCOM_PresentationT<T>::get_TemplateName(void)
{
  BSTR TemplateName = 0;
  OLECHECK(this->get_TemplateName((BSTR*)&TemplateName));
  return TemplateName;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_NotesMaster(Powerpoint_2k::_MasterPtr* NotesMaster/*[out,retval]*/)
{
  return (*this)->get_NotesMaster(NotesMaster);
}

template <class T> Powerpoint_2k::_MasterPtr __fastcall
TCOM_PresentationT<T>::get_NotesMaster(void)
{
  Powerpoint_2k::_MasterPtr NotesMaster;
  OLECHECK(this->get_NotesMaster((Powerpoint_2k::_MasterPtr*)&NotesMaster));
  return NotesMaster;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_HandoutMaster(Powerpoint_2k::_MasterPtr* HandoutMaster/*[out,retval]*/)
{
  return (*this)->get_HandoutMaster(HandoutMaster);
}

template <class T> Powerpoint_2k::_MasterPtr __fastcall
TCOM_PresentationT<T>::get_HandoutMaster(void)
{
  Powerpoint_2k::_MasterPtr HandoutMaster;
  OLECHECK(this->get_HandoutMaster((Powerpoint_2k::_MasterPtr*)&HandoutMaster));
  return HandoutMaster;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_Slides(Powerpoint_2k::SlidesPtr* Slides/*[out,retval]*/)
{
  return (*this)->get_Slides(Slides);
}

template <class T> Powerpoint_2k::SlidesPtr __fastcall
TCOM_PresentationT<T>::get_Slides(void)
{
  Powerpoint_2k::SlidesPtr Slides;
  OLECHECK(this->get_Slides((Powerpoint_2k::SlidesPtr*)&Slides));
  return Slides;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_PageSetup(Powerpoint_2k::PageSetupPtr* PageSetup/*[out,retval]*/)
{
  return (*this)->get_PageSetup(PageSetup);
}

template <class T> Powerpoint_2k::PageSetupPtr __fastcall
TCOM_PresentationT<T>::get_PageSetup(void)
{
  Powerpoint_2k::PageSetupPtr PageSetup;
  OLECHECK(this->get_PageSetup((Powerpoint_2k::PageSetupPtr*)&PageSetup));
  return PageSetup;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_ColorSchemes(Powerpoint_2k::ColorSchemesPtr* ColorSchemes/*[out,retval]*/)
{
  return (*this)->get_ColorSchemes(ColorSchemes);
}

template <class T> Powerpoint_2k::ColorSchemesPtr __fastcall
TCOM_PresentationT<T>::get_ColorSchemes(void)
{
  Powerpoint_2k::ColorSchemesPtr ColorSchemes;
  OLECHECK(this->get_ColorSchemes((Powerpoint_2k::ColorSchemesPtr*)&ColorSchemes));
  return ColorSchemes;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_ExtraColors(Powerpoint_2k::ExtraColorsPtr* ExtraColors/*[out,retval]*/)
{
  return (*this)->get_ExtraColors(ExtraColors);
}

template <class T> Powerpoint_2k::ExtraColorsPtr __fastcall
TCOM_PresentationT<T>::get_ExtraColors(void)
{
  Powerpoint_2k::ExtraColorsPtr ExtraColors;
  OLECHECK(this->get_ExtraColors((Powerpoint_2k::ExtraColorsPtr*)&ExtraColors));
  return ExtraColors;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_SlideShowSettings(Powerpoint_2k::SlideShowSettingsPtr* SlideShowSettings/*[out,retval]*/)
{
  return (*this)->get_SlideShowSettings(SlideShowSettings);
}

template <class T> Powerpoint_2k::SlideShowSettingsPtr __fastcall
TCOM_PresentationT<T>::get_SlideShowSettings(void)
{
  Powerpoint_2k::SlideShowSettingsPtr SlideShowSettings;
  OLECHECK(this->get_SlideShowSettings((Powerpoint_2k::SlideShowSettingsPtr*)&SlideShowSettings));
  return SlideShowSettings;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_Fonts(Powerpoint_2k::FontsPtr* Fonts/*[out,retval]*/)
{
  return (*this)->get_Fonts(Fonts);
}

template <class T> Powerpoint_2k::FontsPtr __fastcall
TCOM_PresentationT<T>::get_Fonts(void)
{
  Powerpoint_2k::FontsPtr Fonts;
  OLECHECK(this->get_Fonts((Powerpoint_2k::FontsPtr*)&Fonts));
  return Fonts;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_Windoz(Powerpoint_2k::DocumentWindowsPtr* Windoz/*[out,retval]*/)
{
  return (*this)->get_Windoz(Windoz);
}

template <class T> Powerpoint_2k::DocumentWindowsPtr __fastcall
TCOM_PresentationT<T>::get_Windoz(void)
{
  Powerpoint_2k::DocumentWindowsPtr Windows;
  OLECHECK(this->get_Windoz((Powerpoint_2k::DocumentWindowsPtr*)&Windows));
  return Windows;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/)
{
  return (*this)->get_Tags(Tags);
}

template <class T> Powerpoint_2k::TagsPtr __fastcall
TCOM_PresentationT<T>::get_Tags(void)
{
  Powerpoint_2k::TagsPtr Tags;
  OLECHECK(this->get_Tags((Powerpoint_2k::TagsPtr*)&Tags));
  return Tags;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_DefaultShape(Powerpoint_2k::ShapePtr* DefaultShape/*[out,retval]*/)
{
  return (*this)->get_DefaultShape(DefaultShape);
}

template <class T> Powerpoint_2k::ShapePtr __fastcall
TCOM_PresentationT<T>::get_DefaultShape(void)
{
  Powerpoint_2k::ShapePtr DefaultShape;
  OLECHECK(this->get_DefaultShape((Powerpoint_2k::ShapePtr*)&DefaultShape));
  return DefaultShape;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_BuiltInDocumentProperties(LPDISPATCH* BuiltInDocumentProperties/*[out,retval]*/)
{
  return (*this)->get_BuiltInDocumentProperties(BuiltInDocumentProperties);
}

template <class T> LPDISPATCH __fastcall
TCOM_PresentationT<T>::get_BuiltInDocumentProperties(void)
{
  LPDISPATCH BuiltInDocumentProperties;
  OLECHECK(this->get_BuiltInDocumentProperties((LPDISPATCH*)&BuiltInDocumentProperties));
  return BuiltInDocumentProperties;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_CustomDocumentProperties(LPDISPATCH* CustomDocumentProperties/*[out,retval]*/)
{
  return (*this)->get_CustomDocumentProperties(CustomDocumentProperties);
}

template <class T> LPDISPATCH __fastcall
TCOM_PresentationT<T>::get_CustomDocumentProperties(void)
{
  LPDISPATCH CustomDocumentProperties;
  OLECHECK(this->get_CustomDocumentProperties((LPDISPATCH*)&CustomDocumentProperties));
  return CustomDocumentProperties;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_VBProject(Vbide_2k::VBProjectPtr* VBProject/*[out,retval]*/)
{
  return (*this)->get_VBProject(VBProject);
}

template <class T> Vbide_2k::VBProjectPtr __fastcall
TCOM_PresentationT<T>::get_VBProject(void)
{
  Vbide_2k::VBProjectPtr VBProject;
  OLECHECK(this->get_VBProject((Vbide_2k::VBProjectPtr*)&VBProject));
  return VBProject;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_ReadOnly(Office_2k::MsoTriState* ReadOnly/*[out,retval]*/)
{
  return (*this)->get_ReadOnly(ReadOnly);
}

template <class T> Office_2k::MsoTriState __fastcall
TCOM_PresentationT<T>::get_ReadOnly(void)
{
  Office_2k::MsoTriState ReadOnly;
  OLECHECK(this->get_ReadOnly((Office_2k::MsoTriState*)&ReadOnly));
  return ReadOnly;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_FullName(BSTR* FullName/*[out,retval]*/)
{
  return (*this)->get_FullName(FullName);
}

template <class T> BSTR __fastcall
TCOM_PresentationT<T>::get_FullName(void)
{
  BSTR FullName = 0;
  OLECHECK(this->get_FullName((BSTR*)&FullName));
  return FullName;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  return (*this)->get_Name(Name);
}

template <class T> BSTR __fastcall
TCOM_PresentationT<T>::get_Name(void)
{
  BSTR Name = 0;
  OLECHECK(this->get_Name((BSTR*)&Name));
  return Name;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_Path(BSTR* Path/*[out,retval]*/)
{
  return (*this)->get_Path(Path);
}

template <class T> BSTR __fastcall
TCOM_PresentationT<T>::get_Path(void)
{
  BSTR Path = 0;
  OLECHECK(this->get_Path((BSTR*)&Path));
  return Path;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_Saved(Office_2k::MsoTriState* Saved/*[out,retval]*/)
{
  return (*this)->get_Saved(Saved);
}

template <class T> Office_2k::MsoTriState __fastcall
TCOM_PresentationT<T>::get_Saved(void)
{
  Office_2k::MsoTriState Saved;
  OLECHECK(this->get_Saved((Office_2k::MsoTriState*)&Saved));
  return Saved;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::set_Saved(Office_2k::MsoTriState Saved/*[in]*/)
{
  return (*this)->set_Saved(Saved);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_LayoutDirection(Powerpoint_2k::PpDirection* LayoutDirection/*[out,retval]*/)
{
  return (*this)->get_LayoutDirection(LayoutDirection);
}

template <class T> Powerpoint_2k::PpDirection __fastcall
TCOM_PresentationT<T>::get_LayoutDirection(void)
{
  Powerpoint_2k::PpDirection LayoutDirection;
  OLECHECK(this->get_LayoutDirection((Powerpoint_2k::PpDirection*)&LayoutDirection));
  return LayoutDirection;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::set_LayoutDirection(Powerpoint_2k::PpDirection LayoutDirection/*[in]*/)
{
  return (*this)->set_LayoutDirection(LayoutDirection);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::NewWindow(Powerpoint_2k::DocumentWindowPtr* NewWindow/*[out,retval]*/)
{
  return (*this)->NewWindow(NewWindow);
}

template <class T> Powerpoint_2k::DocumentWindowPtr __fastcall
TCOM_PresentationT<T>::NewWindow(void)
{
  Powerpoint_2k::DocumentWindowPtr NewWindow;
  OLECHECK(this->NewWindow((Powerpoint_2k::DocumentWindowPtr*)&NewWindow));
  return NewWindow;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::FollowHyperlink(BSTR Address/*[in]*/, BSTR SubAddress/*[in,def,opt]*/, 
                                       TOLEBOOL NewWindow/*[in,def,opt]*/, 
                                       TOLEBOOL AddHistory/*[in,def,opt]*/, 
                                       BSTR ExtraInfo/*[in,def,opt]*/, 
                                       Office_2k::MsoExtraInfoMethod Method/*[in,def,opt]*/, 
                                       BSTR HeaderInfo/*[in,def,opt]*/)
{
  return (*this)->FollowHyperlink(Address, SubAddress, NewWindow, AddHistory, ExtraInfo, Method, 
                                  HeaderInfo);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::AddToFavorites(void)
{
  return (*this)->AddToFavorites();
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::Unused(void)
{
  return (*this)->Unused();
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_PrintOptions(Powerpoint_2k::PrintOptionsPtr* PrintOptions/*[out,retval]*/)
{
  return (*this)->get_PrintOptions(PrintOptions);
}

template <class T> Powerpoint_2k::PrintOptionsPtr __fastcall
TCOM_PresentationT<T>::get_PrintOptions(void)
{
  Powerpoint_2k::PrintOptionsPtr PrintOptions;
  OLECHECK(this->get_PrintOptions((Powerpoint_2k::PrintOptionsPtr*)&PrintOptions));
  return PrintOptions;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::PrintOut(int From/*[in,def,opt]*/, int To/*[in,def,opt]*/, 
                                BSTR PrintToFile/*[in,def,opt]*/, int Copies/*[in,def,opt]*/, 
                                Office_2k::MsoTriState Collate/*[in,def,opt]*/)
{
  return (*this)->PrintOut(From, To, PrintToFile, Copies, Collate);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::Save(void)
{
  return (*this)->Save();
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::SaveAs(BSTR FileName/*[in]*/, 
                              Powerpoint_2k::PpSaveAsFileType FileFormat/*[in,def,opt]*/, 
                              Office_2k::MsoTriState EmbedTrueTypeFonts/*[in,def,opt]*/)
{
  return (*this)->SaveAs(FileName, FileFormat, EmbedTrueTypeFonts);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::SaveCopyAs(BSTR FileName/*[in]*/, 
                                  Powerpoint_2k::PpSaveAsFileType FileFormat/*[in,def,opt]*/, 
                                  Office_2k::MsoTriState EmbedTrueTypeFonts/*[in,def,opt]*/)
{
  return (*this)->SaveCopyAs(FileName, FileFormat, EmbedTrueTypeFonts);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::Export(BSTR Path/*[in]*/, BSTR FilterName/*[in]*/, 
                              int ScaleWidth/*[in,def,opt]*/, int ScaleHeight/*[in,def,opt]*/)
{
  return (*this)->Export(Path, FilterName, ScaleWidth, ScaleHeight);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::Close(void)
{
  return (*this)->Close();
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::SetUndoText(BSTR Text/*[in]*/)
{
  return (*this)->SetUndoText(Text);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_Container(LPDISPATCH* Container/*[out,retval]*/)
{
  return (*this)->get_Container(Container);
}

template <class T> LPDISPATCH __fastcall
TCOM_PresentationT<T>::get_Container(void)
{
  LPDISPATCH Container;
  OLECHECK(this->get_Container((LPDISPATCH*)&Container));
  return Container;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_DisplayComments(Office_2k::MsoTriState* DisplayComments/*[out,retval]*/)
{
  return (*this)->get_DisplayComments(DisplayComments);
}

template <class T> Office_2k::MsoTriState __fastcall
TCOM_PresentationT<T>::get_DisplayComments(void)
{
  Office_2k::MsoTriState DisplayComments;
  OLECHECK(this->get_DisplayComments((Office_2k::MsoTriState*)&DisplayComments));
  return DisplayComments;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::set_DisplayComments(Office_2k::MsoTriState DisplayComments/*[in]*/)
{
  return (*this)->set_DisplayComments(DisplayComments);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_FarEastLineBreakLevel(Powerpoint_2k::PpFarEastLineBreakLevel* FarEastLineBreakLevel/*[out,retval]*/)
{
  return (*this)->get_FarEastLineBreakLevel(FarEastLineBreakLevel);
}

template <class T> Powerpoint_2k::PpFarEastLineBreakLevel __fastcall
TCOM_PresentationT<T>::get_FarEastLineBreakLevel(void)
{
  Powerpoint_2k::PpFarEastLineBreakLevel FarEastLineBreakLevel;
  OLECHECK(this->get_FarEastLineBreakLevel((Powerpoint_2k::PpFarEastLineBreakLevel*)&FarEastLineBreakLevel));
  return FarEastLineBreakLevel;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::set_FarEastLineBreakLevel(Powerpoint_2k::PpFarEastLineBreakLevel FarEastLineBreakLevel/*[in]*/)
{
  return (*this)->set_FarEastLineBreakLevel(FarEastLineBreakLevel);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_NoLineBreakBefore(BSTR* NoLineBreakBefore/*[out,retval]*/)
{
  return (*this)->get_NoLineBreakBefore(NoLineBreakBefore);
}

template <class T> BSTR __fastcall
TCOM_PresentationT<T>::get_NoLineBreakBefore(void)
{
  BSTR NoLineBreakBefore = 0;
  OLECHECK(this->get_NoLineBreakBefore((BSTR*)&NoLineBreakBefore));
  return NoLineBreakBefore;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::set_NoLineBreakBefore(BSTR NoLineBreakBefore/*[in]*/)
{
  return (*this)->set_NoLineBreakBefore(NoLineBreakBefore);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_NoLineBreakAfter(BSTR* NoLineBreakAfter/*[out,retval]*/)
{
  return (*this)->get_NoLineBreakAfter(NoLineBreakAfter);
}

template <class T> BSTR __fastcall
TCOM_PresentationT<T>::get_NoLineBreakAfter(void)
{
  BSTR NoLineBreakAfter = 0;
  OLECHECK(this->get_NoLineBreakAfter((BSTR*)&NoLineBreakAfter));
  return NoLineBreakAfter;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::set_NoLineBreakAfter(BSTR NoLineBreakAfter/*[in]*/)
{
  return (*this)->set_NoLineBreakAfter(NoLineBreakAfter);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::UpdateLinks(void)
{
  return (*this)->UpdateLinks();
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_SlideShowWindow(Powerpoint_2k::SlideShowWindowPtr* SlideShowWindow/*[out,retval]*/)
{
  return (*this)->get_SlideShowWindow(SlideShowWindow);
}

template <class T> Powerpoint_2k::SlideShowWindowPtr __fastcall
TCOM_PresentationT<T>::get_SlideShowWindow(void)
{
  Powerpoint_2k::SlideShowWindowPtr SlideShowWindow;
  OLECHECK(this->get_SlideShowWindow((Powerpoint_2k::SlideShowWindowPtr*)&SlideShowWindow));
  return SlideShowWindow;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_FarEastLineBreakLanguage(Office_2k::MsoFarEastLineBreakLanguageID* FarEastLineBreakLanguage/*[out,retval]*/)
{
  return (*this)->get_FarEastLineBreakLanguage(FarEastLineBreakLanguage);
}

template <class T> Office_2k::MsoFarEastLineBreakLanguageID __fastcall
TCOM_PresentationT<T>::get_FarEastLineBreakLanguage(void)
{
  Office_2k::MsoFarEastLineBreakLanguageID FarEastLineBreakLanguage;
  OLECHECK(this->get_FarEastLineBreakLanguage((Office_2k::MsoFarEastLineBreakLanguageID*)&FarEastLineBreakLanguage));
  return FarEastLineBreakLanguage;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::set_FarEastLineBreakLanguage(Office_2k::MsoFarEastLineBreakLanguageID FarEastLineBreakLanguage/*[in]*/)
{
  return (*this)->set_FarEastLineBreakLanguage(FarEastLineBreakLanguage);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::WebPagePreview(void)
{
  return (*this)->WebPagePreview();
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_DefaultLanguageID(Office_2k::MsoLanguageID* DefaultLanguageID/*[out,retval]*/)
{
  return (*this)->get_DefaultLanguageID(DefaultLanguageID);
}

template <class T> Office_2k::MsoLanguageID __fastcall
TCOM_PresentationT<T>::get_DefaultLanguageID(void)
{
  Office_2k::MsoLanguageID DefaultLanguageID;
  OLECHECK(this->get_DefaultLanguageID((Office_2k::MsoLanguageID*)&DefaultLanguageID));
  return DefaultLanguageID;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::set_DefaultLanguageID(Office_2k::MsoLanguageID DefaultLanguageID/*[in]*/)
{
  return (*this)->set_DefaultLanguageID(DefaultLanguageID);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_CommandBars(Office_2k::CommandBarsPtr* CommandBars/*[out,retval]*/)
{
  return (*this)->get_CommandBars(CommandBars);
}

template <class T> Office_2k::CommandBarsPtr __fastcall
TCOM_PresentationT<T>::get_CommandBars(void)
{
  Office_2k::CommandBarsPtr CommandBars;
  OLECHECK(this->get_CommandBars((Office_2k::CommandBarsPtr*)&CommandBars));
  return CommandBars;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_PublishObjects(Powerpoint_2k::PublishObjectsPtr* PublishObjects/*[out,retval]*/)
{
  return (*this)->get_PublishObjects(PublishObjects);
}

template <class T> Powerpoint_2k::PublishObjectsPtr __fastcall
TCOM_PresentationT<T>::get_PublishObjects(void)
{
  Powerpoint_2k::PublishObjectsPtr PublishObjects;
  OLECHECK(this->get_PublishObjects((Powerpoint_2k::PublishObjectsPtr*)&PublishObjects));
  return PublishObjects;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_WebOptions(Powerpoint_2k::WebOptionsPtr* WebOptions/*[out,retval]*/)
{
  return (*this)->get_WebOptions(WebOptions);
}

template <class T> Powerpoint_2k::WebOptionsPtr __fastcall
TCOM_PresentationT<T>::get_WebOptions(void)
{
  Powerpoint_2k::WebOptionsPtr WebOptions;
  OLECHECK(this->get_WebOptions((Powerpoint_2k::WebOptionsPtr*)&WebOptions));
  return WebOptions;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_HTMLProject(Office_2k::HTMLProjectPtr* HTMLProject/*[out,retval]*/)
{
  return (*this)->get_HTMLProject(HTMLProject);
}

template <class T> Office_2k::HTMLProjectPtr __fastcall
TCOM_PresentationT<T>::get_HTMLProject(void)
{
  Office_2k::HTMLProjectPtr HTMLProject;
  OLECHECK(this->get_HTMLProject((Office_2k::HTMLProjectPtr*)&HTMLProject));
  return HTMLProject;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::ReloadAs(Office_2k::MsoEncoding cp/*[in]*/)
{
  return (*this)->ReloadAs(cp);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::MakeIntoTemplate(Office_2k::MsoTriState IsDesignTemplate/*[in]*/)
{
  return (*this)->MakeIntoTemplate(IsDesignTemplate);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_EnvelopeVisible(Office_2k::MsoTriState* EnvelopeVisible/*[out,retval]*/)
{
  return (*this)->get_EnvelopeVisible(EnvelopeVisible);
}

template <class T> Office_2k::MsoTriState __fastcall
TCOM_PresentationT<T>::get_EnvelopeVisible(void)
{
  Office_2k::MsoTriState EnvelopeVisible;
  OLECHECK(this->get_EnvelopeVisible((Office_2k::MsoTriState*)&EnvelopeVisible));
  return EnvelopeVisible;
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::set_EnvelopeVisible(Office_2k::MsoTriState EnvelopeVisible/*[in]*/)
{
  return (*this)->set_EnvelopeVisible(EnvelopeVisible);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::sblt(BSTR s/*[in]*/)
{
  return (*this)->sblt(s);
}

template <class T> HRESULT __fastcall
TCOM_PresentationT<T>::get_VBASigned(Office_2k::MsoTriState* VBASigned/*[out,retval]*/)
{
  return (*this)->get_VBASigned(VBASigned);
}

template <class T> Office_2k::MsoTriState __fastcall
TCOM_PresentationT<T>::get_VBASigned(void)
{
  Office_2k::MsoTriState VBASigned;
  OLECHECK(this->get_VBASigned((Office_2k::MsoTriState*)&VBASigned));
  return VBASigned;
}

// *********************************************************************//
// DispIntf:  _Presentation
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149349D-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
_PresentationDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_PresentationDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_SlideMaster(Powerpoint_2k::_MasterPtr* SlideMaster/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideMaster"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::_Master**)SlideMaster /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::_MasterPtr __fastcall
_PresentationDispT<T>::get_SlideMaster(void)
{
  Powerpoint_2k::_MasterPtr SlideMaster;
  this->get_SlideMaster((Powerpoint_2k::_MasterPtr*)&SlideMaster);
  return SlideMaster;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_TitleMaster(Powerpoint_2k::_MasterPtr* TitleMaster/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TitleMaster"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::_Master**)TitleMaster /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::_MasterPtr __fastcall
_PresentationDispT<T>::get_TitleMaster(void)
{
  Powerpoint_2k::_MasterPtr TitleMaster;
  this->get_TitleMaster((Powerpoint_2k::_MasterPtr*)&TitleMaster);
  return TitleMaster;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_HasTitleMaster(Office_2k::MsoTriState* HasTitleMaster/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasTitleMaster"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)HasTitleMaster /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
_PresentationDispT<T>::get_HasTitleMaster(void)
{
  Office_2k::MsoTriState HasTitleMaster;
  this->get_HasTitleMaster((Office_2k::MsoTriState*)&HasTitleMaster);
  return HasTitleMaster;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::AddTitleMaster(Powerpoint_2k::_MasterPtr* TitleMaster/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTitleMaster"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::_Master**)TitleMaster /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::_MasterPtr __fastcall
_PresentationDispT<T>::AddTitleMaster(void)
{
  Powerpoint_2k::_MasterPtr TitleMaster;
  this->AddTitleMaster((Powerpoint_2k::_MasterPtr*)&TitleMaster);
  return TitleMaster;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::ApplyTemplate(BSTR FileName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ApplyTemplate"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_TemplateName(BSTR* TemplateName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TemplateName"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(TemplateName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PresentationDispT<T>::get_TemplateName(void)
{
  BSTR TemplateName;
  this->get_TemplateName((BSTR*)&TemplateName);
  return TemplateName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_NotesMaster(Powerpoint_2k::_MasterPtr* NotesMaster/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotesMaster"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::_Master**)NotesMaster /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::_MasterPtr __fastcall
_PresentationDispT<T>::get_NotesMaster(void)
{
  Powerpoint_2k::_MasterPtr NotesMaster;
  this->get_NotesMaster((Powerpoint_2k::_MasterPtr*)&NotesMaster);
  return NotesMaster;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_HandoutMaster(Powerpoint_2k::_MasterPtr* HandoutMaster/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HandoutMaster"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::_Master**)HandoutMaster /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::_MasterPtr __fastcall
_PresentationDispT<T>::get_HandoutMaster(void)
{
  Powerpoint_2k::_MasterPtr HandoutMaster;
  this->get_HandoutMaster((Powerpoint_2k::_MasterPtr*)&HandoutMaster);
  return HandoutMaster;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_Slides(Powerpoint_2k::SlidesPtr* Slides/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Slides"), DISPID(2011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Slides**)Slides /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::SlidesPtr __fastcall
_PresentationDispT<T>::get_Slides(void)
{
  Powerpoint_2k::SlidesPtr Slides;
  this->get_Slides((Powerpoint_2k::SlidesPtr*)&Slides);
  return Slides;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_PageSetup(Powerpoint_2k::PageSetupPtr* PageSetup/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PageSetup"), DISPID(2012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PageSetup**)PageSetup /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PageSetupPtr __fastcall
_PresentationDispT<T>::get_PageSetup(void)
{
  Powerpoint_2k::PageSetupPtr PageSetup;
  this->get_PageSetup((Powerpoint_2k::PageSetupPtr*)&PageSetup);
  return PageSetup;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_ColorSchemes(Powerpoint_2k::ColorSchemesPtr* ColorSchemes/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorSchemes"), DISPID(2013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::ColorSchemes**)ColorSchemes /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::ColorSchemesPtr __fastcall
_PresentationDispT<T>::get_ColorSchemes(void)
{
  Powerpoint_2k::ColorSchemesPtr ColorSchemes;
  this->get_ColorSchemes((Powerpoint_2k::ColorSchemesPtr*)&ColorSchemes);
  return ColorSchemes;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_ExtraColors(Powerpoint_2k::ExtraColorsPtr* ExtraColors/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExtraColors"), DISPID(2014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::ExtraColors**)ExtraColors /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::ExtraColorsPtr __fastcall
_PresentationDispT<T>::get_ExtraColors(void)
{
  Powerpoint_2k::ExtraColorsPtr ExtraColors;
  this->get_ExtraColors((Powerpoint_2k::ExtraColorsPtr*)&ExtraColors);
  return ExtraColors;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_SlideShowSettings(Powerpoint_2k::SlideShowSettingsPtr* SlideShowSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideShowSettings"), DISPID(2015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::SlideShowSettings**)SlideShowSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::SlideShowSettingsPtr __fastcall
_PresentationDispT<T>::get_SlideShowSettings(void)
{
  Powerpoint_2k::SlideShowSettingsPtr SlideShowSettings;
  this->get_SlideShowSettings((Powerpoint_2k::SlideShowSettingsPtr*)&SlideShowSettings);
  return SlideShowSettings;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_Fonts(Powerpoint_2k::FontsPtr* Fonts/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Fonts"), DISPID(2016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Fonts**)Fonts /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::FontsPtr __fastcall
_PresentationDispT<T>::get_Fonts(void)
{
  Powerpoint_2k::FontsPtr Fonts;
  this->get_Fonts((Powerpoint_2k::FontsPtr*)&Fonts);
  return Fonts;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_Windoz(Powerpoint_2k::DocumentWindowsPtr* Windoz/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Windows"), DISPID(2017));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::DocumentWindows**)Windows /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::DocumentWindowsPtr __fastcall
_PresentationDispT<T>::get_Windoz(void)
{
  Powerpoint_2k::DocumentWindowsPtr Windows;
  this->get_Windoz((Powerpoint_2k::DocumentWindowsPtr*)&Windows);
  return Windows;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tags"), DISPID(2018));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Tags**)Tags /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::TagsPtr __fastcall
_PresentationDispT<T>::get_Tags(void)
{
  Powerpoint_2k::TagsPtr Tags;
  this->get_Tags((Powerpoint_2k::TagsPtr*)&Tags);
  return Tags;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_DefaultShape(Powerpoint_2k::ShapePtr* DefaultShape/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultShape"), DISPID(2019));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Shape**)DefaultShape /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::ShapePtr __fastcall
_PresentationDispT<T>::get_DefaultShape(void)
{
  Powerpoint_2k::ShapePtr DefaultShape;
  this->get_DefaultShape((Powerpoint_2k::ShapePtr*)&DefaultShape);
  return DefaultShape;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_BuiltInDocumentProperties(LPDISPATCH* BuiltInDocumentProperties/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuiltInDocumentProperties"), DISPID(2020));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BuiltInDocumentProperties /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_PresentationDispT<T>::get_BuiltInDocumentProperties(void)
{
  LPDISPATCH BuiltInDocumentProperties;
  this->get_BuiltInDocumentProperties((LPDISPATCH*)&BuiltInDocumentProperties);
  return BuiltInDocumentProperties;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_CustomDocumentProperties(LPDISPATCH* CustomDocumentProperties/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CustomDocumentProperties"), DISPID(2021));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CustomDocumentProperties /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_PresentationDispT<T>::get_CustomDocumentProperties(void)
{
  LPDISPATCH CustomDocumentProperties;
  this->get_CustomDocumentProperties((LPDISPATCH*)&CustomDocumentProperties);
  return CustomDocumentProperties;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_VBProject(Vbide_2k::VBProjectPtr* VBProject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VBProject"), DISPID(2022));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_2k::VBProject**)VBProject /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_2k::VBProjectPtr __fastcall
_PresentationDispT<T>::get_VBProject(void)
{
  Vbide_2k::VBProjectPtr VBProject;
  this->get_VBProject((Vbide_2k::VBProjectPtr*)&VBProject);
  return VBProject;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_ReadOnly(Office_2k::MsoTriState* ReadOnly/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReadOnly"), DISPID(2023));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ReadOnly /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
_PresentationDispT<T>::get_ReadOnly(void)
{
  Office_2k::MsoTriState ReadOnly;
  this->get_ReadOnly((Office_2k::MsoTriState*)&ReadOnly);
  return ReadOnly;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_FullName(BSTR* FullName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullName"), DISPID(2024));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FullName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PresentationDispT<T>::get_FullName(void)
{
  BSTR FullName;
  this->get_FullName((BSTR*)&FullName);
  return FullName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(2025));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PresentationDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_Path(BSTR* Path/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Path"), DISPID(2026));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Path /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PresentationDispT<T>::get_Path(void)
{
  BSTR Path;
  this->get_Path((BSTR*)&Path);
  return Path;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_Saved(Office_2k::MsoTriState* Saved/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Saved"), DISPID(2027));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Saved /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
_PresentationDispT<T>::get_Saved(void)
{
  Office_2k::MsoTriState Saved;
  this->get_Saved((Office_2k::MsoTriState*)&Saved);
  return Saved;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::set_Saved(Office_2k::MsoTriState Saved/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Saved"), DISPID(2027));
  TAutoArgs<1> _args;
  _args[1] = (int)Saved /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_LayoutDirection(Powerpoint_2k::PpDirection* LayoutDirection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LayoutDirection"), DISPID(2028));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)LayoutDirection /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpDirection __fastcall
_PresentationDispT<T>::get_LayoutDirection(void)
{
  Powerpoint_2k::PpDirection LayoutDirection;
  this->get_LayoutDirection((Powerpoint_2k::PpDirection*)&LayoutDirection);
  return LayoutDirection;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::set_LayoutDirection(Powerpoint_2k::PpDirection LayoutDirection/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LayoutDirection"), DISPID(2028));
  TAutoArgs<1> _args;
  _args[1] = (int)LayoutDirection /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::NewWindow(Powerpoint_2k::DocumentWindowPtr* NewWindow/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NewWindow"), DISPID(2029));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::DocumentWindow**)NewWindow /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::DocumentWindowPtr __fastcall
_PresentationDispT<T>::NewWindow(void)
{
  Powerpoint_2k::DocumentWindowPtr NewWindow;
  this->NewWindow((Powerpoint_2k::DocumentWindowPtr*)&NewWindow);
  return NewWindow;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::FollowHyperlink(BSTR Address/*[in]*/, BSTR SubAddress/*[in,def,opt]*/, 
                                       TOLEBOOL NewWindow/*[in,def,opt]*/, 
                                       TOLEBOOL AddHistory/*[in,def,opt]*/, 
                                       BSTR ExtraInfo/*[in,def,opt]*/, 
                                       Office_2k::MsoExtraInfoMethod Method/*[in,def,opt]*/, 
                                       BSTR HeaderInfo/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("FollowHyperlink"), DISPID(2030));
  TAutoArgs<7> _args;
  _args[1] = Address /*[VT_BSTR:0]*/;
  _args[2] = SubAddress /*[VT_BSTR:0]*/;
  _args[3] = NewWindow /*[VT_BOOL:0]*/;
  _args[4] = AddHistory /*[VT_BOOL:0]*/;
  _args[5] = ExtraInfo /*[VT_BSTR:0]*/;
  _args[6] = (int)Method /*[VT_USERDEFINED:0]*/;
  _args[7] = HeaderInfo /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::AddToFavorites()
{
  _TDispID _dispid(*this, OLETEXT("AddToFavorites"), DISPID(2031));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::Unused()
{
  _TDispID _dispid(*this, OLETEXT("Unused"), DISPID(2032));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_PrintOptions(Powerpoint_2k::PrintOptionsPtr* PrintOptions/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintOptions"), DISPID(2033));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PrintOptions**)PrintOptions /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PrintOptionsPtr __fastcall
_PresentationDispT<T>::get_PrintOptions(void)
{
  Powerpoint_2k::PrintOptionsPtr PrintOptions;
  this->get_PrintOptions((Powerpoint_2k::PrintOptionsPtr*)&PrintOptions);
  return PrintOptions;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::PrintOut(int From/*[in,def,opt]*/, int To/*[in,def,opt]*/, 
                                BSTR PrintToFile/*[in,def,opt]*/, int Copies/*[in,def,opt]*/, 
                                Office_2k::MsoTriState Collate/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintOut"), DISPID(2034));
  TAutoArgs<5> _args;
  _args[1] = From /*[VT_INT:0]*/;
  _args[2] = To /*[VT_INT:0]*/;
  _args[3] = PrintToFile /*[VT_BSTR:0]*/;
  _args[4] = Copies /*[VT_INT:0]*/;
  _args[5] = (int)Collate /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::Save()
{
  _TDispID _dispid(*this, OLETEXT("Save"), DISPID(2035));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::SaveAs(BSTR FileName/*[in]*/, 
                              Powerpoint_2k::PpSaveAsFileType FileFormat/*[in,def,opt]*/, 
                              Office_2k::MsoTriState EmbedTrueTypeFonts/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("SaveAs"), DISPID(2036));
  TAutoArgs<3> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  _args[2] = (int)FileFormat /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)EmbedTrueTypeFonts /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::SaveCopyAs(BSTR FileName/*[in]*/, 
                                  Powerpoint_2k::PpSaveAsFileType FileFormat/*[in,def,opt]*/, 
                                  Office_2k::MsoTriState EmbedTrueTypeFonts/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("SaveCopyAs"), DISPID(2037));
  TAutoArgs<3> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  _args[2] = (int)FileFormat /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)EmbedTrueTypeFonts /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::Export(BSTR Path/*[in]*/, BSTR FilterName/*[in]*/, 
                              int ScaleWidth/*[in,def,opt]*/, int ScaleHeight/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Export"), DISPID(2038));
  TAutoArgs<4> _args;
  _args[1] = Path /*[VT_BSTR:0]*/;
  _args[2] = FilterName /*[VT_BSTR:0]*/;
  _args[3] = ScaleWidth /*[VT_INT:0]*/;
  _args[4] = ScaleHeight /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::Close()
{
  _TDispID _dispid(*this, OLETEXT("Close"), DISPID(2039));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::SetUndoText(BSTR Text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetUndoText"), DISPID(2040));
  TAutoArgs<1> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_Container(LPDISPATCH* Container/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Container"), DISPID(2041));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Container /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_PresentationDispT<T>::get_Container(void)
{
  LPDISPATCH Container;
  this->get_Container((LPDISPATCH*)&Container);
  return Container;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_DisplayComments(Office_2k::MsoTriState* DisplayComments/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayComments"), DISPID(2042));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)DisplayComments /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
_PresentationDispT<T>::get_DisplayComments(void)
{
  Office_2k::MsoTriState DisplayComments;
  this->get_DisplayComments((Office_2k::MsoTriState*)&DisplayComments);
  return DisplayComments;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::set_DisplayComments(Office_2k::MsoTriState DisplayComments/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayComments"), DISPID(2042));
  TAutoArgs<1> _args;
  _args[1] = (int)DisplayComments /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_FarEastLineBreakLevel(Powerpoint_2k::PpFarEastLineBreakLevel* FarEastLineBreakLevel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FarEastLineBreakLevel"), DISPID(2043));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)FarEastLineBreakLevel /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpFarEastLineBreakLevel __fastcall
_PresentationDispT<T>::get_FarEastLineBreakLevel(void)
{
  Powerpoint_2k::PpFarEastLineBreakLevel FarEastLineBreakLevel;
  this->get_FarEastLineBreakLevel((Powerpoint_2k::PpFarEastLineBreakLevel*)&FarEastLineBreakLevel);
  return FarEastLineBreakLevel;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::set_FarEastLineBreakLevel(Powerpoint_2k::PpFarEastLineBreakLevel FarEastLineBreakLevel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FarEastLineBreakLevel"), DISPID(2043));
  TAutoArgs<1> _args;
  _args[1] = (int)FarEastLineBreakLevel /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_NoLineBreakBefore(BSTR* NoLineBreakBefore/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NoLineBreakBefore"), DISPID(2044));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(NoLineBreakBefore /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PresentationDispT<T>::get_NoLineBreakBefore(void)
{
  BSTR NoLineBreakBefore;
  this->get_NoLineBreakBefore((BSTR*)&NoLineBreakBefore);
  return NoLineBreakBefore;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::set_NoLineBreakBefore(BSTR NoLineBreakBefore/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NoLineBreakBefore"), DISPID(2044));
  TAutoArgs<1> _args;
  _args[1] = NoLineBreakBefore /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_NoLineBreakAfter(BSTR* NoLineBreakAfter/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NoLineBreakAfter"), DISPID(2045));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(NoLineBreakAfter /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PresentationDispT<T>::get_NoLineBreakAfter(void)
{
  BSTR NoLineBreakAfter;
  this->get_NoLineBreakAfter((BSTR*)&NoLineBreakAfter);
  return NoLineBreakAfter;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::set_NoLineBreakAfter(BSTR NoLineBreakAfter/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NoLineBreakAfter"), DISPID(2045));
  TAutoArgs<1> _args;
  _args[1] = NoLineBreakAfter /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::UpdateLinks()
{
  _TDispID _dispid(*this, OLETEXT("UpdateLinks"), DISPID(2046));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_SlideShowWindow(Powerpoint_2k::SlideShowWindowPtr* SlideShowWindow/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideShowWindow"), DISPID(2047));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::SlideShowWindow**)SlideShowWindow /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::SlideShowWindowPtr __fastcall
_PresentationDispT<T>::get_SlideShowWindow(void)
{
  Powerpoint_2k::SlideShowWindowPtr SlideShowWindow;
  this->get_SlideShowWindow((Powerpoint_2k::SlideShowWindowPtr*)&SlideShowWindow);
  return SlideShowWindow;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_FarEastLineBreakLanguage(Office_2k::MsoFarEastLineBreakLanguageID* FarEastLineBreakLanguage/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FarEastLineBreakLanguage"), DISPID(2048));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)FarEastLineBreakLanguage /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoFarEastLineBreakLanguageID __fastcall
_PresentationDispT<T>::get_FarEastLineBreakLanguage(void)
{
  Office_2k::MsoFarEastLineBreakLanguageID FarEastLineBreakLanguage;
  this->get_FarEastLineBreakLanguage((Office_2k::MsoFarEastLineBreakLanguageID*)&FarEastLineBreakLanguage);
  return FarEastLineBreakLanguage;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::set_FarEastLineBreakLanguage(Office_2k::MsoFarEastLineBreakLanguageID FarEastLineBreakLanguage/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FarEastLineBreakLanguage"), DISPID(2048));
  TAutoArgs<1> _args;
  _args[1] = (int)FarEastLineBreakLanguage /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::WebPagePreview()
{
  _TDispID _dispid(*this, OLETEXT("WebPagePreview"), DISPID(2049));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_DefaultLanguageID(Office_2k::MsoLanguageID* DefaultLanguageID/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultLanguageID"), DISPID(2050));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)DefaultLanguageID /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoLanguageID __fastcall
_PresentationDispT<T>::get_DefaultLanguageID(void)
{
  Office_2k::MsoLanguageID DefaultLanguageID;
  this->get_DefaultLanguageID((Office_2k::MsoLanguageID*)&DefaultLanguageID);
  return DefaultLanguageID;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::set_DefaultLanguageID(Office_2k::MsoLanguageID DefaultLanguageID/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultLanguageID"), DISPID(2050));
  TAutoArgs<1> _args;
  _args[1] = (int)DefaultLanguageID /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_CommandBars(Office_2k::CommandBarsPtr* CommandBars/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CommandBars"), DISPID(2051));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::CommandBars**)CommandBars /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::CommandBarsPtr __fastcall
_PresentationDispT<T>::get_CommandBars(void)
{
  Office_2k::CommandBarsPtr CommandBars;
  this->get_CommandBars((Office_2k::CommandBarsPtr*)&CommandBars);
  return CommandBars;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_PublishObjects(Powerpoint_2k::PublishObjectsPtr* PublishObjects/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PublishObjects"), DISPID(2052));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PublishObjects**)PublishObjects /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PublishObjectsPtr __fastcall
_PresentationDispT<T>::get_PublishObjects(void)
{
  Powerpoint_2k::PublishObjectsPtr PublishObjects;
  this->get_PublishObjects((Powerpoint_2k::PublishObjectsPtr*)&PublishObjects);
  return PublishObjects;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_WebOptions(Powerpoint_2k::WebOptionsPtr* WebOptions/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WebOptions"), DISPID(2053));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::WebOptions**)WebOptions /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::WebOptionsPtr __fastcall
_PresentationDispT<T>::get_WebOptions(void)
{
  Powerpoint_2k::WebOptionsPtr WebOptions;
  this->get_WebOptions((Powerpoint_2k::WebOptionsPtr*)&WebOptions);
  return WebOptions;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_HTMLProject(Office_2k::HTMLProjectPtr* HTMLProject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLProject"), DISPID(2054));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::HTMLProject**)HTMLProject /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::HTMLProjectPtr __fastcall
_PresentationDispT<T>::get_HTMLProject(void)
{
  Office_2k::HTMLProjectPtr HTMLProject;
  this->get_HTMLProject((Office_2k::HTMLProjectPtr*)&HTMLProject);
  return HTMLProject;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::ReloadAs(Office_2k::MsoEncoding cp/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReloadAs"), DISPID(2055));
  TAutoArgs<1> _args;
  _args[1] = (int)cp /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::MakeIntoTemplate(Office_2k::MsoTriState IsDesignTemplate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MakeIntoTemplate"), DISPID(2056));
  TAutoArgs<1> _args;
  _args[1] = (int)IsDesignTemplate /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_EnvelopeVisible(Office_2k::MsoTriState* EnvelopeVisible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnvelopeVisible"), DISPID(2057));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)EnvelopeVisible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
_PresentationDispT<T>::get_EnvelopeVisible(void)
{
  Office_2k::MsoTriState EnvelopeVisible;
  this->get_EnvelopeVisible((Office_2k::MsoTriState*)&EnvelopeVisible);
  return EnvelopeVisible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::set_EnvelopeVisible(Office_2k::MsoTriState EnvelopeVisible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnvelopeVisible"), DISPID(2057));
  TAutoArgs<1> _args;
  _args[1] = (int)EnvelopeVisible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::sblt(BSTR s/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("sblt"), DISPID(2058));
  TAutoArgs<1> _args;
  _args[1] = s /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PresentationDispT<T>::get_VBASigned(Office_2k::MsoTriState* VBASigned/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VBASigned"), DISPID(2059));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)VBASigned /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
_PresentationDispT<T>::get_VBASigned(void)
{
  Office_2k::MsoTriState VBASigned;
  this->get_VBASigned((Office_2k::MsoTriState*)&VBASigned);
  return VBASigned;
}

// *********************************************************************//
// DispIntf:  Hyperlinks
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493464-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinksDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
HyperlinksDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinksDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
HyperlinksDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinksDispT<T>::Item(int index/*[in]*/, Powerpoint_2k::HyperlinkPtr* Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Hyperlink**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::HyperlinkPtr __fastcall
HyperlinksDispT<T>::Item(int index/*[in]*/)
{
  Powerpoint_2k::HyperlinkPtr Item;
  this->Item(index, (Powerpoint_2k::HyperlinkPtr*)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinksDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
HyperlinksDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinksDispT<T>::_Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
HyperlinksDispT<T>::_Index(int index/*[in]*/)
{
  TVariant _Index;
  this->_Index(index, (TVariant*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinksDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
HyperlinksDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  Hyperlink
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493465-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinkDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
HyperlinkDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinkDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
HyperlinkDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinkDispT<T>::get_Type(Office_2k::MsoHyperlinkType* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoHyperlinkType __fastcall
HyperlinkDispT<T>::get_Type(void)
{
  Office_2k::MsoHyperlinkType Type;
  this->get_Type((Office_2k::MsoHyperlinkType*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinkDispT<T>::get_Address(BSTR* Address/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Address"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Address /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
HyperlinkDispT<T>::get_Address(void)
{
  BSTR Address;
  this->get_Address((BSTR*)&Address);
  return Address;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinkDispT<T>::set_Address(BSTR Address/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Address"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = Address /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinkDispT<T>::get_SubAddress(BSTR* SubAddress/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SubAddress"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SubAddress /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
HyperlinkDispT<T>::get_SubAddress(void)
{
  BSTR SubAddress;
  this->get_SubAddress((BSTR*)&SubAddress);
  return SubAddress;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinkDispT<T>::set_SubAddress(BSTR SubAddress/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SubAddress"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = SubAddress /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinkDispT<T>::AddToFavorites()
{
  _TDispID _dispid(*this, OLETEXT("AddToFavorites"), DISPID(2006));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinkDispT<T>::get_EmailSubject(BSTR* EmailSubject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EmailSubject"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(EmailSubject /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
HyperlinkDispT<T>::get_EmailSubject(void)
{
  BSTR EmailSubject;
  this->get_EmailSubject((BSTR*)&EmailSubject);
  return EmailSubject;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinkDispT<T>::set_EmailSubject(BSTR EmailSubject/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EmailSubject"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = EmailSubject /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinkDispT<T>::get_ScreenTip(BSTR* ScreenTip/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScreenTip"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ScreenTip /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
HyperlinkDispT<T>::get_ScreenTip(void)
{
  BSTR ScreenTip;
  this->get_ScreenTip((BSTR*)&ScreenTip);
  return ScreenTip;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinkDispT<T>::set_ScreenTip(BSTR ScreenTip/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScreenTip"), DISPID(2008));
  TAutoArgs<1> _args;
  _args[1] = ScreenTip /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinkDispT<T>::get_TextToDisplay(BSTR* TextToDisplay/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextToDisplay"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(TextToDisplay /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
HyperlinkDispT<T>::get_TextToDisplay(void)
{
  BSTR TextToDisplay;
  this->get_TextToDisplay((BSTR*)&TextToDisplay);
  return TextToDisplay;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinkDispT<T>::set_TextToDisplay(BSTR TextToDisplay/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextToDisplay"), DISPID(2009));
  TAutoArgs<1> _args;
  _args[1] = TextToDisplay /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinkDispT<T>::get_ShowandReturn(Office_2k::MsoTriState* ShowandReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowandReturn"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ShowandReturn /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
HyperlinkDispT<T>::get_ShowandReturn(void)
{
  Office_2k::MsoTriState ShowandReturn;
  this->get_ShowandReturn((Office_2k::MsoTriState*)&ShowandReturn);
  return ShowandReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinkDispT<T>::set_ShowandReturn(Office_2k::MsoTriState ShowandReturn/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowandReturn"), DISPID(2010));
  TAutoArgs<1> _args;
  _args[1] = (int)ShowandReturn /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinkDispT<T>::Follow()
{
  _TDispID _dispid(*this, OLETEXT("Follow"), DISPID(2011));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinkDispT<T>::CreateNewDocument(BSTR FileName/*[in]*/, Office_2k::MsoTriState EditNow/*[in]*/, 
                                     Office_2k::MsoTriState Overwrite/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateNewDocument"), DISPID(2012));
  TAutoArgs<3> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  _args[2] = (int)EditNow /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)Overwrite /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HyperlinkDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(2013));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  PageSetup
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493466-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageSetupDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
PageSetupDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageSetupDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PageSetupDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageSetupDispT<T>::get_FirstSlideNumber(int* FirstSlideNumber/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FirstSlideNumber"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FirstSlideNumber /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PageSetupDispT<T>::get_FirstSlideNumber(void)
{
  int FirstSlideNumber;
  this->get_FirstSlideNumber((int*)&FirstSlideNumber);
  return FirstSlideNumber;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageSetupDispT<T>::set_FirstSlideNumber(int FirstSlideNumber/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FirstSlideNumber"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = FirstSlideNumber /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageSetupDispT<T>::get_SlideHeight(float* SlideHeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideHeight"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SlideHeight /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PageSetupDispT<T>::get_SlideHeight(void)
{
  float SlideHeight;
  this->get_SlideHeight((float*)&SlideHeight);
  return SlideHeight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageSetupDispT<T>::set_SlideHeight(float SlideHeight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideHeight"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = SlideHeight /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageSetupDispT<T>::get_SlideWidth(float* SlideWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideWidth"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SlideWidth /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PageSetupDispT<T>::get_SlideWidth(void)
{
  float SlideWidth;
  this->get_SlideWidth((float*)&SlideWidth);
  return SlideWidth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageSetupDispT<T>::set_SlideWidth(float SlideWidth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideWidth"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = SlideWidth /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageSetupDispT<T>::get_SlideSize(Powerpoint_2k::PpSlideSizeType* SlideSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideSize"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)SlideSize /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpSlideSizeType __fastcall
PageSetupDispT<T>::get_SlideSize(void)
{
  Powerpoint_2k::PpSlideSizeType SlideSize;
  this->get_SlideSize((Powerpoint_2k::PpSlideSizeType*)&SlideSize);
  return SlideSize;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageSetupDispT<T>::set_SlideSize(Powerpoint_2k::PpSlideSizeType SlideSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideSize"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = (int)SlideSize /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageSetupDispT<T>::get_NotesOrientation(Office_2k::MsoOrientation* NotesOrientation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotesOrientation"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)NotesOrientation /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoOrientation __fastcall
PageSetupDispT<T>::get_NotesOrientation(void)
{
  Office_2k::MsoOrientation NotesOrientation;
  this->get_NotesOrientation((Office_2k::MsoOrientation*)&NotesOrientation);
  return NotesOrientation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageSetupDispT<T>::set_NotesOrientation(Office_2k::MsoOrientation NotesOrientation/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotesOrientation"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = (int)NotesOrientation /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageSetupDispT<T>::get_SlideOrientation(Office_2k::MsoOrientation* SlideOrientation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideOrientation"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)SlideOrientation /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoOrientation __fastcall
PageSetupDispT<T>::get_SlideOrientation(void)
{
  Office_2k::MsoOrientation SlideOrientation;
  this->get_SlideOrientation((Office_2k::MsoOrientation*)&SlideOrientation);
  return SlideOrientation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageSetupDispT<T>::set_SlideOrientation(Office_2k::MsoOrientation SlideOrientation/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideOrientation"), DISPID(2008));
  TAutoArgs<1> _args;
  _args[1] = (int)SlideOrientation /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  Fonts
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493467-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontsDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
FontsDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontsDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
FontsDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontsDispT<T>::Item(TVariantInParam index/*[in]*/, Powerpoint_2k::FontPtr* Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Font**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::FontPtr __fastcall
FontsDispT<T>::Item(TVariantInParam index/*[in]*/)
{
  Powerpoint_2k::FontPtr Item;
  this->Item(index, (Powerpoint_2k::FontPtr*)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontsDispT<T>::Replace(BSTR Original/*[in]*/, BSTR Replacement/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Replace"), DISPID(2003));
  TAutoArgs<2> _args;
  _args[1] = Original /*[VT_BSTR:0]*/;
  _args[2] = Replacement /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontsDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
FontsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontsDispT<T>::_Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
FontsDispT<T>::_Index(int index/*[in]*/)
{
  TVariant _Index;
  this->_Index(index, (TVariant*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
FontsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  ExtraColors
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493468-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ExtraColorsDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
ExtraColorsDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ExtraColorsDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ExtraColorsDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ExtraColorsDispT<T>::Item(int index/*[in]*/, Office_2k::MsoRGBType* Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(Item /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_2k::MsoRGBType __fastcall
ExtraColorsDispT<T>::Item(int index/*[in]*/)
{
  Office_2k::MsoRGBType Item;
  this->Item(index, (Office_2k::MsoRGBType*)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ExtraColorsDispT<T>::Add(Office_2k::MsoRGBType Type/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = Type /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ExtraColorsDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
ExtraColorsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ExtraColorsDispT<T>::_Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
ExtraColorsDispT<T>::_Index(int index/*[in]*/)
{
  TVariant _Index;
  this->_Index(index, (TVariant*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ExtraColorsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ExtraColorsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  Slides
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493469-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlidesDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
SlidesDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlidesDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
SlidesDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlidesDispT<T>::Item(TVariantInParam index/*[in]*/, 
                     Powerpoint_2k::PowerPointSlidePtr* Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointSlide**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointSlidePtr __fastcall
SlidesDispT<T>::Item(TVariantInParam index/*[in]*/)
{
  Powerpoint_2k::PowerPointSlidePtr Item;
  this->Item(index, (Powerpoint_2k::PowerPointSlidePtr*)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlidesDispT<T>::FindBySlideID(long SlideID/*[in]*/, 
                              Powerpoint_2k::PowerPointSlidePtr* FindBySlideID/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FindBySlideID"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = SlideID /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointSlide**)FindBySlideID /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointSlidePtr __fastcall
SlidesDispT<T>::FindBySlideID(long SlideID/*[in]*/)
{
  Powerpoint_2k::PowerPointSlidePtr FindBySlideID;
  this->FindBySlideID(SlideID, (Powerpoint_2k::PowerPointSlidePtr*)&FindBySlideID);
  return FindBySlideID;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlidesDispT<T>::Add(int index/*[in]*/, Powerpoint_2k::PpSlideLayout Layout/*[in]*/, 
                    Powerpoint_2k::PowerPointSlidePtr* Add/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2004));
  TAutoArgs<2> _args;
  _args[1] = index /*[VT_INT:0]*/;
  _args[2] = (int)Layout /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointSlide**)Add /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointSlidePtr __fastcall
SlidesDispT<T>::Add(int index/*[in]*/, Powerpoint_2k::PpSlideLayout Layout/*[in]*/)
{
  Powerpoint_2k::PowerPointSlidePtr Add;
  this->Add(index, Layout, (Powerpoint_2k::PowerPointSlidePtr*)&Add);
  return Add;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlidesDispT<T>::InsertFromFile(BSTR FileName/*[in]*/, int index/*[in]*/, 
                               int SlideStart/*[in,def,opt]*/, int SlideEnd/*[in,def,opt]*/, 
                               int* FromFile/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InsertFromFile"), DISPID(2005));
  TAutoArgs<4> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  _args[2] = index /*[VT_INT:0]*/;
  _args[3] = SlideStart /*[VT_INT:0]*/;
  _args[4] = SlideEnd /*[VT_INT:0]*/;
  return OutRetValSetterPtr(FromFile /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
SlidesDispT<T>::InsertFromFile(BSTR FileName/*[in]*/, int index/*[in]*/, 
                               int SlideStart/*[in,def,opt]*/, int SlideEnd/*[in,def,opt]*/)
{
  int FromFile;
  this->InsertFromFile(FileName, index, SlideStart, SlideEnd, (int*)&FromFile);
  return FromFile;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlidesDispT<T>::Range(TVariantInParam index/*[in,opt]*/, 
                      Powerpoint_2k::SlideRangePtr* Range/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Range"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::SlideRange**)Range /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::SlideRangePtr __fastcall
SlidesDispT<T>::Range(TVariantInParam index/*[in,opt]*/)
{
  Powerpoint_2k::SlideRangePtr Range;
  this->Range(index, (Powerpoint_2k::SlideRangePtr*)&Range);
  return Range;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlidesDispT<T>::Paste(int index/*[in,def,opt]*/, Powerpoint_2k::SlideRangePtr* Paste/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Paste"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::SlideRange**)Paste /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::SlideRangePtr __fastcall
SlidesDispT<T>::Paste(int index/*[in,def,opt]*/)
{
  Powerpoint_2k::SlideRangePtr Paste;
  this->Paste(index, (Powerpoint_2k::SlideRangePtr*)&Paste);
  return Paste;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlidesDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
SlidesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlidesDispT<T>::_Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
SlidesDispT<T>::_Index(int index/*[in]*/)
{
  TVariant _Index;
  this->_Index(index, (TVariant*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlidesDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
SlidesDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// SmartIntf: TCOM_Slide
// Interface: _Slide
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  return (*this)->get_Application(Application);
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
TCOM_SlideT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
  return Application;
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  return (*this)->get_Parent(Parent);
}

template <class T> LPDISPATCH __fastcall
TCOM_SlideT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
  return Parent;
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_Shapes(Powerpoint_2k::ShapesPtr* Shapes/*[out,retval]*/)
{
  return (*this)->get_Shapes(Shapes);
}

template <class T> Powerpoint_2k::ShapesPtr __fastcall
TCOM_SlideT<T>::get_Shapes(void)
{
  Powerpoint_2k::ShapesPtr Shapes;
  OLECHECK(this->get_Shapes((Powerpoint_2k::ShapesPtr*)&Shapes));
  return Shapes;
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_HeadersFooters(Powerpoint_2k::HeadersFootersPtr* HeadersFooters/*[out,retval]*/)
{
  return (*this)->get_HeadersFooters(HeadersFooters);
}

template <class T> Powerpoint_2k::HeadersFootersPtr __fastcall
TCOM_SlideT<T>::get_HeadersFooters(void)
{
  Powerpoint_2k::HeadersFootersPtr HeadersFooters;
  OLECHECK(this->get_HeadersFooters((Powerpoint_2k::HeadersFootersPtr*)&HeadersFooters));
  return HeadersFooters;
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_SlideShowTransition(Powerpoint_2k::SlideShowTransitionPtr* SlideShowTransition/*[out,retval]*/)
{
  return (*this)->get_SlideShowTransition(SlideShowTransition);
}

template <class T> Powerpoint_2k::SlideShowTransitionPtr __fastcall
TCOM_SlideT<T>::get_SlideShowTransition(void)
{
  Powerpoint_2k::SlideShowTransitionPtr SlideShowTransition;
  OLECHECK(this->get_SlideShowTransition((Powerpoint_2k::SlideShowTransitionPtr*)&SlideShowTransition));
  return SlideShowTransition;
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_ColorScheme(Powerpoint_2k::ColorSchemePtr* ColorScheme/*[out,retval]*/)
{
  return (*this)->get_ColorScheme(ColorScheme);
}

template <class T> Powerpoint_2k::ColorSchemePtr __fastcall
TCOM_SlideT<T>::get_ColorScheme(void)
{
  Powerpoint_2k::ColorSchemePtr ColorScheme;
  OLECHECK(this->get_ColorScheme((Powerpoint_2k::ColorSchemePtr*)&ColorScheme));
  return ColorScheme;
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::set_ColorScheme(Powerpoint_2k::ColorSchemePtr ColorScheme/*[in]*/)
{
  return (*this)->set_ColorScheme(ColorScheme);
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_Background(Powerpoint_2k::ShapeRangePtr* Background/*[out,retval]*/)
{
  return (*this)->get_Background(Background);
}

template <class T> Powerpoint_2k::ShapeRangePtr __fastcall
TCOM_SlideT<T>::get_Background(void)
{
  Powerpoint_2k::ShapeRangePtr Background;
  OLECHECK(this->get_Background((Powerpoint_2k::ShapeRangePtr*)&Background));
  return Background;
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  return (*this)->get_Name(Name);
}

template <class T> BSTR __fastcall
TCOM_SlideT<T>::get_Name(void)
{
  BSTR Name = 0;
  OLECHECK(this->get_Name((BSTR*)&Name));
  return Name;
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::set_Name(BSTR Name/*[in]*/)
{
  return (*this)->set_Name(Name);
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_SlideID(long* SlideID/*[out,retval]*/)
{
  return (*this)->get_SlideID(SlideID);
}

template <class T> long __fastcall
TCOM_SlideT<T>::get_SlideID(void)
{
  long SlideID;
  OLECHECK(this->get_SlideID((long*)&SlideID));
  return SlideID;
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_PrintSteps(int* PrintSteps/*[out,retval]*/)
{
  return (*this)->get_PrintSteps(PrintSteps);
}

template <class T> int __fastcall
TCOM_SlideT<T>::get_PrintSteps(void)
{
  int PrintSteps;
  OLECHECK(this->get_PrintSteps((int*)&PrintSteps));
  return PrintSteps;
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::Select(void)
{
  return (*this)->Select();
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::Cut(void)
{
  return (*this)->Cut();
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::Copy(void)
{
  return (*this)->Copy();
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_Layout(Powerpoint_2k::PpSlideLayout* Layout/*[out,retval]*/)
{
  return (*this)->get_Layout(Layout);
}

template <class T> Powerpoint_2k::PpSlideLayout __fastcall
TCOM_SlideT<T>::get_Layout(void)
{
  Powerpoint_2k::PpSlideLayout Layout;
  OLECHECK(this->get_Layout((Powerpoint_2k::PpSlideLayout*)&Layout));
  return Layout;
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::set_Layout(Powerpoint_2k::PpSlideLayout Layout/*[in]*/)
{
  return (*this)->set_Layout(Layout);
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::Duplicate(Powerpoint_2k::SlideRangePtr* Duplicate/*[out,retval]*/)
{
  return (*this)->Duplicate(Duplicate);
}

template <class T> Powerpoint_2k::SlideRangePtr __fastcall
TCOM_SlideT<T>::Duplicate(void)
{
  Powerpoint_2k::SlideRangePtr Duplicate;
  OLECHECK(this->Duplicate((Powerpoint_2k::SlideRangePtr*)&Duplicate));
  return Duplicate;
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::Delete(void)
{
  return (*this)->Delete();
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/)
{
  return (*this)->get_Tags(Tags);
}

template <class T> Powerpoint_2k::TagsPtr __fastcall
TCOM_SlideT<T>::get_Tags(void)
{
  Powerpoint_2k::TagsPtr Tags;
  OLECHECK(this->get_Tags((Powerpoint_2k::TagsPtr*)&Tags));
  return Tags;
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_SlideIndex(int* SlideIndex/*[out,retval]*/)
{
  return (*this)->get_SlideIndex(SlideIndex);
}

template <class T> int __fastcall
TCOM_SlideT<T>::get_SlideIndex(void)
{
  int SlideIndex;
  OLECHECK(this->get_SlideIndex((int*)&SlideIndex));
  return SlideIndex;
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_SlideNumber(int* SlideNumber/*[out,retval]*/)
{
  return (*this)->get_SlideNumber(SlideNumber);
}

template <class T> int __fastcall
TCOM_SlideT<T>::get_SlideNumber(void)
{
  int SlideNumber;
  OLECHECK(this->get_SlideNumber((int*)&SlideNumber));
  return SlideNumber;
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_DisplayMasterShapes(Office_2k::MsoTriState* DisplayMasterShapes/*[out,retval]*/)
{
  return (*this)->get_DisplayMasterShapes(DisplayMasterShapes);
}

template <class T> Office_2k::MsoTriState __fastcall
TCOM_SlideT<T>::get_DisplayMasterShapes(void)
{
  Office_2k::MsoTriState DisplayMasterShapes;
  OLECHECK(this->get_DisplayMasterShapes((Office_2k::MsoTriState*)&DisplayMasterShapes));
  return DisplayMasterShapes;
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::set_DisplayMasterShapes(Office_2k::MsoTriState DisplayMasterShapes/*[in]*/)
{
  return (*this)->set_DisplayMasterShapes(DisplayMasterShapes);
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_FollowMasterBackground(Office_2k::MsoTriState* FollowMasterBackground/*[out,retval]*/)
{
  return (*this)->get_FollowMasterBackground(FollowMasterBackground);
}

template <class T> Office_2k::MsoTriState __fastcall
TCOM_SlideT<T>::get_FollowMasterBackground(void)
{
  Office_2k::MsoTriState FollowMasterBackground;
  OLECHECK(this->get_FollowMasterBackground((Office_2k::MsoTriState*)&FollowMasterBackground));
  return FollowMasterBackground;
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::set_FollowMasterBackground(Office_2k::MsoTriState FollowMasterBackground/*[in]*/)
{
  return (*this)->set_FollowMasterBackground(FollowMasterBackground);
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_NotesPage(Powerpoint_2k::SlideRangePtr* NotesPage/*[out,retval]*/)
{
  return (*this)->get_NotesPage(NotesPage);
}

template <class T> Powerpoint_2k::SlideRangePtr __fastcall
TCOM_SlideT<T>::get_NotesPage(void)
{
  Powerpoint_2k::SlideRangePtr NotesPage;
  OLECHECK(this->get_NotesPage((Powerpoint_2k::SlideRangePtr*)&NotesPage));
  return NotesPage;
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_Master(Powerpoint_2k::_MasterPtr* Master/*[out,retval]*/)
{
  return (*this)->get_Master(Master);
}

template <class T> Powerpoint_2k::_MasterPtr __fastcall
TCOM_SlideT<T>::get_Master(void)
{
  Powerpoint_2k::_MasterPtr Master;
  OLECHECK(this->get_Master((Powerpoint_2k::_MasterPtr*)&Master));
  return Master;
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_Hyperlinks(Powerpoint_2k::HyperlinksPtr* Hyperlinks/*[out,retval]*/)
{
  return (*this)->get_Hyperlinks(Hyperlinks);
}

template <class T> Powerpoint_2k::HyperlinksPtr __fastcall
TCOM_SlideT<T>::get_Hyperlinks(void)
{
  Powerpoint_2k::HyperlinksPtr Hyperlinks;
  OLECHECK(this->get_Hyperlinks((Powerpoint_2k::HyperlinksPtr*)&Hyperlinks));
  return Hyperlinks;
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::Export(BSTR FileName/*[in]*/, BSTR FilterName/*[in]*/, 
                       int ScaleWidth/*[in,def,opt]*/, int ScaleHeight/*[in,def,opt]*/)
{
  return (*this)->Export(FileName, FilterName, ScaleWidth, ScaleHeight);
}

template <class T> HRESULT __fastcall
TCOM_SlideT<T>::get_Scripts(Office_2k::ScriptsPtr* Scripts/*[out,retval]*/)
{
  return (*this)->get_Scripts(Scripts);
}

template <class T> Office_2k::ScriptsPtr __fastcall
TCOM_SlideT<T>::get_Scripts(void)
{
  Office_2k::ScriptsPtr Scripts;
  OLECHECK(this->get_Scripts((Office_2k::ScriptsPtr*)&Scripts));
  return Scripts;
}

// *********************************************************************//
// DispIntf:  _Slide
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149346A-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
_SlideDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_SlideDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::get_Shapes(Powerpoint_2k::ShapesPtr* Shapes/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Shapes"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Shapes**)Shapes /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::ShapesPtr __fastcall
_SlideDispT<T>::get_Shapes(void)
{
  Powerpoint_2k::ShapesPtr Shapes;
  this->get_Shapes((Powerpoint_2k::ShapesPtr*)&Shapes);
  return Shapes;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::get_HeadersFooters(Powerpoint_2k::HeadersFootersPtr* HeadersFooters/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeadersFooters"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::HeadersFooters**)HeadersFooters /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::HeadersFootersPtr __fastcall
_SlideDispT<T>::get_HeadersFooters(void)
{
  Powerpoint_2k::HeadersFootersPtr HeadersFooters;
  this->get_HeadersFooters((Powerpoint_2k::HeadersFootersPtr*)&HeadersFooters);
  return HeadersFooters;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::get_SlideShowTransition(Powerpoint_2k::SlideShowTransitionPtr* SlideShowTransition/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideShowTransition"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::SlideShowTransition**)SlideShowTransition /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::SlideShowTransitionPtr __fastcall
_SlideDispT<T>::get_SlideShowTransition(void)
{
  Powerpoint_2k::SlideShowTransitionPtr SlideShowTransition;
  this->get_SlideShowTransition((Powerpoint_2k::SlideShowTransitionPtr*)&SlideShowTransition);
  return SlideShowTransition;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::get_ColorScheme(Powerpoint_2k::ColorSchemePtr* ColorScheme/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorScheme"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::ColorScheme**)ColorScheme /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::ColorSchemePtr __fastcall
_SlideDispT<T>::get_ColorScheme(void)
{
  Powerpoint_2k::ColorSchemePtr ColorScheme;
  this->get_ColorScheme((Powerpoint_2k::ColorSchemePtr*)&ColorScheme);
  return ColorScheme;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::set_ColorScheme(Powerpoint_2k::ColorSchemePtr ColorScheme/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorScheme"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Powerpoint_2k::ColorScheme*)ColorScheme /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::get_Background(Powerpoint_2k::ShapeRangePtr* Background/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Background"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::ShapeRange**)Background /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::ShapeRangePtr __fastcall
_SlideDispT<T>::get_Background(void)
{
  Powerpoint_2k::ShapeRangePtr Background;
  this->get_Background((Powerpoint_2k::ShapeRangePtr*)&Background);
  return Background;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_SlideDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(2008));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::get_SlideID(long* SlideID/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideID"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SlideID /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_SlideDispT<T>::get_SlideID(void)
{
  long SlideID;
  this->get_SlideID((long*)&SlideID);
  return SlideID;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::get_PrintSteps(int* PrintSteps/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintSteps"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(PrintSteps /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
_SlideDispT<T>::get_PrintSteps(void)
{
  int PrintSteps;
  this->get_PrintSteps((int*)&PrintSteps);
  return PrintSteps;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::Select()
{
  _TDispID _dispid(*this, OLETEXT("Select"), DISPID(2011));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::Cut()
{
  _TDispID _dispid(*this, OLETEXT("Cut"), DISPID(2012));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::Copy()
{
  _TDispID _dispid(*this, OLETEXT("Copy"), DISPID(2013));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::get_Layout(Powerpoint_2k::PpSlideLayout* Layout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Layout"), DISPID(2014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Layout /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpSlideLayout __fastcall
_SlideDispT<T>::get_Layout(void)
{
  Powerpoint_2k::PpSlideLayout Layout;
  this->get_Layout((Powerpoint_2k::PpSlideLayout*)&Layout);
  return Layout;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::set_Layout(Powerpoint_2k::PpSlideLayout Layout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Layout"), DISPID(2014));
  TAutoArgs<1> _args;
  _args[1] = (int)Layout /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::Duplicate(Powerpoint_2k::SlideRangePtr* Duplicate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Duplicate"), DISPID(2015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::SlideRange**)Duplicate /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::SlideRangePtr __fastcall
_SlideDispT<T>::Duplicate(void)
{
  Powerpoint_2k::SlideRangePtr Duplicate;
  this->Duplicate((Powerpoint_2k::SlideRangePtr*)&Duplicate);
  return Duplicate;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(2016));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tags"), DISPID(2017));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Tags**)Tags /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::TagsPtr __fastcall
_SlideDispT<T>::get_Tags(void)
{
  Powerpoint_2k::TagsPtr Tags;
  this->get_Tags((Powerpoint_2k::TagsPtr*)&Tags);
  return Tags;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::get_SlideIndex(int* SlideIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideIndex"), DISPID(2018));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SlideIndex /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
_SlideDispT<T>::get_SlideIndex(void)
{
  int SlideIndex;
  this->get_SlideIndex((int*)&SlideIndex);
  return SlideIndex;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::get_SlideNumber(int* SlideNumber/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideNumber"), DISPID(2019));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SlideNumber /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
_SlideDispT<T>::get_SlideNumber(void)
{
  int SlideNumber;
  this->get_SlideNumber((int*)&SlideNumber);
  return SlideNumber;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::get_DisplayMasterShapes(Office_2k::MsoTriState* DisplayMasterShapes/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayMasterShapes"), DISPID(2020));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)DisplayMasterShapes /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
_SlideDispT<T>::get_DisplayMasterShapes(void)
{
  Office_2k::MsoTriState DisplayMasterShapes;
  this->get_DisplayMasterShapes((Office_2k::MsoTriState*)&DisplayMasterShapes);
  return DisplayMasterShapes;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::set_DisplayMasterShapes(Office_2k::MsoTriState DisplayMasterShapes/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayMasterShapes"), DISPID(2020));
  TAutoArgs<1> _args;
  _args[1] = (int)DisplayMasterShapes /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::get_FollowMasterBackground(Office_2k::MsoTriState* FollowMasterBackground/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FollowMasterBackground"), DISPID(2021));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)FollowMasterBackground /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
_SlideDispT<T>::get_FollowMasterBackground(void)
{
  Office_2k::MsoTriState FollowMasterBackground;
  this->get_FollowMasterBackground((Office_2k::MsoTriState*)&FollowMasterBackground);
  return FollowMasterBackground;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::set_FollowMasterBackground(Office_2k::MsoTriState FollowMasterBackground/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FollowMasterBackground"), DISPID(2021));
  TAutoArgs<1> _args;
  _args[1] = (int)FollowMasterBackground /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::get_NotesPage(Powerpoint_2k::SlideRangePtr* NotesPage/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotesPage"), DISPID(2022));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::SlideRange**)NotesPage /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::SlideRangePtr __fastcall
_SlideDispT<T>::get_NotesPage(void)
{
  Powerpoint_2k::SlideRangePtr NotesPage;
  this->get_NotesPage((Powerpoint_2k::SlideRangePtr*)&NotesPage);
  return NotesPage;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::get_Master(Powerpoint_2k::_MasterPtr* Master/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Master"), DISPID(2023));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::_Master**)Master /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::_MasterPtr __fastcall
_SlideDispT<T>::get_Master(void)
{
  Powerpoint_2k::_MasterPtr Master;
  this->get_Master((Powerpoint_2k::_MasterPtr*)&Master);
  return Master;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::get_Hyperlinks(Powerpoint_2k::HyperlinksPtr* Hyperlinks/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Hyperlinks"), DISPID(2024));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Hyperlinks**)Hyperlinks /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::HyperlinksPtr __fastcall
_SlideDispT<T>::get_Hyperlinks(void)
{
  Powerpoint_2k::HyperlinksPtr Hyperlinks;
  this->get_Hyperlinks((Powerpoint_2k::HyperlinksPtr*)&Hyperlinks);
  return Hyperlinks;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::Export(BSTR FileName/*[in]*/, BSTR FilterName/*[in]*/, 
                       int ScaleWidth/*[in,def,opt]*/, int ScaleHeight/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Export"), DISPID(2025));
  TAutoArgs<4> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  _args[2] = FilterName /*[VT_BSTR:0]*/;
  _args[3] = ScaleWidth /*[VT_INT:0]*/;
  _args[4] = ScaleHeight /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SlideDispT<T>::get_Scripts(Office_2k::ScriptsPtr* Scripts/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Scripts"), DISPID(2026));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::Scripts**)Scripts /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::ScriptsPtr __fastcall
_SlideDispT<T>::get_Scripts(void)
{
  Office_2k::ScriptsPtr Scripts;
  this->get_Scripts((Office_2k::ScriptsPtr*)&Scripts);
  return Scripts;
}

// *********************************************************************//
// DispIntf:  SlideRange
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149346B-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
SlideRangeDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
SlideRangeDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::get_Shapes(Powerpoint_2k::ShapesPtr* Shapes/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Shapes"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Shapes**)Shapes /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::ShapesPtr __fastcall
SlideRangeDispT<T>::get_Shapes(void)
{
  Powerpoint_2k::ShapesPtr Shapes;
  this->get_Shapes((Powerpoint_2k::ShapesPtr*)&Shapes);
  return Shapes;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::get_HeadersFooters(Powerpoint_2k::HeadersFootersPtr* HeadersFooters/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeadersFooters"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::HeadersFooters**)HeadersFooters /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::HeadersFootersPtr __fastcall
SlideRangeDispT<T>::get_HeadersFooters(void)
{
  Powerpoint_2k::HeadersFootersPtr HeadersFooters;
  this->get_HeadersFooters((Powerpoint_2k::HeadersFootersPtr*)&HeadersFooters);
  return HeadersFooters;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::get_SlideShowTransition(Powerpoint_2k::SlideShowTransitionPtr* SlideShowTransition/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideShowTransition"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::SlideShowTransition**)SlideShowTransition /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::SlideShowTransitionPtr __fastcall
SlideRangeDispT<T>::get_SlideShowTransition(void)
{
  Powerpoint_2k::SlideShowTransitionPtr SlideShowTransition;
  this->get_SlideShowTransition((Powerpoint_2k::SlideShowTransitionPtr*)&SlideShowTransition);
  return SlideShowTransition;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::get_ColorScheme(Powerpoint_2k::ColorSchemePtr* ColorScheme/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorScheme"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::ColorScheme**)ColorScheme /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::ColorSchemePtr __fastcall
SlideRangeDispT<T>::get_ColorScheme(void)
{
  Powerpoint_2k::ColorSchemePtr ColorScheme;
  this->get_ColorScheme((Powerpoint_2k::ColorSchemePtr*)&ColorScheme);
  return ColorScheme;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::set_ColorScheme(Powerpoint_2k::ColorSchemePtr ColorScheme/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorScheme"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Powerpoint_2k::ColorScheme*)ColorScheme /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::get_Background(Powerpoint_2k::ShapeRangePtr* Background/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Background"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::ShapeRange**)Background /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::ShapeRangePtr __fastcall
SlideRangeDispT<T>::get_Background(void)
{
  Powerpoint_2k::ShapeRangePtr Background;
  this->get_Background((Powerpoint_2k::ShapeRangePtr*)&Background);
  return Background;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
SlideRangeDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(2008));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::get_SlideID(long* SlideID/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideID"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SlideID /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
SlideRangeDispT<T>::get_SlideID(void)
{
  long SlideID;
  this->get_SlideID((long*)&SlideID);
  return SlideID;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::get_PrintSteps(int* PrintSteps/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintSteps"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(PrintSteps /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
SlideRangeDispT<T>::get_PrintSteps(void)
{
  int PrintSteps;
  this->get_PrintSteps((int*)&PrintSteps);
  return PrintSteps;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::Select()
{
  _TDispID _dispid(*this, OLETEXT("Select"), DISPID(2011));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::Cut()
{
  _TDispID _dispid(*this, OLETEXT("Cut"), DISPID(2012));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::Copy()
{
  _TDispID _dispid(*this, OLETEXT("Copy"), DISPID(2013));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::get_Layout(Powerpoint_2k::PpSlideLayout* Layout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Layout"), DISPID(2014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Layout /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpSlideLayout __fastcall
SlideRangeDispT<T>::get_Layout(void)
{
  Powerpoint_2k::PpSlideLayout Layout;
  this->get_Layout((Powerpoint_2k::PpSlideLayout*)&Layout);
  return Layout;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::set_Layout(Powerpoint_2k::PpSlideLayout Layout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Layout"), DISPID(2014));
  TAutoArgs<1> _args;
  _args[1] = (int)Layout /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::Duplicate(Powerpoint_2k::SlideRangePtr* Duplicate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Duplicate"), DISPID(2015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::SlideRange**)Duplicate /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::SlideRangePtr __fastcall
SlideRangeDispT<T>::Duplicate(void)
{
  Powerpoint_2k::SlideRangePtr Duplicate;
  this->Duplicate((Powerpoint_2k::SlideRangePtr*)&Duplicate);
  return Duplicate;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(2016));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tags"), DISPID(2017));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Tags**)Tags /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::TagsPtr __fastcall
SlideRangeDispT<T>::get_Tags(void)
{
  Powerpoint_2k::TagsPtr Tags;
  this->get_Tags((Powerpoint_2k::TagsPtr*)&Tags);
  return Tags;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::get_SlideIndex(int* SlideIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideIndex"), DISPID(2018));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SlideIndex /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
SlideRangeDispT<T>::get_SlideIndex(void)
{
  int SlideIndex;
  this->get_SlideIndex((int*)&SlideIndex);
  return SlideIndex;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::get_SlideNumber(int* SlideNumber/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideNumber"), DISPID(2019));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SlideNumber /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
SlideRangeDispT<T>::get_SlideNumber(void)
{
  int SlideNumber;
  this->get_SlideNumber((int*)&SlideNumber);
  return SlideNumber;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::get_DisplayMasterShapes(Office_2k::MsoTriState* DisplayMasterShapes/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayMasterShapes"), DISPID(2020));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)DisplayMasterShapes /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
SlideRangeDispT<T>::get_DisplayMasterShapes(void)
{
  Office_2k::MsoTriState DisplayMasterShapes;
  this->get_DisplayMasterShapes((Office_2k::MsoTriState*)&DisplayMasterShapes);
  return DisplayMasterShapes;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::set_DisplayMasterShapes(Office_2k::MsoTriState DisplayMasterShapes/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayMasterShapes"), DISPID(2020));
  TAutoArgs<1> _args;
  _args[1] = (int)DisplayMasterShapes /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::get_FollowMasterBackground(Office_2k::MsoTriState* FollowMasterBackground/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FollowMasterBackground"), DISPID(2021));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)FollowMasterBackground /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
SlideRangeDispT<T>::get_FollowMasterBackground(void)
{
  Office_2k::MsoTriState FollowMasterBackground;
  this->get_FollowMasterBackground((Office_2k::MsoTriState*)&FollowMasterBackground);
  return FollowMasterBackground;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::set_FollowMasterBackground(Office_2k::MsoTriState FollowMasterBackground/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FollowMasterBackground"), DISPID(2021));
  TAutoArgs<1> _args;
  _args[1] = (int)FollowMasterBackground /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::get_NotesPage(Powerpoint_2k::SlideRangePtr* NotesPage/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotesPage"), DISPID(2022));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::SlideRange**)NotesPage /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::SlideRangePtr __fastcall
SlideRangeDispT<T>::get_NotesPage(void)
{
  Powerpoint_2k::SlideRangePtr NotesPage;
  this->get_NotesPage((Powerpoint_2k::SlideRangePtr*)&NotesPage);
  return NotesPage;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::get_Master(Powerpoint_2k::_MasterPtr* Master/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Master"), DISPID(2023));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::_Master**)Master /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::_MasterPtr __fastcall
SlideRangeDispT<T>::get_Master(void)
{
  Powerpoint_2k::_MasterPtr Master;
  this->get_Master((Powerpoint_2k::_MasterPtr*)&Master);
  return Master;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::get_Hyperlinks(Powerpoint_2k::HyperlinksPtr* Hyperlinks/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Hyperlinks"), DISPID(2024));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Hyperlinks**)Hyperlinks /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::HyperlinksPtr __fastcall
SlideRangeDispT<T>::get_Hyperlinks(void)
{
  Powerpoint_2k::HyperlinksPtr Hyperlinks;
  this->get_Hyperlinks((Powerpoint_2k::HyperlinksPtr*)&Hyperlinks);
  return Hyperlinks;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::Export(BSTR FileName/*[in]*/, BSTR FilterName/*[in]*/, 
                           int ScaleWidth/*[in,def,opt]*/, int ScaleHeight/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Export"), DISPID(2025));
  TAutoArgs<4> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  _args[2] = FilterName /*[VT_BSTR:0]*/;
  _args[3] = ScaleWidth /*[VT_INT:0]*/;
  _args[4] = ScaleHeight /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::Item(TVariantInParam index/*[in]*/, 
                         Powerpoint_2k::PowerPointSlidePtr* Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointSlide**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointSlidePtr __fastcall
SlideRangeDispT<T>::Item(TVariantInParam index/*[in]*/)
{
  Powerpoint_2k::PowerPointSlidePtr Item;
  this->Item(index, (Powerpoint_2k::PowerPointSlidePtr*)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
SlideRangeDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::_Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
SlideRangeDispT<T>::_Index(int index/*[in]*/)
{
  TVariant _Index;
  this->_Index(index, (TVariant*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
SlideRangeDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideRangeDispT<T>::get_Scripts(Office_2k::ScriptsPtr* Scripts/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Scripts"), DISPID(2026));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::Scripts**)Scripts /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::ScriptsPtr __fastcall
SlideRangeDispT<T>::get_Scripts(void)
{
  Office_2k::ScriptsPtr Scripts;
  this->get_Scripts((Office_2k::ScriptsPtr*)&Scripts);
  return Scripts;
}

// *********************************************************************//
// SmartIntf: TCOM_Master
// Interface: _Master
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_MasterT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  return (*this)->get_Application(Application);
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
TCOM_MasterT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  OLECHECK(this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application));
  return Application;
}

template <class T> HRESULT __fastcall
TCOM_MasterT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  return (*this)->get_Parent(Parent);
}

template <class T> LPDISPATCH __fastcall
TCOM_MasterT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
  return Parent;
}

template <class T> HRESULT __fastcall
TCOM_MasterT<T>::get_Shapes(Powerpoint_2k::ShapesPtr* Shapes/*[out,retval]*/)
{
  return (*this)->get_Shapes(Shapes);
}

template <class T> Powerpoint_2k::ShapesPtr __fastcall
TCOM_MasterT<T>::get_Shapes(void)
{
  Powerpoint_2k::ShapesPtr Shapes;
  OLECHECK(this->get_Shapes((Powerpoint_2k::ShapesPtr*)&Shapes));
  return Shapes;
}

template <class T> HRESULT __fastcall
TCOM_MasterT<T>::get_HeadersFooters(Powerpoint_2k::HeadersFootersPtr* HeadersFooters/*[out,retval]*/)
{
  return (*this)->get_HeadersFooters(HeadersFooters);
}

template <class T> Powerpoint_2k::HeadersFootersPtr __fastcall
TCOM_MasterT<T>::get_HeadersFooters(void)
{
  Powerpoint_2k::HeadersFootersPtr HeadersFooters;
  OLECHECK(this->get_HeadersFooters((Powerpoint_2k::HeadersFootersPtr*)&HeadersFooters));
  return HeadersFooters;
}

template <class T> HRESULT __fastcall
TCOM_MasterT<T>::get_ColorScheme(Powerpoint_2k::ColorSchemePtr* ColorScheme/*[out,retval]*/)
{
  return (*this)->get_ColorScheme(ColorScheme);
}

template <class T> Powerpoint_2k::ColorSchemePtr __fastcall
TCOM_MasterT<T>::get_ColorScheme(void)
{
  Powerpoint_2k::ColorSchemePtr ColorScheme;
  OLECHECK(this->get_ColorScheme((Powerpoint_2k::ColorSchemePtr*)&ColorScheme));
  return ColorScheme;
}

template <class T> HRESULT __fastcall
TCOM_MasterT<T>::set_ColorScheme(Powerpoint_2k::ColorSchemePtr ColorScheme/*[in]*/)
{
  return (*this)->set_ColorScheme(ColorScheme);
}

template <class T> HRESULT __fastcall
TCOM_MasterT<T>::get_Background(Powerpoint_2k::ShapeRangePtr* Background/*[out,retval]*/)
{
  return (*this)->get_Background(Background);
}

template <class T> Powerpoint_2k::ShapeRangePtr __fastcall
TCOM_MasterT<T>::get_Background(void)
{
  Powerpoint_2k::ShapeRangePtr Background;
  OLECHECK(this->get_Background((Powerpoint_2k::ShapeRangePtr*)&Background));
  return Background;
}

template <class T> HRESULT __fastcall
TCOM_MasterT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  return (*this)->get_Name(Name);
}

template <class T> BSTR __fastcall
TCOM_MasterT<T>::get_Name(void)
{
  BSTR Name = 0;
  OLECHECK(this->get_Name((BSTR*)&Name));
  return Name;
}

template <class T> HRESULT __fastcall
TCOM_MasterT<T>::set_Name(BSTR Name/*[in]*/)
{
  return (*this)->set_Name(Name);
}

template <class T> HRESULT __fastcall
TCOM_MasterT<T>::Delete(void)
{
  return (*this)->Delete();
}

template <class T> HRESULT __fastcall
TCOM_MasterT<T>::get_Height(float* Height/*[out,retval]*/)
{
  return (*this)->get_Height(Height);
}

template <class T> float __fastcall
TCOM_MasterT<T>::get_Height(void)
{
  float Height;
  OLECHECK(this->get_Height((float*)&Height));
  return Height;
}

template <class T> HRESULT __fastcall
TCOM_MasterT<T>::get_Width(float* Width/*[out,retval]*/)
{
  return (*this)->get_Width(Width);
}

template <class T> float __fastcall
TCOM_MasterT<T>::get_Width(void)
{
  float Width;
  OLECHECK(this->get_Width((float*)&Width));
  return Width;
}

template <class T> HRESULT __fastcall
TCOM_MasterT<T>::get_TextStyles(Powerpoint_2k::TextStylesPtr* TextStyles/*[out,retval]*/)
{
  return (*this)->get_TextStyles(TextStyles);
}

template <class T> Powerpoint_2k::TextStylesPtr __fastcall
TCOM_MasterT<T>::get_TextStyles(void)
{
  Powerpoint_2k::TextStylesPtr TextStyles;
  OLECHECK(this->get_TextStyles((Powerpoint_2k::TextStylesPtr*)&TextStyles));
  return TextStyles;
}

template <class T> HRESULT __fastcall
TCOM_MasterT<T>::get_Hyperlinks(Powerpoint_2k::HyperlinksPtr* Hyperlinks/*[out,retval]*/)
{
  return (*this)->get_Hyperlinks(Hyperlinks);
}

template <class T> Powerpoint_2k::HyperlinksPtr __fastcall
TCOM_MasterT<T>::get_Hyperlinks(void)
{
  Powerpoint_2k::HyperlinksPtr Hyperlinks;
  OLECHECK(this->get_Hyperlinks((Powerpoint_2k::HyperlinksPtr*)&Hyperlinks));
  return Hyperlinks;
}

template <class T> HRESULT __fastcall
TCOM_MasterT<T>::get_Scripts(Office_2k::ScriptsPtr* Scripts/*[out,retval]*/)
{
  return (*this)->get_Scripts(Scripts);
}

template <class T> Office_2k::ScriptsPtr __fastcall
TCOM_MasterT<T>::get_Scripts(void)
{
  Office_2k::ScriptsPtr Scripts;
  OLECHECK(this->get_Scripts((Office_2k::ScriptsPtr*)&Scripts));
  return Scripts;
}

// *********************************************************************//
// DispIntf:  _Master
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149346C-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_MasterDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
_MasterDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_MasterDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_MasterDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_MasterDispT<T>::get_Shapes(Powerpoint_2k::ShapesPtr* Shapes/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Shapes"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Shapes**)Shapes /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::ShapesPtr __fastcall
_MasterDispT<T>::get_Shapes(void)
{
  Powerpoint_2k::ShapesPtr Shapes;
  this->get_Shapes((Powerpoint_2k::ShapesPtr*)&Shapes);
  return Shapes;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_MasterDispT<T>::get_HeadersFooters(Powerpoint_2k::HeadersFootersPtr* HeadersFooters/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HeadersFooters"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::HeadersFooters**)HeadersFooters /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::HeadersFootersPtr __fastcall
_MasterDispT<T>::get_HeadersFooters(void)
{
  Powerpoint_2k::HeadersFootersPtr HeadersFooters;
  this->get_HeadersFooters((Powerpoint_2k::HeadersFootersPtr*)&HeadersFooters);
  return HeadersFooters;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_MasterDispT<T>::get_ColorScheme(Powerpoint_2k::ColorSchemePtr* ColorScheme/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorScheme"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::ColorScheme**)ColorScheme /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::ColorSchemePtr __fastcall
_MasterDispT<T>::get_ColorScheme(void)
{
  Powerpoint_2k::ColorSchemePtr ColorScheme;
  this->get_ColorScheme((Powerpoint_2k::ColorSchemePtr*)&ColorScheme);
  return ColorScheme;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_MasterDispT<T>::set_ColorScheme(Powerpoint_2k::ColorSchemePtr ColorScheme/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorScheme"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Powerpoint_2k::ColorScheme*)ColorScheme /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_MasterDispT<T>::get_Background(Powerpoint_2k::ShapeRangePtr* Background/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Background"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::ShapeRange**)Background /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::ShapeRangePtr __fastcall
_MasterDispT<T>::get_Background(void)
{
  Powerpoint_2k::ShapeRangePtr Background;
  this->get_Background((Powerpoint_2k::ShapeRangePtr*)&Background);
  return Background;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_MasterDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_MasterDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_MasterDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_MasterDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(2008));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_MasterDispT<T>::get_Height(float* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
_MasterDispT<T>::get_Height(void)
{
  float Height;
  this->get_Height((float*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_MasterDispT<T>::get_Width(float* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
_MasterDispT<T>::get_Width(void)
{
  float Width;
  this->get_Width((float*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_MasterDispT<T>::get_TextStyles(Powerpoint_2k::TextStylesPtr* TextStyles/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextStyles"), DISPID(2011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::TextStyles**)TextStyles /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::TextStylesPtr __fastcall
_MasterDispT<T>::get_TextStyles(void)
{
  Powerpoint_2k::TextStylesPtr TextStyles;
  this->get_TextStyles((Powerpoint_2k::TextStylesPtr*)&TextStyles);
  return TextStyles;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_MasterDispT<T>::get_Hyperlinks(Powerpoint_2k::HyperlinksPtr* Hyperlinks/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Hyperlinks"), DISPID(2012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Hyperlinks**)Hyperlinks /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::HyperlinksPtr __fastcall
_MasterDispT<T>::get_Hyperlinks(void)
{
  Powerpoint_2k::HyperlinksPtr Hyperlinks;
  this->get_Hyperlinks((Powerpoint_2k::HyperlinksPtr*)&Hyperlinks);
  return Hyperlinks;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_MasterDispT<T>::get_Scripts(Office_2k::ScriptsPtr* Scripts/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Scripts"), DISPID(2013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::Scripts**)Scripts /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::ScriptsPtr __fastcall
_MasterDispT<T>::get_Scripts(void)
{
  Office_2k::ScriptsPtr Scripts;
  this->get_Scripts((Office_2k::ScriptsPtr*)&Scripts);
  return Scripts;
}

// *********************************************************************//
// DispIntf:  ColorSchemes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149346E-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorSchemesDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
ColorSchemesDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorSchemesDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ColorSchemesDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorSchemesDispT<T>::Item(int index/*[in]*/, Powerpoint_2k::ColorSchemePtr* Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::ColorScheme**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::ColorSchemePtr __fastcall
ColorSchemesDispT<T>::Item(int index/*[in]*/)
{
  Powerpoint_2k::ColorSchemePtr Item;
  this->Item(index, (Powerpoint_2k::ColorSchemePtr*)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorSchemesDispT<T>::Add(Powerpoint_2k::ColorSchemePtr Scheme/*[in,def,opt]*/, 
                          Powerpoint_2k::ColorSchemePtr* Add/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Powerpoint_2k::ColorScheme*)Scheme /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::ColorScheme**)Add /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::ColorSchemePtr __fastcall
ColorSchemesDispT<T>::Add(Powerpoint_2k::ColorSchemePtr Scheme/*[in,def,opt]*/)
{
  Powerpoint_2k::ColorSchemePtr Add;
  this->Add(Scheme, (Powerpoint_2k::ColorSchemePtr*)&Add);
  return Add;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorSchemesDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
ColorSchemesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorSchemesDispT<T>::_Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
ColorSchemesDispT<T>::_Index(int index/*[in]*/)
{
  TVariant _Index;
  this->_Index(index, (TVariant*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorSchemesDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ColorSchemesDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  ColorScheme
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149346F-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorSchemeDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
ColorSchemeDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorSchemeDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ColorSchemeDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorSchemeDispT<T>::Colors(Powerpoint_2k::PpColorSchemeIndex SchemeColor/*[in]*/, 
                            Powerpoint_2k::RGBColorPtr* Colors/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Colors"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = (int)SchemeColor /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::RGBColor**)Colors /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::RGBColorPtr __fastcall
ColorSchemeDispT<T>::Colors(Powerpoint_2k::PpColorSchemeIndex SchemeColor/*[in]*/)
{
  Powerpoint_2k::RGBColorPtr Colors;
  this->Colors(SchemeColor, (Powerpoint_2k::RGBColorPtr*)&Colors);
  return Colors;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorSchemeDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(2003));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorSchemeDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
ColorSchemeDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorSchemeDispT<T>::_Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
ColorSchemeDispT<T>::_Index(int index/*[in]*/)
{
  TVariant _Index;
  this->_Index(index, (TVariant*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorSchemeDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ColorSchemeDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  RGBColor
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493470-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RGBColorDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
RGBColorDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RGBColorDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
RGBColorDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RGBColorDispT<T>::get_rgb(Office_2k::MsoRGBType* rgb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RGB"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RGB /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoRGBType __fastcall
RGBColorDispT<T>::get_rgb(void)
{
  Office_2k::MsoRGBType RGB;
  this->get_rgb((Office_2k::MsoRGBType*)&RGB);
  return RGB;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RGBColorDispT<T>::set_rgb(Office_2k::MsoRGBType rgb/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RGB"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = RGB /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  SlideShowTransition
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493471-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowTransitionDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
SlideShowTransitionDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowTransitionDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
SlideShowTransitionDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowTransitionDispT<T>::get_AdvanceOnClick(Office_2k::MsoTriState* AdvanceOnClick/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvanceOnClick"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AdvanceOnClick /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
SlideShowTransitionDispT<T>::get_AdvanceOnClick(void)
{
  Office_2k::MsoTriState AdvanceOnClick;
  this->get_AdvanceOnClick((Office_2k::MsoTriState*)&AdvanceOnClick);
  return AdvanceOnClick;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowTransitionDispT<T>::set_AdvanceOnClick(Office_2k::MsoTriState AdvanceOnClick/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvanceOnClick"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = (int)AdvanceOnClick /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowTransitionDispT<T>::get_AdvanceOnTime(Office_2k::MsoTriState* AdvanceOnTime/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvanceOnTime"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AdvanceOnTime /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
SlideShowTransitionDispT<T>::get_AdvanceOnTime(void)
{
  Office_2k::MsoTriState AdvanceOnTime;
  this->get_AdvanceOnTime((Office_2k::MsoTriState*)&AdvanceOnTime);
  return AdvanceOnTime;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowTransitionDispT<T>::set_AdvanceOnTime(Office_2k::MsoTriState AdvanceOnTime/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvanceOnTime"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = (int)AdvanceOnTime /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowTransitionDispT<T>::get_AdvanceTime(float* AdvanceTime/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvanceTime"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AdvanceTime /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
SlideShowTransitionDispT<T>::get_AdvanceTime(void)
{
  float AdvanceTime;
  this->get_AdvanceTime((float*)&AdvanceTime);
  return AdvanceTime;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowTransitionDispT<T>::set_AdvanceTime(float AdvanceTime/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvanceTime"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = AdvanceTime /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowTransitionDispT<T>::get_EntryEffect(Powerpoint_2k::PpEntryEffect* EntryEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EntryEffect"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)EntryEffect /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpEntryEffect __fastcall
SlideShowTransitionDispT<T>::get_EntryEffect(void)
{
  Powerpoint_2k::PpEntryEffect EntryEffect;
  this->get_EntryEffect((Powerpoint_2k::PpEntryEffect*)&EntryEffect);
  return EntryEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowTransitionDispT<T>::set_EntryEffect(Powerpoint_2k::PpEntryEffect EntryEffect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EntryEffect"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = (int)EntryEffect /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowTransitionDispT<T>::get_Hidden(Office_2k::MsoTriState* Hidden/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Hidden"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Hidden /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
SlideShowTransitionDispT<T>::get_Hidden(void)
{
  Office_2k::MsoTriState Hidden;
  this->get_Hidden((Office_2k::MsoTriState*)&Hidden);
  return Hidden;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowTransitionDispT<T>::set_Hidden(Office_2k::MsoTriState Hidden/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Hidden"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = (int)Hidden /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowTransitionDispT<T>::get_LoopSoundUntilNext(Office_2k::MsoTriState* LoopSoundUntilNext/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LoopSoundUntilNext"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)LoopSoundUntilNext /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
SlideShowTransitionDispT<T>::get_LoopSoundUntilNext(void)
{
  Office_2k::MsoTriState LoopSoundUntilNext;
  this->get_LoopSoundUntilNext((Office_2k::MsoTriState*)&LoopSoundUntilNext);
  return LoopSoundUntilNext;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowTransitionDispT<T>::set_LoopSoundUntilNext(Office_2k::MsoTriState LoopSoundUntilNext/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LoopSoundUntilNext"), DISPID(2008));
  TAutoArgs<1> _args;
  _args[1] = (int)LoopSoundUntilNext /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowTransitionDispT<T>::get_SoundEffect(Powerpoint_2k::SoundEffectPtr* SoundEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SoundEffect"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::SoundEffect**)SoundEffect /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::SoundEffectPtr __fastcall
SlideShowTransitionDispT<T>::get_SoundEffect(void)
{
  Powerpoint_2k::SoundEffectPtr SoundEffect;
  this->get_SoundEffect((Powerpoint_2k::SoundEffectPtr*)&SoundEffect);
  return SoundEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowTransitionDispT<T>::get_Speed(Powerpoint_2k::PpTransitionSpeed* Speed/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Speed"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Speed /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpTransitionSpeed __fastcall
SlideShowTransitionDispT<T>::get_Speed(void)
{
  Powerpoint_2k::PpTransitionSpeed Speed;
  this->get_Speed((Powerpoint_2k::PpTransitionSpeed*)&Speed);
  return Speed;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SlideShowTransitionDispT<T>::set_Speed(Powerpoint_2k::PpTransitionSpeed Speed/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Speed"), DISPID(2010));
  TAutoArgs<1> _args;
  _args[1] = (int)Speed /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  SoundEffect
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493472-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SoundEffectDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
SoundEffectDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SoundEffectDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
SoundEffectDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SoundEffectDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
SoundEffectDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SoundEffectDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SoundEffectDispT<T>::get_Type(Powerpoint_2k::PpSoundEffectType* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpSoundEffectType __fastcall
SoundEffectDispT<T>::get_Type(void)
{
  Powerpoint_2k::PpSoundEffectType Type;
  this->get_Type((Powerpoint_2k::PpSoundEffectType*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SoundEffectDispT<T>::set_Type(Powerpoint_2k::PpSoundEffectType Type/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SoundEffectDispT<T>::ImportFromFile(BSTR FileName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ImportFromFile"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SoundEffectDispT<T>::Play()
{
  _TDispID _dispid(*this, OLETEXT("Play"), DISPID(2006));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  SoundFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493473-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SoundFormatDispT<T>::Play()
{
  _TDispID _dispid(*this, OLETEXT("Play"), DISPID(2000));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SoundFormatDispT<T>::Import(BSTR FileName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Import"), DISPID(2001));
  TAutoArgs<1> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SoundFormatDispT<T>::Export(BSTR FileName/*[in]*/, 
                            Powerpoint_2k::PpSoundFormatType* Export/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Export"), DISPID(2002));
  TAutoArgs<1> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((int*)Export /*[VT_USERDEFINED:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::PpSoundFormatType __fastcall
SoundFormatDispT<T>::Export(BSTR FileName/*[in]*/)
{
  Powerpoint_2k::PpSoundFormatType Export;
  this->Export(FileName, (Powerpoint_2k::PpSoundFormatType*)&Export);
  return Export;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SoundFormatDispT<T>::get_Type(Powerpoint_2k::PpSoundFormatType* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpSoundFormatType __fastcall
SoundFormatDispT<T>::get_Type(void)
{
  Powerpoint_2k::PpSoundFormatType Type;
  this->get_Type((Powerpoint_2k::PpSoundFormatType*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SoundFormatDispT<T>::get_SourceFullName(BSTR* SourceFullName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SourceFullName"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SourceFullName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
SoundFormatDispT<T>::get_SourceFullName(void)
{
  BSTR SourceFullName;
  this->get_SourceFullName((BSTR*)&SourceFullName);
  return SourceFullName;
}

// *********************************************************************//
// DispIntf:  HeadersFooters
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493474-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HeadersFootersDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
HeadersFootersDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HeadersFootersDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
HeadersFootersDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HeadersFootersDispT<T>::get_DateAndTime(Powerpoint_2k::HeaderFooterPtr* DateAndTime/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DateAndTime"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::HeaderFooter**)DateAndTime /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::HeaderFooterPtr __fastcall
HeadersFootersDispT<T>::get_DateAndTime(void)
{
  Powerpoint_2k::HeaderFooterPtr DateAndTime;
  this->get_DateAndTime((Powerpoint_2k::HeaderFooterPtr*)&DateAndTime);
  return DateAndTime;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HeadersFootersDispT<T>::get_SlideNumber(Powerpoint_2k::HeaderFooterPtr* SlideNumber/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideNumber"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::HeaderFooter**)SlideNumber /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::HeaderFooterPtr __fastcall
HeadersFootersDispT<T>::get_SlideNumber(void)
{
  Powerpoint_2k::HeaderFooterPtr SlideNumber;
  this->get_SlideNumber((Powerpoint_2k::HeaderFooterPtr*)&SlideNumber);
  return SlideNumber;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HeadersFootersDispT<T>::get_Header(Powerpoint_2k::HeaderFooterPtr* Header/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Header"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::HeaderFooter**)Header /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::HeaderFooterPtr __fastcall
HeadersFootersDispT<T>::get_Header(void)
{
  Powerpoint_2k::HeaderFooterPtr Header;
  this->get_Header((Powerpoint_2k::HeaderFooterPtr*)&Header);
  return Header;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HeadersFootersDispT<T>::get_Footer(Powerpoint_2k::HeaderFooterPtr* Footer/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Footer"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::HeaderFooter**)Footer /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::HeaderFooterPtr __fastcall
HeadersFootersDispT<T>::get_Footer(void)
{
  Powerpoint_2k::HeaderFooterPtr Footer;
  this->get_Footer((Powerpoint_2k::HeaderFooterPtr*)&Footer);
  return Footer;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HeadersFootersDispT<T>::get_DisplayOnTitleSlide(Office_2k::MsoTriState* DisplayOnTitleSlide/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayOnTitleSlide"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)DisplayOnTitleSlide /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
HeadersFootersDispT<T>::get_DisplayOnTitleSlide(void)
{
  Office_2k::MsoTriState DisplayOnTitleSlide;
  this->get_DisplayOnTitleSlide((Office_2k::MsoTriState*)&DisplayOnTitleSlide);
  return DisplayOnTitleSlide;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HeadersFootersDispT<T>::set_DisplayOnTitleSlide(Office_2k::MsoTriState DisplayOnTitleSlide/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayOnTitleSlide"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = (int)DisplayOnTitleSlide /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HeadersFootersDispT<T>::Clear()
{
  _TDispID _dispid(*this, OLETEXT("Clear"), DISPID(2008));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  Shapes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493475-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ShapesDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ShapesDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ShapesDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::get_Count(int* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ShapesDispT<T>::get_Count(void)
{
  int Count;
  this->get_Count((int*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::Item(TVariantInParam index/*[in]*/, Powerpoint_2k::ShapePtr* Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Shape**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::ShapePtr __fastcall
ShapesDispT<T>::Item(TVariantInParam index/*[in]*/)
{
  Powerpoint_2k::ShapePtr Item;
  this->Item(index, (Powerpoint_2k::ShapePtr*)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
ShapesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddCallout(Office_2k::MsoCalloutType Type/*[in]*/, float Left/*[in]*/, 
                           float Top/*[in]*/, float Width/*[in]*/, float Height/*[in]*/, 
                           Powerpoint_2k::ShapePtr* Callout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddCallout"), DISPID(10));
  TAutoArgs<5> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  _args[2] = Left /*[VT_R4:0]*/;
  _args[3] = Top /*[VT_R4:0]*/;
  _args[4] = Width /*[VT_R4:0]*/;
  _args[5] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Shape**)Callout /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::ShapePtr __fastcall
ShapesDispT<T>::AddCallout(Office_2k::MsoCalloutType Type/*[in]*/, float Left/*[in]*/, 
                           float Top/*[in]*/, float Width/*[in]*/, float Height/*[in]*/)
{
  Powerpoint_2k::ShapePtr Callout;
  this->AddCallout(Type, Left, Top, Width, Height, (Powerpoint_2k::ShapePtr*)&Callout);
  return Callout;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddConnector(Office_2k::MsoConnectorType Type/*[in]*/, float BeginX/*[in]*/, 
                             float BeginY/*[in]*/, float EndX/*[in]*/, float EndY/*[in]*/, 
                             Powerpoint_2k::ShapePtr* Connector/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddConnector"), DISPID(11));
  TAutoArgs<5> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  _args[2] = BeginX /*[VT_R4:0]*/;
  _args[3] = BeginY /*[VT_R4:0]*/;
  _args[4] = EndX /*[VT_R4:0]*/;
  _args[5] = EndY /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Shape**)Connector /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::ShapePtr __fastcall
ShapesDispT<T>::AddConnector(Office_2k::MsoConnectorType Type/*[in]*/, float BeginX/*[in]*/, 
                             float BeginY/*[in]*/, float EndX/*[in]*/, float EndY/*[in]*/)
{
  Powerpoint_2k::ShapePtr Connector;
  this->AddConnector(Type, BeginX, BeginY, EndX, EndY, (Powerpoint_2k::ShapePtr*)&Connector);
  return Connector;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddCurve(TVariantInParam SafeArrayOfPoints/*[in]*/, 
                         Powerpoint_2k::ShapePtr* Curve/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddCurve"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = SafeArrayOfPoints /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Shape**)Curve /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::ShapePtr __fastcall
ShapesDispT<T>::AddCurve(TVariantInParam SafeArrayOfPoints/*[in]*/)
{
  Powerpoint_2k::ShapePtr Curve;
  this->AddCurve(SafeArrayOfPoints, (Powerpoint_2k::ShapePtr*)&Curve);
  return Curve;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddLabel(Office_2k::MsoTextOrientation Orientation/*[in]*/, float Left/*[in]*/, 
                         float Top/*[in]*/, float Width/*[in]*/, float Height/*[in]*/, 
                         Powerpoint_2k::ShapePtr* Label/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddLabel"), DISPID(13));
  TAutoArgs<5> _args;
  _args[1] = (int)Orientation /*[VT_USERDEFINED:0]*/;
  _args[2] = Left /*[VT_R4:0]*/;
  _args[3] = Top /*[VT_R4:0]*/;
  _args[4] = Width /*[VT_R4:0]*/;
  _args[5] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Shape**)Label /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::ShapePtr __fastcall
ShapesDispT<T>::AddLabel(Office_2k::MsoTextOrientation Orientation/*[in]*/, float Left/*[in]*/, 
                         float Top/*[in]*/, float Width/*[in]*/, float Height/*[in]*/)
{
  Powerpoint_2k::ShapePtr Label;
  this->AddLabel(Orientation, Left, Top, Width, Height, (Powerpoint_2k::ShapePtr*)&Label);
  return Label;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddLine(float BeginX/*[in]*/, float BeginY/*[in]*/, float EndX/*[in]*/, 
                        float EndY/*[in]*/, Powerpoint_2k::ShapePtr* Line/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddLine"), DISPID(14));
  TAutoArgs<4> _args;
  _args[1] = BeginX /*[VT_R4:0]*/;
  _args[2] = BeginY /*[VT_R4:0]*/;
  _args[3] = EndX /*[VT_R4:0]*/;
  _args[4] = EndY /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Shape**)Line /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::ShapePtr __fastcall
ShapesDispT<T>::AddLine(float BeginX/*[in]*/, float BeginY/*[in]*/, float EndX/*[in]*/, 
                        float EndY/*[in]*/)
{
  Powerpoint_2k::ShapePtr Line;
  this->AddLine(BeginX, BeginY, EndX, EndY, (Powerpoint_2k::ShapePtr*)&Line);
  return Line;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddPicture(BSTR FileName/*[in]*/, Office_2k::MsoTriState LinkToFile/*[in]*/, 
                           Office_2k::MsoTriState SaveWithDocument/*[in]*/, float Left/*[in]*/, 
                           float Top/*[in]*/, float Width/*[in,def,opt]*/, 
                           float Height/*[in,def,opt]*/, 
                           Powerpoint_2k::ShapePtr* Picture/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddPicture"), DISPID(15));
  TAutoArgs<7> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  _args[2] = (int)LinkToFile /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)SaveWithDocument /*[VT_USERDEFINED:0]*/;
  _args[4] = Left /*[VT_R4:0]*/;
  _args[5] = Top /*[VT_R4:0]*/;
  _args[6] = Width /*[VT_R4:0]*/;
  _args[7] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Shape**)Picture /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::ShapePtr __fastcall
ShapesDispT<T>::AddPicture(BSTR FileName/*[in]*/, Office_2k::MsoTriState LinkToFile/*[in]*/, 
                           Office_2k::MsoTriState SaveWithDocument/*[in]*/, float Left/*[in]*/, 
                           float Top/*[in]*/, float Width/*[in,def,opt]*/, 
                           float Height/*[in,def,opt]*/)
{
  Powerpoint_2k::ShapePtr Picture;
  this->AddPicture(FileName, LinkToFile, SaveWithDocument, Left, Top, Width, Height, (Powerpoint_2k::ShapePtr*)&Picture);
  return Picture;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddPolyline(TVariantInParam SafeArrayOfPoints/*[in]*/, 
                            Powerpoint_2k::ShapePtr* Polyline/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddPolyline"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = SafeArrayOfPoints /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Shape**)Polyline /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::ShapePtr __fastcall
ShapesDispT<T>::AddPolyline(TVariantInParam SafeArrayOfPoints/*[in]*/)
{
  Powerpoint_2k::ShapePtr Polyline;
  this->AddPolyline(SafeArrayOfPoints, (Powerpoint_2k::ShapePtr*)&Polyline);
  return Polyline;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddShape(Office_2k::MsoAutoShapeType Type/*[in]*/, float Left/*[in]*/, 
                         float Top/*[in]*/, float Width/*[in]*/, float Height/*[in]*/, 
                         Powerpoint_2k::ShapePtr* Shape/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddShape"), DISPID(17));
  TAutoArgs<5> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  _args[2] = Left /*[VT_R4:0]*/;
  _args[3] = Top /*[VT_R4:0]*/;
  _args[4] = Width /*[VT_R4:0]*/;
  _args[5] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Shape**)Shape /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::ShapePtr __fastcall
ShapesDispT<T>::AddShape(Office_2k::MsoAutoShapeType Type/*[in]*/, float Left/*[in]*/, 
                         float Top/*[in]*/, float Width/*[in]*/, float Height/*[in]*/)
{
  Powerpoint_2k::ShapePtr Shape;
  this->AddShape(Type, Left, Top, Width, Height, (Powerpoint_2k::ShapePtr*)&Shape);
  return Shape;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddTextEffect(Office_2k::MsoPresetTextEffect PresetTextEffect/*[in]*/, 
                              BSTR Text/*[in]*/, BSTR FontName/*[in]*/, float FontSize/*[in]*/, 
                              Office_2k::MsoTriState FontBold/*[in]*/, 
                              Office_2k::MsoTriState FontItalic/*[in]*/, float Left/*[in]*/, 
                              float Top/*[in]*/, Powerpoint_2k::ShapePtr* TextEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTextEffect"), DISPID(18));
  TAutoArgs<8> _args;
  _args[1] = (int)PresetTextEffect /*[VT_USERDEFINED:0]*/;
  _args[2] = Text /*[VT_BSTR:0]*/;
  _args[3] = FontName /*[VT_BSTR:0]*/;
  _args[4] = FontSize /*[VT_R4:0]*/;
  _args[5] = (int)FontBold /*[VT_USERDEFINED:0]*/;
  _args[6] = (int)FontItalic /*[VT_USERDEFINED:0]*/;
  _args[7] = Left /*[VT_R4:0]*/;
  _args[8] = Top /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Shape**)TextEffect /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::ShapePtr __fastcall
ShapesDispT<T>::AddTextEffect(Office_2k::MsoPresetTextEffect PresetTextEffect/*[in]*/, 
                              BSTR Text/*[in]*/, BSTR FontName/*[in]*/, float FontSize/*[in]*/, 
                              Office_2k::MsoTriState FontBold/*[in]*/, 
                              Office_2k::MsoTriState FontItalic/*[in]*/, float Left/*[in]*/, 
                              float Top/*[in]*/)
{
  Powerpoint_2k::ShapePtr TextEffect;
  this->AddTextEffect(PresetTextEffect, Text, FontName, FontSize, FontBold, FontItalic, Left, Top, (Powerpoint_2k::ShapePtr*)&TextEffect);
  return TextEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddTextbox(Office_2k::MsoTextOrientation Orientation/*[in]*/, float Left/*[in]*/, 
                           float Top/*[in]*/, float Width/*[in]*/, float Height/*[in]*/, 
                           Powerpoint_2k::ShapePtr* Textbox/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTextbox"), DISPID(19));
  TAutoArgs<5> _args;
  _args[1] = (int)Orientation /*[VT_USERDEFINED:0]*/;
  _args[2] = Left /*[VT_R4:0]*/;
  _args[3] = Top /*[VT_R4:0]*/;
  _args[4] = Width /*[VT_R4:0]*/;
  _args[5] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Shape**)Textbox /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::ShapePtr __fastcall
ShapesDispT<T>::AddTextbox(Office_2k::MsoTextOrientation Orientation/*[in]*/, float Left/*[in]*/, 
                           float Top/*[in]*/, float Width/*[in]*/, float Height/*[in]*/)
{
  Powerpoint_2k::ShapePtr Textbox;
  this->AddTextbox(Orientation, Left, Top, Width, Height, (Powerpoint_2k::ShapePtr*)&Textbox);
  return Textbox;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::BuildFreeform(Office_2k::MsoEditingType EditingType/*[in]*/, float X1/*[in]*/, 
                              float Y1/*[in]*/, 
                              Powerpoint_2k::FreeformBuilderPtr* FreeformBuilder/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuildFreeform"), DISPID(20));
  TAutoArgs<3> _args;
  _args[1] = (int)EditingType /*[VT_USERDEFINED:0]*/;
  _args[2] = X1 /*[VT_R4:0]*/;
  _args[3] = Y1 /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::FreeformBuilder**)FreeformBuilder /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::FreeformBuilderPtr __fastcall
ShapesDispT<T>::BuildFreeform(Office_2k::MsoEditingType EditingType/*[in]*/, float X1/*[in]*/, 
                              float Y1/*[in]*/)
{
  Powerpoint_2k::FreeformBuilderPtr FreeformBuilder;
  this->BuildFreeform(EditingType, X1, Y1, (Powerpoint_2k::FreeformBuilderPtr*)&FreeformBuilder);
  return FreeformBuilder;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::SelectAll()
{
  _TDispID _dispid(*this, OLETEXT("SelectAll"), DISPID(22));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::Range(TVariantInParam index/*[in,opt]*/, 
                      Powerpoint_2k::ShapeRangePtr* Range/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Range"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::ShapeRange**)Range /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::ShapeRangePtr __fastcall
ShapesDispT<T>::Range(TVariantInParam index/*[in,opt]*/)
{
  Powerpoint_2k::ShapeRangePtr Range;
  this->Range(index, (Powerpoint_2k::ShapeRangePtr*)&Range);
  return Range;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::get_HasTitle(Office_2k::MsoTriState* HasTitle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasTitle"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)HasTitle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
ShapesDispT<T>::get_HasTitle(void)
{
  Office_2k::MsoTriState HasTitle;
  this->get_HasTitle((Office_2k::MsoTriState*)&HasTitle);
  return HasTitle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddTitle(Powerpoint_2k::ShapePtr* Title/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTitle"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Shape**)Title /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::ShapePtr __fastcall
ShapesDispT<T>::AddTitle(void)
{
  Powerpoint_2k::ShapePtr Title;
  this->AddTitle((Powerpoint_2k::ShapePtr*)&Title);
  return Title;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::get_Title(Powerpoint_2k::ShapePtr* Title/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Title"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Shape**)Title /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::ShapePtr __fastcall
ShapesDispT<T>::get_Title(void)
{
  Powerpoint_2k::ShapePtr Title;
  this->get_Title((Powerpoint_2k::ShapePtr*)&Title);
  return Title;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::get_Placeholders(Powerpoint_2k::PlaceholdersPtr* Placeholders/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Placeholders"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Placeholders**)Placeholders /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PlaceholdersPtr __fastcall
ShapesDispT<T>::get_Placeholders(void)
{
  Powerpoint_2k::PlaceholdersPtr Placeholders;
  this->get_Placeholders((Powerpoint_2k::PlaceholdersPtr*)&Placeholders);
  return Placeholders;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddOLEObject(float Left/*[in,def,opt]*/, float Top/*[in,def,opt]*/, 
                             float Width/*[in,def,opt]*/, float Height/*[in,def,opt]*/, 
                             BSTR ClassName/*[in,def,opt]*/, BSTR FileName/*[in,def,opt]*/, 
                             Office_2k::MsoTriState DisplayAsIcon/*[in,def,opt]*/, 
                             BSTR IconFileName/*[in,def,opt]*/, int IconIndex/*[in,def,opt]*/, 
                             BSTR IconLabel/*[in,def,opt]*/, 
                             Office_2k::MsoTriState Link/*[in,def,opt]*/, 
                             Powerpoint_2k::ShapePtr* OLEObject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddOLEObject"), DISPID(2008));
  TAutoArgs<11> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  _args[2] = Top /*[VT_R4:0]*/;
  _args[3] = Width /*[VT_R4:0]*/;
  _args[4] = Height /*[VT_R4:0]*/;
  _args[5] = ClassName /*[VT_BSTR:0]*/;
  _args[6] = FileName /*[VT_BSTR:0]*/;
  _args[7] = (int)DisplayAsIcon /*[VT_USERDEFINED:0]*/;
  _args[8] = IconFileName /*[VT_BSTR:0]*/;
  _args[9] = IconIndex /*[VT_INT:0]*/;
  _args[10] = IconLabel /*[VT_BSTR:0]*/;
  _args[11] = (int)Link /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Shape**)OLEObject /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::ShapePtr __fastcall
ShapesDispT<T>::AddOLEObject(float Left/*[in,def,opt]*/, float Top/*[in,def,opt]*/, 
                             float Width/*[in,def,opt]*/, float Height/*[in,def,opt]*/, 
                             BSTR ClassName/*[in,def,opt]*/, BSTR FileName/*[in,def,opt]*/, 
                             Office_2k::MsoTriState DisplayAsIcon/*[in,def,opt]*/, 
                             BSTR IconFileName/*[in,def,opt]*/, int IconIndex/*[in,def,opt]*/, 
                             BSTR IconLabel/*[in,def,opt]*/, 
                             Office_2k::MsoTriState Link/*[in,def,opt]*/)
{
  Powerpoint_2k::ShapePtr OLEObject;
  this->AddOLEObject(Left, Top, Width, Height, ClassName, FileName, DisplayAsIcon, IconFileName, 
                     IconIndex, IconLabel, Link, (Powerpoint_2k::ShapePtr*)&OLEObject);
  return OLEObject;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddComment(float Left/*[in,def,opt]*/, float Top/*[in,def,opt]*/, 
                           float Width/*[in,def,opt]*/, float Height/*[in,def,opt]*/, 
                           Powerpoint_2k::ShapePtr* Comment/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddComment"), DISPID(2009));
  TAutoArgs<4> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  _args[2] = Top /*[VT_R4:0]*/;
  _args[3] = Width /*[VT_R4:0]*/;
  _args[4] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Shape**)Comment /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::ShapePtr __fastcall
ShapesDispT<T>::AddComment(float Left/*[in,def,opt]*/, float Top/*[in,def,opt]*/, 
                           float Width/*[in,def,opt]*/, float Height/*[in,def,opt]*/)
{
  Powerpoint_2k::ShapePtr Comment;
  this->AddComment(Left, Top, Width, Height, (Powerpoint_2k::ShapePtr*)&Comment);
  return Comment;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddPlaceholder(Powerpoint_2k::PpPlaceholderType Type/*[in]*/, 
                               float Left/*[in,def,opt]*/, float Top/*[in,def,opt]*/, 
                               float Width/*[in,def,opt]*/, float Height/*[in,def,opt]*/, 
                               Powerpoint_2k::ShapePtr* Placeholder/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddPlaceholder"), DISPID(2010));
  TAutoArgs<5> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  _args[2] = Left /*[VT_R4:0]*/;
  _args[3] = Top /*[VT_R4:0]*/;
  _args[4] = Width /*[VT_R4:0]*/;
  _args[5] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Shape**)Placeholder /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::ShapePtr __fastcall
ShapesDispT<T>::AddPlaceholder(Powerpoint_2k::PpPlaceholderType Type/*[in]*/, 
                               float Left/*[in,def,opt]*/, float Top/*[in,def,opt]*/, 
                               float Width/*[in,def,opt]*/, float Height/*[in,def,opt]*/)
{
  Powerpoint_2k::ShapePtr Placeholder;
  this->AddPlaceholder(Type, Left, Top, Width, Height, (Powerpoint_2k::ShapePtr*)&Placeholder);
  return Placeholder;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddMediaObject(BSTR FileName/*[in]*/, float Left/*[in,def,opt]*/, 
                               float Top/*[in,def,opt]*/, float Width/*[in,def,opt]*/, 
                               float Height/*[in,def,opt]*/, 
                               Powerpoint_2k::ShapePtr* MediaObject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddMediaObject"), DISPID(2011));
  TAutoArgs<5> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  _args[2] = Left /*[VT_R4:0]*/;
  _args[3] = Top /*[VT_R4:0]*/;
  _args[4] = Width /*[VT_R4:0]*/;
  _args[5] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Shape**)MediaObject /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::ShapePtr __fastcall
ShapesDispT<T>::AddMediaObject(BSTR FileName/*[in]*/, float Left/*[in,def,opt]*/, 
                               float Top/*[in,def,opt]*/, float Width/*[in,def,opt]*/, 
                               float Height/*[in,def,opt]*/)
{
  Powerpoint_2k::ShapePtr MediaObject;
  this->AddMediaObject(FileName, Left, Top, Width, Height, (Powerpoint_2k::ShapePtr*)&MediaObject);
  return MediaObject;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::Paste(Powerpoint_2k::ShapeRangePtr* Paste/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Paste"), DISPID(2012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::ShapeRange**)Paste /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::ShapeRangePtr __fastcall
ShapesDispT<T>::Paste(void)
{
  Powerpoint_2k::ShapeRangePtr Paste;
  this->Paste((Powerpoint_2k::ShapeRangePtr*)&Paste);
  return Paste;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddTable(int NumRows/*[in]*/, int NumColumns/*[in]*/, float Left/*[in,def,opt]*/, 
                         float Top/*[in,def,opt]*/, float Width/*[in,def,opt]*/, 
                         float Height/*[in,def,opt]*/, 
                         Powerpoint_2k::ShapePtr* Table/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTable"), DISPID(2013));
  TAutoArgs<6> _args;
  _args[1] = NumRows /*[VT_INT:0]*/;
  _args[2] = NumColumns /*[VT_INT:0]*/;
  _args[3] = Left /*[VT_R4:0]*/;
  _args[4] = Top /*[VT_R4:0]*/;
  _args[5] = Width /*[VT_R4:0]*/;
  _args[6] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Shape**)Table /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::ShapePtr __fastcall
ShapesDispT<T>::AddTable(int NumRows/*[in]*/, int NumColumns/*[in]*/, float Left/*[in,def,opt]*/, 
                         float Top/*[in,def,opt]*/, float Width/*[in,def,opt]*/, 
                         float Height/*[in,def,opt]*/)
{
  Powerpoint_2k::ShapePtr Table;
  this->AddTable(NumRows, NumColumns, Left, Top, Width, Height, (Powerpoint_2k::ShapePtr*)&Table);
  return Table;
}

// *********************************************************************//
// DispIntf:  Placeholders
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493476-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PlaceholdersDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
PlaceholdersDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PlaceholdersDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PlaceholdersDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PlaceholdersDispT<T>::Item(int index/*[in]*/, Powerpoint_2k::ShapePtr* Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Shape**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::ShapePtr __fastcall
PlaceholdersDispT<T>::Item(int index/*[in]*/)
{
  Powerpoint_2k::ShapePtr Item;
  this->Item(index, (Powerpoint_2k::ShapePtr*)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PlaceholdersDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
PlaceholdersDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PlaceholdersDispT<T>::_Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
PlaceholdersDispT<T>::_Index(int index/*[in]*/)
{
  TVariant _Index;
  this->_Index(index, (TVariant*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PlaceholdersDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PlaceholdersDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  PlaceholderFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493477-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PlaceholderFormatDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
PlaceholderFormatDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PlaceholderFormatDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PlaceholderFormatDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PlaceholderFormatDispT<T>::get_Type(Powerpoint_2k::PpPlaceholderType* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpPlaceholderType __fastcall
PlaceholderFormatDispT<T>::get_Type(void)
{
  Powerpoint_2k::PpPlaceholderType Type;
  this->get_Type((Powerpoint_2k::PpPlaceholderType*)&Type);
  return Type;
}

// *********************************************************************//
// DispIntf:  FreeformBuilder
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493478-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FreeformBuilderDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
FreeformBuilderDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FreeformBuilderDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
FreeformBuilderDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FreeformBuilderDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
FreeformBuilderDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FreeformBuilderDispT<T>::AddNodes(Office_2k::MsoSegmentType SegmentType/*[in]*/, 
                                  Office_2k::MsoEditingType EditingType/*[in]*/, float X1/*[in]*/, 
                                  float Y1/*[in]*/, float X2/*[in,def,opt]*/, 
                                  float Y2/*[in,def,opt]*/, float X3/*[in,def,opt]*/, 
                                  float Y3/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddNodes"), DISPID(10));
  TAutoArgs<8> _args;
  _args[1] = (int)SegmentType /*[VT_USERDEFINED:0]*/;
  _args[2] = (int)EditingType /*[VT_USERDEFINED:0]*/;
  _args[3] = X1 /*[VT_R4:0]*/;
  _args[4] = Y1 /*[VT_R4:0]*/;
  _args[5] = X2 /*[VT_R4:0]*/;
  _args[6] = Y2 /*[VT_R4:0]*/;
  _args[7] = X3 /*[VT_R4:0]*/;
  _args[8] = Y3 /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FreeformBuilderDispT<T>::ConvertToShape(Powerpoint_2k::ShapePtr* Freeform/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConvertToShape"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Shape**)Freeform /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::ShapePtr __fastcall
FreeformBuilderDispT<T>::ConvertToShape(void)
{
  Powerpoint_2k::ShapePtr Freeform;
  this->ConvertToShape((Powerpoint_2k::ShapePtr*)&Freeform);
  return Freeform;
}

// *********************************************************************//
// DispIntf:  Shape
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493479-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ShapeDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ShapeDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ShapeDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::Apply()
{
  _TDispID _dispid(*this, OLETEXT("Apply"), DISPID(10));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(11));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::Flip(Office_2k::MsoFlipCmd FlipCmd/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Flip"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = (int)FlipCmd /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::IncrementLeft(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncrementLeft"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::IncrementRotation(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncrementRotation"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::IncrementTop(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncrementTop"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::PickUp()
{
  _TDispID _dispid(*this, OLETEXT("PickUp"), DISPID(17));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::RerouteConnections()
{
  _TDispID _dispid(*this, OLETEXT("RerouteConnections"), DISPID(18));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::ScaleHeight(float Factor/*[in]*/, 
                           Office_2k::MsoTriState RelativeToOriginalSize/*[in]*/, 
                           Office_2k::MsoScaleFrom fScale/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScaleHeight"), DISPID(19));
  TAutoArgs<3> _args;
  _args[1] = Factor /*[VT_R4:0]*/;
  _args[2] = (int)RelativeToOriginalSize /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)fScale /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::ScaleWidth(float Factor/*[in]*/, 
                          Office_2k::MsoTriState RelativeToOriginalSize/*[in]*/, 
                          Office_2k::MsoScaleFrom fScale/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScaleWidth"), DISPID(20));
  TAutoArgs<3> _args;
  _args[1] = Factor /*[VT_R4:0]*/;
  _args[2] = (int)RelativeToOriginalSize /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)fScale /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::SetShapesDefaultProperties()
{
  _TDispID _dispid(*this, OLETEXT("SetShapesDefaultProperties"), DISPID(22));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::Ungroup(Powerpoint_2k::ShapeRangePtr* Ungroup/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Ungroup"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::ShapeRange**)Ungroup /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::ShapeRangePtr __fastcall
ShapeDispT<T>::Ungroup(void)
{
  Powerpoint_2k::ShapeRangePtr Ungroup;
  this->Ungroup((Powerpoint_2k::ShapeRangePtr*)&Ungroup);
  return Ungroup;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::ZOrder(Office_2k::MsoZOrderCmd ZOrderCmd/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZOrder"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = (int)ZOrderCmd /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Adjustments(Powerpoint_2k::AdjustmentsPtr* Adjustments/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Adjustments"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Adjustments**)Adjustments /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::AdjustmentsPtr __fastcall
ShapeDispT<T>::get_Adjustments(void)
{
  Powerpoint_2k::AdjustmentsPtr Adjustments;
  this->get_Adjustments((Powerpoint_2k::AdjustmentsPtr*)&Adjustments);
  return Adjustments;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_AutoShapeType(Office_2k::MsoAutoShapeType* AutoShapeType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoShapeType"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AutoShapeType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoAutoShapeType __fastcall
ShapeDispT<T>::get_AutoShapeType(void)
{
  Office_2k::MsoAutoShapeType AutoShapeType;
  this->get_AutoShapeType((Office_2k::MsoAutoShapeType*)&AutoShapeType);
  return AutoShapeType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::set_AutoShapeType(Office_2k::MsoAutoShapeType AutoShapeType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoShapeType"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = (int)AutoShapeType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_BlackWhiteMode(Office_2k::MsoBlackWhiteMode* BlackWhiteMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BlackWhiteMode"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)BlackWhiteMode /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoBlackWhiteMode __fastcall
ShapeDispT<T>::get_BlackWhiteMode(void)
{
  Office_2k::MsoBlackWhiteMode BlackWhiteMode;
  this->get_BlackWhiteMode((Office_2k::MsoBlackWhiteMode*)&BlackWhiteMode);
  return BlackWhiteMode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::set_BlackWhiteMode(Office_2k::MsoBlackWhiteMode BlackWhiteMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BlackWhiteMode"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = (int)BlackWhiteMode /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Callout(Powerpoint_2k::CalloutFormatPtr* Callout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Callout"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::CalloutFormat**)Callout /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::CalloutFormatPtr __fastcall
ShapeDispT<T>::get_Callout(void)
{
  Powerpoint_2k::CalloutFormatPtr Callout;
  this->get_Callout((Powerpoint_2k::CalloutFormatPtr*)&Callout);
  return Callout;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_ConnectionSiteCount(int* ConnectionSiteCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionSiteCount"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ConnectionSiteCount /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ShapeDispT<T>::get_ConnectionSiteCount(void)
{
  int ConnectionSiteCount;
  this->get_ConnectionSiteCount((int*)&ConnectionSiteCount);
  return ConnectionSiteCount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Connector(Office_2k::MsoTriState* Connector/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Connector"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Connector /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
ShapeDispT<T>::get_Connector(void)
{
  Office_2k::MsoTriState Connector;
  this->get_Connector((Office_2k::MsoTriState*)&Connector);
  return Connector;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_ConnectorFormat(Powerpoint_2k::ConnectorFormatPtr* ConnectorFormat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectorFormat"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::ConnectorFormat**)ConnectorFormat /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::ConnectorFormatPtr __fastcall
ShapeDispT<T>::get_ConnectorFormat(void)
{
  Powerpoint_2k::ConnectorFormatPtr ConnectorFormat;
  this->get_ConnectorFormat((Powerpoint_2k::ConnectorFormatPtr*)&ConnectorFormat);
  return ConnectorFormat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Fill(Powerpoint_2k::FillFormatPtr* Fill/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Fill"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::FillFormat**)Fill /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::FillFormatPtr __fastcall
ShapeDispT<T>::get_Fill(void)
{
  Powerpoint_2k::FillFormatPtr Fill;
  this->get_Fill((Powerpoint_2k::FillFormatPtr*)&Fill);
  return Fill;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_GroupItems(Powerpoint_2k::GroupShapesPtr* GroupItems/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupItems"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::GroupShapes**)GroupItems /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::GroupShapesPtr __fastcall
ShapeDispT<T>::get_GroupItems(void)
{
  Powerpoint_2k::GroupShapesPtr GroupItems;
  this->get_GroupItems((Powerpoint_2k::GroupShapesPtr*)&GroupItems);
  return GroupItems;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Height(float* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShapeDispT<T>::get_Height(void)
{
  float Height;
  this->get_Height((float*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::set_Height(float Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_HorizontalFlip(Office_2k::MsoTriState* HorizontalFlip/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HorizontalFlip"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)HorizontalFlip /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
ShapeDispT<T>::get_HorizontalFlip(void)
{
  Office_2k::MsoTriState HorizontalFlip;
  this->get_HorizontalFlip((Office_2k::MsoTriState*)&HorizontalFlip);
  return HorizontalFlip;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Left(float* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(111));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShapeDispT<T>::get_Left(void)
{
  float Left;
  this->get_Left((float*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::set_Left(float Left/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(111));
  TAutoArgs<1> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Line(Powerpoint_2k::LineFormatPtr* Line/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Line"), DISPID(112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::LineFormat**)Line /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::LineFormatPtr __fastcall
ShapeDispT<T>::get_Line(void)
{
  Powerpoint_2k::LineFormatPtr Line;
  this->get_Line((Powerpoint_2k::LineFormatPtr*)&Line);
  return Line;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_LockAspectRatio(Office_2k::MsoTriState* LockAspectRatio/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LockAspectRatio"), DISPID(113));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)LockAspectRatio /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
ShapeDispT<T>::get_LockAspectRatio(void)
{
  Office_2k::MsoTriState LockAspectRatio;
  this->get_LockAspectRatio((Office_2k::MsoTriState*)&LockAspectRatio);
  return LockAspectRatio;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::set_LockAspectRatio(Office_2k::MsoTriState LockAspectRatio/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LockAspectRatio"), DISPID(113));
  TAutoArgs<1> _args;
  _args[1] = (int)LockAspectRatio /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(115));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ShapeDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(115));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Nodes(Powerpoint_2k::ShapeNodesPtr* Nodes/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Nodes"), DISPID(116));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::ShapeNodes**)Nodes /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::ShapeNodesPtr __fastcall
ShapeDispT<T>::get_Nodes(void)
{
  Powerpoint_2k::ShapeNodesPtr Nodes;
  this->get_Nodes((Powerpoint_2k::ShapeNodesPtr*)&Nodes);
  return Nodes;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Rotation(float* Rotation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Rotation"), DISPID(117));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Rotation /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShapeDispT<T>::get_Rotation(void)
{
  float Rotation;
  this->get_Rotation((float*)&Rotation);
  return Rotation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::set_Rotation(float Rotation/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Rotation"), DISPID(117));
  TAutoArgs<1> _args;
  _args[1] = Rotation /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_PictureFormat(Powerpoint_2k::PictureFormatPtr* Picture/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureFormat"), DISPID(118));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PictureFormat**)Picture /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PictureFormatPtr __fastcall
ShapeDispT<T>::get_PictureFormat(void)
{
  Powerpoint_2k::PictureFormatPtr Picture;
  this->get_PictureFormat((Powerpoint_2k::PictureFormatPtr*)&Picture);
  return Picture;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Shadow(Powerpoint_2k::ShadowFormatPtr* Shadow/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Shadow"), DISPID(119));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::ShadowFormat**)Shadow /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::ShadowFormatPtr __fastcall
ShapeDispT<T>::get_Shadow(void)
{
  Powerpoint_2k::ShadowFormatPtr Shadow;
  this->get_Shadow((Powerpoint_2k::ShadowFormatPtr*)&Shadow);
  return Shadow;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_TextEffect(Powerpoint_2k::TextEffectFormatPtr* TextEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextEffect"), DISPID(120));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::TextEffectFormat**)TextEffect /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::TextEffectFormatPtr __fastcall
ShapeDispT<T>::get_TextEffect(void)
{
  Powerpoint_2k::TextEffectFormatPtr TextEffect;
  this->get_TextEffect((Powerpoint_2k::TextEffectFormatPtr*)&TextEffect);
  return TextEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_TextFrame(Powerpoint_2k::TextFramePtr* TextFrame/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextFrame"), DISPID(121));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::TextFrame**)TextFrame /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::TextFramePtr __fastcall
ShapeDispT<T>::get_TextFrame(void)
{
  Powerpoint_2k::TextFramePtr TextFrame;
  this->get_TextFrame((Powerpoint_2k::TextFramePtr*)&TextFrame);
  return TextFrame;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_ThreeD(Powerpoint_2k::ThreeDFormatPtr* ThreeD/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ThreeD"), DISPID(122));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::ThreeDFormat**)ThreeD /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::ThreeDFormatPtr __fastcall
ShapeDispT<T>::get_ThreeD(void)
{
  Powerpoint_2k::ThreeDFormatPtr ThreeD;
  this->get_ThreeD((Powerpoint_2k::ThreeDFormatPtr*)&ThreeD);
  return ThreeD;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Top(float* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(123));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShapeDispT<T>::get_Top(void)
{
  float Top;
  this->get_Top((float*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::set_Top(float Top/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(123));
  TAutoArgs<1> _args;
  _args[1] = Top /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Type(Office_2k::MsoShapeType* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(124));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoShapeType __fastcall
ShapeDispT<T>::get_Type(void)
{
  Office_2k::MsoShapeType Type;
  this->get_Type((Office_2k::MsoShapeType*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_VerticalFlip(Office_2k::MsoTriState* VerticalFlip/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VerticalFlip"), DISPID(125));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)VerticalFlip /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
ShapeDispT<T>::get_VerticalFlip(void)
{
  Office_2k::MsoTriState VerticalFlip;
  this->get_VerticalFlip((Office_2k::MsoTriState*)&VerticalFlip);
  return VerticalFlip;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Vertices(TVariant* Vertices/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Vertices"), DISPID(126));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Vertices /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
ShapeDispT<T>::get_Vertices(void)
{
  TVariant Vertices;
  this->get_Vertices((TVariant*)&Vertices);
  return Vertices;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(127));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
ShapeDispT<T>::get_Visible(void)
{
  Office_2k::MsoTriState Visible;
  this->get_Visible((Office_2k::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::set_Visible(Office_2k::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(127));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Width(float* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(128));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShapeDispT<T>::get_Width(void)
{
  float Width;
  this->get_Width((float*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::set_Width(float Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(128));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_ZOrderPosition(int* ZOrderPosition/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZOrderPosition"), DISPID(129));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ZOrderPosition /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ShapeDispT<T>::get_ZOrderPosition(void)
{
  int ZOrderPosition;
  this->get_ZOrderPosition((int*)&ZOrderPosition);
  return ZOrderPosition;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_OLEFormat(Powerpoint_2k::OLEFormatPtr* OLEFormat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEFormat"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::OLEFormat**)OLEFormat /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::OLEFormatPtr __fastcall
ShapeDispT<T>::get_OLEFormat(void)
{
  Powerpoint_2k::OLEFormatPtr OLEFormat;
  this->get_OLEFormat((Powerpoint_2k::OLEFormatPtr*)&OLEFormat);
  return OLEFormat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_LinkFormat(Powerpoint_2k::LinkFormatPtr* LinkFormat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LinkFormat"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::LinkFormat**)LinkFormat /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::LinkFormatPtr __fastcall
ShapeDispT<T>::get_LinkFormat(void)
{
  Powerpoint_2k::LinkFormatPtr LinkFormat;
  this->get_LinkFormat((Powerpoint_2k::LinkFormatPtr*)&LinkFormat);
  return LinkFormat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_PlaceholderFormat(Powerpoint_2k::PlaceholderFormatPtr* PlaceholderFormat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PlaceholderFormat"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PlaceholderFormat**)PlaceholderFormat /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PlaceholderFormatPtr __fastcall
ShapeDispT<T>::get_PlaceholderFormat(void)
{
  Powerpoint_2k::PlaceholderFormatPtr PlaceholderFormat;
  this->get_PlaceholderFormat((Powerpoint_2k::PlaceholderFormatPtr*)&PlaceholderFormat);
  return PlaceholderFormat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_AnimationSettings(Powerpoint_2k::AnimationSettingsPtr* AnimationSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AnimationSettings"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::AnimationSettings**)AnimationSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::AnimationSettingsPtr __fastcall
ShapeDispT<T>::get_AnimationSettings(void)
{
  Powerpoint_2k::AnimationSettingsPtr AnimationSettings;
  this->get_AnimationSettings((Powerpoint_2k::AnimationSettingsPtr*)&AnimationSettings);
  return AnimationSettings;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_ActionSettings(Powerpoint_2k::ActionSettingsPtr* ActionSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActionSettings"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::ActionSettings**)ActionSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::ActionSettingsPtr __fastcall
ShapeDispT<T>::get_ActionSettings(void)
{
  Powerpoint_2k::ActionSettingsPtr ActionSettings;
  this->get_ActionSettings((Powerpoint_2k::ActionSettingsPtr*)&ActionSettings);
  return ActionSettings;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tags"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Tags**)Tags /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::TagsPtr __fastcall
ShapeDispT<T>::get_Tags(void)
{
  Powerpoint_2k::TagsPtr Tags;
  this->get_Tags((Powerpoint_2k::TagsPtr*)&Tags);
  return Tags;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::Cut()
{
  _TDispID _dispid(*this, OLETEXT("Cut"), DISPID(2009));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::Copy()
{
  _TDispID _dispid(*this, OLETEXT("Copy"), DISPID(2010));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::Select(Office_2k::MsoTriState Replace/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Select"), DISPID(2011));
  TAutoArgs<1> _args;
  _args[1] = (int)Replace /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::Duplicate(Powerpoint_2k::ShapeRangePtr* Duplicate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Duplicate"), DISPID(2012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::ShapeRange**)Duplicate /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::ShapeRangePtr __fastcall
ShapeDispT<T>::Duplicate(void)
{
  Powerpoint_2k::ShapeRangePtr Duplicate;
  this->Duplicate((Powerpoint_2k::ShapeRangePtr*)&Duplicate);
  return Duplicate;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_MediaType(Powerpoint_2k::PpMediaType* MediaType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MediaType"), DISPID(2013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)MediaType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpMediaType __fastcall
ShapeDispT<T>::get_MediaType(void)
{
  Powerpoint_2k::PpMediaType MediaType;
  this->get_MediaType((Powerpoint_2k::PpMediaType*)&MediaType);
  return MediaType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_HasTextFrame(Office_2k::MsoTriState* HasTextFrame/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasTextFrame"), DISPID(2014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)HasTextFrame /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
ShapeDispT<T>::get_HasTextFrame(void)
{
  Office_2k::MsoTriState HasTextFrame;
  this->get_HasTextFrame((Office_2k::MsoTriState*)&HasTextFrame);
  return HasTextFrame;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_SoundFormat(Powerpoint_2k::SoundFormatPtr* SoundFormat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SoundFormat"), DISPID(2015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::SoundFormat**)SoundFormat /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::SoundFormatPtr __fastcall
ShapeDispT<T>::get_SoundFormat(void)
{
  Powerpoint_2k::SoundFormatPtr SoundFormat;
  this->get_SoundFormat((Powerpoint_2k::SoundFormatPtr*)&SoundFormat);
  return SoundFormat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Script(Office_2k::ScriptPtr* Script/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Script"), DISPID(130));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::Script**)Script /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::ScriptPtr __fastcall
ShapeDispT<T>::get_Script(void)
{
  Office_2k::ScriptPtr Script;
  this->get_Script((Office_2k::ScriptPtr*)&Script);
  return Script;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_AlternativeText(BSTR* AlternativeText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AlternativeText"), DISPID(131));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AlternativeText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ShapeDispT<T>::get_AlternativeText(void)
{
  BSTR AlternativeText;
  this->get_AlternativeText((BSTR*)&AlternativeText);
  return AlternativeText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::set_AlternativeText(BSTR AlternativeText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AlternativeText"), DISPID(131));
  TAutoArgs<1> _args;
  _args[1] = AlternativeText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_HasTable(Office_2k::MsoTriState* HasTable/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasTable"), DISPID(2016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)HasTable /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
ShapeDispT<T>::get_HasTable(void)
{
  Office_2k::MsoTriState HasTable;
  this->get_HasTable((Office_2k::MsoTriState*)&HasTable);
  return HasTable;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Table(Powerpoint_2k::TablePtr* Table/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Table"), DISPID(2017));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Table**)Table /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::TablePtr __fastcall
ShapeDispT<T>::get_Table(void)
{
  Powerpoint_2k::TablePtr Table;
  this->get_Table((Powerpoint_2k::TablePtr*)&Table);
  return Table;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::Export(BSTR PathName/*[in]*/, Powerpoint_2k::PpShapeFormat Filter/*[in]*/, 
                      int ScaleWidth/*[in,def,opt]*/, int ScaleHeight/*[in,def,opt]*/, 
                      Powerpoint_2k::PpExportMode ExportMode/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Export"), DISPID(2018));
  TAutoArgs<5> _args;
  _args[1] = PathName /*[VT_BSTR:0]*/;
  _args[2] = (int)Filter /*[VT_USERDEFINED:0]*/;
  _args[3] = ScaleWidth /*[VT_INT:0]*/;
  _args[4] = ScaleHeight /*[VT_INT:0]*/;
  _args[5] = (int)ExportMode /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ShapeRange
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149347A-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ShapeRangeDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ShapeRangeDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ShapeRangeDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::Apply()
{
  _TDispID _dispid(*this, OLETEXT("Apply"), DISPID(10));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(11));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::Flip(Office_2k::MsoFlipCmd FlipCmd/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Flip"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = (int)FlipCmd /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::IncrementLeft(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncrementLeft"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::IncrementRotation(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncrementRotation"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::IncrementTop(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncrementTop"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::PickUp()
{
  _TDispID _dispid(*this, OLETEXT("PickUp"), DISPID(17));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::RerouteConnections()
{
  _TDispID _dispid(*this, OLETEXT("RerouteConnections"), DISPID(18));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::ScaleHeight(float Factor/*[in]*/, 
                                Office_2k::MsoTriState RelativeToOriginalSize/*[in]*/, 
                                Office_2k::MsoScaleFrom fScale/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScaleHeight"), DISPID(19));
  TAutoArgs<3> _args;
  _args[1] = Factor /*[VT_R4:0]*/;
  _args[2] = (int)RelativeToOriginalSize /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)fScale /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::ScaleWidth(float Factor/*[in]*/, 
                               Office_2k::MsoTriState RelativeToOriginalSize/*[in]*/, 
                               Office_2k::MsoScaleFrom fScale/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScaleWidth"), DISPID(20));
  TAutoArgs<3> _args;
  _args[1] = Factor /*[VT_R4:0]*/;
  _args[2] = (int)RelativeToOriginalSize /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)fScale /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::SetShapesDefaultProperties()
{
  _TDispID _dispid(*this, OLETEXT("SetShapesDefaultProperties"), DISPID(22));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::Ungroup(Powerpoint_2k::ShapeRangePtr* Ungroup/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Ungroup"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::ShapeRange**)Ungroup /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::ShapeRangePtr __fastcall
ShapeRangeDispT<T>::Ungroup(void)
{
  Powerpoint_2k::ShapeRangePtr Ungroup;
  this->Ungroup((Powerpoint_2k::ShapeRangePtr*)&Ungroup);
  return Ungroup;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::ZOrder(Office_2k::MsoZOrderCmd ZOrderCmd/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZOrder"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = (int)ZOrderCmd /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Adjustments(Powerpoint_2k::AdjustmentsPtr* Adjustments/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Adjustments"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Adjustments**)Adjustments /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::AdjustmentsPtr __fastcall
ShapeRangeDispT<T>::get_Adjustments(void)
{
  Powerpoint_2k::AdjustmentsPtr Adjustments;
  this->get_Adjustments((Powerpoint_2k::AdjustmentsPtr*)&Adjustments);
  return Adjustments;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_AutoShapeType(Office_2k::MsoAutoShapeType* AutoShapeType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoShapeType"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AutoShapeType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoAutoShapeType __fastcall
ShapeRangeDispT<T>::get_AutoShapeType(void)
{
  Office_2k::MsoAutoShapeType AutoShapeType;
  this->get_AutoShapeType((Office_2k::MsoAutoShapeType*)&AutoShapeType);
  return AutoShapeType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::set_AutoShapeType(Office_2k::MsoAutoShapeType AutoShapeType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoShapeType"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = (int)AutoShapeType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_BlackWhiteMode(Office_2k::MsoBlackWhiteMode* BlackWhiteMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BlackWhiteMode"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)BlackWhiteMode /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoBlackWhiteMode __fastcall
ShapeRangeDispT<T>::get_BlackWhiteMode(void)
{
  Office_2k::MsoBlackWhiteMode BlackWhiteMode;
  this->get_BlackWhiteMode((Office_2k::MsoBlackWhiteMode*)&BlackWhiteMode);
  return BlackWhiteMode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::set_BlackWhiteMode(Office_2k::MsoBlackWhiteMode BlackWhiteMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BlackWhiteMode"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = (int)BlackWhiteMode /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Callout(Powerpoint_2k::CalloutFormatPtr* Callout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Callout"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::CalloutFormat**)Callout /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::CalloutFormatPtr __fastcall
ShapeRangeDispT<T>::get_Callout(void)
{
  Powerpoint_2k::CalloutFormatPtr Callout;
  this->get_Callout((Powerpoint_2k::CalloutFormatPtr*)&Callout);
  return Callout;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_ConnectionSiteCount(int* ConnectionSiteCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionSiteCount"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ConnectionSiteCount /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ShapeRangeDispT<T>::get_ConnectionSiteCount(void)
{
  int ConnectionSiteCount;
  this->get_ConnectionSiteCount((int*)&ConnectionSiteCount);
  return ConnectionSiteCount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Connector(Office_2k::MsoTriState* Connector/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Connector"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Connector /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
ShapeRangeDispT<T>::get_Connector(void)
{
  Office_2k::MsoTriState Connector;
  this->get_Connector((Office_2k::MsoTriState*)&Connector);
  return Connector;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_ConnectorFormat(Powerpoint_2k::ConnectorFormatPtr* ConnectorFormat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectorFormat"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::ConnectorFormat**)ConnectorFormat /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::ConnectorFormatPtr __fastcall
ShapeRangeDispT<T>::get_ConnectorFormat(void)
{
  Powerpoint_2k::ConnectorFormatPtr ConnectorFormat;
  this->get_ConnectorFormat((Powerpoint_2k::ConnectorFormatPtr*)&ConnectorFormat);
  return ConnectorFormat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Fill(Powerpoint_2k::FillFormatPtr* Fill/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Fill"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::FillFormat**)Fill /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::FillFormatPtr __fastcall
ShapeRangeDispT<T>::get_Fill(void)
{
  Powerpoint_2k::FillFormatPtr Fill;
  this->get_Fill((Powerpoint_2k::FillFormatPtr*)&Fill);
  return Fill;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_GroupItems(Powerpoint_2k::GroupShapesPtr* GroupItems/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupItems"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::GroupShapes**)GroupItems /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::GroupShapesPtr __fastcall
ShapeRangeDispT<T>::get_GroupItems(void)
{
  Powerpoint_2k::GroupShapesPtr GroupItems;
  this->get_GroupItems((Powerpoint_2k::GroupShapesPtr*)&GroupItems);
  return GroupItems;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Height(float* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShapeRangeDispT<T>::get_Height(void)
{
  float Height;
  this->get_Height((float*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::set_Height(float Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_HorizontalFlip(Office_2k::MsoTriState* HorizontalFlip/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HorizontalFlip"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)HorizontalFlip /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
ShapeRangeDispT<T>::get_HorizontalFlip(void)
{
  Office_2k::MsoTriState HorizontalFlip;
  this->get_HorizontalFlip((Office_2k::MsoTriState*)&HorizontalFlip);
  return HorizontalFlip;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Left(float* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(111));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShapeRangeDispT<T>::get_Left(void)
{
  float Left;
  this->get_Left((float*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::set_Left(float Left/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(111));
  TAutoArgs<1> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Line(Powerpoint_2k::LineFormatPtr* Line/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Line"), DISPID(112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::LineFormat**)Line /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::LineFormatPtr __fastcall
ShapeRangeDispT<T>::get_Line(void)
{
  Powerpoint_2k::LineFormatPtr Line;
  this->get_Line((Powerpoint_2k::LineFormatPtr*)&Line);
  return Line;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_LockAspectRatio(Office_2k::MsoTriState* LockAspectRatio/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LockAspectRatio"), DISPID(113));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)LockAspectRatio /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
ShapeRangeDispT<T>::get_LockAspectRatio(void)
{
  Office_2k::MsoTriState LockAspectRatio;
  this->get_LockAspectRatio((Office_2k::MsoTriState*)&LockAspectRatio);
  return LockAspectRatio;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::set_LockAspectRatio(Office_2k::MsoTriState LockAspectRatio/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LockAspectRatio"), DISPID(113));
  TAutoArgs<1> _args;
  _args[1] = (int)LockAspectRatio /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(115));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ShapeRangeDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(115));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Nodes(Powerpoint_2k::ShapeNodesPtr* Nodes/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Nodes"), DISPID(116));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::ShapeNodes**)Nodes /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::ShapeNodesPtr __fastcall
ShapeRangeDispT<T>::get_Nodes(void)
{
  Powerpoint_2k::ShapeNodesPtr Nodes;
  this->get_Nodes((Powerpoint_2k::ShapeNodesPtr*)&Nodes);
  return Nodes;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Rotation(float* Rotation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Rotation"), DISPID(117));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Rotation /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShapeRangeDispT<T>::get_Rotation(void)
{
  float Rotation;
  this->get_Rotation((float*)&Rotation);
  return Rotation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::set_Rotation(float Rotation/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Rotation"), DISPID(117));
  TAutoArgs<1> _args;
  _args[1] = Rotation /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_PictureFormat(Powerpoint_2k::PictureFormatPtr* Picture/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureFormat"), DISPID(118));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PictureFormat**)Picture /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PictureFormatPtr __fastcall
ShapeRangeDispT<T>::get_PictureFormat(void)
{
  Powerpoint_2k::PictureFormatPtr Picture;
  this->get_PictureFormat((Powerpoint_2k::PictureFormatPtr*)&Picture);
  return Picture;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Shadow(Powerpoint_2k::ShadowFormatPtr* Shadow/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Shadow"), DISPID(119));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::ShadowFormat**)Shadow /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::ShadowFormatPtr __fastcall
ShapeRangeDispT<T>::get_Shadow(void)
{
  Powerpoint_2k::ShadowFormatPtr Shadow;
  this->get_Shadow((Powerpoint_2k::ShadowFormatPtr*)&Shadow);
  return Shadow;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_TextEffect(Powerpoint_2k::TextEffectFormatPtr* TextEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextEffect"), DISPID(120));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::TextEffectFormat**)TextEffect /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::TextEffectFormatPtr __fastcall
ShapeRangeDispT<T>::get_TextEffect(void)
{
  Powerpoint_2k::TextEffectFormatPtr TextEffect;
  this->get_TextEffect((Powerpoint_2k::TextEffectFormatPtr*)&TextEffect);
  return TextEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_TextFrame(Powerpoint_2k::TextFramePtr* TextFrame/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextFrame"), DISPID(121));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::TextFrame**)TextFrame /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::TextFramePtr __fastcall
ShapeRangeDispT<T>::get_TextFrame(void)
{
  Powerpoint_2k::TextFramePtr TextFrame;
  this->get_TextFrame((Powerpoint_2k::TextFramePtr*)&TextFrame);
  return TextFrame;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_ThreeD(Powerpoint_2k::ThreeDFormatPtr* ThreeD/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ThreeD"), DISPID(122));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::ThreeDFormat**)ThreeD /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::ThreeDFormatPtr __fastcall
ShapeRangeDispT<T>::get_ThreeD(void)
{
  Powerpoint_2k::ThreeDFormatPtr ThreeD;
  this->get_ThreeD((Powerpoint_2k::ThreeDFormatPtr*)&ThreeD);
  return ThreeD;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Top(float* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(123));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShapeRangeDispT<T>::get_Top(void)
{
  float Top;
  this->get_Top((float*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::set_Top(float Top/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(123));
  TAutoArgs<1> _args;
  _args[1] = Top /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Type(Office_2k::MsoShapeType* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(124));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoShapeType __fastcall
ShapeRangeDispT<T>::get_Type(void)
{
  Office_2k::MsoShapeType Type;
  this->get_Type((Office_2k::MsoShapeType*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_VerticalFlip(Office_2k::MsoTriState* VerticalFlip/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VerticalFlip"), DISPID(125));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)VerticalFlip /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
ShapeRangeDispT<T>::get_VerticalFlip(void)
{
  Office_2k::MsoTriState VerticalFlip;
  this->get_VerticalFlip((Office_2k::MsoTriState*)&VerticalFlip);
  return VerticalFlip;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Vertices(TVariant* Vertices/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Vertices"), DISPID(126));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Vertices /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
ShapeRangeDispT<T>::get_Vertices(void)
{
  TVariant Vertices;
  this->get_Vertices((TVariant*)&Vertices);
  return Vertices;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(127));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
ShapeRangeDispT<T>::get_Visible(void)
{
  Office_2k::MsoTriState Visible;
  this->get_Visible((Office_2k::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::set_Visible(Office_2k::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(127));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Width(float* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(128));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShapeRangeDispT<T>::get_Width(void)
{
  float Width;
  this->get_Width((float*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::set_Width(float Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(128));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_ZOrderPosition(int* ZOrderPosition/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZOrderPosition"), DISPID(129));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ZOrderPosition /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ShapeRangeDispT<T>::get_ZOrderPosition(void)
{
  int ZOrderPosition;
  this->get_ZOrderPosition((int*)&ZOrderPosition);
  return ZOrderPosition;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_OLEFormat(Powerpoint_2k::OLEFormatPtr* OLEFormat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEFormat"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::OLEFormat**)OLEFormat /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::OLEFormatPtr __fastcall
ShapeRangeDispT<T>::get_OLEFormat(void)
{
  Powerpoint_2k::OLEFormatPtr OLEFormat;
  this->get_OLEFormat((Powerpoint_2k::OLEFormatPtr*)&OLEFormat);
  return OLEFormat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_LinkFormat(Powerpoint_2k::LinkFormatPtr* LinkFormat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LinkFormat"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::LinkFormat**)LinkFormat /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::LinkFormatPtr __fastcall
ShapeRangeDispT<T>::get_LinkFormat(void)
{
  Powerpoint_2k::LinkFormatPtr LinkFormat;
  this->get_LinkFormat((Powerpoint_2k::LinkFormatPtr*)&LinkFormat);
  return LinkFormat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_PlaceholderFormat(Powerpoint_2k::PlaceholderFormatPtr* PlaceholderFormat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PlaceholderFormat"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PlaceholderFormat**)PlaceholderFormat /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PlaceholderFormatPtr __fastcall
ShapeRangeDispT<T>::get_PlaceholderFormat(void)
{
  Powerpoint_2k::PlaceholderFormatPtr PlaceholderFormat;
  this->get_PlaceholderFormat((Powerpoint_2k::PlaceholderFormatPtr*)&PlaceholderFormat);
  return PlaceholderFormat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_AnimationSettings(Powerpoint_2k::AnimationSettingsPtr* AnimationSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AnimationSettings"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::AnimationSettings**)AnimationSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::AnimationSettingsPtr __fastcall
ShapeRangeDispT<T>::get_AnimationSettings(void)
{
  Powerpoint_2k::AnimationSettingsPtr AnimationSettings;
  this->get_AnimationSettings((Powerpoint_2k::AnimationSettingsPtr*)&AnimationSettings);
  return AnimationSettings;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_ActionSettings(Powerpoint_2k::ActionSettingsPtr* ActionSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActionSettings"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::ActionSettings**)ActionSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::ActionSettingsPtr __fastcall
ShapeRangeDispT<T>::get_ActionSettings(void)
{
  Powerpoint_2k::ActionSettingsPtr ActionSettings;
  this->get_ActionSettings((Powerpoint_2k::ActionSettingsPtr*)&ActionSettings);
  return ActionSettings;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tags"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Tags**)Tags /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::TagsPtr __fastcall
ShapeRangeDispT<T>::get_Tags(void)
{
  Powerpoint_2k::TagsPtr Tags;
  this->get_Tags((Powerpoint_2k::TagsPtr*)&Tags);
  return Tags;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::Cut()
{
  _TDispID _dispid(*this, OLETEXT("Cut"), DISPID(2009));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::Copy()
{
  _TDispID _dispid(*this, OLETEXT("Copy"), DISPID(2010));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::Select(Office_2k::MsoTriState Replace/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Select"), DISPID(2011));
  TAutoArgs<1> _args;
  _args[1] = (int)Replace /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::Duplicate(Powerpoint_2k::ShapeRangePtr* Duplicate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Duplicate"), DISPID(2012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::ShapeRange**)Duplicate /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::ShapeRangePtr __fastcall
ShapeRangeDispT<T>::Duplicate(void)
{
  Powerpoint_2k::ShapeRangePtr Duplicate;
  this->Duplicate((Powerpoint_2k::ShapeRangePtr*)&Duplicate);
  return Duplicate;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_MediaType(Powerpoint_2k::PpMediaType* MediaType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MediaType"), DISPID(2013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)MediaType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpMediaType __fastcall
ShapeRangeDispT<T>::get_MediaType(void)
{
  Powerpoint_2k::PpMediaType MediaType;
  this->get_MediaType((Powerpoint_2k::PpMediaType*)&MediaType);
  return MediaType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_HasTextFrame(Office_2k::MsoTriState* HasTextFrame/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasTextFrame"), DISPID(2014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)HasTextFrame /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
ShapeRangeDispT<T>::get_HasTextFrame(void)
{
  Office_2k::MsoTriState HasTextFrame;
  this->get_HasTextFrame((Office_2k::MsoTriState*)&HasTextFrame);
  return HasTextFrame;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_SoundFormat(Powerpoint_2k::SoundFormatPtr* SoundFormat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SoundFormat"), DISPID(2015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::SoundFormat**)SoundFormat /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::SoundFormatPtr __fastcall
ShapeRangeDispT<T>::get_SoundFormat(void)
{
  Powerpoint_2k::SoundFormatPtr SoundFormat;
  this->get_SoundFormat((Powerpoint_2k::SoundFormatPtr*)&SoundFormat);
  return SoundFormat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::Item(TVariantInParam index/*[in]*/, 
                         Powerpoint_2k::ShapePtr* Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Shape**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::ShapePtr __fastcall
ShapeRangeDispT<T>::Item(TVariantInParam index/*[in]*/)
{
  Powerpoint_2k::ShapePtr Item;
  this->Item(index, (Powerpoint_2k::ShapePtr*)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
ShapeRangeDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::_Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
ShapeRangeDispT<T>::_Index(int index/*[in]*/)
{
  TVariant _Index;
  this->_Index(index, (TVariant*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ShapeRangeDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::Group(Powerpoint_2k::ShapePtr* Group/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Group"), DISPID(2016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Shape**)Group /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::ShapePtr __fastcall
ShapeRangeDispT<T>::Group(void)
{
  Powerpoint_2k::ShapePtr Group;
  this->Group((Powerpoint_2k::ShapePtr*)&Group);
  return Group;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::Regroup(Powerpoint_2k::ShapePtr* Regroup/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Regroup"), DISPID(2017));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Shape**)Regroup /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::ShapePtr __fastcall
ShapeRangeDispT<T>::Regroup(void)
{
  Powerpoint_2k::ShapePtr Regroup;
  this->Regroup((Powerpoint_2k::ShapePtr*)&Regroup);
  return Regroup;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::Align(Office_2k::MsoAlignCmd AlignCmd/*[in]*/, 
                          Office_2k::MsoTriState RelativeTo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Align"), DISPID(2018));
  TAutoArgs<2> _args;
  _args[1] = (int)AlignCmd /*[VT_USERDEFINED:0]*/;
  _args[2] = (int)RelativeTo /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::Distribute(Office_2k::MsoDistributeCmd DistributeCmd/*[in]*/, 
                               Office_2k::MsoTriState RelativeTo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Distribute"), DISPID(2019));
  TAutoArgs<2> _args;
  _args[1] = (int)DistributeCmd /*[VT_USERDEFINED:0]*/;
  _args[2] = (int)RelativeTo /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::GetPolygonalRepresentation(unsigned_long maxPointsInBuffer/*[in]*/, 
                                               float* pPoints/*[in]*/, 
                                               unsigned_long* numPointsInPolygon/*[out]*/, 
                                               Office_2k::MsoTriState* IsOpen/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetPolygonalRepresentation"), DISPID(2020));
  TAutoArgs<4> _args;
  _args[1] = maxPointsInBuffer /*[VT_UI4:0]*/;
  _args[2] = pPoints /*[VT_R4:1]*/;
  _args[3] = numPointsInPolygon /*[VT_UI4:1]*/;
  _args[4] = (int*)IsOpen /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Script(Office_2k::ScriptPtr* Script/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Script"), DISPID(130));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::Script**)Script /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::ScriptPtr __fastcall
ShapeRangeDispT<T>::get_Script(void)
{
  Office_2k::ScriptPtr Script;
  this->get_Script((Office_2k::ScriptPtr*)&Script);
  return Script;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_AlternativeText(BSTR* AlternativeText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AlternativeText"), DISPID(131));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AlternativeText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ShapeRangeDispT<T>::get_AlternativeText(void)
{
  BSTR AlternativeText;
  this->get_AlternativeText((BSTR*)&AlternativeText);
  return AlternativeText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::set_AlternativeText(BSTR AlternativeText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AlternativeText"), DISPID(131));
  TAutoArgs<1> _args;
  _args[1] = AlternativeText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_HasTable(Office_2k::MsoTriState* HasTable/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasTable"), DISPID(2021));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)HasTable /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
ShapeRangeDispT<T>::get_HasTable(void)
{
  Office_2k::MsoTriState HasTable;
  this->get_HasTable((Office_2k::MsoTriState*)&HasTable);
  return HasTable;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Table(Powerpoint_2k::TablePtr* Table/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Table"), DISPID(2022));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Table**)Table /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::TablePtr __fastcall
ShapeRangeDispT<T>::get_Table(void)
{
  Powerpoint_2k::TablePtr Table;
  this->get_Table((Powerpoint_2k::TablePtr*)&Table);
  return Table;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::Export(BSTR PathName/*[in]*/, Powerpoint_2k::PpShapeFormat Filter/*[in]*/, 
                           int ScaleWidth/*[in,def,opt]*/, int ScaleHeight/*[in,def,opt]*/, 
                           Powerpoint_2k::PpExportMode ExportMode/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Export"), DISPID(2023));
  TAutoArgs<5> _args;
  _args[1] = PathName /*[VT_BSTR:0]*/;
  _args[2] = (int)Filter /*[VT_USERDEFINED:0]*/;
  _args[3] = ScaleWidth /*[VT_INT:0]*/;
  _args[4] = ScaleHeight /*[VT_INT:0]*/;
  _args[5] = (int)ExportMode /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  GroupShapes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149347B-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupShapesDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
GroupShapesDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupShapesDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
GroupShapesDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupShapesDispT<T>::get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
GroupShapesDispT<T>::get_Parent(void)
{
  LPDISPATCH ppidisp;
  this->get_Parent((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupShapesDispT<T>::get_Count(int* pnShapes/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pnShapes /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
GroupShapesDispT<T>::get_Count(void)
{
  int pnShapes;
  this->get_Count((int*)&pnShapes);
  return pnShapes;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupShapesDispT<T>::Item(TVariantInParam index/*[in]*/, 
                          Powerpoint_2k::ShapePtr* Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Shape**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::ShapePtr __fastcall
GroupShapesDispT<T>::Item(TVariantInParam index/*[in]*/)
{
  Powerpoint_2k::ShapePtr Item;
  this->Item(index, (Powerpoint_2k::ShapePtr*)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupShapesDispT<T>::get__NewEnum(LPUNKNOWN* ppienum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppienum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
GroupShapesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppienum;
  this->get__NewEnum((LPUNKNOWN*)&ppienum);
  return ppienum;
}

// *********************************************************************//
// DispIntf:  Adjustments
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149347C-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AdjustmentsDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
AdjustmentsDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AdjustmentsDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
AdjustmentsDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AdjustmentsDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
AdjustmentsDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AdjustmentsDispT<T>::get_Count(int* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
AdjustmentsDispT<T>::get_Count(void)
{
  int Count;
  this->get_Count((int*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AdjustmentsDispT<T>::get_Item(int index/*[in]*/, float* Val/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(Val /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
AdjustmentsDispT<T>::get_Item(int index/*[in]*/)
{
  float Val;
  this->get_Item(index, (float*)&Val);
  return Val;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AdjustmentsDispT<T>::set_Item(int index/*[in]*/, float Val/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<2> _args;
  _args[1] = index /*[VT_INT:0]*/;
  _args[2] = Val /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  PictureFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149347D-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PictureFormatDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PictureFormatDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PictureFormatDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::IncrementBrightness(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncrementBrightness"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::IncrementContrast(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncrementContrast"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::get_Brightness(float* Brightness/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Brightness"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Brightness /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PictureFormatDispT<T>::get_Brightness(void)
{
  float Brightness;
  this->get_Brightness((float*)&Brightness);
  return Brightness;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::set_Brightness(float Brightness/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Brightness"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = Brightness /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::get_ColorType(Office_2k::MsoPictureColorType* ColorType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorType"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ColorType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoPictureColorType __fastcall
PictureFormatDispT<T>::get_ColorType(void)
{
  Office_2k::MsoPictureColorType ColorType;
  this->get_ColorType((Office_2k::MsoPictureColorType*)&ColorType);
  return ColorType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::set_ColorType(Office_2k::MsoPictureColorType ColorType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorType"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = (int)ColorType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::get_Contrast(float* Contrast/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Contrast"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Contrast /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PictureFormatDispT<T>::get_Contrast(void)
{
  float Contrast;
  this->get_Contrast((float*)&Contrast);
  return Contrast;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::set_Contrast(float Contrast/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Contrast"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = Contrast /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::get_CropBottom(float* CropBottom/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CropBottom"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CropBottom /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PictureFormatDispT<T>::get_CropBottom(void)
{
  float CropBottom;
  this->get_CropBottom((float*)&CropBottom);
  return CropBottom;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::set_CropBottom(float CropBottom/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CropBottom"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = CropBottom /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::get_CropLeft(float* CropLeft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CropLeft"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CropLeft /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PictureFormatDispT<T>::get_CropLeft(void)
{
  float CropLeft;
  this->get_CropLeft((float*)&CropLeft);
  return CropLeft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::set_CropLeft(float CropLeft/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CropLeft"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = CropLeft /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::get_CropRight(float* CropRight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CropRight"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CropRight /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PictureFormatDispT<T>::get_CropRight(void)
{
  float CropRight;
  this->get_CropRight((float*)&CropRight);
  return CropRight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::set_CropRight(float CropRight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CropRight"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = CropRight /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::get_CropTop(float* CropTop/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CropTop"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CropTop /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PictureFormatDispT<T>::get_CropTop(void)
{
  float CropTop;
  this->get_CropTop((float*)&CropTop);
  return CropTop;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::set_CropTop(float CropTop/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CropTop"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = CropTop /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::get_TransparencyColor(Office_2k::MsoRGBType* TransparencyColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransparencyColor"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(TransparencyColor /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoRGBType __fastcall
PictureFormatDispT<T>::get_TransparencyColor(void)
{
  Office_2k::MsoRGBType TransparencyColor;
  this->get_TransparencyColor((Office_2k::MsoRGBType*)&TransparencyColor);
  return TransparencyColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::set_TransparencyColor(Office_2k::MsoRGBType TransparencyColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransparencyColor"), DISPID(107));
  TAutoArgs<1> _args;
  _args[1] = TransparencyColor /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::get_TransparentBackground(Office_2k::MsoTriState* TransparentBackground/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransparentBackground"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)TransparentBackground /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PictureFormatDispT<T>::get_TransparentBackground(void)
{
  Office_2k::MsoTriState TransparentBackground;
  this->get_TransparentBackground((Office_2k::MsoTriState*)&TransparentBackground);
  return TransparentBackground;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::set_TransparentBackground(Office_2k::MsoTriState TransparentBackground/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransparentBackground"), DISPID(108));
  TAutoArgs<1> _args;
  _args[1] = (int)TransparentBackground /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  FillFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149347E-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
FillFormatDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
FillFormatDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
FillFormatDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::Background()
{
  _TDispID _dispid(*this, OLETEXT("Background"), DISPID(10));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::OneColorGradient(Office_2k::MsoGradientStyle Style/*[in]*/, int Variant/*[in]*/
                                     , float Degree/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OneColorGradient"), DISPID(11));
  TAutoArgs<3> _args;
  _args[1] = (int)Style /*[VT_USERDEFINED:0]*/;
  _args[2] = Variant /*[VT_INT:0]*/;
  _args[3] = Degree /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::Patterned(Office_2k::MsoPatternType Pattern/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Patterned"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = (int)Pattern /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::PresetGradient(Office_2k::MsoGradientStyle Style/*[in]*/, int Variant/*[in]*/, 
                                   Office_2k::MsoPresetGradientType PresetGradientType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetGradient"), DISPID(13));
  TAutoArgs<3> _args;
  _args[1] = (int)Style /*[VT_USERDEFINED:0]*/;
  _args[2] = Variant /*[VT_INT:0]*/;
  _args[3] = (int)PresetGradientType /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::PresetTextured(Office_2k::MsoPresetTexture PresetTexture/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetTextured"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = (int)PresetTexture /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::Solid()
{
  _TDispID _dispid(*this, OLETEXT("Solid"), DISPID(15));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::TwoColorGradient(Office_2k::MsoGradientStyle Style/*[in]*/, int Variant/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TwoColorGradient"), DISPID(16));
  TAutoArgs<2> _args;
  _args[1] = (int)Style /*[VT_USERDEFINED:0]*/;
  _args[2] = Variant /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::UserPicture(BSTR PictureFile/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserPicture"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = PictureFile /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::UserTextured(BSTR TextureFile/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserTextured"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = TextureFile /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_BackColor(Powerpoint_2k::ColorFormatPtr* BackColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::ColorFormat**)BackColor /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::ColorFormatPtr __fastcall
FillFormatDispT<T>::get_BackColor(void)
{
  Powerpoint_2k::ColorFormatPtr BackColor;
  this->get_BackColor((Powerpoint_2k::ColorFormatPtr*)&BackColor);
  return BackColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::set_BackColor(Powerpoint_2k::ColorFormatPtr BackColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Powerpoint_2k::ColorFormat*)BackColor /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_ForeColor(Powerpoint_2k::ColorFormatPtr* ForeColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::ColorFormat**)ForeColor /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::ColorFormatPtr __fastcall
FillFormatDispT<T>::get_ForeColor(void)
{
  Powerpoint_2k::ColorFormatPtr ForeColor;
  this->get_ForeColor((Powerpoint_2k::ColorFormatPtr*)&ForeColor);
  return ForeColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::set_ForeColor(Powerpoint_2k::ColorFormatPtr ForeColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Powerpoint_2k::ColorFormat*)ForeColor /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_GradientColorType(Office_2k::MsoGradientColorType* GradientColorType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GradientColorType"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)GradientColorType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoGradientColorType __fastcall
FillFormatDispT<T>::get_GradientColorType(void)
{
  Office_2k::MsoGradientColorType GradientColorType;
  this->get_GradientColorType((Office_2k::MsoGradientColorType*)&GradientColorType);
  return GradientColorType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_GradientDegree(float* GradientDegree/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GradientDegree"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(GradientDegree /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
FillFormatDispT<T>::get_GradientDegree(void)
{
  float GradientDegree;
  this->get_GradientDegree((float*)&GradientDegree);
  return GradientDegree;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_GradientStyle(Office_2k::MsoGradientStyle* GradientStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GradientStyle"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)GradientStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoGradientStyle __fastcall
FillFormatDispT<T>::get_GradientStyle(void)
{
  Office_2k::MsoGradientStyle GradientStyle;
  this->get_GradientStyle((Office_2k::MsoGradientStyle*)&GradientStyle);
  return GradientStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_GradientVariant(int* GradientVariant/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GradientVariant"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(GradientVariant /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
FillFormatDispT<T>::get_GradientVariant(void)
{
  int GradientVariant;
  this->get_GradientVariant((int*)&GradientVariant);
  return GradientVariant;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_Pattern(Office_2k::MsoPatternType* Pattern/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Pattern"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Pattern /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoPatternType __fastcall
FillFormatDispT<T>::get_Pattern(void)
{
  Office_2k::MsoPatternType Pattern;
  this->get_Pattern((Office_2k::MsoPatternType*)&Pattern);
  return Pattern;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_PresetGradientType(Office_2k::MsoPresetGradientType* PresetGradientType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetGradientType"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PresetGradientType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoPresetGradientType __fastcall
FillFormatDispT<T>::get_PresetGradientType(void)
{
  Office_2k::MsoPresetGradientType PresetGradientType;
  this->get_PresetGradientType((Office_2k::MsoPresetGradientType*)&PresetGradientType);
  return PresetGradientType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_PresetTexture(Office_2k::MsoPresetTexture* PresetTexture/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetTexture"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PresetTexture /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoPresetTexture __fastcall
FillFormatDispT<T>::get_PresetTexture(void)
{
  Office_2k::MsoPresetTexture PresetTexture;
  this->get_PresetTexture((Office_2k::MsoPresetTexture*)&PresetTexture);
  return PresetTexture;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_TextureName(BSTR* TextureName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextureName"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(TextureName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
FillFormatDispT<T>::get_TextureName(void)
{
  BSTR TextureName;
  this->get_TextureName((BSTR*)&TextureName);
  return TextureName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_TextureType(Office_2k::MsoTextureType* TextureType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextureType"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)TextureType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTextureType __fastcall
FillFormatDispT<T>::get_TextureType(void)
{
  Office_2k::MsoTextureType TextureType;
  this->get_TextureType((Office_2k::MsoTextureType*)&TextureType);
  return TextureType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_Transparency(float* Transparency/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Transparency"), DISPID(111));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Transparency /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
FillFormatDispT<T>::get_Transparency(void)
{
  float Transparency;
  this->get_Transparency((float*)&Transparency);
  return Transparency;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::set_Transparency(float Transparency/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Transparency"), DISPID(111));
  TAutoArgs<1> _args;
  _args[1] = Transparency /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_Type(Office_2k::MsoFillType* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoFillType __fastcall
FillFormatDispT<T>::get_Type(void)
{
  Office_2k::MsoFillType Type;
  this->get_Type((Office_2k::MsoFillType*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(113));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
FillFormatDispT<T>::get_Visible(void)
{
  Office_2k::MsoTriState Visible;
  this->get_Visible((Office_2k::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::set_Visible(Office_2k::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(113));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  LineFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149347F-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
LineFormatDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
LineFormatDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
LineFormatDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_BackColor(Powerpoint_2k::ColorFormatPtr* BackColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::ColorFormat**)BackColor /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::ColorFormatPtr __fastcall
LineFormatDispT<T>::get_BackColor(void)
{
  Powerpoint_2k::ColorFormatPtr BackColor;
  this->get_BackColor((Powerpoint_2k::ColorFormatPtr*)&BackColor);
  return BackColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_BackColor(Powerpoint_2k::ColorFormatPtr BackColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Powerpoint_2k::ColorFormat*)BackColor /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_BeginArrowheadLength(Office_2k::MsoArrowheadLength* BeginArrowheadLength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginArrowheadLength"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)BeginArrowheadLength /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoArrowheadLength __fastcall
LineFormatDispT<T>::get_BeginArrowheadLength(void)
{
  Office_2k::MsoArrowheadLength BeginArrowheadLength;
  this->get_BeginArrowheadLength((Office_2k::MsoArrowheadLength*)&BeginArrowheadLength);
  return BeginArrowheadLength;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_BeginArrowheadLength(Office_2k::MsoArrowheadLength BeginArrowheadLength/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginArrowheadLength"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = (int)BeginArrowheadLength /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_BeginArrowheadStyle(Office_2k::MsoArrowheadStyle* BeginArrowheadStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginArrowheadStyle"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)BeginArrowheadStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoArrowheadStyle __fastcall
LineFormatDispT<T>::get_BeginArrowheadStyle(void)
{
  Office_2k::MsoArrowheadStyle BeginArrowheadStyle;
  this->get_BeginArrowheadStyle((Office_2k::MsoArrowheadStyle*)&BeginArrowheadStyle);
  return BeginArrowheadStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_BeginArrowheadStyle(Office_2k::MsoArrowheadStyle BeginArrowheadStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginArrowheadStyle"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = (int)BeginArrowheadStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_BeginArrowheadWidth(Office_2k::MsoArrowheadWidth* BeginArrowheadWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginArrowheadWidth"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)BeginArrowheadWidth /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoArrowheadWidth __fastcall
LineFormatDispT<T>::get_BeginArrowheadWidth(void)
{
  Office_2k::MsoArrowheadWidth BeginArrowheadWidth;
  this->get_BeginArrowheadWidth((Office_2k::MsoArrowheadWidth*)&BeginArrowheadWidth);
  return BeginArrowheadWidth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_BeginArrowheadWidth(Office_2k::MsoArrowheadWidth BeginArrowheadWidth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginArrowheadWidth"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = (int)BeginArrowheadWidth /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_DashStyle(Office_2k::MsoLineDashStyle* DashStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DashStyle"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)DashStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoLineDashStyle __fastcall
LineFormatDispT<T>::get_DashStyle(void)
{
  Office_2k::MsoLineDashStyle DashStyle;
  this->get_DashStyle((Office_2k::MsoLineDashStyle*)&DashStyle);
  return DashStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_DashStyle(Office_2k::MsoLineDashStyle DashStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DashStyle"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = (int)DashStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_EndArrowheadLength(Office_2k::MsoArrowheadLength* EndArrowheadLength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndArrowheadLength"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)EndArrowheadLength /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoArrowheadLength __fastcall
LineFormatDispT<T>::get_EndArrowheadLength(void)
{
  Office_2k::MsoArrowheadLength EndArrowheadLength;
  this->get_EndArrowheadLength((Office_2k::MsoArrowheadLength*)&EndArrowheadLength);
  return EndArrowheadLength;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_EndArrowheadLength(Office_2k::MsoArrowheadLength EndArrowheadLength/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndArrowheadLength"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = (int)EndArrowheadLength /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_EndArrowheadStyle(Office_2k::MsoArrowheadStyle* EndArrowheadStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndArrowheadStyle"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)EndArrowheadStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoArrowheadStyle __fastcall
LineFormatDispT<T>::get_EndArrowheadStyle(void)
{
  Office_2k::MsoArrowheadStyle EndArrowheadStyle;
  this->get_EndArrowheadStyle((Office_2k::MsoArrowheadStyle*)&EndArrowheadStyle);
  return EndArrowheadStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_EndArrowheadStyle(Office_2k::MsoArrowheadStyle EndArrowheadStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndArrowheadStyle"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = (int)EndArrowheadStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_EndArrowheadWidth(Office_2k::MsoArrowheadWidth* EndArrowheadWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndArrowheadWidth"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)EndArrowheadWidth /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoArrowheadWidth __fastcall
LineFormatDispT<T>::get_EndArrowheadWidth(void)
{
  Office_2k::MsoArrowheadWidth EndArrowheadWidth;
  this->get_EndArrowheadWidth((Office_2k::MsoArrowheadWidth*)&EndArrowheadWidth);
  return EndArrowheadWidth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_EndArrowheadWidth(Office_2k::MsoArrowheadWidth EndArrowheadWidth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndArrowheadWidth"), DISPID(107));
  TAutoArgs<1> _args;
  _args[1] = (int)EndArrowheadWidth /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_ForeColor(Powerpoint_2k::ColorFormatPtr* ForeColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::ColorFormat**)ForeColor /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::ColorFormatPtr __fastcall
LineFormatDispT<T>::get_ForeColor(void)
{
  Powerpoint_2k::ColorFormatPtr ForeColor;
  this->get_ForeColor((Powerpoint_2k::ColorFormatPtr*)&ForeColor);
  return ForeColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_ForeColor(Powerpoint_2k::ColorFormatPtr ForeColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(108));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Powerpoint_2k::ColorFormat*)ForeColor /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_Pattern(Office_2k::MsoPatternType* Pattern/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Pattern"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Pattern /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoPatternType __fastcall
LineFormatDispT<T>::get_Pattern(void)
{
  Office_2k::MsoPatternType Pattern;
  this->get_Pattern((Office_2k::MsoPatternType*)&Pattern);
  return Pattern;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_Pattern(Office_2k::MsoPatternType Pattern/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Pattern"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = (int)Pattern /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_Style(Office_2k::MsoLineStyle* Style/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Style"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Style /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoLineStyle __fastcall
LineFormatDispT<T>::get_Style(void)
{
  Office_2k::MsoLineStyle Style;
  this->get_Style((Office_2k::MsoLineStyle*)&Style);
  return Style;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_Style(Office_2k::MsoLineStyle Style/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Style"), DISPID(110));
  TAutoArgs<1> _args;
  _args[1] = (int)Style /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_Transparency(float* Transparency/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Transparency"), DISPID(111));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Transparency /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
LineFormatDispT<T>::get_Transparency(void)
{
  float Transparency;
  this->get_Transparency((float*)&Transparency);
  return Transparency;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_Transparency(float Transparency/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Transparency"), DISPID(111));
  TAutoArgs<1> _args;
  _args[1] = Transparency /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
LineFormatDispT<T>::get_Visible(void)
{
  Office_2k::MsoTriState Visible;
  this->get_Visible((Office_2k::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_Visible(Office_2k::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(112));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_Weight(float* Weight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Weight"), DISPID(113));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Weight /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
LineFormatDispT<T>::get_Weight(void)
{
  float Weight;
  this->get_Weight((float*)&Weight);
  return Weight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_Weight(float Weight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Weight"), DISPID(113));
  TAutoArgs<1> _args;
  _args[1] = Weight /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ShadowFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493480-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ShadowFormatDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ShadowFormatDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ShadowFormatDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::IncrementOffsetX(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncrementOffsetX"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::IncrementOffsetY(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncrementOffsetY"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::get_ForeColor(Powerpoint_2k::ColorFormatPtr* ForeColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::ColorFormat**)ForeColor /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::ColorFormatPtr __fastcall
ShadowFormatDispT<T>::get_ForeColor(void)
{
  Powerpoint_2k::ColorFormatPtr ForeColor;
  this->get_ForeColor((Powerpoint_2k::ColorFormatPtr*)&ForeColor);
  return ForeColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::set_ForeColor(Powerpoint_2k::ColorFormatPtr ForeColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Powerpoint_2k::ColorFormat*)ForeColor /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::get_Obscured(Office_2k::MsoTriState* Obscured/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Obscured"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Obscured /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
ShadowFormatDispT<T>::get_Obscured(void)
{
  Office_2k::MsoTriState Obscured;
  this->get_Obscured((Office_2k::MsoTriState*)&Obscured);
  return Obscured;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::set_Obscured(Office_2k::MsoTriState Obscured/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Obscured"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = (int)Obscured /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::get_OffsetX(float* OffsetX/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OffsetX"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OffsetX /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShadowFormatDispT<T>::get_OffsetX(void)
{
  float OffsetX;
  this->get_OffsetX((float*)&OffsetX);
  return OffsetX;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::set_OffsetX(float OffsetX/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OffsetX"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = OffsetX /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::get_OffsetY(float* OffsetY/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OffsetY"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OffsetY /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShadowFormatDispT<T>::get_OffsetY(void)
{
  float OffsetY;
  this->get_OffsetY((float*)&OffsetY);
  return OffsetY;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::set_OffsetY(float OffsetY/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OffsetY"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = OffsetY /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::get_Transparency(float* Transparency/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Transparency"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Transparency /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShadowFormatDispT<T>::get_Transparency(void)
{
  float Transparency;
  this->get_Transparency((float*)&Transparency);
  return Transparency;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::set_Transparency(float Transparency/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Transparency"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = Transparency /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::get_Type(Office_2k::MsoShadowType* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoShadowType __fastcall
ShadowFormatDispT<T>::get_Type(void)
{
  Office_2k::MsoShadowType Type;
  this->get_Type((Office_2k::MsoShadowType*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::set_Type(Office_2k::MsoShadowType Type/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
ShadowFormatDispT<T>::get_Visible(void)
{
  Office_2k::MsoTriState Visible;
  this->get_Visible((Office_2k::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::set_Visible(Office_2k::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ConnectorFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493481-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ConnectorFormatDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ConnectorFormatDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ConnectorFormatDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::BeginConnect(Powerpoint_2k::ShapePtr ConnectedShape/*[in]*/, 
                                      int ConnectionSite/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginConnect"), DISPID(10));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Powerpoint_2k::Shape*)ConnectedShape /*[VT_USERDEFINED:1]*/;
  _args[2] = ConnectionSite /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::BeginDisconnect()
{
  _TDispID _dispid(*this, OLETEXT("BeginDisconnect"), DISPID(11));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::EndConnect(Powerpoint_2k::ShapePtr ConnectedShape/*[in]*/, 
                                    int ConnectionSite/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndConnect"), DISPID(12));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Powerpoint_2k::Shape*)ConnectedShape /*[VT_USERDEFINED:1]*/;
  _args[2] = ConnectionSite /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::EndDisconnect()
{
  _TDispID _dispid(*this, OLETEXT("EndDisconnect"), DISPID(13));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::get_BeginConnected(Office_2k::MsoTriState* BeginConnected/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginConnected"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)BeginConnected /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
ConnectorFormatDispT<T>::get_BeginConnected(void)
{
  Office_2k::MsoTriState BeginConnected;
  this->get_BeginConnected((Office_2k::MsoTriState*)&BeginConnected);
  return BeginConnected;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::get_BeginConnectedShape(Powerpoint_2k::ShapePtr* BeginConnectedShape/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginConnectedShape"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Shape**)BeginConnectedShape /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::ShapePtr __fastcall
ConnectorFormatDispT<T>::get_BeginConnectedShape(void)
{
  Powerpoint_2k::ShapePtr BeginConnectedShape;
  this->get_BeginConnectedShape((Powerpoint_2k::ShapePtr*)&BeginConnectedShape);
  return BeginConnectedShape;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::get_BeginConnectionSite(int* BeginConnectionSite/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginConnectionSite"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BeginConnectionSite /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ConnectorFormatDispT<T>::get_BeginConnectionSite(void)
{
  int BeginConnectionSite;
  this->get_BeginConnectionSite((int*)&BeginConnectionSite);
  return BeginConnectionSite;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::get_EndConnected(Office_2k::MsoTriState* EndConnected/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndConnected"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)EndConnected /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
ConnectorFormatDispT<T>::get_EndConnected(void)
{
  Office_2k::MsoTriState EndConnected;
  this->get_EndConnected((Office_2k::MsoTriState*)&EndConnected);
  return EndConnected;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::get_EndConnectedShape(Powerpoint_2k::ShapePtr* EndConnectedShape/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndConnectedShape"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Shape**)EndConnectedShape /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::ShapePtr __fastcall
ConnectorFormatDispT<T>::get_EndConnectedShape(void)
{
  Powerpoint_2k::ShapePtr EndConnectedShape;
  this->get_EndConnectedShape((Powerpoint_2k::ShapePtr*)&EndConnectedShape);
  return EndConnectedShape;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::get_EndConnectionSite(int* EndConnectionSite/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndConnectionSite"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(EndConnectionSite /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ConnectorFormatDispT<T>::get_EndConnectionSite(void)
{
  int EndConnectionSite;
  this->get_EndConnectionSite((int*)&EndConnectionSite);
  return EndConnectionSite;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::get_Type(Office_2k::MsoConnectorType* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoConnectorType __fastcall
ConnectorFormatDispT<T>::get_Type(void)
{
  Office_2k::MsoConnectorType Type;
  this->get_Type((Office_2k::MsoConnectorType*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::set_Type(Office_2k::MsoConnectorType Type/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  TextEffectFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493482-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
TextEffectFormatDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
TextEffectFormatDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
TextEffectFormatDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::ToggleVerticalText()
{
  _TDispID _dispid(*this, OLETEXT("ToggleVerticalText"), DISPID(10));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_Alignment(Office_2k::MsoTextEffectAlignment* Alignment/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Alignment"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Alignment /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTextEffectAlignment __fastcall
TextEffectFormatDispT<T>::get_Alignment(void)
{
  Office_2k::MsoTextEffectAlignment Alignment;
  this->get_Alignment((Office_2k::MsoTextEffectAlignment*)&Alignment);
  return Alignment;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::set_Alignment(Office_2k::MsoTextEffectAlignment Alignment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Alignment"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = (int)Alignment /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_FontBold(Office_2k::MsoTriState* FontBold/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontBold"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)FontBold /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
TextEffectFormatDispT<T>::get_FontBold(void)
{
  Office_2k::MsoTriState FontBold;
  this->get_FontBold((Office_2k::MsoTriState*)&FontBold);
  return FontBold;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::set_FontBold(Office_2k::MsoTriState FontBold/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontBold"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = (int)FontBold /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_FontItalic(Office_2k::MsoTriState* FontItalic/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontItalic"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)FontItalic /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
TextEffectFormatDispT<T>::get_FontItalic(void)
{
  Office_2k::MsoTriState FontItalic;
  this->get_FontItalic((Office_2k::MsoTriState*)&FontItalic);
  return FontItalic;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::set_FontItalic(Office_2k::MsoTriState FontItalic/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontItalic"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = (int)FontItalic /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_FontName(BSTR* FontName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontName"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
TextEffectFormatDispT<T>::get_FontName(void)
{
  BSTR FontName;
  this->get_FontName((BSTR*)&FontName);
  return FontName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::set_FontName(BSTR FontName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontName"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = FontName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_FontSize(float* FontSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontSize"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontSize /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
TextEffectFormatDispT<T>::get_FontSize(void)
{
  float FontSize;
  this->get_FontSize((float*)&FontSize);
  return FontSize;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::set_FontSize(float FontSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontSize"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = FontSize /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_KernedPairs(Office_2k::MsoTriState* KernedPairs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KernedPairs"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)KernedPairs /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
TextEffectFormatDispT<T>::get_KernedPairs(void)
{
  Office_2k::MsoTriState KernedPairs;
  this->get_KernedPairs((Office_2k::MsoTriState*)&KernedPairs);
  return KernedPairs;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::set_KernedPairs(Office_2k::MsoTriState KernedPairs/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KernedPairs"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = (int)KernedPairs /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_NormalizedHeight(Office_2k::MsoTriState* NormalizedHeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NormalizedHeight"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)NormalizedHeight /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
TextEffectFormatDispT<T>::get_NormalizedHeight(void)
{
  Office_2k::MsoTriState NormalizedHeight;
  this->get_NormalizedHeight((Office_2k::MsoTriState*)&NormalizedHeight);
  return NormalizedHeight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::set_NormalizedHeight(Office_2k::MsoTriState NormalizedHeight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NormalizedHeight"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = (int)NormalizedHeight /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_PresetShape(Office_2k::MsoPresetTextEffectShape* PresetShape/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetShape"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PresetShape /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoPresetTextEffectShape __fastcall
TextEffectFormatDispT<T>::get_PresetShape(void)
{
  Office_2k::MsoPresetTextEffectShape PresetShape;
  this->get_PresetShape((Office_2k::MsoPresetTextEffectShape*)&PresetShape);
  return PresetShape;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::set_PresetShape(Office_2k::MsoPresetTextEffectShape PresetShape/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetShape"), DISPID(107));
  TAutoArgs<1> _args;
  _args[1] = (int)PresetShape /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_PresetTextEffect(Office_2k::MsoPresetTextEffect* Preset/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetTextEffect"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Preset /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoPresetTextEffect __fastcall
TextEffectFormatDispT<T>::get_PresetTextEffect(void)
{
  Office_2k::MsoPresetTextEffect Preset;
  this->get_PresetTextEffect((Office_2k::MsoPresetTextEffect*)&Preset);
  return Preset;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::set_PresetTextEffect(Office_2k::MsoPresetTextEffect Preset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetTextEffect"), DISPID(108));
  TAutoArgs<1> _args;
  _args[1] = (int)Preset /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_RotatedChars(Office_2k::MsoTriState* RotatedChars/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RotatedChars"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)RotatedChars /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
TextEffectFormatDispT<T>::get_RotatedChars(void)
{
  Office_2k::MsoTriState RotatedChars;
  this->get_RotatedChars((Office_2k::MsoTriState*)&RotatedChars);
  return RotatedChars;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::set_RotatedChars(Office_2k::MsoTriState RotatedChars/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RotatedChars"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = (int)RotatedChars /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_Text(BSTR* Text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Text /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
TextEffectFormatDispT<T>::get_Text(void)
{
  BSTR Text;
  this->get_Text((BSTR*)&Text);
  return Text;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::set_Text(BSTR Text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(110));
  TAutoArgs<1> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_Tracking(float* Tracking/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tracking"), DISPID(111));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Tracking /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
TextEffectFormatDispT<T>::get_Tracking(void)
{
  float Tracking;
  this->get_Tracking((float*)&Tracking);
  return Tracking;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::set_Tracking(float Tracking/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tracking"), DISPID(111));
  TAutoArgs<1> _args;
  _args[1] = Tracking /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ThreeDFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493483-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ThreeDFormatDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ThreeDFormatDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ThreeDFormatDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::IncrementRotationX(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncrementRotationX"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::IncrementRotationY(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncrementRotationY"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::ResetRotation()
{
  _TDispID _dispid(*this, OLETEXT("ResetRotation"), DISPID(12));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::SetThreeDFormat(Office_2k::MsoPresetThreeDFormat PresetThreeDFormat/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetThreeDFormat"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = (int)PresetThreeDFormat /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::SetExtrusionDirection(Office_2k::MsoPresetExtrusionDirection PresetExtrusionDirection/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetExtrusionDirection"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = (int)PresetExtrusionDirection /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_Depth(float* Depth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Depth"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Depth /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ThreeDFormatDispT<T>::get_Depth(void)
{
  float Depth;
  this->get_Depth((float*)&Depth);
  return Depth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::set_Depth(float Depth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Depth"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = Depth /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_ExtrusionColor(Powerpoint_2k::ColorFormatPtr* ExtrusionColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExtrusionColor"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::ColorFormat**)ExtrusionColor /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::ColorFormatPtr __fastcall
ThreeDFormatDispT<T>::get_ExtrusionColor(void)
{
  Powerpoint_2k::ColorFormatPtr ExtrusionColor;
  this->get_ExtrusionColor((Powerpoint_2k::ColorFormatPtr*)&ExtrusionColor);
  return ExtrusionColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_ExtrusionColorType(Office_2k::MsoExtrusionColorType* ExtrusionColorType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExtrusionColorType"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ExtrusionColorType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoExtrusionColorType __fastcall
ThreeDFormatDispT<T>::get_ExtrusionColorType(void)
{
  Office_2k::MsoExtrusionColorType ExtrusionColorType;
  this->get_ExtrusionColorType((Office_2k::MsoExtrusionColorType*)&ExtrusionColorType);
  return ExtrusionColorType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::set_ExtrusionColorType(Office_2k::MsoExtrusionColorType ExtrusionColorType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExtrusionColorType"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = (int)ExtrusionColorType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_Perspective(Office_2k::MsoTriState* Perspective/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Perspective"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Perspective /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
ThreeDFormatDispT<T>::get_Perspective(void)
{
  Office_2k::MsoTriState Perspective;
  this->get_Perspective((Office_2k::MsoTriState*)&Perspective);
  return Perspective;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::set_Perspective(Office_2k::MsoTriState Perspective/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Perspective"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = (int)Perspective /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_PresetExtrusionDirection(Office_2k::MsoPresetExtrusionDirection* PresetExtrusionDirection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetExtrusionDirection"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PresetExtrusionDirection /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoPresetExtrusionDirection __fastcall
ThreeDFormatDispT<T>::get_PresetExtrusionDirection(void)
{
  Office_2k::MsoPresetExtrusionDirection PresetExtrusionDirection;
  this->get_PresetExtrusionDirection((Office_2k::MsoPresetExtrusionDirection*)&PresetExtrusionDirection);
  return PresetExtrusionDirection;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_PresetLightingDirection(Office_2k::MsoPresetLightingDirection* PresetLightingDirection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetLightingDirection"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PresetLightingDirection /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoPresetLightingDirection __fastcall
ThreeDFormatDispT<T>::get_PresetLightingDirection(void)
{
  Office_2k::MsoPresetLightingDirection PresetLightingDirection;
  this->get_PresetLightingDirection((Office_2k::MsoPresetLightingDirection*)&PresetLightingDirection);
  return PresetLightingDirection;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::set_PresetLightingDirection(Office_2k::MsoPresetLightingDirection PresetLightingDirection/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetLightingDirection"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = (int)PresetLightingDirection /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_PresetLightingSoftness(Office_2k::MsoPresetLightingSoftness* PresetLightingSoftness/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetLightingSoftness"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PresetLightingSoftness /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoPresetLightingSoftness __fastcall
ThreeDFormatDispT<T>::get_PresetLightingSoftness(void)
{
  Office_2k::MsoPresetLightingSoftness PresetLightingSoftness;
  this->get_PresetLightingSoftness((Office_2k::MsoPresetLightingSoftness*)&PresetLightingSoftness);
  return PresetLightingSoftness;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::set_PresetLightingSoftness(Office_2k::MsoPresetLightingSoftness PresetLightingSoftness/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetLightingSoftness"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = (int)PresetLightingSoftness /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_PresetMaterial(Office_2k::MsoPresetMaterial* PresetMaterial/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetMaterial"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PresetMaterial /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoPresetMaterial __fastcall
ThreeDFormatDispT<T>::get_PresetMaterial(void)
{
  Office_2k::MsoPresetMaterial PresetMaterial;
  this->get_PresetMaterial((Office_2k::MsoPresetMaterial*)&PresetMaterial);
  return PresetMaterial;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::set_PresetMaterial(Office_2k::MsoPresetMaterial PresetMaterial/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetMaterial"), DISPID(107));
  TAutoArgs<1> _args;
  _args[1] = (int)PresetMaterial /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_PresetThreeDFormat(Office_2k::MsoPresetThreeDFormat* PresetThreeDFormat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetThreeDFormat"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PresetThreeDFormat /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoPresetThreeDFormat __fastcall
ThreeDFormatDispT<T>::get_PresetThreeDFormat(void)
{
  Office_2k::MsoPresetThreeDFormat PresetThreeDFormat;
  this->get_PresetThreeDFormat((Office_2k::MsoPresetThreeDFormat*)&PresetThreeDFormat);
  return PresetThreeDFormat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_RotationX(float* RotationX/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RotationX"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RotationX /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ThreeDFormatDispT<T>::get_RotationX(void)
{
  float RotationX;
  this->get_RotationX((float*)&RotationX);
  return RotationX;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::set_RotationX(float RotationX/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RotationX"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = RotationX /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_RotationY(float* RotationY/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RotationY"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RotationY /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ThreeDFormatDispT<T>::get_RotationY(void)
{
  float RotationY;
  this->get_RotationY((float*)&RotationY);
  return RotationY;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::set_RotationY(float RotationY/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RotationY"), DISPID(110));
  TAutoArgs<1> _args;
  _args[1] = RotationY /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(111));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
ThreeDFormatDispT<T>::get_Visible(void)
{
  Office_2k::MsoTriState Visible;
  this->get_Visible((Office_2k::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::set_Visible(Office_2k::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(111));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  TextFrame
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493484-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
TextFrameDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
TextFrameDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
TextFrameDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::get_MarginBottom(float* MarginBottom/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarginBottom"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(MarginBottom /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
TextFrameDispT<T>::get_MarginBottom(void)
{
  float MarginBottom;
  this->get_MarginBottom((float*)&MarginBottom);
  return MarginBottom;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::set_MarginBottom(float MarginBottom/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarginBottom"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = MarginBottom /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::get_MarginLeft(float* MarginLeft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarginLeft"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(MarginLeft /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
TextFrameDispT<T>::get_MarginLeft(void)
{
  float MarginLeft;
  this->get_MarginLeft((float*)&MarginLeft);
  return MarginLeft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::set_MarginLeft(float MarginLeft/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarginLeft"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = MarginLeft /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::get_MarginRight(float* MarginRight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarginRight"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(MarginRight /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
TextFrameDispT<T>::get_MarginRight(void)
{
  float MarginRight;
  this->get_MarginRight((float*)&MarginRight);
  return MarginRight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::set_MarginRight(float MarginRight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarginRight"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = MarginRight /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::get_MarginTop(float* MarginTop/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarginTop"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(MarginTop /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
TextFrameDispT<T>::get_MarginTop(void)
{
  float MarginTop;
  this->get_MarginTop((float*)&MarginTop);
  return MarginTop;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::set_MarginTop(float MarginTop/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarginTop"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = MarginTop /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::get_Orientation(Office_2k::MsoTextOrientation* Orientation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Orientation"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Orientation /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTextOrientation __fastcall
TextFrameDispT<T>::get_Orientation(void)
{
  Office_2k::MsoTextOrientation Orientation;
  this->get_Orientation((Office_2k::MsoTextOrientation*)&Orientation);
  return Orientation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::set_Orientation(Office_2k::MsoTextOrientation Orientation/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Orientation"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = (int)Orientation /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::get_HasText(Office_2k::MsoTriState* HasText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasText"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)HasText /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
TextFrameDispT<T>::get_HasText(void)
{
  Office_2k::MsoTriState HasText;
  this->get_HasText((Office_2k::MsoTriState*)&HasText);
  return HasText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::get_TextRange(Powerpoint_2k::TextRangePtr* TextRange/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextRange"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::TextRange**)TextRange /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::TextRangePtr __fastcall
TextFrameDispT<T>::get_TextRange(void)
{
  Powerpoint_2k::TextRangePtr TextRange;
  this->get_TextRange((Powerpoint_2k::TextRangePtr*)&TextRange);
  return TextRange;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::get_Ruler(Powerpoint_2k::RulerPtr* Ruler/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Ruler"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Ruler**)Ruler /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::RulerPtr __fastcall
TextFrameDispT<T>::get_Ruler(void)
{
  Powerpoint_2k::RulerPtr Ruler;
  this->get_Ruler((Powerpoint_2k::RulerPtr*)&Ruler);
  return Ruler;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::get_HorizontalAnchor(Office_2k::MsoHorizontalAnchor* HorizontalAnchor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HorizontalAnchor"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)HorizontalAnchor /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoHorizontalAnchor __fastcall
TextFrameDispT<T>::get_HorizontalAnchor(void)
{
  Office_2k::MsoHorizontalAnchor HorizontalAnchor;
  this->get_HorizontalAnchor((Office_2k::MsoHorizontalAnchor*)&HorizontalAnchor);
  return HorizontalAnchor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::set_HorizontalAnchor(Office_2k::MsoHorizontalAnchor HorizontalAnchor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HorizontalAnchor"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = (int)HorizontalAnchor /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::get_VerticalAnchor(Office_2k::MsoVerticalAnchor* VerticalAnchor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VerticalAnchor"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)VerticalAnchor /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoVerticalAnchor __fastcall
TextFrameDispT<T>::get_VerticalAnchor(void)
{
  Office_2k::MsoVerticalAnchor VerticalAnchor;
  this->get_VerticalAnchor((Office_2k::MsoVerticalAnchor*)&VerticalAnchor);
  return VerticalAnchor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::set_VerticalAnchor(Office_2k::MsoVerticalAnchor VerticalAnchor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("VerticalAnchor"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = (int)VerticalAnchor /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::get_AutoSize(Powerpoint_2k::PpAutoSize* AutoSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoSize"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AutoSize /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpAutoSize __fastcall
TextFrameDispT<T>::get_AutoSize(void)
{
  Powerpoint_2k::PpAutoSize AutoSize;
  this->get_AutoSize((Powerpoint_2k::PpAutoSize*)&AutoSize);
  return AutoSize;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::set_AutoSize(Powerpoint_2k::PpAutoSize AutoSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoSize"), DISPID(2008));
  TAutoArgs<1> _args;
  _args[1] = (int)AutoSize /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::get_WordWrap(Office_2k::MsoTriState* WordWrap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WordWrap"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)WordWrap /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
TextFrameDispT<T>::get_WordWrap(void)
{
  Office_2k::MsoTriState WordWrap;
  this->get_WordWrap((Office_2k::MsoTriState*)&WordWrap);
  return WordWrap;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::set_WordWrap(Office_2k::MsoTriState WordWrap/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WordWrap"), DISPID(2009));
  TAutoArgs<1> _args;
  _args[1] = (int)WordWrap /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::DeleteText()
{
  _TDispID _dispid(*this, OLETEXT("DeleteText"), DISPID(2010));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  CalloutFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493485-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CalloutFormatDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
CalloutFormatDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CalloutFormatDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::AutomaticLength()
{
  _TDispID _dispid(*this, OLETEXT("AutomaticLength"), DISPID(10));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::CustomDrop(float Drop/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CustomDrop"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Drop /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::CustomLength(float Length/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CustomLength"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = Length /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::PresetDrop(Office_2k::MsoCalloutDropType DropType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetDrop"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = (int)DropType /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_Accent(Office_2k::MsoTriState* Accent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Accent"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Accent /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
CalloutFormatDispT<T>::get_Accent(void)
{
  Office_2k::MsoTriState Accent;
  this->get_Accent((Office_2k::MsoTriState*)&Accent);
  return Accent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::set_Accent(Office_2k::MsoTriState Accent/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Accent"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = (int)Accent /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_Angle(Office_2k::MsoCalloutAngleType* Angle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Angle"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Angle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoCalloutAngleType __fastcall
CalloutFormatDispT<T>::get_Angle(void)
{
  Office_2k::MsoCalloutAngleType Angle;
  this->get_Angle((Office_2k::MsoCalloutAngleType*)&Angle);
  return Angle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::set_Angle(Office_2k::MsoCalloutAngleType Angle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Angle"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = (int)Angle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_AutoAttach(Office_2k::MsoTriState* AutoAttach/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoAttach"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AutoAttach /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
CalloutFormatDispT<T>::get_AutoAttach(void)
{
  Office_2k::MsoTriState AutoAttach;
  this->get_AutoAttach((Office_2k::MsoTriState*)&AutoAttach);
  return AutoAttach;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::set_AutoAttach(Office_2k::MsoTriState AutoAttach/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoAttach"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = (int)AutoAttach /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_AutoLength(Office_2k::MsoTriState* AutoLength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoLength"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AutoLength /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
CalloutFormatDispT<T>::get_AutoLength(void)
{
  Office_2k::MsoTriState AutoLength;
  this->get_AutoLength((Office_2k::MsoTriState*)&AutoLength);
  return AutoLength;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_Border(Office_2k::MsoTriState* Border/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Border"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Border /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
CalloutFormatDispT<T>::get_Border(void)
{
  Office_2k::MsoTriState Border;
  this->get_Border((Office_2k::MsoTriState*)&Border);
  return Border;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::set_Border(Office_2k::MsoTriState Border/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Border"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = (int)Border /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_Drop(float* Drop/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Drop"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Drop /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
CalloutFormatDispT<T>::get_Drop(void)
{
  float Drop;
  this->get_Drop((float*)&Drop);
  return Drop;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_DropType(Office_2k::MsoCalloutDropType* DropType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DropType"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)DropType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoCalloutDropType __fastcall
CalloutFormatDispT<T>::get_DropType(void)
{
  Office_2k::MsoCalloutDropType DropType;
  this->get_DropType((Office_2k::MsoCalloutDropType*)&DropType);
  return DropType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_Gap(float* Gap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Gap"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Gap /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
CalloutFormatDispT<T>::get_Gap(void)
{
  float Gap;
  this->get_Gap((float*)&Gap);
  return Gap;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::set_Gap(float Gap/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Gap"), DISPID(107));
  TAutoArgs<1> _args;
  _args[1] = Gap /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_Length(float* Length/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Length"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Length /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
CalloutFormatDispT<T>::get_Length(void)
{
  float Length;
  this->get_Length((float*)&Length);
  return Length;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_Type(Office_2k::MsoCalloutType* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoCalloutType __fastcall
CalloutFormatDispT<T>::get_Type(void)
{
  Office_2k::MsoCalloutType Type;
  this->get_Type((Office_2k::MsoCalloutType*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::set_Type(Office_2k::MsoCalloutType Type/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ShapeNodes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493486-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodesDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ShapeNodesDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodesDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ShapeNodesDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodesDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ShapeNodesDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodesDispT<T>::get_Count(int* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ShapeNodesDispT<T>::get_Count(void)
{
  int Count;
  this->get_Count((int*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodesDispT<T>::Item(TVariantInParam index/*[in]*/, 
                         Powerpoint_2k::ShapeNodePtr* Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::ShapeNode**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::ShapeNodePtr __fastcall
ShapeNodesDispT<T>::Item(TVariantInParam index/*[in]*/)
{
  Powerpoint_2k::ShapeNodePtr Item;
  this->Item(index, (Powerpoint_2k::ShapeNodePtr*)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodesDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
ShapeNodesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodesDispT<T>::Delete(int index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodesDispT<T>::Insert(int index/*[in]*/, Office_2k::MsoSegmentType SegmentType/*[in]*/, 
                           Office_2k::MsoEditingType EditingType/*[in]*/, float X1/*[in]*/, 
                           float Y1/*[in]*/, float X2/*[in,def,opt]*/, float Y2/*[in,def,opt]*/, 
                           float X3/*[in,def,opt]*/, float Y3/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Insert"), DISPID(12));
  TAutoArgs<9> _args;
  _args[1] = index /*[VT_INT:0]*/;
  _args[2] = (int)SegmentType /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)EditingType /*[VT_USERDEFINED:0]*/;
  _args[4] = X1 /*[VT_R4:0]*/;
  _args[5] = Y1 /*[VT_R4:0]*/;
  _args[6] = X2 /*[VT_R4:0]*/;
  _args[7] = Y2 /*[VT_R4:0]*/;
  _args[8] = X3 /*[VT_R4:0]*/;
  _args[9] = Y3 /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodesDispT<T>::SetEditingType(int index/*[in]*/, Office_2k::MsoEditingType EditingType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetEditingType"), DISPID(13));
  TAutoArgs<2> _args;
  _args[1] = index /*[VT_INT:0]*/;
  _args[2] = (int)EditingType /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodesDispT<T>::SetPosition(int index/*[in]*/, float X1/*[in]*/, float Y1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPosition"), DISPID(14));
  TAutoArgs<3> _args;
  _args[1] = index /*[VT_INT:0]*/;
  _args[2] = X1 /*[VT_R4:0]*/;
  _args[3] = Y1 /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodesDispT<T>::SetSegmentType(int index/*[in]*/, Office_2k::MsoSegmentType SegmentType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetSegmentType"), DISPID(15));
  TAutoArgs<2> _args;
  _args[1] = index /*[VT_INT:0]*/;
  _args[2] = (int)SegmentType /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ShapeNode
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493487-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodeDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ShapeNodeDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodeDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ShapeNodeDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodeDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ShapeNodeDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodeDispT<T>::get_EditingType(Office_2k::MsoEditingType* EditingType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EditingType"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)EditingType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoEditingType __fastcall
ShapeNodeDispT<T>::get_EditingType(void)
{
  Office_2k::MsoEditingType EditingType;
  this->get_EditingType((Office_2k::MsoEditingType*)&EditingType);
  return EditingType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodeDispT<T>::get_Points(TVariant* Points/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Points"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Points /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
ShapeNodeDispT<T>::get_Points(void)
{
  TVariant Points;
  this->get_Points((TVariant*)&Points);
  return Points;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodeDispT<T>::get_SegmentType(Office_2k::MsoSegmentType* SegmentType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SegmentType"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)SegmentType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoSegmentType __fastcall
ShapeNodeDispT<T>::get_SegmentType(void)
{
  Office_2k::MsoSegmentType SegmentType;
  this->get_SegmentType((Office_2k::MsoSegmentType*)&SegmentType);
  return SegmentType;
}

// *********************************************************************//
// DispIntf:  OLEFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493488-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OLEFormatDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
OLEFormatDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OLEFormatDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
OLEFormatDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OLEFormatDispT<T>::get_ObjectVerbs(Powerpoint_2k::ObjectVerbsPtr* ObjectVerbs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObjectVerbs"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::ObjectVerbs**)ObjectVerbs /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::ObjectVerbsPtr __fastcall
OLEFormatDispT<T>::get_ObjectVerbs(void)
{
  Powerpoint_2k::ObjectVerbsPtr ObjectVerbs;
  this->get_ObjectVerbs((Powerpoint_2k::ObjectVerbsPtr*)&ObjectVerbs);
  return ObjectVerbs;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OLEFormatDispT<T>::get_Object(LPDISPATCH* Object/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Object"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Object /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
OLEFormatDispT<T>::get_Object(void)
{
  LPDISPATCH Object;
  this->get_Object((LPDISPATCH*)&Object);
  return Object;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OLEFormatDispT<T>::get_ProgID(BSTR* ProgID/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ProgID"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ProgID /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
OLEFormatDispT<T>::get_ProgID(void)
{
  BSTR ProgID;
  this->get_ProgID((BSTR*)&ProgID);
  return ProgID;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OLEFormatDispT<T>::get_FollowColors(Powerpoint_2k::PpFollowColors* FollowColors/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FollowColors"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)FollowColors /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpFollowColors __fastcall
OLEFormatDispT<T>::get_FollowColors(void)
{
  Powerpoint_2k::PpFollowColors FollowColors;
  this->get_FollowColors((Powerpoint_2k::PpFollowColors*)&FollowColors);
  return FollowColors;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OLEFormatDispT<T>::set_FollowColors(Powerpoint_2k::PpFollowColors FollowColors/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FollowColors"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = (int)FollowColors /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OLEFormatDispT<T>::DoVerb(int index/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("DoVerb"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OLEFormatDispT<T>::Activate()
{
  _TDispID _dispid(*this, OLETEXT("Activate"), DISPID(2008));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  LinkFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493489-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LinkFormatDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
LinkFormatDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LinkFormatDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
LinkFormatDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LinkFormatDispT<T>::get_SourceFullName(BSTR* SourceFullName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SourceFullName"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SourceFullName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
LinkFormatDispT<T>::get_SourceFullName(void)
{
  BSTR SourceFullName;
  this->get_SourceFullName((BSTR*)&SourceFullName);
  return SourceFullName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LinkFormatDispT<T>::set_SourceFullName(BSTR SourceFullName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SourceFullName"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = SourceFullName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LinkFormatDispT<T>::get_AutoUpdate(Powerpoint_2k::PpUpdateOption* AutoUpdate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoUpdate"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AutoUpdate /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpUpdateOption __fastcall
LinkFormatDispT<T>::get_AutoUpdate(void)
{
  Powerpoint_2k::PpUpdateOption AutoUpdate;
  this->get_AutoUpdate((Powerpoint_2k::PpUpdateOption*)&AutoUpdate);
  return AutoUpdate;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LinkFormatDispT<T>::set_AutoUpdate(Powerpoint_2k::PpUpdateOption AutoUpdate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoUpdate"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = (int)AutoUpdate /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LinkFormatDispT<T>::_Update()
{
  _TDispID _dispid(*this, OLETEXT("Update"), DISPID(2005));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  ObjectVerbs
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149348A-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ObjectVerbsDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
ObjectVerbsDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ObjectVerbsDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ObjectVerbsDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ObjectVerbsDispT<T>::Item(int index/*[in]*/, BSTR* Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(Item /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
ObjectVerbsDispT<T>::Item(int index/*[in]*/)
{
  BSTR Item;
  this->Item(index, (BSTR*)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ObjectVerbsDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
ObjectVerbsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ObjectVerbsDispT<T>::_Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
ObjectVerbsDispT<T>::_Index(int index/*[in]*/)
{
  TVariant _Index;
  this->_Index(index, (TVariant*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ObjectVerbsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ObjectVerbsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  AnimationSettings
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149348B-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
AnimationSettingsDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
AnimationSettingsDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::get_DimColor(Powerpoint_2k::ColorFormatPtr* DimColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DimColor"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::ColorFormat**)DimColor /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::ColorFormatPtr __fastcall
AnimationSettingsDispT<T>::get_DimColor(void)
{
  Powerpoint_2k::ColorFormatPtr DimColor;
  this->get_DimColor((Powerpoint_2k::ColorFormatPtr*)&DimColor);
  return DimColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::get_SoundEffect(Powerpoint_2k::SoundEffectPtr* SoundEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SoundEffect"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::SoundEffect**)SoundEffect /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::SoundEffectPtr __fastcall
AnimationSettingsDispT<T>::get_SoundEffect(void)
{
  Powerpoint_2k::SoundEffectPtr SoundEffect;
  this->get_SoundEffect((Powerpoint_2k::SoundEffectPtr*)&SoundEffect);
  return SoundEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::get_EntryEffect(Powerpoint_2k::PpEntryEffect* EntryEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EntryEffect"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)EntryEffect /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpEntryEffect __fastcall
AnimationSettingsDispT<T>::get_EntryEffect(void)
{
  Powerpoint_2k::PpEntryEffect EntryEffect;
  this->get_EntryEffect((Powerpoint_2k::PpEntryEffect*)&EntryEffect);
  return EntryEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::set_EntryEffect(Powerpoint_2k::PpEntryEffect EntryEffect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EntryEffect"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = (int)EntryEffect /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::get_AfterEffect(Powerpoint_2k::PpAfterEffect* AfterEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AfterEffect"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AfterEffect /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpAfterEffect __fastcall
AnimationSettingsDispT<T>::get_AfterEffect(void)
{
  Powerpoint_2k::PpAfterEffect AfterEffect;
  this->get_AfterEffect((Powerpoint_2k::PpAfterEffect*)&AfterEffect);
  return AfterEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::set_AfterEffect(Powerpoint_2k::PpAfterEffect AfterEffect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AfterEffect"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = (int)AfterEffect /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::get_AnimationOrder(int* AnimationOrder/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AnimationOrder"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AnimationOrder /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
AnimationSettingsDispT<T>::get_AnimationOrder(void)
{
  int AnimationOrder;
  this->get_AnimationOrder((int*)&AnimationOrder);
  return AnimationOrder;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::set_AnimationOrder(int AnimationOrder/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AnimationOrder"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = AnimationOrder /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::get_AdvanceMode(Powerpoint_2k::PpAdvanceMode* AdvanceMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvanceMode"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AdvanceMode /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpAdvanceMode __fastcall
AnimationSettingsDispT<T>::get_AdvanceMode(void)
{
  Powerpoint_2k::PpAdvanceMode AdvanceMode;
  this->get_AdvanceMode((Powerpoint_2k::PpAdvanceMode*)&AdvanceMode);
  return AdvanceMode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::set_AdvanceMode(Powerpoint_2k::PpAdvanceMode AdvanceMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvanceMode"), DISPID(2008));
  TAutoArgs<1> _args;
  _args[1] = (int)AdvanceMode /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::get_AdvanceTime(float* AdvanceTime/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvanceTime"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AdvanceTime /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
AnimationSettingsDispT<T>::get_AdvanceTime(void)
{
  float AdvanceTime;
  this->get_AdvanceTime((float*)&AdvanceTime);
  return AdvanceTime;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::set_AdvanceTime(float AdvanceTime/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvanceTime"), DISPID(2009));
  TAutoArgs<1> _args;
  _args[1] = AdvanceTime /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::get_PlaySettings(Powerpoint_2k::PlaySettingsPtr* PlaySettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PlaySettings"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PlaySettings**)PlaySettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PlaySettingsPtr __fastcall
AnimationSettingsDispT<T>::get_PlaySettings(void)
{
  Powerpoint_2k::PlaySettingsPtr PlaySettings;
  this->get_PlaySettings((Powerpoint_2k::PlaySettingsPtr*)&PlaySettings);
  return PlaySettings;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::get_TextLevelEffect(Powerpoint_2k::PpTextLevelEffect* TextLevelEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextLevelEffect"), DISPID(2011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)TextLevelEffect /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpTextLevelEffect __fastcall
AnimationSettingsDispT<T>::get_TextLevelEffect(void)
{
  Powerpoint_2k::PpTextLevelEffect TextLevelEffect;
  this->get_TextLevelEffect((Powerpoint_2k::PpTextLevelEffect*)&TextLevelEffect);
  return TextLevelEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::set_TextLevelEffect(Powerpoint_2k::PpTextLevelEffect TextLevelEffect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextLevelEffect"), DISPID(2011));
  TAutoArgs<1> _args;
  _args[1] = (int)TextLevelEffect /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::get_TextUnitEffect(Powerpoint_2k::PpTextUnitEffect* TextUnitEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextUnitEffect"), DISPID(2012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)TextUnitEffect /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpTextUnitEffect __fastcall
AnimationSettingsDispT<T>::get_TextUnitEffect(void)
{
  Powerpoint_2k::PpTextUnitEffect TextUnitEffect;
  this->get_TextUnitEffect((Powerpoint_2k::PpTextUnitEffect*)&TextUnitEffect);
  return TextUnitEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::set_TextUnitEffect(Powerpoint_2k::PpTextUnitEffect TextUnitEffect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextUnitEffect"), DISPID(2012));
  TAutoArgs<1> _args;
  _args[1] = (int)TextUnitEffect /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::get_Animate(Office_2k::MsoTriState* Animate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Animate"), DISPID(2013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Animate /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
AnimationSettingsDispT<T>::get_Animate(void)
{
  Office_2k::MsoTriState Animate;
  this->get_Animate((Office_2k::MsoTriState*)&Animate);
  return Animate;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::set_Animate(Office_2k::MsoTriState Animate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Animate"), DISPID(2013));
  TAutoArgs<1> _args;
  _args[1] = (int)Animate /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::get_AnimateBackground(Office_2k::MsoTriState* AnimateBackground/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AnimateBackground"), DISPID(2014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AnimateBackground /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
AnimationSettingsDispT<T>::get_AnimateBackground(void)
{
  Office_2k::MsoTriState AnimateBackground;
  this->get_AnimateBackground((Office_2k::MsoTriState*)&AnimateBackground);
  return AnimateBackground;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::set_AnimateBackground(Office_2k::MsoTriState AnimateBackground/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AnimateBackground"), DISPID(2014));
  TAutoArgs<1> _args;
  _args[1] = (int)AnimateBackground /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::get_AnimateTextInReverse(Office_2k::MsoTriState* AnimateTextInReverse/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AnimateTextInReverse"), DISPID(2015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AnimateTextInReverse /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
AnimationSettingsDispT<T>::get_AnimateTextInReverse(void)
{
  Office_2k::MsoTriState AnimateTextInReverse;
  this->get_AnimateTextInReverse((Office_2k::MsoTriState*)&AnimateTextInReverse);
  return AnimateTextInReverse;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::set_AnimateTextInReverse(Office_2k::MsoTriState AnimateTextInReverse/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AnimateTextInReverse"), DISPID(2015));
  TAutoArgs<1> _args;
  _args[1] = (int)AnimateTextInReverse /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::get_ChartUnitEffect(Powerpoint_2k::PpChartUnitEffect* ChartUnitEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChartUnitEffect"), DISPID(2016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ChartUnitEffect /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpChartUnitEffect __fastcall
AnimationSettingsDispT<T>::get_ChartUnitEffect(void)
{
  Powerpoint_2k::PpChartUnitEffect ChartUnitEffect;
  this->get_ChartUnitEffect((Powerpoint_2k::PpChartUnitEffect*)&ChartUnitEffect);
  return ChartUnitEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AnimationSettingsDispT<T>::set_ChartUnitEffect(Powerpoint_2k::PpChartUnitEffect ChartUnitEffect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChartUnitEffect"), DISPID(2016));
  TAutoArgs<1> _args;
  _args[1] = (int)ChartUnitEffect /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ActionSettings
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149348C-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ActionSettingsDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
ActionSettingsDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ActionSettingsDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ActionSettingsDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ActionSettingsDispT<T>::Item(Powerpoint_2k::PpMouseActivation index/*[in]*/, 
                             Powerpoint_2k::ActionSettingPtr* Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = (int)index /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::ActionSetting**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::ActionSettingPtr __fastcall
ActionSettingsDispT<T>::Item(Powerpoint_2k::PpMouseActivation index/*[in]*/)
{
  Powerpoint_2k::ActionSettingPtr Item;
  this->Item(index, (Powerpoint_2k::ActionSettingPtr*)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ActionSettingsDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
ActionSettingsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ActionSettingsDispT<T>::_Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
ActionSettingsDispT<T>::_Index(int index/*[in]*/)
{
  TVariant _Index;
  this->_Index(index, (TVariant*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ActionSettingsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ActionSettingsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  ActionSetting
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149348D-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ActionSettingDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
ActionSettingDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ActionSettingDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ActionSettingDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ActionSettingDispT<T>::get_Action(Powerpoint_2k::PpActionType* Action/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Action"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Action /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpActionType __fastcall
ActionSettingDispT<T>::get_Action(void)
{
  Powerpoint_2k::PpActionType Action;
  this->get_Action((Powerpoint_2k::PpActionType*)&Action);
  return Action;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ActionSettingDispT<T>::set_Action(Powerpoint_2k::PpActionType Action/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Action"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = (int)Action /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ActionSettingDispT<T>::get_ActionVerb(BSTR* ActionVerb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActionVerb"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ActionVerb /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ActionSettingDispT<T>::get_ActionVerb(void)
{
  BSTR ActionVerb;
  this->get_ActionVerb((BSTR*)&ActionVerb);
  return ActionVerb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ActionSettingDispT<T>::set_ActionVerb(BSTR ActionVerb/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActionVerb"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = ActionVerb /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ActionSettingDispT<T>::get_AnimateAction(Office_2k::MsoTriState* AnimateAction/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AnimateAction"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AnimateAction /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
ActionSettingDispT<T>::get_AnimateAction(void)
{
  Office_2k::MsoTriState AnimateAction;
  this->get_AnimateAction((Office_2k::MsoTriState*)&AnimateAction);
  return AnimateAction;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ActionSettingDispT<T>::set_AnimateAction(Office_2k::MsoTriState AnimateAction/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AnimateAction"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = (int)AnimateAction /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ActionSettingDispT<T>::get_Run(BSTR* Run/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Run"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Run /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ActionSettingDispT<T>::get_Run(void)
{
  BSTR Run;
  this->get_Run((BSTR*)&Run);
  return Run;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ActionSettingDispT<T>::set_Run(BSTR Run/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Run"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = Run /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ActionSettingDispT<T>::get_SlideShowName(BSTR* SlideShowName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideShowName"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SlideShowName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ActionSettingDispT<T>::get_SlideShowName(void)
{
  BSTR SlideShowName;
  this->get_SlideShowName((BSTR*)&SlideShowName);
  return SlideShowName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ActionSettingDispT<T>::set_SlideShowName(BSTR SlideShowName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideShowName"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = SlideShowName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ActionSettingDispT<T>::get_Hyperlink(Powerpoint_2k::HyperlinkPtr* Hyperlink/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Hyperlink"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Hyperlink**)Hyperlink /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::HyperlinkPtr __fastcall
ActionSettingDispT<T>::get_Hyperlink(void)
{
  Powerpoint_2k::HyperlinkPtr Hyperlink;
  this->get_Hyperlink((Powerpoint_2k::HyperlinkPtr*)&Hyperlink);
  return Hyperlink;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ActionSettingDispT<T>::get_SoundEffect(Powerpoint_2k::SoundEffectPtr* SoundEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SoundEffect"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::SoundEffect**)SoundEffect /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::SoundEffectPtr __fastcall
ActionSettingDispT<T>::get_SoundEffect(void)
{
  Powerpoint_2k::SoundEffectPtr SoundEffect;
  this->get_SoundEffect((Powerpoint_2k::SoundEffectPtr*)&SoundEffect);
  return SoundEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ActionSettingDispT<T>::get_ShowandReturn(Office_2k::MsoTriState* ShowandReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowandReturn"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ShowandReturn /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
ActionSettingDispT<T>::get_ShowandReturn(void)
{
  Office_2k::MsoTriState ShowandReturn;
  this->get_ShowandReturn((Office_2k::MsoTriState*)&ShowandReturn);
  return ShowandReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ActionSettingDispT<T>::set_ShowandReturn(Office_2k::MsoTriState ShowandReturn/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowandReturn"), DISPID(2010));
  TAutoArgs<1> _args;
  _args[1] = (int)ShowandReturn /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  PlaySettings
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149348E-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PlaySettingsDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
PlaySettingsDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PlaySettingsDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PlaySettingsDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PlaySettingsDispT<T>::get_ActionVerb(BSTR* ActionVerb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActionVerb"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ActionVerb /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PlaySettingsDispT<T>::get_ActionVerb(void)
{
  BSTR ActionVerb;
  this->get_ActionVerb((BSTR*)&ActionVerb);
  return ActionVerb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PlaySettingsDispT<T>::set_ActionVerb(BSTR ActionVerb/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActionVerb"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = ActionVerb /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PlaySettingsDispT<T>::get_HideWhileNotPlaying(Office_2k::MsoTriState* HideWhileNotPlaying/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HideWhileNotPlaying"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)HideWhileNotPlaying /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PlaySettingsDispT<T>::get_HideWhileNotPlaying(void)
{
  Office_2k::MsoTriState HideWhileNotPlaying;
  this->get_HideWhileNotPlaying((Office_2k::MsoTriState*)&HideWhileNotPlaying);
  return HideWhileNotPlaying;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PlaySettingsDispT<T>::set_HideWhileNotPlaying(Office_2k::MsoTriState HideWhileNotPlaying/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HideWhileNotPlaying"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = (int)HideWhileNotPlaying /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PlaySettingsDispT<T>::get_LoopUntilStopped(Office_2k::MsoTriState* LoopUntilStopped/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LoopUntilStopped"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)LoopUntilStopped /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PlaySettingsDispT<T>::get_LoopUntilStopped(void)
{
  Office_2k::MsoTriState LoopUntilStopped;
  this->get_LoopUntilStopped((Office_2k::MsoTriState*)&LoopUntilStopped);
  return LoopUntilStopped;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PlaySettingsDispT<T>::set_LoopUntilStopped(Office_2k::MsoTriState LoopUntilStopped/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LoopUntilStopped"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = (int)LoopUntilStopped /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PlaySettingsDispT<T>::get_PlayOnEntry(Office_2k::MsoTriState* PlayOnEntry/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PlayOnEntry"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PlayOnEntry /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PlaySettingsDispT<T>::get_PlayOnEntry(void)
{
  Office_2k::MsoTriState PlayOnEntry;
  this->get_PlayOnEntry((Office_2k::MsoTriState*)&PlayOnEntry);
  return PlayOnEntry;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PlaySettingsDispT<T>::set_PlayOnEntry(Office_2k::MsoTriState PlayOnEntry/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PlayOnEntry"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = (int)PlayOnEntry /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PlaySettingsDispT<T>::get_RewindMovie(Office_2k::MsoTriState* RewindMovie/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RewindMovie"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)RewindMovie /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PlaySettingsDispT<T>::get_RewindMovie(void)
{
  Office_2k::MsoTriState RewindMovie;
  this->get_RewindMovie((Office_2k::MsoTriState*)&RewindMovie);
  return RewindMovie;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PlaySettingsDispT<T>::set_RewindMovie(Office_2k::MsoTriState RewindMovie/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RewindMovie"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = (int)RewindMovie /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PlaySettingsDispT<T>::get_PauseAnimation(Office_2k::MsoTriState* PauseAnimation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PauseAnimation"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PauseAnimation /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PlaySettingsDispT<T>::get_PauseAnimation(void)
{
  Office_2k::MsoTriState PauseAnimation;
  this->get_PauseAnimation((Office_2k::MsoTriState*)&PauseAnimation);
  return PauseAnimation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PlaySettingsDispT<T>::set_PauseAnimation(Office_2k::MsoTriState PauseAnimation/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PauseAnimation"), DISPID(2008));
  TAutoArgs<1> _args;
  _args[1] = (int)PauseAnimation /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PlaySettingsDispT<T>::get_StopAfterSlides(int* StopAfterSlides/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StopAfterSlides"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(StopAfterSlides /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PlaySettingsDispT<T>::get_StopAfterSlides(void)
{
  int StopAfterSlides;
  this->get_StopAfterSlides((int*)&StopAfterSlides);
  return StopAfterSlides;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PlaySettingsDispT<T>::set_StopAfterSlides(int StopAfterSlides/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StopAfterSlides"), DISPID(2009));
  TAutoArgs<1> _args;
  _args[1] = StopAfterSlides /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  TextRange
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149348F-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
TextRangeDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
TextRangeDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::get_ActionSettings(Powerpoint_2k::ActionSettingsPtr* ActionSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActionSettings"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::ActionSettings**)ActionSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::ActionSettingsPtr __fastcall
TextRangeDispT<T>::get_ActionSettings(void)
{
  Powerpoint_2k::ActionSettingsPtr ActionSettings;
  this->get_ActionSettings((Powerpoint_2k::ActionSettingsPtr*)&ActionSettings);
  return ActionSettings;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::get_Start(long* Start/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Start"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Start /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
TextRangeDispT<T>::get_Start(void)
{
  long Start;
  this->get_Start((long*)&Start);
  return Start;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::get_Length(long* Length/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Length"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Length /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
TextRangeDispT<T>::get_Length(void)
{
  long Length;
  this->get_Length((long*)&Length);
  return Length;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::get_BoundLeft(float* BoundLeft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BoundLeft"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BoundLeft /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
TextRangeDispT<T>::get_BoundLeft(void)
{
  float BoundLeft;
  this->get_BoundLeft((float*)&BoundLeft);
  return BoundLeft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::get_BoundTop(float* BoundTop/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BoundTop"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BoundTop /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
TextRangeDispT<T>::get_BoundTop(void)
{
  float BoundTop;
  this->get_BoundTop((float*)&BoundTop);
  return BoundTop;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::get_BoundWidth(float* BoundWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BoundWidth"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BoundWidth /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
TextRangeDispT<T>::get_BoundWidth(void)
{
  float BoundWidth;
  this->get_BoundWidth((float*)&BoundWidth);
  return BoundWidth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::get_BoundHeight(float* BoundHeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BoundHeight"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BoundHeight /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
TextRangeDispT<T>::get_BoundHeight(void)
{
  float BoundHeight;
  this->get_BoundHeight((float*)&BoundHeight);
  return BoundHeight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::Paragraphs(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/, 
                              Powerpoint_2k::TextRangePtr* Paragraphs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Paragraphs"), DISPID(2010));
  TAutoArgs<2> _args;
  _args[1] = Start /*[VT_INT:0]*/;
  _args[2] = Length /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::TextRange**)Paragraphs /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::TextRangePtr __fastcall
TextRangeDispT<T>::Paragraphs(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/)
{
  Powerpoint_2k::TextRangePtr Paragraphs;
  this->Paragraphs(Start, Length, (Powerpoint_2k::TextRangePtr*)&Paragraphs);
  return Paragraphs;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::Sentences(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/, 
                             Powerpoint_2k::TextRangePtr* Sentences/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Sentences"), DISPID(2011));
  TAutoArgs<2> _args;
  _args[1] = Start /*[VT_INT:0]*/;
  _args[2] = Length /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::TextRange**)Sentences /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::TextRangePtr __fastcall
TextRangeDispT<T>::Sentences(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/)
{
  Powerpoint_2k::TextRangePtr Sentences;
  this->Sentences(Start, Length, (Powerpoint_2k::TextRangePtr*)&Sentences);
  return Sentences;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::Words(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/, 
                         Powerpoint_2k::TextRangePtr* Words/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Words"), DISPID(2012));
  TAutoArgs<2> _args;
  _args[1] = Start /*[VT_INT:0]*/;
  _args[2] = Length /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::TextRange**)Words /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::TextRangePtr __fastcall
TextRangeDispT<T>::Words(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/)
{
  Powerpoint_2k::TextRangePtr Words;
  this->Words(Start, Length, (Powerpoint_2k::TextRangePtr*)&Words);
  return Words;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::Characters(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/, 
                              Powerpoint_2k::TextRangePtr* Characters/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Characters"), DISPID(2013));
  TAutoArgs<2> _args;
  _args[1] = Start /*[VT_INT:0]*/;
  _args[2] = Length /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::TextRange**)Characters /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::TextRangePtr __fastcall
TextRangeDispT<T>::Characters(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/)
{
  Powerpoint_2k::TextRangePtr Characters;
  this->Characters(Start, Length, (Powerpoint_2k::TextRangePtr*)&Characters);
  return Characters;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::Lines(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/, 
                         Powerpoint_2k::TextRangePtr* Lines/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Lines"), DISPID(2014));
  TAutoArgs<2> _args;
  _args[1] = Start /*[VT_INT:0]*/;
  _args[2] = Length /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::TextRange**)Lines /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::TextRangePtr __fastcall
TextRangeDispT<T>::Lines(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/)
{
  Powerpoint_2k::TextRangePtr Lines;
  this->Lines(Start, Length, (Powerpoint_2k::TextRangePtr*)&Lines);
  return Lines;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::Runs(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/, 
                        Powerpoint_2k::TextRangePtr* Runs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Runs"), DISPID(2015));
  TAutoArgs<2> _args;
  _args[1] = Start /*[VT_INT:0]*/;
  _args[2] = Length /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::TextRange**)Runs /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::TextRangePtr __fastcall
TextRangeDispT<T>::Runs(int Start/*[in,def,opt]*/, int Length/*[in,def,opt]*/)
{
  Powerpoint_2k::TextRangePtr Runs;
  this->Runs(Start, Length, (Powerpoint_2k::TextRangePtr*)&Runs);
  return Runs;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::TrimText(Powerpoint_2k::TextRangePtr* TrimText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TrimText"), DISPID(2016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::TextRange**)TrimText /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::TextRangePtr __fastcall
TextRangeDispT<T>::TrimText(void)
{
  Powerpoint_2k::TextRangePtr TrimText;
  this->TrimText((Powerpoint_2k::TextRangePtr*)&TrimText);
  return TrimText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::get_Text(BSTR* Text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Text /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
TextRangeDispT<T>::get_Text(void)
{
  BSTR Text;
  this->get_Text((BSTR*)&Text);
  return Text;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::set_Text(BSTR Text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::InsertAfter(BSTR NewText/*[in,def,opt]*/, 
                               Powerpoint_2k::TextRangePtr* After/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InsertAfter"), DISPID(2017));
  TAutoArgs<1> _args;
  _args[1] = NewText /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::TextRange**)After /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::TextRangePtr __fastcall
TextRangeDispT<T>::InsertAfter(BSTR NewText/*[in,def,opt]*/)
{
  Powerpoint_2k::TextRangePtr After;
  this->InsertAfter(NewText, (Powerpoint_2k::TextRangePtr*)&After);
  return After;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::InsertBefore(BSTR NewText/*[in,def,opt]*/, 
                                Powerpoint_2k::TextRangePtr* Before/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InsertBefore"), DISPID(2018));
  TAutoArgs<1> _args;
  _args[1] = NewText /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::TextRange**)Before /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::TextRangePtr __fastcall
TextRangeDispT<T>::InsertBefore(BSTR NewText/*[in,def,opt]*/)
{
  Powerpoint_2k::TextRangePtr Before;
  this->InsertBefore(NewText, (Powerpoint_2k::TextRangePtr*)&Before);
  return Before;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::InsertDateTime(Powerpoint_2k::PpDateTimeFormat DateTimeFormat/*[in]*/, 
                                  Office_2k::MsoTriState InsertAsField/*[in,def,opt]*/, 
                                  Powerpoint_2k::TextRangePtr* DateTime/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InsertDateTime"), DISPID(2019));
  TAutoArgs<2> _args;
  _args[1] = (int)DateTimeFormat /*[VT_USERDEFINED:0]*/;
  _args[2] = (int)InsertAsField /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::TextRange**)DateTime /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::TextRangePtr __fastcall
TextRangeDispT<T>::InsertDateTime(Powerpoint_2k::PpDateTimeFormat DateTimeFormat/*[in]*/, 
                                  Office_2k::MsoTriState InsertAsField/*[in,def,opt]*/)
{
  Powerpoint_2k::TextRangePtr DateTime;
  this->InsertDateTime(DateTimeFormat, InsertAsField, (Powerpoint_2k::TextRangePtr*)&DateTime);
  return DateTime;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::InsertSlideNumber(Powerpoint_2k::TextRangePtr* SlideNumber/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InsertSlideNumber"), DISPID(2020));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::TextRange**)SlideNumber /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::TextRangePtr __fastcall
TextRangeDispT<T>::InsertSlideNumber(void)
{
  Powerpoint_2k::TextRangePtr SlideNumber;
  this->InsertSlideNumber((Powerpoint_2k::TextRangePtr*)&SlideNumber);
  return SlideNumber;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::InsertSymbol(BSTR FontName/*[in]*/, int CharNumber/*[in]*/, 
                                Office_2k::MsoTriState Unicode/*[in,def,opt]*/, 
                                Powerpoint_2k::TextRangePtr* Symbol/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InsertSymbol"), DISPID(2021));
  TAutoArgs<3> _args;
  _args[1] = FontName /*[VT_BSTR:0]*/;
  _args[2] = CharNumber /*[VT_INT:0]*/;
  _args[3] = (int)Unicode /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::TextRange**)Symbol /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::TextRangePtr __fastcall
TextRangeDispT<T>::InsertSymbol(BSTR FontName/*[in]*/, int CharNumber/*[in]*/, 
                                Office_2k::MsoTriState Unicode/*[in,def,opt]*/)
{
  Powerpoint_2k::TextRangePtr Symbol;
  this->InsertSymbol(FontName, CharNumber, Unicode, (Powerpoint_2k::TextRangePtr*)&Symbol);
  return Symbol;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::get_Font(Powerpoint_2k::FontPtr* Font/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(2022));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Font**)Font /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::FontPtr __fastcall
TextRangeDispT<T>::get_Font(void)
{
  Powerpoint_2k::FontPtr Font;
  this->get_Font((Powerpoint_2k::FontPtr*)&Font);
  return Font;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::get_ParagraphFormat(Powerpoint_2k::ParagraphFormatPtr* ParagraphFormat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ParagraphFormat"), DISPID(2023));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::ParagraphFormat**)ParagraphFormat /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::ParagraphFormatPtr __fastcall
TextRangeDispT<T>::get_ParagraphFormat(void)
{
  Powerpoint_2k::ParagraphFormatPtr ParagraphFormat;
  this->get_ParagraphFormat((Powerpoint_2k::ParagraphFormatPtr*)&ParagraphFormat);
  return ParagraphFormat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::get_IndentLevel(int* IndentLevel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IndentLevel"), DISPID(2024));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(IndentLevel /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
TextRangeDispT<T>::get_IndentLevel(void)
{
  int IndentLevel;
  this->get_IndentLevel((int*)&IndentLevel);
  return IndentLevel;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::set_IndentLevel(int IndentLevel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IndentLevel"), DISPID(2024));
  TAutoArgs<1> _args;
  _args[1] = IndentLevel /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::Select()
{
  _TDispID _dispid(*this, OLETEXT("Select"), DISPID(2025));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::Cut()
{
  _TDispID _dispid(*this, OLETEXT("Cut"), DISPID(2026));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::Copy()
{
  _TDispID _dispid(*this, OLETEXT("Copy"), DISPID(2027));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(2028));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::Paste(Powerpoint_2k::TextRangePtr* Paste/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Paste"), DISPID(2029));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::TextRange**)Paste /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::TextRangePtr __fastcall
TextRangeDispT<T>::Paste(void)
{
  Powerpoint_2k::TextRangePtr Paste;
  this->Paste((Powerpoint_2k::TextRangePtr*)&Paste);
  return Paste;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::ChangeCase(Powerpoint_2k::PpChangeCase Type/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChangeCase"), DISPID(2030));
  TAutoArgs<1> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::AddPeriods()
{
  _TDispID _dispid(*this, OLETEXT("AddPeriods"), DISPID(2031));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::RemovePeriods()
{
  _TDispID _dispid(*this, OLETEXT("RemovePeriods"), DISPID(2032));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::Find(BSTR FindWhat/*[in]*/, int After/*[in,def,opt]*/, 
                        Office_2k::MsoTriState MatchCase/*[in,def,opt]*/, 
                        Office_2k::MsoTriState WholeWords/*[in,def,opt]*/, 
                        Powerpoint_2k::TextRangePtr* Find/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Find"), DISPID(2033));
  TAutoArgs<4> _args;
  _args[1] = FindWhat /*[VT_BSTR:0]*/;
  _args[2] = After /*[VT_INT:0]*/;
  _args[3] = (int)MatchCase /*[VT_USERDEFINED:0]*/;
  _args[4] = (int)WholeWords /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::TextRange**)Find /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::TextRangePtr __fastcall
TextRangeDispT<T>::Find(BSTR FindWhat/*[in]*/, int After/*[in,def,opt]*/, 
                        Office_2k::MsoTriState MatchCase/*[in,def,opt]*/, 
                        Office_2k::MsoTriState WholeWords/*[in,def,opt]*/)
{
  Powerpoint_2k::TextRangePtr Find;
  this->Find(FindWhat, After, MatchCase, WholeWords, (Powerpoint_2k::TextRangePtr*)&Find);
  return Find;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::Replace(BSTR FindWhat/*[in]*/, BSTR ReplaceWhat/*[in]*/, 
                           int After/*[in,def,opt]*/, 
                           Office_2k::MsoTriState MatchCase/*[in,def,opt]*/, 
                           Office_2k::MsoTriState WholeWords/*[in,def,opt]*/, 
                           Powerpoint_2k::TextRangePtr* Replace/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Replace"), DISPID(2034));
  TAutoArgs<5> _args;
  _args[1] = FindWhat /*[VT_BSTR:0]*/;
  _args[2] = ReplaceWhat /*[VT_BSTR:0]*/;
  _args[3] = After /*[VT_INT:0]*/;
  _args[4] = (int)MatchCase /*[VT_USERDEFINED:0]*/;
  _args[5] = (int)WholeWords /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::TextRange**)Replace /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::TextRangePtr __fastcall
TextRangeDispT<T>::Replace(BSTR FindWhat/*[in]*/, BSTR ReplaceWhat/*[in]*/, 
                           int After/*[in,def,opt]*/, 
                           Office_2k::MsoTriState MatchCase/*[in,def,opt]*/, 
                           Office_2k::MsoTriState WholeWords/*[in,def,opt]*/)
{
  Powerpoint_2k::TextRangePtr Replace;
  this->Replace(FindWhat, ReplaceWhat, After, MatchCase, WholeWords, (Powerpoint_2k::TextRangePtr*)&Replace);
  return Replace;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::RotatedBounds(float* X1/*[out]*/, float* Y1/*[out]*/, float* X2/*[out]*/, 
                                 float* Y2/*[out]*/, float* X3/*[out]*/, float* Y3/*[out]*/, 
                                 float* x4/*[out]*/, float* y4/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("RotatedBounds"), DISPID(2035));
  TAutoArgs<8> _args;
  _args[1] = X1 /*[VT_R4:1]*/;
  _args[2] = Y1 /*[VT_R4:1]*/;
  _args[3] = X2 /*[VT_R4:1]*/;
  _args[4] = Y2 /*[VT_R4:1]*/;
  _args[5] = X3 /*[VT_R4:1]*/;
  _args[6] = Y3 /*[VT_R4:1]*/;
  _args[7] = x4 /*[VT_R4:1]*/;
  _args[8] = y4 /*[VT_R4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::get_LanguageID(Office_2k::MsoLanguageID* LanguageID/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LanguageID"), DISPID(2036));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)LanguageID /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoLanguageID __fastcall
TextRangeDispT<T>::get_LanguageID(void)
{
  Office_2k::MsoLanguageID LanguageID;
  this->get_LanguageID((Office_2k::MsoLanguageID*)&LanguageID);
  return LanguageID;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::set_LanguageID(Office_2k::MsoLanguageID LanguageID/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LanguageID"), DISPID(2036));
  TAutoArgs<1> _args;
  _args[1] = (int)LanguageID /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::RtlRun()
{
  _TDispID _dispid(*this, OLETEXT("RtlRun"), DISPID(2037));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::LtrRun()
{
  _TDispID _dispid(*this, OLETEXT("LtrRun"), DISPID(2038));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
TextRangeDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::_Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
TextRangeDispT<T>::_Index(int index/*[in]*/)
{
  TVariant _Index;
  this->_Index(index, (TVariant*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextRangeDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
TextRangeDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  Ruler
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493490-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RulerDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
RulerDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RulerDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
RulerDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RulerDispT<T>::get_TabStops(Powerpoint_2k::TabStopsPtr* TabStops/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabStops"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::TabStops**)TabStops /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::TabStopsPtr __fastcall
RulerDispT<T>::get_TabStops(void)
{
  Powerpoint_2k::TabStopsPtr TabStops;
  this->get_TabStops((Powerpoint_2k::TabStopsPtr*)&TabStops);
  return TabStops;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RulerDispT<T>::get_Levels(Powerpoint_2k::RulerLevelsPtr* Levels/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Levels"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::RulerLevels**)Levels /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::RulerLevelsPtr __fastcall
RulerDispT<T>::get_Levels(void)
{
  Powerpoint_2k::RulerLevelsPtr Levels;
  this->get_Levels((Powerpoint_2k::RulerLevelsPtr*)&Levels);
  return Levels;
}

// *********************************************************************//
// DispIntf:  RulerLevels
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493491-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RulerLevelsDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
RulerLevelsDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RulerLevelsDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
RulerLevelsDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RulerLevelsDispT<T>::Item(int index/*[in]*/, Powerpoint_2k::RulerLevelPtr* Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::RulerLevel**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::RulerLevelPtr __fastcall
RulerLevelsDispT<T>::Item(int index/*[in]*/)
{
  Powerpoint_2k::RulerLevelPtr Item;
  this->Item(index, (Powerpoint_2k::RulerLevelPtr*)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RulerLevelsDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
RulerLevelsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RulerLevelsDispT<T>::_Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
RulerLevelsDispT<T>::_Index(int index/*[in]*/)
{
  TVariant _Index;
  this->_Index(index, (TVariant*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RulerLevelsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
RulerLevelsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  RulerLevel
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493492-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RulerLevelDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
RulerLevelDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RulerLevelDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
RulerLevelDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RulerLevelDispT<T>::get_FirstMargin(float* FirstMargin/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FirstMargin"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FirstMargin /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
RulerLevelDispT<T>::get_FirstMargin(void)
{
  float FirstMargin;
  this->get_FirstMargin((float*)&FirstMargin);
  return FirstMargin;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RulerLevelDispT<T>::set_FirstMargin(float FirstMargin/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FirstMargin"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = FirstMargin /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RulerLevelDispT<T>::get_LeftMargin(float* LeftMargin/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LeftMargin"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(LeftMargin /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
RulerLevelDispT<T>::get_LeftMargin(void)
{
  float LeftMargin;
  this->get_LeftMargin((float*)&LeftMargin);
  return LeftMargin;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RulerLevelDispT<T>::set_LeftMargin(float LeftMargin/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LeftMargin"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = LeftMargin /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  TabStops
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493493-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabStopsDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
TabStopsDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabStopsDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
TabStopsDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabStopsDispT<T>::Item(int index/*[in]*/, Powerpoint_2k::TabStopPtr* Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::TabStop**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::TabStopPtr __fastcall
TabStopsDispT<T>::Item(int index/*[in]*/)
{
  Powerpoint_2k::TabStopPtr Item;
  this->Item(index, (Powerpoint_2k::TabStopPtr*)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabStopsDispT<T>::get_DefaultSpacing(float* DefaultSpacing/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultSpacing"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DefaultSpacing /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
TabStopsDispT<T>::get_DefaultSpacing(void)
{
  float DefaultSpacing;
  this->get_DefaultSpacing((float*)&DefaultSpacing);
  return DefaultSpacing;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabStopsDispT<T>::set_DefaultSpacing(float DefaultSpacing/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultSpacing"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = DefaultSpacing /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabStopsDispT<T>::Add(Powerpoint_2k::PpTabStopType Type/*[in]*/, float Position/*[in]*/, 
                      Powerpoint_2k::TabStopPtr* Add/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2004));
  TAutoArgs<2> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  _args[2] = Position /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::TabStop**)Add /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::TabStopPtr __fastcall
TabStopsDispT<T>::Add(Powerpoint_2k::PpTabStopType Type/*[in]*/, float Position/*[in]*/)
{
  Powerpoint_2k::TabStopPtr Add;
  this->Add(Type, Position, (Powerpoint_2k::TabStopPtr*)&Add);
  return Add;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabStopsDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
TabStopsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabStopsDispT<T>::_Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
TabStopsDispT<T>::_Index(int index/*[in]*/)
{
  TVariant _Index;
  this->_Index(index, (TVariant*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabStopsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
TabStopsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  TabStop
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493494-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabStopDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
TabStopDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabStopDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
TabStopDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabStopDispT<T>::get_Type(Powerpoint_2k::PpTabStopType* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpTabStopType __fastcall
TabStopDispT<T>::get_Type(void)
{
  Powerpoint_2k::PpTabStopType Type;
  this->get_Type((Powerpoint_2k::PpTabStopType*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabStopDispT<T>::set_Type(Powerpoint_2k::PpTabStopType Type/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabStopDispT<T>::get_Position(float* Position/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Position"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Position /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
TabStopDispT<T>::get_Position(void)
{
  float Position;
  this->get_Position((float*)&Position);
  return Position;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabStopDispT<T>::set_Position(float Position/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Position"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = Position /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TabStopDispT<T>::Clear()
{
  _TDispID _dispid(*this, OLETEXT("Clear"), DISPID(2005));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  Font
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493495-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
FontDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
FontDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::get_Color(Powerpoint_2k::ColorFormatPtr* Color/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Color"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::ColorFormat**)Color /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::ColorFormatPtr __fastcall
FontDispT<T>::get_Color(void)
{
  Powerpoint_2k::ColorFormatPtr Color;
  this->get_Color((Powerpoint_2k::ColorFormatPtr*)&Color);
  return Color;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::get_Bold(Office_2k::MsoTriState* Bold/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bold"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Bold /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
FontDispT<T>::get_Bold(void)
{
  Office_2k::MsoTriState Bold;
  this->get_Bold((Office_2k::MsoTriState*)&Bold);
  return Bold;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::set_Bold(Office_2k::MsoTriState Bold/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bold"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = (int)Bold /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::get_Italic(Office_2k::MsoTriState* Italic/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Italic"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Italic /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
FontDispT<T>::get_Italic(void)
{
  Office_2k::MsoTriState Italic;
  this->get_Italic((Office_2k::MsoTriState*)&Italic);
  return Italic;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::set_Italic(Office_2k::MsoTriState Italic/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Italic"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = (int)Italic /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::get_Shadow(Office_2k::MsoTriState* Shadow/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Shadow"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Shadow /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
FontDispT<T>::get_Shadow(void)
{
  Office_2k::MsoTriState Shadow;
  this->get_Shadow((Office_2k::MsoTriState*)&Shadow);
  return Shadow;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::set_Shadow(Office_2k::MsoTriState Shadow/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Shadow"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = (int)Shadow /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::get_Emboss(Office_2k::MsoTriState* Emboss/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Emboss"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Emboss /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
FontDispT<T>::get_Emboss(void)
{
  Office_2k::MsoTriState Emboss;
  this->get_Emboss((Office_2k::MsoTriState*)&Emboss);
  return Emboss;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::set_Emboss(Office_2k::MsoTriState Emboss/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Emboss"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = (int)Emboss /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::get_Underline(Office_2k::MsoTriState* Underline/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Underline"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Underline /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
FontDispT<T>::get_Underline(void)
{
  Office_2k::MsoTriState Underline;
  this->get_Underline((Office_2k::MsoTriState*)&Underline);
  return Underline;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::set_Underline(Office_2k::MsoTriState Underline/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Underline"), DISPID(2008));
  TAutoArgs<1> _args;
  _args[1] = (int)Underline /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::get_Subscript(Office_2k::MsoTriState* Subscript/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Subscript"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Subscript /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
FontDispT<T>::get_Subscript(void)
{
  Office_2k::MsoTriState Subscript;
  this->get_Subscript((Office_2k::MsoTriState*)&Subscript);
  return Subscript;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::set_Subscript(Office_2k::MsoTriState Subscript/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Subscript"), DISPID(2009));
  TAutoArgs<1> _args;
  _args[1] = (int)Subscript /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::get_Superscript(Office_2k::MsoTriState* Superscript/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Superscript"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Superscript /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
FontDispT<T>::get_Superscript(void)
{
  Office_2k::MsoTriState Superscript;
  this->get_Superscript((Office_2k::MsoTriState*)&Superscript);
  return Superscript;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::set_Superscript(Office_2k::MsoTriState Superscript/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Superscript"), DISPID(2010));
  TAutoArgs<1> _args;
  _args[1] = (int)Superscript /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::get_BaselineOffset(float* BaselineOffset/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaselineOffset"), DISPID(2011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BaselineOffset /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
FontDispT<T>::get_BaselineOffset(void)
{
  float BaselineOffset;
  this->get_BaselineOffset((float*)&BaselineOffset);
  return BaselineOffset;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::set_BaselineOffset(float BaselineOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaselineOffset"), DISPID(2011));
  TAutoArgs<1> _args;
  _args[1] = BaselineOffset /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::get_Embedded(Office_2k::MsoTriState* Embedded/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Embedded"), DISPID(2012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Embedded /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
FontDispT<T>::get_Embedded(void)
{
  Office_2k::MsoTriState Embedded;
  this->get_Embedded((Office_2k::MsoTriState*)&Embedded);
  return Embedded;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::get_Embeddable(Office_2k::MsoTriState* Embeddable/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Embeddable"), DISPID(2013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Embeddable /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
FontDispT<T>::get_Embeddable(void)
{
  Office_2k::MsoTriState Embeddable;
  this->get_Embeddable((Office_2k::MsoTriState*)&Embeddable);
  return Embeddable;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::get_Size(float* Size/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Size"), DISPID(2014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Size /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
FontDispT<T>::get_Size(void)
{
  float Size;
  this->get_Size((float*)&Size);
  return Size;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::set_Size(float Size/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Size"), DISPID(2014));
  TAutoArgs<1> _args;
  _args[1] = Size /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(2015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
FontDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(2015));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::get_NameFarEast(BSTR* NameFarEast/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NameFarEast"), DISPID(2016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(NameFarEast /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
FontDispT<T>::get_NameFarEast(void)
{
  BSTR NameFarEast;
  this->get_NameFarEast((BSTR*)&NameFarEast);
  return NameFarEast;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::set_NameFarEast(BSTR NameFarEast/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NameFarEast"), DISPID(2016));
  TAutoArgs<1> _args;
  _args[1] = NameFarEast /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::get_NameAscii(BSTR* NameAscii/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NameAscii"), DISPID(2017));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(NameAscii /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
FontDispT<T>::get_NameAscii(void)
{
  BSTR NameAscii;
  this->get_NameAscii((BSTR*)&NameAscii);
  return NameAscii;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::set_NameAscii(BSTR NameAscii/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NameAscii"), DISPID(2017));
  TAutoArgs<1> _args;
  _args[1] = NameAscii /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::get_AutoRotateNumbers(Office_2k::MsoTriState* AutoRotateNumbers/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoRotateNumbers"), DISPID(2018));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AutoRotateNumbers /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
FontDispT<T>::get_AutoRotateNumbers(void)
{
  Office_2k::MsoTriState AutoRotateNumbers;
  this->get_AutoRotateNumbers((Office_2k::MsoTriState*)&AutoRotateNumbers);
  return AutoRotateNumbers;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::set_AutoRotateNumbers(Office_2k::MsoTriState AutoRotateNumbers/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoRotateNumbers"), DISPID(2018));
  TAutoArgs<1> _args;
  _args[1] = (int)AutoRotateNumbers /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::get_NameOther(BSTR* NameOther/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NameOther"), DISPID(2019));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(NameOther /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
FontDispT<T>::get_NameOther(void)
{
  BSTR NameOther;
  this->get_NameOther((BSTR*)&NameOther);
  return NameOther;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::set_NameOther(BSTR NameOther/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NameOther"), DISPID(2019));
  TAutoArgs<1> _args;
  _args[1] = NameOther /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::get_NameComplexScript(BSTR* NameComplexScript/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NameComplexScript"), DISPID(2020));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(NameComplexScript /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
FontDispT<T>::get_NameComplexScript(void)
{
  BSTR NameComplexScript;
  this->get_NameComplexScript((BSTR*)&NameComplexScript);
  return NameComplexScript;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FontDispT<T>::set_NameComplexScript(BSTR NameComplexScript/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NameComplexScript"), DISPID(2020));
  TAutoArgs<1> _args;
  _args[1] = NameComplexScript /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ParagraphFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493496-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
ParagraphFormatDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ParagraphFormatDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::get_Alignment(Powerpoint_2k::PpParagraphAlignment* Alignment/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Alignment"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Alignment /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpParagraphAlignment __fastcall
ParagraphFormatDispT<T>::get_Alignment(void)
{
  Powerpoint_2k::PpParagraphAlignment Alignment;
  this->get_Alignment((Powerpoint_2k::PpParagraphAlignment*)&Alignment);
  return Alignment;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::set_Alignment(Powerpoint_2k::PpParagraphAlignment Alignment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Alignment"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = (int)Alignment /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::get_Bullet(Powerpoint_2k::BulletFormatPtr* Bullet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bullet"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::BulletFormat**)Bullet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::BulletFormatPtr __fastcall
ParagraphFormatDispT<T>::get_Bullet(void)
{
  Powerpoint_2k::BulletFormatPtr Bullet;
  this->get_Bullet((Powerpoint_2k::BulletFormatPtr*)&Bullet);
  return Bullet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::get_LineRuleBefore(Office_2k::MsoTriState* LineRuleBefore/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LineRuleBefore"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)LineRuleBefore /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
ParagraphFormatDispT<T>::get_LineRuleBefore(void)
{
  Office_2k::MsoTriState LineRuleBefore;
  this->get_LineRuleBefore((Office_2k::MsoTriState*)&LineRuleBefore);
  return LineRuleBefore;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::set_LineRuleBefore(Office_2k::MsoTriState LineRuleBefore/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LineRuleBefore"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = (int)LineRuleBefore /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::get_LineRuleAfter(Office_2k::MsoTriState* LineRuleAfter/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LineRuleAfter"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)LineRuleAfter /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
ParagraphFormatDispT<T>::get_LineRuleAfter(void)
{
  Office_2k::MsoTriState LineRuleAfter;
  this->get_LineRuleAfter((Office_2k::MsoTriState*)&LineRuleAfter);
  return LineRuleAfter;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::set_LineRuleAfter(Office_2k::MsoTriState LineRuleAfter/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LineRuleAfter"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = (int)LineRuleAfter /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::get_LineRuleWithin(Office_2k::MsoTriState* LineRuleWithin/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LineRuleWithin"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)LineRuleWithin /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
ParagraphFormatDispT<T>::get_LineRuleWithin(void)
{
  Office_2k::MsoTriState LineRuleWithin;
  this->get_LineRuleWithin((Office_2k::MsoTriState*)&LineRuleWithin);
  return LineRuleWithin;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::set_LineRuleWithin(Office_2k::MsoTriState LineRuleWithin/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LineRuleWithin"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = (int)LineRuleWithin /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::get_SpaceBefore(float* SpaceBefore/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpaceBefore"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SpaceBefore /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ParagraphFormatDispT<T>::get_SpaceBefore(void)
{
  float SpaceBefore;
  this->get_SpaceBefore((float*)&SpaceBefore);
  return SpaceBefore;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::set_SpaceBefore(float SpaceBefore/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpaceBefore"), DISPID(2008));
  TAutoArgs<1> _args;
  _args[1] = SpaceBefore /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::get_SpaceAfter(float* SpaceAfter/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpaceAfter"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SpaceAfter /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ParagraphFormatDispT<T>::get_SpaceAfter(void)
{
  float SpaceAfter;
  this->get_SpaceAfter((float*)&SpaceAfter);
  return SpaceAfter;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::set_SpaceAfter(float SpaceAfter/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpaceAfter"), DISPID(2009));
  TAutoArgs<1> _args;
  _args[1] = SpaceAfter /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::get_SpaceWithin(float* SpaceWithin/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpaceWithin"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SpaceWithin /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ParagraphFormatDispT<T>::get_SpaceWithin(void)
{
  float SpaceWithin;
  this->get_SpaceWithin((float*)&SpaceWithin);
  return SpaceWithin;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::set_SpaceWithin(float SpaceWithin/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpaceWithin"), DISPID(2010));
  TAutoArgs<1> _args;
  _args[1] = SpaceWithin /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::get_BaseLineAlignment(Powerpoint_2k::PpBaselineAlignment* BaseLineAlignment/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaseLineAlignment"), DISPID(2011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)BaseLineAlignment /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpBaselineAlignment __fastcall
ParagraphFormatDispT<T>::get_BaseLineAlignment(void)
{
  Powerpoint_2k::PpBaselineAlignment BaseLineAlignment;
  this->get_BaseLineAlignment((Powerpoint_2k::PpBaselineAlignment*)&BaseLineAlignment);
  return BaseLineAlignment;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::set_BaseLineAlignment(Powerpoint_2k::PpBaselineAlignment BaseLineAlignment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaseLineAlignment"), DISPID(2011));
  TAutoArgs<1> _args;
  _args[1] = (int)BaseLineAlignment /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::get_FarEastLineBreakControl(Office_2k::MsoTriState* FarEastLineBreakControl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FarEastLineBreakControl"), DISPID(2012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)FarEastLineBreakControl /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
ParagraphFormatDispT<T>::get_FarEastLineBreakControl(void)
{
  Office_2k::MsoTriState FarEastLineBreakControl;
  this->get_FarEastLineBreakControl((Office_2k::MsoTriState*)&FarEastLineBreakControl);
  return FarEastLineBreakControl;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::set_FarEastLineBreakControl(Office_2k::MsoTriState FarEastLineBreakControl/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FarEastLineBreakControl"), DISPID(2012));
  TAutoArgs<1> _args;
  _args[1] = (int)FarEastLineBreakControl /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::get_WordWrap(Office_2k::MsoTriState* WordWrap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WordWrap"), DISPID(2013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)WordWrap /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
ParagraphFormatDispT<T>::get_WordWrap(void)
{
  Office_2k::MsoTriState WordWrap;
  this->get_WordWrap((Office_2k::MsoTriState*)&WordWrap);
  return WordWrap;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::set_WordWrap(Office_2k::MsoTriState WordWrap/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WordWrap"), DISPID(2013));
  TAutoArgs<1> _args;
  _args[1] = (int)WordWrap /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::get_HangingPunctuation(Office_2k::MsoTriState* HangingPunctuation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HangingPunctuation"), DISPID(2014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)HangingPunctuation /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
ParagraphFormatDispT<T>::get_HangingPunctuation(void)
{
  Office_2k::MsoTriState HangingPunctuation;
  this->get_HangingPunctuation((Office_2k::MsoTriState*)&HangingPunctuation);
  return HangingPunctuation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::set_HangingPunctuation(Office_2k::MsoTriState HangingPunctuation/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HangingPunctuation"), DISPID(2014));
  TAutoArgs<1> _args;
  _args[1] = (int)HangingPunctuation /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::get_TextDirection(Powerpoint_2k::PpDirection* TextDirection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextDirection"), DISPID(2015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)TextDirection /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpDirection __fastcall
ParagraphFormatDispT<T>::get_TextDirection(void)
{
  Powerpoint_2k::PpDirection TextDirection;
  this->get_TextDirection((Powerpoint_2k::PpDirection*)&TextDirection);
  return TextDirection;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ParagraphFormatDispT<T>::set_TextDirection(Powerpoint_2k::PpDirection TextDirection/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextDirection"), DISPID(2015));
  TAutoArgs<1> _args;
  _args[1] = (int)TextDirection /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  BulletFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493497-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BulletFormatDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
BulletFormatDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BulletFormatDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
BulletFormatDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BulletFormatDispT<T>::get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
BulletFormatDispT<T>::get_Visible(void)
{
  Office_2k::MsoTriState Visible;
  this->get_Visible((Office_2k::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BulletFormatDispT<T>::set_Visible(Office_2k::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BulletFormatDispT<T>::get_Character(int* Character/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Character"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Character /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
BulletFormatDispT<T>::get_Character(void)
{
  int Character;
  this->get_Character((int*)&Character);
  return Character;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BulletFormatDispT<T>::set_Character(int Character/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Character"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = Character /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BulletFormatDispT<T>::get_RelativeSize(float* RelativeSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RelativeSize"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RelativeSize /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
BulletFormatDispT<T>::get_RelativeSize(void)
{
  float RelativeSize;
  this->get_RelativeSize((float*)&RelativeSize);
  return RelativeSize;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BulletFormatDispT<T>::set_RelativeSize(float RelativeSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RelativeSize"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = RelativeSize /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BulletFormatDispT<T>::get_UseTextColor(Office_2k::MsoTriState* UseTextColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UseTextColor"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)UseTextColor /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
BulletFormatDispT<T>::get_UseTextColor(void)
{
  Office_2k::MsoTriState UseTextColor;
  this->get_UseTextColor((Office_2k::MsoTriState*)&UseTextColor);
  return UseTextColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BulletFormatDispT<T>::set_UseTextColor(Office_2k::MsoTriState UseTextColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UseTextColor"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = (int)UseTextColor /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BulletFormatDispT<T>::get_UseTextFont(Office_2k::MsoTriState* UseTextFont/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UseTextFont"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)UseTextFont /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
BulletFormatDispT<T>::get_UseTextFont(void)
{
  Office_2k::MsoTriState UseTextFont;
  this->get_UseTextFont((Office_2k::MsoTriState*)&UseTextFont);
  return UseTextFont;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BulletFormatDispT<T>::set_UseTextFont(Office_2k::MsoTriState UseTextFont/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UseTextFont"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = (int)UseTextFont /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BulletFormatDispT<T>::get_Font(Powerpoint_2k::FontPtr* Font/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Font**)Font /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::FontPtr __fastcall
BulletFormatDispT<T>::get_Font(void)
{
  Powerpoint_2k::FontPtr Font;
  this->get_Font((Powerpoint_2k::FontPtr*)&Font);
  return Font;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BulletFormatDispT<T>::get_Type(Powerpoint_2k::PpBulletType* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpBulletType __fastcall
BulletFormatDispT<T>::get_Type(void)
{
  Powerpoint_2k::PpBulletType Type;
  this->get_Type((Powerpoint_2k::PpBulletType*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BulletFormatDispT<T>::set_Type(Powerpoint_2k::PpBulletType Type/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(2008));
  TAutoArgs<1> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BulletFormatDispT<T>::get_Style(Powerpoint_2k::PpNumberedBulletStyle* Style/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Style"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Style /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpNumberedBulletStyle __fastcall
BulletFormatDispT<T>::get_Style(void)
{
  Powerpoint_2k::PpNumberedBulletStyle Style;
  this->get_Style((Powerpoint_2k::PpNumberedBulletStyle*)&Style);
  return Style;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BulletFormatDispT<T>::set_Style(Powerpoint_2k::PpNumberedBulletStyle Style/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Style"), DISPID(2009));
  TAutoArgs<1> _args;
  _args[1] = (int)Style /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BulletFormatDispT<T>::get_StartValue(int* StartValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartValue"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(StartValue /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
BulletFormatDispT<T>::get_StartValue(void)
{
  int StartValue;
  this->get_StartValue((int*)&StartValue);
  return StartValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BulletFormatDispT<T>::set_StartValue(int StartValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartValue"), DISPID(2010));
  TAutoArgs<1> _args;
  _args[1] = StartValue /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BulletFormatDispT<T>::Picture(BSTR Picture/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(2011));
  TAutoArgs<1> _args;
  _args[1] = Picture /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BulletFormatDispT<T>::get_Number(int* Number/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Number"), DISPID(2012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Number /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
BulletFormatDispT<T>::get_Number(void)
{
  int Number;
  this->get_Number((int*)&Number);
  return Number;
}

// *********************************************************************//
// DispIntf:  TextStyles
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493498-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextStylesDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
TextStylesDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextStylesDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
TextStylesDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextStylesDispT<T>::Item(Powerpoint_2k::PpTextStyleType Type/*[in]*/, 
                         Powerpoint_2k::TextStylePtr* Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::TextStyle**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::TextStylePtr __fastcall
TextStylesDispT<T>::Item(Powerpoint_2k::PpTextStyleType Type/*[in]*/)
{
  Powerpoint_2k::TextStylePtr Item;
  this->Item(Type, (Powerpoint_2k::TextStylePtr*)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextStylesDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
TextStylesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextStylesDispT<T>::_Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
TextStylesDispT<T>::_Index(int index/*[in]*/)
{
  TVariant _Index;
  this->_Index(index, (TVariant*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextStylesDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
TextStylesDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  TextStyle
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91493499-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextStyleDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
TextStyleDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextStyleDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
TextStyleDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextStyleDispT<T>::get_Ruler(Powerpoint_2k::RulerPtr* Ruler/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Ruler"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Ruler**)Ruler /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::RulerPtr __fastcall
TextStyleDispT<T>::get_Ruler(void)
{
  Powerpoint_2k::RulerPtr Ruler;
  this->get_Ruler((Powerpoint_2k::RulerPtr*)&Ruler);
  return Ruler;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextStyleDispT<T>::get_TextFrame(Powerpoint_2k::TextFramePtr* TextFrame/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextFrame"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::TextFrame**)TextFrame /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::TextFramePtr __fastcall
TextStyleDispT<T>::get_TextFrame(void)
{
  Powerpoint_2k::TextFramePtr TextFrame;
  this->get_TextFrame((Powerpoint_2k::TextFramePtr*)&TextFrame);
  return TextFrame;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextStyleDispT<T>::get_Levels(Powerpoint_2k::TextStyleLevelsPtr* Levels/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Levels"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::TextStyleLevels**)Levels /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::TextStyleLevelsPtr __fastcall
TextStyleDispT<T>::get_Levels(void)
{
  Powerpoint_2k::TextStyleLevelsPtr Levels;
  this->get_Levels((Powerpoint_2k::TextStyleLevelsPtr*)&Levels);
  return Levels;
}

// *********************************************************************//
// DispIntf:  TextStyleLevels
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149349A-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextStyleLevelsDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
TextStyleLevelsDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextStyleLevelsDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
TextStyleLevelsDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextStyleLevelsDispT<T>::Item(int Level/*[in]*/, 
                              Powerpoint_2k::TextStyleLevelPtr* Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Level /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::TextStyleLevel**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::TextStyleLevelPtr __fastcall
TextStyleLevelsDispT<T>::Item(int Level/*[in]*/)
{
  Powerpoint_2k::TextStyleLevelPtr Item;
  this->Item(Level, (Powerpoint_2k::TextStyleLevelPtr*)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextStyleLevelsDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
TextStyleLevelsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextStyleLevelsDispT<T>::_Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
TextStyleLevelsDispT<T>::_Index(int index/*[in]*/)
{
  TVariant _Index;
  this->_Index(index, (TVariant*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextStyleLevelsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
TextStyleLevelsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  TextStyleLevel
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149349B-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextStyleLevelDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
TextStyleLevelDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextStyleLevelDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
TextStyleLevelDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextStyleLevelDispT<T>::get_ParagraphFormat(Powerpoint_2k::ParagraphFormatPtr* ParagraphFormat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ParagraphFormat"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::ParagraphFormat**)ParagraphFormat /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::ParagraphFormatPtr __fastcall
TextStyleLevelDispT<T>::get_ParagraphFormat(void)
{
  Powerpoint_2k::ParagraphFormatPtr ParagraphFormat;
  this->get_ParagraphFormat((Powerpoint_2k::ParagraphFormatPtr*)&ParagraphFormat);
  return ParagraphFormat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextStyleLevelDispT<T>::get_Font(Powerpoint_2k::FontPtr* Font/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Font**)Font /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::FontPtr __fastcall
TextStyleLevelDispT<T>::get_Font(void)
{
  Powerpoint_2k::FontPtr Font;
  this->get_Font((Powerpoint_2k::FontPtr*)&Font);
  return Font;
}

// *********************************************************************//
// DispIntf:  HeaderFooter
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149349C-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HeaderFooterDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
HeaderFooterDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HeaderFooterDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
HeaderFooterDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HeaderFooterDispT<T>::get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
HeaderFooterDispT<T>::get_Visible(void)
{
  Office_2k::MsoTriState Visible;
  this->get_Visible((Office_2k::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HeaderFooterDispT<T>::set_Visible(Office_2k::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HeaderFooterDispT<T>::get_Text(BSTR* Text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Text /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
HeaderFooterDispT<T>::get_Text(void)
{
  BSTR Text;
  this->get_Text((BSTR*)&Text);
  return Text;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HeaderFooterDispT<T>::set_Text(BSTR Text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HeaderFooterDispT<T>::get_UseFormat(Office_2k::MsoTriState* UseFormat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UseFormat"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)UseFormat /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
HeaderFooterDispT<T>::get_UseFormat(void)
{
  Office_2k::MsoTriState UseFormat;
  this->get_UseFormat((Office_2k::MsoTriState*)&UseFormat);
  return UseFormat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HeaderFooterDispT<T>::set_UseFormat(Office_2k::MsoTriState UseFormat/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UseFormat"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = (int)UseFormat /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HeaderFooterDispT<T>::get_Format(Powerpoint_2k::PpDateTimeFormat* Format/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Format"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Format /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpDateTimeFormat __fastcall
HeaderFooterDispT<T>::get_Format(void)
{
  Powerpoint_2k::PpDateTimeFormat Format;
  this->get_Format((Powerpoint_2k::PpDateTimeFormat*)&Format);
  return Format;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
HeaderFooterDispT<T>::set_Format(Powerpoint_2k::PpDateTimeFormat Format/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Format"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = (int)Format /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  PPDialogs
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149349E-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogsDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
PPDialogsDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogsDispT<T>::Item(TVariantInParam index/*[in]*/, 
                        Powerpoint_2k::PPDialogPtr* Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PPDialog**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::PPDialogPtr __fastcall
PPDialogsDispT<T>::Item(TVariantInParam index/*[in]*/)
{
  Powerpoint_2k::PPDialogPtr Item;
  this->Item(index, (Powerpoint_2k::PPDialogPtr*)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogsDispT<T>::AddDialog(float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                             float Height/*[in]*/, Office_2k::MsoTriState Modal/*[in,def,opt]*/, 
                             LPUNKNOWN ParentWindow/*[in,def,opt]*/, 
                             Powerpoint_2k::PpDialogPositioning Position/*[in,def,opt]*/, 
                             Office_2k::MsoTriState DisplayHelp/*[in,def,opt]*/, 
                             Powerpoint_2k::PPDialogPtr* Dialog/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDialog"), DISPID(2002));
  TAutoArgs<8> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  _args[2] = Top /*[VT_R4:0]*/;
  _args[3] = Width /*[VT_R4:0]*/;
  _args[4] = Height /*[VT_R4:0]*/;
  _args[5] = (int)Modal /*[VT_USERDEFINED:0]*/;
  _args[6] = ParentWindow /*[VT_UNKNOWN:0]*/;
  _args[7] = (int)Position /*[VT_USERDEFINED:0]*/;
  _args[8] = (int)DisplayHelp /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PPDialog**)Dialog /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::PPDialogPtr __fastcall
PPDialogsDispT<T>::AddDialog(float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                             float Height/*[in]*/, Office_2k::MsoTriState Modal/*[in,def,opt]*/, 
                             LPUNKNOWN ParentWindow/*[in,def,opt]*/, 
                             Powerpoint_2k::PpDialogPositioning Position/*[in,def,opt]*/, 
                             Office_2k::MsoTriState DisplayHelp/*[in,def,opt]*/)
{
  Powerpoint_2k::PPDialogPtr Dialog;
  this->AddDialog(Left, Top, Width, Height, Modal, ParentWindow, Position, DisplayHelp, (Powerpoint_2k::PPDialogPtr*)&Dialog);
  return Dialog;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogsDispT<T>::AddTabDialog(float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                                float Height/*[in]*/, Office_2k::MsoTriState Modal/*[in,def,opt]*/, 
                                LPUNKNOWN ParentWindow/*[in,def,opt]*/, 
                                Powerpoint_2k::PpDialogPositioning Position/*[in,def,opt]*/, 
                                Office_2k::MsoTriState DisplayHelp/*[in,def,opt]*/, 
                                Powerpoint_2k::PPDialogPtr* TabDialog/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTabDialog"), DISPID(2003));
  TAutoArgs<8> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  _args[2] = Top /*[VT_R4:0]*/;
  _args[3] = Width /*[VT_R4:0]*/;
  _args[4] = Height /*[VT_R4:0]*/;
  _args[5] = (int)Modal /*[VT_USERDEFINED:0]*/;
  _args[6] = ParentWindow /*[VT_UNKNOWN:0]*/;
  _args[7] = (int)Position /*[VT_USERDEFINED:0]*/;
  _args[8] = (int)DisplayHelp /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PPDialog**)TabDialog /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::PPDialogPtr __fastcall
PPDialogsDispT<T>::AddTabDialog(float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                                float Height/*[in]*/, Office_2k::MsoTriState Modal/*[in,def,opt]*/, 
                                LPUNKNOWN ParentWindow/*[in,def,opt]*/, 
                                Powerpoint_2k::PpDialogPositioning Position/*[in,def,opt]*/, 
                                Office_2k::MsoTriState DisplayHelp/*[in,def,opt]*/)
{
  Powerpoint_2k::PPDialogPtr TabDialog;
  this->AddTabDialog(Left, Top, Width, Height, Modal, ParentWindow, Position, DisplayHelp, (Powerpoint_2k::PPDialogPtr*)&TabDialog);
  return TabDialog;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogsDispT<T>::LoadDialog(BSTR resourceDLL/*[in]*/, int nResID/*[in]*/, 
                              Office_2k::MsoTriState bModal/*[in,def,opt]*/, 
                              LPUNKNOWN ParentWindow/*[in,def,opt]*/, 
                              Powerpoint_2k::PpDialogPositioning Position/*[in,def,opt]*/, 
                              Powerpoint_2k::PPDialogPtr* LoadDialog/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LoadDialog"), DISPID(2004));
  TAutoArgs<5> _args;
  _args[1] = resourceDLL /*[VT_BSTR:0]*/;
  _args[2] = nResID /*[VT_INT:0]*/;
  _args[3] = (int)bModal /*[VT_USERDEFINED:0]*/;
  _args[4] = ParentWindow /*[VT_UNKNOWN:0]*/;
  _args[5] = (int)Position /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PPDialog**)LoadDialog /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::PPDialogPtr __fastcall
PPDialogsDispT<T>::LoadDialog(BSTR resourceDLL/*[in]*/, int nResID/*[in]*/, 
                              Office_2k::MsoTriState bModal/*[in,def,opt]*/, 
                              LPUNKNOWN ParentWindow/*[in,def,opt]*/, 
                              Powerpoint_2k::PpDialogPositioning Position/*[in,def,opt]*/)
{
  Powerpoint_2k::PPDialogPtr LoadDialog;
  this->LoadDialog(resourceDLL, nResID, bModal, ParentWindow, Position, (Powerpoint_2k::PPDialogPtr*)&LoadDialog);
  return LoadDialog;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogsDispT<T>::AddAlert(Powerpoint_2k::PPAlertPtr* Alert/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddAlert"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PPAlert**)Alert /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::PPAlertPtr __fastcall
PPDialogsDispT<T>::AddAlert(void)
{
  Powerpoint_2k::PPAlertPtr Alert;
  this->AddAlert((Powerpoint_2k::PPAlertPtr*)&Alert);
  return Alert;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogsDispT<T>::get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tags"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Tags**)Tags /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::TagsPtr __fastcall
PPDialogsDispT<T>::get_Tags(void)
{
  Powerpoint_2k::TagsPtr Tags;
  this->get_Tags((Powerpoint_2k::TagsPtr*)&Tags);
  return Tags;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogsDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPDialogsDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogsDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogsDispT<T>::RunCharacterAlert(BSTR Text/*[in]*/, Powerpoint_2k::PpAlertType Type/*[in]*/, 
                                     Powerpoint_2k::PpAlertIcon icon/*[in]*/, 
                                     LPUNKNOWN ParentWindow/*[in,def,opt]*/, 
                                     Powerpoint_2k::PpAlertButton* RunCharacterAlert/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RunCharacterAlert"), DISPID(2008));
  TAutoArgs<4> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  _args[2] = (int)Type /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)icon /*[VT_USERDEFINED:0]*/;
  _args[4] = ParentWindow /*[VT_UNKNOWN:0]*/;
  return OutRetValSetterPtr((int*)RunCharacterAlert /*[VT_USERDEFINED:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::PpAlertButton __fastcall
PPDialogsDispT<T>::RunCharacterAlert(BSTR Text/*[in]*/, Powerpoint_2k::PpAlertType Type/*[in]*/, 
                                     Powerpoint_2k::PpAlertIcon icon/*[in]*/, 
                                     LPUNKNOWN ParentWindow/*[in,def,opt]*/)
{
  Powerpoint_2k::PpAlertButton RunCharacterAlert;
  this->RunCharacterAlert(Text, Type, icon, ParentWindow, (Powerpoint_2k::PpAlertButton*)&RunCharacterAlert);
  return RunCharacterAlert;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogsDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
PPDialogsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogsDispT<T>::_Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
PPDialogsDispT<T>::_Index(int index/*[in]*/)
{
  TVariant _Index;
  this->_Index(index, (TVariant*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PPDialogsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  PPAlert
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9149349F-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPAlertDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
PPAlertDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPAlertDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PPAlertDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPAlertDispT<T>::Run(BSTR Title/*[in]*/, int Type/*[in]*/, BSTR Text/*[in]*/, BSTR leftBtn/*[in]*/, 
                     BSTR middleBtn/*[in]*/, BSTR rightBtn/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Run"), DISPID(2003));
  TAutoArgs<6> _args;
  _args[1] = Title /*[VT_BSTR:0]*/;
  _args[2] = Type /*[VT_INT:0]*/;
  _args[3] = Text /*[VT_BSTR:0]*/;
  _args[4] = leftBtn /*[VT_BSTR:0]*/;
  _args[5] = middleBtn /*[VT_BSTR:0]*/;
  _args[6] = rightBtn /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPAlertDispT<T>::get_PressedButton(int* PressedButton/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PressedButton"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(PressedButton /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PPAlertDispT<T>::get_PressedButton(void)
{
  int PressedButton;
  this->get_PressedButton((int*)&PressedButton);
  return PressedButton;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPAlertDispT<T>::get_OnButton(BSTR* OnButton/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnButton"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnButton /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPAlertDispT<T>::get_OnButton(void)
{
  BSTR OnButton;
  this->get_OnButton((BSTR*)&OnButton);
  return OnButton;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPAlertDispT<T>::set_OnButton(BSTR OnButton/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnButton"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = OnButton /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  PPDialog
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934A0-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
PPDialogDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PPDialogDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::get_Style(Powerpoint_2k::PpDialogStyle* Style/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Style"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Style /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpDialogStyle __fastcall
PPDialogDispT<T>::get_Style(void)
{
  Powerpoint_2k::PpDialogStyle Style;
  this->get_Style((Powerpoint_2k::PpDialogStyle*)&Style);
  return Style;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::get_Mode(Powerpoint_2k::PpDialogMode* Mode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Mode"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Mode /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpDialogMode __fastcall
PPDialogDispT<T>::get_Mode(void)
{
  Powerpoint_2k::PpDialogMode Mode;
  this->get_Mode((Powerpoint_2k::PpDialogMode*)&Mode);
  return Mode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::set_Mode(Powerpoint_2k::PpDialogMode Mode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Mode"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = (int)Mode /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::get_HelpId(int* HelpId/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpId"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HelpId /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PPDialogDispT<T>::get_HelpId(void)
{
  int HelpId;
  this->get_HelpId((int*)&HelpId);
  return HelpId;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::set_HelpId(int HelpId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpId"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = HelpId /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::get_HideOnIdle(Office_2k::MsoTriState* HideOnIdle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HideOnIdle"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)HideOnIdle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPDialogDispT<T>::get_HideOnIdle(void)
{
  Office_2k::MsoTriState HideOnIdle;
  this->get_HideOnIdle((Office_2k::MsoTriState*)&HideOnIdle);
  return HideOnIdle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::set_HideOnIdle(Office_2k::MsoTriState HideOnIdle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HideOnIdle"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = (int)HideOnIdle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::get_resourceDLL(BSTR* resourceDLL/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("resourceDLL"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(resourceDLL /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPDialogDispT<T>::get_resourceDLL(void)
{
  BSTR resourceDLL;
  this->get_resourceDLL((BSTR*)&resourceDLL);
  return resourceDLL;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::set_resourceDLL(BSTR resourceDLL/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("resourceDLL"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = resourceDLL /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::get_Caption(BSTR* Caption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Caption /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPDialogDispT<T>::get_Caption(void)
{
  BSTR Caption;
  this->get_Caption((BSTR*)&Caption);
  return Caption;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::set_Caption(BSTR Caption/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(2008));
  TAutoArgs<1> _args;
  _args[1] = Caption /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::get_Left(float* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPDialogDispT<T>::get_Left(void)
{
  float Left;
  this->get_Left((float*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::set_Left(float Left/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(2009));
  TAutoArgs<1> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::get_Top(float* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPDialogDispT<T>::get_Top(void)
{
  float Top;
  this->get_Top((float*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::set_Top(float Top/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(2010));
  TAutoArgs<1> _args;
  _args[1] = Top /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::get_Width(float* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(2011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPDialogDispT<T>::get_Width(void)
{
  float Width;
  this->get_Width((float*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::set_Width(float Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(2011));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::get_Height(float* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(2012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPDialogDispT<T>::get_Height(void)
{
  float Height;
  this->get_Height((float*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::set_Height(float Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(2012));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::get_ClientLeft(float* ClientLeft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClientLeft"), DISPID(2013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ClientLeft /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPDialogDispT<T>::get_ClientLeft(void)
{
  float ClientLeft;
  this->get_ClientLeft((float*)&ClientLeft);
  return ClientLeft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::get_ClientTop(float* ClientTop/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClientTop"), DISPID(2014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ClientTop /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPDialogDispT<T>::get_ClientTop(void)
{
  float ClientTop;
  this->get_ClientTop((float*)&ClientTop);
  return ClientTop;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::get_ClientWidth(float* ClientWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClientWidth"), DISPID(2015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ClientWidth /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPDialogDispT<T>::get_ClientWidth(void)
{
  float ClientWidth;
  this->get_ClientWidth((float*)&ClientWidth);
  return ClientWidth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::get_ClientHeight(float* ClientHeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClientHeight"), DISPID(2016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ClientHeight /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPDialogDispT<T>::get_ClientHeight(void)
{
  float ClientHeight;
  this->get_ClientHeight((float*)&ClientHeight);
  return ClientHeight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(2017));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPDialogDispT<T>::get_Visible(void)
{
  Office_2k::MsoTriState Visible;
  this->get_Visible((Office_2k::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::set_Visible(Office_2k::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(2017));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::get_Controls(Powerpoint_2k::PPControlsPtr* Controls/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Controls"), DISPID(2018));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PPControls**)Controls /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PPControlsPtr __fastcall
PPDialogDispT<T>::get_Controls(void)
{
  Powerpoint_2k::PPControlsPtr Controls;
  this->get_Controls((Powerpoint_2k::PPControlsPtr*)&Controls);
  return Controls;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tags"), DISPID(2019));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Tags**)Tags /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::TagsPtr __fastcall
PPDialogDispT<T>::get_Tags(void)
{
  Powerpoint_2k::TagsPtr Tags;
  this->get_Tags((Powerpoint_2k::TagsPtr*)&Tags);
  return Tags;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(2020));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPDialogDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(2020));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::get_Sheets(Powerpoint_2k::PPTabSheetsPtr* Sheets/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Sheets"), DISPID(2021));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PPTabSheets**)Sheets /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PPTabSheetsPtr __fastcall
PPDialogDispT<T>::get_Sheets(void)
{
  Powerpoint_2k::PPTabSheetsPtr Sheets;
  this->get_Sheets((Powerpoint_2k::PPTabSheetsPtr*)&Sheets);
  return Sheets;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::get_TabControl(Powerpoint_2k::PPTabControlPtr* TabControl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabControl"), DISPID(2022));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PPTabControl**)TabControl /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PPTabControlPtr __fastcall
PPDialogDispT<T>::get_TabControl(void)
{
  Powerpoint_2k::PPTabControlPtr TabControl;
  this->get_TabControl((Powerpoint_2k::PPTabControlPtr*)&TabControl);
  return TabControl;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::get_DelayTime(int* DelayTime/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DelayTime"), DISPID(2023));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DelayTime /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PPDialogDispT<T>::get_DelayTime(void)
{
  int DelayTime;
  this->get_DelayTime((int*)&DelayTime);
  return DelayTime;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::set_DelayTime(int DelayTime/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DelayTime"), DISPID(2023));
  TAutoArgs<1> _args;
  _args[1] = DelayTime /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::SaveDialog(BSTR FileName/*[in]*/, int* SaveDialog/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SaveDialog"), DISPID(2024));
  TAutoArgs<1> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(SaveDialog /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
PPDialogDispT<T>::SaveDialog(BSTR FileName/*[in]*/)
{
  int SaveDialog;
  this->SaveDialog(FileName, (int*)&SaveDialog);
  return SaveDialog;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::Terminate()
{
  _TDispID _dispid(*this, OLETEXT("Terminate"), DISPID(2025));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::get_HWND(long* HWND/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HWND"), DISPID(2026));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HWND /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PPDialogDispT<T>::get_HWND(void)
{
  long HWND;
  this->get_HWND((long*)&HWND);
  return HWND;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::get_OnTerminate(BSTR* OnTerminate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnTerminate"), DISPID(2027));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnTerminate /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPDialogDispT<T>::get_OnTerminate(void)
{
  BSTR OnTerminate;
  this->get_OnTerminate((BSTR*)&OnTerminate);
  return OnTerminate;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::set_OnTerminate(BSTR OnTerminate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnTerminate"), DISPID(2027));
  TAutoArgs<1> _args;
  _args[1] = OnTerminate /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::get_OnIdle(BSTR* OnIdle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnIdle"), DISPID(2028));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnIdle /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPDialogDispT<T>::get_OnIdle(void)
{
  BSTR OnIdle;
  this->get_OnIdle((BSTR*)&OnIdle);
  return OnIdle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::set_OnIdle(BSTR OnIdle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnIdle"), DISPID(2028));
  TAutoArgs<1> _args;
  _args[1] = OnIdle /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::get_OnMouseDown(BSTR* OnMouseDown/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseDown"), DISPID(2029));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnMouseDown /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPDialogDispT<T>::get_OnMouseDown(void)
{
  BSTR OnMouseDown;
  this->get_OnMouseDown((BSTR*)&OnMouseDown);
  return OnMouseDown;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::set_OnMouseDown(BSTR OnMouseDown/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseDown"), DISPID(2029));
  TAutoArgs<1> _args;
  _args[1] = OnMouseDown /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::get_OnMouseUp(BSTR* OnMouseUp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseUp"), DISPID(2030));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnMouseUp /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPDialogDispT<T>::get_OnMouseUp(void)
{
  BSTR OnMouseUp;
  this->get_OnMouseUp((BSTR*)&OnMouseUp);
  return OnMouseUp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::set_OnMouseUp(BSTR OnMouseUp/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseUp"), DISPID(2030));
  TAutoArgs<1> _args;
  _args[1] = OnMouseUp /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::get_OnKeyPressed(BSTR* OnKeyPressed/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyPressed"), DISPID(2031));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnKeyPressed /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPDialogDispT<T>::get_OnKeyPressed(void)
{
  BSTR OnKeyPressed;
  this->get_OnKeyPressed((BSTR*)&OnKeyPressed);
  return OnKeyPressed;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::set_OnKeyPressed(BSTR OnKeyPressed/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyPressed"), DISPID(2031));
  TAutoArgs<1> _args;
  _args[1] = OnKeyPressed /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::get_OnTimer(BSTR* OnTimer/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnTimer"), DISPID(2032));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnTimer /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPDialogDispT<T>::get_OnTimer(void)
{
  BSTR OnTimer;
  this->get_OnTimer((BSTR*)&OnTimer);
  return OnTimer;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::set_OnTimer(BSTR OnTimer/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnTimer"), DISPID(2032));
  TAutoArgs<1> _args;
  _args[1] = OnTimer /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::get_OnActivate(BSTR* OnActivate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnActivate"), DISPID(2033));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnActivate /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPDialogDispT<T>::get_OnActivate(void)
{
  BSTR OnActivate;
  this->get_OnActivate((BSTR*)&OnActivate);
  return OnActivate;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDialogDispT<T>::set_OnActivate(BSTR OnActivate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnActivate"), DISPID(2033));
  TAutoArgs<1> _args;
  _args[1] = OnActivate /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  PPTabSheet
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934A1-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPTabSheetDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
PPTabSheetDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPTabSheetDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PPTabSheetDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPTabSheetDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPTabSheetDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPTabSheetDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPTabSheetDispT<T>::Select()
{
  _TDispID _dispid(*this, OLETEXT("Select"), DISPID(2004));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPTabSheetDispT<T>::get_ClientLeft(float* ClientLeft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClientLeft"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ClientLeft /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPTabSheetDispT<T>::get_ClientLeft(void)
{
  float ClientLeft;
  this->get_ClientLeft((float*)&ClientLeft);
  return ClientLeft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPTabSheetDispT<T>::get_ClientTop(float* ClientTop/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClientTop"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ClientTop /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPTabSheetDispT<T>::get_ClientTop(void)
{
  float ClientTop;
  this->get_ClientTop((float*)&ClientTop);
  return ClientTop;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPTabSheetDispT<T>::get_ClientWidth(float* ClientWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClientWidth"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ClientWidth /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPTabSheetDispT<T>::get_ClientWidth(void)
{
  float ClientWidth;
  this->get_ClientWidth((float*)&ClientWidth);
  return ClientWidth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPTabSheetDispT<T>::get_ClientHeight(float* ClientHeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClientHeight"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ClientHeight /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPTabSheetDispT<T>::get_ClientHeight(void)
{
  float ClientHeight;
  this->get_ClientHeight((float*)&ClientHeight);
  return ClientHeight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPTabSheetDispT<T>::get_Controls(Powerpoint_2k::PPControlsPtr* Controls/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Controls"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PPControls**)Controls /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PPControlsPtr __fastcall
PPTabSheetDispT<T>::get_Controls(void)
{
  Powerpoint_2k::PPControlsPtr Controls;
  this->get_Controls((Powerpoint_2k::PPControlsPtr*)&Controls);
  return Controls;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPTabSheetDispT<T>::get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tags"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Tags**)Tags /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::TagsPtr __fastcall
PPTabSheetDispT<T>::get_Tags(void)
{
  Powerpoint_2k::TagsPtr Tags;
  this->get_Tags((Powerpoint_2k::TagsPtr*)&Tags);
  return Tags;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPTabSheetDispT<T>::get_OnActivate(BSTR* OnActivate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnActivate"), DISPID(2011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnActivate /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPTabSheetDispT<T>::get_OnActivate(void)
{
  BSTR OnActivate;
  this->get_OnActivate((BSTR*)&OnActivate);
  return OnActivate;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPTabSheetDispT<T>::set_OnActivate(BSTR OnActivate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnActivate"), DISPID(2011));
  TAutoArgs<1> _args;
  _args[1] = OnActivate /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  PPControls
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934A2-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlsDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
PPControlsDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlsDispT<T>::Item(TVariantInParam index/*[in]*/, 
                         Powerpoint_2k::PPControlPtr* Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PPControl**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::PPControlPtr __fastcall
PPControlsDispT<T>::Item(TVariantInParam index/*[in]*/)
{
  Powerpoint_2k::PPControlPtr Item;
  this->Item(index, (Powerpoint_2k::PPControlPtr*)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlsDispT<T>::AddPushButton(float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                                  float Height/*[in]*/, 
                                  Powerpoint_2k::PPPushButtonPtr* PushButton/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddPushButton"), DISPID(2002));
  TAutoArgs<4> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  _args[2] = Top /*[VT_R4:0]*/;
  _args[3] = Width /*[VT_R4:0]*/;
  _args[4] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PPPushButton**)PushButton /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::PPPushButtonPtr __fastcall
PPControlsDispT<T>::AddPushButton(float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                                  float Height/*[in]*/)
{
  Powerpoint_2k::PPPushButtonPtr PushButton;
  this->AddPushButton(Left, Top, Width, Height, (Powerpoint_2k::PPPushButtonPtr*)&PushButton);
  return PushButton;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlsDispT<T>::AddToggleButton(float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                                    float Height/*[in]*/, 
                                    Powerpoint_2k::PPToggleButtonPtr* ToggleButton/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddToggleButton"), DISPID(2003));
  TAutoArgs<4> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  _args[2] = Top /*[VT_R4:0]*/;
  _args[3] = Width /*[VT_R4:0]*/;
  _args[4] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PPToggleButton**)ToggleButton /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::PPToggleButtonPtr __fastcall
PPControlsDispT<T>::AddToggleButton(float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                                    float Height/*[in]*/)
{
  Powerpoint_2k::PPToggleButtonPtr ToggleButton;
  this->AddToggleButton(Left, Top, Width, Height, (Powerpoint_2k::PPToggleButtonPtr*)&ToggleButton);
  return ToggleButton;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlsDispT<T>::AddBitmapButton(float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                                    float Height/*[in]*/, 
                                    Powerpoint_2k::PPBitmapButtonPtr* BitmapButton/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddBitmapButton"), DISPID(2004));
  TAutoArgs<4> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  _args[2] = Top /*[VT_R4:0]*/;
  _args[3] = Width /*[VT_R4:0]*/;
  _args[4] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PPBitmapButton**)BitmapButton /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::PPBitmapButtonPtr __fastcall
PPControlsDispT<T>::AddBitmapButton(float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                                    float Height/*[in]*/)
{
  Powerpoint_2k::PPBitmapButtonPtr BitmapButton;
  this->AddBitmapButton(Left, Top, Width, Height, (Powerpoint_2k::PPBitmapButtonPtr*)&BitmapButton);
  return BitmapButton;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlsDispT<T>::AddListBox(float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                               float Height/*[in]*/, 
                               Powerpoint_2k::PPListBoxPtr* ListBox/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddListBox"), DISPID(2005));
  TAutoArgs<4> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  _args[2] = Top /*[VT_R4:0]*/;
  _args[3] = Width /*[VT_R4:0]*/;
  _args[4] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PPListBox**)ListBox /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::PPListBoxPtr __fastcall
PPControlsDispT<T>::AddListBox(float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                               float Height/*[in]*/)
{
  Powerpoint_2k::PPListBoxPtr ListBox;
  this->AddListBox(Left, Top, Width, Height, (Powerpoint_2k::PPListBoxPtr*)&ListBox);
  return ListBox;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlsDispT<T>::AddCheckBox(float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                                float Height/*[in]*/, 
                                Powerpoint_2k::PPCheckBoxPtr* CheckBox/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddCheckBox"), DISPID(2006));
  TAutoArgs<4> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  _args[2] = Top /*[VT_R4:0]*/;
  _args[3] = Width /*[VT_R4:0]*/;
  _args[4] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PPCheckBox**)CheckBox /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::PPCheckBoxPtr __fastcall
PPControlsDispT<T>::AddCheckBox(float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                                float Height/*[in]*/)
{
  Powerpoint_2k::PPCheckBoxPtr CheckBox;
  this->AddCheckBox(Left, Top, Width, Height, (Powerpoint_2k::PPCheckBoxPtr*)&CheckBox);
  return CheckBox;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlsDispT<T>::AddRadioCluster(float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                                    float Height/*[in]*/, 
                                    Powerpoint_2k::PPRadioClusterPtr* RadioCluster/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddRadioCluster"), DISPID(2007));
  TAutoArgs<4> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  _args[2] = Top /*[VT_R4:0]*/;
  _args[3] = Width /*[VT_R4:0]*/;
  _args[4] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PPRadioCluster**)RadioCluster /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::PPRadioClusterPtr __fastcall
PPControlsDispT<T>::AddRadioCluster(float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                                    float Height/*[in]*/)
{
  Powerpoint_2k::PPRadioClusterPtr RadioCluster;
  this->AddRadioCluster(Left, Top, Width, Height, (Powerpoint_2k::PPRadioClusterPtr*)&RadioCluster);
  return RadioCluster;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlsDispT<T>::AddStaticText(float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                                  float Height/*[in]*/, 
                                  Powerpoint_2k::PPStaticTextPtr* StaticText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddStaticText"), DISPID(2008));
  TAutoArgs<4> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  _args[2] = Top /*[VT_R4:0]*/;
  _args[3] = Width /*[VT_R4:0]*/;
  _args[4] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PPStaticText**)StaticText /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::PPStaticTextPtr __fastcall
PPControlsDispT<T>::AddStaticText(float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                                  float Height/*[in]*/)
{
  Powerpoint_2k::PPStaticTextPtr StaticText;
  this->AddStaticText(Left, Top, Width, Height, (Powerpoint_2k::PPStaticTextPtr*)&StaticText);
  return StaticText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlsDispT<T>::AddEditText(float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                                float Height/*[in]*/, TVariantInParam VerticalScrollBar/*[in,opt]*/
                                , Powerpoint_2k::PPEditTextPtr* EditText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddEditText"), DISPID(2009));
  TAutoArgs<5> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  _args[2] = Top /*[VT_R4:0]*/;
  _args[3] = Width /*[VT_R4:0]*/;
  _args[4] = Height /*[VT_R4:0]*/;
  _args[5] = VerticalScrollBar /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PPEditText**)EditText /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::PPEditTextPtr __fastcall
PPControlsDispT<T>::AddEditText(float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                                float Height/*[in]*/, TVariantInParam VerticalScrollBar/*[in,opt]*/)
{
  Powerpoint_2k::PPEditTextPtr EditText;
  this->AddEditText(Left, Top, Width, Height, VerticalScrollBar, (Powerpoint_2k::PPEditTextPtr*)&EditText);
  return EditText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlsDispT<T>::AddIcon(float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                            float Height/*[in]*/, Powerpoint_2k::PPIconPtr* icon/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddIcon"), DISPID(2010));
  TAutoArgs<4> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  _args[2] = Top /*[VT_R4:0]*/;
  _args[3] = Width /*[VT_R4:0]*/;
  _args[4] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PPIcon**)icon /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::PPIconPtr __fastcall
PPControlsDispT<T>::AddIcon(float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                            float Height/*[in]*/)
{
  Powerpoint_2k::PPIconPtr icon;
  this->AddIcon(Left, Top, Width, Height, (Powerpoint_2k::PPIconPtr*)&icon);
  return icon;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlsDispT<T>::AddBitmap(float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                              float Height/*[in]*/, 
                              Powerpoint_2k::PPBitmapPtr* Bitmap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddBitmap"), DISPID(2011));
  TAutoArgs<4> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  _args[2] = Top /*[VT_R4:0]*/;
  _args[3] = Width /*[VT_R4:0]*/;
  _args[4] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PPBitmap**)Bitmap /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::PPBitmapPtr __fastcall
PPControlsDispT<T>::AddBitmap(float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                              float Height/*[in]*/)
{
  Powerpoint_2k::PPBitmapPtr Bitmap;
  this->AddBitmap(Left, Top, Width, Height, (Powerpoint_2k::PPBitmapPtr*)&Bitmap);
  return Bitmap;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlsDispT<T>::AddSpinner(float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                               float Height/*[in]*/, 
                               Powerpoint_2k::PPSpinnerPtr* Spinner/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddSpinner"), DISPID(2012));
  TAutoArgs<4> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  _args[2] = Top /*[VT_R4:0]*/;
  _args[3] = Width /*[VT_R4:0]*/;
  _args[4] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PPSpinner**)Spinner /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::PPSpinnerPtr __fastcall
PPControlsDispT<T>::AddSpinner(float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                               float Height/*[in]*/)
{
  Powerpoint_2k::PPSpinnerPtr Spinner;
  this->AddSpinner(Left, Top, Width, Height, (Powerpoint_2k::PPSpinnerPtr*)&Spinner);
  return Spinner;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlsDispT<T>::AddScrollBar(Powerpoint_2k::PpScrollBarStyle Style/*[in]*/, float Left/*[in]*/, 
                                 float Top/*[in]*/, float Width/*[in]*/, float Height/*[in]*/, 
                                 Powerpoint_2k::PPScrollBarPtr* ScrollBar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddScrollBar"), DISPID(2013));
  TAutoArgs<5> _args;
  _args[1] = (int)Style /*[VT_USERDEFINED:0]*/;
  _args[2] = Left /*[VT_R4:0]*/;
  _args[3] = Top /*[VT_R4:0]*/;
  _args[4] = Width /*[VT_R4:0]*/;
  _args[5] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PPScrollBar**)ScrollBar /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::PPScrollBarPtr __fastcall
PPControlsDispT<T>::AddScrollBar(Powerpoint_2k::PpScrollBarStyle Style/*[in]*/, float Left/*[in]*/, 
                                 float Top/*[in]*/, float Width/*[in]*/, float Height/*[in]*/)
{
  Powerpoint_2k::PPScrollBarPtr ScrollBar;
  this->AddScrollBar(Style, Left, Top, Width, Height, (Powerpoint_2k::PPScrollBarPtr*)&ScrollBar);
  return ScrollBar;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlsDispT<T>::AddGroupBox(float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                                float Height/*[in]*/, 
                                Powerpoint_2k::PPGroupBoxPtr* GroupBox/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddGroupBox"), DISPID(2014));
  TAutoArgs<4> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  _args[2] = Top /*[VT_R4:0]*/;
  _args[3] = Width /*[VT_R4:0]*/;
  _args[4] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PPGroupBox**)GroupBox /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::PPGroupBoxPtr __fastcall
PPControlsDispT<T>::AddGroupBox(float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                                float Height/*[in]*/)
{
  Powerpoint_2k::PPGroupBoxPtr GroupBox;
  this->AddGroupBox(Left, Top, Width, Height, (Powerpoint_2k::PPGroupBoxPtr*)&GroupBox);
  return GroupBox;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlsDispT<T>::AddDropDown(float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                                float Height/*[in]*/, 
                                Powerpoint_2k::PPDropDownPtr* DropDown/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDropDown"), DISPID(2015));
  TAutoArgs<4> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  _args[2] = Top /*[VT_R4:0]*/;
  _args[3] = Width /*[VT_R4:0]*/;
  _args[4] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PPDropDown**)DropDown /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::PPDropDownPtr __fastcall
PPControlsDispT<T>::AddDropDown(float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                                float Height/*[in]*/)
{
  Powerpoint_2k::PPDropDownPtr DropDown;
  this->AddDropDown(Left, Top, Width, Height, (Powerpoint_2k::PPDropDownPtr*)&DropDown);
  return DropDown;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlsDispT<T>::AddDropDownEdit(float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                                    float Height/*[in]*/, 
                                    Powerpoint_2k::PPDropDownEditPtr* DropDownEdit/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDropDownEdit"), DISPID(2016));
  TAutoArgs<4> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  _args[2] = Top /*[VT_R4:0]*/;
  _args[3] = Width /*[VT_R4:0]*/;
  _args[4] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PPDropDownEdit**)DropDownEdit /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::PPDropDownEditPtr __fastcall
PPControlsDispT<T>::AddDropDownEdit(float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                                    float Height/*[in]*/)
{
  Powerpoint_2k::PPDropDownEditPtr DropDownEdit;
  this->AddDropDownEdit(Left, Top, Width, Height, (Powerpoint_2k::PPDropDownEditPtr*)&DropDownEdit);
  return DropDownEdit;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlsDispT<T>::AddMiniature(float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                                 float Height/*[in]*/, 
                                 Powerpoint_2k::PPSlideMiniaturePtr* Miniature/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddMiniature"), DISPID(2017));
  TAutoArgs<4> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  _args[2] = Top /*[VT_R4:0]*/;
  _args[3] = Width /*[VT_R4:0]*/;
  _args[4] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PPSlideMiniature**)Miniature /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::PPSlideMiniaturePtr __fastcall
PPControlsDispT<T>::AddMiniature(float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                                 float Height/*[in]*/)
{
  Powerpoint_2k::PPSlideMiniaturePtr Miniature;
  this->AddMiniature(Left, Top, Width, Height, (Powerpoint_2k::PPSlideMiniaturePtr*)&Miniature);
  return Miniature;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlsDispT<T>::AddFrame(float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                             float Height/*[in]*/, Powerpoint_2k::PPFramePtr* Frame/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddFrame"), DISPID(2018));
  TAutoArgs<4> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  _args[2] = Top /*[VT_R4:0]*/;
  _args[3] = Width /*[VT_R4:0]*/;
  _args[4] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PPFrame**)Frame /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::PPFramePtr __fastcall
PPControlsDispT<T>::AddFrame(float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                             float Height/*[in]*/)
{
  Powerpoint_2k::PPFramePtr Frame;
  this->AddFrame(Left, Top, Width, Height, (Powerpoint_2k::PPFramePtr*)&Frame);
  return Frame;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlsDispT<T>::get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(2019));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPControlsDispT<T>::get_Visible(void)
{
  Office_2k::MsoTriState Visible;
  this->get_Visible((Office_2k::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlsDispT<T>::set_Visible(Office_2k::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(2019));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlsDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
PPControlsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlsDispT<T>::_Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
PPControlsDispT<T>::_Index(int index/*[in]*/)
{
  TVariant _Index;
  this->_Index(index, (TVariant*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PPControlsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  PPTabSheets
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934A3-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPTabSheetsDispT<T>::Item(TVariantInParam index/*[in]*/, 
                          Powerpoint_2k::PPTabSheetPtr* Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PPTabSheet**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::PPTabSheetPtr __fastcall
PPTabSheetsDispT<T>::Item(TVariantInParam index/*[in]*/)
{
  Powerpoint_2k::PPTabSheetPtr Item;
  this->Item(index, (Powerpoint_2k::PPTabSheetPtr*)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPTabSheetsDispT<T>::Add(BSTR Name/*[in]*/, Powerpoint_2k::PPTabSheetPtr* Add/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2001));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PPTabSheet**)Add /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::PPTabSheetPtr __fastcall
PPTabSheetsDispT<T>::Add(BSTR Name/*[in]*/)
{
  Powerpoint_2k::PPTabSheetPtr Add;
  this->Add(Name, (Powerpoint_2k::PPTabSheetPtr*)&Add);
  return Add;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPTabSheetsDispT<T>::get_ActiveSheet(Powerpoint_2k::PPTabSheetPtr* ActiveSheet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveSheet"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PPTabSheet**)ActiveSheet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PPTabSheetPtr __fastcall
PPTabSheetsDispT<T>::get_ActiveSheet(void)
{
  Powerpoint_2k::PPTabSheetPtr ActiveSheet;
  this->get_ActiveSheet((Powerpoint_2k::PPTabSheetPtr*)&ActiveSheet);
  return ActiveSheet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPTabSheetsDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPTabSheetsDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPTabSheetsDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPTabSheetsDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
PPTabSheetsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPTabSheetsDispT<T>::_Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
PPTabSheetsDispT<T>::_Index(int index/*[in]*/)
{
  TVariant _Index;
  this->_Index(index, (TVariant*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPTabSheetsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PPTabSheetsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  PPControl
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {914934A4-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
PPControlDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PPControlDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlDispT<T>::get_Enable(Office_2k::MsoTriState* Enable/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enable"), DISPID(1003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Enable /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPControlDispT<T>::get_Enable(void)
{
  Office_2k::MsoTriState Enable;
  this->get_Enable((Office_2k::MsoTriState*)&Enable);
  return Enable;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlDispT<T>::set_Enable(Office_2k::MsoTriState Enable/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enable"), DISPID(1003));
  TAutoArgs<1> _args;
  _args[1] = (int)Enable /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlDispT<T>::get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPControlDispT<T>::get_Visible(void)
{
  Office_2k::MsoTriState Visible;
  this->get_Visible((Office_2k::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlDispT<T>::set_Visible(Office_2k::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1004));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlDispT<T>::get_Focus(Office_2k::MsoTriState* Focus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Focus"), DISPID(1005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Focus /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPControlDispT<T>::get_Focus(void)
{
  Office_2k::MsoTriState Focus;
  this->get_Focus((Office_2k::MsoTriState*)&Focus);
  return Focus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlDispT<T>::set_Focus(Office_2k::MsoTriState Focus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Focus"), DISPID(1005));
  TAutoArgs<1> _args;
  _args[1] = (int)Focus /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlDispT<T>::get_Label(BSTR* Label/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(1006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Label /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPControlDispT<T>::get_Label(void)
{
  BSTR Label;
  this->get_Label((BSTR*)&Label);
  return Label;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlDispT<T>::set_Label(BSTR Label/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(1006));
  TAutoArgs<1> _args;
  _args[1] = Label /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlDispT<T>::get_HelpId(int* HelpId/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpId"), DISPID(1007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HelpId /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PPControlDispT<T>::get_HelpId(void)
{
  int HelpId;
  this->get_HelpId((int*)&HelpId);
  return HelpId;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlDispT<T>::set_HelpId(int HelpId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpId"), DISPID(1007));
  TAutoArgs<1> _args;
  _args[1] = HelpId /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlDispT<T>::get_Left(float* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPControlDispT<T>::get_Left(void)
{
  float Left;
  this->get_Left((float*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlDispT<T>::set_Left(float Left/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1008));
  TAutoArgs<1> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlDispT<T>::get_Top(float* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPControlDispT<T>::get_Top(void)
{
  float Top;
  this->get_Top((float*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlDispT<T>::set_Top(float Top/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1009));
  TAutoArgs<1> _args;
  _args[1] = Top /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlDispT<T>::get_Width(float* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPControlDispT<T>::get_Width(void)
{
  float Width;
  this->get_Width((float*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlDispT<T>::set_Width(float Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1010));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlDispT<T>::get_Height(float* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPControlDispT<T>::get_Height(void)
{
  float Height;
  this->get_Height((float*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlDispT<T>::set_Height(float Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1011));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlDispT<T>::get_HWND(long* HWND/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HWND"), DISPID(1012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HWND /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PPControlDispT<T>::get_HWND(void)
{
  long HWND;
  this->get_HWND((long*)&HWND);
  return HWND;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlDispT<T>::get_OnSetFocus(BSTR* OnSetFocus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnSetFocus"), DISPID(1013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnSetFocus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPControlDispT<T>::get_OnSetFocus(void)
{
  BSTR OnSetFocus;
  this->get_OnSetFocus((BSTR*)&OnSetFocus);
  return OnSetFocus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlDispT<T>::set_OnSetFocus(BSTR OnSetFocus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnSetFocus"), DISPID(1013));
  TAutoArgs<1> _args;
  _args[1] = OnSetFocus /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlDispT<T>::get_OnKillFocus(BSTR* OnKillFocus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKillFocus"), DISPID(1014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnKillFocus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPControlDispT<T>::get_OnKillFocus(void)
{
  BSTR OnKillFocus;
  this->get_OnKillFocus((BSTR*)&OnKillFocus);
  return OnKillFocus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlDispT<T>::set_OnKillFocus(BSTR OnKillFocus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKillFocus"), DISPID(1014));
  TAutoArgs<1> _args;
  _args[1] = OnKillFocus /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlDispT<T>::get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tags"), DISPID(1015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Tags**)Tags /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::TagsPtr __fastcall
PPControlDispT<T>::get_Tags(void)
{
  Powerpoint_2k::TagsPtr Tags;
  this->get_Tags((Powerpoint_2k::TagsPtr*)&Tags);
  return Tags;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPControlDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPControlDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1016));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  PPPushButton
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934A5-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPPushButtonDispT<T>::_Click()
{
  _TDispID _dispid(*this, OLETEXT("Click"), DISPID(2001));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPPushButtonDispT<T>::get_IsDefault(Office_2k::MsoTriState* IsDefault/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsDefault"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)IsDefault /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPPushButtonDispT<T>::get_IsDefault(void)
{
  Office_2k::MsoTriState IsDefault;
  this->get_IsDefault((Office_2k::MsoTriState*)&IsDefault);
  return IsDefault;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPPushButtonDispT<T>::set_IsDefault(Office_2k::MsoTriState IsDefault/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsDefault"), DISPID(2002));
  TAutoArgs<1> _args;
  _args[1] = (int)IsDefault /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPPushButtonDispT<T>::get_IsEscape(Office_2k::MsoTriState* IsEscape/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsEscape"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)IsEscape /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPPushButtonDispT<T>::get_IsEscape(void)
{
  Office_2k::MsoTriState IsEscape;
  this->get_IsEscape((Office_2k::MsoTriState*)&IsEscape);
  return IsEscape;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPPushButtonDispT<T>::set_IsEscape(Office_2k::MsoTriState IsEscape/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsEscape"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = (int)IsEscape /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPPushButtonDispT<T>::get_OnPressed(BSTR* OnPressed/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnPressed"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnPressed /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPPushButtonDispT<T>::get_OnPressed(void)
{
  BSTR OnPressed;
  this->get_OnPressed((BSTR*)&OnPressed);
  return OnPressed;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPPushButtonDispT<T>::set_OnPressed(BSTR OnPressed/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnPressed"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = OnPressed /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPPushButtonDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
PPPushButtonDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPPushButtonDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PPPushButtonDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPPushButtonDispT<T>::get_Enable(Office_2k::MsoTriState* Enable/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enable"), DISPID(1003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Enable /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPPushButtonDispT<T>::get_Enable(void)
{
  Office_2k::MsoTriState Enable;
  this->get_Enable((Office_2k::MsoTriState*)&Enable);
  return Enable;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPPushButtonDispT<T>::set_Enable(Office_2k::MsoTriState Enable/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enable"), DISPID(1003));
  TAutoArgs<1> _args;
  _args[1] = (int)Enable /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPPushButtonDispT<T>::get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPPushButtonDispT<T>::get_Visible(void)
{
  Office_2k::MsoTriState Visible;
  this->get_Visible((Office_2k::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPPushButtonDispT<T>::set_Visible(Office_2k::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1004));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPPushButtonDispT<T>::get_Focus(Office_2k::MsoTriState* Focus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Focus"), DISPID(1005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Focus /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPPushButtonDispT<T>::get_Focus(void)
{
  Office_2k::MsoTriState Focus;
  this->get_Focus((Office_2k::MsoTriState*)&Focus);
  return Focus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPPushButtonDispT<T>::set_Focus(Office_2k::MsoTriState Focus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Focus"), DISPID(1005));
  TAutoArgs<1> _args;
  _args[1] = (int)Focus /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPPushButtonDispT<T>::get_Label(BSTR* Label/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(1006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Label /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPPushButtonDispT<T>::get_Label(void)
{
  BSTR Label;
  this->get_Label((BSTR*)&Label);
  return Label;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPPushButtonDispT<T>::set_Label(BSTR Label/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(1006));
  TAutoArgs<1> _args;
  _args[1] = Label /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPPushButtonDispT<T>::get_HelpId(int* HelpId/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpId"), DISPID(1007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HelpId /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PPPushButtonDispT<T>::get_HelpId(void)
{
  int HelpId;
  this->get_HelpId((int*)&HelpId);
  return HelpId;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPPushButtonDispT<T>::set_HelpId(int HelpId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpId"), DISPID(1007));
  TAutoArgs<1> _args;
  _args[1] = HelpId /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPPushButtonDispT<T>::get_Left(float* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPPushButtonDispT<T>::get_Left(void)
{
  float Left;
  this->get_Left((float*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPPushButtonDispT<T>::set_Left(float Left/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1008));
  TAutoArgs<1> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPPushButtonDispT<T>::get_Top(float* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPPushButtonDispT<T>::get_Top(void)
{
  float Top;
  this->get_Top((float*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPPushButtonDispT<T>::set_Top(float Top/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1009));
  TAutoArgs<1> _args;
  _args[1] = Top /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPPushButtonDispT<T>::get_Width(float* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPPushButtonDispT<T>::get_Width(void)
{
  float Width;
  this->get_Width((float*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPPushButtonDispT<T>::set_Width(float Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1010));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPPushButtonDispT<T>::get_Height(float* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPPushButtonDispT<T>::get_Height(void)
{
  float Height;
  this->get_Height((float*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPPushButtonDispT<T>::set_Height(float Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1011));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPPushButtonDispT<T>::get_HWND(long* HWND/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HWND"), DISPID(1012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HWND /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PPPushButtonDispT<T>::get_HWND(void)
{
  long HWND;
  this->get_HWND((long*)&HWND);
  return HWND;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPPushButtonDispT<T>::get_OnSetFocus(BSTR* OnSetFocus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnSetFocus"), DISPID(1013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnSetFocus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPPushButtonDispT<T>::get_OnSetFocus(void)
{
  BSTR OnSetFocus;
  this->get_OnSetFocus((BSTR*)&OnSetFocus);
  return OnSetFocus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPPushButtonDispT<T>::set_OnSetFocus(BSTR OnSetFocus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnSetFocus"), DISPID(1013));
  TAutoArgs<1> _args;
  _args[1] = OnSetFocus /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPPushButtonDispT<T>::get_OnKillFocus(BSTR* OnKillFocus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKillFocus"), DISPID(1014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnKillFocus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPPushButtonDispT<T>::get_OnKillFocus(void)
{
  BSTR OnKillFocus;
  this->get_OnKillFocus((BSTR*)&OnKillFocus);
  return OnKillFocus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPPushButtonDispT<T>::set_OnKillFocus(BSTR OnKillFocus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKillFocus"), DISPID(1014));
  TAutoArgs<1> _args;
  _args[1] = OnKillFocus /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPPushButtonDispT<T>::get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tags"), DISPID(1015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Tags**)Tags /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::TagsPtr __fastcall
PPPushButtonDispT<T>::get_Tags(void)
{
  Powerpoint_2k::TagsPtr Tags;
  this->get_Tags((Powerpoint_2k::TagsPtr*)&Tags);
  return Tags;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPPushButtonDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPPushButtonDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPPushButtonDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1016));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  PPToggleButton
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934A6-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPToggleButtonDispT<T>::get_State(Office_2k::MsoTriState* State/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)State /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPToggleButtonDispT<T>::get_State(void)
{
  Office_2k::MsoTriState State;
  this->get_State((Office_2k::MsoTriState*)&State);
  return State;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPToggleButtonDispT<T>::set_State(Office_2k::MsoTriState State/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(2001));
  TAutoArgs<1> _args;
  _args[1] = (int)State /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPToggleButtonDispT<T>::get_ResourceID(int* ResourceID/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ResourceID"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ResourceID /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PPToggleButtonDispT<T>::get_ResourceID(void)
{
  int ResourceID;
  this->get_ResourceID((int*)&ResourceID);
  return ResourceID;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPToggleButtonDispT<T>::set_ResourceID(int ResourceID/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ResourceID"), DISPID(2002));
  TAutoArgs<1> _args;
  _args[1] = ResourceID /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPToggleButtonDispT<T>::_Click()
{
  _TDispID _dispid(*this, OLETEXT("Click"), DISPID(2003));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPToggleButtonDispT<T>::get_OnClick(BSTR* OnClick/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClick"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnClick /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPToggleButtonDispT<T>::get_OnClick(void)
{
  BSTR OnClick;
  this->get_OnClick((BSTR*)&OnClick);
  return OnClick;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPToggleButtonDispT<T>::set_OnClick(BSTR OnClick/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClick"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = OnClick /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPToggleButtonDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
PPToggleButtonDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPToggleButtonDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PPToggleButtonDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPToggleButtonDispT<T>::get_Enable(Office_2k::MsoTriState* Enable/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enable"), DISPID(1003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Enable /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPToggleButtonDispT<T>::get_Enable(void)
{
  Office_2k::MsoTriState Enable;
  this->get_Enable((Office_2k::MsoTriState*)&Enable);
  return Enable;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPToggleButtonDispT<T>::set_Enable(Office_2k::MsoTriState Enable/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enable"), DISPID(1003));
  TAutoArgs<1> _args;
  _args[1] = (int)Enable /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPToggleButtonDispT<T>::get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPToggleButtonDispT<T>::get_Visible(void)
{
  Office_2k::MsoTriState Visible;
  this->get_Visible((Office_2k::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPToggleButtonDispT<T>::set_Visible(Office_2k::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1004));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPToggleButtonDispT<T>::get_Focus(Office_2k::MsoTriState* Focus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Focus"), DISPID(1005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Focus /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPToggleButtonDispT<T>::get_Focus(void)
{
  Office_2k::MsoTriState Focus;
  this->get_Focus((Office_2k::MsoTriState*)&Focus);
  return Focus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPToggleButtonDispT<T>::set_Focus(Office_2k::MsoTriState Focus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Focus"), DISPID(1005));
  TAutoArgs<1> _args;
  _args[1] = (int)Focus /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPToggleButtonDispT<T>::get_Label(BSTR* Label/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(1006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Label /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPToggleButtonDispT<T>::get_Label(void)
{
  BSTR Label;
  this->get_Label((BSTR*)&Label);
  return Label;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPToggleButtonDispT<T>::set_Label(BSTR Label/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(1006));
  TAutoArgs<1> _args;
  _args[1] = Label /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPToggleButtonDispT<T>::get_HelpId(int* HelpId/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpId"), DISPID(1007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HelpId /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PPToggleButtonDispT<T>::get_HelpId(void)
{
  int HelpId;
  this->get_HelpId((int*)&HelpId);
  return HelpId;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPToggleButtonDispT<T>::set_HelpId(int HelpId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpId"), DISPID(1007));
  TAutoArgs<1> _args;
  _args[1] = HelpId /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPToggleButtonDispT<T>::get_Left(float* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPToggleButtonDispT<T>::get_Left(void)
{
  float Left;
  this->get_Left((float*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPToggleButtonDispT<T>::set_Left(float Left/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1008));
  TAutoArgs<1> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPToggleButtonDispT<T>::get_Top(float* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPToggleButtonDispT<T>::get_Top(void)
{
  float Top;
  this->get_Top((float*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPToggleButtonDispT<T>::set_Top(float Top/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1009));
  TAutoArgs<1> _args;
  _args[1] = Top /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPToggleButtonDispT<T>::get_Width(float* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPToggleButtonDispT<T>::get_Width(void)
{
  float Width;
  this->get_Width((float*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPToggleButtonDispT<T>::set_Width(float Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1010));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPToggleButtonDispT<T>::get_Height(float* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPToggleButtonDispT<T>::get_Height(void)
{
  float Height;
  this->get_Height((float*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPToggleButtonDispT<T>::set_Height(float Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1011));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPToggleButtonDispT<T>::get_HWND(long* HWND/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HWND"), DISPID(1012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HWND /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PPToggleButtonDispT<T>::get_HWND(void)
{
  long HWND;
  this->get_HWND((long*)&HWND);
  return HWND;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPToggleButtonDispT<T>::get_OnSetFocus(BSTR* OnSetFocus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnSetFocus"), DISPID(1013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnSetFocus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPToggleButtonDispT<T>::get_OnSetFocus(void)
{
  BSTR OnSetFocus;
  this->get_OnSetFocus((BSTR*)&OnSetFocus);
  return OnSetFocus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPToggleButtonDispT<T>::set_OnSetFocus(BSTR OnSetFocus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnSetFocus"), DISPID(1013));
  TAutoArgs<1> _args;
  _args[1] = OnSetFocus /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPToggleButtonDispT<T>::get_OnKillFocus(BSTR* OnKillFocus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKillFocus"), DISPID(1014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnKillFocus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPToggleButtonDispT<T>::get_OnKillFocus(void)
{
  BSTR OnKillFocus;
  this->get_OnKillFocus((BSTR*)&OnKillFocus);
  return OnKillFocus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPToggleButtonDispT<T>::set_OnKillFocus(BSTR OnKillFocus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKillFocus"), DISPID(1014));
  TAutoArgs<1> _args;
  _args[1] = OnKillFocus /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPToggleButtonDispT<T>::get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tags"), DISPID(1015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Tags**)Tags /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::TagsPtr __fastcall
PPToggleButtonDispT<T>::get_Tags(void)
{
  Powerpoint_2k::TagsPtr Tags;
  this->get_Tags((Powerpoint_2k::TagsPtr*)&Tags);
  return Tags;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPToggleButtonDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPToggleButtonDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPToggleButtonDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1016));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  PPBitmapButton
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934A7-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapButtonDispT<T>::_Click()
{
  _TDispID _dispid(*this, OLETEXT("Click"), DISPID(2001));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapButtonDispT<T>::get_ResourceID(int* ResourceID/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ResourceID"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ResourceID /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PPBitmapButtonDispT<T>::get_ResourceID(void)
{
  int ResourceID;
  this->get_ResourceID((int*)&ResourceID);
  return ResourceID;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapButtonDispT<T>::set_ResourceID(int ResourceID/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ResourceID"), DISPID(2002));
  TAutoArgs<1> _args;
  _args[1] = ResourceID /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapButtonDispT<T>::get_OnPressed(BSTR* OnPressed/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnPressed"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnPressed /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPBitmapButtonDispT<T>::get_OnPressed(void)
{
  BSTR OnPressed;
  this->get_OnPressed((BSTR*)&OnPressed);
  return OnPressed;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapButtonDispT<T>::set_OnPressed(BSTR OnPressed/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnPressed"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = OnPressed /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapButtonDispT<T>::get_IsDefault(Office_2k::MsoTriState* IsDefault/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsDefault"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)IsDefault /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPBitmapButtonDispT<T>::get_IsDefault(void)
{
  Office_2k::MsoTriState IsDefault;
  this->get_IsDefault((Office_2k::MsoTriState*)&IsDefault);
  return IsDefault;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapButtonDispT<T>::set_IsDefault(Office_2k::MsoTriState IsDefault/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsDefault"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = (int)IsDefault /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapButtonDispT<T>::get_IsEscape(Office_2k::MsoTriState* IsEscape/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsEscape"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)IsEscape /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPBitmapButtonDispT<T>::get_IsEscape(void)
{
  Office_2k::MsoTriState IsEscape;
  this->get_IsEscape((Office_2k::MsoTriState*)&IsEscape);
  return IsEscape;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapButtonDispT<T>::set_IsEscape(Office_2k::MsoTriState IsEscape/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsEscape"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = (int)IsEscape /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapButtonDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
PPBitmapButtonDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapButtonDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PPBitmapButtonDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapButtonDispT<T>::get_Enable(Office_2k::MsoTriState* Enable/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enable"), DISPID(1003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Enable /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPBitmapButtonDispT<T>::get_Enable(void)
{
  Office_2k::MsoTriState Enable;
  this->get_Enable((Office_2k::MsoTriState*)&Enable);
  return Enable;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapButtonDispT<T>::set_Enable(Office_2k::MsoTriState Enable/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enable"), DISPID(1003));
  TAutoArgs<1> _args;
  _args[1] = (int)Enable /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapButtonDispT<T>::get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPBitmapButtonDispT<T>::get_Visible(void)
{
  Office_2k::MsoTriState Visible;
  this->get_Visible((Office_2k::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapButtonDispT<T>::set_Visible(Office_2k::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1004));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapButtonDispT<T>::get_Focus(Office_2k::MsoTriState* Focus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Focus"), DISPID(1005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Focus /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPBitmapButtonDispT<T>::get_Focus(void)
{
  Office_2k::MsoTriState Focus;
  this->get_Focus((Office_2k::MsoTriState*)&Focus);
  return Focus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapButtonDispT<T>::set_Focus(Office_2k::MsoTriState Focus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Focus"), DISPID(1005));
  TAutoArgs<1> _args;
  _args[1] = (int)Focus /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapButtonDispT<T>::get_Label(BSTR* Label/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(1006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Label /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPBitmapButtonDispT<T>::get_Label(void)
{
  BSTR Label;
  this->get_Label((BSTR*)&Label);
  return Label;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapButtonDispT<T>::set_Label(BSTR Label/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(1006));
  TAutoArgs<1> _args;
  _args[1] = Label /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapButtonDispT<T>::get_HelpId(int* HelpId/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpId"), DISPID(1007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HelpId /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PPBitmapButtonDispT<T>::get_HelpId(void)
{
  int HelpId;
  this->get_HelpId((int*)&HelpId);
  return HelpId;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapButtonDispT<T>::set_HelpId(int HelpId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpId"), DISPID(1007));
  TAutoArgs<1> _args;
  _args[1] = HelpId /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapButtonDispT<T>::get_Left(float* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPBitmapButtonDispT<T>::get_Left(void)
{
  float Left;
  this->get_Left((float*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapButtonDispT<T>::set_Left(float Left/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1008));
  TAutoArgs<1> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapButtonDispT<T>::get_Top(float* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPBitmapButtonDispT<T>::get_Top(void)
{
  float Top;
  this->get_Top((float*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapButtonDispT<T>::set_Top(float Top/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1009));
  TAutoArgs<1> _args;
  _args[1] = Top /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapButtonDispT<T>::get_Width(float* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPBitmapButtonDispT<T>::get_Width(void)
{
  float Width;
  this->get_Width((float*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapButtonDispT<T>::set_Width(float Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1010));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapButtonDispT<T>::get_Height(float* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPBitmapButtonDispT<T>::get_Height(void)
{
  float Height;
  this->get_Height((float*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapButtonDispT<T>::set_Height(float Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1011));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapButtonDispT<T>::get_HWND(long* HWND/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HWND"), DISPID(1012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HWND /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PPBitmapButtonDispT<T>::get_HWND(void)
{
  long HWND;
  this->get_HWND((long*)&HWND);
  return HWND;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapButtonDispT<T>::get_OnSetFocus(BSTR* OnSetFocus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnSetFocus"), DISPID(1013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnSetFocus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPBitmapButtonDispT<T>::get_OnSetFocus(void)
{
  BSTR OnSetFocus;
  this->get_OnSetFocus((BSTR*)&OnSetFocus);
  return OnSetFocus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapButtonDispT<T>::set_OnSetFocus(BSTR OnSetFocus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnSetFocus"), DISPID(1013));
  TAutoArgs<1> _args;
  _args[1] = OnSetFocus /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapButtonDispT<T>::get_OnKillFocus(BSTR* OnKillFocus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKillFocus"), DISPID(1014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnKillFocus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPBitmapButtonDispT<T>::get_OnKillFocus(void)
{
  BSTR OnKillFocus;
  this->get_OnKillFocus((BSTR*)&OnKillFocus);
  return OnKillFocus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapButtonDispT<T>::set_OnKillFocus(BSTR OnKillFocus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKillFocus"), DISPID(1014));
  TAutoArgs<1> _args;
  _args[1] = OnKillFocus /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapButtonDispT<T>::get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tags"), DISPID(1015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Tags**)Tags /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::TagsPtr __fastcall
PPBitmapButtonDispT<T>::get_Tags(void)
{
  Powerpoint_2k::TagsPtr Tags;
  this->get_Tags((Powerpoint_2k::TagsPtr*)&Tags);
  return Tags;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapButtonDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPBitmapButtonDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapButtonDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1016));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  PPListBox
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934A8-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPListBoxDispT<T>::get_Strings(Powerpoint_2k::PPStringsPtr* Strings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Strings"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PPStrings**)Strings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PPStringsPtr __fastcall
PPListBoxDispT<T>::get_Strings(void)
{
  Powerpoint_2k::PPStringsPtr Strings;
  this->get_Strings((Powerpoint_2k::PPStringsPtr*)&Strings);
  return Strings;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPListBoxDispT<T>::get_SelectionStyle(Powerpoint_2k::PpListBoxSelectionStyle* SelectionStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectionStyle"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)SelectionStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpListBoxSelectionStyle __fastcall
PPListBoxDispT<T>::get_SelectionStyle(void)
{
  Powerpoint_2k::PpListBoxSelectionStyle SelectionStyle;
  this->get_SelectionStyle((Powerpoint_2k::PpListBoxSelectionStyle*)&SelectionStyle);
  return SelectionStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPListBoxDispT<T>::set_SelectionStyle(Powerpoint_2k::PpListBoxSelectionStyle SelectionStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectionStyle"), DISPID(2002));
  TAutoArgs<1> _args;
  _args[1] = (int)SelectionStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPListBoxDispT<T>::SetTabStops(TVariantInParam safeArrayTabStops/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetTabStops"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = safeArrayTabStops /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPListBoxDispT<T>::get_FocusItem(int* FocusItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FocusItem"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FocusItem /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PPListBoxDispT<T>::get_FocusItem(void)
{
  int FocusItem;
  this->get_FocusItem((int*)&FocusItem);
  return FocusItem;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPListBoxDispT<T>::set_FocusItem(int FocusItem/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FocusItem"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = FocusItem /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPListBoxDispT<T>::get_TopItem(int* TopItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TopItem"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(TopItem /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PPListBoxDispT<T>::get_TopItem(void)
{
  int TopItem;
  this->get_TopItem((int*)&TopItem);
  return TopItem;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPListBoxDispT<T>::get_OnSelectionChange(BSTR* OnSelectionChange/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnSelectionChange"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnSelectionChange /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPListBoxDispT<T>::get_OnSelectionChange(void)
{
  BSTR OnSelectionChange;
  this->get_OnSelectionChange((BSTR*)&OnSelectionChange);
  return OnSelectionChange;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPListBoxDispT<T>::set_OnSelectionChange(BSTR OnSelectionChange/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnSelectionChange"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = OnSelectionChange /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPListBoxDispT<T>::get_OnDoubleClick(BSTR* OnDoubleClick/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDoubleClick"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnDoubleClick /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPListBoxDispT<T>::get_OnDoubleClick(void)
{
  BSTR OnDoubleClick;
  this->get_OnDoubleClick((BSTR*)&OnDoubleClick);
  return OnDoubleClick;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPListBoxDispT<T>::set_OnDoubleClick(BSTR OnDoubleClick/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDoubleClick"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = OnDoubleClick /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPListBoxDispT<T>::get_IsSelected(int index/*[in]*/, 
                                  Office_2k::MsoTriState* IsSelected/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsSelected"), DISPID(999));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr((int*)IsSelected /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPListBoxDispT<T>::get_IsSelected(int index/*[in]*/)
{
  Office_2k::MsoTriState IsSelected;
  this->get_IsSelected(index, (Office_2k::MsoTriState*)&IsSelected);
  return IsSelected;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPListBoxDispT<T>::set_IsSelected(int index/*[in]*/, Office_2k::MsoTriState IsSelected/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsSelected"), DISPID(999));
  TAutoArgs<2> _args;
  _args[1] = index /*[VT_INT:0]*/;
  _args[2] = (int)IsSelected /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPListBoxDispT<T>::Abbreviate(Powerpoint_2k::PpListBoxAbbreviationStyle Style/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Abbreviate"), DISPID(2008));
  TAutoArgs<1> _args;
  _args[1] = (int)Style /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPListBoxDispT<T>::get_IsAbbreviated(Powerpoint_2k::PpListBoxAbbreviationStyle* IsAbbreviated/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsAbbreviated"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)IsAbbreviated /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpListBoxAbbreviationStyle __fastcall
PPListBoxDispT<T>::get_IsAbbreviated(void)
{
  Powerpoint_2k::PpListBoxAbbreviationStyle IsAbbreviated;
  this->get_IsAbbreviated((Powerpoint_2k::PpListBoxAbbreviationStyle*)&IsAbbreviated);
  return IsAbbreviated;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPListBoxDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
PPListBoxDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPListBoxDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PPListBoxDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPListBoxDispT<T>::get_Enable(Office_2k::MsoTriState* Enable/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enable"), DISPID(1003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Enable /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPListBoxDispT<T>::get_Enable(void)
{
  Office_2k::MsoTriState Enable;
  this->get_Enable((Office_2k::MsoTriState*)&Enable);
  return Enable;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPListBoxDispT<T>::set_Enable(Office_2k::MsoTriState Enable/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enable"), DISPID(1003));
  TAutoArgs<1> _args;
  _args[1] = (int)Enable /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPListBoxDispT<T>::get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPListBoxDispT<T>::get_Visible(void)
{
  Office_2k::MsoTriState Visible;
  this->get_Visible((Office_2k::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPListBoxDispT<T>::set_Visible(Office_2k::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1004));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPListBoxDispT<T>::get_Focus(Office_2k::MsoTriState* Focus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Focus"), DISPID(1005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Focus /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPListBoxDispT<T>::get_Focus(void)
{
  Office_2k::MsoTriState Focus;
  this->get_Focus((Office_2k::MsoTriState*)&Focus);
  return Focus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPListBoxDispT<T>::set_Focus(Office_2k::MsoTriState Focus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Focus"), DISPID(1005));
  TAutoArgs<1> _args;
  _args[1] = (int)Focus /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPListBoxDispT<T>::get_Label(BSTR* Label/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(1006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Label /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPListBoxDispT<T>::get_Label(void)
{
  BSTR Label;
  this->get_Label((BSTR*)&Label);
  return Label;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPListBoxDispT<T>::set_Label(BSTR Label/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(1006));
  TAutoArgs<1> _args;
  _args[1] = Label /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPListBoxDispT<T>::get_HelpId(int* HelpId/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpId"), DISPID(1007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HelpId /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PPListBoxDispT<T>::get_HelpId(void)
{
  int HelpId;
  this->get_HelpId((int*)&HelpId);
  return HelpId;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPListBoxDispT<T>::set_HelpId(int HelpId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpId"), DISPID(1007));
  TAutoArgs<1> _args;
  _args[1] = HelpId /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPListBoxDispT<T>::get_Left(float* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPListBoxDispT<T>::get_Left(void)
{
  float Left;
  this->get_Left((float*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPListBoxDispT<T>::set_Left(float Left/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1008));
  TAutoArgs<1> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPListBoxDispT<T>::get_Top(float* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPListBoxDispT<T>::get_Top(void)
{
  float Top;
  this->get_Top((float*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPListBoxDispT<T>::set_Top(float Top/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1009));
  TAutoArgs<1> _args;
  _args[1] = Top /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPListBoxDispT<T>::get_Width(float* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPListBoxDispT<T>::get_Width(void)
{
  float Width;
  this->get_Width((float*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPListBoxDispT<T>::set_Width(float Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1010));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPListBoxDispT<T>::get_Height(float* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPListBoxDispT<T>::get_Height(void)
{
  float Height;
  this->get_Height((float*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPListBoxDispT<T>::set_Height(float Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1011));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPListBoxDispT<T>::get_HWND(long* HWND/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HWND"), DISPID(1012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HWND /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PPListBoxDispT<T>::get_HWND(void)
{
  long HWND;
  this->get_HWND((long*)&HWND);
  return HWND;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPListBoxDispT<T>::get_OnSetFocus(BSTR* OnSetFocus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnSetFocus"), DISPID(1013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnSetFocus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPListBoxDispT<T>::get_OnSetFocus(void)
{
  BSTR OnSetFocus;
  this->get_OnSetFocus((BSTR*)&OnSetFocus);
  return OnSetFocus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPListBoxDispT<T>::set_OnSetFocus(BSTR OnSetFocus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnSetFocus"), DISPID(1013));
  TAutoArgs<1> _args;
  _args[1] = OnSetFocus /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPListBoxDispT<T>::get_OnKillFocus(BSTR* OnKillFocus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKillFocus"), DISPID(1014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnKillFocus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPListBoxDispT<T>::get_OnKillFocus(void)
{
  BSTR OnKillFocus;
  this->get_OnKillFocus((BSTR*)&OnKillFocus);
  return OnKillFocus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPListBoxDispT<T>::set_OnKillFocus(BSTR OnKillFocus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKillFocus"), DISPID(1014));
  TAutoArgs<1> _args;
  _args[1] = OnKillFocus /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPListBoxDispT<T>::get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tags"), DISPID(1015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Tags**)Tags /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::TagsPtr __fastcall
PPListBoxDispT<T>::get_Tags(void)
{
  Powerpoint_2k::TagsPtr Tags;
  this->get_Tags((Powerpoint_2k::TagsPtr*)&Tags);
  return Tags;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPListBoxDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPListBoxDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPListBoxDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1016));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  PPStrings
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934A9-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPStringsDispT<T>::Item(int index/*[in]*/, BSTR* Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(Item /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
PPStringsDispT<T>::Item(int index/*[in]*/)
{
  BSTR Item;
  this->Item(index, (BSTR*)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPStringsDispT<T>::Add(BSTR String/*[in]*/, BSTR* Add/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2001));
  TAutoArgs<1> _args;
  _args[1] = String /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(Add /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
PPStringsDispT<T>::Add(BSTR String/*[in]*/)
{
  BSTR Add;
  this->Add(String, (BSTR*)&Add);
  return Add;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPStringsDispT<T>::Insert(BSTR String/*[in]*/, int Position/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Insert"), DISPID(2002));
  TAutoArgs<2> _args;
  _args[1] = String /*[VT_BSTR:0]*/;
  _args[2] = Position /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPStringsDispT<T>::Delete(int index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPStringsDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
PPStringsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPStringsDispT<T>::_Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
PPStringsDispT<T>::_Index(int index/*[in]*/)
{
  TVariant _Index;
  this->_Index(index, (TVariant*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPStringsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PPStringsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  PPCheckBox
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934AA-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPCheckBoxDispT<T>::get_State(Office_2k::MsoTriState* State/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)State /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPCheckBoxDispT<T>::get_State(void)
{
  Office_2k::MsoTriState State;
  this->get_State((Office_2k::MsoTriState*)&State);
  return State;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPCheckBoxDispT<T>::set_State(Office_2k::MsoTriState State/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(2001));
  TAutoArgs<1> _args;
  _args[1] = (int)State /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPCheckBoxDispT<T>::_Click()
{
  _TDispID _dispid(*this, OLETEXT("Click"), DISPID(2002));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPCheckBoxDispT<T>::get_OnClick(BSTR* OnClick/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClick"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnClick /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPCheckBoxDispT<T>::get_OnClick(void)
{
  BSTR OnClick;
  this->get_OnClick((BSTR*)&OnClick);
  return OnClick;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPCheckBoxDispT<T>::set_OnClick(BSTR OnClick/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClick"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = OnClick /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPCheckBoxDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
PPCheckBoxDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPCheckBoxDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PPCheckBoxDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPCheckBoxDispT<T>::get_Enable(Office_2k::MsoTriState* Enable/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enable"), DISPID(1003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Enable /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPCheckBoxDispT<T>::get_Enable(void)
{
  Office_2k::MsoTriState Enable;
  this->get_Enable((Office_2k::MsoTriState*)&Enable);
  return Enable;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPCheckBoxDispT<T>::set_Enable(Office_2k::MsoTriState Enable/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enable"), DISPID(1003));
  TAutoArgs<1> _args;
  _args[1] = (int)Enable /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPCheckBoxDispT<T>::get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPCheckBoxDispT<T>::get_Visible(void)
{
  Office_2k::MsoTriState Visible;
  this->get_Visible((Office_2k::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPCheckBoxDispT<T>::set_Visible(Office_2k::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1004));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPCheckBoxDispT<T>::get_Focus(Office_2k::MsoTriState* Focus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Focus"), DISPID(1005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Focus /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPCheckBoxDispT<T>::get_Focus(void)
{
  Office_2k::MsoTriState Focus;
  this->get_Focus((Office_2k::MsoTriState*)&Focus);
  return Focus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPCheckBoxDispT<T>::set_Focus(Office_2k::MsoTriState Focus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Focus"), DISPID(1005));
  TAutoArgs<1> _args;
  _args[1] = (int)Focus /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPCheckBoxDispT<T>::get_Label(BSTR* Label/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(1006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Label /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPCheckBoxDispT<T>::get_Label(void)
{
  BSTR Label;
  this->get_Label((BSTR*)&Label);
  return Label;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPCheckBoxDispT<T>::set_Label(BSTR Label/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(1006));
  TAutoArgs<1> _args;
  _args[1] = Label /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPCheckBoxDispT<T>::get_HelpId(int* HelpId/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpId"), DISPID(1007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HelpId /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PPCheckBoxDispT<T>::get_HelpId(void)
{
  int HelpId;
  this->get_HelpId((int*)&HelpId);
  return HelpId;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPCheckBoxDispT<T>::set_HelpId(int HelpId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpId"), DISPID(1007));
  TAutoArgs<1> _args;
  _args[1] = HelpId /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPCheckBoxDispT<T>::get_Left(float* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPCheckBoxDispT<T>::get_Left(void)
{
  float Left;
  this->get_Left((float*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPCheckBoxDispT<T>::set_Left(float Left/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1008));
  TAutoArgs<1> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPCheckBoxDispT<T>::get_Top(float* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPCheckBoxDispT<T>::get_Top(void)
{
  float Top;
  this->get_Top((float*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPCheckBoxDispT<T>::set_Top(float Top/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1009));
  TAutoArgs<1> _args;
  _args[1] = Top /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPCheckBoxDispT<T>::get_Width(float* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPCheckBoxDispT<T>::get_Width(void)
{
  float Width;
  this->get_Width((float*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPCheckBoxDispT<T>::set_Width(float Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1010));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPCheckBoxDispT<T>::get_Height(float* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPCheckBoxDispT<T>::get_Height(void)
{
  float Height;
  this->get_Height((float*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPCheckBoxDispT<T>::set_Height(float Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1011));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPCheckBoxDispT<T>::get_HWND(long* HWND/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HWND"), DISPID(1012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HWND /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PPCheckBoxDispT<T>::get_HWND(void)
{
  long HWND;
  this->get_HWND((long*)&HWND);
  return HWND;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPCheckBoxDispT<T>::get_OnSetFocus(BSTR* OnSetFocus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnSetFocus"), DISPID(1013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnSetFocus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPCheckBoxDispT<T>::get_OnSetFocus(void)
{
  BSTR OnSetFocus;
  this->get_OnSetFocus((BSTR*)&OnSetFocus);
  return OnSetFocus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPCheckBoxDispT<T>::set_OnSetFocus(BSTR OnSetFocus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnSetFocus"), DISPID(1013));
  TAutoArgs<1> _args;
  _args[1] = OnSetFocus /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPCheckBoxDispT<T>::get_OnKillFocus(BSTR* OnKillFocus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKillFocus"), DISPID(1014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnKillFocus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPCheckBoxDispT<T>::get_OnKillFocus(void)
{
  BSTR OnKillFocus;
  this->get_OnKillFocus((BSTR*)&OnKillFocus);
  return OnKillFocus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPCheckBoxDispT<T>::set_OnKillFocus(BSTR OnKillFocus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKillFocus"), DISPID(1014));
  TAutoArgs<1> _args;
  _args[1] = OnKillFocus /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPCheckBoxDispT<T>::get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tags"), DISPID(1015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Tags**)Tags /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::TagsPtr __fastcall
PPCheckBoxDispT<T>::get_Tags(void)
{
  Powerpoint_2k::TagsPtr Tags;
  this->get_Tags((Powerpoint_2k::TagsPtr*)&Tags);
  return Tags;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPCheckBoxDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPCheckBoxDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPCheckBoxDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1016));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  PPRadioCluster
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934AB-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioClusterDispT<T>::Item(TVariantInParam index/*[in]*/, 
                             Powerpoint_2k::PPRadioButtonPtr* Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PPRadioButton**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::PPRadioButtonPtr __fastcall
PPRadioClusterDispT<T>::Item(TVariantInParam index/*[in]*/)
{
  Powerpoint_2k::PPRadioButtonPtr Item;
  this->Item(index, (Powerpoint_2k::PPRadioButtonPtr*)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioClusterDispT<T>::Add(float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                            float Height/*[in]*/, 
                            Powerpoint_2k::PPRadioButtonPtr* Add/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2001));
  TAutoArgs<4> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  _args[2] = Top /*[VT_R4:0]*/;
  _args[3] = Width /*[VT_R4:0]*/;
  _args[4] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PPRadioButton**)Add /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::PPRadioButtonPtr __fastcall
PPRadioClusterDispT<T>::Add(float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                            float Height/*[in]*/)
{
  Powerpoint_2k::PPRadioButtonPtr Add;
  this->Add(Left, Top, Width, Height, (Powerpoint_2k::PPRadioButtonPtr*)&Add);
  return Add;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioClusterDispT<T>::get_Count(int* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PPRadioClusterDispT<T>::get_Count(void)
{
  int Count;
  this->get_Count((int*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioClusterDispT<T>::get_Selected(Powerpoint_2k::PPRadioButtonPtr* Selected/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Selected"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PPRadioButton**)Selected /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PPRadioButtonPtr __fastcall
PPRadioClusterDispT<T>::get_Selected(void)
{
  Powerpoint_2k::PPRadioButtonPtr Selected;
  this->get_Selected((Powerpoint_2k::PPRadioButtonPtr*)&Selected);
  return Selected;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioClusterDispT<T>::get_OnClick(BSTR* OnClick/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClick"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnClick /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPRadioClusterDispT<T>::get_OnClick(void)
{
  BSTR OnClick;
  this->get_OnClick((BSTR*)&OnClick);
  return OnClick;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioClusterDispT<T>::set_OnClick(BSTR OnClick/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClick"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = OnClick /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioClusterDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
PPRadioClusterDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioClusterDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PPRadioClusterDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioClusterDispT<T>::get_Enable(Office_2k::MsoTriState* Enable/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enable"), DISPID(1003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Enable /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPRadioClusterDispT<T>::get_Enable(void)
{
  Office_2k::MsoTriState Enable;
  this->get_Enable((Office_2k::MsoTriState*)&Enable);
  return Enable;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioClusterDispT<T>::set_Enable(Office_2k::MsoTriState Enable/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enable"), DISPID(1003));
  TAutoArgs<1> _args;
  _args[1] = (int)Enable /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioClusterDispT<T>::get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPRadioClusterDispT<T>::get_Visible(void)
{
  Office_2k::MsoTriState Visible;
  this->get_Visible((Office_2k::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioClusterDispT<T>::set_Visible(Office_2k::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1004));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioClusterDispT<T>::get_Focus(Office_2k::MsoTriState* Focus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Focus"), DISPID(1005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Focus /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPRadioClusterDispT<T>::get_Focus(void)
{
  Office_2k::MsoTriState Focus;
  this->get_Focus((Office_2k::MsoTriState*)&Focus);
  return Focus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioClusterDispT<T>::set_Focus(Office_2k::MsoTriState Focus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Focus"), DISPID(1005));
  TAutoArgs<1> _args;
  _args[1] = (int)Focus /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioClusterDispT<T>::get_Label(BSTR* Label/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(1006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Label /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPRadioClusterDispT<T>::get_Label(void)
{
  BSTR Label;
  this->get_Label((BSTR*)&Label);
  return Label;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioClusterDispT<T>::set_Label(BSTR Label/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(1006));
  TAutoArgs<1> _args;
  _args[1] = Label /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioClusterDispT<T>::get_HelpId(int* HelpId/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpId"), DISPID(1007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HelpId /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PPRadioClusterDispT<T>::get_HelpId(void)
{
  int HelpId;
  this->get_HelpId((int*)&HelpId);
  return HelpId;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioClusterDispT<T>::set_HelpId(int HelpId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpId"), DISPID(1007));
  TAutoArgs<1> _args;
  _args[1] = HelpId /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioClusterDispT<T>::get_Left(float* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPRadioClusterDispT<T>::get_Left(void)
{
  float Left;
  this->get_Left((float*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioClusterDispT<T>::set_Left(float Left/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1008));
  TAutoArgs<1> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioClusterDispT<T>::get_Top(float* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPRadioClusterDispT<T>::get_Top(void)
{
  float Top;
  this->get_Top((float*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioClusterDispT<T>::set_Top(float Top/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1009));
  TAutoArgs<1> _args;
  _args[1] = Top /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioClusterDispT<T>::get_Width(float* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPRadioClusterDispT<T>::get_Width(void)
{
  float Width;
  this->get_Width((float*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioClusterDispT<T>::set_Width(float Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1010));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioClusterDispT<T>::get_Height(float* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPRadioClusterDispT<T>::get_Height(void)
{
  float Height;
  this->get_Height((float*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioClusterDispT<T>::set_Height(float Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1011));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioClusterDispT<T>::get_HWND(long* HWND/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HWND"), DISPID(1012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HWND /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PPRadioClusterDispT<T>::get_HWND(void)
{
  long HWND;
  this->get_HWND((long*)&HWND);
  return HWND;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioClusterDispT<T>::get_OnSetFocus(BSTR* OnSetFocus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnSetFocus"), DISPID(1013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnSetFocus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPRadioClusterDispT<T>::get_OnSetFocus(void)
{
  BSTR OnSetFocus;
  this->get_OnSetFocus((BSTR*)&OnSetFocus);
  return OnSetFocus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioClusterDispT<T>::set_OnSetFocus(BSTR OnSetFocus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnSetFocus"), DISPID(1013));
  TAutoArgs<1> _args;
  _args[1] = OnSetFocus /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioClusterDispT<T>::get_OnKillFocus(BSTR* OnKillFocus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKillFocus"), DISPID(1014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnKillFocus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPRadioClusterDispT<T>::get_OnKillFocus(void)
{
  BSTR OnKillFocus;
  this->get_OnKillFocus((BSTR*)&OnKillFocus);
  return OnKillFocus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioClusterDispT<T>::set_OnKillFocus(BSTR OnKillFocus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKillFocus"), DISPID(1014));
  TAutoArgs<1> _args;
  _args[1] = OnKillFocus /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioClusterDispT<T>::get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tags"), DISPID(1015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Tags**)Tags /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::TagsPtr __fastcall
PPRadioClusterDispT<T>::get_Tags(void)
{
  Powerpoint_2k::TagsPtr Tags;
  this->get_Tags((Powerpoint_2k::TagsPtr*)&Tags);
  return Tags;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioClusterDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPRadioClusterDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioClusterDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1016));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  PPStaticText
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934AC-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPStaticTextDispT<T>::get_UseForegroundColor(Office_2k::MsoTriState* UseForegroundColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UseForegroundColor"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)UseForegroundColor /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPStaticTextDispT<T>::get_UseForegroundColor(void)
{
  Office_2k::MsoTriState UseForegroundColor;
  this->get_UseForegroundColor((Office_2k::MsoTriState*)&UseForegroundColor);
  return UseForegroundColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPStaticTextDispT<T>::set_UseForegroundColor(Office_2k::MsoTriState UseForegroundColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UseForegroundColor"), DISPID(2001));
  TAutoArgs<1> _args;
  _args[1] = (int)UseForegroundColor /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPStaticTextDispT<T>::get_UseBackgroundColor(Office_2k::MsoTriState* UseBackgroundColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UseBackgroundColor"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)UseBackgroundColor /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPStaticTextDispT<T>::get_UseBackgroundColor(void)
{
  Office_2k::MsoTriState UseBackgroundColor;
  this->get_UseBackgroundColor((Office_2k::MsoTriState*)&UseBackgroundColor);
  return UseBackgroundColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPStaticTextDispT<T>::set_UseBackgroundColor(Office_2k::MsoTriState UseBackgroundColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UseBackgroundColor"), DISPID(2002));
  TAutoArgs<1> _args;
  _args[1] = (int)UseBackgroundColor /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPStaticTextDispT<T>::get_ForegroundColor(Office_2k::MsoRGBType* ForegroundColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForegroundColor"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ForegroundColor /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoRGBType __fastcall
PPStaticTextDispT<T>::get_ForegroundColor(void)
{
  Office_2k::MsoRGBType ForegroundColor;
  this->get_ForegroundColor((Office_2k::MsoRGBType*)&ForegroundColor);
  return ForegroundColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPStaticTextDispT<T>::set_ForegroundColor(Office_2k::MsoRGBType ForegroundColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForegroundColor"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = ForegroundColor /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPStaticTextDispT<T>::get_BackgroundColor(Office_2k::MsoRGBType* BackgroundColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackgroundColor"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BackgroundColor /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoRGBType __fastcall
PPStaticTextDispT<T>::get_BackgroundColor(void)
{
  Office_2k::MsoRGBType BackgroundColor;
  this->get_BackgroundColor((Office_2k::MsoRGBType*)&BackgroundColor);
  return BackgroundColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPStaticTextDispT<T>::set_BackgroundColor(Office_2k::MsoRGBType BackgroundColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackgroundColor"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = BackgroundColor /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPStaticTextDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
PPStaticTextDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPStaticTextDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PPStaticTextDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPStaticTextDispT<T>::get_Enable(Office_2k::MsoTriState* Enable/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enable"), DISPID(1003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Enable /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPStaticTextDispT<T>::get_Enable(void)
{
  Office_2k::MsoTriState Enable;
  this->get_Enable((Office_2k::MsoTriState*)&Enable);
  return Enable;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPStaticTextDispT<T>::set_Enable(Office_2k::MsoTriState Enable/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enable"), DISPID(1003));
  TAutoArgs<1> _args;
  _args[1] = (int)Enable /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPStaticTextDispT<T>::get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPStaticTextDispT<T>::get_Visible(void)
{
  Office_2k::MsoTriState Visible;
  this->get_Visible((Office_2k::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPStaticTextDispT<T>::set_Visible(Office_2k::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1004));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPStaticTextDispT<T>::get_Focus(Office_2k::MsoTriState* Focus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Focus"), DISPID(1005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Focus /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPStaticTextDispT<T>::get_Focus(void)
{
  Office_2k::MsoTriState Focus;
  this->get_Focus((Office_2k::MsoTriState*)&Focus);
  return Focus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPStaticTextDispT<T>::set_Focus(Office_2k::MsoTriState Focus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Focus"), DISPID(1005));
  TAutoArgs<1> _args;
  _args[1] = (int)Focus /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPStaticTextDispT<T>::get_Label(BSTR* Label/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(1006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Label /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPStaticTextDispT<T>::get_Label(void)
{
  BSTR Label;
  this->get_Label((BSTR*)&Label);
  return Label;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPStaticTextDispT<T>::set_Label(BSTR Label/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(1006));
  TAutoArgs<1> _args;
  _args[1] = Label /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPStaticTextDispT<T>::get_HelpId(int* HelpId/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpId"), DISPID(1007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HelpId /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PPStaticTextDispT<T>::get_HelpId(void)
{
  int HelpId;
  this->get_HelpId((int*)&HelpId);
  return HelpId;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPStaticTextDispT<T>::set_HelpId(int HelpId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpId"), DISPID(1007));
  TAutoArgs<1> _args;
  _args[1] = HelpId /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPStaticTextDispT<T>::get_Left(float* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPStaticTextDispT<T>::get_Left(void)
{
  float Left;
  this->get_Left((float*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPStaticTextDispT<T>::set_Left(float Left/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1008));
  TAutoArgs<1> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPStaticTextDispT<T>::get_Top(float* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPStaticTextDispT<T>::get_Top(void)
{
  float Top;
  this->get_Top((float*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPStaticTextDispT<T>::set_Top(float Top/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1009));
  TAutoArgs<1> _args;
  _args[1] = Top /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPStaticTextDispT<T>::get_Width(float* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPStaticTextDispT<T>::get_Width(void)
{
  float Width;
  this->get_Width((float*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPStaticTextDispT<T>::set_Width(float Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1010));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPStaticTextDispT<T>::get_Height(float* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPStaticTextDispT<T>::get_Height(void)
{
  float Height;
  this->get_Height((float*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPStaticTextDispT<T>::set_Height(float Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1011));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPStaticTextDispT<T>::get_HWND(long* HWND/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HWND"), DISPID(1012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HWND /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PPStaticTextDispT<T>::get_HWND(void)
{
  long HWND;
  this->get_HWND((long*)&HWND);
  return HWND;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPStaticTextDispT<T>::get_OnSetFocus(BSTR* OnSetFocus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnSetFocus"), DISPID(1013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnSetFocus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPStaticTextDispT<T>::get_OnSetFocus(void)
{
  BSTR OnSetFocus;
  this->get_OnSetFocus((BSTR*)&OnSetFocus);
  return OnSetFocus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPStaticTextDispT<T>::set_OnSetFocus(BSTR OnSetFocus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnSetFocus"), DISPID(1013));
  TAutoArgs<1> _args;
  _args[1] = OnSetFocus /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPStaticTextDispT<T>::get_OnKillFocus(BSTR* OnKillFocus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKillFocus"), DISPID(1014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnKillFocus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPStaticTextDispT<T>::get_OnKillFocus(void)
{
  BSTR OnKillFocus;
  this->get_OnKillFocus((BSTR*)&OnKillFocus);
  return OnKillFocus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPStaticTextDispT<T>::set_OnKillFocus(BSTR OnKillFocus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKillFocus"), DISPID(1014));
  TAutoArgs<1> _args;
  _args[1] = OnKillFocus /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPStaticTextDispT<T>::get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tags"), DISPID(1015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Tags**)Tags /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::TagsPtr __fastcall
PPStaticTextDispT<T>::get_Tags(void)
{
  Powerpoint_2k::TagsPtr Tags;
  this->get_Tags((Powerpoint_2k::TagsPtr*)&Tags);
  return Tags;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPStaticTextDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPStaticTextDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPStaticTextDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1016));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  PPEditText
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934AD-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPEditTextDispT<T>::get_MultiLine(Office_2k::MsoTriState* MultiLine/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MultiLine"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)MultiLine /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPEditTextDispT<T>::get_MultiLine(void)
{
  Office_2k::MsoTriState MultiLine;
  this->get_MultiLine((Office_2k::MsoTriState*)&MultiLine);
  return MultiLine;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPEditTextDispT<T>::set_MultiLine(Office_2k::MsoTriState MultiLine/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MultiLine"), DISPID(2001));
  TAutoArgs<1> _args;
  _args[1] = (int)MultiLine /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPEditTextDispT<T>::get_VerticalScrollBar(Office_2k::MsoTriState* VerticalScrollBar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VerticalScrollBar"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)VerticalScrollBar /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPEditTextDispT<T>::get_VerticalScrollBar(void)
{
  Office_2k::MsoTriState VerticalScrollBar;
  this->get_VerticalScrollBar((Office_2k::MsoTriState*)&VerticalScrollBar);
  return VerticalScrollBar;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPEditTextDispT<T>::set_VerticalScrollBar(Office_2k::MsoTriState VerticalScrollBar/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("VerticalScrollBar"), DISPID(2002));
  TAutoArgs<1> _args;
  _args[1] = (int)VerticalScrollBar /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPEditTextDispT<T>::get_WordWrap(Office_2k::MsoTriState* WordWrap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WordWrap"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)WordWrap /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPEditTextDispT<T>::get_WordWrap(void)
{
  Office_2k::MsoTriState WordWrap;
  this->get_WordWrap((Office_2k::MsoTriState*)&WordWrap);
  return WordWrap;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPEditTextDispT<T>::set_WordWrap(Office_2k::MsoTriState WordWrap/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WordWrap"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = (int)WordWrap /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPEditTextDispT<T>::get_ReadOnly(Office_2k::MsoTriState* ReadOnly/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReadOnly"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ReadOnly /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPEditTextDispT<T>::get_ReadOnly(void)
{
  Office_2k::MsoTriState ReadOnly;
  this->get_ReadOnly((Office_2k::MsoTriState*)&ReadOnly);
  return ReadOnly;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPEditTextDispT<T>::set_ReadOnly(Office_2k::MsoTriState ReadOnly/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReadOnly"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = (int)ReadOnly /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPEditTextDispT<T>::get_Text(BSTR* Text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Text /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPEditTextDispT<T>::get_Text(void)
{
  BSTR Text;
  this->get_Text((BSTR*)&Text);
  return Text;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPEditTextDispT<T>::set_Text(BSTR Text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPEditTextDispT<T>::get_MaxLength(int* MaxLength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxLength"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(MaxLength /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PPEditTextDispT<T>::get_MaxLength(void)
{
  int MaxLength;
  this->get_MaxLength((int*)&MaxLength);
  return MaxLength;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPEditTextDispT<T>::set_MaxLength(int MaxLength/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxLength"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = MaxLength /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPEditTextDispT<T>::get_OnAChange(BSTR* OnAChange/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnAChange"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnAChange /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPEditTextDispT<T>::get_OnAChange(void)
{
  BSTR OnAChange;
  this->get_OnAChange((BSTR*)&OnAChange);
  return OnAChange;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPEditTextDispT<T>::set_OnAChange(BSTR OnAChange/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnAChange"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = OnAChange /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPEditTextDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
PPEditTextDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPEditTextDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PPEditTextDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPEditTextDispT<T>::get_Enable(Office_2k::MsoTriState* Enable/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enable"), DISPID(1003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Enable /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPEditTextDispT<T>::get_Enable(void)
{
  Office_2k::MsoTriState Enable;
  this->get_Enable((Office_2k::MsoTriState*)&Enable);
  return Enable;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPEditTextDispT<T>::set_Enable(Office_2k::MsoTriState Enable/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enable"), DISPID(1003));
  TAutoArgs<1> _args;
  _args[1] = (int)Enable /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPEditTextDispT<T>::get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPEditTextDispT<T>::get_Visible(void)
{
  Office_2k::MsoTriState Visible;
  this->get_Visible((Office_2k::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPEditTextDispT<T>::set_Visible(Office_2k::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1004));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPEditTextDispT<T>::get_Focus(Office_2k::MsoTriState* Focus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Focus"), DISPID(1005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Focus /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPEditTextDispT<T>::get_Focus(void)
{
  Office_2k::MsoTriState Focus;
  this->get_Focus((Office_2k::MsoTriState*)&Focus);
  return Focus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPEditTextDispT<T>::set_Focus(Office_2k::MsoTriState Focus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Focus"), DISPID(1005));
  TAutoArgs<1> _args;
  _args[1] = (int)Focus /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPEditTextDispT<T>::get_Label(BSTR* Label/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(1006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Label /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPEditTextDispT<T>::get_Label(void)
{
  BSTR Label;
  this->get_Label((BSTR*)&Label);
  return Label;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPEditTextDispT<T>::set_Label(BSTR Label/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(1006));
  TAutoArgs<1> _args;
  _args[1] = Label /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPEditTextDispT<T>::get_HelpId(int* HelpId/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpId"), DISPID(1007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HelpId /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PPEditTextDispT<T>::get_HelpId(void)
{
  int HelpId;
  this->get_HelpId((int*)&HelpId);
  return HelpId;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPEditTextDispT<T>::set_HelpId(int HelpId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpId"), DISPID(1007));
  TAutoArgs<1> _args;
  _args[1] = HelpId /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPEditTextDispT<T>::get_Left(float* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPEditTextDispT<T>::get_Left(void)
{
  float Left;
  this->get_Left((float*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPEditTextDispT<T>::set_Left(float Left/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1008));
  TAutoArgs<1> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPEditTextDispT<T>::get_Top(float* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPEditTextDispT<T>::get_Top(void)
{
  float Top;
  this->get_Top((float*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPEditTextDispT<T>::set_Top(float Top/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1009));
  TAutoArgs<1> _args;
  _args[1] = Top /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPEditTextDispT<T>::get_Width(float* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPEditTextDispT<T>::get_Width(void)
{
  float Width;
  this->get_Width((float*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPEditTextDispT<T>::set_Width(float Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1010));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPEditTextDispT<T>::get_Height(float* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPEditTextDispT<T>::get_Height(void)
{
  float Height;
  this->get_Height((float*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPEditTextDispT<T>::set_Height(float Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1011));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPEditTextDispT<T>::get_HWND(long* HWND/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HWND"), DISPID(1012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HWND /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PPEditTextDispT<T>::get_HWND(void)
{
  long HWND;
  this->get_HWND((long*)&HWND);
  return HWND;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPEditTextDispT<T>::get_OnSetFocus(BSTR* OnSetFocus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnSetFocus"), DISPID(1013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnSetFocus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPEditTextDispT<T>::get_OnSetFocus(void)
{
  BSTR OnSetFocus;
  this->get_OnSetFocus((BSTR*)&OnSetFocus);
  return OnSetFocus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPEditTextDispT<T>::set_OnSetFocus(BSTR OnSetFocus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnSetFocus"), DISPID(1013));
  TAutoArgs<1> _args;
  _args[1] = OnSetFocus /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPEditTextDispT<T>::get_OnKillFocus(BSTR* OnKillFocus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKillFocus"), DISPID(1014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnKillFocus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPEditTextDispT<T>::get_OnKillFocus(void)
{
  BSTR OnKillFocus;
  this->get_OnKillFocus((BSTR*)&OnKillFocus);
  return OnKillFocus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPEditTextDispT<T>::set_OnKillFocus(BSTR OnKillFocus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKillFocus"), DISPID(1014));
  TAutoArgs<1> _args;
  _args[1] = OnKillFocus /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPEditTextDispT<T>::get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tags"), DISPID(1015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Tags**)Tags /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::TagsPtr __fastcall
PPEditTextDispT<T>::get_Tags(void)
{
  Powerpoint_2k::TagsPtr Tags;
  this->get_Tags((Powerpoint_2k::TagsPtr*)&Tags);
  return Tags;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPEditTextDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPEditTextDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPEditTextDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1016));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  PPIcon
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934AE-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPIconDispT<T>::get_ResourceID(int* ResourceID/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ResourceID"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ResourceID /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PPIconDispT<T>::get_ResourceID(void)
{
  int ResourceID;
  this->get_ResourceID((int*)&ResourceID);
  return ResourceID;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPIconDispT<T>::set_ResourceID(int ResourceID/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ResourceID"), DISPID(2001));
  TAutoArgs<1> _args;
  _args[1] = ResourceID /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPIconDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
PPIconDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPIconDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PPIconDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPIconDispT<T>::get_Enable(Office_2k::MsoTriState* Enable/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enable"), DISPID(1003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Enable /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPIconDispT<T>::get_Enable(void)
{
  Office_2k::MsoTriState Enable;
  this->get_Enable((Office_2k::MsoTriState*)&Enable);
  return Enable;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPIconDispT<T>::set_Enable(Office_2k::MsoTriState Enable/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enable"), DISPID(1003));
  TAutoArgs<1> _args;
  _args[1] = (int)Enable /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPIconDispT<T>::get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPIconDispT<T>::get_Visible(void)
{
  Office_2k::MsoTriState Visible;
  this->get_Visible((Office_2k::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPIconDispT<T>::set_Visible(Office_2k::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1004));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPIconDispT<T>::get_Focus(Office_2k::MsoTriState* Focus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Focus"), DISPID(1005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Focus /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPIconDispT<T>::get_Focus(void)
{
  Office_2k::MsoTriState Focus;
  this->get_Focus((Office_2k::MsoTriState*)&Focus);
  return Focus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPIconDispT<T>::set_Focus(Office_2k::MsoTriState Focus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Focus"), DISPID(1005));
  TAutoArgs<1> _args;
  _args[1] = (int)Focus /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPIconDispT<T>::get_Label(BSTR* Label/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(1006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Label /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPIconDispT<T>::get_Label(void)
{
  BSTR Label;
  this->get_Label((BSTR*)&Label);
  return Label;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPIconDispT<T>::set_Label(BSTR Label/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(1006));
  TAutoArgs<1> _args;
  _args[1] = Label /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPIconDispT<T>::get_HelpId(int* HelpId/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpId"), DISPID(1007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HelpId /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PPIconDispT<T>::get_HelpId(void)
{
  int HelpId;
  this->get_HelpId((int*)&HelpId);
  return HelpId;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPIconDispT<T>::set_HelpId(int HelpId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpId"), DISPID(1007));
  TAutoArgs<1> _args;
  _args[1] = HelpId /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPIconDispT<T>::get_Left(float* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPIconDispT<T>::get_Left(void)
{
  float Left;
  this->get_Left((float*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPIconDispT<T>::set_Left(float Left/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1008));
  TAutoArgs<1> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPIconDispT<T>::get_Top(float* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPIconDispT<T>::get_Top(void)
{
  float Top;
  this->get_Top((float*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPIconDispT<T>::set_Top(float Top/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1009));
  TAutoArgs<1> _args;
  _args[1] = Top /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPIconDispT<T>::get_Width(float* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPIconDispT<T>::get_Width(void)
{
  float Width;
  this->get_Width((float*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPIconDispT<T>::set_Width(float Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1010));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPIconDispT<T>::get_Height(float* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPIconDispT<T>::get_Height(void)
{
  float Height;
  this->get_Height((float*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPIconDispT<T>::set_Height(float Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1011));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPIconDispT<T>::get_HWND(long* HWND/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HWND"), DISPID(1012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HWND /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PPIconDispT<T>::get_HWND(void)
{
  long HWND;
  this->get_HWND((long*)&HWND);
  return HWND;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPIconDispT<T>::get_OnSetFocus(BSTR* OnSetFocus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnSetFocus"), DISPID(1013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnSetFocus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPIconDispT<T>::get_OnSetFocus(void)
{
  BSTR OnSetFocus;
  this->get_OnSetFocus((BSTR*)&OnSetFocus);
  return OnSetFocus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPIconDispT<T>::set_OnSetFocus(BSTR OnSetFocus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnSetFocus"), DISPID(1013));
  TAutoArgs<1> _args;
  _args[1] = OnSetFocus /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPIconDispT<T>::get_OnKillFocus(BSTR* OnKillFocus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKillFocus"), DISPID(1014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnKillFocus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPIconDispT<T>::get_OnKillFocus(void)
{
  BSTR OnKillFocus;
  this->get_OnKillFocus((BSTR*)&OnKillFocus);
  return OnKillFocus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPIconDispT<T>::set_OnKillFocus(BSTR OnKillFocus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKillFocus"), DISPID(1014));
  TAutoArgs<1> _args;
  _args[1] = OnKillFocus /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPIconDispT<T>::get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tags"), DISPID(1015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Tags**)Tags /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::TagsPtr __fastcall
PPIconDispT<T>::get_Tags(void)
{
  Powerpoint_2k::TagsPtr Tags;
  this->get_Tags((Powerpoint_2k::TagsPtr*)&Tags);
  return Tags;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPIconDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPIconDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPIconDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1016));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  PPBitmap
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934AF-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapDispT<T>::get_ResourceID(int* ResourceID/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ResourceID"), DISPID(2000));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ResourceID /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PPBitmapDispT<T>::get_ResourceID(void)
{
  int ResourceID;
  this->get_ResourceID((int*)&ResourceID);
  return ResourceID;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapDispT<T>::set_ResourceID(int ResourceID/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ResourceID"), DISPID(2000));
  TAutoArgs<1> _args;
  _args[1] = ResourceID /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapDispT<T>::get_OnClick(BSTR* OnClick/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClick"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnClick /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPBitmapDispT<T>::get_OnClick(void)
{
  BSTR OnClick;
  this->get_OnClick((BSTR*)&OnClick);
  return OnClick;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapDispT<T>::set_OnClick(BSTR OnClick/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClick"), DISPID(2001));
  TAutoArgs<1> _args;
  _args[1] = OnClick /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
PPBitmapDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PPBitmapDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapDispT<T>::get_Enable(Office_2k::MsoTriState* Enable/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enable"), DISPID(1003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Enable /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPBitmapDispT<T>::get_Enable(void)
{
  Office_2k::MsoTriState Enable;
  this->get_Enable((Office_2k::MsoTriState*)&Enable);
  return Enable;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapDispT<T>::set_Enable(Office_2k::MsoTriState Enable/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enable"), DISPID(1003));
  TAutoArgs<1> _args;
  _args[1] = (int)Enable /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapDispT<T>::get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPBitmapDispT<T>::get_Visible(void)
{
  Office_2k::MsoTriState Visible;
  this->get_Visible((Office_2k::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapDispT<T>::set_Visible(Office_2k::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1004));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapDispT<T>::get_Focus(Office_2k::MsoTriState* Focus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Focus"), DISPID(1005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Focus /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPBitmapDispT<T>::get_Focus(void)
{
  Office_2k::MsoTriState Focus;
  this->get_Focus((Office_2k::MsoTriState*)&Focus);
  return Focus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapDispT<T>::set_Focus(Office_2k::MsoTriState Focus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Focus"), DISPID(1005));
  TAutoArgs<1> _args;
  _args[1] = (int)Focus /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapDispT<T>::get_Label(BSTR* Label/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(1006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Label /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPBitmapDispT<T>::get_Label(void)
{
  BSTR Label;
  this->get_Label((BSTR*)&Label);
  return Label;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapDispT<T>::set_Label(BSTR Label/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(1006));
  TAutoArgs<1> _args;
  _args[1] = Label /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapDispT<T>::get_HelpId(int* HelpId/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpId"), DISPID(1007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HelpId /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PPBitmapDispT<T>::get_HelpId(void)
{
  int HelpId;
  this->get_HelpId((int*)&HelpId);
  return HelpId;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapDispT<T>::set_HelpId(int HelpId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpId"), DISPID(1007));
  TAutoArgs<1> _args;
  _args[1] = HelpId /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapDispT<T>::get_Left(float* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPBitmapDispT<T>::get_Left(void)
{
  float Left;
  this->get_Left((float*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapDispT<T>::set_Left(float Left/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1008));
  TAutoArgs<1> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapDispT<T>::get_Top(float* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPBitmapDispT<T>::get_Top(void)
{
  float Top;
  this->get_Top((float*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapDispT<T>::set_Top(float Top/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1009));
  TAutoArgs<1> _args;
  _args[1] = Top /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapDispT<T>::get_Width(float* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPBitmapDispT<T>::get_Width(void)
{
  float Width;
  this->get_Width((float*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapDispT<T>::set_Width(float Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1010));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapDispT<T>::get_Height(float* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPBitmapDispT<T>::get_Height(void)
{
  float Height;
  this->get_Height((float*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapDispT<T>::set_Height(float Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1011));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapDispT<T>::get_HWND(long* HWND/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HWND"), DISPID(1012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HWND /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PPBitmapDispT<T>::get_HWND(void)
{
  long HWND;
  this->get_HWND((long*)&HWND);
  return HWND;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapDispT<T>::get_OnSetFocus(BSTR* OnSetFocus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnSetFocus"), DISPID(1013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnSetFocus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPBitmapDispT<T>::get_OnSetFocus(void)
{
  BSTR OnSetFocus;
  this->get_OnSetFocus((BSTR*)&OnSetFocus);
  return OnSetFocus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapDispT<T>::set_OnSetFocus(BSTR OnSetFocus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnSetFocus"), DISPID(1013));
  TAutoArgs<1> _args;
  _args[1] = OnSetFocus /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapDispT<T>::get_OnKillFocus(BSTR* OnKillFocus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKillFocus"), DISPID(1014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnKillFocus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPBitmapDispT<T>::get_OnKillFocus(void)
{
  BSTR OnKillFocus;
  this->get_OnKillFocus((BSTR*)&OnKillFocus);
  return OnKillFocus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapDispT<T>::set_OnKillFocus(BSTR OnKillFocus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKillFocus"), DISPID(1014));
  TAutoArgs<1> _args;
  _args[1] = OnKillFocus /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapDispT<T>::get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tags"), DISPID(1015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Tags**)Tags /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::TagsPtr __fastcall
PPBitmapDispT<T>::get_Tags(void)
{
  Powerpoint_2k::TagsPtr Tags;
  this->get_Tags((Powerpoint_2k::TagsPtr*)&Tags);
  return Tags;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPBitmapDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPBitmapDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1016));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  PPSpinner
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934B0-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSpinnerDispT<T>::get_Minimum(int* Minimum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Minimum"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Minimum /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PPSpinnerDispT<T>::get_Minimum(void)
{
  int Minimum;
  this->get_Minimum((int*)&Minimum);
  return Minimum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSpinnerDispT<T>::set_Minimum(int Minimum/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Minimum"), DISPID(2001));
  TAutoArgs<1> _args;
  _args[1] = Minimum /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSpinnerDispT<T>::get_Maximum(int* Maximum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Maximum"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Maximum /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PPSpinnerDispT<T>::get_Maximum(void)
{
  int Maximum;
  this->get_Maximum((int*)&Maximum);
  return Maximum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSpinnerDispT<T>::set_Maximum(int Maximum/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Maximum"), DISPID(2002));
  TAutoArgs<1> _args;
  _args[1] = Maximum /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSpinnerDispT<T>::get_Increment(int* Increment/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Increment"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Increment /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PPSpinnerDispT<T>::get_Increment(void)
{
  int Increment;
  this->get_Increment((int*)&Increment);
  return Increment;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSpinnerDispT<T>::set_Increment(int Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Increment"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSpinnerDispT<T>::get_PageChange(int* PageChange/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PageChange"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(PageChange /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PPSpinnerDispT<T>::get_PageChange(void)
{
  int PageChange;
  this->get_PageChange((int*)&PageChange);
  return PageChange;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSpinnerDispT<T>::set_PageChange(int PageChange/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PageChange"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = PageChange /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSpinnerDispT<T>::get_CurrentValue(int* CurrentValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentValue"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CurrentValue /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PPSpinnerDispT<T>::get_CurrentValue(void)
{
  int CurrentValue;
  this->get_CurrentValue((int*)&CurrentValue);
  return CurrentValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSpinnerDispT<T>::set_CurrentValue(int CurrentValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentValue"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = CurrentValue /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSpinnerDispT<T>::get_OnAChange(BSTR* OnAChange/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnAChange"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnAChange /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPSpinnerDispT<T>::get_OnAChange(void)
{
  BSTR OnAChange;
  this->get_OnAChange((BSTR*)&OnAChange);
  return OnAChange;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSpinnerDispT<T>::set_OnAChange(BSTR OnAChange/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnAChange"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = OnAChange /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSpinnerDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
PPSpinnerDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSpinnerDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PPSpinnerDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSpinnerDispT<T>::get_Enable(Office_2k::MsoTriState* Enable/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enable"), DISPID(1003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Enable /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPSpinnerDispT<T>::get_Enable(void)
{
  Office_2k::MsoTriState Enable;
  this->get_Enable((Office_2k::MsoTriState*)&Enable);
  return Enable;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSpinnerDispT<T>::set_Enable(Office_2k::MsoTriState Enable/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enable"), DISPID(1003));
  TAutoArgs<1> _args;
  _args[1] = (int)Enable /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSpinnerDispT<T>::get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPSpinnerDispT<T>::get_Visible(void)
{
  Office_2k::MsoTriState Visible;
  this->get_Visible((Office_2k::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSpinnerDispT<T>::set_Visible(Office_2k::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1004));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSpinnerDispT<T>::get_Focus(Office_2k::MsoTriState* Focus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Focus"), DISPID(1005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Focus /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPSpinnerDispT<T>::get_Focus(void)
{
  Office_2k::MsoTriState Focus;
  this->get_Focus((Office_2k::MsoTriState*)&Focus);
  return Focus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSpinnerDispT<T>::set_Focus(Office_2k::MsoTriState Focus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Focus"), DISPID(1005));
  TAutoArgs<1> _args;
  _args[1] = (int)Focus /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSpinnerDispT<T>::get_Label(BSTR* Label/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(1006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Label /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPSpinnerDispT<T>::get_Label(void)
{
  BSTR Label;
  this->get_Label((BSTR*)&Label);
  return Label;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSpinnerDispT<T>::set_Label(BSTR Label/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(1006));
  TAutoArgs<1> _args;
  _args[1] = Label /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSpinnerDispT<T>::get_HelpId(int* HelpId/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpId"), DISPID(1007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HelpId /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PPSpinnerDispT<T>::get_HelpId(void)
{
  int HelpId;
  this->get_HelpId((int*)&HelpId);
  return HelpId;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSpinnerDispT<T>::set_HelpId(int HelpId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpId"), DISPID(1007));
  TAutoArgs<1> _args;
  _args[1] = HelpId /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSpinnerDispT<T>::get_Left(float* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPSpinnerDispT<T>::get_Left(void)
{
  float Left;
  this->get_Left((float*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSpinnerDispT<T>::set_Left(float Left/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1008));
  TAutoArgs<1> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSpinnerDispT<T>::get_Top(float* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPSpinnerDispT<T>::get_Top(void)
{
  float Top;
  this->get_Top((float*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSpinnerDispT<T>::set_Top(float Top/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1009));
  TAutoArgs<1> _args;
  _args[1] = Top /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSpinnerDispT<T>::get_Width(float* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPSpinnerDispT<T>::get_Width(void)
{
  float Width;
  this->get_Width((float*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSpinnerDispT<T>::set_Width(float Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1010));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSpinnerDispT<T>::get_Height(float* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPSpinnerDispT<T>::get_Height(void)
{
  float Height;
  this->get_Height((float*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSpinnerDispT<T>::set_Height(float Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1011));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSpinnerDispT<T>::get_HWND(long* HWND/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HWND"), DISPID(1012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HWND /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PPSpinnerDispT<T>::get_HWND(void)
{
  long HWND;
  this->get_HWND((long*)&HWND);
  return HWND;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSpinnerDispT<T>::get_OnSetFocus(BSTR* OnSetFocus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnSetFocus"), DISPID(1013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnSetFocus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPSpinnerDispT<T>::get_OnSetFocus(void)
{
  BSTR OnSetFocus;
  this->get_OnSetFocus((BSTR*)&OnSetFocus);
  return OnSetFocus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSpinnerDispT<T>::set_OnSetFocus(BSTR OnSetFocus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnSetFocus"), DISPID(1013));
  TAutoArgs<1> _args;
  _args[1] = OnSetFocus /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSpinnerDispT<T>::get_OnKillFocus(BSTR* OnKillFocus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKillFocus"), DISPID(1014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnKillFocus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPSpinnerDispT<T>::get_OnKillFocus(void)
{
  BSTR OnKillFocus;
  this->get_OnKillFocus((BSTR*)&OnKillFocus);
  return OnKillFocus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSpinnerDispT<T>::set_OnKillFocus(BSTR OnKillFocus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKillFocus"), DISPID(1014));
  TAutoArgs<1> _args;
  _args[1] = OnKillFocus /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSpinnerDispT<T>::get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tags"), DISPID(1015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Tags**)Tags /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::TagsPtr __fastcall
PPSpinnerDispT<T>::get_Tags(void)
{
  Powerpoint_2k::TagsPtr Tags;
  this->get_Tags((Powerpoint_2k::TagsPtr*)&Tags);
  return Tags;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSpinnerDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPSpinnerDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSpinnerDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1016));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  PPScrollBar
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934B1-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPScrollBarDispT<T>::get_Minimum(int* Minimum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Minimum"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Minimum /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PPScrollBarDispT<T>::get_Minimum(void)
{
  int Minimum;
  this->get_Minimum((int*)&Minimum);
  return Minimum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPScrollBarDispT<T>::set_Minimum(int Minimum/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Minimum"), DISPID(2001));
  TAutoArgs<1> _args;
  _args[1] = Minimum /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPScrollBarDispT<T>::get_Maximum(int* Maximum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Maximum"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Maximum /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PPScrollBarDispT<T>::get_Maximum(void)
{
  int Maximum;
  this->get_Maximum((int*)&Maximum);
  return Maximum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPScrollBarDispT<T>::set_Maximum(int Maximum/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Maximum"), DISPID(2002));
  TAutoArgs<1> _args;
  _args[1] = Maximum /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPScrollBarDispT<T>::get_Increment(int* Increment/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Increment"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Increment /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PPScrollBarDispT<T>::get_Increment(void)
{
  int Increment;
  this->get_Increment((int*)&Increment);
  return Increment;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPScrollBarDispT<T>::set_Increment(int Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Increment"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPScrollBarDispT<T>::get_PageChange(int* PageChange/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PageChange"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(PageChange /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PPScrollBarDispT<T>::get_PageChange(void)
{
  int PageChange;
  this->get_PageChange((int*)&PageChange);
  return PageChange;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPScrollBarDispT<T>::set_PageChange(int PageChange/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PageChange"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = PageChange /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPScrollBarDispT<T>::get_CurrentValue(int* CurrentValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentValue"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CurrentValue /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PPScrollBarDispT<T>::get_CurrentValue(void)
{
  int CurrentValue;
  this->get_CurrentValue((int*)&CurrentValue);
  return CurrentValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPScrollBarDispT<T>::set_CurrentValue(int CurrentValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentValue"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = CurrentValue /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPScrollBarDispT<T>::get_OnScroll(BSTR* OnScroll/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnScroll"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnScroll /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPScrollBarDispT<T>::get_OnScroll(void)
{
  BSTR OnScroll;
  this->get_OnScroll((BSTR*)&OnScroll);
  return OnScroll;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPScrollBarDispT<T>::set_OnScroll(BSTR OnScroll/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnScroll"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = OnScroll /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPScrollBarDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
PPScrollBarDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPScrollBarDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PPScrollBarDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPScrollBarDispT<T>::get_Enable(Office_2k::MsoTriState* Enable/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enable"), DISPID(1003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Enable /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPScrollBarDispT<T>::get_Enable(void)
{
  Office_2k::MsoTriState Enable;
  this->get_Enable((Office_2k::MsoTriState*)&Enable);
  return Enable;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPScrollBarDispT<T>::set_Enable(Office_2k::MsoTriState Enable/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enable"), DISPID(1003));
  TAutoArgs<1> _args;
  _args[1] = (int)Enable /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPScrollBarDispT<T>::get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPScrollBarDispT<T>::get_Visible(void)
{
  Office_2k::MsoTriState Visible;
  this->get_Visible((Office_2k::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPScrollBarDispT<T>::set_Visible(Office_2k::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1004));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPScrollBarDispT<T>::get_Focus(Office_2k::MsoTriState* Focus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Focus"), DISPID(1005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Focus /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPScrollBarDispT<T>::get_Focus(void)
{
  Office_2k::MsoTriState Focus;
  this->get_Focus((Office_2k::MsoTriState*)&Focus);
  return Focus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPScrollBarDispT<T>::set_Focus(Office_2k::MsoTriState Focus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Focus"), DISPID(1005));
  TAutoArgs<1> _args;
  _args[1] = (int)Focus /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPScrollBarDispT<T>::get_Label(BSTR* Label/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(1006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Label /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPScrollBarDispT<T>::get_Label(void)
{
  BSTR Label;
  this->get_Label((BSTR*)&Label);
  return Label;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPScrollBarDispT<T>::set_Label(BSTR Label/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(1006));
  TAutoArgs<1> _args;
  _args[1] = Label /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPScrollBarDispT<T>::get_HelpId(int* HelpId/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpId"), DISPID(1007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HelpId /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PPScrollBarDispT<T>::get_HelpId(void)
{
  int HelpId;
  this->get_HelpId((int*)&HelpId);
  return HelpId;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPScrollBarDispT<T>::set_HelpId(int HelpId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpId"), DISPID(1007));
  TAutoArgs<1> _args;
  _args[1] = HelpId /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPScrollBarDispT<T>::get_Left(float* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPScrollBarDispT<T>::get_Left(void)
{
  float Left;
  this->get_Left((float*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPScrollBarDispT<T>::set_Left(float Left/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1008));
  TAutoArgs<1> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPScrollBarDispT<T>::get_Top(float* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPScrollBarDispT<T>::get_Top(void)
{
  float Top;
  this->get_Top((float*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPScrollBarDispT<T>::set_Top(float Top/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1009));
  TAutoArgs<1> _args;
  _args[1] = Top /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPScrollBarDispT<T>::get_Width(float* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPScrollBarDispT<T>::get_Width(void)
{
  float Width;
  this->get_Width((float*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPScrollBarDispT<T>::set_Width(float Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1010));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPScrollBarDispT<T>::get_Height(float* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPScrollBarDispT<T>::get_Height(void)
{
  float Height;
  this->get_Height((float*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPScrollBarDispT<T>::set_Height(float Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1011));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPScrollBarDispT<T>::get_HWND(long* HWND/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HWND"), DISPID(1012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HWND /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PPScrollBarDispT<T>::get_HWND(void)
{
  long HWND;
  this->get_HWND((long*)&HWND);
  return HWND;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPScrollBarDispT<T>::get_OnSetFocus(BSTR* OnSetFocus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnSetFocus"), DISPID(1013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnSetFocus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPScrollBarDispT<T>::get_OnSetFocus(void)
{
  BSTR OnSetFocus;
  this->get_OnSetFocus((BSTR*)&OnSetFocus);
  return OnSetFocus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPScrollBarDispT<T>::set_OnSetFocus(BSTR OnSetFocus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnSetFocus"), DISPID(1013));
  TAutoArgs<1> _args;
  _args[1] = OnSetFocus /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPScrollBarDispT<T>::get_OnKillFocus(BSTR* OnKillFocus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKillFocus"), DISPID(1014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnKillFocus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPScrollBarDispT<T>::get_OnKillFocus(void)
{
  BSTR OnKillFocus;
  this->get_OnKillFocus((BSTR*)&OnKillFocus);
  return OnKillFocus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPScrollBarDispT<T>::set_OnKillFocus(BSTR OnKillFocus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKillFocus"), DISPID(1014));
  TAutoArgs<1> _args;
  _args[1] = OnKillFocus /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPScrollBarDispT<T>::get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tags"), DISPID(1015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Tags**)Tags /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::TagsPtr __fastcall
PPScrollBarDispT<T>::get_Tags(void)
{
  Powerpoint_2k::TagsPtr Tags;
  this->get_Tags((Powerpoint_2k::TagsPtr*)&Tags);
  return Tags;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPScrollBarDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPScrollBarDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPScrollBarDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1016));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  PPGroupBox
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934B2-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPGroupBoxDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
PPGroupBoxDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPGroupBoxDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PPGroupBoxDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPGroupBoxDispT<T>::get_Enable(Office_2k::MsoTriState* Enable/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enable"), DISPID(1003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Enable /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPGroupBoxDispT<T>::get_Enable(void)
{
  Office_2k::MsoTriState Enable;
  this->get_Enable((Office_2k::MsoTriState*)&Enable);
  return Enable;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPGroupBoxDispT<T>::set_Enable(Office_2k::MsoTriState Enable/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enable"), DISPID(1003));
  TAutoArgs<1> _args;
  _args[1] = (int)Enable /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPGroupBoxDispT<T>::get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPGroupBoxDispT<T>::get_Visible(void)
{
  Office_2k::MsoTriState Visible;
  this->get_Visible((Office_2k::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPGroupBoxDispT<T>::set_Visible(Office_2k::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1004));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPGroupBoxDispT<T>::get_Focus(Office_2k::MsoTriState* Focus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Focus"), DISPID(1005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Focus /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPGroupBoxDispT<T>::get_Focus(void)
{
  Office_2k::MsoTriState Focus;
  this->get_Focus((Office_2k::MsoTriState*)&Focus);
  return Focus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPGroupBoxDispT<T>::set_Focus(Office_2k::MsoTriState Focus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Focus"), DISPID(1005));
  TAutoArgs<1> _args;
  _args[1] = (int)Focus /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPGroupBoxDispT<T>::get_Label(BSTR* Label/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(1006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Label /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPGroupBoxDispT<T>::get_Label(void)
{
  BSTR Label;
  this->get_Label((BSTR*)&Label);
  return Label;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPGroupBoxDispT<T>::set_Label(BSTR Label/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(1006));
  TAutoArgs<1> _args;
  _args[1] = Label /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPGroupBoxDispT<T>::get_HelpId(int* HelpId/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpId"), DISPID(1007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HelpId /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PPGroupBoxDispT<T>::get_HelpId(void)
{
  int HelpId;
  this->get_HelpId((int*)&HelpId);
  return HelpId;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPGroupBoxDispT<T>::set_HelpId(int HelpId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpId"), DISPID(1007));
  TAutoArgs<1> _args;
  _args[1] = HelpId /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPGroupBoxDispT<T>::get_Left(float* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPGroupBoxDispT<T>::get_Left(void)
{
  float Left;
  this->get_Left((float*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPGroupBoxDispT<T>::set_Left(float Left/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1008));
  TAutoArgs<1> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPGroupBoxDispT<T>::get_Top(float* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPGroupBoxDispT<T>::get_Top(void)
{
  float Top;
  this->get_Top((float*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPGroupBoxDispT<T>::set_Top(float Top/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1009));
  TAutoArgs<1> _args;
  _args[1] = Top /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPGroupBoxDispT<T>::get_Width(float* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPGroupBoxDispT<T>::get_Width(void)
{
  float Width;
  this->get_Width((float*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPGroupBoxDispT<T>::set_Width(float Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1010));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPGroupBoxDispT<T>::get_Height(float* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPGroupBoxDispT<T>::get_Height(void)
{
  float Height;
  this->get_Height((float*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPGroupBoxDispT<T>::set_Height(float Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1011));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPGroupBoxDispT<T>::get_HWND(long* HWND/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HWND"), DISPID(1012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HWND /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PPGroupBoxDispT<T>::get_HWND(void)
{
  long HWND;
  this->get_HWND((long*)&HWND);
  return HWND;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPGroupBoxDispT<T>::get_OnSetFocus(BSTR* OnSetFocus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnSetFocus"), DISPID(1013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnSetFocus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPGroupBoxDispT<T>::get_OnSetFocus(void)
{
  BSTR OnSetFocus;
  this->get_OnSetFocus((BSTR*)&OnSetFocus);
  return OnSetFocus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPGroupBoxDispT<T>::set_OnSetFocus(BSTR OnSetFocus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnSetFocus"), DISPID(1013));
  TAutoArgs<1> _args;
  _args[1] = OnSetFocus /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPGroupBoxDispT<T>::get_OnKillFocus(BSTR* OnKillFocus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKillFocus"), DISPID(1014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnKillFocus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPGroupBoxDispT<T>::get_OnKillFocus(void)
{
  BSTR OnKillFocus;
  this->get_OnKillFocus((BSTR*)&OnKillFocus);
  return OnKillFocus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPGroupBoxDispT<T>::set_OnKillFocus(BSTR OnKillFocus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKillFocus"), DISPID(1014));
  TAutoArgs<1> _args;
  _args[1] = OnKillFocus /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPGroupBoxDispT<T>::get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tags"), DISPID(1015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Tags**)Tags /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::TagsPtr __fastcall
PPGroupBoxDispT<T>::get_Tags(void)
{
  Powerpoint_2k::TagsPtr Tags;
  this->get_Tags((Powerpoint_2k::TagsPtr*)&Tags);
  return Tags;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPGroupBoxDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPGroupBoxDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPGroupBoxDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1016));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  PPFrame
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934B3-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPFrameDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
PPFrameDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPFrameDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PPFrameDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPFrameDispT<T>::get_Enable(Office_2k::MsoTriState* Enable/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enable"), DISPID(1003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Enable /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPFrameDispT<T>::get_Enable(void)
{
  Office_2k::MsoTriState Enable;
  this->get_Enable((Office_2k::MsoTriState*)&Enable);
  return Enable;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPFrameDispT<T>::set_Enable(Office_2k::MsoTriState Enable/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enable"), DISPID(1003));
  TAutoArgs<1> _args;
  _args[1] = (int)Enable /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPFrameDispT<T>::get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPFrameDispT<T>::get_Visible(void)
{
  Office_2k::MsoTriState Visible;
  this->get_Visible((Office_2k::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPFrameDispT<T>::set_Visible(Office_2k::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1004));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPFrameDispT<T>::get_Focus(Office_2k::MsoTriState* Focus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Focus"), DISPID(1005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Focus /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPFrameDispT<T>::get_Focus(void)
{
  Office_2k::MsoTriState Focus;
  this->get_Focus((Office_2k::MsoTriState*)&Focus);
  return Focus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPFrameDispT<T>::set_Focus(Office_2k::MsoTriState Focus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Focus"), DISPID(1005));
  TAutoArgs<1> _args;
  _args[1] = (int)Focus /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPFrameDispT<T>::get_Label(BSTR* Label/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(1006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Label /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPFrameDispT<T>::get_Label(void)
{
  BSTR Label;
  this->get_Label((BSTR*)&Label);
  return Label;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPFrameDispT<T>::set_Label(BSTR Label/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(1006));
  TAutoArgs<1> _args;
  _args[1] = Label /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPFrameDispT<T>::get_HelpId(int* HelpId/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpId"), DISPID(1007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HelpId /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PPFrameDispT<T>::get_HelpId(void)
{
  int HelpId;
  this->get_HelpId((int*)&HelpId);
  return HelpId;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPFrameDispT<T>::set_HelpId(int HelpId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpId"), DISPID(1007));
  TAutoArgs<1> _args;
  _args[1] = HelpId /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPFrameDispT<T>::get_Left(float* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPFrameDispT<T>::get_Left(void)
{
  float Left;
  this->get_Left((float*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPFrameDispT<T>::set_Left(float Left/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1008));
  TAutoArgs<1> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPFrameDispT<T>::get_Top(float* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPFrameDispT<T>::get_Top(void)
{
  float Top;
  this->get_Top((float*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPFrameDispT<T>::set_Top(float Top/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1009));
  TAutoArgs<1> _args;
  _args[1] = Top /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPFrameDispT<T>::get_Width(float* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPFrameDispT<T>::get_Width(void)
{
  float Width;
  this->get_Width((float*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPFrameDispT<T>::set_Width(float Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1010));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPFrameDispT<T>::get_Height(float* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPFrameDispT<T>::get_Height(void)
{
  float Height;
  this->get_Height((float*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPFrameDispT<T>::set_Height(float Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1011));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPFrameDispT<T>::get_HWND(long* HWND/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HWND"), DISPID(1012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HWND /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PPFrameDispT<T>::get_HWND(void)
{
  long HWND;
  this->get_HWND((long*)&HWND);
  return HWND;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPFrameDispT<T>::get_OnSetFocus(BSTR* OnSetFocus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnSetFocus"), DISPID(1013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnSetFocus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPFrameDispT<T>::get_OnSetFocus(void)
{
  BSTR OnSetFocus;
  this->get_OnSetFocus((BSTR*)&OnSetFocus);
  return OnSetFocus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPFrameDispT<T>::set_OnSetFocus(BSTR OnSetFocus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnSetFocus"), DISPID(1013));
  TAutoArgs<1> _args;
  _args[1] = OnSetFocus /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPFrameDispT<T>::get_OnKillFocus(BSTR* OnKillFocus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKillFocus"), DISPID(1014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnKillFocus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPFrameDispT<T>::get_OnKillFocus(void)
{
  BSTR OnKillFocus;
  this->get_OnKillFocus((BSTR*)&OnKillFocus);
  return OnKillFocus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPFrameDispT<T>::set_OnKillFocus(BSTR OnKillFocus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKillFocus"), DISPID(1014));
  TAutoArgs<1> _args;
  _args[1] = OnKillFocus /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPFrameDispT<T>::get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tags"), DISPID(1015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Tags**)Tags /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::TagsPtr __fastcall
PPFrameDispT<T>::get_Tags(void)
{
  Powerpoint_2k::TagsPtr Tags;
  this->get_Tags((Powerpoint_2k::TagsPtr*)&Tags);
  return Tags;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPFrameDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPFrameDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPFrameDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1016));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  PPTabControl
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934B4-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPTabControlDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
PPTabControlDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPTabControlDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PPTabControlDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPTabControlDispT<T>::get_Enable(Office_2k::MsoTriState* Enable/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enable"), DISPID(1003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Enable /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPTabControlDispT<T>::get_Enable(void)
{
  Office_2k::MsoTriState Enable;
  this->get_Enable((Office_2k::MsoTriState*)&Enable);
  return Enable;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPTabControlDispT<T>::set_Enable(Office_2k::MsoTriState Enable/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enable"), DISPID(1003));
  TAutoArgs<1> _args;
  _args[1] = (int)Enable /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPTabControlDispT<T>::get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPTabControlDispT<T>::get_Visible(void)
{
  Office_2k::MsoTriState Visible;
  this->get_Visible((Office_2k::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPTabControlDispT<T>::set_Visible(Office_2k::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1004));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPTabControlDispT<T>::get_Focus(Office_2k::MsoTriState* Focus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Focus"), DISPID(1005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Focus /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPTabControlDispT<T>::get_Focus(void)
{
  Office_2k::MsoTriState Focus;
  this->get_Focus((Office_2k::MsoTriState*)&Focus);
  return Focus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPTabControlDispT<T>::set_Focus(Office_2k::MsoTriState Focus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Focus"), DISPID(1005));
  TAutoArgs<1> _args;
  _args[1] = (int)Focus /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPTabControlDispT<T>::get_Label(BSTR* Label/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(1006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Label /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPTabControlDispT<T>::get_Label(void)
{
  BSTR Label;
  this->get_Label((BSTR*)&Label);
  return Label;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPTabControlDispT<T>::set_Label(BSTR Label/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(1006));
  TAutoArgs<1> _args;
  _args[1] = Label /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPTabControlDispT<T>::get_HelpId(int* HelpId/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpId"), DISPID(1007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HelpId /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PPTabControlDispT<T>::get_HelpId(void)
{
  int HelpId;
  this->get_HelpId((int*)&HelpId);
  return HelpId;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPTabControlDispT<T>::set_HelpId(int HelpId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpId"), DISPID(1007));
  TAutoArgs<1> _args;
  _args[1] = HelpId /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPTabControlDispT<T>::get_Left(float* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPTabControlDispT<T>::get_Left(void)
{
  float Left;
  this->get_Left((float*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPTabControlDispT<T>::set_Left(float Left/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1008));
  TAutoArgs<1> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPTabControlDispT<T>::get_Top(float* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPTabControlDispT<T>::get_Top(void)
{
  float Top;
  this->get_Top((float*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPTabControlDispT<T>::set_Top(float Top/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1009));
  TAutoArgs<1> _args;
  _args[1] = Top /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPTabControlDispT<T>::get_Width(float* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPTabControlDispT<T>::get_Width(void)
{
  float Width;
  this->get_Width((float*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPTabControlDispT<T>::set_Width(float Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1010));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPTabControlDispT<T>::get_Height(float* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPTabControlDispT<T>::get_Height(void)
{
  float Height;
  this->get_Height((float*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPTabControlDispT<T>::set_Height(float Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1011));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPTabControlDispT<T>::get_HWND(long* HWND/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HWND"), DISPID(1012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HWND /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PPTabControlDispT<T>::get_HWND(void)
{
  long HWND;
  this->get_HWND((long*)&HWND);
  return HWND;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPTabControlDispT<T>::get_OnSetFocus(BSTR* OnSetFocus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnSetFocus"), DISPID(1013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnSetFocus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPTabControlDispT<T>::get_OnSetFocus(void)
{
  BSTR OnSetFocus;
  this->get_OnSetFocus((BSTR*)&OnSetFocus);
  return OnSetFocus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPTabControlDispT<T>::set_OnSetFocus(BSTR OnSetFocus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnSetFocus"), DISPID(1013));
  TAutoArgs<1> _args;
  _args[1] = OnSetFocus /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPTabControlDispT<T>::get_OnKillFocus(BSTR* OnKillFocus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKillFocus"), DISPID(1014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnKillFocus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPTabControlDispT<T>::get_OnKillFocus(void)
{
  BSTR OnKillFocus;
  this->get_OnKillFocus((BSTR*)&OnKillFocus);
  return OnKillFocus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPTabControlDispT<T>::set_OnKillFocus(BSTR OnKillFocus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKillFocus"), DISPID(1014));
  TAutoArgs<1> _args;
  _args[1] = OnKillFocus /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPTabControlDispT<T>::get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tags"), DISPID(1015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Tags**)Tags /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::TagsPtr __fastcall
PPTabControlDispT<T>::get_Tags(void)
{
  Powerpoint_2k::TagsPtr Tags;
  this->get_Tags((Powerpoint_2k::TagsPtr*)&Tags);
  return Tags;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPTabControlDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPTabControlDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPTabControlDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1016));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  PPDropDown
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934B5-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownDispT<T>::get_Strings(Powerpoint_2k::PPStringsPtr* Strings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Strings"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PPStrings**)Strings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PPStringsPtr __fastcall
PPDropDownDispT<T>::get_Strings(void)
{
  Powerpoint_2k::PPStringsPtr Strings;
  this->get_Strings((Powerpoint_2k::PPStringsPtr*)&Strings);
  return Strings;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownDispT<T>::get_FocusItem(int* FocusItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FocusItem"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FocusItem /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PPDropDownDispT<T>::get_FocusItem(void)
{
  int FocusItem;
  this->get_FocusItem((int*)&FocusItem);
  return FocusItem;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownDispT<T>::set_FocusItem(int FocusItem/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FocusItem"), DISPID(2002));
  TAutoArgs<1> _args;
  _args[1] = FocusItem /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownDispT<T>::get_OnSelectionChange(BSTR* OnSelectionChange/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnSelectionChange"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnSelectionChange /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPDropDownDispT<T>::get_OnSelectionChange(void)
{
  BSTR OnSelectionChange;
  this->get_OnSelectionChange((BSTR*)&OnSelectionChange);
  return OnSelectionChange;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownDispT<T>::set_OnSelectionChange(BSTR OnSelectionChange/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnSelectionChange"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = OnSelectionChange /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
PPDropDownDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PPDropDownDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownDispT<T>::get_Enable(Office_2k::MsoTriState* Enable/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enable"), DISPID(1003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Enable /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPDropDownDispT<T>::get_Enable(void)
{
  Office_2k::MsoTriState Enable;
  this->get_Enable((Office_2k::MsoTriState*)&Enable);
  return Enable;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownDispT<T>::set_Enable(Office_2k::MsoTriState Enable/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enable"), DISPID(1003));
  TAutoArgs<1> _args;
  _args[1] = (int)Enable /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownDispT<T>::get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPDropDownDispT<T>::get_Visible(void)
{
  Office_2k::MsoTriState Visible;
  this->get_Visible((Office_2k::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownDispT<T>::set_Visible(Office_2k::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1004));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownDispT<T>::get_Focus(Office_2k::MsoTriState* Focus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Focus"), DISPID(1005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Focus /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPDropDownDispT<T>::get_Focus(void)
{
  Office_2k::MsoTriState Focus;
  this->get_Focus((Office_2k::MsoTriState*)&Focus);
  return Focus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownDispT<T>::set_Focus(Office_2k::MsoTriState Focus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Focus"), DISPID(1005));
  TAutoArgs<1> _args;
  _args[1] = (int)Focus /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownDispT<T>::get_Label(BSTR* Label/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(1006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Label /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPDropDownDispT<T>::get_Label(void)
{
  BSTR Label;
  this->get_Label((BSTR*)&Label);
  return Label;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownDispT<T>::set_Label(BSTR Label/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(1006));
  TAutoArgs<1> _args;
  _args[1] = Label /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownDispT<T>::get_HelpId(int* HelpId/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpId"), DISPID(1007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HelpId /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PPDropDownDispT<T>::get_HelpId(void)
{
  int HelpId;
  this->get_HelpId((int*)&HelpId);
  return HelpId;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownDispT<T>::set_HelpId(int HelpId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpId"), DISPID(1007));
  TAutoArgs<1> _args;
  _args[1] = HelpId /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownDispT<T>::get_Left(float* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPDropDownDispT<T>::get_Left(void)
{
  float Left;
  this->get_Left((float*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownDispT<T>::set_Left(float Left/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1008));
  TAutoArgs<1> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownDispT<T>::get_Top(float* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPDropDownDispT<T>::get_Top(void)
{
  float Top;
  this->get_Top((float*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownDispT<T>::set_Top(float Top/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1009));
  TAutoArgs<1> _args;
  _args[1] = Top /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownDispT<T>::get_Width(float* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPDropDownDispT<T>::get_Width(void)
{
  float Width;
  this->get_Width((float*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownDispT<T>::set_Width(float Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1010));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownDispT<T>::get_Height(float* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPDropDownDispT<T>::get_Height(void)
{
  float Height;
  this->get_Height((float*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownDispT<T>::set_Height(float Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1011));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownDispT<T>::get_HWND(long* HWND/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HWND"), DISPID(1012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HWND /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PPDropDownDispT<T>::get_HWND(void)
{
  long HWND;
  this->get_HWND((long*)&HWND);
  return HWND;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownDispT<T>::get_OnSetFocus(BSTR* OnSetFocus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnSetFocus"), DISPID(1013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnSetFocus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPDropDownDispT<T>::get_OnSetFocus(void)
{
  BSTR OnSetFocus;
  this->get_OnSetFocus((BSTR*)&OnSetFocus);
  return OnSetFocus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownDispT<T>::set_OnSetFocus(BSTR OnSetFocus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnSetFocus"), DISPID(1013));
  TAutoArgs<1> _args;
  _args[1] = OnSetFocus /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownDispT<T>::get_OnKillFocus(BSTR* OnKillFocus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKillFocus"), DISPID(1014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnKillFocus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPDropDownDispT<T>::get_OnKillFocus(void)
{
  BSTR OnKillFocus;
  this->get_OnKillFocus((BSTR*)&OnKillFocus);
  return OnKillFocus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownDispT<T>::set_OnKillFocus(BSTR OnKillFocus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKillFocus"), DISPID(1014));
  TAutoArgs<1> _args;
  _args[1] = OnKillFocus /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownDispT<T>::get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tags"), DISPID(1015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Tags**)Tags /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::TagsPtr __fastcall
PPDropDownDispT<T>::get_Tags(void)
{
  Powerpoint_2k::TagsPtr Tags;
  this->get_Tags((Powerpoint_2k::TagsPtr*)&Tags);
  return Tags;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPDropDownDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1016));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  PPDropDownEdit
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934B6-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownEditDispT<T>::get_Strings(Powerpoint_2k::PPStringsPtr* Strings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Strings"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PPStrings**)Strings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PPStringsPtr __fastcall
PPDropDownEditDispT<T>::get_Strings(void)
{
  Powerpoint_2k::PPStringsPtr Strings;
  this->get_Strings((Powerpoint_2k::PPStringsPtr*)&Strings);
  return Strings;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownEditDispT<T>::get_FocusItem(int* FocusItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FocusItem"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FocusItem /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PPDropDownEditDispT<T>::get_FocusItem(void)
{
  int FocusItem;
  this->get_FocusItem((int*)&FocusItem);
  return FocusItem;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownEditDispT<T>::set_FocusItem(int FocusItem/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FocusItem"), DISPID(2002));
  TAutoArgs<1> _args;
  _args[1] = FocusItem /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownEditDispT<T>::get_OnSelectionChange(BSTR* OnSelectionChange/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnSelectionChange"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnSelectionChange /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPDropDownEditDispT<T>::get_OnSelectionChange(void)
{
  BSTR OnSelectionChange;
  this->get_OnSelectionChange((BSTR*)&OnSelectionChange);
  return OnSelectionChange;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownEditDispT<T>::set_OnSelectionChange(BSTR OnSelectionChange/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnSelectionChange"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = OnSelectionChange /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownEditDispT<T>::get_OnEdit(BSTR* OnEdit/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnEdit"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnEdit /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPDropDownEditDispT<T>::get_OnEdit(void)
{
  BSTR OnEdit;
  this->get_OnEdit((BSTR*)&OnEdit);
  return OnEdit;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownEditDispT<T>::set_OnEdit(BSTR OnEdit/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnEdit"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = OnEdit /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownEditDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
PPDropDownEditDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownEditDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PPDropDownEditDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownEditDispT<T>::get_Enable(Office_2k::MsoTriState* Enable/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enable"), DISPID(1003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Enable /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPDropDownEditDispT<T>::get_Enable(void)
{
  Office_2k::MsoTriState Enable;
  this->get_Enable((Office_2k::MsoTriState*)&Enable);
  return Enable;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownEditDispT<T>::set_Enable(Office_2k::MsoTriState Enable/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enable"), DISPID(1003));
  TAutoArgs<1> _args;
  _args[1] = (int)Enable /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownEditDispT<T>::get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPDropDownEditDispT<T>::get_Visible(void)
{
  Office_2k::MsoTriState Visible;
  this->get_Visible((Office_2k::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownEditDispT<T>::set_Visible(Office_2k::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1004));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownEditDispT<T>::get_Focus(Office_2k::MsoTriState* Focus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Focus"), DISPID(1005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Focus /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPDropDownEditDispT<T>::get_Focus(void)
{
  Office_2k::MsoTriState Focus;
  this->get_Focus((Office_2k::MsoTriState*)&Focus);
  return Focus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownEditDispT<T>::set_Focus(Office_2k::MsoTriState Focus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Focus"), DISPID(1005));
  TAutoArgs<1> _args;
  _args[1] = (int)Focus /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownEditDispT<T>::get_Label(BSTR* Label/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(1006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Label /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPDropDownEditDispT<T>::get_Label(void)
{
  BSTR Label;
  this->get_Label((BSTR*)&Label);
  return Label;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownEditDispT<T>::set_Label(BSTR Label/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(1006));
  TAutoArgs<1> _args;
  _args[1] = Label /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownEditDispT<T>::get_HelpId(int* HelpId/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpId"), DISPID(1007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HelpId /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PPDropDownEditDispT<T>::get_HelpId(void)
{
  int HelpId;
  this->get_HelpId((int*)&HelpId);
  return HelpId;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownEditDispT<T>::set_HelpId(int HelpId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpId"), DISPID(1007));
  TAutoArgs<1> _args;
  _args[1] = HelpId /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownEditDispT<T>::get_Left(float* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPDropDownEditDispT<T>::get_Left(void)
{
  float Left;
  this->get_Left((float*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownEditDispT<T>::set_Left(float Left/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1008));
  TAutoArgs<1> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownEditDispT<T>::get_Top(float* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPDropDownEditDispT<T>::get_Top(void)
{
  float Top;
  this->get_Top((float*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownEditDispT<T>::set_Top(float Top/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1009));
  TAutoArgs<1> _args;
  _args[1] = Top /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownEditDispT<T>::get_Width(float* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPDropDownEditDispT<T>::get_Width(void)
{
  float Width;
  this->get_Width((float*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownEditDispT<T>::set_Width(float Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1010));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownEditDispT<T>::get_Height(float* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPDropDownEditDispT<T>::get_Height(void)
{
  float Height;
  this->get_Height((float*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownEditDispT<T>::set_Height(float Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1011));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownEditDispT<T>::get_HWND(long* HWND/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HWND"), DISPID(1012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HWND /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PPDropDownEditDispT<T>::get_HWND(void)
{
  long HWND;
  this->get_HWND((long*)&HWND);
  return HWND;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownEditDispT<T>::get_OnSetFocus(BSTR* OnSetFocus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnSetFocus"), DISPID(1013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnSetFocus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPDropDownEditDispT<T>::get_OnSetFocus(void)
{
  BSTR OnSetFocus;
  this->get_OnSetFocus((BSTR*)&OnSetFocus);
  return OnSetFocus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownEditDispT<T>::set_OnSetFocus(BSTR OnSetFocus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnSetFocus"), DISPID(1013));
  TAutoArgs<1> _args;
  _args[1] = OnSetFocus /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownEditDispT<T>::get_OnKillFocus(BSTR* OnKillFocus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKillFocus"), DISPID(1014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnKillFocus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPDropDownEditDispT<T>::get_OnKillFocus(void)
{
  BSTR OnKillFocus;
  this->get_OnKillFocus((BSTR*)&OnKillFocus);
  return OnKillFocus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownEditDispT<T>::set_OnKillFocus(BSTR OnKillFocus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKillFocus"), DISPID(1014));
  TAutoArgs<1> _args;
  _args[1] = OnKillFocus /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownEditDispT<T>::get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tags"), DISPID(1015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Tags**)Tags /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::TagsPtr __fastcall
PPDropDownEditDispT<T>::get_Tags(void)
{
  Powerpoint_2k::TagsPtr Tags;
  this->get_Tags((Powerpoint_2k::TagsPtr*)&Tags);
  return Tags;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownEditDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPDropDownEditDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPDropDownEditDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1016));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  PPSlideMiniature
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934B7-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSlideMiniatureDispT<T>::SetImage(Powerpoint_2k::PowerPointSlidePtr Slide/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetImage"), DISPID(2001));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Powerpoint_2k::PowerPointSlide*)Slide /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSlideMiniatureDispT<T>::get_Selected(int* Selected/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Selected"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Selected /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PPSlideMiniatureDispT<T>::get_Selected(void)
{
  int Selected;
  this->get_Selected((int*)&Selected);
  return Selected;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSlideMiniatureDispT<T>::set_Selected(int Selected/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Selected"), DISPID(2002));
  TAutoArgs<1> _args;
  _args[1] = Selected /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSlideMiniatureDispT<T>::get_OnClick(BSTR* OnClick/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClick"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnClick /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPSlideMiniatureDispT<T>::get_OnClick(void)
{
  BSTR OnClick;
  this->get_OnClick((BSTR*)&OnClick);
  return OnClick;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSlideMiniatureDispT<T>::set_OnClick(BSTR OnClick/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClick"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = OnClick /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSlideMiniatureDispT<T>::get_OnDoubleClick(BSTR* OnDoubleClick/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDoubleClick"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnDoubleClick /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPSlideMiniatureDispT<T>::get_OnDoubleClick(void)
{
  BSTR OnDoubleClick;
  this->get_OnDoubleClick((BSTR*)&OnDoubleClick);
  return OnDoubleClick;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSlideMiniatureDispT<T>::set_OnDoubleClick(BSTR OnDoubleClick/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDoubleClick"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = OnDoubleClick /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSlideMiniatureDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
PPSlideMiniatureDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSlideMiniatureDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PPSlideMiniatureDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSlideMiniatureDispT<T>::get_Enable(Office_2k::MsoTriState* Enable/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enable"), DISPID(1003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Enable /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPSlideMiniatureDispT<T>::get_Enable(void)
{
  Office_2k::MsoTriState Enable;
  this->get_Enable((Office_2k::MsoTriState*)&Enable);
  return Enable;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSlideMiniatureDispT<T>::set_Enable(Office_2k::MsoTriState Enable/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enable"), DISPID(1003));
  TAutoArgs<1> _args;
  _args[1] = (int)Enable /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSlideMiniatureDispT<T>::get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPSlideMiniatureDispT<T>::get_Visible(void)
{
  Office_2k::MsoTriState Visible;
  this->get_Visible((Office_2k::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSlideMiniatureDispT<T>::set_Visible(Office_2k::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1004));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSlideMiniatureDispT<T>::get_Focus(Office_2k::MsoTriState* Focus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Focus"), DISPID(1005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Focus /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPSlideMiniatureDispT<T>::get_Focus(void)
{
  Office_2k::MsoTriState Focus;
  this->get_Focus((Office_2k::MsoTriState*)&Focus);
  return Focus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSlideMiniatureDispT<T>::set_Focus(Office_2k::MsoTriState Focus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Focus"), DISPID(1005));
  TAutoArgs<1> _args;
  _args[1] = (int)Focus /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSlideMiniatureDispT<T>::get_Label(BSTR* Label/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(1006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Label /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPSlideMiniatureDispT<T>::get_Label(void)
{
  BSTR Label;
  this->get_Label((BSTR*)&Label);
  return Label;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSlideMiniatureDispT<T>::set_Label(BSTR Label/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(1006));
  TAutoArgs<1> _args;
  _args[1] = Label /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSlideMiniatureDispT<T>::get_HelpId(int* HelpId/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpId"), DISPID(1007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HelpId /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PPSlideMiniatureDispT<T>::get_HelpId(void)
{
  int HelpId;
  this->get_HelpId((int*)&HelpId);
  return HelpId;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSlideMiniatureDispT<T>::set_HelpId(int HelpId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpId"), DISPID(1007));
  TAutoArgs<1> _args;
  _args[1] = HelpId /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSlideMiniatureDispT<T>::get_Left(float* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPSlideMiniatureDispT<T>::get_Left(void)
{
  float Left;
  this->get_Left((float*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSlideMiniatureDispT<T>::set_Left(float Left/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1008));
  TAutoArgs<1> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSlideMiniatureDispT<T>::get_Top(float* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPSlideMiniatureDispT<T>::get_Top(void)
{
  float Top;
  this->get_Top((float*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSlideMiniatureDispT<T>::set_Top(float Top/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1009));
  TAutoArgs<1> _args;
  _args[1] = Top /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSlideMiniatureDispT<T>::get_Width(float* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPSlideMiniatureDispT<T>::get_Width(void)
{
  float Width;
  this->get_Width((float*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSlideMiniatureDispT<T>::set_Width(float Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1010));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSlideMiniatureDispT<T>::get_Height(float* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPSlideMiniatureDispT<T>::get_Height(void)
{
  float Height;
  this->get_Height((float*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSlideMiniatureDispT<T>::set_Height(float Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1011));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSlideMiniatureDispT<T>::get_HWND(long* HWND/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HWND"), DISPID(1012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HWND /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PPSlideMiniatureDispT<T>::get_HWND(void)
{
  long HWND;
  this->get_HWND((long*)&HWND);
  return HWND;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSlideMiniatureDispT<T>::get_OnSetFocus(BSTR* OnSetFocus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnSetFocus"), DISPID(1013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnSetFocus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPSlideMiniatureDispT<T>::get_OnSetFocus(void)
{
  BSTR OnSetFocus;
  this->get_OnSetFocus((BSTR*)&OnSetFocus);
  return OnSetFocus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSlideMiniatureDispT<T>::set_OnSetFocus(BSTR OnSetFocus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnSetFocus"), DISPID(1013));
  TAutoArgs<1> _args;
  _args[1] = OnSetFocus /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSlideMiniatureDispT<T>::get_OnKillFocus(BSTR* OnKillFocus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKillFocus"), DISPID(1014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnKillFocus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPSlideMiniatureDispT<T>::get_OnKillFocus(void)
{
  BSTR OnKillFocus;
  this->get_OnKillFocus((BSTR*)&OnKillFocus);
  return OnKillFocus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSlideMiniatureDispT<T>::set_OnKillFocus(BSTR OnKillFocus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKillFocus"), DISPID(1014));
  TAutoArgs<1> _args;
  _args[1] = OnKillFocus /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSlideMiniatureDispT<T>::get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tags"), DISPID(1015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Tags**)Tags /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::TagsPtr __fastcall
PPSlideMiniatureDispT<T>::get_Tags(void)
{
  Powerpoint_2k::TagsPtr Tags;
  this->get_Tags((Powerpoint_2k::TagsPtr*)&Tags);
  return Tags;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSlideMiniatureDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPSlideMiniatureDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPSlideMiniatureDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1016));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  PPRadioButton
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934B8-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioButtonDispT<T>::get_State(Office_2k::MsoTriState* State/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)State /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPRadioButtonDispT<T>::get_State(void)
{
  Office_2k::MsoTriState State;
  this->get_State((Office_2k::MsoTriState*)&State);
  return State;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioButtonDispT<T>::set_State(Office_2k::MsoTriState State/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(2001));
  TAutoArgs<1> _args;
  _args[1] = (int)State /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioButtonDispT<T>::_Click()
{
  _TDispID _dispid(*this, OLETEXT("Click"), DISPID(2002));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioButtonDispT<T>::DoubleClick()
{
  _TDispID _dispid(*this, OLETEXT("DoubleClick"), DISPID(2003));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioButtonDispT<T>::get_OnClick(BSTR* OnClick/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClick"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnClick /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPRadioButtonDispT<T>::get_OnClick(void)
{
  BSTR OnClick;
  this->get_OnClick((BSTR*)&OnClick);
  return OnClick;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioButtonDispT<T>::set_OnClick(BSTR OnClick/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClick"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = OnClick /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioButtonDispT<T>::get_OnDoubleClick(BSTR* OnDoubleClick/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDoubleClick"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnDoubleClick /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPRadioButtonDispT<T>::get_OnDoubleClick(void)
{
  BSTR OnDoubleClick;
  this->get_OnDoubleClick((BSTR*)&OnDoubleClick);
  return OnDoubleClick;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioButtonDispT<T>::set_OnDoubleClick(BSTR OnDoubleClick/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDoubleClick"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = OnDoubleClick /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioButtonDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
PPRadioButtonDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioButtonDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PPRadioButtonDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioButtonDispT<T>::get_Enable(Office_2k::MsoTriState* Enable/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enable"), DISPID(1003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Enable /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPRadioButtonDispT<T>::get_Enable(void)
{
  Office_2k::MsoTriState Enable;
  this->get_Enable((Office_2k::MsoTriState*)&Enable);
  return Enable;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioButtonDispT<T>::set_Enable(Office_2k::MsoTriState Enable/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enable"), DISPID(1003));
  TAutoArgs<1> _args;
  _args[1] = (int)Enable /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioButtonDispT<T>::get_Visible(Office_2k::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPRadioButtonDispT<T>::get_Visible(void)
{
  Office_2k::MsoTriState Visible;
  this->get_Visible((Office_2k::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioButtonDispT<T>::set_Visible(Office_2k::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1004));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioButtonDispT<T>::get_Focus(Office_2k::MsoTriState* Focus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Focus"), DISPID(1005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Focus /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PPRadioButtonDispT<T>::get_Focus(void)
{
  Office_2k::MsoTriState Focus;
  this->get_Focus((Office_2k::MsoTriState*)&Focus);
  return Focus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioButtonDispT<T>::set_Focus(Office_2k::MsoTriState Focus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Focus"), DISPID(1005));
  TAutoArgs<1> _args;
  _args[1] = (int)Focus /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioButtonDispT<T>::get_Label(BSTR* Label/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(1006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Label /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPRadioButtonDispT<T>::get_Label(void)
{
  BSTR Label;
  this->get_Label((BSTR*)&Label);
  return Label;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioButtonDispT<T>::set_Label(BSTR Label/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(1006));
  TAutoArgs<1> _args;
  _args[1] = Label /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioButtonDispT<T>::get_HelpId(int* HelpId/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpId"), DISPID(1007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HelpId /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PPRadioButtonDispT<T>::get_HelpId(void)
{
  int HelpId;
  this->get_HelpId((int*)&HelpId);
  return HelpId;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioButtonDispT<T>::set_HelpId(int HelpId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpId"), DISPID(1007));
  TAutoArgs<1> _args;
  _args[1] = HelpId /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioButtonDispT<T>::get_Left(float* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPRadioButtonDispT<T>::get_Left(void)
{
  float Left;
  this->get_Left((float*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioButtonDispT<T>::set_Left(float Left/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1008));
  TAutoArgs<1> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioButtonDispT<T>::get_Top(float* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPRadioButtonDispT<T>::get_Top(void)
{
  float Top;
  this->get_Top((float*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioButtonDispT<T>::set_Top(float Top/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1009));
  TAutoArgs<1> _args;
  _args[1] = Top /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioButtonDispT<T>::get_Width(float* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPRadioButtonDispT<T>::get_Width(void)
{
  float Width;
  this->get_Width((float*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioButtonDispT<T>::set_Width(float Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1010));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioButtonDispT<T>::get_Height(float* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PPRadioButtonDispT<T>::get_Height(void)
{
  float Height;
  this->get_Height((float*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioButtonDispT<T>::set_Height(float Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1011));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioButtonDispT<T>::get_HWND(long* HWND/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HWND"), DISPID(1012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HWND /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PPRadioButtonDispT<T>::get_HWND(void)
{
  long HWND;
  this->get_HWND((long*)&HWND);
  return HWND;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioButtonDispT<T>::get_OnSetFocus(BSTR* OnSetFocus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnSetFocus"), DISPID(1013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnSetFocus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPRadioButtonDispT<T>::get_OnSetFocus(void)
{
  BSTR OnSetFocus;
  this->get_OnSetFocus((BSTR*)&OnSetFocus);
  return OnSetFocus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioButtonDispT<T>::set_OnSetFocus(BSTR OnSetFocus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnSetFocus"), DISPID(1013));
  TAutoArgs<1> _args;
  _args[1] = OnSetFocus /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioButtonDispT<T>::get_OnKillFocus(BSTR* OnKillFocus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKillFocus"), DISPID(1014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnKillFocus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPRadioButtonDispT<T>::get_OnKillFocus(void)
{
  BSTR OnKillFocus;
  this->get_OnKillFocus((BSTR*)&OnKillFocus);
  return OnKillFocus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioButtonDispT<T>::set_OnKillFocus(BSTR OnKillFocus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKillFocus"), DISPID(1014));
  TAutoArgs<1> _args;
  _args[1] = OnKillFocus /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioButtonDispT<T>::get_Tags(Powerpoint_2k::TagsPtr* Tags/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tags"), DISPID(1015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Tags**)Tags /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::TagsPtr __fastcall
PPRadioButtonDispT<T>::get_Tags(void)
{
  Powerpoint_2k::TagsPtr Tags;
  this->get_Tags((Powerpoint_2k::TagsPtr*)&Tags);
  return Tags;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioButtonDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PPRadioButtonDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PPRadioButtonDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1016));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  Tags
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934B9-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TagsDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
TagsDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TagsDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
TagsDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TagsDispT<T>::Item(BSTR Name/*[in]*/, BSTR* Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(Item /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
TagsDispT<T>::Item(BSTR Name/*[in]*/)
{
  BSTR Item;
  this->Item(Name, (BSTR*)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TagsDispT<T>::Add(BSTR Name/*[in]*/, BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2003));
  TAutoArgs<2> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  _args[2] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TagsDispT<T>::Delete(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TagsDispT<T>::AddBinary(BSTR Name/*[in]*/, BSTR FilePath/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddBinary"), DISPID(2005));
  TAutoArgs<2> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  _args[2] = FilePath /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TagsDispT<T>::BinaryValue(BSTR Name/*[in]*/, long* BinaryValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BinaryValue"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(BinaryValue /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
TagsDispT<T>::BinaryValue(BSTR Name/*[in]*/)
{
  long BinaryValue;
  this->BinaryValue(Name, (long*)&BinaryValue);
  return BinaryValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TagsDispT<T>::Name(int index/*[in]*/, BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
TagsDispT<T>::Name(int index/*[in]*/)
{
  BSTR Name;
  this->Name(index, (BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TagsDispT<T>::Value(int index/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(2008));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
TagsDispT<T>::Value(int index/*[in]*/)
{
  BSTR Value;
  this->Value(index, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TagsDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
TagsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TagsDispT<T>::_Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
TagsDispT<T>::_Index(int index/*[in]*/)
{
  TVariant _Index;
  this->_Index(index, (TVariant*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TagsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
TagsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  FileDialogFileList
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934BA-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileDialogFileListDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
FileDialogFileListDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileDialogFileListDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
FileDialogFileListDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileDialogFileListDispT<T>::Item(int index/*[in]*/, BSTR* Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(Item /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
FileDialogFileListDispT<T>::Item(int index/*[in]*/)
{
  BSTR Item;
  this->Item(index, (BSTR*)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileDialogFileListDispT<T>::DisplayName(int index/*[in]*/, BSTR* DisplayName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayName"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(DisplayName /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
FileDialogFileListDispT<T>::DisplayName(int index/*[in]*/)
{
  BSTR DisplayName;
  this->DisplayName(index, (BSTR*)&DisplayName);
  return DisplayName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileDialogFileListDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
FileDialogFileListDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileDialogFileListDispT<T>::_Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
FileDialogFileListDispT<T>::_Index(int index/*[in]*/)
{
  TVariant _Index;
  this->_Index(index, (TVariant*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileDialogFileListDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
FileDialogFileListDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  FileDialogExtension
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934BB-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileDialogExtensionDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
FileDialogExtensionDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileDialogExtensionDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
FileDialogExtensionDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileDialogExtensionDispT<T>::get_Extensions(BSTR* Extensions/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Extensions"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Extensions /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
FileDialogExtensionDispT<T>::get_Extensions(void)
{
  BSTR Extensions;
  this->get_Extensions((BSTR*)&Extensions);
  return Extensions;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileDialogExtensionDispT<T>::set_Extensions(BSTR Extensions/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Extensions"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = Extensions /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileDialogExtensionDispT<T>::get_Description(BSTR* Description/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Description /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
FileDialogExtensionDispT<T>::get_Description(void)
{
  BSTR Description;
  this->get_Description((BSTR*)&Description);
  return Description;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileDialogExtensionDispT<T>::set_Description(BSTR Description/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = Description /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  FileDialogExtensionList
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934BC-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileDialogExtensionListDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
FileDialogExtensionListDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileDialogExtensionListDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
FileDialogExtensionListDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileDialogExtensionListDispT<T>::Item(int index/*[in]*/, 
                                      Powerpoint_2k::FileDialogExtensionPtr* Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::FileDialogExtension**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::FileDialogExtensionPtr __fastcall
FileDialogExtensionListDispT<T>::Item(int index/*[in]*/)
{
  Powerpoint_2k::FileDialogExtensionPtr Item;
  this->Item(index, (Powerpoint_2k::FileDialogExtensionPtr*)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileDialogExtensionListDispT<T>::Add(BSTR Extension/*[in]*/, BSTR Description/*[in]*/, 
                                     Powerpoint_2k::FileDialogExtensionPtr* Add/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2003));
  TAutoArgs<2> _args;
  _args[1] = Extension /*[VT_BSTR:0]*/;
  _args[2] = Description /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::FileDialogExtension**)Add /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::FileDialogExtensionPtr __fastcall
FileDialogExtensionListDispT<T>::Add(BSTR Extension/*[in]*/, BSTR Description/*[in]*/)
{
  Powerpoint_2k::FileDialogExtensionPtr Add;
  this->Add(Extension, Description, (Powerpoint_2k::FileDialogExtensionPtr*)&Add);
  return Add;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileDialogExtensionListDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
FileDialogExtensionListDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileDialogExtensionListDispT<T>::_Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
FileDialogExtensionListDispT<T>::_Index(int index/*[in]*/)
{
  TVariant _Index;
  this->_Index(index, (TVariant*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileDialogExtensionListDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
FileDialogExtensionListDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  FileDialog
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934BD-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileDialogDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
FileDialogDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileDialogDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
FileDialogDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileDialogDispT<T>::get_Extensions(Powerpoint_2k::FileDialogExtensionListPtr* Extensions/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Extensions"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::FileDialogExtensionList**)Extensions /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::FileDialogExtensionListPtr __fastcall
FileDialogDispT<T>::get_Extensions(void)
{
  Powerpoint_2k::FileDialogExtensionListPtr Extensions;
  this->get_Extensions((Powerpoint_2k::FileDialogExtensionListPtr*)&Extensions);
  return Extensions;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileDialogDispT<T>::get_DefaultDirectoryRegKey(BSTR* DefaultDirectoryRegKey/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultDirectoryRegKey"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DefaultDirectoryRegKey /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
FileDialogDispT<T>::get_DefaultDirectoryRegKey(void)
{
  BSTR DefaultDirectoryRegKey;
  this->get_DefaultDirectoryRegKey((BSTR*)&DefaultDirectoryRegKey);
  return DefaultDirectoryRegKey;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileDialogDispT<T>::set_DefaultDirectoryRegKey(BSTR DefaultDirectoryRegKey/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultDirectoryRegKey"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = DefaultDirectoryRegKey /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileDialogDispT<T>::get_DialogTitle(BSTR* DialogTitle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DialogTitle"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(DialogTitle /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
FileDialogDispT<T>::get_DialogTitle(void)
{
  BSTR DialogTitle;
  this->get_DialogTitle((BSTR*)&DialogTitle);
  return DialogTitle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileDialogDispT<T>::set_DialogTitle(BSTR DialogTitle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DialogTitle"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = DialogTitle /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileDialogDispT<T>::get_ActionButtonName(BSTR* ActionButtonName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActionButtonName"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ActionButtonName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
FileDialogDispT<T>::get_ActionButtonName(void)
{
  BSTR ActionButtonName;
  this->get_ActionButtonName((BSTR*)&ActionButtonName);
  return ActionButtonName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileDialogDispT<T>::set_ActionButtonName(BSTR ActionButtonName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActionButtonName"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = ActionButtonName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileDialogDispT<T>::get_IsMultiSelect(Office_2k::MsoTriState* IsMultiSelect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsMultiSelect"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)IsMultiSelect /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
FileDialogDispT<T>::get_IsMultiSelect(void)
{
  Office_2k::MsoTriState IsMultiSelect;
  this->get_IsMultiSelect((Office_2k::MsoTriState*)&IsMultiSelect);
  return IsMultiSelect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileDialogDispT<T>::set_IsMultiSelect(Office_2k::MsoTriState IsMultiSelect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsMultiSelect"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = (int)IsMultiSelect /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileDialogDispT<T>::get_IsPrintEnabled(Office_2k::MsoTriState* IsPrintEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsPrintEnabled"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)IsPrintEnabled /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
FileDialogDispT<T>::get_IsPrintEnabled(void)
{
  Office_2k::MsoTriState IsPrintEnabled;
  this->get_IsPrintEnabled((Office_2k::MsoTriState*)&IsPrintEnabled);
  return IsPrintEnabled;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileDialogDispT<T>::set_IsPrintEnabled(Office_2k::MsoTriState IsPrintEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsPrintEnabled"), DISPID(2008));
  TAutoArgs<1> _args;
  _args[1] = (int)IsPrintEnabled /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileDialogDispT<T>::get_IsReadOnlyEnabled(Office_2k::MsoTriState* IsReadOnlyEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsReadOnlyEnabled"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)IsReadOnlyEnabled /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
FileDialogDispT<T>::get_IsReadOnlyEnabled(void)
{
  Office_2k::MsoTriState IsReadOnlyEnabled;
  this->get_IsReadOnlyEnabled((Office_2k::MsoTriState*)&IsReadOnlyEnabled);
  return IsReadOnlyEnabled;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileDialogDispT<T>::set_IsReadOnlyEnabled(Office_2k::MsoTriState IsReadOnlyEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsReadOnlyEnabled"), DISPID(2009));
  TAutoArgs<1> _args;
  _args[1] = (int)IsReadOnlyEnabled /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileDialogDispT<T>::get_DirectoriesOnly(Office_2k::MsoTriState* DirectoriesOnly/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DirectoriesOnly"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)DirectoriesOnly /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
FileDialogDispT<T>::get_DirectoriesOnly(void)
{
  Office_2k::MsoTriState DirectoriesOnly;
  this->get_DirectoriesOnly((Office_2k::MsoTriState*)&DirectoriesOnly);
  return DirectoriesOnly;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileDialogDispT<T>::set_DirectoriesOnly(Office_2k::MsoTriState DirectoriesOnly/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DirectoriesOnly"), DISPID(2010));
  TAutoArgs<1> _args;
  _args[1] = (int)DirectoriesOnly /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileDialogDispT<T>::get_InitialView(Powerpoint_2k::PpFileDialogView* InitialView/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InitialView"), DISPID(2011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)InitialView /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpFileDialogView __fastcall
FileDialogDispT<T>::get_InitialView(void)
{
  Powerpoint_2k::PpFileDialogView InitialView;
  this->get_InitialView((Powerpoint_2k::PpFileDialogView*)&InitialView);
  return InitialView;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileDialogDispT<T>::set_InitialView(Powerpoint_2k::PpFileDialogView InitialView/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InitialView"), DISPID(2011));
  TAutoArgs<1> _args;
  _args[1] = (int)InitialView /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileDialogDispT<T>::Launch(LPUNKNOWN pUnk/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Launch"), DISPID(2012));
  TAutoArgs<1> _args;
  _args[1] = pUnk /*[VT_UNKNOWN:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileDialogDispT<T>::get_OnAction(BSTR* OnAction/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnAction"), DISPID(2013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OnAction /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
FileDialogDispT<T>::get_OnAction(void)
{
  BSTR OnAction;
  this->get_OnAction((BSTR*)&OnAction);
  return OnAction;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileDialogDispT<T>::set_OnAction(BSTR OnAction/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnAction"), DISPID(2013));
  TAutoArgs<1> _args;
  _args[1] = OnAction /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileDialogDispT<T>::get_Files(Powerpoint_2k::FileDialogFileListPtr* Files/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Files"), DISPID(2014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::FileDialogFileList**)Files /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::FileDialogFileListPtr __fastcall
FileDialogDispT<T>::get_Files(void)
{
  Powerpoint_2k::FileDialogFileListPtr Files;
  this->get_Files((Powerpoint_2k::FileDialogFileListPtr*)&Files);
  return Files;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileDialogDispT<T>::get_UseODMADlgs(Office_2k::MsoTriState* UseODMADlgs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UseODMADlgs"), DISPID(2015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)UseODMADlgs /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
FileDialogDispT<T>::get_UseODMADlgs(void)
{
  Office_2k::MsoTriState UseODMADlgs;
  this->get_UseODMADlgs((Office_2k::MsoTriState*)&UseODMADlgs);
  return UseODMADlgs;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileDialogDispT<T>::set_UseODMADlgs(Office_2k::MsoTriState UseODMADlgs/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UseODMADlgs"), DISPID(2015));
  TAutoArgs<1> _args;
  _args[1] = (int)UseODMADlgs /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMOCXExtender
// Interface: OCXExtender
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMOCXExtenderT<T>::get_Visible(TOLEBOOL* Visible/*[out,retval]*/)
{
  return (*this)->get_Visible(Visible);
}

template <class T> TOLEBOOL __fastcall
TCOMOCXExtenderT<T>::get_Visible(void)
{
  TOLEBOOL Visible;
  OLECHECK(this->get_Visible((TOLEBOOL*)&Visible));
  return Visible;
}

template <class T> HRESULT __fastcall
TCOMOCXExtenderT<T>::set_Visible(TOLEBOOL Visible/*[in]*/)
{
  return (*this)->set_Visible(Visible);
}

template <class T> HRESULT __fastcall
TCOMOCXExtenderT<T>::get_Left(float* Left/*[out,retval]*/)
{
  return (*this)->get_Left(Left);
}

template <class T> float __fastcall
TCOMOCXExtenderT<T>::get_Left(void)
{
  float Left;
  OLECHECK(this->get_Left((float*)&Left));
  return Left;
}

template <class T> HRESULT __fastcall
TCOMOCXExtenderT<T>::set_Left(float Left/*[in]*/)
{
  return (*this)->set_Left(Left);
}

template <class T> HRESULT __fastcall
TCOMOCXExtenderT<T>::get_Top(float* Top/*[out,retval]*/)
{
  return (*this)->get_Top(Top);
}

template <class T> float __fastcall
TCOMOCXExtenderT<T>::get_Top(void)
{
  float Top;
  OLECHECK(this->get_Top((float*)&Top));
  return Top;
}

template <class T> HRESULT __fastcall
TCOMOCXExtenderT<T>::set_Top(float Top/*[in]*/)
{
  return (*this)->set_Top(Top);
}

template <class T> HRESULT __fastcall
TCOMOCXExtenderT<T>::get_Height(float* Height/*[out,retval]*/)
{
  return (*this)->get_Height(Height);
}

template <class T> float __fastcall
TCOMOCXExtenderT<T>::get_Height(void)
{
  float Height;
  OLECHECK(this->get_Height((float*)&Height));
  return Height;
}

template <class T> HRESULT __fastcall
TCOMOCXExtenderT<T>::set_Height(float Height/*[in]*/)
{
  return (*this)->set_Height(Height);
}

template <class T> HRESULT __fastcall
TCOMOCXExtenderT<T>::get_Width(float* Width/*[out,retval]*/)
{
  return (*this)->get_Width(Width);
}

template <class T> float __fastcall
TCOMOCXExtenderT<T>::get_Width(void)
{
  float Width;
  OLECHECK(this->get_Width((float*)&Width));
  return Width;
}

template <class T> HRESULT __fastcall
TCOMOCXExtenderT<T>::set_Width(float Width/*[in]*/)
{
  return (*this)->set_Width(Width);
}

template <class T> HRESULT __fastcall
TCOMOCXExtenderT<T>::get_ZOrderPosition(int* ZOrderPosition/*[out,retval]*/)
{
  return (*this)->get_ZOrderPosition(ZOrderPosition);
}

template <class T> int __fastcall
TCOMOCXExtenderT<T>::get_ZOrderPosition(void)
{
  int ZOrderPosition;
  OLECHECK(this->get_ZOrderPosition((int*)&ZOrderPosition));
  return ZOrderPosition;
}

template <class T> HRESULT __fastcall
TCOMOCXExtenderT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  return (*this)->get_Name(Name);
}

template <class T> BSTR __fastcall
TCOMOCXExtenderT<T>::get_Name(void)
{
  BSTR Name = 0;
  OLECHECK(this->get_Name((BSTR*)&Name));
  return Name;
}

template <class T> HRESULT __fastcall
TCOMOCXExtenderT<T>::set_Name(BSTR Name/*[in]*/)
{
  return (*this)->set_Name(Name);
}

template <class T> HRESULT __fastcall
TCOMOCXExtenderT<T>::get_AltHTML(BSTR* AltHTML/*[out,retval]*/)
{
  return (*this)->get_AltHTML(AltHTML);
}

template <class T> BSTR __fastcall
TCOMOCXExtenderT<T>::get_AltHTML(void)
{
  BSTR AltHTML = 0;
  OLECHECK(this->get_AltHTML((BSTR*)&AltHTML));
  return AltHTML;
}

template <class T> HRESULT __fastcall
TCOMOCXExtenderT<T>::set_AltHTML(BSTR AltHTML/*[in]*/)
{
  return (*this)->set_AltHTML(AltHTML);
}

// *********************************************************************//
// DispIntf:  OCXExtender
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934C0-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OCXExtenderDispT<T>::get_Visible(TOLEBOOL* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(-2147418105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Visible /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
OCXExtenderDispT<T>::get_Visible(void)
{
  TOLEBOOL Visible;
  this->get_Visible((TOLEBOOL*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OCXExtenderDispT<T>::set_Visible(TOLEBOOL Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(-2147418105));
  TAutoArgs<1> _args;
  _args[1] = Visible /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OCXExtenderDispT<T>::get_Left(float* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(-2147418109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
OCXExtenderDispT<T>::get_Left(void)
{
  float Left;
  this->get_Left((float*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OCXExtenderDispT<T>::set_Left(float Left/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(-2147418109));
  TAutoArgs<1> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OCXExtenderDispT<T>::get_Top(float* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(-2147418108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
OCXExtenderDispT<T>::get_Top(void)
{
  float Top;
  this->get_Top((float*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OCXExtenderDispT<T>::set_Top(float Top/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(-2147418108));
  TAutoArgs<1> _args;
  _args[1] = Top /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OCXExtenderDispT<T>::get_Height(float* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(-2147418107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
OCXExtenderDispT<T>::get_Height(void)
{
  float Height;
  this->get_Height((float*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OCXExtenderDispT<T>::set_Height(float Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(-2147418107));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OCXExtenderDispT<T>::get_Width(float* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(-2147418106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
OCXExtenderDispT<T>::get_Width(void)
{
  float Width;
  this->get_Width((float*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OCXExtenderDispT<T>::set_Width(float Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(-2147418106));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OCXExtenderDispT<T>::get_ZOrderPosition(int* ZOrderPosition/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZOrderPosition"), DISPID(-2147417882));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ZOrderPosition /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
OCXExtenderDispT<T>::get_ZOrderPosition(void)
{
  int ZOrderPosition;
  this->get_ZOrderPosition((int*)&ZOrderPosition);
  return ZOrderPosition;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OCXExtenderDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(-2147418112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
OCXExtenderDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OCXExtenderDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(-2147418112));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OCXExtenderDispT<T>::get_AltHTML(BSTR* AltHTML/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AltHTML"), DISPID(-2147417881));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AltHTML /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
OCXExtenderDispT<T>::get_AltHTML(void)
{
  BSTR AltHTML;
  this->get_AltHTML((BSTR*)&AltHTML);
  return AltHTML;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
OCXExtenderDispT<T>::set_AltHTML(BSTR AltHTML/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AltHTML"), DISPID(-2147417881));
  TAutoArgs<1> _args;
  _args[1] = AltHTML /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  Table
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934C3-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TableDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
TableDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TableDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
TableDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TableDispT<T>::get_Columns(Powerpoint_2k::ColumnsPtr* Columns/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Columns"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Columns**)Columns /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::ColumnsPtr __fastcall
TableDispT<T>::get_Columns(void)
{
  Powerpoint_2k::ColumnsPtr Columns;
  this->get_Columns((Powerpoint_2k::ColumnsPtr*)&Columns);
  return Columns;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TableDispT<T>::get_Rows(Powerpoint_2k::RowsPtr* Rows/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Rows"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Rows**)Rows /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::RowsPtr __fastcall
TableDispT<T>::get_Rows(void)
{
  Powerpoint_2k::RowsPtr Rows;
  this->get_Rows((Powerpoint_2k::RowsPtr*)&Rows);
  return Rows;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TableDispT<T>::Cell(int Row/*[in]*/, int Column/*[in]*/, 
                    Powerpoint_2k::CellPtr* Cell/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Cell"), DISPID(2005));
  TAutoArgs<2> _args;
  _args[1] = Row /*[VT_INT:0]*/;
  _args[2] = Column /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Cell**)Cell /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::CellPtr __fastcall
TableDispT<T>::Cell(int Row/*[in]*/, int Column/*[in]*/)
{
  Powerpoint_2k::CellPtr Cell;
  this->Cell(Row, Column, (Powerpoint_2k::CellPtr*)&Cell);
  return Cell;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TableDispT<T>::get_TableDirection(Powerpoint_2k::PpDirection* TableDirection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableDirection"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)TableDirection /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpDirection __fastcall
TableDispT<T>::get_TableDirection(void)
{
  Powerpoint_2k::PpDirection TableDirection;
  this->get_TableDirection((Powerpoint_2k::PpDirection*)&TableDirection);
  return TableDirection;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TableDispT<T>::set_TableDirection(Powerpoint_2k::PpDirection TableDirection/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TableDirection"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = (int)TableDirection /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TableDispT<T>::MergeBorders()
{
  _TDispID _dispid(*this, OLETEXT("MergeBorders"), DISPID(2007));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  Columns
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934C4-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColumnsDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
ColumnsDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColumnsDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ColumnsDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColumnsDispT<T>::Item(int index/*[in]*/, Powerpoint_2k::ColumnPtr* Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Column**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::ColumnPtr __fastcall
ColumnsDispT<T>::Item(int index/*[in]*/)
{
  Powerpoint_2k::ColumnPtr Item;
  this->Item(index, (Powerpoint_2k::ColumnPtr*)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColumnsDispT<T>::Add(int BeforeColumn/*[in,def,opt]*/, Powerpoint_2k::ColumnPtr* Add/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = BeforeColumn /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Column**)Add /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::ColumnPtr __fastcall
ColumnsDispT<T>::Add(int BeforeColumn/*[in,def,opt]*/)
{
  Powerpoint_2k::ColumnPtr Add;
  this->Add(BeforeColumn, (Powerpoint_2k::ColumnPtr*)&Add);
  return Add;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColumnsDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
ColumnsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColumnsDispT<T>::_Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
ColumnsDispT<T>::_Index(int index/*[in]*/)
{
  TVariant _Index;
  this->_Index(index, (TVariant*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColumnsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ColumnsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  Column
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934C5-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColumnDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
ColumnDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColumnDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ColumnDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColumnDispT<T>::get_Cells(Powerpoint_2k::CellRangePtr* Cells/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Cells"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::CellRange**)Cells /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::CellRangePtr __fastcall
ColumnDispT<T>::get_Cells(void)
{
  Powerpoint_2k::CellRangePtr Cells;
  this->get_Cells((Powerpoint_2k::CellRangePtr*)&Cells);
  return Cells;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColumnDispT<T>::Select()
{
  _TDispID _dispid(*this, OLETEXT("Select"), DISPID(2004));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColumnDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(2005));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColumnDispT<T>::get_Width(float* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ColumnDispT<T>::get_Width(void)
{
  float Width;
  this->get_Width((float*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColumnDispT<T>::set_Width(float Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  Rows
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934C6-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RowsDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
RowsDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RowsDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
RowsDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RowsDispT<T>::Item(int index/*[in]*/, Powerpoint_2k::RowPtr* Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Row**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::RowPtr __fastcall
RowsDispT<T>::Item(int index/*[in]*/)
{
  Powerpoint_2k::RowPtr Item;
  this->Item(index, (Powerpoint_2k::RowPtr*)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RowsDispT<T>::Add(int BeforeRow/*[in,def,opt]*/, Powerpoint_2k::RowPtr* Add/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = BeforeRow /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Row**)Add /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::RowPtr __fastcall
RowsDispT<T>::Add(int BeforeRow/*[in,def,opt]*/)
{
  Powerpoint_2k::RowPtr Add;
  this->Add(BeforeRow, (Powerpoint_2k::RowPtr*)&Add);
  return Add;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RowsDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
RowsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RowsDispT<T>::_Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
RowsDispT<T>::_Index(int index/*[in]*/)
{
  TVariant _Index;
  this->_Index(index, (TVariant*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RowsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
RowsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  Row
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934C7-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RowDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
RowDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RowDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
RowDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RowDispT<T>::get_Cells(Powerpoint_2k::CellRangePtr* Cells/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Cells"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::CellRange**)Cells /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::CellRangePtr __fastcall
RowDispT<T>::get_Cells(void)
{
  Powerpoint_2k::CellRangePtr Cells;
  this->get_Cells((Powerpoint_2k::CellRangePtr*)&Cells);
  return Cells;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RowDispT<T>::Select()
{
  _TDispID _dispid(*this, OLETEXT("Select"), DISPID(2004));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RowDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(2005));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RowDispT<T>::get_Height(float* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
RowDispT<T>::get_Height(void)
{
  float Height;
  this->get_Height((float*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
RowDispT<T>::set_Height(float Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  CellRange
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934C8-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CellRangeDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
CellRangeDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CellRangeDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CellRangeDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CellRangeDispT<T>::Item(int index/*[in]*/, Powerpoint_2k::CellPtr* Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Cell**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::CellPtr __fastcall
CellRangeDispT<T>::Item(int index/*[in]*/)
{
  Powerpoint_2k::CellPtr Item;
  this->Item(index, (Powerpoint_2k::CellPtr*)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CellRangeDispT<T>::get_Borders(Powerpoint_2k::BordersPtr* Borders/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Borders"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Borders**)Borders /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::BordersPtr __fastcall
CellRangeDispT<T>::get_Borders(void)
{
  Powerpoint_2k::BordersPtr Borders;
  this->get_Borders((Powerpoint_2k::BordersPtr*)&Borders);
  return Borders;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CellRangeDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
CellRangeDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CellRangeDispT<T>::_Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
CellRangeDispT<T>::_Index(int index/*[in]*/)
{
  TVariant _Index;
  this->_Index(index, (TVariant*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CellRangeDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
CellRangeDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  Cell
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934C9-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CellDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
CellDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CellDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CellDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CellDispT<T>::get_Shape(Powerpoint_2k::ShapePtr* Shape/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Shape"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Shape**)Shape /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::ShapePtr __fastcall
CellDispT<T>::get_Shape(void)
{
  Powerpoint_2k::ShapePtr Shape;
  this->get_Shape((Powerpoint_2k::ShapePtr*)&Shape);
  return Shape;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CellDispT<T>::get_Borders(Powerpoint_2k::BordersPtr* Borders/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Borders"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Borders**)Borders /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::BordersPtr __fastcall
CellDispT<T>::get_Borders(void)
{
  Powerpoint_2k::BordersPtr Borders;
  this->get_Borders((Powerpoint_2k::BordersPtr*)&Borders);
  return Borders;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CellDispT<T>::Merge(Powerpoint_2k::CellPtr MergeTo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Merge"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Powerpoint_2k::Cell*)MergeTo /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CellDispT<T>::Split(int NumRows/*[in]*/, int NumColumns/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Split"), DISPID(2006));
  TAutoArgs<2> _args;
  _args[1] = NumRows /*[VT_INT:0]*/;
  _args[2] = NumColumns /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CellDispT<T>::Select()
{
  _TDispID _dispid(*this, OLETEXT("Select"), DISPID(2007));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CellDispT<T>::get_Selected(TOLEBOOL* Selected/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Selected"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Selected /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
CellDispT<T>::get_Selected(void)
{
  TOLEBOOL Selected;
  this->get_Selected((TOLEBOOL*)&Selected);
  return Selected;
}

// *********************************************************************//
// DispIntf:  Borders
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934CA-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BordersDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
BordersDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BordersDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
BordersDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BordersDispT<T>::Item(Powerpoint_2k::PpBorderType BorderType/*[in]*/, 
                      Powerpoint_2k::LineFormatPtr* Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = (int)BorderType /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::LineFormat**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::LineFormatPtr __fastcall
BordersDispT<T>::Item(Powerpoint_2k::PpBorderType BorderType/*[in]*/)
{
  Powerpoint_2k::LineFormatPtr Item;
  this->Item(BorderType, (Powerpoint_2k::LineFormatPtr*)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BordersDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
BordersDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BordersDispT<T>::_Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
BordersDispT<T>::_Index(int index/*[in]*/)
{
  TVariant _Index;
  this->_Index(index, (TVariant*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BordersDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
BordersDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  Panes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934CB-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PanesDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
PanesDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PanesDispT<T>::Item(int index/*[in]*/, Powerpoint_2k::PanePtr* Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::Pane**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::PanePtr __fastcall
PanesDispT<T>::Item(int index/*[in]*/)
{
  Powerpoint_2k::PanePtr Item;
  this->Item(index, (Powerpoint_2k::PanePtr*)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PanesDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PanesDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PanesDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
PanesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PanesDispT<T>::_Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
PanesDispT<T>::_Index(int index/*[in]*/)
{
  TVariant _Index;
  this->_Index(index, (TVariant*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PanesDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PanesDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  Pane
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934CC-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PaneDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2000));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PaneDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PaneDispT<T>::Activate()
{
  _TDispID _dispid(*this, OLETEXT("Activate"), DISPID(2001));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PaneDispT<T>::get_Active(Office_2k::MsoTriState* Active/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Active /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PaneDispT<T>::get_Active(void)
{
  Office_2k::MsoTriState Active;
  this->get_Active((Office_2k::MsoTriState*)&Active);
  return Active;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PaneDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
PaneDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PaneDispT<T>::get_ViewType(Powerpoint_2k::PpViewType* ViewType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ViewType"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ViewType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpViewType __fastcall
PaneDispT<T>::get_ViewType(void)
{
  Powerpoint_2k::PpViewType ViewType;
  this->get_ViewType((Powerpoint_2k::PpViewType*)&ViewType);
  return ViewType;
}

// *********************************************************************//
// DispIntf:  DefaultWebOptions
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934CD-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::get_IncludeNavigation(Office_2k::MsoTriState* IncludeNavigation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncludeNavigation"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)IncludeNavigation /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
DefaultWebOptionsDispT<T>::get_IncludeNavigation(void)
{
  Office_2k::MsoTriState IncludeNavigation;
  this->get_IncludeNavigation((Office_2k::MsoTriState*)&IncludeNavigation);
  return IncludeNavigation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::set_IncludeNavigation(Office_2k::MsoTriState IncludeNavigation/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncludeNavigation"), DISPID(2001));
  TAutoArgs<1> _args;
  _args[1] = (int)IncludeNavigation /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::get_FrameColors(Powerpoint_2k::PpFrameColors* FrameColors/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FrameColors"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)FrameColors /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpFrameColors __fastcall
DefaultWebOptionsDispT<T>::get_FrameColors(void)
{
  Powerpoint_2k::PpFrameColors FrameColors;
  this->get_FrameColors((Powerpoint_2k::PpFrameColors*)&FrameColors);
  return FrameColors;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::set_FrameColors(Powerpoint_2k::PpFrameColors FrameColors/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FrameColors"), DISPID(2002));
  TAutoArgs<1> _args;
  _args[1] = (int)FrameColors /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::get_ResizeGraphics(Office_2k::MsoTriState* ResizeGraphics/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ResizeGraphics"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ResizeGraphics /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
DefaultWebOptionsDispT<T>::get_ResizeGraphics(void)
{
  Office_2k::MsoTriState ResizeGraphics;
  this->get_ResizeGraphics((Office_2k::MsoTriState*)&ResizeGraphics);
  return ResizeGraphics;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::set_ResizeGraphics(Office_2k::MsoTriState ResizeGraphics/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ResizeGraphics"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = (int)ResizeGraphics /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::get_ShowSlideAnimation(Office_2k::MsoTriState* ShowSlideAnimation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowSlideAnimation"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ShowSlideAnimation /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
DefaultWebOptionsDispT<T>::get_ShowSlideAnimation(void)
{
  Office_2k::MsoTriState ShowSlideAnimation;
  this->get_ShowSlideAnimation((Office_2k::MsoTriState*)&ShowSlideAnimation);
  return ShowSlideAnimation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::set_ShowSlideAnimation(Office_2k::MsoTriState ShowSlideAnimation/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowSlideAnimation"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = (int)ShowSlideAnimation /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::get_OrganizeInFolder(Office_2k::MsoTriState* OrganizeInFolder/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OrganizeInFolder"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)OrganizeInFolder /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
DefaultWebOptionsDispT<T>::get_OrganizeInFolder(void)
{
  Office_2k::MsoTriState OrganizeInFolder;
  this->get_OrganizeInFolder((Office_2k::MsoTriState*)&OrganizeInFolder);
  return OrganizeInFolder;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::set_OrganizeInFolder(Office_2k::MsoTriState OrganizeInFolder/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OrganizeInFolder"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = (int)OrganizeInFolder /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::get_UseLongFileNames(Office_2k::MsoTriState* UseLongFileNames/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UseLongFileNames"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)UseLongFileNames /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
DefaultWebOptionsDispT<T>::get_UseLongFileNames(void)
{
  Office_2k::MsoTriState UseLongFileNames;
  this->get_UseLongFileNames((Office_2k::MsoTriState*)&UseLongFileNames);
  return UseLongFileNames;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::set_UseLongFileNames(Office_2k::MsoTriState UseLongFileNames/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UseLongFileNames"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = (int)UseLongFileNames /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::get_RelyOnVML(Office_2k::MsoTriState* RelyOnVML/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RelyOnVML"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)RelyOnVML /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
DefaultWebOptionsDispT<T>::get_RelyOnVML(void)
{
  Office_2k::MsoTriState RelyOnVML;
  this->get_RelyOnVML((Office_2k::MsoTriState*)&RelyOnVML);
  return RelyOnVML;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::set_RelyOnVML(Office_2k::MsoTriState RelyOnVML/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RelyOnVML"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = (int)RelyOnVML /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::get_AllowPNG(Office_2k::MsoTriState* AllowPNG/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowPNG"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AllowPNG /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
DefaultWebOptionsDispT<T>::get_AllowPNG(void)
{
  Office_2k::MsoTriState AllowPNG;
  this->get_AllowPNG((Office_2k::MsoTriState*)&AllowPNG);
  return AllowPNG;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::set_AllowPNG(Office_2k::MsoTriState AllowPNG/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowPNG"), DISPID(2008));
  TAutoArgs<1> _args;
  _args[1] = (int)AllowPNG /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::get_ScreenSize(Office_2k::MsoScreenSize* ScreenSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScreenSize"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ScreenSize /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoScreenSize __fastcall
DefaultWebOptionsDispT<T>::get_ScreenSize(void)
{
  Office_2k::MsoScreenSize ScreenSize;
  this->get_ScreenSize((Office_2k::MsoScreenSize*)&ScreenSize);
  return ScreenSize;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::set_ScreenSize(Office_2k::MsoScreenSize ScreenSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScreenSize"), DISPID(2009));
  TAutoArgs<1> _args;
  _args[1] = (int)ScreenSize /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::get_Encoding(Office_2k::MsoEncoding* Encoding/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Encoding"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Encoding /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoEncoding __fastcall
DefaultWebOptionsDispT<T>::get_Encoding(void)
{
  Office_2k::MsoEncoding Encoding;
  this->get_Encoding((Office_2k::MsoEncoding*)&Encoding);
  return Encoding;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::set_Encoding(Office_2k::MsoEncoding Encoding/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Encoding"), DISPID(2010));
  TAutoArgs<1> _args;
  _args[1] = (int)Encoding /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::get_UpdateLinksOnSave(Office_2k::MsoTriState* UpdateLinksOnSave/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UpdateLinksOnSave"), DISPID(2011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)UpdateLinksOnSave /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
DefaultWebOptionsDispT<T>::get_UpdateLinksOnSave(void)
{
  Office_2k::MsoTriState UpdateLinksOnSave;
  this->get_UpdateLinksOnSave((Office_2k::MsoTriState*)&UpdateLinksOnSave);
  return UpdateLinksOnSave;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::set_UpdateLinksOnSave(Office_2k::MsoTriState UpdateLinksOnSave/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UpdateLinksOnSave"), DISPID(2011));
  TAutoArgs<1> _args;
  _args[1] = (int)UpdateLinksOnSave /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::get_CheckIfOfficeIsHTMLEditor(Office_2k::MsoTriState* CheckIfOfficeIsHTMLEditor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CheckIfOfficeIsHTMLEditor"), DISPID(2012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)CheckIfOfficeIsHTMLEditor /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
DefaultWebOptionsDispT<T>::get_CheckIfOfficeIsHTMLEditor(void)
{
  Office_2k::MsoTriState CheckIfOfficeIsHTMLEditor;
  this->get_CheckIfOfficeIsHTMLEditor((Office_2k::MsoTriState*)&CheckIfOfficeIsHTMLEditor);
  return CheckIfOfficeIsHTMLEditor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::set_CheckIfOfficeIsHTMLEditor(Office_2k::MsoTriState CheckIfOfficeIsHTMLEditor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CheckIfOfficeIsHTMLEditor"), DISPID(2012));
  TAutoArgs<1> _args;
  _args[1] = (int)CheckIfOfficeIsHTMLEditor /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::get_AlwaysSaveInDefaultEncoding(Office_2k::MsoTriState* AlwaysSaveInDefaultEncoding/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AlwaysSaveInDefaultEncoding"), DISPID(2013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AlwaysSaveInDefaultEncoding /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
DefaultWebOptionsDispT<T>::get_AlwaysSaveInDefaultEncoding(void)
{
  Office_2k::MsoTriState AlwaysSaveInDefaultEncoding;
  this->get_AlwaysSaveInDefaultEncoding((Office_2k::MsoTriState*)&AlwaysSaveInDefaultEncoding);
  return AlwaysSaveInDefaultEncoding;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::set_AlwaysSaveInDefaultEncoding(Office_2k::MsoTriState AlwaysSaveInDefaultEncoding/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AlwaysSaveInDefaultEncoding"), DISPID(2013));
  TAutoArgs<1> _args;
  _args[1] = (int)AlwaysSaveInDefaultEncoding /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::get_Fonts(Office_2k::WebPageFontsPtr* Fonts/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Fonts"), DISPID(2014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_2k::WebPageFonts**)Fonts /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::WebPageFontsPtr __fastcall
DefaultWebOptionsDispT<T>::get_Fonts(void)
{
  Office_2k::WebPageFontsPtr Fonts;
  this->get_Fonts((Office_2k::WebPageFontsPtr*)&Fonts);
  return Fonts;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
DefaultWebOptionsDispT<T>::get_FolderSuffix(BSTR* FolderSuffix/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FolderSuffix"), DISPID(2015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FolderSuffix /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
DefaultWebOptionsDispT<T>::get_FolderSuffix(void)
{
  BSTR FolderSuffix;
  this->get_FolderSuffix((BSTR*)&FolderSuffix);
  return FolderSuffix;
}

// *********************************************************************//
// DispIntf:  WebOptions
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934CE-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebOptionsDispT<T>::get_IncludeNavigation(Office_2k::MsoTriState* IncludeNavigation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncludeNavigation"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)IncludeNavigation /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
WebOptionsDispT<T>::get_IncludeNavigation(void)
{
  Office_2k::MsoTriState IncludeNavigation;
  this->get_IncludeNavigation((Office_2k::MsoTriState*)&IncludeNavigation);
  return IncludeNavigation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebOptionsDispT<T>::set_IncludeNavigation(Office_2k::MsoTriState IncludeNavigation/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncludeNavigation"), DISPID(2001));
  TAutoArgs<1> _args;
  _args[1] = (int)IncludeNavigation /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebOptionsDispT<T>::get_FrameColors(Powerpoint_2k::PpFrameColors* FrameColors/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FrameColors"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)FrameColors /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpFrameColors __fastcall
WebOptionsDispT<T>::get_FrameColors(void)
{
  Powerpoint_2k::PpFrameColors FrameColors;
  this->get_FrameColors((Powerpoint_2k::PpFrameColors*)&FrameColors);
  return FrameColors;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebOptionsDispT<T>::set_FrameColors(Powerpoint_2k::PpFrameColors FrameColors/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FrameColors"), DISPID(2002));
  TAutoArgs<1> _args;
  _args[1] = (int)FrameColors /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebOptionsDispT<T>::get_ResizeGraphics(Office_2k::MsoTriState* ResizeGraphics/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ResizeGraphics"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ResizeGraphics /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
WebOptionsDispT<T>::get_ResizeGraphics(void)
{
  Office_2k::MsoTriState ResizeGraphics;
  this->get_ResizeGraphics((Office_2k::MsoTriState*)&ResizeGraphics);
  return ResizeGraphics;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebOptionsDispT<T>::set_ResizeGraphics(Office_2k::MsoTriState ResizeGraphics/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ResizeGraphics"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = (int)ResizeGraphics /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebOptionsDispT<T>::get_ShowSlideAnimation(Office_2k::MsoTriState* ShowSlideAnimation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowSlideAnimation"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ShowSlideAnimation /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
WebOptionsDispT<T>::get_ShowSlideAnimation(void)
{
  Office_2k::MsoTriState ShowSlideAnimation;
  this->get_ShowSlideAnimation((Office_2k::MsoTriState*)&ShowSlideAnimation);
  return ShowSlideAnimation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebOptionsDispT<T>::set_ShowSlideAnimation(Office_2k::MsoTriState ShowSlideAnimation/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowSlideAnimation"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = (int)ShowSlideAnimation /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebOptionsDispT<T>::get_OrganizeInFolder(Office_2k::MsoTriState* OrganizeInFolder/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OrganizeInFolder"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)OrganizeInFolder /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
WebOptionsDispT<T>::get_OrganizeInFolder(void)
{
  Office_2k::MsoTriState OrganizeInFolder;
  this->get_OrganizeInFolder((Office_2k::MsoTriState*)&OrganizeInFolder);
  return OrganizeInFolder;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebOptionsDispT<T>::set_OrganizeInFolder(Office_2k::MsoTriState OrganizeInFolder/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OrganizeInFolder"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = (int)OrganizeInFolder /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebOptionsDispT<T>::get_UseLongFileNames(Office_2k::MsoTriState* UseLongFileNames/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UseLongFileNames"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)UseLongFileNames /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
WebOptionsDispT<T>::get_UseLongFileNames(void)
{
  Office_2k::MsoTriState UseLongFileNames;
  this->get_UseLongFileNames((Office_2k::MsoTriState*)&UseLongFileNames);
  return UseLongFileNames;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebOptionsDispT<T>::set_UseLongFileNames(Office_2k::MsoTriState UseLongFileNames/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UseLongFileNames"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = (int)UseLongFileNames /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebOptionsDispT<T>::get_RelyOnVML(Office_2k::MsoTriState* RelyOnVML/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RelyOnVML"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)RelyOnVML /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
WebOptionsDispT<T>::get_RelyOnVML(void)
{
  Office_2k::MsoTriState RelyOnVML;
  this->get_RelyOnVML((Office_2k::MsoTriState*)&RelyOnVML);
  return RelyOnVML;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebOptionsDispT<T>::set_RelyOnVML(Office_2k::MsoTriState RelyOnVML/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RelyOnVML"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = (int)RelyOnVML /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebOptionsDispT<T>::get_AllowPNG(Office_2k::MsoTriState* AllowPNG/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowPNG"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AllowPNG /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
WebOptionsDispT<T>::get_AllowPNG(void)
{
  Office_2k::MsoTriState AllowPNG;
  this->get_AllowPNG((Office_2k::MsoTriState*)&AllowPNG);
  return AllowPNG;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebOptionsDispT<T>::set_AllowPNG(Office_2k::MsoTriState AllowPNG/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowPNG"), DISPID(2008));
  TAutoArgs<1> _args;
  _args[1] = (int)AllowPNG /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebOptionsDispT<T>::get_ScreenSize(Office_2k::MsoScreenSize* ScreenSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScreenSize"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ScreenSize /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoScreenSize __fastcall
WebOptionsDispT<T>::get_ScreenSize(void)
{
  Office_2k::MsoScreenSize ScreenSize;
  this->get_ScreenSize((Office_2k::MsoScreenSize*)&ScreenSize);
  return ScreenSize;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebOptionsDispT<T>::set_ScreenSize(Office_2k::MsoScreenSize ScreenSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScreenSize"), DISPID(2009));
  TAutoArgs<1> _args;
  _args[1] = (int)ScreenSize /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebOptionsDispT<T>::get_Encoding(Office_2k::MsoEncoding* Encoding/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Encoding"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Encoding /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoEncoding __fastcall
WebOptionsDispT<T>::get_Encoding(void)
{
  Office_2k::MsoEncoding Encoding;
  this->get_Encoding((Office_2k::MsoEncoding*)&Encoding);
  return Encoding;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebOptionsDispT<T>::set_Encoding(Office_2k::MsoEncoding Encoding/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Encoding"), DISPID(2010));
  TAutoArgs<1> _args;
  _args[1] = (int)Encoding /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebOptionsDispT<T>::get_FolderSuffix(BSTR* FolderSuffix/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FolderSuffix"), DISPID(2011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FolderSuffix /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
WebOptionsDispT<T>::get_FolderSuffix(void)
{
  BSTR FolderSuffix;
  this->get_FolderSuffix((BSTR*)&FolderSuffix);
  return FolderSuffix;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebOptionsDispT<T>::UseDefaultFolderSuffix()
{
  _TDispID _dispid(*this, OLETEXT("UseDefaultFolderSuffix"), DISPID(2012));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  PublishObjects
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934CF-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PublishObjectsDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
PublishObjectsDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PublishObjectsDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PublishObjectsDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PublishObjectsDispT<T>::Item(int index/*[in]*/, 
                             Powerpoint_2k::PublishObjectPtr* Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PublishObject**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Powerpoint_2k::PublishObjectPtr __fastcall
PublishObjectsDispT<T>::Item(int index/*[in]*/)
{
  Powerpoint_2k::PublishObjectPtr Item;
  this->Item(index, (Powerpoint_2k::PublishObjectPtr*)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PublishObjectsDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
PublishObjectsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PublishObjectsDispT<T>::_Index(int index/*[in]*/, TVariant* _Index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Index"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(_Index /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
PublishObjectsDispT<T>::_Index(int index/*[in]*/)
{
  TVariant _Index;
  this->_Index(index, (TVariant*)&_Index);
  return _Index;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PublishObjectsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PublishObjectsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

// *********************************************************************//
// DispIntf:  PublishObject
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934D0-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PublishObjectDispT<T>::get_Application(Powerpoint_2k::PowerPointApplicationPtr* Application/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Powerpoint_2k::PowerPointApplication**)Application /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PowerPointApplicationPtr __fastcall
PublishObjectDispT<T>::get_Application(void)
{
  Powerpoint_2k::PowerPointApplicationPtr Application;
  this->get_Application((Powerpoint_2k::PowerPointApplicationPtr*)&Application);
  return Application;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PublishObjectDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PublishObjectDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PublishObjectDispT<T>::get_HTMLVersion(Powerpoint_2k::PpHTMLVersion* HTMLVersion/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLVersion"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)HTMLVersion /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpHTMLVersion __fastcall
PublishObjectDispT<T>::get_HTMLVersion(void)
{
  Powerpoint_2k::PpHTMLVersion HTMLVersion;
  this->get_HTMLVersion((Powerpoint_2k::PpHTMLVersion*)&HTMLVersion);
  return HTMLVersion;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PublishObjectDispT<T>::set_HTMLVersion(Powerpoint_2k::PpHTMLVersion HTMLVersion/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HTMLVersion"), DISPID(2003));
  TAutoArgs<1> _args;
  _args[1] = (int)HTMLVersion /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PublishObjectDispT<T>::get_SourceType(Powerpoint_2k::PpPublishSourceType* SourceType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SourceType"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)SourceType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpPublishSourceType __fastcall
PublishObjectDispT<T>::get_SourceType(void)
{
  Powerpoint_2k::PpPublishSourceType SourceType;
  this->get_SourceType((Powerpoint_2k::PpPublishSourceType*)&SourceType);
  return SourceType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PublishObjectDispT<T>::set_SourceType(Powerpoint_2k::PpPublishSourceType SourceType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SourceType"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = (int)SourceType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PublishObjectDispT<T>::get_RangeStart(int* RangeStart/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RangeStart"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RangeStart /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PublishObjectDispT<T>::get_RangeStart(void)
{
  int RangeStart;
  this->get_RangeStart((int*)&RangeStart);
  return RangeStart;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PublishObjectDispT<T>::set_RangeStart(int RangeStart/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RangeStart"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = RangeStart /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PublishObjectDispT<T>::get_RangeEnd(int* RangeEnd/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RangeEnd"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RangeEnd /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
PublishObjectDispT<T>::get_RangeEnd(void)
{
  int RangeEnd;
  this->get_RangeEnd((int*)&RangeEnd);
  return RangeEnd;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PublishObjectDispT<T>::set_RangeEnd(int RangeEnd/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RangeEnd"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = RangeEnd /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PublishObjectDispT<T>::get_SlideShowName(BSTR* SlideShowName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideShowName"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SlideShowName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PublishObjectDispT<T>::get_SlideShowName(void)
{
  BSTR SlideShowName;
  this->get_SlideShowName((BSTR*)&SlideShowName);
  return SlideShowName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PublishObjectDispT<T>::set_SlideShowName(BSTR SlideShowName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlideShowName"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = SlideShowName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PublishObjectDispT<T>::get_SpeakerNotes(Office_2k::MsoTriState* SpeakerNotes/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpeakerNotes"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)SpeakerNotes /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_2k::MsoTriState __fastcall
PublishObjectDispT<T>::get_SpeakerNotes(void)
{
  Office_2k::MsoTriState SpeakerNotes;
  this->get_SpeakerNotes((Office_2k::MsoTriState*)&SpeakerNotes);
  return SpeakerNotes;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PublishObjectDispT<T>::set_SpeakerNotes(Office_2k::MsoTriState SpeakerNotes/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpeakerNotes"), DISPID(2008));
  TAutoArgs<1> _args;
  _args[1] = (int)SpeakerNotes /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PublishObjectDispT<T>::get_FileName(BSTR* FileName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileName"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FileName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PublishObjectDispT<T>::get_FileName(void)
{
  BSTR FileName;
  this->get_FileName((BSTR*)&FileName);
  return FileName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PublishObjectDispT<T>::set_FileName(BSTR FileName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileName"), DISPID(2009));
  TAutoArgs<1> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PublishObjectDispT<T>::Publish()
{
  _TDispID _dispid(*this, OLETEXT("Publish"), DISPID(2010));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  Marker
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {914934D1-5A91-11CF-8700-00AA0060263B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
MarkerDispT<T>::get_MarkerType(Powerpoint_2k::PpMarkerType* MarkerType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarkerType"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)MarkerType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Powerpoint_2k::PpMarkerType __fastcall
MarkerDispT<T>::get_MarkerType(void)
{
  Powerpoint_2k::PpMarkerType MarkerType;
  this->get_MarkerType((Powerpoint_2k::PpMarkerType*)&MarkerType);
  return MarkerType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
MarkerDispT<T>::set_MarkerType(Powerpoint_2k::PpMarkerType MarkerType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarkerType"), DISPID(2001));
  TAutoArgs<1> _args;
  _args[1] = (int)MarkerType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
MarkerDispT<T>::get_Time(int* Time/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Time"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Time /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
MarkerDispT<T>::get_Time(void)
{
  int Time;
  this->get_Time((int*)&Time);
  return Time;
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : PowerPointGlobal
// Interface: TCOM_Global
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_Global, _Global, &CLSID_PowerPointGlobal, &IID__Global> CoPowerPointGlobal;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : PowerPointSlide
// Interface: TCOM_Slide
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_Slide, _Slide, &CLSID_PowerPointSlide, &IID__Slide> CoPowerPointSlide;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : PowerPointPresentation
// Interface: TCOM_Presentation
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_Presentation, _Presentation, &CLSID_PowerPointPresentation, &IID__Presentation> CoPowerPointPresentation;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : OLEControl
// Interface: TCOMOCXExtender
// *********************************************************************//
typedef TCoClassCreatorT<TCOMOCXExtender, OCXExtender, &CLSID_OLEControl, &IID_OCXExtender> CoOLEControl;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : PowerPointApplication
// Interface: TCOM_Application
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_Application, _Application, &CLSID_PowerPointApplication, &IID__Application> CoPowerPointApplication;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Master
// Interface: TCOM_Master
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_Master, _Master, &CLSID_Master, &IID__Master> CoMaster;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


};     // namespace Powerpoint_2k

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Powerpoint_2k;
#endif

#pragma option pop

#endif // __PowerPoint_2K_h__
